

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 17:52:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   115                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   116  0000                     
   117                           ; Version 1.45
   118                           ; Generated 16/11/2017 GMT
   119                           ; 
   120                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   121                           ; All rights reserved.
   122                           ; 
   123                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   124                           ; 
   125                           ; Redistribution and use in source and binary forms, with or without modification, are
   126                           ; permitted provided that the following conditions are met:
   127                           ; 
   128                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   129                           ;        conditions and the following disclaimer.
   130                           ; 
   131                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   132                           ;        of conditions and the following disclaimer in the documentation and/or other
   133                           ;        materials provided with the distribution.
   134                           ; 
   135                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   136                           ;        software without specific prior written permission.
   137                           ; 
   138                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   139                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   140                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   141                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   142                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   143                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   144                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   145                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   146                           ; 
   147                           ; 
   148                           ; Code-generator required, PIC18F45K22 Definitions
   149                           ; 
   150                           ; SFR Addresses
   151  0000                     
   152 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   153  0000                     
   154                           	psect	idataCOMRAM
   155  00323C                     __pidataCOMRAM:
   156                           	opt stack 0
   157                           
   158                           ;initializer for _writeAddress
   159  00323C  4000               	dw	16384
   160  00323E  0000               	dw	0
   161                           
   162                           	psect	idataBANK0
   163  003240                     __pidataBANK0:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _readAddress
   167  003240  4000               	dw	16384
   168  003242  0000               	dw	0
   169                           
   170                           	psect	idataBANK1
   171  003216                     __pidataBANK1:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _groupsArray
   175  003216  FA                 	db	low _GroupRx
   176  003217  2B                 	db	high _GroupRx
   177  003218  50                 	db	low _GroupTx
   178  003219  29                 	db	high _GroupTx
   179  00321A  A0                 	db	low _GroupCommon
   180  00321B  30                 	db	high _GroupCommon
   181  00321C  00                 	db	0
   182  00321D  00                 	db	0
   183  00321E  00                 	db	0
   184  00321F  00                 	db	0
   185  003220  00                 	db	0
   186  003221  00                 	db	0
   187                           
   188                           	psect	mediumconst
   189  007A80                     __pmediumconst:
   190                           	opt stack 0
   191  007A80  00                 	db	0
   192  007A81                     _PLL_INIT_REGISTERS:
   193                           	opt stack 0
   194  007A81  041C               	dw	1052
   195  007A83  0001               	dw	1
   196  007A85  300B               	dw	12299
   197  007A87  0061               	dw	97
   198  007A89  323A               	dw	12858
   199  007A8B  00C0               	dw	192
   200  007A8D  BCC9               	dw	48329
   201  007A8F  2221               	dw	8737
   202  007A91  0428               	dw	1064
   203  007A93  102D               	dw	4141
   204  007A95  00E7               	dw	231
   205  007A97  1200               	dw	4608
   206  007A99  2076               	dw	8310
   207  007A9B  3501               	dw	13569
   208  007A9D  0025               	dw	37
   209  007A9F  0080               	dw	128
   210  007AA1  9B84               	dw	39812
   211  007AA3  3400               	dw	13312
   212  007AA5  0003               	dw	3
   213  007AA7  0000               	dw	0
   214  007AA9  0012               	dw	18
   215  007AAB  0000               	dw	0
   216  007AAD  0001               	dw	1
   217  007AAF  0600               	dw	1536
   218  007AB1  0340               	dw	832
   219  007AB3  0020               	dw	32
   220  007AB5                     __end_of_PLL_INIT_REGISTERS:
   221                           	opt stack 0
   222  007AB5                     _dpowers:
   223                           	opt stack 0
   224  007AB5  0001               	dw	1
   225  007AB7  000A               	dw	10
   226  007AB9  0064               	dw	100
   227  007ABB  03E8               	dw	1000
   228  007ABD  2710               	dw	10000
   229  007ABF                     __end_of_dpowers:
   230                           	opt stack 0
   231  007ABF                     _channelArr:
   232                           	opt stack 0
   233  007ABF  04                 	db	4
   234  007AC0  05                 	db	5
   235  007AC1  06                 	db	6
   236  007AC2  07                 	db	7
   237  007AC3                     __end_of_channelArr:
   238                           	opt stack 0
   239  007AC3                     exp@coeff:
   240                           	opt stack 0
   241  007AC3  00                 	db	0
   242  007AC4  80                 	db	128
   243  007AC5  3F                 	db	63
   244  007AC6  72                 	db	114
   245  007AC7  31                 	db	49
   246  007AC8  3F                 	db	63
   247  007AC9  FE                 	db	254
   248  007ACA  75                 	db	117
   249  007ACB  3E                 	db	62
   250  007ACC  58                 	db	88
   251  007ACD  63                 	db	99
   252  007ACE  3D                 	db	61
   253  007ACF  95                 	db	149
   254  007AD0  1D                 	db	29
   255  007AD1  3C                 	db	60
   256  007AD2  C5                 	db	197
   257  007AD3  AE                 	db	174
   258  007AD4  3A                 	db	58
   259  007AD5  79                 	db	121
   260  007AD6  21                 	db	33
   261  007AD7  39                 	db	57
   262  007AD8  94                 	db	148
   263  007AD9  80                 	db	128
   264  007ADA  37                 	db	55
   265  007ADB  93                 	db	147
   266  007ADC  A7                 	db	167
   267  007ADD  35                 	db	53
   268  007ADE  56                 	db	86
   269  007ADF  15                 	db	21
   270  007AE0  34                 	db	52
   271  007AE1                     __end_ofexp@coeff:
   272                           	opt stack 0
   273  007AE1                     log@coeff:
   274                           	opt stack 0
   275  007AE1  00                 	db	0
   276  007AE2  00                 	db	0
   277  007AE3  00                 	db	0
   278  007AE4  00                 	db	0
   279  007AE5  80                 	db	128
   280  007AE6  3F                 	db	63
   281  007AE7  F0                 	db	240
   282  007AE8  FF                 	db	255
   283  007AE9  BE                 	db	190
   284  007AEA  E2                 	db	226
   285  007AEB  A9                 	db	169
   286  007AEC  3E                 	db	62
   287  007AED  83                 	db	131
   288  007AEE  76                 	db	118
   289  007AEF  BE                 	db	190
   290  007AF0  AE                 	db	174
   291  007AF1  2B                 	db	43
   292  007AF2  3E                 	db	62
   293  007AF3  3C                 	db	60
   294  007AF4  C3                 	db	195
   295  007AF5  BD                 	db	189
   296  007AF6  D2                 	db	210
   297  007AF7  13                 	db	19
   298  007AF8  3D                 	db	61
   299  007AF9  78                 	db	120
   300  007AFA  D3                 	db	211
   301  007AFB  BB                 	db	187
   302  007AFC                     __end_oflog@coeff:
   303                           	opt stack 0
   304  007AFC                     STR_33:
   305                           
   306                           ; BSR set to: 1
   307  007AFC  24                 	db	36
   308  007AFD  52                 	db	82	;'R'
   309  007AFE  43                 	db	67	;'C'
   310  007AFF  50                 	db	80	;'P'
   311  007B00  20                 	db	32
   312  007B01  3C                 	db	60	;'<'
   313  007B02  58                 	db	88	;'X'
   314  007B03  3E                 	db	62	;'>'
   315  007B04  3C                 	db	60	;'<'
   316  007B05  63                 	db	99	;'c'
   317  007B06  72                 	db	114	;'r'
   318  007B07  3E                 	db	62	;'>'
   319  007B08  20                 	db	32
   320  007B09  20                 	db	32
   321  007B0A  20                 	db	32
   322  007B0B  20                 	db	32
   323  007B0C  20                 	db	32
   324  007B0D  53                 	db	83	;'S'
   325  007B0E  65                 	db	101	;'e'
   326  007B0F  74                 	db	116	;'t'
   327  007B10  20                 	db	32
   328  007B11  43                 	db	67	;'C'
   329  007B12  6F                 	db	111	;'o'
   330  007B13  6D                 	db	109	;'m'
   331  007B14  70                 	db	112	;'p'
   332  007B15  72                 	db	114	;'r'
   333  007B16  65                 	db	101	;'e'
   334  007B17  73                 	db	115	;'s'
   335  007B18  73                 	db	115	;'s'
   336  007B19  69                 	db	105	;'i'
   337  007B1A  6F                 	db	111	;'o'
   338  007B1B  6E                 	db	110	;'n'
   339  007B1C  20                 	db	32
   340  007B1D  6F                 	db	111	;'o'
   341  007B1E  70                 	db	112	;'p'
   342  007B1F  65                 	db	101	;'e'
   343  007B20  72                 	db	114	;'r'
   344  007B21  61                 	db	97	;'a'
   345  007B22  74                 	db	116	;'t'
   346  007B23  69                 	db	105	;'i'
   347  007B24  6F                 	db	111	;'o'
   348  007B25  6E                 	db	110	;'n'
   349  007B26  20                 	db	32
   350  007B27  6D                 	db	109	;'m'
   351  007B28  6F                 	db	111	;'o'
   352  007B29  64                 	db	100	;'d'
   353  007B2A  65                 	db	101	;'e'
   354  007B2B  20                 	db	32
   355  007B2C  61                 	db	97	;'a'
   356  007B2D  74                 	db	116	;'t'
   357  007B2E  20                 	db	32
   358  007B2F  52                 	db	82	;'R'
   359  007B30  58                 	db	88	;'X'
   360  007B31  20                 	db	32
   361  007B32  73                 	db	115	;'s'
   362  007B33  79                 	db	121	;'y'
   363  007B34  73                 	db	115	;'s'
   364  007B35  74                 	db	116	;'t'
   365  007B36  65                 	db	101	;'e'
   366  007B37  6D                 	db	109	;'m'
   367  007B38  3A                 	db	58	;':'
   368  007B39  20                 	db	32
   369  007B3A  41                 	db	65	;'A'
   370  007B3B  75                 	db	117	;'u'
   371  007B3C  74                 	db	116	;'t'
   372  007B3D  6F                 	db	111	;'o'
   373  007B3E  6D                 	db	109	;'m'
   374  007B3F  61                 	db	97	;'a'
   375  007B40  74                 	db	116	;'t'
   376  007B41  69                 	db	105	;'i'
   377  007B42  63                 	db	99	;'c'
   378  007B43  5B                 	db	91	;'['
   379  007B44  31                 	db	49	;'1'
   380  007B45  5D                 	db	93	;']'
   381  007B46  20                 	db	32
   382  007B47  4D                 	db	77	;'M'
   383  007B48  61                 	db	97	;'a'
   384  007B49  6E                 	db	110	;'n'
   385  007B4A  75                 	db	117	;'u'
   386  007B4B  61                 	db	97	;'a'
   387  007B4C  6C                 	db	108	;'l'
   388  007B4D  5B                 	db	91	;'['
   389  007B4E  30                 	db	48	;'0'
   390  007B4F  5D                 	db	93	;']'
   391  007B50  20                 	db	32
   392  007B51  5B                 	db	91	;'['
   393  007B52  44                 	db	68	;'D'
   394  007B53  65                 	db	101	;'e'
   395  007B54  66                 	db	102	;'f'
   396  007B55  61                 	db	97	;'a'
   397  007B56  75                 	db	117	;'u'
   398  007B57  6C                 	db	108	;'l'
   399  007B58  74                 	db	116	;'t'
   400  007B59  20                 	db	32
   401  007B5A  3D                 	db	61	;'='
   402  007B5B  20                 	db	32
   403  007B5C  30                 	db	48	;'0'
   404  007B5D  5D                 	db	93	;']'
   405  007B5E  0D                 	db	13
   406  007B5F  0A                 	db	10
   407  007B60  00                 	db	0
   408  007B61                     STR_32:
   409                           
   410                           ; BSR set to: 1
   411  007B61  24                 	db	36
   412  007B62  52                 	db	82	;'R'
   413  007B63  43                 	db	67	;'C'
   414  007B64  52                 	db	82	;'R'
   415  007B65  20                 	db	32
   416  007B66  3C                 	db	60	;'<'
   417  007B67  58                 	db	88	;'X'
   418  007B68  3E                 	db	62	;'>'
   419  007B69  3C                 	db	60	;'<'
   420  007B6A  63                 	db	99	;'c'
   421  007B6B  72                 	db	114	;'r'
   422  007B6C  3E                 	db	62	;'>'
   423  007B6D  20                 	db	32
   424  007B6E  20                 	db	32
   425  007B6F  20                 	db	32
   426  007B70  20                 	db	32
   427  007B71  20                 	db	32
   428  007B72  53                 	db	83	;'S'
   429  007B73  65                 	db	101	;'e'
   430  007B74  74                 	db	116	;'t'
   431  007B75  20                 	db	32
   432  007B76  43                 	db	67	;'C'
   433  007B77  6F                 	db	111	;'o'
   434  007B78  6D                 	db	109	;'m'
   435  007B79  70                 	db	112	;'p'
   436  007B7A  72                 	db	114	;'r'
   437  007B7B  65                 	db	101	;'e'
   438  007B7C  73                 	db	115	;'s'
   439  007B7D  73                 	db	115	;'s'
   440  007B7E  69                 	db	105	;'i'
   441  007B7F  6F                 	db	111	;'o'
   442  007B80  6E                 	db	110	;'n'
   443  007B81  20                 	db	32
   444  007B82  72                 	db	114	;'r'
   445  007B83  61                 	db	97	;'a'
   446  007B84  6E                 	db	110	;'n'
   447  007B85  67                 	db	103	;'g'
   448  007B86  65                 	db	101	;'e'
   449  007B87  20                 	db	32
   450  007B88  61                 	db	97	;'a'
   451  007B89  74                 	db	116	;'t'
   452  007B8A  20                 	db	32
   453  007B8B  52                 	db	82	;'R'
   454  007B8C  58                 	db	88	;'X'
   455  007B8D  20                 	db	32
   456  007B8E  73                 	db	115	;'s'
   457  007B8F  79                 	db	121	;'y'
   458  007B90  73                 	db	115	;'s'
   459  007B91  74                 	db	116	;'t'
   460  007B92  65                 	db	101	;'e'
   461  007B93  6D                 	db	109	;'m'
   462  007B94  2E                 	db	46
   463  007B95  20                 	db	32
   464  007B96  48                 	db	72	;'H'
   465  007B97  69                 	db	105	;'i'
   466  007B98  67                 	db	103	;'g'
   467  007B99  68                 	db	104	;'h'
   468  007B9A  20                 	db	32
   469  007B9B  5B                 	db	91	;'['
   470  007B9C  31                 	db	49	;'1'
   471  007B9D  5D                 	db	93	;']'
   472  007B9E  20                 	db	32
   473  007B9F  4C                 	db	76	;'L'
   474  007BA0  6F                 	db	111	;'o'
   475  007BA1  77                 	db	119	;'w'
   476  007BA2  20                 	db	32
   477  007BA3  5B                 	db	91	;'['
   478  007BA4  30                 	db	48	;'0'
   479  007BA5  5D                 	db	93	;']'
   480  007BA6  20                 	db	32
   481  007BA7  5B                 	db	91	;'['
   482  007BA8  44                 	db	68	;'D'
   483  007BA9  65                 	db	101	;'e'
   484  007BAA  66                 	db	102	;'f'
   485  007BAB  61                 	db	97	;'a'
   486  007BAC  75                 	db	117	;'u'
   487  007BAD  6C                 	db	108	;'l'
   488  007BAE  74                 	db	116	;'t'
   489  007BAF  20                 	db	32
   490  007BB0  3D                 	db	61	;'='
   491  007BB1  20                 	db	32
   492  007BB2  30                 	db	48	;'0'
   493  007BB3  5D                 	db	93	;']'
   494  007BB4  0D                 	db	13
   495  007BB5  0A                 	db	10
   496  007BB6  00                 	db	0
   497  007BB7                     STR_37:
   498                           
   499                           ; BSR set to: 1
   500  007BB7  24                 	db	36
   501  007BB8  53                 	db	83	;'S'
   502  007BB9  42                 	db	66	;'B'
   503  007BBA  55                 	db	85	;'U'
   504  007BBB  20                 	db	32
   505  007BBC  3C                 	db	60	;'<'
   506  007BBD  58                 	db	88	;'X'
   507  007BBE  3E                 	db	62	;'>'
   508  007BBF  3C                 	db	60	;'<'
   509  007BC0  63                 	db	99	;'c'
   510  007BC1  72                 	db	114	;'r'
   511  007BC2  3E                 	db	62	;'>'
   512  007BC3  20                 	db	32
   513  007BC4  20                 	db	32
   514  007BC5  20                 	db	32
   515  007BC6  20                 	db	32
   516  007BC7  20                 	db	32
   517  007BC8  53                 	db	83	;'S'
   518  007BC9  65                 	db	101	;'e'
   519  007BCA  74                 	db	116	;'t'
   520  007BCB  20                 	db	32
   521  007BCC  55                 	db	85	;'U'
   522  007BCD  41                 	db	65	;'A'
   523  007BCE  52                 	db	82	;'R'
   524  007BCF  54                 	db	84	;'T'
   525  007BD0  20                 	db	32
   526  007BD1  61                 	db	97	;'a'
   527  007BD2  75                 	db	117	;'u'
   528  007BD3  74                 	db	116	;'t'
   529  007BD4  6F                 	db	111	;'o'
   530  007BD5  6D                 	db	109	;'m'
   531  007BD6  61                 	db	97	;'a'
   532  007BD7  74                 	db	116	;'t'
   533  007BD8  69                 	db	105	;'i'
   534  007BD9  63                 	db	99	;'c'
   535  007BDA  20                 	db	32
   536  007BDB  6F                 	db	111	;'o'
   537  007BDC  70                 	db	112	;'p'
   538  007BDD  65                 	db	101	;'e'
   539  007BDE  72                 	db	114	;'r'
   540  007BDF  61                 	db	97	;'a'
   541  007BE0  74                 	db	116	;'t'
   542  007BE1  69                 	db	105	;'i'
   543  007BE2  6F                 	db	111	;'o'
   544  007BE3  6E                 	db	110	;'n'
   545  007BE4  3A                 	db	58	;':'
   546  007BE5  20                 	db	32
   547  007BE6  41                 	db	65	;'A'
   548  007BE7  75                 	db	117	;'u'
   549  007BE8  74                 	db	116	;'t'
   550  007BE9  6F                 	db	111	;'o'
   551  007BEA  6D                 	db	109	;'m'
   552  007BEB  61                 	db	97	;'a'
   553  007BEC  74                 	db	116	;'t'
   554  007BED  69                 	db	105	;'i'
   555  007BEE  63                 	db	99	;'c'
   556  007BEF  5B                 	db	91	;'['
   557  007BF0  31                 	db	49	;'1'
   558  007BF1  5D                 	db	93	;']'
   559  007BF2  20                 	db	32
   560  007BF3  4D                 	db	77	;'M'
   561  007BF4  61                 	db	97	;'a'
   562  007BF5  6E                 	db	110	;'n'
   563  007BF6  75                 	db	117	;'u'
   564  007BF7  61                 	db	97	;'a'
   565  007BF8  6C                 	db	108	;'l'
   566  007BF9  5B                 	db	91	;'['
   567  007BFA  30                 	db	48	;'0'
   568  007BFB  5D                 	db	93	;']'
   569  007BFC  20                 	db	32
   570  007BFD  5B                 	db	91	;'['
   571  007BFE  44                 	db	68	;'D'
   572  007BFF  65                 	db	101	;'e'
   573  007C00  66                 	db	102	;'f'
   574  007C01  61                 	db	97	;'a'
   575  007C02  75                 	db	117	;'u'
   576  007C03  6C                 	db	108	;'l'
   577  007C04  74                 	db	116	;'t'
   578  007C05  20                 	db	32
   579  007C06  3D                 	db	61	;'='
   580  007C07  20                 	db	32
   581  007C08  30                 	db	48	;'0'
   582  007C09  5D                 	db	93	;']'
   583  007C0A  0D                 	db	13
   584  007C0B  0A                 	db	10
   585  007C0C  00                 	db	0
   586  007C0D                     STR_26:
   587                           
   588                           ; BSR set to: 1
   589  007C0D  24                 	db	36
   590  007C0E  54                 	db	84	;'T'
   591  007C0F  58                 	db	88	;'X'
   592  007C10  20                 	db	32
   593  007C11  3C                 	db	60	;'<'
   594  007C12  58                 	db	88	;'X'
   595  007C13  3E                 	db	62	;'>'
   596  007C14  3C                 	db	60	;'<'
   597  007C15  63                 	db	99	;'c'
   598  007C16  72                 	db	114	;'r'
   599  007C17  3E                 	db	62	;'>'
   600  007C18  20                 	db	32
   601  007C19  20                 	db	32
   602  007C1A  20                 	db	32
   603  007C1B  20                 	db	32
   604  007C1C  20                 	db	32
   605  007C1D  20                 	db	32
   606  007C1E  54                 	db	84	;'T'
   607  007C1F  75                 	db	117	;'u'
   608  007C20  72                 	db	114	;'r'
   609  007C21  6E                 	db	110	;'n'
   610  007C22  20                 	db	32
   611  007C23  6F                 	db	111	;'o'
   612  007C24  6E                 	db	110	;'n'
   613  007C25  5B                 	db	91	;'['
   614  007C26  31                 	db	49	;'1'
   615  007C27  5D                 	db	93	;']'
   616  007C28  20                 	db	32
   617  007C29  2F                 	db	47
   618  007C2A  20                 	db	32
   619  007C2B  6F                 	db	111	;'o'
   620  007C2C  66                 	db	102	;'f'
   621  007C2D  66                 	db	102	;'f'
   622  007C2E  5B                 	db	91	;'['
   623  007C2F  30                 	db	48	;'0'
   624  007C30  5D                 	db	93	;']'
   625  007C31  20                 	db	32
   626  007C32  74                 	db	116	;'t'
   627  007C33  72                 	db	114	;'r'
   628  007C34  61                 	db	97	;'a'
   629  007C35  6E                 	db	110	;'n'
   630  007C36  73                 	db	115	;'s'
   631  007C37  6D                 	db	109	;'m'
   632  007C38  69                 	db	105	;'i'
   633  007C39  73                 	db	115	;'s'
   634  007C3A  73                 	db	115	;'s'
   635  007C3B  69                 	db	105	;'i'
   636  007C3C  6F                 	db	111	;'o'
   637  007C3D  6E                 	db	110	;'n'
   638  007C3E  20                 	db	32
   639  007C3F  61                 	db	97	;'a'
   640  007C40  74                 	db	116	;'t'
   641  007C41  20                 	db	32
   642  007C42  54                 	db	84	;'T'
   643  007C43  58                 	db	88	;'X'
   644  007C44  20                 	db	32
   645  007C45  73                 	db	115	;'s'
   646  007C46  79                 	db	121	;'y'
   647  007C47  73                 	db	115	;'s'
   648  007C48  74                 	db	116	;'t'
   649  007C49  65                 	db	101	;'e'
   650  007C4A  6D                 	db	109	;'m'
   651  007C4B  20                 	db	32
   652  007C4C  5B                 	db	91	;'['
   653  007C4D  44                 	db	68	;'D'
   654  007C4E  65                 	db	101	;'e'
   655  007C4F  66                 	db	102	;'f'
   656  007C50  61                 	db	97	;'a'
   657  007C51  75                 	db	117	;'u'
   658  007C52  6C                 	db	108	;'l'
   659  007C53  74                 	db	116	;'t'
   660  007C54  20                 	db	32
   661  007C55  3D                 	db	61	;'='
   662  007C56  20                 	db	32
   663  007C57  30                 	db	48	;'0'
   664  007C58  5D                 	db	93	;']'
   665  007C59  0D                 	db	13
   666  007C5A  0A                 	db	10
   667  007C5B  00                 	db	0
   668  007C5C                     STR_25:
   669                           
   670                           ; BSR set to: 1
   671  007C5C  24                 	db	36
   672  007C5D  54                 	db	84	;'T'
   673  007C5E  42                 	db	66	;'B'
   674  007C5F  20                 	db	32
   675  007C60  3C                 	db	60	;'<'
   676  007C61  58                 	db	88	;'X'
   677  007C62  3E                 	db	62	;'>'
   678  007C63  3C                 	db	60	;'<'
   679  007C64  63                 	db	99	;'c'
   680  007C65  72                 	db	114	;'r'
   681  007C66  3E                 	db	62	;'>'
   682  007C67  20                 	db	32
   683  007C68  20                 	db	32
   684  007C69  20                 	db	32
   685  007C6A  20                 	db	32
   686  007C6B  20                 	db	32
   687  007C6C  20                 	db	32
   688  007C6D  54                 	db	84	;'T'
   689  007C6E  75                 	db	117	;'u'
   690  007C6F  72                 	db	114	;'r'
   691  007C70  6E                 	db	110	;'n'
   692  007C71  20                 	db	32
   693  007C72  6F                 	db	111	;'o'
   694  007C73  6E                 	db	110	;'n'
   695  007C74  5B                 	db	91	;'['
   696  007C75  31                 	db	49	;'1'
   697  007C76  5D                 	db	93	;']'
   698  007C77  20                 	db	32
   699  007C78  2F                 	db	47
   700  007C79  20                 	db	32
   701  007C7A  6F                 	db	111	;'o'
   702  007C7B  66                 	db	102	;'f'
   703  007C7C  66                 	db	102	;'f'
   704  007C7D  5B                 	db	91	;'['
   705  007C7E  30                 	db	48	;'0'
   706  007C7F  5D                 	db	93	;']'
   707  007C80  20                 	db	32
   708  007C81  42                 	db	66	;'B'
   709  007C82  49                 	db	73	;'I'
   710  007C83  54                 	db	84	;'T'
   711  007C84  20                 	db	32
   712  007C85  6D                 	db	109	;'m'
   713  007C86  6F                 	db	111	;'o'
   714  007C87  64                 	db	100	;'d'
   715  007C88  65                 	db	101	;'e'
   716  007C89  20                 	db	32
   717  007C8A  61                 	db	97	;'a'
   718  007C8B  74                 	db	116	;'t'
   719  007C8C  20                 	db	32
   720  007C8D  54                 	db	84	;'T'
   721  007C8E  58                 	db	88	;'X'
   722  007C8F  20                 	db	32
   723  007C90  73                 	db	115	;'s'
   724  007C91  79                 	db	121	;'y'
   725  007C92  73                 	db	115	;'s'
   726  007C93  74                 	db	116	;'t'
   727  007C94  65                 	db	101	;'e'
   728  007C95  6D                 	db	109	;'m'
   729  007C96  20                 	db	32
   730  007C97  5B                 	db	91	;'['
   731  007C98  44                 	db	68	;'D'
   732  007C99  65                 	db	101	;'e'
   733  007C9A  66                 	db	102	;'f'
   734  007C9B  61                 	db	97	;'a'
   735  007C9C  75                 	db	117	;'u'
   736  007C9D  6C                 	db	108	;'l'
   737  007C9E  74                 	db	116	;'t'
   738  007C9F  20                 	db	32
   739  007CA0  3D                 	db	61	;'='
   740  007CA1  20                 	db	32
   741  007CA2  30                 	db	48	;'0'
   742  007CA3  5D                 	db	93	;']'
   743  007CA4  0D                 	db	13
   744  007CA5  0A                 	db	10
   745  007CA6  00                 	db	0
   746  007CA7                     STR_28:
   747                           
   748                           ; BSR set to: 1
   749  007CA7  24                 	db	36
   750  007CA8  52                 	db	82	;'R'
   751  007CA9  49                 	db	73	;'I'
   752  007CAA  20                 	db	32
   753  007CAB  3C                 	db	60	;'<'
   754  007CAC  58                 	db	88	;'X'
   755  007CAD  58                 	db	88	;'X'
   756  007CAE  58                 	db	88	;'X'
   757  007CAF  58                 	db	88	;'X'
   758  007CB0  3E                 	db	62	;'>'
   759  007CB1  3C                 	db	60	;'<'
   760  007CB2  63                 	db	99	;'c'
   761  007CB3  72                 	db	114	;'r'
   762  007CB4  3E                 	db	62	;'>'
   763  007CB5  20                 	db	32
   764  007CB6  20                 	db	32
   765  007CB7  20                 	db	32
   766  007CB8  49                 	db	73	;'I'
   767  007CB9  6E                 	db	110	;'n'
   768  007CBA  69                 	db	105	;'i'
   769  007CBB  74                 	db	116	;'t'
   770  007CBC  20                 	db	32
   771  007CBD  52                 	db	82	;'R'
   772  007CBE  58                 	db	88	;'X'
   773  007CBF  20                 	db	32
   774  007CC0  73                 	db	115	;'s'
   775  007CC1  79                 	db	121	;'y'
   776  007CC2  73                 	db	115	;'s'
   777  007CC3  74                 	db	116	;'t'
   778  007CC4  65                 	db	101	;'e'
   779  007CC5  6D                 	db	109	;'m'
   780  007CC6  20                 	db	32
   781  007CC7  61                 	db	97	;'a'
   782  007CC8  6E                 	db	110	;'n'
   783  007CC9  64                 	db	100	;'d'
   784  007CCA  20                 	db	32
   785  007CCB  73                 	db	115	;'s'
   786  007CCC  65                 	db	101	;'e'
   787  007CCD  74                 	db	116	;'t'
   788  007CCE  20                 	db	32
   789  007CCF  66                 	db	102	;'f'
   790  007CD0  72                 	db	114	;'r'
   791  007CD1  65                 	db	101	;'e'
   792  007CD2  71                 	db	113	;'q'
   793  007CD3  75                 	db	117	;'u'
   794  007CD4  65                 	db	101	;'e'
   795  007CD5  6E                 	db	110	;'n'
   796  007CD6  63                 	db	99	;'c'
   797  007CD7  79                 	db	121	;'y'
   798  007CD8  20                 	db	32
   799  007CD9  61                 	db	97	;'a'
   800  007CDA  74                 	db	116	;'t'
   801  007CDB  20                 	db	32
   802  007CDC  58                 	db	88	;'X'
   803  007CDD  58                 	db	88	;'X'
   804  007CDE  58                 	db	88	;'X'
   805  007CDF  58                 	db	88	;'X'
   806  007CE0  20                 	db	32
   807  007CE1  28                 	db	40
   808  007CE2  30                 	db	48	;'0'
   809  007CE3  2D                 	db	45
   810  007CE4  39                 	db	57	;'9'
   811  007CE5  39                 	db	57	;'9'
   812  007CE6  39                 	db	57	;'9'
   813  007CE7  39                 	db	57	;'9'
   814  007CE8  29                 	db	41
   815  007CE9  5B                 	db	91	;'['
   816  007CEA  4D                 	db	77	;'M'
   817  007CEB  48                 	db	72	;'H'
   818  007CEC  7A                 	db	122	;'z'
   819  007CED  5D                 	db	93	;']'
   820  007CEE  0D                 	db	13
   821  007CEF  0A                 	db	10
   822  007CF0  00                 	db	0
   823  007CF1                     STR_22:
   824                           
   825                           ; BSR set to: 1
   826  007CF1  24                 	db	36
   827  007CF2  54                 	db	84	;'T'
   828  007CF3  49                 	db	73	;'I'
   829  007CF4  20                 	db	32
   830  007CF5  3C                 	db	60	;'<'
   831  007CF6  58                 	db	88	;'X'
   832  007CF7  58                 	db	88	;'X'
   833  007CF8  58                 	db	88	;'X'
   834  007CF9  58                 	db	88	;'X'
   835  007CFA  3E                 	db	62	;'>'
   836  007CFB  3C                 	db	60	;'<'
   837  007CFC  63                 	db	99	;'c'
   838  007CFD  72                 	db	114	;'r'
   839  007CFE  3E                 	db	62	;'>'
   840  007CFF  20                 	db	32
   841  007D00  20                 	db	32
   842  007D01  20                 	db	32
   843  007D02  49                 	db	73	;'I'
   844  007D03  6E                 	db	110	;'n'
   845  007D04  69                 	db	105	;'i'
   846  007D05  74                 	db	116	;'t'
   847  007D06  20                 	db	32
   848  007D07  54                 	db	84	;'T'
   849  007D08  58                 	db	88	;'X'
   850  007D09  20                 	db	32
   851  007D0A  73                 	db	115	;'s'
   852  007D0B  79                 	db	121	;'y'
   853  007D0C  73                 	db	115	;'s'
   854  007D0D  74                 	db	116	;'t'
   855  007D0E  65                 	db	101	;'e'
   856  007D0F  6D                 	db	109	;'m'
   857  007D10  20                 	db	32
   858  007D11  61                 	db	97	;'a'
   859  007D12  6E                 	db	110	;'n'
   860  007D13  64                 	db	100	;'d'
   861  007D14  20                 	db	32
   862  007D15  73                 	db	115	;'s'
   863  007D16  65                 	db	101	;'e'
   864  007D17  74                 	db	116	;'t'
   865  007D18  20                 	db	32
   866  007D19  66                 	db	102	;'f'
   867  007D1A  72                 	db	114	;'r'
   868  007D1B  65                 	db	101	;'e'
   869  007D1C  71                 	db	113	;'q'
   870  007D1D  75                 	db	117	;'u'
   871  007D1E  65                 	db	101	;'e'
   872  007D1F  6E                 	db	110	;'n'
   873  007D20  63                 	db	99	;'c'
   874  007D21  79                 	db	121	;'y'
   875  007D22  20                 	db	32
   876  007D23  28                 	db	40
   877  007D24  30                 	db	48	;'0'
   878  007D25  2D                 	db	45
   879  007D26  39                 	db	57	;'9'
   880  007D27  39                 	db	57	;'9'
   881  007D28  39                 	db	57	;'9'
   882  007D29  39                 	db	57	;'9'
   883  007D2A  29                 	db	41
   884  007D2B  5B                 	db	91	;'['
   885  007D2C  4D                 	db	77	;'M'
   886  007D2D  48                 	db	72	;'H'
   887  007D2E  7A                 	db	122	;'z'
   888  007D2F  5D                 	db	93	;']'
   889  007D30  0D                 	db	13
   890  007D31  0A                 	db	10
   891  007D32  00                 	db	0
   892  007D33                     STR_30:
   893                           
   894                           ; BSR set to: 1
   895  007D33  24                 	db	36
   896  007D34  52                 	db	82	;'R'
   897  007D35  42                 	db	66	;'B'
   898  007D36  20                 	db	32
   899  007D37  3C                 	db	60	;'<'
   900  007D38  58                 	db	88	;'X'
   901  007D39  3E                 	db	62	;'>'
   902  007D3A  3C                 	db	60	;'<'
   903  007D3B  63                 	db	99	;'c'
   904  007D3C  72                 	db	114	;'r'
   905  007D3D  3E                 	db	62	;'>'
   906  007D3E  20                 	db	32
   907  007D3F  20                 	db	32
   908  007D40  20                 	db	32
   909  007D41  20                 	db	32
   910  007D42  20                 	db	32
   911  007D43  20                 	db	32
   912  007D44  54                 	db	84	;'T'
   913  007D45  75                 	db	117	;'u'
   914  007D46  72                 	db	114	;'r'
   915  007D47  6E                 	db	110	;'n'
   916  007D48  20                 	db	32
   917  007D49  6F                 	db	111	;'o'
   918  007D4A  6E                 	db	110	;'n'
   919  007D4B  5B                 	db	91	;'['
   920  007D4C  31                 	db	49	;'1'
   921  007D4D  5D                 	db	93	;']'
   922  007D4E  20                 	db	32
   923  007D4F  2F                 	db	47
   924  007D50  20                 	db	32
   925  007D51  6F                 	db	111	;'o'
   926  007D52  66                 	db	102	;'f'
   927  007D53  66                 	db	102	;'f'
   928  007D54  5B                 	db	91	;'['
   929  007D55  30                 	db	48	;'0'
   930  007D56  5D                 	db	93	;']'
   931  007D57  20                 	db	32
   932  007D58  42                 	db	66	;'B'
   933  007D59  49                 	db	73	;'I'
   934  007D5A  54                 	db	84	;'T'
   935  007D5B  20                 	db	32
   936  007D5C  6D                 	db	109	;'m'
   937  007D5D  6F                 	db	111	;'o'
   938  007D5E  64                 	db	100	;'d'
   939  007D5F  65                 	db	101	;'e'
   940  007D60  20                 	db	32
   941  007D61  61                 	db	97	;'a'
   942  007D62  74                 	db	116	;'t'
   943  007D63  20                 	db	32
   944  007D64  52                 	db	82	;'R'
   945  007D65  58                 	db	88	;'X'
   946  007D66  20                 	db	32
   947  007D67  73                 	db	115	;'s'
   948  007D68  79                 	db	121	;'y'
   949  007D69  73                 	db	115	;'s'
   950  007D6A  74                 	db	116	;'t'
   951  007D6B  65                 	db	101	;'e'
   952  007D6C  6D                 	db	109	;'m'
   953  007D6D  2E                 	db	46
   954  007D6E  0D                 	db	13
   955  007D6F  0A                 	db	10
   956  007D70  00                 	db	0
   957  007D71                     STR_23:
   958                           
   959                           ; BSR set to: 1
   960  007D71  24                 	db	36
   961  007D72  54                 	db	84	;'T'
   962  007D73  46                 	db	70	;'F'
   963  007D74  20                 	db	32
   964  007D75  3C                 	db	60	;'<'
   965  007D76  58                 	db	88	;'X'
   966  007D77  58                 	db	88	;'X'
   967  007D78  58                 	db	88	;'X'
   968  007D79  58                 	db	88	;'X'
   969  007D7A  3E                 	db	62	;'>'
   970  007D7B  3C                 	db	60	;'<'
   971  007D7C  63                 	db	99	;'c'
   972  007D7D  72                 	db	114	;'r'
   973  007D7E  3E                 	db	62	;'>'
   974  007D7F  20                 	db	32
   975  007D80  20                 	db	32
   976  007D81  20                 	db	32
   977  007D82  53                 	db	83	;'S'
   978  007D83  65                 	db	101	;'e'
   979  007D84  74                 	db	116	;'t'
   980  007D85  20                 	db	32
   981  007D86  54                 	db	84	;'T'
   982  007D87  58                 	db	88	;'X'
   983  007D88  20                 	db	32
   984  007D89  73                 	db	115	;'s'
   985  007D8A  79                 	db	121	;'y'
   986  007D8B  73                 	db	115	;'s'
   987  007D8C  74                 	db	116	;'t'
   988  007D8D  65                 	db	101	;'e'
   989  007D8E  6D                 	db	109	;'m'
   990  007D8F  20                 	db	32
   991  007D90  66                 	db	102	;'f'
   992  007D91  72                 	db	114	;'r'
   993  007D92  65                 	db	101	;'e'
   994  007D93  71                 	db	113	;'q'
   995  007D94  75                 	db	117	;'u'
   996  007D95  65                 	db	101	;'e'
   997  007D96  6E                 	db	110	;'n'
   998  007D97  63                 	db	99	;'c'
   999  007D98  79                 	db	121	;'y'
  1000  007D99  20                 	db	32
  1001  007D9A  61                 	db	97	;'a'
  1002  007D9B  74                 	db	116	;'t'
  1003  007D9C  20                 	db	32
  1004  007D9D  28                 	db	40
  1005  007D9E  30                 	db	48	;'0'
  1006  007D9F  2D                 	db	45
  1007  007DA0  39                 	db	57	;'9'
  1008  007DA1  39                 	db	57	;'9'
  1009  007DA2  39                 	db	57	;'9'
  1010  007DA3  39                 	db	57	;'9'
  1011  007DA4  29                 	db	41
  1012  007DA5  5B                 	db	91	;'['
  1013  007DA6  4D                 	db	77	;'M'
  1014  007DA7  48                 	db	72	;'H'
  1015  007DA8  7A                 	db	122	;'z'
  1016  007DA9  5D                 	db	93	;']'
  1017  007DAA  2E                 	db	46
  1018  007DAB  0D                 	db	13
  1019  007DAC  0A                 	db	10
  1020  007DAD  00                 	db	0
  1021  007DAE                     STR_31:
  1022                           
  1023                           ; BSR set to: 1
  1024  007DAE  24                 	db	36
  1025  007DAF  52                 	db	82	;'R'
  1026  007DB0  58                 	db	88	;'X'
  1027  007DB1  20                 	db	32
  1028  007DB2  3C                 	db	60	;'<'
  1029  007DB3  58                 	db	88	;'X'
  1030  007DB4  3E                 	db	62	;'>'
  1031  007DB5  3C                 	db	60	;'<'
  1032  007DB6  63                 	db	99	;'c'
  1033  007DB7  72                 	db	114	;'r'
  1034  007DB8  3E                 	db	62	;'>'
  1035  007DB9  20                 	db	32
  1036  007DBA  20                 	db	32
  1037  007DBB  20                 	db	32
  1038  007DBC  20                 	db	32
  1039  007DBD  20                 	db	32
  1040  007DBE  20                 	db	32
  1041  007DBF  54                 	db	84	;'T'
  1042  007DC0  75                 	db	117	;'u'
  1043  007DC1  72                 	db	114	;'r'
  1044  007DC2  6E                 	db	110	;'n'
  1045  007DC3  20                 	db	32
  1046  007DC4  6F                 	db	111	;'o'
  1047  007DC5  6E                 	db	110	;'n'
  1048  007DC6  5B                 	db	91	;'['
  1049  007DC7  31                 	db	49	;'1'
  1050  007DC8  5D                 	db	93	;']'
  1051  007DC9  20                 	db	32
  1052  007DCA  2F                 	db	47
  1053  007DCB  20                 	db	32
  1054  007DCC  6F                 	db	111	;'o'
  1055  007DCD  66                 	db	102	;'f'
  1056  007DCE  66                 	db	102	;'f'
  1057  007DCF  5B                 	db	91	;'['
  1058  007DD0  30                 	db	48	;'0'
  1059  007DD1  5D                 	db	93	;']'
  1060  007DD2  20                 	db	32
  1061  007DD3  72                 	db	114	;'r'
  1062  007DD4  65                 	db	101	;'e'
  1063  007DD5  63                 	db	99	;'c'
  1064  007DD6  65                 	db	101	;'e'
  1065  007DD7  69                 	db	105	;'i'
  1066  007DD8  76                 	db	118	;'v'
  1067  007DD9  65                 	db	101	;'e'
  1068  007DDA  20                 	db	32
  1069  007DDB  61                 	db	97	;'a'
  1070  007DDC  74                 	db	116	;'t'
  1071  007DDD  20                 	db	32
  1072  007DDE  52                 	db	82	;'R'
  1073  007DDF  58                 	db	88	;'X'
  1074  007DE0  20                 	db	32
  1075  007DE1  73                 	db	115	;'s'
  1076  007DE2  79                 	db	121	;'y'
  1077  007DE3  73                 	db	115	;'s'
  1078  007DE4  74                 	db	116	;'t'
  1079  007DE5  65                 	db	101	;'e'
  1080  007DE6  6D                 	db	109	;'m'
  1081  007DE7  2E                 	db	46
  1082  007DE8  0D                 	db	13
  1083  007DE9  0A                 	db	10
  1084  007DEA  00                 	db	0
  1085  007DEB                     STR_36:
  1086                           
  1087                           ; BSR set to: 1
  1088  007DEB  24                 	db	36
  1089  007DEC  53                 	db	83	;'S'
  1090  007DED  42                 	db	66	;'B'
  1091  007DEE  54                 	db	84	;'T'
  1092  007DEF  20                 	db	32
  1093  007DF0  3C                 	db	60	;'<'
  1094  007DF1  58                 	db	88	;'X'
  1095  007DF2  58                 	db	88	;'X'
  1096  007DF3  3E                 	db	62	;'>'
  1097  007DF4  3C                 	db	60	;'<'
  1098  007DF5  63                 	db	99	;'c'
  1099  007DF6  72                 	db	114	;'r'
  1100  007DF7  3E                 	db	62	;'>'
  1101  007DF8  20                 	db	32
  1102  007DF9  20                 	db	32
  1103  007DFA  20                 	db	32
  1104  007DFB  20                 	db	32
  1105  007DFC  53                 	db	83	;'S'
  1106  007DFD  65                 	db	101	;'e'
  1107  007DFE  74                 	db	116	;'t'
  1108  007DFF  20                 	db	32
  1109  007E00  55                 	db	85	;'U'
  1110  007E01  41                 	db	65	;'A'
  1111  007E02  52                 	db	82	;'R'
  1112  007E03  54                 	db	84	;'T'
  1113  007E04  20                 	db	32
  1114  007E05  72                 	db	114	;'r'
  1115  007E06  65                 	db	101	;'e'
  1116  007E07  66                 	db	102	;'f'
  1117  007E08  72                 	db	114	;'r'
  1118  007E09  65                 	db	101	;'e'
  1119  007E0A  73                 	db	115	;'s'
  1120  007E0B  68                 	db	104	;'h'
  1121  007E0C  20                 	db	32
  1122  007E0D  72                 	db	114	;'r'
  1123  007E0E  61                 	db	97	;'a'
  1124  007E0F  74                 	db	116	;'t'
  1125  007E10  65                 	db	101	;'e'
  1126  007E11  20                 	db	32
  1127  007E12  28                 	db	40
  1128  007E13  31                 	db	49	;'1'
  1129  007E14  2D                 	db	45
  1130  007E15  32                 	db	50	;'2'
  1131  007E16  30                 	db	48	;'0'
  1132  007E17  29                 	db	41
  1133  007E18  5B                 	db	91	;'['
  1134  007E19  48                 	db	72	;'H'
  1135  007E1A  7A                 	db	122	;'z'
  1136  007E1B  5D                 	db	93	;']'
  1137  007E1C  2E                 	db	46
  1138  007E1D  0D                 	db	13
  1139  007E1E  0A                 	db	10
  1140  007E1F  00                 	db	0
  1141  007E20                     STR_35:
  1142                           
  1143                           ; BSR set to: 1
  1144  007E20  24                 	db	36
  1145  007E21  53                 	db	83	;'S'
  1146  007E22  48                 	db	72	;'H'
  1147  007E23  20                 	db	32
  1148  007E24  3C                 	db	60	;'<'
  1149  007E25  63                 	db	99	;'c'
  1150  007E26  72                 	db	114	;'r'
  1151  007E27  3E                 	db	62	;'>'
  1152  007E28  20                 	db	32
  1153  007E29  20                 	db	32
  1154  007E2A  20                 	db	32
  1155  007E2B  20                 	db	32
  1156  007E2C  20                 	db	32
  1157  007E2D  20                 	db	32
  1158  007E2E  20                 	db	32
  1159  007E2F  20                 	db	32
  1160  007E30  20                 	db	32
  1161  007E31  50                 	db	80	;'P'
  1162  007E32  72                 	db	114	;'r'
  1163  007E33  69                 	db	105	;'i'
  1164  007E34  6E                 	db	110	;'n'
  1165  007E35  74                 	db	116	;'t'
  1166  007E36  20                 	db	32
  1167  007E37  73                 	db	115	;'s'
  1168  007E38  79                 	db	121	;'y'
  1169  007E39  73                 	db	115	;'s'
  1170  007E3A  74                 	db	116	;'t'
  1171  007E3B  65                 	db	101	;'e'
  1172  007E3C  6D                 	db	109	;'m'
  1173  007E3D  20                 	db	32
  1174  007E3E  68                 	db	104	;'h'
  1175  007E3F  65                 	db	101	;'e'
  1176  007E40  6C                 	db	108	;'l'
  1177  007E41  70                 	db	112	;'p'
  1178  007E42  20                 	db	32
  1179  007E43  6D                 	db	109	;'m'
  1180  007E44  65                 	db	101	;'e'
  1181  007E45  73                 	db	115	;'s'
  1182  007E46  73                 	db	115	;'s'
  1183  007E47  61                 	db	97	;'a'
  1184  007E48  67                 	db	103	;'g'
  1185  007E49  65                 	db	101	;'e'
  1186  007E4A  2E                 	db	46
  1187  007E4B  0D                 	db	13
  1188  007E4C  0A                 	db	10
  1189  007E4D  00                 	db	0
  1190  007E4E                     STR_24:
  1191                           
  1192                           ; BSR set to: 1
  1193  007E4E  24                 	db	36
  1194  007E4F  54                 	db	84	;'T'
  1195  007E50  51                 	db	81	;'Q'
  1196  007E51  20                 	db	32
  1197  007E52  3C                 	db	60	;'<'
  1198  007E53  63                 	db	99	;'c'
  1199  007E54  72                 	db	114	;'r'
  1200  007E55  3E                 	db	62	;'>'
  1201  007E56  20                 	db	32
  1202  007E57  20                 	db	32
  1203  007E58  20                 	db	32
  1204  007E59  20                 	db	32
  1205  007E5A  20                 	db	32
  1206  007E5B  20                 	db	32
  1207  007E5C  20                 	db	32
  1208  007E5D  20                 	db	32
  1209  007E5E  20                 	db	32
  1210  007E5F  47                 	db	71	;'G'
  1211  007E60  65                 	db	101	;'e'
  1212  007E61  74                 	db	116	;'t'
  1213  007E62  20                 	db	32
  1214  007E63  73                 	db	115	;'s'
  1215  007E64  74                 	db	116	;'t'
  1216  007E65  61                 	db	97	;'a'
  1217  007E66  74                 	db	116	;'t'
  1218  007E67  75                 	db	117	;'u'
  1219  007E68  73                 	db	115	;'s'
  1220  007E69  20                 	db	32
  1221  007E6A  66                 	db	102	;'f'
  1222  007E6B  72                 	db	114	;'r'
  1223  007E6C  6F                 	db	111	;'o'
  1224  007E6D  6D                 	db	109	;'m'
  1225  007E6E  20                 	db	32
  1226  007E6F  54                 	db	84	;'T'
  1227  007E70  58                 	db	88	;'X'
  1228  007E71  20                 	db	32
  1229  007E72  73                 	db	115	;'s'
  1230  007E73  79                 	db	121	;'y'
  1231  007E74  73                 	db	115	;'s'
  1232  007E75  74                 	db	116	;'t'
  1233  007E76  65                 	db	101	;'e'
  1234  007E77  6D                 	db	109	;'m'
  1235  007E78  2E                 	db	46
  1236  007E79  0D                 	db	13
  1237  007E7A  0A                 	db	10
  1238  007E7B  00                 	db	0
  1239  007E7C                     STR_29:
  1240                           
  1241                           ; BSR set to: 1
  1242  007E7C  24                 	db	36
  1243  007E7D  52                 	db	82	;'R'
  1244  007E7E  51                 	db	81	;'Q'
  1245  007E7F  20                 	db	32
  1246  007E80  3C                 	db	60	;'<'
  1247  007E81  63                 	db	99	;'c'
  1248  007E82  72                 	db	114	;'r'
  1249  007E83  3E                 	db	62	;'>'
  1250  007E84  20                 	db	32
  1251  007E85  20                 	db	32
  1252  007E86  20                 	db	32
  1253  007E87  20                 	db	32
  1254  007E88  20                 	db	32
  1255  007E89  20                 	db	32
  1256  007E8A  20                 	db	32
  1257  007E8B  20                 	db	32
  1258  007E8C  20                 	db	32
  1259  007E8D  47                 	db	71	;'G'
  1260  007E8E  65                 	db	101	;'e'
  1261  007E8F  74                 	db	116	;'t'
  1262  007E90  20                 	db	32
  1263  007E91  73                 	db	115	;'s'
  1264  007E92  74                 	db	116	;'t'
  1265  007E93  61                 	db	97	;'a'
  1266  007E94  74                 	db	116	;'t'
  1267  007E95  75                 	db	117	;'u'
  1268  007E96  73                 	db	115	;'s'
  1269  007E97  20                 	db	32
  1270  007E98  66                 	db	102	;'f'
  1271  007E99  72                 	db	114	;'r'
  1272  007E9A  6F                 	db	111	;'o'
  1273  007E9B  6D                 	db	109	;'m'
  1274  007E9C  20                 	db	32
  1275  007E9D  52                 	db	82	;'R'
  1276  007E9E  58                 	db	88	;'X'
  1277  007E9F  20                 	db	32
  1278  007EA0  73                 	db	115	;'s'
  1279  007EA1  79                 	db	121	;'y'
  1280  007EA2  73                 	db	115	;'s'
  1281  007EA3  74                 	db	116	;'t'
  1282  007EA4  65                 	db	101	;'e'
  1283  007EA5  6D                 	db	109	;'m'
  1284  007EA6  0D                 	db	13
  1285  007EA7  0A                 	db	10
  1286  007EA8  00                 	db	0
  1287  007EA9                     STR_38:
  1288                           
  1289                           ; BSR set to: 1
  1290  007EA9  24                 	db	36
  1291  007EAA  53                 	db	83	;'S'
  1292  007EAB  51                 	db	81	;'Q'
  1293  007EAC  20                 	db	32
  1294  007EAD  3C                 	db	60	;'<'
  1295  007EAE  58                 	db	88	;'X'
  1296  007EAF  3E                 	db	62	;'>'
  1297  007EB0  3C                 	db	60	;'<'
  1298  007EB1  63                 	db	99	;'c'
  1299  007EB2  72                 	db	114	;'r'
  1300  007EB3  3E                 	db	62	;'>'
  1301  007EB4  20                 	db	32
  1302  007EB5  20                 	db	32
  1303  007EB6  20                 	db	32
  1304  007EB7  20                 	db	32
  1305  007EB8  20                 	db	32
  1306  007EB9  20                 	db	32
  1307  007EBA  47                 	db	71	;'G'
  1308  007EBB  65                 	db	101	;'e'
  1309  007EBC  74                 	db	116	;'t'
  1310  007EBD  20                 	db	32
  1311  007EBE  73                 	db	115	;'s'
  1312  007EBF  79                 	db	121	;'y'
  1313  007EC0  73                 	db	115	;'s'
  1314  007EC1  74                 	db	116	;'t'
  1315  007EC2  65                 	db	101	;'e'
  1316  007EC3  6D                 	db	109	;'m'
  1317  007EC4  20                 	db	32
  1318  007EC5  73                 	db	115	;'s'
  1319  007EC6  74                 	db	116	;'t'
  1320  007EC7  61                 	db	97	;'a'
  1321  007EC8  74                 	db	116	;'t'
  1322  007EC9  75                 	db	117	;'u'
  1323  007ECA  73                 	db	115	;'s'
  1324  007ECB  2E                 	db	46
  1325  007ECC  0D                 	db	13
  1326  007ECD  0A                 	db	10
  1327  007ECE  00                 	db	0
  1328  007ECF                     STR_39:
  1329                           
  1330                           ; BSR set to: 1
  1331  007ECF  24                 	db	36
  1332  007ED0  53                 	db	83	;'S'
  1333  007ED1  4C                 	db	76	;'L'
  1334  007ED2  20                 	db	32
  1335  007ED3  3C                 	db	60	;'<'
  1336  007ED4  63                 	db	99	;'c'
  1337  007ED5  72                 	db	114	;'r'
  1338  007ED6  3E                 	db	62	;'>'
  1339  007ED7  20                 	db	32
  1340  007ED8  20                 	db	32
  1341  007ED9  20                 	db	32
  1342  007EDA  20                 	db	32
  1343  007EDB  20                 	db	32
  1344  007EDC  20                 	db	32
  1345  007EDD  20                 	db	32
  1346  007EDE  20                 	db	32
  1347  007EDF  20                 	db	32
  1348  007EE0  54                 	db	84	;'T'
  1349  007EE1  65                 	db	101	;'e'
  1350  007EE2  73                 	db	115	;'s'
  1351  007EE3  74                 	db	116	;'t'
  1352  007EE4  20                 	db	32
  1353  007EE5  73                 	db	115	;'s'
  1354  007EE6  79                 	db	121	;'y'
  1355  007EE7  73                 	db	115	;'s'
  1356  007EE8  74                 	db	116	;'t'
  1357  007EE9  65                 	db	101	;'e'
  1358  007EEA  6D                 	db	109	;'m'
  1359  007EEB  20                 	db	32
  1360  007EEC  4C                 	db	76	;'L'
  1361  007EED  45                 	db	69	;'E'
  1362  007EEE  44                 	db	68	;'D'
  1363  007EEF  73                 	db	115	;'s'
  1364  007EF0  2E                 	db	46
  1365  007EF1  0D                 	db	13
  1366  007EF2  0A                 	db	10
  1367  007EF3  00                 	db	0
  1368  007EF4                     STR_12:
  1369                           
  1370                           ; BSR set to: 1
  1371  007EF4  2A                 	db	42
  1372  007EF5  2A                 	db	42
  1373  007EF6  2A                 	db	42
  1374  007EF7  2A                 	db	42
  1375  007EF8  2A                 	db	42
  1376  007EF9  2A                 	db	42
  1377  007EFA  2A                 	db	42
  1378  007EFB  2A                 	db	42
  1379  007EFC  2A                 	db	42
  1380  007EFD  2A                 	db	42
  1381  007EFE  2A                 	db	42
  1382  007EFF  2A                 	db	42
  1383  007F00  2A                 	db	42
  1384  007F01  2A                 	db	42
  1385  007F02  2A                 	db	42
  1386  007F03  2A                 	db	42
  1387  007F04  2A                 	db	42
  1388  007F05  2A                 	db	42
  1389  007F06  2A                 	db	42
  1390  007F07  2A                 	db	42
  1391  007F08  2A                 	db	42
  1392  007F09  2A                 	db	42
  1393  007F0A  2A                 	db	42
  1394  007F0B  2A                 	db	42
  1395  007F0C  2A                 	db	42
  1396  007F0D  2A                 	db	42
  1397  007F0E  2A                 	db	42
  1398  007F0F  20                 	db	32
  1399  007F10  0A                 	db	10
  1400  007F11  0D                 	db	13
  1401  007F12  00                 	db	0
  1402  007F13                     STR_34:
  1403                           
  1404                           ; BSR set to: 1
  1405  007F13  0A                 	db	10
  1406  007F14  0D                 	db	13
  1407  007F15  3C                 	db	60	;'<'
  1408  007F16  43                 	db	67	;'C'
  1409  007F17  6F                 	db	111	;'o'
  1410  007F18  6D                 	db	109	;'m'
  1411  007F19  6D                 	db	109	;'m'
  1412  007F1A  6F                 	db	111	;'o'
  1413  007F1B  6E                 	db	110	;'n'
  1414  007F1C  20                 	db	32
  1415  007F1D  73                 	db	115	;'s'
  1416  007F1E  79                 	db	121	;'y'
  1417  007F1F  73                 	db	115	;'s'
  1418  007F20  74                 	db	116	;'t'
  1419  007F21  65                 	db	101	;'e'
  1420  007F22  6D                 	db	109	;'m'
  1421  007F23  20                 	db	32
  1422  007F24  63                 	db	99	;'c'
  1423  007F25  6F                 	db	111	;'o'
  1424  007F26  6D                 	db	109	;'m'
  1425  007F27  6D                 	db	109	;'m'
  1426  007F28  61                 	db	97	;'a'
  1427  007F29  6E                 	db	110	;'n'
  1428  007F2A  64                 	db	100	;'d'
  1429  007F2B  73                 	db	115	;'s'
  1430  007F2C  3E                 	db	62	;'>'
  1431  007F2D  0A                 	db	10
  1432  007F2E  0D                 	db	13
  1433  007F2F  00                 	db	0
  1434  007F30                     STR_27:
  1435                           
  1436                           ; BSR set to: 1
  1437  007F30  0A                 	db	10
  1438  007F31  0D                 	db	13
  1439  007F32  3C                 	db	60	;'<'
  1440  007F33  52                 	db	82	;'R'
  1441  007F34  58                 	db	88	;'X'
  1442  007F35  20                 	db	32
  1443  007F36  73                 	db	115	;'s'
  1444  007F37  79                 	db	121	;'y'
  1445  007F38  73                 	db	115	;'s'
  1446  007F39  74                 	db	116	;'t'
  1447  007F3A  65                 	db	101	;'e'
  1448  007F3B  6D                 	db	109	;'m'
  1449  007F3C  20                 	db	32
  1450  007F3D  63                 	db	99	;'c'
  1451  007F3E  6F                 	db	111	;'o'
  1452  007F3F  6D                 	db	109	;'m'
  1453  007F40  6D                 	db	109	;'m'
  1454  007F41  61                 	db	97	;'a'
  1455  007F42  6E                 	db	110	;'n'
  1456  007F43  64                 	db	100	;'d'
  1457  007F44  73                 	db	115	;'s'
  1458  007F45  3E                 	db	62	;'>'
  1459  007F46  0A                 	db	10
  1460  007F47  0D                 	db	13
  1461  007F48  00                 	db	0
  1462  007F49                     STR_21:
  1463                           
  1464                           ; BSR set to: 1
  1465  007F49  3C                 	db	60	;'<'
  1466  007F4A  54                 	db	84	;'T'
  1467  007F4B  58                 	db	88	;'X'
  1468  007F4C  20                 	db	32
  1469  007F4D  73                 	db	115	;'s'
  1470  007F4E  79                 	db	121	;'y'
  1471  007F4F  73                 	db	115	;'s'
  1472  007F50  74                 	db	116	;'t'
  1473  007F51  65                 	db	101	;'e'
  1474  007F52  6D                 	db	109	;'m'
  1475  007F53  20                 	db	32
  1476  007F54  63                 	db	99	;'c'
  1477  007F55  6F                 	db	111	;'o'
  1478  007F56  6D                 	db	109	;'m'
  1479  007F57  6D                 	db	109	;'m'
  1480  007F58  61                 	db	97	;'a'
  1481  007F59  6E                 	db	110	;'n'
  1482  007F5A  64                 	db	100	;'d'
  1483  007F5B  73                 	db	115	;'s'
  1484  007F5C  3E                 	db	62	;'>'
  1485  007F5D  0A                 	db	10
  1486  007F5E  0D                 	db	13
  1487  007F5F  00                 	db	0
  1488  007F60                     STR_13:
  1489                           
  1490                           ; BSR set to: 1
  1491  007F60  46                 	db	70	;'F'
  1492  007F61  41                 	db	65	;'A'
  1493  007F62  53                 	db	83	;'S'
  1494  007F63  54                 	db	84	;'T'
  1495  007F64  20                 	db	32
  1496  007F65  4C                 	db	76	;'L'
  1497  007F66  49                 	db	73	;'I'
  1498  007F67  4E                 	db	78	;'N'
  1499  007F68  4B                 	db	75	;'K'
  1500  007F69  20                 	db	32
  1501  007F6A  53                 	db	83	;'S'
  1502  007F6B  59                 	db	89	;'Y'
  1503  007F6C  53                 	db	83	;'S'
  1504  007F6D  54                 	db	84	;'T'
  1505  007F6E  45                 	db	69	;'E'
  1506  007F6F  4D                 	db	77	;'M'
  1507  007F70  20                 	db	32
  1508  007F71  0A                 	db	10
  1509  007F72  0D                 	db	13
  1510  007F73  00                 	db	0
  1511  007F74                     STR_18:
  1512                           
  1513                           ; BSR set to: 1
  1514  007F74  43                 	db	67	;'C'
  1515  007F75  6F                 	db	111	;'o'
  1516  007F76  6D                 	db	109	;'m'
  1517  007F77  70                 	db	112	;'p'
  1518  007F78  69                 	db	105	;'i'
  1519  007F79  6C                 	db	108	;'l'
  1520  007F7A  65                 	db	101	;'e'
  1521  007F7B  20                 	db	32
  1522  007F7C  74                 	db	116	;'t'
  1523  007F7D  69                 	db	105	;'i'
  1524  007F7E  6D                 	db	109	;'m'
  1525  007F7F  65                 	db	101	;'e'
  1526  007F80  3A                 	db	58	;':'
  1527  007F81  20                 	db	32
  1528  007F82  25                 	db	37
  1529  007F83  73                 	db	115	;'s'
  1530  007F84  20                 	db	32
  1531  007F85  0A                 	db	10
  1532  007F86  0D                 	db	13
  1533  007F87  00                 	db	0
  1534  007F88                     STR_16:
  1535                           
  1536                           ; BSR set to: 1
  1537  007F88  43                 	db	67	;'C'
  1538  007F89  6F                 	db	111	;'o'
  1539  007F8A  6D                 	db	109	;'m'
  1540  007F8B  70                 	db	112	;'p'
  1541  007F8C  69                 	db	105	;'i'
  1542  007F8D  6C                 	db	108	;'l'
  1543  007F8E  65                 	db	101	;'e'
  1544  007F8F  20                 	db	32
  1545  007F90  64                 	db	100	;'d'
  1546  007F91  61                 	db	97	;'a'
  1547  007F92  74                 	db	116	;'t'
  1548  007F93  65                 	db	101	;'e'
  1549  007F94  3A                 	db	58	;':'
  1550  007F95  20                 	db	32
  1551  007F96  25                 	db	37
  1552  007F97  73                 	db	115	;'s'
  1553  007F98  20                 	db	32
  1554  007F99  0A                 	db	10
  1555  007F9A  0D                 	db	13
  1556  007F9B  00                 	db	0
  1557  007F9C                     STR_3:
  1558                           
  1559                           ; BSR set to: 1
  1560  007F9C  53                 	db	83	;'S'
  1561  007F9D  41                 	db	65	;'A'
  1562  007F9E  4D                 	db	77	;'M'
  1563  007F9F  50                 	db	80	;'P'
  1564  007FA0  4C                 	db	76	;'L'
  1565  007FA1  45                 	db	69	;'E'
  1566  007FA2  20                 	db	32
  1567  007FA3  43                 	db	67	;'C'
  1568  007FA4  48                 	db	72	;'H'
  1569  007FA5  41                 	db	65	;'A'
  1570  007FA6  4E                 	db	78	;'N'
  1571  007FA7  4E                 	db	78	;'N'
  1572  007FA8  45                 	db	69	;'E'
  1573  007FA9  4C                 	db	76	;'L'
  1574  007FAA  20                 	db	32
  1575  007FAB  4E                 	db	78	;'N'
  1576  007FAC  41                 	db	65	;'A'
  1577  007FAD  4D                 	db	77	;'M'
  1578  007FAE  45                 	db	69	;'E'
  1579  007FAF  00                 	db	0
  1580  007FB0                     STR_14:
  1581                           
  1582                           ; BSR set to: 1
  1583  007FB0  53                 	db	83	;'S'
  1584  007FB1  57                 	db	87	;'W'
  1585  007FB2  20                 	db	32
  1586  007FB3  56                 	db	86	;'V'
  1587  007FB4  45                 	db	69	;'E'
  1588  007FB5  53                 	db	83	;'S'
  1589  007FB6  52                 	db	82	;'R'
  1590  007FB7  49                 	db	73	;'I'
  1591  007FB8  4F                 	db	79	;'O'
  1592  007FB9  4E                 	db	78	;'N'
  1593  007FBA  3A                 	db	58	;':'
  1594  007FBB  20                 	db	32
  1595  007FBC  25                 	db	37
  1596  007FBD  73                 	db	115	;'s'
  1597  007FBE  20                 	db	32
  1598  007FBF  0A                 	db	10
  1599  007FC0  0D                 	db	13
  1600  007FC1  00                 	db	0
  1601  007FC2                     STR_17:
  1602                           
  1603                           ; BSR set to: 1
  1604  007FC2  4D                 	db	77	;'M'
  1605  007FC3  61                 	db	97	;'a'
  1606  007FC4  72                 	db	114	;'r'
  1607  007FC5  20                 	db	32
  1608  007FC6  32                 	db	50	;'2'
  1609  007FC7  37                 	db	55	;'7'
  1610  007FC8  20                 	db	32
  1611  007FC9  32                 	db	50	;'2'
  1612  007FCA  30                 	db	48	;'0'
  1613  007FCB  31                 	db	49	;'1'
  1614  007FCC  38                 	db	56	;'8'
  1615  007FCD  00                 	db	0
  1616  007FCE                     STR_8:
  1617                           
  1618                           ; BSR set to: 1
  1619  007FCE  4E                 	db	78	;'N'
  1620  007FCF  4F                 	db	79	;'O'
  1621  007FD0  54                 	db	84	;'T'
  1622  007FD1  20                 	db	32
  1623  007FD2  4F                 	db	79	;'O'
  1624  007FD3  2E                 	db	46
  1625  007FD4  4B                 	db	75	;'K'
  1626  007FD5  20                 	db	32
  1627  007FD6  0A                 	db	10
  1628  007FD7  0D                 	db	13
  1629  007FD8  00                 	db	0
  1630  007FD9                     STR_1:
  1631                           
  1632                           ; BSR set to: 1
  1633  007FD9  4E                 	db	78	;'N'
  1634  007FDA  4F                 	db	79	;'O'
  1635  007FDB  54                 	db	84	;'T'
  1636  007FDC  20                 	db	32
  1637  007FDD  4F                 	db	79	;'O'
  1638  007FDE  4B                 	db	75	;'K'
  1639  007FDF  20                 	db	32
  1640  007FE0  0A                 	db	10
  1641  007FE1  0D                 	db	13
  1642  007FE2  00                 	db	0
  1643  007FE3                     STR_19:
  1644                           
  1645                           ; BSR set to: 1
  1646  007FE3  31                 	db	49	;'1'
  1647  007FE4  37                 	db	55	;'7'
  1648  007FE5  3A                 	db	58	;':'
  1649  007FE6  34                 	db	52	;'4'
  1650  007FE7  38                 	db	56	;'8'
  1651  007FE8  3A                 	db	58	;':'
  1652  007FE9  31                 	db	49	;'1'
  1653  007FEA  38                 	db	56	;'8'
  1654  007FEB  00                 	db	0
  1655  007FEC                     STR_40:
  1656                           
  1657                           ; BSR set to: 1
  1658  007FEC  28                 	db	40
  1659  007FED  6E                 	db	110	;'n'
  1660  007FEE  75                 	db	117	;'u'
  1661  007FEF  6C                 	db	108	;'l'
  1662  007FF0  6C                 	db	108	;'l'
  1663  007FF1  29                 	db	41
  1664  007FF2  00                 	db	0
  1665  007FF3                     STR_15:
  1666                           
  1667                           ; BSR set to: 1
  1668  007FF3  31                 	db	49	;'1'
  1669  007FF4  5F                 	db	95	;'_'
  1670  007FF5  30                 	db	48	;'0'
  1671  007FF6  30                 	db	48	;'0'
  1672  007FF7  32                 	db	50	;'2'
  1673  007FF8  00                 	db	0
  1674  007FF9                     STR_6:
  1675                           
  1676                           ; BSR set to: 1
  1677  007FF9  25                 	db	37
  1678  007FFA  64                 	db	100	;'d'
  1679  007FFB  20                 	db	32
  1680  007FFC  09                 	db	9
  1681  007FFD  00                 	db	0
  1682  0000                     
  1683                           ; #config settings
  1684  007FFE  00                 	db	0	; dummy byte at the end
  1685  0000                     
  1686                           	psect	nvCOMRAM
  1687  000046                     __pnvCOMRAM:
  1688                           	opt stack 0
  1689  000046                     _timer0ReloadVal:
  1690                           	opt stack 0
  1691  000046                     	ds	2
  1692                           
  1693                           	psect	nvBANK0
  1694  0000FB                     __pnvBANK0:
  1695                           	opt stack 0
  1696  0000FB                     _eusart1TxBufferRemaining:
  1697                           	opt stack 0
  1698  0000FB                     	ds	1
  1699                           
  1700                           	psect	nvBANK1
  1701  0001D9                     __pnvBANK1:
  1702                           	opt stack 0
  1703  0001D9                     _TMR0_InterruptHandler:
  1704                           	opt stack 0
  1705  0001D9                     	ds	2
  1706  0000                     _ANSELA	set	3896
  1707  0000                     _ANSELE	set	3900
  1708  0000                     _ANSELD	set	3899
  1709  0000                     _ANSELB	set	3897
  1710  0000                     _ANSELC	set	3898
  1711  0000                     _ADCON0bits	set	4034
  1712  0000                     _ADRESH	set	4036
  1713  0000                     _ADRESL	set	4035
  1714  0000                     _ADCON2	set	4032
  1715  0000                     _ADCON1	set	4033
  1716  0000                     _ADCON0	set	4034
  1717  0000                     _T0CONbits	set	4053
  1718  0000                     _T0CON	set	4053
  1719  0000                     _TMR0L	set	4054
  1720  0000                     _TMR0H	set	4055
  1721  0000                     _EEDATA	set	4008
  1722  0000                     _EEADR	set	4009
  1723  0000                     _EECON2	set	4007
  1724  0000                     _EECON1bits	set	4006
  1725  0000                     _TABLAT	set	4085
  1726  0000                     _TBLPTRL	set	4086
  1727  0000                     _TBLPTRH	set	4087
  1728  0000                     _TBLPTRU	set	4088
  1729  0000                     _INTCON2bits	set	4081
  1730  0000                     _WPUB	set	3937
  1731  0000                     _TRISD	set	3989
  1732  0000                     _TRISC	set	3988
  1733  0000                     _TRISB	set	3987
  1734  0000                     _TRISA	set	3986
  1735  0000                     _TRISE	set	3990
  1736  0000                     _LATC	set	3979
  1737  0000                     _LATB	set	3978
  1738  0000                     _LATA	set	3977
  1739  0000                     _LATD	set	3980
  1740  0000                     _LATE	set	3981
  1741  0000                     _RCREG1	set	4014
  1742  0000                     _RCSTA1bits	set	4011
  1743  0000                     _TXREG1	set	4013
  1744  0000                     _SPBRGH1	set	4016
  1745  0000                     _SPBRG1	set	4015
  1746  0000                     _TXSTA1	set	4012
  1747  0000                     _RCSTA1	set	4011
  1748  0000                     _BAUDCON1	set	4024
  1749  0000                     _PIR1bits	set	3998
  1750  0000                     _PIE1bits	set	3997
  1751  0000                     _PIR2bits	set	4001
  1752  0000                     _PIE2bits	set	4000
  1753  0000                     _RCONbits	set	4048
  1754  0000                     _OSCTUNE	set	3995
  1755  0000                     _OSCCON2	set	4050
  1756  0000                     _OSCCON	set	4051
  1757  0000                     _LATAbits	set	3977
  1758  0000                     _LATDbits	set	3980
  1759  0000                     _INTCONbits	set	4082
  1760  0000                     _LATCbits	set	3979
  1761  0000                     _LATBbits	set	3978
  1762                           
  1763                           	psect	cinit
  1764  0021AC                     __pcinit:
  1765                           	opt stack 0
  1766  0021AC                     start_initialization:
  1767                           	opt stack 0
  1768  0021AC                     __initialization:
  1769                           	opt stack 0
  1770                           
  1771                           ; Initialize objects allocated to BANK1 (12 bytes)
  1772                           ; load TBLPTR registers with __pidataBANK1
  1773  0021AC  0E16               	movlw	low __pidataBANK1
  1774  0021AE  6EF6               	movwf	tblptrl,c
  1775  0021B0  0E32               	movlw	high __pidataBANK1
  1776  0021B2  6EF7               	movwf	tblptrh,c
  1777  0021B4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1778  0021B6  6EF8               	movwf	tblptru,c
  1779  0021B8  EE01  F0CD         	lfsr	0,__pdataBANK1
  1780  0021BC  EE10 F00C          	lfsr	1,12
  1781  0021C0                     copy_data0:
  1782  0021C0  0009               	tblrd		*+
  1783  0021C2  CFF5 FFEE          	movff	tablat,postinc0
  1784  0021C6  50E5               	movf	postdec1,w,c
  1785  0021C8  50E1               	movf	fsr1l,w,c
  1786  0021CA  E1FA               	bnz	copy_data0
  1787                           
  1788                           ; Initialize objects allocated to BANK0 (4 bytes)
  1789                           ; load TBLPTR registers with __pidataBANK0
  1790  0021CC  0E40               	movlw	low __pidataBANK0
  1791  0021CE  6EF6               	movwf	tblptrl,c
  1792  0021D0  0E32               	movlw	high __pidataBANK0
  1793  0021D2  6EF7               	movwf	tblptrh,c
  1794  0021D4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1795  0021D6  6EF8               	movwf	tblptru,c
  1796  0021D8  EE00  F0F7         	lfsr	0,__pdataBANK0
  1797  0021DC  EE10 F004          	lfsr	1,4
  1798  0021E0                     copy_data1:
  1799  0021E0  0009               	tblrd		*+
  1800  0021E2  CFF5 FFEE          	movff	tablat,postinc0
  1801  0021E6  50E5               	movf	postdec1,w,c
  1802  0021E8  50E1               	movf	fsr1l,w,c
  1803  0021EA  E1FA               	bnz	copy_data1
  1804                           
  1805                           ; Initialize objects allocated to COMRAM (4 bytes)
  1806                           ; load TBLPTR registers with __pidataCOMRAM
  1807  0021EC  0E3C               	movlw	low __pidataCOMRAM
  1808  0021EE  6EF6               	movwf	tblptrl,c
  1809  0021F0  0E32               	movlw	high __pidataCOMRAM
  1810  0021F2  6EF7               	movwf	tblptrh,c
  1811  0021F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1812  0021F6  6EF8               	movwf	tblptru,c
  1813  0021F8  EE00  F042         	lfsr	0,__pdataCOMRAM
  1814  0021FC  EE10 F004          	lfsr	1,4
  1815  002200                     copy_data2:
  1816  002200  0009               	tblrd		*+
  1817  002202  CFF5 FFEE          	movff	tablat,postinc0
  1818  002206  50E5               	movf	postdec1,w,c
  1819  002208  50E1               	movf	fsr1l,w,c
  1820  00220A  E1FA               	bnz	copy_data2
  1821                           
  1822                           ; Clear objects allocated to BANK2 (134 bytes)
  1823  00220C  EE02  F000         	lfsr	0,__pbssBANK2
  1824  002210  0E86               	movlw	134
  1825  002212                     clear_0:
  1826  002212  6AEE               	clrf	postinc0,c
  1827  002214  06E8               	decf	wreg,f,c
  1828  002216  E1FD               	bnz	clear_0
  1829                           
  1830                           ; Clear objects allocated to BANK1 (126 bytes)
  1831  002218  EE01  F000         	lfsr	0,__pbssBANK1
  1832  00221C  0E7E               	movlw	126
  1833  00221E                     clear_1:
  1834  00221E  6AEE               	clrf	postinc0,c
  1835  002220  06E8               	decf	wreg,f,c
  1836  002222  E1FD               	bnz	clear_1
  1837                           
  1838                           ; Clear objects allocated to BANK0 (12 bytes)
  1839  002224  EE00  F0EB         	lfsr	0,__pbssBANK0
  1840  002228  0E0C               	movlw	12
  1841  00222A                     clear_2:
  1842  00222A  6AEE               	clrf	postinc0,c
  1843  00222C  06E8               	decf	wreg,f,c
  1844  00222E  E1FD               	bnz	clear_2
  1845                           
  1846                           ; Clear objects allocated to COMRAM (17 bytes)
  1847  002230  EE00  F031         	lfsr	0,__pbssCOMRAM
  1848  002234  0E11               	movlw	17
  1849  002236                     clear_3:
  1850  002236  6AEE               	clrf	postinc0,c
  1851  002238  06E8               	decf	wreg,f,c
  1852  00223A  E1FD               	bnz	clear_3
  1853  00223C                     end_of_initialization:
  1854                           	opt stack 0
  1855  00223C                     __end_of__initialization:
  1856                           	opt stack 0
  1857  00223C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1858  00223E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1859  002240  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1860  002242  6EF8               	movwf	tblptru,c
  1861  002244  0100               	movlb	0
  1862  002246  EFD6  F015         	goto	_main	;jump to C main() function
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872                           	psect	bssCOMRAM
  1873  000031                     __pbssCOMRAM:
  1874                           	opt stack 0
  1875  000031                     _numOfValidateSamples:
  1876                           	opt stack 0
  1877  000031                     	ds	4
  1878  000035                     TMR0_ISR@CountCallBack:
  1879                           	opt stack 0
  1880  000035                     	ds	2
  1881  000037                     _channelNum:
  1882                           	opt stack 0
  1883  000037                     	ds	2
  1884  000039                     _eusart1RxTail:
  1885                           	opt stack 0
  1886  000039                     	ds	1
  1887  00003A                     _eusart1RxHead:
  1888                           	opt stack 0
  1889  00003A                     	ds	1
  1890  00003B                     _eusart1TxTail:
  1891                           	opt stack 0
  1892  00003B                     	ds	1
  1893  00003C                     _eusart1TxHead:
  1894                           	opt stack 0
  1895  00003C                     	ds	1
  1896  00003D                     _adcSampleMode:
  1897                           	opt stack 0
  1898  00003D                     	ds	1
  1899  00003E                     _numOfReadSamples:
  1900                           	opt stack 0
  1901  00003E                     	ds	4
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1l	equ	0xFE1
  1910                           
  1911                           	psect	dataCOMRAM
  1912  000042                     __pdataCOMRAM:
  1913                           	opt stack 0
  1914  000042                     _writeAddress:
  1915                           	opt stack 0
  1916  000042                     	ds	4
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           fsr1l	equ	0xFE1
  1925                           
  1926                           	psect	bssBANK0
  1927  0000EB                     __pbssBANK0:
  1928                           	opt stack 0
  1929  0000EB                     _errno:
  1930                           	opt stack 0
  1931  0000EB                     	ds	2
  1932  0000ED                     _sampleCount:
  1933                           	opt stack 0
  1934  0000ED                     	ds	2
  1935  0000EF                     _numSamples:
  1936                           	opt stack 0
  1937  0000EF                     	ds	2
  1938  0000F1                     _count:
  1939                           	opt stack 0
  1940  0000F1                     	ds	2
  1941  0000F3                     _isReWriteDone:
  1942                           	opt stack 0
  1943  0000F3                     	ds	1
  1944  0000F4                     _crcGiven:
  1945                           	opt stack 0
  1946  0000F4                     	ds	1
  1947  0000F5                     _crcCalc:
  1948                           	opt stack 0
  1949  0000F5                     	ds	1
  1950  0000F6                     _channel:
  1951                           	opt stack 0
  1952  0000F6                     	ds	1
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postdec1	equ	0xFE5
  1960                           fsr1l	equ	0xFE1
  1961                           
  1962                           	psect	dataBANK0
  1963  0000F7                     __pdataBANK0:
  1964                           	opt stack 0
  1965  0000F7                     _readAddress:
  1966                           	opt stack 0
  1967  0000F7                     	ds	4
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           fsr1l	equ	0xFE1
  1976                           
  1977                           	psect	bssBANK1
  1978  000100                     __pbssBANK1:
  1979                           	opt stack 0
  1980  000100                     _eusart1RxBuffer:
  1981                           	opt stack 0
  1982  000100                     	ds	40
  1983  000128                     _synthCalcParams:
  1984                           	opt stack 0
  1985  000128                     	ds	32
  1986  000148                     _mcuRunTimeIn5SecTicks:
  1987                           	opt stack 0
  1988  000148                     	ds	4
  1989  00014C                     _msgCount:
  1990                           	opt stack 0
  1991  00014C                     	ds	1
  1992  00014D                     _dataSize:
  1993                           	opt stack 0
  1994  00014D                     	ds	1
  1995  00014E                     _request:
  1996                           	opt stack 0
  1997  00014E                     	ds	1
  1998  00014F                     _group:
  1999                           	opt stack 0
  2000  00014F                     	ds	1
  2001  000150                     _cState:
  2002                           	opt stack 0
  2003  000150                     	ds	1
  2004  000151                     _eusart1RxCount:
  2005                           	opt stack 0
  2006  000151                     	ds	1
  2007  000152                     _needToSample:
  2008                           	opt stack 0
  2009  000152                     	ds	1
  2010  000153                     _TimerKeepAliveFlag:
  2011                           	opt stack 0
  2012  000153                     	ds	1
  2013  000154                     _TimerSamplingFlag:
  2014                           	opt stack 0
  2015  000154                     	ds	1
  2016  000155                     _TimerOneSecFlag:
  2017                           	opt stack 0
  2018  000155                     	ds	1
  2019  000156                     _rxMsgData:
  2020                           	opt stack 0
  2021  000156                     	ds	20
  2022  00016A                     _rxMsgQueue:
  2023                           	opt stack 0
  2024  00016A                     	ds	20
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           
  2034                           	psect	dataBANK1
  2035  0001CD                     __pdataBANK1:
  2036                           	opt stack 0
  2037  0001CD                     _groupsArray:
  2038                           	opt stack 0
  2039  0001CD                     	ds	12
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           
  2049                           	psect	bssBANK2
  2050  000200                     __pbssBANK2:
  2051                           	opt stack 0
  2052  000200                     _eusart1TxBuffer:
  2053                           	opt stack 0
  2054  000200                     	ds	70
  2055  000246                     _sampleArray:
  2056                           	opt stack 0
  2057  000246                     	ds	64
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1l	equ	0xFE1
  2066                           
  2067                           	psect	cstackBANK1
  2068  00017E                     __pcstackBANK1:
  2069                           	opt stack 0
  2070  00017E                     UpdateSynthFreq@t:
  2071                           	opt stack 0
  2072  00017E                     SampleSingleChannel@dest:
  2073                           	opt stack 0
  2074                           
  2075                           ; 50 bytes @ 0x0
  2076  00017E                     	ds	3
  2077  000181                     _UpdateSynthFreq$2992:
  2078                           	opt stack 0
  2079                           
  2080                           ; 4 bytes @ 0x3
  2081  000181                     	ds	4
  2082  000185                     UpdateSynthFreq@insertFraqData:
  2083                           	opt stack 0
  2084                           
  2085                           ; 3 bytes @ 0x7
  2086  000185                     	ds	3
  2087  000188                     UpdateSynthFreq@regSynthArray:
  2088                           	opt stack 0
  2089                           
  2090                           ; 16 bytes @ 0xA
  2091  000188                     	ds	16
  2092  000198                     readUartByte@dest:
  2093                           	opt stack 0
  2094                           
  2095                           ; 50 bytes @ 0x1A
  2096  000198                     	ds	24
  2097  0001B0                     _SampleSingleChannel$2991:
  2098                           	opt stack 0
  2099                           
  2100                           ; 3 bytes @ 0x32
  2101  0001B0                     	ds	3
  2102  0001B3                     SampleSingleChannel@_adcResult:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x35
  2106  0001B3                     	ds	2
  2107  0001B5                     SampleSingleChannel@adcRes:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x37
  2111  0001B5                     	ds	21
  2112  0001CA                     readUartByte@idx:
  2113                           	opt stack 0
  2114                           
  2115                           ; 2 bytes @ 0x4C
  2116  0001CA                     	ds	2
  2117  0001CC                     readUartByte@chRec:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x4E
  2121  0001CC                     	ds	1
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           postdec1	equ	0xFE5
  2129                           fsr1l	equ	0xFE1
  2130                           
  2131                           	psect	cstackBANK0
  2132  000060                     __pcstackBANK0:
  2133                           	opt stack 0
  2134  000060                     ??___ftdiv:
  2135  000060                     sprintf@flag:
  2136                           	opt stack 0
  2137  000060                     strtol@sign:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x0
  2141  000060                     	ds	1
  2142  000061                     sprintf@prec:
  2143                           	opt stack 0
  2144  000061                     strtol@a:
  2145                           	opt stack 0
  2146                           
  2147                           ; 4 bytes @ 0x1
  2148  000061                     	ds	1
  2149  000062                     sprintf@ap:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x2
  2153  000062                     	ds	1
  2154  000063                     ___ftdiv@cntr:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x3
  2158  000063                     	ds	1
  2159  000064                     sprintf@cp:
  2160                           	opt stack 0
  2161  000064                     ___ftdiv@f3:
  2162                           	opt stack 0
  2163                           
  2164                           ; 3 bytes @ 0x4
  2165  000064                     	ds	1
  2166  000065                     strtol@c:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x5
  2170  000065                     	ds	1
  2171  000066                     ?_GetIntFromUartData:
  2172                           	opt stack 0
  2173  000066                     GetIntFromUartData@data:
  2174                           	opt stack 0
  2175  000066                     sprintf@val:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x6
  2179  000066                     	ds	1
  2180  000067                     ___ftdiv@exp:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x7
  2184  000067                     	ds	1
  2185  000068                     sprintf@c:
  2186                           	opt stack 0
  2187  000068                     ___ftdiv@sign:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x8
  2191  000068                     	ds	1
  2192  000069                     ?___ftmul:
  2193                           	opt stack 0
  2194  000069                     ___ftmul@f1:
  2195                           	opt stack 0
  2196  000069                     SendUartSystemInitMessage@dest:
  2197                           	opt stack 0
  2198  000069                     PrintHelpScreen@dest:
  2199                           	opt stack 0
  2200                           
  2201                           ; 50 bytes @ 0x9
  2202  000069                     	ds	1
  2203  00006A                     GetIntFromUartData@dataRegArr:
  2204                           	opt stack 0
  2205                           
  2206                           ; 8 bytes @ 0xA
  2207  00006A                     	ds	2
  2208  00006C                     ___ftmul@f2:
  2209                           	opt stack 0
  2210                           
  2211                           ; 3 bytes @ 0xC
  2212  00006C                     	ds	3
  2213  00006F                     ??___ftmul:
  2214                           
  2215                           ; 1 bytes @ 0xF
  2216  00006F                     	ds	3
  2217  000072                     GetIntFromUartData@c:
  2218                           	opt stack 0
  2219  000072                     ___ftmul@exp:
  2220                           	opt stack 0
  2221                           
  2222                           ; 1 bytes @ 0x12
  2223  000072                     	ds	1
  2224  000073                     GetIntFromUartData@idx:
  2225                           	opt stack 0
  2226  000073                     ___ftmul@f3_as_product:
  2227                           	opt stack 0
  2228                           
  2229                           ; 3 bytes @ 0x13
  2230  000073                     	ds	2
  2231  000075                     AdcSingleSample@data:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x15
  2235  000075                     	ds	1
  2236  000076                     ___ftmul@cntr:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x16
  2240  000076                     	ds	1
  2241  000077                     AdcSingleSample@cType:
  2242                           	opt stack 0
  2243  000077                     ___ftmul@sign:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x17
  2247  000077                     	ds	1
  2248  000078                     ?___fttol:
  2249                           	opt stack 0
  2250  000078                     ___fttol@f1:
  2251                           	opt stack 0
  2252  000078                     AdcSingleSample@retNum:
  2253                           	opt stack 0
  2254                           
  2255                           ; 4 bytes @ 0x18
  2256  000078                     	ds	4
  2257  00007C                     ??___fttol:
  2258                           
  2259                           ; 1 bytes @ 0x1C
  2260  00007C                     	ds	5
  2261  000081                     ___fttol@sign1:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x21
  2265  000081                     	ds	1
  2266  000082                     ___fttol@lval:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x22
  2270  000082                     	ds	4
  2271  000086                     ___fttol@exp1:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x26
  2275  000086                     	ds	1
  2276  000087                     ?___awtoft:
  2277                           	opt stack 0
  2278  000087                     ___awtoft@c:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x27
  2282  000087                     	ds	3
  2283  00008A                     ?___ftneg:
  2284                           	opt stack 0
  2285  00008A                     ___ftneg@f1:
  2286                           	opt stack 0
  2287                           
  2288                           ; 3 bytes @ 0x2A
  2289  00008A                     	ds	3
  2290  00008D                     ?___ftadd:
  2291                           	opt stack 0
  2292  00008D                     ?_strtod:
  2293                           	opt stack 0
  2294  00008D                     strtod@s:
  2295                           	opt stack 0
  2296  00008D                     ___ftadd@f1:
  2297                           	opt stack 0
  2298                           
  2299                           ; 3 bytes @ 0x2D
  2300  00008D                     	ds	2
  2301  00008F                     strtod@res:
  2302                           	opt stack 0
  2303                           
  2304                           ; 2 bytes @ 0x2F
  2305  00008F                     	ds	1
  2306  000090                     ___ftadd@f2:
  2307                           	opt stack 0
  2308                           
  2309                           ; 3 bytes @ 0x30
  2310  000090                     	ds	1
  2311  000091                     ??_strtod:
  2312                           
  2313                           ; 1 bytes @ 0x31
  2314  000091                     	ds	1
  2315  000092                     strtod@eexp:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x32
  2319  000092                     	ds	1
  2320  000093                     ??___ftadd:
  2321  000093                     strtod@flags:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x33
  2325  000093                     	ds	1
  2326  000094                     strtod@expon:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x34
  2330  000094                     	ds	1
  2331  000095                     strtod@_u:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0x35
  2335  000095                     	ds	1
  2336  000096                     ___ftadd@sign:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x36
  2340  000096                     	ds	1
  2341  000097                     ___ftadd@exp2:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x37
  2345  000097                     	ds	1
  2346  000098                     ___ftadd@exp1:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x38
  2350  000098                     	ds	1
  2351  000099                     ?_getFractionPartOfDivide:
  2352                           	opt stack 0
  2353  000099                     ?_atof:
  2354                           	opt stack 0
  2355  000099                     ?___ftsub:
  2356                           	opt stack 0
  2357  000099                     ?_floor:
  2358                           	opt stack 0
  2359  000099                     ?_eval_poly:
  2360                           	opt stack 0
  2361  000099                     atof@s:
  2362                           	opt stack 0
  2363  000099                     getFractionPartOfDivide@num1:
  2364                           	opt stack 0
  2365  000099                     ___ftsub@f1:
  2366                           	opt stack 0
  2367  000099                     floor@x:
  2368                           	opt stack 0
  2369  000099                     eval_poly@x:
  2370                           	opt stack 0
  2371                           
  2372                           ; 3 bytes @ 0x39
  2373  000099                     	ds	3
  2374  00009C                     ?_GetDoubleFromUartData:
  2375  00009C                     GetDoubleFromUartData@data:
  2376                           	opt stack 0
  2377  00009C                     eval_poly@d:
  2378                           	opt stack 0
  2379  00009C                     getFractionPartOfDivide@num2:
  2380                           	opt stack 0
  2381  00009C                     ___ftsub@f2:
  2382                           	opt stack 0
  2383  00009C                     floor@i:
  2384                           	opt stack 0
  2385                           
  2386                           ; 3 bytes @ 0x3C
  2387  00009C                     	ds	2
  2388  00009E                     GetDoubleFromUartData@dataSize:
  2389                           	opt stack 0
  2390  00009E                     eval_poly@n:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x3E
  2394  00009E                     	ds	1
  2395  00009F                     ??_GetDoubleFromUartData:
  2396  00009F                     floor@expon:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x3F
  2400  00009F                     	ds	1
  2401  0000A0                     ??_eval_poly:
  2402                           
  2403                           ; 1 bytes @ 0x40
  2404  0000A0                     	ds	2
  2405  0000A2                     GetDoubleFromUartData@doubleFreq:
  2406                           	opt stack 0
  2407  0000A2                     eval_poly@res:
  2408                           	opt stack 0
  2409                           
  2410                           ; 3 bytes @ 0x42
  2411  0000A2                     	ds	3
  2412  0000A5                     ?_log:
  2413                           	opt stack 0
  2414  0000A5                     ?_ldexp:
  2415                           	opt stack 0
  2416  0000A5                     ldexp@value:
  2417                           	opt stack 0
  2418  0000A5                     log@x:
  2419                           	opt stack 0
  2420  0000A5                     GetDoubleFromUartData@tempNum:
  2421                           	opt stack 0
  2422                           
  2423                           ; 10 bytes @ 0x45
  2424  0000A5                     	ds	3
  2425  0000A8                     ldexp@newexp:
  2426                           	opt stack 0
  2427  0000A8                     log@exponent:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x48
  2431  0000A8                     	ds	2
  2432  0000AA                     ??_ldexp:
  2433                           
  2434                           ; 1 bytes @ 0x4A
  2435  0000AA                     	ds	2
  2436  0000AC                     ?_exp:
  2437                           	opt stack 0
  2438  0000AC                     exp@x:
  2439                           	opt stack 0
  2440                           
  2441                           ; 3 bytes @ 0x4C
  2442  0000AC                     	ds	3
  2443  0000AF                     GetDoubleFromUartData@idx:
  2444                           	opt stack 0
  2445  0000AF                     _exp$2996:
  2446                           	opt stack 0
  2447                           
  2448                           ; 3 bytes @ 0x4F
  2449  0000AF                     	ds	3
  2450  0000B2                     exp@exponent:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x52
  2454  0000B2                     	ds	2
  2455  0000B4                     exp@sign:
  2456                           	opt stack 0
  2457                           
  2458                           ; 1 bytes @ 0x54
  2459  0000B4                     	ds	1
  2460  0000B5                     ?_pow:
  2461                           	opt stack 0
  2462  0000B5                     pow@x:
  2463                           	opt stack 0
  2464                           
  2465                           ; 3 bytes @ 0x55
  2466  0000B5                     	ds	3
  2467  0000B8                     pow@y:
  2468                           	opt stack 0
  2469                           
  2470                           ; 3 bytes @ 0x58
  2471  0000B8                     	ds	3
  2472  0000BB                     _pow$2994:
  2473                           	opt stack 0
  2474                           
  2475                           ; 3 bytes @ 0x5B
  2476  0000BB                     	ds	3
  2477  0000BE                     _pow$2995:
  2478                           	opt stack 0
  2479                           
  2480                           ; 3 bytes @ 0x5E
  2481  0000BE                     	ds	3
  2482  0000C1                     pow@sign:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x61
  2486  0000C1                     	ds	1
  2487  0000C2                     pow@yi:
  2488                           	opt stack 0
  2489                           
  2490                           ; 4 bytes @ 0x62
  2491  0000C2                     	ds	4
  2492  0000C6                     ??_SampleSingleChannel:
  2493  0000C6                     CalcSynthRegParams@regArray:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0x66
  2497  0000C6                     	ds	2
  2498  0000C8                     CalcSynthRegParams@inputFreq:
  2499                           	opt stack 0
  2500                           
  2501                           ; 4 bytes @ 0x68
  2502  0000C8                     	ds	4
  2503  0000CC                     ??_CalcSynthRegParams:
  2504                           
  2505                           ; 1 bytes @ 0x6C
  2506  0000CC                     	ds	8
  2507  0000D4                     CalcSynthRegParams@tempVal1:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0x74
  2511  0000D4                     	ds	4
  2512  0000D8                     CalcSynthRegParams@tempVal2:
  2513                           	opt stack 0
  2514                           
  2515                           ; 4 bytes @ 0x78
  2516  0000D8                     	ds	4
  2517  0000DC                     CalcSynthRegParams@tempVal3:
  2518                           	opt stack 0
  2519                           
  2520                           ; 4 bytes @ 0x7C
  2521  0000DC                     	ds	4
  2522  0000E0                     _CalcSynthRegParams$2993:
  2523                           	opt stack 0
  2524                           
  2525                           ; 3 bytes @ 0x80
  2526  0000E0                     	ds	3
  2527  0000E3                     UpdateSynthFreq@data:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x83
  2531  0000E3                     	ds	2
  2532  0000E5                     GroupRx@data:
  2533                           	opt stack 0
  2534  0000E5                     GroupTx@data:
  2535                           	opt stack 0
  2536  0000E5                     GroupCommon@data:
  2537                           	opt stack 0
  2538                           
  2539                           ; 2 bytes @ 0x85
  2540  0000E5                     	ds	2
  2541  0000E7                     GroupRx@request:
  2542                           	opt stack 0
  2543  0000E7                     GroupTx@request:
  2544                           	opt stack 0
  2545  0000E7                     GroupCommon@request:
  2546                           	opt stack 0
  2547                           
  2548                           ; 1 bytes @ 0x87
  2549  0000E7                     	ds	1
  2550  0000E8                     ??_readUartByte:
  2551                           
  2552                           ; 1 bytes @ 0x88
  2553  0000E8                     	ds	3
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1l	equ	0xFE1
  2562                           
  2563                           	psect	cstackCOMRAM
  2564  000001                     __pcstackCOMRAM:
  2565                           	opt stack 0
  2566  000001                     ?i2___lwmod:
  2567                           	opt stack 0
  2568  000001                     i2___lwmod@dividend:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x0
  2572  000001                     	ds	2
  2573  000003                     i2___lwmod@divisor:
  2574                           	opt stack 0
  2575                           
  2576                           ; 2 bytes @ 0x2
  2577  000003                     	ds	2
  2578  000005                     i2___lwmod@counter:
  2579                           	opt stack 0
  2580                           
  2581                           ; 1 bytes @ 0x4
  2582  000005                     	ds	1
  2583  000006                     ??_INTERRUPT_InterruptManager:
  2584                           
  2585                           ; 1 bytes @ 0x5
  2586  000006                     	ds	18
  2587  000018                     ??_EUSART1_Read:
  2588  000018                     ??_isspace:
  2589  000018                     ??_isdigit:
  2590  000018                     ??_isupper:
  2591  000018                     ??_BlinkOkLeds:
  2592  000018                     ??_keepAliveSignalLed:
  2593  000018                     ??_testLeds:
  2594  000018                     ?_ADC_GetConversion:
  2595                           	opt stack 0
  2596  000018                     ?___wmul:
  2597                           	opt stack 0
  2598  000018                     ?___lwdiv:
  2599                           	opt stack 0
  2600  000018                     ?___ftpack:
  2601                           	opt stack 0
  2602  000018                     ?_frexp:
  2603                           	opt stack 0
  2604  000018                     ?___lmul:
  2605                           	opt stack 0
  2606  000018                     ?___lldiv:
  2607                           	opt stack 0
  2608  000018                     SwSpi_Data_Pin@cPinMode:
  2609                           	opt stack 0
  2610  000018                     SwSpi_Clk_Pin@cPinMode:
  2611                           	opt stack 0
  2612  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2613                           	opt stack 0
  2614  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2615                           	opt stack 0
  2616  000018                     EUSART1_Write@txData:
  2617                           	opt stack 0
  2618  000018                     toupper@c:
  2619                           	opt stack 0
  2620  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2621                           	opt stack 0
  2622  000018                     ___wmul@multiplier:
  2623                           	opt stack 0
  2624  000018                     ___lwdiv@dividend:
  2625                           	opt stack 0
  2626  000018                     memset@p1:
  2627                           	opt stack 0
  2628  000018                     ___ftpack@arg:
  2629                           	opt stack 0
  2630  000018                     ___ftge@ff1:
  2631                           	opt stack 0
  2632  000018                     frexp@value:
  2633                           	opt stack 0
  2634  000018                     make8@data:
  2635                           	opt stack 0
  2636  000018                     ___lmul@multiplier:
  2637                           	opt stack 0
  2638  000018                     ___lldiv@dividend:
  2639                           	opt stack 0
  2640                           
  2641                           ; 4 bytes @ 0x17
  2642  000018                     	ds	1
  2643  000019                     SwSpi_Data_Pin@phrType:
  2644                           	opt stack 0
  2645  000019                     SwSpi_Clk_Pin@phrType:
  2646                           	opt stack 0
  2647  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2648                           	opt stack 0
  2649  000019                     _isdigit$2379:
  2650                           	opt stack 0
  2651  000019                     _isspace$2382:
  2652                           	opt stack 0
  2653  000019                     _isupper$2672:
  2654                           	opt stack 0
  2655  000019                     testLeds@idx:
  2656                           	opt stack 0
  2657  000019                     UART_Write_Text@text:
  2658                           	opt stack 0
  2659  000019                     EUSART1_Read@readValue:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x18
  2663  000019                     	ds	1
  2664  00001A                     ??_ADC_GetConversion:
  2665  00001A                     ??_TMR0_Initialize:
  2666  00001A                     SWSPI_DAC_send_bits@data:
  2667                           	opt stack 0
  2668  00001A                     SWSPI_Synth_send_bits@data:
  2669                           	opt stack 0
  2670  00001A                     isdigit@c:
  2671                           	opt stack 0
  2672  00001A                     isspace@c:
  2673                           	opt stack 0
  2674  00001A                     isupper@c:
  2675                           	opt stack 0
  2676  00001A                     ___wmul@multiplicand:
  2677                           	opt stack 0
  2678  00001A                     ___lwdiv@divisor:
  2679                           	opt stack 0
  2680  00001A                     memset@c:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x19
  2684  00001A                     	ds	1
  2685  00001B                     ??_UART_Write_Text:
  2686  00001B                     ??_isalpha:
  2687  00001B                     BlinkOkLeds@state:
  2688                           	opt stack 0
  2689  00001B                     SWSPI_DAC_send_bits@count:
  2690                           	opt stack 0
  2691  00001B                     SWSPI_Synth_send_bits@count:
  2692                           	opt stack 0
  2693  00001B                     ___ftpack@exp:
  2694                           	opt stack 0
  2695  00001B                     frexp@eptr:
  2696                           	opt stack 0
  2697  00001B                     ___ftge@ff2:
  2698                           	opt stack 0
  2699                           
  2700                           ; 3 bytes @ 0x1A
  2701  00001B                     	ds	1
  2702  00001C                     SWSPI_DAC_send_bits@phrType:
  2703                           	opt stack 0
  2704  00001C                     SWSPI_Synth_send_bits@phrType:
  2705                           	opt stack 0
  2706  00001C                     ADC_GetConversion@channel:
  2707                           	opt stack 0
  2708  00001C                     make8@dataLocation:
  2709                           	opt stack 0
  2710  00001C                     ___ftpack@sign:
  2711                           	opt stack 0
  2712  00001C                     ___lwdiv@counter:
  2713                           	opt stack 0
  2714  00001C                     _isalpha$2669:
  2715                           	opt stack 0
  2716  00001C                     BlinkOkLeds@idx:
  2717                           	opt stack 0
  2718  00001C                     ___wmul@product:
  2719                           	opt stack 0
  2720  00001C                     memset@n:
  2721                           	opt stack 0
  2722  00001C                     ___lmul@multiplicand:
  2723                           	opt stack 0
  2724  00001C                     ___lldiv@divisor:
  2725                           	opt stack 0
  2726                           
  2727                           ; 4 bytes @ 0x1B
  2728  00001C                     	ds	1
  2729  00001D                     ??_make8:
  2730  00001D                     ??___ftpack:
  2731  00001D                     ??_frexp:
  2732  00001D                     isalpha@c:
  2733                           	opt stack 0
  2734  00001D                     UART_Write_Text@i:
  2735                           	opt stack 0
  2736  00001D                     ___lwdiv@quotient:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x1C
  2740  00001D                     	ds	1
  2741  00001E                     ??___ftge:
  2742  00001E                     memset@p:
  2743                           	opt stack 0
  2744                           
  2745                           ; 2 bytes @ 0x1D
  2746  00001E                     	ds	1
  2747  00001F                     ?___lwmod:
  2748                           	opt stack 0
  2749  00001F                     ___lwmod@dividend:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x1E
  2753  00001F                     	ds	1
  2754  000020                     ?___altoft:
  2755                           	opt stack 0
  2756  000020                     ?___lltoft:
  2757                           	opt stack 0
  2758  000020                     ?___lwtoft:
  2759                           	opt stack 0
  2760  000020                     ZeroArray@array:
  2761                           	opt stack 0
  2762  000020                     ___lwtoft@c:
  2763                           	opt stack 0
  2764  000020                     ___lmul@product:
  2765                           	opt stack 0
  2766  000020                     ___altoft@c:
  2767                           	opt stack 0
  2768  000020                     ___lldiv@quotient:
  2769                           	opt stack 0
  2770  000020                     ___lltoft@c:
  2771                           	opt stack 0
  2772                           
  2773                           ; 4 bytes @ 0x1F
  2774  000020                     	ds	1
  2775  000021                     ___lwmod@divisor:
  2776                           	opt stack 0
  2777  000021                     SWSPI_send_word@data:
  2778                           	opt stack 0
  2779                           
  2780                           ; 4 bytes @ 0x20
  2781  000021                     	ds	1
  2782  000022                     ZeroArray@size:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0x21
  2786  000022                     	ds	1
  2787  000023                     ___lwmod@counter:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x22
  2791  000023                     	ds	1
  2792  000024                     ??___altoft:
  2793  000024                     ??___lltoft:
  2794  000024                     ?_sprintf:
  2795                           	opt stack 0
  2796  000024                     ?_strtol:
  2797                           	opt stack 0
  2798  000024                     ___lldiv@counter:
  2799                           	opt stack 0
  2800  000024                     sprintf@sp:
  2801                           	opt stack 0
  2802  000024                     strtol@s:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x23
  2806  000024                     	ds	1
  2807  000025                     ?___llmod:
  2808                           	opt stack 0
  2809  000025                     SWSPI_send_word@dataSize:
  2810                           	opt stack 0
  2811  000025                     ___llmod@dividend:
  2812                           	opt stack 0
  2813                           
  2814                           ; 4 bytes @ 0x24
  2815  000025                     	ds	1
  2816  000026                     SWSPI_send_word@datac:
  2817                           	opt stack 0
  2818  000026                     sprintf@f:
  2819                           	opt stack 0
  2820  000026                     strtol@endptr:
  2821                           	opt stack 0
  2822                           
  2823                           ; 2 bytes @ 0x25
  2824  000026                     	ds	1
  2825  000027                     SWSPI_send_word@idx:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x26
  2829  000027                     	ds	1
  2830  000028                     ___altoft@exp:
  2831                           	opt stack 0
  2832  000028                     ___lltoft@exp:
  2833                           	opt stack 0
  2834  000028                     strtol@base:
  2835                           	opt stack 0
  2836                           
  2837                           ; 2 bytes @ 0x27
  2838  000028                     	ds	1
  2839  000029                     SWSPI_send_word@phrType:
  2840                           	opt stack 0
  2841  000029                     ___altoft@sign:
  2842                           	opt stack 0
  2843  000029                     ___llmod@divisor:
  2844                           	opt stack 0
  2845                           
  2846                           ; 4 bytes @ 0x28
  2847  000029                     	ds	1
  2848  00002A                     ??_sprintf:
  2849  00002A                     ??_strtol:
  2850  00002A                     ?___ftdiv:
  2851                           	opt stack 0
  2852  00002A                     ___ftdiv@f1:
  2853                           	opt stack 0
  2854                           
  2855                           ; 3 bytes @ 0x29
  2856  00002A                     	ds	1
  2857  00002B                     
  2858                           ; 1 bytes @ 0x2A
  2859  00002B                     	ds	2
  2860  00002D                     ___llmod@counter:
  2861                           	opt stack 0
  2862  00002D                     ___ftdiv@f2:
  2863                           	opt stack 0
  2864                           
  2865                           ; 3 bytes @ 0x2C
  2866  00002D                     	ds	1
  2867  00002E                     ??_GetIntFromUartData:
  2868  00002E                     
  2869                           ; 1 bytes @ 0x2D
  2870  00002E                     	ds	2
  2871  000030                     ___awtoft@sign:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x2F
  2875  000030                     	ds	1
  2876  000031                     tblptru	equ	0xFF8
  2877                           tblptrh	equ	0xFF7
  2878                           tblptrl	equ	0xFF6
  2879                           tablat	equ	0xFF5
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           postdec1	equ	0xFE5
  2883                           fsr1l	equ	0xFE1
  2884                           
  2885                           ; 1 bytes @ 0x30
  2886 ;;
  2887 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2888 ;;
  2889 ;; *************** function _main *****************
  2890 ;; Defined at:
  2891 ;;		line 13 in file "main.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2905 ;;      Params:         0       0       0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0
  2908 ;;      Totals:         0       0       0       0       0       0       0
  2909 ;;Total ram usage:        0 bytes
  2910 ;; Hardware stack levels required when called:   12
  2911 ;; This function calls:
  2912 ;;		_BlinkOkLeds
  2913 ;;		_InitSystemApplicationManagers
  2914 ;;		_SampleSingleChannel
  2915 ;;		_SendUartSystemInitMessage
  2916 ;;		_SetMcuRunTime
  2917 ;;		_SetMcuSystem
  2918 ;;		_keepAliveSignalLed
  2919 ;;		_readUartByte
  2920 ;; This function is called by:
  2921 ;;		Startup code after reset
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text0
  2926  002BAC                     __ptext0:
  2927                           	opt stack 0
  2928  002BAC                     _main:
  2929                           	opt stack 19
  2930                           
  2931                           ;main.c: 16: SetMcuSystem();
  2932                           
  2933                           ;incstack = 0
  2934  002BAC  EC11  F019         	call	_SetMcuSystem	;wreg free
  2935                           
  2936                           ;main.c: 19: InitSystemApplicationManagers();
  2937  002BB0  ECE5  F018         	call	_InitSystemApplicationManagers	;wreg free
  2938                           
  2939                           ;main.c: 22: SendUartSystemInitMessage();
  2940  002BB4  EC8B  F00E         	call	_SendUartSystemInitMessage	;wreg free
  2941                           
  2942                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2943  002BB8  0E03               	movlw	3
  2944  002BBA  EC1D  F014         	call	_BlinkOkLeds
  2945  002BBE                     
  2946                           ;main.c: 29: {
  2947                           ;main.c: 30: readUartByte();
  2948  002BBE  EC07  F004         	call	_readUartByte	;wreg free
  2949                           
  2950                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2951  002BC2  0101               	movlb	1	; () banked
  2952  002BC4  0555               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  2953  002BC6  A4D8               	btfss	status,2,c
  2954  002BC8  D006               	goto	l1263
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;main.c: 33: {
  2958                           ;main.c: 35: SetMcuRunTime();
  2959  002BCA  EC8C  F016         	call	_SetMcuRunTime	;wreg free
  2960                           
  2961                           ;main.c: 36: TimerOneSecFlag = 0;
  2962  002BCE  0E00               	movlw	0
  2963  002BD0  0101               	movlb	1	; () banked
  2964  002BD2  6F55               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  2965                           
  2966                           ;main.c: 37: }
  2967  002BD4  D7F4               	goto	l1262
  2968  002BD6                     l1263:
  2969                           
  2970                           ; BSR set to: 1
  2971                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  2972                           
  2973                           ; BSR set to: 1
  2974  002BD6  0553               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  2975  002BD8  A4D8               	btfss	status,2,c
  2976  002BDA  D006               	goto	l1265
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;main.c: 39: {
  2980                           ;main.c: 40: keepAliveSignalLed();
  2981  002BDC  ECCE  F018         	call	_keepAliveSignalLed	;wreg free
  2982                           
  2983                           ;main.c: 41: TimerKeepAliveFlag = 0;
  2984  002BE0  0E00               	movlw	0
  2985  002BE2  0101               	movlb	1	; () banked
  2986  002BE4  6F53               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  2987                           
  2988                           ;main.c: 42: }
  2989  002BE6  D7EB               	goto	l1262
  2990  002BE8                     l1265:
  2991                           
  2992                           ; BSR set to: 1
  2993                           ;main.c: 43: else if (TimerSamplingFlag == 1)
  2994                           
  2995                           ; BSR set to: 1
  2996  002BE8  0554               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  2997  002BEA  A4D8               	btfss	status,2,c
  2998  002BEC  D7E8               	goto	l1262
  2999                           
  3000                           ; BSR set to: 1
  3001                           ;main.c: 44: {
  3002                           ;main.c: 45: if(1 == needToSample)
  3003  002BEE  0552               	decf	_needToSample& (0+255),w,b	;volatile
  3004  002BF0  A4D8               	btfss	status,2,c
  3005  002BF2  D7E5               	goto	l1262
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;main.c: 46: {
  3009                           ;main.c: 47: SampleSingleChannel();
  3010  002BF4  EC23  F00C         	call	_SampleSingleChannel	;wreg free
  3011  002BF8  D7E2               	goto	l1262
  3012  002BFA                     __end_of_main:
  3013                           	opt stack 0
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           fsr1l	equ	0xFE1
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _readUartByte *****************
  3025 ;; Defined at:
  3026 ;;		line 28 in file "EusartApp.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  idx             2   76[BANK1 ] int 
  3031 ;;  dest           50   26[BANK1 ] unsigned char [50]
  3032 ;;  chRec           1   78[BANK1 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0      53       0       0       0       0
  3044 ;;      Temps:          0       3       0       0       0       0       0
  3045 ;;      Totals:         0       3      53       0       0       0       0
  3046 ;;Total ram usage:       56 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:   11
  3049 ;; This function calls:
  3050 ;;		_EUSART1_Read
  3051 ;;		_GroupCommon
  3052 ;;		_GroupRx
  3053 ;;		_GroupTx
  3054 ;;		_InitRxMessageParams
  3055 ;;		_UART_Write_Text
  3056 ;;		_sprintf
  3057 ;;		_toupper
  3058 ;; This function is called by:
  3059 ;;		_main
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text1
  3064  00080E                     __ptext1:
  3065                           	opt stack 0
  3066  00080E                     _readUartByte:
  3067                           	opt stack 19
  3068                           
  3069                           ;EusartApp.c: 31: uint8_t chRec = (0);
  3070                           
  3071                           ;incstack = 0
  3072  00080E  0E00               	movlw	0
  3073  000810  0101               	movlb	1	; () banked
  3074  000812  6FCC               	movwf	readUartByte@chRec& (0+255),b
  3075                           
  3076                           ;EusartApp.c: 32: char dest[50];
  3077                           ;EusartApp.c: 34: switch(cState)
  3078  000814  D148               	goto	l172
  3079  000816                     
  3080                           ; BSR set to: 1
  3081                           ;EusartApp.c: 38: InitRxMessageParams();
  3082                           
  3083                           ; BSR set to: 1
  3084  000816  EC47  F016         	call	_InitRxMessageParams	;wreg free
  3085                           
  3086                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  3087  00081A  0E01               	movlw	1
  3088  00081C  0101               	movlb	1	; () banked
  3089  00081E  6F50               	movwf	_cState& (0+255),b
  3090                           
  3091                           ;EusartApp.c: 40: break;
  3092  000820  0012               	return	
  3093  000822                     
  3094                           ; BSR set to: 1
  3095                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  3096                           
  3097                           ; BSR set to: 1
  3098  000822  EC6A  F016         	call	_EUSART1_Read	;wreg free
  3099  000826  0101               	movlb	1	; () banked
  3100  000828  6FCC               	movwf	readUartByte@chRec& (0+255),b
  3101                           
  3102                           ; BSR set to: 1
  3103                           ;EusartApp.c: 46: if(chRec == (0x24))
  3104  00082A  0E24               	movlw	36
  3105  00082C  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3106  00082E  A4D8               	btfss	status,2,c
  3107  000830  0012               	return	
  3108                           
  3109                           ; BSR set to: 1
  3110                           ;EusartApp.c: 47: {
  3111                           ;EusartApp.c: 48: cState = READ_STREAM;
  3112  000832  0E02               	movlw	2
  3113  000834  6F50               	movwf	_cState& (0+255),b
  3114                           
  3115                           ; BSR set to: 1
  3116                           ;EusartApp.c: 49: }
  3117                           ;EusartApp.c: 50: break;
  3118  000836  0012               	return	
  3119  000838                     
  3120                           ; BSR set to: 1
  3121                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  3122                           
  3123                           ; BSR set to: 1
  3124  000838  5151               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  3125  00083A  B4D8               	btfsc	status,2,c
  3126  00083C  0012               	return	
  3127                           
  3128                           ; BSR set to: 1
  3129                           ;EusartApp.c: 55: {
  3130                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  3131  00083E  EC6A  F016         	call	_EUSART1_Read	;wreg free
  3132  000842  0101               	movlb	1	; () banked
  3133  000844  6FCC               	movwf	readUartByte@chRec& (0+255),b
  3134                           
  3135                           ; BSR set to: 1
  3136                           ;EusartApp.c: 57: if(chRec == (0))
  3137  000846  51CC               	movf	readUartByte@chRec& (0+255),w,b
  3138  000848  B4D8               	btfsc	status,2,c
  3139  00084A  0012               	return	
  3140                           
  3141                           ; BSR set to: 1
  3142                           ;EusartApp.c: 61: else if(chRec == (0xd))
  3143                           
  3144                           ; BSR set to: 1
  3145                           
  3146                           ; BSR set to: 1
  3147                           ;EusartApp.c: 60: }
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;EusartApp.c: 58: {
  3151                           ;EusartApp.c: 59: return;
  3152  00084C  0E0D               	movlw	13
  3153  00084E  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3154  000850  A4D8               	btfss	status,2,c
  3155  000852  D003               	goto	l182
  3156                           
  3157                           ; BSR set to: 1
  3158                           ;EusartApp.c: 62: {
  3159                           ;EusartApp.c: 63: cState = READ_GROUP;
  3160  000854  0E03               	movlw	3
  3161  000856  6F50               	movwf	_cState& (0+255),b
  3162                           
  3163                           ;EusartApp.c: 64: }
  3164  000858  0012               	return	
  3165  00085A                     l182:
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;EusartApp.c: 65: else
  3169                           ;EusartApp.c: 66: {
  3170                           ;EusartApp.c: 67: if(chRec != ' ')
  3171                           
  3172                           ; BSR set to: 1
  3173  00085A  0E20               	movlw	32
  3174  00085C  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3175  00085E  B4D8               	btfsc	status,2,c
  3176  000860  0012               	return	
  3177                           
  3178                           ; BSR set to: 1
  3179                           ;EusartApp.c: 68: {
  3180                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  3181  000862  514C               	movf	_msgCount& (0+255),w,b
  3182  000864  0D01               	mullw	1
  3183  000866  0E6A               	movlw	low _rxMsgQueue
  3184  000868  24F3               	addwf	prodl,w,c
  3185  00086A  6ED9               	movwf	fsr2l,c
  3186  00086C  0E01               	movlw	high _rxMsgQueue
  3187  00086E  20F4               	addwfc	prodh,w,c
  3188  000870  6EDA               	movwf	fsr2h,c
  3189  000872  C1CC  FFDF         	movff	readUartByte@chRec,indf2
  3190                           
  3191                           ; BSR set to: 1
  3192  000876  2B4C               	incf	_msgCount& (0+255),f,b
  3193                           
  3194                           ; BSR set to: 1
  3195                           ;EusartApp.c: 76: }
  3196                           ;EusartApp.c: 77: break;
  3197                           
  3198                           ; BSR set to: 1
  3199                           ;EusartApp.c: 73: else
  3200                           ;EusartApp.c: 74: {
  3201                           ;EusartApp.c: 75: return;
  3202                           
  3203                           ; BSR set to: 1
  3204                           ;EusartApp.c: 70: }
  3205                           ;EusartApp.c: 71: }
  3206                           ;EusartApp.c: 72: }
  3207                           
  3208                           ; BSR set to: 1
  3209                           
  3210                           ; BSR set to: 1
  3211  000878  0012               	return	
  3212  00087A                     
  3213                           ; BSR set to: 1
  3214                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  3215                           
  3216                           ; BSR set to: 1
  3217  00087A  516A               	movf	_rxMsgQueue& (0+255),w,b
  3218  00087C  ECF0  F018         	call	_toupper
  3219  000880  0101               	movlb	1	; () banked
  3220  000882  6FCC               	movwf	readUartByte@chRec& (0+255),b
  3221                           
  3222                           ;EusartApp.c: 83: switch(chRec)
  3223  000884  D023               	goto	l187
  3224  000886                     
  3225                           ; BSR set to: 1
  3226                           ;EusartApp.c: 87: group = RX_GROUP;
  3227                           
  3228                           ; BSR set to: 1
  3229  000886  0E00               	movlw	0
  3230  000888  6F4F               	movwf	_group& (0+255),b
  3231                           
  3232                           ;EusartApp.c: 88: cState = READ_REQUEST;
  3233  00088A  0E04               	movlw	4
  3234  00088C  6F50               	movwf	_cState& (0+255),b
  3235                           
  3236                           ;EusartApp.c: 89: break;
  3237  00088E  0012               	return	
  3238  000890                     
  3239                           ; BSR set to: 1
  3240                           ;EusartApp.c: 93: group = TX_GROUP;
  3241                           
  3242                           ; BSR set to: 1
  3243  000890  0E01               	movlw	1
  3244  000892  6F4F               	movwf	_group& (0+255),b
  3245                           
  3246                           ;EusartApp.c: 94: cState = READ_REQUEST;
  3247  000894  0E04               	movlw	4
  3248  000896  6F50               	movwf	_cState& (0+255),b
  3249                           
  3250                           ;EusartApp.c: 95: break;
  3251  000898  0012               	return	
  3252  00089A                     
  3253                           ; BSR set to: 1
  3254                           ;EusartApp.c: 99: group = COMMON_GROUP;
  3255                           
  3256                           ; BSR set to: 1
  3257  00089A  0E02               	movlw	2
  3258  00089C  6F4F               	movwf	_group& (0+255),b
  3259                           
  3260                           ;EusartApp.c: 100: cState = READ_REQUEST;
  3261  00089E  0E04               	movlw	4
  3262  0008A0  6F50               	movwf	_cState& (0+255),b
  3263                           
  3264                           ;EusartApp.c: 101: break;
  3265  0008A2  0012               	return	
  3266  0008A4                     
  3267                           ; BSR set to: 1
  3268                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  3269                           
  3270                           ; BSR set to: 1
  3271  0008A4  0E98               	movlw	low readUartByte@dest
  3272  0008A6  6E24               	movwf	sprintf@sp,c
  3273  0008A8  0E01               	movlw	high readUartByte@dest
  3274  0008AA  6E25               	movwf	sprintf@sp+1,c
  3275  0008AC  0ECE               	movlw	low STR_8
  3276  0008AE  6E26               	movwf	sprintf@f,c
  3277  0008B0  0E7F               	movlw	high STR_8
  3278  0008B2  6E27               	movwf	sprintf@f+1,c
  3279  0008B4  EC82  F008         	call	_sprintf	;wreg free
  3280                           
  3281                           ;EusartApp.c: 105: UART_Write_Text(dest);
  3282  0008B8  0E98               	movlw	low readUartByte@dest
  3283  0008BA  6E19               	movwf	UART_Write_Text@text,c
  3284  0008BC  0E01               	movlw	high readUartByte@dest
  3285  0008BE  6E1A               	movwf	UART_Write_Text@text+1,c
  3286  0008C0  EC4C  F013         	call	_UART_Write_Text	;wreg free
  3287                           
  3288                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  3289  0008C4  0E00               	movlw	0
  3290  0008C6  0101               	movlb	1	; () banked
  3291  0008C8  6F50               	movwf	_cState& (0+255),b
  3292                           
  3293                           ; BSR set to: 1
  3294                           ;EusartApp.c: 108: }
  3295                           
  3296                           ;EusartApp.c: 107: break;
  3297  0008CA  0012               	return	
  3298  0008CC                     l187:
  3299                           
  3300                           ; BSR set to: 1
  3301                           
  3302                           ; BSR set to: 1
  3303  0008CC  51CC               	movf	readUartByte@chRec& (0+255),w,b
  3304                           
  3305                           ; Switch size 1, requested type "space"
  3306                           ; Number of cases is 3, Range of values is 82 to 84
  3307                           ; switch strategies available:
  3308                           ; Name         Instructions Cycles
  3309                           ; simple_byte           10     6 (average)
  3310                           ;	Chosen strategy is simple_byte
  3311  0008CE  0A52               	xorlw	82	; case 82
  3312  0008D0  B4D8               	btfsc	status,2,c
  3313  0008D2  D7D9               	goto	l188
  3314  0008D4  0A01               	xorlw	1	; case 83
  3315  0008D6  B4D8               	btfsc	status,2,c
  3316  0008D8  D7E0               	goto	l191
  3317  0008DA  0A07               	xorlw	7	; case 84
  3318  0008DC  B4D8               	btfsc	status,2,c
  3319  0008DE  D7D8               	goto	l190
  3320  0008E0  D7E1               	goto	l192
  3321  0008E2                     
  3322                           ; BSR set to: 1
  3323                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  3324                           
  3325                           ; BSR set to: 1
  3326  0008E2  516B               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3327  0008E4  ECF0  F018         	call	_toupper
  3328  0008E8  0101               	movlb	1	; () banked
  3329  0008EA  6FCC               	movwf	readUartByte@chRec& (0+255),b
  3330                           
  3331                           ;EusartApp.c: 115: switch(group)
  3332  0008EC  D06C               	goto	l194
  3333  0008EE                     
  3334                           ; BSR set to: 1
  3335                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  3336                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'C' || chRec == 'S' ||
  3337                           ;EusartApp.c: 121: chRec == 'C')
  3338                           
  3339                           ; BSR set to: 1
  3340  0008EE  0E49               	movlw	73
  3341  0008F0  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3342  0008F2  B4D8               	btfsc	status,2,c
  3343  0008F4  D018               	goto	u8630
  3344                           
  3345                           ; BSR set to: 1
  3346  0008F6  0E46               	movlw	70
  3347  0008F8  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3348  0008FA  B4D8               	btfsc	status,2,c
  3349  0008FC  D014               	goto	u8630
  3350                           
  3351                           ; BSR set to: 1
  3352  0008FE  0E51               	movlw	81
  3353  000900  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3354  000902  B4D8               	btfsc	status,2,c
  3355  000904  D010               	goto	u8630
  3356                           
  3357                           ; BSR set to: 1
  3358  000906  0E58               	movlw	88
  3359  000908  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3360  00090A  B4D8               	btfsc	status,2,c
  3361  00090C  D00C               	goto	u8630
  3362                           
  3363                           ; BSR set to: 1
  3364  00090E  0E43               	movlw	67
  3365  000910  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3366  000912  B4D8               	btfsc	status,2,c
  3367  000914  D008               	goto	u8630
  3368                           
  3369                           ; BSR set to: 1
  3370  000916  0E53               	movlw	83
  3371  000918  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3372  00091A  B4D8               	btfsc	status,2,c
  3373  00091C  D004               	goto	u8630
  3374                           
  3375                           ; BSR set to: 1
  3376  00091E  0E43               	movlw	67
  3377  000920  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3378  000922  A4D8               	btfss	status,2,c
  3379  000924  D006               	goto	l196
  3380  000926                     u8630:
  3381                           
  3382                           ; BSR set to: 1
  3383                           ;EusartApp.c: 122: {
  3384                           ;EusartApp.c: 124: request = chRec - '0';
  3385                           
  3386                           ; BSR set to: 1
  3387  000926  51CC               	movf	readUartByte@chRec& (0+255),w,b
  3388  000928  0FD0               	addlw	208
  3389  00092A  6F4E               	movwf	_request& (0+255),b
  3390                           
  3391                           ; BSR set to: 1
  3392                           ;EusartApp.c: 125: cState = READ_DATA_SIZE;
  3393  00092C  0E05               	movlw	5
  3394  00092E  6F50               	movwf	_cState& (0+255),b
  3395                           
  3396                           ;EusartApp.c: 127: }
  3397  000930  0012               	return	
  3398  000932                     l196:
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;EusartApp.c: 128: else
  3402                           ;EusartApp.c: 129: {
  3403                           ;EusartApp.c: 130: UART_Write_Text("NOT OK \n\r");
  3404                           
  3405                           ; BSR set to: 1
  3406  000932  0ED9               	movlw	low STR_1
  3407  000934  6E19               	movwf	UART_Write_Text@text,c
  3408  000936  0E7F               	movlw	high STR_1
  3409  000938  6E1A               	movwf	UART_Write_Text@text+1,c
  3410  00093A  EC4C  F013         	call	_UART_Write_Text	;wreg free
  3411                           
  3412                           ;EusartApp.c: 131: cState = START_RX_MESSAGE_READ;
  3413  00093E  0E00               	movlw	0
  3414  000940  0101               	movlb	1	; () banked
  3415  000942  6F50               	movwf	_cState& (0+255),b
  3416                           
  3417                           ; BSR set to: 1
  3418                           ;EusartApp.c: 132: }
  3419                           ;EusartApp.c: 133: return;
  3420                           
  3421                           ; BSR set to: 1
  3422  000944  0012               	return	
  3423  000946                     
  3424                           ; BSR set to: 1
  3425                           ;EusartApp.c: 137: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  3426                           
  3427                           ; BSR set to: 1
  3428  000946  0E49               	movlw	73
  3429  000948  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3430  00094A  B4D8               	btfsc	status,2,c
  3431  00094C  D014               	goto	u8690
  3432                           
  3433                           ; BSR set to: 1
  3434  00094E  0E46               	movlw	70
  3435  000950  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3436  000952  B4D8               	btfsc	status,2,c
  3437  000954  D010               	goto	u8690
  3438                           
  3439                           ; BSR set to: 1
  3440  000956  0E51               	movlw	81
  3441  000958  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3442  00095A  B4D8               	btfsc	status,2,c
  3443  00095C  D00C               	goto	u8690
  3444                           
  3445                           ; BSR set to: 1
  3446  00095E  0E58               	movlw	88
  3447  000960  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3448  000962  B4D8               	btfsc	status,2,c
  3449  000964  D008               	goto	u8690
  3450                           
  3451                           ; BSR set to: 1
  3452  000966  0E42               	movlw	66
  3453  000968  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3454  00096A  B4D8               	btfsc	status,2,c
  3455  00096C  D004               	goto	u8690
  3456                           
  3457                           ; BSR set to: 1
  3458  00096E  0E53               	movlw	83
  3459  000970  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3460  000972  A4D8               	btfss	status,2,c
  3461  000974  D006               	goto	l201
  3462  000976                     u8690:
  3463                           
  3464                           ; BSR set to: 1
  3465                           ;EusartApp.c: 138: {
  3466                           ;EusartApp.c: 139: request = (chRec - '0');
  3467                           
  3468                           ; BSR set to: 1
  3469  000976  51CC               	movf	readUartByte@chRec& (0+255),w,b
  3470  000978  0FD0               	addlw	208
  3471  00097A  6F4E               	movwf	_request& (0+255),b
  3472                           
  3473                           ; BSR set to: 1
  3474                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  3475  00097C  0E05               	movlw	5
  3476  00097E  6F50               	movwf	_cState& (0+255),b
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;EusartApp.c: 142: }
  3480                           
  3481                           ; BSR set to: 1
  3482                           ;EusartApp.c: 141: return;
  3483  000980  0012               	return	
  3484  000982                     l201:
  3485                           
  3486                           ; BSR set to: 1
  3487                           ;EusartApp.c: 143: else
  3488                           ;EusartApp.c: 144: {
  3489                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  3490                           
  3491                           ; BSR set to: 1
  3492  000982  0ED9               	movlw	low STR_1
  3493  000984  6E19               	movwf	UART_Write_Text@text,c
  3494  000986  0E7F               	movlw	high STR_1
  3495  000988  6E1A               	movwf	UART_Write_Text@text+1,c
  3496  00098A  EC4C  F013         	call	_UART_Write_Text	;wreg free
  3497                           
  3498                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  3499  00098E  0E00               	movlw	0
  3500  000990  0101               	movlb	1	; () banked
  3501  000992  6F50               	movwf	_cState& (0+255),b
  3502                           
  3503                           ; BSR set to: 1
  3504                           ;EusartApp.c: 147: }
  3505                           ;EusartApp.c: 148: break;
  3506  000994  0012               	return	
  3507  000996                     
  3508                           ; BSR set to: 1
  3509                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L')
  3510                           
  3511                           ; BSR set to: 1
  3512  000996  0E48               	movlw	72
  3513  000998  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3514  00099A  B4D8               	btfsc	status,2,c
  3515  00099C  D004               	goto	u8710
  3516                           
  3517                           ; BSR set to: 1
  3518  00099E  0E4C               	movlw	76
  3519  0009A0  19CC               	xorwf	readUartByte@chRec& (0+255),w,b
  3520  0009A2  A4D8               	btfss	status,2,c
  3521  0009A4  D006               	goto	l207
  3522  0009A6                     u8710:
  3523                           
  3524                           ; BSR set to: 1
  3525                           ;EusartApp.c: 153: {
  3526                           ;EusartApp.c: 154: request = (chRec - '0');
  3527                           
  3528                           ; BSR set to: 1
  3529  0009A6  51CC               	movf	readUartByte@chRec& (0+255),w,b
  3530  0009A8  0FD0               	addlw	208
  3531  0009AA  6F4E               	movwf	_request& (0+255),b
  3532                           
  3533                           ; BSR set to: 1
  3534                           ;EusartApp.c: 155: cState = READ_DATA_SIZE;
  3535  0009AC  0E05               	movlw	5
  3536  0009AE  6F50               	movwf	_cState& (0+255),b
  3537                           
  3538                           ;EusartApp.c: 156: }
  3539  0009B0  0012               	return	
  3540  0009B2                     l207:
  3541                           
  3542                           ; BSR set to: 1
  3543                           ;EusartApp.c: 157: else
  3544                           ;EusartApp.c: 158: {
  3545                           ;EusartApp.c: 159: UART_Write_Text("NOT OK \n\r");
  3546                           
  3547                           ; BSR set to: 1
  3548  0009B2  0ED9               	movlw	low STR_1
  3549  0009B4  6E19               	movwf	UART_Write_Text@text,c
  3550  0009B6  0E7F               	movlw	high STR_1
  3551  0009B8  6E1A               	movwf	UART_Write_Text@text+1,c
  3552  0009BA  EC4C  F013         	call	_UART_Write_Text	;wreg free
  3553                           
  3554                           ;EusartApp.c: 160: cState = START_RX_MESSAGE_READ;
  3555  0009BE  0E00               	movlw	0
  3556  0009C0  0101               	movlb	1	; () banked
  3557  0009C2  6F50               	movwf	_cState& (0+255),b
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;EusartApp.c: 161: }
  3561                           ;EusartApp.c: 162: }
  3562  0009C4  0012               	return	
  3563  0009C6                     l194:
  3564                           
  3565                           ; BSR set to: 1
  3566                           
  3567                           ; BSR set to: 1
  3568  0009C6  514F               	movf	_group& (0+255),w,b
  3569                           
  3570                           ; Switch size 1, requested type "space"
  3571                           ; Number of cases is 3, Range of values is 0 to 2
  3572                           ; switch strategies available:
  3573                           ; Name         Instructions Cycles
  3574                           ; simple_byte           10     6 (average)
  3575                           ;	Chosen strategy is simple_byte
  3576  0009C8  0A00               	xorlw	0	; case 0
  3577  0009CA  B4D8               	btfsc	status,2,c
  3578  0009CC  D790               	goto	l195
  3579  0009CE  0A01               	xorlw	1	; case 1
  3580  0009D0  B4D8               	btfsc	status,2,c
  3581  0009D2  D7B9               	goto	l200
  3582  0009D4  0A03               	xorlw	3	; case 2
  3583  0009D6  A4D8               	btfss	status,2,c
  3584                           
  3585                           ; BSR set to: 1
  3586                           ;EusartApp.c: 163: return;
  3587  0009D8  0012               	return	
  3588  0009DA  D7DD               	goto	l206
  3589  0009DC                     
  3590                           ; BSR set to: 1
  3591                           ;EusartApp.c: 167: dataSize = msgCount - 2;
  3592                           
  3593                           ; BSR set to: 1
  3594  0009DC  514C               	movf	_msgCount& (0+255),w,b
  3595  0009DE  0FFE               	addlw	254
  3596  0009E0  6F4D               	movwf	_dataSize& (0+255),b
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;EusartApp.c: 168: rxMsgData[(0x0)] = dataSize;
  3600  0009E2  C14D  F156         	movff	_dataSize,_rxMsgData
  3601                           
  3602                           ; BSR set to: 1
  3603                           ;EusartApp.c: 169: if(dataSize == 0)
  3604  0009E6  514D               	movf	_dataSize& (0+255),w,b
  3605  0009E8  A4D8               	btfss	status,2,c
  3606  0009EA  D003               	goto	l212
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;EusartApp.c: 170: {
  3610                           ;EusartApp.c: 171: cState = JUMP_FUNCTION;
  3611  0009EC  0E08               	movlw	8
  3612  0009EE  6F50               	movwf	_cState& (0+255),b
  3613                           
  3614                           ;EusartApp.c: 172: }
  3615  0009F0  0012               	return	
  3616  0009F2                     l212:
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;EusartApp.c: 173: else
  3620                           ;EusartApp.c: 174: {
  3621                           ;EusartApp.c: 175: cState = READ_DATA;
  3622                           
  3623                           ; BSR set to: 1
  3624  0009F2  0E06               	movlw	6
  3625  0009F4  6F50               	movwf	_cState& (0+255),b
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;EusartApp.c: 176: }
  3629                           ;EusartApp.c: 178: break;
  3630  0009F6  0012               	return	
  3631  0009F8                     
  3632                           ; BSR set to: 1
  3633                           ;EusartApp.c: 182: for(int idx = 1; idx < dataSize + 1; idx++)
  3634                           
  3635                           ; BSR set to: 1
  3636  0009F8  0E00               	movlw	0
  3637  0009FA  6FCB               	movwf	(readUartByte@idx+1)& (0+255),b
  3638  0009FC  0E01               	movlw	1
  3639  0009FE  6FCA               	movwf	readUartByte@idx& (0+255),b
  3640  000A00  D01B               	goto	l215
  3641  000A02                     
  3642                           ;EusartApp.c: 183: {
  3643                           ;EusartApp.c: 184: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  3644                           
  3645                           ; BSR set to: 1
  3646  000A02  0E01               	movlw	1
  3647  000A04  0101               	movlb	1	; () banked
  3648  000A06  25CA               	addwf	readUartByte@idx& (0+255),w,b
  3649  000A08  0100               	movlb	0	; () banked
  3650  000A0A  6FE8               	movwf	??_readUartByte& (0+255),b
  3651  000A0C  0E00               	movlw	0
  3652  000A0E  0101               	movlb	1	; () banked
  3653  000A10  21CB               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3654  000A12  0100               	movlb	0	; () banked
  3655  000A14  6FE9               	movwf	(??_readUartByte+1)& (0+255),b
  3656  000A16  0E6A               	movlw	low _rxMsgQueue
  3657  000A18  25E8               	addwf	??_readUartByte& (0+255),w,b
  3658  000A1A  6ED9               	movwf	fsr2l,c
  3659  000A1C  0E01               	movlw	high _rxMsgQueue
  3660  000A1E  21E9               	addwfc	(??_readUartByte+1)& (0+255),w,b
  3661  000A20  6EDA               	movwf	fsr2h,c
  3662  000A22  0E56               	movlw	low _rxMsgData
  3663  000A24  0101               	movlb	1	; () banked
  3664  000A26  25CA               	addwf	readUartByte@idx& (0+255),w,b
  3665  000A28  6EE1               	movwf	fsr1l,c
  3666  000A2A  0E01               	movlw	high _rxMsgData
  3667  000A2C  21CB               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3668  000A2E  6EE2               	movwf	fsr1h,c
  3669  000A30  CFDF FFE7          	movff	indf2,indf1
  3670                           
  3671                           ; BSR set to: 1
  3672  000A34  4BCA               	infsnz	readUartByte@idx& (0+255),f,b
  3673  000A36  2BCB               	incf	(readUartByte@idx+1)& (0+255),f,b
  3674  000A38                     l215:
  3675                           
  3676                           ; BSR set to: 1
  3677                           
  3678                           ; BSR set to: 1
  3679  000A38  514D               	movf	_dataSize& (0+255),w,b
  3680  000A3A  0100               	movlb	0	; () banked
  3681  000A3C  6FE8               	movwf	??_readUartByte& (0+255),b
  3682  000A3E  6BE9               	clrf	(??_readUartByte+1)& (0+255),b
  3683  000A40  0E01               	movlw	1
  3684  000A42  27E8               	addwf	??_readUartByte& (0+255),f,b
  3685  000A44  0E00               	movlw	0
  3686  000A46  23E9               	addwfc	(??_readUartByte+1)& (0+255),f,b
  3687  000A48  51E8               	movf	??_readUartByte& (0+255),w,b
  3688  000A4A  0101               	movlb	1	; () banked
  3689  000A4C  5DCA               	subwf	readUartByte@idx& (0+255),w,b
  3690  000A4E  51CB               	movf	(readUartByte@idx+1)& (0+255),w,b
  3691  000A50  0A80               	xorlw	128
  3692  000A52  0100               	movlb	0	; () banked
  3693  000A54  6FEA               	movwf	(??_readUartByte+2)& (0+255),b
  3694  000A56  51E9               	movf	(??_readUartByte+1)& (0+255),w,b
  3695  000A58  0A80               	xorlw	128
  3696  000A5A  59EA               	subwfb	(??_readUartByte+2)& (0+255),w,b
  3697  000A5C  A0D8               	btfss	status,0,c
  3698  000A5E  D7D1               	goto	l216
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;EusartApp.c: 185: }
  3702                           ;EusartApp.c: 187: cState = JUMP_FUNCTION;
  3703                           
  3704                           ; BSR set to: 0
  3705  000A60  0E08               	movlw	8
  3706  000A62  0101               	movlb	1	; () banked
  3707  000A64  6F50               	movwf	_cState& (0+255),b
  3708                           
  3709                           ;EusartApp.c: 188: break;
  3710  000A66  0012               	return	
  3711  000A68                     
  3712                           ; BSR set to: 1
  3713                           ;EusartApp.c: 192: groupsArray[group](request, rxMsgData);
  3714                           
  3715                           ; BSR set to: 1
  3716  000A68  514F               	movf	_group& (0+255),w,b
  3717  000A6A  0D02               	mullw	2
  3718  000A6C  0ECD               	movlw	low _groupsArray
  3719  000A6E  24F3               	addwf	prodl,w,c
  3720  000A70  6ED9               	movwf	fsr2l,c
  3721  000A72  0E01               	movlw	high _groupsArray
  3722  000A74  20F4               	addwfc	prodh,w,c
  3723  000A76  6EDA               	movwf	fsr2h,c
  3724  000A78  D801               	call	u8748
  3725  000A7A  D011               	goto	u8749
  3726  000A7C                     u8748:
  3727  000A7C  0005               	push	
  3728  000A7E  6EFA               	movwf	pclath,c
  3729  000A80  50DE               	movf	postinc2,w,c
  3730  000A82  6EFD               	movwf	tosl,c
  3731  000A84  50DE               	movf	postinc2,w,c
  3732  000A86  6EFE               	movwf	tosh,c
  3733  000A88  50F8               	movf	tblptru,w,c
  3734  000A8A  6EFF               	movwf	tosu,c
  3735  000A8C  50FA               	movf	pclath,w,c
  3736  000A8E  0E56               	movlw	low _rxMsgData
  3737  000A90  0100               	movlb	0	; () banked
  3738  000A92  6FE5               	movwf	GroupCommon@data& (0+255),b
  3739  000A94  0E01               	movlw	high _rxMsgData
  3740  000A96  6FE6               	movwf	(GroupCommon@data+1)& (0+255),b
  3741  000A98  0101               	movlb	1	; () banked
  3742  000A9A  514E               	movf	_request& (0+255),w,b
  3743  000A9C  0012               	return		;indir
  3744  000A9E                     u8749:
  3745                           
  3746                           ;EusartApp.c: 193: cState = START_RX_MESSAGE_READ;
  3747  000A9E  0E00               	movlw	0
  3748  000AA0  0101               	movlb	1	; () banked
  3749  000AA2  6F50               	movwf	_cState& (0+255),b
  3750                           
  3751                           ; BSR set to: 1
  3752                           ;EusartApp.c: 195: }
  3753                           
  3754                           ;EusartApp.c: 194: break;
  3755  000AA4  0012               	return	
  3756  000AA6                     l172:
  3757                           
  3758                           ; BSR set to: 1
  3759                           
  3760                           ; BSR set to: 1
  3761  000AA6  5150               	movf	_cState& (0+255),w,b
  3762                           
  3763                           ; Switch size 1, requested type "space"
  3764                           ; Number of cases is 8, Range of values is 0 to 8
  3765                           ; switch strategies available:
  3766                           ; Name         Instructions Cycles
  3767                           ; simple_byte           25    13 (average)
  3768                           ;	Chosen strategy is simple_byte
  3769  000AA8  0A00               	xorlw	0	; case 0
  3770  000AAA  B4D8               	btfsc	status,2,c
  3771  000AAC  D6B4               	goto	l173
  3772  000AAE  0A01               	xorlw	1	; case 1
  3773  000AB0  B4D8               	btfsc	status,2,c
  3774  000AB2  D6B7               	goto	l175
  3775  000AB4  0A03               	xorlw	3	; case 2
  3776  000AB6  B4D8               	btfsc	status,2,c
  3777  000AB8  D6BF               	goto	l177
  3778  000ABA  0A01               	xorlw	1	; case 3
  3779  000ABC  B4D8               	btfsc	status,2,c
  3780  000ABE  D6DD               	goto	l186
  3781  000AC0  0A07               	xorlw	7	; case 4
  3782  000AC2  B4D8               	btfsc	status,2,c
  3783  000AC4  D70E               	goto	l193
  3784  000AC6  0A01               	xorlw	1	; case 5
  3785  000AC8  B4D8               	btfsc	status,2,c
  3786  000ACA  D788               	goto	l211
  3787  000ACC  0A03               	xorlw	3	; case 6
  3788  000ACE  B4D8               	btfsc	status,2,c
  3789  000AD0  D793               	goto	l214
  3790  000AD2  0A0E               	xorlw	14	; case 8
  3791  000AD4  A4D8               	btfss	status,2,c
  3792  000AD6  0012               	return	
  3793  000AD8  D7C7               	goto	l218
  3794  000ADA                     __end_of_readUartByte:
  3795                           	opt stack 0
  3796                           tosu	equ	0xFFF
  3797                           tosh	equ	0xFFE
  3798                           tosl	equ	0xFFD
  3799                           pclath	equ	0xFFA
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           indf1	equ	0xFE7
  3809                           postdec1	equ	0xFE5
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _InitRxMessageParams *****************
  3819 ;; Defined at:
  3820 ;;		line 198 in file "EusartApp.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3834 ;;      Params:         0       0       0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0
  3837 ;;      Totals:         0       0       0       0       0       0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    5
  3841 ;; This function calls:
  3842 ;;		_ZeroArray
  3843 ;; This function is called by:
  3844 ;;		_readUartByte
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text2
  3849  002C8E                     __ptext2:
  3850                           	opt stack 0
  3851  002C8E                     _InitRxMessageParams:
  3852                           	opt stack 24
  3853                           
  3854                           ;EusartApp.c: 200: group = 0;
  3855                           
  3856                           ; BSR set to: 1
  3857                           ;incstack = 0
  3858  002C8E  0E00               	movlw	0
  3859  002C90  0101               	movlb	1	; () banked
  3860  002C92  6F4F               	movwf	_group& (0+255),b
  3861                           
  3862                           ;EusartApp.c: 201: request = 0;
  3863  002C94  0E00               	movlw	0
  3864  002C96  6F4E               	movwf	_request& (0+255),b
  3865                           
  3866                           ;EusartApp.c: 202: msgCount = 0;
  3867  002C98  0E00               	movlw	0
  3868  002C9A  6F4C               	movwf	_msgCount& (0+255),b
  3869                           
  3870                           ;EusartApp.c: 203: dataSize = 0;
  3871  002C9C  0E00               	movlw	0
  3872  002C9E  6F4D               	movwf	_dataSize& (0+255),b
  3873                           
  3874                           ;EusartApp.c: 204: crcCalc = 0;
  3875  002CA0  0E00               	movlw	0
  3876  002CA2  0100               	movlb	0	; () banked
  3877  002CA4  6FF5               	movwf	_crcCalc& (0+255),b
  3878                           
  3879                           ;EusartApp.c: 205: crcGiven = 0;
  3880  002CA6  0E00               	movlw	0
  3881  002CA8  6FF4               	movwf	_crcGiven& (0+255),b
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;EusartApp.c: 206: ZeroArray(rxMsgQueue, (0x14));
  3885  002CAA  0E6A               	movlw	low _rxMsgQueue
  3886  002CAC  6E20               	movwf	ZeroArray@array,c
  3887  002CAE  0E01               	movlw	high _rxMsgQueue
  3888  002CB0  6E21               	movwf	ZeroArray@array+1,c
  3889  002CB2  0E00               	movlw	0
  3890  002CB4  6E23               	movwf	ZeroArray@size+1,c
  3891  002CB6  0E14               	movlw	20
  3892  002CB8  6E22               	movwf	ZeroArray@size,c
  3893  002CBA  ECA4  F018         	call	_ZeroArray
  3894                           
  3895                           ;EusartApp.c: 207: ZeroArray(rxMsgData, (0x14));
  3896  002CBE  0E56               	movlw	low _rxMsgData
  3897  002CC0  6E20               	movwf	ZeroArray@array,c
  3898  002CC2  0E01               	movlw	high _rxMsgData
  3899  002CC4  6E21               	movwf	ZeroArray@array+1,c
  3900  002CC6  0E00               	movlw	0
  3901  002CC8  6E23               	movwf	ZeroArray@size+1,c
  3902  002CCA  0E14               	movlw	20
  3903  002CCC  6E22               	movwf	ZeroArray@size,c
  3904  002CCE  ECA4  F018         	call	_ZeroArray	;wreg free
  3905  002CD2  0012               	return		;funcret
  3906  002CD4                     __end_of_InitRxMessageParams:
  3907                           	opt stack 0
  3908                           tosu	equ	0xFFF
  3909                           tosh	equ	0xFFE
  3910                           tosl	equ	0xFFD
  3911                           pclath	equ	0xFFA
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           postinc0	equ	0xFEE
  3919                           wreg	equ	0xFE8
  3920                           indf1	equ	0xFE7
  3921                           postdec1	equ	0xFE5
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           postinc2	equ	0xFDE
  3926                           fsr2h	equ	0xFDA
  3927                           fsr2l	equ	0xFD9
  3928                           status	equ	0xFD8
  3929                           
  3930 ;; *************** function _GroupCommon *****************
  3931 ;; Defined at:
  3932 ;;		line 80 in file "MessageFunctions.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  request         1    wreg     enum E6
  3935 ;;  data            2  133[BANK0 ] PTR unsigned char 
  3936 ;;		 -> rxMsgData(20), 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  request         1  135[BANK0 ] enum E6
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         0       2       0       0       0       0       0
  3949 ;;      Locals:         0       1       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0
  3951 ;;      Totals:         0       3       0       0       0       0       0
  3952 ;;Total ram usage:        3 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    6
  3955 ;; This function calls:
  3956 ;;		_PrintHelpScreen
  3957 ;;		_testLeds
  3958 ;; This function is called by:
  3959 ;;		_readUartByte
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text3
  3964  0030A0                     __ptext3:
  3965                           	opt stack 0
  3966  0030A0                     _GroupCommon:
  3967                           	opt stack 23
  3968                           
  3969                           ;incstack = 0
  3970                           ;GroupCommon@request stored from wreg
  3971  0030A0  0100               	movlb	0	; () banked
  3972  0030A2  6FE7               	movwf	GroupCommon@request& (0+255),b
  3973                           
  3974                           ;MessageFunctions.c: 82: switch (request)
  3975  0030A4  D006               	goto	l1084
  3976  0030A6                     
  3977                           ;MessageFunctions.c: 85: PrintHelpScreen();
  3978  0030A6  EC6D  F005         	call	_PrintHelpScreen	;wreg free
  3979                           
  3980                           ;MessageFunctions.c: 86: break;
  3981  0030AA  0012               	return	
  3982  0030AC                     
  3983                           ;MessageFunctions.c: 89: testLeds();
  3984  0030AC  ECED  F013         	call	_testLeds	;wreg free
  3985                           
  3986                           ;MessageFunctions.c: 94: }
  3987                           
  3988                           ;MessageFunctions.c: 93: break;
  3989                           
  3990                           ;MessageFunctions.c: 92: default:
  3991                           
  3992                           ;MessageFunctions.c: 90: break;
  3993  0030B0  0012               	return	
  3994  0030B2                     l1084:
  3995  0030B2  0100               	movlb	0	; () banked
  3996  0030B4  51E7               	movf	GroupCommon@request& (0+255),w,b
  3997                           
  3998                           ; Switch size 1, requested type "space"
  3999                           ; Number of cases is 2, Range of values is 24 to 28
  4000                           ; switch strategies available:
  4001                           ; Name         Instructions Cycles
  4002                           ; simple_byte            7     4 (average)
  4003                           ;	Chosen strategy is simple_byte
  4004  0030B6  0A18               	xorlw	24	; case 24
  4005  0030B8  B4D8               	btfsc	status,2,c
  4006  0030BA  D7F5               	goto	l1085
  4007  0030BC  0A04               	xorlw	4	; case 28
  4008  0030BE  A4D8               	btfss	status,2,c
  4009  0030C0  0012               	return	
  4010  0030C2  D7F4               	goto	l1087
  4011  0030C4                     __end_of_GroupCommon:
  4012                           	opt stack 0
  4013                           tosu	equ	0xFFF
  4014                           tosh	equ	0xFFE
  4015                           tosl	equ	0xFFD
  4016                           pclath	equ	0xFFA
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           indf1	equ	0xFE7
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _GroupRx *****************
  4036 ;; Defined at:
  4037 ;;		line 11 in file "MessageFunctions.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  request         1    wreg     enum E6
  4040 ;;  data            2  133[BANK0 ] PTR unsigned char 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  request         1  135[BANK0 ] enum E6
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4052 ;;      Params:         0       2       0       0       0       0       0
  4053 ;;      Locals:         0       1       0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0       0
  4055 ;;      Totals:         0       3       0       0       0       0       0
  4056 ;;Total ram usage:        3 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:   10
  4059 ;; This function calls:
  4060 ;;		_AdcSingleSample
  4061 ;;		_UpdateSynthFreq
  4062 ;; This function is called by:
  4063 ;;		_readUartByte
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text4
  4068  002BFA                     __ptext4:
  4069                           	opt stack 0
  4070  002BFA                     _GroupRx:
  4071                           	opt stack 19
  4072                           
  4073                           ;incstack = 0
  4074                           ;GroupRx@request stored from wreg
  4075  002BFA  0100               	movlb	0	; () banked
  4076  002BFC  6FE7               	movwf	GroupRx@request& (0+255),b
  4077                           
  4078                           ;MessageFunctions.c: 13: switch (request)
  4079  002BFE  D010               	goto	l1058
  4080  002C00                     
  4081                           ;MessageFunctions.c: 20: UpdateSynthFreq(RX_TYPE, data);
  4082  002C00  C0E5  F0E3         	movff	GroupRx@data,UpdateSynthFreq@data
  4083  002C04  C0E6  F0E4         	movff	GroupRx@data+1,UpdateSynthFreq@data+1
  4084  002C08  0E01               	movlw	1
  4085  002C0A  EC24  F010         	call	_UpdateSynthFreq
  4086                           
  4087                           ;MessageFunctions.c: 31: break;
  4088                           
  4089                           ;MessageFunctions.c: 30: case SET_MODULE_OPERATION_MODE:
  4090                           
  4091                           ;MessageFunctions.c: 28: break;
  4092                           
  4093                           ;MessageFunctions.c: 27: case SET_MODULE_BIT_MODE:
  4094                           
  4095                           ;MessageFunctions.c: 25: break;
  4096                           
  4097                           ;MessageFunctions.c: 23: case READ_MODULE_STATUS:
  4098                           
  4099                           ;MessageFunctions.c: 21: break;
  4100  002C0E  0012               	return	
  4101  002C10                     
  4102                           ;MessageFunctions.c: 34: AdcSingleSample(RX_TYPE, data);
  4103  002C10  C0E5  F075         	movff	GroupRx@data,AdcSingleSample@data
  4104  002C14  C0E6  F076         	movff	GroupRx@data+1,AdcSingleSample@data+1
  4105  002C18  0E01               	movlw	1
  4106  002C1A  ECF0  F00A         	call	_AdcSingleSample
  4107                           
  4108                           ;MessageFunctions.c: 39: }
  4109                           
  4110                           ;MessageFunctions.c: 38: break;
  4111                           
  4112                           ;MessageFunctions.c: 37: default:
  4113                           
  4114                           ;MessageFunctions.c: 35: break;
  4115  002C1E  0012               	return	
  4116  002C20                     l1058:
  4117  002C20  0100               	movlb	0	; () banked
  4118  002C22  51E7               	movf	GroupRx@request& (0+255),w,b
  4119                           
  4120                           ; Switch size 1, requested type "space"
  4121                           ; Number of cases is 6, Range of values is 18 to 40
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte           19    10 (average)
  4125                           ;	Chosen strategy is simple_byte
  4126  002C24  0A12               	xorlw	18	; case 18
  4127  002C26  B4D8               	btfsc	status,2,c
  4128  002C28  0012               	return	
  4129  002C2A  0A04               	xorlw	4	; case 22
  4130  002C2C  B4D8               	btfsc	status,2,c
  4131  002C2E  D7E8               	goto	l1061
  4132  002C30  0A0F               	xorlw	15	; case 25
  4133  002C32  B4D8               	btfsc	status,2,c
  4134  002C34  0012               	return	
  4135  002C36  0A38               	xorlw	56	; case 33
  4136  002C38  B4D8               	btfsc	status,2,c
  4137  002C3A  0012               	return	
  4138  002C3C  0A02               	xorlw	2	; case 35
  4139  002C3E  B4D8               	btfsc	status,2,c
  4140  002C40  D7E7               	goto	l1065
  4141  002C42  0A0B               	xorlw	11	; case 40
  4142  002C44  0012               	return	
  4143  002C46                     __end_of_GroupRx:
  4144                           	opt stack 0
  4145                           tosu	equ	0xFFF
  4146                           tosh	equ	0xFFE
  4147                           tosl	equ	0xFFD
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           indf1	equ	0xFE7
  4158                           postdec1	equ	0xFE5
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           indf2	equ	0xFDF
  4162                           postinc2	equ	0xFDE
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _GroupTx *****************
  4168 ;; Defined at:
  4169 ;;		line 42 in file "MessageFunctions.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  request         1    wreg     enum E6
  4172 ;;  data            2  133[BANK0 ] PTR unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  request         1  135[BANK0 ] enum E6
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4184 ;;      Params:         0       2       0       0       0       0       0
  4185 ;;      Locals:         0       1       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0
  4187 ;;      Totals:         0       3       0       0       0       0       0
  4188 ;;Total ram usage:        3 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:   10
  4191 ;; This function calls:
  4192 ;;		_AdcSingleSample
  4193 ;;		_UpdateSynthFreq
  4194 ;; This function is called by:
  4195 ;;		_readUartByte
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text5
  4200  002950                     __ptext5:
  4201                           	opt stack 0
  4202  002950                     _GroupTx:
  4203                           	opt stack 19
  4204                           
  4205                           ;incstack = 0
  4206                           ;GroupTx@request stored from wreg
  4207  002950  0100               	movlb	0	; () banked
  4208  002952  6FE7               	movwf	GroupTx@request& (0+255),b
  4209                           
  4210                           ;MessageFunctions.c: 44: switch (request)
  4211  002954  D010               	goto	l1070
  4212  002956                     
  4213                           ;MessageFunctions.c: 52: UpdateSynthFreq(TX_TYPE, data);
  4214  002956  C0E5  F0E3         	movff	GroupTx@data,UpdateSynthFreq@data
  4215  00295A  C0E6  F0E4         	movff	GroupTx@data+1,UpdateSynthFreq@data+1
  4216  00295E  0E00               	movlw	0
  4217  002960  EC24  F010         	call	_UpdateSynthFreq
  4218                           
  4219                           ;MessageFunctions.c: 69: break;
  4220                           
  4221                           ;MessageFunctions.c: 68: case RX_SET_COMRESSION_RANGE:
  4222                           
  4223                           ;MessageFunctions.c: 66: break;
  4224                           
  4225                           ;MessageFunctions.c: 65: case RX_SET_COMRESSION_MODE:
  4226                           
  4227                           ;MessageFunctions.c: 63: break;
  4228                           
  4229                           ;MessageFunctions.c: 62: case SET_MODULE_OPERATION_MODE:
  4230                           
  4231                           ;MessageFunctions.c: 60: break;
  4232                           
  4233                           ;MessageFunctions.c: 59: case SET_MODULE_BIT_MODE:
  4234                           
  4235                           ;MessageFunctions.c: 57: break;
  4236                           
  4237                           ;MessageFunctions.c: 55: case READ_MODULE_STATUS:
  4238                           
  4239                           ;MessageFunctions.c: 53: break;
  4240  002964  0012               	return	
  4241  002966                     
  4242                           ;MessageFunctions.c: 72: AdcSingleSample(TX_TYPE, data);
  4243  002966  C0E5  F075         	movff	GroupTx@data,AdcSingleSample@data
  4244  00296A  C0E6  F076         	movff	GroupTx@data+1,AdcSingleSample@data+1
  4245  00296E  0E00               	movlw	0
  4246  002970  ECF0  F00A         	call	_AdcSingleSample
  4247                           
  4248                           ;MessageFunctions.c: 77: }
  4249                           
  4250                           ;MessageFunctions.c: 76: break;
  4251                           
  4252                           ;MessageFunctions.c: 75: default:
  4253                           
  4254                           ;MessageFunctions.c: 73: break;
  4255  002974  0012               	return	
  4256  002976                     l1070:
  4257  002976  0100               	movlb	0	; () banked
  4258  002978  51E7               	movf	GroupTx@request& (0+255),w,b
  4259                           
  4260                           ; Switch size 1, requested type "space"
  4261                           ; Number of cases is 8, Range of values is 18 to 101
  4262                           ; switch strategies available:
  4263                           ; Name         Instructions Cycles
  4264                           ; simple_byte           25    13 (average)
  4265                           ;	Chosen strategy is simple_byte
  4266  00297A  0A12               	xorlw	18	; case 18
  4267  00297C  B4D8               	btfsc	status,2,c
  4268  00297E  0012               	return	
  4269  002980  0A04               	xorlw	4	; case 22
  4270  002982  B4D8               	btfsc	status,2,c
  4271  002984  D7E8               	goto	l1073
  4272  002986  0A0F               	xorlw	15	; case 25
  4273  002988  B4D8               	btfsc	status,2,c
  4274  00298A  0012               	return	
  4275  00298C  0A38               	xorlw	56	; case 33
  4276  00298E  B4D8               	btfsc	status,2,c
  4277  002990  0012               	return	
  4278  002992  0A02               	xorlw	2	; case 35
  4279  002994  B4D8               	btfsc	status,2,c
  4280  002996  D7E7               	goto	l1079
  4281  002998  0A0B               	xorlw	11	; case 40
  4282  00299A  B4D8               	btfsc	status,2,c
  4283  00299C  0012               	return	
  4284  00299E  0A4B               	xorlw	75	; case 99
  4285  0029A0  B4D8               	btfsc	status,2,c
  4286  0029A2  0012               	return	
  4287  0029A4  0A06               	xorlw	6	; case 101
  4288  0029A6  0012               	return	
  4289  0029A8                     __end_of_GroupTx:
  4290                           	opt stack 0
  4291                           tosu	equ	0xFFF
  4292                           tosh	equ	0xFFE
  4293                           tosl	equ	0xFFD
  4294                           pclath	equ	0xFFA
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           indf1	equ	0xFE7
  4304                           postdec1	equ	0xFE5
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           fsr2h	equ	0xFDA
  4310                           fsr2l	equ	0xFD9
  4311                           status	equ	0xFD8
  4312                           
  4313 ;; *************** function _UpdateSynthFreq *****************
  4314 ;; Defined at:
  4315 ;;		line 45 in file "SyntApp.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  cType           1    wreg     enum E177
  4318 ;;  data            2  131[BANK0 ] PTR unsigned char 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  cType           1    0[COMRAM] enum E177
  4321 ;;  regSynthArra   16   10[BANK1 ] unsigned long [4]
  4322 ;;  insertFraqDa    3    7[BANK1 ] unsigned long [4]
  4323 ;;  t               3    0[BANK1 ] unsigned long [4]
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4333 ;;      Params:         0       2       0       0       0       0       0
  4334 ;;      Locals:         0       0      26       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0
  4336 ;;      Totals:         0       2      26       0       0       0       0
  4337 ;;Total ram usage:       28 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    9
  4340 ;; This function calls:
  4341 ;;		_CalcSynthRegParams
  4342 ;;		_GetDoubleFromUartData
  4343 ;;		_ZeroArray
  4344 ;;		___fttol
  4345 ;;		_getFractionPartOfDivide
  4346 ;; This function is called by:
  4347 ;;		_GroupRx
  4348 ;;		_GroupTx
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text6
  4353  002048                     __ptext6:
  4354                           	opt stack 0
  4355  002048                     _UpdateSynthFreq:
  4356                           	opt stack 19
  4357                           
  4358                           ;SyntApp.c: 47: double insertFraqData = GetDoubleFromUartData(data, data[0]);
  4359                           
  4360                           ;incstack = 0
  4361  002048  C0E3  F09C         	movff	UpdateSynthFreq@data,GetDoubleFromUartData@data
  4362  00204C  C0E4  F09D         	movff	UpdateSynthFreq@data+1,GetDoubleFromUartData@data+1
  4363  002050  C0E3  FFD9         	movff	UpdateSynthFreq@data,fsr2l
  4364  002054  C0E4  FFDA         	movff	UpdateSynthFreq@data+1,fsr2h
  4365  002058  50DF               	movf	indf2,w,c
  4366  00205A  0100               	movlb	0	; () banked
  4367  00205C  6F9E               	movwf	GetDoubleFromUartData@dataSize& (0+255),b
  4368  00205E  ECD0  F012         	call	_GetDoubleFromUartData	;wreg free
  4369  002062  C09C  F185         	movff	?_GetDoubleFromUartData,UpdateSynthFreq@insertFraqData
  4370  002066  C09D  F186         	movff	?_GetDoubleFromUartData+1,UpdateSynthFreq@insertFraqData+1
  4371  00206A  C09E  F187         	movff	?_GetDoubleFromUartData+2,UpdateSynthFreq@insertFraqData+2
  4372                           
  4373                           ;SyntApp.c: 48: uint32_t regSynthArray[4];
  4374                           ;SyntApp.c: 49: ZeroArray(regSynthArray, sizeof(regSynthArray));
  4375  00206E  0E88               	movlw	low UpdateSynthFreq@regSynthArray
  4376  002070  6E20               	movwf	ZeroArray@array,c
  4377  002072  0E01               	movlw	high UpdateSynthFreq@regSynthArray
  4378  002074  6E21               	movwf	ZeroArray@array+1,c
  4379  002076  0E00               	movlw	0
  4380  002078  6E23               	movwf	ZeroArray@size+1,c
  4381  00207A  0E10               	movlw	16
  4382  00207C  6E22               	movwf	ZeroArray@size,c
  4383  00207E  ECA4  F018         	call	_ZeroArray	;wreg free
  4384                           
  4385                           ;SyntApp.c: 51: double t = getFractionPartOfDivide(5, 3);
  4386  002082  0E00               	movlw	0
  4387  002084  0100               	movlb	0	; () banked
  4388  002086  6F99               	movwf	getFractionPartOfDivide@num1& (0+255),b
  4389  002088  0EA0               	movlw	160
  4390  00208A  6F9A               	movwf	(getFractionPartOfDivide@num1+1)& (0+255),b
  4391  00208C  0E40               	movlw	64
  4392  00208E  6F9B               	movwf	(getFractionPartOfDivide@num1+2)& (0+255),b
  4393  002090  0E00               	movlw	0
  4394  002092  6F9C               	movwf	getFractionPartOfDivide@num2& (0+255),b
  4395  002094  0E40               	movlw	64
  4396  002096  6F9D               	movwf	(getFractionPartOfDivide@num2+1)& (0+255),b
  4397  002098  0E40               	movlw	64
  4398  00209A  6F9E               	movwf	(getFractionPartOfDivide@num2+2)& (0+255),b
  4399  00209C  EC48  F012         	call	_getFractionPartOfDivide	;wreg free
  4400  0020A0  C099  F17E         	movff	?_getFractionPartOfDivide,UpdateSynthFreq@t
  4401  0020A4  C09A  F17F         	movff	?_getFractionPartOfDivide+1,UpdateSynthFreq@t+1
  4402  0020A8  C09B  F180         	movff	?_getFractionPartOfDivide+2,UpdateSynthFreq@t+2
  4403                           
  4404                           ;SyntApp.c: 53: CalcSynthRegParams(regSynthArray, insertFraqData);
  4405  0020AC  C185  F078         	movff	UpdateSynthFreq@insertFraqData,___fttol@f1
  4406  0020B0  C186  F079         	movff	UpdateSynthFreq@insertFraqData+1,___fttol@f1+1
  4407  0020B4  C187  F07A         	movff	UpdateSynthFreq@insertFraqData+2,___fttol@f1+2
  4408  0020B8  ECAF  F00C         	call	___fttol	;wreg free
  4409  0020BC  C078  F181         	movff	?___fttol,_UpdateSynthFreq$2992
  4410  0020C0  C079  F182         	movff	?___fttol+1,_UpdateSynthFreq$2992+1
  4411  0020C4  C07A  F183         	movff	?___fttol+2,_UpdateSynthFreq$2992+2
  4412  0020C8  C07B  F184         	movff	?___fttol+3,_UpdateSynthFreq$2992+3
  4413                           
  4414                           ;SyntApp.c: 53: CalcSynthRegParams(regSynthArray, insertFraqData);
  4415  0020CC  0E88               	movlw	low UpdateSynthFreq@regSynthArray
  4416  0020CE  0100               	movlb	0	; () banked
  4417  0020D0  6FC6               	movwf	CalcSynthRegParams@regArray& (0+255),b
  4418  0020D2  0E01               	movlw	high UpdateSynthFreq@regSynthArray
  4419  0020D4  6FC7               	movwf	(CalcSynthRegParams@regArray+1)& (0+255),b
  4420  0020D6  C181  F0C8         	movff	_UpdateSynthFreq$2992,CalcSynthRegParams@inputFreq
  4421  0020DA  C182  F0C9         	movff	_UpdateSynthFreq$2992+1,CalcSynthRegParams@inputFreq+1
  4422  0020DE  C183  F0CA         	movff	_UpdateSynthFreq$2992+2,CalcSynthRegParams@inputFreq+2
  4423  0020E2  C184  F0CB         	movff	_UpdateSynthFreq$2992+3,CalcSynthRegParams@inputFreq+3
  4424  0020E6  EC64  F002         	call	_CalcSynthRegParams	;wreg free
  4425                           
  4426                           ;SyntApp.c: 54: regSynthArray[4] = 0x30008384;
  4427  0020EA  0E84               	movlw	132
  4428  0020EC  0101               	movlb	1	; () banked
  4429  0020EE  6F98               	movwf	(UpdateSynthFreq@regSynthArray+16)& (0+255),b
  4430  0020F0  0E83               	movlw	131
  4431  0020F2  6F99               	movwf	(UpdateSynthFreq@regSynthArray+17)& (0+255),b
  4432  0020F4  0E00               	movlw	0
  4433  0020F6  6F9A               	movwf	(UpdateSynthFreq@regSynthArray+18)& (0+255),b
  4434  0020F8  0E30               	movlw	48
  4435  0020FA  6F9B               	movwf	(UpdateSynthFreq@regSynthArray+19)& (0+255),b
  4436                           
  4437                           ; BSR set to: 1
  4438  0020FC  0012               	return		;funcret
  4439  0020FE                     __end_of_UpdateSynthFreq:
  4440                           	opt stack 0
  4441                           tosu	equ	0xFFF
  4442                           tosh	equ	0xFFE
  4443                           tosl	equ	0xFFD
  4444                           pclath	equ	0xFFA
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           prodh	equ	0xFF4
  4450                           prodl	equ	0xFF3
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           indf1	equ	0xFE7
  4454                           postdec1	equ	0xFE5
  4455                           fsr1h	equ	0xFE2
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           postinc2	equ	0xFDE
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _GetDoubleFromUartData *****************
  4464 ;; Defined at:
  4465 ;;		line 82 in file "SystemCommon.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  data            2   60[BANK0 ] PTR unsigned char 
  4468 ;;  dataSize        1   62[BANK0 ] unsigned char 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  idx             2   79[BANK0 ] int 
  4471 ;;  tempNum        10   69[BANK0 ] unsigned char [10]
  4472 ;;  doubleFreq      3   66[BANK0 ] unsigned char [10]
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  3   60[BANK0 ] unsigned char [10]
  4475 ;; Registers used:
  4476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4482 ;;      Params:         0       3       0       0       0       0       0
  4483 ;;      Locals:         0      15       0       0       0       0       0
  4484 ;;      Temps:          0       3       0       0       0       0       0
  4485 ;;      Totals:         0      21       0       0       0       0       0
  4486 ;;Total ram usage:       21 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    7
  4489 ;; This function calls:
  4490 ;;		_ZeroArray
  4491 ;;		_atof
  4492 ;; This function is called by:
  4493 ;;		_UpdateSynthFreq
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text7
  4498  0025A0                     __ptext7:
  4499                           	opt stack 0
  4500  0025A0                     _GetDoubleFromUartData:
  4501                           	opt stack 20
  4502                           
  4503                           ;SystemCommon.c: 84: char tempNum[10];
  4504                           ;SystemCommon.c: 85: ZeroArray(tempNum, sizeof(tempNum));
  4505                           
  4506                           ; BSR set to: 1
  4507                           ;incstack = 0
  4508  0025A0  0EA5               	movlw	low GetDoubleFromUartData@tempNum
  4509  0025A2  6E20               	movwf	ZeroArray@array,c
  4510  0025A4  0E00               	movlw	high GetDoubleFromUartData@tempNum
  4511  0025A6  6E21               	movwf	ZeroArray@array+1,c
  4512  0025A8  0E00               	movlw	0
  4513  0025AA  6E23               	movwf	ZeroArray@size+1,c
  4514  0025AC  0E0A               	movlw	10
  4515  0025AE  6E22               	movwf	ZeroArray@size,c
  4516  0025B0  ECA4  F018         	call	_ZeroArray	;wreg free
  4517                           
  4518                           ;SystemCommon.c: 86: for(int idx = 0; idx < dataSize; idx++)
  4519  0025B4  0E00               	movlw	0
  4520  0025B6  0100               	movlb	0	; () banked
  4521  0025B8  6FB0               	movwf	(GetDoubleFromUartData@idx+1)& (0+255),b
  4522  0025BA  0E00               	movlw	0
  4523  0025BC  6FAF               	movwf	GetDoubleFromUartData@idx& (0+255),b
  4524  0025BE  D016               	goto	l1150
  4525  0025C0                     
  4526                           ; BSR set to: 0
  4527                           ;SystemCommon.c: 87: {
  4528                           ;SystemCommon.c: 88: tempNum[idx] = data[idx + 1];
  4529                           
  4530                           ; BSR set to: 0
  4531  0025C0  0E01               	movlw	1
  4532  0025C2  25AF               	addwf	GetDoubleFromUartData@idx& (0+255),w,b
  4533  0025C4  6F9F               	movwf	??_GetDoubleFromUartData& (0+255),b
  4534  0025C6  0E00               	movlw	0
  4535  0025C8  21B0               	addwfc	(GetDoubleFromUartData@idx+1)& (0+255),w,b
  4536  0025CA  6FA0               	movwf	(??_GetDoubleFromUartData+1)& (0+255),b
  4537  0025CC  519F               	movf	??_GetDoubleFromUartData& (0+255),w,b
  4538  0025CE  259C               	addwf	GetDoubleFromUartData@data& (0+255),w,b
  4539  0025D0  6ED9               	movwf	fsr2l,c
  4540  0025D2  51A0               	movf	(??_GetDoubleFromUartData+1)& (0+255),w,b
  4541  0025D4  219D               	addwfc	(GetDoubleFromUartData@data+1)& (0+255),w,b
  4542  0025D6  6EDA               	movwf	fsr2h,c
  4543  0025D8  0EA5               	movlw	low GetDoubleFromUartData@tempNum
  4544  0025DA  25AF               	addwf	GetDoubleFromUartData@idx& (0+255),w,b
  4545  0025DC  6EE1               	movwf	fsr1l,c
  4546  0025DE  0E00               	movlw	high GetDoubleFromUartData@tempNum
  4547  0025E0  21B0               	addwfc	(GetDoubleFromUartData@idx+1)& (0+255),w,b
  4548  0025E2  6EE2               	movwf	fsr1h,c
  4549  0025E4  CFDF FFE7          	movff	indf2,indf1
  4550                           
  4551                           ; BSR set to: 0
  4552  0025E8  4BAF               	infsnz	GetDoubleFromUartData@idx& (0+255),f,b
  4553  0025EA  2BB0               	incf	(GetDoubleFromUartData@idx+1)& (0+255),f,b
  4554  0025EC                     l1150:
  4555                           
  4556                           ; BSR set to: 0
  4557                           
  4558                           ; BSR set to: 0
  4559  0025EC  519E               	movf	GetDoubleFromUartData@dataSize& (0+255),w,b
  4560  0025EE  6F9F               	movwf	??_GetDoubleFromUartData& (0+255),b
  4561  0025F0  6BA0               	clrf	(??_GetDoubleFromUartData+1)& (0+255),b
  4562  0025F2  519F               	movf	??_GetDoubleFromUartData& (0+255),w,b
  4563  0025F4  5DAF               	subwf	GetDoubleFromUartData@idx& (0+255),w,b
  4564  0025F6  51B0               	movf	(GetDoubleFromUartData@idx+1)& (0+255),w,b
  4565  0025F8  0A80               	xorlw	128
  4566  0025FA  6FA1               	movwf	(??_GetDoubleFromUartData+2)& (0+255),b
  4567  0025FC  51A0               	movf	(??_GetDoubleFromUartData+1)& (0+255),w,b
  4568  0025FE  0A80               	xorlw	128
  4569  002600  59A1               	subwfb	(??_GetDoubleFromUartData+2)& (0+255),w,b
  4570  002602  A0D8               	btfss	status,0,c
  4571  002604  D7DD               	goto	l1151
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;SystemCommon.c: 89: }
  4575                           ;SystemCommon.c: 90: double doubleFreq = atof(tempNum);
  4576                           
  4577                           ; BSR set to: 0
  4578  002606  0EA5               	movlw	low GetDoubleFromUartData@tempNum
  4579  002608  6F99               	movwf	atof@s& (0+255),b
  4580  00260A  0E00               	movlw	high GetDoubleFromUartData@tempNum
  4581  00260C  6F9A               	movwf	(atof@s+1)& (0+255),b
  4582  00260E  EC62  F018         	call	_atof	;wreg free
  4583  002612  C099  F0A2         	movff	?_atof,GetDoubleFromUartData@doubleFreq
  4584  002616  C09A  F0A3         	movff	?_atof+1,GetDoubleFromUartData@doubleFreq+1
  4585  00261A  C09B  F0A4         	movff	?_atof+2,GetDoubleFromUartData@doubleFreq+2
  4586  00261E  0012               	return		;funcret
  4587  002620                     __end_of_GetDoubleFromUartData:
  4588                           	opt stack 0
  4589                           tosu	equ	0xFFF
  4590                           tosh	equ	0xFFE
  4591                           tosl	equ	0xFFD
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           indf1	equ	0xFE7
  4602                           postdec1	equ	0xFE5
  4603                           fsr1h	equ	0xFE2
  4604                           fsr1l	equ	0xFE1
  4605                           indf2	equ	0xFDF
  4606                           postinc2	equ	0xFDE
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _atof *****************
  4612 ;; Defined at:
  4613 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  s               2   57[BANK0 ] PTR const unsigned char 
  4616 ;;		 -> GetDoubleFromUartData@tempNum(10), 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  3   57[BANK0 ] PTR const unsigned char 
  4621 ;; Registers used:
  4622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4628 ;;      Params:         0       3       0       0       0       0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0
  4631 ;;      Totals:         0       3       0       0       0       0       0
  4632 ;;Total ram usage:        3 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    6
  4635 ;; This function calls:
  4636 ;;		_strtod
  4637 ;; This function is called by:
  4638 ;;		_GetDoubleFromUartData
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text8
  4643  0030C4                     __ptext8:
  4644                           	opt stack 0
  4645  0030C4                     _atof:
  4646                           	opt stack 20
  4647                           
  4648                           ;incstack = 0
  4649  0030C4  C099  F08D         	movff	atof@s,strtod@s
  4650  0030C8  C09A  F08E         	movff	atof@s+1,strtod@s+1
  4651  0030CC  0E00               	movlw	0
  4652  0030CE  0100               	movlb	0	; () banked
  4653  0030D0  6F8F               	movwf	strtod@res& (0+255),b
  4654  0030D2  0E00               	movlw	0
  4655  0030D4  6F90               	movwf	(strtod@res+1)& (0+255),b
  4656  0030D6  EC70  F000         	call	_strtod	;wreg free
  4657  0030DA  C08D  F099         	movff	?_strtod,?_atof
  4658  0030DE  C08E  F09A         	movff	?_strtod+1,?_atof+1
  4659  0030E2  C08F  F09B         	movff	?_strtod+2,?_atof+2
  4660  0030E6  0012               	return	
  4661  0030E8                     __end_of_atof:
  4662                           	opt stack 0
  4663                           tosu	equ	0xFFF
  4664                           tosh	equ	0xFFE
  4665                           tosl	equ	0xFFD
  4666                           pclath	equ	0xFFA
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           postdec1	equ	0xFE5
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _strtod *****************
  4686 ;; Defined at:
  4687 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  s               2   45[BANK0 ] PTR const unsigned char 
  4690 ;;		 -> GetDoubleFromUartData@tempNum(10), 
  4691 ;;  res             2   47[BANK0 ] PTR PTR const unsigned c
  4692 ;;		 -> NULL(0), 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  _u              4   53[BANK0 ] struct .
  4695 ;;  expon           1   52[BANK0 ] char 
  4696 ;;  flags           1   51[BANK0 ] unsigned char 
  4697 ;;  eexp            1   50[BANK0 ] char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  3   45[BANK0 ] char 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4707 ;;      Params:         0       4       0       0       0       0       0
  4708 ;;      Locals:         0       7       0       0       0       0       0
  4709 ;;      Temps:          0       1       0       0       0       0       0
  4710 ;;      Totals:         0      12       0       0       0       0       0
  4711 ;;Total ram usage:       12 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    5
  4714 ;; This function calls:
  4715 ;;		___altoft
  4716 ;;		___ftdiv
  4717 ;;		___ftge
  4718 ;;		___ftmul
  4719 ;;		___ftneg
  4720 ;;		___lmul
  4721 ;;		_isdigit
  4722 ;;		_isspace
  4723 ;; This function is called by:
  4724 ;;		_atof
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text9
  4729  0000E0                     __ptext9:
  4730                           	opt stack 0
  4731  0000E0                     _strtod:
  4732                           	opt stack 20
  4733                           
  4734                           ;incstack = 0
  4735  0000E0  0100               	movlb	0	; () banked
  4736  0000E2  518F               	movf	strtod@res& (0+255),w,b
  4737  0000E4  1190               	iorwf	(strtod@res+1)& (0+255),w,b
  4738  0000E6  B4D8               	btfsc	status,2,c
  4739  0000E8  D00C               	goto	l1475
  4740                           
  4741                           ; BSR set to: 0
  4742  0000EA  C08F  FFD9         	movff	strtod@res,fsr2l
  4743  0000EE  C090  FFDA         	movff	strtod@res+1,fsr2h
  4744  0000F2  C08D  FFDE         	movff	strtod@s,postinc2
  4745  0000F6  C08E  FFDD         	movff	strtod@s+1,postdec2
  4746                           
  4747                           ; BSR set to: 0
  4748  0000FA  D003               	goto	l1475
  4749  0000FC                     
  4750                           ; BSR set to: 0
  4751  0000FC  0100               	movlb	0	; () banked
  4752  0000FE  4B8D               	infsnz	strtod@s& (0+255),f,b
  4753  000100  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  4754  000102                     l1475:
  4755                           
  4756                           ; BSR set to: 0
  4757                           
  4758                           ; BSR set to: 0
  4759  000102  C08D  FFD9         	movff	strtod@s,fsr2l
  4760  000106  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4761  00010A  50DF               	movf	indf2,w,c
  4762  00010C  6F92               	movwf	strtod@eexp& (0+255),b
  4763  00010E  5192               	movf	strtod@eexp& (0+255),w,b
  4764  000110  EC17  F018         	call	_isspace
  4765  000114  B0D8               	btfsc	status,0,c
  4766  000116  D7F2               	goto	l1476
  4767  000118  0E00               	movlw	0
  4768  00011A  0100               	movlb	0	; () banked
  4769  00011C  6F93               	movwf	strtod@flags& (0+255),b
  4770                           
  4771                           ; BSR set to: 0
  4772  00011E  0E2D               	movlw	45
  4773  000120  1992               	xorwf	strtod@eexp& (0+255),w,b
  4774  000122  A4D8               	btfss	status,2,c
  4775  000124  D003               	goto	l1478
  4776                           
  4777                           ; BSR set to: 0
  4778  000126  0E01               	movlw	1
  4779  000128  6F93               	movwf	strtod@flags& (0+255),b
  4780  00012A  D004               	goto	u7520
  4781  00012C                     l1478:
  4782                           
  4783                           ; BSR set to: 0
  4784                           
  4785                           ; BSR set to: 0
  4786  00012C  0E2B               	movlw	43
  4787  00012E  1992               	xorwf	strtod@eexp& (0+255),w,b
  4788  000130  A4D8               	btfss	status,2,c
  4789  000132  D002               	goto	l1480
  4790  000134                     u7520:
  4791                           
  4792                           ; BSR set to: 0
  4793  000134  4B8D               	infsnz	strtod@s& (0+255),f,b
  4794  000136  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  4795  000138                     l1480:
  4796                           
  4797                           ; BSR set to: 0
  4798                           
  4799                           ; BSR set to: 0
  4800                           
  4801                           ; BSR set to: 0
  4802  000138  0E00               	movlw	0
  4803  00013A  6F92               	movwf	strtod@eexp& (0+255),b
  4804                           
  4805                           ; BSR set to: 0
  4806  00013C  0E00               	movlw	0
  4807  00013E  6F95               	movwf	strtod@_u& (0+255),b
  4808  000140  0E00               	movlw	0
  4809  000142  6F96               	movwf	(strtod@_u+1)& (0+255),b
  4810  000144  0E00               	movlw	0
  4811  000146  6F97               	movwf	(strtod@_u+2)& (0+255),b
  4812  000148  0E00               	movlw	0
  4813  00014A  6F98               	movwf	(strtod@_u+3)& (0+255),b
  4814                           
  4815                           ; BSR set to: 0
  4816  00014C  0E00               	movlw	0
  4817  00014E  6F94               	movwf	strtod@expon& (0+255),b
  4818  000150                     
  4819                           ; BSR set to: 0
  4820                           
  4821                           ; BSR set to: 0
  4822  000150  B993               	btfsc	strtod@flags& (0+255),4,b
  4823  000152  D00A               	goto	l1482
  4824                           
  4825                           ; BSR set to: 0
  4826  000154  C08D  FFD9         	movff	strtod@s,fsr2l
  4827  000158  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4828  00015C  0E2E               	movlw	46
  4829  00015E  18DE               	xorwf	postinc2,w,c
  4830  000160  A4D8               	btfss	status,2,c
  4831  000162  D002               	goto	l1482
  4832                           
  4833                           ; BSR set to: 0
  4834  000164  8993               	bsf	strtod@flags& (0+255),4,b
  4835  000166  D03E               	goto	l1489
  4836  000168                     l1482:
  4837                           
  4838                           ; BSR set to: 0
  4839                           
  4840                           ; BSR set to: 0
  4841  000168  C08D  FFD9         	movff	strtod@s,fsr2l
  4842  00016C  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4843  000170  50DF               	movf	indf2,w,c
  4844  000172  EC86  F018         	call	_isdigit
  4845  000176  A0D8               	btfss	status,0,c
  4846  000178  D038               	goto	l1485
  4847  00017A  0100               	movlb	0	; () banked
  4848  00017C  8393               	bsf	strtod@flags& (0+255),1,b
  4849                           
  4850                           ; BSR set to: 0
  4851  00017E  0E08               	movlw	8
  4852  000180  1992               	xorwf	strtod@eexp& (0+255),w,b
  4853  000182  B4D8               	btfsc	status,2,c
  4854  000184  D02D               	goto	l1486
  4855                           
  4856                           ; BSR set to: 0
  4857  000186  B993               	btfsc	strtod@flags& (0+255),4,b
  4858                           
  4859                           ; BSR set to: 0
  4860  000188  0794               	decf	strtod@expon& (0+255),f,b
  4861                           
  4862                           ; BSR set to: 0
  4863  00018A  2B92               	incf	strtod@eexp& (0+255),f,b
  4864                           
  4865                           ; BSR set to: 0
  4866  00018C  C095  F018         	movff	strtod@_u,___lmul@multiplier
  4867  000190  C096  F019         	movff	strtod@_u+1,___lmul@multiplier+1
  4868  000194  C097  F01A         	movff	strtod@_u+2,___lmul@multiplier+2
  4869  000198  C098  F01B         	movff	strtod@_u+3,___lmul@multiplier+3
  4870  00019C  0E0A               	movlw	10
  4871  00019E  6E1C               	movwf	___lmul@multiplicand,c
  4872  0001A0  0E00               	movlw	0
  4873  0001A2  6E1D               	movwf	___lmul@multiplicand+1,c
  4874  0001A4  0E00               	movlw	0
  4875  0001A6  6E1E               	movwf	___lmul@multiplicand+2,c
  4876  0001A8  0E00               	movlw	0
  4877  0001AA  6E1F               	movwf	___lmul@multiplicand+3,c
  4878  0001AC  EC2C  F015         	call	___lmul	;wreg free
  4879  0001B0  C018  F095         	movff	?___lmul,strtod@_u
  4880  0001B4  C019  F096         	movff	?___lmul+1,strtod@_u+1
  4881  0001B8  C01A  F097         	movff	?___lmul+2,strtod@_u+2
  4882  0001BC  C01B  F098         	movff	?___lmul+3,strtod@_u+3
  4883  0001C0  C08D  FFD9         	movff	strtod@s,fsr2l
  4884  0001C4  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4885  0001C8  50DF               	movf	indf2,w,c
  4886  0001CA  0100               	movlb	0	; () banked
  4887  0001CC  6F91               	movwf	??_strtod& (0+255),b
  4888  0001CE  0ED0               	movlw	208
  4889  0001D0  2791               	addwf	??_strtod& (0+255),f,b
  4890  0001D2  5191               	movf	??_strtod& (0+255),w,b
  4891  0001D4  2795               	addwf	strtod@_u& (0+255),f,b
  4892  0001D6  0E00               	movlw	0
  4893  0001D8  2396               	addwfc	(strtod@_u+1)& (0+255),f,b
  4894  0001DA  2397               	addwfc	(strtod@_u+2)& (0+255),f,b
  4895  0001DC  2398               	addwfc	(strtod@_u+3)& (0+255),f,b
  4896  0001DE  D002               	goto	l1489
  4897  0001E0                     l1486:
  4898                           
  4899                           ; BSR set to: 0
  4900  0001E0  A993               	btfss	strtod@flags& (0+255),4,b
  4901                           
  4902                           ; BSR set to: 0
  4903  0001E2  2B94               	incf	strtod@expon& (0+255),f,b
  4904  0001E4                     l1489:
  4905                           
  4906                           ; BSR set to: 0
  4907                           
  4908                           ; BSR set to: 0
  4909  0001E4  4B8D               	infsnz	strtod@s& (0+255),f,b
  4910  0001E6  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  4911                           
  4912                           ; BSR set to: 0
  4913  0001E8  D7B3               	goto	l1481
  4914  0001EA                     l1485:
  4915                           
  4916                           ; BSR set to: 0
  4917  0001EA  0E00               	movlw	0
  4918  0001EC  0100               	movlb	0	; () banked
  4919  0001EE  6F92               	movwf	strtod@eexp& (0+255),b
  4920                           
  4921                           ; BSR set to: 0
  4922  0001F0  C08D  FFD9         	movff	strtod@s,fsr2l
  4923  0001F4  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4924  0001F8  0E65               	movlw	101
  4925  0001FA  18DE               	xorwf	postinc2,w,c
  4926  0001FC  B4D8               	btfsc	status,2,c
  4927  0001FE  D008               	goto	u7600
  4928                           
  4929                           ; BSR set to: 0
  4930  000200  C08D  FFD9         	movff	strtod@s,fsr2l
  4931  000204  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4932  000208  0E45               	movlw	69
  4933  00020A  18DE               	xorwf	postinc2,w,c
  4934  00020C  A4D8               	btfss	status,2,c
  4935  00020E  D062               	goto	l1502
  4936  000210                     u7600:
  4937                           
  4938                           ; BSR set to: 0
  4939                           
  4940                           ; BSR set to: 0
  4941  000210  4B8D               	infsnz	strtod@s& (0+255),f,b
  4942  000212  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  4943  000214  C08D  FFD9         	movff	strtod@s,fsr2l
  4944  000218  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4945  00021C  0E2D               	movlw	45
  4946  00021E  18DE               	xorwf	postinc2,w,c
  4947  000220  A4D8               	btfss	status,2,c
  4948  000222  D002               	goto	l1493
  4949                           
  4950                           ; BSR set to: 0
  4951  000224  8793               	bsf	strtod@flags& (0+255),3,b
  4952  000226  D008               	goto	u7620
  4953  000228                     l1493:
  4954                           
  4955                           ; BSR set to: 0
  4956                           
  4957                           ; BSR set to: 0
  4958  000228  C08D  FFD9         	movff	strtod@s,fsr2l
  4959  00022C  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4960  000230  0E2B               	movlw	43
  4961  000232  18DE               	xorwf	postinc2,w,c
  4962  000234  A4D8               	btfss	status,2,c
  4963  000236  D002               	goto	l1496
  4964  000238                     u7620:
  4965                           
  4966                           ; BSR set to: 0
  4967                           
  4968                           ; BSR set to: 0
  4969                           
  4970                           ; BSR set to: 0
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975  000238  4B8D               	infsnz	strtod@s& (0+255),f,b
  4976  00023A  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  4977  00023C                     l1496:
  4978                           
  4979                           ; BSR set to: 0
  4980                           
  4981                           ; BSR set to: 0
  4982  00023C  C08D  FFD9         	movff	strtod@s,fsr2l
  4983  000240  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4984  000244  0E30               	movlw	48
  4985  000246  18DE               	xorwf	postinc2,w,c
  4986  000248  B4D8               	btfsc	status,2,c
  4987  00024A  D7F6               	goto	u7620
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ; BSR set to: 0
  4992  00024C  C08D  FFD9         	movff	strtod@s,fsr2l
  4993  000250  C08E  FFDA         	movff	strtod@s+1,fsr2h
  4994  000254  50DF               	movf	indf2,w,c
  4995  000256  EC86  F018         	call	_isdigit
  4996  00025A  A0D8               	btfss	status,0,c
  4997  00025C  D038               	goto	l1501
  4998  00025E  C08D  FFD9         	movff	strtod@s,fsr2l
  4999  000262  C08E  FFDA         	movff	strtod@s+1,fsr2h
  5000  000266  50DF               	movf	indf2,w,c
  5001  000268  0FD0               	addlw	208
  5002  00026A  0100               	movlb	0	; () banked
  5003  00026C  6F92               	movwf	strtod@eexp& (0+255),b
  5004                           
  5005                           ; BSR set to: 0
  5006  00026E  4B8D               	infsnz	strtod@s& (0+255),f,b
  5007  000270  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  5008                           
  5009                           ; BSR set to: 0
  5010  000272  C08D  FFD9         	movff	strtod@s,fsr2l
  5011  000276  C08E  FFDA         	movff	strtod@s+1,fsr2h
  5012  00027A  50DF               	movf	indf2,w,c
  5013  00027C  EC86  F018         	call	_isdigit
  5014  000280  A0D8               	btfss	status,0,c
  5015  000282  D025               	goto	l1501
  5016  000284  C08D  FFD9         	movff	strtod@s,fsr2l
  5017  000288  C08E  FFDA         	movff	strtod@s+1,fsr2h
  5018  00028C  50DF               	movf	indf2,w,c
  5019  00028E  0100               	movlb	0	; () banked
  5020  000290  6F91               	movwf	??_strtod& (0+255),b
  5021  000292  5192               	movf	strtod@eexp& (0+255),w,b
  5022  000294  0D0A               	mullw	10
  5023  000296  50F3               	movf	prodl,w,c
  5024  000298  2591               	addwf	??_strtod& (0+255),w,b
  5025  00029A  0FD0               	addlw	208
  5026  00029C  6F92               	movwf	strtod@eexp& (0+255),b
  5027                           
  5028                           ; BSR set to: 0
  5029  00029E  4B8D               	infsnz	strtod@s& (0+255),f,b
  5030  0002A0  2B8E               	incf	(strtod@s+1)& (0+255),f,b
  5031                           
  5032                           ; BSR set to: 0
  5033  0002A2  C08D  FFD9         	movff	strtod@s,fsr2l
  5034  0002A6  C08E  FFDA         	movff	strtod@s+1,fsr2h
  5035  0002AA  50DF               	movf	indf2,w,c
  5036  0002AC  EC86  F018         	call	_isdigit
  5037  0002B0  A0D8               	btfss	status,0,c
  5038  0002B2  D00D               	goto	l1501
  5039  0002B4  C08D  FFD9         	movff	strtod@s,fsr2l
  5040  0002B8  C08E  FFDA         	movff	strtod@s+1,fsr2h
  5041  0002BC  50DF               	movf	indf2,w,c
  5042  0002BE  0100               	movlb	0	; () banked
  5043  0002C0  6F91               	movwf	??_strtod& (0+255),b
  5044  0002C2  5192               	movf	strtod@eexp& (0+255),w,b
  5045  0002C4  0D0A               	mullw	10
  5046  0002C6  50F3               	movf	prodl,w,c
  5047  0002C8  2591               	addwf	??_strtod& (0+255),w,b
  5048  0002CA  0FD0               	addlw	208
  5049  0002CC  6F92               	movwf	strtod@eexp& (0+255),b
  5050  0002CE                     l1501:
  5051                           
  5052                           ; BSR set to: 0
  5053                           
  5054                           ; BSR set to: 0
  5055                           
  5056                           ; BSR set to: 0
  5057  0002CE  0100               	movlb	0	; () banked
  5058  0002D0  B793               	btfsc	strtod@flags& (0+255),3,b
  5059                           
  5060                           ; BSR set to: 0
  5061  0002D2  6D92               	negf	strtod@eexp& (0+255),b
  5062  0002D4                     l1502:
  5063                           
  5064                           ; BSR set to: 0
  5065                           
  5066                           ; BSR set to: 0
  5067                           
  5068                           ; BSR set to: 0
  5069  0002D4  5192               	movf	strtod@eexp& (0+255),w,b
  5070  0002D6  2794               	addwf	strtod@expon& (0+255),f,b
  5071                           
  5072                           ; BSR set to: 0
  5073  0002D8  518F               	movf	strtod@res& (0+255),w,b
  5074  0002DA  1190               	iorwf	(strtod@res+1)& (0+255),w,b
  5075  0002DC  A4D8               	btfss	status,2,c
  5076                           
  5077                           ; BSR set to: 0
  5078  0002DE  A393               	btfss	strtod@flags& (0+255),1,b
  5079  0002E0  D008               	goto	l1503
  5080                           
  5081                           ; BSR set to: 0
  5082  0002E2  C08F  FFD9         	movff	strtod@res,fsr2l
  5083  0002E6  C090  FFDA         	movff	strtod@res+1,fsr2h
  5084  0002EA  C08D  FFDE         	movff	strtod@s,postinc2
  5085  0002EE  C08E  FFDD         	movff	strtod@s+1,postdec2
  5086  0002F2                     l1503:
  5087                           
  5088                           ; BSR set to: 0
  5089                           
  5090                           ; BSR set to: 0
  5091  0002F2  C095  F020         	movff	strtod@_u,___altoft@c
  5092  0002F6  C096  F021         	movff	strtod@_u+1,___altoft@c+1
  5093  0002FA  C097  F022         	movff	strtod@_u+2,___altoft@c+2
  5094  0002FE  C098  F023         	movff	strtod@_u+3,___altoft@c+3
  5095  000302  EC10  F013         	call	___altoft	;wreg free
  5096  000306  C020  F095         	movff	?___altoft,strtod@_u
  5097  00030A  C021  F096         	movff	?___altoft+1,strtod@_u+1
  5098  00030E  C022  F097         	movff	?___altoft+2,strtod@_u+2
  5099  000312  0100               	movlb	0	; () banked
  5100  000314  5195               	movf	strtod@_u& (0+255),w,b
  5101  000316  1196               	iorwf	(strtod@_u+1)& (0+255),w,b
  5102  000318  1197               	iorwf	(strtod@_u+2)& (0+255),w,b
  5103  00031A  A4D8               	btfss	status,2,c
  5104  00031C  D007               	goto	l1504
  5105                           
  5106                           ; BSR set to: 0
  5107  00031E  0E00               	movlw	0
  5108  000320  6F8D               	movwf	?_strtod& (0+255),b
  5109  000322  0E00               	movlw	0
  5110  000324  6F8E               	movwf	(?_strtod+1)& (0+255),b
  5111  000326  0E00               	movlw	0
  5112  000328  6F8F               	movwf	(?_strtod+2)& (0+255),b
  5113                           
  5114                           ; BSR set to: 0
  5115  00032A  0012               	return	
  5116  00032C                     l1504:
  5117                           
  5118                           ; BSR set to: 0
  5119                           
  5120                           ; BSR set to: 0
  5121  00032C  AF94               	btfss	strtod@expon& (0+255),7,b
  5122  00032E  D059               	goto	l1506
  5123                           
  5124                           ; BSR set to: 0
  5125  000330  6D94               	negf	strtod@expon& (0+255),b
  5126  000332  D017               	goto	l1507
  5127  000334                     
  5128                           ; BSR set to: 0
  5129                           
  5130                           ; BSR set to: 0
  5131  000334  C095  F02A         	movff	strtod@_u,___ftdiv@f1
  5132  000338  C096  F02B         	movff	strtod@_u+1,___ftdiv@f1+1
  5133  00033C  C097  F02C         	movff	strtod@_u+2,___ftdiv@f1+2
  5134  000340  0E03               	movlw	3
  5135  000342  6E2D               	movwf	___ftdiv@f2,c
  5136  000344  0E15               	movlw	21
  5137  000346  6E2E               	movwf	___ftdiv@f2+1,c
  5138  000348  0E50               	movlw	80
  5139  00034A  6E2F               	movwf	___ftdiv@f2+2,c
  5140  00034C  ECA6  F00D         	call	___ftdiv	;wreg free
  5141  000350  C02A  F095         	movff	?___ftdiv,strtod@_u
  5142  000354  C02B  F096         	movff	?___ftdiv+1,strtod@_u+1
  5143  000358  C02C  F097         	movff	?___ftdiv+2,strtod@_u+2
  5144  00035C  0EF6               	movlw	246
  5145  00035E  0100               	movlb	0	; () banked
  5146  000360  2794               	addwf	strtod@expon& (0+255),f,b
  5147  000362                     l1507:
  5148                           
  5149                           ; BSR set to: 0
  5150                           
  5151                           ; BSR set to: 0
  5152  000362  5194               	movf	strtod@expon& (0+255),w,b
  5153  000364  0A80               	xorlw	128
  5154  000366  0F76               	addlw	-138
  5155  000368  A0D8               	btfss	status,0,c
  5156  00036A  D017               	goto	l1510
  5157  00036C  D7E3               	goto	l1508
  5158  00036E                     
  5159                           ; BSR set to: 0
  5160                           
  5161                           ; BSR set to: 0
  5162  00036E  C095  F02A         	movff	strtod@_u,___ftdiv@f1
  5163  000372  C096  F02B         	movff	strtod@_u+1,___ftdiv@f1+1
  5164  000376  C097  F02C         	movff	strtod@_u+2,___ftdiv@f1+2
  5165  00037A  0E00               	movlw	0
  5166  00037C  6E2D               	movwf	___ftdiv@f2,c
  5167  00037E  0E20               	movlw	32
  5168  000380  6E2E               	movwf	___ftdiv@f2+1,c
  5169  000382  0E41               	movlw	65
  5170  000384  6E2F               	movwf	___ftdiv@f2+2,c
  5171  000386  ECA6  F00D         	call	___ftdiv	;wreg free
  5172  00038A  C02A  F095         	movff	?___ftdiv,strtod@_u
  5173  00038E  C02B  F096         	movff	?___ftdiv+1,strtod@_u+1
  5174  000392  C02C  F097         	movff	?___ftdiv+2,strtod@_u+2
  5175  000396  0100               	movlb	0	; () banked
  5176  000398  0794               	decf	strtod@expon& (0+255),f,b
  5177  00039A                     l1510:
  5178                           
  5179                           ; BSR set to: 0
  5180                           
  5181                           ; BSR set to: 0
  5182  00039A  5194               	movf	strtod@expon& (0+255),w,b
  5183  00039C  A4D8               	btfss	status,2,c
  5184  00039E  D7E7               	goto	l1511
  5185                           
  5186                           ; BSR set to: 0
  5187                           
  5188                           ; BSR set to: 0
  5189  0003A0  C095  F018         	movff	strtod@_u,___ftge@ff1
  5190  0003A4  C096  F019         	movff	strtod@_u+1,___ftge@ff1+1
  5191  0003A8  C097  F01A         	movff	strtod@_u+2,___ftge@ff1+2
  5192  0003AC  0E00               	movlw	0
  5193  0003AE  6E1B               	movwf	___ftge@ff2,c
  5194  0003B0  0E80               	movlw	128
  5195  0003B2  6E1C               	movwf	___ftge@ff2+1,c
  5196  0003B4  0E00               	movlw	0
  5197  0003B6  6E1D               	movwf	___ftge@ff2+2,c
  5198  0003B8  EC00  F012         	call	___ftge	;wreg free
  5199  0003BC  B0D8               	btfsc	status,0,c
  5200  0003BE  D06C               	goto	l1523
  5201  0003C0  0100               	movlb	0	; () banked
  5202  0003C2  A193               	btfss	strtod@flags& (0+255),0,b
  5203  0003C4  D007               	goto	l1514
  5204                           
  5205                           ; BSR set to: 0
  5206  0003C6  0E00               	movlw	0
  5207  0003C8  6F8D               	movwf	?_strtod& (0+255),b
  5208  0003CA  0E80               	movlw	128
  5209  0003CC  6F8E               	movwf	(?_strtod+1)& (0+255),b
  5210  0003CE  0E80               	movlw	128
  5211  0003D0  6F8F               	movwf	(?_strtod+2)& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214  0003D2  0012               	return	
  5215  0003D4                     l1514:
  5216                           
  5217                           ; BSR set to: 0
  5218                           
  5219                           ; BSR set to: 0
  5220  0003D4  0E00               	movlw	0
  5221  0003D6  6F8D               	movwf	?_strtod& (0+255),b
  5222  0003D8  0E80               	movlw	128
  5223  0003DA  6F8E               	movwf	(?_strtod+1)& (0+255),b
  5224  0003DC  0E00               	movlw	0
  5225  0003DE  6F8F               	movwf	(?_strtod+2)& (0+255),b
  5226                           
  5227                           ; BSR set to: 0
  5228  0003E0  0012               	return	
  5229  0003E2                     l1506:
  5230                           
  5231                           ; BSR set to: 0
  5232                           
  5233                           ; BSR set to: 0
  5234  0003E2  5194               	movf	strtod@expon& (0+255),w,b
  5235  0003E4  0A80               	xorlw	128
  5236  0003E6  0F7F               	addlw	-129
  5237  0003E8  B0D8               	btfsc	status,0,c
  5238  0003EA  D018               	goto	l1517
  5239  0003EC  D055               	goto	l1523
  5240  0003EE                     
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244  0003EE  C095  F069         	movff	strtod@_u,___ftmul@f1
  5245  0003F2  C096  F06A         	movff	strtod@_u+1,___ftmul@f1+1
  5246  0003F6  C097  F06B         	movff	strtod@_u+2,___ftmul@f1+2
  5247  0003FA  0E03               	movlw	3
  5248  0003FC  6F6C               	movwf	___ftmul@f2& (0+255),b
  5249  0003FE  0E15               	movlw	21
  5250  000400  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5251  000402  0E50               	movlw	80
  5252  000404  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5253  000406  EC2B  F00D         	call	___ftmul	;wreg free
  5254  00040A  C069  F095         	movff	?___ftmul,strtod@_u
  5255  00040E  C06A  F096         	movff	?___ftmul+1,strtod@_u+1
  5256  000412  C06B  F097         	movff	?___ftmul+2,strtod@_u+2
  5257  000416  0EF6               	movlw	246
  5258  000418  0100               	movlb	0	; () banked
  5259  00041A  2794               	addwf	strtod@expon& (0+255),f,b
  5260  00041C                     l1517:
  5261                           
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  00041C  0E0A               	movlw	10
  5266  00041E  6194               	cpfslt	strtod@expon& (0+255),b
  5267  000420  D7E6               	goto	l1518
  5268  000422  D016               	goto	l1520
  5269  000424                     
  5270                           ; BSR set to: 0
  5271                           
  5272                           ; BSR set to: 0
  5273  000424  C095  F069         	movff	strtod@_u,___ftmul@f1
  5274  000428  C096  F06A         	movff	strtod@_u+1,___ftmul@f1+1
  5275  00042C  C097  F06B         	movff	strtod@_u+2,___ftmul@f1+2
  5276  000430  0E00               	movlw	0
  5277  000432  6F6C               	movwf	___ftmul@f2& (0+255),b
  5278  000434  0E20               	movlw	32
  5279  000436  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5280  000438  0E41               	movlw	65
  5281  00043A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5282  00043C  EC2B  F00D         	call	___ftmul	;wreg free
  5283  000440  C069  F095         	movff	?___ftmul,strtod@_u
  5284  000444  C06A  F096         	movff	?___ftmul+1,strtod@_u+1
  5285  000448  C06B  F097         	movff	?___ftmul+2,strtod@_u+2
  5286  00044C  0100               	movlb	0	; () banked
  5287  00044E  0794               	decf	strtod@expon& (0+255),f,b
  5288  000450                     l1520:
  5289                           
  5290                           ; BSR set to: 0
  5291                           
  5292                           ; BSR set to: 0
  5293  000450  5194               	movf	strtod@expon& (0+255),w,b
  5294  000452  A4D8               	btfss	status,2,c
  5295  000454  D7E7               	goto	l1521
  5296                           
  5297                           ; BSR set to: 0
  5298                           
  5299                           ; BSR set to: 0
  5300  000456  0EFF               	movlw	255
  5301  000458  6E18               	movwf	___ftge@ff1,c
  5302  00045A  0E7F               	movlw	127
  5303  00045C  6E19               	movwf	___ftge@ff1+1,c
  5304  00045E  0E7F               	movlw	127
  5305  000460  6E1A               	movwf	___ftge@ff1+2,c
  5306  000462  C095  F01B         	movff	strtod@_u,___ftge@ff2
  5307  000466  C096  F01C         	movff	strtod@_u+1,___ftge@ff2+1
  5308  00046A  C097  F01D         	movff	strtod@_u+2,___ftge@ff2+2
  5309  00046E  EC00  F012         	call	___ftge	;wreg free
  5310  000472  B0D8               	btfsc	status,0,c
  5311  000474  D011               	goto	l1523
  5312  000476  0100               	movlb	0	; () banked
  5313  000478  A193               	btfss	strtod@flags& (0+255),0,b
  5314  00047A  D007               	goto	l1524
  5315                           
  5316                           ; BSR set to: 0
  5317  00047C  0E00               	movlw	0
  5318  00047E  6F8D               	movwf	?_strtod& (0+255),b
  5319  000480  0E80               	movlw	128
  5320  000482  6F8E               	movwf	(?_strtod+1)& (0+255),b
  5321  000484  0E80               	movlw	128
  5322  000486  6F8F               	movwf	(?_strtod+2)& (0+255),b
  5323                           
  5324                           ; BSR set to: 0
  5325  000488  0012               	return	
  5326  00048A                     l1524:
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ; BSR set to: 0
  5331  00048A  0E00               	movlw	0
  5332  00048C  6F8D               	movwf	?_strtod& (0+255),b
  5333  00048E  0E80               	movlw	128
  5334  000490  6F8E               	movwf	(?_strtod+1)& (0+255),b
  5335  000492  0E00               	movlw	0
  5336  000494  6F8F               	movwf	(?_strtod+2)& (0+255),b
  5337                           
  5338                           ; BSR set to: 0
  5339  000496  0012               	return	
  5340  000498                     l1523:
  5341                           
  5342                           ; BSR set to: 0
  5343                           
  5344                           ; BSR set to: 0
  5345  000498  0100               	movlb	0	; () banked
  5346  00049A  A193               	btfss	strtod@flags& (0+255),0,b
  5347  00049C  D00E               	goto	l1525
  5348                           
  5349                           ; BSR set to: 0
  5350  00049E  C095  F08A         	movff	strtod@_u,___ftneg@f1
  5351  0004A2  C096  F08B         	movff	strtod@_u+1,___ftneg@f1+1
  5352  0004A6  C097  F08C         	movff	strtod@_u+2,___ftneg@f1+2
  5353  0004AA  EC3D  F018         	call	___ftneg	;wreg free
  5354  0004AE  C08A  F095         	movff	?___ftneg,strtod@_u
  5355  0004B2  C08B  F096         	movff	?___ftneg+1,strtod@_u+1
  5356  0004B6  C08C  F097         	movff	?___ftneg+2,strtod@_u+2
  5357  0004BA                     l1525:
  5358  0004BA  C095  F08D         	movff	strtod@_u,?_strtod
  5359  0004BE  C096  F08E         	movff	strtod@_u+1,?_strtod+1
  5360  0004C2  C097  F08F         	movff	strtod@_u+2,?_strtod+2
  5361  0004C6  0012               	return	
  5362  0004C8                     __end_of_strtod:
  5363                           	opt stack 0
  5364                           tosu	equ	0xFFF
  5365                           tosh	equ	0xFFE
  5366                           tosl	equ	0xFFD
  5367                           pclath	equ	0xFFA
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _CalcSynthRegParams *****************
  5388 ;; Defined at:
  5389 ;;		line 61 in file "SyntApp.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  regArray        2  102[BANK0 ] PTR long 
  5392 ;;		 -> UpdateSynthFreq@regSynthArray(16), 
  5393 ;;  inputFreq       4  104[BANK0 ] long 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  tempVal3        4  124[BANK0 ] long 
  5396 ;;  tempVal2        4  120[BANK0 ] long 
  5397 ;;  tempVal1        4  116[BANK0 ] long 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      unsigned char 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5407 ;;      Params:         0       6       0       0       0       0       0
  5408 ;;      Locals:         0      15       0       0       0       0       0
  5409 ;;      Temps:          0       8       0       0       0       0       0
  5410 ;;      Totals:         0      29       0       0       0       0       0
  5411 ;;Total ram usage:       29 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    8
  5414 ;; This function calls:
  5415 ;;		___altoft
  5416 ;;		___ftdiv
  5417 ;;		___ftmul
  5418 ;;		___fttol
  5419 ;;		_getFractionPartOfDivide
  5420 ;;		_pow
  5421 ;; This function is called by:
  5422 ;;		_UpdateSynthFreq
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           	psect	text10
  5427  0004C8                     __ptext10:
  5428                           	opt stack 0
  5429  0004C8                     _CalcSynthRegParams:
  5430                           	opt stack 19
  5431                           
  5432                           ;SyntApp.c: 63: int32_t tempVal1 = 0x0, tempVal2 = 0x0, tempVal3 = 0x0;
  5433                           
  5434                           ;incstack = 0
  5435  0004C8  0E00               	movlw	0
  5436  0004CA  0100               	movlb	0	; () banked
  5437  0004CC  6FD4               	movwf	CalcSynthRegParams@tempVal1& (0+255),b
  5438  0004CE  0E00               	movlw	0
  5439  0004D0  6FD5               	movwf	(CalcSynthRegParams@tempVal1+1)& (0+255),b
  5440  0004D2  0E00               	movlw	0
  5441  0004D4  6FD6               	movwf	(CalcSynthRegParams@tempVal1+2)& (0+255),b
  5442  0004D6  0E00               	movlw	0
  5443  0004D8  6FD7               	movwf	(CalcSynthRegParams@tempVal1+3)& (0+255),b
  5444  0004DA  0E00               	movlw	0
  5445  0004DC  6FD8               	movwf	CalcSynthRegParams@tempVal2& (0+255),b
  5446  0004DE  0E00               	movlw	0
  5447  0004E0  6FD9               	movwf	(CalcSynthRegParams@tempVal2+1)& (0+255),b
  5448  0004E2  0E00               	movlw	0
  5449  0004E4  6FDA               	movwf	(CalcSynthRegParams@tempVal2+2)& (0+255),b
  5450  0004E6  0E00               	movlw	0
  5451  0004E8  6FDB               	movwf	(CalcSynthRegParams@tempVal2+3)& (0+255),b
  5452  0004EA  0E00               	movlw	0
  5453  0004EC  6FDC               	movwf	CalcSynthRegParams@tempVal3& (0+255),b
  5454  0004EE  0E00               	movlw	0
  5455  0004F0  6FDD               	movwf	(CalcSynthRegParams@tempVal3+1)& (0+255),b
  5456  0004F2  0E00               	movlw	0
  5457  0004F4  6FDE               	movwf	(CalcSynthRegParams@tempVal3+2)& (0+255),b
  5458  0004F6  0E00               	movlw	0
  5459  0004F8  6FDF               	movwf	(CalcSynthRegParams@tempVal3+3)& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;SyntApp.c: 64: synthCalcParams.fVco = inputFreq / 2.0;
  5463  0004FA  C0C8  F020         	movff	CalcSynthRegParams@inputFreq,___altoft@c
  5464  0004FE  C0C9  F021         	movff	CalcSynthRegParams@inputFreq+1,___altoft@c+1
  5465  000502  C0CA  F022         	movff	CalcSynthRegParams@inputFreq+2,___altoft@c+2
  5466  000506  C0CB  F023         	movff	CalcSynthRegParams@inputFreq+3,___altoft@c+3
  5467  00050A  EC10  F013         	call	___altoft	;wreg free
  5468  00050E  C020  F02A         	movff	?___altoft,___ftdiv@f1
  5469  000512  C021  F02B         	movff	?___altoft+1,___ftdiv@f1+1
  5470  000516  C022  F02C         	movff	?___altoft+2,___ftdiv@f1+2
  5471  00051A  0E00               	movlw	0
  5472  00051C  6E2D               	movwf	___ftdiv@f2,c
  5473  00051E  0E00               	movlw	0
  5474  000520  6E2E               	movwf	___ftdiv@f2+1,c
  5475  000522  0E40               	movlw	64
  5476  000524  6E2F               	movwf	___ftdiv@f2+2,c
  5477  000526  ECA6  F00D         	call	___ftdiv	;wreg free
  5478  00052A  C02A  F128         	movff	?___ftdiv,_synthCalcParams
  5479  00052E  C02B  F129         	movff	?___ftdiv+1,_synthCalcParams+1
  5480  000532  C02C  F12A         	movff	?___ftdiv+2,_synthCalcParams+2
  5481                           
  5482                           ;SyntApp.c: 65: synthCalcParams.fPFD = 40.0;
  5483  000536  0E00               	movlw	0
  5484  000538  0101               	movlb	1	; () banked
  5485  00053A  6F2B               	movwf	(_synthCalcParams+3)& (0+255),b
  5486  00053C  0E20               	movlw	32
  5487  00053E  6F2C               	movwf	(_synthCalcParams+4)& (0+255),b
  5488  000540  0E42               	movlw	66
  5489  000542  6F2D               	movwf	(_synthCalcParams+5)& (0+255),b
  5490                           
  5491                           ;SyntApp.c: 66: synthCalcParams.INT = (int)(synthCalcParams.fVco / synthCalcParams.fPFD)
      +                          ;
  5492  000544  C12B  F02D         	movff	_synthCalcParams+3,___ftdiv@f2
  5493  000548  C12C  F02E         	movff	_synthCalcParams+4,___ftdiv@f2+1
  5494  00054C  C12D  F02F         	movff	_synthCalcParams+5,___ftdiv@f2+2
  5495  000550  C128  F02A         	movff	_synthCalcParams,___ftdiv@f1
  5496  000554  C129  F02B         	movff	_synthCalcParams+1,___ftdiv@f1+1
  5497  000558  C12A  F02C         	movff	_synthCalcParams+2,___ftdiv@f1+2
  5498  00055C  ECA6  F00D         	call	___ftdiv	;wreg free
  5499  000560  C02A  F078         	movff	?___ftdiv,___fttol@f1
  5500  000564  C02B  F079         	movff	?___ftdiv+1,___fttol@f1+1
  5501  000568  C02C  F07A         	movff	?___ftdiv+2,___fttol@f1+2
  5502  00056C  ECAF  F00C         	call	___fttol	;wreg free
  5503  000570  0100               	movlb	0	; () banked
  5504  000572  C078  F12E         	movff	?___fttol,_synthCalcParams+6
  5505  000576  C079  F12F         	movff	?___fttol+1,_synthCalcParams+7
  5506  00057A  0101               	movlb	1	; () banked
  5507  00057C  0E00               	movlw	0
  5508  00057E  BF2F               	btfsc	(_synthCalcParams+7)& (0+255),7,b
  5509  000580  0EFF               	movlw	-1
  5510  000582  6F30               	movwf	(_synthCalcParams+8)& (0+255),b
  5511  000584  6F31               	movwf	(_synthCalcParams+9)& (0+255),b
  5512                           
  5513                           ; BSR set to: 1
  5514                           ;SyntApp.c: 67: synthCalcParams.Mod1 = 16777216;
  5515  000586  0E00               	movlw	0
  5516  000588  6F32               	movwf	(_synthCalcParams+10)& (0+255),b
  5517  00058A  0E00               	movlw	0
  5518  00058C  6F33               	movwf	(_synthCalcParams+11)& (0+255),b
  5519  00058E  0E00               	movlw	0
  5520  000590  6F34               	movwf	(_synthCalcParams+12)& (0+255),b
  5521  000592  0E01               	movlw	1
  5522  000594  6F35               	movwf	(_synthCalcParams+13)& (0+255),b
  5523                           
  5524                           ; BSR set to: 1
  5525                           ;SyntApp.c: 68: synthCalcParams.Fraq = getFractionPartOfDivide(synthCalcParams.fVco, syn
      +                          thCalcParams.fPFD);
  5526  000596  C128  F099         	movff	_synthCalcParams,getFractionPartOfDivide@num1
  5527  00059A  C129  F09A         	movff	_synthCalcParams+1,getFractionPartOfDivide@num1+1
  5528  00059E  C12A  F09B         	movff	_synthCalcParams+2,getFractionPartOfDivide@num1+2
  5529  0005A2  C12B  F09C         	movff	_synthCalcParams+3,getFractionPartOfDivide@num2
  5530  0005A6  C12C  F09D         	movff	_synthCalcParams+4,getFractionPartOfDivide@num2+1
  5531  0005AA  C12D  F09E         	movff	_synthCalcParams+5,getFractionPartOfDivide@num2+2
  5532  0005AE  EC48  F012         	call	_getFractionPartOfDivide	;wreg free
  5533  0005B2  C099  F136         	movff	?_getFractionPartOfDivide,_synthCalcParams+14
  5534  0005B6  C09A  F137         	movff	?_getFractionPartOfDivide+1,_synthCalcParams+15
  5535  0005BA  C09B  F138         	movff	?_getFractionPartOfDivide+2,_synthCalcParams+16
  5536                           
  5537                           ;SyntApp.c: 69: synthCalcParams.Fraq1 = synthCalcParams.Fraq * 16777216;
  5538  0005BE  0E00               	movlw	0
  5539  0005C0  0100               	movlb	0	; () banked
  5540  0005C2  6F6C               	movwf	___ftmul@f2& (0+255),b
  5541  0005C4  0E80               	movlw	128
  5542  0005C6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  5543  0005C8  0E4B               	movlw	75
  5544  0005CA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  5545  0005CC  C136  F069         	movff	_synthCalcParams+14,___ftmul@f1
  5546  0005D0  C137  F06A         	movff	_synthCalcParams+15,___ftmul@f1+1
  5547  0005D4  C138  F06B         	movff	_synthCalcParams+16,___ftmul@f1+2
  5548  0005D8  EC2B  F00D         	call	___ftmul	;wreg free
  5549  0005DC  C069  F078         	movff	?___ftmul,___fttol@f1
  5550  0005E0  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  5551  0005E4  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  5552  0005E8  ECAF  F00C         	call	___fttol	;wreg free
  5553  0005EC  C078  F139         	movff	?___fttol,_synthCalcParams+17
  5554  0005F0  C079  F13A         	movff	?___fttol+1,_synthCalcParams+18
  5555  0005F4  C07A  F13B         	movff	?___fttol+2,_synthCalcParams+19
  5556  0005F8  C07B  F13C         	movff	?___fttol+3,_synthCalcParams+20
  5557                           
  5558                           ;SyntApp.c: 70: synthCalcParams.remFraq1 = 0;
  5559  0005FC  0E00               	movlw	0
  5560  0005FE  0101               	movlb	1	; () banked
  5561  000600  6F3D               	movwf	(_synthCalcParams+21)& (0+255),b
  5562  000602  0E00               	movlw	0
  5563  000604  6F3E               	movwf	(_synthCalcParams+22)& (0+255),b
  5564  000606  0E00               	movlw	0
  5565  000608  6F3F               	movwf	(_synthCalcParams+23)& (0+255),b
  5566                           
  5567                           ; BSR set to: 1
  5568                           ;SyntApp.c: 71: synthCalcParams.Mod2 = 0x15550;
  5569  00060A  0E50               	movlw	80
  5570  00060C  6F40               	movwf	(_synthCalcParams+24)& (0+255),b
  5571  00060E  0E55               	movlw	85
  5572  000610  6F41               	movwf	(_synthCalcParams+25)& (0+255),b
  5573  000612  0E01               	movlw	1
  5574  000614  6F42               	movwf	(_synthCalcParams+26)& (0+255),b
  5575  000616  0E00               	movlw	0
  5576  000618  6F43               	movwf	(_synthCalcParams+27)& (0+255),b
  5577                           
  5578                           ; BSR set to: 1
  5579                           ;SyntApp.c: 72: synthCalcParams.Fraq2 = (int)(synthCalcParams.remFraq1 * synthCalcParams
      +                          .Mod2);
  5580  00061A  C13D  F06C         	movff	_synthCalcParams+21,___ftmul@f2
  5581  00061E  C13E  F06D         	movff	_synthCalcParams+22,___ftmul@f2+1
  5582  000622  C13F  F06E         	movff	_synthCalcParams+23,___ftmul@f2+2
  5583  000626  C140  F020         	movff	_synthCalcParams+24,___altoft@c
  5584  00062A  C141  F021         	movff	_synthCalcParams+25,___altoft@c+1
  5585  00062E  C142  F022         	movff	_synthCalcParams+26,___altoft@c+2
  5586  000632  C143  F023         	movff	_synthCalcParams+27,___altoft@c+3
  5587  000636  EC10  F013         	call	___altoft	;wreg free
  5588  00063A  C020  F069         	movff	?___altoft,___ftmul@f1
  5589  00063E  C021  F06A         	movff	?___altoft+1,___ftmul@f1+1
  5590  000642  C022  F06B         	movff	?___altoft+2,___ftmul@f1+2
  5591  000646  EC2B  F00D         	call	___ftmul	;wreg free
  5592  00064A  C069  F078         	movff	?___ftmul,___fttol@f1
  5593  00064E  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  5594  000652  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  5595  000656  ECAF  F00C         	call	___fttol	;wreg free
  5596  00065A  0100               	movlb	0	; () banked
  5597  00065C  C078  F144         	movff	?___fttol,_synthCalcParams+28
  5598  000660  C079  F145         	movff	?___fttol+1,_synthCalcParams+29
  5599  000664  0101               	movlb	1	; () banked
  5600  000666  0E00               	movlw	0
  5601  000668  BF45               	btfsc	(_synthCalcParams+29)& (0+255),7,b
  5602  00066A  0EFF               	movlw	-1
  5603  00066C  6F46               	movwf	(_synthCalcParams+30)& (0+255),b
  5604  00066E  6F47               	movwf	(_synthCalcParams+31)& (0+255),b
  5605                           
  5606                           ; BSR set to: 1
  5607                           ;SyntApp.c: 74: regArray[0] = (int)(synthCalcParams.INT * pow(2,4)) | 0x200000 | 0x0;
  5608  000670  0E00               	movlw	0
  5609  000672  0100               	movlb	0	; () banked
  5610  000674  6FB8               	movwf	pow@y& (0+255),b
  5611  000676  0E80               	movlw	128
  5612  000678  6FB9               	movwf	(pow@y+1)& (0+255),b
  5613  00067A  0E40               	movlw	64
  5614  00067C  6FBA               	movwf	(pow@y+2)& (0+255),b
  5615  00067E  0E00               	movlw	0
  5616  000680  6FB5               	movwf	pow@x& (0+255),b
  5617  000682  0E00               	movlw	0
  5618  000684  6FB6               	movwf	(pow@x+1)& (0+255),b
  5619  000686  0E40               	movlw	64
  5620  000688  6FB7               	movwf	(pow@x+2)& (0+255),b
  5621  00068A  EC32  F00A         	call	_pow	;wreg free
  5622  00068E  C0B5  F0E0         	movff	?_pow,_CalcSynthRegParams$2993
  5623  000692  C0B6  F0E1         	movff	?_pow+1,_CalcSynthRegParams$2993+1
  5624  000696  C0B7  F0E2         	movff	?_pow+2,_CalcSynthRegParams$2993+2
  5625                           
  5626                           ;SyntApp.c: 74: regArray[0] = (int)(synthCalcParams.INT * pow(2,4)) | 0x200000 | 0x0;
  5627  00069A  C0E0  F06C         	movff	_CalcSynthRegParams$2993,___ftmul@f2
  5628  00069E  C0E1  F06D         	movff	_CalcSynthRegParams$2993+1,___ftmul@f2+1
  5629  0006A2  C0E2  F06E         	movff	_CalcSynthRegParams$2993+2,___ftmul@f2+2
  5630  0006A6  C12E  F020         	movff	_synthCalcParams+6,___altoft@c
  5631  0006AA  C12F  F021         	movff	_synthCalcParams+7,___altoft@c+1
  5632  0006AE  C130  F022         	movff	_synthCalcParams+8,___altoft@c+2
  5633  0006B2  C131  F023         	movff	_synthCalcParams+9,___altoft@c+3
  5634  0006B6  EC10  F013         	call	___altoft	;wreg free
  5635  0006BA  C020  F069         	movff	?___altoft,___ftmul@f1
  5636  0006BE  C021  F06A         	movff	?___altoft+1,___ftmul@f1+1
  5637  0006C2  C022  F06B         	movff	?___altoft+2,___ftmul@f1+2
  5638  0006C6  EC2B  F00D         	call	___ftmul	;wreg free
  5639  0006CA  C069  F078         	movff	?___ftmul,___fttol@f1
  5640  0006CE  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  5641  0006D2  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  5642  0006D6  ECAF  F00C         	call	___fttol	;wreg free
  5643  0006DA  0100               	movlb	0	; () banked
  5644  0006DC  C078  F0CC         	movff	?___fttol,??_CalcSynthRegParams
  5645  0006E0  C079  F0CD         	movff	?___fttol+1,??_CalcSynthRegParams+1
  5646  0006E4  0E00               	movlw	0
  5647  0006E6  BFCD               	btfsc	(??_CalcSynthRegParams+1)& (0+255),7,b
  5648  0006E8  0EFF               	movlw	255
  5649  0006EA  6FCE               	movwf	(??_CalcSynthRegParams+2)& (0+255),b
  5650  0006EC  6FCF               	movwf	(??_CalcSynthRegParams+3)& (0+255),b
  5651  0006EE  0E00               	movlw	0
  5652  0006F0  11CC               	iorwf	??_CalcSynthRegParams& (0+255),w,b
  5653  0006F2  6FD0               	movwf	(??_CalcSynthRegParams+4)& (0+255),b
  5654  0006F4  0E00               	movlw	0
  5655  0006F6  11CD               	iorwf	(??_CalcSynthRegParams+1)& (0+255),w,b
  5656  0006F8  6FD1               	movwf	(??_CalcSynthRegParams+5)& (0+255),b
  5657  0006FA  0E20               	movlw	32
  5658  0006FC  11CE               	iorwf	(??_CalcSynthRegParams+2)& (0+255),w,b
  5659  0006FE  6FD2               	movwf	(??_CalcSynthRegParams+6)& (0+255),b
  5660  000700  0E00               	movlw	0
  5661  000702  11CF               	iorwf	(??_CalcSynthRegParams+3)& (0+255),w,b
  5662  000704  6FD3               	movwf	(??_CalcSynthRegParams+7)& (0+255),b
  5663  000706  C0C6  FFD9         	movff	CalcSynthRegParams@regArray,fsr2l
  5664  00070A  C0C7  FFDA         	movff	CalcSynthRegParams@regArray+1,fsr2h
  5665  00070E  C0D0  FFDE         	movff	??_CalcSynthRegParams+4,postinc2
  5666  000712  C0D1  FFDE         	movff	??_CalcSynthRegParams+5,postinc2
  5667  000716  C0D2  FFDE         	movff	??_CalcSynthRegParams+6,postinc2
  5668  00071A  C0D3  FFDE         	movff	??_CalcSynthRegParams+7,postinc2
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;SyntApp.c: 75: regArray[1] = synthCalcParams.Fraq1 | 0x1;
  5672  00071E  0E01               	movlw	1
  5673  000720  0101               	movlb	1	; () banked
  5674  000722  1139               	iorwf	(_synthCalcParams+17)& (0+255),w,b
  5675  000724  0100               	movlb	0	; () banked
  5676  000726  6FCC               	movwf	??_CalcSynthRegParams& (0+255),b
  5677  000728  0101               	movlb	1	; () banked
  5678  00072A  513A               	movf	(_synthCalcParams+18)& (0+255),w,b
  5679  00072C  0100               	movlb	0	; () banked
  5680  00072E  6FCD               	movwf	(??_CalcSynthRegParams+1)& (0+255),b
  5681  000730  0101               	movlb	1	; () banked
  5682  000732  513B               	movf	(_synthCalcParams+19)& (0+255),w,b
  5683  000734  0100               	movlb	0	; () banked
  5684  000736  6FCE               	movwf	(??_CalcSynthRegParams+2)& (0+255),b
  5685  000738  0101               	movlb	1	; () banked
  5686  00073A  513C               	movf	(_synthCalcParams+20)& (0+255),w,b
  5687  00073C  0100               	movlb	0	; () banked
  5688  00073E  6FCF               	movwf	(??_CalcSynthRegParams+3)& (0+255),b
  5689  000740  EE20 F004          	lfsr	2,4
  5690  000744  51C6               	movf	CalcSynthRegParams@regArray& (0+255),w,b
  5691  000746  26D9               	addwf	fsr2l,f,c
  5692  000748  51C7               	movf	(CalcSynthRegParams@regArray+1)& (0+255),w,b
  5693  00074A  22DA               	addwfc	fsr2h,f,c
  5694  00074C  C0CC  FFDE         	movff	??_CalcSynthRegParams,postinc2
  5695  000750  C0CD  FFDE         	movff	??_CalcSynthRegParams+1,postinc2
  5696  000754  C0CE  FFDE         	movff	??_CalcSynthRegParams+2,postinc2
  5697  000758  C0CF  FFDE         	movff	??_CalcSynthRegParams+3,postinc2
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;SyntApp.c: 76: regArray[2] = (int)(synthCalcParams.Fraq2 * pow(2,18)) | 0x15550 | 0x2;
  5701  00075C  0E00               	movlw	0
  5702  00075E  6FB8               	movwf	pow@y& (0+255),b
  5703  000760  0E90               	movlw	144
  5704  000762  6FB9               	movwf	(pow@y+1)& (0+255),b
  5705  000764  0E41               	movlw	65
  5706  000766  6FBA               	movwf	(pow@y+2)& (0+255),b
  5707  000768  0E00               	movlw	0
  5708  00076A  6FB5               	movwf	pow@x& (0+255),b
  5709  00076C  0E00               	movlw	0
  5710  00076E  6FB6               	movwf	(pow@x+1)& (0+255),b
  5711  000770  0E40               	movlw	64
  5712  000772  6FB7               	movwf	(pow@x+2)& (0+255),b
  5713  000774  EC32  F00A         	call	_pow	;wreg free
  5714  000778  C0B5  F0E0         	movff	?_pow,_CalcSynthRegParams$2993
  5715  00077C  C0B6  F0E1         	movff	?_pow+1,_CalcSynthRegParams$2993+1
  5716  000780  C0B7  F0E2         	movff	?_pow+2,_CalcSynthRegParams$2993+2
  5717                           
  5718                           ;SyntApp.c: 76: regArray[2] = (int)(synthCalcParams.Fraq2 * pow(2,18)) | 0x15550 | 0x2;
  5719  000784  C0E0  F06C         	movff	_CalcSynthRegParams$2993,___ftmul@f2
  5720  000788  C0E1  F06D         	movff	_CalcSynthRegParams$2993+1,___ftmul@f2+1
  5721  00078C  C0E2  F06E         	movff	_CalcSynthRegParams$2993+2,___ftmul@f2+2
  5722  000790  C144  F020         	movff	_synthCalcParams+28,___altoft@c
  5723  000794  C145  F021         	movff	_synthCalcParams+29,___altoft@c+1
  5724  000798  C146  F022         	movff	_synthCalcParams+30,___altoft@c+2
  5725  00079C  C147  F023         	movff	_synthCalcParams+31,___altoft@c+3
  5726  0007A0  EC10  F013         	call	___altoft	;wreg free
  5727  0007A4  C020  F069         	movff	?___altoft,___ftmul@f1
  5728  0007A8  C021  F06A         	movff	?___altoft+1,___ftmul@f1+1
  5729  0007AC  C022  F06B         	movff	?___altoft+2,___ftmul@f1+2
  5730  0007B0  EC2B  F00D         	call	___ftmul	;wreg free
  5731  0007B4  C069  F078         	movff	?___ftmul,___fttol@f1
  5732  0007B8  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  5733  0007BC  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  5734  0007C0  ECAF  F00C         	call	___fttol	;wreg free
  5735  0007C4  0100               	movlb	0	; () banked
  5736  0007C6  C078  F0CC         	movff	?___fttol,??_CalcSynthRegParams
  5737  0007CA  C079  F0CD         	movff	?___fttol+1,??_CalcSynthRegParams+1
  5738  0007CE  0E00               	movlw	0
  5739  0007D0  BFCD               	btfsc	(??_CalcSynthRegParams+1)& (0+255),7,b
  5740  0007D2  0EFF               	movlw	255
  5741  0007D4  6FCE               	movwf	(??_CalcSynthRegParams+2)& (0+255),b
  5742  0007D6  6FCF               	movwf	(??_CalcSynthRegParams+3)& (0+255),b
  5743  0007D8  0E52               	movlw	82
  5744  0007DA  11CC               	iorwf	??_CalcSynthRegParams& (0+255),w,b
  5745  0007DC  6FD0               	movwf	(??_CalcSynthRegParams+4)& (0+255),b
  5746  0007DE  0E55               	movlw	85
  5747  0007E0  11CD               	iorwf	(??_CalcSynthRegParams+1)& (0+255),w,b
  5748  0007E2  6FD1               	movwf	(??_CalcSynthRegParams+5)& (0+255),b
  5749  0007E4  0E01               	movlw	1
  5750  0007E6  11CE               	iorwf	(??_CalcSynthRegParams+2)& (0+255),w,b
  5751  0007E8  6FD2               	movwf	(??_CalcSynthRegParams+6)& (0+255),b
  5752  0007EA  0E00               	movlw	0
  5753  0007EC  11CF               	iorwf	(??_CalcSynthRegParams+3)& (0+255),w,b
  5754  0007EE  6FD3               	movwf	(??_CalcSynthRegParams+7)& (0+255),b
  5755  0007F0  EE20 F008          	lfsr	2,8
  5756  0007F4  51C6               	movf	CalcSynthRegParams@regArray& (0+255),w,b
  5757  0007F6  26D9               	addwf	fsr2l,f,c
  5758  0007F8  51C7               	movf	(CalcSynthRegParams@regArray+1)& (0+255),w,b
  5759  0007FA  22DA               	addwfc	fsr2h,f,c
  5760  0007FC  C0D0  FFDE         	movff	??_CalcSynthRegParams+4,postinc2
  5761  000800  C0D1  FFDE         	movff	??_CalcSynthRegParams+5,postinc2
  5762  000804  C0D2  FFDE         	movff	??_CalcSynthRegParams+6,postinc2
  5763  000808  C0D3  FFDE         	movff	??_CalcSynthRegParams+7,postinc2
  5764  00080C  0012               	return	
  5765  00080E                     __end_of_CalcSynthRegParams:
  5766                           	opt stack 0
  5767                           tosu	equ	0xFFF
  5768                           tosh	equ	0xFFE
  5769                           tosl	equ	0xFFD
  5770                           pclath	equ	0xFFA
  5771                           tblptru	equ	0xFF8
  5772                           tblptrh	equ	0xFF7
  5773                           tblptrl	equ	0xFF6
  5774                           tablat	equ	0xFF5
  5775                           prodh	equ	0xFF4
  5776                           prodl	equ	0xFF3
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           indf1	equ	0xFE7
  5780                           postdec1	equ	0xFE5
  5781                           fsr1h	equ	0xFE2
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _getFractionPartOfDivide *****************
  5791 ;; Defined at:
  5792 ;;		line 50 in file "SystemCommon.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  num1            3   57[BANK0 ] unsigned char 
  5795 ;;  num2            3   60[BANK0 ] unsigned char 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  3   57[BANK0 ] unsigned char 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5807 ;;      Params:         0       6       0       0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0
  5810 ;;      Totals:         0       6       0       0       0       0       0
  5811 ;;Total ram usage:        6 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    5
  5814 ;; This function calls:
  5815 ;;		___awtoft
  5816 ;;		___ftadd
  5817 ;;		___ftdiv
  5818 ;;		___ftneg
  5819 ;;		___fttol
  5820 ;; This function is called by:
  5821 ;;		_UpdateSynthFreq
  5822 ;;		_CalcSynthRegParams
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text11
  5827  002490                     __ptext11:
  5828                           	opt stack 0
  5829  002490                     _getFractionPartOfDivide:
  5830                           	opt stack 22
  5831                           
  5832                           ;SystemCommon.c: 52: return ((num1 / num2) - (int)(num1 / num2));
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;incstack = 0
  5836  002490  C09C  F02D         	movff	getFractionPartOfDivide@num2,___ftdiv@f2
  5837  002494  C09D  F02E         	movff	getFractionPartOfDivide@num2+1,___ftdiv@f2+1
  5838  002498  C09E  F02F         	movff	getFractionPartOfDivide@num2+2,___ftdiv@f2+2
  5839  00249C  C099  F02A         	movff	getFractionPartOfDivide@num1,___ftdiv@f1
  5840  0024A0  C09A  F02B         	movff	getFractionPartOfDivide@num1+1,___ftdiv@f1+1
  5841  0024A4  C09B  F02C         	movff	getFractionPartOfDivide@num1+2,___ftdiv@f1+2
  5842  0024A8  ECA6  F00D         	call	___ftdiv	;wreg free
  5843  0024AC  C02A  F08D         	movff	?___ftdiv,___ftadd@f1
  5844  0024B0  C02B  F08E         	movff	?___ftdiv+1,___ftadd@f1+1
  5845  0024B4  C02C  F08F         	movff	?___ftdiv+2,___ftadd@f1+2
  5846  0024B8  C09C  F02D         	movff	getFractionPartOfDivide@num2,___ftdiv@f2
  5847  0024BC  C09D  F02E         	movff	getFractionPartOfDivide@num2+1,___ftdiv@f2+1
  5848  0024C0  C09E  F02F         	movff	getFractionPartOfDivide@num2+2,___ftdiv@f2+2
  5849  0024C4  C099  F02A         	movff	getFractionPartOfDivide@num1,___ftdiv@f1
  5850  0024C8  C09A  F02B         	movff	getFractionPartOfDivide@num1+1,___ftdiv@f1+1
  5851  0024CC  C09B  F02C         	movff	getFractionPartOfDivide@num1+2,___ftdiv@f1+2
  5852  0024D0  ECA6  F00D         	call	___ftdiv	;wreg free
  5853  0024D4  C02A  F078         	movff	?___ftdiv,___fttol@f1
  5854  0024D8  C02B  F079         	movff	?___ftdiv+1,___fttol@f1+1
  5855  0024DC  C02C  F07A         	movff	?___ftdiv+2,___fttol@f1+2
  5856  0024E0  ECAF  F00C         	call	___fttol	;wreg free
  5857  0024E4  C078  F087         	movff	?___fttol,___awtoft@c
  5858  0024E8  C079  F088         	movff	?___fttol+1,___awtoft@c+1
  5859  0024EC  EC4D  F017         	call	___awtoft	;wreg free
  5860  0024F0  C087  F08A         	movff	?___awtoft,___ftneg@f1
  5861  0024F4  C088  F08B         	movff	?___awtoft+1,___ftneg@f1+1
  5862  0024F8  C089  F08C         	movff	?___awtoft+2,___ftneg@f1+2
  5863  0024FC  EC3D  F018         	call	___ftneg	;wreg free
  5864  002500  C08A  F090         	movff	?___ftneg,___ftadd@f2
  5865  002504  C08B  F091         	movff	?___ftneg+1,___ftadd@f2+1
  5866  002508  C08C  F092         	movff	?___ftneg+2,___ftadd@f2+2
  5867  00250C  EC5B  F009         	call	___ftadd	;wreg free
  5868  002510  C08D  F099         	movff	?___ftadd,?_getFractionPartOfDivide
  5869  002514  C08E  F09A         	movff	?___ftadd+1,?_getFractionPartOfDivide+1
  5870  002518  C08F  F09B         	movff	?___ftadd+2,?_getFractionPartOfDivide+2
  5871  00251C  0012               	return	
  5872  00251E                     __end_of_getFractionPartOfDivide:
  5873                           	opt stack 0
  5874                           tosu	equ	0xFFF
  5875                           tosh	equ	0xFFE
  5876                           tosl	equ	0xFFD
  5877                           pclath	equ	0xFFA
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           postinc0	equ	0xFEE
  5885                           wreg	equ	0xFE8
  5886                           indf1	equ	0xFE7
  5887                           postdec1	equ	0xFE5
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _AdcSingleSample *****************
  5898 ;; Defined at:
  5899 ;;		line 46 in file "AdcApp.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  cType           1    wreg     enum E177
  5902 ;;  data            2   21[BANK0 ] PTR unsigned char 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  cType           1   23[BANK0 ] enum E177
  5905 ;;  retNum          4   24[BANK0 ] unsigned long 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5915 ;;      Params:         0       2       0       0       0       0       0
  5916 ;;      Locals:         0       5       0       0       0       0       0
  5917 ;;      Temps:          1       0       0       0       0       0       0
  5918 ;;      Totals:         1       7       0       0       0       0       0
  5919 ;;Total ram usage:        8 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    7
  5922 ;; This function calls:
  5923 ;;		_GetIntFromUartData
  5924 ;;		_UART_Write_Text
  5925 ;;		___lldiv
  5926 ;;		___llmod
  5927 ;; This function is called by:
  5928 ;;		_GroupRx
  5929 ;;		_GroupTx
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text12
  5934  0015E0                     __ptext12:
  5935                           	opt stack 0
  5936  0015E0                     _AdcSingleSample:
  5937                           	opt stack 21
  5938                           
  5939                           ;incstack = 0
  5940                           ;AdcSingleSample@cType stored from wreg
  5941  0015E0  0100               	movlb	0	; () banked
  5942  0015E2  6F77               	movwf	AdcSingleSample@cType& (0+255),b
  5943                           
  5944                           ;AdcApp.c: 48: uint32_t retNum = 0x0;
  5945  0015E4  0E00               	movlw	0
  5946  0015E6  0100               	movlb	0	; () banked
  5947  0015E8  6F78               	movwf	AdcSingleSample@retNum& (0+255),b
  5948  0015EA  0E00               	movlw	0
  5949  0015EC  6F79               	movwf	(AdcSingleSample@retNum+1)& (0+255),b
  5950  0015EE  0E00               	movlw	0
  5951  0015F0  6F7A               	movwf	(AdcSingleSample@retNum+2)& (0+255),b
  5952  0015F2  0E00               	movlw	0
  5953  0015F4  6F7B               	movwf	(AdcSingleSample@retNum+3)& (0+255),b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;AdcApp.c: 50: if(data[0] == '0')
  5957  0015F6  C075  FFD9         	movff	AdcSingleSample@data,fsr2l
  5958  0015FA  C076  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  5959  0015FE  0E30               	movlw	48
  5960  001600  18DE               	xorwf	postinc2,w,c
  5961  001602  A4D8               	btfss	status,2,c
  5962  001604  D007               	goto	l96
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;AdcApp.c: 51: {
  5966                           ;AdcApp.c: 52: UART_Write_Text("NOT OK \n\r");
  5967  001606  0ED9               	movlw	low STR_1
  5968  001608  6E19               	movwf	UART_Write_Text@text,c
  5969  00160A  0E7F               	movlw	high STR_1
  5970  00160C  6E1A               	movwf	UART_Write_Text@text+1,c
  5971  00160E  EC4C  F013         	call	_UART_Write_Text	;wreg free
  5972                           
  5973                           ;AdcApp.c: 53: }
  5974  001612  0012               	return	
  5975  001614                     l96:
  5976                           
  5977                           ;AdcApp.c: 54: else
  5978                           ;AdcApp.c: 55: {
  5979                           ;AdcApp.c: 56: retNum = GetIntFromUartData(data);
  5980  001614  C075  F066         	movff	AdcSingleSample@data,GetIntFromUartData@data
  5981  001618  C076  F067         	movff	AdcSingleSample@data+1,GetIntFromUartData@data+1
  5982  00161C  EC25  F011         	call	_GetIntFromUartData	;wreg free
  5983  001620  C066  F078         	movff	?_GetIntFromUartData,AdcSingleSample@retNum
  5984  001624  C067  F079         	movff	?_GetIntFromUartData+1,AdcSingleSample@retNum+1
  5985  001628  C068  F07A         	movff	?_GetIntFromUartData+2,AdcSingleSample@retNum+2
  5986  00162C  C069  F07B         	movff	?_GetIntFromUartData+3,AdcSingleSample@retNum+3
  5987                           
  5988                           ;AdcApp.c: 57: channelNum = (retNum / 0xA) % 0x64;
  5989  001630  0E0A               	movlw	10
  5990  001632  6E1C               	movwf	___lldiv@divisor,c
  5991  001634  0E00               	movlw	0
  5992  001636  6E1D               	movwf	___lldiv@divisor+1,c
  5993  001638  0E00               	movlw	0
  5994  00163A  6E1E               	movwf	___lldiv@divisor+2,c
  5995  00163C  0E00               	movlw	0
  5996  00163E  6E1F               	movwf	___lldiv@divisor+3,c
  5997  001640  C078  F018         	movff	AdcSingleSample@retNum,___lldiv@dividend
  5998  001644  C079  F019         	movff	AdcSingleSample@retNum+1,___lldiv@dividend+1
  5999  001648  C07A  F01A         	movff	AdcSingleSample@retNum+2,___lldiv@dividend+2
  6000  00164C  C07B  F01B         	movff	AdcSingleSample@retNum+3,___lldiv@dividend+3
  6001  001650  EC8F  F012         	call	___lldiv	;wreg free
  6002  001654  C018  F025         	movff	?___lldiv,___llmod@dividend
  6003  001658  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  6004  00165C  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  6005  001660  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  6006  001664  0E64               	movlw	100
  6007  001666  6E29               	movwf	___llmod@divisor,c
  6008  001668  0E00               	movlw	0
  6009  00166A  6E2A               	movwf	___llmod@divisor+1,c
  6010  00166C  0E00               	movlw	0
  6011  00166E  6E2B               	movwf	___llmod@divisor+2,c
  6012  001670  0E00               	movlw	0
  6013  001672  6E2C               	movwf	___llmod@divisor+3,c
  6014  001674  ECBA  F013         	call	___llmod	;wreg free
  6015  001678  C025  F037         	movff	?___llmod,_channelNum
  6016  00167C  C026  F038         	movff	?___llmod+1,_channelNum+1
  6017                           
  6018                           ;AdcApp.c: 58: numSamples = retNum % 0xA;
  6019  001680  C078  F025         	movff	AdcSingleSample@retNum,___llmod@dividend
  6020  001684  C079  F026         	movff	AdcSingleSample@retNum+1,___llmod@dividend+1
  6021  001688  C07A  F027         	movff	AdcSingleSample@retNum+2,___llmod@dividend+2
  6022  00168C  C07B  F028         	movff	AdcSingleSample@retNum+3,___llmod@dividend+3
  6023  001690  0E0A               	movlw	10
  6024  001692  6E29               	movwf	___llmod@divisor,c
  6025  001694  0E00               	movlw	0
  6026  001696  6E2A               	movwf	___llmod@divisor+1,c
  6027  001698  0E00               	movlw	0
  6028  00169A  6E2B               	movwf	___llmod@divisor+2,c
  6029  00169C  0E00               	movlw	0
  6030  00169E  6E2C               	movwf	___llmod@divisor+3,c
  6031  0016A0  ECBA  F013         	call	___llmod	;wreg free
  6032  0016A4  C025  F0EF         	movff	?___llmod,_numSamples
  6033  0016A8  C026  F0F0         	movff	?___llmod+1,_numSamples+1
  6034                           
  6035                           ;AdcApp.c: 60: if(channelNum > (0x04))
  6036  0016AC  5038               	movf	_channelNum+1,w,c
  6037  0016AE  E104               	bnz	u8440
  6038  0016B0  0E05               	movlw	5
  6039  0016B2  5C37               	subwf	_channelNum,w,c
  6040  0016B4  A0D8               	btfss	status,0,c
  6041  0016B6  D007               	goto	l98
  6042  0016B8                     u8440:
  6043                           
  6044                           ;AdcApp.c: 61: {
  6045                           ;AdcApp.c: 62: UART_Write_Text("NOT OK \n\r");
  6046  0016B8  0ED9               	movlw	low STR_1
  6047  0016BA  6E19               	movwf	UART_Write_Text@text,c
  6048  0016BC  0E7F               	movlw	high STR_1
  6049  0016BE  6E1A               	movwf	UART_Write_Text@text+1,c
  6050  0016C0  EC4C  F013         	call	_UART_Write_Text	;wreg free
  6051                           
  6052                           ;AdcApp.c: 63: }
  6053  0016C4  0012               	return	
  6054  0016C6                     l98:
  6055                           
  6056                           ;AdcApp.c: 64: else
  6057                           ;AdcApp.c: 65: {
  6058                           ;AdcApp.c: 66: if(cType == TX_TYPE)
  6059  0016C6  0100               	movlb	0	; () banked
  6060  0016C8  5177               	movf	AdcSingleSample@cType& (0+255),w,b
  6061  0016CA  A4D8               	btfss	status,2,c
  6062  0016CC  D01C               	goto	l105
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;AdcApp.c: 67: {
  6066                           ;AdcApp.c: 68: if(channelNum == 0) UART_Write_Text("SAMPLE CHANNEL NAME");
  6067  0016CE  5037               	movf	_channelNum,w,c
  6068  0016D0  1038               	iorwf	_channelNum+1,w,c
  6069  0016D2  A4D8               	btfss	status,2,c
  6070  0016D4  D006               	goto	l101
  6071                           
  6072                           ; BSR set to: 0
  6073  0016D6  0E9C               	movlw	low STR_3
  6074  0016D8  6E19               	movwf	UART_Write_Text@text,c
  6075  0016DA  0E7F               	movlw	high STR_3
  6076  0016DC  6E1A               	movwf	UART_Write_Text@text+1,c
  6077  0016DE  EC4C  F013         	call	_UART_Write_Text	;wreg free
  6078  0016E2                     l101:
  6079                           
  6080                           ;AdcApp.c: 69: if(channelNum == 0x0 || channelNum == 0x1)
  6081  0016E2  5037               	movf	_channelNum,w,c
  6082  0016E4  1038               	iorwf	_channelNum+1,w,c
  6083  0016E6  B4D8               	btfsc	status,2,c
  6084  0016E8  D004               	goto	u8480
  6085  0016EA  0437               	decf	_channelNum,w,c
  6086  0016EC  1038               	iorwf	_channelNum+1,w,c
  6087  0016EE  A4D8               	btfss	status,2,c
  6088  0016F0  D004               	goto	l102
  6089  0016F2                     u8480:
  6090                           
  6091                           ;AdcApp.c: 70: {
  6092                           ;AdcApp.c: 71: needToSample = 1;
  6093  0016F2  0E01               	movlw	1
  6094  0016F4  0101               	movlb	1	; () banked
  6095  0016F6  6F52               	movwf	_needToSample& (0+255),b	;volatile
  6096                           
  6097                           ;AdcApp.c: 72: }
  6098  0016F8  D006               	goto	l105
  6099  0016FA                     l102:
  6100                           
  6101                           ;AdcApp.c: 74: else
  6102                           ;AdcApp.c: 75: {
  6103                           ;AdcApp.c: 76: UART_Write_Text("NOT OK \n\r");
  6104                           
  6105                           ; BSR set to: 1
  6106  0016FA  0ED9               	movlw	low STR_1
  6107  0016FC  6E19               	movwf	UART_Write_Text@text,c
  6108  0016FE  0E7F               	movlw	high STR_1
  6109  001700  6E1A               	movwf	UART_Write_Text@text+1,c
  6110  001702  EC4C  F013         	call	_UART_Write_Text	;wreg free
  6111  001706                     l105:
  6112                           
  6113                           ;AdcApp.c: 77: }
  6114                           ;AdcApp.c: 79: }
  6115                           ;AdcApp.c: 81: if(cType == RX_TYPE)
  6116  001706  0100               	movlb	0	; () banked
  6117  001708  0577               	decf	AdcSingleSample@cType& (0+255),w,b
  6118  00170A  A4D8               	btfss	status,2,c
  6119  00170C  D004               	goto	l106
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;AdcApp.c: 82: {
  6123                           ;AdcApp.c: 83: needToSample = 1;
  6124  00170E  0E01               	movlw	1
  6125  001710  0101               	movlb	1	; () banked
  6126  001712  6F52               	movwf	_needToSample& (0+255),b	;volatile
  6127                           
  6128                           ;AdcApp.c: 84: }
  6129  001714  0012               	return	
  6130  001716                     l106:
  6131                           
  6132                           ;AdcApp.c: 85: else
  6133                           ;AdcApp.c: 86: {
  6134                           ;AdcApp.c: 87: UART_Write_Text("NOT OK \n\r");
  6135                           
  6136                           ; BSR set to: 1
  6137  001716  0ED9               	movlw	low STR_1
  6138  001718  6E19               	movwf	UART_Write_Text@text,c
  6139  00171A  0E7F               	movlw	high STR_1
  6140  00171C  6E1A               	movwf	UART_Write_Text@text+1,c
  6141  00171E  EC4C  F013         	call	_UART_Write_Text	;wreg free
  6142  001722  0012               	return	
  6143  001724                     __end_of_AdcSingleSample:
  6144                           	opt stack 0
  6145                           tosu	equ	0xFFF
  6146                           tosh	equ	0xFFE
  6147                           tosl	equ	0xFFD
  6148                           pclath	equ	0xFFA
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           indf1	equ	0xFE7
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function ___lldiv *****************
  6169 ;; Defined at:
  6170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  dividend        4   23[COMRAM] unsigned long 
  6173 ;;  divisor         4   27[COMRAM] unsigned long 
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  quotient        4   31[COMRAM] unsigned long 
  6176 ;;  counter         1   35[COMRAM] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  4   23[COMRAM] unsigned long 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6186 ;;      Params:         8       0       0       0       0       0       0
  6187 ;;      Locals:         5       0       0       0       0       0       0
  6188 ;;      Temps:          0       0       0       0       0       0       0
  6189 ;;      Totals:        13       0       0       0       0       0       0
  6190 ;;Total ram usage:       13 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    3
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_AdcSingleSample
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text13
  6201  00251E                     __ptext13:
  6202                           	opt stack 0
  6203  00251E                     ___lldiv:
  6204                           	opt stack 24
  6205                           
  6206                           ;incstack = 0
  6207  00251E  0E00               	movlw	0
  6208  002520  6E20               	movwf	___lldiv@quotient,c
  6209  002522  0E00               	movlw	0
  6210  002524  6E21               	movwf	___lldiv@quotient+1,c
  6211  002526  0E00               	movlw	0
  6212  002528  6E22               	movwf	___lldiv@quotient+2,c
  6213  00252A  0E00               	movlw	0
  6214  00252C  6E23               	movwf	___lldiv@quotient+3,c
  6215  00252E  501C               	movf	___lldiv@divisor,w,c
  6216  002530  101D               	iorwf	___lldiv@divisor+1,w,c
  6217  002532  101E               	iorwf	___lldiv@divisor+2,w,c
  6218  002534  101F               	iorwf	___lldiv@divisor+3,w,c
  6219  002536  B4D8               	btfsc	status,2,c
  6220  002538  D02A               	goto	l1735
  6221  00253A  0E01               	movlw	1
  6222  00253C  6E24               	movwf	___lldiv@counter,c
  6223  00253E  D006               	goto	l1730
  6224  002540  90D8               	bcf	status,0,c
  6225  002542  361C               	rlcf	___lldiv@divisor,f,c
  6226  002544  361D               	rlcf	___lldiv@divisor+1,f,c
  6227  002546  361E               	rlcf	___lldiv@divisor+2,f,c
  6228  002548  361F               	rlcf	___lldiv@divisor+3,f,c
  6229  00254A  2A24               	incf	___lldiv@counter,f,c
  6230  00254C                     l1730:
  6231  00254C  AE1F               	btfss	___lldiv@divisor+3,7,c
  6232  00254E  D7F8               	goto	l1731
  6233  002550                     u5370:
  6234  002550  90D8               	bcf	status,0,c
  6235  002552  3620               	rlcf	___lldiv@quotient,f,c
  6236  002554  3621               	rlcf	___lldiv@quotient+1,f,c
  6237  002556  3622               	rlcf	___lldiv@quotient+2,f,c
  6238  002558  3623               	rlcf	___lldiv@quotient+3,f,c
  6239  00255A  501C               	movf	___lldiv@divisor,w,c
  6240  00255C  5C18               	subwf	___lldiv@dividend,w,c
  6241  00255E  501D               	movf	___lldiv@divisor+1,w,c
  6242  002560  5819               	subwfb	___lldiv@dividend+1,w,c
  6243  002562  501E               	movf	___lldiv@divisor+2,w,c
  6244  002564  581A               	subwfb	___lldiv@dividend+2,w,c
  6245  002566  501F               	movf	___lldiv@divisor+3,w,c
  6246  002568  581B               	subwfb	___lldiv@dividend+3,w,c
  6247  00256A  A0D8               	btfss	status,0,c
  6248  00256C  D009               	goto	l1734
  6249  00256E  501C               	movf	___lldiv@divisor,w,c
  6250  002570  5E18               	subwf	___lldiv@dividend,f,c
  6251  002572  501D               	movf	___lldiv@divisor+1,w,c
  6252  002574  5A19               	subwfb	___lldiv@dividend+1,f,c
  6253  002576  501E               	movf	___lldiv@divisor+2,w,c
  6254  002578  5A1A               	subwfb	___lldiv@dividend+2,f,c
  6255  00257A  501F               	movf	___lldiv@divisor+3,w,c
  6256  00257C  5A1B               	subwfb	___lldiv@dividend+3,f,c
  6257  00257E  8020               	bsf	___lldiv@quotient,0,c
  6258  002580                     l1734:
  6259  002580  90D8               	bcf	status,0,c
  6260  002582  321F               	rrcf	___lldiv@divisor+3,f,c
  6261  002584  321E               	rrcf	___lldiv@divisor+2,f,c
  6262  002586  321D               	rrcf	___lldiv@divisor+1,f,c
  6263  002588  321C               	rrcf	___lldiv@divisor,f,c
  6264  00258A  2E24               	decfsz	___lldiv@counter,f,c
  6265  00258C  D7E1               	goto	u5370
  6266  00258E                     l1735:
  6267  00258E  C020  F018         	movff	___lldiv@quotient,?___lldiv
  6268  002592  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  6269  002596  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  6270  00259A  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  6271  00259E  0012               	return		;funcret
  6272  0025A0                     __end_of___lldiv:
  6273                           	opt stack 0
  6274                           tosu	equ	0xFFF
  6275                           tosh	equ	0xFFE
  6276                           tosl	equ	0xFFD
  6277                           pclath	equ	0xFFA
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           postinc0	equ	0xFEE
  6285                           wreg	equ	0xFE8
  6286                           indf1	equ	0xFE7
  6287                           postdec1	equ	0xFE5
  6288                           fsr1h	equ	0xFE2
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _GetIntFromUartData *****************
  6298 ;; Defined at:
  6299 ;;		line 29 in file "SystemCommon.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  c               1   18[BANK0 ] unsigned char 
  6304 ;;  idx             2   19[BANK0 ] int 
  6305 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  4    6[BANK0 ] unsigned long 
  6308 ;; Registers used:
  6309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6315 ;;      Params:         0       4       0       0       0       0       0
  6316 ;;      Locals:         0      11       0       0       0       0       0
  6317 ;;      Temps:          2       0       0       0       0       0       0
  6318 ;;      Totals:         2      15       0       0       0       0       0
  6319 ;;Total ram usage:       17 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    6
  6322 ;; This function calls:
  6323 ;;		_ZeroArray
  6324 ;;		_strtol
  6325 ;; This function is called by:
  6326 ;;		_AdcSingleSample
  6327 ;;		_DacSetValue
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text14
  6332  00224A                     __ptext14:
  6333                           	opt stack 0
  6334  00224A                     _GetIntFromUartData:
  6335                           	opt stack 21
  6336                           
  6337                           ;SystemCommon.c: 31: char dataRegArr[8];
  6338                           ;SystemCommon.c: 32: ZeroArray(dataRegArr, 8);
  6339                           
  6340                           ;incstack = 0
  6341  00224A  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  6342  00224C  6E20               	movwf	ZeroArray@array,c
  6343  00224E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6344  002250  6E21               	movwf	ZeroArray@array+1,c
  6345  002252  0E00               	movlw	0
  6346  002254  6E23               	movwf	ZeroArray@size+1,c
  6347  002256  0E08               	movlw	8
  6348  002258  6E22               	movwf	ZeroArray@size,c
  6349  00225A  ECA4  F018         	call	_ZeroArray	;wreg free
  6350                           
  6351                           ;SystemCommon.c: 34: for(int idx = 0; idx < 8; idx++)
  6352  00225E  0E00               	movlw	0
  6353  002260  0100               	movlb	0	; () banked
  6354  002262  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  6355  002264  0E00               	movlw	0
  6356  002266  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  6357  002268                     l7558:
  6358                           
  6359                           ; BSR set to: 0
  6360  002268  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  6361  00226A  D006               	goto	l1127
  6362  00226C  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  6363  00226E  E120               	bnz	l7576
  6364  002270  0E08               	movlw	8
  6365  002272  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  6366  002274  B0D8               	btfsc	status,0,c
  6367  002276  D01C               	goto	u8310
  6368  002278                     l1127:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;SystemCommon.c: 35: {
  6372                           ;SystemCommon.c: 36: char c = data[idx + 1];
  6373                           
  6374                           ; BSR set to: 0
  6375  002278  0E01               	movlw	1
  6376  00227A  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6377  00227C  6E2E               	movwf	??_GetIntFromUartData& (0+255),c
  6378  00227E  0E00               	movlw	0
  6379  002280  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6380  002282  6E2F               	movwf	(??_GetIntFromUartData+1)& (0+255),c
  6381  002284  502E               	movf	??_GetIntFromUartData,w,c
  6382  002286  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6383  002288  6ED9               	movwf	fsr2l,c
  6384  00228A  502F               	movf	??_GetIntFromUartData+1,w,c
  6385  00228C  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6386  00228E  6EDA               	movwf	fsr2h,c
  6387  002290  50DF               	movf	indf2,w,c
  6388  002292  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;SystemCommon.c: 37: if(c == (0))
  6392  002294  5172               	movf	GetIntFromUartData@c& (0+255),w,b
  6393  002296  B4D8               	btfsc	status,2,c
  6394  002298  D00B               	goto	u8310
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;SystemCommon.c: 41: else
  6398                           ;SystemCommon.c: 42: {
  6399                           ;SystemCommon.c: 43: dataRegArr[idx] = c;
  6400                           
  6401                           ; BSR set to: 0
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;SystemCommon.c: 40: }
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;SystemCommon.c: 38: {
  6408                           ;SystemCommon.c: 39: break;
  6409  00229A  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  6410  00229C  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6411  00229E  6ED9               	movwf	fsr2l,c
  6412  0022A0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6413  0022A2  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6414  0022A4  6EDA               	movwf	fsr2h,c
  6415  0022A6  C072  FFDF         	movff	GetIntFromUartData@c,indf2
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  0022AA  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  6421  0022AC  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  6422  0022AE  D7DC               	goto	l7558
  6423  0022B0                     u8310:
  6424  0022B0                     l7576:
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;SystemCommon.c: 44: }
  6428                           ;SystemCommon.c: 45: }
  6429                           ;SystemCommon.c: 47: return strtol(dataRegArr, (0), 10);
  6430  0022B0  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  6431  0022B2  6E24               	movwf	strtol@s,c
  6432  0022B4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6433  0022B6  6E25               	movwf	strtol@s+1,c
  6434  0022B8  0E00               	movlw	0
  6435  0022BA  6E26               	movwf	strtol@endptr,c
  6436  0022BC  0E00               	movlw	0
  6437  0022BE  6E27               	movwf	strtol@endptr+1,c
  6438  0022C0  0E00               	movlw	0
  6439  0022C2  6E29               	movwf	strtol@base+1,c
  6440  0022C4  0E0A               	movlw	10
  6441  0022C6  6E28               	movwf	strtol@base,c
  6442  0022C8  EC97  F007         	call	_strtol	;wreg free
  6443  0022CC  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  6444  0022D0  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  6445  0022D4  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  6446  0022D8  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  6447  0022DC  0012               	return	
  6448  0022DE                     __end_of_GetIntFromUartData:
  6449                           	opt stack 0
  6450                           tosu	equ	0xFFF
  6451                           tosh	equ	0xFFE
  6452                           tosl	equ	0xFFD
  6453                           pclath	equ	0xFFA
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           indf1	equ	0xFE7
  6463                           postdec1	equ	0xFE5
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _strtol *****************
  6474 ;; Defined at:
  6475 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  s               2   35[COMRAM] PTR const unsigned char 
  6478 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  6479 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  6480 ;;		 -> NULL(0), 
  6481 ;;  base            2   39[COMRAM] int 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  a               4    1[BANK0 ] long 
  6484 ;;  c               1    5[BANK0 ] unsigned char 
  6485 ;;  sign            1    0[BANK0 ] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  4   35[COMRAM] long 
  6488 ;; Registers used:
  6489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6495 ;;      Params:         6       0       0       0       0       0       0
  6496 ;;      Locals:         0       6       0       0       0       0       0
  6497 ;;      Temps:          4       0       0       0       0       0       0
  6498 ;;      Totals:        10       6       0       0       0       0       0
  6499 ;;Total ram usage:       16 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    5
  6502 ;; This function calls:
  6503 ;;		___lmul
  6504 ;;		_isalpha
  6505 ;;		_isdigit
  6506 ;;		_isspace
  6507 ;;		_toupper
  6508 ;; This function is called by:
  6509 ;;		_GetIntFromUartData
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text15
  6514  000F2E                     __ptext15:
  6515                           	opt stack 0
  6516  000F2E                     _strtol:
  6517                           	opt stack 21
  6518                           
  6519                           ;incstack = 0
  6520  000F2E  C024  FFD9         	movff	strtol@s,fsr2l
  6521  000F32  C025  FFDA         	movff	strtol@s+1,fsr2h
  6522  000F36  50DF               	movf	indf2,w,c
  6523  000F38  0100               	movlb	0	; () banked
  6524  000F3A  6F65               	movwf	strtol@c& (0+255),b
  6525                           
  6526                           ; BSR set to: 0
  6527  000F3C  4A24               	infsnz	strtol@s,f,c
  6528  000F3E  2A25               	incf	strtol@s+1,f,c
  6529                           
  6530                           ; BSR set to: 0
  6531  000F40  5165               	movf	strtol@c& (0+255),w,b
  6532  000F42  EC17  F018         	call	_isspace
  6533  000F46  B0D8               	btfsc	status,0,c
  6534  000F48  D7F2               	goto	_strtol
  6535  000F4A  0E00               	movlw	0
  6536  000F4C  0100               	movlb	0	; () banked
  6537  000F4E  6F61               	movwf	strtol@a& (0+255),b
  6538  000F50  0E00               	movlw	0
  6539  000F52  6F62               	movwf	(strtol@a+1)& (0+255),b
  6540  000F54  0E00               	movlw	0
  6541  000F56  6F63               	movwf	(strtol@a+2)& (0+255),b
  6542  000F58  0E00               	movlw	0
  6543  000F5A  6F64               	movwf	(strtol@a+3)& (0+255),b
  6544  000F5C  0E00               	movlw	0
  6545  000F5E  6F60               	movwf	strtol@sign& (0+255),b
  6546                           
  6547                           ; BSR set to: 0
  6548  000F60  0E2D               	movlw	45
  6549  000F62  1965               	xorwf	strtol@c& (0+255),w,b
  6550  000F64  A4D8               	btfss	status,2,c
  6551  000F66  D003               	goto	l1958
  6552                           
  6553                           ; BSR set to: 0
  6554  000F68  0E01               	movlw	1
  6555  000F6A  6F60               	movwf	strtol@sign& (0+255),b
  6556  000F6C  D004               	goto	u8070
  6557  000F6E                     l1958:
  6558                           
  6559                           ; BSR set to: 0
  6560                           
  6561                           ; BSR set to: 0
  6562  000F6E  0E2B               	movlw	43
  6563  000F70  1965               	xorwf	strtol@c& (0+255),w,b
  6564  000F72  A4D8               	btfss	status,2,c
  6565  000F74  D008               	goto	l1960
  6566  000F76                     u8070:
  6567                           
  6568                           ; BSR set to: 0
  6569  000F76  C024  FFD9         	movff	strtol@s,fsr2l
  6570  000F7A  C025  FFDA         	movff	strtol@s+1,fsr2h
  6571  000F7E  50DF               	movf	indf2,w,c
  6572  000F80  6F65               	movwf	strtol@c& (0+255),b
  6573                           
  6574                           ; BSR set to: 0
  6575  000F82  4A24               	infsnz	strtol@s,f,c
  6576  000F84  2A25               	incf	strtol@s+1,f,c
  6577  000F86                     l1960:
  6578                           
  6579                           ; BSR set to: 0
  6580                           
  6581                           ; BSR set to: 0
  6582                           
  6583                           ; BSR set to: 0
  6584  000F86  0E30               	movlw	48
  6585  000F88  1965               	xorwf	strtol@c& (0+255),w,b
  6586  000F8A  A4D8               	btfss	status,2,c
  6587  000F8C  D02E               	goto	l1968
  6588                           
  6589                           ; BSR set to: 0
  6590  000F8E  C024  FFD9         	movff	strtol@s,fsr2l
  6591  000F92  C025  FFDA         	movff	strtol@s+1,fsr2h
  6592  000F96  50DF               	movf	indf2,w,c
  6593  000F98  6F65               	movwf	strtol@c& (0+255),b
  6594                           
  6595                           ; BSR set to: 0
  6596  000F9A  4A24               	infsnz	strtol@s,f,c
  6597  000F9C  2A25               	incf	strtol@s+1,f,c
  6598                           
  6599                           ; BSR set to: 0
  6600  000F9E  5028               	movf	strtol@base,w,c
  6601  000FA0  1029               	iorwf	strtol@base+1,w,c
  6602  000FA2  B4D8               	btfsc	status,2,c
  6603  000FA4  D005               	goto	u8100
  6604                           
  6605                           ; BSR set to: 0
  6606  000FA6  0E10               	movlw	16
  6607  000FA8  1828               	xorwf	strtol@base,w,c
  6608  000FAA  1029               	iorwf	strtol@base+1,w,c
  6609  000FAC  A4D8               	btfss	status,2,c
  6610  000FAE  D015               	goto	l1962
  6611  000FB0                     u8100:
  6612                           
  6613                           ; BSR set to: 0
  6614                           
  6615                           ; BSR set to: 0
  6616  000FB0  0E78               	movlw	120
  6617  000FB2  1965               	xorwf	strtol@c& (0+255),w,b
  6618  000FB4  B4D8               	btfsc	status,2,c
  6619  000FB6  D004               	goto	u8120
  6620                           
  6621                           ; BSR set to: 0
  6622  000FB8  0E58               	movlw	88
  6623  000FBA  1965               	xorwf	strtol@c& (0+255),w,b
  6624  000FBC  A4D8               	btfss	status,2,c
  6625  000FBE  D00D               	goto	l1962
  6626  000FC0                     u8120:
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631  000FC0  0E00               	movlw	0
  6632  000FC2  6E29               	movwf	strtol@base+1,c
  6633  000FC4  0E10               	movlw	16
  6634  000FC6  6E28               	movwf	strtol@base,c
  6635                           
  6636                           ; BSR set to: 0
  6637  000FC8  C024  FFD9         	movff	strtol@s,fsr2l
  6638  000FCC  C025  FFDA         	movff	strtol@s+1,fsr2h
  6639  000FD0  50DF               	movf	indf2,w,c
  6640  000FD2  6F65               	movwf	strtol@c& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643  000FD4  4A24               	infsnz	strtol@s,f,c
  6644  000FD6  2A25               	incf	strtol@s+1,f,c
  6645  000FD8  D008               	goto	l1968
  6646  000FDA                     l1962:
  6647                           
  6648                           ; BSR set to: 0
  6649                           
  6650                           ; BSR set to: 0
  6651  000FDA  5028               	movf	strtol@base,w,c
  6652  000FDC  1029               	iorwf	strtol@base+1,w,c
  6653  000FDE  A4D8               	btfss	status,2,c
  6654  000FE0  D004               	goto	l1968
  6655                           
  6656                           ; BSR set to: 0
  6657  000FE2  0E00               	movlw	0
  6658  000FE4  6E29               	movwf	strtol@base+1,c
  6659  000FE6  0E08               	movlw	8
  6660  000FE8  6E28               	movwf	strtol@base,c
  6661  000FEA                     l1968:
  6662                           
  6663                           ; BSR set to: 0
  6664                           
  6665                           ; BSR set to: 0
  6666                           
  6667                           ; BSR set to: 0
  6668                           
  6669                           ; BSR set to: 0
  6670  000FEA  5028               	movf	strtol@base,w,c
  6671  000FEC  1029               	iorwf	strtol@base+1,w,c
  6672  000FEE  A4D8               	btfss	status,2,c
  6673  000FF0  D004               	goto	l1969
  6674                           
  6675                           ; BSR set to: 0
  6676  000FF2  0E00               	movlw	0
  6677  000FF4  6E29               	movwf	strtol@base+1,c
  6678  000FF6  0E0A               	movlw	10
  6679  000FF8  6E28               	movwf	strtol@base,c
  6680  000FFA                     l1969:
  6681                           
  6682                           ; BSR set to: 0
  6683                           
  6684                           ; BSR set to: 0
  6685                           
  6686                           ; BSR set to: 0
  6687  000FFA  5165               	movf	strtol@c& (0+255),w,b
  6688  000FFC  EC03  F018         	call	_isalpha
  6689  001000  A0D8               	btfss	status,0,c
  6690  001002  D008               	goto	l1971
  6691  001004  0100               	movlb	0	; () banked
  6692  001006  5165               	movf	strtol@c& (0+255),w,b
  6693  001008  ECF0  F018         	call	_toupper
  6694  00100C  0FC9               	addlw	201
  6695  00100E  0100               	movlb	0	; () banked
  6696  001010  6F65               	movwf	strtol@c& (0+255),b
  6697  001012  D009               	goto	l1974
  6698  001014                     l1971:
  6699                           
  6700                           ; BSR set to: 0
  6701  001014  0100               	movlb	0	; () banked
  6702  001016  5165               	movf	strtol@c& (0+255),w,b
  6703  001018  EC86  F018         	call	_isdigit
  6704  00101C  A0D8               	btfss	status,0,c
  6705  00101E  D039               	goto	l1975
  6706  001020  0E30               	movlw	48
  6707  001022  0100               	movlb	0	; () banked
  6708  001024  5F65               	subwf	strtol@c& (0+255),f,b
  6709  001026                     l1974:
  6710                           
  6711                           ; BSR set to: 0
  6712                           
  6713                           ; BSR set to: 0
  6714                           
  6715                           ; BSR set to: 0
  6716  001026  5165               	movf	strtol@c& (0+255),w,b
  6717  001028  6E2A               	movwf	??_strtol& (0+255),c
  6718  00102A  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6719  00102C  5028               	movf	strtol@base,w,c
  6720  00102E  5C2A               	subwf	??_strtol,w,c
  6721  001030  502B               	movf	??_strtol+1,w,c
  6722  001032  0A80               	xorlw	128
  6723  001034  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6724  001036  5029               	movf	strtol@base+1,w,c
  6725  001038  0A80               	xorlw	128
  6726  00103A  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6727  00103C  B0D8               	btfsc	status,0,c
  6728  00103E  D029               	goto	l1975
  6729                           
  6730                           ; BSR set to: 0
  6731                           
  6732                           ; BSR set to: 0
  6733                           
  6734                           ; BSR set to: 0
  6735  001040  C028  F018         	movff	strtol@base,___lmul@multiplier
  6736  001044  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6737  001048  0E00               	movlw	0
  6738  00104A  BE19               	btfsc	___lmul@multiplier+1,7,c
  6739  00104C  0EFF               	movlw	-1
  6740  00104E  6E1A               	movwf	___lmul@multiplier+2,c
  6741  001050  6E1B               	movwf	___lmul@multiplier+3,c
  6742  001052  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6743  001056  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6744  00105A  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6745  00105E  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6746  001062  EC2C  F015         	call	___lmul	;wreg free
  6747  001066  0100               	movlb	0	; () banked
  6748  001068  5165               	movf	strtol@c& (0+255),w,b
  6749  00106A  2418               	addwf	?___lmul,w,c
  6750  00106C  6F61               	movwf	strtol@a& (0+255),b
  6751  00106E  0E00               	movlw	0
  6752  001070  2019               	addwfc	?___lmul+1,w,c
  6753  001072  6F62               	movwf	(strtol@a+1)& (0+255),b
  6754  001074  0E00               	movlw	0
  6755  001076  201A               	addwfc	?___lmul+2,w,c
  6756  001078  6F63               	movwf	(strtol@a+2)& (0+255),b
  6757  00107A  0E00               	movlw	0
  6758  00107C  201B               	addwfc	?___lmul+3,w,c
  6759  00107E  6F64               	movwf	(strtol@a+3)& (0+255),b
  6760                           
  6761                           ; BSR set to: 0
  6762  001080  C024  FFD9         	movff	strtol@s,fsr2l
  6763  001084  C025  FFDA         	movff	strtol@s+1,fsr2h
  6764  001088  50DF               	movf	indf2,w,c
  6765  00108A  6F65               	movwf	strtol@c& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768  00108C  4A24               	infsnz	strtol@s,f,c
  6769  00108E  2A25               	incf	strtol@s+1,f,c
  6770  001090  D7B4               	goto	l1969
  6771  001092                     l1975:
  6772                           
  6773                           ; BSR set to: 0
  6774  001092  5026               	movf	strtol@endptr,w,c
  6775  001094  1027               	iorwf	strtol@endptr+1,w,c
  6776  001096  B4D8               	btfsc	status,2,c
  6777  001098  D00E               	goto	l1977
  6778  00109A  0EFF               	movlw	255
  6779  00109C  2424               	addwf	strtol@s,w,c
  6780  00109E  6E2A               	movwf	??_strtol& (0+255),c
  6781  0010A0  0EFF               	movlw	255
  6782  0010A2  2025               	addwfc	strtol@s+1,w,c
  6783  0010A4  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6784  0010A6  C026  FFD9         	movff	strtol@endptr,fsr2l
  6785  0010AA  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6786  0010AE  C02A  FFDE         	movff	??_strtol,postinc2
  6787  0010B2  C02B  FFDD         	movff	??_strtol+1,postdec2
  6788  0010B6                     l1977:
  6789  0010B6  0100               	movlb	0	; () banked
  6790  0010B8  5160               	movf	strtol@sign& (0+255),w,b
  6791  0010BA  B4D8               	btfsc	status,2,c
  6792  0010BC  D01A               	goto	l1978
  6793                           
  6794                           ; BSR set to: 0
  6795  0010BE  C061  F02A         	movff	strtol@a,??_strtol
  6796  0010C2  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6797  0010C6  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6798  0010CA  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6799  0010CE  1E2A               	comf	??_strtol,f,c
  6800  0010D0  1E2B               	comf	??_strtol+1,f,c
  6801  0010D2  1E2C               	comf	??_strtol+2,f,c
  6802  0010D4  1E2D               	comf	??_strtol+3,f,c
  6803  0010D6  2A2A               	incf	??_strtol,f,c
  6804  0010D8  0E00               	movlw	0
  6805  0010DA  222B               	addwfc	??_strtol+1,f,c
  6806  0010DC  222C               	addwfc	??_strtol+2,f,c
  6807  0010DE  222D               	addwfc	??_strtol+3,f,c
  6808  0010E0  C02A  F024         	movff	??_strtol,?_strtol
  6809  0010E4  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6810  0010E8  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6811  0010EC  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6812                           
  6813                           ; BSR set to: 0
  6814  0010F0  0012               	return	
  6815  0010F2                     l1978:
  6816                           
  6817                           ; BSR set to: 0
  6818  0010F2  C061  F024         	movff	strtol@a,?_strtol
  6819  0010F6  C062  F025         	movff	strtol@a+1,?_strtol+1
  6820  0010FA  C063  F026         	movff	strtol@a+2,?_strtol+2
  6821  0010FE  C064  F027         	movff	strtol@a+3,?_strtol+3
  6822                           
  6823                           ; BSR set to: 0
  6824  001102  0012               	return		;funcret
  6825  001104                     __end_of_strtol:
  6826                           	opt stack 0
  6827                           tosu	equ	0xFFF
  6828                           tosh	equ	0xFFE
  6829                           tosl	equ	0xFFD
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           indf1	equ	0xFE7
  6840                           postdec1	equ	0xFE5
  6841                           fsr1h	equ	0xFE2
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _toupper *****************
  6851 ;; Defined at:
  6852 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  c               1    wreg     unsigned char 
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;  c               1   23[COMRAM] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      unsigned char 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6866 ;;      Params:         0       0       0       0       0       0       0
  6867 ;;      Locals:         1       0       0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0
  6869 ;;      Totals:         1       0       0       0       0       0       0
  6870 ;;Total ram usage:        1 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    3
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_readUartByte
  6877 ;;		_strtol
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text16
  6882  0031E0                     __ptext16:
  6883                           	opt stack 0
  6884  0031E0                     _toupper:
  6885                           	opt stack 26
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;incstack = 0
  6889                           ;toupper@c stored from wreg
  6890  0031E0  6E18               	movwf	toupper@c,c
  6891  0031E2  0E7B               	movlw	123
  6892  0031E4  6018               	cpfslt	toupper@c,c
  6893  0031E6  D004               	goto	l1982
  6894  0031E8  0E60               	movlw	96
  6895  0031EA  6418               	cpfsgt	toupper@c,c
  6896  0031EC  D001               	goto	l1982
  6897  0031EE  9A18               	bcf	toupper@c,5,c
  6898  0031F0                     l1982:
  6899  0031F0  5018               	movf	toupper@c,w,c
  6900  0031F2  0012               	return	
  6901  0031F4                     __end_of_toupper:
  6902                           	opt stack 0
  6903                           tosu	equ	0xFFF
  6904                           tosh	equ	0xFFE
  6905                           tosl	equ	0xFFD
  6906                           pclath	equ	0xFFA
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           indf1	equ	0xFE7
  6916                           postdec1	equ	0xFE5
  6917                           fsr1h	equ	0xFE2
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _isspace *****************
  6927 ;; Defined at:
  6928 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  c               1    wreg     unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  c               1   25[COMRAM] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6942 ;;      Params:         0       0       0       0       0       0       0
  6943 ;;      Locals:         2       0       0       0       0       0       0
  6944 ;;      Temps:          1       0       0       0       0       0       0
  6945 ;;      Totals:         3       0       0       0       0       0       0
  6946 ;;Total ram usage:        3 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    3
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_strtod
  6953 ;;		_strtol
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           	psect	text17
  6958  00302E                     __ptext17:
  6959                           	opt stack 0
  6960  00302E                     _isspace:
  6961                           	opt stack 21
  6962                           
  6963                           ;incstack = 0
  6964                           ;isspace@c stored from wreg
  6965  00302E  6E1A               	movwf	isspace@c,c
  6966  003030  0E01               	movlw	1
  6967  003032  6E19               	movwf	_isspace$2382,c
  6968  003034  0E20               	movlw	32
  6969  003036  181A               	xorwf	isspace@c,w,c
  6970  003038  B4D8               	btfsc	status,2,c
  6971  00303A  D008               	goto	l1704
  6972  00303C  0E0E               	movlw	14
  6973  00303E  601A               	cpfslt	isspace@c,c
  6974  003040  D003               	goto	u7290
  6975  003042  0E09               	movlw	9
  6976  003044  601A               	cpfslt	isspace@c,c
  6977  003046  D002               	goto	l1704
  6978  003048                     u7290:
  6979  003048  0E00               	movlw	0
  6980  00304A  6E19               	movwf	_isspace$2382,c
  6981  00304C                     l1704:
  6982  00304C  C019  F018         	movff	_isspace$2382,??_isspace
  6983  003050  3018               	rrcf	??_isspace,w,c
  6984  003052  0012               	return	
  6985  003054                     __end_of_isspace:
  6986                           	opt stack 0
  6987                           tosu	equ	0xFFF
  6988                           tosh	equ	0xFFE
  6989                           tosl	equ	0xFFD
  6990                           pclath	equ	0xFFA
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           indf1	equ	0xFE7
  7000                           postdec1	equ	0xFE5
  7001                           fsr1h	equ	0xFE2
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _isdigit *****************
  7011 ;; Defined at:
  7012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  c               1    wreg     unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  c               1   25[COMRAM] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, status,0
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7026 ;;      Params:         0       0       0       0       0       0       0
  7027 ;;      Locals:         2       0       0       0       0       0       0
  7028 ;;      Temps:          1       0       0       0       0       0       0
  7029 ;;      Totals:         3       0       0       0       0       0       0
  7030 ;;Total ram usage:        3 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    3
  7033 ;; This function calls:
  7034 ;;		Nothing
  7035 ;; This function is called by:
  7036 ;;		_strtod
  7037 ;;		_strtol
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text18
  7042  00310C                     __ptext18:
  7043                           	opt stack 0
  7044  00310C                     _isdigit:
  7045                           	opt stack 21
  7046                           
  7047                           ;incstack = 0
  7048                           ;isdigit@c stored from wreg
  7049  00310C  6E1A               	movwf	isdigit@c,c
  7050  00310E  0E00               	movlw	0
  7051  003110  6E19               	movwf	_isdigit$2379,c
  7052  003112  0E3A               	movlw	58
  7053  003114  601A               	cpfslt	isdigit@c,c
  7054  003116  D005               	goto	l1699
  7055  003118  0E2F               	movlw	47
  7056  00311A  641A               	cpfsgt	isdigit@c,c
  7057  00311C  D002               	goto	l1699
  7058  00311E  0E01               	movlw	1
  7059  003120  6E19               	movwf	_isdigit$2379,c
  7060  003122                     l1699:
  7061  003122  C019  F018         	movff	_isdigit$2379,??_isdigit
  7062  003126  3018               	rrcf	??_isdigit,w,c
  7063  003128  0012               	return	
  7064  00312A                     __end_of_isdigit:
  7065                           	opt stack 0
  7066                           tosu	equ	0xFFF
  7067                           tosh	equ	0xFFE
  7068                           tosl	equ	0xFFD
  7069                           pclath	equ	0xFFA
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           postinc0	equ	0xFEE
  7077                           wreg	equ	0xFE8
  7078                           indf1	equ	0xFE7
  7079                           postdec1	equ	0xFE5
  7080                           fsr1h	equ	0xFE2
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           fsr2h	equ	0xFDA
  7086                           fsr2l	equ	0xFD9
  7087                           status	equ	0xFD8
  7088                           
  7089 ;; *************** function _isalpha *****************
  7090 ;; Defined at:
  7091 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  c               1    wreg     unsigned char 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  c               1   28[COMRAM] unsigned char 
  7096 ;; Return value:  Size  Location     Type
  7097 ;;		None               void
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, status,0, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7105 ;;      Params:         0       0       0       0       0       0       0
  7106 ;;      Locals:         2       0       0       0       0       0       0
  7107 ;;      Temps:          1       0       0       0       0       0       0
  7108 ;;      Totals:         3       0       0       0       0       0       0
  7109 ;;Total ram usage:        3 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    4
  7112 ;; This function calls:
  7113 ;;		_isupper
  7114 ;; This function is called by:
  7115 ;;		_strtol
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text19
  7120  003006                     __ptext19:
  7121                           	opt stack 0
  7122  003006                     _isalpha:
  7123                           	opt stack 21
  7124                           
  7125                           ;incstack = 0
  7126                           ;isalpha@c stored from wreg
  7127  003006  6E1D               	movwf	isalpha@c,c
  7128  003008  0E01               	movlw	1
  7129  00300A  6E1C               	movwf	_isalpha$2669,c
  7130  00300C  0E7B               	movlw	123
  7131  00300E  601D               	cpfslt	isalpha@c,c
  7132  003010  D003               	goto	u7940
  7133  003012  0E61               	movlw	97
  7134  003014  601D               	cpfslt	isalpha@c,c
  7135  003016  D007               	goto	l2054
  7136  003018                     u7940:
  7137  003018  501D               	movf	isalpha@c,w,c
  7138  00301A  EC95  F018         	call	_isupper
  7139  00301E  B0D8               	btfsc	status,0,c
  7140  003020  D002               	goto	l2054
  7141  003022  0E00               	movlw	0
  7142  003024  6E1C               	movwf	_isalpha$2669,c
  7143  003026                     l2054:
  7144  003026  C01C  F01B         	movff	_isalpha$2669,??_isalpha
  7145  00302A  301B               	rrcf	??_isalpha,w,c
  7146  00302C  0012               	return	
  7147  00302E                     __end_of_isalpha:
  7148                           	opt stack 0
  7149                           tosu	equ	0xFFF
  7150                           tosh	equ	0xFFE
  7151                           tosl	equ	0xFFD
  7152                           pclath	equ	0xFFA
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           indf1	equ	0xFE7
  7162                           postdec1	equ	0xFE5
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _isupper *****************
  7173 ;; Defined at:
  7174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  c               1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  c               1   25[COMRAM] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;		None               void
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7188 ;;      Params:         0       0       0       0       0       0       0
  7189 ;;      Locals:         2       0       0       0       0       0       0
  7190 ;;      Temps:          1       0       0       0       0       0       0
  7191 ;;      Totals:         3       0       0       0       0       0       0
  7192 ;;Total ram usage:        3 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    3
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_isalpha
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text20
  7203  00312A                     __ptext20:
  7204                           	opt stack 0
  7205  00312A                     _isupper:
  7206                           	opt stack 21
  7207                           
  7208                           ;incstack = 0
  7209                           ;isupper@c stored from wreg
  7210  00312A  6E1A               	movwf	isupper@c,c
  7211  00312C  0E00               	movlw	0
  7212  00312E  6E19               	movwf	_isupper$2672,c
  7213  003130  0E5B               	movlw	91
  7214  003132  601A               	cpfslt	isupper@c,c
  7215  003134  D005               	goto	l2059
  7216  003136  0E40               	movlw	64
  7217  003138  641A               	cpfsgt	isupper@c,c
  7218  00313A  D002               	goto	l2059
  7219  00313C  0E01               	movlw	1
  7220  00313E  6E19               	movwf	_isupper$2672,c
  7221  003140                     l2059:
  7222  003140  C019  F018         	movff	_isupper$2672,??_isupper
  7223  003144  3018               	rrcf	??_isupper,w,c
  7224  003146  0012               	return	
  7225  003148                     __end_of_isupper:
  7226                           	opt stack 0
  7227                           tosu	equ	0xFFF
  7228                           tosh	equ	0xFFE
  7229                           tosl	equ	0xFFD
  7230                           pclath	equ	0xFFA
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           postinc0	equ	0xFEE
  7238                           wreg	equ	0xFE8
  7239                           indf1	equ	0xFE7
  7240                           postdec1	equ	0xFE5
  7241                           fsr1h	equ	0xFE2
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function ___lmul *****************
  7251 ;; Defined at:
  7252 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  multiplier      4   23[COMRAM] unsigned long 
  7255 ;;  multiplicand    4   27[COMRAM] unsigned long 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  product         4   31[COMRAM] unsigned long 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  4   23[COMRAM] unsigned long 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7267 ;;      Params:         8       0       0       0       0       0       0
  7268 ;;      Locals:         4       0       0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0
  7270 ;;      Totals:        12       0       0       0       0       0       0
  7271 ;;Total ram usage:       12 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    3
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_strtod
  7278 ;;		_strtol
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text21
  7283  002A58                     __ptext21:
  7284                           	opt stack 0
  7285  002A58                     ___lmul:
  7286                           	opt stack 21
  7287                           
  7288                           ;incstack = 0
  7289  002A58  0E00               	movlw	0
  7290  002A5A  6E20               	movwf	___lmul@product,c
  7291  002A5C  0E00               	movlw	0
  7292  002A5E  6E21               	movwf	___lmul@product+1,c
  7293  002A60  0E00               	movlw	0
  7294  002A62  6E22               	movwf	___lmul@product+2,c
  7295  002A64  0E00               	movlw	0
  7296  002A66  6E23               	movwf	___lmul@product+3,c
  7297  002A68  A018               	btfss	___lmul@multiplier,0,c
  7298  002A6A  D008               	goto	l1317
  7299  002A6C  501C               	movf	___lmul@multiplicand,w,c
  7300  002A6E  2620               	addwf	___lmul@product,f,c
  7301  002A70  501D               	movf	___lmul@multiplicand+1,w,c
  7302  002A72  2221               	addwfc	___lmul@product+1,f,c
  7303  002A74  501E               	movf	___lmul@multiplicand+2,w,c
  7304  002A76  2222               	addwfc	___lmul@product+2,f,c
  7305  002A78  501F               	movf	___lmul@multiplicand+3,w,c
  7306  002A7A  2223               	addwfc	___lmul@product+3,f,c
  7307  002A7C                     l1317:
  7308  002A7C  90D8               	bcf	status,0,c
  7309  002A7E  361C               	rlcf	___lmul@multiplicand,f,c
  7310  002A80  361D               	rlcf	___lmul@multiplicand+1,f,c
  7311  002A82  361E               	rlcf	___lmul@multiplicand+2,f,c
  7312  002A84  361F               	rlcf	___lmul@multiplicand+3,f,c
  7313  002A86  90D8               	bcf	status,0,c
  7314  002A88  321B               	rrcf	___lmul@multiplier+3,f,c
  7315  002A8A  321A               	rrcf	___lmul@multiplier+2,f,c
  7316  002A8C  3219               	rrcf	___lmul@multiplier+1,f,c
  7317  002A8E  3218               	rrcf	___lmul@multiplier,f,c
  7318  002A90  5018               	movf	___lmul@multiplier,w,c
  7319  002A92  1019               	iorwf	___lmul@multiplier+1,w,c
  7320  002A94  101A               	iorwf	___lmul@multiplier+2,w,c
  7321  002A96  101B               	iorwf	___lmul@multiplier+3,w,c
  7322  002A98  A4D8               	btfss	status,2,c
  7323  002A9A  D7E6               	goto	l1316
  7324  002A9C  C020  F018         	movff	___lmul@product,?___lmul
  7325  002AA0  C021  F019         	movff	___lmul@product+1,?___lmul+1
  7326  002AA4  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  7327  002AA8  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  7328  002AAC  0012               	return		;funcret
  7329  002AAE                     __end_of___lmul:
  7330                           	opt stack 0
  7331                           tosu	equ	0xFFF
  7332                           tosh	equ	0xFFE
  7333                           tosl	equ	0xFFD
  7334                           pclath	equ	0xFFA
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           postinc0	equ	0xFEE
  7342                           wreg	equ	0xFE8
  7343                           indf1	equ	0xFE7
  7344                           postdec1	equ	0xFE5
  7345                           fsr1h	equ	0xFE2
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _ZeroArray *****************
  7355 ;; Defined at:
  7356 ;;		line 24 in file "SystemCommon.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  array           2   31[COMRAM] PTR unsigned char 
  7359 ;;		 -> GetDoubleFromUartData@tempNum(10), GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashRea
      +dCondition@TxMsg(7), 
  7360 ;;		 -> FlashReadUart@TxMsg(67), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  7361 ;;		 -> rxMsgQueue(20), 
  7362 ;;  size            2   33[COMRAM] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;		None
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      void 
  7367 ;; Registers used:
  7368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7374 ;;      Params:         4       0       0       0       0       0       0
  7375 ;;      Locals:         0       0       0       0       0       0       0
  7376 ;;      Temps:          0       0       0       0       0       0       0
  7377 ;;      Totals:         4       0       0       0       0       0       0
  7378 ;;Total ram usage:        4 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    4
  7381 ;; This function calls:
  7382 ;;		_memset
  7383 ;; This function is called by:
  7384 ;;		_InitRxMessageParams
  7385 ;;		_UpdateSynthFreq
  7386 ;;		_GetIntFromUartData
  7387 ;;		_GetDoubleFromUartData
  7388 ;;		_SendAckMessage
  7389 ;;		_FlashReadUart
  7390 ;;		_FlashEreaseMem
  7391 ;;		_FlashReadCondition
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text22
  7396  003148                     __ptext22:
  7397                           	opt stack 0
  7398  003148                     _ZeroArray:
  7399                           	opt stack 24
  7400                           
  7401                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  7402                           
  7403                           ;incstack = 0
  7404  003148  C020  F018         	movff	ZeroArray@array,memset@p1
  7405  00314C  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  7406  003150  0E00               	movlw	0
  7407  003152  6E1B               	movwf	memset@c+1,c
  7408  003154  0E00               	movlw	0
  7409  003156  6E1A               	movwf	memset@c,c
  7410  003158  C022  F01C         	movff	ZeroArray@size,memset@n
  7411  00315C  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  7412  003160  ECED  F017         	call	_memset	;wreg free
  7413  003164  0012               	return		;funcret
  7414  003166                     __end_of_ZeroArray:
  7415                           	opt stack 0
  7416                           tosu	equ	0xFFF
  7417                           tosh	equ	0xFFE
  7418                           tosl	equ	0xFFD
  7419                           pclath	equ	0xFFA
  7420                           tblptru	equ	0xFF8
  7421                           tblptrh	equ	0xFF7
  7422                           tblptrl	equ	0xFF6
  7423                           tablat	equ	0xFF5
  7424                           prodh	equ	0xFF4
  7425                           prodl	equ	0xFF3
  7426                           postinc0	equ	0xFEE
  7427                           wreg	equ	0xFE8
  7428                           indf1	equ	0xFE7
  7429                           postdec1	equ	0xFE5
  7430                           fsr1h	equ	0xFE2
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           postinc2	equ	0xFDE
  7434                           postdec2	equ	0xFDD
  7435                           fsr2h	equ	0xFDA
  7436                           fsr2l	equ	0xFD9
  7437                           status	equ	0xFD8
  7438                           
  7439 ;; *************** function _memset *****************
  7440 ;; Defined at:
  7441 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  p1              2   23[COMRAM] PTR void 
  7444 ;;		 -> GetDoubleFromUartData@tempNum(10), GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashRea
      +dCondition@TxMsg(7), 
  7445 ;;		 -> FlashReadUart@TxMsg(67), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  7446 ;;		 -> rxMsgQueue(20), 
  7447 ;;  c               2   25[COMRAM] int 
  7448 ;;  n               2   27[COMRAM] unsigned int 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  p               2   29[COMRAM] PTR unsigned char 
  7451 ;;		 -> GetDoubleFromUartData@tempNum(10), GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashRea
      +dCondition@TxMsg(7), 
  7452 ;;		 -> FlashReadUart@TxMsg(67), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  7453 ;;		 -> rxMsgQueue(20), 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  2   23[COMRAM] PTR void 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7463 ;;      Params:         6       0       0       0       0       0       0
  7464 ;;      Locals:         2       0       0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0
  7466 ;;      Totals:         8       0       0       0       0       0       0
  7467 ;;Total ram usage:        8 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    3
  7470 ;; This function calls:
  7471 ;;		Nothing
  7472 ;; This function is called by:
  7473 ;;		_ZeroArray
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text23
  7478  002FDA                     __ptext23:
  7479                           	opt stack 0
  7480  002FDA                     _memset:
  7481                           	opt stack 24
  7482                           
  7483                           ;incstack = 0
  7484  002FDA  C018  F01E         	movff	memset@p1,memset@p
  7485  002FDE  C019  F01F         	movff	memset@p1+1,memset@p+1
  7486  002FE2  D008               	goto	l1807
  7487  002FE4                     l7100:
  7488  002FE4  C01E  FFD9         	movff	memset@p,fsr2l
  7489  002FE8  C01F  FFDA         	movff	memset@p+1,fsr2h
  7490  002FEC  C01A  FFDF         	movff	memset@c,indf2
  7491  002FF0  4A1E               	infsnz	memset@p,f,c
  7492  002FF2  2A1F               	incf	memset@p+1,f,c
  7493  002FF4                     l1807:
  7494  002FF4  061C               	decf	memset@n,f,c
  7495  002FF6  A0D8               	btfss	status,0,c
  7496  002FF8  061D               	decf	memset@n+1,f,c
  7497  002FFA  281C               	incf	memset@n,w,c
  7498  002FFC  E1F3               	bnz	l7100
  7499  002FFE  281D               	incf	memset@n+1,w,c
  7500  003000  B4D8               	btfsc	status,2,c
  7501  003002  0012               	return	
  7502  003004  D7EF               	goto	l1808
  7503  003006                     __end_of_memset:
  7504                           	opt stack 0
  7505                           tosu	equ	0xFFF
  7506                           tosh	equ	0xFFE
  7507                           tosl	equ	0xFFD
  7508                           pclath	equ	0xFFA
  7509                           tblptru	equ	0xFF8
  7510                           tblptrh	equ	0xFF7
  7511                           tblptrl	equ	0xFF6
  7512                           tablat	equ	0xFF5
  7513                           prodh	equ	0xFF4
  7514                           prodl	equ	0xFF3
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           indf1	equ	0xFE7
  7518                           postdec1	equ	0xFE5
  7519                           fsr1h	equ	0xFE2
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _testLeds *****************
  7529 ;; Defined at:
  7530 ;;		line 43 in file "LedsApp.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;		None
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  idx             2   24[COMRAM] int 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      void 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7544 ;;      Params:         0       0       0       0       0       0       0
  7545 ;;      Locals:         2       0       0       0       0       0       0
  7546 ;;      Temps:          1       0       0       0       0       0       0
  7547 ;;      Totals:         3       0       0       0       0       0       0
  7548 ;;Total ram usage:        3 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    3
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_GroupCommon
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text24
  7559  0027DA                     __ptext24:
  7560                           	opt stack 0
  7561  0027DA                     _testLeds:
  7562                           	opt stack 25
  7563                           
  7564                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7565                           
  7566                           ;incstack = 0
  7567  0027DA  0E00               	movlw	0
  7568  0027DC  6E1A               	movwf	testLeds@idx+1,c
  7569  0027DE  0E00               	movlw	0
  7570  0027E0  6E19               	movwf	testLeds@idx,c
  7571  0027E2                     l5676:
  7572  0027E2  BE1A               	btfsc	testLeds@idx+1,7,c
  7573  0027E4  D006               	goto	l42
  7574  0027E6  501A               	movf	testLeds@idx+1,w,c
  7575  0027E8  E127               	bnz	l44
  7576  0027EA  0E0A               	movlw	10
  7577  0027EC  5C19               	subwf	testLeds@idx,w,c
  7578  0027EE  B0D8               	btfsc	status,0,c
  7579  0027F0  0012               	return	
  7580  0027F2                     l42:
  7581                           
  7582                           ;LedsApp.c: 47: {
  7583                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7584  0027F2  808B               	bsf	3979,0,c	;volatile
  7585                           
  7586                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7587  0027F4  0E82               	movlw	130
  7588  0027F6  6E18               	movwf	??_testLeds& (0+255),c
  7589  0027F8  0EDE               	movlw	222
  7590  0027FA                     u9037:
  7591  0027FA  2EE8               	decfsz	wreg,f,c
  7592  0027FC  D7FE               	bra	u9037
  7593  0027FE  2E18               	decfsz	??_testLeds& (0+255),f,c
  7594  002800  D7FC               	bra	u9037
  7595                           
  7596                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7597  002802  888A               	bsf	3978,4,c	;volatile
  7598                           
  7599                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7600  002804  0E82               	movlw	130
  7601  002806  6E18               	movwf	??_testLeds& (0+255),c
  7602  002808  0EDE               	movlw	222
  7603  00280A                     u9047:
  7604  00280A  2EE8               	decfsz	wreg,f,c
  7605  00280C  D7FE               	bra	u9047
  7606  00280E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7607  002810  D7FC               	bra	u9047
  7608                           
  7609                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7610  002812  908B               	bcf	3979,0,c	;volatile
  7611                           
  7612                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7613  002814  0E82               	movlw	130
  7614  002816  6E18               	movwf	??_testLeds& (0+255),c
  7615  002818  0EDE               	movlw	222
  7616  00281A                     u9057:
  7617  00281A  2EE8               	decfsz	wreg,f,c
  7618  00281C  D7FE               	bra	u9057
  7619  00281E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7620  002820  D7FC               	bra	u9057
  7621                           
  7622                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7623  002822  988A               	bcf	3978,4,c	;volatile
  7624                           
  7625                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7626  002824  0E82               	movlw	130
  7627  002826  6E18               	movwf	??_testLeds& (0+255),c
  7628  002828  0EDE               	movlw	222
  7629  00282A                     u9067:
  7630  00282A  2EE8               	decfsz	wreg,f,c
  7631  00282C  D7FE               	bra	u9067
  7632  00282E  2E18               	decfsz	??_testLeds& (0+255),f,c
  7633  002830  D7FC               	bra	u9067
  7634  002832  4A19               	infsnz	testLeds@idx,f,c
  7635  002834  2A1A               	incf	testLeds@idx+1,f,c
  7636  002836  D7D5               	goto	l5676
  7637  002838                     l44:
  7638  002838  0012               	return		;funcret
  7639  00283A                     __end_of_testLeds:
  7640                           	opt stack 0
  7641                           tosu	equ	0xFFF
  7642                           tosh	equ	0xFFE
  7643                           tosl	equ	0xFFD
  7644                           pclath	equ	0xFFA
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           postinc0	equ	0xFEE
  7652                           wreg	equ	0xFE8
  7653                           indf1	equ	0xFE7
  7654                           postdec1	equ	0xFE5
  7655                           fsr1h	equ	0xFE2
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           fsr2h	equ	0xFDA
  7661                           fsr2l	equ	0xFD9
  7662                           status	equ	0xFD8
  7663                           
  7664 ;; *************** function _PrintHelpScreen *****************
  7665 ;; Defined at:
  7666 ;;		line 89 in file "SystemStatus.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  dest           50    9[BANK0 ] unsigned char [50]
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7680 ;;      Params:         0       0       0       0       0       0       0
  7681 ;;      Locals:         0      50       0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0
  7683 ;;      Totals:         0      50       0       0       0       0       0
  7684 ;;Total ram usage:       50 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    5
  7687 ;; This function calls:
  7688 ;;		_UART_Write_Text
  7689 ;;		_sprintf
  7690 ;; This function is called by:
  7691 ;;		_GroupCommon
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text25
  7696  000ADA                     __ptext25:
  7697                           	opt stack 0
  7698  000ADA                     _PrintHelpScreen:
  7699                           	opt stack 23
  7700                           
  7701                           ;SystemStatus.c: 91: char dest[50];
  7702                           ;SystemStatus.c: 94: sprintf(dest, "<TX system commands>\n\r");
  7703                           
  7704                           ;incstack = 0
  7705  000ADA  0E69               	movlw	low PrintHelpScreen@dest
  7706  000ADC  6E24               	movwf	sprintf@sp,c
  7707  000ADE  0E00               	movlw	high PrintHelpScreen@dest
  7708  000AE0  6E25               	movwf	sprintf@sp+1,c
  7709  000AE2  0E49               	movlw	low STR_21
  7710  000AE4  6E26               	movwf	sprintf@f,c
  7711  000AE6  0E7F               	movlw	high STR_21
  7712  000AE8  6E27               	movwf	sprintf@f+1,c
  7713  000AEA  EC82  F008         	call	_sprintf	;wreg free
  7714                           
  7715                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  7716  000AEE  0E69               	movlw	low PrintHelpScreen@dest
  7717  000AF0  6E19               	movwf	UART_Write_Text@text,c
  7718  000AF2  0E00               	movlw	high PrintHelpScreen@dest
  7719  000AF4  6E1A               	movwf	UART_Write_Text@text+1,c
  7720  000AF6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7721                           
  7722                           ;SystemStatus.c: 97: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  7723  000AFA  0E69               	movlw	low PrintHelpScreen@dest
  7724  000AFC  6E24               	movwf	sprintf@sp,c
  7725  000AFE  0E00               	movlw	high PrintHelpScreen@dest
  7726  000B00  6E25               	movwf	sprintf@sp+1,c
  7727  000B02  0EF1               	movlw	low STR_22
  7728  000B04  6E26               	movwf	sprintf@f,c
  7729  000B06  0E7C               	movlw	high STR_22
  7730  000B08  6E27               	movwf	sprintf@f+1,c
  7731  000B0A  EC82  F008         	call	_sprintf	;wreg free
  7732                           
  7733                           ;SystemStatus.c: 98: UART_Write_Text(dest);
  7734  000B0E  0E69               	movlw	low PrintHelpScreen@dest
  7735  000B10  6E19               	movwf	UART_Write_Text@text,c
  7736  000B12  0E00               	movlw	high PrintHelpScreen@dest
  7737  000B14  6E1A               	movwf	UART_Write_Text@text+1,c
  7738  000B16  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7739                           
  7740                           ;SystemStatus.c: 99: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  7741  000B1A  0E69               	movlw	low PrintHelpScreen@dest
  7742  000B1C  6E24               	movwf	sprintf@sp,c
  7743  000B1E  0E00               	movlw	high PrintHelpScreen@dest
  7744  000B20  6E25               	movwf	sprintf@sp+1,c
  7745  000B22  0E71               	movlw	low STR_23
  7746  000B24  6E26               	movwf	sprintf@f,c
  7747  000B26  0E7D               	movlw	high STR_23
  7748  000B28  6E27               	movwf	sprintf@f+1,c
  7749  000B2A  EC82  F008         	call	_sprintf	;wreg free
  7750                           
  7751                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  7752  000B2E  0E69               	movlw	low PrintHelpScreen@dest
  7753  000B30  6E19               	movwf	UART_Write_Text@text,c
  7754  000B32  0E00               	movlw	high PrintHelpScreen@dest
  7755  000B34  6E1A               	movwf	UART_Write_Text@text+1,c
  7756  000B36  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7757                           
  7758                           ;SystemStatus.c: 101: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  7759  000B3A  0E69               	movlw	low PrintHelpScreen@dest
  7760  000B3C  6E24               	movwf	sprintf@sp,c
  7761  000B3E  0E00               	movlw	high PrintHelpScreen@dest
  7762  000B40  6E25               	movwf	sprintf@sp+1,c
  7763  000B42  0E4E               	movlw	low STR_24
  7764  000B44  6E26               	movwf	sprintf@f,c
  7765  000B46  0E7E               	movlw	high STR_24
  7766  000B48  6E27               	movwf	sprintf@f+1,c
  7767  000B4A  EC82  F008         	call	_sprintf	;wreg free
  7768                           
  7769                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  7770  000B4E  0E69               	movlw	low PrintHelpScreen@dest
  7771  000B50  6E19               	movwf	UART_Write_Text@text,c
  7772  000B52  0E00               	movlw	high PrintHelpScreen@dest
  7773  000B54  6E1A               	movwf	UART_Write_Text@text+1,c
  7774  000B56  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7775                           
  7776                           ;SystemStatus.c: 103: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  7777  000B5A  0E69               	movlw	low PrintHelpScreen@dest
  7778  000B5C  6E24               	movwf	sprintf@sp,c
  7779  000B5E  0E00               	movlw	high PrintHelpScreen@dest
  7780  000B60  6E25               	movwf	sprintf@sp+1,c
  7781  000B62  0E5C               	movlw	low STR_25
  7782  000B64  6E26               	movwf	sprintf@f,c
  7783  000B66  0E7C               	movlw	high STR_25
  7784  000B68  6E27               	movwf	sprintf@f+1,c
  7785  000B6A  EC82  F008         	call	_sprintf	;wreg free
  7786                           
  7787                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  7788  000B6E  0E69               	movlw	low PrintHelpScreen@dest
  7789  000B70  6E19               	movwf	UART_Write_Text@text,c
  7790  000B72  0E00               	movlw	high PrintHelpScreen@dest
  7791  000B74  6E1A               	movwf	UART_Write_Text@text+1,c
  7792  000B76  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7793                           
  7794                           ;SystemStatus.c: 105: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  7795  000B7A  0E69               	movlw	low PrintHelpScreen@dest
  7796  000B7C  6E24               	movwf	sprintf@sp,c
  7797  000B7E  0E00               	movlw	high PrintHelpScreen@dest
  7798  000B80  6E25               	movwf	sprintf@sp+1,c
  7799  000B82  0E0D               	movlw	low STR_26
  7800  000B84  6E26               	movwf	sprintf@f,c
  7801  000B86  0E7C               	movlw	high STR_26
  7802  000B88  6E27               	movwf	sprintf@f+1,c
  7803  000B8A  EC82  F008         	call	_sprintf	;wreg free
  7804                           
  7805                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  7806  000B8E  0E69               	movlw	low PrintHelpScreen@dest
  7807  000B90  6E19               	movwf	UART_Write_Text@text,c
  7808  000B92  0E00               	movlw	high PrintHelpScreen@dest
  7809  000B94  6E1A               	movwf	UART_Write_Text@text+1,c
  7810  000B96  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7811                           
  7812                           ;SystemStatus.c: 109: sprintf(dest, "\n\r<RX system commands>\n\r");
  7813  000B9A  0E69               	movlw	low PrintHelpScreen@dest
  7814  000B9C  6E24               	movwf	sprintf@sp,c
  7815  000B9E  0E00               	movlw	high PrintHelpScreen@dest
  7816  000BA0  6E25               	movwf	sprintf@sp+1,c
  7817  000BA2  0E30               	movlw	low STR_27
  7818  000BA4  6E26               	movwf	sprintf@f,c
  7819  000BA6  0E7F               	movlw	high STR_27
  7820  000BA8  6E27               	movwf	sprintf@f+1,c
  7821  000BAA  EC82  F008         	call	_sprintf	;wreg free
  7822                           
  7823                           ;SystemStatus.c: 110: UART_Write_Text(dest);
  7824  000BAE  0E69               	movlw	low PrintHelpScreen@dest
  7825  000BB0  6E19               	movwf	UART_Write_Text@text,c
  7826  000BB2  0E00               	movlw	high PrintHelpScreen@dest
  7827  000BB4  6E1A               	movwf	UART_Write_Text@text+1,c
  7828  000BB6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7829                           
  7830                           ;SystemStatus.c: 111: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  7831  000BBA  0E69               	movlw	low PrintHelpScreen@dest
  7832  000BBC  6E24               	movwf	sprintf@sp,c
  7833  000BBE  0E00               	movlw	high PrintHelpScreen@dest
  7834  000BC0  6E25               	movwf	sprintf@sp+1,c
  7835  000BC2  0EA7               	movlw	low STR_28
  7836  000BC4  6E26               	movwf	sprintf@f,c
  7837  000BC6  0E7C               	movlw	high STR_28
  7838  000BC8  6E27               	movwf	sprintf@f+1,c
  7839  000BCA  EC82  F008         	call	_sprintf	;wreg free
  7840                           
  7841                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  7842  000BCE  0E69               	movlw	low PrintHelpScreen@dest
  7843  000BD0  6E19               	movwf	UART_Write_Text@text,c
  7844  000BD2  0E00               	movlw	high PrintHelpScreen@dest
  7845  000BD4  6E1A               	movwf	UART_Write_Text@text+1,c
  7846  000BD6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7847                           
  7848                           ;SystemStatus.c: 113: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  7849  000BDA  0E69               	movlw	low PrintHelpScreen@dest
  7850  000BDC  6E24               	movwf	sprintf@sp,c
  7851  000BDE  0E00               	movlw	high PrintHelpScreen@dest
  7852  000BE0  6E25               	movwf	sprintf@sp+1,c
  7853  000BE2  0E7C               	movlw	low STR_29
  7854  000BE4  6E26               	movwf	sprintf@f,c
  7855  000BE6  0E7E               	movlw	high STR_29
  7856  000BE8  6E27               	movwf	sprintf@f+1,c
  7857  000BEA  EC82  F008         	call	_sprintf	;wreg free
  7858                           
  7859                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  7860  000BEE  0E69               	movlw	low PrintHelpScreen@dest
  7861  000BF0  6E19               	movwf	UART_Write_Text@text,c
  7862  000BF2  0E00               	movlw	high PrintHelpScreen@dest
  7863  000BF4  6E1A               	movwf	UART_Write_Text@text+1,c
  7864  000BF6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7865                           
  7866                           ;SystemStatus.c: 115: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  7867  000BFA  0E69               	movlw	low PrintHelpScreen@dest
  7868  000BFC  6E24               	movwf	sprintf@sp,c
  7869  000BFE  0E00               	movlw	high PrintHelpScreen@dest
  7870  000C00  6E25               	movwf	sprintf@sp+1,c
  7871  000C02  0E33               	movlw	low STR_30
  7872  000C04  6E26               	movwf	sprintf@f,c
  7873  000C06  0E7D               	movlw	high STR_30
  7874  000C08  6E27               	movwf	sprintf@f+1,c
  7875  000C0A  EC82  F008         	call	_sprintf	;wreg free
  7876                           
  7877                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  7878  000C0E  0E69               	movlw	low PrintHelpScreen@dest
  7879  000C10  6E19               	movwf	UART_Write_Text@text,c
  7880  000C12  0E00               	movlw	high PrintHelpScreen@dest
  7881  000C14  6E1A               	movwf	UART_Write_Text@text+1,c
  7882  000C16  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7883                           
  7884                           ;SystemStatus.c: 117: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  7885  000C1A  0E69               	movlw	low PrintHelpScreen@dest
  7886  000C1C  6E24               	movwf	sprintf@sp,c
  7887  000C1E  0E00               	movlw	high PrintHelpScreen@dest
  7888  000C20  6E25               	movwf	sprintf@sp+1,c
  7889  000C22  0EAE               	movlw	low STR_31
  7890  000C24  6E26               	movwf	sprintf@f,c
  7891  000C26  0E7D               	movlw	high STR_31
  7892  000C28  6E27               	movwf	sprintf@f+1,c
  7893  000C2A  EC82  F008         	call	_sprintf	;wreg free
  7894                           
  7895                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  7896  000C2E  0E69               	movlw	low PrintHelpScreen@dest
  7897  000C30  6E19               	movwf	UART_Write_Text@text,c
  7898  000C32  0E00               	movlw	high PrintHelpScreen@dest
  7899  000C34  6E1A               	movwf	UART_Write_Text@text+1,c
  7900  000C36  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7901                           
  7902                           ;SystemStatus.c: 119: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  7903  000C3A  0E69               	movlw	low PrintHelpScreen@dest
  7904  000C3C  6E24               	movwf	sprintf@sp,c
  7905  000C3E  0E00               	movlw	high PrintHelpScreen@dest
  7906  000C40  6E25               	movwf	sprintf@sp+1,c
  7907  000C42  0E61               	movlw	low STR_32
  7908  000C44  6E26               	movwf	sprintf@f,c
  7909  000C46  0E7B               	movlw	high STR_32
  7910  000C48  6E27               	movwf	sprintf@f+1,c
  7911  000C4A  EC82  F008         	call	_sprintf	;wreg free
  7912                           
  7913                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  7914  000C4E  0E69               	movlw	low PrintHelpScreen@dest
  7915  000C50  6E19               	movwf	UART_Write_Text@text,c
  7916  000C52  0E00               	movlw	high PrintHelpScreen@dest
  7917  000C54  6E1A               	movwf	UART_Write_Text@text+1,c
  7918  000C56  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7919                           
  7920                           ;SystemStatus.c: 121: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  7921  000C5A  0E69               	movlw	low PrintHelpScreen@dest
  7922  000C5C  6E24               	movwf	sprintf@sp,c
  7923  000C5E  0E00               	movlw	high PrintHelpScreen@dest
  7924  000C60  6E25               	movwf	sprintf@sp+1,c
  7925  000C62  0EFC               	movlw	low STR_33
  7926  000C64  6E26               	movwf	sprintf@f,c
  7927  000C66  0E7A               	movlw	high STR_33
  7928  000C68  6E27               	movwf	sprintf@f+1,c
  7929  000C6A  EC82  F008         	call	_sprintf	;wreg free
  7930                           
  7931                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  7932  000C6E  0E69               	movlw	low PrintHelpScreen@dest
  7933  000C70  6E19               	movwf	UART_Write_Text@text,c
  7934  000C72  0E00               	movlw	high PrintHelpScreen@dest
  7935  000C74  6E1A               	movwf	UART_Write_Text@text+1,c
  7936  000C76  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7937                           
  7938                           ;SystemStatus.c: 125: sprintf(dest, "\n\r<Common system commands>\n\r");
  7939  000C7A  0E69               	movlw	low PrintHelpScreen@dest
  7940  000C7C  6E24               	movwf	sprintf@sp,c
  7941  000C7E  0E00               	movlw	high PrintHelpScreen@dest
  7942  000C80  6E25               	movwf	sprintf@sp+1,c
  7943  000C82  0E13               	movlw	low STR_34
  7944  000C84  6E26               	movwf	sprintf@f,c
  7945  000C86  0E7F               	movlw	high STR_34
  7946  000C88  6E27               	movwf	sprintf@f+1,c
  7947  000C8A  EC82  F008         	call	_sprintf	;wreg free
  7948                           
  7949                           ;SystemStatus.c: 126: UART_Write_Text(dest);
  7950  000C8E  0E69               	movlw	low PrintHelpScreen@dest
  7951  000C90  6E19               	movwf	UART_Write_Text@text,c
  7952  000C92  0E00               	movlw	high PrintHelpScreen@dest
  7953  000C94  6E1A               	movwf	UART_Write_Text@text+1,c
  7954  000C96  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7955                           
  7956                           ;SystemStatus.c: 127: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  7957  000C9A  0E69               	movlw	low PrintHelpScreen@dest
  7958  000C9C  6E24               	movwf	sprintf@sp,c
  7959  000C9E  0E00               	movlw	high PrintHelpScreen@dest
  7960  000CA0  6E25               	movwf	sprintf@sp+1,c
  7961  000CA2  0E20               	movlw	low STR_35
  7962  000CA4  6E26               	movwf	sprintf@f,c
  7963  000CA6  0E7E               	movlw	high STR_35
  7964  000CA8  6E27               	movwf	sprintf@f+1,c
  7965  000CAA  EC82  F008         	call	_sprintf	;wreg free
  7966                           
  7967                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  7968  000CAE  0E69               	movlw	low PrintHelpScreen@dest
  7969  000CB0  6E19               	movwf	UART_Write_Text@text,c
  7970  000CB2  0E00               	movlw	high PrintHelpScreen@dest
  7971  000CB4  6E1A               	movwf	UART_Write_Text@text+1,c
  7972  000CB6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7973                           
  7974                           ;SystemStatus.c: 129: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  7975  000CBA  0E69               	movlw	low PrintHelpScreen@dest
  7976  000CBC  6E24               	movwf	sprintf@sp,c
  7977  000CBE  0E00               	movlw	high PrintHelpScreen@dest
  7978  000CC0  6E25               	movwf	sprintf@sp+1,c
  7979  000CC2  0EEB               	movlw	low STR_36
  7980  000CC4  6E26               	movwf	sprintf@f,c
  7981  000CC6  0E7D               	movlw	high STR_36
  7982  000CC8  6E27               	movwf	sprintf@f+1,c
  7983  000CCA  EC82  F008         	call	_sprintf	;wreg free
  7984                           
  7985                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  7986  000CCE  0E69               	movlw	low PrintHelpScreen@dest
  7987  000CD0  6E19               	movwf	UART_Write_Text@text,c
  7988  000CD2  0E00               	movlw	high PrintHelpScreen@dest
  7989  000CD4  6E1A               	movwf	UART_Write_Text@text+1,c
  7990  000CD6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  7991                           
  7992                           ;SystemStatus.c: 131: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  7993  000CDA  0E69               	movlw	low PrintHelpScreen@dest
  7994  000CDC  6E24               	movwf	sprintf@sp,c
  7995  000CDE  0E00               	movlw	high PrintHelpScreen@dest
  7996  000CE0  6E25               	movwf	sprintf@sp+1,c
  7997  000CE2  0EB7               	movlw	low STR_37
  7998  000CE4  6E26               	movwf	sprintf@f,c
  7999  000CE6  0E7B               	movlw	high STR_37
  8000  000CE8  6E27               	movwf	sprintf@f+1,c
  8001  000CEA  EC82  F008         	call	_sprintf	;wreg free
  8002                           
  8003                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  8004  000CEE  0E69               	movlw	low PrintHelpScreen@dest
  8005  000CF0  6E19               	movwf	UART_Write_Text@text,c
  8006  000CF2  0E00               	movlw	high PrintHelpScreen@dest
  8007  000CF4  6E1A               	movwf	UART_Write_Text@text+1,c
  8008  000CF6  EC4C  F013         	call	_UART_Write_Text	;wreg free
  8009                           
  8010                           ;SystemStatus.c: 133: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  8011  000CFA  0E69               	movlw	low PrintHelpScreen@dest
  8012  000CFC  6E24               	movwf	sprintf@sp,c
  8013  000CFE  0E00               	movlw	high PrintHelpScreen@dest
  8014  000D00  6E25               	movwf	sprintf@sp+1,c
  8015  000D02  0EA9               	movlw	low STR_38
  8016  000D04  6E26               	movwf	sprintf@f,c
  8017  000D06  0E7E               	movlw	high STR_38
  8018  000D08  6E27               	movwf	sprintf@f+1,c
  8019  000D0A  EC82  F008         	call	_sprintf	;wreg free
  8020                           
  8021                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  8022  000D0E  0E69               	movlw	low PrintHelpScreen@dest
  8023  000D10  6E19               	movwf	UART_Write_Text@text,c
  8024  000D12  0E00               	movlw	high PrintHelpScreen@dest
  8025  000D14  6E1A               	movwf	UART_Write_Text@text+1,c
  8026  000D16  EC4C  F013         	call	_UART_Write_Text	;wreg free
  8027                           
  8028                           ;SystemStatus.c: 135: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  8029  000D1A  0E69               	movlw	low PrintHelpScreen@dest
  8030  000D1C  6E24               	movwf	sprintf@sp,c
  8031  000D1E  0E00               	movlw	high PrintHelpScreen@dest
  8032  000D20  6E25               	movwf	sprintf@sp+1,c
  8033  000D22  0ECF               	movlw	low STR_39
  8034  000D24  6E26               	movwf	sprintf@f,c
  8035  000D26  0E7E               	movlw	high STR_39
  8036  000D28  6E27               	movwf	sprintf@f+1,c
  8037  000D2A  EC82  F008         	call	_sprintf	;wreg free
  8038                           
  8039                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  8040  000D2E  0E69               	movlw	low PrintHelpScreen@dest
  8041  000D30  6E19               	movwf	UART_Write_Text@text,c
  8042  000D32  0E00               	movlw	high PrintHelpScreen@dest
  8043  000D34  6E1A               	movwf	UART_Write_Text@text+1,c
  8044  000D36  EC4C  F013         	call	_UART_Write_Text	;wreg free
  8045  000D3A  0012               	return		;funcret
  8046  000D3C                     __end_of_PrintHelpScreen:
  8047                           	opt stack 0
  8048                           tosu	equ	0xFFF
  8049                           tosh	equ	0xFFE
  8050                           tosl	equ	0xFFD
  8051                           pclath	equ	0xFFA
  8052                           tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           postinc0	equ	0xFEE
  8059                           wreg	equ	0xFE8
  8060                           indf1	equ	0xFE7
  8061                           postdec1	equ	0xFE5
  8062                           fsr1h	equ	0xFE2
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function _EUSART1_Read *****************
  8072 ;; Defined at:
  8073 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;		None
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  readValue       2   24[COMRAM] unsigned int 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      unsigned char 
  8080 ;; Registers used:
  8081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8087 ;;      Params:         0       0       0       0       0       0       0
  8088 ;;      Locals:         2       0       0       0       0       0       0
  8089 ;;      Temps:          1       0       0       0       0       0       0
  8090 ;;      Totals:         3       0       0       0       0       0       0
  8091 ;;Total ram usage:        3 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    3
  8094 ;; This function calls:
  8095 ;;		Nothing
  8096 ;; This function is called by:
  8097 ;;		_readUartByte
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text26
  8102  002CD4                     __ptext26:
  8103                           	opt stack 0
  8104  002CD4                     _EUSART1_Read:
  8105                           	opt stack 26
  8106                           
  8107                           ;eusart1.c: 112: uint16_t readValue = 0;
  8108                           
  8109                           ;incstack = 0
  8110  002CD4  0E00               	movlw	0
  8111  002CD6  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8112  002CD8  0E00               	movlw	0
  8113  002CDA  6E19               	movwf	EUSART1_Read@readValue,c
  8114                           
  8115                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8116  002CDC  0101               	movlb	1	; () banked
  8117  002CDE  5151               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8118  002CE0  A4D8               	btfss	status,2,c
  8119  002CE2  D002               	goto	l762
  8120                           
  8121                           ; BSR set to: 1
  8122                           ;eusart1.c: 120: {
  8123                           ;eusart1.c: 121: return readValue;
  8124  002CE4  5019               	movf	EUSART1_Read@readValue,w,c
  8125                           
  8126                           ; BSR set to: 1
  8127  002CE6  0012               	return	
  8128  002CE8                     l762:
  8129                           
  8130                           ; BSR set to: 1
  8131                           ;eusart1.c: 122: }
  8132                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8133                           
  8134                           ; BSR set to: 1
  8135  002CE8  5039               	movf	_eusart1RxTail,w,c	;volatile
  8136  002CEA  0D01               	mullw	1
  8137  002CEC  0E00               	movlw	low _eusart1RxBuffer
  8138  002CEE  24F3               	addwf	prodl,w,c
  8139  002CF0  6ED9               	movwf	fsr2l,c
  8140  002CF2  0E01               	movlw	high _eusart1RxBuffer
  8141  002CF4  20F4               	addwfc	prodh,w,c
  8142  002CF6  6EDA               	movwf	fsr2h,c
  8143  002CF8  50DF               	movf	indf2,w,c
  8144  002CFA  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8145  002CFC  5018               	movf	??_EUSART1_Read,w,c
  8146  002CFE  6E19               	movwf	EUSART1_Read@readValue,c
  8147  002D00  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8148                           
  8149                           ; BSR set to: 1
  8150  002D02  2A39               	incf	_eusart1RxTail,f,c	;volatile
  8151                           
  8152                           ; BSR set to: 1
  8153                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8154  002D04  0E27               	movlw	39
  8155  002D06  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  8156  002D08  D002               	goto	l764
  8157                           
  8158                           ; BSR set to: 1
  8159                           ;eusart1.c: 126: {
  8160                           ;eusart1.c: 127: eusart1RxTail = 0;
  8161  002D0A  0E00               	movlw	0
  8162  002D0C  6E39               	movwf	_eusart1RxTail,c	;volatile
  8163  002D0E                     l764:
  8164                           
  8165                           ; BSR set to: 1
  8166                           ;eusart1.c: 128: }
  8167                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8168                           
  8169                           ; BSR set to: 1
  8170  002D0E  9A9D               	bcf	3997,5,c	;volatile
  8171                           
  8172                           ; BSR set to: 1
  8173                           ;eusart1.c: 130: eusart1RxCount--;
  8174  002D10  0751               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8175                           
  8176                           ; BSR set to: 1
  8177                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8178  002D12  8A9D               	bsf	3997,5,c	;volatile
  8179                           
  8180                           ; BSR set to: 1
  8181                           ;eusart1.c: 133: return readValue;
  8182  002D14  5019               	movf	EUSART1_Read@readValue,w,c
  8183  002D16  0012               	return	
  8184  002D18                     __end_of_EUSART1_Read:
  8185                           	opt stack 0
  8186                           tosu	equ	0xFFF
  8187                           tosh	equ	0xFFE
  8188                           tosl	equ	0xFFD
  8189                           pclath	equ	0xFFA
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           postinc0	equ	0xFEE
  8197                           wreg	equ	0xFE8
  8198                           indf1	equ	0xFE7
  8199                           postdec1	equ	0xFE5
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _keepAliveSignalLed *****************
  8210 ;; Defined at:
  8211 ;;		line 35 in file "LedsApp.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;		None
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      void 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8225 ;;      Params:         0       0       0       0       0       0       0
  8226 ;;      Locals:         0       0       0       0       0       0       0
  8227 ;;      Temps:          1       0       0       0       0       0       0
  8228 ;;      Totals:         1       0       0       0       0       0       0
  8229 ;;Total ram usage:        1 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    3
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_main
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text27
  8240  00319C                     __ptext27:
  8241                           	opt stack 0
  8242  00319C                     _keepAliveSignalLed:
  8243                           	opt stack 27
  8244                           
  8245                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8246                           
  8247                           ; BSR set to: 1
  8248                           ;incstack = 0
  8249  00319C  B08B               	btfsc	3979,0,c	;volatile
  8250  00319E  D003               	goto	u5700
  8251  0031A0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8252  0031A2  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8253  0031A4  D001               	goto	u5718
  8254  0031A6                     u5700:
  8255  0031A6  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8256  0031A8                     u5718:
  8257  0031A8  508B               	movf	3979,w,c	;volatile
  8258  0031AA  1818               	xorwf	??_keepAliveSignalLed,w,c
  8259  0031AC  0BFE               	andlw	-2
  8260  0031AE  1818               	xorwf	??_keepAliveSignalLed,w,c
  8261  0031B0  6E8B               	movwf	3979,c	;volatile
  8262  0031B2  0012               	return		;funcret
  8263  0031B4                     __end_of_keepAliveSignalLed:
  8264                           	opt stack 0
  8265                           tosu	equ	0xFFF
  8266                           tosh	equ	0xFFE
  8267                           tosl	equ	0xFFD
  8268                           pclath	equ	0xFFA
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           indf1	equ	0xFE7
  8278                           postdec1	equ	0xFE5
  8279                           fsr1h	equ	0xFE2
  8280                           fsr1l	equ	0xFE1
  8281                           indf2	equ	0xFDF
  8282                           postinc2	equ	0xFDE
  8283                           postdec2	equ	0xFDD
  8284                           fsr2h	equ	0xFDA
  8285                           fsr2l	equ	0xFD9
  8286                           status	equ	0xFD8
  8287                           
  8288 ;; *************** function _SetMcuSystem *****************
  8289 ;; Defined at:
  8290 ;;		line 11 in file "SystemSettings.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;		None
  8293 ;; Auto vars:     Size  Location     Type
  8294 ;;		None
  8295 ;; Return value:  Size  Location     Type
  8296 ;;                  1    wreg      void 
  8297 ;; Registers used:
  8298 ;;		wreg, status,2, status,0, cstack
  8299 ;; Tracked objects:
  8300 ;;		On entry : 0/0
  8301 ;;		On exit  : 0/0
  8302 ;;		Unchanged: 0/0
  8303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8304 ;;      Params:         0       0       0       0       0       0       0
  8305 ;;      Locals:         0       0       0       0       0       0       0
  8306 ;;      Temps:          0       0       0       0       0       0       0
  8307 ;;      Totals:         0       0       0       0       0       0       0
  8308 ;;Total ram usage:        0 bytes
  8309 ;; Hardware stack levels used:    1
  8310 ;; Hardware stack levels required when called:    6
  8311 ;; This function calls:
  8312 ;;		_SYSTEM_Initialize
  8313 ;; This function is called by:
  8314 ;;		_main
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           	psect	text28
  8319  003222                     __ptext28:
  8320                           	opt stack 0
  8321  003222                     _SetMcuSystem:
  8322                           	opt stack 24
  8323                           
  8324                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8325                           
  8326                           ;incstack = 0
  8327  003222  ECC1  F018         	call	_SYSTEM_Initialize	;wreg free
  8328                           
  8329                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8330  003226  8EF2               	bsf	intcon,7,c	;volatile
  8331                           
  8332                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8333  003228  8CF2               	bsf	intcon,6,c	;volatile
  8334  00322A  0012               	return		;funcret
  8335  00322C                     __end_of_SetMcuSystem:
  8336                           	opt stack 0
  8337                           tosu	equ	0xFFF
  8338                           tosh	equ	0xFFE
  8339                           tosl	equ	0xFFD
  8340                           pclath	equ	0xFFA
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodh	equ	0xFF4
  8346                           prodl	equ	0xFF3
  8347                           intcon	equ	0xFF2
  8348                           postinc0	equ	0xFEE
  8349                           wreg	equ	0xFE8
  8350                           indf1	equ	0xFE7
  8351                           postdec1	equ	0xFE5
  8352                           fsr1h	equ	0xFE2
  8353                           fsr1l	equ	0xFE1
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           postdec2	equ	0xFDD
  8357                           fsr2h	equ	0xFDA
  8358                           fsr2l	equ	0xFD9
  8359                           status	equ	0xFD8
  8360                           
  8361 ;; *************** function _SYSTEM_Initialize *****************
  8362 ;; Defined at:
  8363 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;		None
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;		None
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      void 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2, status,0, cstack
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8377 ;;      Params:         0       0       0       0       0       0       0
  8378 ;;      Locals:         0       0       0       0       0       0       0
  8379 ;;      Temps:          0       0       0       0       0       0       0
  8380 ;;      Totals:         0       0       0       0       0       0       0
  8381 ;;Total ram usage:        0 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    5
  8384 ;; This function calls:
  8385 ;;		_ADC_Initialize
  8386 ;;		_EUSART1_Initialize
  8387 ;;		_INTERRUPT_Initialize
  8388 ;;		_OSCILLATOR_Initialize
  8389 ;;		_PIN_MANAGER_Initialize
  8390 ;;		_TMR0_Initialize
  8391 ;; This function is called by:
  8392 ;;		_SetMcuSystem
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           	psect	text29
  8397  003182                     __ptext29:
  8398                           	opt stack 0
  8399  003182                     _SYSTEM_Initialize:
  8400                           	opt stack 24
  8401                           
  8402                           ;mcc.c: 114: INTERRUPT_Initialize();
  8403                           
  8404                           ;incstack = 0
  8405  003182  EC22  F019         	call	_INTERRUPT_Initialize	;wreg free
  8406                           
  8407                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8408  003186  EC23  F016         	call	_PIN_MANAGER_Initialize	;wreg free
  8409                           
  8410                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8411  00318A  EC04  F019         	call	_OSCILLATOR_Initialize	;wreg free
  8412                           
  8413                           ;mcc.c: 117: TMR0_Initialize();
  8414  00318E  ECA2  F017         	call	_TMR0_Initialize	;wreg free
  8415                           
  8416                           ;mcc.c: 118: ADC_Initialize();
  8417  003192  ECDA  F018         	call	_ADC_Initialize	;wreg free
  8418                           
  8419                           ;mcc.c: 119: EUSART1_Initialize();
  8420  003196  EC6A  F017         	call	_EUSART1_Initialize	;wreg free
  8421  00319A  0012               	return		;funcret
  8422  00319C                     __end_of_SYSTEM_Initialize:
  8423                           	opt stack 0
  8424                           tosu	equ	0xFFF
  8425                           tosh	equ	0xFFE
  8426                           tosl	equ	0xFFD
  8427                           pclath	equ	0xFFA
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodh	equ	0xFF4
  8433                           prodl	equ	0xFF3
  8434                           intcon	equ	0xFF2
  8435                           postinc0	equ	0xFEE
  8436                           wreg	equ	0xFE8
  8437                           indf1	equ	0xFE7
  8438                           postdec1	equ	0xFE5
  8439                           fsr1h	equ	0xFE2
  8440                           fsr1l	equ	0xFE1
  8441                           indf2	equ	0xFDF
  8442                           postinc2	equ	0xFDE
  8443                           postdec2	equ	0xFDD
  8444                           fsr2h	equ	0xFDA
  8445                           fsr2l	equ	0xFD9
  8446                           status	equ	0xFD8
  8447                           
  8448 ;; *************** function _TMR0_Initialize *****************
  8449 ;; Defined at:
  8450 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;		None
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;		None
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  1    wreg      void 
  8457 ;; Registers used:
  8458 ;;		wreg, status,2, status,0, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8464 ;;      Params:         0       0       0       0       0       0       0
  8465 ;;      Locals:         0       0       0       0       0       0       0
  8466 ;;      Temps:          2       0       0       0       0       0       0
  8467 ;;      Totals:         2       0       0       0       0       0       0
  8468 ;;Total ram usage:        2 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    4
  8471 ;; This function calls:
  8472 ;;		_TMR0_SetInterruptHandler
  8473 ;; This function is called by:
  8474 ;;		_SYSTEM_Initialize
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text30
  8479  002F44                     __ptext30:
  8480                           	opt stack 0
  8481  002F44                     _TMR0_Initialize:
  8482                           	opt stack 24
  8483                           
  8484                           ;tmr0.c: 71: TMR0H = 0x3C;
  8485                           
  8486                           ;incstack = 0
  8487  002F44  0E3C               	movlw	60
  8488  002F46  6ED7               	movwf	4055,c	;volatile
  8489                           
  8490                           ;tmr0.c: 74: TMR0L = 0xAF;
  8491  002F48  0EAF               	movlw	175
  8492  002F4A  6ED6               	movwf	4054,c	;volatile
  8493                           
  8494                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8495  002F4C  50D6               	movf	4054,w,c	;volatile
  8496  002F4E  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8497  002F52  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8498  002F54  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8499  002F58  6A1A               	clrf	??_TMR0_Initialize,c
  8500  002F5A  101A               	iorwf	??_TMR0_Initialize,w,c
  8501  002F5C  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8502  002F5E  501B               	movf	??_TMR0_Initialize+1,w,c
  8503  002F60  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8504                           
  8505                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8506  002F62  94F2               	bcf	intcon,2,c	;volatile
  8507                           
  8508                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8509  002F64  8AF2               	bsf	intcon,5,c	;volatile
  8510                           
  8511                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8512  002F66  0E00               	movlw	0
  8513  002F68  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8514  002F6A  0E00               	movlw	0
  8515  002F6C  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8516  002F6E  EC16  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  8517                           
  8518                           ;tmr0.c: 90: T0CON = 0x90;
  8519  002F72  0E90               	movlw	144
  8520  002F74  6ED5               	movwf	4053,c	;volatile
  8521  002F76  0012               	return		;funcret
  8522  002F78                     __end_of_TMR0_Initialize:
  8523                           	opt stack 0
  8524                           tosu	equ	0xFFF
  8525                           tosh	equ	0xFFE
  8526                           tosl	equ	0xFFD
  8527                           pclath	equ	0xFFA
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           postinc0	equ	0xFEE
  8536                           wreg	equ	0xFE8
  8537                           indf1	equ	0xFE7
  8538                           postdec1	equ	0xFE5
  8539                           fsr1h	equ	0xFE2
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function _TMR0_SetInterruptHandler *****************
  8549 ;; Defined at:
  8550 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8553 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;		None
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      void 
  8558 ;; Registers used:
  8559 ;;		wreg, status,2, status,0
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8565 ;;      Params:         2       0       0       0       0       0       0
  8566 ;;      Locals:         0       0       0       0       0       0       0
  8567 ;;      Temps:          0       0       0       0       0       0       0
  8568 ;;      Totals:         2       0       0       0       0       0       0
  8569 ;;Total ram usage:        2 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    3
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_TMR0_Initialize
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text31
  8580  00322C                     __ptext31:
  8581                           	opt stack 0
  8582  00322C                     _TMR0_SetInterruptHandler:
  8583                           	opt stack 24
  8584                           
  8585                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  8586                           
  8587                           ;incstack = 0
  8588  00322C  C018  F1D9         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8589  003230  C019  F1DA         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8590  003234  0012               	return		;funcret
  8591  003236                     __end_of_TMR0_SetInterruptHandler:
  8592                           	opt stack 0
  8593                           tosu	equ	0xFFF
  8594                           tosh	equ	0xFFE
  8595                           tosl	equ	0xFFD
  8596                           pclath	equ	0xFFA
  8597                           tblptru	equ	0xFF8
  8598                           tblptrh	equ	0xFF7
  8599                           tblptrl	equ	0xFF6
  8600                           tablat	equ	0xFF5
  8601                           prodh	equ	0xFF4
  8602                           prodl	equ	0xFF3
  8603                           intcon	equ	0xFF2
  8604                           postinc0	equ	0xFEE
  8605                           wreg	equ	0xFE8
  8606                           indf1	equ	0xFE7
  8607                           postdec1	equ	0xFE5
  8608                           fsr1h	equ	0xFE2
  8609                           fsr1l	equ	0xFE1
  8610                           indf2	equ	0xFDF
  8611                           postinc2	equ	0xFDE
  8612                           postdec2	equ	0xFDD
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _PIN_MANAGER_Initialize *****************
  8618 ;; Defined at:
  8619 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;		None
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;		None
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, status,2
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8633 ;;      Params:         0       0       0       0       0       0       0
  8634 ;;      Locals:         0       0       0       0       0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0
  8636 ;;      Totals:         0       0       0       0       0       0       0
  8637 ;;Total ram usage:        0 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    3
  8640 ;; This function calls:
  8641 ;;		Nothing
  8642 ;; This function is called by:
  8643 ;;		_SYSTEM_Initialize
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text32
  8648  002C46                     __ptext32:
  8649                           	opt stack 0
  8650  002C46                     _PIN_MANAGER_Initialize:
  8651                           	opt stack 25
  8652                           
  8653                           ;pin_manager.c: 57: LATE = 0x00;
  8654                           
  8655                           ;incstack = 0
  8656  002C46  0E00               	movlw	0
  8657  002C48  6E8D               	movwf	3981,c	;volatile
  8658                           
  8659                           ;pin_manager.c: 58: LATD = 0x00;
  8660  002C4A  0E00               	movlw	0
  8661  002C4C  6E8C               	movwf	3980,c	;volatile
  8662                           
  8663                           ;pin_manager.c: 59: LATA = 0x06;
  8664  002C4E  0E06               	movlw	6
  8665  002C50  6E89               	movwf	3977,c	;volatile
  8666                           
  8667                           ;pin_manager.c: 60: LATB = 0x00;
  8668  002C52  0E00               	movlw	0
  8669  002C54  6E8A               	movwf	3978,c	;volatile
  8670                           
  8671                           ;pin_manager.c: 61: LATC = 0x00;
  8672  002C56  0E00               	movlw	0
  8673  002C58  6E8B               	movwf	3979,c	;volatile
  8674                           
  8675                           ;pin_manager.c: 66: TRISE = 0x07;
  8676  002C5A  0E07               	movlw	7
  8677  002C5C  6E96               	movwf	3990,c	;volatile
  8678                           
  8679                           ;pin_manager.c: 67: TRISA = 0xE1;
  8680  002C5E  0EE1               	movlw	225
  8681  002C60  6E92               	movwf	3986,c	;volatile
  8682                           
  8683                           ;pin_manager.c: 68: TRISB = 0xEF;
  8684  002C62  0EEF               	movlw	239
  8685  002C64  6E93               	movwf	3987,c	;volatile
  8686                           
  8687                           ;pin_manager.c: 69: TRISC = 0x80;
  8688  002C66  0E80               	movlw	128
  8689  002C68  6E94               	movwf	3988,c	;volatile
  8690                           
  8691                           ;pin_manager.c: 70: TRISD = 0xF2;
  8692  002C6A  0EF2               	movlw	242
  8693  002C6C  6E95               	movwf	3989,c	;volatile
  8694                           
  8695                           ;pin_manager.c: 75: ANSELC = 0x30;
  8696  002C6E  0E30               	movlw	48
  8697  002C70  010F               	movlb	15	; () banked
  8698  002C72  6F3A               	movwf	58,b	;volatile
  8699                           
  8700                           ;pin_manager.c: 76: ANSELB = 0x33;
  8701  002C74  0E33               	movlw	51
  8702  002C76  6F39               	movwf	57,b	;volatile
  8703                           
  8704                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8705  002C78  0EE4               	movlw	228
  8706  002C7A  6F3B               	movwf	59,b	;volatile
  8707                           
  8708                           ;pin_manager.c: 78: ANSELE = 0x07;
  8709  002C7C  0E07               	movlw	7
  8710  002C7E  6F3C               	movwf	60,b	;volatile
  8711                           
  8712                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8713  002C80  0E2F               	movlw	47
  8714  002C82  6F38               	movwf	56,b	;volatile
  8715                           
  8716                           ;pin_manager.c: 84: WPUB = 0xC2;
  8717  002C84  0EC2               	movlw	194
  8718  002C86  6E61               	movwf	3937,c	;volatile
  8719                           
  8720                           ; BSR set to: 15
  8721                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  8722  002C88  8EF1               	bsf	intcon2,7,c	;volatile
  8723                           
  8724                           ; BSR set to: 15
  8725                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8726  002C8A  86F2               	bsf	intcon,3,c	;volatile
  8727                           
  8728                           ; BSR set to: 15
  8729  002C8C  0012               	return		;funcret
  8730  002C8E                     __end_of_PIN_MANAGER_Initialize:
  8731                           	opt stack 0
  8732                           tosu	equ	0xFFF
  8733                           tosh	equ	0xFFE
  8734                           tosl	equ	0xFFD
  8735                           pclath	equ	0xFFA
  8736                           tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodh	equ	0xFF4
  8741                           prodl	equ	0xFF3
  8742                           intcon	equ	0xFF2
  8743                           intcon2	equ	0xFF1
  8744                           postinc0	equ	0xFEE
  8745                           wreg	equ	0xFE8
  8746                           indf1	equ	0xFE7
  8747                           postdec1	equ	0xFE5
  8748                           fsr1h	equ	0xFE2
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           fsr2h	equ	0xFDA
  8754                           fsr2l	equ	0xFD9
  8755                           status	equ	0xFD8
  8756                           
  8757 ;; *************** function _OSCILLATOR_Initialize *****************
  8758 ;; Defined at:
  8759 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;		None
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  1    wreg      void 
  8766 ;; Registers used:
  8767 ;;		wreg, status,2
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8773 ;;      Params:         0       0       0       0       0       0       0
  8774 ;;      Locals:         0       0       0       0       0       0       0
  8775 ;;      Temps:          0       0       0       0       0       0       0
  8776 ;;      Totals:         0       0       0       0       0       0       0
  8777 ;;Total ram usage:        0 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    3
  8780 ;; This function calls:
  8781 ;;		Nothing
  8782 ;; This function is called by:
  8783 ;;		_SYSTEM_Initialize
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text33
  8788  003208                     __ptext33:
  8789                           	opt stack 0
  8790  003208                     _OSCILLATOR_Initialize:
  8791                           	opt stack 25
  8792                           
  8793                           ;mcc.c: 125: OSCCON = 0x60;
  8794                           
  8795                           ; BSR set to: 15
  8796                           ;incstack = 0
  8797  003208  0E60               	movlw	96
  8798  00320A  6ED3               	movwf	4051,c	;volatile
  8799                           
  8800                           ;mcc.c: 127: OSCCON2 = 0x04;
  8801  00320C  0E04               	movlw	4
  8802  00320E  6ED2               	movwf	4050,c	;volatile
  8803                           
  8804                           ;mcc.c: 129: OSCTUNE = 0x00;
  8805  003210  0E00               	movlw	0
  8806  003212  6E9B               	movwf	3995,c	;volatile
  8807  003214  0012               	return		;funcret
  8808  003216                     __end_of_OSCILLATOR_Initialize:
  8809                           	opt stack 0
  8810                           tosu	equ	0xFFF
  8811                           tosh	equ	0xFFE
  8812                           tosl	equ	0xFFD
  8813                           pclath	equ	0xFFA
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon	equ	0xFF2
  8821                           intcon2	equ	0xFF1
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           indf1	equ	0xFE7
  8825                           postdec1	equ	0xFE5
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _INTERRUPT_Initialize *****************
  8836 ;; Defined at:
  8837 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		None
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8851 ;;      Params:         0       0       0       0       0       0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0
  8854 ;;      Totals:         0       0       0       0       0       0       0
  8855 ;;Total ram usage:        0 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    3
  8858 ;; This function calls:
  8859 ;;		Nothing
  8860 ;; This function is called by:
  8861 ;;		_SYSTEM_Initialize
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           	psect	text34
  8866  003244                     __ptext34:
  8867                           	opt stack 0
  8868  003244                     _INTERRUPT_Initialize:
  8869                           	opt stack 25
  8870                           
  8871                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8872                           
  8873                           ;incstack = 0
  8874  003244  9ED0               	bcf	4048,7,c	;volatile
  8875  003246  0012               	return		;funcret
  8876  003248                     __end_of_INTERRUPT_Initialize:
  8877                           	opt stack 0
  8878                           tosu	equ	0xFFF
  8879                           tosh	equ	0xFFE
  8880                           tosl	equ	0xFFD
  8881                           pclath	equ	0xFFA
  8882                           tblptru	equ	0xFF8
  8883                           tblptrh	equ	0xFF7
  8884                           tblptrl	equ	0xFF6
  8885                           tablat	equ	0xFF5
  8886                           prodh	equ	0xFF4
  8887                           prodl	equ	0xFF3
  8888                           intcon	equ	0xFF2
  8889                           intcon2	equ	0xFF1
  8890                           postinc0	equ	0xFEE
  8891                           wreg	equ	0xFE8
  8892                           indf1	equ	0xFE7
  8893                           postdec1	equ	0xFE5
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function _EUSART1_Initialize *****************
  8904 ;; Defined at:
  8905 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;		None
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  1    wreg      void 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8919 ;;      Params:         0       0       0       0       0       0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0
  8921 ;;      Temps:          0       0       0       0       0       0       0
  8922 ;;      Totals:         0       0       0       0       0       0       0
  8923 ;;Total ram usage:        0 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    3
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_SYSTEM_Initialize
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text35
  8934  002ED4                     __ptext35:
  8935                           	opt stack 0
  8936  002ED4                     _EUSART1_Initialize:
  8937                           	opt stack 25
  8938                           
  8939                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8940                           
  8941                           ;incstack = 0
  8942  002ED4  9A9D               	bcf	3997,5,c	;volatile
  8943                           
  8944                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8945  002ED6  989D               	bcf	3997,4,c	;volatile
  8946                           
  8947                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8948  002ED8  0E08               	movlw	8
  8949  002EDA  6EB8               	movwf	4024,c	;volatile
  8950                           
  8951                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8952  002EDC  0E90               	movlw	144
  8953  002EDE  6EAB               	movwf	4011,c	;volatile
  8954                           
  8955                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8956  002EE0  0E24               	movlw	36
  8957  002EE2  6EAC               	movwf	4012,c	;volatile
  8958                           
  8959                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8960  002EE4  0E10               	movlw	16
  8961  002EE6  6EAF               	movwf	4015,c	;volatile
  8962                           
  8963                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8964  002EE8  0E00               	movlw	0
  8965  002EEA  6EB0               	movwf	4016,c	;volatile
  8966                           
  8967                           ;eusart1.c: 98: eusart1TxHead = 0;
  8968  002EEC  0E00               	movlw	0
  8969  002EEE  6E3C               	movwf	_eusart1TxHead,c	;volatile
  8970                           
  8971                           ;eusart1.c: 99: eusart1TxTail = 0;
  8972  002EF0  0E00               	movlw	0
  8973  002EF2  6E3B               	movwf	_eusart1TxTail,c	;volatile
  8974                           
  8975                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8976  002EF4  0E46               	movlw	70
  8977  002EF6  0100               	movlb	0	; () banked
  8978  002EF8  6FFB               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8979                           
  8980                           ;eusart1.c: 102: eusart1RxHead = 0;
  8981  002EFA  0E00               	movlw	0
  8982  002EFC  6E3A               	movwf	_eusart1RxHead,c	;volatile
  8983                           
  8984                           ;eusart1.c: 103: eusart1RxTail = 0;
  8985  002EFE  0E00               	movlw	0
  8986  002F00  6E39               	movwf	_eusart1RxTail,c	;volatile
  8987                           
  8988                           ;eusart1.c: 104: eusart1RxCount = 0;
  8989  002F02  0E00               	movlw	0
  8990  002F04  0101               	movlb	1	; () banked
  8991  002F06  6F51               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8992                           
  8993                           ; BSR set to: 1
  8994                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8995  002F08  8A9D               	bsf	3997,5,c	;volatile
  8996                           
  8997                           ; BSR set to: 1
  8998  002F0A  0012               	return		;funcret
  8999  002F0C                     __end_of_EUSART1_Initialize:
  9000                           	opt stack 0
  9001                           tosu	equ	0xFFF
  9002                           tosh	equ	0xFFE
  9003                           tosl	equ	0xFFD
  9004                           pclath	equ	0xFFA
  9005                           tblptru	equ	0xFF8
  9006                           tblptrh	equ	0xFF7
  9007                           tblptrl	equ	0xFF6
  9008                           tablat	equ	0xFF5
  9009                           prodh	equ	0xFF4
  9010                           prodl	equ	0xFF3
  9011                           intcon	equ	0xFF2
  9012                           intcon2	equ	0xFF1
  9013                           postinc0	equ	0xFEE
  9014                           wreg	equ	0xFE8
  9015                           indf1	equ	0xFE7
  9016                           postdec1	equ	0xFE5
  9017                           fsr1h	equ	0xFE2
  9018                           fsr1l	equ	0xFE1
  9019                           indf2	equ	0xFDF
  9020                           postinc2	equ	0xFDE
  9021                           postdec2	equ	0xFDD
  9022                           fsr2h	equ	0xFDA
  9023                           fsr2l	equ	0xFD9
  9024                           status	equ	0xFD8
  9025                           
  9026 ;; *************** function _ADC_Initialize *****************
  9027 ;; Defined at:
  9028 ;;		line 58 in file "mcc_generated_files/adc.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      void 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9042 ;;      Params:         0       0       0       0       0       0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    3
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_SYSTEM_Initialize
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text36
  9057  0031B4                     __ptext36:
  9058                           	opt stack 0
  9059  0031B4                     _ADC_Initialize:
  9060                           	opt stack 25
  9061                           
  9062                           ;adc.c: 63: ADCON0 = 0x05;
  9063                           
  9064                           ; BSR set to: 1
  9065                           ;incstack = 0
  9066  0031B4  0E05               	movlw	5
  9067  0031B6  6EC2               	movwf	4034,c	;volatile
  9068                           
  9069                           ;adc.c: 66: ADCON1 = 0x00;
  9070  0031B8  0E00               	movlw	0
  9071  0031BA  6EC1               	movwf	4033,c	;volatile
  9072                           
  9073                           ;adc.c: 69: ADCON2 = 0x87;
  9074  0031BC  0E87               	movlw	135
  9075  0031BE  6EC0               	movwf	4032,c	;volatile
  9076                           
  9077                           ;adc.c: 72: ADRESL = 0x00;
  9078  0031C0  0E00               	movlw	0
  9079  0031C2  6EC3               	movwf	4035,c	;volatile
  9080                           
  9081                           ;adc.c: 75: ADRESH = 0x00;
  9082  0031C4  0E00               	movlw	0
  9083  0031C6  6EC4               	movwf	4036,c	;volatile
  9084  0031C8  0012               	return		;funcret
  9085  0031CA                     __end_of_ADC_Initialize:
  9086                           	opt stack 0
  9087                           tosu	equ	0xFFF
  9088                           tosh	equ	0xFFE
  9089                           tosl	equ	0xFFD
  9090                           pclath	equ	0xFFA
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodh	equ	0xFF4
  9096                           prodl	equ	0xFF3
  9097                           intcon	equ	0xFF2
  9098                           intcon2	equ	0xFF1
  9099                           postinc0	equ	0xFEE
  9100                           wreg	equ	0xFE8
  9101                           indf1	equ	0xFE7
  9102                           postdec1	equ	0xFE5
  9103                           fsr1h	equ	0xFE2
  9104                           fsr1l	equ	0xFE1
  9105                           indf2	equ	0xFDF
  9106                           postinc2	equ	0xFDE
  9107                           postdec2	equ	0xFDD
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function _SetMcuRunTime *****************
  9113 ;; Defined at:
  9114 ;;		line 45 in file "SystemStatus.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      void 
  9121 ;; Registers used:
  9122 ;;		wreg, status,2, status,0, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9128 ;;      Params:         0       0       0       0       0       0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0
  9130 ;;      Temps:          0       0       0       0       0       0       0
  9131 ;;      Totals:         0       0       0       0       0       0       0
  9132 ;;Total ram usage:        0 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    4
  9135 ;; This function calls:
  9136 ;;		___llmod
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           	psect	text37
  9143  002D18                     __ptext37:
  9144                           	opt stack 0
  9145  002D18                     _SetMcuRunTime:
  9146                           	opt stack 26
  9147                           
  9148                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks++;
  9149                           
  9150                           ;incstack = 0
  9151  002D18  0E01               	movlw	1
  9152  002D1A  0101               	movlb	1	; () banked
  9153  002D1C  2748               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9154  002D1E  0E00               	movlw	0
  9155  002D20  2349               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9156  002D22  234A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9157  002D24  234B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9158                           
  9159                           ; BSR set to: 1
  9160                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks %= (17280);
  9161  002D26  C148  F025         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9162  002D2A  C149  F026         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9163  002D2E  C14A  F027         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9164  002D32  C14B  F028         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9165  002D36  0E80               	movlw	128
  9166  002D38  6E29               	movwf	___llmod@divisor,c
  9167  002D3A  0E43               	movlw	67
  9168  002D3C  6E2A               	movwf	___llmod@divisor+1,c
  9169  002D3E  0E00               	movlw	0
  9170  002D40  6E2B               	movwf	___llmod@divisor+2,c
  9171  002D42  0E00               	movlw	0
  9172  002D44  6E2C               	movwf	___llmod@divisor+3,c
  9173  002D46  ECBA  F013         	call	___llmod	;wreg free
  9174  002D4A  C025  F148         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9175  002D4E  C026  F149         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9176  002D52  C027  F14A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9177  002D56  C028  F14B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9178  002D5A  0012               	return		;funcret
  9179  002D5C                     __end_of_SetMcuRunTime:
  9180                           	opt stack 0
  9181                           tosu	equ	0xFFF
  9182                           tosh	equ	0xFFE
  9183                           tosl	equ	0xFFD
  9184                           pclath	equ	0xFFA
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon2	equ	0xFF1
  9193                           postinc0	equ	0xFEE
  9194                           wreg	equ	0xFE8
  9195                           indf1	equ	0xFE7
  9196                           postdec1	equ	0xFE5
  9197                           fsr1h	equ	0xFE2
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           postdec2	equ	0xFDD
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function ___llmod *****************
  9207 ;; Defined at:
  9208 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  dividend        4   36[COMRAM] unsigned long 
  9211 ;;  divisor         4   40[COMRAM] unsigned long 
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;  counter         1   44[COMRAM] unsigned char 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  4   36[COMRAM] unsigned long 
  9216 ;; Registers used:
  9217 ;;		wreg, status,2, status,0
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9223 ;;      Params:         8       0       0       0       0       0       0
  9224 ;;      Locals:         1       0       0       0       0       0       0
  9225 ;;      Temps:          0       0       0       0       0       0       0
  9226 ;;      Totals:         9       0       0       0       0       0       0
  9227 ;;Total ram usage:        9 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    3
  9230 ;; This function calls:
  9231 ;;		Nothing
  9232 ;; This function is called by:
  9233 ;;		_AdcSingleSample
  9234 ;;		_SetMcuRunTime
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           	psect	text38
  9239  002774                     __ptext38:
  9240                           	opt stack 0
  9241  002774                     ___llmod:
  9242                           	opt stack 24
  9243                           
  9244                           ;incstack = 0
  9245  002774  5029               	movf	___llmod@divisor,w,c
  9246  002776  102A               	iorwf	___llmod@divisor+1,w,c
  9247  002778  102B               	iorwf	___llmod@divisor+2,w,c
  9248  00277A  102C               	iorwf	___llmod@divisor+3,w,c
  9249  00277C  B4D8               	btfsc	status,2,c
  9250  00277E  D024               	goto	l1745
  9251  002780  0E01               	movlw	1
  9252  002782  6E2D               	movwf	___llmod@counter,c
  9253  002784  D006               	goto	l1740
  9254  002786  90D8               	bcf	status,0,c
  9255  002788  3629               	rlcf	___llmod@divisor,f,c
  9256  00278A  362A               	rlcf	___llmod@divisor+1,f,c
  9257  00278C  362B               	rlcf	___llmod@divisor+2,f,c
  9258  00278E  362C               	rlcf	___llmod@divisor+3,f,c
  9259  002790  2A2D               	incf	___llmod@counter,f,c
  9260  002792                     l1740:
  9261  002792  AE2C               	btfss	___llmod@divisor+3,7,c
  9262  002794  D7F8               	goto	l1741
  9263  002796                     u5400:
  9264  002796  5029               	movf	___llmod@divisor,w,c
  9265  002798  5C25               	subwf	___llmod@dividend,w,c
  9266  00279A  502A               	movf	___llmod@divisor+1,w,c
  9267  00279C  5826               	subwfb	___llmod@dividend+1,w,c
  9268  00279E  502B               	movf	___llmod@divisor+2,w,c
  9269  0027A0  5827               	subwfb	___llmod@dividend+2,w,c
  9270  0027A2  502C               	movf	___llmod@divisor+3,w,c
  9271  0027A4  5828               	subwfb	___llmod@dividend+3,w,c
  9272  0027A6  A0D8               	btfss	status,0,c
  9273  0027A8  D008               	goto	l1744
  9274  0027AA  5029               	movf	___llmod@divisor,w,c
  9275  0027AC  5E25               	subwf	___llmod@dividend,f,c
  9276  0027AE  502A               	movf	___llmod@divisor+1,w,c
  9277  0027B0  5A26               	subwfb	___llmod@dividend+1,f,c
  9278  0027B2  502B               	movf	___llmod@divisor+2,w,c
  9279  0027B4  5A27               	subwfb	___llmod@dividend+2,f,c
  9280  0027B6  502C               	movf	___llmod@divisor+3,w,c
  9281  0027B8  5A28               	subwfb	___llmod@dividend+3,f,c
  9282  0027BA                     l1744:
  9283  0027BA  90D8               	bcf	status,0,c
  9284  0027BC  322C               	rrcf	___llmod@divisor+3,f,c
  9285  0027BE  322B               	rrcf	___llmod@divisor+2,f,c
  9286  0027C0  322A               	rrcf	___llmod@divisor+1,f,c
  9287  0027C2  3229               	rrcf	___llmod@divisor,f,c
  9288  0027C4  2E2D               	decfsz	___llmod@counter,f,c
  9289  0027C6  D7E7               	goto	u5400
  9290  0027C8                     l1745:
  9291  0027C8  C025  F025         	movff	___llmod@dividend,?___llmod
  9292  0027CC  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  9293  0027D0  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  9294  0027D4  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  9295  0027D8  0012               	return		;funcret
  9296  0027DA                     __end_of___llmod:
  9297                           	opt stack 0
  9298                           tosu	equ	0xFFF
  9299                           tosh	equ	0xFFE
  9300                           tosl	equ	0xFFD
  9301                           pclath	equ	0xFFA
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           intcon2	equ	0xFF1
  9310                           postinc0	equ	0xFEE
  9311                           wreg	equ	0xFE8
  9312                           indf1	equ	0xFE7
  9313                           postdec1	equ	0xFE5
  9314                           fsr1h	equ	0xFE2
  9315                           fsr1l	equ	0xFE1
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function _SendUartSystemInitMessage *****************
  9324 ;; Defined at:
  9325 ;;		line 66 in file "SystemStatus.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  dest           50    9[BANK0 ] unsigned char [50]
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9339 ;;      Params:         0       0       0       0       0       0       0
  9340 ;;      Locals:         0      50       0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0
  9342 ;;      Totals:         0      50       0       0       0       0       0
  9343 ;;Total ram usage:       50 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    5
  9346 ;; This function calls:
  9347 ;;		_UART_Write_Text
  9348 ;;		_sprintf
  9349 ;; This function is called by:
  9350 ;;		_main
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           	psect	text39
  9355  001D16                     __ptext39:
  9356                           	opt stack 0
  9357  001D16                     _SendUartSystemInitMessage:
  9358                           	opt stack 25
  9359                           
  9360                           ;SystemStatus.c: 68: char dest[50];
  9361                           ;SystemStatus.c: 70: sprintf(dest, "*************************** \n\r");
  9362                           
  9363                           ;incstack = 0
  9364  001D16  0E69               	movlw	low SendUartSystemInitMessage@dest
  9365  001D18  6E24               	movwf	sprintf@sp,c
  9366  001D1A  0E00               	movlw	high SendUartSystemInitMessage@dest
  9367  001D1C  6E25               	movwf	sprintf@sp+1,c
  9368  001D1E  0EF4               	movlw	low STR_12
  9369  001D20  6E26               	movwf	sprintf@f,c
  9370  001D22  0E7E               	movlw	high STR_12
  9371  001D24  6E27               	movwf	sprintf@f+1,c
  9372  001D26  EC82  F008         	call	_sprintf	;wreg free
  9373                           
  9374                           ;SystemStatus.c: 71: UART_Write_Text(dest);
  9375  001D2A  0E69               	movlw	low SendUartSystemInitMessage@dest
  9376  001D2C  6E19               	movwf	UART_Write_Text@text,c
  9377  001D2E  0E00               	movlw	high SendUartSystemInitMessage@dest
  9378  001D30  6E1A               	movwf	UART_Write_Text@text+1,c
  9379  001D32  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9380                           
  9381                           ;SystemStatus.c: 73: sprintf(dest, "FAST LINK SYSTEM \n\r");
  9382  001D36  0E69               	movlw	low SendUartSystemInitMessage@dest
  9383  001D38  6E24               	movwf	sprintf@sp,c
  9384  001D3A  0E00               	movlw	high SendUartSystemInitMessage@dest
  9385  001D3C  6E25               	movwf	sprintf@sp+1,c
  9386  001D3E  0E60               	movlw	low STR_13
  9387  001D40  6E26               	movwf	sprintf@f,c
  9388  001D42  0E7F               	movlw	high STR_13
  9389  001D44  6E27               	movwf	sprintf@f+1,c
  9390  001D46  EC82  F008         	call	_sprintf	;wreg free
  9391                           
  9392                           ;SystemStatus.c: 74: UART_Write_Text(dest);
  9393  001D4A  0E69               	movlw	low SendUartSystemInitMessage@dest
  9394  001D4C  6E19               	movwf	UART_Write_Text@text,c
  9395  001D4E  0E00               	movlw	high SendUartSystemInitMessage@dest
  9396  001D50  6E1A               	movwf	UART_Write_Text@text+1,c
  9397  001D52  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9398                           
  9399                           ;SystemStatus.c: 76: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  9400  001D56  0E69               	movlw	low SendUartSystemInitMessage@dest
  9401  001D58  6E24               	movwf	sprintf@sp,c
  9402  001D5A  0E00               	movlw	high SendUartSystemInitMessage@dest
  9403  001D5C  6E25               	movwf	sprintf@sp+1,c
  9404  001D5E  0EB0               	movlw	low STR_14
  9405  001D60  6E26               	movwf	sprintf@f,c
  9406  001D62  0E7F               	movlw	high STR_14
  9407  001D64  6E27               	movwf	sprintf@f+1,c
  9408  001D66  0EF3               	movlw	low STR_15
  9409  001D68  6E28               	movwf	?_sprintf+4,c
  9410  001D6A  0E7F               	movlw	high STR_15
  9411  001D6C  6E29               	movwf	?_sprintf+5,c
  9412  001D6E  EC82  F008         	call	_sprintf	;wreg free
  9413                           
  9414                           ;SystemStatus.c: 77: UART_Write_Text(dest);
  9415  001D72  0E69               	movlw	low SendUartSystemInitMessage@dest
  9416  001D74  6E19               	movwf	UART_Write_Text@text,c
  9417  001D76  0E00               	movlw	high SendUartSystemInitMessage@dest
  9418  001D78  6E1A               	movwf	UART_Write_Text@text+1,c
  9419  001D7A  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9420                           
  9421                           ;SystemStatus.c: 79: sprintf(dest, "Compile date: %s \n\r", "Mar 27 2018");
  9422  001D7E  0E69               	movlw	low SendUartSystemInitMessage@dest
  9423  001D80  6E24               	movwf	sprintf@sp,c
  9424  001D82  0E00               	movlw	high SendUartSystemInitMessage@dest
  9425  001D84  6E25               	movwf	sprintf@sp+1,c
  9426  001D86  0E88               	movlw	low STR_16
  9427  001D88  6E26               	movwf	sprintf@f,c
  9428  001D8A  0E7F               	movlw	high STR_16
  9429  001D8C  6E27               	movwf	sprintf@f+1,c
  9430  001D8E  0EC2               	movlw	low STR_17
  9431  001D90  6E28               	movwf	?_sprintf+4,c
  9432  001D92  0E7F               	movlw	high STR_17
  9433  001D94  6E29               	movwf	?_sprintf+5,c
  9434  001D96  EC82  F008         	call	_sprintf	;wreg free
  9435                           
  9436                           ;SystemStatus.c: 80: UART_Write_Text(dest);
  9437  001D9A  0E69               	movlw	low SendUartSystemInitMessage@dest
  9438  001D9C  6E19               	movwf	UART_Write_Text@text,c
  9439  001D9E  0E00               	movlw	high SendUartSystemInitMessage@dest
  9440  001DA0  6E1A               	movwf	UART_Write_Text@text+1,c
  9441  001DA2  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9442                           
  9443                           ;SystemStatus.c: 82: sprintf(dest, "Compile time: %s \n\r", "17:48:18");
  9444  001DA6  0E69               	movlw	low SendUartSystemInitMessage@dest
  9445  001DA8  6E24               	movwf	sprintf@sp,c
  9446  001DAA  0E00               	movlw	high SendUartSystemInitMessage@dest
  9447  001DAC  6E25               	movwf	sprintf@sp+1,c
  9448  001DAE  0E74               	movlw	low STR_18
  9449  001DB0  6E26               	movwf	sprintf@f,c
  9450  001DB2  0E7F               	movlw	high STR_18
  9451  001DB4  6E27               	movwf	sprintf@f+1,c
  9452  001DB6  0EE3               	movlw	low STR_19
  9453  001DB8  6E28               	movwf	?_sprintf+4,c
  9454  001DBA  0E7F               	movlw	high STR_19
  9455  001DBC  6E29               	movwf	?_sprintf+5,c
  9456  001DBE  EC82  F008         	call	_sprintf	;wreg free
  9457                           
  9458                           ;SystemStatus.c: 83: UART_Write_Text(dest);
  9459  001DC2  0E69               	movlw	low SendUartSystemInitMessage@dest
  9460  001DC4  6E19               	movwf	UART_Write_Text@text,c
  9461  001DC6  0E00               	movlw	high SendUartSystemInitMessage@dest
  9462  001DC8  6E1A               	movwf	UART_Write_Text@text+1,c
  9463  001DCA  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9464                           
  9465                           ;SystemStatus.c: 85: sprintf(dest, "*************************** \n\r");
  9466  001DCE  0E69               	movlw	low SendUartSystemInitMessage@dest
  9467  001DD0  6E24               	movwf	sprintf@sp,c
  9468  001DD2  0E00               	movlw	high SendUartSystemInitMessage@dest
  9469  001DD4  6E25               	movwf	sprintf@sp+1,c
  9470  001DD6  0EF4               	movlw	low STR_12
  9471  001DD8  6E26               	movwf	sprintf@f,c
  9472  001DDA  0E7E               	movlw	high STR_12
  9473  001DDC  6E27               	movwf	sprintf@f+1,c
  9474  001DDE  EC82  F008         	call	_sprintf	;wreg free
  9475                           
  9476                           ;SystemStatus.c: 86: UART_Write_Text(dest);
  9477  001DE2  0E69               	movlw	low SendUartSystemInitMessage@dest
  9478  001DE4  6E19               	movwf	UART_Write_Text@text,c
  9479  001DE6  0E00               	movlw	high SendUartSystemInitMessage@dest
  9480  001DE8  6E1A               	movwf	UART_Write_Text@text+1,c
  9481  001DEA  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9482  001DEE  0012               	return		;funcret
  9483  001DF0                     __end_of_SendUartSystemInitMessage:
  9484                           	opt stack 0
  9485                           tosu	equ	0xFFF
  9486                           tosh	equ	0xFFE
  9487                           tosl	equ	0xFFD
  9488                           pclath	equ	0xFFA
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           intcon2	equ	0xFF1
  9497                           postinc0	equ	0xFEE
  9498                           wreg	equ	0xFE8
  9499                           indf1	equ	0xFE7
  9500                           postdec1	equ	0xFE5
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function _SampleSingleChannel *****************
  9511 ;; Defined at:
  9512 ;;		line 93 in file "AdcApp.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  _adcResult      2   53[BANK1 ] unsigned int 
  9517 ;;  dest           50    0[BANK1 ] unsigned char [50]
  9518 ;;  adcRes          2   55[BANK1 ] unsigned int 
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  1    wreg      unsigned char 
  9521 ;; Registers used:
  9522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9528 ;;      Params:         0       0       0       0       0       0       0
  9529 ;;      Locals:         0       0      57       0       0       0       0
  9530 ;;      Temps:          0       2       0       0       0       0       0
  9531 ;;      Totals:         0       2      57       0       0       0       0
  9532 ;;Total ram usage:       59 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    8
  9535 ;; This function calls:
  9536 ;;		_ADC_GetConversion
  9537 ;;		_UART_Write_Text
  9538 ;;		___ftdiv
  9539 ;;		___ftmul
  9540 ;;		___fttol
  9541 ;;		___lwtoft
  9542 ;;		_pow
  9543 ;;		_sprintf
  9544 ;; This function is called by:
  9545 ;;		_main
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text40
  9550  001846                     __ptext40:
  9551                           	opt stack 0
  9552  001846                     _SampleSingleChannel:
  9553                           	opt stack 22
  9554                           
  9555                           ;AdcApp.c: 95: char dest[50];
  9556                           ;AdcApp.c: 96: uint16_t adcRes = 0x0;
  9557                           
  9558                           ;incstack = 0
  9559  001846  0E00               	movlw	0
  9560  001848  0101               	movlb	1	; () banked
  9561  00184A  6FB6               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  9562  00184C  0E00               	movlw	0
  9563  00184E  6FB5               	movwf	SampleSingleChannel@adcRes& (0+255),b
  9564                           
  9565                           ; BSR set to: 1
  9566                           ;AdcApp.c: 97: if(numSamples--)
  9567  001850  0100               	movlb	0	; () banked
  9568  001852  07EF               	decf	_numSamples& (0+255),f,b
  9569  001854  A0D8               	btfss	status,0,c
  9570  001856  07F0               	decf	(_numSamples+1)& (0+255),f,b
  9571  001858  29EF               	incf	_numSamples& (0+255),w,b
  9572  00185A  E103               	bnz	u8510
  9573  00185C  29F0               	incf	(_numSamples+1)& (0+255),w,b
  9574  00185E  B4D8               	btfsc	status,2,c
  9575  001860  D074               	goto	l111
  9576  001862                     u8510:
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;AdcApp.c: 98: {
  9580                           ;AdcApp.c: 99: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  9581  001862  0EBF               	movlw	low _channelArr
  9582  001864  2437               	addwf	_channelNum,w,c
  9583  001866  6EF6               	movwf	tblptrl,c
  9584  001868  0E7A               	movlw	high _channelArr
  9585  00186A  2038               	addwfc	_channelNum+1,w,c
  9586  00186C  6EF7               	movwf	tblptrh,c
  9587  00186E                     	if	0	;There are less than 3 active tblptr bytes
  9588  00186E                     	endif
  9589  00186E  0008               	tblrd		*
  9590  001870  50F5               	movf	tablat,w,c
  9591  001872  ECD5  F017         	call	_ADC_GetConversion
  9592  001876  C018  F1B3         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  9593  00187A  C019  F1B4         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  9594                           
  9595                           ;AdcApp.c: 100: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9596  00187E  0E00               	movlw	0
  9597  001880  0100               	movlb	0	; () banked
  9598  001882  6FB8               	movwf	pow@y& (0+255),b
  9599  001884  0E20               	movlw	32
  9600  001886  6FB9               	movwf	(pow@y+1)& (0+255),b
  9601  001888  0E41               	movlw	65
  9602  00188A  6FBA               	movwf	(pow@y+2)& (0+255),b
  9603  00188C  0E00               	movlw	0
  9604  00188E  6FB5               	movwf	pow@x& (0+255),b
  9605  001890  0E00               	movlw	0
  9606  001892  6FB6               	movwf	(pow@x+1)& (0+255),b
  9607  001894  0E40               	movlw	64
  9608  001896  6FB7               	movwf	(pow@x+2)& (0+255),b
  9609  001898  EC32  F00A         	call	_pow	;wreg free
  9610  00189C  C0B5  F1B0         	movff	?_pow,_SampleSingleChannel$2991
  9611  0018A0  C0B6  F1B1         	movff	?_pow+1,_SampleSingleChannel$2991+1
  9612  0018A4  C0B7  F1B2         	movff	?_pow+2,_SampleSingleChannel$2991+2
  9613                           
  9614                           ;AdcApp.c: 100: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9615  0018A8  0EC0               	movlw	192
  9616  0018AA  0100               	movlb	0	; () banked
  9617  0018AC  6F6C               	movwf	___ftmul@f2& (0+255),b
  9618  0018AE  0E50               	movlw	80
  9619  0018B0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9620  0018B2  0E45               	movlw	69
  9621  0018B4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9622  0018B6  C1B0  F02D         	movff	_SampleSingleChannel$2991,___ftdiv@f2
  9623  0018BA  C1B1  F02E         	movff	_SampleSingleChannel$2991+1,___ftdiv@f2+1
  9624  0018BE  C1B2  F02F         	movff	_SampleSingleChannel$2991+2,___ftdiv@f2+2
  9625  0018C2  C1B3  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  9626  0018C6  C1B4  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  9627  0018CA  EC74  F018         	call	___lwtoft	;wreg free
  9628  0018CE  C020  F02A         	movff	?___lwtoft,___ftdiv@f1
  9629  0018D2  C021  F02B         	movff	?___lwtoft+1,___ftdiv@f1+1
  9630  0018D6  C022  F02C         	movff	?___lwtoft+2,___ftdiv@f1+2
  9631  0018DA  ECA6  F00D         	call	___ftdiv	;wreg free
  9632  0018DE  C02A  F069         	movff	?___ftdiv,___ftmul@f1
  9633  0018E2  C02B  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  9634  0018E6  C02C  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  9635  0018EA  EC2B  F00D         	call	___ftmul	;wreg free
  9636  0018EE  C069  F078         	movff	?___ftmul,___fttol@f1
  9637  0018F2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  9638  0018F6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  9639  0018FA  ECAF  F00C         	call	___fttol	;wreg free
  9640  0018FE  C078  F1B5         	movff	?___fttol,SampleSingleChannel@adcRes
  9641  001902  C079  F1B6         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  9642                           
  9643                           ;AdcApp.c: 102: sprintf(dest, "%d \t", adcRes);
  9644  001906  0E7E               	movlw	low SampleSingleChannel@dest
  9645  001908  6E24               	movwf	sprintf@sp,c
  9646  00190A  0E01               	movlw	high SampleSingleChannel@dest
  9647  00190C  6E25               	movwf	sprintf@sp+1,c
  9648  00190E  0EF9               	movlw	low STR_6
  9649  001910  6E26               	movwf	sprintf@f,c
  9650  001912  0E7F               	movlw	high STR_6
  9651  001914  6E27               	movwf	sprintf@f+1,c
  9652  001916  C1B5  F028         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  9653  00191A  C1B6  F029         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  9654  00191E  EC82  F008         	call	_sprintf	;wreg free
  9655                           
  9656                           ;AdcApp.c: 103: UART_Write_Text(dest);
  9657  001922  0E7E               	movlw	low SampleSingleChannel@dest
  9658  001924  6E19               	movwf	UART_Write_Text@text,c
  9659  001926  0E01               	movlw	high SampleSingleChannel@dest
  9660  001928  6E1A               	movwf	UART_Write_Text@text+1,c
  9661  00192A  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9662                           
  9663                           ;AdcApp.c: 104: _delay((unsigned long)((1000)*(8000000/4000.0)));
  9664  00192E  0E0B               	movlw	11
  9665  001930  0100               	movlb	0	; () banked
  9666  001932  6FC7               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  9667  001934  0E26               	movlw	38
  9668  001936  6FC6               	movwf	??_SampleSingleChannel& (0+255),b
  9669  001938  0E5D               	movlw	93
  9670  00193A                     u9077:
  9671  00193A  2EE8               	decfsz	wreg,f,c
  9672  00193C  D7FE               	bra	u9077
  9673  00193E  2FC6               	decfsz	??_SampleSingleChannel& (0+255),f,b
  9674  001940  D7FC               	bra	u9077
  9675  001942  2FC7               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  9676  001944  D7FA               	bra	u9077
  9677  001946  D000               	nop2	
  9678                           
  9679                           ;AdcApp.c: 105: }
  9680  001948  0012               	return	
  9681  00194A                     l111:
  9682                           
  9683                           ;AdcApp.c: 106: else
  9684                           ;AdcApp.c: 107: {
  9685                           ;AdcApp.c: 108: needToSample = 0;
  9686  00194A  0E00               	movlw	0
  9687  00194C  0101               	movlb	1	; () banked
  9688  00194E  6F52               	movwf	_needToSample& (0+255),b	;volatile
  9689                           
  9690                           ; BSR set to: 1
  9691                           ;AdcApp.c: 109: UART_Write_Text("NOT OK \n\r");
  9692  001950  0ED9               	movlw	low STR_1
  9693  001952  6E19               	movwf	UART_Write_Text@text,c
  9694  001954  0E7F               	movlw	high STR_1
  9695  001956  6E1A               	movwf	UART_Write_Text@text+1,c
  9696  001958  EC4C  F013         	call	_UART_Write_Text	;wreg free
  9697  00195C  0012               	return	
  9698  00195E                     __end_of_SampleSingleChannel:
  9699                           	opt stack 0
  9700                           tosu	equ	0xFFF
  9701                           tosh	equ	0xFFE
  9702                           tosl	equ	0xFFD
  9703                           pclath	equ	0xFFA
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           intcon2	equ	0xFF1
  9712                           postinc0	equ	0xFEE
  9713                           wreg	equ	0xFE8
  9714                           indf1	equ	0xFE7
  9715                           postdec1	equ	0xFE5
  9716                           fsr1h	equ	0xFE2
  9717                           fsr1l	equ	0xFE1
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           postdec2	equ	0xFDD
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function _sprintf *****************
  9726 ;; Defined at:
  9727 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  sp              2   35[COMRAM] PTR unsigned char 
  9730 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50
      +), 
  9731 ;;  f               2   37[COMRAM] PTR const unsigned char 
  9732 ;;		 -> STR_39(37), STR_38(38), STR_37(86), STR_36(53), 
  9733 ;;		 -> STR_35(46), STR_34(29), STR_33(101), STR_32(86), 
  9734 ;;		 -> STR_31(61), STR_30(62), STR_29(45), STR_28(74), 
  9735 ;;		 -> STR_27(25), STR_26(79), STR_25(75), STR_24(46), 
  9736 ;;		 -> STR_23(61), STR_22(66), STR_21(23), STR_20(31), 
  9737 ;;		 -> STR_18(20), STR_16(20), STR_14(18), STR_13(20), 
  9738 ;;		 -> STR_12(31), STR_8(11), STR_6(5), 
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;  tmpval          4    0        struct .
  9741 ;;  val             2    6[BANK0 ] unsigned int 
  9742 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  9743 ;;		 -> STR_40(7), STR_19(9), STR_17(12), STR_15(6), 
  9744 ;;  ap              2    2[BANK0 ] PTR void [1]
  9745 ;;		 -> ?_sprintf(2), 
  9746 ;;  len             2    0        unsigned int 
  9747 ;;  c               1    8[BANK0 ] char 
  9748 ;;  prec            1    1[BANK0 ] char 
  9749 ;;  flag            1    0[BANK0 ] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  2   35[COMRAM] int 
  9752 ;; Registers used:
  9753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9759 ;;      Params:         6       0       0       0       0       0       0
  9760 ;;      Locals:         0       9       0       0       0       0       0
  9761 ;;      Temps:          1       0       0       0       0       0       0
  9762 ;;      Totals:         7       9       0       0       0       0       0
  9763 ;;Total ram usage:       16 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    4
  9766 ;; This function calls:
  9767 ;;		___lwdiv
  9768 ;;		___lwmod
  9769 ;; This function is called by:
  9770 ;;		_SampleSingleChannel
  9771 ;;		_readUartByte
  9772 ;;		_SendUartSystemInitMessage
  9773 ;;		_PrintHelpScreen
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text41
  9778  001104                     __ptext41:
  9779                           	opt stack 0
  9780  001104                     _sprintf:
  9781                           	opt stack 25
  9782                           
  9783                           ;doprnt.c: 494: va_list ap;
  9784                           ;doprnt.c: 499: signed char c;
  9785                           ;doprnt.c: 506: signed char prec;
  9786                           ;doprnt.c: 508: unsigned char flag;
  9787                           ;doprnt.c: 523: union {
  9788                           ;doprnt.c: 524: unsigned long vd;
  9789                           ;doprnt.c: 525: double integ;
  9790                           ;doprnt.c: 526: } tmpval;
  9791                           ;doprnt.c: 528: unsigned int val;
  9792                           ;doprnt.c: 529: unsigned len;
  9793                           ;doprnt.c: 530: const char * cp;
  9794                           ;doprnt.c: 533: *ap = __va_start();
  9795                           
  9796                           ;incstack = 0
  9797  001104  0E28               	movlw	low (?_sprintf+4)
  9798  001106  0100               	movlb	0	; () banked
  9799  001108  6F62               	movwf	sprintf@ap& (0+255),b
  9800  00110A  0E00               	movlw	high (?_sprintf+4)
  9801  00110C  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  9802                           
  9803                           ;doprnt.c: 536: while(c = *f++) {
  9804  00110E  D0C0               	goto	u8400
  9805  001110                     
  9806                           ; BSR set to: 0
  9807                           ;doprnt.c: 538: if(c != '%')
  9808                           
  9809                           ; BSR set to: 0
  9810  001110  0E25               	movlw	37
  9811  001112  1968               	xorwf	sprintf@c& (0+255),w,b
  9812  001114  B4D8               	btfsc	status,2,c
  9813  001116  D009               	goto	l1282
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;doprnt.c: 540: {
  9817                           ;doprnt.c: 541: ((*sp++ = (c)));
  9818  001118  C024  FFD9         	movff	sprintf@sp,fsr2l
  9819  00111C  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9820  001120  C068  FFDF         	movff	sprintf@c,indf2
  9821                           
  9822                           ; BSR set to: 0
  9823  001124  4A24               	infsnz	sprintf@sp,f,c
  9824  001126  2A25               	incf	sprintf@sp+1,f,c
  9825                           
  9826                           ;doprnt.c: 542: continue;
  9827  001128  D0B3               	goto	u8400
  9828  00112A                     l1282:
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;doprnt.c: 543: }
  9832                           ;doprnt.c: 548: flag = 0;
  9833                           
  9834                           ; BSR set to: 0
  9835  00112A  0E00               	movlw	0
  9836  00112C  6F60               	movwf	sprintf@flag& (0+255),b
  9837                           
  9838                           ;doprnt.c: 635: switch(c = *f++) {
  9839  00112E  D02E               	goto	l1283
  9840  001130                     
  9841                           ; BSR set to: 0
  9842                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9843                           
  9844                           ; BSR set to: 0
  9845  001130  C062  FFD9         	movff	sprintf@ap,fsr2l
  9846  001134  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  9847  001138  CFDE F064          	movff	postinc2,sprintf@cp
  9848  00113C  CFDD F065          	movff	postdec2,sprintf@cp+1
  9849                           
  9850                           ; BSR set to: 0
  9851  001140  0E02               	movlw	2
  9852  001142  2762               	addwf	sprintf@ap& (0+255),f,b
  9853  001144  0E00               	movlw	0
  9854  001146  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;doprnt.c: 740: if(!cp)
  9858  001148  5164               	movf	sprintf@cp& (0+255),w,b
  9859  00114A  1165               	iorwf	(sprintf@cp+1)& (0+255),w,b
  9860  00114C  A4D8               	btfss	status,2,c
  9861  00114E  D014               	goto	l1291
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;doprnt.c: 741: cp = "(null)";
  9865  001150  0EEC               	movlw	low STR_40
  9866  001152  6F64               	movwf	sprintf@cp& (0+255),b
  9867  001154  0E7F               	movlw	high STR_40
  9868  001156  6F65               	movwf	(sprintf@cp+1)& (0+255),b
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;doprnt.c: 777: while(*cp)
  9872  001158  D00F               	goto	l1291
  9873  00115A                     
  9874                           ; BSR set to: 0
  9875                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  9876                           
  9877                           ; BSR set to: 0
  9878  00115A  C064  FFF6         	movff	sprintf@cp,tblptrl
  9879  00115E  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  9880  001162                     	if	0	;tblptru may be non-zero
  9881  001162                     	endif
  9882  001162                     	if	0	;tblptru may be non-zero
  9883  001162                     	endif
  9884  001162  C024  FFD9         	movff	sprintf@sp,fsr2l
  9885  001166  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9886  00116A  0008               	tblrd		*
  9887  00116C  CFF5 FFDF          	movff	tablat,indf2
  9888                           
  9889                           ; BSR set to: 0
  9890  001170  4B64               	infsnz	sprintf@cp& (0+255),f,b
  9891  001172  2B65               	incf	(sprintf@cp+1)& (0+255),f,b
  9892                           
  9893                           ; BSR set to: 0
  9894  001174  4A24               	infsnz	sprintf@sp,f,c
  9895  001176  2A25               	incf	sprintf@sp+1,f,c
  9896  001178                     l1291:
  9897                           
  9898                           ; BSR set to: 0
  9899                           
  9900                           ; BSR set to: 0
  9901  001178  C064  FFF6         	movff	sprintf@cp,tblptrl
  9902  00117C  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  9903  001180                     	if	0	;tblptru may be non-zero
  9904  001180                     	endif
  9905  001180                     	if	0	;tblptru may be non-zero
  9906  001180                     	endif
  9907  001180  0008               	tblrd		*
  9908  001182  50F5               	movf	tablat,w,c
  9909  001184  0900               	iorlw	0
  9910  001186  B4D8               	btfsc	status,2,c
  9911  001188  D083               	goto	u8400
  9912  00118A  D7E7               	goto	l1292
  9913  00118C                     l1283:
  9914                           
  9915                           ; BSR set to: 0
  9916                           
  9917                           ; BSR set to: 0
  9918  00118C  C026  FFF6         	movff	sprintf@f,tblptrl
  9919  001190  C027  FFF7         	movff	sprintf@f+1,tblptrh
  9920  001194  4A26               	infsnz	sprintf@f,f,c
  9921  001196  2A27               	incf	sprintf@f+1,f,c
  9922  001198                     	if	0	;tblptru may be non-zero
  9923  001198                     	endif
  9924  001198                     	if	0	;tblptru may be non-zero
  9925  001198                     	endif
  9926  001198  0008               	tblrd		*
  9927  00119A  CFF5 F068          	movff	tablat,sprintf@c
  9928  00119E  5168               	movf	sprintf@c& (0+255),w,b
  9929                           
  9930                           ; Switch size 1, requested type "space"
  9931                           ; Number of cases is 4, Range of values is 0 to 115
  9932                           ; switch strategies available:
  9933                           ; Name         Instructions Cycles
  9934                           ; simple_byte           13     7 (average)
  9935                           ;	Chosen strategy is simple_byte
  9936  0011A0  0A00               	xorlw	0	; case 0
  9937  0011A2  B4D8               	btfsc	status,2,c
  9938  0011A4  D081               	goto	u8410
  9939  0011A6  0A64               	xorlw	100	; case 100
  9940  0011A8  B4D8               	btfsc	status,2,c
  9941  0011AA  D007               	goto	l1288
  9942  0011AC  0A0D               	xorlw	13	; case 105
  9943  0011AE  B4D8               	btfsc	status,2,c
  9944  0011B0  D004               	goto	l1288
  9945  0011B2  0A1A               	xorlw	26	; case 115
  9946  0011B4  B4D8               	btfsc	status,2,c
  9947  0011B6  D7BC               	goto	l1289
  9948  0011B8  D06B               	goto	u8400
  9949  0011BA                     l1288:
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;doprnt.c: 1253: {
  9953                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9954                           
  9955                           ; BSR set to: 0
  9956  0011BA  C062  FFD9         	movff	sprintf@ap,fsr2l
  9957  0011BE  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  9958  0011C2  CFDE F066          	movff	postinc2,sprintf@val
  9959  0011C6  CFDD F067          	movff	postdec2,sprintf@val+1
  9960                           
  9961                           ; BSR set to: 0
  9962  0011CA  0E02               	movlw	2
  9963  0011CC  2762               	addwf	sprintf@ap& (0+255),f,b
  9964  0011CE  0E00               	movlw	0
  9965  0011D0  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;doprnt.c: 1261: if((int)val < 0) {
  9969  0011D2  AF67               	btfss	(sprintf@val+1)& (0+255),7,b
  9970  0011D4  D006               	goto	l1295
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;doprnt.c: 1262: flag |= 0x03;
  9974  0011D6  0E03               	movlw	3
  9975  0011D8  1360               	iorwf	sprintf@flag& (0+255),f,b
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;doprnt.c: 1263: val = -val;
  9979  0011DA  6D66               	negf	sprintf@val& (0+255),b
  9980  0011DC  1F67               	comf	(sprintf@val+1)& (0+255),f,b
  9981  0011DE  B0D8               	btfsc	status,0,c
  9982  0011E0  2B67               	incf	(sprintf@val+1)& (0+255),f,b
  9983  0011E2                     l1295:
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;doprnt.c: 1264: }
  9987                           ;doprnt.c: 1266: }
  9988                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9989                           
  9990                           ; BSR set to: 0
  9991  0011E2  0E01               	movlw	1
  9992  0011E4  6F68               	movwf	sprintf@c& (0+255),b
  9993  0011E6                     l7622:
  9994                           
  9995                           ; BSR set to: 0
  9996  0011E6  0E05               	movlw	5
  9997  0011E8  1968               	xorwf	sprintf@c& (0+255),w,b
  9998  0011EA  B4D8               	btfsc	status,2,c
  9999  0011EC  D012               	goto	u8380
 10000                           
 10001                           ; BSR set to: 0
 10002                           ;doprnt.c: 1306: if(val < dpowers[c])
 10003                           
 10004                           ; BSR set to: 0
 10005                           
 10006                           ; BSR set to: 0
 10007  0011EE  5168               	movf	sprintf@c& (0+255),w,b
 10008  0011F0  0D02               	mullw	2
 10009  0011F2  0EB5               	movlw	low _dpowers
 10010  0011F4  24F3               	addwf	prodl,w,c
 10011  0011F6  6EF6               	movwf	tblptrl,c
 10012  0011F8  0E7A               	movlw	high _dpowers
 10013  0011FA  20F4               	addwfc	prodh,w,c
 10014  0011FC  6EF7               	movwf	tblptrh,c
 10015  0011FE                     	if	0	;There are less than 3 active tblptr bytes
 10016  0011FE                     	endif
 10017  0011FE  0009               	tblrd		*+
 10018  001200  50F5               	movf	tablat,w,c
 10019  001202  5D66               	subwf	sprintf@val& (0+255),w,b
 10020  001204  0009               	tblrd		*+
 10021  001206  50F5               	movf	tablat,w,c
 10022  001208  5967               	subwfb	(sprintf@val+1)& (0+255),w,b
 10023  00120A  A0D8               	btfss	status,0,c
 10024  00120C  D002               	goto	u8380
 10025                           
 10026                           ; BSR set to: 0
 10027                           
 10028                           ; BSR set to: 0
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;doprnt.c: 1307: break;
 10032  00120E  2B68               	incf	sprintf@c& (0+255),f,b
 10033  001210  D7EA               	goto	l7622
 10034  001212                     u8380:
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;doprnt.c: 1422: {
 10038                           ;doprnt.c: 1438: if(flag & 0x03)
 10039                           
 10040                           ; BSR set to: 0
 10041  001212  C060  F02A         	movff	sprintf@flag,??_sprintf
 10042  001216  0E03               	movlw	3
 10043  001218  162A               	andwf	??_sprintf,f,c
 10044  00121A  B4D8               	btfsc	status,2,c
 10045  00121C  D008               	goto	l1299
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10049  00121E  C024  FFD9         	movff	sprintf@sp,fsr2l
 10050  001222  C025  FFDA         	movff	sprintf@sp+1,fsr2h
 10051  001226  0E2D               	movlw	45
 10052  001228  6EDF               	movwf	indf2,c
 10053                           
 10054                           ; BSR set to: 0
 10055  00122A  4A24               	infsnz	sprintf@sp,f,c
 10056  00122C  2A25               	incf	sprintf@sp+1,f,c
 10057  00122E                     l1299:
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;doprnt.c: 1469: }
 10061                           ;doprnt.c: 1472: prec = c;
 10062                           
 10063                           ; BSR set to: 0
 10064  00122E  C068  F061         	movff	sprintf@c,sprintf@prec
 10065                           
 10066                           ;doprnt.c: 1474: while(prec--) {
 10067  001232  D02A               	goto	l1300
 10068  001234                     
 10069                           ; BSR set to: 0
 10070                           ;doprnt.c: 1478: {
 10071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10072                           
 10073                           ; BSR set to: 0
 10074  001234  5161               	movf	sprintf@prec& (0+255),w,b
 10075  001236  0D02               	mullw	2
 10076  001238  0EB5               	movlw	low _dpowers
 10077  00123A  24F3               	addwf	prodl,w,c
 10078  00123C  6EF6               	movwf	tblptrl,c
 10079  00123E  0E7A               	movlw	high _dpowers
 10080  001240  20F4               	addwfc	prodh,w,c
 10081  001242  6EF7               	movwf	tblptrh,c
 10082  001244                     	if	0	;There are less than 3 active tblptr bytes
 10083  001244                     	endif
 10084  001244  0009               	tblrd		*+
 10085  001246  CFF5 F01A          	movff	tablat,___lwdiv@divisor
 10086  00124A  000A               	tblrd		*-
 10087  00124C  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
 10088  001250  C066  F018         	movff	sprintf@val,___lwdiv@dividend
 10089  001254  C067  F019         	movff	sprintf@val+1,___lwdiv@dividend+1
 10090  001258  ECAD  F015         	call	___lwdiv	;wreg free
 10091  00125C  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
 10092  001260  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
 10093  001264  0E00               	movlw	0
 10094  001266  6E22               	movwf	___lwmod@divisor+1,c
 10095  001268  0E0A               	movlw	10
 10096  00126A  6E21               	movwf	___lwmod@divisor,c
 10097  00126C  ECAE  F016         	call	___lwmod	;wreg free
 10098  001270  501F               	movf	?___lwmod,w,c
 10099  001272  0F30               	addlw	48
 10100  001274  0100               	movlb	0	; () banked
 10101  001276  6F68               	movwf	sprintf@c& (0+255),b
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;doprnt.c: 1523: }
 10105                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10106  001278  C024  FFD9         	movff	sprintf@sp,fsr2l
 10107  00127C  C025  FFDA         	movff	sprintf@sp+1,fsr2h
 10108  001280  C068  FFDF         	movff	sprintf@c,indf2
 10109                           
 10110                           ; BSR set to: 0
 10111  001284  4A24               	infsnz	sprintf@sp,f,c
 10112  001286  2A25               	incf	sprintf@sp+1,f,c
 10113  001288                     l1300:
 10114                           
 10115                           ; BSR set to: 0
 10116                           
 10117                           ; BSR set to: 0
 10118  001288  0761               	decf	sprintf@prec& (0+255),f,b
 10119  00128A  2961               	incf	sprintf@prec& (0+255),w,b
 10120  00128C  A4D8               	btfss	status,2,c
 10121  00128E  D7D2               	goto	l1301
 10122  001290                     u8400:
 10123                           
 10124                           ; BSR set to: 0
 10125                           
 10126                           ; BSR set to: 0
 10127                           
 10128                           ; BSR set to: 0
 10129  001290  C026  FFF6         	movff	sprintf@f,tblptrl
 10130  001294  C027  FFF7         	movff	sprintf@f+1,tblptrh
 10131  001298  4A26               	infsnz	sprintf@f,f,c
 10132  00129A  2A27               	incf	sprintf@f+1,f,c
 10133  00129C                     	if	0	;tblptru may be non-zero
 10134  00129C                     	endif
 10135  00129C                     	if	0	;tblptru may be non-zero
 10136  00129C                     	endif
 10137  00129C  0008               	tblrd		*
 10138  00129E  CFF5 F068          	movff	tablat,sprintf@c
 10139  0012A2  5168               	movf	sprintf@c& (0+255),w,b
 10140  0012A4  A4D8               	btfss	status,2,c
 10141  0012A6  D734               	goto	l1281
 10142  0012A8                     u8410:
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;doprnt.c: 1538: *sp = 0;
 10146                           
 10147                           ; BSR set to: 0
 10148                           
 10149                           ;doprnt.c: 1525: }
 10150                           ;doprnt.c: 1533: }
 10151                           ;doprnt.c: 1535: alldone:
 10152                           
 10153                           ; BSR set to: 0
 10154  0012A8  C024  FFD9         	movff	sprintf@sp,fsr2l
 10155  0012AC  C025  FFDA         	movff	sprintf@sp+1,fsr2h
 10156  0012B0  0E00               	movlw	0
 10157  0012B2  6EDF               	movwf	indf2,c
 10158  0012B4  0012               	return	
 10159  0012B6                     __end_of_sprintf:
 10160                           	opt stack 0
 10161                           tosu	equ	0xFFF
 10162                           tosh	equ	0xFFE
 10163                           tosl	equ	0xFFD
 10164                           pclath	equ	0xFFA
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           intcon2	equ	0xFF1
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           indf1	equ	0xFE7
 10176                           postdec1	equ	0xFE5
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function ___lwmod *****************
 10187 ;; Defined at:
 10188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  dividend        2   30[COMRAM] unsigned int 
 10191 ;;  divisor         2   32[COMRAM] unsigned int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  counter         1   34[COMRAM] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  2   30[COMRAM] unsigned int 
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10203 ;;      Params:         4       0       0       0       0       0       0
 10204 ;;      Locals:         1       0       0       0       0       0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0
 10206 ;;      Totals:         5       0       0       0       0       0       0
 10207 ;;Total ram usage:        5 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    3
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_sprintf
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text42
 10218  002D5C                     __ptext42:
 10219                           	opt stack 0
 10220  002D5C                     ___lwmod:
 10221                           	opt stack 25
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;incstack = 0
 10225  002D5C  5021               	movf	___lwmod@divisor,w,c
 10226  002D5E  1022               	iorwf	___lwmod@divisor+1,w,c
 10227  002D60  B4D8               	btfsc	status,2,c
 10228  002D62  D018               	goto	l1798
 10229  002D64  0E01               	movlw	1
 10230  002D66  6E23               	movwf	___lwmod@counter,c
 10231  002D68  D004               	goto	l1793
 10232  002D6A  90D8               	bcf	status,0,c
 10233  002D6C  3621               	rlcf	___lwmod@divisor,f,c
 10234  002D6E  3622               	rlcf	___lwmod@divisor+1,f,c
 10235  002D70  2A23               	incf	___lwmod@counter,f,c
 10236  002D72                     l1793:
 10237  002D72  AE22               	btfss	___lwmod@divisor+1,7,c
 10238  002D74  D7FA               	goto	l1794
 10239  002D76                     u8240:
 10240  002D76  5021               	movf	___lwmod@divisor,w,c
 10241  002D78  5C1F               	subwf	___lwmod@dividend,w,c
 10242  002D7A  5022               	movf	___lwmod@divisor+1,w,c
 10243  002D7C  5820               	subwfb	___lwmod@dividend+1,w,c
 10244  002D7E  A0D8               	btfss	status,0,c
 10245  002D80  D004               	goto	l1797
 10246  002D82  5021               	movf	___lwmod@divisor,w,c
 10247  002D84  5E1F               	subwf	___lwmod@dividend,f,c
 10248  002D86  5022               	movf	___lwmod@divisor+1,w,c
 10249  002D88  5A20               	subwfb	___lwmod@dividend+1,f,c
 10250  002D8A                     l1797:
 10251  002D8A  90D8               	bcf	status,0,c
 10252  002D8C  3222               	rrcf	___lwmod@divisor+1,f,c
 10253  002D8E  3221               	rrcf	___lwmod@divisor,f,c
 10254  002D90  2E23               	decfsz	___lwmod@counter,f,c
 10255  002D92  D7F1               	goto	u8240
 10256  002D94                     l1798:
 10257  002D94  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
 10258  002D98  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
 10259  002D9C  0012               	return		;funcret
 10260  002D9E                     __end_of___lwmod:
 10261                           	opt stack 0
 10262                           tosu	equ	0xFFF
 10263                           tosh	equ	0xFFE
 10264                           tosl	equ	0xFFD
 10265                           pclath	equ	0xFFA
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           intcon2	equ	0xFF1
 10274                           postinc0	equ	0xFEE
 10275                           wreg	equ	0xFE8
 10276                           indf1	equ	0xFE7
 10277                           postdec1	equ	0xFE5
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function ___lwdiv *****************
 10288 ;; Defined at:
 10289 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  dividend        2   23[COMRAM] unsigned int 
 10292 ;;  divisor         2   25[COMRAM] unsigned int 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  quotient        2   28[COMRAM] unsigned int 
 10295 ;;  counter         1   27[COMRAM] unsigned char 
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  2   23[COMRAM] unsigned int 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2, status,0
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10305 ;;      Params:         4       0       0       0       0       0       0
 10306 ;;      Locals:         3       0       0       0       0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0
 10308 ;;      Totals:         7       0       0       0       0       0       0
 10309 ;;Total ram usage:        7 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    3
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_sprintf
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text43
 10320  002B5A                     __ptext43:
 10321                           	opt stack 0
 10322  002B5A                     ___lwdiv:
 10323                           	opt stack 25
 10324                           
 10325                           ;incstack = 0
 10326  002B5A  0E00               	movlw	0
 10327  002B5C  6E1E               	movwf	___lwdiv@quotient+1,c
 10328  002B5E  0E00               	movlw	0
 10329  002B60  6E1D               	movwf	___lwdiv@quotient,c
 10330  002B62  501A               	movf	___lwdiv@divisor,w,c
 10331  002B64  101B               	iorwf	___lwdiv@divisor+1,w,c
 10332  002B66  B4D8               	btfsc	status,2,c
 10333  002B68  D01C               	goto	l1788
 10334  002B6A  0E01               	movlw	1
 10335  002B6C  6E1C               	movwf	___lwdiv@counter,c
 10336  002B6E  D004               	goto	l1783
 10337  002B70  90D8               	bcf	status,0,c
 10338  002B72  361A               	rlcf	___lwdiv@divisor,f,c
 10339  002B74  361B               	rlcf	___lwdiv@divisor+1,f,c
 10340  002B76  2A1C               	incf	___lwdiv@counter,f,c
 10341  002B78                     l1783:
 10342  002B78  AE1B               	btfss	___lwdiv@divisor+1,7,c
 10343  002B7A  D7FA               	goto	l1784
 10344  002B7C                     u8210:
 10345  002B7C  90D8               	bcf	status,0,c
 10346  002B7E  361D               	rlcf	___lwdiv@quotient,f,c
 10347  002B80  361E               	rlcf	___lwdiv@quotient+1,f,c
 10348  002B82  501A               	movf	___lwdiv@divisor,w,c
 10349  002B84  5C18               	subwf	___lwdiv@dividend,w,c
 10350  002B86  501B               	movf	___lwdiv@divisor+1,w,c
 10351  002B88  5819               	subwfb	___lwdiv@dividend+1,w,c
 10352  002B8A  A0D8               	btfss	status,0,c
 10353  002B8C  D005               	goto	l1787
 10354  002B8E  501A               	movf	___lwdiv@divisor,w,c
 10355  002B90  5E18               	subwf	___lwdiv@dividend,f,c
 10356  002B92  501B               	movf	___lwdiv@divisor+1,w,c
 10357  002B94  5A19               	subwfb	___lwdiv@dividend+1,f,c
 10358  002B96  801D               	bsf	___lwdiv@quotient,0,c
 10359  002B98                     l1787:
 10360  002B98  90D8               	bcf	status,0,c
 10361  002B9A  321B               	rrcf	___lwdiv@divisor+1,f,c
 10362  002B9C  321A               	rrcf	___lwdiv@divisor,f,c
 10363  002B9E  2E1C               	decfsz	___lwdiv@counter,f,c
 10364  002BA0  D7ED               	goto	u8210
 10365  002BA2                     l1788:
 10366  002BA2  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
 10367  002BA6  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10368  002BAA  0012               	return		;funcret
 10369  002BAC                     __end_of___lwdiv:
 10370                           	opt stack 0
 10371                           tosu	equ	0xFFF
 10372                           tosh	equ	0xFFE
 10373                           tosl	equ	0xFFD
 10374                           pclath	equ	0xFFA
 10375                           tblptru	equ	0xFF8
 10376                           tblptrh	equ	0xFF7
 10377                           tblptrl	equ	0xFF6
 10378                           tablat	equ	0xFF5
 10379                           prodh	equ	0xFF4
 10380                           prodl	equ	0xFF3
 10381                           intcon	equ	0xFF2
 10382                           intcon2	equ	0xFF1
 10383                           postinc0	equ	0xFEE
 10384                           wreg	equ	0xFE8
 10385                           indf1	equ	0xFE7
 10386                           postdec1	equ	0xFE5
 10387                           fsr1h	equ	0xFE2
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           postdec2	equ	0xFDD
 10392                           fsr2h	equ	0xFDA
 10393                           fsr2l	equ	0xFD9
 10394                           status	equ	0xFD8
 10395                           
 10396 ;; *************** function _pow *****************
 10397 ;; Defined at:
 10398 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;  x               3   85[BANK0 ] unsigned int 
 10401 ;;  y               3   88[BANK0 ] unsigned int 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  yi              4   98[BANK0 ] unsigned long 
 10404 ;;  sign            1   97[BANK0 ] unsigned char 
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  3   85[BANK0 ] unsigned char 
 10407 ;; Registers used:
 10408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10409 ;; Tracked objects:
 10410 ;;		On entry : 0/0
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10414 ;;      Params:         0       6       0       0       0       0       0
 10415 ;;      Locals:         0      11       0       0       0       0       0
 10416 ;;      Temps:          0       0       0       0       0       0       0
 10417 ;;      Totals:         0      17       0       0       0       0       0
 10418 ;;Total ram usage:       17 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    7
 10421 ;; This function calls:
 10422 ;;		___ftge
 10423 ;;		___ftmul
 10424 ;;		___ftneg
 10425 ;;		___fttol
 10426 ;;		___lltoft
 10427 ;;		_exp
 10428 ;;		_log
 10429 ;; This function is called by:
 10430 ;;		_SampleSingleChannel
 10431 ;;		_CalcSynthRegParams
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           	psect	text44
 10436  001464                     __ptext44:
 10437                           	opt stack 0
 10438  001464                     _pow:
 10439                           	opt stack 19
 10440                           
 10441                           ;incstack = 0
 10442  001464  0E00               	movlw	0
 10443  001466  0100               	movlb	0	; () banked
 10444  001468  6FC1               	movwf	pow@sign& (0+255),b
 10445                           
 10446                           ; BSR set to: 0
 10447  00146A  51B5               	movf	pow@x& (0+255),w,b
 10448  00146C  11B6               	iorwf	(pow@x+1)& (0+255),w,b
 10449  00146E  11B7               	iorwf	(pow@x+2)& (0+255),w,b
 10450  001470  A4D8               	btfss	status,2,c
 10451  001472  D01D               	goto	l1819
 10452                           
 10453                           ; BSR set to: 0
 10454  001474  0E00               	movlw	0
 10455  001476  6E18               	movwf	___ftge@ff1,c
 10456  001478  0E00               	movlw	0
 10457  00147A  6E19               	movwf	___ftge@ff1+1,c
 10458  00147C  0E00               	movlw	0
 10459  00147E  6E1A               	movwf	___ftge@ff1+2,c
 10460  001480  C0B8  F01B         	movff	pow@y,___ftge@ff2
 10461  001484  C0B9  F01C         	movff	pow@y+1,___ftge@ff2+1
 10462  001488  C0BA  F01D         	movff	pow@y+2,___ftge@ff2+2
 10463  00148C  EC00  F012         	call	___ftge	;wreg free
 10464  001490  A0D8               	btfss	status,0,c
 10465  001492  D005               	goto	l1820
 10466  001494  0E00               	movlw	0
 10467  001496  0100               	movlb	0	; () banked
 10468  001498  6FEC               	movwf	(_errno+1)& (0+255),b
 10469  00149A  0E21               	movlw	33
 10470  00149C  6FEB               	movwf	_errno& (0+255),b
 10471  00149E                     l1820:
 10472  00149E  0E00               	movlw	0
 10473  0014A0  0100               	movlb	0	; () banked
 10474  0014A2  6FB5               	movwf	?_pow& (0+255),b
 10475  0014A4  0E00               	movlw	0
 10476  0014A6  6FB6               	movwf	(?_pow+1)& (0+255),b
 10477  0014A8  0E00               	movlw	0
 10478  0014AA  6FB7               	movwf	(?_pow+2)& (0+255),b
 10479                           
 10480                           ; BSR set to: 0
 10481  0014AC  0012               	return	
 10482  0014AE                     l1819:
 10483                           
 10484                           ; BSR set to: 0
 10485                           
 10486                           ; BSR set to: 0
 10487  0014AE  51B8               	movf	pow@y& (0+255),w,b
 10488  0014B0  11B9               	iorwf	(pow@y+1)& (0+255),w,b
 10489  0014B2  11BA               	iorwf	(pow@y+2)& (0+255),w,b
 10490  0014B4  A4D8               	btfss	status,2,c
 10491  0014B6  D007               	goto	l1822
 10492                           
 10493                           ; BSR set to: 0
 10494  0014B8  0E00               	movlw	0
 10495  0014BA  6FB5               	movwf	?_pow& (0+255),b
 10496  0014BC  0E80               	movlw	128
 10497  0014BE  6FB6               	movwf	(?_pow+1)& (0+255),b
 10498  0014C0  0E3F               	movlw	63
 10499  0014C2  6FB7               	movwf	(?_pow+2)& (0+255),b
 10500                           
 10501                           ; BSR set to: 0
 10502  0014C4  0012               	return	
 10503  0014C6                     l1822:
 10504                           
 10505                           ; BSR set to: 0
 10506                           
 10507                           ; BSR set to: 0
 10508  0014C6  AFB7               	btfss	(pow@x+2)& (0+255),7,b
 10509  0014C8  D041               	goto	l1823
 10510                           
 10511                           ; BSR set to: 0
 10512  0014CA  C0B8  F078         	movff	pow@y,___fttol@f1
 10513  0014CE  C0B9  F079         	movff	pow@y+1,___fttol@f1+1
 10514  0014D2  C0BA  F07A         	movff	pow@y+2,___fttol@f1+2
 10515  0014D6  ECAF  F00C         	call	___fttol	;wreg free
 10516  0014DA  C078  F0C2         	movff	?___fttol,pow@yi
 10517  0014DE  C079  F0C3         	movff	?___fttol+1,pow@yi+1
 10518  0014E2  C07A  F0C4         	movff	?___fttol+2,pow@yi+2
 10519  0014E6  C07B  F0C5         	movff	?___fttol+3,pow@yi+3
 10520  0014EA  C0C2  F020         	movff	pow@yi,___lltoft@c
 10521  0014EE  C0C3  F021         	movff	pow@yi+1,___lltoft@c+1
 10522  0014F2  C0C4  F022         	movff	pow@yi+2,___lltoft@c+2
 10523  0014F6  C0C5  F023         	movff	pow@yi+3,___lltoft@c+3
 10524  0014FA  EC4C  F014         	call	___lltoft	;wreg free
 10525  0014FE  0100               	movlb	0	; () banked
 10526  001500  51B8               	movf	pow@y& (0+255),w,b
 10527  001502  1820               	xorwf	?___lltoft,w,c
 10528  001504  E107               	bnz	u8000
 10529  001506  51B9               	movf	(pow@y+1)& (0+255),w,b
 10530  001508  1821               	xorwf	?___lltoft+1,w,c
 10531  00150A  E104               	bnz	u8000
 10532  00150C  51BA               	movf	(pow@y+2)& (0+255),w,b
 10533  00150E  1822               	xorwf	?___lltoft+2,w,c
 10534  001510  B4D8               	btfsc	status,2,c
 10535  001512  D00B               	goto	l1824
 10536  001514                     u8000:
 10537                           
 10538                           ; BSR set to: 0
 10539  001514  0E00               	movlw	0
 10540  001516  6FEC               	movwf	(_errno+1)& (0+255),b
 10541  001518  0E21               	movlw	33
 10542  00151A  6FEB               	movwf	_errno& (0+255),b
 10543  00151C  0E00               	movlw	0
 10544  00151E  6FB5               	movwf	?_pow& (0+255),b
 10545  001520  0E00               	movlw	0
 10546  001522  6FB6               	movwf	(?_pow+1)& (0+255),b
 10547  001524  0E00               	movlw	0
 10548  001526  6FB7               	movwf	(?_pow+2)& (0+255),b
 10549                           
 10550                           ; BSR set to: 0
 10551  001528  0012               	return	
 10552  00152A                     l1824:
 10553                           
 10554                           ; BSR set to: 0
 10555                           
 10556                           ; BSR set to: 0
 10557  00152A  51C2               	movf	pow@yi& (0+255),w,b
 10558  00152C  0B01               	andlw	1
 10559  00152E  6FC1               	movwf	pow@sign& (0+255),b
 10560                           
 10561                           ; BSR set to: 0
 10562  001530  C0B5  F08A         	movff	pow@x,___ftneg@f1
 10563  001534  C0B6  F08B         	movff	pow@x+1,___ftneg@f1+1
 10564  001538  C0B7  F08C         	movff	pow@x+2,___ftneg@f1+2
 10565  00153C  EC3D  F018         	call	___ftneg	;wreg free
 10566  001540  C08A  F0B5         	movff	?___ftneg,pow@x
 10567  001544  C08B  F0B6         	movff	?___ftneg+1,pow@x+1
 10568  001548  C08C  F0B7         	movff	?___ftneg+2,pow@x+2
 10569  00154C                     l1823:
 10570  00154C  C0B5  F0A5         	movff	pow@x,log@x
 10571  001550  C0B6  F0A6         	movff	pow@x+1,log@x+1
 10572  001554  C0B7  F0A7         	movff	pow@x+2,log@x+2
 10573  001558  EC92  F00B         	call	_log	;wreg free
 10574  00155C  C0A5  F0BB         	movff	?_log,_pow$2994
 10575  001560  C0A6  F0BC         	movff	?_log+1,_pow$2994+1
 10576  001564  C0A7  F0BD         	movff	?_log+2,_pow$2994+2
 10577  001568  C0BB  F069         	movff	_pow$2994,___ftmul@f1
 10578  00156C  C0BC  F06A         	movff	_pow$2994+1,___ftmul@f1+1
 10579  001570  C0BD  F06B         	movff	_pow$2994+2,___ftmul@f1+2
 10580  001574  C0B8  F06C         	movff	pow@y,___ftmul@f2
 10581  001578  C0B9  F06D         	movff	pow@y+1,___ftmul@f2+1
 10582  00157C  C0BA  F06E         	movff	pow@y+2,___ftmul@f2+2
 10583  001580  EC2B  F00D         	call	___ftmul	;wreg free
 10584  001584  C069  F0BE         	movff	?___ftmul,_pow$2995
 10585  001588  C06A  F0BF         	movff	?___ftmul+1,_pow$2995+1
 10586  00158C  C06B  F0C0         	movff	?___ftmul+2,_pow$2995+2
 10587  001590  C0BE  F0AC         	movff	_pow$2995,exp@x
 10588  001594  C0BF  F0AD         	movff	_pow$2995+1,exp@x+1
 10589  001598  C0C0  F0AE         	movff	_pow$2995+2,exp@x+2
 10590  00159C  EC9E  F006         	call	_exp	;wreg free
 10591  0015A0  C0AC  F0B5         	movff	?_exp,pow@x
 10592  0015A4  C0AD  F0B6         	movff	?_exp+1,pow@x+1
 10593  0015A8  C0AE  F0B7         	movff	?_exp+2,pow@x+2
 10594  0015AC  0100               	movlb	0	; () banked
 10595  0015AE  51C1               	movf	pow@sign& (0+255),w,b
 10596  0015B0  B4D8               	btfsc	status,2,c
 10597  0015B2  D00F               	goto	l1825
 10598                           
 10599                           ; BSR set to: 0
 10600  0015B4  C0B5  F08A         	movff	pow@x,___ftneg@f1
 10601  0015B8  C0B6  F08B         	movff	pow@x+1,___ftneg@f1+1
 10602  0015BC  C0B7  F08C         	movff	pow@x+2,___ftneg@f1+2
 10603  0015C0  EC3D  F018         	call	___ftneg	;wreg free
 10604  0015C4  C08A  F0B5         	movff	?___ftneg,?_pow
 10605  0015C8  C08B  F0B6         	movff	?___ftneg+1,?_pow+1
 10606  0015CC  C08C  F0B7         	movff	?___ftneg+2,?_pow+2
 10607  0015D0  0012               	return	
 10608  0015D2                     l1825:
 10609                           
 10610                           ; BSR set to: 0
 10611  0015D2  C0B5  F0B5         	movff	pow@x,?_pow
 10612  0015D6  C0B6  F0B6         	movff	pow@x+1,?_pow+1
 10613  0015DA  C0B7  F0B7         	movff	pow@x+2,?_pow+2
 10614  0015DE  0012               	return		;funcret
 10615  0015E0                     __end_of_pow:
 10616                           	opt stack 0
 10617                           tosu	equ	0xFFF
 10618                           tosh	equ	0xFFE
 10619                           tosl	equ	0xFFD
 10620                           pclath	equ	0xFFA
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           intcon	equ	0xFF2
 10628                           intcon2	equ	0xFF1
 10629                           postinc0	equ	0xFEE
 10630                           wreg	equ	0xFE8
 10631                           indf1	equ	0xFE7
 10632                           postdec1	equ	0xFE5
 10633                           fsr1h	equ	0xFE2
 10634                           fsr1l	equ	0xFE1
 10635                           indf2	equ	0xFDF
 10636                           postinc2	equ	0xFDE
 10637                           postdec2	equ	0xFDD
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _log *****************
 10643 ;; Defined at:
 10644 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  x               3   69[BANK0 ] unsigned char 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  exponent        2   72[BANK0 ] int 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  3   69[BANK0 ] int 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10658 ;;      Params:         0       3       0       0       0       0       0
 10659 ;;      Locals:         0       2       0       0       0       0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0
 10661 ;;      Totals:         0       5       0       0       0       0       0
 10662 ;;Total ram usage:        5 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    6
 10665 ;; This function calls:
 10666 ;;		___awtoft
 10667 ;;		___ftadd
 10668 ;;		___ftmul
 10669 ;;		_eval_poly
 10670 ;;		_frexp
 10671 ;; This function is called by:
 10672 ;;		_pow
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           	psect	text45
 10677  001724                     __ptext45:
 10678                           	opt stack 0
 10679  001724                     _log:
 10680                           	opt stack 19
 10681                           
 10682                           ;incstack = 0
 10683  001724  0100               	movlb	0	; () banked
 10684  001726  AFA7               	btfss	(log@x+2)& (0+255),7,b
 10685  001728  D00B               	goto	l2071
 10686                           
 10687                           ; BSR set to: 0
 10688  00172A  0E00               	movlw	0
 10689  00172C  6FEC               	movwf	(_errno+1)& (0+255),b
 10690  00172E  0E21               	movlw	33
 10691  001730  6FEB               	movwf	_errno& (0+255),b
 10692  001732  0E00               	movlw	0
 10693  001734  6FA5               	movwf	?_log& (0+255),b
 10694  001736  0E00               	movlw	0
 10695  001738  6FA6               	movwf	(?_log+1)& (0+255),b
 10696  00173A  0E00               	movlw	0
 10697  00173C  6FA7               	movwf	(?_log+2)& (0+255),b
 10698                           
 10699                           ; BSR set to: 0
 10700  00173E  0012               	return	
 10701  001740                     l2071:
 10702                           
 10703                           ; BSR set to: 0
 10704                           
 10705                           ; BSR set to: 0
 10706  001740  51A5               	movf	log@x& (0+255),w,b
 10707  001742  11A6               	iorwf	(log@x+1)& (0+255),w,b
 10708  001744  11A7               	iorwf	(log@x+2)& (0+255),w,b
 10709  001746  A4D8               	btfss	status,2,c
 10710  001748  D00B               	goto	l2073
 10711                           
 10712                           ; BSR set to: 0
 10713  00174A  0E00               	movlw	0
 10714  00174C  6FEC               	movwf	(_errno+1)& (0+255),b
 10715  00174E  0E22               	movlw	34
 10716  001750  6FEB               	movwf	_errno& (0+255),b
 10717  001752  0E00               	movlw	0
 10718  001754  6FA5               	movwf	?_log& (0+255),b
 10719  001756  0E00               	movlw	0
 10720  001758  6FA6               	movwf	(?_log+1)& (0+255),b
 10721  00175A  0E00               	movlw	0
 10722  00175C  6FA7               	movwf	(?_log+2)& (0+255),b
 10723                           
 10724                           ; BSR set to: 0
 10725  00175E  0012               	return	
 10726  001760                     l2073:
 10727                           
 10728                           ; BSR set to: 0
 10729                           
 10730                           ; BSR set to: 0
 10731  001760  0E00               	movlw	0
 10732  001762  6F6C               	movwf	___ftmul@f2& (0+255),b
 10733  001764  0E00               	movlw	0
 10734  001766  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 10735  001768  0E40               	movlw	64
 10736  00176A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 10737  00176C  0EA8               	movlw	low log@exponent
 10738  00176E  6E1B               	movwf	frexp@eptr,c
 10739  001770  0E00               	movlw	high log@exponent
 10740  001772  6E1C               	movwf	frexp@eptr+1,c
 10741  001774  C0A5  F018         	movff	log@x,frexp@value
 10742  001778  C0A6  F019         	movff	log@x+1,frexp@value+1
 10743  00177C  C0A7  F01A         	movff	log@x+2,frexp@value+2
 10744  001780  ECB8  F011         	call	_frexp	;wreg free
 10745  001784  C018  F069         	movff	?_frexp,___ftmul@f1
 10746  001788  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 10747  00178C  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 10748  001790  EC2B  F00D         	call	___ftmul	;wreg free
 10749  001794  C069  F08D         	movff	?___ftmul,___ftadd@f1
 10750  001798  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 10751  00179C  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 10752  0017A0  0E00               	movlw	0
 10753  0017A2  0100               	movlb	0	; () banked
 10754  0017A4  6F90               	movwf	___ftadd@f2& (0+255),b
 10755  0017A6  0E80               	movlw	128
 10756  0017A8  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 10757  0017AA  0EBF               	movlw	191
 10758  0017AC  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 10759  0017AE  EC5B  F009         	call	___ftadd	;wreg free
 10760  0017B2  C08D  F0A5         	movff	?___ftadd,log@x
 10761  0017B6  C08E  F0A6         	movff	?___ftadd+1,log@x+1
 10762  0017BA  C08F  F0A7         	movff	?___ftadd+2,log@x+2
 10763  0017BE  0100               	movlb	0	; () banked
 10764  0017C0  07A8               	decf	log@exponent& (0+255),f,b
 10765  0017C2  A0D8               	btfss	status,0,c
 10766  0017C4  07A9               	decf	(log@exponent+1)& (0+255),f,b
 10767                           
 10768                           ; BSR set to: 0
 10769  0017C6  C0A5  F099         	movff	log@x,eval_poly@x
 10770  0017CA  C0A6  F09A         	movff	log@x+1,eval_poly@x+1
 10771  0017CE  C0A7  F09B         	movff	log@x+2,eval_poly@x+2
 10772  0017D2  0EE1               	movlw	low log@coeff
 10773  0017D4  6F9C               	movwf	eval_poly@d& (0+255),b
 10774  0017D6  0E7A               	movlw	high log@coeff
 10775  0017D8  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 10776  0017DA  0E00               	movlw	0
 10777  0017DC  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 10778  0017DE  0E08               	movlw	8
 10779  0017E0  6F9E               	movwf	eval_poly@n& (0+255),b
 10780  0017E2  ECF8  F00E         	call	_eval_poly	;wreg free
 10781  0017E6  C099  F0A5         	movff	?_eval_poly,log@x
 10782  0017EA  C09A  F0A6         	movff	?_eval_poly+1,log@x+1
 10783  0017EE  C09B  F0A7         	movff	?_eval_poly+2,log@x+2
 10784  0017F2  0E72               	movlw	114
 10785  0017F4  0100               	movlb	0	; () banked
 10786  0017F6  6F6C               	movwf	___ftmul@f2& (0+255),b
 10787  0017F8  0E31               	movlw	49
 10788  0017FA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 10789  0017FC  0E3F               	movlw	63
 10790  0017FE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 10791  001800  C0A8  F087         	movff	log@exponent,___awtoft@c
 10792  001804  C0A9  F088         	movff	log@exponent+1,___awtoft@c+1
 10793  001808  EC4D  F017         	call	___awtoft	;wreg free
 10794  00180C  C087  F069         	movff	?___awtoft,___ftmul@f1
 10795  001810  C088  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 10796  001814  C089  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 10797  001818  EC2B  F00D         	call	___ftmul	;wreg free
 10798  00181C  C069  F08D         	movff	?___ftmul,___ftadd@f1
 10799  001820  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 10800  001824  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 10801  001828  C0A5  F090         	movff	log@x,___ftadd@f2
 10802  00182C  C0A6  F091         	movff	log@x+1,___ftadd@f2+1
 10803  001830  C0A7  F092         	movff	log@x+2,___ftadd@f2+2
 10804  001834  EC5B  F009         	call	___ftadd	;wreg free
 10805  001838  C08D  F0A5         	movff	?___ftadd,?_log
 10806  00183C  C08E  F0A6         	movff	?___ftadd+1,?_log+1
 10807  001840  C08F  F0A7         	movff	?___ftadd+2,?_log+2
 10808  001844  0012               	return	
 10809  001846                     __end_of_log:
 10810                           	opt stack 0
 10811                           tosu	equ	0xFFF
 10812                           tosh	equ	0xFFE
 10813                           tosl	equ	0xFFD
 10814                           pclath	equ	0xFFA
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           intcon2	equ	0xFF1
 10823                           postinc0	equ	0xFEE
 10824                           wreg	equ	0xFE8
 10825                           indf1	equ	0xFE7
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function _exp *****************
 10837 ;; Defined at:
 10838 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;  x               3   76[BANK0 ] int 
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;  exponent        2   82[BANK0 ] int 
 10843 ;;  sign            1   84[BANK0 ] unsigned char 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  3   76[BANK0 ] unsigned char 
 10846 ;; Registers used:
 10847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10853 ;;      Params:         0       3       0       0       0       0       0
 10854 ;;      Locals:         0       6       0       0       0       0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0
 10856 ;;      Totals:         0       9       0       0       0       0       0
 10857 ;;Total ram usage:        9 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    6
 10860 ;; This function calls:
 10861 ;;		___awtoft
 10862 ;;		___ftdiv
 10863 ;;		___ftge
 10864 ;;		___ftmul
 10865 ;;		___ftneg
 10866 ;;		___ftsub
 10867 ;;		___fttol
 10868 ;;		_eval_poly
 10869 ;;		_floor
 10870 ;;		_ldexp
 10871 ;; This function is called by:
 10872 ;;		_pow
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           	psect	text46
 10877  000D3C                     __ptext46:
 10878                           	opt stack 0
 10879  000D3C                     _exp:
 10880                           	opt stack 19
 10881                           
 10882                           ;incstack = 0
 10883  000D3C  0100               	movlb	0	; () banked
 10884  000D3E  51AC               	movf	exp@x& (0+255),w,b
 10885  000D40  11AD               	iorwf	(exp@x+1)& (0+255),w,b
 10886  000D42  11AE               	iorwf	(exp@x+2)& (0+255),w,b
 10887  000D44  A4D8               	btfss	status,2,c
 10888  000D46  D007               	goto	l2017
 10889                           
 10890                           ; BSR set to: 0
 10891  000D48  0E00               	movlw	0
 10892  000D4A  6FAC               	movwf	?_exp& (0+255),b
 10893  000D4C  0E80               	movlw	128
 10894  000D4E  6FAD               	movwf	(?_exp+1)& (0+255),b
 10895  000D50  0E3F               	movlw	63
 10896  000D52  6FAE               	movwf	(?_exp+2)& (0+255),b
 10897                           
 10898                           ; BSR set to: 0
 10899  000D54  0012               	return	
 10900  000D56                     l2017:
 10901                           
 10902                           ; BSR set to: 0
 10903                           
 10904                           ; BSR set to: 0
 10905  000D56  0E72               	movlw	114
 10906  000D58  6E18               	movwf	___ftge@ff1,c
 10907  000D5A  0E31               	movlw	49
 10908  000D5C  6E19               	movwf	___ftge@ff1+1,c
 10909  000D5E  0E44               	movlw	68
 10910  000D60  6E1A               	movwf	___ftge@ff1+2,c
 10911  000D62  C0AC  F01B         	movff	exp@x,___ftge@ff2
 10912  000D66  C0AD  F01C         	movff	exp@x+1,___ftge@ff2+1
 10913  000D6A  C0AE  F01D         	movff	exp@x+2,___ftge@ff2+2
 10914  000D6E  EC00  F012         	call	___ftge	;wreg free
 10915  000D72  B0D8               	btfsc	status,0,c
 10916  000D74  D00C               	goto	l2019
 10917  000D76  0E00               	movlw	0
 10918  000D78  0100               	movlb	0	; () banked
 10919  000D7A  6FEC               	movwf	(_errno+1)& (0+255),b
 10920  000D7C  0E22               	movlw	34
 10921  000D7E  6FEB               	movwf	_errno& (0+255),b
 10922  000D80  0EFF               	movlw	255
 10923  000D82  6FAC               	movwf	?_exp& (0+255),b
 10924  000D84  0E7F               	movlw	127
 10925  000D86  6FAD               	movwf	(?_exp+1)& (0+255),b
 10926  000D88  0E7F               	movlw	127
 10927  000D8A  6FAE               	movwf	(?_exp+2)& (0+255),b
 10928                           
 10929                           ; BSR set to: 0
 10930  000D8C  0012               	return	
 10931  000D8E                     l2019:
 10932                           
 10933                           ; BSR set to: 0
 10934  000D8E  C0AC  F018         	movff	exp@x,___ftge@ff1
 10935  000D92  C0AD  F019         	movff	exp@x+1,___ftge@ff1+1
 10936  000D96  C0AE  F01A         	movff	exp@x+2,___ftge@ff1+2
 10937  000D9A  0E49               	movlw	73
 10938  000D9C  6E1B               	movwf	___ftge@ff2,c
 10939  000D9E  0E3A               	movlw	58
 10940  000DA0  6E1C               	movwf	___ftge@ff2+1,c
 10941  000DA2  0EC4               	movlw	196
 10942  000DA4  6E1D               	movwf	___ftge@ff2+2,c
 10943  000DA6  EC00  F012         	call	___ftge	;wreg free
 10944  000DAA  B0D8               	btfsc	status,0,c
 10945  000DAC  D00C               	goto	l2020
 10946  000DAE  0E00               	movlw	0
 10947  000DB0  0100               	movlb	0	; () banked
 10948  000DB2  6FEC               	movwf	(_errno+1)& (0+255),b
 10949  000DB4  0E22               	movlw	34
 10950  000DB6  6FEB               	movwf	_errno& (0+255),b
 10951  000DB8  0E00               	movlw	0
 10952  000DBA  6FAC               	movwf	?_exp& (0+255),b
 10953  000DBC  0E00               	movlw	0
 10954  000DBE  6FAD               	movwf	(?_exp+1)& (0+255),b
 10955  000DC0  0E00               	movlw	0
 10956  000DC2  6FAE               	movwf	(?_exp+2)& (0+255),b
 10957                           
 10958                           ; BSR set to: 0
 10959  000DC4  0012               	return	
 10960  000DC6                     l2020:
 10961                           
 10962                           ; BSR set to: 0
 10963  000DC6  0100               	movlb	0	; () banked
 10964  000DC8  AFAE               	btfss	(exp@x+2)& (0+255),7,b
 10965  000DCA  D002               	goto	u7880
 10966  000DCC  0E01               	movlw	1
 10967  000DCE  D001               	goto	u7890
 10968  000DD0                     u7880:
 10969  000DD0  0E00               	movlw	0
 10970  000DD2                     u7890:
 10971  000DD2  6FB4               	movwf	exp@sign& (0+255),b
 10972                           
 10973                           ; BSR set to: 0
 10974  000DD4  51B4               	movf	exp@sign& (0+255),w,b
 10975  000DD6  B4D8               	btfsc	status,2,c
 10976  000DD8  D00E               	goto	l2021
 10977                           
 10978                           ; BSR set to: 0
 10979  000DDA  C0AC  F08A         	movff	exp@x,___ftneg@f1
 10980  000DDE  C0AD  F08B         	movff	exp@x+1,___ftneg@f1+1
 10981  000DE2  C0AE  F08C         	movff	exp@x+2,___ftneg@f1+2
 10982  000DE6  EC3D  F018         	call	___ftneg	;wreg free
 10983  000DEA  C08A  F0AC         	movff	?___ftneg,exp@x
 10984  000DEE  C08B  F0AD         	movff	?___ftneg+1,exp@x+1
 10985  000DF2  C08C  F0AE         	movff	?___ftneg+2,exp@x+2
 10986  000DF6                     l2021:
 10987  000DF6  C0AC  F069         	movff	exp@x,___ftmul@f1
 10988  000DFA  C0AD  F06A         	movff	exp@x+1,___ftmul@f1+1
 10989  000DFE  C0AE  F06B         	movff	exp@x+2,___ftmul@f1+2
 10990  000E02  0EAA               	movlw	170
 10991  000E04  0100               	movlb	0	; () banked
 10992  000E06  6F6C               	movwf	___ftmul@f2& (0+255),b
 10993  000E08  0EB8               	movlw	184
 10994  000E0A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 10995  000E0C  0E3F               	movlw	63
 10996  000E0E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 10997  000E10  EC2B  F00D         	call	___ftmul	;wreg free
 10998  000E14  C069  F0AC         	movff	?___ftmul,exp@x
 10999  000E18  C06A  F0AD         	movff	?___ftmul+1,exp@x+1
 11000  000E1C  C06B  F0AE         	movff	?___ftmul+2,exp@x+2
 11001  000E20  C0AC  F099         	movff	exp@x,floor@x
 11002  000E24  C0AD  F09A         	movff	exp@x+1,floor@x+1
 11003  000E28  C0AE  F09B         	movff	exp@x+2,floor@x+2
 11004  000E2C  EC1A  F00E         	call	_floor	;wreg free
 11005  000E30  C099  F0AF         	movff	?_floor,_exp$2996
 11006  000E34  C09A  F0B0         	movff	?_floor+1,_exp$2996+1
 11007  000E38  C09B  F0B1         	movff	?_floor+2,_exp$2996+2
 11008  000E3C  C0AF  F078         	movff	_exp$2996,___fttol@f1
 11009  000E40  C0B0  F079         	movff	_exp$2996+1,___fttol@f1+1
 11010  000E44  C0B1  F07A         	movff	_exp$2996+2,___fttol@f1+2
 11011  000E48  ECAF  F00C         	call	___fttol	;wreg free
 11012  000E4C  C078  F0B2         	movff	?___fttol,exp@exponent
 11013  000E50  C079  F0B3         	movff	?___fttol+1,exp@exponent+1
 11014  000E54  C0AC  F099         	movff	exp@x,___ftsub@f1
 11015  000E58  C0AD  F09A         	movff	exp@x+1,___ftsub@f1+1
 11016  000E5C  C0AE  F09B         	movff	exp@x+2,___ftsub@f1+2
 11017  000E60  C0B2  F087         	movff	exp@exponent,___awtoft@c
 11018  000E64  C0B3  F088         	movff	exp@exponent+1,___awtoft@c+1
 11019  000E68  EC4D  F017         	call	___awtoft	;wreg free
 11020  000E6C  C087  F09C         	movff	?___awtoft,___ftsub@f2
 11021  000E70  C088  F09D         	movff	?___awtoft+1,___ftsub@f2+1
 11022  000E74  C089  F09E         	movff	?___awtoft+2,___ftsub@f2+2
 11023  000E78  ECCF  F016         	call	___ftsub	;wreg free
 11024  000E7C  C099  F0AC         	movff	?___ftsub,exp@x
 11025  000E80  C09A  F0AD         	movff	?___ftsub+1,exp@x+1
 11026  000E84  C09B  F0AE         	movff	?___ftsub+2,exp@x+2
 11027  000E88  C0AC  F099         	movff	exp@x,eval_poly@x
 11028  000E8C  C0AD  F09A         	movff	exp@x+1,eval_poly@x+1
 11029  000E90  C0AE  F09B         	movff	exp@x+2,eval_poly@x+2
 11030  000E94  0EC3               	movlw	low exp@coeff
 11031  000E96  0100               	movlb	0	; () banked
 11032  000E98  6F9C               	movwf	eval_poly@d& (0+255),b
 11033  000E9A  0E7A               	movlw	high exp@coeff
 11034  000E9C  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
 11035  000E9E  0E00               	movlw	0
 11036  000EA0  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
 11037  000EA2  0E09               	movlw	9
 11038  000EA4  6F9E               	movwf	eval_poly@n& (0+255),b
 11039  000EA6  ECF8  F00E         	call	_eval_poly	;wreg free
 11040  000EAA  C099  F0A5         	movff	?_eval_poly,ldexp@value
 11041  000EAE  C09A  F0A6         	movff	?_eval_poly+1,ldexp@value+1
 11042  000EB2  C09B  F0A7         	movff	?_eval_poly+2,ldexp@value+2
 11043  000EB6  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
 11044  000EBA  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
 11045  000EBE  EC65  F00F         	call	_ldexp	;wreg free
 11046  000EC2  C0A5  F0AC         	movff	?_ldexp,exp@x
 11047  000EC6  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
 11048  000ECA  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
 11049  000ECE  0100               	movlb	0	; () banked
 11050  000ED0  51B4               	movf	exp@sign& (0+255),w,b
 11051  000ED2  B4D8               	btfsc	status,2,c
 11052  000ED4  D025               	goto	l2022
 11053                           
 11054                           ; BSR set to: 0
 11055  000ED6  29AC               	incf	exp@x& (0+255),w,b
 11056  000ED8  E10E               	bnz	l7344
 11057  000EDA  0E7F               	movlw	127
 11058  000EDC  19AD               	xorwf	(exp@x+1)& (0+255),w,b
 11059  000EDE  E10B               	bnz	l7344
 11060  000EE0  0E7F               	movlw	127
 11061  000EE2  19AE               	xorwf	(exp@x+2)& (0+255),w,b
 11062  000EE4  A4D8               	btfss	status,2,c
 11063  000EE6  D007               	goto	l2023
 11064                           
 11065                           ; BSR set to: 0
 11066  000EE8  0E00               	movlw	0
 11067  000EEA  6FAC               	movwf	?_exp& (0+255),b
 11068  000EEC  0E00               	movlw	0
 11069  000EEE  6FAD               	movwf	(?_exp+1)& (0+255),b
 11070  000EF0  0E00               	movlw	0
 11071  000EF2  6FAE               	movwf	(?_exp+2)& (0+255),b
 11072                           
 11073                           ; BSR set to: 0
 11074  000EF4  0012               	return	
 11075  000EF6                     l2023:
 11076  000EF6                     l7344:
 11077                           
 11078                           ; BSR set to: 0
 11079  000EF6  0E00               	movlw	0
 11080  000EF8  6E2A               	movwf	___ftdiv@f1,c
 11081  000EFA  0E80               	movlw	128
 11082  000EFC  6E2B               	movwf	___ftdiv@f1+1,c
 11083  000EFE  0E3F               	movlw	63
 11084  000F00  6E2C               	movwf	___ftdiv@f1+2,c
 11085  000F02  C0AC  F02D         	movff	exp@x,___ftdiv@f2
 11086  000F06  C0AD  F02E         	movff	exp@x+1,___ftdiv@f2+1
 11087  000F0A  C0AE  F02F         	movff	exp@x+2,___ftdiv@f2+2
 11088  000F0E  ECA6  F00D         	call	___ftdiv	;wreg free
 11089  000F12  C02A  F0AC         	movff	?___ftdiv,?_exp
 11090  000F16  C02B  F0AD         	movff	?___ftdiv+1,?_exp+1
 11091  000F1A  C02C  F0AE         	movff	?___ftdiv+2,?_exp+2
 11092  000F1E  0012               	return	
 11093  000F20                     l2022:
 11094                           
 11095                           ; BSR set to: 0
 11096  000F20  C0AC  F0AC         	movff	exp@x,?_exp
 11097  000F24  C0AD  F0AD         	movff	exp@x+1,?_exp+1
 11098  000F28  C0AE  F0AE         	movff	exp@x+2,?_exp+2
 11099  000F2C  0012               	return		;funcret
 11100  000F2E                     __end_of_exp:
 11101                           	opt stack 0
 11102                           tosu	equ	0xFFF
 11103                           tosh	equ	0xFFE
 11104                           tosl	equ	0xFFD
 11105                           pclath	equ	0xFFA
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           intcon2	equ	0xFF1
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           indf1	equ	0xFE7
 11117                           postdec1	equ	0xFE5
 11118                           fsr1h	equ	0xFE2
 11119                           fsr1l	equ	0xFE1
 11120                           indf2	equ	0xFDF
 11121                           postinc2	equ	0xFDE
 11122                           postdec2	equ	0xFDD
 11123                           fsr2h	equ	0xFDA
 11124                           fsr2l	equ	0xFD9
 11125                           status	equ	0xFD8
 11126                           
 11127 ;; *************** function _ldexp *****************
 11128 ;; Defined at:
 11129 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  value           3   69[BANK0 ] unsigned char 
 11132 ;;  newexp          2   72[BANK0 ] int 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;		None
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  3   69[BANK0 ] int 
 11137 ;; Registers used:
 11138 ;;		wreg, status,2, status,0
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11144 ;;      Params:         0       5       0       0       0       0       0
 11145 ;;      Locals:         0       0       0       0       0       0       0
 11146 ;;      Temps:          0       2       0       0       0       0       0
 11147 ;;      Totals:         0       7       0       0       0       0       0
 11148 ;;Total ram usage:        7 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    3
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_exp
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text47
 11159  001ECA                     __ptext47:
 11160                           	opt stack 0
 11161  001ECA                     _ldexp:
 11162                           	opt stack 21
 11163                           
 11164                           ;incstack = 0
 11165  001ECA  0100               	movlb	0	; () banked
 11166  001ECC  51A5               	movf	ldexp@value& (0+255),w,b
 11167  001ECE  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
 11168  001ED0  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
 11169  001ED2  A4D8               	btfss	status,2,c
 11170  001ED4  D007               	goto	l2041
 11171                           
 11172                           ; BSR set to: 0
 11173  001ED6  0E00               	movlw	0
 11174  001ED8  6FA5               	movwf	?_ldexp& (0+255),b
 11175  001EDA  0E00               	movlw	0
 11176  001EDC  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 11177  001EDE  0E00               	movlw	0
 11178  001EE0  6FA7               	movwf	(?_ldexp+2)& (0+255),b
 11179                           
 11180                           ; BSR set to: 0
 11181  001EE2  0012               	return	
 11182  001EE4                     l2041:
 11183                           
 11184                           ; BSR set to: 0
 11185                           
 11186                           ; BSR set to: 0
 11187  001EE4  51A7               	movf	(ldexp@value+2)& (0+255),w,b
 11188  001EE6  0B7F               	andlw	127
 11189  001EE8  6FAA               	movwf	??_ldexp& (0+255),b
 11190  001EEA  6BAB               	clrf	(??_ldexp+1)& (0+255),b
 11191  001EEC  90D8               	bcf	status,0,c
 11192  001EEE  37AA               	rlcf	??_ldexp& (0+255),f,b
 11193  001EF0  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
 11194  001EF2  51AA               	movf	??_ldexp& (0+255),w,b
 11195  001EF4  27A8               	addwf	ldexp@newexp& (0+255),f,b
 11196  001EF6  51AB               	movf	(??_ldexp+1)& (0+255),w,b
 11197  001EF8  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 11198  001EFA  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
 11199  001EFC  D003               	goto	u7400
 11200  001EFE  6BAA               	clrf	??_ldexp& (0+255),b
 11201  001F00  2BAA               	incf	??_ldexp& (0+255),f,b
 11202  001F02  D002               	goto	u7408
 11203  001F04                     u7400:
 11204  001F04  0100               	movlb	0	; () banked
 11205  001F06  6BAA               	clrf	??_ldexp& (0+255),b
 11206  001F08                     u7408:
 11207  001F08  51AA               	movf	??_ldexp& (0+255),w,b
 11208  001F0A  27A8               	addwf	ldexp@newexp& (0+255),f,b
 11209  001F0C  0E00               	movlw	0
 11210  001F0E  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 11211  001F10  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
 11212  001F12  D00B               	goto	l2043
 11213                           
 11214                           ; BSR set to: 0
 11215  001F14  0E00               	movlw	0
 11216  001F16  6FEC               	movwf	(_errno+1)& (0+255),b
 11217  001F18  0E22               	movlw	34
 11218  001F1A  6FEB               	movwf	_errno& (0+255),b
 11219  001F1C  0E00               	movlw	0
 11220  001F1E  6FA5               	movwf	?_ldexp& (0+255),b
 11221  001F20  0E00               	movlw	0
 11222  001F22  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 11223  001F24  0E00               	movlw	0
 11224  001F26                     L1:
 11225  001F26  6FA7               	movwf	(?_ldexp+2)& (0+255),b
 11226                           
 11227                           ; BSR set to: 0
 11228  001F28  0012               	return	
 11229  001F2A                     l2043:
 11230                           
 11231                           ; BSR set to: 0
 11232                           
 11233                           ; BSR set to: 0
 11234  001F2A  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 11235  001F2C  D015               	goto	l2045
 11236  001F2E  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
 11237  001F30  A0D8               	btfss	status,0,c
 11238  001F32  D012               	goto	l2045
 11239                           
 11240                           ; BSR set to: 0
 11241  001F34  0E00               	movlw	0
 11242  001F36  6FEC               	movwf	(_errno+1)& (0+255),b
 11243  001F38  0E22               	movlw	34
 11244  001F3A  6FEB               	movwf	_errno& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247  001F3C  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
 11248  001F3E  D006               	goto	l2046
 11249                           
 11250                           ; BSR set to: 0
 11251  001F40  0EFF               	movlw	255
 11252  001F42  6FA5               	movwf	?_ldexp& (0+255),b
 11253  001F44  0E7F               	movlw	127
 11254  001F46  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 11255  001F48  0EFF               	movlw	255
 11256  001F4A  D7ED               	goto	L1
 11257  001F4C                     l2046:
 11258                           
 11259                           ; BSR set to: 0
 11260                           
 11261                           ; BSR set to: 0
 11262  001F4C  0EFF               	movlw	255
 11263  001F4E  6FA5               	movwf	?_ldexp& (0+255),b
 11264  001F50  0E7F               	movlw	127
 11265  001F52  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 11266  001F54  0E7F               	movlw	127
 11267  001F56  D7E7               	goto	L1
 11268  001F58                     l2045:
 11269                           
 11270                           ; BSR set to: 0
 11271                           
 11272                           ; BSR set to: 0
 11273  001F58  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 11274  001F5A  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 11275  001F5C  6FAB               	movwf	(??_ldexp+1)& (0+255),b
 11276  001F5E  31A8               	rrcf	ldexp@newexp& (0+255),w,b
 11277  001F60  6FAA               	movwf	??_ldexp& (0+255),b
 11278  001F62  51A7               	movf	(ldexp@value+2)& (0+255),w,b
 11279  001F64  19AA               	xorwf	??_ldexp& (0+255),w,b
 11280  001F66  0B80               	andlw	-128
 11281  001F68  19AA               	xorwf	??_ldexp& (0+255),w,b
 11282  001F6A  6FA7               	movwf	(ldexp@value+2)& (0+255),b
 11283  001F6C  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
 11284  001F70  0E01               	movlw	1
 11285  001F72  17AA               	andwf	??_ldexp& (0+255),f,b
 11286  001F74  33AA               	rrcf	??_ldexp& (0+255),f,b
 11287  001F76  33AA               	rrcf	??_ldexp& (0+255),f,b
 11288  001F78  51A6               	movf	(ldexp@value+1)& (0+255),w,b
 11289  001F7A  19AA               	xorwf	??_ldexp& (0+255),w,b
 11290  001F7C  0B7F               	andlw	-129
 11291  001F7E  19AA               	xorwf	??_ldexp& (0+255),w,b
 11292  001F80  6FA6               	movwf	(ldexp@value+1)& (0+255),b
 11293                           
 11294                           ; BSR set to: 0
 11295                           
 11296                           ; BSR set to: 0
 11297                           
 11298                           ; BSR set to: 0
 11299  001F82  C0A5  F0A5         	movff	ldexp@value,?_ldexp
 11300  001F86  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
 11301  001F8A  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
 11302  001F8E  0012               	return	
 11303  001F90                     __end_of_ldexp:
 11304                           	opt stack 0
 11305                           tosu	equ	0xFFF
 11306                           tosh	equ	0xFFE
 11307                           tosl	equ	0xFFD
 11308                           pclath	equ	0xFFA
 11309                           tblptru	equ	0xFF8
 11310                           tblptrh	equ	0xFF7
 11311                           tblptrl	equ	0xFF6
 11312                           tablat	equ	0xFF5
 11313                           prodh	equ	0xFF4
 11314                           prodl	equ	0xFF3
 11315                           intcon	equ	0xFF2
 11316                           intcon2	equ	0xFF1
 11317                           postinc0	equ	0xFEE
 11318                           wreg	equ	0xFE8
 11319                           indf1	equ	0xFE7
 11320                           postdec1	equ	0xFE5
 11321                           fsr1h	equ	0xFE2
 11322                           fsr1l	equ	0xFE1
 11323                           indf2	equ	0xFDF
 11324                           postinc2	equ	0xFDE
 11325                           postdec2	equ	0xFDD
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8
 11329                           
 11330 ;; *************** function _floor *****************
 11331 ;; Defined at:
 11332 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;  x               3   57[BANK0 ] int 
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  i               3   60[BANK0 ] int 
 11337 ;;  expon           2   63[BANK0 ] int 
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  3   57[BANK0 ] int 
 11340 ;; Registers used:
 11341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11347 ;;      Params:         0       3       0       0       0       0       0
 11348 ;;      Locals:         0       5       0       0       0       0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0
 11350 ;;      Totals:         0       8       0       0       0       0       0
 11351 ;;Total ram usage:        8 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    5
 11354 ;; This function calls:
 11355 ;;		___altoft
 11356 ;;		___ftadd
 11357 ;;		___ftge
 11358 ;;		___fttol
 11359 ;;		_frexp
 11360 ;; This function is called by:
 11361 ;;		_exp
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           	psect	text48
 11366  001C34                     __ptext48:
 11367                           	opt stack 0
 11368  001C34                     _floor:
 11369                           	opt stack 19
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;incstack = 0
 11373  001C34  C099  F018         	movff	floor@x,frexp@value
 11374  001C38  C09A  F019         	movff	floor@x+1,frexp@value+1
 11375  001C3C  C09B  F01A         	movff	floor@x+2,frexp@value+2
 11376  001C40  0E9F               	movlw	low floor@expon
 11377  001C42  6E1B               	movwf	frexp@eptr,c
 11378  001C44  0E00               	movlw	high floor@expon
 11379  001C46  6E1C               	movwf	frexp@eptr+1,c
 11380  001C48  ECB8  F011         	call	_frexp	;wreg free
 11381  001C4C  0100               	movlb	0	; () banked
 11382  001C4E  AFA0               	btfss	(floor@expon+1)& (0+255),7,b
 11383  001C50  D010               	goto	l2028
 11384                           
 11385                           ; BSR set to: 0
 11386  001C52  AF9B               	btfss	(floor@x+2)& (0+255),7,b
 11387  001C54  D007               	goto	l2029
 11388                           
 11389                           ; BSR set to: 0
 11390  001C56  0E00               	movlw	0
 11391  001C58  6F99               	movwf	?_floor& (0+255),b
 11392  001C5A  0E80               	movlw	128
 11393  001C5C  6F9A               	movwf	(?_floor+1)& (0+255),b
 11394  001C5E  0EBF               	movlw	191
 11395  001C60  6F9B               	movwf	(?_floor+2)& (0+255),b
 11396                           
 11397                           ; BSR set to: 0
 11398  001C62  0012               	return	
 11399  001C64                     l2029:
 11400                           
 11401                           ; BSR set to: 0
 11402                           
 11403                           ; BSR set to: 0
 11404  001C64  0E00               	movlw	0
 11405  001C66  6F99               	movwf	?_floor& (0+255),b
 11406  001C68  0E00               	movlw	0
 11407  001C6A  6F9A               	movwf	(?_floor+1)& (0+255),b
 11408  001C6C  0E00               	movlw	0
 11409  001C6E  6F9B               	movwf	(?_floor+2)& (0+255),b
 11410                           
 11411                           ; BSR set to: 0
 11412  001C70  0012               	return	
 11413  001C72                     l2028:
 11414                           
 11415                           ; BSR set to: 0
 11416                           
 11417                           ; BSR set to: 0
 11418  001C72  51A0               	movf	(floor@expon+1)& (0+255),w,b
 11419  001C74  E104               	bnz	u7360
 11420  001C76  0E15               	movlw	21
 11421  001C78  5D9F               	subwf	floor@expon& (0+255),w,b
 11422  001C7A  A0D8               	btfss	status,0,c
 11423  001C7C  D007               	goto	l2031
 11424  001C7E                     u7360:
 11425                           
 11426                           ; BSR set to: 0
 11427  001C7E  C099  F099         	movff	floor@x,?_floor
 11428  001C82  C09A  F09A         	movff	floor@x+1,?_floor+1
 11429  001C86  C09B  F09B         	movff	floor@x+2,?_floor+2
 11430  001C8A  0012               	return	
 11431  001C8C                     l2031:
 11432                           
 11433                           ; BSR set to: 0
 11434                           
 11435                           ; BSR set to: 0
 11436  001C8C  C099  F078         	movff	floor@x,___fttol@f1
 11437  001C90  C09A  F079         	movff	floor@x+1,___fttol@f1+1
 11438  001C94  C09B  F07A         	movff	floor@x+2,___fttol@f1+2
 11439  001C98  ECAF  F00C         	call	___fttol	;wreg free
 11440  001C9C  C078  F020         	movff	?___fttol,___altoft@c
 11441  001CA0  C079  F021         	movff	?___fttol+1,___altoft@c+1
 11442  001CA4  C07A  F022         	movff	?___fttol+2,___altoft@c+2
 11443  001CA8  C07B  F023         	movff	?___fttol+3,___altoft@c+3
 11444  001CAC  EC10  F013         	call	___altoft	;wreg free
 11445  001CB0  C020  F09C         	movff	?___altoft,floor@i
 11446  001CB4  C021  F09D         	movff	?___altoft+1,floor@i+1
 11447  001CB8  C022  F09E         	movff	?___altoft+2,floor@i+2
 11448  001CBC  C099  F018         	movff	floor@x,___ftge@ff1
 11449  001CC0  C09A  F019         	movff	floor@x+1,___ftge@ff1+1
 11450  001CC4  C09B  F01A         	movff	floor@x+2,___ftge@ff1+2
 11451  001CC8  C09C  F01B         	movff	floor@i,___ftge@ff2
 11452  001CCC  C09D  F01C         	movff	floor@i+1,___ftge@ff2+1
 11453  001CD0  C09E  F01D         	movff	floor@i+2,___ftge@ff2+2
 11454  001CD4  EC00  F012         	call	___ftge	;wreg free
 11455  001CD8  B0D8               	btfsc	status,0,c
 11456  001CDA  D016               	goto	l2032
 11457  001CDC  C09C  F08D         	movff	floor@i,___ftadd@f1
 11458  001CE0  C09D  F08E         	movff	floor@i+1,___ftadd@f1+1
 11459  001CE4  C09E  F08F         	movff	floor@i+2,___ftadd@f1+2
 11460  001CE8  0E00               	movlw	0
 11461  001CEA  0100               	movlb	0	; () banked
 11462  001CEC  6F90               	movwf	___ftadd@f2& (0+255),b
 11463  001CEE  0E80               	movlw	128
 11464  001CF0  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 11465  001CF2  0EBF               	movlw	191
 11466  001CF4  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 11467  001CF6  EC5B  F009         	call	___ftadd	;wreg free
 11468  001CFA  C08D  F099         	movff	?___ftadd,?_floor
 11469  001CFE  C08E  F09A         	movff	?___ftadd+1,?_floor+1
 11470  001D02  C08F  F09B         	movff	?___ftadd+2,?_floor+2
 11471  001D06  0012               	return	
 11472  001D08                     l2032:
 11473  001D08  C09C  F099         	movff	floor@i,?_floor
 11474  001D0C  C09D  F09A         	movff	floor@i+1,?_floor+1
 11475  001D10  C09E  F09B         	movff	floor@i+2,?_floor+2
 11476  001D14  0012               	return		;funcret
 11477  001D16                     __end_of_floor:
 11478                           	opt stack 0
 11479                           tosu	equ	0xFFF
 11480                           tosh	equ	0xFFE
 11481                           tosl	equ	0xFFD
 11482                           pclath	equ	0xFFA
 11483                           tblptru	equ	0xFF8
 11484                           tblptrh	equ	0xFF7
 11485                           tblptrl	equ	0xFF6
 11486                           tablat	equ	0xFF5
 11487                           prodh	equ	0xFF4
 11488                           prodl	equ	0xFF3
 11489                           intcon	equ	0xFF2
 11490                           intcon2	equ	0xFF1
 11491                           postinc0	equ	0xFEE
 11492                           wreg	equ	0xFE8
 11493                           indf1	equ	0xFE7
 11494                           postdec1	equ	0xFE5
 11495                           fsr1h	equ	0xFE2
 11496                           fsr1l	equ	0xFE1
 11497                           indf2	equ	0xFDF
 11498                           postinc2	equ	0xFDE
 11499                           postdec2	equ	0xFDD
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _frexp *****************
 11505 ;; Defined at:
 11506 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;  value           3   23[COMRAM] int 
 11509 ;;  eptr            2   26[COMRAM] PTR int 
 11510 ;;		 -> log@exponent(2), floor@expon(2), 
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  3   23[COMRAM] PTR int 
 11515 ;; Registers used:
 11516 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11522 ;;      Params:         5       0       0       0       0       0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0
 11524 ;;      Temps:          2       0       0       0       0       0       0
 11525 ;;      Totals:         7       0       0       0       0       0       0
 11526 ;;Total ram usage:        7 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; Hardware stack levels required when called:    3
 11529 ;; This function calls:
 11530 ;;		Nothing
 11531 ;; This function is called by:
 11532 ;;		_floor
 11533 ;;		_log
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           	psect	text49
 11538  002370                     __ptext49:
 11539                           	opt stack 0
 11540  002370                     _frexp:
 11541                           	opt stack 21
 11542                           
 11543                           ;incstack = 0
 11544  002370  5018               	movf	frexp@value,w,c
 11545  002372  1019               	iorwf	frexp@value+1,w,c
 11546  002374  101A               	iorwf	frexp@value+2,w,c
 11547  002376  A4D8               	btfss	status,2,c
 11548  002378  D00F               	goto	l2037
 11549  00237A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11550  00237E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11551  002382  0E00               	movlw	0
 11552  002384  6EDE               	movwf	postinc2,c
 11553  002386  0E00               	movlw	0
 11554  002388  6EDD               	movwf	postdec2,c
 11555  00238A  0E00               	movlw	0
 11556  00238C  6E18               	movwf	?_frexp,c
 11557  00238E  0E00               	movlw	0
 11558  002390  6E19               	movwf	?_frexp+1,c
 11559  002392  0E00               	movlw	0
 11560  002394  6E1A               	movwf	?_frexp+2,c
 11561  002396  0012               	return	
 11562  002398                     l2037:
 11563  002398  501A               	movf	frexp@value+2,w,c
 11564  00239A  0B7F               	andlw	127
 11565  00239C  6E1D               	movwf	??_frexp& (0+255),c
 11566  00239E  6A1E               	clrf	(??_frexp+1)& (0+255),c
 11567  0023A0  90D8               	bcf	status,0,c
 11568  0023A2  361D               	rlcf	??_frexp,f,c
 11569  0023A4  361E               	rlcf	??_frexp+1,f,c
 11570  0023A6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11571  0023AA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11572  0023AE  C01D  FFDE         	movff	??_frexp,postinc2
 11573  0023B2  C01E  FFDD         	movff	??_frexp+1,postdec2
 11574  0023B6  AE19               	btfss	frexp@value+1,7,c
 11575  0023B8  D003               	goto	u7180
 11576  0023BA  6A1D               	clrf	??_frexp& (0+255),c
 11577  0023BC  2A1D               	incf	??_frexp& (0+255),f,c
 11578  0023BE  D001               	goto	u7188
 11579  0023C0                     u7180:
 11580  0023C0  6A1D               	clrf	??_frexp& (0+255),c
 11581  0023C2                     u7188:
 11582  0023C2  501D               	movf	??_frexp,w,c
 11583  0023C4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11584  0023C8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11585  0023CC  12DE               	iorwf	postinc2,f,c
 11586  0023CE  0E00               	movlw	0
 11587  0023D0  12DD               	iorwf	postdec2,f,c
 11588  0023D2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11589  0023D6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11590  0023DA  0E82               	movlw	130
 11591  0023DC  26DE               	addwf	postinc2,f,c
 11592  0023DE  0EFF               	movlw	255
 11593  0023E0  22DD               	addwfc	postdec2,f,c
 11594  0023E2  801A               	bsf	frexp@value+2,0,c
 11595  0023E4  821A               	bsf	frexp@value+2,1,c
 11596  0023E6  841A               	bsf	frexp@value+2,2,c
 11597  0023E8  861A               	bsf	frexp@value+2,3,c
 11598  0023EA  881A               	bsf	frexp@value+2,4,c
 11599  0023EC  8A1A               	bsf	frexp@value+2,5,c
 11600  0023EE  9C1A               	bcf	frexp@value+2,6,c
 11601  0023F0  9E19               	bcf	frexp@value+1,7,c
 11602  0023F2  C018  F018         	movff	frexp@value,?_frexp
 11603  0023F6  C019  F019         	movff	frexp@value+1,?_frexp+1
 11604  0023FA  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 11605  0023FE  0012               	return	
 11606  002400                     __end_of_frexp:
 11607                           	opt stack 0
 11608                           tosu	equ	0xFFF
 11609                           tosh	equ	0xFFE
 11610                           tosl	equ	0xFFD
 11611                           pclath	equ	0xFFA
 11612                           tblptru	equ	0xFF8
 11613                           tblptrh	equ	0xFF7
 11614                           tblptrl	equ	0xFF6
 11615                           tablat	equ	0xFF5
 11616                           prodh	equ	0xFF4
 11617                           prodl	equ	0xFF3
 11618                           intcon	equ	0xFF2
 11619                           intcon2	equ	0xFF1
 11620                           postinc0	equ	0xFEE
 11621                           wreg	equ	0xFE8
 11622                           indf1	equ	0xFE7
 11623                           postdec1	equ	0xFE5
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           fsr2h	equ	0xFDA
 11630                           fsr2l	equ	0xFD9
 11631                           status	equ	0xFD8
 11632                           
 11633 ;; *************** function ___fttol *****************
 11634 ;; Defined at:
 11635 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;  f1              3   24[BANK0 ] float 
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;  lval            4   34[BANK0 ] unsigned long 
 11640 ;;  exp1            1   38[BANK0 ] unsigned char 
 11641 ;;  sign1           1   33[BANK0 ] unsigned char 
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  4   24[BANK0 ] long 
 11644 ;; Registers used:
 11645 ;;		wreg, status,2, status,0
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11651 ;;      Params:         0       4       0       0       0       0       0
 11652 ;;      Locals:         0       6       0       0       0       0       0
 11653 ;;      Temps:          0       5       0       0       0       0       0
 11654 ;;      Totals:         0      15       0       0       0       0       0
 11655 ;;Total ram usage:       15 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    3
 11658 ;; This function calls:
 11659 ;;		Nothing
 11660 ;; This function is called by:
 11661 ;;		_SampleSingleChannel
 11662 ;;		_UpdateSynthFreq
 11663 ;;		_CalcSynthRegParams
 11664 ;;		_getFractionPartOfDivide
 11665 ;;		_pow
 11666 ;;		_exp
 11667 ;;		_floor
 11668 ;;		_getFractionPartOfMultiple
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           	psect	text50
 11673  00195E                     __ptext50:
 11674                           	opt stack 0
 11675  00195E                     ___fttol:
 11676                           	opt stack 23
 11677                           
 11678                           ;incstack = 0
 11679  00195E  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 11680  001962  0100               	movlb	0	; () banked
 11681  001964  6B7D               	clrf	(??___fttol+1)& (0+255),b
 11682  001966  6B7E               	clrf	(??___fttol+2)& (0+255),b
 11683  001968  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11684  00196A  377C               	rlcf	??___fttol& (0+255),f,b
 11685  00196C  E301               	bnc	u7091
 11686  00196E  817D               	bsf	(??___fttol+1)& (0+255),0,b
 11687  001970                     u7091:
 11688  001970  517C               	movf	??___fttol& (0+255),w,b
 11689  001972  6F86               	movwf	___fttol@exp1& (0+255),b
 11690  001974  5186               	movf	___fttol@exp1& (0+255),w,b
 11691  001976  A4D8               	btfss	status,2,c
 11692  001978  D009               	goto	l1684
 11693                           
 11694                           ; BSR set to: 0
 11695  00197A  0E00               	movlw	0
 11696  00197C  6F78               	movwf	?___fttol& (0+255),b
 11697  00197E  0E00               	movlw	0
 11698  001980  6F79               	movwf	(?___fttol+1)& (0+255),b
 11699  001982  0E00               	movlw	0
 11700  001984  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11701  001986  0E00               	movlw	0
 11702  001988  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11703                           
 11704                           ; BSR set to: 0
 11705  00198A  0012               	return	
 11706  00198C                     l1684:
 11707                           
 11708                           ; BSR set to: 0
 11709                           
 11710                           ; BSR set to: 0
 11711  00198C  0E17               	movlw	23
 11712  00198E  6F7C               	movwf	??___fttol& (0+255),b
 11713  001990  C078  F07D         	movff	___fttol@f1,??___fttol+1
 11714  001994  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 11715  001998  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 11716  00199C  297C               	incf	??___fttol& (0+255),w,b
 11717  00199E  6F80               	movwf	(??___fttol+4)& (0+255),b
 11718  0019A0  D004               	goto	u7110
 11719  0019A2                     u7115:
 11720  0019A2  90D8               	bcf	status,0,c
 11721  0019A4  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 11722  0019A6  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 11723  0019A8  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 11724  0019AA                     u7110:
 11725  0019AA  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 11726  0019AC  D7FA               	goto	u7115
 11727  0019AE  0100               	movlb	0	; () banked
 11728  0019B0  517D               	movf	(??___fttol+1)& (0+255),w,b
 11729  0019B2  6F81               	movwf	___fttol@sign1& (0+255),b
 11730                           
 11731                           ; BSR set to: 0
 11732  0019B4  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 11733                           
 11734                           ; BSR set to: 0
 11735  0019B6  0EFF               	movlw	255
 11736  0019B8  1778               	andwf	___fttol@f1& (0+255),f,b
 11737  0019BA  0EFF               	movlw	255
 11738  0019BC  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 11739  0019BE  0E00               	movlw	0
 11740  0019C0  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 11741                           
 11742                           ; BSR set to: 0
 11743  0019C2  5178               	movf	___fttol@f1& (0+255),w,b
 11744  0019C4  6F82               	movwf	___fttol@lval& (0+255),b
 11745  0019C6  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 11746  0019C8  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 11747  0019CA  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 11748  0019CC  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 11749  0019CE  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 11750                           
 11751                           ; BSR set to: 0
 11752  0019D0  0E8E               	movlw	142
 11753  0019D2  5F86               	subwf	___fttol@exp1& (0+255),f,b
 11754                           
 11755                           ; BSR set to: 0
 11756  0019D4  AF86               	btfss	___fttol@exp1& (0+255),7,b
 11757  0019D6  D016               	goto	l1686
 11758                           
 11759                           ; BSR set to: 0
 11760  0019D8  5186               	movf	___fttol@exp1& (0+255),w,b
 11761  0019DA  0A80               	xorlw	128
 11762  0019DC  0F8F               	addlw	143
 11763  0019DE  B0D8               	btfsc	status,0,c
 11764  0019E0  D009               	goto	l1687
 11765                           
 11766                           ; BSR set to: 0
 11767  0019E2  0E00               	movlw	0
 11768  0019E4  6F78               	movwf	?___fttol& (0+255),b
 11769  0019E6  0E00               	movlw	0
 11770  0019E8  6F79               	movwf	(?___fttol+1)& (0+255),b
 11771  0019EA  0E00               	movlw	0
 11772  0019EC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11773  0019EE  0E00               	movlw	0
 11774  0019F0  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11775                           
 11776                           ; BSR set to: 0
 11777  0019F2  0012               	return	
 11778  0019F4                     l1687:
 11779                           
 11780                           ; BSR set to: 0
 11781                           
 11782                           ; BSR set to: 0
 11783                           
 11784                           ; BSR set to: 0
 11785  0019F4  90D8               	bcf	status,0,c
 11786  0019F6  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11787  0019F8  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11788  0019FA  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11789  0019FC  3382               	rrcf	___fttol@lval& (0+255),f,b
 11790                           
 11791                           ; BSR set to: 0
 11792  0019FE  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 11793  001A00  D7F9               	goto	l1687
 11794                           
 11795                           ; BSR set to: 0
 11796  001A02  D015               	goto	u7150
 11797  001A04                     l1686:
 11798                           
 11799                           ; BSR set to: 0
 11800                           
 11801                           ; BSR set to: 0
 11802  001A04  0E17               	movlw	23
 11803  001A06  6586               	cpfsgt	___fttol@exp1& (0+255),b
 11804  001A08  D00F               	goto	l1692
 11805                           
 11806                           ; BSR set to: 0
 11807  001A0A  0E00               	movlw	0
 11808  001A0C  6F78               	movwf	?___fttol& (0+255),b
 11809  001A0E  0E00               	movlw	0
 11810  001A10  6F79               	movwf	(?___fttol+1)& (0+255),b
 11811  001A12  0E00               	movlw	0
 11812  001A14  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11813  001A16  0E00               	movlw	0
 11814  001A18  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817  001A1A  0012               	return	
 11818  001A1C                     
 11819                           ; BSR set to: 0
 11820                           
 11821                           ; BSR set to: 0
 11822  001A1C  90D8               	bcf	status,0,c
 11823  001A1E  3782               	rlcf	___fttol@lval& (0+255),f,b
 11824  001A20  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11825  001A22  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11826  001A24  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11827  001A26  0786               	decf	___fttol@exp1& (0+255),f,b
 11828  001A28                     l1692:
 11829                           
 11830                           ; BSR set to: 0
 11831                           
 11832                           ; BSR set to: 0
 11833  001A28  5186               	movf	___fttol@exp1& (0+255),w,b
 11834  001A2A  A4D8               	btfss	status,2,c
 11835  001A2C  D7F7               	goto	l1693
 11836  001A2E                     u7150:
 11837                           
 11838                           ; BSR set to: 0
 11839                           
 11840                           ; BSR set to: 0
 11841                           
 11842                           ; BSR set to: 0
 11843  001A2E  5181               	movf	___fttol@sign1& (0+255),w,b
 11844  001A30  B4D8               	btfsc	status,2,c
 11845  001A32  D008               	goto	l1695
 11846                           
 11847                           ; BSR set to: 0
 11848  001A34  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 11849  001A36  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 11850  001A38  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 11851  001A3A  6D82               	negf	___fttol@lval& (0+255),b
 11852  001A3C  0E00               	movlw	0
 11853  001A3E  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11854  001A40  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11855  001A42  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11856  001A44                     l1695:
 11857                           
 11858                           ; BSR set to: 0
 11859                           
 11860                           ; BSR set to: 0
 11861  001A44  C082  F078         	movff	___fttol@lval,?___fttol
 11862  001A48  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 11863  001A4C  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 11864  001A50  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 11865  001A54  0012               	return	
 11866  001A56                     __end_of___fttol:
 11867                           	opt stack 0
 11868                           tosu	equ	0xFFF
 11869                           tosh	equ	0xFFE
 11870                           tosl	equ	0xFFD
 11871                           pclath	equ	0xFFA
 11872                           tblptru	equ	0xFF8
 11873                           tblptrh	equ	0xFF7
 11874                           tblptrl	equ	0xFF6
 11875                           tablat	equ	0xFF5
 11876                           prodh	equ	0xFF4
 11877                           prodl	equ	0xFF3
 11878                           intcon	equ	0xFF2
 11879                           intcon2	equ	0xFF1
 11880                           postinc0	equ	0xFEE
 11881                           wreg	equ	0xFE8
 11882                           indf1	equ	0xFE7
 11883                           postdec1	equ	0xFE5
 11884                           fsr1h	equ	0xFE2
 11885                           fsr1l	equ	0xFE1
 11886                           indf2	equ	0xFDF
 11887                           postinc2	equ	0xFDE
 11888                           postdec2	equ	0xFDD
 11889                           fsr2h	equ	0xFDA
 11890                           fsr2l	equ	0xFD9
 11891                           status	equ	0xFD8
 11892                           
 11893 ;; *************** function ___ftge *****************
 11894 ;; Defined at:
 11895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 11896 ;; Parameters:    Size  Location     Type
 11897 ;;  ff1             3   23[COMRAM] float 
 11898 ;;  ff2             3   26[COMRAM] float 
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;		None               void
 11903 ;; Registers used:
 11904 ;;		wreg, status,2, status,0
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11910 ;;      Params:         6       0       0       0       0       0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0
 11912 ;;      Temps:          3       0       0       0       0       0       0
 11913 ;;      Totals:         9       0       0       0       0       0       0
 11914 ;;Total ram usage:        9 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    3
 11917 ;; This function calls:
 11918 ;;		Nothing
 11919 ;; This function is called by:
 11920 ;;		_strtod
 11921 ;;		_pow
 11922 ;;		_exp
 11923 ;;		_floor
 11924 ;;		_CheckFlashPrecentage
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           	psect	text51
 11929  002400                     __ptext51:
 11930                           	opt stack 0
 11931  002400                     ___ftge:
 11932                           	opt stack 21
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;incstack = 0
 11936  002400  AE1A               	btfss	___ftge@ff1+2,7,c
 11937  002402  D016               	goto	l1656
 11938  002404  C018  F01E         	movff	___ftge@ff1,??___ftge
 11939  002408  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 11940  00240C  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 11941  002410  1E1E               	comf	??___ftge,f,c
 11942  002412  1E1F               	comf	??___ftge+1,f,c
 11943  002414  1E20               	comf	??___ftge+2,f,c
 11944  002416  2A1E               	incf	??___ftge,f,c
 11945  002418  0E00               	movlw	0
 11946  00241A  221F               	addwfc	??___ftge+1,f,c
 11947  00241C  2220               	addwfc	??___ftge+2,f,c
 11948  00241E  0E00               	movlw	0
 11949  002420  241E               	addwf	??___ftge,w,c
 11950  002422  6E18               	movwf	___ftge@ff1,c
 11951  002424  0E00               	movlw	0
 11952  002426  201F               	addwfc	??___ftge+1,w,c
 11953  002428  6E19               	movwf	___ftge@ff1+1,c
 11954  00242A  0E80               	movlw	128
 11955  00242C  2020               	addwfc	??___ftge+2,w,c
 11956  00242E  6E1A               	movwf	___ftge@ff1+2,c
 11957  002430                     l1656:
 11958  002430  AE1D               	btfss	___ftge@ff2+2,7,c
 11959  002432  D016               	goto	l1657
 11960  002434  C01B  F01E         	movff	___ftge@ff2,??___ftge
 11961  002438  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 11962  00243C  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 11963  002440  1E1E               	comf	??___ftge,f,c
 11964  002442  1E1F               	comf	??___ftge+1,f,c
 11965  002444  1E20               	comf	??___ftge+2,f,c
 11966  002446  2A1E               	incf	??___ftge,f,c
 11967  002448  0E00               	movlw	0
 11968  00244A  221F               	addwfc	??___ftge+1,f,c
 11969  00244C  2220               	addwfc	??___ftge+2,f,c
 11970  00244E  0E00               	movlw	0
 11971  002450  241E               	addwf	??___ftge,w,c
 11972  002452  6E1B               	movwf	___ftge@ff2,c
 11973  002454  0E00               	movlw	0
 11974  002456  201F               	addwfc	??___ftge+1,w,c
 11975  002458  6E1C               	movwf	___ftge@ff2+1,c
 11976  00245A  0E80               	movlw	128
 11977  00245C  2020               	addwfc	??___ftge+2,w,c
 11978  00245E  6E1D               	movwf	___ftge@ff2+2,c
 11979  002460                     l1657:
 11980  002460  0E00               	movlw	0
 11981  002462  1A18               	xorwf	___ftge@ff1,f,c
 11982  002464  0E00               	movlw	0
 11983  002466  1A19               	xorwf	___ftge@ff1+1,f,c
 11984  002468  0E80               	movlw	128
 11985  00246A  1A1A               	xorwf	___ftge@ff1+2,f,c
 11986  00246C  0E00               	movlw	0
 11987  00246E  1A1B               	xorwf	___ftge@ff2,f,c
 11988  002470  0E00               	movlw	0
 11989  002472  1A1C               	xorwf	___ftge@ff2+1,f,c
 11990  002474  0E80               	movlw	128
 11991  002476  1A1D               	xorwf	___ftge@ff2+2,f,c
 11992  002478  501B               	movf	___ftge@ff2,w,c
 11993  00247A  5C18               	subwf	___ftge@ff1,w,c
 11994  00247C  501C               	movf	___ftge@ff2+1,w,c
 11995  00247E  5819               	subwfb	___ftge@ff1+1,w,c
 11996  002480  501D               	movf	___ftge@ff2+2,w,c
 11997  002482  581A               	subwfb	___ftge@ff1+2,w,c
 11998  002484  B0D8               	btfsc	status,0,c
 11999  002486  D002               	goto	l6640
 12000  002488  90D8               	bcf	status,0,c
 12001  00248A  0012               	return	
 12002  00248C                     l6640:
 12003  00248C  80D8               	bsf	status,0,c
 12004  00248E  0012               	return	
 12005  002490                     __end_of___ftge:
 12006                           	opt stack 0
 12007                           tosu	equ	0xFFF
 12008                           tosh	equ	0xFFE
 12009                           tosl	equ	0xFFD
 12010                           pclath	equ	0xFFA
 12011                           tblptru	equ	0xFF8
 12012                           tblptrh	equ	0xFF7
 12013                           tblptrl	equ	0xFF6
 12014                           tablat	equ	0xFF5
 12015                           prodh	equ	0xFF4
 12016                           prodl	equ	0xFF3
 12017                           intcon	equ	0xFF2
 12018                           intcon2	equ	0xFF1
 12019                           postinc0	equ	0xFEE
 12020                           wreg	equ	0xFE8
 12021                           indf1	equ	0xFE7
 12022                           postdec1	equ	0xFE5
 12023                           fsr1h	equ	0xFE2
 12024                           fsr1l	equ	0xFE1
 12025                           indf2	equ	0xFDF
 12026                           postinc2	equ	0xFDE
 12027                           postdec2	equ	0xFDD
 12028                           fsr2h	equ	0xFDA
 12029                           fsr2l	equ	0xFD9
 12030                           status	equ	0xFD8
 12031                           
 12032 ;; *************** function ___altoft *****************
 12033 ;; Defined at:
 12034 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;  c               4   31[COMRAM] long 
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;  sign            1   40[COMRAM] unsigned char 
 12039 ;;  exp             1   39[COMRAM] unsigned char 
 12040 ;; Return value:  Size  Location     Type
 12041 ;;                  3   31[COMRAM] float 
 12042 ;; Registers used:
 12043 ;;		wreg, status,2, status,0, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 0/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12049 ;;      Params:         4       0       0       0       0       0       0
 12050 ;;      Locals:         2       0       0       0       0       0       0
 12051 ;;      Temps:          4       0       0       0       0       0       0
 12052 ;;      Totals:        10       0       0       0       0       0       0
 12053 ;;Total ram usage:       10 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    4
 12056 ;; This function calls:
 12057 ;;		___ftpack
 12058 ;; This function is called by:
 12059 ;;		_CalcSynthRegParams
 12060 ;;		_strtod
 12061 ;;		_floor
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           	psect	text52
 12066  002620                     __ptext52:
 12067                           	opt stack 0
 12068  002620                     ___altoft:
 12069                           	opt stack 20
 12070                           
 12071                           ;incstack = 0
 12072  002620  0E00               	movlw	0
 12073  002622  6E29               	movwf	___altoft@sign,c
 12074  002624  0E8E               	movlw	142
 12075  002626  6E28               	movwf	___altoft@exp,c
 12076  002628  AE23               	btfss	___altoft@c+3,7,c
 12077  00262A  D011               	goto	l1393
 12078  00262C  1E23               	comf	___altoft@c+3,f,c
 12079  00262E  1E22               	comf	___altoft@c+2,f,c
 12080  002630  1E21               	comf	___altoft@c+1,f,c
 12081  002632  6C20               	negf	___altoft@c,c
 12082  002634  0E00               	movlw	0
 12083  002636  2221               	addwfc	___altoft@c+1,f,c
 12084  002638  2222               	addwfc	___altoft@c+2,f,c
 12085  00263A  2223               	addwfc	___altoft@c+3,f,c
 12086  00263C  0E01               	movlw	1
 12087  00263E  6E29               	movwf	___altoft@sign,c
 12088  002640  D006               	goto	l1393
 12089  002642  90D8               	bcf	status,0,c
 12090  002644  3223               	rrcf	___altoft@c+3,f,c
 12091  002646  3222               	rrcf	___altoft@c+2,f,c
 12092  002648  3221               	rrcf	___altoft@c+1,f,c
 12093  00264A  3220               	rrcf	___altoft@c,f,c
 12094  00264C  2A28               	incf	___altoft@exp,f,c
 12095  00264E                     l1393:
 12096  00264E  0E00               	movlw	0
 12097  002650  1420               	andwf	___altoft@c,w,c
 12098  002652  6E24               	movwf	??___altoft& (0+255),c
 12099  002654  0E00               	movlw	0
 12100  002656  1421               	andwf	___altoft@c+1,w,c
 12101  002658  6E25               	movwf	(??___altoft+1)& (0+255),c
 12102  00265A  0E00               	movlw	0
 12103  00265C  1422               	andwf	___altoft@c+2,w,c
 12104  00265E  6E26               	movwf	(??___altoft+2)& (0+255),c
 12105  002660  0EFF               	movlw	255
 12106  002662  1423               	andwf	___altoft@c+3,w,c
 12107  002664  6E27               	movwf	(??___altoft+3)& (0+255),c
 12108  002666  5024               	movf	??___altoft,w,c
 12109  002668  1025               	iorwf	??___altoft+1,w,c
 12110  00266A  1026               	iorwf	??___altoft+2,w,c
 12111  00266C  1027               	iorwf	??___altoft+3,w,c
 12112  00266E  A4D8               	btfss	status,2,c
 12113  002670  D7E8               	goto	l1394
 12114  002672  C020  F018         	movff	___altoft@c,___ftpack@arg
 12115  002676  C021  F019         	movff	___altoft@c+1,___ftpack@arg+1
 12116  00267A  C022  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 12117  00267E  C028  F01B         	movff	___altoft@exp,___ftpack@exp
 12118  002682  C029  F01C         	movff	___altoft@sign,___ftpack@sign
 12119  002686  EC7F  F010         	call	___ftpack	;wreg free
 12120  00268A  C018  F020         	movff	?___ftpack,?___altoft
 12121  00268E  C019  F021         	movff	?___ftpack+1,?___altoft+1
 12122  002692  C01A  F022         	movff	?___ftpack+2,?___altoft+2
 12123  002696  0012               	return	
 12124  002698                     __end_of___altoft:
 12125                           	opt stack 0
 12126                           tosu	equ	0xFFF
 12127                           tosh	equ	0xFFE
 12128                           tosl	equ	0xFFD
 12129                           pclath	equ	0xFFA
 12130                           tblptru	equ	0xFF8
 12131                           tblptrh	equ	0xFF7
 12132                           tblptrl	equ	0xFF6
 12133                           tablat	equ	0xFF5
 12134                           prodh	equ	0xFF4
 12135                           prodl	equ	0xFF3
 12136                           intcon	equ	0xFF2
 12137                           intcon2	equ	0xFF1
 12138                           postinc0	equ	0xFEE
 12139                           wreg	equ	0xFE8
 12140                           indf1	equ	0xFE7
 12141                           postdec1	equ	0xFE5
 12142                           fsr1h	equ	0xFE2
 12143                           fsr1l	equ	0xFE1
 12144                           indf2	equ	0xFDF
 12145                           postinc2	equ	0xFDE
 12146                           postdec2	equ	0xFDD
 12147                           fsr2h	equ	0xFDA
 12148                           fsr2l	equ	0xFD9
 12149                           status	equ	0xFD8
 12150                           
 12151 ;; *************** function _eval_poly *****************
 12152 ;; Defined at:
 12153 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;  x               3   57[BANK0 ] float 
 12156 ;;  d               2   60[BANK0 ] PTR const 
 12157 ;;		 -> log@coeff(27), exp@coeff(30), 
 12158 ;;  n               2   62[BANK0 ] int 
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;  res             3   66[BANK0 ] int 
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  3   57[BANK0 ] int 
 12163 ;; Registers used:
 12164 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12170 ;;      Params:         0       7       0       0       0       0       0
 12171 ;;      Locals:         0       3       0       0       0       0       0
 12172 ;;      Temps:          0       2       0       0       0       0       0
 12173 ;;      Totals:         0      12       0       0       0       0       0
 12174 ;;Total ram usage:       12 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    5
 12177 ;; This function calls:
 12178 ;;		___ftadd
 12179 ;;		___ftmul
 12180 ;;		___wmul
 12181 ;; This function is called by:
 12182 ;;		_exp
 12183 ;;		_log
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           	psect	text53
 12188  001DF0                     __ptext53:
 12189                           	opt stack 0
 12190  001DF0                     _eval_poly:
 12191                           	opt stack 19
 12192                           
 12193                           ;incstack = 0
 12194  001DF0  C09E  F018         	movff	eval_poly@n,___wmul@multiplier
 12195  001DF4  C09F  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 12196  001DF8  0E00               	movlw	0
 12197  001DFA  6E1B               	movwf	___wmul@multiplicand+1,c
 12198  001DFC  0E03               	movlw	3
 12199  001DFE  6E1A               	movwf	___wmul@multiplicand,c
 12200  001E00  EC2A  F018         	call	___wmul	;wreg free
 12201  001E04  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 12202  001E08  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 12203  001E0C  5018               	movf	?___wmul,w,c
 12204  001E0E  0100               	movlb	0	; () banked
 12205  001E10  27A0               	addwf	??_eval_poly& (0+255),f,b
 12206  001E12  5019               	movf	?___wmul+1,w,c
 12207  001E14  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 12208  001E16  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 12209  001E1A  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 12210  001E1E                     	if	0	;tblptru may be non-zero
 12211  001E1E                     	endif
 12212  001E1E                     	if	0	;tblptru may be non-zero
 12213  001E1E                     	endif
 12214  001E1E  0009               	tblrd		*+
 12215  001E20  CFF5 F0A2          	movff	tablat,eval_poly@res
 12216  001E24  0009               	tblrd		*+
 12217  001E26  CFF5 F0A3          	movff	tablat,eval_poly@res+1
 12218  001E2A  000A               	tblrd		*-
 12219  001E2C  CFF5 F0A4          	movff	tablat,eval_poly@res+2
 12220  001E30  D040               	goto	l2079
 12221  001E32                     
 12222                           ; BSR set to: 0
 12223                           
 12224                           ; BSR set to: 0
 12225  001E32  C0A2  F06C         	movff	eval_poly@res,___ftmul@f2
 12226  001E36  C0A3  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 12227  001E3A  C0A4  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 12228  001E3E  C099  F069         	movff	eval_poly@x,___ftmul@f1
 12229  001E42  C09A  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 12230  001E46  C09B  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 12231  001E4A  EC2B  F00D         	call	___ftmul	;wreg free
 12232  001E4E  C069  F08D         	movff	?___ftmul,___ftadd@f1
 12233  001E52  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 12234  001E56  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 12235  001E5A  0E00               	movlw	0
 12236  001E5C  6E1B               	movwf	___wmul@multiplicand+1,c
 12237  001E5E  0E03               	movlw	3
 12238  001E60  6E1A               	movwf	___wmul@multiplicand,c
 12239  001E62  0100               	movlb	0	; () banked
 12240  001E64  079E               	decf	eval_poly@n& (0+255),f,b
 12241  001E66  A0D8               	btfss	status,0,c
 12242  001E68  079F               	decf	(eval_poly@n+1)& (0+255),f,b
 12243  001E6A  C09E  F018         	movff	eval_poly@n,___wmul@multiplier
 12244  001E6E  C09F  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 12245  001E72  EC2A  F018         	call	___wmul	;wreg free
 12246  001E76  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 12247  001E7A  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 12248  001E7E  5018               	movf	?___wmul,w,c
 12249  001E80  0100               	movlb	0	; () banked
 12250  001E82  27A0               	addwf	??_eval_poly& (0+255),f,b
 12251  001E84  5019               	movf	?___wmul+1,w,c
 12252  001E86  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 12253  001E88  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 12254  001E8C  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 12255  001E90                     	if	0	;tblptru may be non-zero
 12256  001E90                     	endif
 12257  001E90                     	if	0	;tblptru may be non-zero
 12258  001E90                     	endif
 12259  001E90  0009               	tblrd		*+
 12260  001E92  CFF5 F090          	movff	tablat,___ftadd@f2
 12261  001E96  0009               	tblrd		*+
 12262  001E98  CFF5 F091          	movff	tablat,___ftadd@f2+1
 12263  001E9C  000A               	tblrd		*-
 12264  001E9E  CFF5 F092          	movff	tablat,___ftadd@f2+2
 12265  001EA2  EC5B  F009         	call	___ftadd	;wreg free
 12266  001EA6  C08D  F0A2         	movff	?___ftadd,eval_poly@res
 12267  001EAA  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
 12268  001EAE  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
 12269  001EB2                     l2079:
 12270  001EB2  0100               	movlb	0	; () banked
 12271  001EB4  519E               	movf	eval_poly@n& (0+255),w,b
 12272  001EB6  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
 12273  001EB8  A4D8               	btfss	status,2,c
 12274  001EBA  D7BB               	goto	l2080
 12275                           
 12276                           ; BSR set to: 0
 12277  001EBC  C0A2  F099         	movff	eval_poly@res,?_eval_poly
 12278  001EC0  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
 12279  001EC4  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
 12280                           
 12281                           ; BSR set to: 0
 12282  001EC8  0012               	return		;funcret
 12283  001ECA                     __end_of_eval_poly:
 12284                           	opt stack 0
 12285                           tosu	equ	0xFFF
 12286                           tosh	equ	0xFFE
 12287                           tosl	equ	0xFFD
 12288                           pclath	equ	0xFFA
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           intcon2	equ	0xFF1
 12297                           postinc0	equ	0xFEE
 12298                           wreg	equ	0xFE8
 12299                           indf1	equ	0xFE7
 12300                           postdec1	equ	0xFE5
 12301                           fsr1h	equ	0xFE2
 12302                           fsr1l	equ	0xFE1
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           fsr2h	equ	0xFDA
 12307                           fsr2l	equ	0xFD9
 12308                           status	equ	0xFD8
 12309                           
 12310 ;; *************** function ___wmul *****************
 12311 ;; Defined at:
 12312 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;  multiplier      2   23[COMRAM] unsigned int 
 12315 ;;  multiplicand    2   25[COMRAM] unsigned int 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  product         2   27[COMRAM] unsigned int 
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  2   23[COMRAM] unsigned int 
 12320 ;; Registers used:
 12321 ;;		wreg, status,2, status,0, prodl, prodh
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12327 ;;      Params:         4       0       0       0       0       0       0
 12328 ;;      Locals:         2       0       0       0       0       0       0
 12329 ;;      Temps:          0       0       0       0       0       0       0
 12330 ;;      Totals:         6       0       0       0       0       0       0
 12331 ;;Total ram usage:        6 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    3
 12334 ;; This function calls:
 12335 ;;		Nothing
 12336 ;; This function is called by:
 12337 ;;		_eval_poly
 12338 ;; This function uses a non-reentrant model
 12339 ;;
 12340                           
 12341                           	psect	text54
 12342  003054                     __ptext54:
 12343                           	opt stack 0
 12344  003054                     ___wmul:
 12345                           	opt stack 20
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;incstack = 0
 12349  003054  5018               	movf	___wmul@multiplier,w,c
 12350  003056  021A               	mulwf	___wmul@multiplicand,c
 12351  003058  CFF3 F01C          	movff	prodl,___wmul@product
 12352  00305C  CFF4 F01D          	movff	prodh,___wmul@product+1
 12353  003060  5018               	movf	___wmul@multiplier,w,c
 12354  003062  021B               	mulwf	___wmul@multiplicand+1,c
 12355  003064  50F3               	movf	prodl,w,c
 12356  003066  261D               	addwf	___wmul@product+1,f,c
 12357  003068  5019               	movf	___wmul@multiplier+1,w,c
 12358  00306A  021A               	mulwf	___wmul@multiplicand,c
 12359  00306C  50F3               	movf	prodl,w,c
 12360  00306E  261D               	addwf	___wmul@product+1,f,c
 12361  003070  C01C  F018         	movff	___wmul@product,?___wmul
 12362  003074  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 12363  003078  0012               	return	
 12364  00307A                     __end_of___wmul:
 12365                           	opt stack 0
 12366                           tosu	equ	0xFFF
 12367                           tosh	equ	0xFFE
 12368                           tosl	equ	0xFFD
 12369                           pclath	equ	0xFFA
 12370                           tblptru	equ	0xFF8
 12371                           tblptrh	equ	0xFF7
 12372                           tblptrl	equ	0xFF6
 12373                           tablat	equ	0xFF5
 12374                           prodh	equ	0xFF4
 12375                           prodl	equ	0xFF3
 12376                           intcon	equ	0xFF2
 12377                           intcon2	equ	0xFF1
 12378                           postinc0	equ	0xFEE
 12379                           wreg	equ	0xFE8
 12380                           indf1	equ	0xFE7
 12381                           postdec1	equ	0xFE5
 12382                           fsr1h	equ	0xFE2
 12383                           fsr1l	equ	0xFE1
 12384                           indf2	equ	0xFDF
 12385                           postinc2	equ	0xFDE
 12386                           postdec2	equ	0xFDD
 12387                           fsr2h	equ	0xFDA
 12388                           fsr2l	equ	0xFD9
 12389                           status	equ	0xFD8
 12390                           
 12391 ;; *************** function ___ftmul *****************
 12392 ;; Defined at:
 12393 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;  f1              3    9[BANK0 ] float 
 12396 ;;  f2              3   12[BANK0 ] float 
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 12399 ;;  sign            1   23[BANK0 ] unsigned char 
 12400 ;;  cntr            1   22[BANK0 ] unsigned char 
 12401 ;;  exp             1   18[BANK0 ] unsigned char 
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  3    9[BANK0 ] float 
 12404 ;; Registers used:
 12405 ;;		wreg, status,2, status,0, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12411 ;;      Params:         0       6       0       0       0       0       0
 12412 ;;      Locals:         0       6       0       0       0       0       0
 12413 ;;      Temps:          0       3       0       0       0       0       0
 12414 ;;      Totals:         0      15       0       0       0       0       0
 12415 ;;Total ram usage:       15 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    4
 12418 ;; This function calls:
 12419 ;;		___ftpack
 12420 ;; This function is called by:
 12421 ;;		_SampleSingleChannel
 12422 ;;		_CalcSynthRegParams
 12423 ;;		_strtod
 12424 ;;		_pow
 12425 ;;		_exp
 12426 ;;		_log
 12427 ;;		_eval_poly
 12428 ;;		_CheckFlashPrecentage
 12429 ;;		_getFractionPartOfMultiple
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           	psect	text55
 12434  001A56                     __ptext55:
 12435                           	opt stack 0
 12436  001A56                     ___ftmul:
 12437                           	opt stack 20
 12438                           
 12439                           ;incstack = 0
 12440  001A56  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 12441  001A5A  0100               	movlb	0	; () banked
 12442  001A5C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 12443  001A5E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 12444  001A60  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 12445  001A62  376F               	rlcf	??___ftmul& (0+255),f,b
 12446  001A64  E301               	bnc	u7001
 12447  001A66  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 12448  001A68                     u7001:
 12449  001A68  516F               	movf	??___ftmul& (0+255),w,b
 12450  001A6A  6F72               	movwf	___ftmul@exp& (0+255),b
 12451  001A6C  5172               	movf	___ftmul@exp& (0+255),w,b
 12452  001A6E  A4D8               	btfss	status,2,c
 12453  001A70  D007               	goto	l1663
 12454                           
 12455                           ; BSR set to: 0
 12456  001A72  0E00               	movlw	0
 12457  001A74  6F69               	movwf	?___ftmul& (0+255),b
 12458  001A76  0E00               	movlw	0
 12459  001A78  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 12460  001A7A  0E00               	movlw	0
 12461  001A7C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 12462                           
 12463                           ; BSR set to: 0
 12464  001A7E  0012               	return	
 12465  001A80                     l1663:
 12466                           
 12467                           ; BSR set to: 0
 12468                           
 12469                           ; BSR set to: 0
 12470  001A80  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 12471  001A84  6B70               	clrf	(??___ftmul+1)& (0+255),b
 12472  001A86  6B71               	clrf	(??___ftmul+2)& (0+255),b
 12473  001A88  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 12474  001A8A  376F               	rlcf	??___ftmul& (0+255),f,b
 12475  001A8C  E301               	bnc	u7021
 12476  001A8E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 12477  001A90                     u7021:
 12478  001A90  516F               	movf	??___ftmul& (0+255),w,b
 12479  001A92  6F77               	movwf	___ftmul@sign& (0+255),b
 12480  001A94  5177               	movf	___ftmul@sign& (0+255),w,b
 12481  001A96  A4D8               	btfss	status,2,c
 12482  001A98  D007               	goto	l1665
 12483                           
 12484                           ; BSR set to: 0
 12485  001A9A  0E00               	movlw	0
 12486  001A9C  6F69               	movwf	?___ftmul& (0+255),b
 12487  001A9E  0E00               	movlw	0
 12488  001AA0  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 12489  001AA2  0E00               	movlw	0
 12490  001AA4  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 12491                           
 12492                           ; BSR set to: 0
 12493  001AA6  0012               	return	
 12494  001AA8                     l1665:
 12495                           
 12496                           ; BSR set to: 0
 12497                           
 12498                           ; BSR set to: 0
 12499  001AA8  5177               	movf	___ftmul@sign& (0+255),w,b
 12500  001AAA  0F7B               	addlw	123
 12501  001AAC  2772               	addwf	___ftmul@exp& (0+255),f,b
 12502                           
 12503                           ; BSR set to: 0
 12504  001AAE  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 12505  001AB2  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12506  001AB4  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 12507  001AB6  0E80               	movlw	128
 12508  001AB8  1777               	andwf	___ftmul@sign& (0+255),f,b
 12509                           
 12510                           ; BSR set to: 0
 12511  001ABA  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 12512                           
 12513                           ; BSR set to: 0
 12514  001ABC  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 12515                           
 12516                           ; BSR set to: 0
 12517  001ABE  0EFF               	movlw	255
 12518  001AC0  176C               	andwf	___ftmul@f2& (0+255),f,b
 12519  001AC2  0EFF               	movlw	255
 12520  001AC4  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 12521  001AC6  0E00               	movlw	0
 12522  001AC8  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 12523                           
 12524                           ; BSR set to: 0
 12525  001ACA  0E00               	movlw	0
 12526  001ACC  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 12527  001ACE  0E00               	movlw	0
 12528  001AD0  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12529  001AD2  0E00               	movlw	0
 12530  001AD4  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12531                           
 12532                           ; BSR set to: 0
 12533  001AD6  0E07               	movlw	7
 12534  001AD8  6F76               	movwf	___ftmul@cntr& (0+255),b
 12535  001ADA                     
 12536                           ; BSR set to: 0
 12537                           
 12538                           ; BSR set to: 0
 12539  001ADA  A169               	btfss	___ftmul@f1& (0+255),0,b
 12540  001ADC  D006               	goto	l1667
 12541                           
 12542                           ; BSR set to: 0
 12543  001ADE  516C               	movf	___ftmul@f2& (0+255),w,b
 12544  001AE0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12545  001AE2  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12546  001AE4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12547  001AE6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12548  001AE8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12549  001AEA                     l1667:
 12550                           
 12551                           ; BSR set to: 0
 12552                           
 12553                           ; BSR set to: 0
 12554  001AEA  90D8               	bcf	status,0,c
 12555  001AEC  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12556  001AEE  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12557  001AF0  3369               	rrcf	___ftmul@f1& (0+255),f,b
 12558  001AF2  90D8               	bcf	status,0,c
 12559  001AF4  376C               	rlcf	___ftmul@f2& (0+255),f,b
 12560  001AF6  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 12561  001AF8  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 12562                           
 12563                           ; BSR set to: 0
 12564  001AFA  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 12565  001AFC  D7EE               	goto	l1666
 12566                           
 12567                           ; BSR set to: 0
 12568                           
 12569                           ; BSR set to: 0
 12570  001AFE  0E09               	movlw	9
 12571  001B00  6F76               	movwf	___ftmul@cntr& (0+255),b
 12572  001B02                     
 12573                           ; BSR set to: 0
 12574                           
 12575                           ; BSR set to: 0
 12576  001B02  A169               	btfss	___ftmul@f1& (0+255),0,b
 12577  001B04  D006               	goto	l1670
 12578                           
 12579                           ; BSR set to: 0
 12580  001B06  516C               	movf	___ftmul@f2& (0+255),w,b
 12581  001B08  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12582  001B0A  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 12583  001B0C  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12584  001B0E  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 12585  001B10  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12586  001B12                     l1670:
 12587                           
 12588                           ; BSR set to: 0
 12589                           
 12590                           ; BSR set to: 0
 12591  001B12  90D8               	bcf	status,0,c
 12592  001B14  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12593  001B16  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12594  001B18  3369               	rrcf	___ftmul@f1& (0+255),f,b
 12595  001B1A  90D8               	bcf	status,0,c
 12596  001B1C  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12597  001B1E  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12598  001B20  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12599                           
 12600                           ; BSR set to: 0
 12601  001B22  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 12602  001B24  D7EE               	goto	l1669
 12603                           
 12604                           ; BSR set to: 0
 12605                           
 12606                           ; BSR set to: 0
 12607  001B26  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 12608  001B2A  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12609  001B2E  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12610  001B32  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 12611  001B36  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 12612  001B3A  EC7F  F010         	call	___ftpack	;wreg free
 12613  001B3E  C018  F069         	movff	?___ftpack,?___ftmul
 12614  001B42  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 12615  001B46  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 12616  001B4A  0012               	return	
 12617  001B4C                     __end_of___ftmul:
 12618                           	opt stack 0
 12619                           tosu	equ	0xFFF
 12620                           tosh	equ	0xFFE
 12621                           tosl	equ	0xFFD
 12622                           pclath	equ	0xFFA
 12623                           tblptru	equ	0xFF8
 12624                           tblptrh	equ	0xFF7
 12625                           tblptrl	equ	0xFF6
 12626                           tablat	equ	0xFF5
 12627                           prodh	equ	0xFF4
 12628                           prodl	equ	0xFF3
 12629                           intcon	equ	0xFF2
 12630                           intcon2	equ	0xFF1
 12631                           postinc0	equ	0xFEE
 12632                           wreg	equ	0xFE8
 12633                           indf1	equ	0xFE7
 12634                           postdec1	equ	0xFE5
 12635                           fsr1h	equ	0xFE2
 12636                           fsr1l	equ	0xFE1
 12637                           indf2	equ	0xFDF
 12638                           postinc2	equ	0xFDE
 12639                           postdec2	equ	0xFDD
 12640                           fsr2h	equ	0xFDA
 12641                           fsr2l	equ	0xFD9
 12642                           status	equ	0xFD8
 12643                           
 12644 ;; *************** function ___ftsub *****************
 12645 ;; Defined at:
 12646 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  f1              3   57[BANK0 ] float 
 12649 ;;  f2              3   60[BANK0 ] float 
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;		None
 12652 ;; Return value:  Size  Location     Type
 12653 ;;                  3   57[BANK0 ] float 
 12654 ;; Registers used:
 12655 ;;		wreg, status,2, status,0, cstack
 12656 ;; Tracked objects:
 12657 ;;		On entry : 0/0
 12658 ;;		On exit  : 0/0
 12659 ;;		Unchanged: 0/0
 12660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12661 ;;      Params:         0       6       0       0       0       0       0
 12662 ;;      Locals:         0       0       0       0       0       0       0
 12663 ;;      Temps:          0       0       0       0       0       0       0
 12664 ;;      Totals:         0       6       0       0       0       0       0
 12665 ;;Total ram usage:        6 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; Hardware stack levels required when called:    5
 12668 ;; This function calls:
 12669 ;;		___ftadd
 12670 ;; This function is called by:
 12671 ;;		_exp
 12672 ;; This function uses a non-reentrant model
 12673 ;;
 12674                           
 12675                           	psect	text56
 12676  002D9E                     __ptext56:
 12677                           	opt stack 0
 12678  002D9E                     ___ftsub:
 12679                           	opt stack 19
 12680                           
 12681                           ;incstack = 0
 12682  002D9E  0100               	movlb	0	; () banked
 12683  002DA0  519C               	movf	___ftsub@f2& (0+255),w,b
 12684  002DA2  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 12685  002DA4  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 12686  002DA6  B4D8               	btfsc	status,2,c
 12687  002DA8  D006               	goto	l1680
 12688                           
 12689                           ; BSR set to: 0
 12690  002DAA  0E00               	movlw	0
 12691  002DAC  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 12692  002DAE  0E00               	movlw	0
 12693  002DB0  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 12694  002DB2  0E80               	movlw	128
 12695  002DB4  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 12696  002DB6                     l1680:
 12697                           
 12698                           ; BSR set to: 0
 12699                           
 12700                           ; BSR set to: 0
 12701  002DB6  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 12702  002DBA  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 12703  002DBE  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 12704  002DC2  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 12705  002DC6  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 12706  002DCA  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 12707  002DCE  EC5B  F009         	call	___ftadd	;wreg free
 12708  002DD2  C08D  F099         	movff	?___ftadd,?___ftsub
 12709  002DD6  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 12710  002DDA  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 12711  002DDE  0012               	return	
 12712  002DE0                     __end_of___ftsub:
 12713                           	opt stack 0
 12714                           tosu	equ	0xFFF
 12715                           tosh	equ	0xFFE
 12716                           tosl	equ	0xFFD
 12717                           pclath	equ	0xFFA
 12718                           tblptru	equ	0xFF8
 12719                           tblptrh	equ	0xFF7
 12720                           tblptrl	equ	0xFF6
 12721                           tablat	equ	0xFF5
 12722                           prodh	equ	0xFF4
 12723                           prodl	equ	0xFF3
 12724                           intcon	equ	0xFF2
 12725                           intcon2	equ	0xFF1
 12726                           postinc0	equ	0xFEE
 12727                           wreg	equ	0xFE8
 12728                           indf1	equ	0xFE7
 12729                           postdec1	equ	0xFE5
 12730                           fsr1h	equ	0xFE2
 12731                           fsr1l	equ	0xFE1
 12732                           indf2	equ	0xFDF
 12733                           postinc2	equ	0xFDE
 12734                           postdec2	equ	0xFDD
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function ___ftadd *****************
 12740 ;; Defined at:
 12741 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  f1              3   45[BANK0 ] float 
 12744 ;;  f2              3   48[BANK0 ] float 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  exp1            1   56[BANK0 ] unsigned char 
 12747 ;;  exp2            1   55[BANK0 ] unsigned char 
 12748 ;;  sign            1   54[BANK0 ] unsigned char 
 12749 ;; Return value:  Size  Location     Type
 12750 ;;                  3   45[BANK0 ] float 
 12751 ;; Registers used:
 12752 ;;		wreg, status,2, status,0, cstack
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12758 ;;      Params:         0       6       0       0       0       0       0
 12759 ;;      Locals:         0       3       0       0       0       0       0
 12760 ;;      Temps:          0       3       0       0       0       0       0
 12761 ;;      Totals:         0      12       0       0       0       0       0
 12762 ;;Total ram usage:       12 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    4
 12765 ;; This function calls:
 12766 ;;		___ftpack
 12767 ;; This function is called by:
 12768 ;;		_getFractionPartOfDivide
 12769 ;;		___ftsub
 12770 ;;		_floor
 12771 ;;		_log
 12772 ;;		_eval_poly
 12773 ;;		_getFractionPartOfMultiple
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           	psect	text57
 12778  0012B6                     __ptext57:
 12779                           	opt stack 0
 12780  0012B6                     ___ftadd:
 12781                           	opt stack 22
 12782                           
 12783                           ;incstack = 0
 12784  0012B6  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 12785  0012BA  0100               	movlb	0	; () banked
 12786  0012BC  6B94               	clrf	(??___ftadd+1)& (0+255),b
 12787  0012BE  6B95               	clrf	(??___ftadd+2)& (0+255),b
 12788  0012C0  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12789  0012C2  3793               	rlcf	??___ftadd& (0+255),f,b
 12790  0012C4  E301               	bnc	u6791
 12791  0012C6  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 12792  0012C8                     u6791:
 12793  0012C8  5193               	movf	??___ftadd& (0+255),w,b
 12794  0012CA  6F98               	movwf	___ftadd@exp1& (0+255),b
 12795  0012CC  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 12796  0012D0  6B94               	clrf	(??___ftadd+1)& (0+255),b
 12797  0012D2  6B95               	clrf	(??___ftadd+2)& (0+255),b
 12798  0012D4  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12799  0012D6  3793               	rlcf	??___ftadd& (0+255),f,b
 12800  0012D8  E301               	bnc	u6801
 12801  0012DA  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 12802  0012DC                     u6801:
 12803  0012DC  5193               	movf	??___ftadd& (0+255),w,b
 12804  0012DE  6F97               	movwf	___ftadd@exp2& (0+255),b
 12805                           
 12806                           ; BSR set to: 0
 12807  0012E0  5198               	movf	___ftadd@exp1& (0+255),w,b
 12808  0012E2  B4D8               	btfsc	status,2,c
 12809  0012E4  D00B               	goto	u6830
 12810                           
 12811                           ; BSR set to: 0
 12812  0012E6  5197               	movf	___ftadd@exp2& (0+255),w,b
 12813  0012E8  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 12814  0012EA  B0D8               	btfsc	status,0,c
 12815  0012EC  D00E               	goto	l1615
 12816                           
 12817                           ; BSR set to: 0
 12818  0012EE  5198               	movf	___ftadd@exp1& (0+255),w,b
 12819  0012F0  0800               	sublw	0
 12820  0012F2  2597               	addwf	___ftadd@exp2& (0+255),w,b
 12821  0012F4  6F93               	movwf	??___ftadd& (0+255),b
 12822  0012F6  0E18               	movlw	24
 12823  0012F8  6593               	cpfsgt	??___ftadd& (0+255),b
 12824  0012FA  D007               	goto	l1615
 12825  0012FC                     u6830:
 12826                           
 12827                           ; BSR set to: 0
 12828  0012FC  C090  F08D         	movff	___ftadd@f2,?___ftadd
 12829  001300  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 12830  001304  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 12831  001308  0012               	return	
 12832  00130A                     l1615:
 12833                           
 12834                           ; BSR set to: 0
 12835                           
 12836                           ; BSR set to: 0
 12837  00130A  5197               	movf	___ftadd@exp2& (0+255),w,b
 12838  00130C  B4D8               	btfsc	status,2,c
 12839  00130E  D00B               	goto	u6860
 12840                           
 12841                           ; BSR set to: 0
 12842  001310  5198               	movf	___ftadd@exp1& (0+255),w,b
 12843  001312  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 12844  001314  B0D8               	btfsc	status,0,c
 12845  001316  D00E               	goto	l1619
 12846                           
 12847                           ; BSR set to: 0
 12848  001318  5197               	movf	___ftadd@exp2& (0+255),w,b
 12849  00131A  0800               	sublw	0
 12850  00131C  2598               	addwf	___ftadd@exp1& (0+255),w,b
 12851  00131E  6F93               	movwf	??___ftadd& (0+255),b
 12852  001320  0E18               	movlw	24
 12853  001322  6593               	cpfsgt	??___ftadd& (0+255),b
 12854  001324  D007               	goto	l1619
 12855  001326                     u6860:
 12856                           
 12857                           ; BSR set to: 0
 12858  001326  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 12859  00132A  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 12860  00132E  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 12861  001332  0012               	return	
 12862  001334                     l1619:
 12863                           
 12864                           ; BSR set to: 0
 12865                           
 12866                           ; BSR set to: 0
 12867  001334  0E06               	movlw	6
 12868  001336  6F96               	movwf	___ftadd@sign& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871  001338  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 12872                           
 12873                           ; BSR set to: 0
 12874  00133A  8F96               	bsf	___ftadd@sign& (0+255),7,b
 12875                           
 12876                           ; BSR set to: 0
 12877                           
 12878                           ; BSR set to: 0
 12879  00133C  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 12880                           
 12881                           ; BSR set to: 0
 12882  00133E  8D96               	bsf	___ftadd@sign& (0+255),6,b
 12883                           
 12884                           ; BSR set to: 0
 12885  001340  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12886                           
 12887                           ; BSR set to: 0
 12888  001342  0EFF               	movlw	255
 12889  001344  178D               	andwf	___ftadd@f1& (0+255),f,b
 12890  001346  0EFF               	movlw	255
 12891  001348  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12892  00134A  0E00               	movlw	0
 12893  00134C  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12894  00134E  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12895                           
 12896                           ; BSR set to: 0
 12897  001350  0EFF               	movlw	255
 12898  001352  1790               	andwf	___ftadd@f2& (0+255),f,b
 12899  001354  0EFF               	movlw	255
 12900  001356  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12901  001358  0E00               	movlw	0
 12902  00135A  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12903                           
 12904                           ; BSR set to: 0
 12905  00135C  5197               	movf	___ftadd@exp2& (0+255),w,b
 12906  00135E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 12907  001360  B0D8               	btfsc	status,0,c
 12908  001362  D01B               	goto	l1624
 12909  001364                     u6890:
 12910                           
 12911                           ; BSR set to: 0
 12912                           
 12913                           ; BSR set to: 0
 12914  001364  90D8               	bcf	status,0,c
 12915  001366  3790               	rlcf	___ftadd@f2& (0+255),f,b
 12916  001368  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12917  00136A  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12918  00136C  0797               	decf	___ftadd@exp2& (0+255),f,b
 12919                           
 12920                           ; BSR set to: 0
 12921  00136E  5198               	movf	___ftadd@exp1& (0+255),w,b
 12922  001370  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 12923  001372  B4D8               	btfsc	status,2,c
 12924  001374  D00D               	goto	l1629
 12925                           
 12926                           ; BSR set to: 0
 12927  001376  0796               	decf	___ftadd@sign& (0+255),f,b
 12928  001378  C096  F093         	movff	___ftadd@sign,??___ftadd
 12929  00137C  0E07               	movlw	7
 12930  00137E  1793               	andwf	??___ftadd& (0+255),f,b
 12931  001380  B4D8               	btfsc	status,2,c
 12932  001382  D006               	goto	l1629
 12933  001384  D7EF               	goto	u6890
 12934  001386                     
 12935                           ; BSR set to: 0
 12936                           
 12937                           ; BSR set to: 0
 12938  001386  90D8               	bcf	status,0,c
 12939  001388  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12940  00138A  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12941  00138C  338D               	rrcf	___ftadd@f1& (0+255),f,b
 12942  00138E  2B98               	incf	___ftadd@exp1& (0+255),f,b
 12943  001390                     l1629:
 12944                           
 12945                           ; BSR set to: 0
 12946                           
 12947                           ; BSR set to: 0
 12948  001390  5197               	movf	___ftadd@exp2& (0+255),w,b
 12949  001392  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 12950  001394  B4D8               	btfsc	status,2,c
 12951  001396  D01F               	goto	u6960
 12952  001398  D7F6               	goto	l1630
 12953  00139A                     l1624:
 12954                           
 12955                           ; BSR set to: 0
 12956                           
 12957                           ; BSR set to: 0
 12958  00139A  5198               	movf	___ftadd@exp1& (0+255),w,b
 12959  00139C  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 12960  00139E  B0D8               	btfsc	status,0,c
 12961  0013A0  D01A               	goto	u6960
 12962  0013A2                     u6930:
 12963                           
 12964                           ; BSR set to: 0
 12965                           
 12966                           ; BSR set to: 0
 12967  0013A2  90D8               	bcf	status,0,c
 12968  0013A4  378D               	rlcf	___ftadd@f1& (0+255),f,b
 12969  0013A6  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12970  0013A8  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12971  0013AA  0798               	decf	___ftadd@exp1& (0+255),f,b
 12972                           
 12973                           ; BSR set to: 0
 12974  0013AC  5198               	movf	___ftadd@exp1& (0+255),w,b
 12975  0013AE  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 12976  0013B0  B4D8               	btfsc	status,2,c
 12977  0013B2  D00D               	goto	l1638
 12978                           
 12979                           ; BSR set to: 0
 12980  0013B4  0796               	decf	___ftadd@sign& (0+255),f,b
 12981  0013B6  C096  F093         	movff	___ftadd@sign,??___ftadd
 12982  0013BA  0E07               	movlw	7
 12983  0013BC  1793               	andwf	??___ftadd& (0+255),f,b
 12984  0013BE  B4D8               	btfsc	status,2,c
 12985  0013C0  D006               	goto	l1638
 12986  0013C2  D7EF               	goto	u6930
 12987  0013C4                     
 12988                           ; BSR set to: 0
 12989                           
 12990                           ; BSR set to: 0
 12991  0013C4  90D8               	bcf	status,0,c
 12992  0013C6  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12993  0013C8  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12994  0013CA  3390               	rrcf	___ftadd@f2& (0+255),f,b
 12995  0013CC  2B97               	incf	___ftadd@exp2& (0+255),f,b
 12996  0013CE                     l1638:
 12997                           
 12998                           ; BSR set to: 0
 12999                           
 13000                           ; BSR set to: 0
 13001  0013CE  5197               	movf	___ftadd@exp2& (0+255),w,b
 13002  0013D0  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 13003  0013D2  A4D8               	btfss	status,2,c
 13004  0013D4  D7F7               	goto	l1639
 13005  0013D6                     u6960:
 13006                           
 13007                           ; BSR set to: 0
 13008                           
 13009                           ; BSR set to: 0
 13010                           
 13011                           ; BSR set to: 0
 13012  0013D6  AF96               	btfss	___ftadd@sign& (0+255),7,b
 13013  0013D8  D00C               	goto	l1641
 13014                           
 13015                           ; BSR set to: 0
 13016  0013DA  0EFF               	movlw	255
 13017  0013DC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 13018  0013DE  0EFF               	movlw	255
 13019  0013E0  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13020  0013E2  0EFF               	movlw	255
 13021  0013E4  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13022  0013E6  0E01               	movlw	1
 13023  0013E8  278D               	addwf	___ftadd@f1& (0+255),f,b
 13024  0013EA  0E00               	movlw	0
 13025  0013EC  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13026  0013EE  0E00               	movlw	0
 13027  0013F0  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13028  0013F2                     l1641:
 13029                           
 13030                           ; BSR set to: 0
 13031  0013F2  AD96               	btfss	___ftadd@sign& (0+255),6,b
 13032  0013F4  D00C               	goto	l1642
 13033                           
 13034                           ; BSR set to: 0
 13035  0013F6  0EFF               	movlw	255
 13036  0013F8  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 13037  0013FA  0EFF               	movlw	255
 13038  0013FC  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13039  0013FE  0EFF               	movlw	255
 13040  001400  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13041  001402  0E01               	movlw	1
 13042  001404  2790               	addwf	___ftadd@f2& (0+255),f,b
 13043  001406  0E00               	movlw	0
 13044  001408  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13045  00140A  0E00               	movlw	0
 13046  00140C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13047  00140E                     l1642:
 13048                           
 13049                           ; BSR set to: 0
 13050                           
 13051                           ; BSR set to: 0
 13052  00140E  0E00               	movlw	0
 13053  001410  6F96               	movwf	___ftadd@sign& (0+255),b
 13054                           
 13055                           ; BSR set to: 0
 13056  001412  518D               	movf	___ftadd@f1& (0+255),w,b
 13057  001414  2790               	addwf	___ftadd@f2& (0+255),f,b
 13058  001416  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 13059  001418  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13060  00141A  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 13061  00141C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13062                           
 13063                           ; BSR set to: 0
 13064  00141E  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13065  001420  D00E               	goto	l1643
 13066                           
 13067                           ; BSR set to: 0
 13068  001422  0EFF               	movlw	255
 13069  001424  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 13070  001426  0EFF               	movlw	255
 13071  001428  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13072  00142A  0EFF               	movlw	255
 13073  00142C  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13074  00142E  0E01               	movlw	1
 13075  001430  2790               	addwf	___ftadd@f2& (0+255),f,b
 13076  001432  0E00               	movlw	0
 13077  001434  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13078  001436  0E00               	movlw	0
 13079  001438  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13080                           
 13081                           ; BSR set to: 0
 13082  00143A  0E01               	movlw	1
 13083  00143C  6F96               	movwf	___ftadd@sign& (0+255),b
 13084  00143E                     l1643:
 13085                           
 13086                           ; BSR set to: 0
 13087                           
 13088                           ; BSR set to: 0
 13089  00143E  C090  F018         	movff	___ftadd@f2,___ftpack@arg
 13090  001442  C091  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 13091  001446  C092  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 13092  00144A  C098  F01B         	movff	___ftadd@exp1,___ftpack@exp
 13093  00144E  C096  F01C         	movff	___ftadd@sign,___ftpack@sign
 13094  001452  EC7F  F010         	call	___ftpack	;wreg free
 13095  001456  C018  F08D         	movff	?___ftpack,?___ftadd
 13096  00145A  C019  F08E         	movff	?___ftpack+1,?___ftadd+1
 13097  00145E  C01A  F08F         	movff	?___ftpack+2,?___ftadd+2
 13098  001462  0012               	return	
 13099  001464                     __end_of___ftadd:
 13100                           	opt stack 0
 13101                           tosu	equ	0xFFF
 13102                           tosh	equ	0xFFE
 13103                           tosl	equ	0xFFD
 13104                           pclath	equ	0xFFA
 13105                           tblptru	equ	0xFF8
 13106                           tblptrh	equ	0xFF7
 13107                           tblptrl	equ	0xFF6
 13108                           tablat	equ	0xFF5
 13109                           prodh	equ	0xFF4
 13110                           prodl	equ	0xFF3
 13111                           intcon	equ	0xFF2
 13112                           intcon2	equ	0xFF1
 13113                           postinc0	equ	0xFEE
 13114                           wreg	equ	0xFE8
 13115                           indf1	equ	0xFE7
 13116                           postdec1	equ	0xFE5
 13117                           fsr1h	equ	0xFE2
 13118                           fsr1l	equ	0xFE1
 13119                           indf2	equ	0xFDF
 13120                           postinc2	equ	0xFDE
 13121                           postdec2	equ	0xFDD
 13122                           fsr2h	equ	0xFDA
 13123                           fsr2l	equ	0xFD9
 13124                           status	equ	0xFD8
 13125                           
 13126 ;; *************** function ___ftneg *****************
 13127 ;; Defined at:
 13128 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  f1              3   42[BANK0 ] float 
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;		None
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  3   42[BANK0 ] float 
 13135 ;; Registers used:
 13136 ;;		wreg, status,2, status,0
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13142 ;;      Params:         0       3       0       0       0       0       0
 13143 ;;      Locals:         0       0       0       0       0       0       0
 13144 ;;      Temps:          0       0       0       0       0       0       0
 13145 ;;      Totals:         0       3       0       0       0       0       0
 13146 ;;Total ram usage:        3 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    3
 13149 ;; This function calls:
 13150 ;;		Nothing
 13151 ;; This function is called by:
 13152 ;;		_getFractionPartOfDivide
 13153 ;;		_strtod
 13154 ;;		_pow
 13155 ;;		_exp
 13156 ;;		_getFractionPartOfMultiple
 13157 ;; This function uses a non-reentrant model
 13158 ;;
 13159                           
 13160                           	psect	text58
 13161  00307A                     __ptext58:
 13162                           	opt stack 0
 13163  00307A                     ___ftneg:
 13164                           	opt stack 23
 13165                           
 13166                           ;incstack = 0
 13167  00307A  0100               	movlb	0	; () banked
 13168  00307C  518A               	movf	___ftneg@f1& (0+255),w,b
 13169  00307E  118B               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 13170  003080  118C               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 13171  003082  B4D8               	btfsc	status,2,c
 13172  003084  D006               	goto	l1674
 13173                           
 13174                           ; BSR set to: 0
 13175  003086  0E00               	movlw	0
 13176  003088  1B8A               	xorwf	___ftneg@f1& (0+255),f,b
 13177  00308A  0E00               	movlw	0
 13178  00308C  1B8B               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 13179  00308E  0E80               	movlw	128
 13180  003090  1B8C               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 13181  003092                     l1674:
 13182                           
 13183                           ; BSR set to: 0
 13184  003092  C08A  F08A         	movff	___ftneg@f1,?___ftneg
 13185  003096  C08B  F08B         	movff	___ftneg@f1+1,?___ftneg+1
 13186  00309A  C08C  F08C         	movff	___ftneg@f1+2,?___ftneg+2
 13187                           
 13188                           ; BSR set to: 0
 13189  00309E  0012               	return		;funcret
 13190  0030A0                     __end_of___ftneg:
 13191                           	opt stack 0
 13192                           tosu	equ	0xFFF
 13193                           tosh	equ	0xFFE
 13194                           tosl	equ	0xFFD
 13195                           pclath	equ	0xFFA
 13196                           tblptru	equ	0xFF8
 13197                           tblptrh	equ	0xFF7
 13198                           tblptrl	equ	0xFF6
 13199                           tablat	equ	0xFF5
 13200                           prodh	equ	0xFF4
 13201                           prodl	equ	0xFF3
 13202                           intcon	equ	0xFF2
 13203                           intcon2	equ	0xFF1
 13204                           postinc0	equ	0xFEE
 13205                           wreg	equ	0xFE8
 13206                           indf1	equ	0xFE7
 13207                           postdec1	equ	0xFE5
 13208                           fsr1h	equ	0xFE2
 13209                           fsr1l	equ	0xFE1
 13210                           indf2	equ	0xFDF
 13211                           postinc2	equ	0xFDE
 13212                           postdec2	equ	0xFDD
 13213                           fsr2h	equ	0xFDA
 13214                           fsr2l	equ	0xFD9
 13215                           status	equ	0xFD8
 13216                           
 13217 ;; *************** function ___ftdiv *****************
 13218 ;; Defined at:
 13219 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;  f1              3   41[COMRAM] float 
 13222 ;;  f2              3   44[COMRAM] float 
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;  f3              3    4[BANK0 ] float 
 13225 ;;  sign            1    8[BANK0 ] unsigned char 
 13226 ;;  exp             1    7[BANK0 ] unsigned char 
 13227 ;;  cntr            1    3[BANK0 ] unsigned char 
 13228 ;; Return value:  Size  Location     Type
 13229 ;;                  3   41[COMRAM] float 
 13230 ;; Registers used:
 13231 ;;		wreg, status,2, status,0, cstack
 13232 ;; Tracked objects:
 13233 ;;		On entry : 0/0
 13234 ;;		On exit  : 0/0
 13235 ;;		Unchanged: 0/0
 13236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13237 ;;      Params:         6       0       0       0       0       0       0
 13238 ;;      Locals:         0       6       0       0       0       0       0
 13239 ;;      Temps:          0       3       0       0       0       0       0
 13240 ;;      Totals:         6       9       0       0       0       0       0
 13241 ;;Total ram usage:       15 bytes
 13242 ;; Hardware stack levels used:    1
 13243 ;; Hardware stack levels required when called:    4
 13244 ;; This function calls:
 13245 ;;		___ftpack
 13246 ;; This function is called by:
 13247 ;;		_SampleSingleChannel
 13248 ;;		_CalcSynthRegParams
 13249 ;;		_getFractionPartOfDivide
 13250 ;;		_strtod
 13251 ;;		_exp
 13252 ;;		_CheckFlashPrecentage
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           	psect	text59
 13257  001B4C                     __ptext59:
 13258                           	opt stack 0
 13259  001B4C                     ___ftdiv:
 13260                           	opt stack 22
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;incstack = 0
 13264  001B4C  C02C  F060         	movff	___ftdiv@f1+2,??___ftdiv
 13265  001B50  0100               	movlb	0	; () banked
 13266  001B52  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 13267  001B54  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 13268  001B56  342B               	rlcf	___ftdiv@f1+1,w,c
 13269  001B58  3760               	rlcf	??___ftdiv& (0+255),f,b
 13270  001B5A  E301               	bnc	u7211
 13271  001B5C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 13272  001B5E                     u7211:
 13273  001B5E  5160               	movf	??___ftdiv& (0+255),w,b
 13274  001B60  6F67               	movwf	___ftdiv@exp& (0+255),b
 13275  001B62  5167               	movf	___ftdiv@exp& (0+255),w,b
 13276  001B64  A4D8               	btfss	status,2,c
 13277  001B66  D007               	goto	l1648
 13278                           
 13279                           ; BSR set to: 0
 13280  001B68  0E00               	movlw	0
 13281  001B6A  6E2A               	movwf	?___ftdiv,c
 13282  001B6C  0E00               	movlw	0
 13283  001B6E  6E2B               	movwf	?___ftdiv+1,c
 13284  001B70  0E00               	movlw	0
 13285  001B72  6E2C               	movwf	?___ftdiv+2,c
 13286                           
 13287                           ; BSR set to: 0
 13288  001B74  0012               	return	
 13289  001B76                     l1648:
 13290                           
 13291                           ; BSR set to: 0
 13292                           
 13293                           ; BSR set to: 0
 13294  001B76  C02F  F060         	movff	___ftdiv@f2+2,??___ftdiv
 13295  001B7A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 13296  001B7C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 13297  001B7E  342E               	rlcf	___ftdiv@f2+1,w,c
 13298  001B80  3760               	rlcf	??___ftdiv& (0+255),f,b
 13299  001B82  E301               	bnc	u7231
 13300  001B84  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 13301  001B86                     u7231:
 13302  001B86  5160               	movf	??___ftdiv& (0+255),w,b
 13303  001B88  6F68               	movwf	___ftdiv@sign& (0+255),b
 13304  001B8A  5168               	movf	___ftdiv@sign& (0+255),w,b
 13305  001B8C  A4D8               	btfss	status,2,c
 13306  001B8E  D007               	goto	l1650
 13307                           
 13308                           ; BSR set to: 0
 13309  001B90  0E00               	movlw	0
 13310  001B92  6E2A               	movwf	?___ftdiv,c
 13311  001B94  0E00               	movlw	0
 13312  001B96  6E2B               	movwf	?___ftdiv+1,c
 13313  001B98  0E00               	movlw	0
 13314  001B9A  6E2C               	movwf	?___ftdiv+2,c
 13315                           
 13316                           ; BSR set to: 0
 13317  001B9C  0012               	return	
 13318  001B9E                     l1650:
 13319                           
 13320                           ; BSR set to: 0
 13321                           
 13322                           ; BSR set to: 0
 13323  001B9E  0E00               	movlw	0
 13324  001BA0  6F64               	movwf	___ftdiv@f3& (0+255),b
 13325  001BA2  0E00               	movlw	0
 13326  001BA4  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 13327  001BA6  0E00               	movlw	0
 13328  001BA8  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 13329                           
 13330                           ; BSR set to: 0
 13331  001BAA  5168               	movf	___ftdiv@sign& (0+255),w,b
 13332  001BAC  0F89               	addlw	137
 13333  001BAE  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 13334                           
 13335                           ; BSR set to: 0
 13336  001BB0  C02C  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 13337                           
 13338                           ; BSR set to: 0
 13339  001BB4  502F               	movf	___ftdiv@f2+2,w,c
 13340  001BB6  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 13341                           
 13342                           ; BSR set to: 0
 13343  001BB8  0E80               	movlw	128
 13344  001BBA  1768               	andwf	___ftdiv@sign& (0+255),f,b
 13345                           
 13346                           ; BSR set to: 0
 13347  001BBC  8E2B               	bsf	___ftdiv@f1+1,7,c
 13348                           
 13349                           ; BSR set to: 0
 13350  001BBE  0EFF               	movlw	255
 13351  001BC0  162A               	andwf	___ftdiv@f1,f,c
 13352  001BC2  0EFF               	movlw	255
 13353  001BC4  162B               	andwf	___ftdiv@f1+1,f,c
 13354  001BC6  0E00               	movlw	0
 13355  001BC8  162C               	andwf	___ftdiv@f1+2,f,c
 13356                           
 13357                           ; BSR set to: 0
 13358  001BCA  8E2E               	bsf	___ftdiv@f2+1,7,c
 13359                           
 13360                           ; BSR set to: 0
 13361  001BCC  0EFF               	movlw	255
 13362  001BCE  162D               	andwf	___ftdiv@f2,f,c
 13363  001BD0  0EFF               	movlw	255
 13364  001BD2  162E               	andwf	___ftdiv@f2+1,f,c
 13365  001BD4  0E00               	movlw	0
 13366  001BD6  162F               	andwf	___ftdiv@f2+2,f,c
 13367                           
 13368                           ; BSR set to: 0
 13369  001BD8  0E18               	movlw	24
 13370  001BDA  6F63               	movwf	___ftdiv@cntr& (0+255),b
 13371  001BDC                     
 13372                           ; BSR set to: 0
 13373                           
 13374                           ; BSR set to: 0
 13375  001BDC  90D8               	bcf	status,0,c
 13376  001BDE  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 13377  001BE0  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13378  001BE2  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13379                           
 13380                           ; BSR set to: 0
 13381  001BE4  502D               	movf	___ftdiv@f2,w,c
 13382  001BE6  5C2A               	subwf	___ftdiv@f1,w,c
 13383  001BE8  502E               	movf	___ftdiv@f2+1,w,c
 13384  001BEA  582B               	subwfb	___ftdiv@f1+1,w,c
 13385  001BEC  502F               	movf	___ftdiv@f2+2,w,c
 13386  001BEE  582C               	subwfb	___ftdiv@f1+2,w,c
 13387  001BF0  A0D8               	btfss	status,0,c
 13388  001BF2  D007               	goto	l1652
 13389                           
 13390                           ; BSR set to: 0
 13391  001BF4  502D               	movf	___ftdiv@f2,w,c
 13392  001BF6  5E2A               	subwf	___ftdiv@f1,f,c
 13393  001BF8  502E               	movf	___ftdiv@f2+1,w,c
 13394  001BFA  5A2B               	subwfb	___ftdiv@f1+1,f,c
 13395  001BFC  502F               	movf	___ftdiv@f2+2,w,c
 13396  001BFE  5A2C               	subwfb	___ftdiv@f1+2,f,c
 13397                           
 13398                           ; BSR set to: 0
 13399  001C00  8164               	bsf	___ftdiv@f3& (0+255),0,b
 13400  001C02                     l1652:
 13401                           
 13402                           ; BSR set to: 0
 13403  001C02  90D8               	bcf	status,0,c
 13404  001C04  362A               	rlcf	___ftdiv@f1,f,c
 13405  001C06  362B               	rlcf	___ftdiv@f1+1,f,c
 13406  001C08  362C               	rlcf	___ftdiv@f1+2,f,c
 13407                           
 13408                           ; BSR set to: 0
 13409  001C0A  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 13410  001C0C  D7E7               	goto	l1651
 13411                           
 13412                           ; BSR set to: 0
 13413                           
 13414                           ; BSR set to: 0
 13415  001C0E  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 13416  001C12  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13417  001C16  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13418  001C1A  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 13419  001C1E  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 13420  001C22  EC7F  F010         	call	___ftpack	;wreg free
 13421  001C26  C018  F02A         	movff	?___ftpack,?___ftdiv
 13422  001C2A  C019  F02B         	movff	?___ftpack+1,?___ftdiv+1
 13423  001C2E  C01A  F02C         	movff	?___ftpack+2,?___ftdiv+2
 13424  001C32  0012               	return	
 13425  001C34                     __end_of___ftdiv:
 13426                           	opt stack 0
 13427                           tosu	equ	0xFFF
 13428                           tosh	equ	0xFFE
 13429                           tosl	equ	0xFFD
 13430                           pclath	equ	0xFFA
 13431                           tblptru	equ	0xFF8
 13432                           tblptrh	equ	0xFF7
 13433                           tblptrl	equ	0xFF6
 13434                           tablat	equ	0xFF5
 13435                           prodh	equ	0xFF4
 13436                           prodl	equ	0xFF3
 13437                           intcon	equ	0xFF2
 13438                           intcon2	equ	0xFF1
 13439                           postinc0	equ	0xFEE
 13440                           wreg	equ	0xFE8
 13441                           indf1	equ	0xFE7
 13442                           postdec1	equ	0xFE5
 13443                           fsr1h	equ	0xFE2
 13444                           fsr1l	equ	0xFE1
 13445                           indf2	equ	0xFDF
 13446                           postinc2	equ	0xFDE
 13447                           postdec2	equ	0xFDD
 13448                           fsr2h	equ	0xFDA
 13449                           fsr2l	equ	0xFD9
 13450                           status	equ	0xFD8
 13451                           
 13452 ;; *************** function ___awtoft *****************
 13453 ;; Defined at:
 13454 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 13455 ;; Parameters:    Size  Location     Type
 13456 ;;  c               2   39[BANK0 ] int 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;  sign            1   47[COMRAM] unsigned char 
 13459 ;; Return value:  Size  Location     Type
 13460 ;;                  3   39[BANK0 ] float 
 13461 ;; Registers used:
 13462 ;;		wreg, status,2, status,0, cstack
 13463 ;; Tracked objects:
 13464 ;;		On entry : 0/0
 13465 ;;		On exit  : 0/0
 13466 ;;		Unchanged: 0/0
 13467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13468 ;;      Params:         0       3       0       0       0       0       0
 13469 ;;      Locals:         1       0       0       0       0       0       0
 13470 ;;      Temps:          0       0       0       0       0       0       0
 13471 ;;      Totals:         1       3       0       0       0       0       0
 13472 ;;Total ram usage:        4 bytes
 13473 ;; Hardware stack levels used:    1
 13474 ;; Hardware stack levels required when called:    4
 13475 ;; This function calls:
 13476 ;;		___ftpack
 13477 ;; This function is called by:
 13478 ;;		_getFractionPartOfDivide
 13479 ;;		_exp
 13480 ;;		_log
 13481 ;;		_getFractionPartOfMultiple
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           	psect	text60
 13486  002E9A                     __ptext60:
 13487                           	opt stack 0
 13488  002E9A                     ___awtoft:
 13489                           	opt stack 22
 13490                           
 13491                           ;incstack = 0
 13492  002E9A  0E00               	movlw	0
 13493  002E9C  6E30               	movwf	___awtoft@sign,c
 13494  002E9E  0100               	movlb	0	; () banked
 13495  002EA0  AF88               	btfss	(___awtoft@c+1)& (0+255),7,b
 13496  002EA2  D006               	goto	l1565
 13497                           
 13498                           ; BSR set to: 0
 13499  002EA4  6D87               	negf	___awtoft@c& (0+255),b
 13500  002EA6  1F88               	comf	(___awtoft@c+1)& (0+255),f,b
 13501  002EA8  B0D8               	btfsc	status,0,c
 13502  002EAA  2B88               	incf	(___awtoft@c+1)& (0+255),f,b
 13503                           
 13504                           ; BSR set to: 0
 13505  002EAC  0E01               	movlw	1
 13506  002EAE  6E30               	movwf	___awtoft@sign,c
 13507  002EB0                     l1565:
 13508                           
 13509                           ; BSR set to: 0
 13510                           
 13511                           ; BSR set to: 0
 13512  002EB0  C087  F018         	movff	___awtoft@c,___ftpack@arg
 13513  002EB4  C088  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 13514  002EB8  6A1A               	clrf	___ftpack@arg+2,c
 13515  002EBA  0E8E               	movlw	142
 13516  002EBC  6E1B               	movwf	___ftpack@exp,c
 13517  002EBE  C030  F01C         	movff	___awtoft@sign,___ftpack@sign
 13518  002EC2  EC7F  F010         	call	___ftpack	;wreg free
 13519  002EC6  C018  F087         	movff	?___ftpack,?___awtoft
 13520  002ECA  C019  F088         	movff	?___ftpack+1,?___awtoft+1
 13521  002ECE  C01A  F089         	movff	?___ftpack+2,?___awtoft+2
 13522  002ED2  0012               	return	
 13523  002ED4                     __end_of___awtoft:
 13524                           	opt stack 0
 13525                           tosu	equ	0xFFF
 13526                           tosh	equ	0xFFE
 13527                           tosl	equ	0xFFD
 13528                           pclath	equ	0xFFA
 13529                           tblptru	equ	0xFF8
 13530                           tblptrh	equ	0xFF7
 13531                           tblptrl	equ	0xFF6
 13532                           tablat	equ	0xFF5
 13533                           prodh	equ	0xFF4
 13534                           prodl	equ	0xFF3
 13535                           intcon	equ	0xFF2
 13536                           intcon2	equ	0xFF1
 13537                           postinc0	equ	0xFEE
 13538                           wreg	equ	0xFE8
 13539                           indf1	equ	0xFE7
 13540                           postdec1	equ	0xFE5
 13541                           fsr1h	equ	0xFE2
 13542                           fsr1l	equ	0xFE1
 13543                           indf2	equ	0xFDF
 13544                           postinc2	equ	0xFDE
 13545                           postdec2	equ	0xFDD
 13546                           fsr2h	equ	0xFDA
 13547                           fsr2l	equ	0xFD9
 13548                           status	equ	0xFD8
 13549                           
 13550 ;; *************** function ___lltoft *****************
 13551 ;; Defined at:
 13552 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 13553 ;; Parameters:    Size  Location     Type
 13554 ;;  c               4   31[COMRAM] unsigned long 
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;  exp             1   39[COMRAM] unsigned char 
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  3   31[COMRAM] float 
 13559 ;; Registers used:
 13560 ;;		wreg, status,2, status,0, cstack
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13566 ;;      Params:         4       0       0       0       0       0       0
 13567 ;;      Locals:         1       0       0       0       0       0       0
 13568 ;;      Temps:          4       0       0       0       0       0       0
 13569 ;;      Totals:         9       0       0       0       0       0       0
 13570 ;;Total ram usage:        9 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; Hardware stack levels required when called:    4
 13573 ;; This function calls:
 13574 ;;		___ftpack
 13575 ;; This function is called by:
 13576 ;;		_pow
 13577 ;;		_CheckFlashPrecentage
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           	psect	text61
 13582  002898                     __ptext61:
 13583                           	opt stack 0
 13584  002898                     ___lltoft:
 13585                           	opt stack 21
 13586                           
 13587                           ;incstack = 0
 13588  002898  0E8E               	movlw	142
 13589  00289A  6E28               	movwf	___lltoft@exp,c
 13590  00289C  D006               	goto	l1751
 13591  00289E  90D8               	bcf	status,0,c
 13592  0028A0  3223               	rrcf	___lltoft@c+3,f,c
 13593  0028A2  3222               	rrcf	___lltoft@c+2,f,c
 13594  0028A4  3221               	rrcf	___lltoft@c+1,f,c
 13595  0028A6  3220               	rrcf	___lltoft@c,f,c
 13596  0028A8  2A28               	incf	___lltoft@exp,f,c
 13597  0028AA                     l1751:
 13598  0028AA  0E00               	movlw	0
 13599  0028AC  1420               	andwf	___lltoft@c,w,c
 13600  0028AE  6E24               	movwf	??___lltoft& (0+255),c
 13601  0028B0  0E00               	movlw	0
 13602  0028B2  1421               	andwf	___lltoft@c+1,w,c
 13603  0028B4  6E25               	movwf	(??___lltoft+1)& (0+255),c
 13604  0028B6  0E00               	movlw	0
 13605  0028B8  1422               	andwf	___lltoft@c+2,w,c
 13606  0028BA  6E26               	movwf	(??___lltoft+2)& (0+255),c
 13607  0028BC  0EFF               	movlw	255
 13608  0028BE  1423               	andwf	___lltoft@c+3,w,c
 13609  0028C0  6E27               	movwf	(??___lltoft+3)& (0+255),c
 13610  0028C2  5024               	movf	??___lltoft,w,c
 13611  0028C4  1025               	iorwf	??___lltoft+1,w,c
 13612  0028C6  1026               	iorwf	??___lltoft+2,w,c
 13613  0028C8  1027               	iorwf	??___lltoft+3,w,c
 13614  0028CA  A4D8               	btfss	status,2,c
 13615  0028CC  D7E8               	goto	l1752
 13616  0028CE  C020  F018         	movff	___lltoft@c,___ftpack@arg
 13617  0028D2  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 13618  0028D6  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 13619  0028DA  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 13620  0028DE  0E00               	movlw	0
 13621  0028E0  6E1C               	movwf	___ftpack@sign,c
 13622  0028E2  EC7F  F010         	call	___ftpack	;wreg free
 13623  0028E6  C018  F020         	movff	?___ftpack,?___lltoft
 13624  0028EA  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 13625  0028EE  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 13626  0028F2  0012               	return	
 13627  0028F4                     __end_of___lltoft:
 13628                           	opt stack 0
 13629                           tosu	equ	0xFFF
 13630                           tosh	equ	0xFFE
 13631                           tosl	equ	0xFFD
 13632                           pclath	equ	0xFFA
 13633                           tblptru	equ	0xFF8
 13634                           tblptrh	equ	0xFF7
 13635                           tblptrl	equ	0xFF6
 13636                           tablat	equ	0xFF5
 13637                           prodh	equ	0xFF4
 13638                           prodl	equ	0xFF3
 13639                           intcon	equ	0xFF2
 13640                           intcon2	equ	0xFF1
 13641                           postinc0	equ	0xFEE
 13642                           wreg	equ	0xFE8
 13643                           indf1	equ	0xFE7
 13644                           postdec1	equ	0xFE5
 13645                           fsr1h	equ	0xFE2
 13646                           fsr1l	equ	0xFE1
 13647                           indf2	equ	0xFDF
 13648                           postinc2	equ	0xFDE
 13649                           postdec2	equ	0xFDD
 13650                           fsr2h	equ	0xFDA
 13651                           fsr2l	equ	0xFD9
 13652                           status	equ	0xFD8
 13653                           
 13654 ;; *************** function ___lwtoft *****************
 13655 ;; Defined at:
 13656 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;  c               2   31[COMRAM] unsigned int 
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  3   31[COMRAM] float 
 13663 ;; Registers used:
 13664 ;;		wreg, status,2, status,0, cstack
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13670 ;;      Params:         3       0       0       0       0       0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0
 13672 ;;      Temps:          0       0       0       0       0       0       0
 13673 ;;      Totals:         3       0       0       0       0       0       0
 13674 ;;Total ram usage:        3 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    4
 13677 ;; This function calls:
 13678 ;;		___ftpack
 13679 ;; This function is called by:
 13680 ;;		_SampleSingleChannel
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	text62
 13685  0030E8                     __ptext62:
 13686                           	opt stack 0
 13687  0030E8                     ___lwtoft:
 13688                           	opt stack 25
 13689                           
 13690                           ;incstack = 0
 13691  0030E8  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 13692  0030EC  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 13693  0030F0  6A1A               	clrf	___ftpack@arg+2,c
 13694  0030F2  0E8E               	movlw	142
 13695  0030F4  6E1B               	movwf	___ftpack@exp,c
 13696  0030F6  0E00               	movlw	0
 13697  0030F8  6E1C               	movwf	___ftpack@sign,c
 13698  0030FA  EC7F  F010         	call	___ftpack	;wreg free
 13699  0030FE  C018  F020         	movff	?___ftpack,?___lwtoft
 13700  003102  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 13701  003106  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 13702  00310A  0012               	return	
 13703  00310C                     __end_of___lwtoft:
 13704                           	opt stack 0
 13705                           tosu	equ	0xFFF
 13706                           tosh	equ	0xFFE
 13707                           tosl	equ	0xFFD
 13708                           pclath	equ	0xFFA
 13709                           tblptru	equ	0xFF8
 13710                           tblptrh	equ	0xFF7
 13711                           tblptrl	equ	0xFF6
 13712                           tablat	equ	0xFF5
 13713                           prodh	equ	0xFF4
 13714                           prodl	equ	0xFF3
 13715                           intcon	equ	0xFF2
 13716                           intcon2	equ	0xFF1
 13717                           postinc0	equ	0xFEE
 13718                           wreg	equ	0xFE8
 13719                           indf1	equ	0xFE7
 13720                           postdec1	equ	0xFE5
 13721                           fsr1h	equ	0xFE2
 13722                           fsr1l	equ	0xFE1
 13723                           indf2	equ	0xFDF
 13724                           postinc2	equ	0xFDE
 13725                           postdec2	equ	0xFDD
 13726                           fsr2h	equ	0xFDA
 13727                           fsr2l	equ	0xFD9
 13728                           status	equ	0xFD8
 13729                           
 13730 ;; *************** function ___ftpack *****************
 13731 ;; Defined at:
 13732 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  arg             3   23[COMRAM] unsigned um
 13735 ;;  exp             1   26[COMRAM] unsigned char 
 13736 ;;  sign            1   27[COMRAM] unsigned char 
 13737 ;; Auto vars:     Size  Location     Type
 13738 ;;		None
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  3   23[COMRAM] float 
 13741 ;; Registers used:
 13742 ;;		wreg, status,2, status,0
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13748 ;;      Params:         5       0       0       0       0       0       0
 13749 ;;      Locals:         0       0       0       0       0       0       0
 13750 ;;      Temps:          3       0       0       0       0       0       0
 13751 ;;      Totals:         8       0       0       0       0       0       0
 13752 ;;Total ram usage:        8 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; Hardware stack levels required when called:    3
 13755 ;; This function calls:
 13756 ;;		Nothing
 13757 ;; This function is called by:
 13758 ;;		___altoft
 13759 ;;		___awtoft
 13760 ;;		___ftadd
 13761 ;;		___ftdiv
 13762 ;;		___ftmul
 13763 ;;		___lltoft
 13764 ;;		___lwtoft
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           	psect	text63
 13769  0020FE                     __ptext63:
 13770                           	opt stack 0
 13771  0020FE                     ___ftpack:
 13772                           	opt stack 22
 13773                           
 13774                           ;incstack = 0
 13775  0020FE  501B               	movf	___ftpack@exp,w,c
 13776  002100  B4D8               	btfsc	status,2,c
 13777  002102  D005               	goto	u6700
 13778  002104  5018               	movf	___ftpack@arg,w,c
 13779  002106  1019               	iorwf	___ftpack@arg+1,w,c
 13780  002108  101A               	iorwf	___ftpack@arg+2,w,c
 13781  00210A  A4D8               	btfss	status,2,c
 13782  00210C  D00C               	goto	l1584
 13783  00210E                     u6700:
 13784  00210E  0E00               	movlw	0
 13785  002110  6E18               	movwf	?___ftpack,c
 13786  002112  0E00               	movlw	0
 13787  002114  6E19               	movwf	?___ftpack+1,c
 13788  002116  0E00               	movlw	0
 13789  002118  6E1A               	movwf	?___ftpack+2,c
 13790  00211A  0012               	return	
 13791  00211C  2A1B               	incf	___ftpack@exp,f,c
 13792  00211E  90D8               	bcf	status,0,c
 13793  002120  321A               	rrcf	___ftpack@arg+2,f,c
 13794  002122  3219               	rrcf	___ftpack@arg+1,f,c
 13795  002124  3218               	rrcf	___ftpack@arg,f,c
 13796  002126                     l1584:
 13797  002126  0E00               	movlw	0
 13798  002128  1418               	andwf	___ftpack@arg,w,c
 13799  00212A  6E1D               	movwf	??___ftpack& (0+255),c
 13800  00212C  0E00               	movlw	0
 13801  00212E  1419               	andwf	___ftpack@arg+1,w,c
 13802  002130  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 13803  002132  0EFE               	movlw	254
 13804  002134  141A               	andwf	___ftpack@arg+2,w,c
 13805  002136  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 13806  002138  501D               	movf	??___ftpack,w,c
 13807  00213A  101E               	iorwf	??___ftpack+1,w,c
 13808  00213C  101F               	iorwf	??___ftpack+2,w,c
 13809  00213E  B4D8               	btfsc	status,2,c
 13810  002140  D00C               	goto	l1587
 13811  002142  D7EC               	goto	l1585
 13812  002144  2A1B               	incf	___ftpack@exp,f,c
 13813  002146  0E01               	movlw	1
 13814  002148  2618               	addwf	___ftpack@arg,f,c
 13815  00214A  0E00               	movlw	0
 13816  00214C  2219               	addwfc	___ftpack@arg+1,f,c
 13817  00214E  0E00               	movlw	0
 13818  002150  221A               	addwfc	___ftpack@arg+2,f,c
 13819  002152  90D8               	bcf	status,0,c
 13820  002154  321A               	rrcf	___ftpack@arg+2,f,c
 13821  002156  3219               	rrcf	___ftpack@arg+1,f,c
 13822  002158  3218               	rrcf	___ftpack@arg,f,c
 13823  00215A                     l1587:
 13824  00215A  0E00               	movlw	0
 13825  00215C  1418               	andwf	___ftpack@arg,w,c
 13826  00215E  6E1D               	movwf	??___ftpack& (0+255),c
 13827  002160  0E00               	movlw	0
 13828  002162  1419               	andwf	___ftpack@arg+1,w,c
 13829  002164  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 13830  002166  0EFF               	movlw	255
 13831  002168  141A               	andwf	___ftpack@arg+2,w,c
 13832  00216A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 13833  00216C  501D               	movf	??___ftpack,w,c
 13834  00216E  101E               	iorwf	??___ftpack+1,w,c
 13835  002170  101F               	iorwf	??___ftpack+2,w,c
 13836  002172  B4D8               	btfsc	status,2,c
 13837  002174  D006               	goto	l1590
 13838  002176  D7E6               	goto	l1588
 13839  002178  061B               	decf	___ftpack@exp,f,c
 13840  00217A  90D8               	bcf	status,0,c
 13841  00217C  3618               	rlcf	___ftpack@arg,f,c
 13842  00217E  3619               	rlcf	___ftpack@arg+1,f,c
 13843  002180  361A               	rlcf	___ftpack@arg+2,f,c
 13844  002182                     l1590:
 13845  002182  BE19               	btfsc	___ftpack@arg+1,7,c
 13846  002184  D003               	goto	u6740
 13847  002186  0E02               	movlw	2
 13848  002188  601B               	cpfslt	___ftpack@exp,c
 13849  00218A  D7F6               	goto	l1591
 13850  00218C                     u6740:
 13851  00218C  A01B               	btfss	___ftpack@exp,0,c
 13852  00218E  9E19               	bcf	___ftpack@arg+1,7,c
 13853  002190  90D8               	bcf	status,0,c
 13854  002192  321B               	rrcf	___ftpack@exp,f,c
 13855  002194  501B               	movf	___ftpack@exp,w,c
 13856  002196  121A               	iorwf	___ftpack@arg+2,f,c
 13857  002198  501C               	movf	___ftpack@sign,w,c
 13858  00219A  A4D8               	btfss	status,2,c
 13859  00219C  8E1A               	bsf	___ftpack@arg+2,7,c
 13860  00219E  C018  F018         	movff	___ftpack@arg,?___ftpack
 13861  0021A2  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 13862  0021A6  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 13863  0021AA  0012               	return	
 13864  0021AC                     __end_of___ftpack:
 13865                           	opt stack 0
 13866                           tosu	equ	0xFFF
 13867                           tosh	equ	0xFFE
 13868                           tosl	equ	0xFFD
 13869                           pclath	equ	0xFFA
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           intcon2	equ	0xFF1
 13878                           postinc0	equ	0xFEE
 13879                           wreg	equ	0xFE8
 13880                           indf1	equ	0xFE7
 13881                           postdec1	equ	0xFE5
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _UART_Write_Text *****************
 13892 ;; Defined at:
 13893 ;;		line 224 in file "EusartApp.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  text            2   24[COMRAM] PTR unsigned char 
 13896 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), STR_11(10), STR_10(10), 
 13897 ;;		 -> STR_9(10), readUartByte@dest(50), STR_7(10), SampleSingleChannel@dest(50), 
 13898 ;;		 -> STR_5(10), STR_4(10), STR_3(20), STR_2(10), 
 13899 ;;		 -> STR_1(10), 
 13900 ;; Auto vars:     Size  Location     Type
 13901 ;;  i               2   28[COMRAM] int 
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  1    wreg      void 
 13904 ;; Registers used:
 13905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 0/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13911 ;;      Params:         2       0       0       0       0       0       0
 13912 ;;      Locals:         2       0       0       0       0       0       0
 13913 ;;      Temps:          2       0       0       0       0       0       0
 13914 ;;      Totals:         6       0       0       0       0       0       0
 13915 ;;Total ram usage:        6 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; Hardware stack levels required when called:    4
 13918 ;; This function calls:
 13919 ;;		_EUSART1_Write
 13920 ;; This function is called by:
 13921 ;;		_AdcSingleSample
 13922 ;;		_SampleSingleChannel
 13923 ;;		_readUartByte
 13924 ;;		_SendUartSystemInitMessage
 13925 ;;		_PrintHelpScreen
 13926 ;; This function uses a non-reentrant model
 13927 ;;
 13928                           
 13929                           	psect	text64
 13930  002698                     __ptext64:
 13931                           	opt stack 0
 13932  002698                     _UART_Write_Text:
 13933                           	opt stack 25
 13934                           
 13935                           ;EusartApp.c: 226: for(int i =0;text[i]!='\0';i++)
 13936                           
 13937                           ;incstack = 0
 13938  002698  0E00               	movlw	0
 13939  00269A  6E1E               	movwf	UART_Write_Text@i+1,c
 13940  00269C  0E00               	movlw	0
 13941  00269E  6E1D               	movwf	UART_Write_Text@i,c
 13942  0026A0  D01A               	goto	l230
 13943  0026A2                     
 13944                           ;EusartApp.c: 227: {
 13945                           ;EusartApp.c: 228: EUSART1_Write(text[i]);
 13946  0026A2  501D               	movf	UART_Write_Text@i,w,c
 13947  0026A4  2419               	addwf	UART_Write_Text@text,w,c
 13948  0026A6  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13949  0026A8  501E               	movf	UART_Write_Text@i+1,w,c
 13950  0026AA  201A               	addwfc	UART_Write_Text@text+1,w,c
 13951  0026AC  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13952  0026AE  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13953  0026B2  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13954  0026B6  6AF8               	clrf	tblptru,c
 13955  0026B8  0E05               	movlw	(high __ramtop+-1)
 13956  0026BA  64F7               	cpfsgt	tblptrh,c
 13957  0026BC  D003               	bra	u8267
 13958  0026BE  0008               	tblrd		*
 13959  0026C0  50F5               	movf	tablat,w,c
 13960  0026C2  D005               	bra	u8260
 13961  0026C4                     u8267:
 13962  0026C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 13963  0026C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 13964  0026CC  50EF               	movf	indf0,w,c
 13965  0026CE                     u8260:
 13966  0026CE  EC11  F017         	call	_EUSART1_Write
 13967  0026D2  4A1D               	infsnz	UART_Write_Text@i,f,c
 13968  0026D4  2A1E               	incf	UART_Write_Text@i+1,f,c
 13969  0026D6                     l230:
 13970  0026D6  501D               	movf	UART_Write_Text@i,w,c
 13971  0026D8  2419               	addwf	UART_Write_Text@text,w,c
 13972  0026DA  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13973  0026DC  501E               	movf	UART_Write_Text@i+1,w,c
 13974  0026DE  201A               	addwfc	UART_Write_Text@text+1,w,c
 13975  0026E0  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13976  0026E2  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13977  0026E6  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13978  0026EA  6AF8               	clrf	tblptru,c
 13979  0026EC  0E05               	movlw	(high __ramtop+-1)
 13980  0026EE  64F7               	cpfsgt	tblptrh,c
 13981  0026F0  D003               	bra	u8277
 13982  0026F2  0008               	tblrd		*
 13983  0026F4  50F5               	movf	tablat,w,c
 13984  0026F6  D005               	bra	u8270
 13985  0026F8                     u8277:
 13986  0026F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 13987  0026FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 13988  002700  50EF               	movf	indf0,w,c
 13989  002702                     u8270:
 13990  002702  0900               	iorlw	0
 13991  002704  B4D8               	btfsc	status,2,c
 13992  002706  0012               	return	
 13993  002708  D7CC               	goto	l231
 13994  00270A                     __end_of_UART_Write_Text:
 13995                           	opt stack 0
 13996                           tosu	equ	0xFFF
 13997                           tosh	equ	0xFFE
 13998                           tosl	equ	0xFFD
 13999                           pclath	equ	0xFFA
 14000                           tblptru	equ	0xFF8
 14001                           tblptrh	equ	0xFF7
 14002                           tblptrl	equ	0xFF6
 14003                           tablat	equ	0xFF5
 14004                           prodh	equ	0xFF4
 14005                           prodl	equ	0xFF3
 14006                           intcon	equ	0xFF2
 14007                           intcon2	equ	0xFF1
 14008                           indf0	equ	0xFEF
 14009                           postinc0	equ	0xFEE
 14010                           fsr0h	equ	0xFEA
 14011                           fsr0l	equ	0xFE9
 14012                           wreg	equ	0xFE8
 14013                           indf1	equ	0xFE7
 14014                           postdec1	equ	0xFE5
 14015                           fsr1h	equ	0xFE2
 14016                           fsr1l	equ	0xFE1
 14017                           indf2	equ	0xFDF
 14018                           postinc2	equ	0xFDE
 14019                           postdec2	equ	0xFDD
 14020                           fsr2h	equ	0xFDA
 14021                           fsr2l	equ	0xFD9
 14022                           status	equ	0xFD8
 14023                           
 14024 ;; *************** function _EUSART1_Write *****************
 14025 ;; Defined at:
 14026 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  txData          1    wreg     unsigned char 
 14029 ;; Auto vars:     Size  Location     Type
 14030 ;;  txData          1   23[COMRAM] unsigned char 
 14031 ;; Return value:  Size  Location     Type
 14032 ;;                  1    wreg      void 
 14033 ;; Registers used:
 14034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14035 ;; Tracked objects:
 14036 ;;		On entry : 0/0
 14037 ;;		On exit  : 0/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14040 ;;      Params:         0       0       0       0       0       0       0
 14041 ;;      Locals:         1       0       0       0       0       0       0
 14042 ;;      Temps:          0       0       0       0       0       0       0
 14043 ;;      Totals:         1       0       0       0       0       0       0
 14044 ;;Total ram usage:        1 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:    3
 14047 ;; This function calls:
 14048 ;;		Nothing
 14049 ;; This function is called by:
 14050 ;;		_UART_Write_Text
 14051 ;;		_WriteUartMessage
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           	psect	text65
 14056  002E22                     __ptext65:
 14057                           	opt stack 0
 14058  002E22                     _EUSART1_Write:
 14059                           	opt stack 25
 14060                           
 14061                           ;incstack = 0
 14062                           ;EUSART1_Write@txData stored from wreg
 14063  002E22  6E18               	movwf	EUSART1_Write@txData,c
 14064  002E24                     
 14065                           ;eusart1.c: 160: {
 14066                           
 14067                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 14068  002E24  0100               	movlb	0	; () banked
 14069  002E26  51FB               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 14070  002E28  B4D8               	btfsc	status,2,c
 14071  002E2A  D7FC               	goto	l7404
 14072                           
 14073                           ; BSR set to: 0
 14074                           ;eusart1.c: 161: }
 14075                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 14076  002E2C  B89D               	btfsc	3997,4,c	;volatile
 14077  002E2E  D003               	goto	l775
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;eusart1.c: 164: {
 14081                           ;eusart1.c: 165: TXREG1 = txData;
 14082  002E30  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 14083                           
 14084                           ;eusart1.c: 166: }
 14085  002E34  D012               	goto	l776
 14086  002E36                     l775:
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;eusart1.c: 167: else
 14090                           ;eusart1.c: 168: {
 14091                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 14092  002E36  989D               	bcf	3997,4,c	;volatile
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 14096  002E38  503C               	movf	_eusart1TxHead,w,c	;volatile
 14097  002E3A  0D01               	mullw	1
 14098  002E3C  0E00               	movlw	low _eusart1TxBuffer
 14099  002E3E  24F3               	addwf	prodl,w,c
 14100  002E40  6ED9               	movwf	fsr2l,c
 14101  002E42  0E02               	movlw	high _eusart1TxBuffer
 14102  002E44  20F4               	addwfc	prodh,w,c
 14103  002E46  6EDA               	movwf	fsr2h,c
 14104  002E48  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 14105                           
 14106                           ; BSR set to: 0
 14107  002E4C  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 14111  002E4E  0E45               	movlw	69
 14112  002E50  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 14113  002E52  D002               	goto	l777
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;eusart1.c: 172: {
 14117                           ;eusart1.c: 173: eusart1TxHead = 0;
 14118  002E54  0E00               	movlw	0
 14119  002E56  6E3C               	movwf	_eusart1TxHead,c	;volatile
 14120  002E58                     l777:
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;eusart1.c: 174: }
 14124                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 14125                           
 14126                           ; BSR set to: 0
 14127  002E58  07FB               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 14128  002E5A                     l776:
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;eusart1.c: 176: }
 14132                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 14133                           
 14134                           ; BSR set to: 0
 14135  002E5A  889D               	bsf	3997,4,c	;volatile
 14136                           
 14137                           ; BSR set to: 0
 14138  002E5C  0012               	return		;funcret
 14139  002E5E                     __end_of_EUSART1_Write:
 14140                           	opt stack 0
 14141                           tosu	equ	0xFFF
 14142                           tosh	equ	0xFFE
 14143                           tosl	equ	0xFFD
 14144                           pclath	equ	0xFFA
 14145                           tblptru	equ	0xFF8
 14146                           tblptrh	equ	0xFF7
 14147                           tblptrl	equ	0xFF6
 14148                           tablat	equ	0xFF5
 14149                           prodh	equ	0xFF4
 14150                           prodl	equ	0xFF3
 14151                           intcon	equ	0xFF2
 14152                           intcon2	equ	0xFF1
 14153                           indf0	equ	0xFEF
 14154                           postinc0	equ	0xFEE
 14155                           fsr0h	equ	0xFEA
 14156                           fsr0l	equ	0xFE9
 14157                           wreg	equ	0xFE8
 14158                           indf1	equ	0xFE7
 14159                           postdec1	equ	0xFE5
 14160                           fsr1h	equ	0xFE2
 14161                           fsr1l	equ	0xFE1
 14162                           indf2	equ	0xFDF
 14163                           postinc2	equ	0xFDE
 14164                           postdec2	equ	0xFDD
 14165                           fsr2h	equ	0xFDA
 14166                           fsr2l	equ	0xFD9
 14167                           status	equ	0xFD8
 14168                           
 14169 ;; *************** function _ADC_GetConversion *****************
 14170 ;; Defined at:
 14171 ;;		line 106 in file "mcc_generated_files/adc.c"
 14172 ;; Parameters:    Size  Location     Type
 14173 ;;  channel         1    wreg     enum E6975
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;  channel         1   27[COMRAM] enum E6975
 14176 ;; Return value:  Size  Location     Type
 14177 ;;                  2   23[COMRAM] unsigned int 
 14178 ;; Registers used:
 14179 ;;		wreg, status,2, status,0
 14180 ;; Tracked objects:
 14181 ;;		On entry : 0/0
 14182 ;;		On exit  : 0/0
 14183 ;;		Unchanged: 0/0
 14184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14185 ;;      Params:         2       0       0       0       0       0       0
 14186 ;;      Locals:         1       0       0       0       0       0       0
 14187 ;;      Temps:          2       0       0       0       0       0       0
 14188 ;;      Totals:         5       0       0       0       0       0       0
 14189 ;;Total ram usage:        5 bytes
 14190 ;; Hardware stack levels used:    1
 14191 ;; Hardware stack levels required when called:    3
 14192 ;; This function calls:
 14193 ;;		Nothing
 14194 ;; This function is called by:
 14195 ;;		_SampleSingleChannel
 14196 ;; This function uses a non-reentrant model
 14197 ;;
 14198                           
 14199                           	psect	text66
 14200  002FAA                     __ptext66:
 14201                           	opt stack 0
 14202  002FAA                     _ADC_GetConversion:
 14203                           	opt stack 26
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;incstack = 0
 14207                           ;ADC_GetConversion@channel stored from wreg
 14208  002FAA  6E1C               	movwf	ADC_GetConversion@channel,c
 14209                           
 14210                           ;adc.c: 109: ADCON0bits.CHS = channel;
 14211  002FAC  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 14212  002FB0  461A               	rlncf	??_ADC_GetConversion,f,c
 14213  002FB2  461A               	rlncf	??_ADC_GetConversion,f,c
 14214  002FB4  50C2               	movf	4034,w,c	;volatile
 14215  002FB6  181A               	xorwf	??_ADC_GetConversion,w,c
 14216  002FB8  0B83               	andlw	-125
 14217  002FBA  181A               	xorwf	??_ADC_GetConversion,w,c
 14218  002FBC  6EC2               	movwf	4034,c	;volatile
 14219                           
 14220                           ;adc.c: 112: ADCON0bits.ADON = 1;
 14221  002FBE  80C2               	bsf	4034,0,c	;volatile
 14222                           
 14223                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 14224  002FC0  82C2               	bsf	4034,1,c	;volatile
 14225  002FC2                     
 14226                           ;adc.c: 119: {
 14227  002FC2  B2C2               	btfsc	4034,1,c	;volatile
 14228  002FC4  D7FE               	goto	l985
 14229                           
 14230                           ;adc.c: 120: }
 14231                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 14232  002FC6  50C4               	movf	4036,w,c	;volatile
 14233  002FC8  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 14234  002FCA  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 14235  002FCC  50C3               	movf	4035,w,c	;volatile
 14236  002FCE  241A               	addwf	??_ADC_GetConversion,w,c
 14237  002FD0  6E18               	movwf	?_ADC_GetConversion,c
 14238  002FD2  0E00               	movlw	0
 14239  002FD4  201B               	addwfc	??_ADC_GetConversion+1,w,c
 14240  002FD6  6E19               	movwf	?_ADC_GetConversion+1,c
 14241  002FD8  0012               	return	
 14242  002FDA                     __end_of_ADC_GetConversion:
 14243                           	opt stack 0
 14244                           tosu	equ	0xFFF
 14245                           tosh	equ	0xFFE
 14246                           tosl	equ	0xFFD
 14247                           pclath	equ	0xFFA
 14248                           tblptru	equ	0xFF8
 14249                           tblptrh	equ	0xFF7
 14250                           tblptrl	equ	0xFF6
 14251                           tablat	equ	0xFF5
 14252                           prodh	equ	0xFF4
 14253                           prodl	equ	0xFF3
 14254                           intcon	equ	0xFF2
 14255                           intcon2	equ	0xFF1
 14256                           indf0	equ	0xFEF
 14257                           postinc0	equ	0xFEE
 14258                           fsr0h	equ	0xFEA
 14259                           fsr0l	equ	0xFE9
 14260                           wreg	equ	0xFE8
 14261                           indf1	equ	0xFE7
 14262                           postdec1	equ	0xFE5
 14263                           fsr1h	equ	0xFE2
 14264                           fsr1l	equ	0xFE1
 14265                           indf2	equ	0xFDF
 14266                           postinc2	equ	0xFDE
 14267                           postdec2	equ	0xFDD
 14268                           fsr2h	equ	0xFDA
 14269                           fsr2l	equ	0xFD9
 14270                           status	equ	0xFD8
 14271                           
 14272 ;; *************** function _InitSystemApplicationManagers *****************
 14273 ;; Defined at:
 14274 ;;		line 33 in file "SystemSettings.c"
 14275 ;; Parameters:    Size  Location     Type
 14276 ;;		None
 14277 ;; Auto vars:     Size  Location     Type
 14278 ;;		None
 14279 ;; Return value:  Size  Location     Type
 14280 ;;                  1    wreg      void 
 14281 ;; Registers used:
 14282 ;;		wreg, status,2, status,0, cstack
 14283 ;; Tracked objects:
 14284 ;;		On entry : 0/0
 14285 ;;		On exit  : 0/0
 14286 ;;		Unchanged: 0/0
 14287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14288 ;;      Params:         0       0       0       0       0       0       0
 14289 ;;      Locals:         0       0       0       0       0       0       0
 14290 ;;      Temps:          0       0       0       0       0       0       0
 14291 ;;      Totals:         0       0       0       0       0       0       0
 14292 ;;Total ram usage:        0 bytes
 14293 ;; Hardware stack levels used:    1
 14294 ;; Hardware stack levels required when called:    7
 14295 ;; This function calls:
 14296 ;;		_ClearMcuRunTime
 14297 ;;		_DacInit
 14298 ;;		_InitAdcApplicationMgr
 14299 ;;		_PLLInitialize
 14300 ;;		_TMR0_StartTimer
 14301 ;; This function is called by:
 14302 ;;		_main
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text67
 14307  0031CA                     __ptext67:
 14308                           	opt stack 0
 14309  0031CA                     _InitSystemApplicationManagers:
 14310                           	opt stack 23
 14311                           
 14312                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 14313                           
 14314                           ;incstack = 0
 14315  0031CA  EC1B  F019         	call	_InitAdcApplicationMgr	;wreg free
 14316                           
 14317                           ;SystemSettings.c: 39: TMR0_StartTimer();
 14318  0031CE  EC24  F019         	call	_TMR0_StartTimer	;wreg free
 14319                           
 14320                           ;SystemSettings.c: 42: PLLInitialize();
 14321  0031D2  EC2A  F019         	call	_PLLInitialize	;wreg free
 14322                           
 14323                           ;SystemSettings.c: 45: ClearMcuRunTime();
 14324  0031D6  ECFA  F018         	call	_ClearMcuRunTime	;wreg free
 14325                           
 14326                           ;SystemSettings.c: 48: DacInit();
 14327  0031DA  EC85  F013         	call	_DacInit	;wreg free
 14328  0031DE  0012               	return		;funcret
 14329  0031E0                     __end_of_InitSystemApplicationManagers:
 14330                           	opt stack 0
 14331                           tosu	equ	0xFFF
 14332                           tosh	equ	0xFFE
 14333                           tosl	equ	0xFFD
 14334                           pclath	equ	0xFFA
 14335                           tblptru	equ	0xFF8
 14336                           tblptrh	equ	0xFF7
 14337                           tblptrl	equ	0xFF6
 14338                           tablat	equ	0xFF5
 14339                           prodh	equ	0xFF4
 14340                           prodl	equ	0xFF3
 14341                           intcon	equ	0xFF2
 14342                           intcon2	equ	0xFF1
 14343                           indf0	equ	0xFEF
 14344                           postinc0	equ	0xFEE
 14345                           fsr0h	equ	0xFEA
 14346                           fsr0l	equ	0xFE9
 14347                           wreg	equ	0xFE8
 14348                           indf1	equ	0xFE7
 14349                           postdec1	equ	0xFE5
 14350                           fsr1h	equ	0xFE2
 14351                           fsr1l	equ	0xFE1
 14352                           indf2	equ	0xFDF
 14353                           postinc2	equ	0xFDE
 14354                           postdec2	equ	0xFDD
 14355                           fsr2h	equ	0xFDA
 14356                           fsr2l	equ	0xFD9
 14357                           status	equ	0xFD8
 14358                           
 14359 ;; *************** function _TMR0_StartTimer *****************
 14360 ;; Defined at:
 14361 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;		None
 14364 ;; Auto vars:     Size  Location     Type
 14365 ;;		None
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      void 
 14368 ;; Registers used:
 14369 ;;		None
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14375 ;;      Params:         0       0       0       0       0       0       0
 14376 ;;      Locals:         0       0       0       0       0       0       0
 14377 ;;      Temps:          0       0       0       0       0       0       0
 14378 ;;      Totals:         0       0       0       0       0       0       0
 14379 ;;Total ram usage:        0 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    3
 14382 ;; This function calls:
 14383 ;;		Nothing
 14384 ;; This function is called by:
 14385 ;;		_InitSystemApplicationManagers
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           	psect	text68
 14390  003248                     __ptext68:
 14391                           	opt stack 0
 14392  003248                     _TMR0_StartTimer:
 14393                           	opt stack 26
 14394                           
 14395                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 14396                           
 14397                           ;incstack = 0
 14398  003248  8ED5               	bsf	4053,7,c	;volatile
 14399  00324A  0012               	return		;funcret
 14400  00324C                     __end_of_TMR0_StartTimer:
 14401                           	opt stack 0
 14402                           tosu	equ	0xFFF
 14403                           tosh	equ	0xFFE
 14404                           tosl	equ	0xFFD
 14405                           pclath	equ	0xFFA
 14406                           tblptru	equ	0xFF8
 14407                           tblptrh	equ	0xFF7
 14408                           tblptrl	equ	0xFF6
 14409                           tablat	equ	0xFF5
 14410                           prodh	equ	0xFF4
 14411                           prodl	equ	0xFF3
 14412                           intcon	equ	0xFF2
 14413                           intcon2	equ	0xFF1
 14414                           indf0	equ	0xFEF
 14415                           postinc0	equ	0xFEE
 14416                           fsr0h	equ	0xFEA
 14417                           fsr0l	equ	0xFE9
 14418                           wreg	equ	0xFE8
 14419                           indf1	equ	0xFE7
 14420                           postdec1	equ	0xFE5
 14421                           fsr1h	equ	0xFE2
 14422                           fsr1l	equ	0xFE1
 14423                           indf2	equ	0xFDF
 14424                           postinc2	equ	0xFDE
 14425                           postdec2	equ	0xFDD
 14426                           fsr2h	equ	0xFDA
 14427                           fsr2l	equ	0xFD9
 14428                           status	equ	0xFD8
 14429                           
 14430 ;; *************** function _PLLInitialize *****************
 14431 ;; Defined at:
 14432 ;;		line 31 in file "SyntApp.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;                  1    wreg      void 
 14439 ;; Registers used:
 14440 ;;		None
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14446 ;;      Params:         0       0       0       0       0       0       0
 14447 ;;      Locals:         0       0       0       0       0       0       0
 14448 ;;      Temps:          0       0       0       0       0       0       0
 14449 ;;      Totals:         0       0       0       0       0       0       0
 14450 ;;Total ram usage:        0 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; Hardware stack levels required when called:    3
 14453 ;; This function calls:
 14454 ;;		Nothing
 14455 ;; This function is called by:
 14456 ;;		_InitSystemApplicationManagers
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           	psect	text69
 14461  003254                     __ptext69:
 14462                           	opt stack 0
 14463  003254                     _PLLInitialize:
 14464                           	opt stack 26
 14465                           
 14466                           ;incstack = 0
 14467  003254  0012               	return		;funcret
 14468  003256                     __end_of_PLLInitialize:
 14469                           	opt stack 0
 14470                           tosu	equ	0xFFF
 14471                           tosh	equ	0xFFE
 14472                           tosl	equ	0xFFD
 14473                           pclath	equ	0xFFA
 14474                           tblptru	equ	0xFF8
 14475                           tblptrh	equ	0xFF7
 14476                           tblptrl	equ	0xFF6
 14477                           tablat	equ	0xFF5
 14478                           prodh	equ	0xFF4
 14479                           prodl	equ	0xFF3
 14480                           intcon	equ	0xFF2
 14481                           intcon2	equ	0xFF1
 14482                           indf0	equ	0xFEF
 14483                           postinc0	equ	0xFEE
 14484                           fsr0h	equ	0xFEA
 14485                           fsr0l	equ	0xFE9
 14486                           wreg	equ	0xFE8
 14487                           indf1	equ	0xFE7
 14488                           postdec1	equ	0xFE5
 14489                           fsr1h	equ	0xFE2
 14490                           fsr1l	equ	0xFE1
 14491                           indf2	equ	0xFDF
 14492                           postinc2	equ	0xFDE
 14493                           postdec2	equ	0xFDD
 14494                           fsr2h	equ	0xFDA
 14495                           fsr2l	equ	0xFD9
 14496                           status	equ	0xFD8
 14497                           
 14498 ;; *************** function _InitAdcApplicationMgr *****************
 14499 ;; Defined at:
 14500 ;;		line 23 in file "AdcApp.c"
 14501 ;; Parameters:    Size  Location     Type
 14502 ;;		None
 14503 ;; Auto vars:     Size  Location     Type
 14504 ;;		None
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		wreg, status,2
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14514 ;;      Params:         0       0       0       0       0       0       0
 14515 ;;      Locals:         0       0       0       0       0       0       0
 14516 ;;      Temps:          0       0       0       0       0       0       0
 14517 ;;      Totals:         0       0       0       0       0       0       0
 14518 ;;Total ram usage:        0 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    3
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_InitSystemApplicationManagers
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           	psect	text70
 14529  003236                     __ptext70:
 14530                           	opt stack 0
 14531  003236                     _InitAdcApplicationMgr:
 14532                           	opt stack 26
 14533                           
 14534                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 14535                           
 14536                           ;incstack = 0
 14537  003236  0E00               	movlw	0
 14538  003238  6E3D               	movwf	_adcSampleMode,c
 14539  00323A  0012               	return		;funcret
 14540  00323C                     __end_of_InitAdcApplicationMgr:
 14541                           	opt stack 0
 14542                           tosu	equ	0xFFF
 14543                           tosh	equ	0xFFE
 14544                           tosl	equ	0xFFD
 14545                           pclath	equ	0xFFA
 14546                           tblptru	equ	0xFF8
 14547                           tblptrh	equ	0xFF7
 14548                           tblptrl	equ	0xFF6
 14549                           tablat	equ	0xFF5
 14550                           prodh	equ	0xFF4
 14551                           prodl	equ	0xFF3
 14552                           intcon	equ	0xFF2
 14553                           intcon2	equ	0xFF1
 14554                           indf0	equ	0xFEF
 14555                           postinc0	equ	0xFEE
 14556                           fsr0h	equ	0xFEA
 14557                           fsr0l	equ	0xFE9
 14558                           wreg	equ	0xFE8
 14559                           indf1	equ	0xFE7
 14560                           postdec1	equ	0xFE5
 14561                           fsr1h	equ	0xFE2
 14562                           fsr1l	equ	0xFE1
 14563                           indf2	equ	0xFDF
 14564                           postinc2	equ	0xFDE
 14565                           postdec2	equ	0xFDD
 14566                           fsr2h	equ	0xFDA
 14567                           fsr2l	equ	0xFD9
 14568                           status	equ	0xFD8
 14569                           
 14570 ;; *************** function _DacInit *****************
 14571 ;; Defined at:
 14572 ;;		line 24 in file "DacApp.c"
 14573 ;; Parameters:    Size  Location     Type
 14574 ;;		None
 14575 ;; Auto vars:     Size  Location     Type
 14576 ;;		None
 14577 ;; Return value:  Size  Location     Type
 14578 ;;                  1    wreg      void 
 14579 ;; Registers used:
 14580 ;;		wreg, status,2, status,0, cstack
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14586 ;;      Params:         0       0       0       0       0       0       0
 14587 ;;      Locals:         0       0       0       0       0       0       0
 14588 ;;      Temps:          0       0       0       0       0       0       0
 14589 ;;      Totals:         0       0       0       0       0       0       0
 14590 ;;Total ram usage:        0 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    6
 14593 ;; This function calls:
 14594 ;;		_SWSPI_send_word
 14595 ;; This function is called by:
 14596 ;;		_InitSystemApplicationManagers
 14597 ;; This function uses a non-reentrant model
 14598 ;;
 14599                           
 14600                           	psect	text71
 14601  00270A                     __ptext71:
 14602                           	opt stack 0
 14603  00270A                     _DacInit:
 14604                           	opt stack 23
 14605                           
 14606                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 14607                           
 14608                           ;incstack = 0
 14609  00270A  0E44               	movlw	68
 14610  00270C  6E21               	movwf	SWSPI_send_word@data,c
 14611  00270E  0E23               	movlw	35
 14612  002710  6E22               	movwf	SWSPI_send_word@data+1,c
 14613  002712  0E00               	movlw	0
 14614  002714  6E23               	movwf	SWSPI_send_word@data+2,c
 14615  002716  0E00               	movlw	0
 14616  002718  6E24               	movwf	SWSPI_send_word@data+3,c
 14617  00271A  0E01               	movlw	1
 14618  00271C  6E25               	movwf	SWSPI_send_word@dataSize,c
 14619  00271E  0E02               	movlw	2
 14620  002720  ECC8  F00F         	call	_SWSPI_send_word
 14621                           
 14622                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 14623  002724  0E44               	movlw	68
 14624  002726  6E21               	movwf	SWSPI_send_word@data,c
 14625  002728  0E63               	movlw	99
 14626  00272A  6E22               	movwf	SWSPI_send_word@data+1,c
 14627  00272C  0E00               	movlw	0
 14628  00272E  6E23               	movwf	SWSPI_send_word@data+2,c
 14629  002730  0E00               	movlw	0
 14630  002732  6E24               	movwf	SWSPI_send_word@data+3,c
 14631  002734  0E01               	movlw	1
 14632  002736  6E25               	movwf	SWSPI_send_word@dataSize,c
 14633  002738  0E02               	movlw	2
 14634  00273A  ECC8  F00F         	call	_SWSPI_send_word
 14635                           
 14636                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 14637  00273E  0E44               	movlw	68
 14638  002740  6E21               	movwf	SWSPI_send_word@data,c
 14639  002742  0EA3               	movlw	163
 14640  002744  6E22               	movwf	SWSPI_send_word@data+1,c
 14641  002746  0E00               	movlw	0
 14642  002748  6E23               	movwf	SWSPI_send_word@data+2,c
 14643  00274A  0E00               	movlw	0
 14644  00274C  6E24               	movwf	SWSPI_send_word@data+3,c
 14645  00274E  0E01               	movlw	1
 14646  002750  6E25               	movwf	SWSPI_send_word@dataSize,c
 14647  002752  0E02               	movlw	2
 14648  002754  ECC8  F00F         	call	_SWSPI_send_word
 14649                           
 14650                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 14651  002758  0E44               	movlw	68
 14652  00275A  6E21               	movwf	SWSPI_send_word@data,c
 14653  00275C  0EE3               	movlw	227
 14654  00275E  6E22               	movwf	SWSPI_send_word@data+1,c
 14655  002760  0E00               	movlw	0
 14656  002762  6E23               	movwf	SWSPI_send_word@data+2,c
 14657  002764  0E00               	movlw	0
 14658  002766  6E24               	movwf	SWSPI_send_word@data+3,c
 14659  002768  0E01               	movlw	1
 14660  00276A  6E25               	movwf	SWSPI_send_word@dataSize,c
 14661  00276C  0E02               	movlw	2
 14662  00276E  ECC8  F00F         	call	_SWSPI_send_word
 14663  002772  0012               	return		;funcret
 14664  002774                     __end_of_DacInit:
 14665                           	opt stack 0
 14666                           tosu	equ	0xFFF
 14667                           tosh	equ	0xFFE
 14668                           tosl	equ	0xFFD
 14669                           pclath	equ	0xFFA
 14670                           tblptru	equ	0xFF8
 14671                           tblptrh	equ	0xFF7
 14672                           tblptrl	equ	0xFF6
 14673                           tablat	equ	0xFF5
 14674                           prodh	equ	0xFF4
 14675                           prodl	equ	0xFF3
 14676                           intcon	equ	0xFF2
 14677                           intcon2	equ	0xFF1
 14678                           indf0	equ	0xFEF
 14679                           postinc0	equ	0xFEE
 14680                           fsr0h	equ	0xFEA
 14681                           fsr0l	equ	0xFE9
 14682                           wreg	equ	0xFE8
 14683                           indf1	equ	0xFE7
 14684                           postdec1	equ	0xFE5
 14685                           fsr1h	equ	0xFE2
 14686                           fsr1l	equ	0xFE1
 14687                           indf2	equ	0xFDF
 14688                           postinc2	equ	0xFDE
 14689                           postdec2	equ	0xFDD
 14690                           fsr2h	equ	0xFDA
 14691                           fsr2l	equ	0xFD9
 14692                           status	equ	0xFD8
 14693                           
 14694 ;; *************** function _SWSPI_send_word *****************
 14695 ;; Defined at:
 14696 ;;		line 17 in file "SwSpiApp.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;  phrType         1    wreg     enum E7598
 14699 ;;  data            4   32[COMRAM] unsigned long 
 14700 ;;  dataSize        1   36[COMRAM] unsigned char 
 14701 ;; Auto vars:     Size  Location     Type
 14702 ;;  phrType         1   40[COMRAM] enum E7598
 14703 ;;  datac           1   37[COMRAM] unsigned char 
 14704 ;;  idx             2   38[COMRAM] int 
 14705 ;; Return value:  Size  Location     Type
 14706 ;;                  1    wreg      void 
 14707 ;; Registers used:
 14708 ;;		wreg, status,2, status,0, cstack
 14709 ;; Tracked objects:
 14710 ;;		On entry : 0/0
 14711 ;;		On exit  : 0/0
 14712 ;;		Unchanged: 0/0
 14713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14714 ;;      Params:         5       0       0       0       0       0       0
 14715 ;;      Locals:         4       0       0       0       0       0       0
 14716 ;;      Temps:          0       0       0       0       0       0       0
 14717 ;;      Totals:         9       0       0       0       0       0       0
 14718 ;;Total ram usage:        9 bytes
 14719 ;; Hardware stack levels used:    1
 14720 ;; Hardware stack levels required when called:    5
 14721 ;; This function calls:
 14722 ;;		_SWSPI_DAC_send_bits
 14723 ;;		_SWSPI_Synth_send_bits
 14724 ;;		_SwSpi_Set_Dac_Sync_Pin
 14725 ;;		_SwSpi_Set_Synth_Le_Pin
 14726 ;;		_make8
 14727 ;; This function is called by:
 14728 ;;		_DacInit
 14729 ;;		_DacSetValue
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           	psect	text72
 14734  001F90                     __ptext72:
 14735                           	opt stack 0
 14736  001F90                     _SWSPI_send_word:
 14737                           	opt stack 23
 14738                           
 14739                           ;incstack = 0
 14740                           ;SWSPI_send_word@phrType stored from wreg
 14741  001F90  6E29               	movwf	SWSPI_send_word@phrType,c
 14742                           
 14743                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 14744  001F92  9EF2               	bcf	intcon,7,c	;volatile
 14745                           
 14746                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 14747  001F94  5029               	movf	SWSPI_send_word@phrType,w,c
 14748  001F96  B4D8               	btfsc	status,2,c
 14749  001F98  D003               	goto	u5520
 14750  001F9A  0429               	decf	SWSPI_send_word@phrType,w,c
 14751  001F9C  A4D8               	btfss	status,2,c
 14752  001F9E  D005               	goto	l493
 14753  001FA0                     u5520:
 14754                           
 14755                           ;SwSpiApp.c: 24: {
 14756                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 14757  001FA0  0E00               	movlw	0
 14758  001FA2  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14759  001FA4  5029               	movf	SWSPI_send_word@phrType,w,c
 14760  001FA6  EC2F  F017         	call	_SwSpi_Set_Synth_Le_Pin
 14761  001FAA                     l493:
 14762                           
 14763                           ;SwSpiApp.c: 26: }
 14764                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
 14765  001FAA  0E02               	movlw	2
 14766  001FAC  1829               	xorwf	SWSPI_send_word@phrType,w,c
 14767  001FAE  A4D8               	btfss	status,2,c
 14768  001FB0  D003               	goto	l496
 14769                           
 14770                           ;SwSpiApp.c: 28: {
 14771                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 14772  001FB2  0E00               	movlw	0
 14773  001FB4  ECB3  F018         	call	_SwSpi_Set_Dac_Sync_Pin
 14774  001FB8                     l496:
 14775                           
 14776                           ;SwSpiApp.c: 30: }
 14777                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 14778  001FB8  0E01               	movlw	1
 14779  001FBA  2425               	addwf	SWSPI_send_word@dataSize,w,c
 14780  001FBC  6E27               	movwf	SWSPI_send_word@idx,c
 14781  001FBE  6A28               	clrf	SWSPI_send_word@idx+1,c
 14782  001FC0  0E00               	movlw	0
 14783  001FC2  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 14784  001FC4                     l5740:
 14785  001FC4  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 14786  001FC6  D02B               	goto	u5580
 14787  001FC8  5028               	movf	SWSPI_send_word@idx+1,w,c
 14788  001FCA  E103               	bnz	l5744
 14789  001FCC  0427               	decf	SWSPI_send_word@idx,w,c
 14790  001FCE  A0D8               	btfss	status,0,c
 14791  001FD0  D026               	goto	u5580
 14792  001FD2                     l5744:
 14793                           
 14794                           ;SwSpiApp.c: 36: {
 14795                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 14796  001FD2  C021  F018         	movff	SWSPI_send_word@data,make8@data
 14797  001FD6  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 14798  001FDA  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 14799  001FDE  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 14800  001FE2  0427               	decf	SWSPI_send_word@idx,w,c
 14801  001FE4  6E1C               	movwf	make8@dataLocation,c
 14802  001FE6  EC7A  F014         	call	_make8	;wreg free
 14803  001FEA  6E26               	movwf	SWSPI_send_word@datac,c
 14804                           
 14805                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 14806  001FEC  5029               	movf	SWSPI_send_word@phrType,w,c
 14807  001FEE  B4D8               	btfsc	status,2,c
 14808  001FF0  D003               	goto	u5560
 14809  001FF2  0429               	decf	SWSPI_send_word@phrType,w,c
 14810  001FF4  A4D8               	btfss	status,2,c
 14811  001FF6  D006               	goto	l499
 14812  001FF8                     u5560:
 14813                           
 14814                           ;SwSpiApp.c: 40: {
 14815                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
 14816  001FF8  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
 14817  001FFC  5029               	movf	SWSPI_send_word@phrType,w,c
 14818  001FFE  ECD4  F014         	call	_SWSPI_Synth_send_bits
 14819                           
 14820                           ;SwSpiApp.c: 42: }
 14821  002002  D009               	goto	l503
 14822  002004                     l499:
 14823                           
 14824                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
 14825  002004  0E02               	movlw	2
 14826  002006  1829               	xorwf	SWSPI_send_word@phrType,w,c
 14827  002008  A4D8               	btfss	status,2,c
 14828  00200A  D005               	goto	l503
 14829                           
 14830                           ;SwSpiApp.c: 44: {
 14831                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
 14832  00200C  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 14833  002010  5029               	movf	SWSPI_send_word@phrType,w,c
 14834  002012  EC00  F015         	call	_SWSPI_DAC_send_bits
 14835  002016                     l503:
 14836  002016  0627               	decf	SWSPI_send_word@idx,f,c
 14837  002018  A0D8               	btfss	status,0,c
 14838  00201A  0628               	decf	SWSPI_send_word@idx+1,f,c
 14839  00201C  D7D3               	goto	l5740
 14840  00201E                     u5580:
 14841                           
 14842                           ;SwSpiApp.c: 46: }
 14843                           ;SwSpiApp.c: 47: }
 14844                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
 14845  00201E  0E02               	movlw	2
 14846  002020  1829               	xorwf	SWSPI_send_word@phrType,w,c
 14847  002022  A4D8               	btfss	status,2,c
 14848  002024  D004               	goto	l504
 14849                           
 14850                           ;SwSpiApp.c: 53: {
 14851                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
 14852  002026  0E01               	movlw	1
 14853  002028  ECB3  F018         	call	_SwSpi_Set_Dac_Sync_Pin
 14854                           
 14855                           ;SwSpiApp.c: 55: }
 14856  00202C  D00B               	goto	l506
 14857  00202E                     l504:
 14858                           
 14859                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 14860  00202E  5029               	movf	SWSPI_send_word@phrType,w,c
 14861  002030  B4D8               	btfsc	status,2,c
 14862  002032  D003               	goto	u5610
 14863  002034  0429               	decf	SWSPI_send_word@phrType,w,c
 14864  002036  A4D8               	btfss	status,2,c
 14865  002038  D005               	goto	l506
 14866  00203A                     u5610:
 14867                           
 14868                           ;SwSpiApp.c: 57: {
 14869                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 14870  00203A  0E01               	movlw	1
 14871  00203C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14872  00203E  5029               	movf	SWSPI_send_word@phrType,w,c
 14873  002040  EC2F  F017         	call	_SwSpi_Set_Synth_Le_Pin
 14874  002044                     l506:
 14875                           
 14876                           ;SwSpiApp.c: 59: }
 14877                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
 14878  002044  8EF2               	bsf	intcon,7,c	;volatile
 14879  002046  0012               	return		;funcret
 14880  002048                     __end_of_SWSPI_send_word:
 14881                           	opt stack 0
 14882                           tosu	equ	0xFFF
 14883                           tosh	equ	0xFFE
 14884                           tosl	equ	0xFFD
 14885                           pclath	equ	0xFFA
 14886                           tblptru	equ	0xFF8
 14887                           tblptrh	equ	0xFF7
 14888                           tblptrl	equ	0xFF6
 14889                           tablat	equ	0xFF5
 14890                           prodh	equ	0xFF4
 14891                           prodl	equ	0xFF3
 14892                           intcon	equ	0xFF2
 14893                           intcon2	equ	0xFF1
 14894                           indf0	equ	0xFEF
 14895                           postinc0	equ	0xFEE
 14896                           fsr0h	equ	0xFEA
 14897                           fsr0l	equ	0xFE9
 14898                           wreg	equ	0xFE8
 14899                           indf1	equ	0xFE7
 14900                           postdec1	equ	0xFE5
 14901                           fsr1h	equ	0xFE2
 14902                           fsr1l	equ	0xFE1
 14903                           indf2	equ	0xFDF
 14904                           postinc2	equ	0xFDE
 14905                           postdec2	equ	0xFDD
 14906                           fsr2h	equ	0xFDA
 14907                           fsr2l	equ	0xFD9
 14908                           status	equ	0xFD8
 14909                           
 14910 ;; *************** function _make8 *****************
 14911 ;; Defined at:
 14912 ;;		line 60 in file "SystemCommon.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  data            4   23[COMRAM] unsigned long 
 14915 ;;  dataLocation    1   27[COMRAM] unsigned char 
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;		None
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      unsigned char 
 14920 ;; Registers used:
 14921 ;;		wreg, status,2, status,0
 14922 ;; Tracked objects:
 14923 ;;		On entry : 0/0
 14924 ;;		On exit  : 0/0
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14927 ;;      Params:         5       0       0       0       0       0       0
 14928 ;;      Locals:         0       0       0       0       0       0       0
 14929 ;;      Temps:          4       0       0       0       0       0       0
 14930 ;;      Totals:         9       0       0       0       0       0       0
 14931 ;;Total ram usage:        9 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; Hardware stack levels required when called:    3
 14934 ;; This function calls:
 14935 ;;		Nothing
 14936 ;; This function is called by:
 14937 ;;		_SWSPI_send_word
 14938 ;;		_FlashReadCondition
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           	psect	text73
 14943  0028F4                     __ptext73:
 14944                           	opt stack 0
 14945  0028F4                     _make8:
 14946                           	opt stack 24
 14947                           
 14948                           ;SystemCommon.c: 62: switch(dataLocation)
 14949                           
 14950                           ;incstack = 0
 14951  0028F4  D01F               	goto	l1140
 14952  0028F6                     
 14953                           ;SystemCommon.c: 65: return (data & 0x000000ff);
 14954  0028F6  5018               	movf	make8@data,w,c
 14955  0028F8  0012               	return	
 14956  0028FA                     
 14957                           ;SystemCommon.c: 68: return (data & 0x0000ff00) >> 8;
 14958  0028FA  5019               	movf	make8@data+1,w,c
 14959  0028FC  0012               	return	
 14960  0028FE                     
 14961                           ;SystemCommon.c: 71: return (data & 0x00ff0000) >> 16;
 14962  0028FE  501A               	movf	make8@data+2,w,c
 14963  002900  0012               	return	
 14964  002902                     
 14965                           ;SystemCommon.c: 74: return (data & 0xff000000) >> 24;
 14966  002902  0E00               	movlw	0
 14967  002904  1418               	andwf	make8@data,w,c
 14968  002906  6E1D               	movwf	??_make8& (0+255),c
 14969  002908  0E00               	movlw	0
 14970  00290A  1419               	andwf	make8@data+1,w,c
 14971  00290C  6E1E               	movwf	(??_make8+1)& (0+255),c
 14972  00290E  0E00               	movlw	0
 14973  002910  141A               	andwf	make8@data+2,w,c
 14974  002912  6E1F               	movwf	(??_make8+2)& (0+255),c
 14975  002914  0EFF               	movlw	255
 14976  002916  141B               	andwf	make8@data+3,w,c
 14977  002918  6E20               	movwf	(??_make8+3)& (0+255),c
 14978  00291A  0E19               	movlw	25
 14979  00291C  D005               	goto	u5260
 14980  00291E                     u5265:
 14981  00291E  90D8               	bcf	status,0,c
 14982  002920  3220               	rrcf	??_make8+3,f,c
 14983  002922  321F               	rrcf	??_make8+2,f,c
 14984  002924  321E               	rrcf	??_make8+1,f,c
 14985  002926  321D               	rrcf	??_make8,f,c
 14986  002928                     u5260:
 14987  002928  2EE8               	decfsz	wreg,f,c
 14988  00292A  D7F9               	goto	u5265
 14989  00292C  501D               	movf	??_make8,w,c
 14990  00292E  0012               	return	
 14991  002930                     
 14992                           ;SystemCommon.c: 77: return (0);
 14993  002930  0E00               	movlw	0
 14994                           
 14995                           ;SystemCommon.c: 78: }
 14996  002932  0012               	return	
 14997  002934                     l1140:
 14998  002934  501C               	movf	make8@dataLocation,w,c
 14999                           
 15000                           ; Switch size 1, requested type "space"
 15001                           ; Number of cases is 4, Range of values is 0 to 3
 15002                           ; switch strategies available:
 15003                           ; Name         Instructions Cycles
 15004                           ; simple_byte           13     7 (average)
 15005                           ;	Chosen strategy is simple_byte
 15006  002936  0A00               	xorlw	0	; case 0
 15007  002938  B4D8               	btfsc	status,2,c
 15008  00293A  D7DD               	goto	l1141
 15009  00293C  0A01               	xorlw	1	; case 1
 15010  00293E  B4D8               	btfsc	status,2,c
 15011  002940  D7DC               	goto	l1143
 15012  002942  0A03               	xorlw	3	; case 2
 15013  002944  B4D8               	btfsc	status,2,c
 15014  002946  D7DB               	goto	l1144
 15015  002948  0A01               	xorlw	1	; case 3
 15016  00294A  B4D8               	btfsc	status,2,c
 15017  00294C  D7DA               	goto	l1145
 15018  00294E  D7F0               	goto	l1146
 15019  002950                     __end_of_make8:
 15020                           	opt stack 0
 15021                           tosu	equ	0xFFF
 15022                           tosh	equ	0xFFE
 15023                           tosl	equ	0xFFD
 15024                           pclath	equ	0xFFA
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           intcon2	equ	0xFF1
 15033                           indf0	equ	0xFEF
 15034                           postinc0	equ	0xFEE
 15035                           fsr0h	equ	0xFEA
 15036                           fsr0l	equ	0xFE9
 15037                           wreg	equ	0xFE8
 15038                           indf1	equ	0xFE7
 15039                           postdec1	equ	0xFE5
 15040                           fsr1h	equ	0xFE2
 15041                           fsr1l	equ	0xFE1
 15042                           indf2	equ	0xFDF
 15043                           postinc2	equ	0xFDE
 15044                           postdec2	equ	0xFDD
 15045                           fsr2h	equ	0xFDA
 15046                           fsr2l	equ	0xFD9
 15047                           status	equ	0xFD8
 15048                           
 15049 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 15050 ;; Defined at:
 15051 ;;		line 252 in file "SwSpiApp.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;  phrType         1    wreg     enum E7598
 15054 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;  phrType         1   24[COMRAM] enum E7598
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  1    wreg      void 
 15059 ;; Registers used:
 15060 ;;		wreg, status,2, status,0
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15066 ;;      Params:         1       0       0       0       0       0       0
 15067 ;;      Locals:         1       0       0       0       0       0       0
 15068 ;;      Temps:          0       0       0       0       0       0       0
 15069 ;;      Totals:         2       0       0       0       0       0       0
 15070 ;;Total ram usage:        2 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    3
 15073 ;; This function calls:
 15074 ;;		Nothing
 15075 ;; This function is called by:
 15076 ;;		_SWSPI_send_word
 15077 ;; This function uses a non-reentrant model
 15078 ;;
 15079                           
 15080                           	psect	text74
 15081  002E5E                     __ptext74:
 15082                           	opt stack 0
 15083  002E5E                     _SwSpi_Set_Synth_Le_Pin:
 15084                           	opt stack 24
 15085                           
 15086                           ;incstack = 0
 15087                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 15088  002E5E  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 15089                           
 15090                           ;SwSpiApp.c: 254: switch(phrType)
 15091  002E60  D014               	goto	l615
 15092  002E62                     
 15093                           ;SwSpiApp.c: 257: if(cPinMode == 1)
 15094  002E62  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15095  002E64  A4D8               	btfss	status,2,c
 15096  002E66  D002               	goto	l617
 15097                           
 15098                           ;SwSpiApp.c: 258: {
 15099                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
 15100  002E68  848B               	bsf	3979,2,c	;volatile
 15101                           
 15102                           ;SwSpiApp.c: 260: }
 15103  002E6A  0012               	return	
 15104  002E6C                     l617:
 15105                           
 15106                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
 15107  002E6C  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15108  002E6E  A4D8               	btfss	status,2,c
 15109  002E70  0012               	return	
 15110                           
 15111                           ;SwSpiApp.c: 262: {
 15112                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
 15113  002E72  948B               	bcf	3979,2,c	;volatile
 15114                           
 15115                           ;SwSpiApp.c: 264: }
 15116                           ;SwSpiApp.c: 265: break;
 15117  002E74  0012               	return	
 15118  002E76                     
 15119                           ;SwSpiApp.c: 268: if(cPinMode == 1)
 15120  002E76  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15121  002E78  A4D8               	btfss	status,2,c
 15122  002E7A  D002               	goto	l626
 15123                           
 15124                           ;SwSpiApp.c: 269: {
 15125                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
 15126  002E7C  868C               	bsf	3980,3,c	;volatile
 15127                           
 15128                           ;SwSpiApp.c: 271: }
 15129  002E7E  0012               	return	
 15130  002E80                     l626:
 15131                           
 15132                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
 15133  002E80  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15134  002E82  A4D8               	btfss	status,2,c
 15135  002E84  0012               	return	
 15136                           
 15137                           ;SwSpiApp.c: 273: {
 15138                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
 15139  002E86  968C               	bcf	3980,3,c	;volatile
 15140                           
 15141                           ;SwSpiApp.c: 277: }
 15142                           
 15143                           ;SwSpiApp.c: 275: }
 15144                           ;SwSpiApp.c: 276: break;
 15145  002E88  0012               	return	
 15146  002E8A                     l615:
 15147  002E8A  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 15148                           
 15149                           ; Switch size 1, requested type "space"
 15150                           ; Number of cases is 2, Range of values is 0 to 1
 15151                           ; switch strategies available:
 15152                           ; Name         Instructions Cycles
 15153                           ; simple_byte            7     4 (average)
 15154                           ;	Chosen strategy is simple_byte
 15155  002E8C  0A00               	xorlw	0	; case 0
 15156  002E8E  B4D8               	btfsc	status,2,c
 15157  002E90  D7E8               	goto	l616
 15158  002E92  0A01               	xorlw	1	; case 1
 15159  002E94  A4D8               	btfss	status,2,c
 15160  002E96  0012               	return	
 15161  002E98  D7EE               	goto	l625
 15162  002E9A                     __end_of_SwSpi_Set_Synth_Le_Pin:
 15163                           	opt stack 0
 15164                           tosu	equ	0xFFF
 15165                           tosh	equ	0xFFE
 15166                           tosl	equ	0xFFD
 15167                           pclath	equ	0xFFA
 15168                           tblptru	equ	0xFF8
 15169                           tblptrh	equ	0xFF7
 15170                           tblptrl	equ	0xFF6
 15171                           tablat	equ	0xFF5
 15172                           prodh	equ	0xFF4
 15173                           prodl	equ	0xFF3
 15174                           intcon	equ	0xFF2
 15175                           intcon2	equ	0xFF1
 15176                           indf0	equ	0xFEF
 15177                           postinc0	equ	0xFEE
 15178                           fsr0h	equ	0xFEA
 15179                           fsr0l	equ	0xFE9
 15180                           wreg	equ	0xFE8
 15181                           indf1	equ	0xFE7
 15182                           postdec1	equ	0xFE5
 15183                           fsr1h	equ	0xFE2
 15184                           fsr1l	equ	0xFE1
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           postdec2	equ	0xFDD
 15188                           fsr2h	equ	0xFDA
 15189                           fsr2l	equ	0xFD9
 15190                           status	equ	0xFD8
 15191                           
 15192 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 15193 ;; Defined at:
 15194 ;;		line 280 in file "SwSpiApp.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  cPinMode        1    wreg     unsigned char 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  1    wreg      void 
 15201 ;; Registers used:
 15202 ;;		wreg, status,2, status,0
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15208 ;;      Params:         0       0       0       0       0       0       0
 15209 ;;      Locals:         1       0       0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0
 15211 ;;      Totals:         1       0       0       0       0       0       0
 15212 ;;Total ram usage:        1 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    3
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_SWSPI_send_word
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           	psect	text75
 15223  003166                     __ptext75:
 15224                           	opt stack 0
 15225  003166                     _SwSpi_Set_Dac_Sync_Pin:
 15226                           	opt stack 24
 15227                           
 15228                           ;incstack = 0
 15229                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 15230  003166  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 15231                           
 15232                           ;SwSpiApp.c: 282: switch(cPinMode)
 15233  003168  D004               	goto	l636
 15234  00316A                     
 15235                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
 15236  00316A  9489               	bcf	3977,2,c	;volatile
 15237                           
 15238                           ;SwSpiApp.c: 286: break;
 15239  00316C  0012               	return	
 15240  00316E                     
 15241                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
 15242  00316E  8489               	bsf	3977,2,c	;volatile
 15243                           
 15244                           ;SwSpiApp.c: 291: }
 15245                           
 15246                           ;SwSpiApp.c: 290: break;
 15247  003170  0012               	return	
 15248  003172                     l636:
 15249  003172  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 15250                           
 15251                           ; Switch size 1, requested type "space"
 15252                           ; Number of cases is 2, Range of values is 0 to 1
 15253                           ; switch strategies available:
 15254                           ; Name         Instructions Cycles
 15255                           ; simple_byte            7     4 (average)
 15256                           ;	Chosen strategy is simple_byte
 15257  003174  0A00               	xorlw	0	; case 0
 15258  003176  B4D8               	btfsc	status,2,c
 15259  003178  D7F8               	goto	l637
 15260  00317A  0A01               	xorlw	1	; case 1
 15261  00317C  A4D8               	btfss	status,2,c
 15262  00317E  0012               	return	
 15263  003180  D7F6               	goto	l641
 15264  003182                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 15265                           	opt stack 0
 15266                           tosu	equ	0xFFF
 15267                           tosh	equ	0xFFE
 15268                           tosl	equ	0xFFD
 15269                           pclath	equ	0xFFA
 15270                           tblptru	equ	0xFF8
 15271                           tblptrh	equ	0xFF7
 15272                           tblptrl	equ	0xFF6
 15273                           tablat	equ	0xFF5
 15274                           prodh	equ	0xFF4
 15275                           prodl	equ	0xFF3
 15276                           intcon	equ	0xFF2
 15277                           intcon2	equ	0xFF1
 15278                           indf0	equ	0xFEF
 15279                           postinc0	equ	0xFEE
 15280                           fsr0h	equ	0xFEA
 15281                           fsr0l	equ	0xFE9
 15282                           wreg	equ	0xFE8
 15283                           indf1	equ	0xFE7
 15284                           postdec1	equ	0xFE5
 15285                           fsr1h	equ	0xFE2
 15286                           fsr1l	equ	0xFE1
 15287                           indf2	equ	0xFDF
 15288                           postinc2	equ	0xFDE
 15289                           postdec2	equ	0xFDD
 15290                           fsr2h	equ	0xFDA
 15291                           fsr2l	equ	0xFD9
 15292                           status	equ	0xFD8
 15293                           
 15294 ;; *************** function _SWSPI_Synth_send_bits *****************
 15295 ;; Defined at:
 15296 ;;		line 89 in file "SwSpiApp.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  phrType         1    wreg     enum E7598
 15299 ;;  data            1   25[COMRAM] unsigned char 
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  phrType         1   27[COMRAM] enum E7598
 15302 ;;  count           1   26[COMRAM] unsigned char 
 15303 ;; Return value:  Size  Location     Type
 15304 ;;                  1    wreg      void 
 15305 ;; Registers used:
 15306 ;;		wreg, status,2, status,0, cstack
 15307 ;; Tracked objects:
 15308 ;;		On entry : 0/0
 15309 ;;		On exit  : 0/0
 15310 ;;		Unchanged: 0/0
 15311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15312 ;;      Params:         1       0       0       0       0       0       0
 15313 ;;      Locals:         2       0       0       0       0       0       0
 15314 ;;      Temps:          0       0       0       0       0       0       0
 15315 ;;      Totals:         3       0       0       0       0       0       0
 15316 ;;Total ram usage:        3 bytes
 15317 ;; Hardware stack levels used:    1
 15318 ;; Hardware stack levels required when called:    4
 15319 ;; This function calls:
 15320 ;;		_SwSpi_Clk_Pin
 15321 ;;		_SwSpi_Data_Pin
 15322 ;; This function is called by:
 15323 ;;		_SWSPI_send_word
 15324 ;; This function uses a non-reentrant model
 15325 ;;
 15326                           
 15327                           	psect	text76
 15328  0029A8                     __ptext76:
 15329                           	opt stack 0
 15330  0029A8                     _SWSPI_Synth_send_bits:
 15331                           	opt stack 23
 15332                           
 15333                           ;incstack = 0
 15334                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 15335  0029A8  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
 15336                           
 15337                           ;SwSpiApp.c: 91: uint8_t count;
 15338                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
 15339  0029AA  0E08               	movlw	8
 15340  0029AC  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
 15341  0029AE  D01A               	goto	l520
 15342  0029B0                     
 15343                           ;SwSpiApp.c: 93: {
 15344                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
 15345  0029B0  0E00               	movlw	0
 15346  0029B2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15347  0029B4  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15348  0029B6  EC82  F015         	call	_SwSpi_Clk_Pin
 15349                           
 15350                           ;SwSpiApp.c: 96: if (data & 0X80)
 15351  0029BA  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
 15352  0029BC  D006               	goto	l522
 15353                           
 15354                           ;SwSpiApp.c: 97: {
 15355                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
 15356  0029BE  0E01               	movlw	1
 15357  0029C0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15358  0029C2  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15359  0029C4  EC57  F015         	call	_SwSpi_Data_Pin
 15360                           
 15361                           ;SwSpiApp.c: 100: }
 15362  0029C8  D005               	goto	l523
 15363  0029CA                     l522:
 15364                           
 15365                           ;SwSpiApp.c: 101: else
 15366                           ;SwSpiApp.c: 102: {
 15367                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
 15368  0029CA  0E00               	movlw	0
 15369  0029CC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15370  0029CE  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15371  0029D0  EC57  F015         	call	_SwSpi_Data_Pin
 15372  0029D4                     l523:
 15373                           
 15374                           ;SwSpiApp.c: 104: }
 15375                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
 15376  0029D4  0E01               	movlw	1
 15377  0029D6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15378  0029D8  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15379  0029DA  EC82  F015         	call	_SwSpi_Clk_Pin
 15380  0029DE  061B               	decf	SWSPI_Synth_send_bits@count,f,c
 15381  0029E0  90D8               	bcf	status,0,c
 15382  0029E2  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
 15383  0029E4                     l520:
 15384  0029E4  501B               	movf	SWSPI_Synth_send_bits@count,w,c
 15385  0029E6  A4D8               	btfss	status,2,c
 15386  0029E8  D7E3               	goto	l521
 15387                           
 15388                           ;SwSpiApp.c: 113: }
 15389                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
 15390  0029EA  0E00               	movlw	0
 15391  0029EC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15392  0029EE  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15393  0029F0  EC57  F015         	call	_SwSpi_Data_Pin
 15394                           
 15395                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
 15396  0029F4  0E00               	movlw	0
 15397  0029F6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15398  0029F8  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 15399  0029FA  EC82  F015         	call	_SwSpi_Clk_Pin
 15400  0029FE  0012               	return		;funcret
 15401  002A00                     __end_of_SWSPI_Synth_send_bits:
 15402                           	opt stack 0
 15403                           tosu	equ	0xFFF
 15404                           tosh	equ	0xFFE
 15405                           tosl	equ	0xFFD
 15406                           pclath	equ	0xFFA
 15407                           tblptru	equ	0xFF8
 15408                           tblptrh	equ	0xFF7
 15409                           tblptrl	equ	0xFF6
 15410                           tablat	equ	0xFF5
 15411                           prodh	equ	0xFF4
 15412                           prodl	equ	0xFF3
 15413                           intcon	equ	0xFF2
 15414                           intcon2	equ	0xFF1
 15415                           indf0	equ	0xFEF
 15416                           postinc0	equ	0xFEE
 15417                           fsr0h	equ	0xFEA
 15418                           fsr0l	equ	0xFE9
 15419                           wreg	equ	0xFE8
 15420                           indf1	equ	0xFE7
 15421                           postdec1	equ	0xFE5
 15422                           fsr1h	equ	0xFE2
 15423                           fsr1l	equ	0xFE1
 15424                           indf2	equ	0xFDF
 15425                           postinc2	equ	0xFDE
 15426                           postdec2	equ	0xFDD
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431 ;; *************** function _SWSPI_DAC_send_bits *****************
 15432 ;; Defined at:
 15433 ;;		line 65 in file "SwSpiApp.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  phrType         1    wreg     enum E7598
 15436 ;;  data            1   25[COMRAM] unsigned char 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;  phrType         1   27[COMRAM] enum E7598
 15439 ;;  count           1   26[COMRAM] unsigned char 
 15440 ;; Return value:  Size  Location     Type
 15441 ;;                  1    wreg      void 
 15442 ;; Registers used:
 15443 ;;		wreg, status,2, status,0, cstack
 15444 ;; Tracked objects:
 15445 ;;		On entry : 0/0
 15446 ;;		On exit  : 0/0
 15447 ;;		Unchanged: 0/0
 15448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15449 ;;      Params:         1       0       0       0       0       0       0
 15450 ;;      Locals:         2       0       0       0       0       0       0
 15451 ;;      Temps:          0       0       0       0       0       0       0
 15452 ;;      Totals:         3       0       0       0       0       0       0
 15453 ;;Total ram usage:        3 bytes
 15454 ;; Hardware stack levels used:    1
 15455 ;; Hardware stack levels required when called:    4
 15456 ;; This function calls:
 15457 ;;		_SwSpi_Clk_Pin
 15458 ;;		_SwSpi_Data_Pin
 15459 ;; This function is called by:
 15460 ;;		_SWSPI_send_word
 15461 ;; This function uses a non-reentrant model
 15462 ;;
 15463                           
 15464                           	psect	text77
 15465  002A00                     __ptext77:
 15466                           	opt stack 0
 15467  002A00                     _SWSPI_DAC_send_bits:
 15468                           	opt stack 23
 15469                           
 15470                           ;incstack = 0
 15471                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 15472  002A00  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 15473                           
 15474                           ;SwSpiApp.c: 67: uint8_t count;
 15475                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
 15476  002A02  0E08               	movlw	8
 15477  002A04  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 15478  002A06  D01A               	goto	l512
 15479  002A08                     
 15480                           ;SwSpiApp.c: 69: {
 15481                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
 15482  002A08  0E01               	movlw	1
 15483  002A0A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15484  002A0C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15485  002A0E  EC82  F015         	call	_SwSpi_Clk_Pin
 15486                           
 15487                           ;SwSpiApp.c: 72: if (data & 0X80)
 15488  002A12  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 15489  002A14  D006               	goto	l514
 15490                           
 15491                           ;SwSpiApp.c: 73: {
 15492                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
 15493  002A16  0E01               	movlw	1
 15494  002A18  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15495  002A1A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15496  002A1C  EC57  F015         	call	_SwSpi_Data_Pin
 15497                           
 15498                           ;SwSpiApp.c: 76: }
 15499  002A20  D005               	goto	l515
 15500  002A22                     l514:
 15501                           
 15502                           ;SwSpiApp.c: 77: else
 15503                           ;SwSpiApp.c: 78: {
 15504                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
 15505  002A22  0E00               	movlw	0
 15506  002A24  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15507  002A26  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15508  002A28  EC57  F015         	call	_SwSpi_Data_Pin
 15509  002A2C                     l515:
 15510                           
 15511                           ;SwSpiApp.c: 80: }
 15512                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
 15513  002A2C  0E00               	movlw	0
 15514  002A2E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15515  002A30  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15516  002A32  EC82  F015         	call	_SwSpi_Clk_Pin
 15517  002A36  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 15518  002A38  90D8               	bcf	status,0,c
 15519  002A3A  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 15520  002A3C                     l512:
 15521  002A3C  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 15522  002A3E  A4D8               	btfss	status,2,c
 15523  002A40  D7E3               	goto	l513
 15524                           
 15525                           ;SwSpiApp.c: 83: }
 15526                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
 15527  002A42  0E00               	movlw	0
 15528  002A44  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15529  002A46  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15530  002A48  EC57  F015         	call	_SwSpi_Data_Pin
 15531                           
 15532                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
 15533  002A4C  0E00               	movlw	0
 15534  002A4E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15535  002A50  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15536  002A52  EC82  F015         	call	_SwSpi_Clk_Pin
 15537  002A56  0012               	return		;funcret
 15538  002A58                     __end_of_SWSPI_DAC_send_bits:
 15539                           	opt stack 0
 15540                           tosu	equ	0xFFF
 15541                           tosh	equ	0xFFE
 15542                           tosl	equ	0xFFD
 15543                           pclath	equ	0xFFA
 15544                           tblptru	equ	0xFF8
 15545                           tblptrh	equ	0xFF7
 15546                           tblptrl	equ	0xFF6
 15547                           tablat	equ	0xFF5
 15548                           prodh	equ	0xFF4
 15549                           prodl	equ	0xFF3
 15550                           intcon	equ	0xFF2
 15551                           intcon2	equ	0xFF1
 15552                           indf0	equ	0xFEF
 15553                           postinc0	equ	0xFEE
 15554                           fsr0h	equ	0xFEA
 15555                           fsr0l	equ	0xFE9
 15556                           wreg	equ	0xFE8
 15557                           indf1	equ	0xFE7
 15558                           postdec1	equ	0xFE5
 15559                           fsr1h	equ	0xFE2
 15560                           fsr1l	equ	0xFE1
 15561                           indf2	equ	0xFDF
 15562                           postinc2	equ	0xFDE
 15563                           postdec2	equ	0xFDD
 15564                           fsr2h	equ	0xFDA
 15565                           fsr2l	equ	0xFD9
 15566                           status	equ	0xFD8
 15567                           
 15568 ;; *************** function _SwSpi_Data_Pin *****************
 15569 ;; Defined at:
 15570 ;;		line 123 in file "SwSpiApp.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;  phrType         1    wreg     enum E7598
 15573 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;  phrType         1   24[COMRAM] enum E7598
 15576 ;; Return value:  Size  Location     Type
 15577 ;;                  1    wreg      void 
 15578 ;; Registers used:
 15579 ;;		wreg, status,2, status,0
 15580 ;; Tracked objects:
 15581 ;;		On entry : 0/0
 15582 ;;		On exit  : 0/0
 15583 ;;		Unchanged: 0/0
 15584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15585 ;;      Params:         1       0       0       0       0       0       0
 15586 ;;      Locals:         1       0       0       0       0       0       0
 15587 ;;      Temps:          0       0       0       0       0       0       0
 15588 ;;      Totals:         2       0       0       0       0       0       0
 15589 ;;Total ram usage:        2 bytes
 15590 ;; Hardware stack levels used:    1
 15591 ;; Hardware stack levels required when called:    3
 15592 ;; This function calls:
 15593 ;;		Nothing
 15594 ;; This function is called by:
 15595 ;;		_SWSPI_DAC_send_bits
 15596 ;;		_SWSPI_Synth_send_bits
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           	psect	text78
 15601  002AAE                     __ptext78:
 15602                           	opt stack 0
 15603  002AAE                     _SwSpi_Data_Pin:
 15604                           	opt stack 23
 15605                           
 15606                           ;incstack = 0
 15607                           ;SwSpi_Data_Pin@phrType stored from wreg
 15608  002AAE  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 15609                           
 15610                           ;SwSpiApp.c: 125: switch(phrType)
 15611  002AB0  D01E               	goto	l528
 15612  002AB2                     
 15613                           ;SwSpiApp.c: 128: if(cPinMode == 1)
 15614  002AB2  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 15615  002AB4  A4D8               	btfss	status,2,c
 15616  002AB6  D002               	goto	l530
 15617                           
 15618                           ;SwSpiApp.c: 129: {
 15619                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
 15620  002AB8  808C               	bsf	3980,0,c	;volatile
 15621                           
 15622                           ;SwSpiApp.c: 131: }
 15623  002ABA  0012               	return	
 15624  002ABC                     l530:
 15625                           
 15626                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
 15627  002ABC  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 15628  002ABE  A4D8               	btfss	status,2,c
 15629  002AC0  0012               	return	
 15630                           
 15631                           ;SwSpiApp.c: 133: {
 15632                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
 15633  002AC2  908C               	bcf	3980,0,c	;volatile
 15634                           
 15635                           ;SwSpiApp.c: 135: }
 15636                           ;SwSpiApp.c: 136: break;
 15637  002AC4  0012               	return	
 15638  002AC6                     
 15639                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 15640  002AC6  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 15641  002AC8  A4D8               	btfss	status,2,c
 15642  002ACA  D002               	goto	l539
 15643                           
 15644                           ;SwSpiApp.c: 140: {
 15645                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
 15646  002ACC  8A8B               	bsf	3979,5,c	;volatile
 15647                           
 15648                           ;SwSpiApp.c: 142: }
 15649  002ACE  0012               	return	
 15650  002AD0                     l539:
 15651                           
 15652                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 15653  002AD0  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 15654  002AD2  A4D8               	btfss	status,2,c
 15655  002AD4  0012               	return	
 15656                           
 15657                           ;SwSpiApp.c: 144: {
 15658                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
 15659  002AD6  9A8B               	bcf	3979,5,c	;volatile
 15660                           
 15661                           ;SwSpiApp.c: 146: }
 15662                           ;SwSpiApp.c: 147: break;
 15663  002AD8  0012               	return	
 15664  002ADA                     
 15665                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 15666  002ADA  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 15667  002ADC  A4D8               	btfss	status,2,c
 15668  002ADE  D002               	goto	l547
 15669                           
 15670                           ;SwSpiApp.c: 151: {
 15671                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
 15672  002AE0  8889               	bsf	3977,4,c	;volatile
 15673                           
 15674                           ;SwSpiApp.c: 153: }
 15675  002AE2  0012               	return	
 15676  002AE4                     l547:
 15677                           
 15678                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 15679  002AE4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 15680  002AE6  A4D8               	btfss	status,2,c
 15681  002AE8  0012               	return	
 15682                           
 15683                           ;SwSpiApp.c: 155: {
 15684                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
 15685  002AEA  9889               	bcf	3977,4,c	;volatile
 15686                           
 15687                           ;SwSpiApp.c: 159: }
 15688                           
 15689                           ;SwSpiApp.c: 157: }
 15690                           ;SwSpiApp.c: 158: break;
 15691  002AEC  0012               	return	
 15692  002AEE                     l528:
 15693  002AEE  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 15694                           
 15695                           ; Switch size 1, requested type "space"
 15696                           ; Number of cases is 3, Range of values is 0 to 2
 15697                           ; switch strategies available:
 15698                           ; Name         Instructions Cycles
 15699                           ; simple_byte           10     6 (average)
 15700                           ;	Chosen strategy is simple_byte
 15701  002AF0  0A00               	xorlw	0	; case 0
 15702  002AF2  B4D8               	btfsc	status,2,c
 15703  002AF4  D7DE               	goto	l529
 15704  002AF6  0A01               	xorlw	1	; case 1
 15705  002AF8  B4D8               	btfsc	status,2,c
 15706  002AFA  D7E5               	goto	l538
 15707  002AFC  0A03               	xorlw	3	; case 2
 15708  002AFE  A4D8               	btfss	status,2,c
 15709  002B00  0012               	return	
 15710  002B02  D7EB               	goto	l546
 15711  002B04                     __end_of_SwSpi_Data_Pin:
 15712                           	opt stack 0
 15713                           tosu	equ	0xFFF
 15714                           tosh	equ	0xFFE
 15715                           tosl	equ	0xFFD
 15716                           pclath	equ	0xFFA
 15717                           tblptru	equ	0xFF8
 15718                           tblptrh	equ	0xFF7
 15719                           tblptrl	equ	0xFF6
 15720                           tablat	equ	0xFF5
 15721                           prodh	equ	0xFF4
 15722                           prodl	equ	0xFF3
 15723                           intcon	equ	0xFF2
 15724                           intcon2	equ	0xFF1
 15725                           indf0	equ	0xFEF
 15726                           postinc0	equ	0xFEE
 15727                           fsr0h	equ	0xFEA
 15728                           fsr0l	equ	0xFE9
 15729                           wreg	equ	0xFE8
 15730                           indf1	equ	0xFE7
 15731                           postdec1	equ	0xFE5
 15732                           fsr1h	equ	0xFE2
 15733                           fsr1l	equ	0xFE1
 15734                           indf2	equ	0xFDF
 15735                           postinc2	equ	0xFDE
 15736                           postdec2	equ	0xFDD
 15737                           fsr2h	equ	0xFDA
 15738                           fsr2l	equ	0xFD9
 15739                           status	equ	0xFD8
 15740                           
 15741 ;; *************** function _SwSpi_Clk_Pin *****************
 15742 ;; Defined at:
 15743 ;;		line 162 in file "SwSpiApp.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  phrType         1    wreg     enum E7598
 15746 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;  phrType         1   24[COMRAM] enum E7598
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  1    wreg      void 
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, status,0
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15758 ;;      Params:         1       0       0       0       0       0       0
 15759 ;;      Locals:         1       0       0       0       0       0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0
 15761 ;;      Totals:         2       0       0       0       0       0       0
 15762 ;;Total ram usage:        2 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    3
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_SWSPI_DAC_send_bits
 15769 ;;		_SWSPI_Synth_send_bits
 15770 ;;		_SwSpi_Synth_Toggle_Clock
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           	psect	text79
 15775  002B04                     __ptext79:
 15776                           	opt stack 0
 15777  002B04                     _SwSpi_Clk_Pin:
 15778                           	opt stack 23
 15779                           
 15780                           ;incstack = 0
 15781                           ;SwSpi_Clk_Pin@phrType stored from wreg
 15782  002B04  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 15783                           
 15784                           ;SwSpiApp.c: 164: switch(phrType)
 15785  002B06  D01E               	goto	l557
 15786  002B08                     
 15787                           ;SwSpiApp.c: 167: if(cPinMode == 1)
 15788  002B08  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 15789  002B0A  A4D8               	btfss	status,2,c
 15790  002B0C  D002               	goto	l559
 15791                           
 15792                           ;SwSpiApp.c: 168: {
 15793                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
 15794  002B0E  868B               	bsf	3979,3,c	;volatile
 15795                           
 15796                           ;SwSpiApp.c: 170: }
 15797  002B10  0012               	return	
 15798  002B12                     l559:
 15799                           
 15800                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
 15801  002B12  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 15802  002B14  A4D8               	btfss	status,2,c
 15803  002B16  0012               	return	
 15804                           
 15805                           ;SwSpiApp.c: 172: {
 15806                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
 15807  002B18  968B               	bcf	3979,3,c	;volatile
 15808                           
 15809                           ;SwSpiApp.c: 174: }
 15810                           ;SwSpiApp.c: 175: break;
 15811  002B1A  0012               	return	
 15812  002B1C                     
 15813                           ;SwSpiApp.c: 178: if(cPinMode == 1)
 15814  002B1C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 15815  002B1E  A4D8               	btfss	status,2,c
 15816  002B20  D002               	goto	l568
 15817                           
 15818                           ;SwSpiApp.c: 179: {
 15819                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
 15820  002B22  888B               	bsf	3979,4,c	;volatile
 15821                           
 15822                           ;SwSpiApp.c: 181: }
 15823  002B24  0012               	return	
 15824  002B26                     l568:
 15825                           
 15826                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
 15827  002B26  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 15828  002B28  A4D8               	btfss	status,2,c
 15829  002B2A  0012               	return	
 15830                           
 15831                           ;SwSpiApp.c: 183: {
 15832                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
 15833  002B2C  988B               	bcf	3979,4,c	;volatile
 15834                           
 15835                           ;SwSpiApp.c: 185: }
 15836                           ;SwSpiApp.c: 187: break;
 15837  002B2E  0012               	return	
 15838  002B30                     
 15839                           ;SwSpiApp.c: 190: if(cPinMode == 1)
 15840  002B30  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 15841  002B32  A4D8               	btfss	status,2,c
 15842  002B34  D002               	goto	l576
 15843                           
 15844                           ;SwSpiApp.c: 191: {
 15845                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
 15846  002B36  8689               	bsf	3977,3,c	;volatile
 15847                           
 15848                           ;SwSpiApp.c: 193: }
 15849  002B38  0012               	return	
 15850  002B3A                     l576:
 15851                           
 15852                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
 15853  002B3A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 15854  002B3C  A4D8               	btfss	status,2,c
 15855  002B3E  0012               	return	
 15856                           
 15857                           ;SwSpiApp.c: 195: {
 15858                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
 15859  002B40  9689               	bcf	3977,3,c	;volatile
 15860                           
 15861                           ;SwSpiApp.c: 199: }
 15862                           
 15863                           ;SwSpiApp.c: 197: }
 15864                           ;SwSpiApp.c: 198: break;
 15865  002B42  0012               	return	
 15866  002B44                     l557:
 15867  002B44  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 15868                           
 15869                           ; Switch size 1, requested type "space"
 15870                           ; Number of cases is 3, Range of values is 0 to 2
 15871                           ; switch strategies available:
 15872                           ; Name         Instructions Cycles
 15873                           ; simple_byte           10     6 (average)
 15874                           ;	Chosen strategy is simple_byte
 15875  002B46  0A00               	xorlw	0	; case 0
 15876  002B48  B4D8               	btfsc	status,2,c
 15877  002B4A  D7DE               	goto	l558
 15878  002B4C  0A01               	xorlw	1	; case 1
 15879  002B4E  B4D8               	btfsc	status,2,c
 15880  002B50  D7E5               	goto	l567
 15881  002B52  0A03               	xorlw	3	; case 2
 15882  002B54  A4D8               	btfss	status,2,c
 15883  002B56  0012               	return	
 15884  002B58  D7EB               	goto	l575
 15885  002B5A                     __end_of_SwSpi_Clk_Pin:
 15886                           	opt stack 0
 15887                           tosu	equ	0xFFF
 15888                           tosh	equ	0xFFE
 15889                           tosl	equ	0xFFD
 15890                           pclath	equ	0xFFA
 15891                           tblptru	equ	0xFF8
 15892                           tblptrh	equ	0xFF7
 15893                           tblptrl	equ	0xFF6
 15894                           tablat	equ	0xFF5
 15895                           prodh	equ	0xFF4
 15896                           prodl	equ	0xFF3
 15897                           intcon	equ	0xFF2
 15898                           intcon2	equ	0xFF1
 15899                           indf0	equ	0xFEF
 15900                           postinc0	equ	0xFEE
 15901                           fsr0h	equ	0xFEA
 15902                           fsr0l	equ	0xFE9
 15903                           wreg	equ	0xFE8
 15904                           indf1	equ	0xFE7
 15905                           postdec1	equ	0xFE5
 15906                           fsr1h	equ	0xFE2
 15907                           fsr1l	equ	0xFE1
 15908                           indf2	equ	0xFDF
 15909                           postinc2	equ	0xFDE
 15910                           postdec2	equ	0xFDD
 15911                           fsr2h	equ	0xFDA
 15912                           fsr2l	equ	0xFD9
 15913                           status	equ	0xFD8
 15914                           
 15915 ;; *************** function _ClearMcuRunTime *****************
 15916 ;; Defined at:
 15917 ;;		line 51 in file "SystemStatus.c"
 15918 ;; Parameters:    Size  Location     Type
 15919 ;;		None
 15920 ;; Auto vars:     Size  Location     Type
 15921 ;;		None
 15922 ;; Return value:  Size  Location     Type
 15923 ;;                  1    wreg      void 
 15924 ;; Registers used:
 15925 ;;		wreg, status,2
 15926 ;; Tracked objects:
 15927 ;;		On entry : 0/0
 15928 ;;		On exit  : 0/0
 15929 ;;		Unchanged: 0/0
 15930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15931 ;;      Params:         0       0       0       0       0       0       0
 15932 ;;      Locals:         0       0       0       0       0       0       0
 15933 ;;      Temps:          0       0       0       0       0       0       0
 15934 ;;      Totals:         0       0       0       0       0       0       0
 15935 ;;Total ram usage:        0 bytes
 15936 ;; Hardware stack levels used:    1
 15937 ;; Hardware stack levels required when called:    3
 15938 ;; This function calls:
 15939 ;;		Nothing
 15940 ;; This function is called by:
 15941 ;;		_InitSystemApplicationManagers
 15942 ;; This function uses a non-reentrant model
 15943 ;;
 15944                           
 15945                           	psect	text80
 15946  0031F4                     __ptext80:
 15947                           	opt stack 0
 15948  0031F4                     _ClearMcuRunTime:
 15949                           	opt stack 26
 15950                           
 15951                           ;SystemStatus.c: 53: mcuRunTimeIn5SecTicks = 0;
 15952                           
 15953                           ;incstack = 0
 15954  0031F4  0E00               	movlw	0
 15955  0031F6  0101               	movlb	1	; () banked
 15956  0031F8  6F48               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 15957  0031FA  0E00               	movlw	0
 15958  0031FC  6F49               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 15959  0031FE  0E00               	movlw	0
 15960  003200  6F4A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 15961  003202  0E00               	movlw	0
 15962  003204  6F4B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 15963                           
 15964                           ; BSR set to: 1
 15965  003206  0012               	return		;funcret
 15966  003208                     __end_of_ClearMcuRunTime:
 15967                           	opt stack 0
 15968                           tosu	equ	0xFFF
 15969                           tosh	equ	0xFFE
 15970                           tosl	equ	0xFFD
 15971                           pclath	equ	0xFFA
 15972                           tblptru	equ	0xFF8
 15973                           tblptrh	equ	0xFF7
 15974                           tblptrl	equ	0xFF6
 15975                           tablat	equ	0xFF5
 15976                           prodh	equ	0xFF4
 15977                           prodl	equ	0xFF3
 15978                           intcon	equ	0xFF2
 15979                           intcon2	equ	0xFF1
 15980                           indf0	equ	0xFEF
 15981                           postinc0	equ	0xFEE
 15982                           fsr0h	equ	0xFEA
 15983                           fsr0l	equ	0xFE9
 15984                           wreg	equ	0xFE8
 15985                           indf1	equ	0xFE7
 15986                           postdec1	equ	0xFE5
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           indf2	equ	0xFDF
 15990                           postinc2	equ	0xFDE
 15991                           postdec2	equ	0xFDD
 15992                           fsr2h	equ	0xFDA
 15993                           fsr2l	equ	0xFD9
 15994                           status	equ	0xFD8
 15995                           
 15996 ;; *************** function _BlinkOkLeds *****************
 15997 ;; Defined at:
 15998 ;;		line 24 in file "LedsApp.c"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;  state           1    wreg     enum E7614
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;  state           1   26[COMRAM] enum E7614
 16003 ;;  idx             2   27[COMRAM] int 
 16004 ;; Return value:  Size  Location     Type
 16005 ;;                  1    wreg      void 
 16006 ;; Registers used:
 16007 ;;		wreg, status,2, status,0
 16008 ;; Tracked objects:
 16009 ;;		On entry : 0/0
 16010 ;;		On exit  : 0/0
 16011 ;;		Unchanged: 0/0
 16012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16013 ;;      Params:         0       0       0       0       0       0       0
 16014 ;;      Locals:         3       0       0       0       0       0       0
 16015 ;;      Temps:          3       0       0       0       0       0       0
 16016 ;;      Totals:         6       0       0       0       0       0       0
 16017 ;;Total ram usage:        6 bytes
 16018 ;; Hardware stack levels used:    1
 16019 ;; Hardware stack levels required when called:    3
 16020 ;; This function calls:
 16021 ;;		Nothing
 16022 ;; This function is called by:
 16023 ;;		_main
 16024 ;; This function uses a non-reentrant model
 16025 ;;
 16026                           
 16027                           	psect	text81
 16028  00283A                     __ptext81:
 16029                           	opt stack 0
 16030  00283A                     _BlinkOkLeds:
 16031                           	opt stack 27
 16032                           
 16033                           ; BSR set to: 1
 16034                           ;incstack = 0
 16035                           ;BlinkOkLeds@state stored from wreg
 16036  00283A  6E1B               	movwf	BlinkOkLeds@state,c
 16037                           
 16038                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 16039  00283C  0E00               	movlw	0
 16040  00283E  6E1D               	movwf	BlinkOkLeds@idx+1,c
 16041  002840  0E00               	movlw	0
 16042  002842  6E1C               	movwf	BlinkOkLeds@idx,c
 16043  002844                     l5978:
 16044  002844  501B               	movf	BlinkOkLeds@state,w,c
 16045  002846  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16046  002848  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 16047  00284A  5018               	movf	??_BlinkOkLeds,w,c
 16048  00284C  5C1C               	subwf	BlinkOkLeds@idx,w,c
 16049  00284E  501D               	movf	BlinkOkLeds@idx+1,w,c
 16050  002850  0A80               	xorlw	128
 16051  002852  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 16052  002854  5019               	movf	??_BlinkOkLeds+1,w,c
 16053  002856  0A80               	xorlw	128
 16054  002858  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 16055  00285A  B0D8               	btfsc	status,0,c
 16056  00285C  0012               	return	
 16057                           
 16058                           ;LedsApp.c: 27: {
 16059                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 16060  00285E  908B               	bcf	3979,0,c	;volatile
 16061                           
 16062                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 16063  002860  0E02               	movlw	2
 16064  002862  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 16065  002864  0E04               	movlw	4
 16066  002866  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16067  002868  0EBA               	movlw	186
 16068  00286A                     u9087:
 16069  00286A  2EE8               	decfsz	wreg,f,c
 16070  00286C  D7FE               	bra	u9087
 16071  00286E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 16072  002870  D7FC               	bra	u9087
 16073  002872  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 16074  002874  D7FA               	bra	u9087
 16075  002876  D000               	nop2	
 16076                           
 16077                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 16078  002878  808B               	bsf	3979,0,c	;volatile
 16079                           
 16080                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 16081  00287A  0E02               	movlw	2
 16082  00287C  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 16083  00287E  0E04               	movlw	4
 16084  002880  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16085  002882  0EBA               	movlw	186
 16086  002884                     u9097:
 16087  002884  2EE8               	decfsz	wreg,f,c
 16088  002886  D7FE               	bra	u9097
 16089  002888  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 16090  00288A  D7FC               	bra	u9097
 16091  00288C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 16092  00288E  D7FA               	bra	u9097
 16093  002890  D000               	nop2	
 16094  002892  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 16095  002894  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 16096  002896  D7D6               	goto	l5978
 16097  002898                     __end_of_BlinkOkLeds:
 16098                           	opt stack 0
 16099                           tosu	equ	0xFFF
 16100                           tosh	equ	0xFFE
 16101                           tosl	equ	0xFFD
 16102                           pclath	equ	0xFFA
 16103                           tblptru	equ	0xFF8
 16104                           tblptrh	equ	0xFF7
 16105                           tblptrl	equ	0xFF6
 16106                           tablat	equ	0xFF5
 16107                           prodh	equ	0xFF4
 16108                           prodl	equ	0xFF3
 16109                           intcon	equ	0xFF2
 16110                           intcon2	equ	0xFF1
 16111                           indf0	equ	0xFEF
 16112                           postinc0	equ	0xFEE
 16113                           fsr0h	equ	0xFEA
 16114                           fsr0l	equ	0xFE9
 16115                           wreg	equ	0xFE8
 16116                           indf1	equ	0xFE7
 16117                           postdec1	equ	0xFE5
 16118                           fsr1h	equ	0xFE2
 16119                           fsr1l	equ	0xFE1
 16120                           indf2	equ	0xFDF
 16121                           postinc2	equ	0xFDE
 16122                           postdec2	equ	0xFDD
 16123                           fsr2h	equ	0xFDA
 16124                           fsr2l	equ	0xFD9
 16125                           status	equ	0xFD8
 16126                           
 16127 ;; *************** function _INTERRUPT_InterruptManager *****************
 16128 ;; Defined at:
 16129 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16130 ;; Parameters:    Size  Location     Type
 16131 ;;		None
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;		None
 16134 ;; Return value:  Size  Location     Type
 16135 ;;                  1    wreg      void 
 16136 ;; Registers used:
 16137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16138 ;; Tracked objects:
 16139 ;;		On entry : 0/0
 16140 ;;		On exit  : 0/0
 16141 ;;		Unchanged: 0/0
 16142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16143 ;;      Params:         0       0       0       0       0       0       0
 16144 ;;      Locals:         0       0       0       0       0       0       0
 16145 ;;      Temps:         18       0       0       0       0       0       0
 16146 ;;      Totals:        18       0       0       0       0       0       0
 16147 ;;Total ram usage:       18 bytes
 16148 ;; Hardware stack levels used:    1
 16149 ;; Hardware stack levels required when called:    2
 16150 ;; This function calls:
 16151 ;;		_EUSART1_Receive_ISR
 16152 ;;		_EUSART1_Transmit_ISR
 16153 ;;		_MEMORY_ISR
 16154 ;;		_PIN_MANAGER_IOC
 16155 ;;		_TMR0_ISR
 16156 ;; This function is called by:
 16157 ;;		Interrupt level 2
 16158 ;; This function uses a non-reentrant model
 16159 ;;
 16160                           
 16161                           	psect	intcode
 16162  000008                     __pintcode:
 16163                           	opt stack 0
 16164  000008                     _INTERRUPT_InterruptManager:
 16165                           	opt stack 19
 16166                           
 16167                           ;incstack = 0
 16168  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16169  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16170  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16171  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16172  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16173  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16174  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16175  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16176  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16177  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16178  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16179  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16180  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16181  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16182  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16183  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16184  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16185  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16186  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16187                           
 16188                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16189  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16190  000054  A0F2               	btfss	intcon,0,c	;volatile
 16191  000056  D003               	goto	i2l710
 16192                           
 16193                           ;interrupt_manager.c: 61: {
 16194                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16195  000058  EC26  F019         	call	_PIN_MANAGER_IOC	;wreg free
 16196                           
 16197                           ;interrupt_manager.c: 63: }
 16198  00005C  D019               	goto	i2l719
 16199  00005E                     i2l710:
 16200                           
 16201                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16202  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16203  000060  A4F2               	btfss	intcon,2,c	;volatile
 16204  000062  D003               	goto	i2l712
 16205                           
 16206                           ;interrupt_manager.c: 65: {
 16207                           ;interrupt_manager.c: 66: TMR0_ISR();
 16208  000064  EC6F  F011         	call	_TMR0_ISR	;wreg free
 16209                           
 16210                           ;interrupt_manager.c: 67: }
 16211  000068  D013               	goto	i2l719
 16212  00006A                     i2l712:
 16213                           
 16214                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16215  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16216  00006C  D011               	goto	i2l719
 16217                           
 16218                           ;interrupt_manager.c: 69: {
 16219                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16220  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16221  000070  A8A1               	btfss	4001,4,c	;volatile
 16222  000072  D003               	goto	i2l715
 16223                           
 16224                           ;interrupt_manager.c: 71: {
 16225                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16226  000074  EC28  F019         	call	_MEMORY_ISR	;wreg free
 16227                           
 16228                           ;interrupt_manager.c: 73: }
 16229  000078  D00B               	goto	i2l719
 16230  00007A                     i2l715:
 16231                           
 16232                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16233  00007A  B89D               	btfsc	3997,4,c	;volatile
 16234  00007C  A89E               	btfss	3998,4,c	;volatile
 16235  00007E  D003               	goto	i2l717
 16236                           
 16237                           ;interrupt_manager.c: 75: {
 16238                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16239  000080  EC86  F017         	call	_EUSART1_Transmit_ISR	;wreg free
 16240                           
 16241                           ;interrupt_manager.c: 77: }
 16242  000084  D005               	goto	i2l719
 16243  000086                     i2l717:
 16244                           
 16245                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16246  000086  BA9D               	btfsc	3997,5,c	;volatile
 16247  000088  AA9E               	btfss	3998,5,c	;volatile
 16248  00008A  D002               	goto	i2l719
 16249                           
 16250                           ;interrupt_manager.c: 79: {
 16251                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16252  00008C  ECBC  F017         	call	_EUSART1_Receive_ISR	;wreg free
 16253  000090                     i2l719:
 16254                           
 16255                           ;interrupt_manager.c: 87: else
 16256                           ;interrupt_manager.c: 88: {
 16257                           
 16258                           ;interrupt_manager.c: 85: }
 16259                           ;interrupt_manager.c: 86: }
 16260                           
 16261                           ;interrupt_manager.c: 82: else
 16262                           ;interrupt_manager.c: 83: {
 16263  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16264  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16265  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16266  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16267  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16268  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16269  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16270  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16271  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16272  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16273  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16274  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16275  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16276  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16277  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16278  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16279  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16280  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16281  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16282  0000DA  0011               	retfie		f
 16283  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16284                           	opt stack 0
 16285                           tosu	equ	0xFFF
 16286                           tosh	equ	0xFFE
 16287                           tosl	equ	0xFFD
 16288                           pclatu	equ	0xFFB
 16289                           pclath	equ	0xFFA
 16290                           tblptru	equ	0xFF8
 16291                           tblptrh	equ	0xFF7
 16292                           tblptrl	equ	0xFF6
 16293                           tablat	equ	0xFF5
 16294                           prodh	equ	0xFF4
 16295                           prodl	equ	0xFF3
 16296                           intcon	equ	0xFF2
 16297                           intcon2	equ	0xFF1
 16298                           indf0	equ	0xFEF
 16299                           postinc0	equ	0xFEE
 16300                           fsr0h	equ	0xFEA
 16301                           fsr0l	equ	0xFE9
 16302                           wreg	equ	0xFE8
 16303                           indf1	equ	0xFE7
 16304                           postdec1	equ	0xFE5
 16305                           fsr1h	equ	0xFE2
 16306                           fsr1l	equ	0xFE1
 16307                           indf2	equ	0xFDF
 16308                           postinc2	equ	0xFDE
 16309                           postdec2	equ	0xFDD
 16310                           fsr2h	equ	0xFDA
 16311                           fsr2l	equ	0xFD9
 16312                           status	equ	0xFD8
 16313                           
 16314 ;; *************** function _TMR0_ISR *****************
 16315 ;; Defined at:
 16316 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;		None
 16319 ;; Auto vars:     Size  Location     Type
 16320 ;;		None
 16321 ;; Return value:  Size  Location     Type
 16322 ;;                  1    wreg      void 
 16323 ;; Registers used:
 16324 ;;		wreg, status,2, status,0, cstack
 16325 ;; Tracked objects:
 16326 ;;		On entry : 0/0
 16327 ;;		On exit  : 0/0
 16328 ;;		Unchanged: 0/0
 16329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16330 ;;      Params:         0       0       0       0       0       0       0
 16331 ;;      Locals:         0       0       0       0       0       0       0
 16332 ;;      Temps:          0       0       0       0       0       0       0
 16333 ;;      Totals:         0       0       0       0       0       0       0
 16334 ;;Total ram usage:        0 bytes
 16335 ;; Hardware stack levels used:    1
 16336 ;; Hardware stack levels required when called:    1
 16337 ;; This function calls:
 16338 ;;		i2___lwmod
 16339 ;; This function is called by:
 16340 ;;		_INTERRUPT_InterruptManager
 16341 ;; This function uses a non-reentrant model
 16342 ;;
 16343                           
 16344                           	psect	text83
 16345  0022DE                     __ptext83:
 16346                           	opt stack 0
 16347  0022DE                     _TMR0_ISR:
 16348                           	opt stack 19
 16349                           
 16350                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16351                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16352                           
 16353                           ;incstack = 0
 16354  0022DE  94F2               	bcf	intcon,2,c	;volatile
 16355                           
 16356                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16357  0022E0  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16358  0022E2  6ED7               	movwf	4055,c	;volatile
 16359                           
 16360                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16361  0022E4  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16362                           
 16363                           ;tmr0.c: 146: CountCallBack ++;
 16364  0022E8  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16365  0022EA  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16366                           
 16367                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16368  0022EC  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 16369  0022F0  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 16370  0022F4  0E00               	movlw	0
 16371  0022F6  6E04               	movwf	i2___lwmod@divisor+1,c
 16372  0022F8  0E14               	movlw	20
 16373  0022FA  6E03               	movwf	i2___lwmod@divisor,c
 16374  0022FC  ECF0  F016         	call	i2___lwmod	;wreg free
 16375  002300  5001               	movf	?i2___lwmod,w,c
 16376  002302  1002               	iorwf	?i2___lwmod+1,w,c
 16377  002304  A4D8               	btfss	status,2,c
 16378  002306  D003               	goto	i2l941
 16379                           
 16380                           ;tmr0.c: 148: {
 16381                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16382  002308  0E01               	movlw	1
 16383  00230A  0101               	movlb	1	; () banked
 16384  00230C  6F55               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16385  00230E                     i2l941:
 16386                           
 16387                           ;tmr0.c: 150: }
 16388                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16389                           
 16390                           ; BSR set to: 1
 16391  00230E  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 16392  002312  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 16393  002316  0E00               	movlw	0
 16394  002318  6E04               	movwf	i2___lwmod@divisor+1,c
 16395  00231A  0E32               	movlw	50
 16396  00231C  6E03               	movwf	i2___lwmod@divisor,c
 16397  00231E  ECF0  F016         	call	i2___lwmod	;wreg free
 16398  002322  5001               	movf	?i2___lwmod,w,c
 16399  002324  1002               	iorwf	?i2___lwmod+1,w,c
 16400  002326  A4D8               	btfss	status,2,c
 16401  002328  D003               	goto	i2l942
 16402                           
 16403                           ;tmr0.c: 153: {
 16404                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16405  00232A  0E01               	movlw	1
 16406  00232C  0101               	movlb	1	; () banked
 16407  00232E  6F54               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16408  002330                     i2l942:
 16409                           
 16410                           ;tmr0.c: 155: }
 16411                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16412                           
 16413                           ; BSR set to: 1
 16414  002330  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 16415  002334  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 16416  002338  0E01               	movlw	1
 16417  00233A  6E04               	movwf	i2___lwmod@divisor+1,c
 16418  00233C  0E2C               	movlw	44
 16419  00233E  6E03               	movwf	i2___lwmod@divisor,c
 16420  002340  ECF0  F016         	call	i2___lwmod	;wreg free
 16421  002344  5001               	movf	?i2___lwmod,w,c
 16422  002346  1002               	iorwf	?i2___lwmod+1,w,c
 16423  002348  A4D8               	btfss	status,2,c
 16424  00234A  D003               	goto	i2l943
 16425                           
 16426                           ;tmr0.c: 157: {
 16427                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16428  00234C  0E01               	movlw	1
 16429  00234E  0101               	movlb	1	; () banked
 16430  002350  6F53               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16431  002352                     i2l943:
 16432                           
 16433                           ;tmr0.c: 159: }
 16434                           ;tmr0.c: 161: CountCallBack %= 300;
 16435                           
 16436                           ; BSR set to: 1
 16437  002352  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 16438  002356  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 16439  00235A  0E01               	movlw	1
 16440  00235C  6E04               	movwf	i2___lwmod@divisor+1,c
 16441  00235E  0E2C               	movlw	44
 16442  002360  6E03               	movwf	i2___lwmod@divisor,c
 16443  002362  ECF0  F016         	call	i2___lwmod	;wreg free
 16444  002366  C001  F035         	movff	?i2___lwmod,TMR0_ISR@CountCallBack	;volatile
 16445  00236A  C002  F036         	movff	?i2___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16446  00236E  0012               	return		;funcret
 16447  002370                     __end_of_TMR0_ISR:
 16448                           	opt stack 0
 16449                           tosu	equ	0xFFF
 16450                           tosh	equ	0xFFE
 16451                           tosl	equ	0xFFD
 16452                           pclatu	equ	0xFFB
 16453                           pclath	equ	0xFFA
 16454                           tblptru	equ	0xFF8
 16455                           tblptrh	equ	0xFF7
 16456                           tblptrl	equ	0xFF6
 16457                           tablat	equ	0xFF5
 16458                           prodh	equ	0xFF4
 16459                           prodl	equ	0xFF3
 16460                           intcon	equ	0xFF2
 16461                           intcon2	equ	0xFF1
 16462                           indf0	equ	0xFEF
 16463                           postinc0	equ	0xFEE
 16464                           fsr0h	equ	0xFEA
 16465                           fsr0l	equ	0xFE9
 16466                           wreg	equ	0xFE8
 16467                           indf1	equ	0xFE7
 16468                           postdec1	equ	0xFE5
 16469                           fsr1h	equ	0xFE2
 16470                           fsr1l	equ	0xFE1
 16471                           indf2	equ	0xFDF
 16472                           postinc2	equ	0xFDE
 16473                           postdec2	equ	0xFDD
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function i2___lwmod *****************
 16479 ;; Defined at:
 16480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  dividend        2    0[COMRAM] unsigned int 
 16483 ;;  divisor         2    2[COMRAM] unsigned int 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;  __lwmod         1    4[COMRAM] unsigned char 
 16486 ;; Return value:  Size  Location     Type
 16487 ;;                  2    0[COMRAM] unsigned int 
 16488 ;; Registers used:
 16489 ;;		wreg, status,2, status,0
 16490 ;; Tracked objects:
 16491 ;;		On entry : 0/0
 16492 ;;		On exit  : 0/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16495 ;;      Params:         4       0       0       0       0       0       0
 16496 ;;      Locals:         1       0       0       0       0       0       0
 16497 ;;      Temps:          0       0       0       0       0       0       0
 16498 ;;      Totals:         5       0       0       0       0       0       0
 16499 ;;Total ram usage:        5 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; This function calls:
 16502 ;;		Nothing
 16503 ;; This function is called by:
 16504 ;;		_TMR0_ISR
 16505 ;; This function uses a non-reentrant model
 16506 ;;
 16507                           
 16508                           	psect	text84
 16509  002DE0                     __ptext84:
 16510                           	opt stack 0
 16511  002DE0                     i2___lwmod:
 16512                           	opt stack 19
 16513                           
 16514                           ;incstack = 0
 16515  002DE0  5003               	movf	i2___lwmod@divisor,w,c
 16516  002DE2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 16517  002DE4  B4D8               	btfsc	status,2,c
 16518  002DE6  D018               	goto	i2l1798
 16519  002DE8  0E01               	movlw	1
 16520  002DEA  6E05               	movwf	i2___lwmod@counter,c
 16521  002DEC  D004               	goto	i2l1793
 16522  002DEE  90D8               	bcf	status,0,c
 16523  002DF0  3603               	rlcf	i2___lwmod@divisor,f,c
 16524  002DF2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 16525  002DF4  2A05               	incf	i2___lwmod@counter,f,c
 16526  002DF6                     i2l1793:
 16527  002DF6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 16528  002DF8  D7FA               	goto	i2l1794
 16529  002DFA                     i2u566_40:
 16530  002DFA  5003               	movf	i2___lwmod@divisor,w,c
 16531  002DFC  5C01               	subwf	i2___lwmod@dividend,w,c
 16532  002DFE  5004               	movf	i2___lwmod@divisor+1,w,c
 16533  002E00  5802               	subwfb	i2___lwmod@dividend+1,w,c
 16534  002E02  A0D8               	btfss	status,0,c
 16535  002E04  D004               	goto	i2l1797
 16536  002E06  5003               	movf	i2___lwmod@divisor,w,c
 16537  002E08  5E01               	subwf	i2___lwmod@dividend,f,c
 16538  002E0A  5004               	movf	i2___lwmod@divisor+1,w,c
 16539  002E0C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 16540  002E0E                     i2l1797:
 16541  002E0E  90D8               	bcf	status,0,c
 16542  002E10  3204               	rrcf	i2___lwmod@divisor+1,f,c
 16543  002E12  3203               	rrcf	i2___lwmod@divisor,f,c
 16544  002E14  2E05               	decfsz	i2___lwmod@counter,f,c
 16545  002E16  D7F1               	goto	i2u566_40
 16546  002E18                     i2l1798:
 16547  002E18  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 16548  002E1C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 16549  002E20  0012               	return		;funcret
 16550  002E22                     __end_ofi2___lwmod:
 16551                           	opt stack 0
 16552                           tosu	equ	0xFFF
 16553                           tosh	equ	0xFFE
 16554                           tosl	equ	0xFFD
 16555                           pclatu	equ	0xFFB
 16556                           pclath	equ	0xFFA
 16557                           tblptru	equ	0xFF8
 16558                           tblptrh	equ	0xFF7
 16559                           tblptrl	equ	0xFF6
 16560                           tablat	equ	0xFF5
 16561                           prodh	equ	0xFF4
 16562                           prodl	equ	0xFF3
 16563                           intcon	equ	0xFF2
 16564                           intcon2	equ	0xFF1
 16565                           indf0	equ	0xFEF
 16566                           postinc0	equ	0xFEE
 16567                           fsr0h	equ	0xFEA
 16568                           fsr0l	equ	0xFE9
 16569                           wreg	equ	0xFE8
 16570                           indf1	equ	0xFE7
 16571                           postdec1	equ	0xFE5
 16572                           fsr1h	equ	0xFE2
 16573                           fsr1l	equ	0xFE1
 16574                           indf2	equ	0xFDF
 16575                           postinc2	equ	0xFDE
 16576                           postdec2	equ	0xFDD
 16577                           fsr2h	equ	0xFDA
 16578                           fsr2l	equ	0xFD9
 16579                           status	equ	0xFD8
 16580                           
 16581 ;; *************** function _PIN_MANAGER_IOC *****************
 16582 ;; Defined at:
 16583 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 16584 ;; Parameters:    Size  Location     Type
 16585 ;;		None
 16586 ;; Auto vars:     Size  Location     Type
 16587 ;;		None
 16588 ;; Return value:  Size  Location     Type
 16589 ;;                  1    wreg      void 
 16590 ;; Registers used:
 16591 ;;		None
 16592 ;; Tracked objects:
 16593 ;;		On entry : 0/0
 16594 ;;		On exit  : 0/0
 16595 ;;		Unchanged: 0/0
 16596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16597 ;;      Params:         0       0       0       0       0       0       0
 16598 ;;      Locals:         0       0       0       0       0       0       0
 16599 ;;      Temps:          0       0       0       0       0       0       0
 16600 ;;      Totals:         0       0       0       0       0       0       0
 16601 ;;Total ram usage:        0 bytes
 16602 ;; Hardware stack levels used:    1
 16603 ;; This function calls:
 16604 ;;		Nothing
 16605 ;; This function is called by:
 16606 ;;		_INTERRUPT_InterruptManager
 16607 ;; This function uses a non-reentrant model
 16608 ;;
 16609                           
 16610                           	psect	text85
 16611  00324C                     __ptext85:
 16612                           	opt stack 0
 16613  00324C                     _PIN_MANAGER_IOC:
 16614                           	opt stack 20
 16615                           
 16616                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 16617                           
 16618                           ;incstack = 0
 16619  00324C  90F2               	bcf	intcon,0,c	;volatile
 16620  00324E  0012               	return		;funcret
 16621  003250                     __end_of_PIN_MANAGER_IOC:
 16622                           	opt stack 0
 16623                           tosu	equ	0xFFF
 16624                           tosh	equ	0xFFE
 16625                           tosl	equ	0xFFD
 16626                           pclatu	equ	0xFFB
 16627                           pclath	equ	0xFFA
 16628                           tblptru	equ	0xFF8
 16629                           tblptrh	equ	0xFF7
 16630                           tblptrl	equ	0xFF6
 16631                           tablat	equ	0xFF5
 16632                           prodh	equ	0xFF4
 16633                           prodl	equ	0xFF3
 16634                           intcon	equ	0xFF2
 16635                           intcon2	equ	0xFF1
 16636                           indf0	equ	0xFEF
 16637                           postinc0	equ	0xFEE
 16638                           fsr0h	equ	0xFEA
 16639                           fsr0l	equ	0xFE9
 16640                           wreg	equ	0xFE8
 16641                           indf1	equ	0xFE7
 16642                           postdec1	equ	0xFE5
 16643                           fsr1h	equ	0xFE2
 16644                           fsr1l	equ	0xFE1
 16645                           indf2	equ	0xFDF
 16646                           postinc2	equ	0xFDE
 16647                           postdec2	equ	0xFDD
 16648                           fsr2h	equ	0xFDA
 16649                           fsr2l	equ	0xFD9
 16650                           status	equ	0xFD8
 16651                           
 16652 ;; *************** function _MEMORY_ISR *****************
 16653 ;; Defined at:
 16654 ;;		line 206 in file "mcc_generated_files/memory.c"
 16655 ;; Parameters:    Size  Location     Type
 16656 ;;		None
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;		None
 16659 ;; Return value:  Size  Location     Type
 16660 ;;                  1    wreg      void 
 16661 ;; Registers used:
 16662 ;;		None
 16663 ;; Tracked objects:
 16664 ;;		On entry : 0/0
 16665 ;;		On exit  : 0/0
 16666 ;;		Unchanged: 0/0
 16667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16668 ;;      Params:         0       0       0       0       0       0       0
 16669 ;;      Locals:         0       0       0       0       0       0       0
 16670 ;;      Temps:          0       0       0       0       0       0       0
 16671 ;;      Totals:         0       0       0       0       0       0       0
 16672 ;;Total ram usage:        0 bytes
 16673 ;; Hardware stack levels used:    1
 16674 ;; This function calls:
 16675 ;;		Nothing
 16676 ;; This function is called by:
 16677 ;;		_INTERRUPT_InterruptManager
 16678 ;; This function uses a non-reentrant model
 16679 ;;
 16680                           
 16681                           	psect	text86
 16682  003250                     __ptext86:
 16683                           	opt stack 0
 16684  003250                     _MEMORY_ISR:
 16685                           	opt stack 20
 16686                           
 16687                           ;memory.c: 209: PIR2bits.EEIF = 0;
 16688                           
 16689                           ;incstack = 0
 16690  003250  98A1               	bcf	4001,4,c	;volatile
 16691  003252  0012               	return		;funcret
 16692  003254                     __end_of_MEMORY_ISR:
 16693                           	opt stack 0
 16694                           tosu	equ	0xFFF
 16695                           tosh	equ	0xFFE
 16696                           tosl	equ	0xFFD
 16697                           pclatu	equ	0xFFB
 16698                           pclath	equ	0xFFA
 16699                           tblptru	equ	0xFF8
 16700                           tblptrh	equ	0xFF7
 16701                           tblptrl	equ	0xFF6
 16702                           tablat	equ	0xFF5
 16703                           prodh	equ	0xFF4
 16704                           prodl	equ	0xFF3
 16705                           intcon	equ	0xFF2
 16706                           intcon2	equ	0xFF1
 16707                           indf0	equ	0xFEF
 16708                           postinc0	equ	0xFEE
 16709                           fsr0h	equ	0xFEA
 16710                           fsr0l	equ	0xFE9
 16711                           wreg	equ	0xFE8
 16712                           indf1	equ	0xFE7
 16713                           postdec1	equ	0xFE5
 16714                           fsr1h	equ	0xFE2
 16715                           fsr1l	equ	0xFE1
 16716                           indf2	equ	0xFDF
 16717                           postinc2	equ	0xFDE
 16718                           postdec2	equ	0xFDD
 16719                           fsr2h	equ	0xFDA
 16720                           fsr2l	equ	0xFD9
 16721                           status	equ	0xFD8
 16722                           
 16723 ;; *************** function _EUSART1_Transmit_ISR *****************
 16724 ;; Defined at:
 16725 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;		None
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;		None
 16730 ;; Return value:  Size  Location     Type
 16731 ;;                  1    wreg      void 
 16732 ;; Registers used:
 16733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16739 ;;      Params:         0       0       0       0       0       0       0
 16740 ;;      Locals:         0       0       0       0       0       0       0
 16741 ;;      Temps:          0       0       0       0       0       0       0
 16742 ;;      Totals:         0       0       0       0       0       0       0
 16743 ;;Total ram usage:        0 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; This function calls:
 16746 ;;		Nothing
 16747 ;; This function is called by:
 16748 ;;		_INTERRUPT_InterruptManager
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           	psect	text87
 16753  002F0C                     __ptext87:
 16754                           	opt stack 0
 16755  002F0C                     _EUSART1_Transmit_ISR:
 16756                           	opt stack 20
 16757                           
 16758                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16759                           
 16760                           ;incstack = 0
 16761  002F0C  0E46               	movlw	70
 16762  002F0E  0100               	movlb	0	; () banked
 16763  002F10  61FB               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16764  002F12  D012               	goto	i2l781
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;eusart1.c: 186: {
 16768                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16769  002F14  503B               	movf	_eusart1TxTail,w,c	;volatile
 16770  002F16  0D01               	mullw	1
 16771  002F18  0E00               	movlw	low _eusart1TxBuffer
 16772  002F1A  24F3               	addwf	prodl,w,c
 16773  002F1C  6ED9               	movwf	fsr2l,c
 16774  002F1E  0E02               	movlw	high _eusart1TxBuffer
 16775  002F20  20F4               	addwfc	prodh,w,c
 16776  002F22  6EDA               	movwf	fsr2h,c
 16777  002F24  50DF               	movf	indf2,w,c
 16778  002F26  6EAD               	movwf	4013,c	;volatile
 16779                           
 16780                           ; BSR set to: 0
 16781  002F28  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16785  002F2A  0E45               	movlw	69
 16786  002F2C  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 16787  002F2E  D002               	goto	i2l782
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;eusart1.c: 189: {
 16791                           ;eusart1.c: 190: eusart1TxTail = 0;
 16792  002F30  0E00               	movlw	0
 16793  002F32  6E3B               	movwf	_eusart1TxTail,c	;volatile
 16794  002F34                     i2l782:
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;eusart1.c: 191: }
 16798                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 16799                           
 16800                           ; BSR set to: 0
 16801  002F34  2BFB               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16802                           
 16803                           ;eusart1.c: 193: }
 16804  002F36  0012               	return	
 16805  002F38                     i2l781:
 16806                           
 16807                           ; BSR set to: 0
 16808                           ;eusart1.c: 194: else
 16809                           ;eusart1.c: 195: {
 16810                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 16811  002F38  989D               	bcf	3997,4,c	;volatile
 16812                           
 16813                           ; BSR set to: 0
 16814                           ;eusart1.c: 197: eusart1TxTail = 0;
 16815  002F3A  0E00               	movlw	0
 16816  002F3C  6E3B               	movwf	_eusart1TxTail,c	;volatile
 16817                           
 16818                           ;eusart1.c: 198: eusart1TxHead = 0;
 16819  002F3E  0E00               	movlw	0
 16820  002F40  6E3C               	movwf	_eusart1TxHead,c	;volatile
 16821  002F42  0012               	return	
 16822  002F44                     __end_of_EUSART1_Transmit_ISR:
 16823                           	opt stack 0
 16824                           tosu	equ	0xFFF
 16825                           tosh	equ	0xFFE
 16826                           tosl	equ	0xFFD
 16827                           pclatu	equ	0xFFB
 16828                           pclath	equ	0xFFA
 16829                           tblptru	equ	0xFF8
 16830                           tblptrh	equ	0xFF7
 16831                           tblptrl	equ	0xFF6
 16832                           tablat	equ	0xFF5
 16833                           prodh	equ	0xFF4
 16834                           prodl	equ	0xFF3
 16835                           intcon	equ	0xFF2
 16836                           intcon2	equ	0xFF1
 16837                           indf0	equ	0xFEF
 16838                           postinc0	equ	0xFEE
 16839                           fsr0h	equ	0xFEA
 16840                           fsr0l	equ	0xFE9
 16841                           wreg	equ	0xFE8
 16842                           indf1	equ	0xFE7
 16843                           postdec1	equ	0xFE5
 16844                           fsr1h	equ	0xFE2
 16845                           fsr1l	equ	0xFE1
 16846                           indf2	equ	0xFDF
 16847                           postinc2	equ	0xFDE
 16848                           postdec2	equ	0xFDD
 16849                           fsr2h	equ	0xFDA
 16850                           fsr2l	equ	0xFD9
 16851                           status	equ	0xFD8
 16852                           
 16853 ;; *************** function _EUSART1_Receive_ISR *****************
 16854 ;; Defined at:
 16855 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;		None
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;		None
 16860 ;; Return value:  Size  Location     Type
 16861 ;;                  1    wreg      void 
 16862 ;; Registers used:
 16863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16869 ;;      Params:         0       0       0       0       0       0       0
 16870 ;;      Locals:         0       0       0       0       0       0       0
 16871 ;;      Temps:          0       0       0       0       0       0       0
 16872 ;;      Totals:         0       0       0       0       0       0       0
 16873 ;;Total ram usage:        0 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; This function calls:
 16876 ;;		Nothing
 16877 ;; This function is called by:
 16878 ;;		_INTERRUPT_InterruptManager
 16879 ;; This function uses a non-reentrant model
 16880 ;;
 16881                           
 16882                           	psect	text88
 16883  002F78                     __ptext88:
 16884                           	opt stack 0
 16885  002F78                     _EUSART1_Receive_ISR:
 16886                           	opt stack 20
 16887                           
 16888                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;incstack = 0
 16892  002F78  A2AB               	btfss	4011,1,c	;volatile
 16893  002F7A  D002               	goto	i2l787
 16894                           
 16895                           ;eusart1.c: 206: {
 16896                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 16897  002F7C  98AB               	bcf	4011,4,c	;volatile
 16898                           
 16899                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 16900  002F7E  88AB               	bsf	4011,4,c	;volatile
 16901  002F80                     i2l787:
 16902                           
 16903                           ;eusart1.c: 210: }
 16904                           ;eusart1.c: 212: TXREG1 = RCREG1;
 16905  002F80  CFAE FFAD          	movff	4014,4013	;volatile
 16906                           
 16907                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 16908  002F84  503A               	movf	_eusart1RxHead,w,c	;volatile
 16909  002F86  0D01               	mullw	1
 16910  002F88  0E00               	movlw	low _eusart1RxBuffer
 16911  002F8A  24F3               	addwf	prodl,w,c
 16912  002F8C  6ED9               	movwf	fsr2l,c
 16913  002F8E  0E01               	movlw	high _eusart1RxBuffer
 16914  002F90  20F4               	addwfc	prodh,w,c
 16915  002F92  6EDA               	movwf	fsr2h,c
 16916  002F94  CFAE FFDF          	movff	4014,indf2	;volatile
 16917  002F98  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 16918                           
 16919                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 16920  002F9A  0E27               	movlw	39
 16921  002F9C  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 16922  002F9E  D002               	goto	i2l788
 16923                           
 16924                           ;eusart1.c: 217: {
 16925                           ;eusart1.c: 218: eusart1RxHead = 0;
 16926  002FA0  0E00               	movlw	0
 16927  002FA2  6E3A               	movwf	_eusart1RxHead,c	;volatile
 16928  002FA4                     i2l788:
 16929                           
 16930                           ;eusart1.c: 219: }
 16931                           ;eusart1.c: 220: eusart1RxCount++;
 16932  002FA4  0101               	movlb	1	; () banked
 16933  002FA6  2B51               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 16934                           
 16935                           ; BSR set to: 1
 16936  002FA8  0012               	return		;funcret
 16937  002FAA                     __end_of_EUSART1_Receive_ISR:
 16938                           	opt stack 0
 16939                           tosu	equ	0xFFF
 16940                           tosh	equ	0xFFE
 16941                           tosl	equ	0xFFD
 16942                           pclatu	equ	0xFFB
 16943                           pclath	equ	0xFFA
 16944                           tblptru	equ	0xFF8
 16945                           tblptrh	equ	0xFF7
 16946                           tblptrl	equ	0xFF6
 16947                           tablat	equ	0xFF5
 16948                           prodh	equ	0xFF4
 16949                           prodl	equ	0xFF3
 16950                           intcon	equ	0xFF2
 16951                           intcon2	equ	0xFF1
 16952                           indf0	equ	0xFEF
 16953                           postinc0	equ	0xFEE
 16954                           fsr0h	equ	0xFEA
 16955                           fsr0l	equ	0xFE9
 16956                           wreg	equ	0xFE8
 16957                           indf1	equ	0xFE7
 16958                           postdec1	equ	0xFE5
 16959                           fsr1h	equ	0xFE2
 16960                           fsr1l	equ	0xFE1
 16961                           indf2	equ	0xFDF
 16962                           postinc2	equ	0xFDE
 16963                           postdec2	equ	0xFDD
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           tosu	equ	0xFFF
 16968                           tosh	equ	0xFFE
 16969                           tosl	equ	0xFFD
 16970                           pclatu	equ	0xFFB
 16971                           pclath	equ	0xFFA
 16972                           tblptru	equ	0xFF8
 16973                           tblptrh	equ	0xFF7
 16974                           tblptrl	equ	0xFF6
 16975                           tablat	equ	0xFF5
 16976                           prodh	equ	0xFF4
 16977                           prodl	equ	0xFF3
 16978                           intcon	equ	0xFF2
 16979                           intcon2	equ	0xFF1
 16980                           indf0	equ	0xFEF
 16981                           postinc0	equ	0xFEE
 16982                           fsr0h	equ	0xFEA
 16983                           fsr0l	equ	0xFE9
 16984                           wreg	equ	0xFE8
 16985                           indf1	equ	0xFE7
 16986                           postdec1	equ	0xFE5
 16987                           fsr1h	equ	0xFE2
 16988                           fsr1l	equ	0xFE1
 16989                           indf2	equ	0xFDF
 16990                           postinc2	equ	0xFDE
 16991                           postdec2	equ	0xFDD
 16992                           fsr2h	equ	0xFDA
 16993                           fsr2l	equ	0xFD9
 16994                           status	equ	0xFD8
 16995                           
 16996                           	psect	text89
 16997  000000                     __ptext89:
 16998                           	opt stack 0
 16999                           tosu	equ	0xFFF
 17000                           tosh	equ	0xFFE
 17001                           tosl	equ	0xFFD
 17002                           pclatu	equ	0xFFB
 17003                           pclath	equ	0xFFA
 17004                           tblptru	equ	0xFF8
 17005                           tblptrh	equ	0xFF7
 17006                           tblptrl	equ	0xFF6
 17007                           tablat	equ	0xFF5
 17008                           prodh	equ	0xFF4
 17009                           prodl	equ	0xFF3
 17010                           intcon	equ	0xFF2
 17011                           intcon2	equ	0xFF1
 17012                           indf0	equ	0xFEF
 17013                           postinc0	equ	0xFEE
 17014                           fsr0h	equ	0xFEA
 17015                           fsr0l	equ	0xFE9
 17016                           wreg	equ	0xFE8
 17017                           indf1	equ	0xFE7
 17018                           postdec1	equ	0xFE5
 17019                           fsr1h	equ	0xFE2
 17020                           fsr1l	equ	0xFE1
 17021                           indf2	equ	0xFDF
 17022                           postinc2	equ	0xFDE
 17023                           postdec2	equ	0xFDD
 17024                           fsr2h	equ	0xFDA
 17025                           fsr2l	equ	0xFD9
 17026                           status	equ	0xFD8
 17027                           
 17028                           	psect	rparam
 17029  0000                     tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclatu	equ	0xFFB
 17033                           pclath	equ	0xFFA
 17034                           tblptru	equ	0xFF8
 17035                           tblptrh	equ	0xFF7
 17036                           tblptrl	equ	0xFF6
 17037                           tablat	equ	0xFF5
 17038                           prodh	equ	0xFF4
 17039                           prodl	equ	0xFF3
 17040                           intcon	equ	0xFF2
 17041                           intcon2	equ	0xFF1
 17042                           indf0	equ	0xFEF
 17043                           postinc0	equ	0xFEE
 17044                           fsr0h	equ	0xFEA
 17045                           fsr0l	equ	0xFE9
 17046                           wreg	equ	0xFE8
 17047                           indf1	equ	0xFE7
 17048                           postdec1	equ	0xFE5
 17049                           fsr1h	equ	0xFE2
 17050                           fsr1l	equ	0xFE1
 17051                           indf2	equ	0xFDF
 17052                           postinc2	equ	0xFDE
 17053                           postdec2	equ	0xFDD
 17054                           fsr2h	equ	0xFDA
 17055                           fsr2l	equ	0xFD9
 17056                           status	equ	0xFD8
 17057                           
 17058                           	psect	temp
 17059  000048                     btemp:
 17060                           	opt stack 0
 17061  000048                     	ds	1
 17062  0000                     int$flags	set	btemp
 17063  0000                     wtemp6	set	btemp+1
 17064                           tosu	equ	0xFFF
 17065                           tosh	equ	0xFFE
 17066                           tosl	equ	0xFFD
 17067                           pclatu	equ	0xFFB
 17068                           pclath	equ	0xFFA
 17069                           tblptru	equ	0xFF8
 17070                           tblptrh	equ	0xFF7
 17071                           tblptrl	equ	0xFF6
 17072                           tablat	equ	0xFF5
 17073                           prodh	equ	0xFF4
 17074                           prodl	equ	0xFF3
 17075                           intcon	equ	0xFF2
 17076                           intcon2	equ	0xFF1
 17077                           indf0	equ	0xFEF
 17078                           postinc0	equ	0xFEE
 17079                           fsr0h	equ	0xFEA
 17080                           fsr0l	equ	0xFE9
 17081                           wreg	equ	0xFE8
 17082                           indf1	equ	0xFE7
 17083                           postdec1	equ	0xFE5
 17084                           fsr1h	equ	0xFE2
 17085                           fsr1l	equ	0xFE1
 17086                           indf2	equ	0xFDF
 17087                           postinc2	equ	0xFDE
 17088                           postdec2	equ	0xFDD
 17089                           fsr2h	equ	0xFDA
 17090                           fsr2l	equ	0xFD9
 17091                           status	equ	0xFD8


Data Sizes:
    Strings     1282
    Constant    123
    Data        20
    BSS         289
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    139     156
    BANK1           256     79     219
    BANK2           256      0     134
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$2998	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK1[16]), FlashReadCondition@TxMsg(COMRAM[7]), 
		 -> FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK1[16]), FlashReadCondition@TxMsg(COMRAM[7]), 
		 -> FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK1[20]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_39(CODE[37]), STR_38(CODE[38]), STR_37(CODE[86]), STR_36(CODE[53]), 
		 -> STR_35(CODE[46]), STR_34(CODE[29]), STR_33(CODE[101]), STR_32(CODE[86]), 
		 -> STR_31(CODE[61]), STR_30(CODE[62]), STR_29(CODE[45]), STR_28(CODE[74]), 
		 -> STR_27(CODE[25]), STR_26(CODE[79]), STR_25(CODE[75]), STR_24(CODE[46]), 
		 -> STR_23(CODE[61]), STR_22(CODE[66]), STR_21(CODE[23]), STR_20(CODE[31]), 
		 -> STR_18(CODE[20]), STR_16(CODE[20]), STR_14(CODE[18]), STR_13(CODE[20]), 
		 -> STR_12(CODE[31]), STR_8(CODE[11]), STR_6(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_40(CODE[7]), STR_19(CODE[9]), STR_17(CODE[12]), STR_15(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    GetDoubleFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK1[16]), FlashReadCondition@TxMsg(COMRAM[7]), 
		 -> FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetDoubleFromUartData@tempNum(BANK0[10]), GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK1[16]), FlashReadCondition@TxMsg(COMRAM[7]), 
		 -> FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    CalcSynthRegParams@regArray	PTR long  size(2) Largest target is 16
		 -> UpdateSynthFreq@regSynthArray(BANK1[16]), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), readUartByte@dest(BANK1[50]), STR_7(CODE[10]), SampleSingleChannel@dest(BANK1[50]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[20]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    AdcSingleSample@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupTx->_AdcSingleSample
    _GroupRx->_AdcSingleSample
    _getFractionPartOfDivide->___awtoft
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _ZeroArray->_memset
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    ___llmod->___lldiv
    _SendUartSystemInitMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _log->___awtoft
    _exp->___awtoft
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftmul->___ftdiv
    ___ftsub->___awtoft
    ___ftadd->___awtoft
    ___ftneg->___awtoft
    ___ftdiv->___altoft
    ___awtoft->___ftdiv
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _UART_Write_Text->_EUSART1_Write
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->i2___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _GroupTx->_UpdateSynthFreq
    _GroupRx->_UpdateSynthFreq
    _UpdateSynthFreq->_CalcSynthRegParams
    _GetDoubleFromUartData->_atof
    _atof->_strtod
    _strtod->___ftneg
    _CalcSynthRegParams->_pow
    _getFractionPartOfDivide->___ftadd
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _PrintHelpScreen->_sprintf
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___ftmul
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___awtoft
    ___awtoft->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte
    _GroupTx->_UpdateSynthFreq
    _GroupRx->_UpdateSynthFreq

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  542751
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  399831
                                            136 BANK0      3     3      0
                                             26 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2089
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              3     1      2  187213
                                            133 BANK0      3     1      2
                    _AdcSingleSample
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              3     1      2  187213
                                            133 BANK0      3     1      2
                    _AdcSingleSample
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     29    27      2  177316
                                            131 BANK0      2     0      2
                                              0 BANK1     26    26      0
                 _CalcSynthRegParams
              _GetDoubleFromUartData
                          _ZeroArray
                            ___fttol
            _getFractionPartOfDivide
 ---------------------------------------------------------------------------------
 (4) _GetDoubleFromUartData                               21    18      3   23220
                                             60 BANK0     21    18      3
                          _ZeroArray
                               _atof
 ---------------------------------------------------------------------------------
 (5) _atof                                                 3     0      3   20637
                                             57 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (6) _strtod                                              12     8      4   20516
                                             45 BANK0     12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _CalcSynthRegParams                                  29    23      6  133063
                                            102 BANK0     29    23      6
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
            _getFractionPartOfDivide
                                _pow
 ---------------------------------------------------------------------------------
 (4) _getFractionPartOfDivide                              6     0      6   17057
                                             57 BANK0      6     0      6
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                      8     6      2    9804
                                             47 COMRAM     1     1      0
                                             21 BANK0      7     5      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     314
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  17    13      4    5071
                                             45 COMRAM     2     2      0
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2453
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     636
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    2089
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   11787
                                            133 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   11645
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     615
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     615
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   10839
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  125667
                                            102 BANK0      2     2      0
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    6999
                                             35 COMRAM     7     1      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     852
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   98563
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   30632
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   53464
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   13564
                                             57 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4    1451
                                             24 BANK0     15    11      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1458
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3817
                                             31 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    6541
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    6114
                                             57 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5698
                                             45 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     605
                                             42 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5253
                                             41 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3566
                                             47 COMRAM     1     1      0
                                             39 BANK0      3     0      3
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3194
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    3432
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0    5611
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    5611
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    5611
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     367
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0     367
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (12) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
     _TMR0_StartTimer
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SetMcuRunTime
     ___llmod
       ___lldiv (ARG)
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _UpdateSynthFreq
         _CalcSynthRegParams
           ___altoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getFractionPartOfDivide
             ___awtoft
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           _pow
             ___ftge
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftsub
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___fttol (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftmul (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftdiv (ARG)
                               ___altoft (ARG)
                                 ___ftpack
                               ___ftpack (ARG)
                               ___lwtoft (ARG)
                                 ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                             _frexp (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___fttol (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftmul (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftdiv (ARG)
                               ___altoft (ARG)
                                 ___ftpack
                               ___ftpack (ARG)
                               ___lwtoft (ARG)
                                 ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                             _frexp (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _GetDoubleFromUartData
           _ZeroArray
             _memset
           _atof
             _strtod
               ___altoft
                 ___ftpack
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___lmul
               _isdigit
               _isspace
         _ZeroArray
           _memset
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _getFractionPartOfDivide
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _GroupTx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _UpdateSynthFreq
         _CalcSynthRegParams
           ___altoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _getFractionPartOfDivide
             ___awtoft
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           _pow
             ___ftge
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftsub
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___fttol (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftmul (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftdiv (ARG)
                               ___altoft (ARG)
                                 ___ftpack
                               ___ftpack (ARG)
                               ___lwtoft (ARG)
                                 ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                             _frexp (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___fttol (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftmul (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftdiv (ARG)
                               ___altoft (ARG)
                                 ___ftpack
                               ___ftpack (ARG)
                               ___lwtoft (ARG)
                                 ___ftpack
                             ___ftpack (ARG)
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                             _frexp (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___fttol (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftmul (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___altoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           _frexp (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___fttol (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___altoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _GetDoubleFromUartData
           _ZeroArray
             _memset
           _atof
             _strtod
               ___altoft
                 ___ftpack
               ___ftdiv
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___lmul
               _isdigit
               _isspace
         _ZeroArray
           _memset
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _getFractionPartOfDivide
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      86      10       52.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100     4F      DB       8       85.5%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     8B      9C       6       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     244       3        0.0%
DATA                 0      0     244       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 17:52:04 2018

              __end_of_keepAliveSignalLed 31B4                              ___altoft@exp 0028  
                _eusart1TxBufferRemaining 00FB                             ___altoft@sign 0029  
                                      l42 27F2                                        l44 2838  
                                      l96 1614                                        l98 16C6  
                     __end_of_BlinkOkLeds 2898                           _SWSPI_send_word 1F90  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                      _CalcSynthRegParams 04C8                              __CFG_CP2$OFF 000000  
                GetDoubleFromUartData@idx 00AF                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0098                              ___ftadd@exp2 0097  
                             __CFG_LVP$ON 000000             SampleSingleChannel@_adcResult 01B3  
                            ___ftadd@sign 0096                               ?_MEMORY_ISR 0001  
                                     l101 16E2                                       l102 16FA  
                                     l111 194A                                       l200 0946  
                                     l105 1706                                       l201 0982  
                                     l106 1716                                       l211 09DC  
                                     l212 09F2                                       l230 26D6  
                                     l214 09F8                                       l206 0996  
                                     l231 26A2                                       l215 0A38  
                                     l207 09B2                                       l216 0A02  
                                     l218 0A68                                       l172 0AA6  
                                     l173 0816                                       l190 0890  
                                     l182 085A                                       l503 2016  
                                     l191 089A                                       l175 0822  
                                     l512 2A3C                                       l520 29E4  
                                     l504 202E                                       l192 08A4  
                                     l513 2A08                                       l521 29B0  
                                     l193 08E2                                       l177 0838  
                                     l530 2ABC                                       l514 2A22  
                                     l522 29CA                                       l506 2044  
                                     l194 09C6                                       l186 087A  
                                     l515 2A2C                                       l523 29D4  
                                     l195 08EE                                       l187 08CC  
                                     l196 0932                                       l188 0886  
                                     l615 2E8A                                       l528 2AEE  
                                     l616 2E62                                       l529 2AB2  
                                     l641 316E                                       l625 2E76  
                                     l617 2E6C                                       l546 2ADA  
                                     l538 2AC6                                       l626 2E80  
                                     l547 2AE4                                       l539 2AD0  
                                     l636 3172                                       l557 2B44  
                                     l637 316A                                       l493 1FAA  
                                     l558 2B08                                       l575 2B30  
                                     l567 2B1C                                       l559 2B12  
                                     l576 2B3A                                       l568 2B26  
                                     l496 1FB8                                       l762 2CE8  
                                     l499 2004                                       l764 2D0E  
                                     l775 2E36                                       l776 2E5A  
                                     l777 2E58                                       l985 2FC2  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                                     _exp 0D3C                                       _log 1724  
                                     _pow 1464                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                     ?_CalcSynthRegParams 00C6            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                                    l1140 2934                                      l2020 0DC6  
                                    l1300 1288                                      l1141 28F6  
                                    l2021 0DF6                                      l1301 1234  
                                    l1061 2C00                                      l2022 0F20  
                                    l1150 25EC                                      l1070 2976  
                                    l1143 28FA                                      l2031 1C8C  
                                    l2023 0EF6                                      l1127 2278  
                                    l1151 25C0                                      l1144 28FE  
                                    l2032 1D08                                      l1145 2902  
                                    l2041 1EE4                                      l2017 0D56  
                                    l1073 2956                                      l1065 2C10  
                                    l1146 2930                                      l1058 2C20  
                                    l2043 1F2A                                      l2019 0D8E  
                                    l2028 1C72                                      l1316 2A68  
                                    l1084 30B2                                      l2037 2398  
                                    l2029 1C64                                      l2045 1F58  
                                    l1317 2A7C                                      l1501 02CE  
                                    l1085 30A6                                      l2046 1F4C  
                                    l2054 3026                                      l1510 039A  
                                    l1502 02D4                                      l1262 2BBE  
                                    l2071 1740                                      l1511 036E  
                                    l1503 02F2                                      l1079 2966  
                                    l1087 30AC                                      l1263 2BD6  
                                    l2080 1E32                                      l1520 0450  
                                    l1504 032C                                      l2073 1760  
                                    l1281 1110                                      l1521 0424  
                                    l1265 2BE8                                      l1282 112A  
                                    l1506 03E2                                      l1514 03D4  
                                    l1283 118C                                      l1291 1178  
                                    l2059 3140                                      l1523 0498  
                                    l1507 0362                                      l1292 115A  
                                    l1524 048A                                      l1508 0334  
                                    l1525 04BA                                      l1517 041C  
                                    l1630 1386                                      l1518 03EE  
                                    l1615 130A                                      l2079 1EB2  
                                    l1295 11E2                                      l1624 139A  
                                    l1288 11BA                                      l1704 304C  
                                    l1480 0138                                      l1641 13F2  
                                    l1393 264E                                      l1289 1130  
                                    l1481 0150                                      l1650 1B9E  
                                    l1642 140E                                      l1394 2642  
                                    l1730 254C                                      l1482 0168  
                                    l1651 1BDC                                      l1643 143E  
                                    l1619 1334                                      l1299 122E  
                                    l1731 2540                                      l1475 0102  
                                    l1652 1C02                                      l1820 149E  
                                    l1740 2792                                      l1476 00FC  
                                    l1565 2EB0                                      l1629 1390  
                                    l1741 2786                                      l1493 0228  
                                    l1485 01EA                                      l1590 2182  
                                    l1638 13CE                                      l1670 1B12  
                                    l1822 14C6                                      l1734 2580  
                                    l1486 01E0                                      l1478 012C  
                                    l1591 2178                                      l1751 28AA  
                                    l1639 13C4                                      l1663 1A80  
                                    l1823 154C                                      l1807 2FF4  
                                    l1735 258E                                      l1584 2126  
                                    l1752 289E                                      l1648 1B76  
                                    l1680 2DB6                                      l1656 2430  
                                    l1824 152A                                      l1744 27BA  
                                    l1808 2FE4                                      l1496 023C  
                                    l1585 211C                                      l1665 1AA8  
                                    l1657 2460                                      l1825 15D2  
                                    l1745 27C8                                      l1489 01E4  
                                    l1674 3092                                      l1666 1ADA  
                                    l1587 215A                                      l1667 1AEA  
                                    l1819 14AE                                      l1588 2144  
                                    l1692 1A28                                      l1684 198C  
                                    l1669 1B02                                      l1693 1A1C  
                                    l1686 1A04                                      l1695 1A44  
                                    l1687 19F4                                      l1783 2B78  
                                    l1784 2B70                                      l1960 0F86  
                                    l1793 2D72                                      l1794 2D6A  
                                    l1962 0FDA                                      l1787 2B98  
                                    l1699 3122                                      l1971 1014  
                                    l1788 2BA2                                      l7100 2FE4  
                                    l1797 2D8A                                      l1798 2D94  
                                    l1982 31F0                                      l1974 1026  
                                    l1958 0F6E                                      l1975 1092  
                                    l1968 0FEA                                      l1977 10B6  
                                    l1969 0FFA                                      l1978 10F2  
                                    l5740 1FC4                                      l7404 2E24  
                                    ?_exp 00AC                                      ?_log 00A5  
                                    l5744 1FD2                                      l6640 248C  
                                    l7344 0EF6                                      l5676 27E2  
                                    l7622 11E6                                      l7558 2268  
                                    l7576 22B0                                      l5978 2844  
                                    ?_pow 00B5                                      STR_1 7FD9  
                                    STR_2 7FD9                                      STR_3 7F9C  
                                    STR_4 7FD9                                      STR_5 7FD9  
                                    STR_6 7FF9                                      STR_7 7FD9  
                                    STR_8 7FCE                                      STR_9 7FD9  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u5400 2796  
                                    u7001 1A68                                      u5260 2928  
                                    u7021 1A90                                      u7110 19AA  
                                    u5520 1FA0                                      u8000 1514  
                                    u5265 291E                                      u5610 203A  
                                    u5370 2550                                      u7211 1B5E  
                                    u7115 19A2                                      u5700 31A6  
                                    u8100 0FB0                                      u7150 1A2E  
                                    u7231 1B86                                      u5560 1FF8  
                                    u7400 1F04                                      u8120 0FC0  
                                    u8210 2B7C                                      u7091 1970  
                                    u5580 201E                                      u6700 210E  
                                    u7180 23C0                                      u5718 31A8  
                                    u8070 0F76                                      u8310 22B0  
                                    u7360 1C7E                                      u7408 1F08  
                                    u8240 2D76                                      u8400 1290  
                                    u7600 0210                                      u7520 0134  
                                    u6801 12DC                                      u8410 12A8  
                                    u7290 3048                                      u8260 26CE  
                                    u6740 218C                                      u7188 23C2  
                                    u7620 0238                                      u9037 27FA  
                                    u8270 2702                                      u6830 12FC  
                                    u8510 1862                                      u9047 280A  
                                    u8440 16B8                                      u9057 281A  
                                    u6930 13A2                                      u8267 26C4  
                                    u9067 282A                                      u6860 1326  
                                    u8380 1212                                      u8277 26F8  
                                    u9077 193A                                      u8710 09A6  
                                    u8630 0926                                      u9087 286A  
                                    u6791 12C8                                      u6960 13D6  
                                    u8480 16F2                                      u9097 2884  
                                    u6890 1364                                      u7940 3018  
                                    u7880 0DD0                                      u7890 0DD2  
                                    u8690 0976                                      u8748 0A7C  
                                    u8749 0A9E                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 2E22  
                 ??_InitAdcApplicationMgr 0018                                      _atof 30C4  
                                    _main 2BAC                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 3248                           __end_of_DacInit 2774  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 00AC  
                                    log@x 00A5                 SampleSingleChannel@adcRes 01B5  
                        ?_ClearMcuRunTime 0001                                      pow@x 00B5  
                                    pow@y 00B8                                      prodh 000FF4  
                                    prodl 000FF3              UpdateSynthFreq@regSynthArray 0188  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                           _adcSampleMode 003D               __end_of_SampleSingleChannel 195E  
                         GroupCommon@data 00E5                      ??_CalcSynthRegParams 00CC  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                   __end_of_UART_Write_Text 270A  
                         __end_of_GroupRx 2C46                           __end_of_GroupTx 29A8  
                            ___fttol@exp1 0086                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0082  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 2F78  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 3216  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_atof 0099  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 1464                                     STR_10 7FD9  
                                   STR_11 7FD9                                     STR_20 7EF4  
                                   STR_12 7EF4                                     STR_13 7F60  
                                   STR_21 7F49                                     STR_14 7FB0  
                                   STR_30 7D33                                     STR_22 7CF1  
                                   STR_15 7FF3                                     STR_31 7DAE  
                                   STR_23 7D71                                     STR_40 7FEC  
                                   STR_16 7F88                                     STR_24 7E4E  
                                   STR_32 7B61                                     STR_17 7FC2  
                                   STR_25 7C5C                                     STR_33 7AFC  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                     STR_18 7F74  
                                   STR_34 7F13                                     STR_26 7C0D  
                                   STR_19 7FE3                                     STR_27 7F30  
                                   STR_35 7E20                                     STR_36 7DEB  
                                   STR_28 7CA7                                     STR_29 7E7C  
                                   STR_37 7BB7                                     STR_38 7EA9  
                                   STR_39 7ECF                           __end_of___ftdiv 1C34  
                         __end_of___ftneg 30A0                           __end_of___lldiv 25A0  
                         __end_of___ftmul 1B4C                                     _T0CON 000FD5  
                         __end_of___llmod 27DA                           __end_of___ftsub 2DE0  
                         __end_of___fttol 1A56                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 2BAC                           __end_of___lwmod 2D9E  
                                   i2l710 005E                                     i2l712 006A  
                                   i2l715 007A                                     i2l717 0086  
                                   i2l719 0090                                     i2l781 2F38  
                                   i2l941 230E                                     i2l782 2F34  
                                   i2l942 2330                                     i2l943 2352  
                                   i2l787 2F80                                     i2l788 2FA4  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2A00  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                        ?_PrintHelpScreen 0001                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 22DE                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001C                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 2F0C                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 2370                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0030  
                 __end_of_PIN_MANAGER_IOC 3250                                     _make8 28F4  
                         __end_of_dpowers 7ABF            __size_of_SWSPI_Synth_send_bits 0058  
                                   _count 00F1                                     _floor 1C34  
                                   _ldexp 1ECA                                     _frexp 2370  
                                   _errno 00EB             __end_of_SWSPI_Synth_send_bits 2A00  
                         __end_of_isalpha 302E                           __end_of_isdigit 312A  
                                   _group 014F                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                                     atof@s 0099  
                           ??_GroupCommon 0031                           __end_of_isspace 3054  
                          ?_EUSART1_Write 0001                           __end_of_isupper 3148  
                                   pclath 000FFA                                     tablat 000FF5  
                       ??_UpdateSynthFreq 0031                                     pow@yi 00C2  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                           __end_of_sprintf 12B6  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 31F4  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018           GetDoubleFromUartData@doubleFreq 00A2  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 00B2                      ?_SWSPI_DAC_send_bits 001A  
                      __size_ofi2___lwmod 0042                               ldexp@newexp 00A8  
                 __end_of_SWSPI_send_word 2048                               _BlinkOkLeds 283A  
                         __initialization 21AC                               log@exponent 00A8  
                            __end_of_atof 30E8                __end_of_EUSART1_Initialize 2F0C  
                            __end_of_main 2BFA               ?_INTERRUPT_InterruptManager 0001  
                                  ??_atof 0031                                    ??_main 0031  
                           ___fttol@sign1 0081                        _TimerKeepAliveFlag 0153  
                           __activetblptr 000002                ?_SendUartSystemInitMessage 0001  
                            _writeAddress 0042                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 324C                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0099  
                                  ?_ldexp 00A5                                    ?_frexp 0018  
                        __end_of___altoft 2698                          ___llmod@dividend 0025  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        __end_of___awtoft 2ED4                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 21AC                          __end_of___lltoft 28F4  
                          __CFG_WDTEN$OFF 000000                                    i2l1793 2DF6  
                                  i2l1794 2DEE                                    i2l1797 2E0E  
                                  i2l1798 2E18                                    _TABLAT 000FF5  
                                  _RCREG1 000FAE                          __end_of___lwtoft 310C  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 3166                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 30C4  
                               ??_GroupRx 0031                                 ??_GroupTx 0031  
                          __CFG_XINST$OFF 000000                               GroupRx@data 00E5  
                             GroupTx@data 00E5                                    _cState 0150  
                                  ___ftge 2400                                    ___lmul 2A58  
               SWSPI_Synth_send_bits@data 001A                                    ___wmul 3054  
                               ??___ftadd 0093                            __CFG_STVREN$ON 000000  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0060  
                               ??___ftneg 0031                                 ??___lldiv 0020  
            GetDoubleFromUartData@tempNum 00A5                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 3256                                 ??___llmod 002D  
                               ??___ftsub 0031                                 ??___fttol 007C  
                               ??___lwdiv 001C                                 ??___lwmod 0023  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                      AdcSingleSample@cType 0077  
                        ?_TMR0_Initialize 0001                                    _memset 2FDA  
                                  clear_0 2212                                    clear_1 221E  
                                  clear_2 222A                                    clear_3 2236  
                                  _strtod 00E0                                    _strtol 0F2E  
                                  floor@i 009C                     __end_of_SwSpi_Clk_Pin 2B5A  
                                  floor@x 0099                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                              __pdataCOMRAM 0042  
                               ??_isalpha 001B                                 ??_isdigit 0018  
                        __end_of_testLeds 283A                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 1DF0                              __mediumconst 7A80  
                               ??_isspace 0018                         __end_ofi2___lwmod 2E22  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                            ??_readUartByte 00E8  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0046                          ?_PIN_MANAGER_IOC 0001  
                               ??_sprintf 002A                           _eusart1RxBuffer 0100  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
                   _GetDoubleFromUartData 25A0             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0200                          __end_ofexp@coeff 7AE1  
                       _SYSTEM_Initialize 3182                          __end_oflog@coeff 7AFC  
                              __accesstop 0060                   __end_of__initialization 223C  
                              ___altoft@c 0020                             ZeroArray@size 0022  
             CalcSynthRegParams@inputFreq 00C8                                ___ftadd@f1 008D  
                              ___ftadd@f2 0090                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 00A2                             ___rparam_used 000001  
                              ___ftdiv@f1 002A                                ___ftdiv@f2 002D  
                              ___ftdiv@f3 0064                                ___ftneg@f1 008A  
                              ___awtoft@c 0087                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0021  
                              ___ftsub@f1 0099                                ___ftsub@f2 009C  
                              ___fttol@f1 0078                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3240  
                            __pidataBANK1 3216                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2950                             __end_of_floor 1D16  
                           __end_of_ldexp 1F90                             __end_of_frexp 2400  
        __size_of_getFractionPartOfDivide 008E                    _SwSpi_Set_Synth_Le_Pin 2E5E  
                              ___lwtoft@c 0020                      __end_of_EUSART1_Read 2D18  
                            ??_MEMORY_ISR 0001                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                      _keepAliveSignalLed 319C                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 2FAA                  __size_of_AdcSingleSample 0144  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 00AA  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 319C  
                           _eusart1RxHead 003A                       PrintHelpScreen@dest 0069  
                           _eusart1TxHead 003C                             _eusart1RxTail 0039  
                              __pbssBANK0 00EB                                __pbssBANK1 0100  
                              __pbssBANK2 0200                               _GroupCommon 30A0  
                           _eusart1TxTail 003B                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00DA                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7ABF                                _channelNum 0037  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0006  
           __end_of_InitAdcApplicationMgr 323C                        __end_of_MEMORY_ISR 3254  
         ??_InitSystemApplicationManagers 002A                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 3236  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 3166  
                               ?___altoft 0020                                   ?_memset 0018  
                          ___lmul@product 0020                                 ?___awtoft 0087  
                               ?___ftpack 0018                                 ?___lltoft 0020  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0020  
                                 ?_strtod 008D                                   ?_strtol 0024  
                         _UpdateSynthFreq 2048                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 01CA  
                 SampleSingleChannel@dest 017E                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                    ?_GetDoubleFromUartData 009C  
                                 _DacInit 270A                     GetIntFromUartData@idx 0073  
                          _SwSpi_Data_Pin 2AAE                             _SetMcuRunTime 2D18  
                      _GetIntFromUartData 224A                           __CFG_PWRTEN$OFF 000000  
                                 _GroupRx 2BFA                                   _GroupTx 2950  
                                 __Hparam 0000                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000               __size_of_CalcSynthRegParams 0346  
                               ?_testLeds 0001                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 12B6                                   ___ftdiv 1B4C  
                    __end_of_readUartByte 0ADA                                   ___ftneg 307A  
                                 ___lldiv 251E                           __size_of___wmul 0026  
                                 ___ftmul 1A56                                   ___llmod 2774  
                                 ___ftsub 2D9E                                   ___fttol 195E  
                                 ___lwdiv 2B5A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 2D5C                                ??___altoft 0024  
              SWSPI_Synth_send_bits@count 001B                     _mcuRunTimeIn5SecTicks 0148  
                                 _crcCalc 00F5                                   _channel 00F6  
                                 __pcinit 21AC                                ??___awtoft 0030  
                              ??___ftpack 001D                         __end_of_eval_poly 1ECA  
                         __size_of_memset 002C                                   __ramtop 0600  
            __size_of_SampleSingleChannel 0118                                ??___lltoft 0024  
                                 __ptext0 2BAC                                   __ptext1 080E  
                                 __ptext2 2C8E                                   __ptext3 30A0  
                                 __ptext4 2BFA                                   __ptext5 2950  
                                 __ptext6 2048                                   __ptext7 25A0  
                                 __ptext8 30C4                                   __ptext9 00E0  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                         __size_of_strtod 03E8                           __size_of_strtol 01D6  
                                 _dpowers 7AB5                     _OSCILLATOR_Initialize 3208  
                                 _isalpha 3006                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 310C  
                            __size_of_pow 017C               ??_SendUartSystemInitMessage 002B  
                    _UpdateSynthFreq$2992 0181                        _EUSART1_Initialize 2ED4  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 302E  
                                 _isupper 312A                     AdcSingleSample@retNum 0078  
                                 _request 014E                      ??_GetIntFromUartData 002E  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                                 _sprintf 1104                    __end_of_SwSpi_Data_Pin 2B04  
                                 _toupper 31E0                      end_of_initialization 223C  
                                 exp@sign 00B4                       ?_EUSART1_Initialize 0001  
                   _SWSPI_Synth_send_bits 29A8                  __size_of_PrintHelpScreen 0262  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 7A80                         ??_AdcSingleSample 0030  
                         ___lldiv@divisor 001C                                _numSamples 00EF  
                    __end_of_SetMcuSystem 322C                                   pow@sign 00C1  
                         ___lldiv@counter 0024                         readUartByte@chRec 01CC  
                    UpdateSynthFreq@cType 0001                                ??_testLeds 0018  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 016A  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 7AB5                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 2C8E                   _getFractionPartOfDivide 2490  
                             testLeds@idx 0019                   __end_of_UpdateSynthFreq 20FE  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 31E0  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 31CA  
                                 strtod@s 008D                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 322C                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 3182                              strtol@endptr 0026  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018               __end_of_SWSPI_DAC_send_bits 2A58  
                               i2___lwmod 2DE0             SendUartSystemInitMessage@dest 0069  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2CD4  
               _SendUartSystemInitMessage 1D16                               ___ftmul@exp 0072  
                         _synthCalcParams 0128                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                            _needToSample 0152              __end_of_INTERRUPT_Initialize 3248  
                          __end_of___ftge 2490                            __end_of___lmul 2AAE  
                      GroupCommon@request 00E7                            __end_of___wmul 307A  
                           __pidataCOMRAM 323C                         __size_of_TMR0_ISR 0092  
                 _CalcSynthRegParams$2993 00E0                            _ADC_Initialize 31B4  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 3006  
                              floor@expon 009F                  __size_of_UART_Write_Text 0072  
                       ??_ClearMcuRunTime 0018                            __end_of_strtod 04C8  
                          __end_of_strtol 1104                       start_initialization 21AC  
                              eval_poly@d 009C                                eval_poly@n 009E  
                              eval_poly@x 0099                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 00A5  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0F2E                               __end_of_log 1846  
                             __end_of_pow 15E0                    ?_SWSPI_Synth_send_bits 001A  
                              ?i2___lwmod 0001                           ??_SetMcuRunTime 002E  
                            ?_GroupCommon 00E5                     __end_of_EUSART1_Write 2E5E  
                  __size_of_PLLInitialize 0002                                frexp@value 0018  
                         ___llmod@divisor 0029                           ___llmod@counter 002D  
                        UpdateSynthFreq@t 017E                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 02CC                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 2E9A                 ??_getFractionPartOfDivide 0031  
                       ??_PrintHelpScreen 002B                                  ??___ftge 001E  
                                ??___lmul 0020                                  ??___wmul 001C  
                     AdcSingleSample@data 0075                      __size_of_BlinkOkLeds 005E  
                  __end_of_ADC_Initialize 31CA                          ?_UpdateSynthFreq 00E3  
                             __pdataBANK0 00F7                               __pdataBANK1 01CD  
                 SWSPI_DAC_send_bits@data 001A                            GroupRx@request 00E7  
                                ??_memset 001E                  __size_of_SWSPI_send_word 00B8  
                                ??_strtod 0091                                  ??_strtol 002A  
                          _eusart1RxCount 0151                         __size_of___altoft 0078  
                               _ZeroArray 3148                         __size_of___awtoft 003A  
                       __size_of___ftpack 00AE                 GetDoubleFromUartData@data 009C  
                 ??_GetDoubleFromUartData 009F                            GroupTx@request 00E7  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 017E  
                            _isalpha$2669 001C                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                              _isdigit$2379 0019  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                            _readUartByte 080E                     __size_of_SetMcuSystem 000A  
                     _SampleSingleChannel 1846              __size_of_EUSART1_Receive_ISR 0032  
                             sprintf@flag 0060                               sprintf@prec 0061  
                   _TMR0_InterruptHandler 01D9                                 __pnvBANK0 00FB  
                               __pnvBANK1 01D9                  __size_of_TMR0_StartTimer 0004  
                                ?_GroupRx 00E5                                  ?_GroupTx 00E5  
                        ___lwdiv@dividend 0018                    _PIN_MANAGER_Initialize 2C46  
                   _InitAdcApplicationMgr 3236                                 __pintcode 0008  
                           __pmediumconst 7A80                                  ?___ftadd 008D  
                                ?___ftdiv 002A                                  ?___ftneg 008A  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0025                                  ?___ftsub 0099  
                                ?___fttol 0078                                  ?___lwdiv 0018  
                                ?___lwmod 001F                           ?_ADC_Initialize 0001  
                       __size_of_testLeds 0060                             _PLLInitialize 3254  
             __size_of_keepAliveSignalLed 0018                      ?_SampleSingleChannel 0001  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2B04                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1DF0  
         __end_of_getFractionPartOfDivide 251E                           _TimerOneSecFlag 0155  
                                ?_isspace 0001                           _AdcSingleSample 15E0  
                            _SetMcuSystem 3222                                  ?_isupper 0001  
           UpdateSynthFreq@insertFraqData 0185                          ___lwdiv@quotient 001D  
                          __size_of_make8 005C                                  ?_sprintf 0024  
                          __size_of_floor 00E2                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                                  ?_toupper 0001  
                             ??i2___lwmod 0005                         ??_UART_Write_Text 001B  
                    _INTERRUPT_Initialize 3244               getFractionPartOfDivide@num1 0099  
             getFractionPartOfDivide@num2 009C                         ??_TMR0_Initialize 001A  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                                  _PIE1bits 000F9D  
              __end_of_CalcSynthRegParams 080E                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                               _rxMsgData 0156                          readUartByte@dest 0198  
                     UpdateSynthFreq@data 00E3                                  i2u566_40 2DFA  
                     SWSPI_send_word@data 0021                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 22DE                               strtod@flags 0093  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                             strtod@expon 0094                     ??_SampleSingleChannel 00C6  
      __size_of_SendUartSystemInitMessage 00DA                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7AC3                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0099                        _PLL_INIT_REGISTERS 7A81  
                            _isspace$2382 0019                         ??_SWSPI_send_word 0026  
             __size_of_GetIntFromUartData 0094                         ___lmul@multiplier 0018  
                             _INTCON2bits 000FF1                                 copy_data0 21C0  
                               copy_data1 21E0                                 copy_data2 2200  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 006A  
                _SampleSingleChannel$2991 01B0                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0024                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                          __size_of_GroupRx 004C  
                        __size_of_GroupTx 0058                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 2FAA  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 31F4  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0026  
                        __size_of___lldiv 0082                                  ___altoft 2620  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0038                          __size_of___lwdiv 0052  
                 __end_of_AdcSingleSample 1724                          __size_of___lwmod 0042  
                                ___awtoft 2E9A                                  ___ftpack 20FE  
                        _numOfReadSamples 003E                                  ___lltoft 2898  
                                ___lwtoft 30E8                               ??_ZeroArray 0024  
              CalcSynthRegParams@regArray 00C6                       ??_ADC_GetConversion 001A  
                                _exp$2996 00AF                              _isupper$2672 0019  
                              sprintf@val 0066                                  _dataSize 014D  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 00F4                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 001B                           ___lwdiv@divisor 001A  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                         ___lwdiv@counter 001C                                  __ptext10 04C8  
                                __ptext11 2490                                  __ptext20 312A  
                                __ptext12 15E0                                  __ptext21 2A58  
                                __ptext13 251E                                  __ptext30 2F44  
                                __ptext22 3148                                  __ptext14 224A  
                                __ptext31 322C                                  __ptext23 2FDA  
                                __ptext15 0F2E                                  __ptext40 1846  
                                __ptext32 2C46                                  __ptext24 27DA  
                                __ptext16 31E0                                  __ptext41 1104  
                                __ptext33 3208                                  __ptext25 0ADA  
                                __ptext17 302E                                  __ptext50 195E  
                                __ptext42 2D5C                                  __ptext34 3244  
                                __ptext26 2CD4                                  __ptext18 310C  
                                __ptext51 2400                                  __ptext43 2B5A  
                                __ptext35 2ED4                                  __ptext27 319C  
                                __ptext19 3006                                  __ptext60 2E9A  
                                __ptext52 2620                                  __ptext44 1464  
                                __ptext36 31B4                                  __ptext28 3222  
                                __ptext61 2898                                  __ptext53 1DF0  
                                __ptext45 1724                                  __ptext37 2D18  
                                __ptext29 3182                                  __ptext70 3236  
                                __ptext62 30E8                                  __ptext54 3054  
                                __ptext46 0D3C                                  __ptext38 2774  
                                __ptext71 270A                                  __ptext63 20FE  
                                __ptext55 1A56                                  __ptext47 1ECA  
                                __ptext39 1D16                                  __ptext80 31F4  
                                __ptext72 1F90                                  __ptext64 2698  
                                __ptext56 2D9E                                  __ptext48 1C34  
                                __ptext81 283A                                  __ptext73 28F4  
                                __ptext65 2E22                                  __ptext57 12B6  
                                __ptext49 2370                                  __ptext74 2E5E  
                                __ptext66 2FAA                                  __ptext58 307A  
                                __ptext83 22DE                                  __ptext75 3166  
                                __ptext67 31CA                                  __ptext59 1B4C  
                                __ptext84 2DE0                                  __ptext76 29A8  
                                __ptext68 3248                                  __ptext85 324C  
                                __ptext77 2A00                                  __ptext69 3254  
                                __ptext86 3250                                  __ptext78 2AAE  
                                __ptext87 2F0C                                  __ptext79 2B04  
                                __ptext88 2F78                                  __ptext89 0000  
                        __size_of_isupper 001E                CalcSynthRegParams@tempVal1 00D4  
              CalcSynthRegParams@tempVal2 00D8                CalcSynthRegParams@tempVal3 00DC  
            SWSPI_Synth_send_bits@phrType 001C                                  _pow$2994 00BB  
                                _pow$2995 00BE                       GetIntFromUartData@c 0072  
                         _PrintHelpScreen 0ADA                          __size_of_sprintf 01B2  
                        __size_of_toupper 0014                       UART_Write_Text@text 0019  
                           __size_of_atof 0024                             __size_of_main 004E  
                                _msgCount 014C              _TMR0_DefaultInterruptHandler 000000  
               __end_of_ADC_GetConversion 2FDA              __size_of_SWSPI_DAC_send_bits 0058  
                      SWSPI_send_word@idx 0027                               _groupsArray 01CD  
                         ??_PLLInitialize 0018                                  _testLeds 27DA  
                              strtod@eexp 0092                                  int$flags 0048  
                              strtol@base 0028                                strtol@sign 0060  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         ??_SwSpi_Clk_Pin 0019                       _EUSART1_Receive_ISR 2F78  
             __end_of_InitRxMessageParams 2CD4                                  exp@coeff 7AC3  
                              _MEMORY_ISR 3250                                  log@coeff 7AE1  
                  SWSPI_send_word@phrType 0029                                _INTCONbits 000FF2  
                             ??_eval_poly 00A0                               _sampleArray 0246  
                             _sampleCount 00ED            __size_of_GetDoubleFromUartData 0080  
           __end_of_GetDoubleFromUartData 2620                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  intlevel2 0000  
                               sprintf@ap 0062                                 sprintf@cp 0064  
                               sprintf@sp 0024                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 2D5C                          ___lwmod@dividend 001F  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 3208  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 2F44                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                         _TimerSamplingFlag 0154  
                               strtod@res 008F                             _isReWriteDone 00F3  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                        ?_AdcSingleSample 0075                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 2698  
                                sprintf@c 0068                                  sprintf@f 0026  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0021  
                         _TMR0_Initialize 2F44                   __end_of_PrintHelpScreen 0D3C  
                         ___lwmod@counter 0023                  __size_of_UpdateSynthFreq 00B6  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                                strtod@_u 0095             GetDoubleFromUartData@dataSize 009E  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2C8E  
                        UART_Write_Text@i 001D                  ?_getFractionPartOfDivide 0099  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 324C                __size_of_ADC_GetConversion 0030  
