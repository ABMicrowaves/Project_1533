

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 06 14:08:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    97                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           ; Version 1.45
   100                           ; Generated 16/11/2017 GMT
   101                           ; 
   102                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   103                           ; All rights reserved.
   104                           ; 
   105                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   106                           ; 
   107                           ; Redistribution and use in source and binary forms, with or without modification, are
   108                           ; permitted provided that the following conditions are met:
   109                           ; 
   110                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   111                           ;        conditions and the following disclaimer.
   112                           ; 
   113                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   114                           ;        of conditions and the following disclaimer in the documentation and/or other
   115                           ;        materials provided with the distribution.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F45K22 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   135  0000                     
   136 ;; Function _GroupControlMcu is unused but had its address taken
   137  0000                     
   138 ;; Function _GroupStatusAndVersion is unused but had its address taken
   139  0000                     
   140 ;; Function _GroupAdc is unused but had its address taken
   141  0000                     
   142 ;; Function _GroupSynthesizers is unused but had its address taken
   143  0000                     
   144 ;; Function _GroupFlashMemory is unused but had its address taken
   145  0000                     
   146 ;; Function _GroupDAC is unused but had its address taken
   147  0000                     
   148                           	psect	idataCOMRAM
   149  0023EE                     __pidataCOMRAM:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _writeAddress
   153  0023EE  4000               	dw	16384
   154  0023F0  0000               	dw	0
   155                           
   156                           	psect	idataBANK0
   157  00239E                     __pidataBANK0:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _groupsArray
   161  00239E  00                 	db	0
   162  00239F  00                 	db	0
   163  0023A0  00                 	db	0
   164  0023A1  00                 	db	0
   165  0023A2  00                 	db	0
   166  0023A3  00                 	db	0
   167  0023A4  00                 	db	0
   168  0023A5  00                 	db	0
   169  0023A6  00                 	db	0
   170  0023A7  00                 	db	0
   171  0023A8  00                 	db	0
   172  0023A9  00                 	db	0
   173                           
   174                           ;initializer for _readAddress
   175  0023AA  4000               	dw	16384
   176  0023AC  0000               	dw	0
   177                           
   178                           	psect	mediumconst
   179  007BE2                     __pmediumconst:
   180                           	opt stack 0
   181  007BE2  00                 	db	0
   182  007BE3                     _TEST_PLL_REGISTERS:
   183                           	opt stack 0
   184  007BE3  041C               	dw	1052
   185  007BE5  0001               	dw	1
   186  007BE7  300B               	dw	12299
   187  007BE9  0061               	dw	97
   188  007BEB  26BA               	dw	9914
   189  007BED  00C0               	dw	192
   190  007BEF  FCC9               	dw	64713
   191  007BF1  1A19               	dw	6681
   192  007BF3  0428               	dw	1064
   193  007BF5  102D               	dw	4141
   194  007BF7  00E7               	dw	231
   195  007BF9  1200               	dw	4608
   196  007BFB  6076               	dw	24694
   197  007BFD  3505               	dw	13573
   198  007BFF  0025               	dw	37
   199  007C01  0080               	dw	128
   200  007C03  8B84               	dw	35716
   201  007C05  3200               	dw	12800
   202  007C07  0003               	dw	3
   203  007C09  0000               	dw	0
   204  007C0B  0032               	dw	50
   205  007C0D  0008               	dw	8
   206  007C0F  AAA1               	dw	43681
   207  007C11  01AA               	dw	426
   208  007C13  0EDA               	dw	3802
   209  007C15  0003               	dw	3
   210  007C17                     __end_of_TEST_PLL_REGISTERS:
   211                           	opt stack 0
   212  007C17                     _PLL_INIT_REGISTERS:
   213                           	opt stack 0
   214  007C17  041C               	dw	1052
   215  007C19  0001               	dw	1
   216  007C1B  300B               	dw	12299
   217  007C1D  0061               	dw	97
   218  007C1F  323A               	dw	12858
   219  007C21  00C0               	dw	192
   220  007C23  BCC9               	dw	48329
   221  007C25  2221               	dw	8737
   222  007C27  0428               	dw	1064
   223  007C29  102D               	dw	4141
   224  007C2B  00E7               	dw	231
   225  007C2D  1200               	dw	4608
   226  007C2F  2076               	dw	8310
   227  007C31  3501               	dw	13569
   228  007C33  0025               	dw	37
   229  007C35  0080               	dw	128
   230  007C37  9B84               	dw	39812
   231  007C39  3400               	dw	13312
   232  007C3B  0003               	dw	3
   233  007C3D  0000               	dw	0
   234  007C3F  0012               	dw	18
   235  007C41  0000               	dw	0
   236  007C43  0001               	dw	1
   237  007C45  0600               	dw	1536
   238  007C47  0340               	dw	832
   239  007C49  0020               	dw	32
   240  007C4B                     __end_of_PLL_INIT_REGISTERS:
   241                           	opt stack 0
   242  007C4B                     _channelArr:
   243                           	opt stack 0
   244  007C4B  07                 	db	7
   245  007C4C  06                 	db	6
   246  007C4D  05                 	db	5
   247  007C4E  04                 	db	4
   248  007C4F  19                 	db	25
   249  007C50  0A                 	db	10
   250  007C51  0D                 	db	13
   251  007C52                     __end_of_channelArr:
   252                           	opt stack 0
   253  007C52                     exp@coeff:
   254                           	opt stack 0
   255  007C52  00                 	db	0
   256  007C53  80                 	db	128
   257  007C54  3F                 	db	63
   258  007C55  72                 	db	114
   259  007C56  31                 	db	49
   260  007C57  3F                 	db	63
   261  007C58  FE                 	db	254
   262  007C59  75                 	db	117
   263  007C5A  3E                 	db	62
   264  007C5B  58                 	db	88
   265  007C5C  63                 	db	99
   266  007C5D  3D                 	db	61
   267  007C5E  95                 	db	149
   268  007C5F  1D                 	db	29
   269  007C60  3C                 	db	60
   270  007C61  C5                 	db	197
   271  007C62  AE                 	db	174
   272  007C63  3A                 	db	58
   273  007C64  79                 	db	121
   274  007C65  21                 	db	33
   275  007C66  39                 	db	57
   276  007C67  94                 	db	148
   277  007C68  80                 	db	128
   278  007C69  37                 	db	55
   279  007C6A  93                 	db	147
   280  007C6B  A7                 	db	167
   281  007C6C  35                 	db	53
   282  007C6D  56                 	db	86
   283  007C6E  15                 	db	21
   284  007C6F  34                 	db	52
   285  007C70                     __end_ofexp@coeff:
   286                           	opt stack 0
   287  007C70                     log@coeff:
   288                           	opt stack 0
   289  007C70  00                 	db	0
   290  007C71  00                 	db	0
   291  007C72  00                 	db	0
   292  007C73  00                 	db	0
   293  007C74  80                 	db	128
   294  007C75  3F                 	db	63
   295  007C76  F0                 	db	240
   296  007C77  FF                 	db	255
   297  007C78  BE                 	db	190
   298  007C79  E2                 	db	226
   299  007C7A  A9                 	db	169
   300  007C7B  3E                 	db	62
   301  007C7C  83                 	db	131
   302  007C7D  76                 	db	118
   303  007C7E  BE                 	db	190
   304  007C7F  AE                 	db	174
   305  007C80  2B                 	db	43
   306  007C81  3E                 	db	62
   307  007C82  3C                 	db	60
   308  007C83  C3                 	db	195
   309  007C84  BD                 	db	189
   310  007C85  D2                 	db	210
   311  007C86  13                 	db	19
   312  007C87  3D                 	db	61
   313  007C88  78                 	db	120
   314  007C89  D3                 	db	211
   315  007C8A  BB                 	db	187
   316  007C8B                     __end_oflog@coeff:
   317                           	opt stack 0
   318  007C8B                     STR_23:
   319  007C8B  56                 	db	86	;'V'
   320  007C8C  4D                 	db	77	;'M'
   321  007C8D  20                 	db	32
   322  007C8E  3C                 	db	60	;'<'
   323  007C8F  6E                 	db	110	;'n'
   324  007C90  65                 	db	101	;'e'
   325  007C91  67                 	db	103	;'g'
   326  007C92  61                 	db	97	;'a'
   327  007C93  74                 	db	116	;'t'
   328  007C94  69                 	db	105	;'i'
   329  007C95  76                 	db	118	;'v'
   330  007C96  65                 	db	101	;'e'
   331  007C97  20                 	db	32
   332  007C98  70                 	db	112	;'p'
   333  007C99  6F                 	db	111	;'o'
   334  007C9A  77                 	db	119	;'w'
   335  007C9B  65                 	db	101	;'e'
   336  007C9C  72                 	db	114	;'r'
   337  007C9D  20                 	db	32
   338  007C9E  6C                 	db	108	;'l'
   339  007C9F  65                 	db	101	;'e'
   340  007CA0  76                 	db	118	;'v'
   341  007CA1  65                 	db	101	;'e'
   342  007CA2  6C                 	db	108	;'l'
   343  007CA3  3E                 	db	62	;'>'
   344  007CA4  3C                 	db	60	;'<'
   345  007CA5  63                 	db	99	;'c'
   346  007CA6  72                 	db	114	;'r'
   347  007CA7  3E                 	db	62	;'>'
   348  007CA8  20                 	db	32
   349  007CA9  20                 	db	32
   350  007CAA  09                 	db	9
   351  007CAB  53                 	db	83	;'S'
   352  007CAC  65                 	db	101	;'e'
   353  007CAD  74                 	db	116	;'t'
   354  007CAE  20                 	db	32
   355  007CAF  6E                 	db	110	;'n'
   356  007CB0  65                 	db	101	;'e'
   357  007CB1  67                 	db	103	;'g'
   358  007CB2  61                 	db	97	;'a'
   359  007CB3  74                 	db	116	;'t'
   360  007CB4  69                 	db	105	;'i'
   361  007CB5  76                 	db	118	;'v'
   362  007CB6  65                 	db	101	;'e'
   363  007CB7  20                 	db	32
   364  007CB8  70                 	db	112	;'p'
   365  007CB9  6F                 	db	111	;'o'
   366  007CBA  77                 	db	119	;'w'
   367  007CBB  65                 	db	101	;'e'
   368  007CBC  72                 	db	114	;'r'
   369  007CBD  20                 	db	32
   370  007CBE  6C                 	db	108	;'l'
   371  007CBF  65                 	db	101	;'e'
   372  007CC0  76                 	db	118	;'v'
   373  007CC1  65                 	db	101	;'e'
   374  007CC2  6C                 	db	108	;'l'
   375  007CC3  0D                 	db	13
   376  007CC4  0A                 	db	10
   377  007CC5  00                 	db	0
   378  007CC6                     STR_14:
   379  007CC6  52                 	db	82	;'R'
   380  007CC7  41                 	db	65	;'A'
   381  007CC8  20                 	db	32
   382  007CC9  3C                 	db	60	;'<'
   383  007CCA  72                 	db	114	;'r'
   384  007CCB  61                 	db	97	;'a'
   385  007CCC  6E                 	db	110	;'n'
   386  007CCD  64                 	db	100	;'d'
   387  007CCE  6F                 	db	111	;'o'
   388  007CCF  6D                 	db	109	;'m'
   389  007CD0  69                 	db	105	;'i'
   390  007CD1  7A                 	db	122	;'z'
   391  007CD2  65                 	db	101	;'e'
   392  007CD3  72                 	db	114	;'r'
   393  007CD4  3E                 	db	62	;'>'
   394  007CD5  3C                 	db	60	;'<'
   395  007CD6  63                 	db	99	;'c'
   396  007CD7  72                 	db	114	;'r'
   397  007CD8  3E                 	db	62	;'>'
   398  007CD9  20                 	db	32
   399  007CDA  20                 	db	32
   400  007CDB  09                 	db	9
   401  007CDC  53                 	db	83	;'S'
   402  007CDD  65                 	db	101	;'e'
   403  007CDE  74                 	db	116	;'t'
   404  007CDF  20                 	db	32
   405  007CE0  77                 	db	119	;'w'
   406  007CE1  69                 	db	105	;'i'
   407  007CE2  74                 	db	116	;'t'
   408  007CE3  68                 	db	104	;'h'
   409  007CE4  2F                 	db	47
   410  007CE5  77                 	db	119	;'w'
   411  007CE6  69                 	db	105	;'i'
   412  007CE7  74                 	db	116	;'t'
   413  007CE8  68                 	db	104	;'h'
   414  007CE9  6F                 	db	111	;'o'
   415  007CEA  75                 	db	117	;'u'
   416  007CEB  74                 	db	116	;'t'
   417  007CEC  20                 	db	32
   418  007CED  72                 	db	114	;'r'
   419  007CEE  61                 	db	97	;'a'
   420  007CEF  6E                 	db	110	;'n'
   421  007CF0  64                 	db	100	;'d'
   422  007CF1  6F                 	db	111	;'o'
   423  007CF2  6D                 	db	109	;'m'
   424  007CF3  69                 	db	105	;'i'
   425  007CF4  7A                 	db	122	;'z'
   426  007CF5  65                 	db	101	;'e'
   427  007CF6  72                 	db	114	;'r'
   428  007CF7  20                 	db	32
   429  007CF8  28                 	db	40
   430  007CF9  30                 	db	48	;'0'
   431  007CFA  2D                 	db	45
   432  007CFB  31                 	db	49	;'1'
   433  007CFC  29                 	db	41
   434  007CFD  0D                 	db	13
   435  007CFE  0A                 	db	10
   436  007CFF  00                 	db	0
   437  007D00                     STR_18:
   438  007D00  49                 	db	73	;'I'
   439  007D01  44                 	db	68	;'D'
   440  007D02  20                 	db	32
   441  007D03  3C                 	db	60	;'<'
   442  007D04  69                 	db	105	;'i'
   443  007D05  6E                 	db	110	;'n'
   444  007D06  74                 	db	116	;'t'
   445  007D07  65                 	db	101	;'e'
   446  007D08  72                 	db	114	;'r'
   447  007D09  6E                 	db	110	;'n'
   448  007D0A  61                 	db	97	;'a'
   449  007D0B  6C                 	db	108	;'l'
   450  007D0C  20                 	db	32
   451  007D0D  70                 	db	112	;'p'
   452  007D0E  61                 	db	97	;'a'
   453  007D0F  74                 	db	116	;'t'
   454  007D10  74                 	db	116	;'t'
   455  007D11  65                 	db	101	;'e'
   456  007D12  72                 	db	114	;'r'
   457  007D13  6E                 	db	110	;'n'
   458  007D14  3E                 	db	62	;'>'
   459  007D15  3C                 	db	60	;'<'
   460  007D16  63                 	db	99	;'c'
   461  007D17  72                 	db	114	;'r'
   462  007D18  3E                 	db	62	;'>'
   463  007D19  20                 	db	32
   464  007D1A  20                 	db	32
   465  007D1B  09                 	db	9
   466  007D1C  53                 	db	83	;'S'
   467  007D1D  65                 	db	101	;'e'
   468  007D1E  74                 	db	116	;'t'
   469  007D1F  20                 	db	32
   470  007D20  69                 	db	105	;'i'
   471  007D21  6E                 	db	110	;'n'
   472  007D22  74                 	db	116	;'t'
   473  007D23  65                 	db	101	;'e'
   474  007D24  72                 	db	114	;'r'
   475  007D25  6E                 	db	110	;'n'
   476  007D26  61                 	db	97	;'a'
   477  007D27  6C                 	db	108	;'l'
   478  007D28  20                 	db	32
   479  007D29  70                 	db	112	;'p'
   480  007D2A  61                 	db	97	;'a'
   481  007D2B  74                 	db	116	;'t'
   482  007D2C  74                 	db	116	;'t'
   483  007D2D  65                 	db	101	;'e'
   484  007D2E  72                 	db	114	;'r'
   485  007D2F  6E                 	db	110	;'n'
   486  007D30  20                 	db	32
   487  007D31  28                 	db	40
   488  007D32  30                 	db	48	;'0'
   489  007D33  2D                 	db	45
   490  007D34  33                 	db	51	;'3'
   491  007D35  29                 	db	41
   492  007D36  0D                 	db	13
   493  007D37  0A                 	db	10
   494  007D38  00                 	db	0
   495  007D39                     STR_20:
   496  007D39  56                 	db	86	;'V'
   497  007D3A  53                 	db	83	;'S'
   498  007D3B  20                 	db	32
   499  007D3C  3C                 	db	60	;'<'
   500  007D3D  6D                 	db	109	;'m'
   501  007D3E  61                 	db	97	;'a'
   502  007D3F  6A                 	db	106	;'j'
   503  007D40  6F                 	db	111	;'o'
   504  007D41  72                 	db	114	;'r'
   505  007D42  3E                 	db	62	;'>'
   506  007D43  2E                 	db	46
   507  007D44  3C                 	db	60	;'<'
   508  007D45  6D                 	db	109	;'m'
   509  007D46  69                 	db	105	;'i'
   510  007D47  6E                 	db	110	;'n'
   511  007D48  6F                 	db	111	;'o'
   512  007D49  72                 	db	114	;'r'
   513  007D4A  3E                 	db	62	;'>'
   514  007D4B  20                 	db	32
   515  007D4C  3C                 	db	60	;'<'
   516  007D4D  63                 	db	99	;'c'
   517  007D4E  72                 	db	114	;'r'
   518  007D4F  3E                 	db	62	;'>'
   519  007D50  20                 	db	32
   520  007D51  20                 	db	32
   521  007D52  09                 	db	9
   522  007D53  73                 	db	115	;'s'
   523  007D54  65                 	db	101	;'e'
   524  007D55  74                 	db	116	;'t'
   525  007D56  20                 	db	32
   526  007D57  74                 	db	116	;'t'
   527  007D58  68                 	db	104	;'h'
   528  007D59  65                 	db	101	;'e'
   529  007D5A  20                 	db	32
   530  007D5B  73                 	db	115	;'s'
   531  007D5C  65                 	db	101	;'e'
   532  007D5D  74                 	db	116	;'t'
   533  007D5E  75                 	db	117	;'u'
   534  007D5F  70                 	db	112	;'p'
   535  007D60  20                 	db	32
   536  007D61  66                 	db	102	;'f'
   537  007D62  69                 	db	105	;'i'
   538  007D63  6C                 	db	108	;'l'
   539  007D64  65                 	db	101	;'e'
   540  007D65  20                 	db	32
   541  007D66  76                 	db	118	;'v'
   542  007D67  65                 	db	101	;'e'
   543  007D68  72                 	db	114	;'r'
   544  007D69  73                 	db	115	;'s'
   545  007D6A  69                 	db	105	;'i'
   546  007D6B  6F                 	db	111	;'o'
   547  007D6C  6E                 	db	110	;'n'
   548  007D6D  0D                 	db	13
   549  007D6E  0A                 	db	10
   550  007D6F  00                 	db	0
   551  007D70                     STR_15:
   552  007D70  46                 	db	70	;'F'
   553  007D71  52                 	db	82	;'R'
   554  007D72  20                 	db	32
   555  007D73  3C                 	db	60	;'<'
   556  007D74  66                 	db	102	;'f'
   557  007D75  72                 	db	114	;'r'
   558  007D76  65                 	db	101	;'e'
   559  007D77  71                 	db	113	;'q'
   560  007D78  75                 	db	117	;'u'
   561  007D79  65                 	db	101	;'e'
   562  007D7A  6E                 	db	110	;'n'
   563  007D7B  63                 	db	99	;'c'
   564  007D7C  79                 	db	121	;'y'
   565  007D7D  3E                 	db	62	;'>'
   566  007D7E  3C                 	db	60	;'<'
   567  007D7F  63                 	db	99	;'c'
   568  007D80  72                 	db	114	;'r'
   569  007D81  3E                 	db	62	;'>'
   570  007D82  20                 	db	32
   571  007D83  20                 	db	32
   572  007D84  09                 	db	9
   573  007D85  53                 	db	83	;'S'
   574  007D86  65                 	db	101	;'e'
   575  007D87  74                 	db	116	;'t'
   576  007D88  20                 	db	32
   577  007D89  66                 	db	102	;'f'
   578  007D8A  72                 	db	114	;'r'
   579  007D8B  65                 	db	101	;'e'
   580  007D8C  71                 	db	113	;'q'
   581  007D8D  75                 	db	117	;'u'
   582  007D8E  65                 	db	101	;'e'
   583  007D8F  6E                 	db	110	;'n'
   584  007D90  63                 	db	99	;'c'
   585  007D91  79                 	db	121	;'y'
   586  007D92  20                 	db	32
   587  007D93  28                 	db	40
   588  007D94  32                 	db	50	;'2'
   589  007D95  32                 	db	50	;'2'
   590  007D96  30                 	db	48	;'0'
   591  007D97  30                 	db	48	;'0'
   592  007D98  2E                 	db	46
   593  007D99  30                 	db	48	;'0'
   594  007D9A  2D                 	db	45
   595  007D9B  32                 	db	50	;'2'
   596  007D9C  34                 	db	52	;'4'
   597  007D9D  30                 	db	48	;'0'
   598  007D9E  30                 	db	48	;'0'
   599  007D9F  2E                 	db	46
   600  007DA0  30                 	db	48	;'0'
   601  007DA1  29                 	db	41
   602  007DA2  0D                 	db	13
   603  007DA3  0A                 	db	10
   604  007DA4  00                 	db	0
   605  007DA5                     STR_22:
   606  007DA5  56                 	db	86	;'V'
   607  007DA6  4C                 	db	76	;'L'
   608  007DA7  20                 	db	32
   609  007DA8  3C                 	db	60	;'<'
   610  007DA9  70                 	db	112	;'p'
   611  007DAA  6F                 	db	111	;'o'
   612  007DAB  77                 	db	119	;'w'
   613  007DAC  65                 	db	101	;'e'
   614  007DAD  72                 	db	114	;'r'
   615  007DAE  20                 	db	32
   616  007DAF  68                 	db	104	;'h'
   617  007DB0  69                 	db	105	;'i'
   618  007DB1  67                 	db	103	;'g'
   619  007DB2  68                 	db	104	;'h'
   620  007DB3  3E                 	db	62	;'>'
   621  007DB4  3C                 	db	60	;'<'
   622  007DB5  63                 	db	99	;'c'
   623  007DB6  72                 	db	114	;'r'
   624  007DB7  3E                 	db	62	;'>'
   625  007DB8  20                 	db	32
   626  007DB9  20                 	db	32
   627  007DBA  09                 	db	9
   628  007DBB  53                 	db	83	;'S'
   629  007DBC  65                 	db	101	;'e'
   630  007DBD  74                 	db	116	;'t'
   631  007DBE  20                 	db	32
   632  007DBF  68                 	db	104	;'h'
   633  007DC0  69                 	db	105	;'i'
   634  007DC1  67                 	db	103	;'g'
   635  007DC2  68                 	db	104	;'h'
   636  007DC3  20                 	db	32
   637  007DC4  70                 	db	112	;'p'
   638  007DC5  6F                 	db	111	;'o'
   639  007DC6  77                 	db	119	;'w'
   640  007DC7  65                 	db	101	;'e'
   641  007DC8  72                 	db	114	;'r'
   642  007DC9  20                 	db	32
   643  007DCA  6C                 	db	108	;'l'
   644  007DCB  65                 	db	101	;'e'
   645  007DCC  76                 	db	118	;'v'
   646  007DCD  65                 	db	101	;'e'
   647  007DCE  6C                 	db	108	;'l'
   648  007DCF  20                 	db	32
   649  007DD0  28                 	db	40
   650  007DD1  32                 	db	50	;'2'
   651  007DD2  30                 	db	48	;'0'
   652  007DD3  2D                 	db	45
   653  007DD4  34                 	db	52	;'4'
   654  007DD5  30                 	db	48	;'0'
   655  007DD6  29                 	db	41
   656  007DD7  0D                 	db	13
   657  007DD8  0A                 	db	10
   658  007DD9  00                 	db	0
   659  007DDA                     STR_10:
   660  007DDA  44                 	db	68	;'D'
   661  007DDB  50                 	db	80	;'P'
   662  007DDC  20                 	db	32
   663  007DDD  3C                 	db	60	;'<'
   664  007DDE  64                 	db	100	;'d'
   665  007DDF  61                 	db	97	;'a'
   666  007DE0  74                 	db	116	;'t'
   667  007DE1  61                 	db	97	;'a'
   668  007DE2  20                 	db	32
   669  007DE3  70                 	db	112	;'p'
   670  007DE4  6F                 	db	111	;'o'
   671  007DE5  6C                 	db	108	;'l'
   672  007DE6  61                 	db	97	;'a'
   673  007DE7  72                 	db	114	;'r'
   674  007DE8  69                 	db	105	;'i'
   675  007DE9  74                 	db	116	;'t'
   676  007DEA  79                 	db	121	;'y'
   677  007DEB  3E                 	db	62	;'>'
   678  007DEC  3C                 	db	60	;'<'
   679  007DED  63                 	db	99	;'c'
   680  007DEE  72                 	db	114	;'r'
   681  007DEF  3E                 	db	62	;'>'
   682  007DF0  20                 	db	32
   683  007DF1  20                 	db	32
   684  007DF2  09                 	db	9
   685  007DF3  53                 	db	83	;'S'
   686  007DF4  65                 	db	101	;'e'
   687  007DF5  74                 	db	116	;'t'
   688  007DF6  20                 	db	32
   689  007DF7  64                 	db	100	;'d'
   690  007DF8  61                 	db	97	;'a'
   691  007DF9  74                 	db	116	;'t'
   692  007DFA  61                 	db	97	;'a'
   693  007DFB  20                 	db	32
   694  007DFC  70                 	db	112	;'p'
   695  007DFD  6F                 	db	111	;'o'
   696  007DFE  6C                 	db	108	;'l'
   697  007DFF  61                 	db	97	;'a'
   698  007E00  72                 	db	114	;'r'
   699  007E01  69                 	db	105	;'i'
   700  007E02  74                 	db	116	;'t'
   701  007E03  79                 	db	121	;'y'
   702  007E04  20                 	db	32
   703  007E05  28                 	db	40
   704  007E06  30                 	db	48	;'0'
   705  007E07  2D                 	db	45
   706  007E08  31                 	db	49	;'1'
   707  007E09  29                 	db	41
   708  007E0A  0D                 	db	13
   709  007E0B  0A                 	db	10
   710  007E0C  00                 	db	0
   711  007E0D                     STR_17:
   712  007E0D  49                 	db	73	;'I'
   713  007E0E  43                 	db	67	;'C'
   714  007E0F  20                 	db	32
   715  007E10  3C                 	db	60	;'<'
   716  007E11  62                 	db	98	;'b'
   717  007E12  69                 	db	105	;'i'
   718  007E13  74                 	db	116	;'t'
   719  007E14  72                 	db	114	;'r'
   720  007E15  61                 	db	97	;'a'
   721  007E16  74                 	db	116	;'t'
   722  007E17  65                 	db	101	;'e'
   723  007E18  3E                 	db	62	;'>'
   724  007E19  3C                 	db	60	;'<'
   725  007E1A  63                 	db	99	;'c'
   726  007E1B  72                 	db	114	;'r'
   727  007E1C  3E                 	db	62	;'>'
   728  007E1D  20                 	db	32
   729  007E1E  20                 	db	32
   730  007E1F  09                 	db	9
   731  007E20  53                 	db	83	;'S'
   732  007E21  65                 	db	101	;'e'
   733  007E22  74                 	db	116	;'t'
   734  007E23  20                 	db	32
   735  007E24  62                 	db	98	;'b'
   736  007E25  69                 	db	105	;'i'
   737  007E26  72                 	db	114	;'r'
   738  007E27  74                 	db	116	;'t'
   739  007E28  61                 	db	97	;'a'
   740  007E29  74                 	db	116	;'t'
   741  007E2A  65                 	db	101	;'e'
   742  007E2B  20                 	db	32
   743  007E2C  28                 	db	40
   744  007E2D  31                 	db	49	;'1'
   745  007E2E  2E                 	db	46
   746  007E2F  30                 	db	48	;'0'
   747  007E30  30                 	db	48	;'0'
   748  007E31  2D                 	db	45
   749  007E32  33                 	db	51	;'3'
   750  007E33  30                 	db	48	;'0'
   751  007E34  2E                 	db	46
   752  007E35  30                 	db	48	;'0'
   753  007E36  30                 	db	48	;'0'
   754  007E37  44                 	db	68	;'D'
   755  007E38  42                 	db	66	;'B'
   756  007E39  70                 	db	112	;'p'
   757  007E3A  73                 	db	115	;'s'
   758  007E3B  29                 	db	41
   759  007E3C  0D                 	db	13
   760  007E3D  0A                 	db	10
   761  007E3E  00                 	db	0
   762  007E3F                     STR_21:
   763  007E3F  56                 	db	86	;'V'
   764  007E40  50                 	db	80	;'P'
   765  007E41  20                 	db	32
   766  007E42  3C                 	db	60	;'<'
   767  007E43  70                 	db	112	;'p'
   768  007E44  6F                 	db	111	;'o'
   769  007E45  77                 	db	119	;'w'
   770  007E46  65                 	db	101	;'e'
   771  007E47  72                 	db	114	;'r'
   772  007E48  20                 	db	32
   773  007E49  6C                 	db	108	;'l'
   774  007E4A  65                 	db	101	;'e'
   775  007E4B  76                 	db	118	;'v'
   776  007E4C  65                 	db	101	;'e'
   777  007E4D  6C                 	db	108	;'l'
   778  007E4E  3E                 	db	62	;'>'
   779  007E4F  3C                 	db	60	;'<'
   780  007E50  63                 	db	99	;'c'
   781  007E51  72                 	db	114	;'r'
   782  007E52  3E                 	db	62	;'>'
   783  007E53  20                 	db	32
   784  007E54  20                 	db	32
   785  007E55  09                 	db	9
   786  007E56  53                 	db	83	;'S'
   787  007E57  65                 	db	101	;'e'
   788  007E58  74                 	db	116	;'t'
   789  007E59  20                 	db	32
   790  007E5A  70                 	db	112	;'p'
   791  007E5B  6F                 	db	111	;'o'
   792  007E5C  77                 	db	119	;'w'
   793  007E5D  65                 	db	101	;'e'
   794  007E5E  72                 	db	114	;'r'
   795  007E5F  20                 	db	32
   796  007E60  6C                 	db	108	;'l'
   797  007E61  65                 	db	101	;'e'
   798  007E62  76                 	db	118	;'v'
   799  007E63  65                 	db	101	;'e'
   800  007E64  6C                 	db	108	;'l'
   801  007E65  20                 	db	32
   802  007E66  28                 	db	40
   803  007E67  32                 	db	50	;'2'
   804  007E68  30                 	db	48	;'0'
   805  007E69  2D                 	db	45
   806  007E6A  34                 	db	52	;'4'
   807  007E6B  30                 	db	48	;'0'
   808  007E6C  29                 	db	41
   809  007E6D  0D                 	db	13
   810  007E6E  0A                 	db	10
   811  007E6F  00                 	db	0
   812  007E70                     STR_11:
   813  007E70  44                 	db	68	;'D'
   814  007E71  45                 	db	69	;'E'
   815  007E72  20                 	db	32
   816  007E73  3C                 	db	60	;'<'
   817  007E74  73                 	db	115	;'s'
   818  007E75  65                 	db	101	;'e'
   819  007E76  74                 	db	116	;'t'
   820  007E77  75                 	db	117	;'u'
   821  007E78  70                 	db	112	;'p'
   822  007E79  20                 	db	32
   823  007E7A  53                 	db	83	;'S'
   824  007E7B  4F                 	db	79	;'O'
   825  007E7C  51                 	db	81	;'Q'
   826  007E7D  50                 	db	80	;'P'
   827  007E7E  53                 	db	83	;'S'
   828  007E7F  4B                 	db	75	;'K'
   829  007E80  3E                 	db	62	;'>'
   830  007E81  3C                 	db	60	;'<'
   831  007E82  63                 	db	99	;'c'
   832  007E83  72                 	db	114	;'r'
   833  007E84  3E                 	db	62	;'>'
   834  007E85  20                 	db	32
   835  007E86  20                 	db	32
   836  007E87  09                 	db	9
   837  007E88  53                 	db	83	;'S'
   838  007E89  65                 	db	101	;'e'
   839  007E8A  74                 	db	116	;'t'
   840  007E8B  20                 	db	32
   841  007E8C  73                 	db	115	;'s'
   842  007E8D  65                 	db	101	;'e'
   843  007E8E  74                 	db	116	;'t'
   844  007E8F  75                 	db	117	;'u'
   845  007E90  70                 	db	112	;'p'
   846  007E91  20                 	db	32
   847  007E92  53                 	db	83	;'S'
   848  007E93  4F                 	db	79	;'O'
   849  007E94  51                 	db	81	;'Q'
   850  007E95  50                 	db	80	;'P'
   851  007E96  53                 	db	83	;'S'
   852  007E97  4B                 	db	75	;'K'
   853  007E98  20                 	db	32
   854  007E99  28                 	db	40
   855  007E9A  30                 	db	48	;'0'
   856  007E9B  2D                 	db	45
   857  007E9C  31                 	db	49	;'1'
   858  007E9D  29                 	db	41
   859  007E9E  0D                 	db	13
   860  007E9F  0A                 	db	10
   861  007EA0  00                 	db	0
   862  007EA1                     STR_13:
   863  007EA1  52                 	db	82	;'R'
   864  007EA2  46                 	db	70	;'F'
   865  007EA3  20                 	db	32
   866  007EA4  3C                 	db	60	;'<'
   867  007EA5  70                 	db	112	;'p'
   868  007EA6  6F                 	db	111	;'o'
   869  007EA7  77                 	db	119	;'w'
   870  007EA8  65                 	db	101	;'e'
   871  007EA9  72                 	db	114	;'r'
   872  007EAA  20                 	db	32
   873  007EAB  63                 	db	99	;'c'
   874  007EAC  6F                 	db	111	;'o'
   875  007EAD  6D                 	db	109	;'m'
   876  007EAE  61                 	db	97	;'a'
   877  007EAF  6E                 	db	110	;'n'
   878  007EB0  64                 	db	100	;'d'
   879  007EB1  3E                 	db	62	;'>'
   880  007EB2  3C                 	db	60	;'<'
   881  007EB3  63                 	db	99	;'c'
   882  007EB4  72                 	db	114	;'r'
   883  007EB5  3E                 	db	62	;'>'
   884  007EB6  20                 	db	32
   885  007EB7  20                 	db	32
   886  007EB8  09                 	db	9
   887  007EB9  53                 	db	83	;'S'
   888  007EBA  65                 	db	101	;'e'
   889  007EBB  74                 	db	116	;'t'
   890  007EBC  20                 	db	32
   891  007EBD  70                 	db	112	;'p'
   892  007EBE  6F                 	db	111	;'o'
   893  007EBF  77                 	db	119	;'w'
   894  007EC0  65                 	db	101	;'e'
   895  007EC1  72                 	db	114	;'r'
   896  007EC2  20                 	db	32
   897  007EC3  63                 	db	99	;'c'
   898  007EC4  6F                 	db	111	;'o'
   899  007EC5  6D                 	db	109	;'m'
   900  007EC6  61                 	db	97	;'a'
   901  007EC7  6E                 	db	110	;'n'
   902  007EC8  64                 	db	100	;'d'
   903  007EC9  20                 	db	32
   904  007ECA  28                 	db	40
   905  007ECB  30                 	db	48	;'0'
   906  007ECC  2D                 	db	45
   907  007ECD  31                 	db	49	;'1'
   908  007ECE  29                 	db	41
   909  007ECF  0D                 	db	13
   910  007ED0  0A                 	db	10
   911  007ED1  00                 	db	0
   912  007ED2                     STR_12:
   913  007ED2  52                 	db	82	;'R'
   914  007ED3  50                 	db	80	;'P'
   915  007ED4  20                 	db	32
   916  007ED5  3C                 	db	60	;'<'
   917  007ED6  70                 	db	112	;'p'
   918  007ED7  6F                 	db	111	;'o'
   919  007ED8  77                 	db	119	;'w'
   920  007ED9  65                 	db	101	;'e'
   921  007EDA  72                 	db	114	;'r'
   922  007EDB  20                 	db	32
   923  007EDC  68                 	db	104	;'h'
   924  007EDD  65                 	db	101	;'e'
   925  007EDE  69                 	db	105	;'i'
   926  007EDF  67                 	db	103	;'g'
   927  007EE0  68                 	db	104	;'h'
   928  007EE1  74                 	db	116	;'t'
   929  007EE2  3E                 	db	62	;'>'
   930  007EE3  3C                 	db	60	;'<'
   931  007EE4  63                 	db	99	;'c'
   932  007EE5  72                 	db	114	;'r'
   933  007EE6  3E                 	db	62	;'>'
   934  007EE7  20                 	db	32
   935  007EE8  20                 	db	32
   936  007EE9  09                 	db	9
   937  007EEA  53                 	db	83	;'S'
   938  007EEB  65                 	db	101	;'e'
   939  007EEC  74                 	db	116	;'t'
   940  007EED  20                 	db	32
   941  007EEE  70                 	db	112	;'p'
   942  007EEF  6F                 	db	111	;'o'
   943  007EF0  77                 	db	119	;'w'
   944  007EF1  65                 	db	101	;'e'
   945  007EF2  72                 	db	114	;'r'
   946  007EF3  20                 	db	32
   947  007EF4  68                 	db	104	;'h'
   948  007EF5  65                 	db	101	;'e'
   949  007EF6  69                 	db	105	;'i'
   950  007EF7  67                 	db	103	;'g'
   951  007EF8  68                 	db	104	;'h'
   952  007EF9  74                 	db	116	;'t'
   953  007EFA  20                 	db	32
   954  007EFB  28                 	db	40
   955  007EFC  30                 	db	48	;'0'
   956  007EFD  2D                 	db	45
   957  007EFE  31                 	db	49	;'1'
   958  007EFF  29                 	db	41
   959  007F00  0D                 	db	13
   960  007F01  0A                 	db	10
   961  007F02  00                 	db	0
   962  007F03                     STR_9:
   963  007F03  44                 	db	68	;'D'
   964  007F04  53                 	db	83	;'S'
   965  007F05  20                 	db	32
   966  007F06  3C                 	db	60	;'<'
   967  007F07  64                 	db	100	;'d'
   968  007F08  61                 	db	97	;'a'
   969  007F09  74                 	db	116	;'t'
   970  007F0A  61                 	db	97	;'a'
   971  007F0B  20                 	db	32
   972  007F0C  73                 	db	115	;'s'
   973  007F0D  6F                 	db	111	;'o'
   974  007F0E  75                 	db	117	;'u'
   975  007F0F  72                 	db	114	;'r'
   976  007F10  65                 	db	101	;'e'
   977  007F11  3E                 	db	62	;'>'
   978  007F12  3C                 	db	60	;'<'
   979  007F13  63                 	db	99	;'c'
   980  007F14  72                 	db	114	;'r'
   981  007F15  3E                 	db	62	;'>'
   982  007F16  20                 	db	32
   983  007F17  20                 	db	32
   984  007F18  09                 	db	9
   985  007F19  53                 	db	83	;'S'
   986  007F1A  65                 	db	101	;'e'
   987  007F1B  74                 	db	116	;'t'
   988  007F1C  20                 	db	32
   989  007F1D  64                 	db	100	;'d'
   990  007F1E  61                 	db	97	;'a'
   991  007F1F  74                 	db	116	;'t'
   992  007F20  61                 	db	97	;'a'
   993  007F21  20                 	db	32
   994  007F22  73                 	db	115	;'s'
   995  007F23  6F                 	db	111	;'o'
   996  007F24  75                 	db	117	;'u'
   997  007F25  72                 	db	114	;'r'
   998  007F26  63                 	db	99	;'c'
   999  007F27  65                 	db	101	;'e'
  1000  007F28  20                 	db	32
  1001  007F29  28                 	db	40
  1002  007F2A  30                 	db	48	;'0'
  1003  007F2B  2D                 	db	45
  1004  007F2C  31                 	db	49	;'1'
  1005  007F2D  29                 	db	41
  1006  007F2E  0D                 	db	13
  1007  007F2F  0A                 	db	10
  1008  007F30  00                 	db	0
  1009  007F31                     STR_16:
  1010  007F31  4D                 	db	77	;'M'
  1011  007F32  4F                 	db	79	;'O'
  1012  007F33  20                 	db	32
  1013  007F34  3C                 	db	60	;'<'
  1014  007F35  6D                 	db	109	;'m'
  1015  007F36  6F                 	db	111	;'o'
  1016  007F37  64                 	db	100	;'d'
  1017  007F38  65                 	db	101	;'e'
  1018  007F39  3E                 	db	62	;'>'
  1019  007F3A  3C                 	db	60	;'<'
  1020  007F3B  63                 	db	99	;'c'
  1021  007F3C  72                 	db	114	;'r'
  1022  007F3D  3E                 	db	62	;'>'
  1023  007F3E  20                 	db	32
  1024  007F3F  20                 	db	32
  1025  007F40  09                 	db	9
  1026  007F41  53                 	db	83	;'S'
  1027  007F42  65                 	db	101	;'e'
  1028  007F43  74                 	db	116	;'t'
  1029  007F44  20                 	db	32
  1030  007F45  6D                 	db	109	;'m'
  1031  007F46  6F                 	db	111	;'o'
  1032  007F47  64                 	db	100	;'d'
  1033  007F48  65                 	db	101	;'e'
  1034  007F49  20                 	db	32
  1035  007F4A  28                 	db	40
  1036  007F4B  30                 	db	48	;'0'
  1037  007F4C  2D                 	db	45
  1038  007F4D  33                 	db	51	;'3'
  1039  007F4E  29                 	db	41
  1040  007F4F  0D                 	db	13
  1041  007F50  0A                 	db	10
  1042  007F51  00                 	db	0
  1043  007F52                     STR_19:
  1044  007F52  56                 	db	86	;'V'
  1045  007F53  45                 	db	69	;'E'
  1046  007F54  20                 	db	32
  1047  007F55  3C                 	db	60	;'<'
  1048  007F56  63                 	db	99	;'c'
  1049  007F57  72                 	db	114	;'r'
  1050  007F58  3E                 	db	62	;'>'
  1051  007F59  20                 	db	32
  1052  007F5A  20                 	db	32
  1053  007F5B  09                 	db	9
  1054  007F5C  64                 	db	100	;'d'
  1055  007F5D  69                 	db	105	;'i'
  1056  007F5E  73                 	db	115	;'s'
  1057  007F5F  70                 	db	112	;'p'
  1058  007F60  6C                 	db	108	;'l'
  1059  007F61  61                 	db	97	;'a'
  1060  007F62  79                 	db	121	;'y'
  1061  007F63  20                 	db	32
  1062  007F64  76                 	db	118	;'v'
  1063  007F65  65                 	db	101	;'e'
  1064  007F66  72                 	db	114	;'r'
  1065  007F67  73                 	db	115	;'s'
  1066  007F68  69                 	db	105	;'i'
  1067  007F69  6F                 	db	111	;'o'
  1068  007F6A  6E                 	db	110	;'n'
  1069  007F6B  20                 	db	32
  1070  007F6C  69                 	db	105	;'i'
  1071  007F6D  6E                 	db	110	;'n'
  1072  007F6E  66                 	db	102	;'f'
  1073  007F6F  6F                 	db	111	;'o'
  1074  007F70  0D                 	db	13
  1075  007F71  0A                 	db	10
  1076  007F72  00                 	db	0
  1077  007F73                     STR_1:
  1078  007F73  2A                 	db	42
  1079  007F74  2A                 	db	42
  1080  007F75  2A                 	db	42
  1081  007F76  2A                 	db	42
  1082  007F77  2A                 	db	42
  1083  007F78  2A                 	db	42
  1084  007F79  2A                 	db	42
  1085  007F7A  2A                 	db	42
  1086  007F7B  2A                 	db	42
  1087  007F7C  2A                 	db	42
  1088  007F7D  2A                 	db	42
  1089  007F7E  2A                 	db	42
  1090  007F7F  2A                 	db	42
  1091  007F80  2A                 	db	42
  1092  007F81  2A                 	db	42
  1093  007F82  2A                 	db	42
  1094  007F83  2A                 	db	42
  1095  007F84  2A                 	db	42
  1096  007F85  2A                 	db	42
  1097  007F86  2A                 	db	42
  1098  007F87  2A                 	db	42
  1099  007F88  2A                 	db	42
  1100  007F89  2A                 	db	42
  1101  007F8A  2A                 	db	42
  1102  007F8B  2A                 	db	42
  1103  007F8C  2A                 	db	42
  1104  007F8D  2A                 	db	42
  1105  007F8E  20                 	db	32
  1106  007F8F  0A                 	db	10
  1107  007F90  0D                 	db	13
  1108  007F91  00                 	db	0
  1109  007F92                     STR_3:
  1110  007F92  53                 	db	83	;'S'
  1111  007F93  57                 	db	87	;'W'
  1112  007F94  20                 	db	32
  1113  007F95  56                 	db	86	;'V'
  1114  007F96  45                 	db	69	;'E'
  1115  007F97  53                 	db	83	;'S'
  1116  007F98  52                 	db	82	;'R'
  1117  007F99  49                 	db	73	;'I'
  1118  007F9A  4F                 	db	79	;'O'
  1119  007F9B  4E                 	db	78	;'N'
  1120  007F9C  3A                 	db	58	;':'
  1121  007F9D  20                 	db	32
  1122  007F9E  31                 	db	49	;'1'
  1123  007F9F  2E                 	db	46
  1124  007FA0  30                 	db	48	;'0'
  1125  007FA1  30                 	db	48	;'0'
  1126  007FA2  31                 	db	49	;'1'
  1127  007FA3  20                 	db	32
  1128  007FA4  0A                 	db	10
  1129  007FA5  0D                 	db	13
  1130  007FA6  00                 	db	0
  1131  007FA7                     STR_2:
  1132  007FA7  46                 	db	70	;'F'
  1133  007FA8  41                 	db	65	;'A'
  1134  007FA9  53                 	db	83	;'S'
  1135  007FAA  54                 	db	84	;'T'
  1136  007FAB  20                 	db	32
  1137  007FAC  4C                 	db	76	;'L'
  1138  007FAD  49                 	db	73	;'I'
  1139  007FAE  4E                 	db	78	;'N'
  1140  007FAF  4B                 	db	75	;'K'
  1141  007FB0  20                 	db	32
  1142  007FB1  53                 	db	83	;'S'
  1143  007FB2  59                 	db	89	;'Y'
  1144  007FB3  53                 	db	83	;'S'
  1145  007FB4  54                 	db	84	;'T'
  1146  007FB5  45                 	db	69	;'E'
  1147  007FB6  4D                 	db	77	;'M'
  1148  007FB7  20                 	db	32
  1149  007FB8  0A                 	db	10
  1150  007FB9  0D                 	db	13
  1151  007FBA  00                 	db	0
  1152  007FBB                     STR_6:
  1153  007FBB  43                 	db	67	;'C'
  1154  007FBC  6F                 	db	111	;'o'
  1155  007FBD  6D                 	db	109	;'m'
  1156  007FBE  70                 	db	112	;'p'
  1157  007FBF  69                 	db	105	;'i'
  1158  007FC0  6C                 	db	108	;'l'
  1159  007FC1  65                 	db	101	;'e'
  1160  007FC2  20                 	db	32
  1161  007FC3  74                 	db	116	;'t'
  1162  007FC4  69                 	db	105	;'i'
  1163  007FC5  6D                 	db	109	;'m'
  1164  007FC6  65                 	db	101	;'e'
  1165  007FC7  3A                 	db	58	;':'
  1166  007FC8  20                 	db	32
  1167  007FC9  25                 	db	37
  1168  007FCA  73                 	db	115	;'s'
  1169  007FCB  20                 	db	32
  1170  007FCC  0A                 	db	10
  1171  007FCD  0D                 	db	13
  1172  007FCE  00                 	db	0
  1173  007FCF                     STR_4:
  1174  007FCF  43                 	db	67	;'C'
  1175  007FD0  6F                 	db	111	;'o'
  1176  007FD1  6D                 	db	109	;'m'
  1177  007FD2  70                 	db	112	;'p'
  1178  007FD3  69                 	db	105	;'i'
  1179  007FD4  6C                 	db	108	;'l'
  1180  007FD5  65                 	db	101	;'e'
  1181  007FD6  20                 	db	32
  1182  007FD7  64                 	db	100	;'d'
  1183  007FD8  61                 	db	97	;'a'
  1184  007FD9  74                 	db	116	;'t'
  1185  007FDA  65                 	db	101	;'e'
  1186  007FDB  3A                 	db	58	;':'
  1187  007FDC  20                 	db	32
  1188  007FDD  25                 	db	37
  1189  007FDE  73                 	db	115	;'s'
  1190  007FDF  20                 	db	32
  1191  007FE0  0A                 	db	10
  1192  007FE1  0D                 	db	13
  1193  007FE2  00                 	db	0
  1194  007FE3                     STR_5:
  1195  007FE3  4D                 	db	77	;'M'
  1196  007FE4  61                 	db	97	;'a'
  1197  007FE5  72                 	db	114	;'r'
  1198  007FE6  20                 	db	32
  1199  007FE7  30                 	db	48	;'0'
  1200  007FE8  36                 	db	54	;'6'
  1201  007FE9  20                 	db	32
  1202  007FEA  32                 	db	50	;'2'
  1203  007FEB  30                 	db	48	;'0'
  1204  007FEC  31                 	db	49	;'1'
  1205  007FED  38                 	db	56	;'8'
  1206  007FEE  00                 	db	0
  1207  007FEF                     STR_7:
  1208  007FEF  31                 	db	49	;'1'
  1209  007FF0  34                 	db	52	;'4'
  1210  007FF1  3A                 	db	58	;':'
  1211  007FF2  30                 	db	48	;'0'
  1212  007FF3  38                 	db	56	;'8'
  1213  007FF4  3A                 	db	58	;':'
  1214  007FF5  32                 	db	50	;'2'
  1215  007FF6  32                 	db	50	;'2'
  1216  007FF7  00                 	db	0
  1217  007FF8                     STR_26:
  1218  007FF8  28                 	db	40
  1219  007FF9  6E                 	db	110	;'n'
  1220  007FFA  75                 	db	117	;'u'
  1221  007FFB  6C                 	db	108	;'l'
  1222  007FFC  6C                 	db	108	;'l'
  1223  007FFD  29                 	db	41
  1224  007FFE  00                 	db	0
  1225  0000                     
  1226                           ; #config settings
  1227  007FFF  00                 	db	0	; dummy byte at the end
  1228  0000                     
  1229                           	psect	nvCOMRAM
  1230  000046                     __pnvCOMRAM:
  1231                           	opt stack 0
  1232  000046                     _timer0ReloadVal:
  1233                           	opt stack 0
  1234  000046                     	ds	2
  1235                           
  1236                           	psect	nvBANK0
  1237  0000FB                     __pnvBANK0:
  1238                           	opt stack 0
  1239  0000FB                     _TMR0_InterruptHandler:
  1240                           	opt stack 0
  1241  0000FB                     	ds	2
  1242  0000FD                     _cnt:
  1243                           	opt stack 0
  1244  0000FD                     	ds	2
  1245  0000FF                     _eusart1TxBufferRemaining:
  1246                           	opt stack 0
  1247  0000FF                     	ds	1
  1248  0000                     _ANSELE	set	3900
  1249  0000                     _ANSELB	set	3897
  1250  0000                     _ANSELC	set	3898
  1251  0000                     _ANSELD	set	3899
  1252  0000                     _ANSELA	set	3896
  1253  0000                     _ADCON0bits	set	4034
  1254  0000                     _ADRESH	set	4036
  1255  0000                     _ADRESL	set	4035
  1256  0000                     _ADCON2	set	4032
  1257  0000                     _ADCON1	set	4033
  1258  0000                     _ADCON0	set	4034
  1259  0000                     _T0CONbits	set	4053
  1260  0000                     _T0CON	set	4053
  1261  0000                     _TMR0L	set	4054
  1262  0000                     _TMR0H	set	4055
  1263  0000                     _EEDATA	set	4008
  1264  0000                     _EEADR	set	4009
  1265  0000                     _EECON2	set	4007
  1266  0000                     _EECON1bits	set	4006
  1267  0000                     _TABLAT	set	4085
  1268  0000                     _TBLPTRL	set	4086
  1269  0000                     _TBLPTRH	set	4087
  1270  0000                     _TBLPTRU	set	4088
  1271  0000                     _INTCON2bits	set	4081
  1272  0000                     _WPUB	set	3937
  1273  0000                     _TRISC	set	3988
  1274  0000                     _TRISB	set	3987
  1275  0000                     _TRISE	set	3990
  1276  0000                     _LATC	set	3979
  1277  0000                     _LATB	set	3978
  1278  0000                     _LATE	set	3981
  1279  0000                     _RCREG1	set	4014
  1280  0000                     _RCSTA1bits	set	4011
  1281  0000                     _TXREG1	set	4013
  1282  0000                     _SPBRGH1	set	4016
  1283  0000                     _SPBRG1	set	4015
  1284  0000                     _TXSTA1	set	4012
  1285  0000                     _RCSTA1	set	4011
  1286  0000                     _BAUDCON1	set	4024
  1287  0000                     _PIR1bits	set	3998
  1288  0000                     _PIE1bits	set	3997
  1289  0000                     _PIR2bits	set	4001
  1290  0000                     _PIE2bits	set	4000
  1291  0000                     _RCONbits	set	4048
  1292  0000                     _OSCTUNE	set	3995
  1293  0000                     _OSCCON2	set	4050
  1294  0000                     _OSCCON	set	4051
  1295  0000                     _LATAbits	set	3977
  1296  0000                     _LATDbits	set	3980
  1297  0000                     _INTCONbits	set	4082
  1298  0000                     _IOCB	set	3938
  1299  0000                     _PORTD	set	3971
  1300  0000                     _LATD	set	3980
  1301  0000                     _TRISD	set	3989
  1302  0000                     _LATA	set	3977
  1303  0000                     _TRISA	set	3986
  1304  0000                     _LATCbits	set	3979
  1305  0000                     _LATBbits	set	3978
  1306                           
  1307                           	psect	cinit
  1308  0019EE                     __pcinit:
  1309                           	opt stack 0
  1310  0019EE                     start_initialization:
  1311                           	opt stack 0
  1312  0019EE                     __initialization:
  1313                           	opt stack 0
  1314                           
  1315                           ; Initialize objects allocated to BANK0 (16 bytes)
  1316                           ; load TBLPTR registers with __pidataBANK0
  1317  0019EE  0E9E               	movlw	low __pidataBANK0
  1318  0019F0  6EF6               	movwf	tblptrl,c
  1319  0019F2  0E23               	movlw	high __pidataBANK0
  1320  0019F4  6EF7               	movwf	tblptrh,c
  1321  0019F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1322  0019F8  6EF8               	movwf	tblptru,c
  1323  0019FA  EE00  F0EB         	lfsr	0,__pdataBANK0
  1324  0019FE  EE10 F010          	lfsr	1,16
  1325  001A02                     copy_data0:
  1326  001A02  0009               	tblrd		*+
  1327  001A04  CFF5 FFEE          	movff	tablat,postinc0
  1328  001A08  50E5               	movf	postdec1,w,c
  1329  001A0A  50E1               	movf	fsr1l,w,c
  1330  001A0C  E1FA               	bnz	copy_data0
  1331                           
  1332                           ; Initialize objects allocated to COMRAM (4 bytes)
  1333                           ; load TBLPTR registers with __pidataCOMRAM
  1334  001A0E  0EEE               	movlw	low __pidataCOMRAM
  1335  001A10  6EF6               	movwf	tblptrl,c
  1336  001A12  0E23               	movlw	high __pidataCOMRAM
  1337  001A14  6EF7               	movwf	tblptrh,c
  1338  001A16  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1339  001A18  6EF8               	movwf	tblptru,c
  1340  001A1A  EE00  F042         	lfsr	0,__pdataCOMRAM
  1341  001A1E  EE10 F004          	lfsr	1,4
  1342  001A22                     copy_data1:
  1343  001A22  0009               	tblrd		*+
  1344  001A24  CFF5 FFEE          	movff	tablat,postinc0
  1345  001A28  50E5               	movf	postdec1,w,c
  1346  001A2A  50E1               	movf	fsr1l,w,c
  1347  001A2C  E1FA               	bnz	copy_data1
  1348                           
  1349                           ; Clear objects allocated to BANK1 (174 bytes)
  1350  001A2E  EE01  F000         	lfsr	0,__pbssBANK1
  1351  001A32  0EAE               	movlw	174
  1352  001A34                     clear_0:
  1353  001A34  6AEE               	clrf	postinc0,c
  1354  001A36  06E8               	decf	wreg,f,c
  1355  001A38  E1FD               	bnz	clear_0
  1356                           
  1357                           ; Clear objects allocated to BANK0 (56 bytes)
  1358  001A3A  EE00  F0B3         	lfsr	0,__pbssBANK0
  1359  001A3E  0E38               	movlw	56
  1360  001A40                     clear_1:
  1361  001A40  6AEE               	clrf	postinc0,c
  1362  001A42  06E8               	decf	wreg,f,c
  1363  001A44  E1FD               	bnz	clear_1
  1364                           
  1365                           ; Clear objects allocated to COMRAM (18 bytes)
  1366  001A46  EE00  F030         	lfsr	0,__pbssCOMRAM
  1367  001A4A  0E12               	movlw	18
  1368  001A4C                     clear_2:
  1369  001A4C  6AEE               	clrf	postinc0,c
  1370  001A4E  06E8               	decf	wreg,f,c
  1371  001A50  E1FD               	bnz	clear_2
  1372  001A52                     end_of_initialization:
  1373                           	opt stack 0
  1374  001A52                     __end_of__initialization:
  1375                           	opt stack 0
  1376  001A52  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1377  001A54  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1378  001A56  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1379  001A58  6EF8               	movwf	tblptru,c
  1380  001A5A  0100               	movlb	0
  1381  001A5C  EF52  F00E         	goto	_main	;jump to C main() function
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	bssCOMRAM
  1392  000030                     __pbssCOMRAM:
  1393                           	opt stack 0
  1394  000030                     _numOfValidateSamples:
  1395                           	opt stack 0
  1396  000030                     	ds	4
  1397  000034                     TMR0_ISR@CountCallBack:
  1398                           	opt stack 0
  1399  000034                     	ds	2
  1400  000036                     _eusart1RxCount:
  1401                           	opt stack 0
  1402  000036                     	ds	1
  1403  000037                     _eusart1RxTail:
  1404                           	opt stack 0
  1405  000037                     	ds	1
  1406  000038                     _eusart1RxHead:
  1407                           	opt stack 0
  1408  000038                     	ds	1
  1409  000039                     _eusart1TxTail:
  1410                           	opt stack 0
  1411  000039                     	ds	1
  1412  00003A                     _eusart1TxHead:
  1413                           	opt stack 0
  1414  00003A                     	ds	1
  1415  00003B                     _TimerKeepAliveFlag:
  1416                           	opt stack 0
  1417  00003B                     	ds	1
  1418  00003C                     _TimerSamplingFlag:
  1419                           	opt stack 0
  1420  00003C                     	ds	1
  1421  00003D                     _TimerOneSecFlag:
  1422                           	opt stack 0
  1423  00003D                     	ds	1
  1424  00003E                     _numOfReadSamples:
  1425                           	opt stack 0
  1426  00003E                     	ds	4
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           
  1436                           	psect	dataCOMRAM
  1437  000042                     __pdataCOMRAM:
  1438                           	opt stack 0
  1439  000042                     _writeAddress:
  1440                           	opt stack 0
  1441  000042                     	ds	4
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           
  1451                           	psect	bssBANK0
  1452  0000B3                     __pbssBANK0:
  1453                           	opt stack 0
  1454  0000B3                     _rxMsgData:
  1455                           	opt stack 0
  1456  0000B3                     	ds	20
  1457  0000C7                     _mcuRunTimeIn5SecTicks:
  1458                           	opt stack 0
  1459  0000C7                     	ds	4
  1460  0000CB                     _errno:
  1461                           	opt stack 0
  1462  0000CB                     	ds	2
  1463  0000CD                     _sampleCount:
  1464                           	opt stack 0
  1465  0000CD                     	ds	2
  1466  0000CF                     _count:
  1467                           	opt stack 0
  1468  0000CF                     	ds	2
  1469  0000D1                     _isReWriteDone:
  1470                           	opt stack 0
  1471  0000D1                     	ds	1
  1472  0000D2                     _msgCount:
  1473                           	opt stack 0
  1474  0000D2                     	ds	1
  1475  0000D3                     _cState:
  1476                           	opt stack 0
  1477  0000D3                     	ds	1
  1478  0000D4                     _channel:
  1479                           	opt stack 0
  1480  0000D4                     	ds	1
  1481  0000D5                     _adcSampleMode:
  1482                           	opt stack 0
  1483  0000D5                     	ds	1
  1484  0000D6                     _conversionFormat:
  1485                           	opt stack 0
  1486  0000D6                     	ds	1
  1487  0000D7                     _rxMsgQueue:
  1488                           	opt stack 0
  1489  0000D7                     	ds	20
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	dataBANK0
  1500  0000EB                     __pdataBANK0:
  1501                           	opt stack 0
  1502  0000EB                     _groupsArray:
  1503                           	opt stack 0
  1504  0000EB                     	ds	12
  1505  0000F7                     _readAddress:
  1506                           	opt stack 0
  1507  0000F7                     	ds	4
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           
  1517                           	psect	bssBANK1
  1518  000100                     __pbssBANK1:
  1519                           	opt stack 0
  1520  000100                     _eusart1TxBuffer:
  1521                           	opt stack 0
  1522  000100                     	ds	70
  1523  000146                     _eusart1RxBuffer:
  1524                           	opt stack 0
  1525  000146                     	ds	40
  1526  00016E                     _sampleArray:
  1527                           	opt stack 0
  1528  00016E                     	ds	64
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           
  1538                           	psect	cstackBANK1
  1539  0001AE                     __pcstackBANK1:
  1540                           	opt stack 0
  1541  0001AE                     ??_AdcConvert:
  1542                           
  1543                           ; 1 bytes @ 0x0
  1544  0001AE                     	ds	2
  1545  0001B0                     AdcConvert@_adcResult:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x2
  1549  0001B0                     	ds	2
  1550  0001B2                     AdcConvert@_adcResult_332:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x4
  1554  0001B2                     	ds	2
  1555  0001B4                     _AdcConvert$3340:
  1556                           	opt stack 0
  1557                           
  1558                           ; 3 bytes @ 0x6
  1559  0001B4                     	ds	3
  1560  0001B7                     AdcConvert@adcRes:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x9
  1564  0001B7                     	ds	2
  1565  0001B9                     AdcConvert@idx:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0xB
  1569  0001B9                     	ds	1
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	cstackBANK0
  1580  000060                     __pcstackBANK0:
  1581                           	opt stack 0
  1582  000060                     ??_FlashSampleWrite:
  1583  000060                     ??___ftdiv:
  1584  000060                     SendUartSystemInitMessage@dest:
  1585                           	opt stack 0
  1586  000060                     PrintHelpScreen@dest:
  1587                           	opt stack 0
  1588                           
  1589                           ; 50 bytes @ 0x0
  1590  000060                     	ds	2
  1591  000062                     FlashSampleWrite@rotateLeft:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x2
  1595  000062                     	ds	1
  1596  000063                     ___ftdiv@cntr:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x3
  1600  000063                     	ds	1
  1601  000064                     ___ftdiv@f3:
  1602                           	opt stack 0
  1603                           
  1604                           ; 3 bytes @ 0x4
  1605  000064                     	ds	3
  1606  000067                     ___ftdiv@exp:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x7
  1610  000067                     	ds	1
  1611  000068                     ___ftdiv@sign:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x8
  1615  000068                     	ds	1
  1616  000069                     ?___ftmul:
  1617                           	opt stack 0
  1618  000069                     ___ftmul@f1:
  1619                           	opt stack 0
  1620                           
  1621                           ; 3 bytes @ 0x9
  1622  000069                     	ds	3
  1623  00006C                     ___ftmul@f2:
  1624                           	opt stack 0
  1625                           
  1626                           ; 3 bytes @ 0xC
  1627  00006C                     	ds	3
  1628  00006F                     ??___ftmul:
  1629                           
  1630                           ; 1 bytes @ 0xF
  1631  00006F                     	ds	3
  1632  000072                     ___ftmul@exp:
  1633                           	opt stack 0
  1634                           
  1635                           ; 1 bytes @ 0x12
  1636  000072                     	ds	1
  1637  000073                     ___ftmul@f3_as_product:
  1638                           	opt stack 0
  1639                           
  1640                           ; 3 bytes @ 0x13
  1641  000073                     	ds	3
  1642  000076                     ___ftmul@cntr:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x16
  1646  000076                     	ds	1
  1647  000077                     ___ftmul@sign:
  1648                           	opt stack 0
  1649                           
  1650                           ; 1 bytes @ 0x17
  1651  000077                     	ds	1
  1652  000078                     ??_CheckFlashPrecentage:
  1653  000078                     ?___ftadd:
  1654                           	opt stack 0
  1655  000078                     ?___fttol:
  1656                           	opt stack 0
  1657  000078                     ___ftadd@f1:
  1658                           	opt stack 0
  1659  000078                     ___fttol@f1:
  1660                           	opt stack 0
  1661                           
  1662                           ; 3 bytes @ 0x18
  1663  000078                     	ds	3
  1664  00007B                     ___ftadd@f2:
  1665                           	opt stack 0
  1666                           
  1667                           ; 3 bytes @ 0x1B
  1668  00007B                     	ds	1
  1669  00007C                     ??___fttol:
  1670  00007C                     CheckFlashPrecentage@precentage:
  1671                           	opt stack 0
  1672                           
  1673                           ; 3 bytes @ 0x1C
  1674  00007C                     	ds	2
  1675  00007E                     ??___ftadd:
  1676                           
  1677                           ; 1 bytes @ 0x1E
  1678  00007E                     	ds	3
  1679  000081                     ___ftadd@sign:
  1680                           	opt stack 0
  1681  000081                     ___fttol@sign1:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0x21
  1685  000081                     	ds	1
  1686  000082                     ___ftadd@exp2:
  1687                           	opt stack 0
  1688  000082                     ___fttol@lval:
  1689                           	opt stack 0
  1690                           
  1691                           ; 4 bytes @ 0x22
  1692  000082                     	ds	1
  1693  000083                     ___ftadd@exp1:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x23
  1697  000083                     	ds	1
  1698  000084                     ?___ftsub:
  1699                           	opt stack 0
  1700  000084                     ?_eval_poly:
  1701                           	opt stack 0
  1702  000084                     ___ftsub@f1:
  1703                           	opt stack 0
  1704  000084                     eval_poly@x:
  1705                           	opt stack 0
  1706                           
  1707                           ; 3 bytes @ 0x24
  1708  000084                     	ds	2
  1709  000086                     ___fttol@exp1:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0x26
  1713  000086                     	ds	1
  1714  000087                     ?___altoft:
  1715                           	opt stack 0
  1716  000087                     eval_poly@d:
  1717                           	opt stack 0
  1718  000087                     ___ftsub@f2:
  1719                           	opt stack 0
  1720  000087                     ___altoft@c:
  1721                           	opt stack 0
  1722                           
  1723                           ; 4 bytes @ 0x27
  1724  000087                     	ds	2
  1725  000089                     eval_poly@n:
  1726                           	opt stack 0
  1727                           
  1728                           ; 2 bytes @ 0x29
  1729  000089                     	ds	2
  1730  00008B                     ??_eval_poly:
  1731  00008B                     ??___altoft:
  1732                           
  1733                           ; 1 bytes @ 0x2B
  1734  00008B                     	ds	2
  1735  00008D                     eval_poly@res:
  1736                           	opt stack 0
  1737                           
  1738                           ; 3 bytes @ 0x2D
  1739  00008D                     	ds	2
  1740  00008F                     ___altoft@exp:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x2F
  1744  00008F                     	ds	1
  1745  000090                     ?_log:
  1746                           	opt stack 0
  1747  000090                     ?_ldexp:
  1748                           	opt stack 0
  1749  000090                     ___altoft@sign:
  1750                           	opt stack 0
  1751  000090                     ldexp@value:
  1752                           	opt stack 0
  1753  000090                     log@x:
  1754                           	opt stack 0
  1755                           
  1756                           ; 3 bytes @ 0x30
  1757  000090                     	ds	1
  1758  000091                     ?_floor:
  1759                           	opt stack 0
  1760  000091                     floor@x:
  1761                           	opt stack 0
  1762                           
  1763                           ; 3 bytes @ 0x31
  1764  000091                     	ds	2
  1765  000093                     ldexp@newexp:
  1766                           	opt stack 0
  1767  000093                     log@exponent:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x33
  1771  000093                     	ds	1
  1772  000094                     floor@i:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x34
  1776  000094                     	ds	1
  1777  000095                     ??_ldexp:
  1778                           
  1779                           ; 1 bytes @ 0x35
  1780  000095                     	ds	2
  1781  000097                     floor@expon:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x37
  1785  000097                     	ds	2
  1786  000099                     ?_exp:
  1787                           	opt stack 0
  1788  000099                     exp@x:
  1789                           	opt stack 0
  1790                           
  1791                           ; 3 bytes @ 0x39
  1792  000099                     	ds	3
  1793  00009C                     _exp$3343:
  1794                           	opt stack 0
  1795                           
  1796                           ; 3 bytes @ 0x3C
  1797  00009C                     	ds	3
  1798  00009F                     exp@exponent:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x3F
  1802  00009F                     	ds	2
  1803  0000A1                     exp@sign:
  1804                           	opt stack 0
  1805                           
  1806                           ; 1 bytes @ 0x41
  1807  0000A1                     	ds	1
  1808  0000A2                     ?_pow:
  1809                           	opt stack 0
  1810  0000A2                     pow@x:
  1811                           	opt stack 0
  1812                           
  1813                           ; 3 bytes @ 0x42
  1814  0000A2                     	ds	3
  1815  0000A5                     pow@y:
  1816                           	opt stack 0
  1817                           
  1818                           ; 3 bytes @ 0x45
  1819  0000A5                     	ds	3
  1820  0000A8                     _pow$3341:
  1821                           	opt stack 0
  1822                           
  1823                           ; 3 bytes @ 0x48
  1824  0000A8                     	ds	3
  1825  0000AB                     _pow$3342:
  1826                           	opt stack 0
  1827                           
  1828                           ; 3 bytes @ 0x4B
  1829  0000AB                     	ds	3
  1830  0000AE                     pow@sign:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x4E
  1834  0000AE                     	ds	1
  1835  0000AF                     pow@yi:
  1836                           	opt stack 0
  1837                           
  1838                           ; 4 bytes @ 0x4F
  1839  0000AF                     	ds	4
  1840                           tblptru	equ	0xFF8
  1841                           tblptrh	equ	0xFF7
  1842                           tblptrl	equ	0xFF6
  1843                           tablat	equ	0xFF5
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1l	equ	0xFE1
  1848                           
  1849                           	psect	cstackCOMRAM
  1850  000001                     __pcstackCOMRAM:
  1851                           	opt stack 0
  1852  000001                     ?___lwmod:
  1853                           	opt stack 0
  1854  000001                     ___lwmod@dividend:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x0
  1858  000001                     	ds	2
  1859  000003                     ___lwmod@divisor:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x2
  1863  000003                     	ds	2
  1864  000005                     ___lwmod@counter:
  1865                           	opt stack 0
  1866                           
  1867                           ; 1 bytes @ 0x4
  1868  000005                     	ds	1
  1869  000006                     ??_INTERRUPT_InterruptManager:
  1870                           
  1871                           ; 1 bytes @ 0x5
  1872  000006                     	ds	18
  1873  000018                     ??_EUSART1_Read:
  1874  000018                     ??_BlinkErrorLeds:
  1875  000018                     ??_BlinkOkLeds:
  1876  000018                     ??_keepAliveSignalLed:
  1877  000018                     ?_ADC_GetConversion:
  1878                           	opt stack 0
  1879  000018                     ?_sprintf:
  1880                           	opt stack 0
  1881  000018                     ?___wmul:
  1882                           	opt stack 0
  1883  000018                     ?___ftpack:
  1884                           	opt stack 0
  1885  000018                     ?_frexp:
  1886                           	opt stack 0
  1887  000018                     ?___ftneg:
  1888                           	opt stack 0
  1889  000018                     ?___llmod:
  1890                           	opt stack 0
  1891  000018                     InitAdcApplicationMgr@channel:
  1892                           	opt stack 0
  1893  000018                     SwSpi_Data_Pin@cPinMode:
  1894                           	opt stack 0
  1895  000018                     SwSpi_Clk_Pin@cPinMode:
  1896                           	opt stack 0
  1897  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1898                           	opt stack 0
  1899  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1900                           	opt stack 0
  1901  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1902                           	opt stack 0
  1903  000018                     EUSART1_Write@txData:
  1904                           	opt stack 0
  1905  000018                     toupper@c:
  1906                           	opt stack 0
  1907  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1908                           	opt stack 0
  1909  000018                     sprintf@sp:
  1910                           	opt stack 0
  1911  000018                     ___wmul@multiplier:
  1912                           	opt stack 0
  1913  000018                     memset@p1:
  1914                           	opt stack 0
  1915  000018                     ___ftpack@arg:
  1916                           	opt stack 0
  1917  000018                     ___ftge@ff1:
  1918                           	opt stack 0
  1919  000018                     ___ftneg@f1:
  1920                           	opt stack 0
  1921  000018                     frexp@value:
  1922                           	opt stack 0
  1923  000018                     FLASH_EraseBlock@baseAddr:
  1924                           	opt stack 0
  1925  000018                     make8@data:
  1926                           	opt stack 0
  1927  000018                     ___llmod@dividend:
  1928                           	opt stack 0
  1929                           
  1930                           ; 4 bytes @ 0x17
  1931  000018                     	ds	1
  1932  000019                     SwSpi_Data_Pin@phrType:
  1933                           	opt stack 0
  1934  000019                     SwSpi_Clk_Pin@phrType:
  1935                           	opt stack 0
  1936  000019                     SwSpi_Set_CE_Pin@phrType:
  1937                           	opt stack 0
  1938  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1939                           	opt stack 0
  1940  000019                     UART_Write_Text@text:
  1941                           	opt stack 0
  1942  000019                     EUSART1_Read@readValue:
  1943                           	opt stack 0
  1944                           
  1945                           ; 2 bytes @ 0x18
  1946  000019                     	ds	1
  1947  00001A                     ??_ADC_GetConversion:
  1948  00001A                     ??_TMR0_Initialize:
  1949  00001A                     SWSPI_DAC_send_bits@data:
  1950                           	opt stack 0
  1951  00001A                     SWSPI_Synth_send_bits@data:
  1952                           	opt stack 0
  1953  00001A                     sprintf@f:
  1954                           	opt stack 0
  1955  00001A                     ___wmul@multiplicand:
  1956                           	opt stack 0
  1957  00001A                     memset@c:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x19
  1961  00001A                     	ds	1
  1962  00001B                     SWSPI_DAC_send_bits@count:
  1963                           	opt stack 0
  1964  00001B                     SWSPI_Synth_send_bits@count:
  1965                           	opt stack 0
  1966  00001B                     ___ftpack@exp:
  1967                           	opt stack 0
  1968  00001B                     BlinkErrorLeds@idx:
  1969                           	opt stack 0
  1970  00001B                     BlinkOkLeds@idx:
  1971                           	opt stack 0
  1972  00001B                     UART_Write_Text@i:
  1973                           	opt stack 0
  1974  00001B                     frexp@eptr:
  1975                           	opt stack 0
  1976  00001B                     ___ftge@ff2:
  1977                           	opt stack 0
  1978                           
  1979                           ; 3 bytes @ 0x1A
  1980  00001B                     	ds	1
  1981  00001C                     SWSPI_DAC_send_bits@phrType:
  1982                           	opt stack 0
  1983  00001C                     SWSPI_Synth_send_bits@phrType:
  1984                           	opt stack 0
  1985  00001C                     FLASH_EraseBlock@GIEBitValue:
  1986                           	opt stack 0
  1987  00001C                     ADC_GetConversion@channel:
  1988                           	opt stack 0
  1989  00001C                     make8@dataLocation:
  1990                           	opt stack 0
  1991  00001C                     ___ftpack@sign:
  1992                           	opt stack 0
  1993  00001C                     ___wmul@product:
  1994                           	opt stack 0
  1995  00001C                     memset@n:
  1996                           	opt stack 0
  1997  00001C                     ___llmod@divisor:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0x1B
  2001  00001C                     	ds	1
  2002  00001D                     ??_make8:
  2003  00001D                     ??___ftpack:
  2004  00001D                     ??_frexp:
  2005  00001D                     BlinkErrorLeds@state:
  2006                           	opt stack 0
  2007  00001D                     BlinkOkLeds@state:
  2008                           	opt stack 0
  2009  00001D                     FLASH_WriteBlock@writeAddr:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x1C
  2013  00001D                     	ds	1
  2014  00001E                     ??___ftge:
  2015  00001E                     sprintf@flag:
  2016                           	opt stack 0
  2017  00001E                     memset@p:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x1D
  2021  00001E                     	ds	1
  2022  00001F                     sprintf@ap:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x1E
  2026  00001F                     	ds	1
  2027  000020                     ?___awtoft:
  2028                           	opt stack 0
  2029  000020                     ?___lltoft:
  2030                           	opt stack 0
  2031  000020                     ?___lwtoft:
  2032                           	opt stack 0
  2033  000020                     ___llmod@counter:
  2034                           	opt stack 0
  2035  000020                     ZeroArray@array:
  2036                           	opt stack 0
  2037  000020                     ___awtoft@c:
  2038                           	opt stack 0
  2039  000020                     ___lwtoft@c:
  2040                           	opt stack 0
  2041  000020                     ___lltoft@c:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x1F
  2045  000020                     	ds	1
  2046  000021                     sprintf@c:
  2047                           	opt stack 0
  2048  000021                     FLASH_WriteBlock@flashWrBufPtr:
  2049                           	opt stack 0
  2050  000021                     SWSPI_send_word@data:
  2051                           	opt stack 0
  2052                           
  2053                           ; 4 bytes @ 0x20
  2054  000021                     	ds	1
  2055  000022                     ZeroArray@size:
  2056                           	opt stack 0
  2057  000022                     sprintf@cp:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x21
  2061  000022                     	ds	1
  2062  000023                     ??_FLASH_WriteBlock:
  2063  000023                     ___awtoft@sign:
  2064                           	opt stack 0
  2065                           
  2066                           ; 1 bytes @ 0x22
  2067  000023                     	ds	1
  2068  000024                     ??___lltoft:
  2069  000024                     readUartByte@c2:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x23
  2073  000024                     	ds	1
  2074  000025                     readUartByte@c1:
  2075                           	opt stack 0
  2076  000025                     SWSPI_send_word@dataSize:
  2077                           	opt stack 0
  2078                           
  2079                           ; 1 bytes @ 0x24
  2080  000025                     	ds	1
  2081  000026                     readUartByte@chRec:
  2082                           	opt stack 0
  2083  000026                     SWSPI_send_word@datac:
  2084                           	opt stack 0
  2085                           
  2086                           ; 1 bytes @ 0x25
  2087  000026                     	ds	1
  2088  000027                     SWSPI_send_word@idx:
  2089                           	opt stack 0
  2090  000027                     FLASH_WriteBlock@blockStartAddr:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0x26
  2094  000027                     	ds	1
  2095  000028                     ___lltoft@exp:
  2096                           	opt stack 0
  2097                           
  2098                           ; 1 bytes @ 0x27
  2099  000028                     	ds	1
  2100  000029                     ?___ftdiv:
  2101                           	opt stack 0
  2102  000029                     SWSPI_send_word@phrType:
  2103                           	opt stack 0
  2104  000029                     ___ftdiv@f1:
  2105                           	opt stack 0
  2106                           
  2107                           ; 3 bytes @ 0x28
  2108  000029                     	ds	1
  2109  00002A                     ??_PLLInitialize:
  2110                           
  2111                           ; 1 bytes @ 0x29
  2112  00002A                     	ds	1
  2113  00002B                     FLASH_WriteBlock@GIEBitValue:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x2A
  2117  00002B                     	ds	1
  2118  00002C                     FLASH_WriteBlock@i:
  2119                           	opt stack 0
  2120  00002C                     PLLInitialize@idx:
  2121                           	opt stack 0
  2122  00002C                     ___ftdiv@f2:
  2123                           	opt stack 0
  2124                           
  2125                           ; 3 bytes @ 0x2B
  2126  00002C                     	ds	1
  2127  00002D                     FlashSampleWrite@sampleData:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x2C
  2131  00002D                     	ds	1
  2132  00002E                     PLLInitialize@idx_810:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x2D
  2136  00002E                     	ds	1
  2137  00002F                     FlashSampleWrite@channelNum:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x2E
  2141  00002F                     	ds	1
  2142  000030                     tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postdec1	equ	0xFE5
  2149                           fsr1l	equ	0xFE1
  2150                           
  2151                           ; 1 bytes @ 0x2F
  2152 ;;
  2153 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2154 ;;
  2155 ;; *************** function _main *****************
  2156 ;; Defined at:
  2157 ;;		line 13 in file "main.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2171 ;;      Params:         0       0       0       0       0       0       0
  2172 ;;      Locals:         0       0       0       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0
  2174 ;;      Totals:         0       0       0       0       0       0       0
  2175 ;;Total ram usage:        0 bytes
  2176 ;; Hardware stack levels required when called:    9
  2177 ;; This function calls:
  2178 ;;		_AdcConvert
  2179 ;;		_BlinkErrorLeds
  2180 ;;		_BlinkOkLeds
  2181 ;;		_CheckFlashPrecentage
  2182 ;;		_InitSystemApplicationManagers
  2183 ;;		_PrintHelpScreen
  2184 ;;		_SendUartSystemInitMessage
  2185 ;;		_SetMcuRunTime
  2186 ;;		_SetMcuSystem
  2187 ;;		_keepAliveSignalLed
  2188 ;;		_readUartByte
  2189 ;; This function is called by:
  2190 ;;		Startup code after reset
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text0
  2195  001CA4                     __ptext0:
  2196                           	opt stack 0
  2197  001CA4                     _main:
  2198                           	opt stack 22
  2199                           
  2200                           ;main.c: 16: SetMcuSystem();
  2201                           
  2202                           ;incstack = 0
  2203  001CA4  ECED  F011         	call	_SetMcuSystem	;wreg free
  2204                           
  2205                           ;main.c: 19: InitSystemApplicationManagers();
  2206  001CA8  EC97  F011         	call	_InitSystemApplicationManagers	;wreg free
  2207                           
  2208                           ;main.c: 22: SendUartSystemInitMessage();
  2209  001CAC  EC05  F009         	call	_SendUartSystemInitMessage	;wreg free
  2210                           
  2211                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2212  001CB0  0E03               	movlw	3
  2213  001CB2  EC98  F00D         	call	_BlinkOkLeds
  2214                           
  2215                           ;main.c: 27: PrintHelpScreen();
  2216  001CB6  EC70  F000         	call	_PrintHelpScreen	;wreg free
  2217  001CBA                     
  2218                           ;main.c: 29: {
  2219                           ;main.c: 30: readUartByte();
  2220  001CBA  EC75  F00C         	call	_readUartByte	;wreg free
  2221                           
  2222                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2223  001CBE  043D               	decf	_TimerOneSecFlag,w,c	;volatile
  2224  001CC0  A4D8               	btfss	status,2,c
  2225  001CC2  D005               	goto	l1421
  2226                           
  2227                           ;main.c: 33: {
  2228                           ;main.c: 35: SetMcuRunTime();
  2229  001CC4  EC51  F00F         	call	_SetMcuRunTime	;wreg free
  2230                           
  2231                           ;main.c: 36: TimerOneSecFlag = 0;
  2232  001CC8  0E00               	movlw	0
  2233  001CCA  6E3D               	movwf	_TimerOneSecFlag,c	;volatile
  2234                           
  2235                           ;main.c: 37: }
  2236  001CCC  D7F6               	goto	l1420
  2237  001CCE                     l1421:
  2238                           
  2239                           ;main.c: 38: else if (TimerSamplingFlag == 1)
  2240  001CCE  043C               	decf	_TimerSamplingFlag,w,c	;volatile
  2241  001CD0  A4D8               	btfss	status,2,c
  2242  001CD2  D00F               	goto	l1423
  2243                           
  2244                           ;main.c: 39: {
  2245                           ;main.c: 40: keepAliveSignalLed();
  2246  001CD4  ECA4  F011         	call	_keepAliveSignalLed	;wreg free
  2247                           
  2248                           ;main.c: 42: if(1 == CheckFlashPrecentage())
  2249  001CD8  ECF1  F00A         	call	_CheckFlashPrecentage	;wreg free
  2250  001CDC  06E8               	decf	wreg,f,c
  2251  001CDE  A4D8               	btfss	status,2,c
  2252  001CE0  D003               	goto	l1424
  2253                           
  2254                           ;main.c: 43: {
  2255                           ;main.c: 44: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  2256  001CE2  0E04               	movlw	4
  2257  001CE4  ECC7  F00D         	call	_BlinkErrorLeds
  2258  001CE8                     l1424:
  2259                           
  2260                           ;main.c: 45: }
  2261                           ;main.c: 48: AdcConvert();
  2262  001CE8  EC7A  F002         	call	_AdcConvert	;wreg free
  2263                           
  2264                           ;main.c: 50: TimerSamplingFlag = 0;
  2265  001CEC  0E00               	movlw	0
  2266  001CEE  6E3C               	movwf	_TimerSamplingFlag,c	;volatile
  2267                           
  2268                           ;main.c: 51: }
  2269  001CF0  D7E4               	goto	l1420
  2270  001CF2                     l1423:
  2271                           
  2272                           ;main.c: 52: else if (TimerKeepAliveFlag == 1)
  2273  001CF2  043B               	decf	_TimerKeepAliveFlag,w,c	;volatile
  2274  001CF4  A4D8               	btfss	status,2,c
  2275  001CF6  D7E1               	goto	l1420
  2276                           
  2277                           ;main.c: 53: {
  2278                           ;main.c: 55: TimerKeepAliveFlag = 0;
  2279  001CF8  0E00               	movlw	0
  2280  001CFA  6E3B               	movwf	_TimerKeepAliveFlag,c	;volatile
  2281  001CFC  D7DE               	goto	l1420
  2282  001CFE                     __end_of_main:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _readUartByte *****************
  2295 ;; Defined at:
  2296 ;;		line 24 in file "EusartApp.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  chRec           1   37[COMRAM] unsigned char 
  2301 ;;  c1              1   36[COMRAM] unsigned char 
  2302 ;;  c2              1   35[COMRAM] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2312 ;;      Params:         0       0       0       0       0       0       0
  2313 ;;      Locals:         3       0       0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0
  2315 ;;      Totals:         3       0       0       0       0       0       0
  2316 ;;Total ram usage:        3 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    6
  2319 ;; This function calls:
  2320 ;;		_EUSART1_Read
  2321 ;;		_InitRxMessageParams
  2322 ;;		_toupper
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text1
  2329  0018EA                     __ptext1:
  2330                           	opt stack 0
  2331  0018EA                     _readUartByte:
  2332                           	opt stack 24
  2333                           
  2334                           ;EusartApp.c: 27: uint8_t chRec = (0), c1 = (0), c2 = (0);
  2335                           
  2336                           ;incstack = 0
  2337  0018EA  0E00               	movlw	0
  2338  0018EC  6E26               	movwf	readUartByte@chRec,c
  2339  0018EE  0E00               	movlw	0
  2340  0018F0  6E25               	movwf	readUartByte@c1,c
  2341  0018F2  0E00               	movlw	0
  2342  0018F4  6E24               	movwf	readUartByte@c2,c
  2343                           
  2344                           ;EusartApp.c: 28: switch(cState)
  2345  0018F6  D02F               	goto	l166
  2346  0018F8                     
  2347                           ;EusartApp.c: 32: InitRxMessageParams();
  2348  0018F8  EC6E  F011         	call	_InitRxMessageParams	;wreg free
  2349                           
  2350                           ;EusartApp.c: 33: cState = FIND_MAGIC;
  2351  0018FC  0E01               	movlw	1
  2352  0018FE  0100               	movlb	0	; () banked
  2353  001900  6FD3               	movwf	_cState& (0+255),b
  2354                           
  2355                           ;EusartApp.c: 34: break;
  2356  001902  0012               	return	
  2357  001904                     
  2358                           ; BSR set to: 0
  2359                           ;EusartApp.c: 38: chRec = EUSART1_Read();
  2360                           
  2361                           ; BSR set to: 0
  2362  001904  EC73  F00F         	call	_EUSART1_Read	;wreg free
  2363  001908  6E26               	movwf	readUartByte@chRec,c
  2364                           
  2365                           ;EusartApp.c: 40: if(chRec == (0x24))
  2366  00190A  0E24               	movlw	36
  2367  00190C  1826               	xorwf	readUartByte@chRec,w,c
  2368  00190E  A4D8               	btfss	status,2,c
  2369  001910  0012               	return	
  2370                           
  2371                           ;EusartApp.c: 41: {
  2372                           ;EusartApp.c: 42: cState = READ_DATA;
  2373  001912  0E02               	movlw	2
  2374  001914  0100               	movlb	0	; () banked
  2375  001916  6FD3               	movwf	_cState& (0+255),b
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;EusartApp.c: 43: }
  2379                           ;EusartApp.c: 44: break;
  2380  001918  0012               	return	
  2381  00191A                     
  2382                           ; BSR set to: 0
  2383                           ;EusartApp.c: 48: rxMsgQueue[msgCount++] = chRec;
  2384                           
  2385                           ; BSR set to: 0
  2386  00191A  51D2               	movf	_msgCount& (0+255),w,b
  2387  00191C  0D01               	mullw	1
  2388  00191E  0ED7               	movlw	low _rxMsgQueue
  2389  001920  24F3               	addwf	prodl,w,c
  2390  001922  6ED9               	movwf	fsr2l,c
  2391  001924  0E00               	movlw	high _rxMsgQueue
  2392  001926  20F4               	addwfc	prodh,w,c
  2393  001928  6EDA               	movwf	fsr2h,c
  2394  00192A  C026  FFDF         	movff	readUartByte@chRec,indf2
  2395                           
  2396                           ; BSR set to: 0
  2397  00192E  2BD2               	incf	_msgCount& (0+255),f,b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;EusartApp.c: 49: if(chRec == (0x14))
  2401  001930  0E14               	movlw	20
  2402  001932  1826               	xorwf	readUartByte@chRec,w,c
  2403  001934  A4D8               	btfss	status,2,c
  2404  001936  0012               	return	
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;EusartApp.c: 50: {
  2408                           ;EusartApp.c: 51: cState = JUMP_FUNCTION;
  2409  001938  0E04               	movlw	4
  2410  00193A  6FD3               	movwf	_cState& (0+255),b
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;EusartApp.c: 52: }
  2414                           ;EusartApp.c: 53: break;
  2415  00193C  0012               	return	
  2416  00193E                     
  2417                           ; BSR set to: 0
  2418                           ;EusartApp.c: 56: c1 = toupper(rxMsgQueue[0]);
  2419                           
  2420                           ; BSR set to: 0
  2421  00193E  51D7               	movf	_rxMsgQueue& (0+255),w,b
  2422  001940  ECBB  F011         	call	_toupper
  2423  001944  6E25               	movwf	readUartByte@c1,c
  2424                           
  2425                           ;EusartApp.c: 66: }
  2426                           
  2427                           ;EusartApp.c: 65: break;
  2428                           
  2429                           ;EusartApp.c: 64: case 'T':
  2430                           
  2431                           ;EusartApp.c: 62: break;
  2432                           
  2433                           ;EusartApp.c: 59: {
  2434                           ;EusartApp.c: 60: case 'Q':
  2435                           
  2436                           ;EusartApp.c: 58: switch(c1)
  2437  001946  5025               	movf	readUartByte@c1,w,c
  2438                           
  2439                           ; Switch size 1, requested type "space"
  2440                           ; Number of cases is 2, Range of values is 81 to 84
  2441                           ; switch strategies available:
  2442                           ; Name         Instructions Cycles
  2443                           ; simple_byte            7     4 (average)
  2444                           ;	Chosen strategy is simple_byte
  2445  001948  0A51               	xorlw	81	; case 81
  2446  00194A  A4D8               	btfss	status,2,c
  2447  00194C  0A05               	xorlw	5	; case 84
  2448                           
  2449                           ;EusartApp.c: 69: cState = START_RX_MESSAGE_READ;
  2450  00194E  0E00               	movlw	0
  2451  001950  0100               	movlb	0	; () banked
  2452  001952  6FD3               	movwf	_cState& (0+255),b
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;EusartApp.c: 71: }
  2456                           
  2457                           ;EusartApp.c: 70: break;
  2458  001954  0012               	return	
  2459  001956                     l166:
  2460                           
  2461                           ; BSR set to: 0
  2462  001956  0100               	movlb	0	; () banked
  2463  001958  51D3               	movf	_cState& (0+255),w,b
  2464                           
  2465                           ; Switch size 1, requested type "space"
  2466                           ; Number of cases is 4, Range of values is 0 to 4
  2467                           ; switch strategies available:
  2468                           ; Name         Instructions Cycles
  2469                           ; simple_byte           13     7 (average)
  2470                           ;	Chosen strategy is simple_byte
  2471  00195A  0A00               	xorlw	0	; case 0
  2472  00195C  B4D8               	btfsc	status,2,c
  2473  00195E  D7CC               	goto	l167
  2474  001960  0A01               	xorlw	1	; case 1
  2475  001962  B4D8               	btfsc	status,2,c
  2476  001964  D7CF               	goto	l169
  2477  001966  0A03               	xorlw	3	; case 2
  2478  001968  B4D8               	btfsc	status,2,c
  2479  00196A  D7D7               	goto	l171
  2480  00196C  0A06               	xorlw	6	; case 4
  2481  00196E  A4D8               	btfss	status,2,c
  2482  001970  0012               	return	
  2483  001972  D7E5               	goto	l173
  2484  001974                     __end_of_readUartByte:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           fsr1l	equ	0xFE1
  2496                           indf2	equ	0xFDF
  2497                           fsr2h	equ	0xFDA
  2498                           fsr2l	equ	0xFD9
  2499                           status	equ	0xFD8
  2500                           
  2501 ;; *************** function _toupper *****************
  2502 ;; Defined at:
  2503 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  c               1    wreg     unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  c               1   23[COMRAM] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  1    wreg      unsigned char 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2517 ;;      Params:         0       0       0       0       0       0       0
  2518 ;;      Locals:         1       0       0       0       0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0
  2520 ;;      Totals:         1       0       0       0       0       0       0
  2521 ;;Total ram usage:        1 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    3
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_readUartByte
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text2
  2532  002376                     __ptext2:
  2533                           	opt stack 0
  2534  002376                     _toupper:
  2535                           	opt stack 26
  2536                           
  2537                           ;incstack = 0
  2538                           ;toupper@c stored from wreg
  2539  002376  6E18               	movwf	toupper@c,c
  2540  002378  0E7B               	movlw	123
  2541  00237A  6018               	cpfslt	toupper@c,c
  2542  00237C  D004               	goto	l2057
  2543  00237E  0E60               	movlw	96
  2544  002380  6418               	cpfsgt	toupper@c,c
  2545  002382  D001               	goto	l2057
  2546  002384  9A18               	bcf	toupper@c,5,c
  2547  002386                     l2057:
  2548  002386  5018               	movf	toupper@c,w,c
  2549  002388  0012               	return	
  2550  00238A                     __end_of_toupper:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           prodh	equ	0xFF4
  2557                           prodl	equ	0xFF3
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1l	equ	0xFE1
  2562                           indf2	equ	0xFDF
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8
  2566                           
  2567 ;; *************** function _InitRxMessageParams *****************
  2568 ;; Defined at:
  2569 ;;		line 74 in file "EusartApp.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2583 ;;      Params:         0       0       0       0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    5
  2590 ;; This function calls:
  2591 ;;		_ZeroArray
  2592 ;; This function is called by:
  2593 ;;		_readUartByte
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text3
  2598  0022DC                     __ptext3:
  2599                           	opt stack 0
  2600  0022DC                     _InitRxMessageParams:
  2601                           	opt stack 24
  2602                           
  2603                           ;EusartApp.c: 76: msgCount = 0;
  2604                           
  2605                           ;incstack = 0
  2606  0022DC  0E00               	movlw	0
  2607  0022DE  0100               	movlb	0	; () banked
  2608  0022E0  6FD2               	movwf	_msgCount& (0+255),b
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;EusartApp.c: 77: ZeroArray(rxMsgQueue, (0x14));
  2612  0022E2  0ED7               	movlw	low _rxMsgQueue
  2613  0022E4  6E20               	movwf	ZeroArray@array,c
  2614  0022E6  0E00               	movlw	high _rxMsgQueue
  2615  0022E8  6E21               	movwf	ZeroArray@array+1,c
  2616  0022EA  0E00               	movlw	0
  2617  0022EC  6E23               	movwf	ZeroArray@size+1,c
  2618  0022EE  0E14               	movlw	20
  2619  0022F0  6E22               	movwf	ZeroArray@size,c
  2620  0022F2  EC5F  F011         	call	_ZeroArray	;wreg free
  2621  0022F6  0012               	return		;funcret
  2622  0022F8                     __end_of_InitRxMessageParams:
  2623                           	opt stack 0
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function _ZeroArray *****************
  2640 ;; Defined at:
  2641 ;;		line 24 in file "SystemCommon.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  array           2   31[COMRAM] PTR unsigned char 
  2644 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  2645 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  2646 ;;  size            2   33[COMRAM] int 
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2658 ;;      Params:         4       0       0       0       0       0       0
  2659 ;;      Locals:         0       0       0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0
  2661 ;;      Totals:         4       0       0       0       0       0       0
  2662 ;;Total ram usage:        4 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    4
  2665 ;; This function calls:
  2666 ;;		_memset
  2667 ;; This function is called by:
  2668 ;;		_InitRxMessageParams
  2669 ;;		_SendAckMessage
  2670 ;;		_FlashReadUart
  2671 ;;		_FlashEreaseMem
  2672 ;;		_FlashReadCondition
  2673 ;;		_GetIntFromUartData
  2674 ;;		_GetMcuFwVersion
  2675 ;;		_GetCpldFwVersion
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text4
  2680  0022BE                     __ptext4:
  2681                           	opt stack 0
  2682  0022BE                     _ZeroArray:
  2683                           	opt stack 24
  2684                           
  2685                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  2686                           
  2687                           ;incstack = 0
  2688  0022BE  C020  F018         	movff	ZeroArray@array,memset@p1
  2689  0022C2  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  2690  0022C6  0E00               	movlw	0
  2691  0022C8  6E1B               	movwf	memset@c+1,c
  2692  0022CA  0E00               	movlw	0
  2693  0022CC  6E1A               	movwf	memset@c,c
  2694  0022CE  C022  F01C         	movff	ZeroArray@size,memset@n
  2695  0022D2  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  2696  0022D6  ECE9  F010         	call	_memset	;wreg free
  2697  0022DA  0012               	return		;funcret
  2698  0022DC                     __end_of_ZeroArray:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _memset *****************
  2716 ;; Defined at:
  2717 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  p1              2   23[COMRAM] PTR void 
  2720 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  2721 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  2722 ;;  c               2   25[COMRAM] int 
  2723 ;;  n               2   27[COMRAM] unsigned int 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  p               2   29[COMRAM] PTR unsigned char 
  2726 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  2727 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  2   23[COMRAM] PTR void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2737 ;;      Params:         6       0       0       0       0       0       0
  2738 ;;      Locals:         2       0       0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0
  2740 ;;      Totals:         8       0       0       0       0       0       0
  2741 ;;Total ram usage:        8 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    3
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		_ZeroArray
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text5
  2752  0021D2                     __ptext5:
  2753                           	opt stack 0
  2754  0021D2                     _memset:
  2755                           	opt stack 24
  2756                           
  2757                           ;incstack = 0
  2758  0021D2  C018  F01E         	movff	memset@p1,memset@p
  2759  0021D6  C019  F01F         	movff	memset@p1+1,memset@p+1
  2760  0021DA  D008               	goto	l1882
  2761  0021DC                     l4669:
  2762  0021DC  C01E  FFD9         	movff	memset@p,fsr2l
  2763  0021E0  C01F  FFDA         	movff	memset@p+1,fsr2h
  2764  0021E4  C01A  FFDF         	movff	memset@c,indf2
  2765  0021E8  4A1E               	infsnz	memset@p,f,c
  2766  0021EA  2A1F               	incf	memset@p+1,f,c
  2767  0021EC                     l1882:
  2768  0021EC  061C               	decf	memset@n,f,c
  2769  0021EE  A0D8               	btfss	status,0,c
  2770  0021F0  061D               	decf	memset@n+1,f,c
  2771  0021F2  281C               	incf	memset@n,w,c
  2772  0021F4  E1F3               	bnz	l4669
  2773  0021F6  281D               	incf	memset@n+1,w,c
  2774  0021F8  B4D8               	btfsc	status,2,c
  2775  0021FA  0012               	return	
  2776  0021FC  D7EF               	goto	l1883
  2777  0021FE                     __end_of_memset:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           prodh	equ	0xFF4
  2784                           prodl	equ	0xFF3
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           indf2	equ	0xFDF
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _EUSART1_Read *****************
  2795 ;; Defined at:
  2796 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  readValue       2   24[COMRAM] unsigned int 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      unsigned char 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2810 ;;      Params:         0       0       0       0       0       0       0
  2811 ;;      Locals:         2       0       0       0       0       0       0
  2812 ;;      Temps:          1       0       0       0       0       0       0
  2813 ;;      Totals:         3       0       0       0       0       0       0
  2814 ;;Total ram usage:        3 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    3
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_readUartByte
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text6
  2825  001EE6                     __ptext6:
  2826                           	opt stack 0
  2827  001EE6                     _EUSART1_Read:
  2828                           	opt stack 26
  2829                           
  2830                           ;eusart1.c: 112: uint16_t readValue = 0;
  2831                           
  2832                           ;incstack = 0
  2833  001EE6  0E00               	movlw	0
  2834  001EE8  6E1A               	movwf	EUSART1_Read@readValue+1,c
  2835  001EEA  0E00               	movlw	0
  2836  001EEC  6E19               	movwf	EUSART1_Read@readValue,c
  2837                           
  2838                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  2839  001EEE  5036               	movf	_eusart1RxCount,w,c	;volatile
  2840  001EF0  A4D8               	btfss	status,2,c
  2841  001EF2  D002               	goto	l818
  2842                           
  2843                           ;eusart1.c: 120: {
  2844                           ;eusart1.c: 121: return readValue;
  2845  001EF4  5019               	movf	EUSART1_Read@readValue,w,c
  2846  001EF6  0012               	return	
  2847  001EF8                     l818:
  2848                           
  2849                           ;eusart1.c: 122: }
  2850                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  2851  001EF8  5037               	movf	_eusart1RxTail,w,c	;volatile
  2852  001EFA  0D01               	mullw	1
  2853  001EFC  0E46               	movlw	low _eusart1RxBuffer
  2854  001EFE  24F3               	addwf	prodl,w,c
  2855  001F00  6ED9               	movwf	fsr2l,c
  2856  001F02  0E01               	movlw	high _eusart1RxBuffer
  2857  001F04  20F4               	addwfc	prodh,w,c
  2858  001F06  6EDA               	movwf	fsr2h,c
  2859  001F08  50DF               	movf	indf2,w,c
  2860  001F0A  6E18               	movwf	??_EUSART1_Read& (0+255),c
  2861  001F0C  5018               	movf	??_EUSART1_Read,w,c
  2862  001F0E  6E19               	movwf	EUSART1_Read@readValue,c
  2863  001F10  6A1A               	clrf	EUSART1_Read@readValue+1,c
  2864  001F12  2A37               	incf	_eusart1RxTail,f,c	;volatile
  2865                           
  2866                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  2867  001F14  0E27               	movlw	39
  2868  001F16  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  2869  001F18  D002               	goto	l820
  2870                           
  2871                           ;eusart1.c: 126: {
  2872                           ;eusart1.c: 127: eusart1RxTail = 0;
  2873  001F1A  0E00               	movlw	0
  2874  001F1C  6E37               	movwf	_eusart1RxTail,c	;volatile
  2875  001F1E                     l820:
  2876                           
  2877                           ;eusart1.c: 128: }
  2878                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  2879  001F1E  9A9D               	bcf	3997,5,c	;volatile
  2880                           
  2881                           ;eusart1.c: 130: eusart1RxCount--;
  2882  001F20  0636               	decf	_eusart1RxCount,f,c	;volatile
  2883                           
  2884                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  2885  001F22  8A9D               	bsf	3997,5,c	;volatile
  2886                           
  2887                           ;eusart1.c: 133: return readValue;
  2888  001F24  5019               	movf	EUSART1_Read@readValue,w,c
  2889  001F26  0012               	return	
  2890  001F28                     __end_of_EUSART1_Read:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1l	equ	0xFE1
  2902                           indf2	equ	0xFDF
  2903                           fsr2h	equ	0xFDA
  2904                           fsr2l	equ	0xFD9
  2905                           status	equ	0xFD8
  2906                           
  2907 ;; *************** function _keepAliveSignalLed *****************
  2908 ;; Defined at:
  2909 ;;		line 35 in file "LedsApp.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2923 ;;      Params:         0       0       0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0
  2925 ;;      Temps:          1       0       0       0       0       0       0
  2926 ;;      Totals:         1       0       0       0       0       0       0
  2927 ;;Total ram usage:        1 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text7
  2938  002348                     __ptext7:
  2939                           	opt stack 0
  2940  002348                     _keepAliveSignalLed:
  2941                           	opt stack 27
  2942                           
  2943                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  2944                           
  2945                           ;incstack = 0
  2946  002348  B08B               	btfsc	3979,0,c	;volatile
  2947  00234A  D003               	goto	u1680
  2948  00234C  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  2949  00234E  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  2950  002350  D001               	goto	u1698
  2951  002352                     u1680:
  2952  002352  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  2953  002354                     u1698:
  2954  002354  508B               	movf	3979,w,c	;volatile
  2955  002356  1818               	xorwf	??_keepAliveSignalLed,w,c
  2956  002358  0BFE               	andlw	-2
  2957  00235A  1818               	xorwf	??_keepAliveSignalLed,w,c
  2958  00235C  6E8B               	movwf	3979,c	;volatile
  2959  00235E  0012               	return		;funcret
  2960  002360                     __end_of_keepAliveSignalLed:
  2961                           	opt stack 0
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           prodh	equ	0xFF4
  2967                           prodl	equ	0xFF3
  2968                           postinc0	equ	0xFEE
  2969                           wreg	equ	0xFE8
  2970                           postdec1	equ	0xFE5
  2971                           fsr1l	equ	0xFE1
  2972                           indf2	equ	0xFDF
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _SetMcuSystem *****************
  2978 ;; Defined at:
  2979 ;;		line 11 in file "SystemSettings.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2993 ;;      Params:         0       0       0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0
  2996 ;;      Totals:         0       0       0       0       0       0       0
  2997 ;;Total ram usage:        0 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    6
  3000 ;; This function calls:
  3001 ;;		_SYSTEM_Initialize
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text8
  3008  0023DA                     __ptext8:
  3009                           	opt stack 0
  3010  0023DA                     _SetMcuSystem:
  3011                           	opt stack 24
  3012                           
  3013                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  3014                           
  3015                           ;incstack = 0
  3016  0023DA  EC8A  F011         	call	_SYSTEM_Initialize	;wreg free
  3017                           
  3018                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  3019  0023DE  8EF2               	bsf	intcon,7,c	;volatile
  3020                           
  3021                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  3022  0023E0  8CF2               	bsf	intcon,6,c	;volatile
  3023  0023E2  0012               	return		;funcret
  3024  0023E4                     __end_of_SetMcuSystem:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _SYSTEM_Initialize *****************
  3043 ;; Defined at:
  3044 ;;		line 112 in file "mcc_generated_files/mcc.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;		None
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3058 ;;      Params:         0       0       0       0       0       0       0
  3059 ;;      Locals:         0       0       0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0
  3061 ;;      Totals:         0       0       0       0       0       0       0
  3062 ;;Total ram usage:        0 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    5
  3065 ;; This function calls:
  3066 ;;		_ADC_Initialize
  3067 ;;		_EUSART1_Initialize
  3068 ;;		_INTERRUPT_Initialize
  3069 ;;		_OSCILLATOR_Initialize
  3070 ;;		_PIN_MANAGER_Initialize
  3071 ;;		_TMR0_Initialize
  3072 ;; This function is called by:
  3073 ;;		_SetMcuSystem
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text9
  3078  002314                     __ptext9:
  3079                           	opt stack 0
  3080  002314                     _SYSTEM_Initialize:
  3081                           	opt stack 24
  3082                           
  3083                           ;mcc.c: 114: INTERRUPT_Initialize();
  3084                           
  3085                           ;incstack = 0
  3086  002314  ECF9  F011         	call	_INTERRUPT_Initialize	;wreg free
  3087                           
  3088                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  3089  002318  EC2D  F00F         	call	_PIN_MANAGER_Initialize	;wreg free
  3090                           
  3091                           ;mcc.c: 116: OSCILLATOR_Initialize();
  3092  00231C  ECDF  F011         	call	_OSCILLATOR_Initialize	;wreg free
  3093                           
  3094                           ;mcc.c: 117: ADC_Initialize();
  3095  002320  ECB0  F011         	call	_ADC_Initialize	;wreg free
  3096                           
  3097                           ;mcc.c: 118: TMR0_Initialize();
  3098  002324  EC83  F010         	call	_TMR0_Initialize	;wreg free
  3099                           
  3100                           ;mcc.c: 119: EUSART1_Initialize();
  3101  002328  EC68  F010         	call	_EUSART1_Initialize	;wreg free
  3102  00232C  0012               	return		;funcret
  3103  00232E                     __end_of_SYSTEM_Initialize:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           indf2	equ	0xFDF
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _TMR0_Initialize *****************
  3122 ;; Defined at:
  3123 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3137 ;;      Params:         0       0       0       0       0       0       0
  3138 ;;      Locals:         0       0       0       0       0       0       0
  3139 ;;      Temps:          2       0       0       0       0       0       0
  3140 ;;      Totals:         2       0       0       0       0       0       0
  3141 ;;Total ram usage:        2 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    4
  3144 ;; This function calls:
  3145 ;;		_TMR0_SetInterruptHandler
  3146 ;; This function is called by:
  3147 ;;		_SYSTEM_Initialize
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text10
  3152  002106                     __ptext10:
  3153                           	opt stack 0
  3154  002106                     _TMR0_Initialize:
  3155                           	opt stack 24
  3156                           
  3157                           ;tmr0.c: 71: TMR0H = 0x3C;
  3158                           
  3159                           ;incstack = 0
  3160  002106  0E3C               	movlw	60
  3161  002108  6ED7               	movwf	4055,c	;volatile
  3162                           
  3163                           ;tmr0.c: 74: TMR0L = 0xAF;
  3164  00210A  0EAF               	movlw	175
  3165  00210C  6ED6               	movwf	4054,c	;volatile
  3166                           
  3167                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  3168  00210E  50D6               	movf	4054,w,c	;volatile
  3169  002110  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  3170  002114  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  3171  002116  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  3172  00211A  6A1A               	clrf	??_TMR0_Initialize,c
  3173  00211C  101A               	iorwf	??_TMR0_Initialize,w,c
  3174  00211E  6E46               	movwf	_timer0ReloadVal,c	;volatile
  3175  002120  501B               	movf	??_TMR0_Initialize+1,w,c
  3176  002122  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  3177                           
  3178                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  3179  002124  94F2               	bcf	intcon,2,c	;volatile
  3180                           
  3181                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  3182  002126  8AF2               	bsf	intcon,5,c	;volatile
  3183                           
  3184                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3185  002128  0E00               	movlw	0
  3186  00212A  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  3187  00212C  0E00               	movlw	0
  3188  00212E  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  3189  002130  ECF2  F011         	call	_TMR0_SetInterruptHandler	;wreg free
  3190                           
  3191                           ;tmr0.c: 90: T0CON = 0x90;
  3192  002134  0E90               	movlw	144
  3193  002136  6ED5               	movwf	4053,c	;volatile
  3194  002138  0012               	return		;funcret
  3195  00213A                     __end_of_TMR0_Initialize:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           intcon	equ	0xFF2
  3204                           postinc0	equ	0xFEE
  3205                           wreg	equ	0xFE8
  3206                           postdec1	equ	0xFE5
  3207                           fsr1l	equ	0xFE1
  3208                           indf2	equ	0xFDF
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function _TMR0_SetInterruptHandler *****************
  3214 ;; Defined at:
  3215 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  3218 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3230 ;;      Params:         2       0       0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0
  3233 ;;      Totals:         2       0       0       0       0       0       0
  3234 ;;Total ram usage:        2 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    3
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_TMR0_Initialize
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text11
  3245  0023E4                     __ptext11:
  3246                           	opt stack 0
  3247  0023E4                     _TMR0_SetInterruptHandler:
  3248                           	opt stack 24
  3249                           
  3250                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  3251                           
  3252                           ;incstack = 0
  3253  0023E4  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  3254  0023E8  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  3255  0023EC  0012               	return		;funcret
  3256  0023EE                     __end_of_TMR0_SetInterruptHandler:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           intcon	equ	0xFF2
  3265                           postinc0	equ	0xFEE
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _PIN_MANAGER_Initialize *****************
  3275 ;; Defined at:
  3276 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;		None
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3290 ;;      Params:         0       0       0       0       0       0       0
  3291 ;;      Locals:         0       0       0       0       0       0       0
  3292 ;;      Temps:          0       0       0       0       0       0       0
  3293 ;;      Totals:         0       0       0       0       0       0       0
  3294 ;;Total ram usage:        0 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    3
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_SYSTEM_Initialize
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text12
  3305  001E5A                     __ptext12:
  3306                           	opt stack 0
  3307  001E5A                     _PIN_MANAGER_Initialize:
  3308                           	opt stack 25
  3309                           
  3310                           ;pin_manager.c: 57: LATE = 0x00;
  3311                           
  3312                           ;incstack = 0
  3313  001E5A  0E00               	movlw	0
  3314  001E5C  6E8D               	movwf	3981,c	;volatile
  3315                           
  3316                           ;pin_manager.c: 58: LATD = 0x00;
  3317  001E5E  0E00               	movlw	0
  3318  001E60  6E8C               	movwf	3980,c	;volatile
  3319                           
  3320                           ;pin_manager.c: 59: LATA = 0x06;
  3321  001E62  0E06               	movlw	6
  3322  001E64  6E89               	movwf	3977,c	;volatile
  3323                           
  3324                           ;pin_manager.c: 60: LATB = 0x00;
  3325  001E66  0E00               	movlw	0
  3326  001E68  6E8A               	movwf	3978,c	;volatile
  3327                           
  3328                           ;pin_manager.c: 61: LATC = 0x00;
  3329  001E6A  0E00               	movlw	0
  3330  001E6C  6E8B               	movwf	3979,c	;volatile
  3331                           
  3332                           ;pin_manager.c: 66: TRISE = 0x07;
  3333  001E6E  0E07               	movlw	7
  3334  001E70  6E96               	movwf	3990,c	;volatile
  3335                           
  3336                           ;pin_manager.c: 67: TRISA = 0xE1;
  3337  001E72  0EE1               	movlw	225
  3338  001E74  6E92               	movwf	3986,c	;volatile
  3339                           
  3340                           ;pin_manager.c: 68: TRISB = 0xEF;
  3341  001E76  0EEF               	movlw	239
  3342  001E78  6E93               	movwf	3987,c	;volatile
  3343                           
  3344                           ;pin_manager.c: 69: TRISC = 0x80;
  3345  001E7A  0E80               	movlw	128
  3346  001E7C  6E94               	movwf	3988,c	;volatile
  3347                           
  3348                           ;pin_manager.c: 70: TRISD = 0xF2;
  3349  001E7E  0EF2               	movlw	242
  3350  001E80  6E95               	movwf	3989,c	;volatile
  3351                           
  3352                           ;pin_manager.c: 75: ANSELC = 0x30;
  3353  001E82  0E30               	movlw	48
  3354  001E84  010F               	movlb	15	; () banked
  3355  001E86  6F3A               	movwf	58,b	;volatile
  3356                           
  3357                           ;pin_manager.c: 76: ANSELB = 0x33;
  3358  001E88  0E33               	movlw	51
  3359  001E8A  6F39               	movwf	57,b	;volatile
  3360                           
  3361                           ;pin_manager.c: 77: ANSELD = 0xE4;
  3362  001E8C  0EE4               	movlw	228
  3363  001E8E  6F3B               	movwf	59,b	;volatile
  3364                           
  3365                           ;pin_manager.c: 78: ANSELE = 0x07;
  3366  001E90  0E07               	movlw	7
  3367  001E92  6F3C               	movwf	60,b	;volatile
  3368                           
  3369                           ;pin_manager.c: 79: ANSELA = 0x2F;
  3370  001E94  0E2F               	movlw	47
  3371  001E96  6F38               	movwf	56,b	;volatile
  3372                           
  3373                           ;pin_manager.c: 84: WPUB = 0xC2;
  3374  001E98  0EC2               	movlw	194
  3375  001E9A  6E61               	movwf	3937,c	;volatile
  3376                           
  3377                           ; BSR set to: 15
  3378                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  3379  001E9C  9EF1               	bcf	intcon2,7,c	;volatile
  3380                           
  3381                           ; BSR set to: 15
  3382                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  3383  001E9E  86F2               	bsf	intcon,3,c	;volatile
  3384                           
  3385                           ; BSR set to: 15
  3386  001EA0  0012               	return		;funcret
  3387  001EA2                     __end_of_PIN_MANAGER_Initialize:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           intcon2	equ	0xFF1
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _OSCILLATOR_Initialize *****************
  3407 ;; Defined at:
  3408 ;;		line 122 in file "mcc_generated_files/mcc.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3422 ;;      Params:         0       0       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0
  3425 ;;      Totals:         0       0       0       0       0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    3
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_SYSTEM_Initialize
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text13
  3437  0023BE                     __ptext13:
  3438                           	opt stack 0
  3439  0023BE                     _OSCILLATOR_Initialize:
  3440                           	opt stack 25
  3441                           
  3442                           ;mcc.c: 125: OSCCON = 0x60;
  3443                           
  3444                           ; BSR set to: 15
  3445                           ;incstack = 0
  3446  0023BE  0E60               	movlw	96
  3447  0023C0  6ED3               	movwf	4051,c	;volatile
  3448                           
  3449                           ;mcc.c: 127: OSCCON2 = 0x04;
  3450  0023C2  0E04               	movlw	4
  3451  0023C4  6ED2               	movwf	4050,c	;volatile
  3452                           
  3453                           ;mcc.c: 129: OSCTUNE = 0x00;
  3454  0023C6  0E00               	movlw	0
  3455  0023C8  6E9B               	movwf	3995,c	;volatile
  3456  0023CA  0012               	return		;funcret
  3457  0023CC                     __end_of_OSCILLATOR_Initialize:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           intcon	equ	0xFF2
  3466                           intcon2	equ	0xFF1
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8
  3475                           
  3476 ;; *************** function _INTERRUPT_Initialize *****************
  3477 ;; Defined at:
  3478 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;		None
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		None
  3487 ;; Tracked objects:
  3488 ;;		On entry : 0/0
  3489 ;;		On exit  : 0/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3492 ;;      Params:         0       0       0       0       0       0       0
  3493 ;;      Locals:         0       0       0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0
  3495 ;;      Totals:         0       0       0       0       0       0       0
  3496 ;;Total ram usage:        0 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    3
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_SYSTEM_Initialize
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text14
  3507  0023F2                     __ptext14:
  3508                           	opt stack 0
  3509  0023F2                     _INTERRUPT_Initialize:
  3510                           	opt stack 25
  3511                           
  3512                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3513                           
  3514                           ;incstack = 0
  3515  0023F2  9ED0               	bcf	4048,7,c	;volatile
  3516  0023F4  0012               	return		;funcret
  3517  0023F6                     __end_of_INTERRUPT_Initialize:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           intcon	equ	0xFF2
  3526                           intcon2	equ	0xFF1
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           postdec1	equ	0xFE5
  3530                           fsr1l	equ	0xFE1
  3531                           indf2	equ	0xFDF
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _EUSART1_Initialize *****************
  3537 ;; Defined at:
  3538 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3552 ;;      Params:         0       0       0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0
  3555 ;;      Totals:         0       0       0       0       0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    3
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_SYSTEM_Initialize
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text15
  3567  0020D0                     __ptext15:
  3568                           	opt stack 0
  3569  0020D0                     _EUSART1_Initialize:
  3570                           	opt stack 25
  3571                           
  3572                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  3573                           
  3574                           ;incstack = 0
  3575  0020D0  9A9D               	bcf	3997,5,c	;volatile
  3576                           
  3577                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  3578  0020D2  989D               	bcf	3997,4,c	;volatile
  3579                           
  3580                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  3581  0020D4  0E08               	movlw	8
  3582  0020D6  6EB8               	movwf	4024,c	;volatile
  3583                           
  3584                           ;eusart1.c: 85: RCSTA1 = 0x90;
  3585  0020D8  0E90               	movlw	144
  3586  0020DA  6EAB               	movwf	4011,c	;volatile
  3587                           
  3588                           ;eusart1.c: 88: TXSTA1 = 0x24;
  3589  0020DC  0E24               	movlw	36
  3590  0020DE  6EAC               	movwf	4012,c	;volatile
  3591                           
  3592                           ;eusart1.c: 91: SPBRG1 = 0x10;
  3593  0020E0  0E10               	movlw	16
  3594  0020E2  6EAF               	movwf	4015,c	;volatile
  3595                           
  3596                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  3597  0020E4  0E00               	movlw	0
  3598  0020E6  6EB0               	movwf	4016,c	;volatile
  3599                           
  3600                           ;eusart1.c: 98: eusart1TxHead = 0;
  3601  0020E8  0E00               	movlw	0
  3602  0020EA  6E3A               	movwf	_eusart1TxHead,c	;volatile
  3603                           
  3604                           ;eusart1.c: 99: eusart1TxTail = 0;
  3605  0020EC  0E00               	movlw	0
  3606  0020EE  6E39               	movwf	_eusart1TxTail,c	;volatile
  3607                           
  3608                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  3609  0020F0  0E46               	movlw	70
  3610  0020F2  0100               	movlb	0	; () banked
  3611  0020F4  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  3612                           
  3613                           ;eusart1.c: 102: eusart1RxHead = 0;
  3614  0020F6  0E00               	movlw	0
  3615  0020F8  6E38               	movwf	_eusart1RxHead,c	;volatile
  3616                           
  3617                           ;eusart1.c: 103: eusart1RxTail = 0;
  3618  0020FA  0E00               	movlw	0
  3619  0020FC  6E37               	movwf	_eusart1RxTail,c	;volatile
  3620                           
  3621                           ;eusart1.c: 104: eusart1RxCount = 0;
  3622  0020FE  0E00               	movlw	0
  3623  002100  6E36               	movwf	_eusart1RxCount,c	;volatile
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  3627  002102  8A9D               	bsf	3997,5,c	;volatile
  3628                           
  3629                           ; BSR set to: 0
  3630  002104  0012               	return		;funcret
  3631  002106                     __end_of_EUSART1_Initialize:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           intcon2	equ	0xFF1
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _ADC_Initialize *****************
  3651 ;; Defined at:
  3652 ;;		line 58 in file "mcc_generated_files/adc.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3666 ;;      Params:         0       0       0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0
  3669 ;;      Totals:         0       0       0       0       0       0       0
  3670 ;;Total ram usage:        0 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    3
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_SYSTEM_Initialize
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text16
  3681  002360                     __ptext16:
  3682                           	opt stack 0
  3683  002360                     _ADC_Initialize:
  3684                           	opt stack 25
  3685                           
  3686                           ;adc.c: 63: ADCON0 = 0x05;
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;incstack = 0
  3690  002360  0E05               	movlw	5
  3691  002362  6EC2               	movwf	4034,c	;volatile
  3692                           
  3693                           ;adc.c: 66: ADCON1 = 0x00;
  3694  002364  0E00               	movlw	0
  3695  002366  6EC1               	movwf	4033,c	;volatile
  3696                           
  3697                           ;adc.c: 69: ADCON2 = 0x87;
  3698  002368  0E87               	movlw	135
  3699  00236A  6EC0               	movwf	4032,c	;volatile
  3700                           
  3701                           ;adc.c: 72: ADRESL = 0x00;
  3702  00236C  0E00               	movlw	0
  3703  00236E  6EC3               	movwf	4035,c	;volatile
  3704                           
  3705                           ;adc.c: 75: ADRESH = 0x00;
  3706  002370  0E00               	movlw	0
  3707  002372  6EC4               	movwf	4036,c	;volatile
  3708  002374  0012               	return		;funcret
  3709  002376                     __end_of_ADC_Initialize:
  3710                           	opt stack 0
  3711                           tblptru	equ	0xFF8
  3712                           tblptrh	equ	0xFF7
  3713                           tblptrl	equ	0xFF6
  3714                           tablat	equ	0xFF5
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           intcon	equ	0xFF2
  3718                           intcon2	equ	0xFF1
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           postdec1	equ	0xFE5
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _SetMcuRunTime *****************
  3729 ;; Defined at:
  3730 ;;		line 81 in file "SystemStatus.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3744 ;;      Params:         0       0       0       0       0       0       0
  3745 ;;      Locals:         0       0       0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0
  3747 ;;      Totals:         0       0       0       0       0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		___llmod
  3753 ;; This function is called by:
  3754 ;;		_main
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text17
  3759  001EA2                     __ptext17:
  3760                           	opt stack 0
  3761  001EA2                     _SetMcuRunTime:
  3762                           	opt stack 26
  3763                           
  3764                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  3765                           
  3766                           ;incstack = 0
  3767  001EA2  0E01               	movlw	1
  3768  001EA4  0100               	movlb	0	; () banked
  3769  001EA6  27C7               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  3770  001EA8  0E00               	movlw	0
  3771  001EAA  23C8               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  3772  001EAC  23C9               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  3773  001EAE  23CA               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  3777  001EB0  C0C7  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  3778  001EB4  C0C8  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  3779  001EB8  C0C9  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  3780  001EBC  C0CA  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  3781  001EC0  0E80               	movlw	128
  3782  001EC2  6E1C               	movwf	___llmod@divisor,c
  3783  001EC4  0E43               	movlw	67
  3784  001EC6  6E1D               	movwf	___llmod@divisor+1,c
  3785  001EC8  0E00               	movlw	0
  3786  001ECA  6E1E               	movwf	___llmod@divisor+2,c
  3787  001ECC  0E00               	movlw	0
  3788  001ECE  6E1F               	movwf	___llmod@divisor+3,c
  3789  001ED0  EC65  F00D         	call	___llmod	;wreg free
  3790  001ED4  C018  F0C7         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  3791  001ED8  C019  F0C8         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  3792  001EDC  C01A  F0C9         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  3793  001EE0  C01B  F0CA         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  3794  001EE4  0012               	return		;funcret
  3795  001EE6                     __end_of_SetMcuRunTime:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           prodh	equ	0xFF4
  3802                           prodl	equ	0xFF3
  3803                           intcon	equ	0xFF2
  3804                           intcon2	equ	0xFF1
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function ___llmod *****************
  3815 ;; Defined at:
  3816 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  dividend        4   23[COMRAM] unsigned long 
  3819 ;;  divisor         4   27[COMRAM] unsigned long 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  counter         1   31[COMRAM] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  4   23[COMRAM] unsigned long 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3831 ;;      Params:         8       0       0       0       0       0       0
  3832 ;;      Locals:         1       0       0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0
  3834 ;;      Totals:         9       0       0       0       0       0       0
  3835 ;;Total ram usage:        9 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    3
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_SetMcuRunTime
  3842 ;;		_GetMcuRunTime
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text18
  3847  001ACA                     __ptext18:
  3848                           	opt stack 0
  3849  001ACA                     ___llmod:
  3850                           	opt stack 26
  3851                           
  3852                           ;incstack = 0
  3853  001ACA  501C               	movf	___llmod@divisor,w,c
  3854  001ACC  101D               	iorwf	___llmod@divisor+1,w,c
  3855  001ACE  101E               	iorwf	___llmod@divisor+2,w,c
  3856  001AD0  101F               	iorwf	___llmod@divisor+3,w,c
  3857  001AD2  B4D8               	btfsc	status,2,c
  3858  001AD4  D024               	goto	l1820
  3859  001AD6  0E01               	movlw	1
  3860  001AD8  6E20               	movwf	___llmod@counter,c
  3861  001ADA  D006               	goto	l1815
  3862  001ADC  90D8               	bcf	status,0,c
  3863  001ADE  361C               	rlcf	___llmod@divisor,f,c
  3864  001AE0  361D               	rlcf	___llmod@divisor+1,f,c
  3865  001AE2  361E               	rlcf	___llmod@divisor+2,f,c
  3866  001AE4  361F               	rlcf	___llmod@divisor+3,f,c
  3867  001AE6  2A20               	incf	___llmod@counter,f,c
  3868  001AE8                     l1815:
  3869  001AE8  AE1F               	btfss	___llmod@divisor+3,7,c
  3870  001AEA  D7F8               	goto	l1816
  3871  001AEC                     u4110:
  3872  001AEC  501C               	movf	___llmod@divisor,w,c
  3873  001AEE  5C18               	subwf	___llmod@dividend,w,c
  3874  001AF0  501D               	movf	___llmod@divisor+1,w,c
  3875  001AF2  5819               	subwfb	___llmod@dividend+1,w,c
  3876  001AF4  501E               	movf	___llmod@divisor+2,w,c
  3877  001AF6  581A               	subwfb	___llmod@dividend+2,w,c
  3878  001AF8  501F               	movf	___llmod@divisor+3,w,c
  3879  001AFA  581B               	subwfb	___llmod@dividend+3,w,c
  3880  001AFC  A0D8               	btfss	status,0,c
  3881  001AFE  D008               	goto	l1819
  3882  001B00  501C               	movf	___llmod@divisor,w,c
  3883  001B02  5E18               	subwf	___llmod@dividend,f,c
  3884  001B04  501D               	movf	___llmod@divisor+1,w,c
  3885  001B06  5A19               	subwfb	___llmod@dividend+1,f,c
  3886  001B08  501E               	movf	___llmod@divisor+2,w,c
  3887  001B0A  5A1A               	subwfb	___llmod@dividend+2,f,c
  3888  001B0C  501F               	movf	___llmod@divisor+3,w,c
  3889  001B0E  5A1B               	subwfb	___llmod@dividend+3,f,c
  3890  001B10                     l1819:
  3891  001B10  90D8               	bcf	status,0,c
  3892  001B12  321F               	rrcf	___llmod@divisor+3,f,c
  3893  001B14  321E               	rrcf	___llmod@divisor+2,f,c
  3894  001B16  321D               	rrcf	___llmod@divisor+1,f,c
  3895  001B18  321C               	rrcf	___llmod@divisor,f,c
  3896  001B1A  2E20               	decfsz	___llmod@counter,f,c
  3897  001B1C  D7E7               	goto	u4110
  3898  001B1E                     l1820:
  3899  001B1E  C018  F018         	movff	___llmod@dividend,?___llmod
  3900  001B22  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  3901  001B26  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  3902  001B2A  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  3903  001B2E  0012               	return		;funcret
  3904  001B30                     __end_of___llmod:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           tblptrh	equ	0xFF7
  3908                           tblptrl	equ	0xFF6
  3909                           tablat	equ	0xFF5
  3910                           prodh	equ	0xFF4
  3911                           prodl	equ	0xFF3
  3912                           intcon	equ	0xFF2
  3913                           intcon2	equ	0xFF1
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           postdec1	equ	0xFE5
  3917                           fsr1l	equ	0xFE1
  3918                           indf2	equ	0xFDF
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _SendUartSystemInitMessage *****************
  3924 ;; Defined at:
  3925 ;;		line 122 in file "SystemStatus.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  dest           50    0[BANK0 ] unsigned char [50]
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3939 ;;      Params:         0       0       0       0       0       0       0
  3940 ;;      Locals:         0      50       0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0
  3942 ;;      Totals:         0      50       0       0       0       0       0
  3943 ;;Total ram usage:       50 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    5
  3946 ;; This function calls:
  3947 ;;		_UART_Write_Text
  3948 ;;		_sprintf
  3949 ;; This function is called by:
  3950 ;;		_main
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text19
  3955  00120A                     __ptext19:
  3956                           	opt stack 0
  3957  00120A                     _SendUartSystemInitMessage:
  3958                           	opt stack 25
  3959                           
  3960                           ;SystemStatus.c: 124: char dest[50];
  3961                           ;SystemStatus.c: 126: sprintf(dest, "*************************** \n\r");
  3962                           
  3963                           ;incstack = 0
  3964  00120A  0E60               	movlw	low SendUartSystemInitMessage@dest
  3965  00120C  6E18               	movwf	sprintf@sp,c
  3966  00120E  0E00               	movlw	high SendUartSystemInitMessage@dest
  3967  001210  6E19               	movwf	sprintf@sp+1,c
  3968  001212  0E73               	movlw	low STR_1
  3969  001214  6E1A               	movwf	sprintf@f,c
  3970  001216  0E7F               	movlw	high STR_1
  3971  001218  6E1B               	movwf	sprintf@f+1,c
  3972  00121A  EC6E  F009         	call	_sprintf	;wreg free
  3973                           
  3974                           ;SystemStatus.c: 127: UART_Write_Text(dest);
  3975  00121E  0E60               	movlw	low SendUartSystemInitMessage@dest
  3976  001220  6E19               	movwf	UART_Write_Text@text,c
  3977  001222  0E00               	movlw	high SendUartSystemInitMessage@dest
  3978  001224  6E1A               	movwf	UART_Write_Text@text+1,c
  3979  001226  EC9D  F010         	call	_UART_Write_Text	;wreg free
  3980                           
  3981                           ;SystemStatus.c: 129: sprintf(dest, "FAST LINK SYSTEM \n\r");
  3982  00122A  0E60               	movlw	low SendUartSystemInitMessage@dest
  3983  00122C  6E18               	movwf	sprintf@sp,c
  3984  00122E  0E00               	movlw	high SendUartSystemInitMessage@dest
  3985  001230  6E19               	movwf	sprintf@sp+1,c
  3986  001232  0EA7               	movlw	low STR_2
  3987  001234  6E1A               	movwf	sprintf@f,c
  3988  001236  0E7F               	movlw	high STR_2
  3989  001238  6E1B               	movwf	sprintf@f+1,c
  3990  00123A  EC6E  F009         	call	_sprintf	;wreg free
  3991                           
  3992                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  3993  00123E  0E60               	movlw	low SendUartSystemInitMessage@dest
  3994  001240  6E19               	movwf	UART_Write_Text@text,c
  3995  001242  0E00               	movlw	high SendUartSystemInitMessage@dest
  3996  001244  6E1A               	movwf	UART_Write_Text@text+1,c
  3997  001246  EC9D  F010         	call	_UART_Write_Text	;wreg free
  3998                           
  3999                           ;SystemStatus.c: 132: sprintf(dest, "SW VESRION: 1.001 \n\r");
  4000  00124A  0E60               	movlw	low SendUartSystemInitMessage@dest
  4001  00124C  6E18               	movwf	sprintf@sp,c
  4002  00124E  0E00               	movlw	high SendUartSystemInitMessage@dest
  4003  001250  6E19               	movwf	sprintf@sp+1,c
  4004  001252  0E92               	movlw	low STR_3
  4005  001254  6E1A               	movwf	sprintf@f,c
  4006  001256  0E7F               	movlw	high STR_3
  4007  001258  6E1B               	movwf	sprintf@f+1,c
  4008  00125A  EC6E  F009         	call	_sprintf	;wreg free
  4009                           
  4010                           ;SystemStatus.c: 133: UART_Write_Text(dest);
  4011  00125E  0E60               	movlw	low SendUartSystemInitMessage@dest
  4012  001260  6E19               	movwf	UART_Write_Text@text,c
  4013  001262  0E00               	movlw	high SendUartSystemInitMessage@dest
  4014  001264  6E1A               	movwf	UART_Write_Text@text+1,c
  4015  001266  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4016                           
  4017                           ;SystemStatus.c: 135: sprintf(dest, "Compile date: %s \n\r", "Mar 06 2018");
  4018  00126A  0E60               	movlw	low SendUartSystemInitMessage@dest
  4019  00126C  6E18               	movwf	sprintf@sp,c
  4020  00126E  0E00               	movlw	high SendUartSystemInitMessage@dest
  4021  001270  6E19               	movwf	sprintf@sp+1,c
  4022  001272  0ECF               	movlw	low STR_4
  4023  001274  6E1A               	movwf	sprintf@f,c
  4024  001276  0E7F               	movlw	high STR_4
  4025  001278  6E1B               	movwf	sprintf@f+1,c
  4026  00127A  0EE3               	movlw	low STR_5
  4027  00127C  6E1C               	movwf	?_sprintf+4,c
  4028  00127E  0E7F               	movlw	high STR_5
  4029  001280  6E1D               	movwf	?_sprintf+5,c
  4030  001282  EC6E  F009         	call	_sprintf	;wreg free
  4031                           
  4032                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  4033  001286  0E60               	movlw	low SendUartSystemInitMessage@dest
  4034  001288  6E19               	movwf	UART_Write_Text@text,c
  4035  00128A  0E00               	movlw	high SendUartSystemInitMessage@dest
  4036  00128C  6E1A               	movwf	UART_Write_Text@text+1,c
  4037  00128E  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4038                           
  4039                           ;SystemStatus.c: 138: sprintf(dest, "Compile time: %s \n\r", "14:08:22");
  4040  001292  0E60               	movlw	low SendUartSystemInitMessage@dest
  4041  001294  6E18               	movwf	sprintf@sp,c
  4042  001296  0E00               	movlw	high SendUartSystemInitMessage@dest
  4043  001298  6E19               	movwf	sprintf@sp+1,c
  4044  00129A  0EBB               	movlw	low STR_6
  4045  00129C  6E1A               	movwf	sprintf@f,c
  4046  00129E  0E7F               	movlw	high STR_6
  4047  0012A0  6E1B               	movwf	sprintf@f+1,c
  4048  0012A2  0EEF               	movlw	low STR_7
  4049  0012A4  6E1C               	movwf	?_sprintf+4,c
  4050  0012A6  0E7F               	movlw	high STR_7
  4051  0012A8  6E1D               	movwf	?_sprintf+5,c
  4052  0012AA  EC6E  F009         	call	_sprintf	;wreg free
  4053                           
  4054                           ;SystemStatus.c: 139: UART_Write_Text(dest);
  4055  0012AE  0E60               	movlw	low SendUartSystemInitMessage@dest
  4056  0012B0  6E19               	movwf	UART_Write_Text@text,c
  4057  0012B2  0E00               	movlw	high SendUartSystemInitMessage@dest
  4058  0012B4  6E1A               	movwf	UART_Write_Text@text+1,c
  4059  0012B6  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4060                           
  4061                           ;SystemStatus.c: 141: sprintf(dest, "*************************** \n\r");
  4062  0012BA  0E60               	movlw	low SendUartSystemInitMessage@dest
  4063  0012BC  6E18               	movwf	sprintf@sp,c
  4064  0012BE  0E00               	movlw	high SendUartSystemInitMessage@dest
  4065  0012C0  6E19               	movwf	sprintf@sp+1,c
  4066  0012C2  0E73               	movlw	low STR_1
  4067  0012C4  6E1A               	movwf	sprintf@f,c
  4068  0012C6  0E7F               	movlw	high STR_1
  4069  0012C8  6E1B               	movwf	sprintf@f+1,c
  4070  0012CA  EC6E  F009         	call	_sprintf	;wreg free
  4071                           
  4072                           ;SystemStatus.c: 142: UART_Write_Text(dest);
  4073  0012CE  0E60               	movlw	low SendUartSystemInitMessage@dest
  4074  0012D0  6E19               	movwf	UART_Write_Text@text,c
  4075  0012D2  0E00               	movlw	high SendUartSystemInitMessage@dest
  4076  0012D4  6E1A               	movwf	UART_Write_Text@text+1,c
  4077  0012D6  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4078  0012DA  0012               	return		;funcret
  4079  0012DC                     __end_of_SendUartSystemInitMessage:
  4080                           	opt stack 0
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           intcon2	equ	0xFF1
  4089                           postinc0	equ	0xFEE
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _PrintHelpScreen *****************
  4099 ;; Defined at:
  4100 ;;		line 145 in file "SystemStatus.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  dest           50    0[BANK0 ] unsigned char [50]
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4114 ;;      Params:         0       0       0       0       0       0       0
  4115 ;;      Locals:         0      50       0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0
  4117 ;;      Totals:         0      50       0       0       0       0       0
  4118 ;;Total ram usage:       50 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    5
  4121 ;; This function calls:
  4122 ;;		_UART_Write_Text
  4123 ;;		_sprintf
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text20
  4130  0000E0                     __ptext20:
  4131                           	opt stack 0
  4132  0000E0                     _PrintHelpScreen:
  4133                           	opt stack 25
  4134                           
  4135                           ;SystemStatus.c: 147: char dest[50];
  4136                           ;SystemStatus.c: 149: sprintf(dest, "DS <data soure><cr>  \tSet data source (0-1)\r\n");
  4137                           
  4138                           ;incstack = 0
  4139  0000E0  0E60               	movlw	low PrintHelpScreen@dest
  4140  0000E2  6E18               	movwf	sprintf@sp,c
  4141  0000E4  0E00               	movlw	high PrintHelpScreen@dest
  4142  0000E6  6E19               	movwf	sprintf@sp+1,c
  4143  0000E8  0E03               	movlw	low STR_9
  4144  0000EA  6E1A               	movwf	sprintf@f,c
  4145  0000EC  0E7F               	movlw	high STR_9
  4146  0000EE  6E1B               	movwf	sprintf@f+1,c
  4147  0000F0  EC6E  F009         	call	_sprintf	;wreg free
  4148                           
  4149                           ;SystemStatus.c: 150: UART_Write_Text(dest);
  4150  0000F4  0E60               	movlw	low PrintHelpScreen@dest
  4151  0000F6  6E19               	movwf	UART_Write_Text@text,c
  4152  0000F8  0E00               	movlw	high PrintHelpScreen@dest
  4153  0000FA  6E1A               	movwf	UART_Write_Text@text+1,c
  4154  0000FC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4155                           
  4156                           ;SystemStatus.c: 151: sprintf(dest, "DP <data polarity><cr>  \tSet data polarity (0-1)\r
      +                          \n");
  4157  000100  0E60               	movlw	low PrintHelpScreen@dest
  4158  000102  6E18               	movwf	sprintf@sp,c
  4159  000104  0E00               	movlw	high PrintHelpScreen@dest
  4160  000106  6E19               	movwf	sprintf@sp+1,c
  4161  000108  0EDA               	movlw	low STR_10
  4162  00010A  6E1A               	movwf	sprintf@f,c
  4163  00010C  0E7D               	movlw	high STR_10
  4164  00010E  6E1B               	movwf	sprintf@f+1,c
  4165  000110  EC6E  F009         	call	_sprintf	;wreg free
  4166                           
  4167                           ;SystemStatus.c: 152: UART_Write_Text(dest);
  4168  000114  0E60               	movlw	low PrintHelpScreen@dest
  4169  000116  6E19               	movwf	UART_Write_Text@text,c
  4170  000118  0E00               	movlw	high PrintHelpScreen@dest
  4171  00011A  6E1A               	movwf	UART_Write_Text@text+1,c
  4172  00011C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4173                           
  4174                           ;SystemStatus.c: 153: sprintf(dest, "DE <setup SOQPSK><cr>  \tSet setup SOQPSK (0-1)\r\n
      +                          ");
  4175  000120  0E60               	movlw	low PrintHelpScreen@dest
  4176  000122  6E18               	movwf	sprintf@sp,c
  4177  000124  0E00               	movlw	high PrintHelpScreen@dest
  4178  000126  6E19               	movwf	sprintf@sp+1,c
  4179  000128  0E70               	movlw	low STR_11
  4180  00012A  6E1A               	movwf	sprintf@f,c
  4181  00012C  0E7E               	movlw	high STR_11
  4182  00012E  6E1B               	movwf	sprintf@f+1,c
  4183  000130  EC6E  F009         	call	_sprintf	;wreg free
  4184                           
  4185                           ;SystemStatus.c: 154: UART_Write_Text(dest);
  4186  000134  0E60               	movlw	low PrintHelpScreen@dest
  4187  000136  6E19               	movwf	UART_Write_Text@text,c
  4188  000138  0E00               	movlw	high PrintHelpScreen@dest
  4189  00013A  6E1A               	movwf	UART_Write_Text@text+1,c
  4190  00013C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4191                           
  4192                           ;SystemStatus.c: 155: sprintf(dest, "RP <power height><cr>  \tSet power height (0-1)\r\n
      +                          ");
  4193  000140  0E60               	movlw	low PrintHelpScreen@dest
  4194  000142  6E18               	movwf	sprintf@sp,c
  4195  000144  0E00               	movlw	high PrintHelpScreen@dest
  4196  000146  6E19               	movwf	sprintf@sp+1,c
  4197  000148  0ED2               	movlw	low STR_12
  4198  00014A  6E1A               	movwf	sprintf@f,c
  4199  00014C  0E7E               	movlw	high STR_12
  4200  00014E  6E1B               	movwf	sprintf@f+1,c
  4201  000150  EC6E  F009         	call	_sprintf	;wreg free
  4202                           
  4203                           ;SystemStatus.c: 156: UART_Write_Text(dest);
  4204  000154  0E60               	movlw	low PrintHelpScreen@dest
  4205  000156  6E19               	movwf	UART_Write_Text@text,c
  4206  000158  0E00               	movlw	high PrintHelpScreen@dest
  4207  00015A  6E1A               	movwf	UART_Write_Text@text+1,c
  4208  00015C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4209                           
  4210                           ;SystemStatus.c: 157: sprintf(dest, "RF <power comand><cr>  \tSet power comand (0-1)\r\n
      +                          ");
  4211  000160  0E60               	movlw	low PrintHelpScreen@dest
  4212  000162  6E18               	movwf	sprintf@sp,c
  4213  000164  0E00               	movlw	high PrintHelpScreen@dest
  4214  000166  6E19               	movwf	sprintf@sp+1,c
  4215  000168  0EA1               	movlw	low STR_13
  4216  00016A  6E1A               	movwf	sprintf@f,c
  4217  00016C  0E7E               	movlw	high STR_13
  4218  00016E  6E1B               	movwf	sprintf@f+1,c
  4219  000170  EC6E  F009         	call	_sprintf	;wreg free
  4220                           
  4221                           ;SystemStatus.c: 158: UART_Write_Text(dest);
  4222  000174  0E60               	movlw	low PrintHelpScreen@dest
  4223  000176  6E19               	movwf	UART_Write_Text@text,c
  4224  000178  0E00               	movlw	high PrintHelpScreen@dest
  4225  00017A  6E1A               	movwf	UART_Write_Text@text+1,c
  4226  00017C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4227                           
  4228                           ;SystemStatus.c: 159: sprintf(dest, "RA <randomizer><cr>  \tSet with/without randomizer 
      +                          (0-1)\r\n");
  4229  000180  0E60               	movlw	low PrintHelpScreen@dest
  4230  000182  6E18               	movwf	sprintf@sp,c
  4231  000184  0E00               	movlw	high PrintHelpScreen@dest
  4232  000186  6E19               	movwf	sprintf@sp+1,c
  4233  000188  0EC6               	movlw	low STR_14
  4234  00018A  6E1A               	movwf	sprintf@f,c
  4235  00018C  0E7C               	movlw	high STR_14
  4236  00018E  6E1B               	movwf	sprintf@f+1,c
  4237  000190  EC6E  F009         	call	_sprintf	;wreg free
  4238                           
  4239                           ;SystemStatus.c: 160: UART_Write_Text(dest);
  4240  000194  0E60               	movlw	low PrintHelpScreen@dest
  4241  000196  6E19               	movwf	UART_Write_Text@text,c
  4242  000198  0E00               	movlw	high PrintHelpScreen@dest
  4243  00019A  6E1A               	movwf	UART_Write_Text@text+1,c
  4244  00019C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4245                           
  4246                           ;SystemStatus.c: 161: sprintf(dest, "FR <frequency><cr>  \tSet frequency (2200.0-2400.0)
      +                          \r\n");
  4247  0001A0  0E60               	movlw	low PrintHelpScreen@dest
  4248  0001A2  6E18               	movwf	sprintf@sp,c
  4249  0001A4  0E00               	movlw	high PrintHelpScreen@dest
  4250  0001A6  6E19               	movwf	sprintf@sp+1,c
  4251  0001A8  0E70               	movlw	low STR_15
  4252  0001AA  6E1A               	movwf	sprintf@f,c
  4253  0001AC  0E7D               	movlw	high STR_15
  4254  0001AE  6E1B               	movwf	sprintf@f+1,c
  4255  0001B0  EC6E  F009         	call	_sprintf	;wreg free
  4256                           
  4257                           ;SystemStatus.c: 162: UART_Write_Text(dest);
  4258  0001B4  0E60               	movlw	low PrintHelpScreen@dest
  4259  0001B6  6E19               	movwf	UART_Write_Text@text,c
  4260  0001B8  0E00               	movlw	high PrintHelpScreen@dest
  4261  0001BA  6E1A               	movwf	UART_Write_Text@text+1,c
  4262  0001BC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4263                           
  4264                           ;SystemStatus.c: 163: sprintf(dest, "MO <mode><cr>  \tSet mode (0-3)\r\n");
  4265  0001C0  0E60               	movlw	low PrintHelpScreen@dest
  4266  0001C2  6E18               	movwf	sprintf@sp,c
  4267  0001C4  0E00               	movlw	high PrintHelpScreen@dest
  4268  0001C6  6E19               	movwf	sprintf@sp+1,c
  4269  0001C8  0E31               	movlw	low STR_16
  4270  0001CA  6E1A               	movwf	sprintf@f,c
  4271  0001CC  0E7F               	movlw	high STR_16
  4272  0001CE  6E1B               	movwf	sprintf@f+1,c
  4273  0001D0  EC6E  F009         	call	_sprintf	;wreg free
  4274                           
  4275                           ;SystemStatus.c: 164: UART_Write_Text(dest);
  4276  0001D4  0E60               	movlw	low PrintHelpScreen@dest
  4277  0001D6  6E19               	movwf	UART_Write_Text@text,c
  4278  0001D8  0E00               	movlw	high PrintHelpScreen@dest
  4279  0001DA  6E1A               	movwf	UART_Write_Text@text+1,c
  4280  0001DC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4281                           
  4282                           ;SystemStatus.c: 165: sprintf(dest, "IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\
      +                          n");
  4283  0001E0  0E60               	movlw	low PrintHelpScreen@dest
  4284  0001E2  6E18               	movwf	sprintf@sp,c
  4285  0001E4  0E00               	movlw	high PrintHelpScreen@dest
  4286  0001E6  6E19               	movwf	sprintf@sp+1,c
  4287  0001E8  0E0D               	movlw	low STR_17
  4288  0001EA  6E1A               	movwf	sprintf@f,c
  4289  0001EC  0E7E               	movlw	high STR_17
  4290  0001EE  6E1B               	movwf	sprintf@f+1,c
  4291  0001F0  EC6E  F009         	call	_sprintf	;wreg free
  4292                           
  4293                           ;SystemStatus.c: 166: UART_Write_Text(dest);
  4294  0001F4  0E60               	movlw	low PrintHelpScreen@dest
  4295  0001F6  6E19               	movwf	UART_Write_Text@text,c
  4296  0001F8  0E00               	movlw	high PrintHelpScreen@dest
  4297  0001FA  6E1A               	movwf	UART_Write_Text@text+1,c
  4298  0001FC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4299                           
  4300                           ;SystemStatus.c: 167: sprintf(dest, "ID <internal pattern><cr>  \tSet internal pattern (
      +                          0-3)\r\n");
  4301  000200  0E60               	movlw	low PrintHelpScreen@dest
  4302  000202  6E18               	movwf	sprintf@sp,c
  4303  000204  0E00               	movlw	high PrintHelpScreen@dest
  4304  000206  6E19               	movwf	sprintf@sp+1,c
  4305  000208  0E00               	movlw	low STR_18
  4306  00020A  6E1A               	movwf	sprintf@f,c
  4307  00020C  0E7D               	movlw	high STR_18
  4308  00020E  6E1B               	movwf	sprintf@f+1,c
  4309  000210  EC6E  F009         	call	_sprintf	;wreg free
  4310                           
  4311                           ;SystemStatus.c: 168: UART_Write_Text(dest);
  4312  000214  0E60               	movlw	low PrintHelpScreen@dest
  4313  000216  6E19               	movwf	UART_Write_Text@text,c
  4314  000218  0E00               	movlw	high PrintHelpScreen@dest
  4315  00021A  6E1A               	movwf	UART_Write_Text@text+1,c
  4316  00021C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4317                           
  4318                           ;SystemStatus.c: 169: sprintf(dest, "VE <cr>  \tdisplay version info\r\n");
  4319  000220  0E60               	movlw	low PrintHelpScreen@dest
  4320  000222  6E18               	movwf	sprintf@sp,c
  4321  000224  0E00               	movlw	high PrintHelpScreen@dest
  4322  000226  6E19               	movwf	sprintf@sp+1,c
  4323  000228  0E52               	movlw	low STR_19
  4324  00022A  6E1A               	movwf	sprintf@f,c
  4325  00022C  0E7F               	movlw	high STR_19
  4326  00022E  6E1B               	movwf	sprintf@f+1,c
  4327  000230  EC6E  F009         	call	_sprintf	;wreg free
  4328                           
  4329                           ;SystemStatus.c: 170: UART_Write_Text(dest);
  4330  000234  0E60               	movlw	low PrintHelpScreen@dest
  4331  000236  6E19               	movwf	UART_Write_Text@text,c
  4332  000238  0E00               	movlw	high PrintHelpScreen@dest
  4333  00023A  6E1A               	movwf	UART_Write_Text@text+1,c
  4334  00023C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4335                           
  4336                           ;SystemStatus.c: 171: sprintf(dest, "VS <major>.<minor> <cr>  \tset the setup file versi
      +                          on\r\n");
  4337  000240  0E60               	movlw	low PrintHelpScreen@dest
  4338  000242  6E18               	movwf	sprintf@sp,c
  4339  000244  0E00               	movlw	high PrintHelpScreen@dest
  4340  000246  6E19               	movwf	sprintf@sp+1,c
  4341  000248  0E39               	movlw	low STR_20
  4342  00024A  6E1A               	movwf	sprintf@f,c
  4343  00024C  0E7D               	movlw	high STR_20
  4344  00024E  6E1B               	movwf	sprintf@f+1,c
  4345  000250  EC6E  F009         	call	_sprintf	;wreg free
  4346                           
  4347                           ;SystemStatus.c: 172: UART_Write_Text(dest);
  4348  000254  0E60               	movlw	low PrintHelpScreen@dest
  4349  000256  6E19               	movwf	UART_Write_Text@text,c
  4350  000258  0E00               	movlw	high PrintHelpScreen@dest
  4351  00025A  6E1A               	movwf	UART_Write_Text@text+1,c
  4352  00025C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4353                           
  4354                           ;SystemStatus.c: 173: sprintf(dest, "VP <power level><cr>  \tSet power level (20-40)\r\n
      +                          ");
  4355  000260  0E60               	movlw	low PrintHelpScreen@dest
  4356  000262  6E18               	movwf	sprintf@sp,c
  4357  000264  0E00               	movlw	high PrintHelpScreen@dest
  4358  000266  6E19               	movwf	sprintf@sp+1,c
  4359  000268  0E3F               	movlw	low STR_21
  4360  00026A  6E1A               	movwf	sprintf@f,c
  4361  00026C  0E7E               	movlw	high STR_21
  4362  00026E  6E1B               	movwf	sprintf@f+1,c
  4363  000270  EC6E  F009         	call	_sprintf	;wreg free
  4364                           
  4365                           ;SystemStatus.c: 174: UART_Write_Text(dest);
  4366  000274  0E60               	movlw	low PrintHelpScreen@dest
  4367  000276  6E19               	movwf	UART_Write_Text@text,c
  4368  000278  0E00               	movlw	high PrintHelpScreen@dest
  4369  00027A  6E1A               	movwf	UART_Write_Text@text+1,c
  4370  00027C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4371                           
  4372                           ;SystemStatus.c: 175: sprintf(dest, "VL <power high><cr>  \tSet high power level (20-40)
      +                          \r\n");
  4373  000280  0E60               	movlw	low PrintHelpScreen@dest
  4374  000282  6E18               	movwf	sprintf@sp,c
  4375  000284  0E00               	movlw	high PrintHelpScreen@dest
  4376  000286  6E19               	movwf	sprintf@sp+1,c
  4377  000288  0EA5               	movlw	low STR_22
  4378  00028A  6E1A               	movwf	sprintf@f,c
  4379  00028C  0E7D               	movlw	high STR_22
  4380  00028E  6E1B               	movwf	sprintf@f+1,c
  4381  000290  EC6E  F009         	call	_sprintf	;wreg free
  4382                           
  4383                           ;SystemStatus.c: 176: UART_Write_Text(dest);
  4384  000294  0E60               	movlw	low PrintHelpScreen@dest
  4385  000296  6E19               	movwf	UART_Write_Text@text,c
  4386  000298  0E00               	movlw	high PrintHelpScreen@dest
  4387  00029A  6E1A               	movwf	UART_Write_Text@text+1,c
  4388  00029C  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4389                           
  4390                           ;SystemStatus.c: 177: sprintf(dest, "VM <negative power level><cr>  \tSet negative power
      +                           level\r\n");
  4391  0002A0  0E60               	movlw	low PrintHelpScreen@dest
  4392  0002A2  6E18               	movwf	sprintf@sp,c
  4393  0002A4  0E00               	movlw	high PrintHelpScreen@dest
  4394  0002A6  6E19               	movwf	sprintf@sp+1,c
  4395  0002A8  0E8B               	movlw	low STR_23
  4396  0002AA  6E1A               	movwf	sprintf@f,c
  4397  0002AC  0E7C               	movlw	high STR_23
  4398  0002AE  6E1B               	movwf	sprintf@f+1,c
  4399  0002B0  EC6E  F009         	call	_sprintf	;wreg free
  4400                           
  4401                           ;SystemStatus.c: 178: UART_Write_Text(dest);
  4402  0002B4  0E60               	movlw	low PrintHelpScreen@dest
  4403  0002B6  6E19               	movwf	UART_Write_Text@text,c
  4404  0002B8  0E00               	movlw	high PrintHelpScreen@dest
  4405  0002BA  6E1A               	movwf	UART_Write_Text@text+1,c
  4406  0002BC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4407                           
  4408                           ;SystemStatus.c: 179: sprintf(dest, "IC <bitrate><cr>  \tSet birtate (1.00-30.00DBps)\r\
      +                          n");
  4409  0002C0  0E60               	movlw	low PrintHelpScreen@dest
  4410  0002C2  6E18               	movwf	sprintf@sp,c
  4411  0002C4  0E00               	movlw	high PrintHelpScreen@dest
  4412  0002C6  6E19               	movwf	sprintf@sp+1,c
  4413  0002C8  0E0D               	movlw	low STR_17
  4414  0002CA  6E1A               	movwf	sprintf@f,c
  4415  0002CC  0E7E               	movlw	high STR_17
  4416  0002CE  6E1B               	movwf	sprintf@f+1,c
  4417  0002D0  EC6E  F009         	call	_sprintf	;wreg free
  4418                           
  4419                           ;SystemStatus.c: 180: UART_Write_Text(dest);
  4420  0002D4  0E60               	movlw	low PrintHelpScreen@dest
  4421  0002D6  6E19               	movwf	UART_Write_Text@text,c
  4422  0002D8  0E00               	movlw	high PrintHelpScreen@dest
  4423  0002DA  6E1A               	movwf	UART_Write_Text@text+1,c
  4424  0002DC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4425                           
  4426                           ;SystemStatus.c: 181: sprintf(dest, "ID <internal pattern><cr>  \tSet internal pattern (
      +                          0-3)\r\n");
  4427  0002E0  0E60               	movlw	low PrintHelpScreen@dest
  4428  0002E2  6E18               	movwf	sprintf@sp,c
  4429  0002E4  0E00               	movlw	high PrintHelpScreen@dest
  4430  0002E6  6E19               	movwf	sprintf@sp+1,c
  4431  0002E8  0E00               	movlw	low STR_18
  4432  0002EA  6E1A               	movwf	sprintf@f,c
  4433  0002EC  0E7D               	movlw	high STR_18
  4434  0002EE  6E1B               	movwf	sprintf@f+1,c
  4435  0002F0  EC6E  F009         	call	_sprintf	;wreg free
  4436                           
  4437                           ;SystemStatus.c: 182: UART_Write_Text(dest);
  4438  0002F4  0E60               	movlw	low PrintHelpScreen@dest
  4439  0002F6  6E19               	movwf	UART_Write_Text@text,c
  4440  0002F8  0E00               	movlw	high PrintHelpScreen@dest
  4441  0002FA  6E1A               	movwf	UART_Write_Text@text+1,c
  4442  0002FC  EC9D  F010         	call	_UART_Write_Text	;wreg free
  4443  000300  0012               	return		;funcret
  4444  000302                     __end_of_PrintHelpScreen:
  4445                           	opt stack 0
  4446                           tblptru	equ	0xFF8
  4447                           tblptrh	equ	0xFF7
  4448                           tblptrl	equ	0xFF6
  4449                           tablat	equ	0xFF5
  4450                           prodh	equ	0xFF4
  4451                           prodl	equ	0xFF3
  4452                           intcon	equ	0xFF2
  4453                           intcon2	equ	0xFF1
  4454                           postinc0	equ	0xFEE
  4455                           wreg	equ	0xFE8
  4456                           postdec1	equ	0xFE5
  4457                           fsr1l	equ	0xFE1
  4458                           indf2	equ	0xFDF
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _sprintf *****************
  4464 ;; Defined at:
  4465 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  sp              2   23[COMRAM] PTR unsigned char 
  4468 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), 
  4469 ;;  f               2   25[COMRAM] PTR const unsigned char 
  4470 ;;		 -> STR_25(57), STR_24(50), STR_23(59), STR_22(53), 
  4471 ;;		 -> STR_21(49), STR_20(55), STR_19(33), STR_18(57), 
  4472 ;;		 -> STR_17(50), STR_16(33), STR_15(53), STR_14(58), 
  4473 ;;		 -> STR_13(49), STR_12(49), STR_11(49), STR_10(51), 
  4474 ;;		 -> STR_9(46), STR_8(31), STR_6(20), STR_4(20), 
  4475 ;;		 -> STR_3(21), STR_2(20), STR_1(31), 
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  tmpval          4    0        struct .
  4478 ;;  cp              2   33[COMRAM] PTR const unsigned char 
  4479 ;;		 -> STR_26(7), STR_7(9), STR_5(12), 
  4480 ;;  ap              2   30[COMRAM] PTR void [1]
  4481 ;;		 -> ?_sprintf(2), 
  4482 ;;  len             2    0        unsigned int 
  4483 ;;  val             2    0        unsigned int 
  4484 ;;  c               1   32[COMRAM] char 
  4485 ;;  flag            1   29[COMRAM] unsigned char 
  4486 ;;  prec            1    0        char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2   23[COMRAM] int 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4496 ;;      Params:         6       0       0       0       0       0       0
  4497 ;;      Locals:         6       0       0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0
  4499 ;;      Totals:        12       0       0       0       0       0       0
  4500 ;;Total ram usage:       12 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_SendUartSystemInitMessage
  4507 ;;		_PrintHelpScreen
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text21
  4512  0012DC                     __ptext21:
  4513                           	opt stack 0
  4514  0012DC                     _sprintf:
  4515                           	opt stack 26
  4516                           
  4517                           ;doprnt.c: 494: va_list ap;
  4518                           ;doprnt.c: 499: signed char c;
  4519                           ;doprnt.c: 506: signed char prec;
  4520                           ;doprnt.c: 508: unsigned char flag;
  4521                           ;doprnt.c: 523: union {
  4522                           ;doprnt.c: 524: unsigned long vd;
  4523                           ;doprnt.c: 525: double integ;
  4524                           ;doprnt.c: 526: } tmpval;
  4525                           ;doprnt.c: 528: unsigned int val;
  4526                           ;doprnt.c: 529: unsigned len;
  4527                           ;doprnt.c: 530: const char * cp;
  4528                           ;doprnt.c: 533: *ap = __va_start();
  4529                           
  4530                           ;incstack = 0
  4531  0012DC  0E1C               	movlw	low (?_sprintf+4)
  4532  0012DE  6E1F               	movwf	sprintf@ap,c
  4533  0012E0  0E00               	movlw	high (?_sprintf+4)
  4534  0012E2  6E20               	movwf	sprintf@ap+1,c
  4535                           
  4536                           ;doprnt.c: 536: while(c = *f++) {
  4537  0012E4  D04E               	goto	l1448
  4538  0012E6                     
  4539                           ;doprnt.c: 538: if(c != '%')
  4540  0012E6  0E25               	movlw	37
  4541  0012E8  1821               	xorwf	sprintf@c,w,c
  4542  0012EA  B4D8               	btfsc	status,2,c
  4543  0012EC  D009               	goto	l1438
  4544                           
  4545                           ;doprnt.c: 540: {
  4546                           ;doprnt.c: 541: ((*sp++ = (c)));
  4547  0012EE  C018  FFD9         	movff	sprintf@sp,fsr2l
  4548  0012F2  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  4549  0012F6  C021  FFDF         	movff	sprintf@c,indf2
  4550  0012FA  4A18               	infsnz	sprintf@sp,f,c
  4551  0012FC  2A19               	incf	sprintf@sp+1,f,c
  4552                           
  4553                           ;doprnt.c: 542: continue;
  4554  0012FE  D041               	goto	l1448
  4555  001300                     l1438:
  4556                           
  4557                           ;doprnt.c: 543: }
  4558                           ;doprnt.c: 548: flag = 0;
  4559  001300  0E00               	movlw	0
  4560  001302  6E1E               	movwf	sprintf@flag,c
  4561                           
  4562                           ;doprnt.c: 635: switch(c = *f++) {
  4563  001304  D02E               	goto	l1439
  4564  001306                     
  4565                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4566  001306  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4567  00130A  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4568  00130E  CFDE F022          	movff	postinc2,sprintf@cp
  4569  001312  CFDD F023          	movff	postdec2,sprintf@cp+1
  4570  001316  0E02               	movlw	2
  4571  001318  261F               	addwf	sprintf@ap,f,c
  4572  00131A  0E00               	movlw	0
  4573  00131C  2220               	addwfc	sprintf@ap+1,f,c
  4574                           
  4575                           ;doprnt.c: 740: if(!cp)
  4576  00131E  5022               	movf	sprintf@cp,w,c
  4577  001320  1023               	iorwf	sprintf@cp+1,w,c
  4578  001322  A4D8               	btfss	status,2,c
  4579  001324  D014               	goto	l1444
  4580                           
  4581                           ;doprnt.c: 741: cp = "(null)";
  4582  001326  0EF8               	movlw	low STR_26
  4583  001328  6E22               	movwf	sprintf@cp,c
  4584  00132A  0E7F               	movlw	high STR_26
  4585  00132C  6E23               	movwf	sprintf@cp+1,c
  4586                           
  4587                           ;doprnt.c: 777: while(*cp)
  4588  00132E  D00F               	goto	l1444
  4589  001330                     
  4590                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  4591  001330  C022  FFF6         	movff	sprintf@cp,tblptrl
  4592  001334  C023  FFF7         	movff	sprintf@cp+1,tblptrh
  4593  001338                     	if	0	;tblptru may be non-zero
  4594  001338                     	endif
  4595  001338                     	if	0	;tblptru may be non-zero
  4596  001338                     	endif
  4597  001338  C018  FFD9         	movff	sprintf@sp,fsr2l
  4598  00133C  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  4599  001340  0008               	tblrd		*
  4600  001342  CFF5 FFDF          	movff	tablat,indf2
  4601  001346  4A22               	infsnz	sprintf@cp,f,c
  4602  001348  2A23               	incf	sprintf@cp+1,f,c
  4603  00134A  4A18               	infsnz	sprintf@sp,f,c
  4604  00134C  2A19               	incf	sprintf@sp+1,f,c
  4605  00134E                     l1444:
  4606  00134E  C022  FFF6         	movff	sprintf@cp,tblptrl
  4607  001352  C023  FFF7         	movff	sprintf@cp+1,tblptrh
  4608  001356                     	if	0	;tblptru may be non-zero
  4609  001356                     	endif
  4610  001356                     	if	0	;tblptru may be non-zero
  4611  001356                     	endif
  4612  001356  0008               	tblrd		*
  4613  001358  50F5               	movf	tablat,w,c
  4614  00135A  0900               	iorlw	0
  4615  00135C  B4D8               	btfsc	status,2,c
  4616  00135E  D011               	goto	l1448
  4617  001360  D7E7               	goto	l1445
  4618  001362                     l1439:
  4619  001362  C01A  FFF6         	movff	sprintf@f,tblptrl
  4620  001366  C01B  FFF7         	movff	sprintf@f+1,tblptrh
  4621  00136A  4A1A               	infsnz	sprintf@f,f,c
  4622  00136C  2A1B               	incf	sprintf@f+1,f,c
  4623  00136E                     	if	0	;tblptru may be non-zero
  4624  00136E                     	endif
  4625  00136E                     	if	0	;tblptru may be non-zero
  4626  00136E                     	endif
  4627  00136E  0008               	tblrd		*
  4628  001370  CFF5 F021          	movff	tablat,sprintf@c
  4629  001374  5021               	movf	sprintf@c,w,c
  4630                           
  4631                           ; Switch size 1, requested type "space"
  4632                           ; Number of cases is 2, Range of values is 0 to 115
  4633                           ; switch strategies available:
  4634                           ; Name         Instructions Cycles
  4635                           ; simple_byte            7     4 (average)
  4636                           ;	Chosen strategy is simple_byte
  4637  001376  0A00               	xorlw	0	; case 0
  4638  001378  B4D8               	btfsc	status,2,c
  4639  00137A  D00F               	goto	u4090
  4640  00137C  0A73               	xorlw	115	; case 115
  4641  00137E  B4D8               	btfsc	status,2,c
  4642  001380  D7C2               	goto	l1442
  4643  001382                     l1448:
  4644                           
  4645                           ;doprnt.c: 1422: {
  4646  001382  C01A  FFF6         	movff	sprintf@f,tblptrl
  4647  001386  C01B  FFF7         	movff	sprintf@f+1,tblptrh
  4648  00138A  4A1A               	infsnz	sprintf@f,f,c
  4649  00138C  2A1B               	incf	sprintf@f+1,f,c
  4650  00138E                     	if	0	;tblptru may be non-zero
  4651  00138E                     	endif
  4652  00138E                     	if	0	;tblptru may be non-zero
  4653  00138E                     	endif
  4654  00138E  0008               	tblrd		*
  4655  001390  CFF5 F021          	movff	tablat,sprintf@c
  4656  001394  5021               	movf	sprintf@c,w,c
  4657  001396  A4D8               	btfss	status,2,c
  4658  001398  D7A6               	goto	l1437
  4659  00139A                     u4090:
  4660                           
  4661                           ;doprnt.c: 1538: *sp = 0;
  4662                           
  4663                           ;doprnt.c: 1469: }
  4664                           ;doprnt.c: 1533: }
  4665                           ;doprnt.c: 1535: alldone:
  4666  00139A  C018  FFD9         	movff	sprintf@sp,fsr2l
  4667  00139E  C019  FFDA         	movff	sprintf@sp+1,fsr2h
  4668  0013A2  0E00               	movlw	0
  4669  0013A4  6EDF               	movwf	indf2,c
  4670  0013A6  0012               	return	
  4671  0013A8                     __end_of_sprintf:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           intcon	equ	0xFF2
  4680                           intcon2	equ	0xFF1
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           fsr1l	equ	0xFE1
  4685                           indf2	equ	0xFDF
  4686                           postinc2	equ	0xFDE
  4687                           postdec2	equ	0xFDD
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function _UART_Write_Text *****************
  4693 ;; Defined at:
  4694 ;;		line 93 in file "EusartApp.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  text            2   24[COMRAM] PTR unsigned char 
  4697 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  i               2   26[COMRAM] int 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4709 ;;      Params:         2       0       0       0       0       0       0
  4710 ;;      Locals:         2       0       0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0
  4712 ;;      Totals:         4       0       0       0       0       0       0
  4713 ;;Total ram usage:        4 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    4
  4716 ;; This function calls:
  4717 ;;		_EUSART1_Write
  4718 ;; This function is called by:
  4719 ;;		_SendUartSystemInitMessage
  4720 ;;		_PrintHelpScreen
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text22
  4725  00213A                     __ptext22:
  4726                           	opt stack 0
  4727  00213A                     _UART_Write_Text:
  4728                           	opt stack 25
  4729                           
  4730                           ;EusartApp.c: 95: for(int i =0;text[i]!='\0';i++)
  4731                           
  4732                           ;incstack = 0
  4733  00213A  0E00               	movlw	0
  4734  00213C  6E1C               	movwf	UART_Write_Text@i+1,c
  4735  00213E  0E00               	movlw	0
  4736  002140  6E1B               	movwf	UART_Write_Text@i,c
  4737  002142  D00B               	goto	l190
  4738  002144                     
  4739                           ;EusartApp.c: 96: {
  4740                           ;EusartApp.c: 97: EUSART1_Write(text[i]);
  4741  002144  501B               	movf	UART_Write_Text@i,w,c
  4742  002146  2419               	addwf	UART_Write_Text@text,w,c
  4743  002148  6ED9               	movwf	fsr2l,c
  4744  00214A  501C               	movf	UART_Write_Text@i+1,w,c
  4745  00214C  201A               	addwfc	UART_Write_Text@text+1,w,c
  4746  00214E  6EDA               	movwf	fsr2h,c
  4747  002150  50DF               	movf	indf2,w,c
  4748  002152  ECD6  F00F         	call	_EUSART1_Write
  4749  002156  4A1B               	infsnz	UART_Write_Text@i,f,c
  4750  002158  2A1C               	incf	UART_Write_Text@i+1,f,c
  4751  00215A                     l190:
  4752  00215A  501B               	movf	UART_Write_Text@i,w,c
  4753  00215C  2419               	addwf	UART_Write_Text@text,w,c
  4754  00215E  6ED9               	movwf	fsr2l,c
  4755  002160  501C               	movf	UART_Write_Text@i+1,w,c
  4756  002162  201A               	addwfc	UART_Write_Text@text+1,w,c
  4757  002164  6EDA               	movwf	fsr2h,c
  4758  002166  50DF               	movf	indf2,w,c
  4759  002168  B4D8               	btfsc	status,2,c
  4760  00216A  0012               	return	
  4761  00216C  D7EB               	goto	l191
  4762  00216E                     __end_of_UART_Write_Text:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           intcon2	equ	0xFF1
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postdec1	equ	0xFE5
  4775                           fsr1l	equ	0xFE1
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           postdec2	equ	0xFDD
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _EUSART1_Write *****************
  4784 ;; Defined at:
  4785 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  txData          1    wreg     unsigned char 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  txData          1   23[COMRAM] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4799 ;;      Params:         0       0       0       0       0       0       0
  4800 ;;      Locals:         1       0       0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0
  4802 ;;      Totals:         1       0       0       0       0       0       0
  4803 ;;Total ram usage:        1 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    3
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_UART_Write_Text
  4810 ;;		_WriteUartMessage
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text23
  4815  001FAC                     __ptext23:
  4816                           	opt stack 0
  4817  001FAC                     _EUSART1_Write:
  4818                           	opt stack 25
  4819                           
  4820                           ;incstack = 0
  4821                           ;EUSART1_Write@txData stored from wreg
  4822  001FAC  6E18               	movwf	EUSART1_Write@txData,c
  4823  001FAE                     
  4824                           ;eusart1.c: 160: {
  4825                           
  4826                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  4827  001FAE  0100               	movlb	0	; () banked
  4828  001FB0  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  4829  001FB2  B4D8               	btfsc	status,2,c
  4830  001FB4  D7FC               	goto	l4813
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;eusart1.c: 161: }
  4834                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  4835  001FB6  B89D               	btfsc	3997,4,c	;volatile
  4836  001FB8  D003               	goto	l831
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;eusart1.c: 164: {
  4840                           ;eusart1.c: 165: TXREG1 = txData;
  4841  001FBA  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4842                           
  4843                           ;eusart1.c: 166: }
  4844  001FBE  D012               	goto	l832
  4845  001FC0                     l831:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;eusart1.c: 167: else
  4849                           ;eusart1.c: 168: {
  4850                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  4851  001FC0  989D               	bcf	3997,4,c	;volatile
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  4855  001FC2  503A               	movf	_eusart1TxHead,w,c	;volatile
  4856  001FC4  0D01               	mullw	1
  4857  001FC6  0E00               	movlw	low _eusart1TxBuffer
  4858  001FC8  24F3               	addwf	prodl,w,c
  4859  001FCA  6ED9               	movwf	fsr2l,c
  4860  001FCC  0E01               	movlw	high _eusart1TxBuffer
  4861  001FCE  20F4               	addwfc	prodh,w,c
  4862  001FD0  6EDA               	movwf	fsr2h,c
  4863  001FD2  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  4864                           
  4865                           ; BSR set to: 0
  4866  001FD6  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  4870  001FD8  0E45               	movlw	69
  4871  001FDA  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  4872  001FDC  D002               	goto	l833
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;eusart1.c: 172: {
  4876                           ;eusart1.c: 173: eusart1TxHead = 0;
  4877  001FDE  0E00               	movlw	0
  4878  001FE0  6E3A               	movwf	_eusart1TxHead,c	;volatile
  4879  001FE2                     l833:
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;eusart1.c: 174: }
  4883                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  4884                           
  4885                           ; BSR set to: 0
  4886  001FE2  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  4887  001FE4                     l832:
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;eusart1.c: 176: }
  4891                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  4892                           
  4893                           ; BSR set to: 0
  4894  001FE4  889D               	bsf	3997,4,c	;volatile
  4895                           
  4896                           ; BSR set to: 0
  4897  001FE6  0012               	return		;funcret
  4898  001FE8                     __end_of_EUSART1_Write:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           postinc0	equ	0xFEE
  4909                           wreg	equ	0xFE8
  4910                           postdec1	equ	0xFE5
  4911                           fsr1l	equ	0xFE1
  4912                           indf2	equ	0xFDF
  4913                           postinc2	equ	0xFDE
  4914                           postdec2	equ	0xFDD
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919 ;; *************** function _InitSystemApplicationManagers *****************
  4920 ;; Defined at:
  4921 ;;		line 33 in file "SystemSettings.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;                  1    wreg      void 
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4935 ;;      Params:         0       0       0       0       0       0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0
  4938 ;;      Totals:         0       0       0       0       0       0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    7
  4942 ;; This function calls:
  4943 ;;		_ClearMcuRunTime
  4944 ;;		_DacInit
  4945 ;;		_InitAdcApplicationMgr
  4946 ;;		_InitSevenSegment
  4947 ;;		_PLLInitialize
  4948 ;;		_TMR0_StartTimer
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text24
  4955  00232E                     __ptext24:
  4956                           	opt stack 0
  4957  00232E                     _InitSystemApplicationManagers:
  4958                           	opt stack 23
  4959                           
  4960                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;incstack = 0
  4964  00232E  ECD7  F011         	call	_InitAdcApplicationMgr	;wreg free
  4965                           
  4966                           ;SystemSettings.c: 39: TMR0_StartTimer();
  4967  002332  ECFB  F011         	call	_TMR0_StartTimer	;wreg free
  4968                           
  4969                           ;SystemSettings.c: 42: InitSevenSegment();
  4970  002336  EC15  F011         	call	_InitSevenSegment	;wreg free
  4971                           
  4972                           ;SystemSettings.c: 45: PLLInitialize();
  4973  00233A  EC2F  F004         	call	_PLLInitialize	;wreg free
  4974                           
  4975                           ;SystemSettings.c: 48: ClearMcuRunTime();
  4976  00233E  ECC5  F011         	call	_ClearMcuRunTime	;wreg free
  4977                           
  4978                           ;SystemSettings.c: 51: DacInit();
  4979  002342  EC30  F00D         	call	_DacInit	;wreg free
  4980  002346  0012               	return		;funcret
  4981  002348                     __end_of_InitSystemApplicationManagers:
  4982                           	opt stack 0
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           intcon2	equ	0xFF1
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function _TMR0_StartTimer *****************
  5003 ;; Defined at:
  5004 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		None
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         0       0       0       0       0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0
  5021 ;;      Totals:         0       0       0       0       0       0       0
  5022 ;;Total ram usage:        0 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    3
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		_InitSystemApplicationManagers
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text25
  5033  0023F6                     __ptext25:
  5034                           	opt stack 0
  5035  0023F6                     _TMR0_StartTimer:
  5036                           	opt stack 26
  5037                           
  5038                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  5039                           
  5040                           ;incstack = 0
  5041  0023F6  8ED5               	bsf	4053,7,c	;volatile
  5042  0023F8  0012               	return		;funcret
  5043  0023FA                     __end_of_TMR0_StartTimer:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           intcon2	equ	0xFF1
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           postdec1	equ	0xFE5
  5056                           fsr1l	equ	0xFE1
  5057                           indf2	equ	0xFDF
  5058                           postinc2	equ	0xFDE
  5059                           postdec2	equ	0xFDD
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _PLLInitialize *****************
  5065 ;; Defined at:
  5066 ;;		line 14 in file "SyntApp.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  idx             2   45[COMRAM] int 
  5071 ;;  idx             2   43[COMRAM] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5081 ;;      Params:         0       0       0       0       0       0       0
  5082 ;;      Locals:         4       0       0       0       0       0       0
  5083 ;;      Temps:          2       0       0       0       0       0       0
  5084 ;;      Totals:         6       0       0       0       0       0       0
  5085 ;;Total ram usage:        6 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    6
  5088 ;; This function calls:
  5089 ;;		_SWSPI_send_word
  5090 ;;		_SwSpi_Set_CE_Pin
  5091 ;; This function is called by:
  5092 ;;		_InitSystemApplicationManagers
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text26
  5097  00085E                     __ptext26:
  5098                           	opt stack 0
  5099  00085E                     _PLLInitialize:
  5100                           	opt stack 23
  5101                           
  5102                           ;SyntApp.c: 17: IOCB = 0b10000000;
  5103                           
  5104                           ;incstack = 0
  5105  00085E  0E80               	movlw	128
  5106  000860  6E62               	movwf	3938,c	;volatile
  5107                           
  5108                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  5109  000862  0E01               	movlw	1
  5110  000864  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5111  000866  0E00               	movlw	0
  5112  000868  ECF4  F00F         	call	_SwSpi_Set_CE_Pin
  5113                           
  5114                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  5115  00086C  0E00               	movlw	0
  5116  00086E  6E2D               	movwf	PLLInitialize@idx+1,c
  5117  000870  0E00               	movlw	0
  5118  000872  6E2C               	movwf	PLLInitialize@idx,c
  5119  000874                     l5193:
  5120  000874  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  5121  000876  D006               	goto	l480
  5122  000878  502D               	movf	PLLInitialize@idx+1,w,c
  5123  00087A  E128               	bnz	l5203
  5124  00087C  0E0D               	movlw	13
  5125  00087E  5C2C               	subwf	PLLInitialize@idx,w,c
  5126  000880  B0D8               	btfsc	status,0,c
  5127  000882  D024               	goto	u4030
  5128  000884                     l480:
  5129                           
  5130                           ;SyntApp.c: 25: {
  5131                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
  5132  000884  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  5133  000888  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  5134  00088C  90D8               	bcf	status,0,c
  5135  00088E  362A               	rlcf	??_PLLInitialize,f,c
  5136  000890  362B               	rlcf	??_PLLInitialize+1,f,c
  5137  000892  90D8               	bcf	status,0,c
  5138  000894  362A               	rlcf	??_PLLInitialize,f,c
  5139  000896  362B               	rlcf	??_PLLInitialize+1,f,c
  5140  000898  0EE3               	movlw	low _TEST_PLL_REGISTERS
  5141  00089A  242A               	addwf	??_PLLInitialize,w,c
  5142  00089C  6EF6               	movwf	tblptrl,c
  5143  00089E  0E7B               	movlw	high _TEST_PLL_REGISTERS
  5144  0008A0  202B               	addwfc	??_PLLInitialize+1,w,c
  5145  0008A2  6EF7               	movwf	tblptrh,c
  5146  0008A4                     	if	0	;There are less than 3 active tblptr bytes
  5147  0008A4                     	endif
  5148  0008A4  0009               	tblrd		*+
  5149  0008A6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5150  0008AA  0009               	tblrd		*+
  5151  0008AC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5152  0008B0  0009               	tblrd		*+
  5153  0008B2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5154  0008B6  000A               	tblrd		*-
  5155  0008B8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5156  0008BC  0E03               	movlw	3
  5157  0008BE  6E25               	movwf	SWSPI_send_word@dataSize,c
  5158  0008C0  0E00               	movlw	0
  5159  0008C2  EC95  F00A         	call	_SWSPI_send_word
  5160  0008C6  4A2C               	infsnz	PLLInitialize@idx,f,c
  5161  0008C8  2A2D               	incf	PLLInitialize@idx+1,f,c
  5162  0008CA  D7D4               	goto	l5193
  5163  0008CC                     u4030:
  5164  0008CC                     l5203:
  5165                           
  5166                           ;SyntApp.c: 27: }
  5167                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  5168  0008CC  0E01               	movlw	1
  5169  0008CE  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5170  0008D0  0E01               	movlw	1
  5171  0008D2  ECF4  F00F         	call	_SwSpi_Set_CE_Pin
  5172                           
  5173                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  5174  0008D6  0E00               	movlw	0
  5175  0008D8  6E2F               	movwf	PLLInitialize@idx_810+1,c
  5176  0008DA  0E00               	movlw	0
  5177  0008DC  6E2E               	movwf	PLLInitialize@idx_810,c
  5178  0008DE                     l5207:
  5179  0008DE  BE2F               	btfsc	PLLInitialize@idx_810+1,7,c
  5180  0008E0  D006               	goto	l482
  5181  0008E2  502F               	movf	PLLInitialize@idx_810+1,w,c
  5182  0008E4  E128               	bnz	l5217
  5183  0008E6  0E0D               	movlw	13
  5184  0008E8  5C2E               	subwf	PLLInitialize@idx_810,w,c
  5185  0008EA  B0D8               	btfsc	status,0,c
  5186  0008EC  D024               	goto	u4050
  5187  0008EE                     l482:
  5188                           
  5189                           ;SyntApp.c: 40: {
  5190                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  5191  0008EE  C02E  F02A         	movff	PLLInitialize@idx_810,??_PLLInitialize
  5192  0008F2  C02F  F02B         	movff	PLLInitialize@idx_810+1,??_PLLInitialize+1
  5193  0008F6  90D8               	bcf	status,0,c
  5194  0008F8  362A               	rlcf	??_PLLInitialize,f,c
  5195  0008FA  362B               	rlcf	??_PLLInitialize+1,f,c
  5196  0008FC  90D8               	bcf	status,0,c
  5197  0008FE  362A               	rlcf	??_PLLInitialize,f,c
  5198  000900  362B               	rlcf	??_PLLInitialize+1,f,c
  5199  000902  0E17               	movlw	low _PLL_INIT_REGISTERS
  5200  000904  242A               	addwf	??_PLLInitialize,w,c
  5201  000906  6EF6               	movwf	tblptrl,c
  5202  000908  0E7C               	movlw	high _PLL_INIT_REGISTERS
  5203  00090A  202B               	addwfc	??_PLLInitialize+1,w,c
  5204  00090C  6EF7               	movwf	tblptrh,c
  5205  00090E                     	if	0	;There are less than 3 active tblptr bytes
  5206  00090E                     	endif
  5207  00090E  0009               	tblrd		*+
  5208  000910  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5209  000914  0009               	tblrd		*+
  5210  000916  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5211  00091A  0009               	tblrd		*+
  5212  00091C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5213  000920  000A               	tblrd		*-
  5214  000922  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5215  000926  0E03               	movlw	3
  5216  000928  6E25               	movwf	SWSPI_send_word@dataSize,c
  5217  00092A  0E01               	movlw	1
  5218  00092C  EC95  F00A         	call	_SWSPI_send_word
  5219  000930  4A2E               	infsnz	PLLInitialize@idx_810,f,c
  5220  000932  2A2F               	incf	PLLInitialize@idx_810+1,f,c
  5221  000934  D7D4               	goto	l5207
  5222  000936                     u4050:
  5223  000936                     l5217:
  5224                           
  5225                           ;SyntApp.c: 42: }
  5226                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  5227  000936  0E27               	movlw	low (_PLL_INIT_REGISTERS+16)
  5228  000938  6EF6               	movwf	tblptrl,c
  5229  00093A  0E7C               	movlw	high (_PLL_INIT_REGISTERS+16)
  5230  00093C  6EF7               	movwf	tblptrh,c
  5231  00093E                     	if	0	;tblptru may be non-zero
  5232  00093E                     	endif
  5233  00093E                     	if	0	;tblptru may be non-zero
  5234  00093E                     	endif
  5235  00093E  0009               	tblrd		*+
  5236  000940  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5237  000944  0009               	tblrd		*+
  5238  000946  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5239  00094A  0009               	tblrd		*+
  5240  00094C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5241  000950  000A               	tblrd		*-
  5242  000952  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5243  000956  0E03               	movlw	3
  5244  000958  6E25               	movwf	SWSPI_send_word@dataSize,c
  5245  00095A  0E01               	movlw	1
  5246  00095C  EC95  F00A         	call	_SWSPI_send_word
  5247                           
  5248                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  5249  000960  0E1F               	movlw	low (_PLL_INIT_REGISTERS+8)
  5250  000962  6EF6               	movwf	tblptrl,c
  5251  000964  0E7C               	movlw	high (_PLL_INIT_REGISTERS+8)
  5252  000966  6EF7               	movwf	tblptrh,c
  5253  000968                     	if	0	;tblptru may be non-zero
  5254  000968                     	endif
  5255  000968                     	if	0	;tblptru may be non-zero
  5256  000968                     	endif
  5257  000968  0009               	tblrd		*+
  5258  00096A  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5259  00096E  0009               	tblrd		*+
  5260  000970  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5261  000974  0009               	tblrd		*+
  5262  000976  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5263  00097A  000A               	tblrd		*-
  5264  00097C  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5265  000980  0E03               	movlw	3
  5266  000982  6E25               	movwf	SWSPI_send_word@dataSize,c
  5267  000984  0E01               	movlw	1
  5268  000986  EC95  F00A         	call	_SWSPI_send_word
  5269                           
  5270                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  5271  00098A  0E1B               	movlw	low (_PLL_INIT_REGISTERS+4)
  5272  00098C  6EF6               	movwf	tblptrl,c
  5273  00098E  0E7C               	movlw	high (_PLL_INIT_REGISTERS+4)
  5274  000990  6EF7               	movwf	tblptrh,c
  5275  000992                     	if	0	;tblptru may be non-zero
  5276  000992                     	endif
  5277  000992                     	if	0	;tblptru may be non-zero
  5278  000992                     	endif
  5279  000992  0009               	tblrd		*+
  5280  000994  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5281  000998  0009               	tblrd		*+
  5282  00099A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5283  00099E  0009               	tblrd		*+
  5284  0009A0  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5285  0009A4  000A               	tblrd		*-
  5286  0009A6  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5287  0009AA  0E03               	movlw	3
  5288  0009AC  6E25               	movwf	SWSPI_send_word@dataSize,c
  5289  0009AE  0E01               	movlw	1
  5290  0009B0  EC95  F00A         	call	_SWSPI_send_word
  5291                           
  5292                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  5293  0009B4  0E17               	movlw	low _PLL_INIT_REGISTERS
  5294  0009B6  6EF6               	movwf	tblptrl,c
  5295  0009B8                     	if	1	;There is more than 1 active tblptr byte
  5296  0009B8  0E7C               	movlw	high _PLL_INIT_REGISTERS
  5297  0009BA  6EF7               	movwf	tblptrh,c
  5298  0009BC                     	endif
  5299  0009BC                     	if	0	;There are less than 3 active tblptr bytes
  5300  0009BC                     	endif
  5301  0009BC  0009               	tblrd		*+
  5302  0009BE  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  5303  0009C2  0009               	tblrd		*+
  5304  0009C4  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  5305  0009C8  0009               	tblrd		*+
  5306  0009CA  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  5307  0009CE  000A               	tblrd		*-
  5308  0009D0  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  5309  0009D4  0E03               	movlw	3
  5310  0009D6  6E25               	movwf	SWSPI_send_word@dataSize,c
  5311  0009D8  0E01               	movlw	1
  5312  0009DA  EC95  F00A         	call	_SWSPI_send_word
  5313  0009DE  0012               	return		;funcret
  5314  0009E0                     __end_of_PLLInitialize:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           intcon2	equ	0xFF1
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _SwSpi_Set_CE_Pin *****************
  5336 ;; Defined at:
  5337 ;;		line 221 in file "SwSpiApp.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  phrType         1    wreg     enum E7628
  5340 ;;  cPinMode        1   23[COMRAM] unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  phrType         1   24[COMRAM] enum E7628
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         1       0       0       0       0       0       0
  5353 ;;      Locals:         1       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0
  5355 ;;      Totals:         2       0       0       0       0       0       0
  5356 ;;Total ram usage:        2 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    3
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_PLLInitialize
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text27
  5367  001FE8                     __ptext27:
  5368                           	opt stack 0
  5369  001FE8                     _SwSpi_Set_CE_Pin:
  5370                           	opt stack 25
  5371                           
  5372                           ;incstack = 0
  5373                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  5374  001FE8  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  5375                           
  5376                           ;SwSpiApp.c: 223: switch(phrType)
  5377  001FEA  D014               	goto	l650
  5378  001FEC                     
  5379                           ;SwSpiApp.c: 226: if(cPinMode == 1)
  5380  001FEC  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  5381  001FEE  A4D8               	btfss	status,2,c
  5382  001FF0  D002               	goto	l652
  5383                           
  5384                           ;SwSpiApp.c: 227: {
  5385                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
  5386  001FF2  828B               	bsf	3979,1,c	;volatile
  5387                           
  5388                           ;SwSpiApp.c: 229: }
  5389  001FF4  0012               	return	
  5390  001FF6                     l652:
  5391                           
  5392                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
  5393  001FF6  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  5394  001FF8  A4D8               	btfss	status,2,c
  5395  001FFA  0012               	return	
  5396                           
  5397                           ;SwSpiApp.c: 231: {
  5398                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
  5399  001FFC  928B               	bcf	3979,1,c	;volatile
  5400                           
  5401                           ;SwSpiApp.c: 233: }
  5402                           ;SwSpiApp.c: 234: break;
  5403  001FFE  0012               	return	
  5404  002000                     
  5405                           ;SwSpiApp.c: 237: if(cPinMode == 1)
  5406  002000  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  5407  002002  A4D8               	btfss	status,2,c
  5408  002004  D002               	goto	l661
  5409                           
  5410                           ;SwSpiApp.c: 238: {
  5411                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
  5412  002006  848C               	bsf	3980,2,c	;volatile
  5413                           
  5414                           ;SwSpiApp.c: 240: }
  5415  002008  0012               	return	
  5416  00200A                     l661:
  5417                           
  5418                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
  5419  00200A  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  5420  00200C  A4D8               	btfss	status,2,c
  5421  00200E  0012               	return	
  5422                           
  5423                           ;SwSpiApp.c: 242: {
  5424                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
  5425  002010  928B               	bcf	3979,1,c	;volatile
  5426                           
  5427                           ;SwSpiApp.c: 246: }
  5428                           
  5429                           ;SwSpiApp.c: 244: }
  5430                           ;SwSpiApp.c: 245: break;
  5431  002012  0012               	return	
  5432  002014                     l650:
  5433  002014  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  5434                           
  5435                           ; Switch size 1, requested type "space"
  5436                           ; Number of cases is 2, Range of values is 0 to 1
  5437                           ; switch strategies available:
  5438                           ; Name         Instructions Cycles
  5439                           ; simple_byte            7     4 (average)
  5440                           ;	Chosen strategy is simple_byte
  5441  002016  0A00               	xorlw	0	; case 0
  5442  002018  B4D8               	btfsc	status,2,c
  5443  00201A  D7E8               	goto	l651
  5444  00201C  0A01               	xorlw	1	; case 1
  5445  00201E  A4D8               	btfss	status,2,c
  5446  002020  0012               	return	
  5447  002022  D7EE               	goto	l660
  5448  002024                     __end_of_SwSpi_Set_CE_Pin:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           intcon2	equ	0xFF1
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _InitSevenSegment *****************
  5470 ;; Defined at:
  5471 ;;		line 14 in file "SevenSegmentApp.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      void 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5485 ;;      Params:         0       0       0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0
  5488 ;;      Totals:         0       0       0       0       0       0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    3
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_InitSystemApplicationManagers
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text28
  5500  00222A                     __ptext28:
  5501                           	opt stack 0
  5502  00222A                     _InitSevenSegment:
  5503                           	opt stack 26
  5504                           
  5505                           ;SevenSegmentApp.c: 16: ANSELA = 0;
  5506                           
  5507                           ;incstack = 0
  5508  00222A  0E00               	movlw	0
  5509  00222C  010F               	movlb	15	; () banked
  5510  00222E  6F38               	movwf	56,b	;volatile
  5511                           
  5512                           ;SevenSegmentApp.c: 17: ANSELD = 0;
  5513  002230  0E00               	movlw	0
  5514  002232  6F3B               	movwf	59,b	;volatile
  5515                           
  5516                           ;SevenSegmentApp.c: 19: TRISA = 0;
  5517  002234  0E00               	movlw	0
  5518  002236  6E92               	movwf	3986,c	;volatile
  5519                           
  5520                           ;SevenSegmentApp.c: 20: LATA = 0;
  5521  002238  0E00               	movlw	0
  5522  00223A  6E89               	movwf	3977,c	;volatile
  5523                           
  5524                           ;SevenSegmentApp.c: 21: TRISD = 0;
  5525  00223C  0E00               	movlw	0
  5526  00223E  6E95               	movwf	3989,c	;volatile
  5527                           
  5528                           ;SevenSegmentApp.c: 22: LATD = 0;
  5529  002240  0E00               	movlw	0
  5530  002242  6E8C               	movwf	3980,c	;volatile
  5531                           
  5532                           ;SevenSegmentApp.c: 24: cnt = 1;
  5533  002244  0E00               	movlw	0
  5534  002246  0100               	movlb	0	; () banked
  5535  002248  6FFE               	movwf	(_cnt+1)& (0+255),b
  5536  00224A  0E01               	movlw	1
  5537  00224C  6FFD               	movwf	_cnt& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540  00224E  0012               	return		;funcret
  5541  002250                     __end_of_InitSevenSegment:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           intcon2	equ	0xFF1
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function _InitAdcApplicationMgr *****************
  5563 ;; Defined at:
  5564 ;;		line 22 in file "AdcApp.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;		None
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  channel         1   23[COMRAM] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  1    wreg      void 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         0       0       0       0       0       0       0
  5579 ;;      Locals:         1       0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0
  5581 ;;      Totals:         1       0       0       0       0       0       0
  5582 ;;Total ram usage:        1 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    3
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_InitSystemApplicationManagers
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text29
  5593  0023AE                     __ptext29:
  5594                           	opt stack 0
  5595  0023AE                     _InitAdcApplicationMgr:
  5596                           	opt stack 26
  5597                           
  5598                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;incstack = 0
  5602  0023AE  0E00               	movlw	0
  5603  0023B0  0100               	movlb	0	; () banked
  5604  0023B2  6FD6               	movwf	_conversionFormat& (0+255),b
  5605                           
  5606                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  5607  0023B4  0E00               	movlw	0
  5608  0023B6  6FD5               	movwf	_adcSampleMode& (0+255),b
  5609                           
  5610                           ;AdcApp.c: 26: char channel = 0;
  5611  0023B8  0E00               	movlw	0
  5612  0023BA  6E18               	movwf	InitAdcApplicationMgr@channel,c
  5613                           
  5614                           ; BSR set to: 0
  5615  0023BC  0012               	return		;funcret
  5616  0023BE                     __end_of_InitAdcApplicationMgr:
  5617                           	opt stack 0
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           intcon	equ	0xFF2
  5625                           intcon2	equ	0xFF1
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           postdec1	equ	0xFE5
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _DacInit *****************
  5638 ;; Defined at:
  5639 ;;		line 24 in file "DacApp.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;		None
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;		None
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      void 
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5653 ;;      Params:         0       0       0       0       0       0       0
  5654 ;;      Locals:         0       0       0       0       0       0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0
  5656 ;;      Totals:         0       0       0       0       0       0       0
  5657 ;;Total ram usage:        0 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    6
  5660 ;; This function calls:
  5661 ;;		_SWSPI_send_word
  5662 ;; This function is called by:
  5663 ;;		_InitSystemApplicationManagers
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text30
  5668  001A60                     __ptext30:
  5669                           	opt stack 0
  5670  001A60                     _DacInit:
  5671                           	opt stack 23
  5672                           
  5673                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;incstack = 0
  5677  001A60  0E44               	movlw	68
  5678  001A62  6E21               	movwf	SWSPI_send_word@data,c
  5679  001A64  0E23               	movlw	35
  5680  001A66  6E22               	movwf	SWSPI_send_word@data+1,c
  5681  001A68  0E00               	movlw	0
  5682  001A6A  6E23               	movwf	SWSPI_send_word@data+2,c
  5683  001A6C  0E00               	movlw	0
  5684  001A6E  6E24               	movwf	SWSPI_send_word@data+3,c
  5685  001A70  0E01               	movlw	1
  5686  001A72  6E25               	movwf	SWSPI_send_word@dataSize,c
  5687  001A74  0E02               	movlw	2
  5688  001A76  EC95  F00A         	call	_SWSPI_send_word
  5689                           
  5690                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
  5691  001A7A  0E44               	movlw	68
  5692  001A7C  6E21               	movwf	SWSPI_send_word@data,c
  5693  001A7E  0E63               	movlw	99
  5694  001A80  6E22               	movwf	SWSPI_send_word@data+1,c
  5695  001A82  0E00               	movlw	0
  5696  001A84  6E23               	movwf	SWSPI_send_word@data+2,c
  5697  001A86  0E00               	movlw	0
  5698  001A88  6E24               	movwf	SWSPI_send_word@data+3,c
  5699  001A8A  0E01               	movlw	1
  5700  001A8C  6E25               	movwf	SWSPI_send_word@dataSize,c
  5701  001A8E  0E02               	movlw	2
  5702  001A90  EC95  F00A         	call	_SWSPI_send_word
  5703                           
  5704                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
  5705  001A94  0E44               	movlw	68
  5706  001A96  6E21               	movwf	SWSPI_send_word@data,c
  5707  001A98  0EA3               	movlw	163
  5708  001A9A  6E22               	movwf	SWSPI_send_word@data+1,c
  5709  001A9C  0E00               	movlw	0
  5710  001A9E  6E23               	movwf	SWSPI_send_word@data+2,c
  5711  001AA0  0E00               	movlw	0
  5712  001AA2  6E24               	movwf	SWSPI_send_word@data+3,c
  5713  001AA4  0E01               	movlw	1
  5714  001AA6  6E25               	movwf	SWSPI_send_word@dataSize,c
  5715  001AA8  0E02               	movlw	2
  5716  001AAA  EC95  F00A         	call	_SWSPI_send_word
  5717                           
  5718                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
  5719  001AAE  0E44               	movlw	68
  5720  001AB0  6E21               	movwf	SWSPI_send_word@data,c
  5721  001AB2  0EE3               	movlw	227
  5722  001AB4  6E22               	movwf	SWSPI_send_word@data+1,c
  5723  001AB6  0E00               	movlw	0
  5724  001AB8  6E23               	movwf	SWSPI_send_word@data+2,c
  5725  001ABA  0E00               	movlw	0
  5726  001ABC  6E24               	movwf	SWSPI_send_word@data+3,c
  5727  001ABE  0E01               	movlw	1
  5728  001AC0  6E25               	movwf	SWSPI_send_word@dataSize,c
  5729  001AC2  0E02               	movlw	2
  5730  001AC4  EC95  F00A         	call	_SWSPI_send_word
  5731  001AC8  0012               	return		;funcret
  5732  001ACA                     __end_of_DacInit:
  5733                           	opt stack 0
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           intcon	equ	0xFF2
  5741                           intcon2	equ	0xFF1
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           postdec1	equ	0xFE5
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _SWSPI_send_word *****************
  5754 ;; Defined at:
  5755 ;;		line 17 in file "SwSpiApp.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  phrType         1    wreg     enum E7628
  5758 ;;  data            4   32[COMRAM] unsigned long 
  5759 ;;  dataSize        1   36[COMRAM] unsigned char 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  phrType         1   40[COMRAM] enum E7628
  5762 ;;  datac           1   37[COMRAM] unsigned char 
  5763 ;;  idx             2   38[COMRAM] int 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5773 ;;      Params:         5       0       0       0       0       0       0
  5774 ;;      Locals:         4       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0
  5776 ;;      Totals:         9       0       0       0       0       0       0
  5777 ;;Total ram usage:        9 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    5
  5780 ;; This function calls:
  5781 ;;		_SWSPI_DAC_send_bits
  5782 ;;		_SWSPI_Synth_send_bits
  5783 ;;		_SwSpi_Set_Dac_Sync_Pin
  5784 ;;		_SwSpi_Set_Synth_Le_Pin
  5785 ;;		_make8
  5786 ;; This function is called by:
  5787 ;;		_DacInit
  5788 ;;		_PLLInitialize
  5789 ;;		_DacSetValue
  5790 ;;		_UpdateTxFreq
  5791 ;;		_UpdateRxFreq
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text31
  5796  00152A                     __ptext31:
  5797                           	opt stack 0
  5798  00152A                     _SWSPI_send_word:
  5799                           	opt stack 23
  5800                           
  5801                           ;incstack = 0
  5802                           ;SWSPI_send_word@phrType stored from wreg
  5803  00152A  6E29               	movwf	SWSPI_send_word@phrType,c
  5804                           
  5805                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  5806  00152C  9EF2               	bcf	intcon,7,c	;volatile
  5807                           
  5808                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  5809  00152E  5029               	movf	SWSPI_send_word@phrType,w,c
  5810  001530  B4D8               	btfsc	status,2,c
  5811  001532  D003               	goto	u3570
  5812  001534  0429               	decf	SWSPI_send_word@phrType,w,c
  5813  001536  A4D8               	btfss	status,2,c
  5814  001538  D005               	goto	l549
  5815  00153A                     u3570:
  5816                           
  5817                           ;SwSpiApp.c: 24: {
  5818                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  5819  00153A  0E00               	movlw	0
  5820  00153C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  5821  00153E  5029               	movf	SWSPI_send_word@phrType,w,c
  5822  001540  EC12  F010         	call	_SwSpi_Set_Synth_Le_Pin
  5823  001544                     l549:
  5824                           
  5825                           ;SwSpiApp.c: 26: }
  5826                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
  5827  001544  0E02               	movlw	2
  5828  001546  1829               	xorwf	SWSPI_send_word@phrType,w,c
  5829  001548  A4D8               	btfss	status,2,c
  5830  00154A  D003               	goto	l552
  5831                           
  5832                           ;SwSpiApp.c: 28: {
  5833                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
  5834  00154C  0E00               	movlw	0
  5835  00154E  EC7C  F011         	call	_SwSpi_Set_Dac_Sync_Pin
  5836  001552                     l552:
  5837                           
  5838                           ;SwSpiApp.c: 30: }
  5839                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
  5840  001552  0E01               	movlw	1
  5841  001554  2425               	addwf	SWSPI_send_word@dataSize,w,c
  5842  001556  6E27               	movwf	SWSPI_send_word@idx,c
  5843  001558  6A28               	clrf	SWSPI_send_word@idx+1,c
  5844  00155A  0E00               	movlw	0
  5845  00155C  2228               	addwfc	SWSPI_send_word@idx+1,f,c
  5846  00155E                     l4891:
  5847  00155E  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
  5848  001560  D02B               	goto	u3630
  5849  001562  5028               	movf	SWSPI_send_word@idx+1,w,c
  5850  001564  E103               	bnz	l4895
  5851  001566  0427               	decf	SWSPI_send_word@idx,w,c
  5852  001568  A0D8               	btfss	status,0,c
  5853  00156A  D026               	goto	u3630
  5854  00156C                     l4895:
  5855                           
  5856                           ;SwSpiApp.c: 36: {
  5857                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
  5858  00156C  C021  F018         	movff	SWSPI_send_word@data,make8@data
  5859  001570  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
  5860  001574  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
  5861  001578  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
  5862  00157C  0427               	decf	SWSPI_send_word@idx,w,c
  5863  00157E  6E1C               	movwf	make8@dataLocation,c
  5864  001580  ECF6  F00D         	call	_make8	;wreg free
  5865  001584  6E26               	movwf	SWSPI_send_word@datac,c
  5866                           
  5867                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  5868  001586  5029               	movf	SWSPI_send_word@phrType,w,c
  5869  001588  B4D8               	btfsc	status,2,c
  5870  00158A  D003               	goto	u3610
  5871  00158C  0429               	decf	SWSPI_send_word@phrType,w,c
  5872  00158E  A4D8               	btfss	status,2,c
  5873  001590  D006               	goto	l555
  5874  001592                     u3610:
  5875                           
  5876                           ;SwSpiApp.c: 40: {
  5877                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
  5878  001592  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
  5879  001596  5029               	movf	SWSPI_send_word@phrType,w,c
  5880  001598  EC7F  F00E         	call	_SWSPI_Synth_send_bits
  5881                           
  5882                           ;SwSpiApp.c: 42: }
  5883  00159C  D009               	goto	l559
  5884  00159E                     l555:
  5885                           
  5886                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
  5887  00159E  0E02               	movlw	2
  5888  0015A0  1829               	xorwf	SWSPI_send_word@phrType,w,c
  5889  0015A2  A4D8               	btfss	status,2,c
  5890  0015A4  D005               	goto	l559
  5891                           
  5892                           ;SwSpiApp.c: 44: {
  5893                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
  5894  0015A6  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
  5895  0015AA  5029               	movf	SWSPI_send_word@phrType,w,c
  5896  0015AC  ECAB  F00E         	call	_SWSPI_DAC_send_bits
  5897  0015B0                     l559:
  5898  0015B0  0627               	decf	SWSPI_send_word@idx,f,c
  5899  0015B2  A0D8               	btfss	status,0,c
  5900  0015B4  0628               	decf	SWSPI_send_word@idx+1,f,c
  5901  0015B6  D7D3               	goto	l4891
  5902  0015B8                     u3630:
  5903                           
  5904                           ;SwSpiApp.c: 46: }
  5905                           ;SwSpiApp.c: 47: }
  5906                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
  5907  0015B8  0E02               	movlw	2
  5908  0015BA  1829               	xorwf	SWSPI_send_word@phrType,w,c
  5909  0015BC  A4D8               	btfss	status,2,c
  5910  0015BE  D004               	goto	l560
  5911                           
  5912                           ;SwSpiApp.c: 53: {
  5913                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
  5914  0015C0  0E01               	movlw	1
  5915  0015C2  EC7C  F011         	call	_SwSpi_Set_Dac_Sync_Pin
  5916                           
  5917                           ;SwSpiApp.c: 55: }
  5918  0015C6  D00B               	goto	l562
  5919  0015C8                     l560:
  5920                           
  5921                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  5922  0015C8  5029               	movf	SWSPI_send_word@phrType,w,c
  5923  0015CA  B4D8               	btfsc	status,2,c
  5924  0015CC  D003               	goto	u3660
  5925  0015CE  0429               	decf	SWSPI_send_word@phrType,w,c
  5926  0015D0  A4D8               	btfss	status,2,c
  5927  0015D2  D005               	goto	l562
  5928  0015D4                     u3660:
  5929                           
  5930                           ;SwSpiApp.c: 57: {
  5931                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  5932  0015D4  0E01               	movlw	1
  5933  0015D6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  5934  0015D8  5029               	movf	SWSPI_send_word@phrType,w,c
  5935  0015DA  EC12  F010         	call	_SwSpi_Set_Synth_Le_Pin
  5936  0015DE                     l562:
  5937                           
  5938                           ;SwSpiApp.c: 59: }
  5939                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
  5940  0015DE  8EF2               	bsf	intcon,7,c	;volatile
  5941  0015E0  0012               	return		;funcret
  5942  0015E2                     __end_of_SWSPI_send_word:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           intcon	equ	0xFF2
  5951                           intcon2	equ	0xFF1
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           postdec1	equ	0xFE5
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           fsr2h	equ	0xFDA
  5960                           fsr2l	equ	0xFD9
  5961                           status	equ	0xFD8
  5962                           
  5963 ;; *************** function _make8 *****************
  5964 ;; Defined at:
  5965 ;;		line 62 in file "SystemCommon.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  data            4   23[COMRAM] unsigned long 
  5968 ;;  dataLocation    1   27[COMRAM] unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5980 ;;      Params:         5       0       0       0       0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0
  5982 ;;      Temps:          4       0       0       0       0       0       0
  5983 ;;      Totals:         9       0       0       0       0       0       0
  5984 ;;Total ram usage:        9 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    3
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_SWSPI_send_word
  5991 ;;		_FlashReadCondition
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text32
  5996  001BEC                     __ptext32:
  5997                           	opt stack 0
  5998  001BEC                     _make8:
  5999                           	opt stack 24
  6000                           
  6001                           ;SystemCommon.c: 64: switch(dataLocation)
  6002                           
  6003                           ;incstack = 0
  6004  001BEC  D01F               	goto	l1267
  6005  001BEE                     
  6006                           ;SystemCommon.c: 67: return (data & 0x000000ff);
  6007  001BEE  5018               	movf	make8@data,w,c
  6008  001BF0  0012               	return	
  6009  001BF2                     
  6010                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
  6011  001BF2  5019               	movf	make8@data+1,w,c
  6012  001BF4  0012               	return	
  6013  001BF6                     
  6014                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
  6015  001BF6  501A               	movf	make8@data+2,w,c
  6016  001BF8  0012               	return	
  6017  001BFA                     
  6018                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
  6019  001BFA  0E00               	movlw	0
  6020  001BFC  1418               	andwf	make8@data,w,c
  6021  001BFE  6E1D               	movwf	??_make8& (0+255),c
  6022  001C00  0E00               	movlw	0
  6023  001C02  1419               	andwf	make8@data+1,w,c
  6024  001C04  6E1E               	movwf	(??_make8+1)& (0+255),c
  6025  001C06  0E00               	movlw	0
  6026  001C08  141A               	andwf	make8@data+2,w,c
  6027  001C0A  6E1F               	movwf	(??_make8+2)& (0+255),c
  6028  001C0C  0EFF               	movlw	255
  6029  001C0E  141B               	andwf	make8@data+3,w,c
  6030  001C10  6E20               	movwf	(??_make8+3)& (0+255),c
  6031  001C12  0E19               	movlw	25
  6032  001C14  D005               	goto	u3170
  6033  001C16                     u3175:
  6034  001C16  90D8               	bcf	status,0,c
  6035  001C18  3220               	rrcf	??_make8+3,f,c
  6036  001C1A  321F               	rrcf	??_make8+2,f,c
  6037  001C1C  321E               	rrcf	??_make8+1,f,c
  6038  001C1E  321D               	rrcf	??_make8,f,c
  6039  001C20                     u3170:
  6040  001C20  2EE8               	decfsz	wreg,f,c
  6041  001C22  D7F9               	goto	u3175
  6042  001C24  501D               	movf	??_make8,w,c
  6043  001C26  0012               	return	
  6044  001C28                     
  6045                           ;SystemCommon.c: 79: return (0);
  6046  001C28  0E00               	movlw	0
  6047                           
  6048                           ;SystemCommon.c: 80: }
  6049  001C2A  0012               	return	
  6050  001C2C                     l1267:
  6051  001C2C  501C               	movf	make8@dataLocation,w,c
  6052                           
  6053                           ; Switch size 1, requested type "space"
  6054                           ; Number of cases is 4, Range of values is 0 to 3
  6055                           ; switch strategies available:
  6056                           ; Name         Instructions Cycles
  6057                           ; simple_byte           13     7 (average)
  6058                           ;	Chosen strategy is simple_byte
  6059  001C2E  0A00               	xorlw	0	; case 0
  6060  001C30  B4D8               	btfsc	status,2,c
  6061  001C32  D7DD               	goto	l1268
  6062  001C34  0A01               	xorlw	1	; case 1
  6063  001C36  B4D8               	btfsc	status,2,c
  6064  001C38  D7DC               	goto	l1270
  6065  001C3A  0A03               	xorlw	3	; case 2
  6066  001C3C  B4D8               	btfsc	status,2,c
  6067  001C3E  D7DB               	goto	l1271
  6068  001C40  0A01               	xorlw	1	; case 3
  6069  001C42  B4D8               	btfsc	status,2,c
  6070  001C44  D7DA               	goto	l1272
  6071  001C46  D7F0               	goto	l1273
  6072  001C48                     __end_of_make8:
  6073                           	opt stack 0
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon2	equ	0xFF1
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
  6094 ;; Defined at:
  6095 ;;		line 252 in file "SwSpiApp.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  phrType         1    wreg     enum E7628
  6098 ;;  cPinMode        1   23[COMRAM] unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  phrType         1   24[COMRAM] enum E7628
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      void 
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6110 ;;      Params:         1       0       0       0       0       0       0
  6111 ;;      Locals:         1       0       0       0       0       0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0
  6113 ;;      Totals:         2       0       0       0       0       0       0
  6114 ;;Total ram usage:        2 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    3
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_SWSPI_send_word
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text33
  6125  002024                     __ptext33:
  6126                           	opt stack 0
  6127  002024                     _SwSpi_Set_Synth_Le_Pin:
  6128                           	opt stack 24
  6129                           
  6130                           ;incstack = 0
  6131                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
  6132  002024  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
  6133                           
  6134                           ;SwSpiApp.c: 254: switch(phrType)
  6135  002026  D014               	goto	l671
  6136  002028                     
  6137                           ;SwSpiApp.c: 257: if(cPinMode == 1)
  6138  002028  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  6139  00202A  A4D8               	btfss	status,2,c
  6140  00202C  D002               	goto	l673
  6141                           
  6142                           ;SwSpiApp.c: 258: {
  6143                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
  6144  00202E  848B               	bsf	3979,2,c	;volatile
  6145                           
  6146                           ;SwSpiApp.c: 260: }
  6147  002030  0012               	return	
  6148  002032                     l673:
  6149                           
  6150                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
  6151  002032  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  6152  002034  A4D8               	btfss	status,2,c
  6153  002036  0012               	return	
  6154                           
  6155                           ;SwSpiApp.c: 262: {
  6156                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
  6157  002038  948B               	bcf	3979,2,c	;volatile
  6158                           
  6159                           ;SwSpiApp.c: 264: }
  6160                           ;SwSpiApp.c: 265: break;
  6161  00203A  0012               	return	
  6162  00203C                     
  6163                           ;SwSpiApp.c: 268: if(cPinMode == 1)
  6164  00203C  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  6165  00203E  A4D8               	btfss	status,2,c
  6166  002040  D002               	goto	l682
  6167                           
  6168                           ;SwSpiApp.c: 269: {
  6169                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
  6170  002042  868C               	bsf	3980,3,c	;volatile
  6171                           
  6172                           ;SwSpiApp.c: 271: }
  6173  002044  0012               	return	
  6174  002046                     l682:
  6175                           
  6176                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
  6177  002046  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
  6178  002048  A4D8               	btfss	status,2,c
  6179  00204A  0012               	return	
  6180                           
  6181                           ;SwSpiApp.c: 273: {
  6182                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
  6183  00204C  968C               	bcf	3980,3,c	;volatile
  6184                           
  6185                           ;SwSpiApp.c: 277: }
  6186                           
  6187                           ;SwSpiApp.c: 275: }
  6188                           ;SwSpiApp.c: 276: break;
  6189  00204E  0012               	return	
  6190  002050                     l671:
  6191  002050  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
  6192                           
  6193                           ; Switch size 1, requested type "space"
  6194                           ; Number of cases is 2, Range of values is 0 to 1
  6195                           ; switch strategies available:
  6196                           ; Name         Instructions Cycles
  6197                           ; simple_byte            7     4 (average)
  6198                           ;	Chosen strategy is simple_byte
  6199  002052  0A00               	xorlw	0	; case 0
  6200  002054  B4D8               	btfsc	status,2,c
  6201  002056  D7E8               	goto	l672
  6202  002058  0A01               	xorlw	1	; case 1
  6203  00205A  A4D8               	btfss	status,2,c
  6204  00205C  0012               	return	
  6205  00205E  D7EE               	goto	l681
  6206  002060                     __end_of_SwSpi_Set_Synth_Le_Pin:
  6207                           	opt stack 0
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           intcon2	equ	0xFF1
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           postdec1	equ	0xFE5
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
  6228 ;; Defined at:
  6229 ;;		line 280 in file "SwSpiApp.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  cPinMode        1    wreg     unsigned char 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  cPinMode        1   23[COMRAM] unsigned char 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      void 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6243 ;;      Params:         0       0       0       0       0       0       0
  6244 ;;      Locals:         1       0       0       0       0       0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0
  6246 ;;      Totals:         1       0       0       0       0       0       0
  6247 ;;Total ram usage:        1 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    3
  6250 ;; This function calls:
  6251 ;;		Nothing
  6252 ;; This function is called by:
  6253 ;;		_SWSPI_send_word
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text34
  6258  0022F8                     __ptext34:
  6259                           	opt stack 0
  6260  0022F8                     _SwSpi_Set_Dac_Sync_Pin:
  6261                           	opt stack 24
  6262                           
  6263                           ;incstack = 0
  6264                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
  6265  0022F8  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
  6266                           
  6267                           ;SwSpiApp.c: 282: switch(cPinMode)
  6268  0022FA  D004               	goto	l692
  6269  0022FC                     
  6270                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
  6271  0022FC  9489               	bcf	3977,2,c	;volatile
  6272                           
  6273                           ;SwSpiApp.c: 286: break;
  6274  0022FE  0012               	return	
  6275  002300                     
  6276                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
  6277  002300  8489               	bsf	3977,2,c	;volatile
  6278                           
  6279                           ;SwSpiApp.c: 291: }
  6280                           
  6281                           ;SwSpiApp.c: 290: break;
  6282  002302  0012               	return	
  6283  002304                     l692:
  6284  002304  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
  6285                           
  6286                           ; Switch size 1, requested type "space"
  6287                           ; Number of cases is 2, Range of values is 0 to 1
  6288                           ; switch strategies available:
  6289                           ; Name         Instructions Cycles
  6290                           ; simple_byte            7     4 (average)
  6291                           ;	Chosen strategy is simple_byte
  6292  002306  0A00               	xorlw	0	; case 0
  6293  002308  B4D8               	btfsc	status,2,c
  6294  00230A  D7F8               	goto	l693
  6295  00230C  0A01               	xorlw	1	; case 1
  6296  00230E  A4D8               	btfss	status,2,c
  6297  002310  0012               	return	
  6298  002312  D7F6               	goto	l697
  6299  002314                     __end_of_SwSpi_Set_Dac_Sync_Pin:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           intcon	equ	0xFF2
  6308                           intcon2	equ	0xFF1
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           postdec1	equ	0xFE5
  6312                           fsr1l	equ	0xFE1
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function _SWSPI_Synth_send_bits *****************
  6321 ;; Defined at:
  6322 ;;		line 89 in file "SwSpiApp.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  phrType         1    wreg     enum E7628
  6325 ;;  data            1   25[COMRAM] unsigned char 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  phrType         1   27[COMRAM] enum E7628
  6328 ;;  count           1   26[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6338 ;;      Params:         1       0       0       0       0       0       0
  6339 ;;      Locals:         2       0       0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0
  6341 ;;      Totals:         3       0       0       0       0       0       0
  6342 ;;Total ram usage:        3 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    4
  6345 ;; This function calls:
  6346 ;;		_SwSpi_Clk_Pin
  6347 ;;		_SwSpi_Data_Pin
  6348 ;; This function is called by:
  6349 ;;		_SWSPI_send_word
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text35
  6354  001CFE                     __ptext35:
  6355                           	opt stack 0
  6356  001CFE                     _SWSPI_Synth_send_bits:
  6357                           	opt stack 23
  6358                           
  6359                           ;incstack = 0
  6360                           ;SWSPI_Synth_send_bits@phrType stored from wreg
  6361  001CFE  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
  6362                           
  6363                           ;SwSpiApp.c: 91: uint8_t count;
  6364                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
  6365  001D00  0E08               	movlw	8
  6366  001D02  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
  6367  001D04  D01A               	goto	l576
  6368  001D06                     
  6369                           ;SwSpiApp.c: 93: {
  6370                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
  6371  001D06  0E00               	movlw	0
  6372  001D08  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6373  001D0A  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6374  001D0C  EC02  F00F         	call	_SwSpi_Clk_Pin
  6375                           
  6376                           ;SwSpiApp.c: 96: if (data & 0X80)
  6377  001D10  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
  6378  001D12  D006               	goto	l578
  6379                           
  6380                           ;SwSpiApp.c: 97: {
  6381                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
  6382  001D14  0E01               	movlw	1
  6383  001D16  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6384  001D18  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6385  001D1A  ECD7  F00E         	call	_SwSpi_Data_Pin
  6386                           
  6387                           ;SwSpiApp.c: 100: }
  6388  001D1E  D005               	goto	l579
  6389  001D20                     l578:
  6390                           
  6391                           ;SwSpiApp.c: 101: else
  6392                           ;SwSpiApp.c: 102: {
  6393                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
  6394  001D20  0E00               	movlw	0
  6395  001D22  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6396  001D24  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6397  001D26  ECD7  F00E         	call	_SwSpi_Data_Pin
  6398  001D2A                     l579:
  6399                           
  6400                           ;SwSpiApp.c: 104: }
  6401                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
  6402  001D2A  0E01               	movlw	1
  6403  001D2C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6404  001D2E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6405  001D30  EC02  F00F         	call	_SwSpi_Clk_Pin
  6406  001D34  061B               	decf	SWSPI_Synth_send_bits@count,f,c
  6407  001D36  90D8               	bcf	status,0,c
  6408  001D38  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
  6409  001D3A                     l576:
  6410  001D3A  501B               	movf	SWSPI_Synth_send_bits@count,w,c
  6411  001D3C  A4D8               	btfss	status,2,c
  6412  001D3E  D7E3               	goto	l577
  6413                           
  6414                           ;SwSpiApp.c: 113: }
  6415                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
  6416  001D40  0E00               	movlw	0
  6417  001D42  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6418  001D44  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6419  001D46  ECD7  F00E         	call	_SwSpi_Data_Pin
  6420                           
  6421                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
  6422  001D4A  0E00               	movlw	0
  6423  001D4C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6424  001D4E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
  6425  001D50  EC02  F00F         	call	_SwSpi_Clk_Pin
  6426  001D54  0012               	return		;funcret
  6427  001D56                     __end_of_SWSPI_Synth_send_bits:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           intcon	equ	0xFF2
  6436                           intcon2	equ	0xFF1
  6437                           postinc0	equ	0xFEE
  6438                           wreg	equ	0xFE8
  6439                           postdec1	equ	0xFE5
  6440                           fsr1l	equ	0xFE1
  6441                           indf2	equ	0xFDF
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _SWSPI_DAC_send_bits *****************
  6449 ;; Defined at:
  6450 ;;		line 65 in file "SwSpiApp.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  phrType         1    wreg     enum E7628
  6453 ;;  data            1   25[COMRAM] unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  phrType         1   27[COMRAM] enum E7628
  6456 ;;  count           1   26[COMRAM] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      void 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6466 ;;      Params:         1       0       0       0       0       0       0
  6467 ;;      Locals:         2       0       0       0       0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0
  6469 ;;      Totals:         3       0       0       0       0       0       0
  6470 ;;Total ram usage:        3 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    4
  6473 ;; This function calls:
  6474 ;;		_SwSpi_Clk_Pin
  6475 ;;		_SwSpi_Data_Pin
  6476 ;; This function is called by:
  6477 ;;		_SWSPI_send_word
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text36
  6482  001D56                     __ptext36:
  6483                           	opt stack 0
  6484  001D56                     _SWSPI_DAC_send_bits:
  6485                           	opt stack 23
  6486                           
  6487                           ;incstack = 0
  6488                           ;SWSPI_DAC_send_bits@phrType stored from wreg
  6489  001D56  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
  6490                           
  6491                           ;SwSpiApp.c: 67: uint8_t count;
  6492                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
  6493  001D58  0E08               	movlw	8
  6494  001D5A  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
  6495  001D5C  D01A               	goto	l568
  6496  001D5E                     
  6497                           ;SwSpiApp.c: 69: {
  6498                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
  6499  001D5E  0E01               	movlw	1
  6500  001D60  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6501  001D62  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6502  001D64  EC02  F00F         	call	_SwSpi_Clk_Pin
  6503                           
  6504                           ;SwSpiApp.c: 72: if (data & 0X80)
  6505  001D68  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
  6506  001D6A  D006               	goto	l570
  6507                           
  6508                           ;SwSpiApp.c: 73: {
  6509                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
  6510  001D6C  0E01               	movlw	1
  6511  001D6E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6512  001D70  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6513  001D72  ECD7  F00E         	call	_SwSpi_Data_Pin
  6514                           
  6515                           ;SwSpiApp.c: 76: }
  6516  001D76  D005               	goto	l571
  6517  001D78                     l570:
  6518                           
  6519                           ;SwSpiApp.c: 77: else
  6520                           ;SwSpiApp.c: 78: {
  6521                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
  6522  001D78  0E00               	movlw	0
  6523  001D7A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6524  001D7C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6525  001D7E  ECD7  F00E         	call	_SwSpi_Data_Pin
  6526  001D82                     l571:
  6527                           
  6528                           ;SwSpiApp.c: 80: }
  6529                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
  6530  001D82  0E00               	movlw	0
  6531  001D84  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6532  001D86  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6533  001D88  EC02  F00F         	call	_SwSpi_Clk_Pin
  6534  001D8C  061B               	decf	SWSPI_DAC_send_bits@count,f,c
  6535  001D8E  90D8               	bcf	status,0,c
  6536  001D90  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
  6537  001D92                     l568:
  6538  001D92  501B               	movf	SWSPI_DAC_send_bits@count,w,c
  6539  001D94  A4D8               	btfss	status,2,c
  6540  001D96  D7E3               	goto	l569
  6541                           
  6542                           ;SwSpiApp.c: 83: }
  6543                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
  6544  001D98  0E00               	movlw	0
  6545  001D9A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
  6546  001D9C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6547  001D9E  ECD7  F00E         	call	_SwSpi_Data_Pin
  6548                           
  6549                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
  6550  001DA2  0E00               	movlw	0
  6551  001DA4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
  6552  001DA6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
  6553  001DA8  EC02  F00F         	call	_SwSpi_Clk_Pin
  6554  001DAC  0012               	return		;funcret
  6555  001DAE                     __end_of_SWSPI_DAC_send_bits:
  6556                           	opt stack 0
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           intcon	equ	0xFF2
  6564                           intcon2	equ	0xFF1
  6565                           postinc0	equ	0xFEE
  6566                           wreg	equ	0xFE8
  6567                           postdec1	equ	0xFE5
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function _SwSpi_Data_Pin *****************
  6577 ;; Defined at:
  6578 ;;		line 123 in file "SwSpiApp.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  phrType         1    wreg     enum E7628
  6581 ;;  cPinMode        1   23[COMRAM] unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  phrType         1   24[COMRAM] enum E7628
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      void 
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6593 ;;      Params:         1       0       0       0       0       0       0
  6594 ;;      Locals:         1       0       0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0
  6596 ;;      Totals:         2       0       0       0       0       0       0
  6597 ;;Total ram usage:        2 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    3
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_SWSPI_DAC_send_bits
  6604 ;;		_SWSPI_Synth_send_bits
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text37
  6609  001DAE                     __ptext37:
  6610                           	opt stack 0
  6611  001DAE                     _SwSpi_Data_Pin:
  6612                           	opt stack 23
  6613                           
  6614                           ;incstack = 0
  6615                           ;SwSpi_Data_Pin@phrType stored from wreg
  6616  001DAE  6E19               	movwf	SwSpi_Data_Pin@phrType,c
  6617                           
  6618                           ;SwSpiApp.c: 125: switch(phrType)
  6619  001DB0  D01E               	goto	l584
  6620  001DB2                     
  6621                           ;SwSpiApp.c: 128: if(cPinMode == 1)
  6622  001DB2  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  6623  001DB4  A4D8               	btfss	status,2,c
  6624  001DB6  D002               	goto	l586
  6625                           
  6626                           ;SwSpiApp.c: 129: {
  6627                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
  6628  001DB8  808C               	bsf	3980,0,c	;volatile
  6629                           
  6630                           ;SwSpiApp.c: 131: }
  6631  001DBA  0012               	return	
  6632  001DBC                     l586:
  6633                           
  6634                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
  6635  001DBC  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  6636  001DBE  A4D8               	btfss	status,2,c
  6637  001DC0  0012               	return	
  6638                           
  6639                           ;SwSpiApp.c: 133: {
  6640                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
  6641  001DC2  908C               	bcf	3980,0,c	;volatile
  6642                           
  6643                           ;SwSpiApp.c: 135: }
  6644                           ;SwSpiApp.c: 136: break;
  6645  001DC4  0012               	return	
  6646  001DC6                     
  6647                           ;SwSpiApp.c: 139: if(cPinMode == 1)
  6648  001DC6  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  6649  001DC8  A4D8               	btfss	status,2,c
  6650  001DCA  D002               	goto	l595
  6651                           
  6652                           ;SwSpiApp.c: 140: {
  6653                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
  6654  001DCC  8A8B               	bsf	3979,5,c	;volatile
  6655                           
  6656                           ;SwSpiApp.c: 142: }
  6657  001DCE  0012               	return	
  6658  001DD0                     l595:
  6659                           
  6660                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
  6661  001DD0  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  6662  001DD2  A4D8               	btfss	status,2,c
  6663  001DD4  0012               	return	
  6664                           
  6665                           ;SwSpiApp.c: 144: {
  6666                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
  6667  001DD6  9A8B               	bcf	3979,5,c	;volatile
  6668                           
  6669                           ;SwSpiApp.c: 146: }
  6670                           ;SwSpiApp.c: 147: break;
  6671  001DD8  0012               	return	
  6672  001DDA                     
  6673                           ;SwSpiApp.c: 150: if(cPinMode == 1)
  6674  001DDA  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
  6675  001DDC  A4D8               	btfss	status,2,c
  6676  001DDE  D002               	goto	l603
  6677                           
  6678                           ;SwSpiApp.c: 151: {
  6679                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  6680  001DE0  8889               	bsf	3977,4,c	;volatile
  6681                           
  6682                           ;SwSpiApp.c: 153: }
  6683  001DE2  0012               	return	
  6684  001DE4                     l603:
  6685                           
  6686                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
  6687  001DE4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
  6688  001DE6  A4D8               	btfss	status,2,c
  6689  001DE8  0012               	return	
  6690                           
  6691                           ;SwSpiApp.c: 155: {
  6692                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
  6693  001DEA  9889               	bcf	3977,4,c	;volatile
  6694                           
  6695                           ;SwSpiApp.c: 159: }
  6696                           
  6697                           ;SwSpiApp.c: 157: }
  6698                           ;SwSpiApp.c: 158: break;
  6699  001DEC  0012               	return	
  6700  001DEE                     l584:
  6701  001DEE  5019               	movf	SwSpi_Data_Pin@phrType,w,c
  6702                           
  6703                           ; Switch size 1, requested type "space"
  6704                           ; Number of cases is 3, Range of values is 0 to 2
  6705                           ; switch strategies available:
  6706                           ; Name         Instructions Cycles
  6707                           ; simple_byte           10     6 (average)
  6708                           ;	Chosen strategy is simple_byte
  6709  001DF0  0A00               	xorlw	0	; case 0
  6710  001DF2  B4D8               	btfsc	status,2,c
  6711  001DF4  D7DE               	goto	l585
  6712  001DF6  0A01               	xorlw	1	; case 1
  6713  001DF8  B4D8               	btfsc	status,2,c
  6714  001DFA  D7E5               	goto	l594
  6715  001DFC  0A03               	xorlw	3	; case 2
  6716  001DFE  A4D8               	btfss	status,2,c
  6717  001E00  0012               	return	
  6718  001E02  D7EB               	goto	l602
  6719  001E04                     __end_of_SwSpi_Data_Pin:
  6720                           	opt stack 0
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           intcon	equ	0xFF2
  6728                           intcon2	equ	0xFF1
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           postdec1	equ	0xFE5
  6732                           fsr1l	equ	0xFE1
  6733                           indf2	equ	0xFDF
  6734                           postinc2	equ	0xFDE
  6735                           postdec2	equ	0xFDD
  6736                           fsr2h	equ	0xFDA
  6737                           fsr2l	equ	0xFD9
  6738                           status	equ	0xFD8
  6739                           
  6740 ;; *************** function _SwSpi_Clk_Pin *****************
  6741 ;; Defined at:
  6742 ;;		line 162 in file "SwSpiApp.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;  phrType         1    wreg     enum E7628
  6745 ;;  cPinMode        1   23[COMRAM] unsigned char 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  phrType         1   24[COMRAM] enum E7628
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, status,2, status,0
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6757 ;;      Params:         1       0       0       0       0       0       0
  6758 ;;      Locals:         1       0       0       0       0       0       0
  6759 ;;      Temps:          0       0       0       0       0       0       0
  6760 ;;      Totals:         2       0       0       0       0       0       0
  6761 ;;Total ram usage:        2 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:    3
  6764 ;; This function calls:
  6765 ;;		Nothing
  6766 ;; This function is called by:
  6767 ;;		_SWSPI_DAC_send_bits
  6768 ;;		_SWSPI_Synth_send_bits
  6769 ;;		_SwSpi_Synth_Toggle_Clock
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text38
  6774  001E04                     __ptext38:
  6775                           	opt stack 0
  6776  001E04                     _SwSpi_Clk_Pin:
  6777                           	opt stack 23
  6778                           
  6779                           ;incstack = 0
  6780                           ;SwSpi_Clk_Pin@phrType stored from wreg
  6781  001E04  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
  6782                           
  6783                           ;SwSpiApp.c: 164: switch(phrType)
  6784  001E06  D01E               	goto	l613
  6785  001E08                     
  6786                           ;SwSpiApp.c: 167: if(cPinMode == 1)
  6787  001E08  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  6788  001E0A  A4D8               	btfss	status,2,c
  6789  001E0C  D002               	goto	l615
  6790                           
  6791                           ;SwSpiApp.c: 168: {
  6792                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
  6793  001E0E  868B               	bsf	3979,3,c	;volatile
  6794                           
  6795                           ;SwSpiApp.c: 170: }
  6796  001E10  0012               	return	
  6797  001E12                     l615:
  6798                           
  6799                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
  6800  001E12  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  6801  001E14  A4D8               	btfss	status,2,c
  6802  001E16  0012               	return	
  6803                           
  6804                           ;SwSpiApp.c: 172: {
  6805                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
  6806  001E18  968B               	bcf	3979,3,c	;volatile
  6807                           
  6808                           ;SwSpiApp.c: 174: }
  6809                           ;SwSpiApp.c: 175: break;
  6810  001E1A  0012               	return	
  6811  001E1C                     
  6812                           ;SwSpiApp.c: 178: if(cPinMode == 1)
  6813  001E1C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  6814  001E1E  A4D8               	btfss	status,2,c
  6815  001E20  D002               	goto	l624
  6816                           
  6817                           ;SwSpiApp.c: 179: {
  6818                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
  6819  001E22  888B               	bsf	3979,4,c	;volatile
  6820                           
  6821                           ;SwSpiApp.c: 181: }
  6822  001E24  0012               	return	
  6823  001E26                     l624:
  6824                           
  6825                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
  6826  001E26  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  6827  001E28  A4D8               	btfss	status,2,c
  6828  001E2A  0012               	return	
  6829                           
  6830                           ;SwSpiApp.c: 183: {
  6831                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
  6832  001E2C  988B               	bcf	3979,4,c	;volatile
  6833                           
  6834                           ;SwSpiApp.c: 185: }
  6835                           ;SwSpiApp.c: 187: break;
  6836  001E2E  0012               	return	
  6837  001E30                     
  6838                           ;SwSpiApp.c: 190: if(cPinMode == 1)
  6839  001E30  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
  6840  001E32  A4D8               	btfss	status,2,c
  6841  001E34  D002               	goto	l632
  6842                           
  6843                           ;SwSpiApp.c: 191: {
  6844                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
  6845  001E36  8689               	bsf	3977,3,c	;volatile
  6846                           
  6847                           ;SwSpiApp.c: 193: }
  6848  001E38  0012               	return	
  6849  001E3A                     l632:
  6850                           
  6851                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
  6852  001E3A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
  6853  001E3C  A4D8               	btfss	status,2,c
  6854  001E3E  0012               	return	
  6855                           
  6856                           ;SwSpiApp.c: 195: {
  6857                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
  6858  001E40  9689               	bcf	3977,3,c	;volatile
  6859                           
  6860                           ;SwSpiApp.c: 199: }
  6861                           
  6862                           ;SwSpiApp.c: 197: }
  6863                           ;SwSpiApp.c: 198: break;
  6864  001E42  0012               	return	
  6865  001E44                     l613:
  6866  001E44  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
  6867                           
  6868                           ; Switch size 1, requested type "space"
  6869                           ; Number of cases is 3, Range of values is 0 to 2
  6870                           ; switch strategies available:
  6871                           ; Name         Instructions Cycles
  6872                           ; simple_byte           10     6 (average)
  6873                           ;	Chosen strategy is simple_byte
  6874  001E46  0A00               	xorlw	0	; case 0
  6875  001E48  B4D8               	btfsc	status,2,c
  6876  001E4A  D7DE               	goto	l614
  6877  001E4C  0A01               	xorlw	1	; case 1
  6878  001E4E  B4D8               	btfsc	status,2,c
  6879  001E50  D7E5               	goto	l623
  6880  001E52  0A03               	xorlw	3	; case 2
  6881  001E54  A4D8               	btfss	status,2,c
  6882  001E56  0012               	return	
  6883  001E58  D7EB               	goto	l631
  6884  001E5A                     __end_of_SwSpi_Clk_Pin:
  6885                           	opt stack 0
  6886                           tblptru	equ	0xFF8
  6887                           tblptrh	equ	0xFF7
  6888                           tblptrl	equ	0xFF6
  6889                           tablat	equ	0xFF5
  6890                           prodh	equ	0xFF4
  6891                           prodl	equ	0xFF3
  6892                           intcon	equ	0xFF2
  6893                           intcon2	equ	0xFF1
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           postdec1	equ	0xFE5
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           postinc2	equ	0xFDE
  6900                           postdec2	equ	0xFDD
  6901                           fsr2h	equ	0xFDA
  6902                           fsr2l	equ	0xFD9
  6903                           status	equ	0xFD8
  6904                           
  6905 ;; *************** function _ClearMcuRunTime *****************
  6906 ;; Defined at:
  6907 ;;		line 87 in file "SystemStatus.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;		None
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;		None
  6912 ;; Return value:  Size  Location     Type
  6913 ;;                  1    wreg      void 
  6914 ;; Registers used:
  6915 ;;		wreg, status,2
  6916 ;; Tracked objects:
  6917 ;;		On entry : 0/0
  6918 ;;		On exit  : 0/0
  6919 ;;		Unchanged: 0/0
  6920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6921 ;;      Params:         0       0       0       0       0       0       0
  6922 ;;      Locals:         0       0       0       0       0       0       0
  6923 ;;      Temps:          0       0       0       0       0       0       0
  6924 ;;      Totals:         0       0       0       0       0       0       0
  6925 ;;Total ram usage:        0 bytes
  6926 ;; Hardware stack levels used:    1
  6927 ;; Hardware stack levels required when called:    3
  6928 ;; This function calls:
  6929 ;;		Nothing
  6930 ;; This function is called by:
  6931 ;;		_InitSystemApplicationManagers
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text39
  6936  00238A                     __ptext39:
  6937                           	opt stack 0
  6938  00238A                     _ClearMcuRunTime:
  6939                           	opt stack 26
  6940                           
  6941                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
  6942                           
  6943                           ;incstack = 0
  6944  00238A  0E00               	movlw	0
  6945  00238C  0100               	movlb	0	; () banked
  6946  00238E  6FC7               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
  6947  002390  0E00               	movlw	0
  6948  002392  6FC8               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
  6949  002394  0E00               	movlw	0
  6950  002396  6FC9               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
  6951  002398  0E00               	movlw	0
  6952  00239A  6FCA               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955  00239C  0012               	return		;funcret
  6956  00239E                     __end_of_ClearMcuRunTime:
  6957                           	opt stack 0
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           intcon	equ	0xFF2
  6965                           intcon2	equ	0xFF1
  6966                           postinc0	equ	0xFEE
  6967                           wreg	equ	0xFE8
  6968                           postdec1	equ	0xFE5
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _CheckFlashPrecentage *****************
  6978 ;; Defined at:
  6979 ;;		line 205 in file "FlashApp.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  precentage      3   28[BANK0 ] void 
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      unsigned char 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       0       0       0       0       0       0
  6994 ;;      Locals:         0       3       0       0       0       0       0
  6995 ;;      Temps:          0       4       0       0       0       0       0
  6996 ;;      Totals:         0       7       0       0       0       0       0
  6997 ;;Total ram usage:        7 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    5
  7000 ;; This function calls:
  7001 ;;		___ftdiv
  7002 ;;		___ftge
  7003 ;;		___ftmul
  7004 ;;		___lltoft
  7005 ;; This function is called by:
  7006 ;;		_main
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text40
  7011  0015E2                     __ptext40:
  7012                           	opt stack 0
  7013  0015E2                     _CheckFlashPrecentage:
  7014                           	opt stack 25
  7015                           
  7016                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;incstack = 0
  7020  0015E2  0EE0               	movlw	224
  7021  0015E4  6E2C               	movwf	___ftdiv@f2,c
  7022  0015E6  0EFF               	movlw	255
  7023  0015E8  6E2D               	movwf	___ftdiv@f2+1,c
  7024  0015EA  0E46               	movlw	70
  7025  0015EC  6E2E               	movwf	___ftdiv@f2+2,c
  7026  0015EE  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
  7027  0015F2  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
  7028  0015F6  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
  7029  0015FA  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
  7030  0015FE  0100               	movlb	0	; () banked
  7031  001600  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
  7032  001602  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
  7033  001604  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
  7034  001606  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
  7035  001608  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
  7036  00160A  0E00               	movlw	0
  7037  00160C  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
  7038  00160E  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
  7039  001610  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
  7040  001612  0EF0               	movlw	240
  7041  001614  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
  7042  001616  6E20               	movwf	___lltoft@c,c
  7043  001618  0E7F               	movlw	127
  7044  00161A  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
  7045  00161C  6E21               	movwf	___lltoft@c+1,c
  7046  00161E  0E00               	movlw	0
  7047  001620  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
  7048  001622  6E22               	movwf	___lltoft@c+2,c
  7049  001624  0E00               	movlw	0
  7050  001626  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
  7051  001628  6E23               	movwf	___lltoft@c+3,c
  7052  00162A  EC24  F00E         	call	___lltoft	;wreg free
  7053  00162E  C020  F029         	movff	?___lltoft,___ftdiv@f1
  7054  001632  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
  7055  001636  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
  7056  00163A  ECB3  F007         	call	___ftdiv	;wreg free
  7057  00163E  C029  F069         	movff	?___ftdiv,___ftmul@f1
  7058  001642  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  7059  001646  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  7060  00164A  0E00               	movlw	0
  7061  00164C  0100               	movlb	0	; () banked
  7062  00164E  6F6C               	movwf	___ftmul@f2& (0+255),b
  7063  001650  0EC8               	movlw	200
  7064  001652  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7065  001654  0E42               	movlw	66
  7066  001656  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7067  001658  EC38  F007         	call	___ftmul	;wreg free
  7068  00165C  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
  7069  001660  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
  7070  001664  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
  7071                           
  7072                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
  7073  001668  0E00               	movlw	0
  7074  00166A  6E18               	movwf	___ftge@ff1,c
  7075  00166C  0E96               	movlw	150
  7076  00166E  6E19               	movwf	___ftge@ff1+1,c
  7077  001670  0E42               	movlw	66
  7078  001672  6E1A               	movwf	___ftge@ff1+2,c
  7079  001674  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
  7080  001678  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
  7081  00167C  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
  7082  001680  ECE7  F00B         	call	___ftge	;wreg free
  7083  001684  B0D8               	btfsc	status,0,c
  7084  001686  D002               	goto	u6260
  7085  001688  0E01               	movlw	1
  7086  00168A  0012               	return	
  7087  00168C                     u6260:
  7088  00168C  0E00               	movlw	0
  7089  00168E  0012               	return	
  7090  001690                     __end_of_CheckFlashPrecentage:
  7091                           	opt stack 0
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           intcon	equ	0xFF2
  7099                           intcon2	equ	0xFF1
  7100                           postinc0	equ	0xFEE
  7101                           wreg	equ	0xFE8
  7102                           postdec1	equ	0xFE5
  7103                           fsr1l	equ	0xFE1
  7104                           indf2	equ	0xFDF
  7105                           postinc2	equ	0xFDE
  7106                           postdec2	equ	0xFDD
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function _BlinkOkLeds *****************
  7112 ;; Defined at:
  7113 ;;		line 24 in file "LedsApp.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  state           1    wreg     enum E7644
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  state           1   28[COMRAM] enum E7644
  7118 ;;  idx             2   26[COMRAM] int 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      void 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7128 ;;      Params:         0       0       0       0       0       0       0
  7129 ;;      Locals:         3       0       0       0       0       0       0
  7130 ;;      Temps:          3       0       0       0       0       0       0
  7131 ;;      Totals:         6       0       0       0       0       0       0
  7132 ;;Total ram usage:        6 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    3
  7135 ;; This function calls:
  7136 ;;		Nothing
  7137 ;; This function is called by:
  7138 ;;		_main
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           	psect	text41
  7143  001B30                     __ptext41:
  7144                           	opt stack 0
  7145  001B30                     _BlinkOkLeds:
  7146                           	opt stack 27
  7147                           
  7148                           ;incstack = 0
  7149                           ;BlinkOkLeds@state stored from wreg
  7150  001B30  6E1D               	movwf	BlinkOkLeds@state,c
  7151                           
  7152                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
  7153  001B32  0E00               	movlw	0
  7154  001B34  6E1C               	movwf	BlinkOkLeds@idx+1,c
  7155  001B36  0E00               	movlw	0
  7156  001B38  6E1B               	movwf	BlinkOkLeds@idx,c
  7157  001B3A                     l3387:
  7158  001B3A  501D               	movf	BlinkOkLeds@state,w,c
  7159  001B3C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  7160  001B3E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
  7161  001B40  5018               	movf	??_BlinkOkLeds,w,c
  7162  001B42  5C1B               	subwf	BlinkOkLeds@idx,w,c
  7163  001B44  501C               	movf	BlinkOkLeds@idx+1,w,c
  7164  001B46  0A80               	xorlw	128
  7165  001B48  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
  7166  001B4A  5019               	movf	??_BlinkOkLeds+1,w,c
  7167  001B4C  0A80               	xorlw	128
  7168  001B4E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
  7169  001B50  B0D8               	btfsc	status,0,c
  7170  001B52  0012               	return	
  7171                           
  7172                           ;LedsApp.c: 27: {
  7173                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
  7174  001B54  908B               	bcf	3979,0,c	;volatile
  7175                           
  7176                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
  7177  001B56  0E02               	movlw	2
  7178  001B58  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  7179  001B5A  0E04               	movlw	4
  7180  001B5C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  7181  001B5E  0EBA               	movlw	186
  7182  001B60                     u6387:
  7183  001B60  2EE8               	decfsz	wreg,f,c
  7184  001B62  D7FE               	bra	u6387
  7185  001B64  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  7186  001B66  D7FC               	bra	u6387
  7187  001B68  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  7188  001B6A  D7FA               	bra	u6387
  7189  001B6C  D000               	nop2	
  7190                           
  7191                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
  7192  001B6E  808B               	bsf	3979,0,c	;volatile
  7193                           
  7194                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
  7195  001B70  0E02               	movlw	2
  7196  001B72  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
  7197  001B74  0E04               	movlw	4
  7198  001B76  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  7199  001B78  0EBA               	movlw	186
  7200  001B7A                     u6397:
  7201  001B7A  2EE8               	decfsz	wreg,f,c
  7202  001B7C  D7FE               	bra	u6397
  7203  001B7E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
  7204  001B80  D7FC               	bra	u6397
  7205  001B82  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
  7206  001B84  D7FA               	bra	u6397
  7207  001B86  D000               	nop2	
  7208  001B88  4A1B               	infsnz	BlinkOkLeds@idx,f,c
  7209  001B8A  2A1C               	incf	BlinkOkLeds@idx+1,f,c
  7210  001B8C  D7D6               	goto	l3387
  7211  001B8E                     __end_of_BlinkOkLeds:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           postdec1	equ	0xFE5
  7224                           fsr1l	equ	0xFE1
  7225                           indf2	equ	0xFDF
  7226                           postinc2	equ	0xFDE
  7227                           postdec2	equ	0xFDD
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8
  7231                           
  7232 ;; *************** function _BlinkErrorLeds *****************
  7233 ;; Defined at:
  7234 ;;		line 13 in file "LedsApp.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  state           1    wreg     enum E7647
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  state           1   28[COMRAM] enum E7647
  7239 ;;  idx             2   26[COMRAM] int 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7249 ;;      Params:         0       0       0       0       0       0       0
  7250 ;;      Locals:         3       0       0       0       0       0       0
  7251 ;;      Temps:          3       0       0       0       0       0       0
  7252 ;;      Totals:         6       0       0       0       0       0       0
  7253 ;;Total ram usage:        6 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    3
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_main
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text42
  7264  001B8E                     __ptext42:
  7265                           	opt stack 0
  7266  001B8E                     _BlinkErrorLeds:
  7267                           	opt stack 27
  7268                           
  7269                           ;incstack = 0
  7270                           ;BlinkErrorLeds@state stored from wreg
  7271  001B8E  6E1D               	movwf	BlinkErrorLeds@state,c
  7272                           
  7273                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  7274  001B90  0E00               	movlw	0
  7275  001B92  6E1C               	movwf	BlinkErrorLeds@idx+1,c
  7276  001B94  0E00               	movlw	0
  7277  001B96  6E1B               	movwf	BlinkErrorLeds@idx,c
  7278  001B98                     l3375:
  7279  001B98  501D               	movf	BlinkErrorLeds@state,w,c
  7280  001B9A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  7281  001B9C  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  7282  001B9E  5018               	movf	??_BlinkErrorLeds,w,c
  7283  001BA0  5C1B               	subwf	BlinkErrorLeds@idx,w,c
  7284  001BA2  501C               	movf	BlinkErrorLeds@idx+1,w,c
  7285  001BA4  0A80               	xorlw	128
  7286  001BA6  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  7287  001BA8  5019               	movf	??_BlinkErrorLeds+1,w,c
  7288  001BAA  0A80               	xorlw	128
  7289  001BAC  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  7290  001BAE  B0D8               	btfsc	status,0,c
  7291  001BB0  0012               	return	
  7292                           
  7293                           ;LedsApp.c: 16: {
  7294                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  7295  001BB2  988A               	bcf	3978,4,c	;volatile
  7296                           
  7297                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  7298  001BB4  0E02               	movlw	2
  7299  001BB6  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  7300  001BB8  0E04               	movlw	4
  7301  001BBA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  7302  001BBC  0EBA               	movlw	186
  7303  001BBE                     u6407:
  7304  001BBE  2EE8               	decfsz	wreg,f,c
  7305  001BC0  D7FE               	bra	u6407
  7306  001BC2  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  7307  001BC4  D7FC               	bra	u6407
  7308  001BC6  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  7309  001BC8  D7FA               	bra	u6407
  7310  001BCA  D000               	nop2	
  7311                           
  7312                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  7313  001BCC  888A               	bsf	3978,4,c	;volatile
  7314                           
  7315                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  7316  001BCE  0E02               	movlw	2
  7317  001BD0  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  7318  001BD2  0E04               	movlw	4
  7319  001BD4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  7320  001BD6  0EBA               	movlw	186
  7321  001BD8                     u6417:
  7322  001BD8  2EE8               	decfsz	wreg,f,c
  7323  001BDA  D7FE               	bra	u6417
  7324  001BDC  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  7325  001BDE  D7FC               	bra	u6417
  7326  001BE0  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  7327  001BE2  D7FA               	bra	u6417
  7328  001BE4  D000               	nop2	
  7329  001BE6  4A1B               	infsnz	BlinkErrorLeds@idx,f,c
  7330  001BE8  2A1C               	incf	BlinkErrorLeds@idx+1,f,c
  7331  001BEA  D7D6               	goto	l3375
  7332  001BEC                     __end_of_BlinkErrorLeds:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           postinc0	equ	0xFEE
  7343                           wreg	equ	0xFE8
  7344                           postdec1	equ	0xFE5
  7345                           fsr1l	equ	0xFE1
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _AdcConvert *****************
  7354 ;; Defined at:
  7355 ;;		line 56 in file "AdcApp.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  _adcResult      2    2[BANK1 ] unsigned int 
  7360 ;;  idx             1   11[BANK1 ] unsigned char 
  7361 ;;  _adcResult      2    4[BANK1 ] unsigned int 
  7362 ;;  adcRes          2    9[BANK1 ] unsigned int 
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      void 
  7365 ;; Registers used:
  7366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7372 ;;      Params:         0       0       0       0       0       0       0
  7373 ;;      Locals:         0       0      10       0       0       0       0
  7374 ;;      Temps:          0       0       2       0       0       0       0
  7375 ;;      Totals:         0       0      12       0       0       0       0
  7376 ;;Total ram usage:       12 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    8
  7379 ;; This function calls:
  7380 ;;		_ADC_GetConversion
  7381 ;;		_FlashSampleWrite
  7382 ;;		___ftdiv
  7383 ;;		___ftmul
  7384 ;;		___fttol
  7385 ;;		___lwtoft
  7386 ;;		_pow
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text43
  7393  0004F4                     __ptext43:
  7394                           	opt stack 0
  7395  0004F4                     _AdcConvert:
  7396                           	opt stack 22
  7397                           
  7398                           ;AdcApp.c: 61: uint16_t adcRes = 0;
  7399                           
  7400                           ;incstack = 0
  7401  0004F4  0E00               	movlw	0
  7402  0004F6  0101               	movlb	1	; () banked
  7403  0004F8  6FB8               	movwf	(AdcConvert@adcRes+1)& (0+255),b
  7404  0004FA  0E00               	movlw	0
  7405  0004FC  6FB7               	movwf	AdcConvert@adcRes& (0+255),b
  7406                           
  7407                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
  7408  0004FE  0100               	movlb	0	; () banked
  7409  000500  51D5               	movf	_adcSampleMode& (0+255),w,b
  7410  000502  A4D8               	btfss	status,2,c
  7411  000504  D074               	goto	l112
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;AdcApp.c: 64: {
  7415                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
  7416  000506  0E00               	movlw	0
  7417  000508  0101               	movlb	1	; () banked
  7418  00050A  6FB9               	movwf	AdcConvert@idx& (0+255),b
  7419  00050C                     l6745:
  7420                           
  7421                           ; BSR set to: 1
  7422  00050C  0E06               	movlw	6
  7423  00050E  65B9               	cpfsgt	AdcConvert@idx& (0+255),b
  7424  000510  D001               	goto	l113
  7425  000512  0012               	return	
  7426  000514                     l113:
  7427                           
  7428                           ; BSR set to: 1
  7429                           ;AdcApp.c: 66: {
  7430                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
  7431                           
  7432                           ; BSR set to: 1
  7433  000514  51B9               	movf	AdcConvert@idx& (0+255),w,b
  7434  000516  0D01               	mullw	1
  7435  000518  0E4B               	movlw	low _channelArr
  7436  00051A  24F3               	addwf	prodl,w,c
  7437  00051C  6EF6               	movwf	tblptrl,c
  7438  00051E  0E7C               	movlw	high _channelArr
  7439  000520  20F4               	addwfc	prodh,w,c
  7440  000522  6EF7               	movwf	tblptrh,c
  7441  000524                     	if	0	;There are less than 3 active tblptr bytes
  7442  000524                     	endif
  7443  000524  0008               	tblrd		*
  7444  000526  50F5               	movf	tablat,w,c
  7445  000528  ECD1  F010         	call	_ADC_GetConversion
  7446  00052C  C018  F1B0         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
  7447  000530  C019  F1B1         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
  7448                           
  7449                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7450  000534  0E00               	movlw	0
  7451  000536  0100               	movlb	0	; () banked
  7452  000538  6FA5               	movwf	pow@y& (0+255),b
  7453  00053A  0E20               	movlw	32
  7454  00053C  6FA6               	movwf	(pow@y+1)& (0+255),b
  7455  00053E  0E41               	movlw	65
  7456  000540  6FA7               	movwf	(pow@y+2)& (0+255),b
  7457  000542  0E00               	movlw	0
  7458  000544  6FA2               	movwf	pow@x& (0+255),b
  7459  000546  0E00               	movlw	0
  7460  000548  6FA3               	movwf	(pow@x+1)& (0+255),b
  7461  00054A  0E40               	movlw	64
  7462  00054C  6FA4               	movwf	(pow@x+2)& (0+255),b
  7463  00054E  ECF0  F004         	call	_pow	;wreg free
  7464  000552  C0A2  F1B4         	movff	?_pow,_AdcConvert$3340
  7465  000556  C0A3  F1B5         	movff	?_pow+1,_AdcConvert$3340+1
  7466  00055A  C0A4  F1B6         	movff	?_pow+2,_AdcConvert$3340+2
  7467                           
  7468                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7469  00055E  0EC0               	movlw	192
  7470  000560  0100               	movlb	0	; () banked
  7471  000562  6F6C               	movwf	___ftmul@f2& (0+255),b
  7472  000564  0E50               	movlw	80
  7473  000566  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7474  000568  0E45               	movlw	69
  7475  00056A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7476  00056C  C1B4  F02C         	movff	_AdcConvert$3340,___ftdiv@f2
  7477  000570  C1B5  F02D         	movff	_AdcConvert$3340+1,___ftdiv@f2+1
  7478  000574  C1B6  F02E         	movff	_AdcConvert$3340+2,___ftdiv@f2+2
  7479  000578  C1B0  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
  7480  00057C  C1B1  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
  7481  000580  EC4D  F011         	call	___lwtoft	;wreg free
  7482  000584  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  7483  000588  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  7484  00058C  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  7485  000590  ECB3  F007         	call	___ftdiv	;wreg free
  7486  000594  C029  F069         	movff	?___ftdiv,___ftmul@f1
  7487  000598  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  7488  00059C  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  7489  0005A0  EC38  F007         	call	___ftmul	;wreg free
  7490  0005A4  C069  F078         	movff	?___ftmul,___fttol@f1
  7491  0005A8  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  7492  0005AC  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  7493  0005B0  ECBC  F006         	call	___fttol	;wreg free
  7494  0005B4  C078  F1B7         	movff	?___fttol,AdcConvert@adcRes
  7495  0005B8  C079  F1B8         	movff	?___fttol+1,AdcConvert@adcRes+1
  7496                           
  7497                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
  7498  0005BC  C1B7  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  7499  0005C0  C1B8  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  7500  0005C4  0101               	movlb	1	; () banked
  7501  0005C6  29B9               	incf	AdcConvert@idx& (0+255),w,b
  7502  0005C8  6E2F               	movwf	FlashSampleWrite@channelNum,c
  7503  0005CA  EC3F  F006         	call	_FlashSampleWrite	;wreg free
  7504                           
  7505                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
  7506  0005CE  0E03               	movlw	3
  7507  0005D0  0101               	movlb	1	; () banked
  7508  0005D2  6FAF               	movwf	(??_AdcConvert+1)& (0+255),b
  7509  0005D4  0E8A               	movlw	138
  7510  0005D6  6FAE               	movwf	??_AdcConvert& (0+255),b
  7511  0005D8  0E55               	movlw	85
  7512  0005DA                     u6427:
  7513  0005DA  2EE8               	decfsz	wreg,f,c
  7514  0005DC  D7FE               	bra	u6427
  7515  0005DE  2FAE               	decfsz	??_AdcConvert& (0+255),f,b
  7516  0005E0  D7FC               	bra	u6427
  7517  0005E2  2FAF               	decfsz	(??_AdcConvert+1)& (0+255),f,b
  7518  0005E4  D7FA               	bra	u6427
  7519  0005E6  D000               	nop2	
  7520  0005E8  0101               	movlb	1	; () banked
  7521  0005EA  2BB9               	incf	AdcConvert@idx& (0+255),f,b
  7522  0005EC  D78F               	goto	l6745
  7523  0005EE                     l112:
  7524                           
  7525                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
  7526                           
  7527                           ; BSR set to: 1
  7528  0005EE  0100               	movlb	0	; () banked
  7529  0005F0  05D5               	decf	_adcSampleMode& (0+255),w,b
  7530  0005F2  A4D8               	btfss	status,2,c
  7531  0005F4  0012               	return	
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;AdcApp.c: 74: {
  7535                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
  7536  0005F6  51D4               	movf	_channel& (0+255),w,b
  7537  0005F8  0D01               	mullw	1
  7538  0005FA  0E4B               	movlw	low _channelArr
  7539  0005FC  24F3               	addwf	prodl,w,c
  7540  0005FE  6EF6               	movwf	tblptrl,c
  7541  000600  0E7C               	movlw	high _channelArr
  7542  000602  20F4               	addwfc	prodh,w,c
  7543  000604  6EF7               	movwf	tblptrh,c
  7544  000606                     	if	0	;There are less than 3 active tblptr bytes
  7545  000606                     	endif
  7546  000606  0008               	tblrd		*
  7547  000608  50F5               	movf	tablat,w,c
  7548  00060A  ECD1  F010         	call	_ADC_GetConversion
  7549  00060E  C018  F1B2         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
  7550  000612  C019  F1B3         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
  7551                           
  7552                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7553  000616  0E00               	movlw	0
  7554  000618  0100               	movlb	0	; () banked
  7555  00061A  6FA5               	movwf	pow@y& (0+255),b
  7556  00061C  0E20               	movlw	32
  7557  00061E  6FA6               	movwf	(pow@y+1)& (0+255),b
  7558  000620  0E41               	movlw	65
  7559  000622  6FA7               	movwf	(pow@y+2)& (0+255),b
  7560  000624  0E00               	movlw	0
  7561  000626  6FA2               	movwf	pow@x& (0+255),b
  7562  000628  0E00               	movlw	0
  7563  00062A  6FA3               	movwf	(pow@x+1)& (0+255),b
  7564  00062C  0E40               	movlw	64
  7565  00062E  6FA4               	movwf	(pow@x+2)& (0+255),b
  7566  000630  ECF0  F004         	call	_pow	;wreg free
  7567  000634  C0A2  F1B4         	movff	?_pow,_AdcConvert$3340
  7568  000638  C0A3  F1B5         	movff	?_pow+1,_AdcConvert$3340+1
  7569  00063C  C0A4  F1B6         	movff	?_pow+2,_AdcConvert$3340+2
  7570                           
  7571                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7572  000640  0EC0               	movlw	192
  7573  000642  0100               	movlb	0	; () banked
  7574  000644  6F6C               	movwf	___ftmul@f2& (0+255),b
  7575  000646  0E50               	movlw	80
  7576  000648  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7577  00064A  0E45               	movlw	69
  7578  00064C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7579  00064E  C1B4  F02C         	movff	_AdcConvert$3340,___ftdiv@f2
  7580  000652  C1B5  F02D         	movff	_AdcConvert$3340+1,___ftdiv@f2+1
  7581  000656  C1B6  F02E         	movff	_AdcConvert$3340+2,___ftdiv@f2+2
  7582  00065A  C1B2  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
  7583  00065E  C1B3  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
  7584  000662  EC4D  F011         	call	___lwtoft	;wreg free
  7585  000666  C020  F029         	movff	?___lwtoft,___ftdiv@f1
  7586  00066A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
  7587  00066E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
  7588  000672  ECB3  F007         	call	___ftdiv	;wreg free
  7589  000676  C029  F069         	movff	?___ftdiv,___ftmul@f1
  7590  00067A  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  7591  00067E  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  7592  000682  EC38  F007         	call	___ftmul	;wreg free
  7593  000686  C069  F078         	movff	?___ftmul,___fttol@f1
  7594  00068A  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  7595  00068E  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  7596  000692  ECBC  F006         	call	___fttol	;wreg free
  7597  000696  C078  F1B7         	movff	?___fttol,AdcConvert@adcRes
  7598  00069A  C079  F1B8         	movff	?___fttol+1,AdcConvert@adcRes+1
  7599                           
  7600                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
  7601  00069E  C1B7  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
  7602  0006A2  C1B8  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
  7603  0006A6  0E01               	movlw	1
  7604  0006A8  6E2F               	movwf	FlashSampleWrite@channelNum,c
  7605  0006AA  EC3F  F006         	call	_FlashSampleWrite	;wreg free
  7606  0006AE  0012               	return	
  7607  0006B0                     __end_of_AdcConvert:
  7608                           	opt stack 0
  7609                           tblptru	equ	0xFF8
  7610                           tblptrh	equ	0xFF7
  7611                           tblptrl	equ	0xFF6
  7612                           tablat	equ	0xFF5
  7613                           prodh	equ	0xFF4
  7614                           prodl	equ	0xFF3
  7615                           intcon	equ	0xFF2
  7616                           intcon2	equ	0xFF1
  7617                           postinc0	equ	0xFEE
  7618                           wreg	equ	0xFE8
  7619                           postdec1	equ	0xFE5
  7620                           fsr1l	equ	0xFE1
  7621                           indf2	equ	0xFDF
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _pow *****************
  7629 ;; Defined at:
  7630 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  x               3   66[BANK0 ] void 
  7633 ;;  y               3   69[BANK0 ] void 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  yi              4   79[BANK0 ] unsigned long 
  7636 ;;  sign            1   78[BANK0 ] unsigned char 
  7637 ;; Return value:  Size  Location     Type
  7638 ;;                  3   66[BANK0 ] unsigned char 
  7639 ;; Registers used:
  7640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7646 ;;      Params:         0       6       0       0       0       0       0
  7647 ;;      Locals:         0      11       0       0       0       0       0
  7648 ;;      Temps:          0       0       0       0       0       0       0
  7649 ;;      Totals:         0      17       0       0       0       0       0
  7650 ;;Total ram usage:       17 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; Hardware stack levels required when called:    7
  7653 ;; This function calls:
  7654 ;;		___ftge
  7655 ;;		___ftmul
  7656 ;;		___ftneg
  7657 ;;		___fttol
  7658 ;;		___lltoft
  7659 ;;		_exp
  7660 ;;		_log
  7661 ;; This function is called by:
  7662 ;;		_AdcConvert
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text44
  7667  0009E0                     __ptext44:
  7668                           	opt stack 0
  7669  0009E0                     _pow:
  7670                           	opt stack 22
  7671                           
  7672                           ;incstack = 0
  7673  0009E0  0E00               	movlw	0
  7674  0009E2  0100               	movlb	0	; () banked
  7675  0009E4  6FAE               	movwf	pow@sign& (0+255),b
  7676                           
  7677                           ; BSR set to: 0
  7678  0009E6  51A2               	movf	pow@x& (0+255),w,b
  7679  0009E8  11A3               	iorwf	(pow@x+1)& (0+255),w,b
  7680  0009EA  11A4               	iorwf	(pow@x+2)& (0+255),w,b
  7681  0009EC  A4D8               	btfss	status,2,c
  7682  0009EE  D01D               	goto	l1894
  7683                           
  7684                           ; BSR set to: 0
  7685  0009F0  0E00               	movlw	0
  7686  0009F2  6E18               	movwf	___ftge@ff1,c
  7687  0009F4  0E00               	movlw	0
  7688  0009F6  6E19               	movwf	___ftge@ff1+1,c
  7689  0009F8  0E00               	movlw	0
  7690  0009FA  6E1A               	movwf	___ftge@ff1+2,c
  7691  0009FC  C0A5  F01B         	movff	pow@y,___ftge@ff2
  7692  000A00  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
  7693  000A04  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
  7694  000A08  ECE7  F00B         	call	___ftge	;wreg free
  7695  000A0C  A0D8               	btfss	status,0,c
  7696  000A0E  D005               	goto	l1895
  7697  000A10  0E00               	movlw	0
  7698  000A12  0100               	movlb	0	; () banked
  7699  000A14  6FCC               	movwf	(_errno+1)& (0+255),b
  7700  000A16  0E21               	movlw	33
  7701  000A18  6FCB               	movwf	_errno& (0+255),b
  7702  000A1A                     l1895:
  7703  000A1A  0E00               	movlw	0
  7704  000A1C  0100               	movlb	0	; () banked
  7705  000A1E  6FA2               	movwf	?_pow& (0+255),b
  7706  000A20  0E00               	movlw	0
  7707  000A22  6FA3               	movwf	(?_pow+1)& (0+255),b
  7708  000A24  0E00               	movlw	0
  7709  000A26  6FA4               	movwf	(?_pow+2)& (0+255),b
  7710                           
  7711                           ; BSR set to: 0
  7712  000A28  0012               	return	
  7713  000A2A                     l1894:
  7714                           
  7715                           ; BSR set to: 0
  7716                           
  7717                           ; BSR set to: 0
  7718  000A2A  51A5               	movf	pow@y& (0+255),w,b
  7719  000A2C  11A6               	iorwf	(pow@y+1)& (0+255),w,b
  7720  000A2E  11A7               	iorwf	(pow@y+2)& (0+255),w,b
  7721  000A30  A4D8               	btfss	status,2,c
  7722  000A32  D007               	goto	l1897
  7723                           
  7724                           ; BSR set to: 0
  7725  000A34  0E00               	movlw	0
  7726  000A36  6FA2               	movwf	?_pow& (0+255),b
  7727  000A38  0E80               	movlw	128
  7728  000A3A  6FA3               	movwf	(?_pow+1)& (0+255),b
  7729  000A3C  0E3F               	movlw	63
  7730  000A3E  6FA4               	movwf	(?_pow+2)& (0+255),b
  7731                           
  7732                           ; BSR set to: 0
  7733  000A40  0012               	return	
  7734  000A42                     l1897:
  7735                           
  7736                           ; BSR set to: 0
  7737                           
  7738                           ; BSR set to: 0
  7739  000A42  AFA4               	btfss	(pow@x+2)& (0+255),7,b
  7740  000A44  D041               	goto	l1898
  7741                           
  7742                           ; BSR set to: 0
  7743  000A46  C0A5  F078         	movff	pow@y,___fttol@f1
  7744  000A4A  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
  7745  000A4E  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
  7746  000A52  ECBC  F006         	call	___fttol	;wreg free
  7747  000A56  C078  F0AF         	movff	?___fttol,pow@yi
  7748  000A5A  C079  F0B0         	movff	?___fttol+1,pow@yi+1
  7749  000A5E  C07A  F0B1         	movff	?___fttol+2,pow@yi+2
  7750  000A62  C07B  F0B2         	movff	?___fttol+3,pow@yi+3
  7751  000A66  C0AF  F020         	movff	pow@yi,___lltoft@c
  7752  000A6A  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
  7753  000A6E  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
  7754  000A72  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
  7755  000A76  EC24  F00E         	call	___lltoft	;wreg free
  7756  000A7A  0100               	movlb	0	; () banked
  7757  000A7C  51A5               	movf	pow@y& (0+255),w,b
  7758  000A7E  1820               	xorwf	?___lltoft,w,c
  7759  000A80  E107               	bnz	u5910
  7760  000A82  51A6               	movf	(pow@y+1)& (0+255),w,b
  7761  000A84  1821               	xorwf	?___lltoft+1,w,c
  7762  000A86  E104               	bnz	u5910
  7763  000A88  51A7               	movf	(pow@y+2)& (0+255),w,b
  7764  000A8A  1822               	xorwf	?___lltoft+2,w,c
  7765  000A8C  B4D8               	btfsc	status,2,c
  7766  000A8E  D00B               	goto	l1899
  7767  000A90                     u5910:
  7768                           
  7769                           ; BSR set to: 0
  7770  000A90  0E00               	movlw	0
  7771  000A92  6FCC               	movwf	(_errno+1)& (0+255),b
  7772  000A94  0E21               	movlw	33
  7773  000A96  6FCB               	movwf	_errno& (0+255),b
  7774  000A98  0E00               	movlw	0
  7775  000A9A  6FA2               	movwf	?_pow& (0+255),b
  7776  000A9C  0E00               	movlw	0
  7777  000A9E  6FA3               	movwf	(?_pow+1)& (0+255),b
  7778  000AA0  0E00               	movlw	0
  7779  000AA2  6FA4               	movwf	(?_pow+2)& (0+255),b
  7780                           
  7781                           ; BSR set to: 0
  7782  000AA4  0012               	return	
  7783  000AA6                     l1899:
  7784                           
  7785                           ; BSR set to: 0
  7786                           
  7787                           ; BSR set to: 0
  7788  000AA6  51AF               	movf	pow@yi& (0+255),w,b
  7789  000AA8  0B01               	andlw	1
  7790  000AAA  6FAE               	movwf	pow@sign& (0+255),b
  7791                           
  7792                           ; BSR set to: 0
  7793  000AAC  C0A2  F018         	movff	pow@x,___ftneg@f1
  7794  000AB0  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  7795  000AB4  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  7796  000AB8  EC3B  F011         	call	___ftneg	;wreg free
  7797  000ABC  C018  F0A2         	movff	?___ftneg,pow@x
  7798  000AC0  C019  F0A3         	movff	?___ftneg+1,pow@x+1
  7799  000AC4  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
  7800  000AC8                     l1898:
  7801  000AC8  C0A2  F090         	movff	pow@x,log@x
  7802  000ACC  C0A3  F091         	movff	pow@x+1,log@x+1
  7803  000AD0  C0A4  F092         	movff	pow@x+2,log@x+2
  7804  000AD4  ECAE  F005         	call	_log	;wreg free
  7805  000AD8  C090  F0A8         	movff	?_log,_pow$3341
  7806  000ADC  C091  F0A9         	movff	?_log+1,_pow$3341+1
  7807  000AE0  C092  F0AA         	movff	?_log+2,_pow$3341+2
  7808  000AE4  C0A8  F069         	movff	_pow$3341,___ftmul@f1
  7809  000AE8  C0A9  F06A         	movff	_pow$3341+1,___ftmul@f1+1
  7810  000AEC  C0AA  F06B         	movff	_pow$3341+2,___ftmul@f1+2
  7811  000AF0  C0A5  F06C         	movff	pow@y,___ftmul@f2
  7812  000AF4  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
  7813  000AF8  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
  7814  000AFC  EC38  F007         	call	___ftmul	;wreg free
  7815  000B00  C069  F0AB         	movff	?___ftmul,_pow$3342
  7816  000B04  C06A  F0AC         	movff	?___ftmul+1,_pow$3342+1
  7817  000B08  C06B  F0AD         	movff	?___ftmul+2,_pow$3342+2
  7818  000B0C  C0AB  F099         	movff	_pow$3342,exp@x
  7819  000B10  C0AC  F09A         	movff	_pow$3342+1,exp@x+1
  7820  000B14  C0AD  F09B         	movff	_pow$3342+2,exp@x+2
  7821  000B18  EC81  F001         	call	_exp	;wreg free
  7822  000B1C  C099  F0A2         	movff	?_exp,pow@x
  7823  000B20  C09A  F0A3         	movff	?_exp+1,pow@x+1
  7824  000B24  C09B  F0A4         	movff	?_exp+2,pow@x+2
  7825  000B28  0100               	movlb	0	; () banked
  7826  000B2A  51AE               	movf	pow@sign& (0+255),w,b
  7827  000B2C  B4D8               	btfsc	status,2,c
  7828  000B2E  D00F               	goto	l1900
  7829                           
  7830                           ; BSR set to: 0
  7831  000B30  C0A2  F018         	movff	pow@x,___ftneg@f1
  7832  000B34  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
  7833  000B38  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
  7834  000B3C  EC3B  F011         	call	___ftneg	;wreg free
  7835  000B40  C018  F0A2         	movff	?___ftneg,?_pow
  7836  000B44  C019  F0A3         	movff	?___ftneg+1,?_pow+1
  7837  000B48  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
  7838  000B4C  0012               	return	
  7839  000B4E                     l1900:
  7840                           
  7841                           ; BSR set to: 0
  7842  000B4E  C0A2  F0A2         	movff	pow@x,?_pow
  7843  000B52  C0A3  F0A3         	movff	pow@x+1,?_pow+1
  7844  000B56  C0A4  F0A4         	movff	pow@x+2,?_pow+2
  7845  000B5A  0012               	return		;funcret
  7846  000B5C                     __end_of_pow:
  7847                           	opt stack 0
  7848                           tblptru	equ	0xFF8
  7849                           tblptrh	equ	0xFF7
  7850                           tblptrl	equ	0xFF6
  7851                           tablat	equ	0xFF5
  7852                           prodh	equ	0xFF4
  7853                           prodl	equ	0xFF3
  7854                           intcon	equ	0xFF2
  7855                           intcon2	equ	0xFF1
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function _log *****************
  7868 ;; Defined at:
  7869 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  x               3   48[BANK0 ] unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  exponent        2   51[BANK0 ] int 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  3   48[BANK0 ] int 
  7876 ;; Registers used:
  7877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7883 ;;      Params:         0       3       0       0       0       0       0
  7884 ;;      Locals:         0       2       0       0       0       0       0
  7885 ;;      Temps:          0       0       0       0       0       0       0
  7886 ;;      Totals:         0       5       0       0       0       0       0
  7887 ;;Total ram usage:        5 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    6
  7890 ;; This function calls:
  7891 ;;		___awtoft
  7892 ;;		___ftadd
  7893 ;;		___ftmul
  7894 ;;		_eval_poly
  7895 ;;		_frexp
  7896 ;; This function is called by:
  7897 ;;		_pow
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text45
  7902  000B5C                     __ptext45:
  7903                           	opt stack 0
  7904  000B5C                     _log:
  7905                           	opt stack 22
  7906                           
  7907                           ;incstack = 0
  7908  000B5C  0100               	movlb	0	; () banked
  7909  000B5E  AF92               	btfss	(log@x+2)& (0+255),7,b
  7910  000B60  D00B               	goto	l2156
  7911                           
  7912                           ; BSR set to: 0
  7913  000B62  0E00               	movlw	0
  7914  000B64  6FCC               	movwf	(_errno+1)& (0+255),b
  7915  000B66  0E21               	movlw	33
  7916  000B68  6FCB               	movwf	_errno& (0+255),b
  7917  000B6A  0E00               	movlw	0
  7918  000B6C  6F90               	movwf	?_log& (0+255),b
  7919  000B6E  0E00               	movlw	0
  7920  000B70  6F91               	movwf	(?_log+1)& (0+255),b
  7921  000B72  0E00               	movlw	0
  7922  000B74  6F92               	movwf	(?_log+2)& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925  000B76  0012               	return	
  7926  000B78                     l2156:
  7927                           
  7928                           ; BSR set to: 0
  7929                           
  7930                           ; BSR set to: 0
  7931  000B78  5190               	movf	log@x& (0+255),w,b
  7932  000B7A  1191               	iorwf	(log@x+1)& (0+255),w,b
  7933  000B7C  1192               	iorwf	(log@x+2)& (0+255),w,b
  7934  000B7E  A4D8               	btfss	status,2,c
  7935  000B80  D00B               	goto	l2158
  7936                           
  7937                           ; BSR set to: 0
  7938  000B82  0E00               	movlw	0
  7939  000B84  6FCC               	movwf	(_errno+1)& (0+255),b
  7940  000B86  0E22               	movlw	34
  7941  000B88  6FCB               	movwf	_errno& (0+255),b
  7942  000B8A  0E00               	movlw	0
  7943  000B8C  6F90               	movwf	?_log& (0+255),b
  7944  000B8E  0E00               	movlw	0
  7945  000B90  6F91               	movwf	(?_log+1)& (0+255),b
  7946  000B92  0E00               	movlw	0
  7947  000B94  6F92               	movwf	(?_log+2)& (0+255),b
  7948                           
  7949                           ; BSR set to: 0
  7950  000B96  0012               	return	
  7951  000B98                     l2158:
  7952                           
  7953                           ; BSR set to: 0
  7954                           
  7955                           ; BSR set to: 0
  7956  000B98  0E00               	movlw	0
  7957  000B9A  6F6C               	movwf	___ftmul@f2& (0+255),b
  7958  000B9C  0E00               	movlw	0
  7959  000B9E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  7960  000BA0  0E40               	movlw	64
  7961  000BA2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  7962  000BA4  0E93               	movlw	low log@exponent
  7963  000BA6  6E1B               	movwf	frexp@eptr,c
  7964  000BA8  0E00               	movlw	high log@exponent
  7965  000BAA  6E1C               	movwf	frexp@eptr+1,c
  7966  000BAC  C090  F018         	movff	log@x,frexp@value
  7967  000BB0  C091  F019         	movff	log@x+1,frexp@value+1
  7968  000BB4  C092  F01A         	movff	log@x+2,frexp@value+2
  7969  000BB8  EC9F  F00B         	call	_frexp	;wreg free
  7970  000BBC  C018  F069         	movff	?_frexp,___ftmul@f1
  7971  000BC0  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
  7972  000BC4  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
  7973  000BC8  EC38  F007         	call	___ftmul	;wreg free
  7974  000BCC  C069  F078         	movff	?___ftmul,___ftadd@f1
  7975  000BD0  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  7976  000BD4  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  7977  000BD8  0E00               	movlw	0
  7978  000BDA  0100               	movlb	0	; () banked
  7979  000BDC  6F7B               	movwf	___ftadd@f2& (0+255),b
  7980  000BDE  0E80               	movlw	128
  7981  000BE0  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
  7982  000BE2  0EBF               	movlw	191
  7983  000BE4  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
  7984  000BE6  EC58  F003         	call	___ftadd	;wreg free
  7985  000BEA  C078  F090         	movff	?___ftadd,log@x
  7986  000BEE  C079  F091         	movff	?___ftadd+1,log@x+1
  7987  000BF2  C07A  F092         	movff	?___ftadd+2,log@x+2
  7988  000BF6  0100               	movlb	0	; () banked
  7989  000BF8  0793               	decf	log@exponent& (0+255),f,b
  7990  000BFA  A0D8               	btfss	status,0,c
  7991  000BFC  0794               	decf	(log@exponent+1)& (0+255),f,b
  7992                           
  7993                           ; BSR set to: 0
  7994  000BFE  C090  F084         	movff	log@x,eval_poly@x
  7995  000C02  C091  F085         	movff	log@x+1,eval_poly@x+1
  7996  000C06  C092  F086         	movff	log@x+2,eval_poly@x+2
  7997  000C0A  0E70               	movlw	low log@coeff
  7998  000C0C  6F87               	movwf	eval_poly@d& (0+255),b
  7999  000C0E  0E7C               	movlw	high log@coeff
  8000  000C10  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  8001  000C12  0E00               	movlw	0
  8002  000C14  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  8003  000C16  0E08               	movlw	8
  8004  000C18  6F89               	movwf	eval_poly@n& (0+255),b
  8005  000C1A  EC98  F008         	call	_eval_poly	;wreg free
  8006  000C1E  C084  F090         	movff	?_eval_poly,log@x
  8007  000C22  C085  F091         	movff	?_eval_poly+1,log@x+1
  8008  000C26  C086  F092         	movff	?_eval_poly+2,log@x+2
  8009  000C2A  0E72               	movlw	114
  8010  000C2C  0100               	movlb	0	; () banked
  8011  000C2E  6F6C               	movwf	___ftmul@f2& (0+255),b
  8012  000C30  0E31               	movlw	49
  8013  000C32  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  8014  000C34  0E3F               	movlw	63
  8015  000C36  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  8016  000C38  C093  F020         	movff	log@exponent,___awtoft@c
  8017  000C3C  C094  F021         	movff	log@exponent+1,___awtoft@c+1
  8018  000C40  EC30  F010         	call	___awtoft	;wreg free
  8019  000C44  C020  F069         	movff	?___awtoft,___ftmul@f1
  8020  000C48  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
  8021  000C4C  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
  8022  000C50  EC38  F007         	call	___ftmul	;wreg free
  8023  000C54  C069  F078         	movff	?___ftmul,___ftadd@f1
  8024  000C58  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  8025  000C5C  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  8026  000C60  C090  F07B         	movff	log@x,___ftadd@f2
  8027  000C64  C091  F07C         	movff	log@x+1,___ftadd@f2+1
  8028  000C68  C092  F07D         	movff	log@x+2,___ftadd@f2+2
  8029  000C6C  EC58  F003         	call	___ftadd	;wreg free
  8030  000C70  C078  F090         	movff	?___ftadd,?_log
  8031  000C74  C079  F091         	movff	?___ftadd+1,?_log+1
  8032  000C78  C07A  F092         	movff	?___ftadd+2,?_log+2
  8033  000C7C  0012               	return	
  8034  000C7E                     __end_of_log:
  8035                           	opt stack 0
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           intcon	equ	0xFF2
  8043                           intcon2	equ	0xFF1
  8044                           postinc0	equ	0xFEE
  8045                           wreg	equ	0xFE8
  8046                           postdec1	equ	0xFE5
  8047                           fsr1l	equ	0xFE1
  8048                           indf2	equ	0xFDF
  8049                           postinc2	equ	0xFDE
  8050                           postdec2	equ	0xFDD
  8051                           fsr2h	equ	0xFDA
  8052                           fsr2l	equ	0xFD9
  8053                           status	equ	0xFD8
  8054                           
  8055 ;; *************** function _exp *****************
  8056 ;; Defined at:
  8057 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;  x               3   57[BANK0 ] int 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  exponent        2   63[BANK0 ] int 
  8062 ;;  sign            1   65[BANK0 ] unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  3   57[BANK0 ] unsigned char 
  8065 ;; Registers used:
  8066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8072 ;;      Params:         0       3       0       0       0       0       0
  8073 ;;      Locals:         0       6       0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0
  8075 ;;      Totals:         0       9       0       0       0       0       0
  8076 ;;Total ram usage:        9 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    6
  8079 ;; This function calls:
  8080 ;;		___awtoft
  8081 ;;		___ftdiv
  8082 ;;		___ftge
  8083 ;;		___ftmul
  8084 ;;		___ftneg
  8085 ;;		___ftsub
  8086 ;;		___fttol
  8087 ;;		_eval_poly
  8088 ;;		_floor
  8089 ;;		_ldexp
  8090 ;; This function is called by:
  8091 ;;		_pow
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text46
  8096  000302                     __ptext46:
  8097                           	opt stack 0
  8098  000302                     _exp:
  8099                           	opt stack 22
  8100                           
  8101                           ;incstack = 0
  8102  000302  0100               	movlb	0	; () banked
  8103  000304  5199               	movf	exp@x& (0+255),w,b
  8104  000306  119A               	iorwf	(exp@x+1)& (0+255),w,b
  8105  000308  119B               	iorwf	(exp@x+2)& (0+255),w,b
  8106  00030A  A4D8               	btfss	status,2,c
  8107  00030C  D007               	goto	l2092
  8108                           
  8109                           ; BSR set to: 0
  8110  00030E  0E00               	movlw	0
  8111  000310  6F99               	movwf	?_exp& (0+255),b
  8112  000312  0E80               	movlw	128
  8113  000314  6F9A               	movwf	(?_exp+1)& (0+255),b
  8114  000316  0E3F               	movlw	63
  8115  000318  6F9B               	movwf	(?_exp+2)& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118  00031A  0012               	return	
  8119  00031C                     l2092:
  8120                           
  8121                           ; BSR set to: 0
  8122                           
  8123                           ; BSR set to: 0
  8124  00031C  0E72               	movlw	114
  8125  00031E  6E18               	movwf	___ftge@ff1,c
  8126  000320  0E31               	movlw	49
  8127  000322  6E19               	movwf	___ftge@ff1+1,c
  8128  000324  0E44               	movlw	68
  8129  000326  6E1A               	movwf	___ftge@ff1+2,c
  8130  000328  C099  F01B         	movff	exp@x,___ftge@ff2
  8131  00032C  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
  8132  000330  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
  8133  000334  ECE7  F00B         	call	___ftge	;wreg free
  8134  000338  B0D8               	btfsc	status,0,c
  8135  00033A  D00C               	goto	l2094
  8136  00033C  0E00               	movlw	0
  8137  00033E  0100               	movlb	0	; () banked
  8138  000340  6FCC               	movwf	(_errno+1)& (0+255),b
  8139  000342  0E22               	movlw	34
  8140  000344  6FCB               	movwf	_errno& (0+255),b
  8141  000346  0EFF               	movlw	255
  8142  000348  6F99               	movwf	?_exp& (0+255),b
  8143  00034A  0E7F               	movlw	127
  8144  00034C  6F9A               	movwf	(?_exp+1)& (0+255),b
  8145  00034E  0E7F               	movlw	127
  8146  000350  6F9B               	movwf	(?_exp+2)& (0+255),b
  8147                           
  8148                           ; BSR set to: 0
  8149  000352  0012               	return	
  8150  000354                     l2094:
  8151                           
  8152                           ; BSR set to: 0
  8153  000354  C099  F018         	movff	exp@x,___ftge@ff1
  8154  000358  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
  8155  00035C  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
  8156  000360  0E49               	movlw	73
  8157  000362  6E1B               	movwf	___ftge@ff2,c
  8158  000364  0E3A               	movlw	58
  8159  000366  6E1C               	movwf	___ftge@ff2+1,c
  8160  000368  0EC4               	movlw	196
  8161  00036A  6E1D               	movwf	___ftge@ff2+2,c
  8162  00036C  ECE7  F00B         	call	___ftge	;wreg free
  8163  000370  B0D8               	btfsc	status,0,c
  8164  000372  D00C               	goto	l2095
  8165  000374  0E00               	movlw	0
  8166  000376  0100               	movlb	0	; () banked
  8167  000378  6FCC               	movwf	(_errno+1)& (0+255),b
  8168  00037A  0E22               	movlw	34
  8169  00037C  6FCB               	movwf	_errno& (0+255),b
  8170  00037E  0E00               	movlw	0
  8171  000380  6F99               	movwf	?_exp& (0+255),b
  8172  000382  0E00               	movlw	0
  8173  000384  6F9A               	movwf	(?_exp+1)& (0+255),b
  8174  000386  0E00               	movlw	0
  8175  000388  6F9B               	movwf	(?_exp+2)& (0+255),b
  8176                           
  8177                           ; BSR set to: 0
  8178  00038A  0012               	return	
  8179  00038C                     l2095:
  8180                           
  8181                           ; BSR set to: 0
  8182  00038C  0100               	movlb	0	; () banked
  8183  00038E  AF9B               	btfss	(exp@x+2)& (0+255),7,b
  8184  000390  D002               	goto	u5810
  8185  000392  0E01               	movlw	1
  8186  000394  D001               	goto	u5820
  8187  000396                     u5810:
  8188  000396  0E00               	movlw	0
  8189  000398                     u5820:
  8190  000398  6FA1               	movwf	exp@sign& (0+255),b
  8191                           
  8192                           ; BSR set to: 0
  8193  00039A  51A1               	movf	exp@sign& (0+255),w,b
  8194  00039C  B4D8               	btfsc	status,2,c
  8195  00039E  D00E               	goto	l2096
  8196                           
  8197                           ; BSR set to: 0
  8198  0003A0  C099  F018         	movff	exp@x,___ftneg@f1
  8199  0003A4  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
  8200  0003A8  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
  8201  0003AC  EC3B  F011         	call	___ftneg	;wreg free
  8202  0003B0  C018  F099         	movff	?___ftneg,exp@x
  8203  0003B4  C019  F09A         	movff	?___ftneg+1,exp@x+1
  8204  0003B8  C01A  F09B         	movff	?___ftneg+2,exp@x+2
  8205  0003BC                     l2096:
  8206  0003BC  C099  F069         	movff	exp@x,___ftmul@f1
  8207  0003C0  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
  8208  0003C4  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
  8209  0003C8  0EAA               	movlw	170
  8210  0003CA  0100               	movlb	0	; () banked
  8211  0003CC  6F6C               	movwf	___ftmul@f2& (0+255),b
  8212  0003CE  0EB8               	movlw	184
  8213  0003D0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  8214  0003D2  0E3F               	movlw	63
  8215  0003D4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  8216  0003D6  EC38  F007         	call	___ftmul	;wreg free
  8217  0003DA  C069  F099         	movff	?___ftmul,exp@x
  8218  0003DE  C06A  F09A         	movff	?___ftmul+1,exp@x+1
  8219  0003E2  C06B  F09B         	movff	?___ftmul+2,exp@x+2
  8220  0003E6  C099  F091         	movff	exp@x,floor@x
  8221  0003EA  C09A  F092         	movff	exp@x+1,floor@x+1
  8222  0003EE  C09B  F093         	movff	exp@x+2,floor@x+2
  8223  0003F2  EC27  F008         	call	_floor	;wreg free
  8224  0003F6  C091  F09C         	movff	?_floor,_exp$3343
  8225  0003FA  C092  F09D         	movff	?_floor+1,_exp$3343+1
  8226  0003FE  C093  F09E         	movff	?_floor+2,_exp$3343+2
  8227  000402  C09C  F078         	movff	_exp$3343,___fttol@f1
  8228  000406  C09D  F079         	movff	_exp$3343+1,___fttol@f1+1
  8229  00040A  C09E  F07A         	movff	_exp$3343+2,___fttol@f1+2
  8230  00040E  ECBC  F006         	call	___fttol	;wreg free
  8231  000412  C078  F09F         	movff	?___fttol,exp@exponent
  8232  000416  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
  8233  00041A  C099  F084         	movff	exp@x,___ftsub@f1
  8234  00041E  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
  8235  000422  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
  8236  000426  C09F  F020         	movff	exp@exponent,___awtoft@c
  8237  00042A  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
  8238  00042E  EC30  F010         	call	___awtoft	;wreg free
  8239  000432  C020  F087         	movff	?___awtoft,___ftsub@f2
  8240  000436  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
  8241  00043A  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
  8242  00043E  EC94  F00F         	call	___ftsub	;wreg free
  8243  000442  C084  F099         	movff	?___ftsub,exp@x
  8244  000446  C085  F09A         	movff	?___ftsub+1,exp@x+1
  8245  00044A  C086  F09B         	movff	?___ftsub+2,exp@x+2
  8246  00044E  C099  F084         	movff	exp@x,eval_poly@x
  8247  000452  C09A  F085         	movff	exp@x+1,eval_poly@x+1
  8248  000456  C09B  F086         	movff	exp@x+2,eval_poly@x+2
  8249  00045A  0E52               	movlw	low exp@coeff
  8250  00045C  0100               	movlb	0	; () banked
  8251  00045E  6F87               	movwf	eval_poly@d& (0+255),b
  8252  000460  0E7C               	movlw	high exp@coeff
  8253  000462  6F88               	movwf	(eval_poly@d+1)& (0+255),b
  8254  000464  0E00               	movlw	0
  8255  000466  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
  8256  000468  0E09               	movlw	9
  8257  00046A  6F89               	movwf	eval_poly@n& (0+255),b
  8258  00046C  EC98  F008         	call	_eval_poly	;wreg free
  8259  000470  C084  F090         	movff	?_eval_poly,ldexp@value
  8260  000474  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
  8261  000478  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
  8262  00047C  C09F  F093         	movff	exp@exponent,ldexp@newexp
  8263  000480  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
  8264  000484  ECD4  F009         	call	_ldexp	;wreg free
  8265  000488  C090  F099         	movff	?_ldexp,exp@x
  8266  00048C  C091  F09A         	movff	?_ldexp+1,exp@x+1
  8267  000490  C092  F09B         	movff	?_ldexp+2,exp@x+2
  8268  000494  0100               	movlb	0	; () banked
  8269  000496  51A1               	movf	exp@sign& (0+255),w,b
  8270  000498  B4D8               	btfsc	status,2,c
  8271  00049A  D025               	goto	l2097
  8272                           
  8273                           ; BSR set to: 0
  8274  00049C  2999               	incf	exp@x& (0+255),w,b
  8275  00049E  E10E               	bnz	l6657
  8276  0004A0  0E7F               	movlw	127
  8277  0004A2  199A               	xorwf	(exp@x+1)& (0+255),w,b
  8278  0004A4  E10B               	bnz	l6657
  8279  0004A6  0E7F               	movlw	127
  8280  0004A8  199B               	xorwf	(exp@x+2)& (0+255),w,b
  8281  0004AA  A4D8               	btfss	status,2,c
  8282  0004AC  D007               	goto	l2098
  8283                           
  8284                           ; BSR set to: 0
  8285  0004AE  0E00               	movlw	0
  8286  0004B0  6F99               	movwf	?_exp& (0+255),b
  8287  0004B2  0E00               	movlw	0
  8288  0004B4  6F9A               	movwf	(?_exp+1)& (0+255),b
  8289  0004B6  0E00               	movlw	0
  8290  0004B8  6F9B               	movwf	(?_exp+2)& (0+255),b
  8291                           
  8292                           ; BSR set to: 0
  8293  0004BA  0012               	return	
  8294  0004BC                     l2098:
  8295  0004BC                     l6657:
  8296                           
  8297                           ; BSR set to: 0
  8298  0004BC  0E00               	movlw	0
  8299  0004BE  6E29               	movwf	___ftdiv@f1,c
  8300  0004C0  0E80               	movlw	128
  8301  0004C2  6E2A               	movwf	___ftdiv@f1+1,c
  8302  0004C4  0E3F               	movlw	63
  8303  0004C6  6E2B               	movwf	___ftdiv@f1+2,c
  8304  0004C8  C099  F02C         	movff	exp@x,___ftdiv@f2
  8305  0004CC  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
  8306  0004D0  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
  8307  0004D4  ECB3  F007         	call	___ftdiv	;wreg free
  8308  0004D8  C029  F099         	movff	?___ftdiv,?_exp
  8309  0004DC  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
  8310  0004E0  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
  8311  0004E4  0012               	return	
  8312  0004E6                     l2097:
  8313                           
  8314                           ; BSR set to: 0
  8315  0004E6  C099  F099         	movff	exp@x,?_exp
  8316  0004EA  C09A  F09A         	movff	exp@x+1,?_exp+1
  8317  0004EE  C09B  F09B         	movff	exp@x+2,?_exp+2
  8318  0004F2  0012               	return		;funcret
  8319  0004F4                     __end_of_exp:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           intcon2	equ	0xFF1
  8329                           postinc0	equ	0xFEE
  8330                           wreg	equ	0xFE8
  8331                           postdec1	equ	0xFE5
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           postdec2	equ	0xFDD
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _ldexp *****************
  8341 ;; Defined at:
  8342 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  value           3   48[BANK0 ] unsigned char 
  8345 ;;  newexp          2   51[BANK0 ] int 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  3   48[BANK0 ] int 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2, status,0
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8357 ;;      Params:         0       5       0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0
  8359 ;;      Temps:          0       2       0       0       0       0       0
  8360 ;;      Totals:         0       7       0       0       0       0       0
  8361 ;;Total ram usage:        7 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    3
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_exp
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text47
  8372  0013A8                     __ptext47:
  8373                           	opt stack 0
  8374  0013A8                     _ldexp:
  8375                           	opt stack 24
  8376                           
  8377                           ;incstack = 0
  8378  0013A8  0100               	movlb	0	; () banked
  8379  0013AA  5190               	movf	ldexp@value& (0+255),w,b
  8380  0013AC  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
  8381  0013AE  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
  8382  0013B0  A4D8               	btfss	status,2,c
  8383  0013B2  D007               	goto	l2116
  8384                           
  8385                           ; BSR set to: 0
  8386  0013B4  0E00               	movlw	0
  8387  0013B6  6F90               	movwf	?_ldexp& (0+255),b
  8388  0013B8  0E00               	movlw	0
  8389  0013BA  6F91               	movwf	(?_ldexp+1)& (0+255),b
  8390  0013BC  0E00               	movlw	0
  8391  0013BE  6F92               	movwf	(?_ldexp+2)& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394  0013C0  0012               	return	
  8395  0013C2                     l2116:
  8396                           
  8397                           ; BSR set to: 0
  8398                           
  8399                           ; BSR set to: 0
  8400  0013C2  5192               	movf	(ldexp@value+2)& (0+255),w,b
  8401  0013C4  0B7F               	andlw	127
  8402  0013C6  6F95               	movwf	??_ldexp& (0+255),b
  8403  0013C8  6B96               	clrf	(??_ldexp+1)& (0+255),b
  8404  0013CA  90D8               	bcf	status,0,c
  8405  0013CC  3795               	rlcf	??_ldexp& (0+255),f,b
  8406  0013CE  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
  8407  0013D0  5195               	movf	??_ldexp& (0+255),w,b
  8408  0013D2  2793               	addwf	ldexp@newexp& (0+255),f,b
  8409  0013D4  5196               	movf	(??_ldexp+1)& (0+255),w,b
  8410  0013D6  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8411  0013D8  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
  8412  0013DA  D003               	goto	u5640
  8413  0013DC  6B95               	clrf	??_ldexp& (0+255),b
  8414  0013DE  2B95               	incf	??_ldexp& (0+255),f,b
  8415  0013E0  D002               	goto	u5648
  8416  0013E2                     u5640:
  8417  0013E2  0100               	movlb	0	; () banked
  8418  0013E4  6B95               	clrf	??_ldexp& (0+255),b
  8419  0013E6                     u5648:
  8420  0013E6  5195               	movf	??_ldexp& (0+255),w,b
  8421  0013E8  2793               	addwf	ldexp@newexp& (0+255),f,b
  8422  0013EA  0E00               	movlw	0
  8423  0013EC  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8424  0013EE  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8425  0013F0  D00B               	goto	l2118
  8426                           
  8427                           ; BSR set to: 0
  8428  0013F2  0E00               	movlw	0
  8429  0013F4  6FCC               	movwf	(_errno+1)& (0+255),b
  8430  0013F6  0E22               	movlw	34
  8431  0013F8  6FCB               	movwf	_errno& (0+255),b
  8432  0013FA  0E00               	movlw	0
  8433  0013FC  6F90               	movwf	?_ldexp& (0+255),b
  8434  0013FE  0E00               	movlw	0
  8435  001400  6F91               	movwf	(?_ldexp+1)& (0+255),b
  8436  001402  0E00               	movlw	0
  8437  001404                     L1:
  8438  001404  6F92               	movwf	(?_ldexp+2)& (0+255),b
  8439                           
  8440                           ; BSR set to: 0
  8441  001406  0012               	return	
  8442  001408                     l2118:
  8443                           
  8444                           ; BSR set to: 0
  8445                           
  8446                           ; BSR set to: 0
  8447  001408  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  8448  00140A  D015               	goto	l2120
  8449  00140C  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
  8450  00140E  A0D8               	btfss	status,0,c
  8451  001410  D012               	goto	l2120
  8452                           
  8453                           ; BSR set to: 0
  8454  001412  0E00               	movlw	0
  8455  001414  6FCC               	movwf	(_errno+1)& (0+255),b
  8456  001416  0E22               	movlw	34
  8457  001418  6FCB               	movwf	_errno& (0+255),b
  8458                           
  8459                           ; BSR set to: 0
  8460  00141A  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
  8461  00141C  D006               	goto	l2121
  8462                           
  8463                           ; BSR set to: 0
  8464  00141E  0EFF               	movlw	255
  8465  001420  6F90               	movwf	?_ldexp& (0+255),b
  8466  001422  0E7F               	movlw	127
  8467  001424  6F91               	movwf	(?_ldexp+1)& (0+255),b
  8468  001426  0EFF               	movlw	255
  8469  001428  D7ED               	goto	L1
  8470  00142A                     l2121:
  8471                           
  8472                           ; BSR set to: 0
  8473                           
  8474                           ; BSR set to: 0
  8475  00142A  0EFF               	movlw	255
  8476  00142C  6F90               	movwf	?_ldexp& (0+255),b
  8477  00142E  0E7F               	movlw	127
  8478  001430  6F91               	movwf	(?_ldexp+1)& (0+255),b
  8479  001432  0E7F               	movlw	127
  8480  001434  D7E7               	goto	L1
  8481  001436                     l2120:
  8482                           
  8483                           ; BSR set to: 0
  8484                           
  8485                           ; BSR set to: 0
  8486  001436  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  8487  001438  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  8488  00143A  6F96               	movwf	(??_ldexp+1)& (0+255),b
  8489  00143C  3193               	rrcf	ldexp@newexp& (0+255),w,b
  8490  00143E  6F95               	movwf	??_ldexp& (0+255),b
  8491  001440  5192               	movf	(ldexp@value+2)& (0+255),w,b
  8492  001442  1995               	xorwf	??_ldexp& (0+255),w,b
  8493  001444  0B80               	andlw	-128
  8494  001446  1995               	xorwf	??_ldexp& (0+255),w,b
  8495  001448  6F92               	movwf	(ldexp@value+2)& (0+255),b
  8496  00144A  C093  F095         	movff	ldexp@newexp,??_ldexp
  8497  00144E  0E01               	movlw	1
  8498  001450  1795               	andwf	??_ldexp& (0+255),f,b
  8499  001452  3395               	rrcf	??_ldexp& (0+255),f,b
  8500  001454  3395               	rrcf	??_ldexp& (0+255),f,b
  8501  001456  5191               	movf	(ldexp@value+1)& (0+255),w,b
  8502  001458  1995               	xorwf	??_ldexp& (0+255),w,b
  8503  00145A  0B7F               	andlw	-129
  8504  00145C  1995               	xorwf	??_ldexp& (0+255),w,b
  8505  00145E  6F91               	movwf	(ldexp@value+1)& (0+255),b
  8506                           
  8507                           ; BSR set to: 0
  8508                           
  8509                           ; BSR set to: 0
  8510                           
  8511                           ; BSR set to: 0
  8512  001460  C090  F090         	movff	ldexp@value,?_ldexp
  8513  001464  C091  F091         	movff	ldexp@value+1,?_ldexp+1
  8514  001468  C092  F092         	movff	ldexp@value+2,?_ldexp+2
  8515  00146C  0012               	return	
  8516  00146E                     __end_of_ldexp:
  8517                           	opt stack 0
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodh	equ	0xFF4
  8523                           prodl	equ	0xFF3
  8524                           intcon	equ	0xFF2
  8525                           intcon2	equ	0xFF1
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           postdec1	equ	0xFE5
  8529                           fsr1l	equ	0xFE1
  8530                           indf2	equ	0xFDF
  8531                           postinc2	equ	0xFDE
  8532                           postdec2	equ	0xFDD
  8533                           fsr2h	equ	0xFDA
  8534                           fsr2l	equ	0xFD9
  8535                           status	equ	0xFD8
  8536                           
  8537 ;; *************** function _floor *****************
  8538 ;; Defined at:
  8539 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  8540 ;; Parameters:    Size  Location     Type
  8541 ;;  x               3   49[BANK0 ] int 
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  i               3   52[BANK0 ] int 
  8544 ;;  expon           2   55[BANK0 ] int 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  3   49[BANK0 ] int 
  8547 ;; Registers used:
  8548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8554 ;;      Params:         0       3       0       0       0       0       0
  8555 ;;      Locals:         0       5       0       0       0       0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0
  8557 ;;      Totals:         0       8       0       0       0       0       0
  8558 ;;Total ram usage:        8 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    5
  8561 ;; This function calls:
  8562 ;;		___altoft
  8563 ;;		___ftadd
  8564 ;;		___ftge
  8565 ;;		___fttol
  8566 ;;		_frexp
  8567 ;; This function is called by:
  8568 ;;		_exp
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text48
  8573  00104E                     __ptext48:
  8574                           	opt stack 0
  8575  00104E                     _floor:
  8576                           	opt stack 22
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;incstack = 0
  8580  00104E  C091  F018         	movff	floor@x,frexp@value
  8581  001052  C092  F019         	movff	floor@x+1,frexp@value+1
  8582  001056  C093  F01A         	movff	floor@x+2,frexp@value+2
  8583  00105A  0E97               	movlw	low floor@expon
  8584  00105C  6E1B               	movwf	frexp@eptr,c
  8585  00105E  0E00               	movlw	high floor@expon
  8586  001060  6E1C               	movwf	frexp@eptr+1,c
  8587  001062  EC9F  F00B         	call	_frexp	;wreg free
  8588  001066  0100               	movlb	0	; () banked
  8589  001068  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  8590  00106A  D010               	goto	l2103
  8591                           
  8592                           ; BSR set to: 0
  8593  00106C  AF93               	btfss	(floor@x+2)& (0+255),7,b
  8594  00106E  D007               	goto	l2104
  8595                           
  8596                           ; BSR set to: 0
  8597  001070  0E00               	movlw	0
  8598  001072  6F91               	movwf	?_floor& (0+255),b
  8599  001074  0E80               	movlw	128
  8600  001076  6F92               	movwf	(?_floor+1)& (0+255),b
  8601  001078  0EBF               	movlw	191
  8602  00107A  6F93               	movwf	(?_floor+2)& (0+255),b
  8603                           
  8604                           ; BSR set to: 0
  8605  00107C  0012               	return	
  8606  00107E                     l2104:
  8607                           
  8608                           ; BSR set to: 0
  8609                           
  8610                           ; BSR set to: 0
  8611  00107E  0E00               	movlw	0
  8612  001080  6F91               	movwf	?_floor& (0+255),b
  8613  001082  0E00               	movlw	0
  8614  001084  6F92               	movwf	(?_floor+1)& (0+255),b
  8615  001086  0E00               	movlw	0
  8616  001088  6F93               	movwf	(?_floor+2)& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619  00108A  0012               	return	
  8620  00108C                     l2103:
  8621                           
  8622                           ; BSR set to: 0
  8623                           
  8624                           ; BSR set to: 0
  8625  00108C  5198               	movf	(floor@expon+1)& (0+255),w,b
  8626  00108E  E104               	bnz	u5600
  8627  001090  0E15               	movlw	21
  8628  001092  5D97               	subwf	floor@expon& (0+255),w,b
  8629  001094  A0D8               	btfss	status,0,c
  8630  001096  D007               	goto	l2106
  8631  001098                     u5600:
  8632                           
  8633                           ; BSR set to: 0
  8634  001098  C091  F091         	movff	floor@x,?_floor
  8635  00109C  C092  F092         	movff	floor@x+1,?_floor+1
  8636  0010A0  C093  F093         	movff	floor@x+2,?_floor+2
  8637  0010A4  0012               	return	
  8638  0010A6                     l2106:
  8639                           
  8640                           ; BSR set to: 0
  8641                           
  8642                           ; BSR set to: 0
  8643  0010A6  C091  F078         	movff	floor@x,___fttol@f1
  8644  0010AA  C092  F079         	movff	floor@x+1,___fttol@f1+1
  8645  0010AE  C093  F07A         	movff	floor@x+2,___fttol@f1+2
  8646  0010B2  ECBC  F006         	call	___fttol	;wreg free
  8647  0010B6  C078  F087         	movff	?___fttol,___altoft@c
  8648  0010BA  C079  F088         	movff	?___fttol+1,___altoft@c+1
  8649  0010BE  C07A  F089         	movff	?___fttol+2,___altoft@c+2
  8650  0010C2  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
  8651  0010C6  ECBA  F00C         	call	___altoft	;wreg free
  8652  0010CA  C087  F094         	movff	?___altoft,floor@i
  8653  0010CE  C088  F095         	movff	?___altoft+1,floor@i+1
  8654  0010D2  C089  F096         	movff	?___altoft+2,floor@i+2
  8655  0010D6  C091  F018         	movff	floor@x,___ftge@ff1
  8656  0010DA  C092  F019         	movff	floor@x+1,___ftge@ff1+1
  8657  0010DE  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
  8658  0010E2  C094  F01B         	movff	floor@i,___ftge@ff2
  8659  0010E6  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
  8660  0010EA  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
  8661  0010EE  ECE7  F00B         	call	___ftge	;wreg free
  8662  0010F2  B0D8               	btfsc	status,0,c
  8663  0010F4  D016               	goto	l2107
  8664  0010F6  C094  F078         	movff	floor@i,___ftadd@f1
  8665  0010FA  C095  F079         	movff	floor@i+1,___ftadd@f1+1
  8666  0010FE  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
  8667  001102  0E00               	movlw	0
  8668  001104  0100               	movlb	0	; () banked
  8669  001106  6F7B               	movwf	___ftadd@f2& (0+255),b
  8670  001108  0E80               	movlw	128
  8671  00110A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
  8672  00110C  0EBF               	movlw	191
  8673  00110E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
  8674  001110  EC58  F003         	call	___ftadd	;wreg free
  8675  001114  C078  F091         	movff	?___ftadd,?_floor
  8676  001118  C079  F092         	movff	?___ftadd+1,?_floor+1
  8677  00111C  C07A  F093         	movff	?___ftadd+2,?_floor+2
  8678  001120  0012               	return	
  8679  001122                     l2107:
  8680  001122  C094  F091         	movff	floor@i,?_floor
  8681  001126  C095  F092         	movff	floor@i+1,?_floor+1
  8682  00112A  C096  F093         	movff	floor@i+2,?_floor+2
  8683  00112E  0012               	return		;funcret
  8684  001130                     __end_of_floor:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           intcon2	equ	0xFF1
  8694                           postinc0	equ	0xFEE
  8695                           wreg	equ	0xFE8
  8696                           postdec1	equ	0xFE5
  8697                           fsr1l	equ	0xFE1
  8698                           indf2	equ	0xFDF
  8699                           postinc2	equ	0xFDE
  8700                           postdec2	equ	0xFDD
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function _frexp *****************
  8706 ;; Defined at:
  8707 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  value           3   23[COMRAM] int 
  8710 ;;  eptr            2   26[COMRAM] PTR int 
  8711 ;;		 -> log@exponent(2), floor@expon(2), 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  3   23[COMRAM] PTR int 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8723 ;;      Params:         5       0       0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0
  8725 ;;      Temps:          2       0       0       0       0       0       0
  8726 ;;      Totals:         7       0       0       0       0       0       0
  8727 ;;Total ram usage:        7 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    3
  8730 ;; This function calls:
  8731 ;;		Nothing
  8732 ;; This function is called by:
  8733 ;;		_floor
  8734 ;;		_log
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text49
  8739  00173E                     __ptext49:
  8740                           	opt stack 0
  8741  00173E                     _frexp:
  8742                           	opt stack 24
  8743                           
  8744                           ;incstack = 0
  8745  00173E  5018               	movf	frexp@value,w,c
  8746  001740  1019               	iorwf	frexp@value+1,w,c
  8747  001742  101A               	iorwf	frexp@value+2,w,c
  8748  001744  A4D8               	btfss	status,2,c
  8749  001746  D00F               	goto	l2112
  8750  001748  C01B  FFD9         	movff	frexp@eptr,fsr2l
  8751  00174C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  8752  001750  0E00               	movlw	0
  8753  001752  6EDE               	movwf	postinc2,c
  8754  001754  0E00               	movlw	0
  8755  001756  6EDD               	movwf	postdec2,c
  8756  001758  0E00               	movlw	0
  8757  00175A  6E18               	movwf	?_frexp,c
  8758  00175C  0E00               	movlw	0
  8759  00175E  6E19               	movwf	?_frexp+1,c
  8760  001760  0E00               	movlw	0
  8761  001762  6E1A               	movwf	?_frexp+2,c
  8762  001764  0012               	return	
  8763  001766                     l2112:
  8764  001766  501A               	movf	frexp@value+2,w,c
  8765  001768  0B7F               	andlw	127
  8766  00176A  6E1D               	movwf	??_frexp& (0+255),c
  8767  00176C  6A1E               	clrf	(??_frexp+1)& (0+255),c
  8768  00176E  90D8               	bcf	status,0,c
  8769  001770  361D               	rlcf	??_frexp,f,c
  8770  001772  361E               	rlcf	??_frexp+1,f,c
  8771  001774  C01B  FFD9         	movff	frexp@eptr,fsr2l
  8772  001778  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  8773  00177C  C01D  FFDE         	movff	??_frexp,postinc2
  8774  001780  C01E  FFDD         	movff	??_frexp+1,postdec2
  8775  001784  AE19               	btfss	frexp@value+1,7,c
  8776  001786  D003               	goto	u5480
  8777  001788  6A1D               	clrf	??_frexp& (0+255),c
  8778  00178A  2A1D               	incf	??_frexp& (0+255),f,c
  8779  00178C  D001               	goto	u5488
  8780  00178E                     u5480:
  8781  00178E  6A1D               	clrf	??_frexp& (0+255),c
  8782  001790                     u5488:
  8783  001790  501D               	movf	??_frexp,w,c
  8784  001792  C01B  FFD9         	movff	frexp@eptr,fsr2l
  8785  001796  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  8786  00179A  12DE               	iorwf	postinc2,f,c
  8787  00179C  0E00               	movlw	0
  8788  00179E  12DD               	iorwf	postdec2,f,c
  8789  0017A0  C01B  FFD9         	movff	frexp@eptr,fsr2l
  8790  0017A4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  8791  0017A8  0E82               	movlw	130
  8792  0017AA  26DE               	addwf	postinc2,f,c
  8793  0017AC  0EFF               	movlw	255
  8794  0017AE  22DD               	addwfc	postdec2,f,c
  8795  0017B0  801A               	bsf	frexp@value+2,0,c
  8796  0017B2  821A               	bsf	frexp@value+2,1,c
  8797  0017B4  841A               	bsf	frexp@value+2,2,c
  8798  0017B6  861A               	bsf	frexp@value+2,3,c
  8799  0017B8  881A               	bsf	frexp@value+2,4,c
  8800  0017BA  8A1A               	bsf	frexp@value+2,5,c
  8801  0017BC  9C1A               	bcf	frexp@value+2,6,c
  8802  0017BE  9E19               	bcf	frexp@value+1,7,c
  8803  0017C0  C018  F018         	movff	frexp@value,?_frexp
  8804  0017C4  C019  F019         	movff	frexp@value+1,?_frexp+1
  8805  0017C8  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  8806  0017CC  0012               	return	
  8807  0017CE                     __end_of_frexp:
  8808                           	opt stack 0
  8809                           tblptru	equ	0xFF8
  8810                           tblptrh	equ	0xFF7
  8811                           tblptrl	equ	0xFF6
  8812                           tablat	equ	0xFF5
  8813                           prodh	equ	0xFF4
  8814                           prodl	equ	0xFF3
  8815                           intcon	equ	0xFF2
  8816                           intcon2	equ	0xFF1
  8817                           postinc0	equ	0xFEE
  8818                           wreg	equ	0xFE8
  8819                           postdec1	equ	0xFE5
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           fsr2h	equ	0xFDA
  8825                           fsr2l	equ	0xFD9
  8826                           status	equ	0xFD8
  8827                           
  8828 ;; *************** function ___fttol *****************
  8829 ;; Defined at:
  8830 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  f1              3   24[BANK0 ] float 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  lval            4   34[BANK0 ] unsigned long 
  8835 ;;  exp1            1   38[BANK0 ] unsigned char 
  8836 ;;  sign1           1   33[BANK0 ] unsigned char 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  4   24[BANK0 ] long 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8846 ;;      Params:         0       4       0       0       0       0       0
  8847 ;;      Locals:         0       6       0       0       0       0       0
  8848 ;;      Temps:          0       5       0       0       0       0       0
  8849 ;;      Totals:         0      15       0       0       0       0       0
  8850 ;;Total ram usage:       15 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    3
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_AdcConvert
  8857 ;;		_pow
  8858 ;;		_exp
  8859 ;;		_floor
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text50
  8864  000D78                     __ptext50:
  8865                           	opt stack 0
  8866  000D78                     ___fttol:
  8867                           	opt stack 23
  8868                           
  8869                           ;incstack = 0
  8870  000D78  C07A  F07C         	movff	___fttol@f1+2,??___fttol
  8871  000D7C  0100               	movlb	0	; () banked
  8872  000D7E  6B7D               	clrf	(??___fttol+1)& (0+255),b
  8873  000D80  6B7E               	clrf	(??___fttol+2)& (0+255),b
  8874  000D82  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8875  000D84  377C               	rlcf	??___fttol& (0+255),f,b
  8876  000D86  E301               	bnc	u5391
  8877  000D88  817D               	bsf	(??___fttol+1)& (0+255),0,b
  8878  000D8A                     u5391:
  8879  000D8A  517C               	movf	??___fttol& (0+255),w,b
  8880  000D8C  6F86               	movwf	___fttol@exp1& (0+255),b
  8881  000D8E  5186               	movf	___fttol@exp1& (0+255),w,b
  8882  000D90  A4D8               	btfss	status,2,c
  8883  000D92  D009               	goto	l1769
  8884                           
  8885                           ; BSR set to: 0
  8886  000D94  0E00               	movlw	0
  8887  000D96  6F78               	movwf	?___fttol& (0+255),b
  8888  000D98  0E00               	movlw	0
  8889  000D9A  6F79               	movwf	(?___fttol+1)& (0+255),b
  8890  000D9C  0E00               	movlw	0
  8891  000D9E  6F7A               	movwf	(?___fttol+2)& (0+255),b
  8892  000DA0  0E00               	movlw	0
  8893  000DA2  6F7B               	movwf	(?___fttol+3)& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896  000DA4  0012               	return	
  8897  000DA6                     l1769:
  8898                           
  8899                           ; BSR set to: 0
  8900                           
  8901                           ; BSR set to: 0
  8902  000DA6  0E17               	movlw	23
  8903  000DA8  6F7C               	movwf	??___fttol& (0+255),b
  8904  000DAA  C078  F07D         	movff	___fttol@f1,??___fttol+1
  8905  000DAE  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
  8906  000DB2  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
  8907  000DB6  297C               	incf	??___fttol& (0+255),w,b
  8908  000DB8  6F80               	movwf	(??___fttol+4)& (0+255),b
  8909  000DBA  D004               	goto	u5410
  8910  000DBC                     u5415:
  8911  000DBC  90D8               	bcf	status,0,c
  8912  000DBE  337F               	rrcf	(??___fttol+3)& (0+255),f,b
  8913  000DC0  337E               	rrcf	(??___fttol+2)& (0+255),f,b
  8914  000DC2  337D               	rrcf	(??___fttol+1)& (0+255),f,b
  8915  000DC4                     u5410:
  8916  000DC4  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
  8917  000DC6  D7FA               	goto	u5415
  8918  000DC8  0100               	movlb	0	; () banked
  8919  000DCA  517D               	movf	(??___fttol+1)& (0+255),w,b
  8920  000DCC  6F81               	movwf	___fttol@sign1& (0+255),b
  8921                           
  8922                           ; BSR set to: 0
  8923  000DCE  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
  8924                           
  8925                           ; BSR set to: 0
  8926  000DD0  0EFF               	movlw	255
  8927  000DD2  1778               	andwf	___fttol@f1& (0+255),f,b
  8928  000DD4  0EFF               	movlw	255
  8929  000DD6  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
  8930  000DD8  0E00               	movlw	0
  8931  000DDA  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
  8932                           
  8933                           ; BSR set to: 0
  8934  000DDC  5178               	movf	___fttol@f1& (0+255),w,b
  8935  000DDE  6F82               	movwf	___fttol@lval& (0+255),b
  8936  000DE0  5179               	movf	(___fttol@f1+1)& (0+255),w,b
  8937  000DE2  6F83               	movwf	(___fttol@lval+1)& (0+255),b
  8938  000DE4  517A               	movf	(___fttol@f1+2)& (0+255),w,b
  8939  000DE6  6F84               	movwf	(___fttol@lval+2)& (0+255),b
  8940  000DE8  6B85               	clrf	(___fttol@lval+3)& (0+255),b
  8941                           
  8942                           ; BSR set to: 0
  8943  000DEA  0E8E               	movlw	142
  8944  000DEC  5F86               	subwf	___fttol@exp1& (0+255),f,b
  8945                           
  8946                           ; BSR set to: 0
  8947  000DEE  AF86               	btfss	___fttol@exp1& (0+255),7,b
  8948  000DF0  D016               	goto	l1771
  8949                           
  8950                           ; BSR set to: 0
  8951  000DF2  5186               	movf	___fttol@exp1& (0+255),w,b
  8952  000DF4  0A80               	xorlw	128
  8953  000DF6  0F8F               	addlw	143
  8954  000DF8  B0D8               	btfsc	status,0,c
  8955  000DFA  D009               	goto	l1772
  8956                           
  8957                           ; BSR set to: 0
  8958  000DFC  0E00               	movlw	0
  8959  000DFE  6F78               	movwf	?___fttol& (0+255),b
  8960  000E00  0E00               	movlw	0
  8961  000E02  6F79               	movwf	(?___fttol+1)& (0+255),b
  8962  000E04  0E00               	movlw	0
  8963  000E06  6F7A               	movwf	(?___fttol+2)& (0+255),b
  8964  000E08  0E00               	movlw	0
  8965  000E0A  6F7B               	movwf	(?___fttol+3)& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968  000E0C  0012               	return	
  8969  000E0E                     l1772:
  8970                           
  8971                           ; BSR set to: 0
  8972                           
  8973                           ; BSR set to: 0
  8974                           
  8975                           ; BSR set to: 0
  8976  000E0E  90D8               	bcf	status,0,c
  8977  000E10  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8978  000E12  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8979  000E14  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8980  000E16  3382               	rrcf	___fttol@lval& (0+255),f,b
  8981                           
  8982                           ; BSR set to: 0
  8983  000E18  3F86               	incfsz	___fttol@exp1& (0+255),f,b
  8984  000E1A  D7F9               	goto	l1772
  8985                           
  8986                           ; BSR set to: 0
  8987  000E1C  D015               	goto	u5450
  8988  000E1E                     l1771:
  8989                           
  8990                           ; BSR set to: 0
  8991                           
  8992                           ; BSR set to: 0
  8993  000E1E  0E17               	movlw	23
  8994  000E20  6586               	cpfsgt	___fttol@exp1& (0+255),b
  8995  000E22  D00F               	goto	l1777
  8996                           
  8997                           ; BSR set to: 0
  8998  000E24  0E00               	movlw	0
  8999  000E26  6F78               	movwf	?___fttol& (0+255),b
  9000  000E28  0E00               	movlw	0
  9001  000E2A  6F79               	movwf	(?___fttol+1)& (0+255),b
  9002  000E2C  0E00               	movlw	0
  9003  000E2E  6F7A               	movwf	(?___fttol+2)& (0+255),b
  9004  000E30  0E00               	movlw	0
  9005  000E32  6F7B               	movwf	(?___fttol+3)& (0+255),b
  9006                           
  9007                           ; BSR set to: 0
  9008  000E34  0012               	return	
  9009  000E36                     
  9010                           ; BSR set to: 0
  9011                           
  9012                           ; BSR set to: 0
  9013  000E36  90D8               	bcf	status,0,c
  9014  000E38  3782               	rlcf	___fttol@lval& (0+255),f,b
  9015  000E3A  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9016  000E3C  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9017  000E3E  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9018  000E40  0786               	decf	___fttol@exp1& (0+255),f,b
  9019  000E42                     l1777:
  9020                           
  9021                           ; BSR set to: 0
  9022                           
  9023                           ; BSR set to: 0
  9024  000E42  5186               	movf	___fttol@exp1& (0+255),w,b
  9025  000E44  A4D8               	btfss	status,2,c
  9026  000E46  D7F7               	goto	l1778
  9027  000E48                     u5450:
  9028                           
  9029                           ; BSR set to: 0
  9030                           
  9031                           ; BSR set to: 0
  9032                           
  9033                           ; BSR set to: 0
  9034  000E48  5181               	movf	___fttol@sign1& (0+255),w,b
  9035  000E4A  B4D8               	btfsc	status,2,c
  9036  000E4C  D008               	goto	l1780
  9037                           
  9038                           ; BSR set to: 0
  9039  000E4E  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
  9040  000E50  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
  9041  000E52  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
  9042  000E54  6D82               	negf	___fttol@lval& (0+255),b
  9043  000E56  0E00               	movlw	0
  9044  000E58  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9045  000E5A  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9046  000E5C  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9047  000E5E                     l1780:
  9048                           
  9049                           ; BSR set to: 0
  9050                           
  9051                           ; BSR set to: 0
  9052  000E5E  C082  F078         	movff	___fttol@lval,?___fttol
  9053  000E62  C083  F079         	movff	___fttol@lval+1,?___fttol+1
  9054  000E66  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
  9055  000E6A  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
  9056  000E6E  0012               	return	
  9057  000E70                     __end_of___fttol:
  9058                           	opt stack 0
  9059                           tblptru	equ	0xFF8
  9060                           tblptrh	equ	0xFF7
  9061                           tblptrl	equ	0xFF6
  9062                           tablat	equ	0xFF5
  9063                           prodh	equ	0xFF4
  9064                           prodl	equ	0xFF3
  9065                           intcon	equ	0xFF2
  9066                           intcon2	equ	0xFF1
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           postdec1	equ	0xFE5
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function ___ftge *****************
  9079 ;; Defined at:
  9080 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  ff1             3   23[COMRAM] float 
  9083 ;;  ff2             3   26[COMRAM] float 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;		None               void
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9095 ;;      Params:         6       0       0       0       0       0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0
  9097 ;;      Temps:          3       0       0       0       0       0       0
  9098 ;;      Totals:         9       0       0       0       0       0       0
  9099 ;;Total ram usage:        9 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    3
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_CheckFlashPrecentage
  9106 ;;		_pow
  9107 ;;		_exp
  9108 ;;		_floor
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text51
  9113  0017CE                     __ptext51:
  9114                           	opt stack 0
  9115  0017CE                     ___ftge:
  9116                           	opt stack 26
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;incstack = 0
  9120  0017CE  AE1A               	btfss	___ftge@ff1+2,7,c
  9121  0017D0  D016               	goto	l1741
  9122  0017D2  C018  F01E         	movff	___ftge@ff1,??___ftge
  9123  0017D6  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
  9124  0017DA  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
  9125  0017DE  1E1E               	comf	??___ftge,f,c
  9126  0017E0  1E1F               	comf	??___ftge+1,f,c
  9127  0017E2  1E20               	comf	??___ftge+2,f,c
  9128  0017E4  2A1E               	incf	??___ftge,f,c
  9129  0017E6  0E00               	movlw	0
  9130  0017E8  221F               	addwfc	??___ftge+1,f,c
  9131  0017EA  2220               	addwfc	??___ftge+2,f,c
  9132  0017EC  0E00               	movlw	0
  9133  0017EE  241E               	addwf	??___ftge,w,c
  9134  0017F0  6E18               	movwf	___ftge@ff1,c
  9135  0017F2  0E00               	movlw	0
  9136  0017F4  201F               	addwfc	??___ftge+1,w,c
  9137  0017F6  6E19               	movwf	___ftge@ff1+1,c
  9138  0017F8  0E80               	movlw	128
  9139  0017FA  2020               	addwfc	??___ftge+2,w,c
  9140  0017FC  6E1A               	movwf	___ftge@ff1+2,c
  9141  0017FE                     l1741:
  9142  0017FE  AE1D               	btfss	___ftge@ff2+2,7,c
  9143  001800  D016               	goto	l1742
  9144  001802  C01B  F01E         	movff	___ftge@ff2,??___ftge
  9145  001806  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
  9146  00180A  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
  9147  00180E  1E1E               	comf	??___ftge,f,c
  9148  001810  1E1F               	comf	??___ftge+1,f,c
  9149  001812  1E20               	comf	??___ftge+2,f,c
  9150  001814  2A1E               	incf	??___ftge,f,c
  9151  001816  0E00               	movlw	0
  9152  001818  221F               	addwfc	??___ftge+1,f,c
  9153  00181A  2220               	addwfc	??___ftge+2,f,c
  9154  00181C  0E00               	movlw	0
  9155  00181E  241E               	addwf	??___ftge,w,c
  9156  001820  6E1B               	movwf	___ftge@ff2,c
  9157  001822  0E00               	movlw	0
  9158  001824  201F               	addwfc	??___ftge+1,w,c
  9159  001826  6E1C               	movwf	___ftge@ff2+1,c
  9160  001828  0E80               	movlw	128
  9161  00182A  2020               	addwfc	??___ftge+2,w,c
  9162  00182C  6E1D               	movwf	___ftge@ff2+2,c
  9163  00182E                     l1742:
  9164  00182E  0E00               	movlw	0
  9165  001830  1A18               	xorwf	___ftge@ff1,f,c
  9166  001832  0E00               	movlw	0
  9167  001834  1A19               	xorwf	___ftge@ff1+1,f,c
  9168  001836  0E80               	movlw	128
  9169  001838  1A1A               	xorwf	___ftge@ff1+2,f,c
  9170  00183A  0E00               	movlw	0
  9171  00183C  1A1B               	xorwf	___ftge@ff2,f,c
  9172  00183E  0E00               	movlw	0
  9173  001840  1A1C               	xorwf	___ftge@ff2+1,f,c
  9174  001842  0E80               	movlw	128
  9175  001844  1A1D               	xorwf	___ftge@ff2+2,f,c
  9176  001846  501B               	movf	___ftge@ff2,w,c
  9177  001848  5C18               	subwf	___ftge@ff1,w,c
  9178  00184A  501C               	movf	___ftge@ff2+1,w,c
  9179  00184C  5819               	subwfb	___ftge@ff1+1,w,c
  9180  00184E  501D               	movf	___ftge@ff2+2,w,c
  9181  001850  581A               	subwfb	___ftge@ff1+2,w,c
  9182  001852  B0D8               	btfsc	status,0,c
  9183  001854  D002               	goto	l6113
  9184  001856  90D8               	bcf	status,0,c
  9185  001858  0012               	return	
  9186  00185A                     l6113:
  9187  00185A  80D8               	bsf	status,0,c
  9188  00185C  0012               	return	
  9189  00185E                     __end_of___ftge:
  9190                           	opt stack 0
  9191                           tblptru	equ	0xFF8
  9192                           tblptrh	equ	0xFF7
  9193                           tblptrl	equ	0xFF6
  9194                           tablat	equ	0xFF5
  9195                           prodh	equ	0xFF4
  9196                           prodl	equ	0xFF3
  9197                           intcon	equ	0xFF2
  9198                           intcon2	equ	0xFF1
  9199                           postinc0	equ	0xFEE
  9200                           wreg	equ	0xFE8
  9201                           postdec1	equ	0xFE5
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function ___altoft *****************
  9211 ;; Defined at:
  9212 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  c               4   39[BANK0 ] long 
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;  sign            1   48[BANK0 ] unsigned char 
  9217 ;;  exp             1   47[BANK0 ] unsigned char 
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  3   39[BANK0 ] float 
  9220 ;; Registers used:
  9221 ;;		wreg, status,2, status,0, cstack
  9222 ;; Tracked objects:
  9223 ;;		On entry : 0/0
  9224 ;;		On exit  : 0/0
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9227 ;;      Params:         0       4       0       0       0       0       0
  9228 ;;      Locals:         0       2       0       0       0       0       0
  9229 ;;      Temps:          0       4       0       0       0       0       0
  9230 ;;      Totals:         0      10       0       0       0       0       0
  9231 ;;Total ram usage:       10 bytes
  9232 ;; Hardware stack levels used:    1
  9233 ;; Hardware stack levels required when called:    4
  9234 ;; This function calls:
  9235 ;;		___ftpack
  9236 ;; This function is called by:
  9237 ;;		_floor
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           	psect	text52
  9242  001974                     __ptext52:
  9243                           	opt stack 0
  9244  001974                     ___altoft:
  9245                           	opt stack 22
  9246                           
  9247                           ;incstack = 0
  9248  001974  0E00               	movlw	0
  9249  001976  0100               	movlb	0	; () banked
  9250  001978  6F90               	movwf	___altoft@sign& (0+255),b
  9251  00197A  0E8E               	movlw	142
  9252  00197C  6F8F               	movwf	___altoft@exp& (0+255),b
  9253                           
  9254                           ; BSR set to: 0
  9255  00197E  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
  9256  001980  D011               	goto	l1539
  9257                           
  9258                           ; BSR set to: 0
  9259  001982  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
  9260  001984  1F89               	comf	(___altoft@c+2)& (0+255),f,b
  9261  001986  1F88               	comf	(___altoft@c+1)& (0+255),f,b
  9262  001988  6D87               	negf	___altoft@c& (0+255),b
  9263  00198A  0E00               	movlw	0
  9264  00198C  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
  9265  00198E  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
  9266  001990  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
  9267                           
  9268                           ; BSR set to: 0
  9269  001992  0E01               	movlw	1
  9270  001994  6F90               	movwf	___altoft@sign& (0+255),b
  9271                           
  9272                           ; BSR set to: 0
  9273  001996  D006               	goto	l1539
  9274  001998                     
  9275                           ; BSR set to: 0
  9276                           
  9277                           ; BSR set to: 0
  9278  001998  90D8               	bcf	status,0,c
  9279  00199A  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
  9280  00199C  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
  9281  00199E  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
  9282  0019A0  3387               	rrcf	___altoft@c& (0+255),f,b
  9283  0019A2  2B8F               	incf	___altoft@exp& (0+255),f,b
  9284  0019A4                     l1539:
  9285                           
  9286                           ; BSR set to: 0
  9287                           
  9288                           ; BSR set to: 0
  9289  0019A4  0E00               	movlw	0
  9290  0019A6  1587               	andwf	___altoft@c& (0+255),w,b
  9291  0019A8  6F8B               	movwf	??___altoft& (0+255),b
  9292  0019AA  0E00               	movlw	0
  9293  0019AC  1588               	andwf	(___altoft@c+1)& (0+255),w,b
  9294  0019AE  6F8C               	movwf	(??___altoft+1)& (0+255),b
  9295  0019B0  0E00               	movlw	0
  9296  0019B2  1589               	andwf	(___altoft@c+2)& (0+255),w,b
  9297  0019B4  6F8D               	movwf	(??___altoft+2)& (0+255),b
  9298  0019B6  0EFF               	movlw	255
  9299  0019B8  158A               	andwf	(___altoft@c+3)& (0+255),w,b
  9300  0019BA  6F8E               	movwf	(??___altoft+3)& (0+255),b
  9301  0019BC  518B               	movf	??___altoft& (0+255),w,b
  9302  0019BE  118C               	iorwf	(??___altoft+1)& (0+255),w,b
  9303  0019C0  118D               	iorwf	(??___altoft+2)& (0+255),w,b
  9304  0019C2  118E               	iorwf	(??___altoft+3)& (0+255),w,b
  9305  0019C4  A4D8               	btfss	status,2,c
  9306  0019C6  D7E8               	goto	l1540
  9307                           
  9308                           ; BSR set to: 0
  9309                           
  9310                           ; BSR set to: 0
  9311  0019C8  C087  F018         	movff	___altoft@c,___ftpack@arg
  9312  0019CC  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
  9313  0019D0  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
  9314  0019D4  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
  9315  0019D8  C090  F01C         	movff	___altoft@sign,___ftpack@sign
  9316  0019DC  EC48  F00B         	call	___ftpack	;wreg free
  9317  0019E0  C018  F087         	movff	?___ftpack,?___altoft
  9318  0019E4  C019  F088         	movff	?___ftpack+1,?___altoft+1
  9319  0019E8  C01A  F089         	movff	?___ftpack+2,?___altoft+2
  9320  0019EC  0012               	return	
  9321  0019EE                     __end_of___altoft:
  9322                           	opt stack 0
  9323                           tblptru	equ	0xFF8
  9324                           tblptrh	equ	0xFF7
  9325                           tblptrl	equ	0xFF6
  9326                           tablat	equ	0xFF5
  9327                           prodh	equ	0xFF4
  9328                           prodl	equ	0xFF3
  9329                           intcon	equ	0xFF2
  9330                           intcon2	equ	0xFF1
  9331                           postinc0	equ	0xFEE
  9332                           wreg	equ	0xFE8
  9333                           postdec1	equ	0xFE5
  9334                           fsr1l	equ	0xFE1
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           postdec2	equ	0xFDD
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function _eval_poly *****************
  9343 ;; Defined at:
  9344 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;  x               3   36[BANK0 ] float 
  9347 ;;  d               2   39[BANK0 ] PTR const 
  9348 ;;		 -> log@coeff(27), exp@coeff(30), 
  9349 ;;  n               2   41[BANK0 ] int 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  res             3   45[BANK0 ] int 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  3   36[BANK0 ] int 
  9354 ;; Registers used:
  9355 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9361 ;;      Params:         0       7       0       0       0       0       0
  9362 ;;      Locals:         0       3       0       0       0       0       0
  9363 ;;      Temps:          0       2       0       0       0       0       0
  9364 ;;      Totals:         0      12       0       0       0       0       0
  9365 ;;Total ram usage:       12 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    5
  9368 ;; This function calls:
  9369 ;;		___ftadd
  9370 ;;		___ftmul
  9371 ;;		___wmul
  9372 ;; This function is called by:
  9373 ;;		_exp
  9374 ;;		_log
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text53
  9379  001130                     __ptext53:
  9380                           	opt stack 0
  9381  001130                     _eval_poly:
  9382                           	opt stack 22
  9383                           
  9384                           ;incstack = 0
  9385  001130  C089  F018         	movff	eval_poly@n,___wmul@multiplier
  9386  001134  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  9387  001138  0E00               	movlw	0
  9388  00113A  6E1B               	movwf	___wmul@multiplicand+1,c
  9389  00113C  0E03               	movlw	3
  9390  00113E  6E1A               	movwf	___wmul@multiplicand,c
  9391  001140  EC28  F011         	call	___wmul	;wreg free
  9392  001144  C087  F08B         	movff	eval_poly@d,??_eval_poly
  9393  001148  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
  9394  00114C  5018               	movf	?___wmul,w,c
  9395  00114E  0100               	movlb	0	; () banked
  9396  001150  278B               	addwf	??_eval_poly& (0+255),f,b
  9397  001152  5019               	movf	?___wmul+1,w,c
  9398  001154  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9399  001156  C08B  FFF6         	movff	??_eval_poly,tblptrl
  9400  00115A  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
  9401  00115E                     	if	0	;tblptru may be non-zero
  9402  00115E                     	endif
  9403  00115E                     	if	0	;tblptru may be non-zero
  9404  00115E                     	endif
  9405  00115E  0009               	tblrd		*+
  9406  001160  CFF5 F08D          	movff	tablat,eval_poly@res
  9407  001164  0009               	tblrd		*+
  9408  001166  CFF5 F08E          	movff	tablat,eval_poly@res+1
  9409  00116A  000A               	tblrd		*-
  9410  00116C  CFF5 F08F          	movff	tablat,eval_poly@res+2
  9411  001170  D040               	goto	l2164
  9412  001172                     
  9413                           ; BSR set to: 0
  9414                           
  9415                           ; BSR set to: 0
  9416  001172  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
  9417  001176  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
  9418  00117A  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
  9419  00117E  C084  F069         	movff	eval_poly@x,___ftmul@f1
  9420  001182  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
  9421  001186  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
  9422  00118A  EC38  F007         	call	___ftmul	;wreg free
  9423  00118E  C069  F078         	movff	?___ftmul,___ftadd@f1
  9424  001192  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
  9425  001196  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
  9426  00119A  0E00               	movlw	0
  9427  00119C  6E1B               	movwf	___wmul@multiplicand+1,c
  9428  00119E  0E03               	movlw	3
  9429  0011A0  6E1A               	movwf	___wmul@multiplicand,c
  9430  0011A2  0100               	movlb	0	; () banked
  9431  0011A4  0789               	decf	eval_poly@n& (0+255),f,b
  9432  0011A6  A0D8               	btfss	status,0,c
  9433  0011A8  078A               	decf	(eval_poly@n+1)& (0+255),f,b
  9434  0011AA  C089  F018         	movff	eval_poly@n,___wmul@multiplier
  9435  0011AE  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  9436  0011B2  EC28  F011         	call	___wmul	;wreg free
  9437  0011B6  C087  F08B         	movff	eval_poly@d,??_eval_poly
  9438  0011BA  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
  9439  0011BE  5018               	movf	?___wmul,w,c
  9440  0011C0  0100               	movlb	0	; () banked
  9441  0011C2  278B               	addwf	??_eval_poly& (0+255),f,b
  9442  0011C4  5019               	movf	?___wmul+1,w,c
  9443  0011C6  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
  9444  0011C8  C08B  FFF6         	movff	??_eval_poly,tblptrl
  9445  0011CC  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
  9446  0011D0                     	if	0	;tblptru may be non-zero
  9447  0011D0                     	endif
  9448  0011D0                     	if	0	;tblptru may be non-zero
  9449  0011D0                     	endif
  9450  0011D0  0009               	tblrd		*+
  9451  0011D2  CFF5 F07B          	movff	tablat,___ftadd@f2
  9452  0011D6  0009               	tblrd		*+
  9453  0011D8  CFF5 F07C          	movff	tablat,___ftadd@f2+1
  9454  0011DC  000A               	tblrd		*-
  9455  0011DE  CFF5 F07D          	movff	tablat,___ftadd@f2+2
  9456  0011E2  EC58  F003         	call	___ftadd	;wreg free
  9457  0011E6  C078  F08D         	movff	?___ftadd,eval_poly@res
  9458  0011EA  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
  9459  0011EE  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
  9460  0011F2                     l2164:
  9461  0011F2  0100               	movlb	0	; () banked
  9462  0011F4  5189               	movf	eval_poly@n& (0+255),w,b
  9463  0011F6  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9464  0011F8  A4D8               	btfss	status,2,c
  9465  0011FA  D7BB               	goto	l2165
  9466                           
  9467                           ; BSR set to: 0
  9468  0011FC  C08D  F084         	movff	eval_poly@res,?_eval_poly
  9469  001200  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
  9470  001204  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
  9471                           
  9472                           ; BSR set to: 0
  9473  001208  0012               	return		;funcret
  9474  00120A                     __end_of_eval_poly:
  9475                           	opt stack 0
  9476                           tblptru	equ	0xFF8
  9477                           tblptrh	equ	0xFF7
  9478                           tblptrl	equ	0xFF6
  9479                           tablat	equ	0xFF5
  9480                           prodh	equ	0xFF4
  9481                           prodl	equ	0xFF3
  9482                           intcon	equ	0xFF2
  9483                           intcon2	equ	0xFF1
  9484                           postinc0	equ	0xFEE
  9485                           wreg	equ	0xFE8
  9486                           postdec1	equ	0xFE5
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495 ;; *************** function ___wmul *****************
  9496 ;; Defined at:
  9497 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  multiplier      2   23[COMRAM] unsigned int 
  9500 ;;  multiplicand    2   25[COMRAM] unsigned int 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  product         2   27[COMRAM] unsigned int 
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  2   23[COMRAM] unsigned int 
  9505 ;; Registers used:
  9506 ;;		wreg, status,2, status,0, prodl, prodh
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9512 ;;      Params:         4       0       0       0       0       0       0
  9513 ;;      Locals:         2       0       0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0
  9515 ;;      Totals:         6       0       0       0       0       0       0
  9516 ;;Total ram usage:        6 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    3
  9519 ;; This function calls:
  9520 ;;		Nothing
  9521 ;; This function is called by:
  9522 ;;		_eval_poly
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           	psect	text54
  9527  002250                     __ptext54:
  9528                           	opt stack 0
  9529  002250                     ___wmul:
  9530                           	opt stack 23
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;incstack = 0
  9534  002250  5018               	movf	___wmul@multiplier,w,c
  9535  002252  021A               	mulwf	___wmul@multiplicand,c
  9536  002254  CFF3 F01C          	movff	prodl,___wmul@product
  9537  002258  CFF4 F01D          	movff	prodh,___wmul@product+1
  9538  00225C  5018               	movf	___wmul@multiplier,w,c
  9539  00225E  021B               	mulwf	___wmul@multiplicand+1,c
  9540  002260  50F3               	movf	prodl,w,c
  9541  002262  261D               	addwf	___wmul@product+1,f,c
  9542  002264  5019               	movf	___wmul@multiplier+1,w,c
  9543  002266  021A               	mulwf	___wmul@multiplicand,c
  9544  002268  50F3               	movf	prodl,w,c
  9545  00226A  261D               	addwf	___wmul@product+1,f,c
  9546  00226C  C01C  F018         	movff	___wmul@product,?___wmul
  9547  002270  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  9548  002274  0012               	return	
  9549  002276                     __end_of___wmul:
  9550                           	opt stack 0
  9551                           tblptru	equ	0xFF8
  9552                           tblptrh	equ	0xFF7
  9553                           tblptrl	equ	0xFF6
  9554                           tablat	equ	0xFF5
  9555                           prodh	equ	0xFF4
  9556                           prodl	equ	0xFF3
  9557                           intcon	equ	0xFF2
  9558                           intcon2	equ	0xFF1
  9559                           postinc0	equ	0xFEE
  9560                           wreg	equ	0xFE8
  9561                           postdec1	equ	0xFE5
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function ___ftmul *****************
  9571 ;; Defined at:
  9572 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  f1              3    9[BANK0 ] float 
  9575 ;;  f2              3   12[BANK0 ] float 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  9578 ;;  sign            1   23[BANK0 ] unsigned char 
  9579 ;;  cntr            1   22[BANK0 ] unsigned char 
  9580 ;;  exp             1   18[BANK0 ] unsigned char 
  9581 ;; Return value:  Size  Location     Type
  9582 ;;                  3    9[BANK0 ] float 
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9590 ;;      Params:         0       6       0       0       0       0       0
  9591 ;;      Locals:         0       6       0       0       0       0       0
  9592 ;;      Temps:          0       3       0       0       0       0       0
  9593 ;;      Totals:         0      15       0       0       0       0       0
  9594 ;;Total ram usage:       15 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    4
  9597 ;; This function calls:
  9598 ;;		___ftpack
  9599 ;; This function is called by:
  9600 ;;		_AdcConvert
  9601 ;;		_CheckFlashPrecentage
  9602 ;;		_pow
  9603 ;;		_exp
  9604 ;;		_log
  9605 ;;		_eval_poly
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           	psect	text55
  9610  000E70                     __ptext55:
  9611                           	opt stack 0
  9612  000E70                     ___ftmul:
  9613                           	opt stack 25
  9614                           
  9615                           ;incstack = 0
  9616  000E70  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
  9617  000E74  0100               	movlb	0	; () banked
  9618  000E76  6B70               	clrf	(??___ftmul+1)& (0+255),b
  9619  000E78  6B71               	clrf	(??___ftmul+2)& (0+255),b
  9620  000E7A  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  9621  000E7C  376F               	rlcf	??___ftmul& (0+255),f,b
  9622  000E7E  E301               	bnc	u5301
  9623  000E80  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  9624  000E82                     u5301:
  9625  000E82  516F               	movf	??___ftmul& (0+255),w,b
  9626  000E84  6F72               	movwf	___ftmul@exp& (0+255),b
  9627  000E86  5172               	movf	___ftmul@exp& (0+255),w,b
  9628  000E88  A4D8               	btfss	status,2,c
  9629  000E8A  D007               	goto	l1748
  9630                           
  9631                           ; BSR set to: 0
  9632  000E8C  0E00               	movlw	0
  9633  000E8E  6F69               	movwf	?___ftmul& (0+255),b
  9634  000E90  0E00               	movlw	0
  9635  000E92  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  9636  000E94  0E00               	movlw	0
  9637  000E96  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  9638                           
  9639                           ; BSR set to: 0
  9640  000E98  0012               	return	
  9641  000E9A                     l1748:
  9642                           
  9643                           ; BSR set to: 0
  9644                           
  9645                           ; BSR set to: 0
  9646  000E9A  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
  9647  000E9E  6B70               	clrf	(??___ftmul+1)& (0+255),b
  9648  000EA0  6B71               	clrf	(??___ftmul+2)& (0+255),b
  9649  000EA2  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  9650  000EA4  376F               	rlcf	??___ftmul& (0+255),f,b
  9651  000EA6  E301               	bnc	u5321
  9652  000EA8  8170               	bsf	(??___ftmul+1)& (0+255),0,b
  9653  000EAA                     u5321:
  9654  000EAA  516F               	movf	??___ftmul& (0+255),w,b
  9655  000EAC  6F77               	movwf	___ftmul@sign& (0+255),b
  9656  000EAE  5177               	movf	___ftmul@sign& (0+255),w,b
  9657  000EB0  A4D8               	btfss	status,2,c
  9658  000EB2  D007               	goto	l1750
  9659                           
  9660                           ; BSR set to: 0
  9661  000EB4  0E00               	movlw	0
  9662  000EB6  6F69               	movwf	?___ftmul& (0+255),b
  9663  000EB8  0E00               	movlw	0
  9664  000EBA  6F6A               	movwf	(?___ftmul+1)& (0+255),b
  9665  000EBC  0E00               	movlw	0
  9666  000EBE  6F6B               	movwf	(?___ftmul+2)& (0+255),b
  9667                           
  9668                           ; BSR set to: 0
  9669  000EC0  0012               	return	
  9670  000EC2                     l1750:
  9671                           
  9672                           ; BSR set to: 0
  9673                           
  9674                           ; BSR set to: 0
  9675  000EC2  5177               	movf	___ftmul@sign& (0+255),w,b
  9676  000EC4  0F7B               	addlw	123
  9677  000EC6  2772               	addwf	___ftmul@exp& (0+255),f,b
  9678                           
  9679                           ; BSR set to: 0
  9680  000EC8  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
  9681  000ECC  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9682  000ECE  1B77               	xorwf	___ftmul@sign& (0+255),f,b
  9683  000ED0  0E80               	movlw	128
  9684  000ED2  1777               	andwf	___ftmul@sign& (0+255),f,b
  9685                           
  9686                           ; BSR set to: 0
  9687  000ED4  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  9688                           
  9689                           ; BSR set to: 0
  9690  000ED6  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  9691                           
  9692                           ; BSR set to: 0
  9693  000ED8  0EFF               	movlw	255
  9694  000EDA  176C               	andwf	___ftmul@f2& (0+255),f,b
  9695  000EDC  0EFF               	movlw	255
  9696  000EDE  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  9697  000EE0  0E00               	movlw	0
  9698  000EE2  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9699                           
  9700                           ; BSR set to: 0
  9701  000EE4  0E00               	movlw	0
  9702  000EE6  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
  9703  000EE8  0E00               	movlw	0
  9704  000EEA  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  9705  000EEC  0E00               	movlw	0
  9706  000EEE  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  9707                           
  9708                           ; BSR set to: 0
  9709  000EF0  0E07               	movlw	7
  9710  000EF2  6F76               	movwf	___ftmul@cntr& (0+255),b
  9711  000EF4                     
  9712                           ; BSR set to: 0
  9713                           
  9714                           ; BSR set to: 0
  9715  000EF4  A169               	btfss	___ftmul@f1& (0+255),0,b
  9716  000EF6  D006               	goto	l1752
  9717                           
  9718                           ; BSR set to: 0
  9719  000EF8  516C               	movf	___ftmul@f2& (0+255),w,b
  9720  000EFA  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9721  000EFC  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  9722  000EFE  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9723  000F00  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9724  000F02  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9725  000F04                     l1752:
  9726                           
  9727                           ; BSR set to: 0
  9728                           
  9729                           ; BSR set to: 0
  9730  000F04  90D8               	bcf	status,0,c
  9731  000F06  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9732  000F08  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9733  000F0A  3369               	rrcf	___ftmul@f1& (0+255),f,b
  9734  000F0C  90D8               	bcf	status,0,c
  9735  000F0E  376C               	rlcf	___ftmul@f2& (0+255),f,b
  9736  000F10  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9737  000F12  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9738                           
  9739                           ; BSR set to: 0
  9740  000F14  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  9741  000F16  D7EE               	goto	l1751
  9742                           
  9743                           ; BSR set to: 0
  9744                           
  9745                           ; BSR set to: 0
  9746  000F18  0E09               	movlw	9
  9747  000F1A  6F76               	movwf	___ftmul@cntr& (0+255),b
  9748  000F1C                     
  9749                           ; BSR set to: 0
  9750                           
  9751                           ; BSR set to: 0
  9752  000F1C  A169               	btfss	___ftmul@f1& (0+255),0,b
  9753  000F1E  D006               	goto	l1755
  9754                           
  9755                           ; BSR set to: 0
  9756  000F20  516C               	movf	___ftmul@f2& (0+255),w,b
  9757  000F22  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9758  000F24  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
  9759  000F26  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9760  000F28  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
  9761  000F2A  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9762  000F2C                     l1755:
  9763                           
  9764                           ; BSR set to: 0
  9765                           
  9766                           ; BSR set to: 0
  9767  000F2C  90D8               	bcf	status,0,c
  9768  000F2E  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9769  000F30  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9770  000F32  3369               	rrcf	___ftmul@f1& (0+255),f,b
  9771  000F34  90D8               	bcf	status,0,c
  9772  000F36  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9773  000F38  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9774  000F3A  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9775                           
  9776                           ; BSR set to: 0
  9777  000F3C  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
  9778  000F3E  D7EE               	goto	l1754
  9779                           
  9780                           ; BSR set to: 0
  9781                           
  9782                           ; BSR set to: 0
  9783  000F40  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  9784  000F44  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9785  000F48  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9786  000F4C  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
  9787  000F50  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
  9788  000F54  EC48  F00B         	call	___ftpack	;wreg free
  9789  000F58  C018  F069         	movff	?___ftpack,?___ftmul
  9790  000F5C  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
  9791  000F60  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
  9792  000F64  0012               	return	
  9793  000F66                     __end_of___ftmul:
  9794                           	opt stack 0
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon	equ	0xFF2
  9802                           intcon2	equ	0xFF1
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           fsr2h	equ	0xFDA
  9811                           fsr2l	equ	0xFD9
  9812                           status	equ	0xFD8
  9813                           
  9814 ;; *************** function ___ftsub *****************
  9815 ;; Defined at:
  9816 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  f1              3   36[BANK0 ] float 
  9819 ;;  f2              3   39[BANK0 ] float 
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  3   36[BANK0 ] float 
  9824 ;; Registers used:
  9825 ;;		wreg, status,2, status,0, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9831 ;;      Params:         0       6       0       0       0       0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0
  9834 ;;      Totals:         0       6       0       0       0       0       0
  9835 ;;Total ram usage:        6 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    5
  9838 ;; This function calls:
  9839 ;;		___ftadd
  9840 ;; This function is called by:
  9841 ;;		_exp
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text56
  9846  001F28                     __ptext56:
  9847                           	opt stack 0
  9848  001F28                     ___ftsub:
  9849                           	opt stack 22
  9850                           
  9851                           ;incstack = 0
  9852  001F28  0100               	movlb	0	; () banked
  9853  001F2A  5187               	movf	___ftsub@f2& (0+255),w,b
  9854  001F2C  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9855  001F2E  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9856  001F30  B4D8               	btfsc	status,2,c
  9857  001F32  D006               	goto	l1765
  9858                           
  9859                           ; BSR set to: 0
  9860  001F34  0E00               	movlw	0
  9861  001F36  1B87               	xorwf	___ftsub@f2& (0+255),f,b
  9862  001F38  0E00               	movlw	0
  9863  001F3A  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9864  001F3C  0E80               	movlw	128
  9865  001F3E  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9866  001F40                     l1765:
  9867                           
  9868                           ; BSR set to: 0
  9869                           
  9870                           ; BSR set to: 0
  9871  001F40  C084  F078         	movff	___ftsub@f1,___ftadd@f1
  9872  001F44  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
  9873  001F48  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
  9874  001F4C  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
  9875  001F50  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
  9876  001F54  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
  9877  001F58  EC58  F003         	call	___ftadd	;wreg free
  9878  001F5C  C078  F084         	movff	?___ftadd,?___ftsub
  9879  001F60  C079  F085         	movff	?___ftadd+1,?___ftsub+1
  9880  001F64  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
  9881  001F68  0012               	return	
  9882  001F6A                     __end_of___ftsub:
  9883                           	opt stack 0
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           postinc0	equ	0xFEE
  9893                           wreg	equ	0xFE8
  9894                           postdec1	equ	0xFE5
  9895                           fsr1l	equ	0xFE1
  9896                           indf2	equ	0xFDF
  9897                           postinc2	equ	0xFDE
  9898                           postdec2	equ	0xFDD
  9899                           fsr2h	equ	0xFDA
  9900                           fsr2l	equ	0xFD9
  9901                           status	equ	0xFD8
  9902                           
  9903 ;; *************** function ___ftadd *****************
  9904 ;; Defined at:
  9905 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  f1              3   24[BANK0 ] float 
  9908 ;;  f2              3   27[BANK0 ] float 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  exp1            1   35[BANK0 ] unsigned char 
  9911 ;;  exp2            1   34[BANK0 ] unsigned char 
  9912 ;;  sign            1   33[BANK0 ] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  3   24[BANK0 ] float 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9922 ;;      Params:         0       6       0       0       0       0       0
  9923 ;;      Locals:         0       3       0       0       0       0       0
  9924 ;;      Temps:          0       3       0       0       0       0       0
  9925 ;;      Totals:         0      12       0       0       0       0       0
  9926 ;;Total ram usage:       12 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    4
  9929 ;; This function calls:
  9930 ;;		___ftpack
  9931 ;; This function is called by:
  9932 ;;		___ftsub
  9933 ;;		_floor
  9934 ;;		_log
  9935 ;;		_eval_poly
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text57
  9940  0006B0                     __ptext57:
  9941                           	opt stack 0
  9942  0006B0                     ___ftadd:
  9943                           	opt stack 22
  9944                           
  9945                           ;incstack = 0
  9946  0006B0  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
  9947  0006B4  0100               	movlb	0	; () banked
  9948  0006B6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
  9949  0006B8  6B80               	clrf	(??___ftadd+2)& (0+255),b
  9950  0006BA  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9951  0006BC  377E               	rlcf	??___ftadd& (0+255),f,b
  9952  0006BE  E301               	bnc	u5091
  9953  0006C0  817F               	bsf	(??___ftadd+1)& (0+255),0,b
  9954  0006C2                     u5091:
  9955  0006C2  517E               	movf	??___ftadd& (0+255),w,b
  9956  0006C4  6F83               	movwf	___ftadd@exp1& (0+255),b
  9957  0006C6  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
  9958  0006CA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
  9959  0006CC  6B80               	clrf	(??___ftadd+2)& (0+255),b
  9960  0006CE  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9961  0006D0  377E               	rlcf	??___ftadd& (0+255),f,b
  9962  0006D2  E301               	bnc	u5101
  9963  0006D4  817F               	bsf	(??___ftadd+1)& (0+255),0,b
  9964  0006D6                     u5101:
  9965  0006D6  517E               	movf	??___ftadd& (0+255),w,b
  9966  0006D8  6F82               	movwf	___ftadd@exp2& (0+255),b
  9967                           
  9968                           ; BSR set to: 0
  9969  0006DA  5183               	movf	___ftadd@exp1& (0+255),w,b
  9970  0006DC  B4D8               	btfsc	status,2,c
  9971  0006DE  D00B               	goto	u5130
  9972                           
  9973                           ; BSR set to: 0
  9974  0006E0  5182               	movf	___ftadd@exp2& (0+255),w,b
  9975  0006E2  5D83               	subwf	___ftadd@exp1& (0+255),w,b
  9976  0006E4  B0D8               	btfsc	status,0,c
  9977  0006E6  D00E               	goto	l1700
  9978                           
  9979                           ; BSR set to: 0
  9980  0006E8  5183               	movf	___ftadd@exp1& (0+255),w,b
  9981  0006EA  0800               	sublw	0
  9982  0006EC  2582               	addwf	___ftadd@exp2& (0+255),w,b
  9983  0006EE  6F7E               	movwf	??___ftadd& (0+255),b
  9984  0006F0  0E18               	movlw	24
  9985  0006F2  657E               	cpfsgt	??___ftadd& (0+255),b
  9986  0006F4  D007               	goto	l1700
  9987  0006F6                     u5130:
  9988                           
  9989                           ; BSR set to: 0
  9990  0006F6  C07B  F078         	movff	___ftadd@f2,?___ftadd
  9991  0006FA  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
  9992  0006FE  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
  9993  000702  0012               	return	
  9994  000704                     l1700:
  9995                           
  9996                           ; BSR set to: 0
  9997                           
  9998                           ; BSR set to: 0
  9999  000704  5182               	movf	___ftadd@exp2& (0+255),w,b
 10000  000706  B4D8               	btfsc	status,2,c
 10001  000708  D00B               	goto	u5160
 10002                           
 10003                           ; BSR set to: 0
 10004  00070A  5183               	movf	___ftadd@exp1& (0+255),w,b
 10005  00070C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 10006  00070E  B0D8               	btfsc	status,0,c
 10007  000710  D00E               	goto	l1704
 10008                           
 10009                           ; BSR set to: 0
 10010  000712  5182               	movf	___ftadd@exp2& (0+255),w,b
 10011  000714  0800               	sublw	0
 10012  000716  2583               	addwf	___ftadd@exp1& (0+255),w,b
 10013  000718  6F7E               	movwf	??___ftadd& (0+255),b
 10014  00071A  0E18               	movlw	24
 10015  00071C  657E               	cpfsgt	??___ftadd& (0+255),b
 10016  00071E  D007               	goto	l1704
 10017  000720                     u5160:
 10018                           
 10019                           ; BSR set to: 0
 10020  000720  C078  F078         	movff	___ftadd@f1,?___ftadd
 10021  000724  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 10022  000728  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 10023  00072C  0012               	return	
 10024  00072E                     l1704:
 10025                           
 10026                           ; BSR set to: 0
 10027                           
 10028                           ; BSR set to: 0
 10029  00072E  0E06               	movlw	6
 10030  000730  6F81               	movwf	___ftadd@sign& (0+255),b
 10031                           
 10032                           ; BSR set to: 0
 10033  000732  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10034                           
 10035                           ; BSR set to: 0
 10036  000734  8F81               	bsf	___ftadd@sign& (0+255),7,b
 10037                           
 10038                           ; BSR set to: 0
 10039                           
 10040                           ; BSR set to: 0
 10041  000736  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10042                           
 10043                           ; BSR set to: 0
 10044  000738  8D81               	bsf	___ftadd@sign& (0+255),6,b
 10045                           
 10046                           ; BSR set to: 0
 10047  00073A  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10048                           
 10049                           ; BSR set to: 0
 10050  00073C  0EFF               	movlw	255
 10051  00073E  1778               	andwf	___ftadd@f1& (0+255),f,b
 10052  000740  0EFF               	movlw	255
 10053  000742  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10054  000744  0E00               	movlw	0
 10055  000746  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10056  000748  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10057                           
 10058                           ; BSR set to: 0
 10059  00074A  0EFF               	movlw	255
 10060  00074C  177B               	andwf	___ftadd@f2& (0+255),f,b
 10061  00074E  0EFF               	movlw	255
 10062  000750  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10063  000752  0E00               	movlw	0
 10064  000754  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10065                           
 10066                           ; BSR set to: 0
 10067  000756  5182               	movf	___ftadd@exp2& (0+255),w,b
 10068  000758  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 10069  00075A  B0D8               	btfsc	status,0,c
 10070  00075C  D01B               	goto	l1709
 10071  00075E                     u5190:
 10072                           
 10073                           ; BSR set to: 0
 10074                           
 10075                           ; BSR set to: 0
 10076  00075E  90D8               	bcf	status,0,c
 10077  000760  377B               	rlcf	___ftadd@f2& (0+255),f,b
 10078  000762  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10079  000764  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10080  000766  0782               	decf	___ftadd@exp2& (0+255),f,b
 10081                           
 10082                           ; BSR set to: 0
 10083  000768  5183               	movf	___ftadd@exp1& (0+255),w,b
 10084  00076A  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 10085  00076C  B4D8               	btfsc	status,2,c
 10086  00076E  D00D               	goto	l1714
 10087                           
 10088                           ; BSR set to: 0
 10089  000770  0781               	decf	___ftadd@sign& (0+255),f,b
 10090  000772  C081  F07E         	movff	___ftadd@sign,??___ftadd
 10091  000776  0E07               	movlw	7
 10092  000778  177E               	andwf	??___ftadd& (0+255),f,b
 10093  00077A  B4D8               	btfsc	status,2,c
 10094  00077C  D006               	goto	l1714
 10095  00077E  D7EF               	goto	u5190
 10096  000780                     
 10097                           ; BSR set to: 0
 10098                           
 10099                           ; BSR set to: 0
 10100  000780  90D8               	bcf	status,0,c
 10101  000782  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10102  000784  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10103  000786  3378               	rrcf	___ftadd@f1& (0+255),f,b
 10104  000788  2B83               	incf	___ftadd@exp1& (0+255),f,b
 10105  00078A                     l1714:
 10106                           
 10107                           ; BSR set to: 0
 10108                           
 10109                           ; BSR set to: 0
 10110  00078A  5182               	movf	___ftadd@exp2& (0+255),w,b
 10111  00078C  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 10112  00078E  B4D8               	btfsc	status,2,c
 10113  000790  D01F               	goto	u5260
 10114  000792  D7F6               	goto	l1715
 10115  000794                     l1709:
 10116                           
 10117                           ; BSR set to: 0
 10118                           
 10119                           ; BSR set to: 0
 10120  000794  5183               	movf	___ftadd@exp1& (0+255),w,b
 10121  000796  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 10122  000798  B0D8               	btfsc	status,0,c
 10123  00079A  D01A               	goto	u5260
 10124  00079C                     u5230:
 10125                           
 10126                           ; BSR set to: 0
 10127                           
 10128                           ; BSR set to: 0
 10129  00079C  90D8               	bcf	status,0,c
 10130  00079E  3778               	rlcf	___ftadd@f1& (0+255),f,b
 10131  0007A0  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10132  0007A2  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10133  0007A4  0783               	decf	___ftadd@exp1& (0+255),f,b
 10134                           
 10135                           ; BSR set to: 0
 10136  0007A6  5183               	movf	___ftadd@exp1& (0+255),w,b
 10137  0007A8  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 10138  0007AA  B4D8               	btfsc	status,2,c
 10139  0007AC  D00D               	goto	l1723
 10140                           
 10141                           ; BSR set to: 0
 10142  0007AE  0781               	decf	___ftadd@sign& (0+255),f,b
 10143  0007B0  C081  F07E         	movff	___ftadd@sign,??___ftadd
 10144  0007B4  0E07               	movlw	7
 10145  0007B6  177E               	andwf	??___ftadd& (0+255),f,b
 10146  0007B8  B4D8               	btfsc	status,2,c
 10147  0007BA  D006               	goto	l1723
 10148  0007BC  D7EF               	goto	u5230
 10149  0007BE                     
 10150                           ; BSR set to: 0
 10151                           
 10152                           ; BSR set to: 0
 10153  0007BE  90D8               	bcf	status,0,c
 10154  0007C0  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10155  0007C2  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10156  0007C4  337B               	rrcf	___ftadd@f2& (0+255),f,b
 10157  0007C6  2B82               	incf	___ftadd@exp2& (0+255),f,b
 10158  0007C8                     l1723:
 10159                           
 10160                           ; BSR set to: 0
 10161                           
 10162                           ; BSR set to: 0
 10163  0007C8  5182               	movf	___ftadd@exp2& (0+255),w,b
 10164  0007CA  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 10165  0007CC  A4D8               	btfss	status,2,c
 10166  0007CE  D7F7               	goto	l1724
 10167  0007D0                     u5260:
 10168                           
 10169                           ; BSR set to: 0
 10170                           
 10171                           ; BSR set to: 0
 10172                           
 10173                           ; BSR set to: 0
 10174  0007D0  AF81               	btfss	___ftadd@sign& (0+255),7,b
 10175  0007D2  D00C               	goto	l1726
 10176                           
 10177                           ; BSR set to: 0
 10178  0007D4  0EFF               	movlw	255
 10179  0007D6  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 10180  0007D8  0EFF               	movlw	255
 10181  0007DA  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10182  0007DC  0EFF               	movlw	255
 10183  0007DE  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10184  0007E0  0E01               	movlw	1
 10185  0007E2  2778               	addwf	___ftadd@f1& (0+255),f,b
 10186  0007E4  0E00               	movlw	0
 10187  0007E6  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10188  0007E8  0E00               	movlw	0
 10189  0007EA  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10190  0007EC                     l1726:
 10191                           
 10192                           ; BSR set to: 0
 10193  0007EC  AD81               	btfss	___ftadd@sign& (0+255),6,b
 10194  0007EE  D00C               	goto	l1727
 10195                           
 10196                           ; BSR set to: 0
 10197  0007F0  0EFF               	movlw	255
 10198  0007F2  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 10199  0007F4  0EFF               	movlw	255
 10200  0007F6  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10201  0007F8  0EFF               	movlw	255
 10202  0007FA  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10203  0007FC  0E01               	movlw	1
 10204  0007FE  277B               	addwf	___ftadd@f2& (0+255),f,b
 10205  000800  0E00               	movlw	0
 10206  000802  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10207  000804  0E00               	movlw	0
 10208  000806  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10209  000808                     l1727:
 10210                           
 10211                           ; BSR set to: 0
 10212                           
 10213                           ; BSR set to: 0
 10214  000808  0E00               	movlw	0
 10215  00080A  6F81               	movwf	___ftadd@sign& (0+255),b
 10216                           
 10217                           ; BSR set to: 0
 10218  00080C  5178               	movf	___ftadd@f1& (0+255),w,b
 10219  00080E  277B               	addwf	___ftadd@f2& (0+255),f,b
 10220  000810  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 10221  000812  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10222  000814  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 10223  000816  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10224                           
 10225                           ; BSR set to: 0
 10226  000818  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10227  00081A  D00E               	goto	l1728
 10228                           
 10229                           ; BSR set to: 0
 10230  00081C  0EFF               	movlw	255
 10231  00081E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 10232  000820  0EFF               	movlw	255
 10233  000822  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10234  000824  0EFF               	movlw	255
 10235  000826  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10236  000828  0E01               	movlw	1
 10237  00082A  277B               	addwf	___ftadd@f2& (0+255),f,b
 10238  00082C  0E00               	movlw	0
 10239  00082E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10240  000830  0E00               	movlw	0
 10241  000832  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10242                           
 10243                           ; BSR set to: 0
 10244  000834  0E01               	movlw	1
 10245  000836  6F81               	movwf	___ftadd@sign& (0+255),b
 10246  000838                     l1728:
 10247                           
 10248                           ; BSR set to: 0
 10249                           
 10250                           ; BSR set to: 0
 10251  000838  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 10252  00083C  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 10253  000840  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 10254  000844  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 10255  000848  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 10256  00084C  EC48  F00B         	call	___ftpack	;wreg free
 10257  000850  C018  F078         	movff	?___ftpack,?___ftadd
 10258  000854  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 10259  000858  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 10260  00085C  0012               	return	
 10261  00085E                     __end_of___ftadd:
 10262                           	opt stack 0
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           postinc0	equ	0xFEE
 10272                           wreg	equ	0xFE8
 10273                           postdec1	equ	0xFE5
 10274                           fsr1l	equ	0xFE1
 10275                           indf2	equ	0xFDF
 10276                           postinc2	equ	0xFDE
 10277                           postdec2	equ	0xFDD
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function ___ftneg *****************
 10283 ;; Defined at:
 10284 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;  f1              3   23[COMRAM] float 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;		None
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  3   23[COMRAM] float 
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, status,0
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10298 ;;      Params:         3       0       0       0       0       0       0
 10299 ;;      Locals:         0       0       0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0
 10301 ;;      Totals:         3       0       0       0       0       0       0
 10302 ;;Total ram usage:        3 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    3
 10305 ;; This function calls:
 10306 ;;		Nothing
 10307 ;; This function is called by:
 10308 ;;		_pow
 10309 ;;		_exp
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text58
 10314  002276                     __ptext58:
 10315                           	opt stack 0
 10316  002276                     ___ftneg:
 10317                           	opt stack 24
 10318                           
 10319                           ;incstack = 0
 10320  002276  5018               	movf	___ftneg@f1,w,c
 10321  002278  1019               	iorwf	___ftneg@f1+1,w,c
 10322  00227A  101A               	iorwf	___ftneg@f1+2,w,c
 10323  00227C  B4D8               	btfsc	status,2,c
 10324  00227E  D006               	goto	l1759
 10325  002280  0E00               	movlw	0
 10326  002282  1A18               	xorwf	___ftneg@f1,f,c
 10327  002284  0E00               	movlw	0
 10328  002286  1A19               	xorwf	___ftneg@f1+1,f,c
 10329  002288  0E80               	movlw	128
 10330  00228A  1A1A               	xorwf	___ftneg@f1+2,f,c
 10331  00228C                     l1759:
 10332  00228C  C018  F018         	movff	___ftneg@f1,?___ftneg
 10333  002290  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 10334  002294  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 10335  002298  0012               	return		;funcret
 10336  00229A                     __end_of___ftneg:
 10337                           	opt stack 0
 10338                           tblptru	equ	0xFF8
 10339                           tblptrh	equ	0xFF7
 10340                           tblptrl	equ	0xFF6
 10341                           tablat	equ	0xFF5
 10342                           prodh	equ	0xFF4
 10343                           prodl	equ	0xFF3
 10344                           intcon	equ	0xFF2
 10345                           intcon2	equ	0xFF1
 10346                           postinc0	equ	0xFEE
 10347                           wreg	equ	0xFE8
 10348                           postdec1	equ	0xFE5
 10349                           fsr1l	equ	0xFE1
 10350                           indf2	equ	0xFDF
 10351                           postinc2	equ	0xFDE
 10352                           postdec2	equ	0xFDD
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function ___ftdiv *****************
 10358 ;; Defined at:
 10359 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  f1              3   40[COMRAM] float 
 10362 ;;  f2              3   43[COMRAM] float 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  f3              3    4[BANK0 ] float 
 10365 ;;  sign            1    8[BANK0 ] unsigned char 
 10366 ;;  exp             1    7[BANK0 ] unsigned char 
 10367 ;;  cntr            1    3[BANK0 ] unsigned char 
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  3   40[COMRAM] float 
 10370 ;; Registers used:
 10371 ;;		wreg, status,2, status,0, cstack
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10377 ;;      Params:         6       0       0       0       0       0       0
 10378 ;;      Locals:         0       6       0       0       0       0       0
 10379 ;;      Temps:          0       3       0       0       0       0       0
 10380 ;;      Totals:         6       9       0       0       0       0       0
 10381 ;;Total ram usage:       15 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    4
 10384 ;; This function calls:
 10385 ;;		___ftpack
 10386 ;; This function is called by:
 10387 ;;		_AdcConvert
 10388 ;;		_CheckFlashPrecentage
 10389 ;;		_exp
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           	psect	text59
 10394  000F66                     __ptext59:
 10395                           	opt stack 0
 10396  000F66                     ___ftdiv:
 10397                           	opt stack 25
 10398                           
 10399                           ;incstack = 0
 10400  000F66  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 10401  000F6A  0100               	movlb	0	; () banked
 10402  000F6C  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 10403  000F6E  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 10404  000F70  342A               	rlcf	___ftdiv@f1+1,w,c
 10405  000F72  3760               	rlcf	??___ftdiv& (0+255),f,b
 10406  000F74  E301               	bnc	u5501
 10407  000F76  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 10408  000F78                     u5501:
 10409  000F78  5160               	movf	??___ftdiv& (0+255),w,b
 10410  000F7A  6F67               	movwf	___ftdiv@exp& (0+255),b
 10411  000F7C  5167               	movf	___ftdiv@exp& (0+255),w,b
 10412  000F7E  A4D8               	btfss	status,2,c
 10413  000F80  D007               	goto	l1733
 10414                           
 10415                           ; BSR set to: 0
 10416  000F82  0E00               	movlw	0
 10417  000F84  6E29               	movwf	?___ftdiv,c
 10418  000F86  0E00               	movlw	0
 10419  000F88  6E2A               	movwf	?___ftdiv+1,c
 10420  000F8A  0E00               	movlw	0
 10421  000F8C  6E2B               	movwf	?___ftdiv+2,c
 10422                           
 10423                           ; BSR set to: 0
 10424  000F8E  0012               	return	
 10425  000F90                     l1733:
 10426                           
 10427                           ; BSR set to: 0
 10428                           
 10429                           ; BSR set to: 0
 10430  000F90  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 10431  000F94  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 10432  000F96  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 10433  000F98  342D               	rlcf	___ftdiv@f2+1,w,c
 10434  000F9A  3760               	rlcf	??___ftdiv& (0+255),f,b
 10435  000F9C  E301               	bnc	u5521
 10436  000F9E  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 10437  000FA0                     u5521:
 10438  000FA0  5160               	movf	??___ftdiv& (0+255),w,b
 10439  000FA2  6F68               	movwf	___ftdiv@sign& (0+255),b
 10440  000FA4  5168               	movf	___ftdiv@sign& (0+255),w,b
 10441  000FA6  A4D8               	btfss	status,2,c
 10442  000FA8  D007               	goto	l1735
 10443                           
 10444                           ; BSR set to: 0
 10445  000FAA  0E00               	movlw	0
 10446  000FAC  6E29               	movwf	?___ftdiv,c
 10447  000FAE  0E00               	movlw	0
 10448  000FB0  6E2A               	movwf	?___ftdiv+1,c
 10449  000FB2  0E00               	movlw	0
 10450  000FB4  6E2B               	movwf	?___ftdiv+2,c
 10451                           
 10452                           ; BSR set to: 0
 10453  000FB6  0012               	return	
 10454  000FB8                     l1735:
 10455                           
 10456                           ; BSR set to: 0
 10457                           
 10458                           ; BSR set to: 0
 10459  000FB8  0E00               	movlw	0
 10460  000FBA  6F64               	movwf	___ftdiv@f3& (0+255),b
 10461  000FBC  0E00               	movlw	0
 10462  000FBE  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 10463  000FC0  0E00               	movlw	0
 10464  000FC2  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 10465                           
 10466                           ; BSR set to: 0
 10467  000FC4  5168               	movf	___ftdiv@sign& (0+255),w,b
 10468  000FC6  0F89               	addlw	137
 10469  000FC8  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 10470                           
 10471                           ; BSR set to: 0
 10472  000FCA  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 10473                           
 10474                           ; BSR set to: 0
 10475  000FCE  502E               	movf	___ftdiv@f2+2,w,c
 10476  000FD0  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 10477                           
 10478                           ; BSR set to: 0
 10479  000FD2  0E80               	movlw	128
 10480  000FD4  1768               	andwf	___ftdiv@sign& (0+255),f,b
 10481                           
 10482                           ; BSR set to: 0
 10483  000FD6  8E2A               	bsf	___ftdiv@f1+1,7,c
 10484                           
 10485                           ; BSR set to: 0
 10486  000FD8  0EFF               	movlw	255
 10487  000FDA  1629               	andwf	___ftdiv@f1,f,c
 10488  000FDC  0EFF               	movlw	255
 10489  000FDE  162A               	andwf	___ftdiv@f1+1,f,c
 10490  000FE0  0E00               	movlw	0
 10491  000FE2  162B               	andwf	___ftdiv@f1+2,f,c
 10492                           
 10493                           ; BSR set to: 0
 10494  000FE4  8E2D               	bsf	___ftdiv@f2+1,7,c
 10495                           
 10496                           ; BSR set to: 0
 10497  000FE6  0EFF               	movlw	255
 10498  000FE8  162C               	andwf	___ftdiv@f2,f,c
 10499  000FEA  0EFF               	movlw	255
 10500  000FEC  162D               	andwf	___ftdiv@f2+1,f,c
 10501  000FEE  0E00               	movlw	0
 10502  000FF0  162E               	andwf	___ftdiv@f2+2,f,c
 10503                           
 10504                           ; BSR set to: 0
 10505  000FF2  0E18               	movlw	24
 10506  000FF4  6F63               	movwf	___ftdiv@cntr& (0+255),b
 10507  000FF6                     
 10508                           ; BSR set to: 0
 10509                           
 10510                           ; BSR set to: 0
 10511  000FF6  90D8               	bcf	status,0,c
 10512  000FF8  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 10513  000FFA  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10514  000FFC  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10515                           
 10516                           ; BSR set to: 0
 10517  000FFE  502C               	movf	___ftdiv@f2,w,c
 10518  001000  5C29               	subwf	___ftdiv@f1,w,c
 10519  001002  502D               	movf	___ftdiv@f2+1,w,c
 10520  001004  582A               	subwfb	___ftdiv@f1+1,w,c
 10521  001006  502E               	movf	___ftdiv@f2+2,w,c
 10522  001008  582B               	subwfb	___ftdiv@f1+2,w,c
 10523  00100A  A0D8               	btfss	status,0,c
 10524  00100C  D007               	goto	l1737
 10525                           
 10526                           ; BSR set to: 0
 10527  00100E  502C               	movf	___ftdiv@f2,w,c
 10528  001010  5E29               	subwf	___ftdiv@f1,f,c
 10529  001012  502D               	movf	___ftdiv@f2+1,w,c
 10530  001014  5A2A               	subwfb	___ftdiv@f1+1,f,c
 10531  001016  502E               	movf	___ftdiv@f2+2,w,c
 10532  001018  5A2B               	subwfb	___ftdiv@f1+2,f,c
 10533                           
 10534                           ; BSR set to: 0
 10535  00101A  8164               	bsf	___ftdiv@f3& (0+255),0,b
 10536  00101C                     l1737:
 10537                           
 10538                           ; BSR set to: 0
 10539  00101C  90D8               	bcf	status,0,c
 10540  00101E  3629               	rlcf	___ftdiv@f1,f,c
 10541  001020  362A               	rlcf	___ftdiv@f1+1,f,c
 10542  001022  362B               	rlcf	___ftdiv@f1+2,f,c
 10543                           
 10544                           ; BSR set to: 0
 10545  001024  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 10546  001026  D7E7               	goto	l1736
 10547                           
 10548                           ; BSR set to: 0
 10549                           
 10550                           ; BSR set to: 0
 10551  001028  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 10552  00102C  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10553  001030  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10554  001034  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 10555  001038  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 10556  00103C  EC48  F00B         	call	___ftpack	;wreg free
 10557  001040  C018  F029         	movff	?___ftpack,?___ftdiv
 10558  001044  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 10559  001048  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 10560  00104C  0012               	return	
 10561  00104E                     __end_of___ftdiv:
 10562                           	opt stack 0
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           postdec1	equ	0xFE5
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function ___awtoft *****************
 10583 ;; Defined at:
 10584 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  c               2   31[COMRAM] int 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;  sign            1   34[COMRAM] unsigned char 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  3   31[COMRAM] float 
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10598 ;;      Params:         3       0       0       0       0       0       0
 10599 ;;      Locals:         1       0       0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0
 10601 ;;      Totals:         4       0       0       0       0       0       0
 10602 ;;Total ram usage:        4 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    4
 10605 ;; This function calls:
 10606 ;;		___ftpack
 10607 ;; This function is called by:
 10608 ;;		_exp
 10609 ;;		_log
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text60
 10614  002060                     __ptext60:
 10615                           	opt stack 0
 10616  002060                     ___awtoft:
 10617                           	opt stack 23
 10618                           
 10619                           ;incstack = 0
 10620  002060  0E00               	movlw	0
 10621  002062  6E23               	movwf	___awtoft@sign,c
 10622  002064  AE21               	btfss	___awtoft@c+1,7,c
 10623  002066  D006               	goto	l1650
 10624  002068  6C20               	negf	___awtoft@c,c
 10625  00206A  1E21               	comf	___awtoft@c+1,f,c
 10626  00206C  B0D8               	btfsc	status,0,c
 10627  00206E  2A21               	incf	___awtoft@c+1,f,c
 10628  002070  0E01               	movlw	1
 10629  002072  6E23               	movwf	___awtoft@sign,c
 10630  002074                     l1650:
 10631  002074  C020  F018         	movff	___awtoft@c,___ftpack@arg
 10632  002078  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 10633  00207C  6A1A               	clrf	___ftpack@arg+2,c
 10634  00207E  0E8E               	movlw	142
 10635  002080  6E1B               	movwf	___ftpack@exp,c
 10636  002082  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 10637  002086  EC48  F00B         	call	___ftpack	;wreg free
 10638  00208A  C018  F020         	movff	?___ftpack,?___awtoft
 10639  00208E  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 10640  002092  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 10641  002096  0012               	return	
 10642  002098                     __end_of___awtoft:
 10643                           	opt stack 0
 10644                           tblptru	equ	0xFF8
 10645                           tblptrh	equ	0xFF7
 10646                           tblptrl	equ	0xFF6
 10647                           tablat	equ	0xFF5
 10648                           prodh	equ	0xFF4
 10649                           prodl	equ	0xFF3
 10650                           intcon	equ	0xFF2
 10651                           intcon2	equ	0xFF1
 10652                           postinc0	equ	0xFEE
 10653                           wreg	equ	0xFE8
 10654                           postdec1	equ	0xFE5
 10655                           fsr1l	equ	0xFE1
 10656                           indf2	equ	0xFDF
 10657                           postinc2	equ	0xFDE
 10658                           postdec2	equ	0xFDD
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function ___lltoft *****************
 10664 ;; Defined at:
 10665 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  c               4   31[COMRAM] unsigned long 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;  exp             1   39[COMRAM] unsigned char 
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  3   31[COMRAM] float 
 10672 ;; Registers used:
 10673 ;;		wreg, status,2, status,0, cstack
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10679 ;;      Params:         4       0       0       0       0       0       0
 10680 ;;      Locals:         1       0       0       0       0       0       0
 10681 ;;      Temps:          4       0       0       0       0       0       0
 10682 ;;      Totals:         9       0       0       0       0       0       0
 10683 ;;Total ram usage:        9 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    4
 10686 ;; This function calls:
 10687 ;;		___ftpack
 10688 ;; This function is called by:
 10689 ;;		_CheckFlashPrecentage
 10690 ;;		_pow
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           	psect	text61
 10695  001C48                     __ptext61:
 10696                           	opt stack 0
 10697  001C48                     ___lltoft:
 10698                           	opt stack 25
 10699                           
 10700                           ;incstack = 0
 10701  001C48  0E8E               	movlw	142
 10702  001C4A  6E28               	movwf	___lltoft@exp,c
 10703  001C4C  D006               	goto	l1826
 10704  001C4E  90D8               	bcf	status,0,c
 10705  001C50  3223               	rrcf	___lltoft@c+3,f,c
 10706  001C52  3222               	rrcf	___lltoft@c+2,f,c
 10707  001C54  3221               	rrcf	___lltoft@c+1,f,c
 10708  001C56  3220               	rrcf	___lltoft@c,f,c
 10709  001C58  2A28               	incf	___lltoft@exp,f,c
 10710  001C5A                     l1826:
 10711  001C5A  0E00               	movlw	0
 10712  001C5C  1420               	andwf	___lltoft@c,w,c
 10713  001C5E  6E24               	movwf	??___lltoft& (0+255),c
 10714  001C60  0E00               	movlw	0
 10715  001C62  1421               	andwf	___lltoft@c+1,w,c
 10716  001C64  6E25               	movwf	(??___lltoft+1)& (0+255),c
 10717  001C66  0E00               	movlw	0
 10718  001C68  1422               	andwf	___lltoft@c+2,w,c
 10719  001C6A  6E26               	movwf	(??___lltoft+2)& (0+255),c
 10720  001C6C  0EFF               	movlw	255
 10721  001C6E  1423               	andwf	___lltoft@c+3,w,c
 10722  001C70  6E27               	movwf	(??___lltoft+3)& (0+255),c
 10723  001C72  5024               	movf	??___lltoft,w,c
 10724  001C74  1025               	iorwf	??___lltoft+1,w,c
 10725  001C76  1026               	iorwf	??___lltoft+2,w,c
 10726  001C78  1027               	iorwf	??___lltoft+3,w,c
 10727  001C7A  A4D8               	btfss	status,2,c
 10728  001C7C  D7E8               	goto	l1827
 10729  001C7E  C020  F018         	movff	___lltoft@c,___ftpack@arg
 10730  001C82  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 10731  001C86  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 10732  001C8A  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 10733  001C8E  0E00               	movlw	0
 10734  001C90  6E1C               	movwf	___ftpack@sign,c
 10735  001C92  EC48  F00B         	call	___ftpack	;wreg free
 10736  001C96  C018  F020         	movff	?___ftpack,?___lltoft
 10737  001C9A  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 10738  001C9E  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 10739  001CA2  0012               	return	
 10740  001CA4                     __end_of___lltoft:
 10741                           	opt stack 0
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           postdec1	equ	0xFE5
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           fsr2h	equ	0xFDA
 10758                           fsr2l	equ	0xFD9
 10759                           status	equ	0xFD8
 10760                           
 10761 ;; *************** function ___lwtoft *****************
 10762 ;; Defined at:
 10763 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;  c               2   31[COMRAM] unsigned int 
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;		None
 10768 ;; Return value:  Size  Location     Type
 10769 ;;                  3   31[COMRAM] float 
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0, cstack
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10777 ;;      Params:         3       0       0       0       0       0       0
 10778 ;;      Locals:         0       0       0       0       0       0       0
 10779 ;;      Temps:          0       0       0       0       0       0       0
 10780 ;;      Totals:         3       0       0       0       0       0       0
 10781 ;;Total ram usage:        3 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    4
 10784 ;; This function calls:
 10785 ;;		___ftpack
 10786 ;; This function is called by:
 10787 ;;		_AdcConvert
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text62
 10792  00229A                     __ptext62:
 10793                           	opt stack 0
 10794  00229A                     ___lwtoft:
 10795                           	opt stack 25
 10796                           
 10797                           ;incstack = 0
 10798  00229A  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 10799  00229E  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 10800  0022A2  6A1A               	clrf	___ftpack@arg+2,c
 10801  0022A4  0E8E               	movlw	142
 10802  0022A6  6E1B               	movwf	___ftpack@exp,c
 10803  0022A8  0E00               	movlw	0
 10804  0022AA  6E1C               	movwf	___ftpack@sign,c
 10805  0022AC  EC48  F00B         	call	___ftpack	;wreg free
 10806  0022B0  C018  F020         	movff	?___ftpack,?___lwtoft
 10807  0022B4  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 10808  0022B8  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 10809  0022BC  0012               	return	
 10810  0022BE                     __end_of___lwtoft:
 10811                           	opt stack 0
 10812                           tblptru	equ	0xFF8
 10813                           tblptrh	equ	0xFF7
 10814                           tblptrl	equ	0xFF6
 10815                           tablat	equ	0xFF5
 10816                           prodh	equ	0xFF4
 10817                           prodl	equ	0xFF3
 10818                           intcon	equ	0xFF2
 10819                           intcon2	equ	0xFF1
 10820                           postinc0	equ	0xFEE
 10821                           wreg	equ	0xFE8
 10822                           postdec1	equ	0xFE5
 10823                           fsr1l	equ	0xFE1
 10824                           indf2	equ	0xFDF
 10825                           postinc2	equ	0xFDE
 10826                           postdec2	equ	0xFDD
 10827                           fsr2h	equ	0xFDA
 10828                           fsr2l	equ	0xFD9
 10829                           status	equ	0xFD8
 10830                           
 10831 ;; *************** function ___ftpack *****************
 10832 ;; Defined at:
 10833 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;  arg             3   23[COMRAM] unsigned um
 10836 ;;  exp             1   26[COMRAM] unsigned char 
 10837 ;;  sign            1   27[COMRAM] unsigned char 
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;		None
 10840 ;; Return value:  Size  Location     Type
 10841 ;;                  3   23[COMRAM] float 
 10842 ;; Registers used:
 10843 ;;		wreg, status,2, status,0
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10849 ;;      Params:         5       0       0       0       0       0       0
 10850 ;;      Locals:         0       0       0       0       0       0       0
 10851 ;;      Temps:          3       0       0       0       0       0       0
 10852 ;;      Totals:         8       0       0       0       0       0       0
 10853 ;;Total ram usage:        8 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    3
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		___altoft
 10860 ;;		___awtoft
 10861 ;;		___ftadd
 10862 ;;		___ftdiv
 10863 ;;		___ftmul
 10864 ;;		___lltoft
 10865 ;;		___lwtoft
 10866 ;; This function uses a non-reentrant model
 10867 ;;
 10868                           
 10869                           	psect	text63
 10870  001690                     __ptext63:
 10871                           	opt stack 0
 10872  001690                     ___ftpack:
 10873                           	opt stack 25
 10874                           
 10875                           ;incstack = 0
 10876  001690  501B               	movf	___ftpack@exp,w,c
 10877  001692  B4D8               	btfsc	status,2,c
 10878  001694  D005               	goto	u5000
 10879  001696  5018               	movf	___ftpack@arg,w,c
 10880  001698  1019               	iorwf	___ftpack@arg+1,w,c
 10881  00169A  101A               	iorwf	___ftpack@arg+2,w,c
 10882  00169C  A4D8               	btfss	status,2,c
 10883  00169E  D00C               	goto	l1669
 10884  0016A0                     u5000:
 10885  0016A0  0E00               	movlw	0
 10886  0016A2  6E18               	movwf	?___ftpack,c
 10887  0016A4  0E00               	movlw	0
 10888  0016A6  6E19               	movwf	?___ftpack+1,c
 10889  0016A8  0E00               	movlw	0
 10890  0016AA  6E1A               	movwf	?___ftpack+2,c
 10891  0016AC  0012               	return	
 10892  0016AE  2A1B               	incf	___ftpack@exp,f,c
 10893  0016B0  90D8               	bcf	status,0,c
 10894  0016B2  321A               	rrcf	___ftpack@arg+2,f,c
 10895  0016B4  3219               	rrcf	___ftpack@arg+1,f,c
 10896  0016B6  3218               	rrcf	___ftpack@arg,f,c
 10897  0016B8                     l1669:
 10898  0016B8  0E00               	movlw	0
 10899  0016BA  1418               	andwf	___ftpack@arg,w,c
 10900  0016BC  6E1D               	movwf	??___ftpack& (0+255),c
 10901  0016BE  0E00               	movlw	0
 10902  0016C0  1419               	andwf	___ftpack@arg+1,w,c
 10903  0016C2  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 10904  0016C4  0EFE               	movlw	254
 10905  0016C6  141A               	andwf	___ftpack@arg+2,w,c
 10906  0016C8  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 10907  0016CA  501D               	movf	??___ftpack,w,c
 10908  0016CC  101E               	iorwf	??___ftpack+1,w,c
 10909  0016CE  101F               	iorwf	??___ftpack+2,w,c
 10910  0016D0  B4D8               	btfsc	status,2,c
 10911  0016D2  D00C               	goto	l1672
 10912  0016D4  D7EC               	goto	l1670
 10913  0016D6  2A1B               	incf	___ftpack@exp,f,c
 10914  0016D8  0E01               	movlw	1
 10915  0016DA  2618               	addwf	___ftpack@arg,f,c
 10916  0016DC  0E00               	movlw	0
 10917  0016DE  2219               	addwfc	___ftpack@arg+1,f,c
 10918  0016E0  0E00               	movlw	0
 10919  0016E2  221A               	addwfc	___ftpack@arg+2,f,c
 10920  0016E4  90D8               	bcf	status,0,c
 10921  0016E6  321A               	rrcf	___ftpack@arg+2,f,c
 10922  0016E8  3219               	rrcf	___ftpack@arg+1,f,c
 10923  0016EA  3218               	rrcf	___ftpack@arg,f,c
 10924  0016EC                     l1672:
 10925  0016EC  0E00               	movlw	0
 10926  0016EE  1418               	andwf	___ftpack@arg,w,c
 10927  0016F0  6E1D               	movwf	??___ftpack& (0+255),c
 10928  0016F2  0E00               	movlw	0
 10929  0016F4  1419               	andwf	___ftpack@arg+1,w,c
 10930  0016F6  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 10931  0016F8  0EFF               	movlw	255
 10932  0016FA  141A               	andwf	___ftpack@arg+2,w,c
 10933  0016FC  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 10934  0016FE  501D               	movf	??___ftpack,w,c
 10935  001700  101E               	iorwf	??___ftpack+1,w,c
 10936  001702  101F               	iorwf	??___ftpack+2,w,c
 10937  001704  B4D8               	btfsc	status,2,c
 10938  001706  D006               	goto	l1675
 10939  001708  D7E6               	goto	l1673
 10940  00170A  061B               	decf	___ftpack@exp,f,c
 10941  00170C  90D8               	bcf	status,0,c
 10942  00170E  3618               	rlcf	___ftpack@arg,f,c
 10943  001710  3619               	rlcf	___ftpack@arg+1,f,c
 10944  001712  361A               	rlcf	___ftpack@arg+2,f,c
 10945  001714                     l1675:
 10946  001714  BE19               	btfsc	___ftpack@arg+1,7,c
 10947  001716  D003               	goto	u5040
 10948  001718  0E02               	movlw	2
 10949  00171A  601B               	cpfslt	___ftpack@exp,c
 10950  00171C  D7F6               	goto	l1676
 10951  00171E                     u5040:
 10952  00171E  A01B               	btfss	___ftpack@exp,0,c
 10953  001720  9E19               	bcf	___ftpack@arg+1,7,c
 10954  001722  90D8               	bcf	status,0,c
 10955  001724  321B               	rrcf	___ftpack@exp,f,c
 10956  001726  501B               	movf	___ftpack@exp,w,c
 10957  001728  121A               	iorwf	___ftpack@arg+2,f,c
 10958  00172A  501C               	movf	___ftpack@sign,w,c
 10959  00172C  A4D8               	btfss	status,2,c
 10960  00172E  8E1A               	bsf	___ftpack@arg+2,7,c
 10961  001730  C018  F018         	movff	___ftpack@arg,?___ftpack
 10962  001734  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 10963  001738  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 10964  00173C  0012               	return	
 10965  00173E                     __end_of___ftpack:
 10966                           	opt stack 0
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           intcon	equ	0xFF2
 10974                           intcon2	equ	0xFF1
 10975                           postinc0	equ	0xFEE
 10976                           wreg	equ	0xFE8
 10977                           postdec1	equ	0xFE5
 10978                           fsr1l	equ	0xFE1
 10979                           indf2	equ	0xFDF
 10980                           postinc2	equ	0xFDE
 10981                           postdec2	equ	0xFDD
 10982                           fsr2h	equ	0xFDA
 10983                           fsr2l	equ	0xFD9
 10984                           status	equ	0xFD8
 10985                           
 10986 ;; *************** function _FlashSampleWrite *****************
 10987 ;; Defined at:
 10988 ;;		line 29 in file "FlashApp.c"
 10989 ;; Parameters:    Size  Location     Type
 10990 ;;  sampleData      2   44[COMRAM] unsigned int 
 10991 ;;  channelNum      1   46[COMRAM] unsigned char 
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11003 ;;      Params:         3       0       0       0       0       0       0
 11004 ;;      Locals:         0       2       0       0       0       0       0
 11005 ;;      Temps:          0       2       0       0       0       0       0
 11006 ;;      Totals:         3       4       0       0       0       0       0
 11007 ;;Total ram usage:        7 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:    5
 11010 ;; This function calls:
 11011 ;;		_FLASH_IsWriteDone
 11012 ;;		_FLASH_WriteBlock
 11013 ;; This function is called by:
 11014 ;;		_AdcConvert
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           	psect	text64
 11019  000C7E                     __ptext64:
 11020                           	opt stack 0
 11021  000C7E                     _FlashSampleWrite:
 11022                           	opt stack 24
 11023                           
 11024                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 11025                           
 11026                           ;incstack = 0
 11027  000C7E  502F               	movf	FlashSampleWrite@channelNum,w,c
 11028  000C80  0100               	movlb	0	; () banked
 11029  000C82  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 11030  000C84  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 11031  000C86  0E0C               	movlw	12
 11032  000C88                     u5935:
 11033  000C88  90D8               	bcf	status,0,c
 11034  000C8A  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 11035  000C8C  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 11036  000C8E  2EE8               	decfsz	wreg,f,c
 11037  000C90  D7FB               	goto	u5935
 11038  000C92  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 11039  000C96  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 11040                           
 11041                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 11042  000C9A  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 11043  000C9C  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 11044  000C9E  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 11045  000CA0  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 11049  000CA2  90D8               	bcf	status,0,c
 11050  000CA4  35CD               	rlcf	_sampleCount& (0+255),w,b
 11051  000CA6  6ED9               	movwf	fsr2l,c
 11052  000CA8  35CE               	rlcf	(_sampleCount+1)& (0+255),w,b
 11053  000CAA  6EDA               	movwf	fsr2h,c
 11054  000CAC  0E6E               	movlw	low _sampleArray
 11055  000CAE  26D9               	addwf	fsr2l,f,c
 11056  000CB0  0E01               	movlw	high _sampleArray
 11057  000CB2  22DA               	addwfc	fsr2h,f,c
 11058  000CB4  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 11059  000CB8  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;FlashApp.c: 35: sampleCount ++;
 11063  000CBC  4BCD               	infsnz	_sampleCount& (0+255),f,b
 11064  000CBE  2BCE               	incf	(_sampleCount+1)& (0+255),f,b
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 11068  000CC0  C0CD  F060         	movff	_sampleCount,??_FlashSampleWrite
 11069  000CC4  C0CE  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 11070  000CC8  90D8               	bcf	status,0,c
 11071  000CCA  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 11072  000CCC  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 11073  000CCE  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 11074  000CD0  E104               	bnz	u5940
 11075  000CD2  0E40               	movlw	64
 11076  000CD4  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 11077  000CD6  A0D8               	btfss	status,0,c
 11078  000CD8  0012               	return	
 11079  000CDA                     u5940:
 11080                           
 11081                           ; BSR set to: 0
 11082  000CDA  ECE6  F011         	call	_FLASH_IsWriteDone	;wreg free
 11083  000CDE  0900               	iorlw	0
 11084  000CE0  B4D8               	btfsc	status,2,c
 11085  000CE2  0012               	return	
 11086                           
 11087                           ;FlashApp.c: 38: {
 11088                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 11089  000CE4  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 11090  000CE8  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 11091  000CEC  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 11092  000CF0  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 11093  000CF4  0E6E               	movlw	low _sampleArray
 11094  000CF6  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 11095  000CF8  0E01               	movlw	high _sampleArray
 11096  000CFA  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 11097  000CFC  EC37  F00A         	call	_FLASH_WriteBlock	;wreg free
 11098                           
 11099                           ;FlashApp.c: 40: writeAddress += (64);
 11100  000D00  0E40               	movlw	64
 11101  000D02  2642               	addwf	_writeAddress,f,c
 11102  000D04  0E00               	movlw	0
 11103  000D06  2243               	addwfc	_writeAddress+1,f,c
 11104  000D08  2244               	addwfc	_writeAddress+2,f,c
 11105  000D0A  2245               	addwfc	_writeAddress+3,f,c
 11106                           
 11107                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 11108  000D0C  5045               	movf	_writeAddress+3,w,c
 11109  000D0E  1044               	iorwf	_writeAddress+2,w,c
 11110  000D10  E106               	bnz	u5960
 11111  000D12  0EF0               	movlw	240
 11112  000D14  5C42               	subwf	_writeAddress,w,c
 11113  000D16  0E7F               	movlw	127
 11114  000D18  5843               	subwfb	_writeAddress+1,w,c
 11115  000D1A  A0D8               	btfss	status,0,c
 11116  000D1C  D018               	goto	l263
 11117  000D1E                     u5960:
 11118                           
 11119                           ;FlashApp.c: 42: {
 11120                           ;FlashApp.c: 43: writeAddress = 0x4000;
 11121  000D1E  0E00               	movlw	0
 11122  000D20  6E42               	movwf	_writeAddress,c
 11123  000D22  0E40               	movlw	64
 11124  000D24  6E43               	movwf	_writeAddress+1,c
 11125  000D26  0E00               	movlw	0
 11126  000D28  6E44               	movwf	_writeAddress+2,c
 11127  000D2A  0E00               	movlw	0
 11128  000D2C  6E45               	movwf	_writeAddress+3,c
 11129                           
 11130                           ;FlashApp.c: 44: isReWriteDone = 1;
 11131  000D2E  0E01               	movlw	1
 11132  000D30  0100               	movlb	0	; () banked
 11133  000D32  6FD1               	movwf	_isReWriteDone& (0+255),b
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 11137  000D34  0E40               	movlw	64
 11138  000D36  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 11139  000D38  11F7               	iorwf	_readAddress& (0+255),w,b
 11140  000D3A  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 11141  000D3C  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 11142  000D3E  A4D8               	btfss	status,2,c
 11143  000D40  D006               	goto	l263
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;FlashApp.c: 46: {
 11147                           ;FlashApp.c: 47: readAddress += (64);
 11148  000D42  0E40               	movlw	64
 11149  000D44  27F7               	addwf	_readAddress& (0+255),f,b
 11150  000D46  0E00               	movlw	0
 11151  000D48  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 11152  000D4A  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 11153  000D4C  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 11154  000D4E                     l263:
 11155                           
 11156                           ;FlashApp.c: 48: }
 11157                           ;FlashApp.c: 49: }
 11158                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 11159                           
 11160                           ; BSR set to: 0
 11161  000D4E  0430               	decf	_numOfValidateSamples,w,c
 11162  000D50  0EFF               	movlw	255
 11163  000D52  5831               	subwfb	_numOfValidateSamples+1,w,c
 11164  000D54  0EFF               	movlw	255
 11165  000D56  5832               	subwfb	_numOfValidateSamples+2,w,c
 11166  000D58  0EFF               	movlw	255
 11167  000D5A  5833               	subwfb	_numOfValidateSamples+3,w,c
 11168  000D5C  B0D8               	btfsc	status,0,c
 11169  000D5E  D006               	goto	l264
 11170                           
 11171                           ;FlashApp.c: 52: {
 11172                           ;FlashApp.c: 53: numOfValidateSamples++;
 11173  000D60  0E01               	movlw	1
 11174  000D62  2630               	addwf	_numOfValidateSamples,f,c
 11175  000D64  0E00               	movlw	0
 11176  000D66  2231               	addwfc	_numOfValidateSamples+1,f,c
 11177  000D68  2232               	addwfc	_numOfValidateSamples+2,f,c
 11178  000D6A  2233               	addwfc	_numOfValidateSamples+3,f,c
 11179  000D6C                     l264:
 11180                           
 11181                           ;FlashApp.c: 54: }
 11182                           ;FlashApp.c: 55: sampleCount = 0;
 11183  000D6C  0E00               	movlw	0
 11184  000D6E  0100               	movlb	0	; () banked
 11185  000D70  6FCE               	movwf	(_sampleCount+1)& (0+255),b
 11186  000D72  0E00               	movlw	0
 11187  000D74  6FCD               	movwf	_sampleCount& (0+255),b
 11188  000D76  0012               	return	
 11189  000D78                     __end_of_FlashSampleWrite:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           intcon2	equ	0xFF1
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           postdec1	equ	0xFE5
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           postdec2	equ	0xFDD
 11206                           fsr2h	equ	0xFDA
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function _FLASH_WriteBlock *****************
 11211 ;; Defined at:
 11212 ;;		line 93 in file "mcc_generated_files/memory.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  writeAddr       4   28[COMRAM] unsigned long 
 11215 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 11216 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 11219 ;;  i               1   43[COMRAM] unsigned char 
 11220 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 11221 ;; Return value:  Size  Location     Type
 11222 ;;                  1    wreg      char 
 11223 ;; Registers used:
 11224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11225 ;; Tracked objects:
 11226 ;;		On entry : 0/0
 11227 ;;		On exit  : 0/0
 11228 ;;		Unchanged: 0/0
 11229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11230 ;;      Params:         6       0       0       0       0       0       0
 11231 ;;      Locals:         6       0       0       0       0       0       0
 11232 ;;      Temps:          4       0       0       0       0       0       0
 11233 ;;      Totals:        16       0       0       0       0       0       0
 11234 ;;Total ram usage:       16 bytes
 11235 ;; Hardware stack levels used:    1
 11236 ;; Hardware stack levels required when called:    4
 11237 ;; This function calls:
 11238 ;;		_FLASH_EraseBlock
 11239 ;; This function is called by:
 11240 ;;		_FlashSampleWrite
 11241 ;;		_FlashTest
 11242 ;;		_FLASH_WriteByte
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text65
 11247  00146E                     __ptext65:
 11248                           	opt stack 0
 11249  00146E                     _FLASH_WriteBlock:
 11250                           	opt stack 24
 11251                           
 11252                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 11253                           
 11254                           ;incstack = 0
 11255  00146E  0EC0               	movlw	192
 11256  001470  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 11257  001472  0E7F               	movlw	127
 11258  001474  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 11259  001476  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 11260  00147A  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 11261  00147E  5023               	movf	??_FLASH_WriteBlock,w,c
 11262  001480  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 11263  001482  5024               	movf	??_FLASH_WriteBlock+1,w,c
 11264  001484  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 11265  001486  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 11266  00148A  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 11267  00148E  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 11268  001490  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 11269                           
 11270                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 11271  001492  0E00               	movlw	0
 11272  001494  BEF2               	btfsc	intcon,7,c	;volatile
 11273  001496  0E01               	movlw	1
 11274  001498  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 11275                           
 11276                           ;memory.c: 97: uint8_t i;
 11277                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 11278  00149A  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 11279  00149C  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 11280  00149E  E144               	bnz	l928
 11281  0014A0  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 11282  0014A2  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 11283  0014A4  E141               	bnz	l928
 11284  0014A6  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 11285  0014A8  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 11286  0014AA  E13E               	bnz	l928
 11287  0014AC  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 11288  0014AE  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 11289  0014B0  A4D8               	btfss	status,2,c
 11290  0014B2  0012               	return	
 11291                           
 11292                           ;memory.c: 103: }
 11293                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 11294                           
 11295                           ;memory.c: 101: {
 11296                           ;memory.c: 102: return -1;
 11297                           ;	Return value of _FLASH_WriteBlock is never used
 11298  0014B4  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 11299  0014B8  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 11300  0014BC  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 11301  0014C0  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 11302  0014C4  ECB7  F010         	call	_FLASH_EraseBlock	;wreg free
 11303                           
 11304                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 11305  0014C8  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 11306                           
 11307                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 11308  0014CC  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 11309                           
 11310                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 11311  0014D0  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 11312                           
 11313                           ;memory.c: 114: for (i=0; i<(64); i++)
 11314  0014D4  0E00               	movlw	0
 11315  0014D6  6E2C               	movwf	FLASH_WriteBlock@i,c
 11316  0014D8                     l6561:
 11317  0014D8  0E3F               	movlw	63
 11318  0014DA  642C               	cpfsgt	FLASH_WriteBlock@i,c
 11319  0014DC  D001               	goto	l929
 11320  0014DE  D013               	goto	u5730
 11321  0014E0                     l929:
 11322                           
 11323                           ;memory.c: 115: {
 11324                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 11325  0014E0  502C               	movf	FLASH_WriteBlock@i,w,c
 11326  0014E2  0D01               	mullw	1
 11327  0014E4  50F3               	movf	prodl,w,c
 11328  0014E6  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 11329  0014E8  6ED9               	movwf	fsr2l,c
 11330  0014EA  50F4               	movf	prodh,w,c
 11331  0014EC  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 11332  0014EE  6EDA               	movwf	fsr2h,c
 11333  0014F0  50DF               	movf	indf2,w,c
 11334  0014F2  6EF5               	movwf	tablat,c	;volatile
 11335                           
 11336                           ;memory.c: 118: if (i == ((64)-1))
 11337  0014F4  0E3F               	movlw	63
 11338  0014F6  182C               	xorwf	FLASH_WriteBlock@i,w,c
 11339  0014F8  A4D8               	btfss	status,2,c
 11340  0014FA  D002               	goto	l931
 11341  0014FC  000C               	tblwt		*	;# 
 11342                           
 11343                           ;memory.c: 121: }
 11344  0014FE  D001               	goto	l932
 11345  001500                     l931:
 11346  001500  000D               	tblwt		*+	;# 
 11347  001502                     l932:
 11348  001502  2A2C               	incf	FLASH_WriteBlock@i,f,c
 11349  001504  D7E9               	goto	l6561
 11350  001506                     u5730:
 11351                           
 11352                           ;memory.c: 125: }
 11353                           ;memory.c: 126: }
 11354                           ;memory.c: 128: PIR2bits.EEIF = 1;
 11355  001506  88A1               	bsf	4001,4,c	;volatile
 11356                           
 11357                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 11358  001508  8EA6               	bsf	4006,7,c	;volsfr
 11359                           
 11360                           ;memory.c: 130: EECON1bits.CFGS = 0;
 11361  00150A  9CA6               	bcf	4006,6,c	;volsfr
 11362                           
 11363                           ;memory.c: 131: EECON1bits.WREN = 1;
 11364  00150C  84A6               	bsf	4006,2,c	;volsfr
 11365                           
 11366                           ;memory.c: 132: INTCONbits.GIE = 0;
 11367  00150E  9EF2               	bcf	intcon,7,c	;volatile
 11368                           
 11369                           ;memory.c: 133: EECON2 = 0x55;
 11370  001510  0E55               	movlw	85
 11371  001512  6EA7               	movwf	4007,c	;volsfr
 11372                           
 11373                           ;memory.c: 134: EECON2 = 0xAA;
 11374  001514  0EAA               	movlw	170
 11375  001516  6EA7               	movwf	4007,c	;volsfr
 11376                           
 11377                           ;memory.c: 135: EECON1bits.WR = 1;
 11378  001518  82A6               	bsf	4006,1,c	;volsfr
 11379                           
 11380                           ;memory.c: 137: EECON1bits.WREN = 0;
 11381  00151A  94A6               	bcf	4006,2,c	;volsfr
 11382                           
 11383                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 11384  00151C  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 11385  00151E  D002               	bra	u5745
 11386  001520  9EF2               	bcf	intcon,7,c	;volatile
 11387  001522  D001               	bra	u5746
 11388  001524                     u5745:
 11389  001524  8EF2               	bsf	intcon,7,c	;volatile
 11390  001526                     u5746:
 11391  001526  0012               	return	
 11392  001528                     l928:
 11393  001528  0012               	return		;funcret
 11394  00152A                     __end_of_FLASH_WriteBlock:
 11395                           	opt stack 0
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           intcon2	equ	0xFF1
 11404                           postinc0	equ	0xFEE
 11405                           wreg	equ	0xFE8
 11406                           postdec1	equ	0xFE5
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           fsr2h	equ	0xFDA
 11412                           fsr2l	equ	0xFD9
 11413                           status	equ	0xFD8
 11414                           
 11415 ;; *************** function _FLASH_EraseBlock *****************
 11416 ;; Defined at:
 11417 ;;		line 144 in file "mcc_generated_files/memory.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;  baseAddr        4   23[COMRAM] unsigned long 
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  1    wreg      void 
 11424 ;; Registers used:
 11425 ;;		wreg, status,2
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11431 ;;      Params:         4       0       0       0       0       0       0
 11432 ;;      Locals:         1       0       0       0       0       0       0
 11433 ;;      Temps:          0       0       0       0       0       0       0
 11434 ;;      Totals:         5       0       0       0       0       0       0
 11435 ;;Total ram usage:        5 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; Hardware stack levels required when called:    3
 11438 ;; This function calls:
 11439 ;;		Nothing
 11440 ;; This function is called by:
 11441 ;;		_FLASH_WriteBlock
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text66
 11446  00216E                     __ptext66:
 11447                           	opt stack 0
 11448  00216E                     _FLASH_EraseBlock:
 11449                           	opt stack 24
 11450                           
 11451                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 11452                           
 11453                           ;incstack = 0
 11454  00216E  0E00               	movlw	0
 11455  002170  BEF2               	btfsc	intcon,7,c	;volatile
 11456  002172  0E01               	movlw	1
 11457  002174  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 11458                           
 11459                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 11460  002176  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 11461                           
 11462                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 11463  00217A  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 11464                           
 11465                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 11466  00217E  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 11467                           
 11468                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 11469  002182  8EA6               	bsf	4006,7,c	;volsfr
 11470                           
 11471                           ;memory.c: 153: EECON1bits.CFGS = 0;
 11472  002184  9CA6               	bcf	4006,6,c	;volsfr
 11473                           
 11474                           ;memory.c: 154: EECON1bits.WREN = 1;
 11475  002186  84A6               	bsf	4006,2,c	;volsfr
 11476                           
 11477                           ;memory.c: 155: EECON1bits.FREE = 1;
 11478  002188  88A6               	bsf	4006,4,c	;volsfr
 11479                           
 11480                           ;memory.c: 156: INTCONbits.GIE = 0;
 11481  00218A  9EF2               	bcf	intcon,7,c	;volatile
 11482                           
 11483                           ;memory.c: 157: EECON2 = 0x55;
 11484  00218C  0E55               	movlw	85
 11485  00218E  6EA7               	movwf	4007,c	;volsfr
 11486                           
 11487                           ;memory.c: 158: EECON2 = 0xAA;
 11488  002190  0EAA               	movlw	170
 11489  002192  6EA7               	movwf	4007,c	;volsfr
 11490                           
 11491                           ;memory.c: 159: EECON1bits.WR = 1;
 11492  002194  82A6               	bsf	4006,1,c	;volsfr
 11493                           
 11494                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 11495  002196  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 11496  002198  D002               	bra	u5495
 11497  00219A  9EF2               	bcf	intcon,7,c	;volatile
 11498  00219C  D001               	bra	u5496
 11499  00219E                     u5495:
 11500  00219E  8EF2               	bsf	intcon,7,c	;volatile
 11501  0021A0                     u5496:
 11502  0021A0  0012               	return		;funcret
 11503  0021A2                     __end_of_FLASH_EraseBlock:
 11504                           	opt stack 0
 11505                           tblptru	equ	0xFF8
 11506                           tblptrh	equ	0xFF7
 11507                           tblptrl	equ	0xFF6
 11508                           tablat	equ	0xFF5
 11509                           prodh	equ	0xFF4
 11510                           prodl	equ	0xFF3
 11511                           intcon	equ	0xFF2
 11512                           intcon2	equ	0xFF1
 11513                           postinc0	equ	0xFEE
 11514                           wreg	equ	0xFE8
 11515                           postdec1	equ	0xFE5
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function _FLASH_IsWriteDone *****************
 11525 ;; Defined at:
 11526 ;;		line 189 in file "mcc_generated_files/memory.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;		None
 11531 ;; Return value:  Size  Location     Type
 11532 ;;                  1    wreg      unsigned char 
 11533 ;; Registers used:
 11534 ;;		wreg
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11540 ;;      Params:         0       0       0       0       0       0       0
 11541 ;;      Locals:         0       0       0       0       0       0       0
 11542 ;;      Temps:          0       0       0       0       0       0       0
 11543 ;;      Totals:         0       0       0       0       0       0       0
 11544 ;;Total ram usage:        0 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; Hardware stack levels required when called:    3
 11547 ;; This function calls:
 11548 ;;		Nothing
 11549 ;; This function is called by:
 11550 ;;		_FlashSampleWrite
 11551 ;;		_FlashReadUart
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text67
 11556  0023CC                     __ptext67:
 11557                           	opt stack 0
 11558  0023CC                     _FLASH_IsWriteDone:
 11559                           	opt stack 25
 11560                           
 11561                           ;memory.c: 191: return (EECON1bits.WR == 0);
 11562                           
 11563                           ;incstack = 0
 11564  0023CC  A2A6               	btfss	4006,1,c	;volsfr
 11565  0023CE  D001               	goto	u5681
 11566  0023D0  D002               	goto	u5680
 11567  0023D2                     u5681:
 11568  0023D2  0E01               	movlw	1
 11569  0023D4  0012               	return	
 11570  0023D6                     u5680:
 11571  0023D6  0E00               	movlw	0
 11572  0023D8  0012               	return	
 11573  0023DA                     __end_of_FLASH_IsWriteDone:
 11574                           	opt stack 0
 11575                           tblptru	equ	0xFF8
 11576                           tblptrh	equ	0xFF7
 11577                           tblptrl	equ	0xFF6
 11578                           tablat	equ	0xFF5
 11579                           prodh	equ	0xFF4
 11580                           prodl	equ	0xFF3
 11581                           intcon	equ	0xFF2
 11582                           intcon2	equ	0xFF1
 11583                           postinc0	equ	0xFEE
 11584                           wreg	equ	0xFE8
 11585                           postdec1	equ	0xFE5
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594 ;; *************** function _ADC_GetConversion *****************
 11595 ;; Defined at:
 11596 ;;		line 106 in file "mcc_generated_files/adc.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;  channel         1    wreg     enum E6975
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;  channel         1   27[COMRAM] enum E6975
 11601 ;; Return value:  Size  Location     Type
 11602 ;;                  2   23[COMRAM] unsigned int 
 11603 ;; Registers used:
 11604 ;;		wreg, status,2, status,0
 11605 ;; Tracked objects:
 11606 ;;		On entry : 0/0
 11607 ;;		On exit  : 0/0
 11608 ;;		Unchanged: 0/0
 11609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11610 ;;      Params:         2       0       0       0       0       0       0
 11611 ;;      Locals:         1       0       0       0       0       0       0
 11612 ;;      Temps:          2       0       0       0       0       0       0
 11613 ;;      Totals:         5       0       0       0       0       0       0
 11614 ;;Total ram usage:        5 bytes
 11615 ;; Hardware stack levels used:    1
 11616 ;; Hardware stack levels required when called:    3
 11617 ;; This function calls:
 11618 ;;		Nothing
 11619 ;; This function is called by:
 11620 ;;		_AdcConvert
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text68
 11625  0021A2                     __ptext68:
 11626                           	opt stack 0
 11627  0021A2                     _ADC_GetConversion:
 11628                           	opt stack 26
 11629                           
 11630                           ;incstack = 0
 11631                           ;ADC_GetConversion@channel stored from wreg
 11632  0021A2  6E1C               	movwf	ADC_GetConversion@channel,c
 11633                           
 11634                           ;adc.c: 109: ADCON0bits.CHS = channel;
 11635  0021A4  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 11636  0021A8  461A               	rlncf	??_ADC_GetConversion,f,c
 11637  0021AA  461A               	rlncf	??_ADC_GetConversion,f,c
 11638  0021AC  50C2               	movf	4034,w,c	;volatile
 11639  0021AE  181A               	xorwf	??_ADC_GetConversion,w,c
 11640  0021B0  0B83               	andlw	-125
 11641  0021B2  181A               	xorwf	??_ADC_GetConversion,w,c
 11642  0021B4  6EC2               	movwf	4034,c	;volatile
 11643                           
 11644                           ;adc.c: 112: ADCON0bits.ADON = 1;
 11645  0021B6  80C2               	bsf	4034,0,c	;volatile
 11646                           
 11647                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 11648  0021B8  82C2               	bsf	4034,1,c	;volatile
 11649  0021BA                     
 11650                           ;adc.c: 119: {
 11651  0021BA  B2C2               	btfsc	4034,1,c	;volatile
 11652  0021BC  D7FE               	goto	l1041
 11653                           
 11654                           ;adc.c: 120: }
 11655                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 11656  0021BE  50C4               	movf	4036,w,c	;volatile
 11657  0021C0  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 11658  0021C2  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 11659  0021C4  50C3               	movf	4035,w,c	;volatile
 11660  0021C6  241A               	addwf	??_ADC_GetConversion,w,c
 11661  0021C8  6E18               	movwf	?_ADC_GetConversion,c
 11662  0021CA  0E00               	movlw	0
 11663  0021CC  201B               	addwfc	??_ADC_GetConversion+1,w,c
 11664  0021CE  6E19               	movwf	?_ADC_GetConversion+1,c
 11665  0021D0  0012               	return	
 11666  0021D2                     __end_of_ADC_GetConversion:
 11667                           	opt stack 0
 11668                           tblptru	equ	0xFF8
 11669                           tblptrh	equ	0xFF7
 11670                           tblptrl	equ	0xFF6
 11671                           tablat	equ	0xFF5
 11672                           prodh	equ	0xFF4
 11673                           prodl	equ	0xFF3
 11674                           intcon	equ	0xFF2
 11675                           intcon2	equ	0xFF1
 11676                           postinc0	equ	0xFEE
 11677                           wreg	equ	0xFE8
 11678                           postdec1	equ	0xFE5
 11679                           fsr1l	equ	0xFE1
 11680                           indf2	equ	0xFDF
 11681                           postinc2	equ	0xFDE
 11682                           postdec2	equ	0xFDD
 11683                           fsr2h	equ	0xFDA
 11684                           fsr2l	equ	0xFD9
 11685                           status	equ	0xFD8
 11686                           
 11687 ;; *************** function _INTERRUPT_InterruptManager *****************
 11688 ;; Defined at:
 11689 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 11690 ;; Parameters:    Size  Location     Type
 11691 ;;		None
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;		None
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      void 
 11696 ;; Registers used:
 11697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11698 ;; Tracked objects:
 11699 ;;		On entry : 0/0
 11700 ;;		On exit  : 0/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11703 ;;      Params:         0       0       0       0       0       0       0
 11704 ;;      Locals:         0       0       0       0       0       0       0
 11705 ;;      Temps:         18       0       0       0       0       0       0
 11706 ;;      Totals:        18       0       0       0       0       0       0
 11707 ;;Total ram usage:       18 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    2
 11710 ;; This function calls:
 11711 ;;		_EUSART1_Receive_ISR
 11712 ;;		_EUSART1_Transmit_ISR
 11713 ;;		_MEMORY_ISR
 11714 ;;		_PIN_MANAGER_IOC
 11715 ;;		_TMR0_ISR
 11716 ;; This function is called by:
 11717 ;;		Interrupt level 2
 11718 ;; This function uses a non-reentrant model
 11719 ;;
 11720                           
 11721                           	psect	intcode
 11722  000008                     __pintcode:
 11723                           	opt stack 0
 11724  000008                     _INTERRUPT_InterruptManager:
 11725                           	opt stack 22
 11726                           
 11727                           ;incstack = 0
 11728  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11729  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 11730  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11731  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11732  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11733  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11734  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11735  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11736  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11737  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11738  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11739  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 11740  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 11741  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 11742  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 11743  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 11744  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 11745  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 11746  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 11747                           
 11748                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 11749  000052  B6F2               	btfsc	intcon,3,c	;volatile
 11750  000054  A0F2               	btfss	intcon,0,c	;volatile
 11751  000056  D003               	goto	i2l766
 11752                           
 11753                           ;interrupt_manager.c: 61: {
 11754                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 11755  000058  ECFD  F011         	call	_PIN_MANAGER_IOC	;wreg free
 11756                           
 11757                           ;interrupt_manager.c: 63: }
 11758  00005C  D019               	goto	i2l775
 11759  00005E                     i2l766:
 11760                           
 11761                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 11762  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 11763  000060  A4F2               	btfss	intcon,2,c	;volatile
 11764  000062  D003               	goto	i2l768
 11765                           
 11766                           ;interrupt_manager.c: 65: {
 11767                           ;interrupt_manager.c: 66: TMR0_ISR();
 11768  000064  EC2F  F00C         	call	_TMR0_ISR	;wreg free
 11769                           
 11770                           ;interrupt_manager.c: 67: }
 11771  000068  D013               	goto	i2l775
 11772  00006A                     i2l768:
 11773                           
 11774                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 11775  00006A  ACF2               	btfss	intcon,6,c	;volatile
 11776  00006C  D011               	goto	i2l775
 11777                           
 11778                           ;interrupt_manager.c: 69: {
 11779                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 11780  00006E  B8A0               	btfsc	4000,4,c	;volatile
 11781  000070  A8A1               	btfss	4001,4,c	;volatile
 11782  000072  D003               	goto	i2l771
 11783                           
 11784                           ;interrupt_manager.c: 71: {
 11785                           ;interrupt_manager.c: 72: MEMORY_ISR();
 11786  000074  ECFF  F011         	call	_MEMORY_ISR	;wreg free
 11787                           
 11788                           ;interrupt_manager.c: 73: }
 11789  000078  D00B               	goto	i2l775
 11790  00007A                     i2l771:
 11791                           
 11792                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 11793  00007A  B89D               	btfsc	3997,4,c	;volatile
 11794  00007C  A89E               	btfss	3998,4,c	;volatile
 11795  00007E  D003               	goto	i2l773
 11796                           
 11797                           ;interrupt_manager.c: 75: {
 11798                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 11799  000080  EC4C  F010         	call	_EUSART1_Transmit_ISR	;wreg free
 11800                           
 11801                           ;interrupt_manager.c: 77: }
 11802  000084  D005               	goto	i2l775
 11803  000086                     i2l773:
 11804                           
 11805                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 11806  000086  BA9D               	btfsc	3997,5,c	;volatile
 11807  000088  AA9E               	btfss	3998,5,c	;volatile
 11808  00008A  D002               	goto	i2l775
 11809                           
 11810                           ;interrupt_manager.c: 79: {
 11811                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 11812  00008C  ECFF  F010         	call	_EUSART1_Receive_ISR	;wreg free
 11813  000090                     i2l775:
 11814                           
 11815                           ;interrupt_manager.c: 87: else
 11816                           ;interrupt_manager.c: 88: {
 11817                           
 11818                           ;interrupt_manager.c: 85: }
 11819                           ;interrupt_manager.c: 86: }
 11820                           
 11821                           ;interrupt_manager.c: 82: else
 11822                           ;interrupt_manager.c: 83: {
 11823  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 11824  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 11825  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 11826  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 11827  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 11828  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 11829  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 11830  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 11831  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11832  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11833  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11834  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11835  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11836  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11837  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11838  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11839  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11840  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11841  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11842  0000DA  0011               	retfie		f
 11843  0000DC                     __end_of_INTERRUPT_InterruptManager:
 11844                           	opt stack 0
 11845                           pclatu	equ	0xFFB
 11846                           pclath	equ	0xFFA
 11847                           tblptru	equ	0xFF8
 11848                           tblptrh	equ	0xFF7
 11849                           tblptrl	equ	0xFF6
 11850                           tablat	equ	0xFF5
 11851                           prodh	equ	0xFF4
 11852                           prodl	equ	0xFF3
 11853                           intcon	equ	0xFF2
 11854                           intcon2	equ	0xFF1
 11855                           postinc0	equ	0xFEE
 11856                           fsr0h	equ	0xFEA
 11857                           fsr0l	equ	0xFE9
 11858                           wreg	equ	0xFE8
 11859                           postdec1	equ	0xFE5
 11860                           fsr1h	equ	0xFE2
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           fsr2h	equ	0xFDA
 11866                           fsr2l	equ	0xFD9
 11867                           status	equ	0xFD8
 11868                           
 11869 ;; *************** function _TMR0_ISR *****************
 11870 ;; Defined at:
 11871 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11885 ;;      Params:         0       0       0       0       0       0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0
 11887 ;;      Temps:          0       0       0       0       0       0       0
 11888 ;;      Totals:         0       0       0       0       0       0       0
 11889 ;;Total ram usage:        0 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    1
 11892 ;; This function calls:
 11893 ;;		___lwmod
 11894 ;; This function is called by:
 11895 ;;		_INTERRUPT_InterruptManager
 11896 ;; This function uses a non-reentrant model
 11897 ;;
 11898                           
 11899                           	psect	text70
 11900  00185E                     __ptext70:
 11901                           	opt stack 0
 11902  00185E                     _TMR0_ISR:
 11903                           	opt stack 22
 11904                           
 11905                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 11906                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 11907                           
 11908                           ;incstack = 0
 11909  00185E  94F2               	bcf	intcon,2,c	;volatile
 11910                           
 11911                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 11912  001860  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 11913  001862  6ED7               	movwf	4055,c	;volatile
 11914                           
 11915                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 11916  001864  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 11917                           
 11918                           ;tmr0.c: 146: CountCallBack ++;
 11919  001868  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 11920  00186A  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 11921                           
 11922                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 11923  00186C  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 11924  001870  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 11925  001874  0E00               	movlw	0
 11926  001876  6E04               	movwf	___lwmod@divisor+1,c
 11927  001878  0E14               	movlw	20
 11928  00187A  6E03               	movwf	___lwmod@divisor,c
 11929  00187C  ECB5  F00F         	call	___lwmod	;wreg free
 11930  001880  5001               	movf	?___lwmod,w,c
 11931  001882  1002               	iorwf	?___lwmod+1,w,c
 11932  001884  A4D8               	btfss	status,2,c
 11933  001886  D002               	goto	i2l997
 11934                           
 11935                           ;tmr0.c: 148: {
 11936                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 11937  001888  0E01               	movlw	1
 11938  00188A  6E3D               	movwf	_TimerOneSecFlag,c	;volatile
 11939  00188C                     i2l997:
 11940                           
 11941                           ;tmr0.c: 150: }
 11942                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 11943  00188C  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 11944  001890  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 11945  001894  0E00               	movlw	0
 11946  001896  6E04               	movwf	___lwmod@divisor+1,c
 11947  001898  0E32               	movlw	50
 11948  00189A  6E03               	movwf	___lwmod@divisor,c
 11949  00189C  ECB5  F00F         	call	___lwmod	;wreg free
 11950  0018A0  5001               	movf	?___lwmod,w,c
 11951  0018A2  1002               	iorwf	?___lwmod+1,w,c
 11952  0018A4  A4D8               	btfss	status,2,c
 11953  0018A6  D002               	goto	i2l998
 11954                           
 11955                           ;tmr0.c: 153: {
 11956                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 11957  0018A8  0E01               	movlw	1
 11958  0018AA  6E3C               	movwf	_TimerSamplingFlag,c	;volatile
 11959  0018AC                     i2l998:
 11960                           
 11961                           ;tmr0.c: 155: }
 11962                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 11963  0018AC  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 11964  0018B0  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 11965  0018B4  0E01               	movlw	1
 11966  0018B6  6E04               	movwf	___lwmod@divisor+1,c
 11967  0018B8  0E2C               	movlw	44
 11968  0018BA  6E03               	movwf	___lwmod@divisor,c
 11969  0018BC  ECB5  F00F         	call	___lwmod	;wreg free
 11970  0018C0  5001               	movf	?___lwmod,w,c
 11971  0018C2  1002               	iorwf	?___lwmod+1,w,c
 11972  0018C4  A4D8               	btfss	status,2,c
 11973  0018C6  D002               	goto	i2l999
 11974                           
 11975                           ;tmr0.c: 157: {
 11976                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 11977  0018C8  0E01               	movlw	1
 11978  0018CA  6E3B               	movwf	_TimerKeepAliveFlag,c	;volatile
 11979  0018CC                     i2l999:
 11980                           
 11981                           ;tmr0.c: 159: }
 11982                           ;tmr0.c: 161: CountCallBack %= 300;
 11983  0018CC  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 11984  0018D0  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 11985  0018D4  0E01               	movlw	1
 11986  0018D6  6E04               	movwf	___lwmod@divisor+1,c
 11987  0018D8  0E2C               	movlw	44
 11988  0018DA  6E03               	movwf	___lwmod@divisor,c
 11989  0018DC  ECB5  F00F         	call	___lwmod	;wreg free
 11990  0018E0  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 11991  0018E4  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 11992  0018E8  0012               	return		;funcret
 11993  0018EA                     __end_of_TMR0_ISR:
 11994                           	opt stack 0
 11995                           pclatu	equ	0xFFB
 11996                           pclath	equ	0xFFA
 11997                           tblptru	equ	0xFF8
 11998                           tblptrh	equ	0xFF7
 11999                           tblptrl	equ	0xFF6
 12000                           tablat	equ	0xFF5
 12001                           prodh	equ	0xFF4
 12002                           prodl	equ	0xFF3
 12003                           intcon	equ	0xFF2
 12004                           intcon2	equ	0xFF1
 12005                           postinc0	equ	0xFEE
 12006                           fsr0h	equ	0xFEA
 12007                           fsr0l	equ	0xFE9
 12008                           wreg	equ	0xFE8
 12009                           postdec1	equ	0xFE5
 12010                           fsr1h	equ	0xFE2
 12011                           fsr1l	equ	0xFE1
 12012                           indf2	equ	0xFDF
 12013                           postinc2	equ	0xFDE
 12014                           postdec2	equ	0xFDD
 12015                           fsr2h	equ	0xFDA
 12016                           fsr2l	equ	0xFD9
 12017                           status	equ	0xFD8
 12018                           
 12019 ;; *************** function ___lwmod *****************
 12020 ;; Defined at:
 12021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12022 ;; Parameters:    Size  Location     Type
 12023 ;;  dividend        2    0[COMRAM] unsigned int 
 12024 ;;  divisor         2    2[COMRAM] unsigned int 
 12025 ;; Auto vars:     Size  Location     Type
 12026 ;;  counter         1    4[COMRAM] unsigned char 
 12027 ;; Return value:  Size  Location     Type
 12028 ;;                  2    0[COMRAM] unsigned int 
 12029 ;; Registers used:
 12030 ;;		wreg, status,2, status,0
 12031 ;; Tracked objects:
 12032 ;;		On entry : 0/0
 12033 ;;		On exit  : 0/0
 12034 ;;		Unchanged: 0/0
 12035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12036 ;;      Params:         4       0       0       0       0       0       0
 12037 ;;      Locals:         1       0       0       0       0       0       0
 12038 ;;      Temps:          0       0       0       0       0       0       0
 12039 ;;      Totals:         5       0       0       0       0       0       0
 12040 ;;Total ram usage:        5 bytes
 12041 ;; Hardware stack levels used:    1
 12042 ;; This function calls:
 12043 ;;		Nothing
 12044 ;; This function is called by:
 12045 ;;		_TMR0_ISR
 12046 ;;		_segmentCounter
 12047 ;; This function uses a non-reentrant model
 12048 ;;
 12049                           
 12050                           	psect	text71
 12051  001F6A                     __ptext71:
 12052                           	opt stack 0
 12053  001F6A                     ___lwmod:
 12054                           	opt stack 22
 12055                           
 12056                           ;incstack = 0
 12057  001F6A  5003               	movf	___lwmod@divisor,w,c
 12058  001F6C  1004               	iorwf	___lwmod@divisor+1,w,c
 12059  001F6E  B4D8               	btfsc	status,2,c
 12060  001F70  D018               	goto	i2l1873
 12061  001F72  0E01               	movlw	1
 12062  001F74  6E05               	movwf	___lwmod@counter,c
 12063  001F76  D004               	goto	i2l1868
 12064  001F78  90D8               	bcf	status,0,c
 12065  001F7A  3603               	rlcf	___lwmod@divisor,f,c
 12066  001F7C  3604               	rlcf	___lwmod@divisor+1,f,c
 12067  001F7E  2A05               	incf	___lwmod@counter,f,c
 12068  001F80                     i2l1868:
 12069  001F80  AE04               	btfss	___lwmod@divisor+1,7,c
 12070  001F82  D7FA               	goto	i2l1869
 12071  001F84                     i2u414_40:
 12072  001F84  5003               	movf	___lwmod@divisor,w,c
 12073  001F86  5C01               	subwf	___lwmod@dividend,w,c
 12074  001F88  5004               	movf	___lwmod@divisor+1,w,c
 12075  001F8A  5802               	subwfb	___lwmod@dividend+1,w,c
 12076  001F8C  A0D8               	btfss	status,0,c
 12077  001F8E  D004               	goto	i2l1872
 12078  001F90  5003               	movf	___lwmod@divisor,w,c
 12079  001F92  5E01               	subwf	___lwmod@dividend,f,c
 12080  001F94  5004               	movf	___lwmod@divisor+1,w,c
 12081  001F96  5A02               	subwfb	___lwmod@dividend+1,f,c
 12082  001F98                     i2l1872:
 12083  001F98  90D8               	bcf	status,0,c
 12084  001F9A  3204               	rrcf	___lwmod@divisor+1,f,c
 12085  001F9C  3203               	rrcf	___lwmod@divisor,f,c
 12086  001F9E  2E05               	decfsz	___lwmod@counter,f,c
 12087  001FA0  D7F1               	goto	i2u414_40
 12088  001FA2                     i2l1873:
 12089  001FA2  C001  F001         	movff	___lwmod@dividend,?___lwmod
 12090  001FA6  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 12091  001FAA  0012               	return		;funcret
 12092  001FAC                     __end_of___lwmod:
 12093                           	opt stack 0
 12094                           pclatu	equ	0xFFB
 12095                           pclath	equ	0xFFA
 12096                           tblptru	equ	0xFF8
 12097                           tblptrh	equ	0xFF7
 12098                           tblptrl	equ	0xFF6
 12099                           tablat	equ	0xFF5
 12100                           prodh	equ	0xFF4
 12101                           prodl	equ	0xFF3
 12102                           intcon	equ	0xFF2
 12103                           intcon2	equ	0xFF1
 12104                           postinc0	equ	0xFEE
 12105                           fsr0h	equ	0xFEA
 12106                           fsr0l	equ	0xFE9
 12107                           wreg	equ	0xFE8
 12108                           postdec1	equ	0xFE5
 12109                           fsr1h	equ	0xFE2
 12110                           fsr1l	equ	0xFE1
 12111                           indf2	equ	0xFDF
 12112                           postinc2	equ	0xFDE
 12113                           postdec2	equ	0xFDD
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8
 12117                           
 12118 ;; *************** function _PIN_MANAGER_IOC *****************
 12119 ;; Defined at:
 12120 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;		None
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;		None
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  1    wreg      void 
 12127 ;; Registers used:
 12128 ;;		None
 12129 ;; Tracked objects:
 12130 ;;		On entry : 0/0
 12131 ;;		On exit  : 0/0
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12134 ;;      Params:         0       0       0       0       0       0       0
 12135 ;;      Locals:         0       0       0       0       0       0       0
 12136 ;;      Temps:          0       0       0       0       0       0       0
 12137 ;;      Totals:         0       0       0       0       0       0       0
 12138 ;;Total ram usage:        0 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; This function calls:
 12141 ;;		Nothing
 12142 ;; This function is called by:
 12143 ;;		_INTERRUPT_InterruptManager
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text72
 12148  0023FA                     __ptext72:
 12149                           	opt stack 0
 12150  0023FA                     _PIN_MANAGER_IOC:
 12151                           	opt stack 23
 12152                           
 12153                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 12154                           
 12155                           ;incstack = 0
 12156  0023FA  90F2               	bcf	intcon,0,c	;volatile
 12157  0023FC  0012               	return		;funcret
 12158  0023FE                     __end_of_PIN_MANAGER_IOC:
 12159                           	opt stack 0
 12160                           pclatu	equ	0xFFB
 12161                           pclath	equ	0xFFA
 12162                           tblptru	equ	0xFF8
 12163                           tblptrh	equ	0xFF7
 12164                           tblptrl	equ	0xFF6
 12165                           tablat	equ	0xFF5
 12166                           prodh	equ	0xFF4
 12167                           prodl	equ	0xFF3
 12168                           intcon	equ	0xFF2
 12169                           intcon2	equ	0xFF1
 12170                           postinc0	equ	0xFEE
 12171                           fsr0h	equ	0xFEA
 12172                           fsr0l	equ	0xFE9
 12173                           wreg	equ	0xFE8
 12174                           postdec1	equ	0xFE5
 12175                           fsr1h	equ	0xFE2
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           fsr2h	equ	0xFDA
 12181                           fsr2l	equ	0xFD9
 12182                           status	equ	0xFD8
 12183                           
 12184 ;; *************** function _MEMORY_ISR *****************
 12185 ;; Defined at:
 12186 ;;		line 206 in file "mcc_generated_files/memory.c"
 12187 ;; Parameters:    Size  Location     Type
 12188 ;;		None
 12189 ;; Auto vars:     Size  Location     Type
 12190 ;;		None
 12191 ;; Return value:  Size  Location     Type
 12192 ;;                  1    wreg      void 
 12193 ;; Registers used:
 12194 ;;		None
 12195 ;; Tracked objects:
 12196 ;;		On entry : 0/0
 12197 ;;		On exit  : 0/0
 12198 ;;		Unchanged: 0/0
 12199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12200 ;;      Params:         0       0       0       0       0       0       0
 12201 ;;      Locals:         0       0       0       0       0       0       0
 12202 ;;      Temps:          0       0       0       0       0       0       0
 12203 ;;      Totals:         0       0       0       0       0       0       0
 12204 ;;Total ram usage:        0 bytes
 12205 ;; Hardware stack levels used:    1
 12206 ;; This function calls:
 12207 ;;		Nothing
 12208 ;; This function is called by:
 12209 ;;		_INTERRUPT_InterruptManager
 12210 ;; This function uses a non-reentrant model
 12211 ;;
 12212                           
 12213                           	psect	text73
 12214  0023FE                     __ptext73:
 12215                           	opt stack 0
 12216  0023FE                     _MEMORY_ISR:
 12217                           	opt stack 23
 12218                           
 12219                           ;memory.c: 209: PIR2bits.EEIF = 0;
 12220                           
 12221                           ;incstack = 0
 12222  0023FE  98A1               	bcf	4001,4,c	;volatile
 12223  002400  0012               	return		;funcret
 12224  002402                     __end_of_MEMORY_ISR:
 12225                           	opt stack 0
 12226                           pclatu	equ	0xFFB
 12227                           pclath	equ	0xFFA
 12228                           tblptru	equ	0xFF8
 12229                           tblptrh	equ	0xFF7
 12230                           tblptrl	equ	0xFF6
 12231                           tablat	equ	0xFF5
 12232                           prodh	equ	0xFF4
 12233                           prodl	equ	0xFF3
 12234                           intcon	equ	0xFF2
 12235                           intcon2	equ	0xFF1
 12236                           postinc0	equ	0xFEE
 12237                           fsr0h	equ	0xFEA
 12238                           fsr0l	equ	0xFE9
 12239                           wreg	equ	0xFE8
 12240                           postdec1	equ	0xFE5
 12241                           fsr1h	equ	0xFE2
 12242                           fsr1l	equ	0xFE1
 12243                           indf2	equ	0xFDF
 12244                           postinc2	equ	0xFDE
 12245                           postdec2	equ	0xFDD
 12246                           fsr2h	equ	0xFDA
 12247                           fsr2l	equ	0xFD9
 12248                           status	equ	0xFD8
 12249                           
 12250 ;; *************** function _EUSART1_Transmit_ISR *****************
 12251 ;; Defined at:
 12252 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;		None
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;		None
 12257 ;; Return value:  Size  Location     Type
 12258 ;;                  1    wreg      void 
 12259 ;; Registers used:
 12260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12266 ;;      Params:         0       0       0       0       0       0       0
 12267 ;;      Locals:         0       0       0       0       0       0       0
 12268 ;;      Temps:          0       0       0       0       0       0       0
 12269 ;;      Totals:         0       0       0       0       0       0       0
 12270 ;;Total ram usage:        0 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_INTERRUPT_InterruptManager
 12276 ;; This function uses a non-reentrant model
 12277 ;;
 12278                           
 12279                           	psect	text74
 12280  002098                     __ptext74:
 12281                           	opt stack 0
 12282  002098                     _EUSART1_Transmit_ISR:
 12283                           	opt stack 23
 12284                           
 12285                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 12286                           
 12287                           ;incstack = 0
 12288  002098  0E46               	movlw	70
 12289  00209A  0100               	movlb	0	; () banked
 12290  00209C  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 12291  00209E  D012               	goto	i2l837
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;eusart1.c: 186: {
 12295                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 12296  0020A0  5039               	movf	_eusart1TxTail,w,c	;volatile
 12297  0020A2  0D01               	mullw	1
 12298  0020A4  0E00               	movlw	low _eusart1TxBuffer
 12299  0020A6  24F3               	addwf	prodl,w,c
 12300  0020A8  6ED9               	movwf	fsr2l,c
 12301  0020AA  0E01               	movlw	high _eusart1TxBuffer
 12302  0020AC  20F4               	addwfc	prodh,w,c
 12303  0020AE  6EDA               	movwf	fsr2h,c
 12304  0020B0  50DF               	movf	indf2,w,c
 12305  0020B2  6EAD               	movwf	4013,c	;volatile
 12306                           
 12307                           ; BSR set to: 0
 12308  0020B4  2A39               	incf	_eusart1TxTail,f,c	;volatile
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 12312  0020B6  0E45               	movlw	69
 12313  0020B8  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 12314  0020BA  D002               	goto	i2l838
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;eusart1.c: 189: {
 12318                           ;eusart1.c: 190: eusart1TxTail = 0;
 12319  0020BC  0E00               	movlw	0
 12320  0020BE  6E39               	movwf	_eusart1TxTail,c	;volatile
 12321  0020C0                     i2l838:
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;eusart1.c: 191: }
 12325                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 12326                           
 12327                           ; BSR set to: 0
 12328  0020C0  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12329                           
 12330                           ;eusart1.c: 193: }
 12331  0020C2  0012               	return	
 12332  0020C4                     i2l837:
 12333                           
 12334                           ; BSR set to: 0
 12335                           ;eusart1.c: 194: else
 12336                           ;eusart1.c: 195: {
 12337                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 12338  0020C4  989D               	bcf	3997,4,c	;volatile
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;eusart1.c: 197: eusart1TxTail = 0;
 12342  0020C6  0E00               	movlw	0
 12343  0020C8  6E39               	movwf	_eusart1TxTail,c	;volatile
 12344                           
 12345                           ;eusart1.c: 198: eusart1TxHead = 0;
 12346  0020CA  0E00               	movlw	0
 12347  0020CC  6E3A               	movwf	_eusart1TxHead,c	;volatile
 12348  0020CE  0012               	return	
 12349  0020D0                     __end_of_EUSART1_Transmit_ISR:
 12350                           	opt stack 0
 12351                           pclatu	equ	0xFFB
 12352                           pclath	equ	0xFFA
 12353                           tblptru	equ	0xFF8
 12354                           tblptrh	equ	0xFF7
 12355                           tblptrl	equ	0xFF6
 12356                           tablat	equ	0xFF5
 12357                           prodh	equ	0xFF4
 12358                           prodl	equ	0xFF3
 12359                           intcon	equ	0xFF2
 12360                           intcon2	equ	0xFF1
 12361                           postinc0	equ	0xFEE
 12362                           fsr0h	equ	0xFEA
 12363                           fsr0l	equ	0xFE9
 12364                           wreg	equ	0xFE8
 12365                           postdec1	equ	0xFE5
 12366                           fsr1h	equ	0xFE2
 12367                           fsr1l	equ	0xFE1
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function _EUSART1_Receive_ISR *****************
 12376 ;; Defined at:
 12377 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;		None
 12380 ;; Auto vars:     Size  Location     Type
 12381 ;;		None
 12382 ;; Return value:  Size  Location     Type
 12383 ;;                  1    wreg      void 
 12384 ;; Registers used:
 12385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12386 ;; Tracked objects:
 12387 ;;		On entry : 0/0
 12388 ;;		On exit  : 0/0
 12389 ;;		Unchanged: 0/0
 12390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12391 ;;      Params:         0       0       0       0       0       0       0
 12392 ;;      Locals:         0       0       0       0       0       0       0
 12393 ;;      Temps:          0       0       0       0       0       0       0
 12394 ;;      Totals:         0       0       0       0       0       0       0
 12395 ;;Total ram usage:        0 bytes
 12396 ;; Hardware stack levels used:    1
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_INTERRUPT_InterruptManager
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           	psect	text75
 12405  0021FE                     __ptext75:
 12406                           	opt stack 0
 12407  0021FE                     _EUSART1_Receive_ISR:
 12408                           	opt stack 23
 12409                           
 12410                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;incstack = 0
 12414  0021FE  A2AB               	btfss	4011,1,c	;volatile
 12415  002200  D002               	goto	i2l843
 12416                           
 12417                           ;eusart1.c: 206: {
 12418                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 12419  002202  98AB               	bcf	4011,4,c	;volatile
 12420                           
 12421                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 12422  002204  88AB               	bsf	4011,4,c	;volatile
 12423  002206                     i2l843:
 12424                           
 12425                           ;eusart1.c: 210: }
 12426                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 12427  002206  5038               	movf	_eusart1RxHead,w,c	;volatile
 12428  002208  0D01               	mullw	1
 12429  00220A  0E46               	movlw	low _eusart1RxBuffer
 12430  00220C  24F3               	addwf	prodl,w,c
 12431  00220E  6ED9               	movwf	fsr2l,c
 12432  002210  0E01               	movlw	high _eusart1RxBuffer
 12433  002212  20F4               	addwfc	prodh,w,c
 12434  002214  6EDA               	movwf	fsr2h,c
 12435  002216  CFAE FFDF          	movff	4014,indf2	;volatile
 12436  00221A  2A38               	incf	_eusart1RxHead,f,c	;volatile
 12437                           
 12438                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 12439  00221C  0E27               	movlw	39
 12440  00221E  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 12441  002220  D002               	goto	i2l844
 12442                           
 12443                           ;eusart1.c: 217: {
 12444                           ;eusart1.c: 218: eusart1RxHead = 0;
 12445  002222  0E00               	movlw	0
 12446  002224  6E38               	movwf	_eusart1RxHead,c	;volatile
 12447  002226                     i2l844:
 12448                           
 12449                           ;eusart1.c: 219: }
 12450                           ;eusart1.c: 220: eusart1RxCount++;
 12451  002226  2A36               	incf	_eusart1RxCount,f,c	;volatile
 12452  002228  0012               	return		;funcret
 12453  00222A                     __end_of_EUSART1_Receive_ISR:
 12454                           	opt stack 0
 12455                           pclatu	equ	0xFFB
 12456                           pclath	equ	0xFFA
 12457                           tblptru	equ	0xFF8
 12458                           tblptrh	equ	0xFF7
 12459                           tblptrl	equ	0xFF6
 12460                           tablat	equ	0xFF5
 12461                           prodh	equ	0xFF4
 12462                           prodl	equ	0xFF3
 12463                           intcon	equ	0xFF2
 12464                           intcon2	equ	0xFF1
 12465                           postinc0	equ	0xFEE
 12466                           fsr0h	equ	0xFEA
 12467                           fsr0l	equ	0xFE9
 12468                           wreg	equ	0xFE8
 12469                           postdec1	equ	0xFE5
 12470                           fsr1h	equ	0xFE2
 12471                           fsr1l	equ	0xFE1
 12472                           indf2	equ	0xFDF
 12473                           postinc2	equ	0xFDE
 12474                           postdec2	equ	0xFDD
 12475                           fsr2h	equ	0xFDA
 12476                           fsr2l	equ	0xFD9
 12477                           status	equ	0xFD8
 12478                           pclatu	equ	0xFFB
 12479                           pclath	equ	0xFFA
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           intcon	equ	0xFF2
 12487                           intcon2	equ	0xFF1
 12488                           postinc0	equ	0xFEE
 12489                           fsr0h	equ	0xFEA
 12490                           fsr0l	equ	0xFE9
 12491                           wreg	equ	0xFE8
 12492                           postdec1	equ	0xFE5
 12493                           fsr1h	equ	0xFE2
 12494                           fsr1l	equ	0xFE1
 12495                           indf2	equ	0xFDF
 12496                           postinc2	equ	0xFDE
 12497                           postdec2	equ	0xFDD
 12498                           fsr2h	equ	0xFDA
 12499                           fsr2l	equ	0xFD9
 12500                           status	equ	0xFD8
 12501                           
 12502                           	psect	rparam
 12503  0000                     pclatu	equ	0xFFB
 12504                           pclath	equ	0xFFA
 12505                           tblptru	equ	0xFF8
 12506                           tblptrh	equ	0xFF7
 12507                           tblptrl	equ	0xFF6
 12508                           tablat	equ	0xFF5
 12509                           prodh	equ	0xFF4
 12510                           prodl	equ	0xFF3
 12511                           intcon	equ	0xFF2
 12512                           intcon2	equ	0xFF1
 12513                           postinc0	equ	0xFEE
 12514                           fsr0h	equ	0xFEA
 12515                           fsr0l	equ	0xFE9
 12516                           wreg	equ	0xFE8
 12517                           postdec1	equ	0xFE5
 12518                           fsr1h	equ	0xFE2
 12519                           fsr1l	equ	0xFE1
 12520                           indf2	equ	0xFDF
 12521                           postinc2	equ	0xFDE
 12522                           postdec2	equ	0xFDD
 12523                           fsr2h	equ	0xFDA
 12524                           fsr2l	equ	0xFD9
 12525                           status	equ	0xFD8
 12526                           
 12527                           	psect	temp
 12528  000048                     btemp:
 12529                           	opt stack 0
 12530  000048                     	ds	1
 12531  0000                     int$flags	set	btemp
 12532  0000                     wtemp6	set	btemp+1
 12533                           pclatu	equ	0xFFB
 12534                           pclath	equ	0xFFA
 12535                           tblptru	equ	0xFF8
 12536                           tblptrh	equ	0xFF7
 12537                           tblptrl	equ	0xFF6
 12538                           tablat	equ	0xFF5
 12539                           prodh	equ	0xFF4
 12540                           prodl	equ	0xFF3
 12541                           intcon	equ	0xFF2
 12542                           intcon2	equ	0xFF1
 12543                           postinc0	equ	0xFEE
 12544                           fsr0h	equ	0xFEA
 12545                           fsr0l	equ	0xFE9
 12546                           wreg	equ	0xFE8
 12547                           postdec1	equ	0xFE5
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8


Data Sizes:
    Strings     884
    Constant    168
    Data        20
    BSS         248
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     83     160
    BANK1           256     12     186
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 59
		 -> STR_25(CODE[57]), STR_24(CODE[50]), STR_23(CODE[59]), STR_22(CODE[53]), 
		 -> STR_21(CODE[49]), STR_20(CODE[55]), STR_19(CODE[33]), STR_18(CODE[57]), 
		 -> STR_17(CODE[50]), STR_16(CODE[33]), STR_15(CODE[53]), STR_14(CODE[58]), 
		 -> STR_13(CODE[49]), STR_12(CODE[49]), STR_11(CODE[49]), STR_10(CODE[51]), 
		 -> STR_9(CODE[46]), STR_8(CODE[31]), STR_6(CODE[20]), STR_4(CODE[20]), 
		 -> STR_3(CODE[21]), STR_2(CODE[20]), STR_1(CODE[31]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_26(CODE[7]), STR_7(CODE[9]), STR_5(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(COMRAM[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(COMRAM[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _ZeroArray->_memset
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _PrintHelpScreen->_sprintf
    _UART_Write_Text->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_AdcConvert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  145628
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                    _PrintHelpScreen
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                         3     3      0    1790
                                             35 COMRAM     3     3      0
                       _EUSART1_Read
                _InitRxMessageParams
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      67
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1584
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1584
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     324
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     463
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     463
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0    5902
                                              0 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _PrintHelpScreen                                     50    50      0    6386
                                              0 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6    3748
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      4     2      2    1882
                                             24 COMRAM     4     2      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      44
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   16167
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    8282
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    7884
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    7884
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      15
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      60
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      60
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  100581
                                              0 BANK1     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   84843
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   27102
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   45974
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11764
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     821
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   12005
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     592
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _PrintHelpScreen
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _InitRxMessageParams
       _ZeroArray
         _memset
     _toupper

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      C      BA       8       72.7%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     53      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A1       3        0.0%
DATA                 0      0     1A1       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 06 14:08:26 2018

              __end_of_keepAliveSignalLed 2360                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FF                           _GroupControlMcu 000000  
                           ___altoft@sign 0090                __size_of_FLASH_IsWriteDone 000E  
                     __end_of_BlinkOkLeds 1B8E                           _SWSPI_send_word 152A  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0081  
                             ?_MEMORY_ISR 0001                                       l112 05EE  
                                     l113 0514                                       l171 191A  
                                     l173 193E                                       l190 215A  
                                     l166 1956                                       l263 0D4E  
                                     l191 2144                                       l167 18F8  
                                     l264 0D6C                                       l169 1904  
                                     l602 1DDA                                       l603 1DE4  
                                     l613 1E44                                       l614 1E08  
                                     l631 1E30                                       l623 1E1C  
                                     l615 1E12                                       l632 1E3A  
                                     l624 1E26                                       l560 15C8  
                                     l552 1552                                       l480 0884  
                                     l570 1D78                                       l562 15DE  
                                     l650 2014                                       l482 08EE  
                                     l571 1D82                                       l555 159E  
                                     l651 1FEC                                       l660 2000  
                                     l652 1FF6                                       l820 1F1E  
                                     l549 1544                                       l661 200A  
                                     l671 2050                                       l559 15B0  
                                     l831 1FC0                                       l584 1DEE  
                                     l568 1D92                                       l576 1D3A  
                                     l672 2028                                       l832 1FE4  
                                     l585 1DB2                                       l569 1D5E  
                                     l577 1D06                                       l681 203C  
                                     l673 2032                                       l833 1FE2  
                                     l594 1DC6                                       l586 1DBC  
                                     l578 1D20                                       l682 2046  
                                     l818 1EF8                                       l931 1500  
                                     l595 1DD0                                       l579 1D2A  
                                     l932 1502                                       l692 2304  
                                     l693 22FC                                       l928 1528  
                                     l929 14E0                                       l697 2300  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                        PLLInitialize@idx 002C                                       _cnt 00FD  
                                     _exp 0302                                       _log 0B5C  
                                     _pow 09E0                                       prod 000FF3  
                                     wreg 000FE8            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                                    l1041 21BA                                      l2103 108C  
                                    l2112 1766                                      l2104 107E  
                                    l2120 1436                                      l2121 142A  
                                    l2106 10A6                                      l2107 1122  
                                    l2116 13C2                                      l1420 1CBA  
                                    l1421 1CCE                                      l2118 1408  
                                    l1270 1BF2                                      l1271 1BF6  
                                    l1423 1CF2                                      l1272 1BFA  
                                    l1424 1CE8                                      l1273 1C28  
                                    l2057 2386                                      l1442 1306  
                                    l1267 1C2C                                      l1700 0704  
                                    l2164 11F2                                      l1540 1998  
                                    l2092 031C                                      l2156 0B78  
                                    l1268 1BEE                                      l1444 134E  
                                    l2165 1172                                      l1445 1330  
                                    l1437 12E6                                      l2094 0354  
                                    l2158 0B98                                      l1438 1300  
                                    l2095 038C                                      l1439 1362  
                                    l1704 072E                                      l2096 03BC  
                                    l1448 1382                                      l2097 04E6  
                                    l1650 2074                                      l1714 078A  
                                    l2098 04BC                                      l1723 07C8  
                                    l1715 0780                                      l1539 19A4  
                                    l1724 07BE                                      l1900 0B4E  
                                    l1820 1B1E                                      l1733 0F90  
                                    l1709 0794                                      l1741 17FE  
                                    l1670 16AE                                      l1726 07EC  
                                    l1750 0EC2                                      l1742 182E  
                                    l1735 0FB8                                      l1727 0808  
                                    l1751 0EF4                                      l1815 1AE8  
                                    l1672 16EC                                      l1736 0FF6  
                                    l1728 0838                                      l1752 0F04  
                                    l1816 1ADC                                      l1673 16D6  
                                    l1737 101C                                      l1826 1C5A  
                                    l1754 0F1C                                      l1675 1714  
                                    l1827 1C4E                                      l1755 0F2C  
                                    l1771 0E1E                                      l5203 08CC  
                                    l1819 1B10                                      l1676 170A  
                                    l1748 0E9A                                      l1780 0E5E  
                                    l1772 0E0E                                      l1669 16B8  
                                    l1765 1F40                                      l1759 228C  
                                    l3375 1B98                                      l5207 08DE  
                                    l6113 185A                                      l1777 0E42  
                                    l1769 0DA6                                      l5217 0936  
                                    l1778 0E36                                      l1882 21EC  
                                    l3387 1B3A                                      l1883 21DC  
                                    l1894 0A2A                                      l1895 0A1A  
                                    l1897 0A42                                      l5193 0874  
                                    l1898 0AC8                                      l1899 0AA6  
                                    l4813 1FAE                                      ?_exp 0099  
                                    l4669 21DC                                      ?_log 0090  
                                    l6561 14D8                                      l4891 155E  
                                    l4895 156C                                      l6657 04BC  
                                    l6745 050C                                      ?_pow 00A2  
                                    STR_1 7F73                                      STR_2 7FA7  
                                    STR_3 7F92                                      STR_4 7FCF  
                                    STR_5 7FE3                                      STR_6 7FBB  
                                    STR_7 7FEF                                      STR_8 7F73  
                                    STR_9 7F03                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4030 08CC  
                                    u4110 1AEC                                      u5000 16A0  
                                    u3170 1C20                                      u4050 0936  
                                    u5101 06D6                                      u3175 1C16  
                                    u5040 171E                                      u1680 2352  
                                    u5130 06F6                                      u3610 1592  
                                    u4090 139A                                      u5301 0E82  
                                    u5230 079C                                      u3630 15B8  
                                    u5160 0720                                      u5321 0EAA  
                                    u5410 0DC4                                      u3570 153A  
                                    u1698 2354                                      u5091 06C2  
                                    u5260 07D0                                      u3660 15D4  
                                    u5501 0F78                                      u5190 075E  
                                    u5415 0DBC                                      u5600 1098  
                                    u5521 0FA0                                      u5450 0E48  
                                    u6260 168C                                      u5391 0D8A  
                                    u6407 1BBE                                      u5480 178E  
                                    u5640 13E2                                      u6417 1BD8  
                                    u5730 1506                                      u5810 0396  
                                    u6427 05DA                                      u5820 0398  
                                    u5910 0A90                                      u5495 219E  
                                    u5680 23D6                                      u5496 21A0  
                                    u5488 1790                                      u5648 13E6  
                                    u5681 23D2                                      u5745 1524  
                                    u5746 1526                                      u6387 1B60  
                                    u5940 0CDA                                      u6397 1B7A  
                                    u5935 0C88                                      u5960 0D1E  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 1FAC                   ??_InitAdcApplicationMgr 0018  
                                    _main 1CA4                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 23F6                           __end_of_DacInit 1ACA  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0099  
                                    log@x 0090                         ?_FLASH_WriteBlock 001D  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A2  
                                    pow@y 00A5                                      prodh 000FF4  
                                    prodl 000FF3             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                      ??_FLASH_WriteBlock 0023                             _adcSampleMode 00D5  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                            _BlinkErrorLeds 1B8E  
                 __end_of_UART_Write_Text 216E                              ___fttol@exp1 0086  
                                   ??_exp 002F                                     ??_log 002F  
                            ___fttol@lval 0082                                     ??_pow 002F  
                 __end_of_TMR0_Initialize 213A            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 23CC                SWSPI_DAC_send_bits@phrType 001C  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 085E                                     STR_10 7DDA  
                                   STR_11 7E70                                     STR_12 7ED2  
                                   STR_20 7D39                                     STR_13 7EA1  
                                   STR_21 7E3F                                     STR_22 7DA5  
                                   STR_14 7CC6                                     STR_15 7D70  
                                   STR_23 7C8B                                     STR_24 7E0D  
                                   STR_16 7F31                                     STR_25 7D00  
                                   STR_17 7E0D           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_26 7FF8                                     STR_18 7D00  
                                   STR_19 7F52                           __end_of___ftdiv 104E  
                         __end_of___ftneg 229A                           __end_of___ftmul 0F66  
                                   _T0CON 000FD5                           __end_of___llmod 1B30  
                         __end_of___ftsub 1F6A                           __end_of___fttol 0E70  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 1FAC  
                                   i2l843 2206                                     i2l771 007A  
                                   i2l844 2226                                     i2l837 20C4  
                                   i2l773 0086                                     i2l838 20C0  
                                   i2l766 005E                                     i2l775 0090  
                                   i2l768 006A                                     i2l997 188C  
                                   i2l998 18AC                                     i2l999 18CC  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 1D56         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 2098  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 18EA  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 23FE  
                                   _make8 1BEC            __size_of_SWSPI_Synth_send_bits 0058  
                                   _count 00CF                                     _floor 104E  
                                   _ldexp 13A8                                     _frexp 173E  
                                   _errno 00CB             __end_of_SWSPI_Synth_send_bits 1D56  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AF                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 13A8                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 238A            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 009F            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 1BEC  
                             ldexp@newexp 0093                   __end_of_SWSPI_send_word 15E2  
                             _BlinkOkLeds 1B30                           __initialization 19EE  
                             log@exponent 0093                __end_of_EUSART1_Initialize 2106  
                            __end_of_main 1CFE               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0030                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 003B  
                           __activetblptr 000002                ?_SendUartSystemInitMessage 0001  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 23FA  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0091                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 0090                                    ?_frexp 0018  
                        __end_of___altoft 19EE                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        __end_of___awtoft 2098                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 173E                          __end_of___lltoft 1CA4  
                       ?_FlashSampleWrite 002D                            __CFG_WDTEN$OFF 000000  
                                  i2l1872 1F98                                    i2l1873 1FA2  
                                  i2l1868 1F80                                    i2l1869 1F78  
                                  _TABLAT 000FF5                                    _RCREG1 000FAE  
                        __end_of___lwtoft 22BE                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 22F8                   __size_of_SwSpi_Data_Pin 0056  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                         ?_BlinkErrorLeds 0001                            __CFG_XINST$OFF 000000  
                                  _cState 00D3                                    ___ftge 17CE  
               SWSPI_Synth_send_bits@data 001A                                    ___wmul 2250  
                               ??___ftadd 007E                            __CFG_STVREN$ON 000000  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0060  
                               ??___ftneg 001B                         ?_InitSevenSegment 0001  
                               ??___ftmul 006F                     __end_of_PLLInitialize 09E0  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                          ?_TMR0_Initialize 0001  
                                  _memset 21D2                                    clear_0 1A34  
                                  clear_1 1A40                                    clear_2 1A4C  
                      ??_InitSevenSegment 0018                       __size_of_AdcConvert 01BC  
                                  floor@i 0094                     __end_of_SwSpi_Clk_Pin 1E5A  
                                  floor@x 0091                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 12DC                              __mediumconst 7BE2  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 0024                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 001C  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 001E  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                          __end_ofexp@coeff 7C70  
                       _SYSTEM_Initialize 2314                          __end_oflog@coeff 7C8B  
                              __accesstop 0060                   __end_of__initialization 1A52  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008D  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0021                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                          __pcstackCOMRAM 0001                              __pidataBANK0 239E  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 1C48  
                           __end_of_floor 1130                             __end_of_ldexp 146E  
                           __end_of_frexp 17CE                    _SwSpi_Set_Synth_Le_Pin 2024  
                              ___lwtoft@c 0020                      __end_of_EUSART1_Read 1F28  
                            ??_MEMORY_ISR 0001                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0034             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                      _keepAliveSignalLed 2348                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 222A               FLASH_WriteBlock@GIEBitValue 002B  
                                 ??_make8 001D                                   ??_floor 002F  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0095  
                                 ??_frexp 001D                           _AdcConvert$3340 01B4  
               __end_of_SYSTEM_Initialize 232E                             _eusart1RxHead 0038  
                     PrintHelpScreen@dest 0060                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00B3  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00DA  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 7C4B  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0010  
           __end_of_InitAdcApplicationMgr 23BE                        __end_of_MEMORY_ISR 2402  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 23EE  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 22DC                                 ?___altoft 0087  
                                 ?_memset 0018                                 ?___awtoft 0020  
                               ?___ftpack 0018                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
              FlashSampleWrite@sampleData 002D                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 1690                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 1A60  
                            ??_AdcConvert 01AE                          _FLASH_EraseBlock 216E  
                          _SwSpi_Data_Pin 1DAE                             _SetMcuRunTime 1EA2  
                         __CFG_PWRTEN$OFF 000000                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                    PLLInitialize@idx_810 002E                           __size_of___ftge 0090  
                                 ___ftadd 06B0                                   ___ftdiv 0F66  
                    __end_of_readUartByte 1974                                   ___ftneg 2276  
                         __size_of___wmul 0026                                   ___ftmul 0E70  
                                 ___llmod 1ACA                                   ___ftsub 1F28  
                                 ___fttol 0D78                FlashSampleWrite@rotateLeft 0062  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 1F6A  
                    AdcConvert@_adcResult 01B0                                ??___altoft 008B  
              SWSPI_Synth_send_bits@count 001B                     _mcuRunTimeIn5SecTicks 00C7  
                                 _channel 00D4                                   __pcinit 19EE  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 120A                           __size_of_memset 002C  
                                 __ramtop 0600                                ??___lltoft 0024  
                                 __ptext0 1CA4                                   __ptext1 18EA  
                                 __ptext2 2376                                   __ptext3 22DC  
                                 __ptext4 22BE                                   __ptext5 21D2  
                                 __ptext6 1EE6                                   __ptext7 2348  
                                 __ptext8 23DA                                   __ptext9 2314  
                      __end_of_AdcConvert 06B0                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001B  
                   _OSCILLATOR_Initialize 23BE                              __size_of_exp 01F2  
                            __size_of_log 0122                              __size_of_pow 017C  
             ??_SendUartSystemInitMessage 0024                        _EUSART1_Initialize 20D0  
                ??_PIN_MANAGER_Initialize 0018                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 12DC  
                  __end_of_SwSpi_Data_Pin 1E04                                   _toupper 2376  
                    end_of_initialization 1A52                                   exp@sign 00A1  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                   _SWSPI_Synth_send_bits 1CFE                __end_of_TEST_PLL_REGISTERS 7C17  
                __size_of_PrintHelpScreen 0222                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 7BE2                      __end_of_SetMcuSystem 23E4  
                                 pow@sign 00AE                          AdcConvert@adcRes 01B7  
                       readUartByte@chRec 0026                      SWSPI_send_word@datac 0026  
                              _rxMsgQueue 00D7                                   postdec1 000FE5  
                                 postdec2 000FDD                __end_of_PLL_INIT_REGISTERS 7C4B  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0042                       _InitRxMessageParams 22DC  
               __size_of_FlashSampleWrite 00FA                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 2348    __size_of_InitSystemApplicationManagers 001A  
           _InitSystemApplicationManagers 232E                  _TMR0_SetInterruptHandler 23E4  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 2314  
           FLASH_WriteBlock@flashWrBufPtr 0021                 __size_of_InitSevenSegment 0026  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018               __end_of_SWSPI_DAC_send_bits 1DAE  
                FLASH_EraseBlock@baseAddr 0018             SendUartSystemInitMessage@dest 0060  
                             ___ftdiv@exp 0067                              _EUSART1_Read 1EE6  
               _SendUartSystemInitMessage 120A                      _CheckFlashPrecentage 15E2  
                       FLASH_WriteBlock@i 002C                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018              __end_of_INTERRUPT_Initialize 23F6  
                          __end_of___ftge 185E              InitAdcApplicationMgr@channel 0018  
                          __end_of___wmul 2276                             __pidataCOMRAM 23EE  
                       __size_of_TMR0_ISR 008C                            _ADC_Initialize 2360  
                        _FLASH_WriteBlock 146E                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 21FE                                floor@expon 0097  
                __size_of_UART_Write_Text 0034                         ??_ClearMcuRunTime 0018  
                     start_initialization 19EE                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001D                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 0090           __size_of_PIN_MANAGER_Initialize 0048  
                   ??_InitRxMessageParams 0024                               __end_of_exp 04F4  
                             __end_of_log 0C7E                               __end_of_pow 0B5C  
                AdcConvert@_adcResult_332 01B2                    ?_SWSPI_Synth_send_bits 001A  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 1FE8  
                  __size_of_PLLInitialize 0182                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 008A                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 2060                         ??_PrintHelpScreen 0024  
                                ??___ftge 001E                                  ??___wmul 001C  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 2376  
                             __pdataBANK0 00EB                   SWSPI_DAC_send_bits@data 001A  
                                ??_memset 001E               FLASH_EraseBlock@GIEBitValue 001C  
                __end_of_FLASH_EraseBlock 21A2                  __size_of_SWSPI_send_word 00B8  
                          _eusart1RxCount 0036                         __size_of___altoft 007A  
                               _ZeroArray 22BE                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0030                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01AE                            BlinkOkLeds@idx 001B  
                                ?_DacInit 0001                              _readUartByte 18EA  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 1FE8  
            __size_of_EUSART1_Receive_ISR 002C                               sprintf@flag 001E  
                   _TMR0_InterruptHandler 00FB                                 __pnvBANK0 00FB  
                __size_of_TMR0_StartTimer 0004                    _PIN_MANAGER_Initialize 1E5A  
                   _InitAdcApplicationMgr 23AE                                 __pintcode 0008  
                           __pmediumconst 7BE2                                  ?___ftadd 0078  
                                ?___ftdiv 0029                                  ?___ftneg 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 0C7E                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                             _PLLInitialize 085E  
             __size_of_keepAliveSignalLed 0018                            readUartByte@c1 0025  
                          readUartByte@c2 0024              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 1E04  
                               _eval_poly 1130                       BlinkErrorLeds@state 001D  
                         _TimerOneSecFlag 003D                              _SetMcuSystem 23DA  
                        _InitSevenSegment 222A                            __size_of_make8 005C  
                                ?_sprintf 0018                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                                ?_toupper 0001                          _conversionFormat 00D6  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 23F2  
          FLASH_WriteBlock@blockStartAddr 0027                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 000000                         _GroupSynthesizers 000000  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                i2u414_40 1F84                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                 _rxMsgData 00B3  
                     SWSPI_send_word@data 0021                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 185E                        _TEST_PLL_REGISTERS 7BE3  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
      __size_of_SendUartSystemInitMessage 00D2                   SWSPI_send_word@dataSize 0025  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                        __end_of_channelArr 7C52  
                        ??_SwSpi_Data_Pin 0019                                ?_eval_poly 0084  
                      _PLL_INIT_REGISTERS 7C17                         ??_SWSPI_send_word 0026  
                             _INTCON2bits 000FF1                                 copy_data0 1A02  
                               copy_data1 1A22                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 152A                                  _GroupDAC 000000  
                                _GroupAdc 000000                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 21A2  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 238A  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0030                          __size_of___ftneg 0024  
                                ___altoft 1974                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                                  ___awtoft 2060  
                                ___ftpack 1690                          _numOfReadSamples 003E  
                                ___lltoft 1C48                         _FLASH_IsWriteDone 23CC  
                                ___lwtoft 229A                               ??_ZeroArray 0024  
                     ??_ADC_GetConversion 001A                                  _exp$3343 009C  
                      ?_FLASH_IsWriteDone 0001                     SwSpi_Clk_Pin@cPinMode 0018  
                 ??_SWSPI_Synth_send_bits 001B                    SwSpi_Data_Pin@cPinMode 0018  
                                __ptext10 2106                                  __ptext11 23E4  
                                __ptext20 00E0                                  __ptext12 1E5A  
                                __ptext21 12DC                                  __ptext13 23BE  
                                __ptext30 1A60                                  __ptext22 213A  
                                __ptext14 23F2                                  __ptext31 152A  
                                __ptext23 1FAC                                  __ptext15 20D0  
                                __ptext40 15E2                                  __ptext32 1BEC  
                                __ptext24 232E                                  __ptext16 2360  
                                __ptext41 1B30                                  __ptext33 2024  
                                __ptext25 23F6                                  __ptext17 1EA2  
                                __ptext50 0D78                                  __ptext42 1B8E  
                                __ptext34 22F8                                  __ptext26 085E  
                                __ptext18 1ACA                                  __ptext51 17CE  
                                __ptext43 04F4                                  __ptext35 1CFE  
                                __ptext27 1FE8                                  __ptext19 120A  
                                __ptext60 2060                                  __ptext52 1974  
                                __ptext44 09E0                                  __ptext36 1D56  
                                __ptext28 222A                                  __ptext61 1C48  
                                __ptext53 1130                                  __ptext45 0B5C  
                                __ptext37 1DAE                                  __ptext29 23AE  
                                __ptext70 185E                                  __ptext62 229A  
                                __ptext54 2250                                  __ptext46 0302  
                                __ptext38 1E04                                  __ptext71 1F6A  
                                __ptext63 1690                                  __ptext55 0E70  
                                __ptext47 13A8                                  __ptext39 238A  
                                __ptext72 23FA                                  __ptext64 0C7E  
                                __ptext56 1F28                                  __ptext48 104E  
                                __ptext73 23FE                                  __ptext65 146E  
                                __ptext57 06B0                                  __ptext49 173E  
                                __ptext74 2098                                  __ptext66 216E  
                                __ptext58 2276                                  __ptext75 21FE  
                                __ptext67 23CC                                  __ptext59 0F66  
                                __ptext68 21A2              SWSPI_Synth_send_bits@phrType 001C  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3341 00A8  
                                _pow$3342 00AB                       ??_FLASH_IsWriteDone 0018  
                         _PrintHelpScreen 00E0                          __size_of_sprintf 00CC  
                        __size_of_toupper 0014                       UART_Write_Text@text 0019  
                           __size_of_main 005A                                  _msgCount 00D2  
            _TMR0_DefaultInterruptHandler 000000                 __end_of_ADC_GetConversion 21D2  
            __size_of_SWSPI_DAC_send_bits 0058                        SWSPI_send_word@idx 0027  
                             _groupsArray 00EB                           ??_PLLInitialize 002A  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
               __end_of_FLASH_IsWriteDone 23DA        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 21FE                  __end_of_SwSpi_Set_CE_Pin 2024  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 22F8  
                                exp@coeff 7C52                                _MEMORY_ISR 23FE  
                                log@coeff 7C70                    SWSPI_send_word@phrType 0029  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 008B                               _sampleArray 016E  
                             _sampleCount 00CD                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                  __end_of_FlashSampleWrite 0D78  
                                intlevel2 0000                                 sprintf@ap 001F  
                               sprintf@cp 0022                                 sprintf@sp 0018  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 1EE6  
                        ___lwmod@dividend 0001                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 239E                                _RCSTA1bits 000FAB  
            __end_of_EUSART1_Transmit_ISR 20D0                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                         _TimerSamplingFlag 003C  
                           AdcConvert@idx 01B9                  __end_of_InitSevenSegment 2250  
                           _isReWriteDone 00D1                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                         _UART_Write_Text 213A                                  sprintf@c 0021  
                                sprintf@f 001A                          _GroupFlashMemory 000000  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 2106  
                 __end_of_PrintHelpScreen 0302                           ___lwmod@counter 0005  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                              _AdcConvert 04F4                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 1EA2                          UART_Write_Text@i 001B  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 23FA  
              __size_of_ADC_GetConversion 0030  
