

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 06 10:13:03 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   137                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   138  0000                     
   139                           ; Version 1.45
   140                           ; Generated 16/11/2017 GMT
   141                           ; 
   142                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   143                           ; All rights reserved.
   144                           ; 
   145                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   146                           ; 
   147                           ; Redistribution and use in source and binary forms, with or without modification, are
   148                           ; permitted provided that the following conditions are met:
   149                           ; 
   150                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   151                           ;        conditions and the following disclaimer.
   152                           ; 
   153                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   154                           ;        of conditions and the following disclaimer in the documentation and/or other
   155                           ;        materials provided with the distribution.
   156                           ; 
   157                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   158                           ;        software without specific prior written permission.
   159                           ; 
   160                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   161                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   162                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   163                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   164                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   165                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   166                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   167                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   168                           ; 
   169                           ; 
   170                           ; Code-generator required, PIC18F45K22 Definitions
   171                           ; 
   172                           ; SFR Addresses
   173  0000                     
   174 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   175  0000                     
   176                           	psect	idataCOMRAM
   177  0037EE                     __pidataCOMRAM:
   178                           	opt stack 0
   179                           
   180                           ;initializer for _writeAddress
   181  0037EE  4000               	dw	16384
   182  0037F0  0000               	dw	0
   183                           
   184                           	psect	idataBANK0
   185  00373E                     __pidataBANK0:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _groupsArray
   189  00373E  36                 	db	low _GroupControlMcu
   190  00373F  31                 	db	high _GroupControlMcu
   191  003740  D6                 	db	low _GroupStatusAndVersion
   192  003741  2B                 	db	high _GroupStatusAndVersion
   193  003742  D2                 	db	low _GroupAdc
   194  003743  2E                 	db	high _GroupAdc
   195  003744  C2                 	db	low _GroupSynthesizers
   196  003745  2A                 	db	high _GroupSynthesizers
   197  003746  62                 	db	low _GroupFlashMemory
   198  003747  2F                 	db	high _GroupFlashMemory
   199  003748  F8                 	db	low _GroupDAC
   200  003749  35                 	db	high _GroupDAC
   201                           
   202                           ;initializer for _readAddress
   203  00374A  4000               	dw	16384
   204  00374C  0000               	dw	0
   205                           
   206                           	psect	smallconst
   207  000600                     __psmallconst:
   208                           	opt stack 0
   209  000600  00                 	db	0
   210  000601                     _TEST_PLL_REGISTERS:
   211                           	opt stack 0
   212  000601  041C               	dw	1052
   213  000603  0001               	dw	1
   214  000605  300B               	dw	12299
   215  000607  0061               	dw	97
   216  000609  26BA               	dw	9914
   217  00060B  00C0               	dw	192
   218  00060D  FCC9               	dw	64713
   219  00060F  1A19               	dw	6681
   220  000611  0428               	dw	1064
   221  000613  102D               	dw	4141
   222  000615  00E7               	dw	231
   223  000617  1200               	dw	4608
   224  000619  6076               	dw	24694
   225  00061B  3505               	dw	13573
   226  00061D  0025               	dw	37
   227  00061F  0080               	dw	128
   228  000621  8B84               	dw	35716
   229  000623  3200               	dw	12800
   230  000625  0003               	dw	3
   231  000627  0000               	dw	0
   232  000629  0032               	dw	50
   233  00062B  0008               	dw	8
   234  00062D  AAA1               	dw	43681
   235  00062F  01AA               	dw	426
   236  000631  0EDA               	dw	3802
   237  000633  0003               	dw	3
   238  000635                     __end_of_TEST_PLL_REGISTERS:
   239                           	opt stack 0
   240  000635                     _PLL_INIT_REGISTERS:
   241                           	opt stack 0
   242  000635  041C               	dw	1052
   243  000637  0001               	dw	1
   244  000639  300B               	dw	12299
   245  00063B  0061               	dw	97
   246  00063D  323A               	dw	12858
   247  00063F  00C0               	dw	192
   248  000641  BCC9               	dw	48329
   249  000643  2221               	dw	8737
   250  000645  0428               	dw	1064
   251  000647  102D               	dw	4141
   252  000649  00E7               	dw	231
   253  00064B  1200               	dw	4608
   254  00064D  2076               	dw	8310
   255  00064F  3501               	dw	13569
   256  000651  0025               	dw	37
   257  000653  0080               	dw	128
   258  000655  9B84               	dw	39812
   259  000657  3400               	dw	13312
   260  000659  0003               	dw	3
   261  00065B  0000               	dw	0
   262  00065D  0012               	dw	18
   263  00065F  0000               	dw	0
   264  000661  0001               	dw	1
   265  000663  0600               	dw	1536
   266  000665  0340               	dw	832
   267  000667  0020               	dw	32
   268  000669                     __end_of_PLL_INIT_REGISTERS:
   269                           	opt stack 0
   270  000669                     _channelArr:
   271                           	opt stack 0
   272  000669  07                 	db	7
   273  00066A  06                 	db	6
   274  00066B  05                 	db	5
   275  00066C  04                 	db	4
   276  00066D  19                 	db	25
   277  00066E  0A                 	db	10
   278  00066F  0D                 	db	13
   279  000670                     __end_of_channelArr:
   280                           	opt stack 0
   281  000670                     exp@coeff:
   282                           	opt stack 0
   283  000670  00                 	db	0
   284  000671  80                 	db	128
   285  000672  3F                 	db	63
   286  000673  72                 	db	114
   287  000674  31                 	db	49
   288  000675  3F                 	db	63
   289  000676  FE                 	db	254
   290  000677  75                 	db	117
   291  000678  3E                 	db	62
   292  000679  58                 	db	88
   293  00067A  63                 	db	99
   294  00067B  3D                 	db	61
   295  00067C  95                 	db	149
   296  00067D  1D                 	db	29
   297  00067E  3C                 	db	60
   298  00067F  C5                 	db	197
   299  000680  AE                 	db	174
   300  000681  3A                 	db	58
   301  000682  79                 	db	121
   302  000683  21                 	db	33
   303  000684  39                 	db	57
   304  000685  94                 	db	148
   305  000686  80                 	db	128
   306  000687  37                 	db	55
   307  000688  93                 	db	147
   308  000689  A7                 	db	167
   309  00068A  35                 	db	53
   310  00068B  56                 	db	86
   311  00068C  15                 	db	21
   312  00068D  34                 	db	52
   313  00068E                     __end_ofexp@coeff:
   314                           	opt stack 0
   315  00068E                     log@coeff:
   316                           	opt stack 0
   317  00068E  00                 	db	0
   318  00068F  00                 	db	0
   319  000690  00                 	db	0
   320  000691  00                 	db	0
   321  000692  80                 	db	128
   322  000693  3F                 	db	63
   323  000694  F0                 	db	240
   324  000695  FF                 	db	255
   325  000696  BE                 	db	190
   326  000697  E2                 	db	226
   327  000698  A9                 	db	169
   328  000699  3E                 	db	62
   329  00069A  83                 	db	131
   330  00069B  76                 	db	118
   331  00069C  BE                 	db	190
   332  00069D  AE                 	db	174
   333  00069E  2B                 	db	43
   334  00069F  3E                 	db	62
   335  0006A0  3C                 	db	60
   336  0006A1  C3                 	db	195
   337  0006A2  BD                 	db	189
   338  0006A3  D2                 	db	210
   339  0006A4  13                 	db	19
   340  0006A5  3D                 	db	61
   341  0006A6  78                 	db	120
   342  0006A7  D3                 	db	211
   343  0006A8  BB                 	db	187
   344  0006A9                     __end_oflog@coeff:
   345                           	opt stack 0
   346  0006A9  00                 	db	0	; dummy byte at the end
   347  0000                     
   348                           	psect	nvCOMRAM
   349  000046                     __pnvCOMRAM:
   350                           	opt stack 0
   351  000046                     _timer0ReloadVal:
   352                           	opt stack 0
   353  000046                     	ds	2
   354                           
   355                           	psect	nvBANK0
   356  0000FB                     __pnvBANK0:
   357                           	opt stack 0
   358  0000FB                     _TMR0_InterruptHandler:
   359                           	opt stack 0
   360  0000FB                     	ds	2
   361  0000FD                     _cnt:
   362                           	opt stack 0
   363  0000FD                     	ds	2
   364  0000FF                     _eusart1TxBufferRemaining:
   365                           	opt stack 0
   366  0000FF                     	ds	1
   367  0000                     _ANSELE	set	3900
   368  0000                     _ANSELB	set	3897
   369  0000                     _ANSELC	set	3898
   370  0000                     _ANSELD	set	3899
   371  0000                     _ANSELA	set	3896
   372  0000                     _ADCON0bits	set	4034
   373  0000                     _ADRESH	set	4036
   374  0000                     _ADRESL	set	4035
   375  0000                     _ADCON2	set	4032
   376  0000                     _ADCON1	set	4033
   377  0000                     _ADCON0	set	4034
   378  0000                     _T0CONbits	set	4053
   379  0000                     _T0CON	set	4053
   380  0000                     _TMR0L	set	4054
   381  0000                     _TMR0H	set	4055
   382  0000                     _EEDATA	set	4008
   383  0000                     _EEADR	set	4009
   384  0000                     _EECON2	set	4007
   385  0000                     _EECON1bits	set	4006
   386  0000                     _TABLAT	set	4085
   387  0000                     _TBLPTRL	set	4086
   388  0000                     _TBLPTRH	set	4087
   389  0000                     _TBLPTRU	set	4088
   390  0000                     _INTCON2bits	set	4081
   391  0000                     _WPUB	set	3937
   392  0000                     _TRISC	set	3988
   393  0000                     _TRISB	set	3987
   394  0000                     _TRISE	set	3990
   395  0000                     _LATC	set	3979
   396  0000                     _LATB	set	3978
   397  0000                     _LATE	set	3981
   398  0000                     _RCREG1	set	4014
   399  0000                     _RCSTA1bits	set	4011
   400  0000                     _TXREG1	set	4013
   401  0000                     _SPBRGH1	set	4016
   402  0000                     _SPBRG1	set	4015
   403  0000                     _TXSTA1	set	4012
   404  0000                     _RCSTA1	set	4011
   405  0000                     _BAUDCON1	set	4024
   406  0000                     _PIR1bits	set	3998
   407  0000                     _PIE1bits	set	3997
   408  0000                     _PIR2bits	set	4001
   409  0000                     _PIE2bits	set	4000
   410  0000                     _RCONbits	set	4048
   411  0000                     _OSCTUNE	set	3995
   412  0000                     _OSCCON2	set	4050
   413  0000                     _OSCCON	set	4051
   414  0000                     _LATAbits	set	3977
   415  0000                     _LATDbits	set	3980
   416  0000                     _INTCONbits	set	4082
   417  0000                     _IOCB	set	3938
   418  0000                     _PORTD	set	3971
   419  0000                     _LATD	set	3980
   420  0000                     _TRISD	set	3989
   421  0000                     _LATA	set	3977
   422  0000                     _TRISA	set	3986
   423  0000                     _LATCbits	set	3979
   424  0000                     _LATBbits	set	3978
   425                           
   426                           ; #config settings
   427  0000                     
   428                           	psect	cinit
   429  0027F8                     __pcinit:
   430                           	opt stack 0
   431  0027F8                     start_initialization:
   432                           	opt stack 0
   433  0027F8                     __initialization:
   434                           	opt stack 0
   435                           
   436                           ; Initialize objects allocated to BANK0 (16 bytes)
   437                           ; load TBLPTR registers with __pidataBANK0
   438  0027F8  0E3E               	movlw	low __pidataBANK0
   439  0027FA  6EF6               	movwf	tblptrl,c
   440  0027FC  0E37               	movlw	high __pidataBANK0
   441  0027FE  6EF7               	movwf	tblptrh,c
   442  002800  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   443  002802  6EF8               	movwf	tblptru,c
   444  002804  EE00  F0EB         	lfsr	0,__pdataBANK0
   445  002808  EE10 F010          	lfsr	1,16
   446  00280C                     copy_data0:
   447  00280C  0009               	tblrd		*+
   448  00280E  CFF5 FFEE          	movff	tablat,postinc0
   449  002812  50E5               	movf	postdec1,w,c
   450  002814  50E1               	movf	fsr1l,w,c
   451  002816  E1FA               	bnz	copy_data0
   452                           
   453                           ; Initialize objects allocated to COMRAM (4 bytes)
   454                           ; load TBLPTR registers with __pidataCOMRAM
   455  002818  0EEE               	movlw	low __pidataCOMRAM
   456  00281A  6EF6               	movwf	tblptrl,c
   457  00281C  0E37               	movlw	high __pidataCOMRAM
   458  00281E  6EF7               	movwf	tblptrh,c
   459  002820  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   460  002822  6EF8               	movwf	tblptru,c
   461  002824  EE00  F042         	lfsr	0,__pdataCOMRAM
   462  002828  EE10 F004          	lfsr	1,4
   463  00282C                     copy_data1:
   464  00282C  0009               	tblrd		*+
   465  00282E  CFF5 FFEE          	movff	tablat,postinc0
   466  002832  50E5               	movf	postdec1,w,c
   467  002834  50E1               	movf	fsr1l,w,c
   468  002836  E1FA               	bnz	copy_data1
   469                           
   470                           ; Clear objects allocated to BANK1 (194 bytes)
   471  002838  EE01  F000         	lfsr	0,__pbssBANK1
   472  00283C  0EC2               	movlw	194
   473  00283E                     clear_0:
   474  00283E  6AEE               	clrf	postinc0,c
   475  002840  06E8               	decf	wreg,f,c
   476  002842  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (43 bytes)
   479  002844  EE00  F0C0         	lfsr	0,__pbssBANK0
   480  002848  0E2B               	movlw	43
   481  00284A                     clear_1:
   482  00284A  6AEE               	clrf	postinc0,c
   483  00284C  06E8               	decf	wreg,f,c
   484  00284E  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (17 bytes)
   487  002850  EE00  F031         	lfsr	0,__pbssCOMRAM
   488  002854  0E11               	movlw	17
   489  002856                     clear_2:
   490  002856  6AEE               	clrf	postinc0,c
   491  002858  06E8               	decf	wreg,f,c
   492  00285A  E1FD               	bnz	clear_2
   493  00285C                     end_of_initialization:
   494                           	opt stack 0
   495  00285C                     __end_of__initialization:
   496                           	opt stack 0
   497  00285C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   498  00285E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   499  002860  0E00               	movlw	low (__Lmediumconst shr (0+16))
   500  002862  6EF8               	movwf	tblptru,c
   501  002864  0100               	movlb	0
   502  002866  EFD2  F014         	goto	_main	;jump to C main() function
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           postdec1	equ	0xFE5
   510                           fsr1l	equ	0xFE1
   511                           
   512                           	psect	bssCOMRAM
   513  000031                     __pbssCOMRAM:
   514                           	opt stack 0
   515  000031                     _numOfValidateSamples:
   516                           	opt stack 0
   517  000031                     	ds	4
   518  000035                     TMR0_ISR@CountCallBack:
   519                           	opt stack 0
   520  000035                     	ds	2
   521  000037                     _eusart1RxTail:
   522                           	opt stack 0
   523  000037                     	ds	1
   524  000038                     _eusart1RxHead:
   525                           	opt stack 0
   526  000038                     	ds	1
   527  000039                     _eusart1TxTail:
   528                           	opt stack 0
   529  000039                     	ds	1
   530  00003A                     _eusart1TxHead:
   531                           	opt stack 0
   532  00003A                     	ds	1
   533  00003B                     _isReWriteDone:
   534                           	opt stack 0
   535  00003B                     	ds	1
   536  00003C                     _adcSampleMode:
   537                           	opt stack 0
   538  00003C                     	ds	1
   539  00003D                     _conversionFormat:
   540                           	opt stack 0
   541  00003D                     	ds	1
   542  00003E                     _numOfReadSamples:
   543                           	opt stack 0
   544  00003E                     	ds	4
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	dataCOMRAM
   555  000042                     __pdataCOMRAM:
   556                           	opt stack 0
   557  000042                     _writeAddress:
   558                           	opt stack 0
   559  000042                     	ds	4
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1l	equ	0xFE1
   568                           
   569                           	psect	bssBANK0
   570  0000C0                     __pbssBANK0:
   571                           	opt stack 0
   572  0000C0                     _mcuRunTimeIn5SecTicks:
   573                           	opt stack 0
   574  0000C0                     	ds	4
   575  0000C4                     _errno:
   576                           	opt stack 0
   577  0000C4                     	ds	2
   578  0000C6                     _sampleCount:
   579                           	opt stack 0
   580  0000C6                     	ds	2
   581  0000C8                     _count:
   582                           	opt stack 0
   583  0000C8                     	ds	2
   584  0000CA                     _msgCount:
   585                           	opt stack 0
   586  0000CA                     	ds	1
   587  0000CB                     _crcGiven:
   588                           	opt stack 0
   589  0000CB                     	ds	1
   590  0000CC                     _crcCalc:
   591                           	opt stack 0
   592  0000CC                     	ds	1
   593  0000CD                     _data:
   594                           	opt stack 0
   595  0000CD                     	ds	1
   596  0000CE                     _dataSize:
   597                           	opt stack 0
   598  0000CE                     	ds	1
   599  0000CF                     _request:
   600                           	opt stack 0
   601  0000CF                     	ds	1
   602  0000D0                     _group:
   603                           	opt stack 0
   604  0000D0                     	ds	1
   605  0000D1                     _cState:
   606                           	opt stack 0
   607  0000D1                     	ds	1
   608  0000D2                     _eusart1RxCount:
   609                           	opt stack 0
   610  0000D2                     	ds	1
   611  0000D3                     _channel:
   612                           	opt stack 0
   613  0000D3                     	ds	1
   614  0000D4                     _TimerKeepAliveFlag:
   615                           	opt stack 0
   616  0000D4                     	ds	1
   617  0000D5                     _TimerSamplingFlag:
   618                           	opt stack 0
   619  0000D5                     	ds	1
   620  0000D6                     _TimerOneSecFlag:
   621                           	opt stack 0
   622  0000D6                     	ds	1
   623  0000D7                     _rxMsgQueue:
   624                           	opt stack 0
   625  0000D7                     	ds	20
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           postdec1	equ	0xFE5
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	dataBANK0
   636  0000EB                     __pdataBANK0:
   637                           	opt stack 0
   638  0000EB                     _groupsArray:
   639                           	opt stack 0
   640  0000EB                     	ds	12
   641  0000F7                     _readAddress:
   642                           	opt stack 0
   643  0000F7                     	ds	4
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	bssBANK1
   654  000100                     __pbssBANK1:
   655                           	opt stack 0
   656  000100                     _eusart1TxBuffer:
   657                           	opt stack 0
   658  000100                     	ds	70
   659  000146                     _eusart1RxBuffer:
   660                           	opt stack 0
   661  000146                     	ds	40
   662  00016E                     _sampleArray:
   663                           	opt stack 0
   664  00016E                     	ds	64
   665  0001AE                     _rxMsgData:
   666                           	opt stack 0
   667  0001AE                     	ds	20
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	cstackBANK1
   678  0001C2                     __pcstackBANK1:
   679                           	opt stack 0
   680  0001C2                     GroupStatusAndVersion@data:
   681                           	opt stack 0
   682  0001C2                     GroupAdc@data:
   683                           	opt stack 0
   684  0001C2                     GroupSynthesizers@data:
   685                           	opt stack 0
   686  0001C2                     GroupFlashMemory@data:
   687                           	opt stack 0
   688  0001C2                     GroupDAC@data:
   689                           	opt stack 0
   690  0001C2                     
   691                           ; 3 bytes @ 0x0
   692  0001C2                     	ds	2
   693  0001C4                     GroupFlashMemory@request:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2
   697  0001C4                     	ds	1
   698  0001C5                     ??_readUartMessage:
   699                           
   700                           ; 1 bytes @ 0x3
   701  0001C5                     	ds	4
   702  0001C9                     readUartMessage@idx:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x7
   706  0001C9                     	ds	2
   707  0001CB                     readUartMessage@chRec:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x9
   711  0001CB                     	ds	1
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1l	equ	0xFE1
   720                           
   721                           	psect	cstackBANK0
   722  000060                     __pcstackBANK0:
   723                           	opt stack 0
   724  000060                     ??_FlashSampleWrite:
   725  000060                     ??___ftdiv:
   726  000060                     ??_FlashReadUart:
   727  000060                     strtol@sign:
   728                           	opt stack 0
   729  000060                     GetMcuRunTime@TxMsg:
   730                           	opt stack 0
   731                           
   732                           ; 9 bytes @ 0x0
   733  000060                     	ds	1
   734  000061                     strtol@a:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x1
   738  000061                     	ds	1
   739  000062                     FlashSampleWrite@rotateLeft:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x2
   743  000062                     	ds	1
   744  000063                     ___ftdiv@cntr:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x3
   748  000063                     	ds	1
   749  000064                     ___ftdiv@f3:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x4
   753  000064                     	ds	1
   754  000065                     strtol@c:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x5
   758  000065                     	ds	1
   759  000066                     ?_GetIntFromUartData:
   760                           	opt stack 0
   761  000066                     GetIntFromUartData@data:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x6
   765  000066                     	ds	1
   766  000067                     ___ftdiv@exp:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x7
   770  000067                     	ds	1
   771  000068                     ___ftdiv@sign:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x8
   775  000068                     	ds	1
   776  000069                     ?___ftmul:
   777                           	opt stack 0
   778  000069                     ___ftmul@f1:
   779                           	opt stack 0
   780  000069                     GetMcuRunTime@tempRunTime:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x9
   784  000069                     	ds	1
   785  00006A                     GetIntFromUartData@dataRegArr:
   786                           	opt stack 0
   787                           
   788                           ; 8 bytes @ 0xA
   789  00006A                     	ds	2
   790  00006C                     ___ftmul@f2:
   791                           	opt stack 0
   792  00006C                     FlashReadUart@TxMsg:
   793                           	opt stack 0
   794                           
   795                           ; 69 bytes @ 0xC
   796  00006C                     	ds	1
   797  00006D                     GetMcuRunTime@idx:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0xD
   801  00006D                     	ds	2
   802  00006F                     ??___ftmul:
   803                           
   804                           ; 1 bytes @ 0xF
   805  00006F                     	ds	3
   806  000072                     GetIntFromUartData@c:
   807                           	opt stack 0
   808  000072                     ___ftmul@exp:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x12
   812  000072                     	ds	1
   813  000073                     GetIntFromUartData@idx:
   814                           	opt stack 0
   815  000073                     ___ftmul@f3_as_product:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x13
   819  000073                     	ds	2
   820  000075                     DacSetValue@regData:
   821                           	opt stack 0
   822  000075                     UpdateRxFreq@regData:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x15
   826  000075                     	ds	1
   827  000076                     ___ftmul@cntr:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x16
   831  000076                     	ds	1
   832  000077                     ___ftmul@sign:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x17
   836  000077                     	ds	1
   837  000078                     ??_CheckFlashPrecentage:
   838  000078                     ?___ftadd:
   839                           	opt stack 0
   840  000078                     ?___fttol:
   841                           	opt stack 0
   842  000078                     ___ftadd@f1:
   843                           	opt stack 0
   844  000078                     ___fttol@f1:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x18
   848  000078                     	ds	3
   849  00007B                     ___ftadd@f2:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x1B
   853  00007B                     	ds	1
   854  00007C                     ??___fttol:
   855  00007C                     CheckFlashPrecentage@precentage:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x1C
   859  00007C                     	ds	2
   860  00007E                     ??___ftadd:
   861                           
   862                           ; 1 bytes @ 0x1E
   863  00007E                     	ds	3
   864  000081                     ___ftadd@sign:
   865                           	opt stack 0
   866  000081                     ___fttol@sign1:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x21
   870  000081                     	ds	1
   871  000082                     ___ftadd@exp2:
   872                           	opt stack 0
   873  000082                     ___fttol@lval:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x22
   877  000082                     	ds	1
   878  000083                     ___ftadd@exp1:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x23
   882  000083                     	ds	1
   883  000084                     ?___ftsub:
   884                           	opt stack 0
   885  000084                     ?_eval_poly:
   886                           	opt stack 0
   887  000084                     ___ftsub@f1:
   888                           	opt stack 0
   889  000084                     eval_poly@x:
   890                           	opt stack 0
   891                           
   892                           ; 3 bytes @ 0x24
   893  000084                     	ds	2
   894  000086                     ___fttol@exp1:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x26
   898  000086                     	ds	1
   899  000087                     ?___altoft:
   900                           	opt stack 0
   901  000087                     eval_poly@d:
   902                           	opt stack 0
   903  000087                     ___ftsub@f2:
   904                           	opt stack 0
   905  000087                     ___altoft@c:
   906                           	opt stack 0
   907                           
   908                           ; 4 bytes @ 0x27
   909  000087                     	ds	2
   910  000089                     eval_poly@n:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x29
   914  000089                     	ds	2
   915  00008B                     ??___altoft:
   916  00008B                     eval_poly@res:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x2B
   920  00008B                     	ds	3
   921  00008E                     ?_log:
   922                           	opt stack 0
   923  00008E                     ?_ldexp:
   924                           	opt stack 0
   925  00008E                     ldexp@value:
   926                           	opt stack 0
   927  00008E                     log@x:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x2E
   931  00008E                     	ds	1
   932  00008F                     ?_floor:
   933                           	opt stack 0
   934  00008F                     floor@x:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x2F
   938  00008F                     	ds	2
   939  000091                     ldexp@newexp:
   940                           	opt stack 0
   941  000091                     log@exponent:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x31
   945  000091                     	ds	1
   946  000092                     floor@i:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x32
   950  000092                     	ds	1
   951  000093                     ??_ldexp:
   952                           
   953                           ; 1 bytes @ 0x33
   954  000093                     	ds	2
   955  000095                     floor@expon:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x35
   959  000095                     	ds	2
   960  000097                     ?_exp:
   961                           	opt stack 0
   962  000097                     exp@x:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x37
   966  000097                     	ds	3
   967  00009A                     _exp$3279:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x3A
   971  00009A                     	ds	3
   972  00009D                     exp@exponent:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x3D
   976  00009D                     	ds	2
   977  00009F                     exp@sign:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x3F
   981  00009F                     	ds	1
   982  0000A0                     ?_pow:
   983                           	opt stack 0
   984  0000A0                     pow@x:
   985                           	opt stack 0
   986                           
   987                           ; 3 bytes @ 0x40
   988  0000A0                     	ds	3
   989  0000A3                     pow@y:
   990                           	opt stack 0
   991                           
   992                           ; 3 bytes @ 0x43
   993  0000A3                     	ds	3
   994  0000A6                     _pow$3277:
   995                           	opt stack 0
   996                           
   997                           ; 3 bytes @ 0x46
   998  0000A6                     	ds	3
   999  0000A9                     _pow$3278:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x49
  1003  0000A9                     	ds	3
  1004  0000AC                     pow@sign:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x4C
  1008  0000AC                     	ds	1
  1009  0000AD                     pow@yi:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0x4D
  1013  0000AD                     	ds	4
  1014  0000B1                     ??_AdcConvert:
  1015  0000B1                     _FlashReadUart$565:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x51
  1019  0000B1                     	ds	2
  1020  0000B3                     AdcConvert@_adcResult:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x53
  1024  0000B3                     	ds	2
  1025  0000B5                     AdcConvert@_adcResult_332:
  1026                           	opt stack 0
  1027  0000B5                     _FlashReadUart$566:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0x55
  1031  0000B5                     	ds	2
  1032  0000B7                     _AdcConvert$3276:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x57
  1036  0000B7                     	ds	2
  1037  0000B9                     FlashReadUart@j:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x59
  1041  0000B9                     	ds	1
  1042  0000BA                     AdcConvert@adcRes:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x5A
  1046  0000BA                     	ds	1
  1047  0000BB                     FlashReadUart@idx:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x5B
  1051  0000BB                     	ds	1
  1052  0000BC                     AdcConvert@idx:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x5C
  1056  0000BC                     	ds	1
  1057  0000BD                     FlashReadUart@offset:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x5D
  1061  0000BD                     	ds	2
  1062  0000BF                     ??_GroupFlashMemory:
  1063  0000BF                     GroupControlMcu@request:
  1064                           	opt stack 0
  1065  0000BF                     GroupStatusAndVersion@request:
  1066                           	opt stack 0
  1067  0000BF                     GroupAdc@request:
  1068                           	opt stack 0
  1069  0000BF                     GroupSynthesizers@request:
  1070                           	opt stack 0
  1071  0000BF                     GroupDAC@request:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x5F
  1075  0000BF                     	ds	1
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085                           	psect	cstackCOMRAM
  1086  000001                     __pcstackCOMRAM:
  1087                           	opt stack 0
  1088  000001                     ?___lwmod:
  1089                           	opt stack 0
  1090  000001                     ___lwmod@dividend:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x0
  1094  000001                     	ds	2
  1095  000003                     ___lwmod@divisor:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x2
  1099  000003                     	ds	2
  1100  000005                     ___lwmod@counter:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x4
  1104  000005                     	ds	1
  1105  000006                     ??_INTERRUPT_InterruptManager:
  1106                           
  1107                           ; 1 bytes @ 0x5
  1108  000006                     	ds	18
  1109  000018                     ??_EUSART1_Read:
  1110  000018                     ??_isspace:
  1111  000018                     ??_isdigit:
  1112  000018                     ??_isupper:
  1113  000018                     ??_BlinkErrorLeds:
  1114  000018                     ??_BlinkOkLeds:
  1115  000018                     ??_keepAliveSignalLed:
  1116  000018                     ?_ADC_GetConversion:
  1117                           	opt stack 0
  1118  000018                     ?_abs:
  1119                           	opt stack 0
  1120  000018                     ?___wmul:
  1121                           	opt stack 0
  1122  000018                     ?___ftpack:
  1123                           	opt stack 0
  1124  000018                     ?_frexp:
  1125                           	opt stack 0
  1126  000018                     ?___ftneg:
  1127                           	opt stack 0
  1128  000018                     ?___lmul:
  1129                           	opt stack 0
  1130  000018                     ?___lldiv:
  1131                           	opt stack 0
  1132  000018                     ?___llmod:
  1133                           	opt stack 0
  1134  000018                     InitAdcApplicationMgr@channel:
  1135                           	opt stack 0
  1136  000018                     SwSpi_Data_Pin@cPinMode:
  1137                           	opt stack 0
  1138  000018                     SwSpi_Clk_Pin@cPinMode:
  1139                           	opt stack 0
  1140  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1141                           	opt stack 0
  1142  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1143                           	opt stack 0
  1144  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1145                           	opt stack 0
  1146  000018                     EUSART1_Write@txData:
  1147                           	opt stack 0
  1148  000018                     DATAEE_WriteByte@bData:
  1149                           	opt stack 0
  1150  000018                     DATAEE_ReadByte@bAdd:
  1151                           	opt stack 0
  1152  000018                     toupper@c:
  1153                           	opt stack 0
  1154  000018                     PLLUartInitialize@data:
  1155                           	opt stack 0
  1156  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1157                           	opt stack 0
  1158  000018                     crc8@dataArray:
  1159                           	opt stack 0
  1160  000018                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  000018                     abs@a:
  1163                           	opt stack 0
  1164  000018                     memset@p1:
  1165                           	opt stack 0
  1166  000018                     ___ftpack@arg:
  1167                           	opt stack 0
  1168  000018                     ___ftge@ff1:
  1169                           	opt stack 0
  1170  000018                     ___ftneg@f1:
  1171                           	opt stack 0
  1172  000018                     frexp@value:
  1173                           	opt stack 0
  1174  000018                     FLASH_ReadByte@flashAddr:
  1175                           	opt stack 0
  1176  000018                     FLASH_EraseBlock@baseAddr:
  1177                           	opt stack 0
  1178  000018                     make8@data:
  1179                           	opt stack 0
  1180  000018                     ___lmul@multiplier:
  1181                           	opt stack 0
  1182  000018                     ___lldiv@dividend:
  1183                           	opt stack 0
  1184  000018                     ___llmod@dividend:
  1185                           	opt stack 0
  1186                           
  1187                           ; 4 bytes @ 0x17
  1188  000018                     	ds	1
  1189  000019                     EepromRead@address:
  1190                           	opt stack 0
  1191  000019                     SwSpi_Data_Pin@phrType:
  1192                           	opt stack 0
  1193  000019                     SwSpi_Clk_Pin@phrType:
  1194                           	opt stack 0
  1195  000019                     SwSpi_Set_CE_Pin@phrType:
  1196                           	opt stack 0
  1197  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1198                           	opt stack 0
  1199  000019                     DATAEE_WriteByte@bAdd:
  1200                           	opt stack 0
  1201  000019                     _isdigit$2986:
  1202                           	opt stack 0
  1203  000019                     _isspace$2989:
  1204                           	opt stack 0
  1205  000019                     _isupper$2992:
  1206                           	opt stack 0
  1207  000019                     WriteUartMessage@dataBuf:
  1208                           	opt stack 0
  1209  000019                     EUSART1_Read@readValue:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x18
  1213  000019                     	ds	1
  1214  00001A                     ??_ADC_GetConversion:
  1215  00001A                     ??_abs:
  1216  00001A                     ??_TMR0_Initialize:
  1217  00001A                     SWSPI_DAC_send_bits@data:
  1218                           	opt stack 0
  1219  00001A                     SWSPI_Synth_send_bits@data:
  1220                           	opt stack 0
  1221  00001A                     DATAEE_WriteByte@GIEBitValue:
  1222                           	opt stack 0
  1223  00001A                     isdigit@c:
  1224                           	opt stack 0
  1225  00001A                     isspace@c:
  1226                           	opt stack 0
  1227  00001A                     isupper@c:
  1228                           	opt stack 0
  1229  00001A                     crc8@dataSize:
  1230                           	opt stack 0
  1231  00001A                     ___wmul@multiplicand:
  1232                           	opt stack 0
  1233  00001A                     memset@c:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x19
  1237  00001A                     	ds	1
  1238  00001B                     ??_isalpha:
  1239  00001B                     BlinkErrorLeds@state:
  1240                           	opt stack 0
  1241  00001B                     BlinkOkLeds@state:
  1242                           	opt stack 0
  1243  00001B                     EepromWrite@data:
  1244                           	opt stack 0
  1245  00001B                     SWSPI_DAC_send_bits@count:
  1246                           	opt stack 0
  1247  00001B                     SWSPI_Synth_send_bits@count:
  1248                           	opt stack 0
  1249  00001B                     ___ftpack@exp:
  1250                           	opt stack 0
  1251  00001B                     WriteUartMessage@dataSize:
  1252                           	opt stack 0
  1253  00001B                     frexp@eptr:
  1254                           	opt stack 0
  1255  00001B                     ___ftge@ff2:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x1A
  1259  00001B                     	ds	1
  1260  00001C                     ??_crc8:
  1261  00001C                     EepromWrite@address:
  1262                           	opt stack 0
  1263  00001C                     SWSPI_DAC_send_bits@phrType:
  1264                           	opt stack 0
  1265  00001C                     SWSPI_Synth_send_bits@phrType:
  1266                           	opt stack 0
  1267  00001C                     FLASH_EraseBlock@GIEBitValue:
  1268                           	opt stack 0
  1269  00001C                     ADC_GetConversion@channel:
  1270                           	opt stack 0
  1271  00001C                     make8@dataLocation:
  1272                           	opt stack 0
  1273  00001C                     ___ftpack@sign:
  1274                           	opt stack 0
  1275  00001C                     _isalpha$2983:
  1276                           	opt stack 0
  1277  00001C                     BlinkErrorLeds@idx:
  1278                           	opt stack 0
  1279  00001C                     BlinkOkLeds@idx:
  1280                           	opt stack 0
  1281  00001C                     ___wmul@product:
  1282                           	opt stack 0
  1283  00001C                     memset@n:
  1284                           	opt stack 0
  1285  00001C                     ___lmul@multiplicand:
  1286                           	opt stack 0
  1287  00001C                     ___lldiv@divisor:
  1288                           	opt stack 0
  1289  00001C                     ___llmod@divisor:
  1290                           	opt stack 0
  1291                           
  1292                           ; 4 bytes @ 0x1B
  1293  00001C                     	ds	1
  1294  00001D                     ??_make8:
  1295  00001D                     ??___ftpack:
  1296  00001D                     ??_frexp:
  1297  00001D                     ??_WriteUartMessage:
  1298  00001D                     isalpha@c:
  1299                           	opt stack 0
  1300  00001D                     crc8@crc:
  1301                           	opt stack 0
  1302  00001D                     FLASH_WriteBlock@writeAddr:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0x1C
  1306  00001D                     	ds	1
  1307  00001E                     ??___ftge:
  1308  00001E                     WriteUartMessage@idx:
  1309                           	opt stack 0
  1310  00001E                     memset@p:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x1D
  1314  00001E                     	ds	1
  1315  00001F                     crc8@i:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1E
  1319  00001F                     	ds	1
  1320  000020                     ?___awtoft:
  1321                           	opt stack 0
  1322  000020                     ?___lltoft:
  1323                           	opt stack 0
  1324  000020                     ?___lwtoft:
  1325                           	opt stack 0
  1326  000020                     ___llmod@counter:
  1327                           	opt stack 0
  1328  000020                     ZeroArray@array:
  1329                           	opt stack 0
  1330  000020                     ___awtoft@c:
  1331                           	opt stack 0
  1332  000020                     ___lwtoft@c:
  1333                           	opt stack 0
  1334  000020                     ___lmul@product:
  1335                           	opt stack 0
  1336  000020                     ___lldiv@quotient:
  1337                           	opt stack 0
  1338  000020                     ___lltoft@c:
  1339                           	opt stack 0
  1340                           
  1341                           ; 4 bytes @ 0x1F
  1342  000020                     	ds	1
  1343  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1344                           	opt stack 0
  1345  000021                     SWSPI_send_word@data:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0x20
  1349  000021                     	ds	1
  1350  000022                     ZeroArray@size:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x21
  1354  000022                     	ds	1
  1355  000023                     ??_FLASH_WriteBlock:
  1356  000023                     ___awtoft@sign:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x22
  1360  000023                     	ds	1
  1361  000024                     ??_GetMcuFwVersion:
  1362  000024                     ??_GetCpldFwVersion:
  1363  000024                     ??_FlashReadCondition:
  1364  000024                     ??___lltoft:
  1365  000024                     ?_strtol:
  1366                           	opt stack 0
  1367  000024                     SendAckMessage@inRequest:
  1368                           	opt stack 0
  1369  000024                     ___lldiv@counter:
  1370                           	opt stack 0
  1371  000024                     strtol@s:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x23
  1375  000024                     	ds	1
  1376  000025                     ??_GetMcuRunTime:
  1377  000025                     SendAckMessage@inGroup:
  1378                           	opt stack 0
  1379  000025                     SWSPI_send_word@dataSize:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x24
  1383  000025                     	ds	1
  1384  000026                     SWSPI_send_word@datac:
  1385                           	opt stack 0
  1386  000026                     strtol@endptr:
  1387                           	opt stack 0
  1388  000026                     SendAckMessage@TxMsg:
  1389                           	opt stack 0
  1390  000026                     GetMcuFwVersion@TxMsg:
  1391                           	opt stack 0
  1392  000026                     GetCpldFwVersion@TxMsg:
  1393                           	opt stack 0
  1394                           
  1395                           ; 9 bytes @ 0x25
  1396  000026                     	ds	1
  1397  000027                     SWSPI_send_word@idx:
  1398                           	opt stack 0
  1399  000027                     FLASH_WriteBlock@blockStartAddr:
  1400                           	opt stack 0
  1401                           
  1402                           ; 4 bytes @ 0x26
  1403  000027                     	ds	1
  1404  000028                     ___lltoft@exp:
  1405                           	opt stack 0
  1406  000028                     strtol@base:
  1407                           	opt stack 0
  1408  000028                     FlashReadCondition@TxMsg:
  1409                           	opt stack 0
  1410                           
  1411                           ; 9 bytes @ 0x27
  1412  000028                     	ds	1
  1413  000029                     ?___ftdiv:
  1414                           	opt stack 0
  1415  000029                     SWSPI_send_word@phrType:
  1416                           	opt stack 0
  1417  000029                     ___ftdiv@f1:
  1418                           	opt stack 0
  1419                           
  1420                           ; 3 bytes @ 0x28
  1421  000029                     	ds	1
  1422  00002A                     ??_strtol:
  1423  00002A                     ??_PLLInitialize:
  1424                           
  1425                           ; 1 bytes @ 0x29
  1426  00002A                     	ds	1
  1427  00002B                     FLASH_WriteBlock@GIEBitValue:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x2A
  1431  00002B                     	ds	1
  1432  00002C                     ??_testLeds:
  1433  00002C                     FLASH_WriteBlock@i:
  1434                           	opt stack 0
  1435  00002C                     SetAdcOperationMode@data:
  1436                           	opt stack 0
  1437  00002C                     SetConversionResultFormat@data:
  1438                           	opt stack 0
  1439  00002C                     SetChannelMode@data:
  1440                           	opt stack 0
  1441  00002C                     FlashReadUart@numOfSampleToRead:
  1442                           	opt stack 0
  1443  00002C                     PLLInitialize@idx:
  1444                           	opt stack 0
  1445  00002C                     UpdateTxFreq@data:
  1446                           	opt stack 0
  1447  00002C                     SetMcuFwVersion@data:
  1448                           	opt stack 0
  1449  00002C                     SetCpldFwVersion@data:
  1450                           	opt stack 0
  1451  00002C                     ___ftdiv@f2:
  1452                           	opt stack 0
  1453                           
  1454                           ; 3 bytes @ 0x2B
  1455  00002C                     	ds	1
  1456  00002D                     testLeds@idx:
  1457                           	opt stack 0
  1458  00002D                     FlashSampleWrite@sampleData:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x2C
  1462  00002D                     	ds	1
  1463  00002E                     SetMcuFwVersion@idx:
  1464                           	opt stack 0
  1465  00002E                     DacSetValue@data:
  1466                           	opt stack 0
  1467  00002E                     PLLInitialize@idx_812:
  1468                           	opt stack 0
  1469  00002E                     UpdateRxFreq@data:
  1470                           	opt stack 0
  1471  00002E                     SetCpldFwVersion@idx:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x2D
  1475  00002E                     	ds	1
  1476  00002F                     ??_eval_poly:
  1477  00002F                     FlashSampleWrite@channelNum:
  1478                           	opt stack 0
  1479  00002F                     GetMcuFwVersion@idx:
  1480                           	opt stack 0
  1481  00002F                     ___altoft@exp:
  1482                           	opt stack 0
  1483  00002F                     GetCpldFwVersion@idx:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x2E
  1487  00002F                     	ds	1
  1488  000030                     ___altoft@sign:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x2F
  1492  000030                     	ds	1
  1493  000031                     tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postdec1	equ	0xFE5
  1500                           fsr1l	equ	0xFE1
  1501                           
  1502                           ; 1 bytes @ 0x30
  1503 ;;
  1504 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1505 ;;
  1506 ;; *************** function _main *****************
  1507 ;; Defined at:
  1508 ;;		line 13 in file "main.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1522 ;;      Params:         0       0       0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels required when called:   10
  1528 ;; This function calls:
  1529 ;;		_AdcConvert
  1530 ;;		_BlinkErrorLeds
  1531 ;;		_BlinkOkLeds
  1532 ;;		_CheckFlashPrecentage
  1533 ;;		_InitSystemApplicationManagers
  1534 ;;		_SendSystemStartAck
  1535 ;;		_SetMcuRunTime
  1536 ;;		_SetMcuSystem
  1537 ;;		_keepAliveSignalLed
  1538 ;;		_keepAliveSignalUart
  1539 ;;		_readUartMessage
  1540 ;; This function is called by:
  1541 ;;		Startup code after reset
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text0
  1546  0029A4                     __ptext0:
  1547                           	opt stack 0
  1548  0029A4                     _main:
  1549                           	opt stack 21
  1550                           
  1551                           ;main.c: 16: SetMcuSystem();
  1552                           
  1553                           ;incstack = 0
  1554  0029A4  ECED  F01B         	call	_SetMcuSystem	;wreg free
  1555                           
  1556                           ;main.c: 19: InitSystemApplicationManagers();
  1557  0029A8  EC54  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1558                           
  1559                           ;main.c: 22: SendSystemStartAck();
  1560  0029AC  ECE2  F01B         	call	_SendSystemStartAck	;wreg free
  1561                           
  1562                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1563  0029B0  0E03               	movlw	3
  1564  0029B2  EC03  F015         	call	_BlinkOkLeds
  1565  0029B6                     
  1566                           ;main.c: 28: {
  1567                           ;main.c: 29: readUartMessage();
  1568  0029B6  EC36  F005         	call	_readUartMessage	;wreg free
  1569                           
  1570                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1571  0029BA  0100               	movlb	0	; () banked
  1572  0029BC  05D6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1573  0029BE  A4D8               	btfss	status,2,c
  1574  0029C0  D006               	goto	l1431
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 32: {
  1578                           ;main.c: 34: SetMcuRunTime();
  1579  0029C2  ECF5  F017         	call	_SetMcuRunTime	;wreg free
  1580                           
  1581                           ;main.c: 35: TimerOneSecFlag = 0;
  1582  0029C6  0E00               	movlw	0
  1583  0029C8  0100               	movlb	0	; () banked
  1584  0029CA  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1585                           
  1586                           ;main.c: 36: }
  1587  0029CC  D7F4               	goto	l1430
  1588  0029CE                     l1431:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1592                           
  1593                           ; BSR set to: 0
  1594  0029CE  05D5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1595  0029D0  A4D8               	btfss	status,2,c
  1596  0029D2  D010               	goto	l1433
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 38: {
  1600                           ;main.c: 39: keepAliveSignalLed();
  1601  0029D4  EC61  F01B         	call	_keepAliveSignalLed	;wreg free
  1602                           
  1603                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1604  0029D8  EC21  F011         	call	_CheckFlashPrecentage	;wreg free
  1605  0029DC  06E8               	decf	wreg,f,c
  1606  0029DE  A4D8               	btfss	status,2,c
  1607  0029E0  D003               	goto	l1434
  1608                           
  1609                           ;main.c: 42: {
  1610                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1611  0029E2  0E04               	movlw	4
  1612  0029E4  EC32  F015         	call	_BlinkErrorLeds
  1613  0029E8                     l1434:
  1614                           
  1615                           ;main.c: 44: }
  1616                           ;main.c: 47: AdcConvert();
  1617  0029E8  EC18  F008         	call	_AdcConvert	;wreg free
  1618                           
  1619                           ;main.c: 49: TimerSamplingFlag = 0;
  1620  0029EC  0E00               	movlw	0
  1621  0029EE  0100               	movlb	0	; () banked
  1622  0029F0  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1623                           
  1624                           ;main.c: 50: }
  1625  0029F2  D7E1               	goto	l1430
  1626  0029F4                     l1433:
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1630                           
  1631                           ; BSR set to: 0
  1632  0029F4  05D4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1633  0029F6  A4D8               	btfss	status,2,c
  1634  0029F8  D7DE               	goto	l1430
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 52: {
  1638                           ;main.c: 53: keepAliveSignalUart();
  1639  0029FA  ECDC  F01B         	call	_keepAliveSignalUart	;wreg free
  1640                           
  1641                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1642  0029FE  0E00               	movlw	0
  1643  002A00  0100               	movlb	0	; () banked
  1644  002A02  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1645                           
  1646                           ; BSR set to: 0
  1647                           
  1648                           ; BSR set to: 0
  1649                           
  1650                           ; BSR set to: 0
  1651                           
  1652                           ; BSR set to: 0
  1653  002A04  D7D8               	goto	l1430
  1654  002A06                     __end_of_main:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1l	equ	0xFE1
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _readUartMessage *****************
  1667 ;; Defined at:
  1668 ;;		line 28 in file "EusartApp.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  idx             2    7[BANK1 ] int 
  1673 ;;  chRec           1    9[BANK1 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1683 ;;      Params:         0       0       0       0       0       0       0
  1684 ;;      Locals:         0       0       3       0       0       0       0
  1685 ;;      Temps:          0       0       4       0       0       0       0
  1686 ;;      Totals:         0       0       7       0       0       0       0
  1687 ;;Total ram usage:        7 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    9
  1690 ;; This function calls:
  1691 ;;		_EUSART1_Read
  1692 ;;		_GroupAdc
  1693 ;;		_GroupControlMcu
  1694 ;;		_GroupDAC
  1695 ;;		_GroupFlashMemory
  1696 ;;		_GroupStatusAndVersion
  1697 ;;		_GroupSynthesizers
  1698 ;;		_InitRxMessageParams
  1699 ;;		_ZeroArray
  1700 ;;		_crc8
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text1
  1707  000A6C                     __ptext1:
  1708                           	opt stack 0
  1709  000A6C                     _readUartMessage:
  1710                           	opt stack 21
  1711                           
  1712                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;incstack = 0
  1716  000A6C  0E00               	movlw	0
  1717  000A6E  0101               	movlb	1	; () banked
  1718  000A70  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1719                           
  1720                           ;EusartApp.c: 32: switch(cState)
  1721  000A72  D0DF               	goto	l178
  1722  000A74                     
  1723                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1724                           
  1725                           ; BSR set to: 1
  1726  000A74  0E04               	movlw	4
  1727  000A76  0100               	movlb	0	; () banked
  1728  000A78  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1729  000A7A  0012               	return	
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;EusartApp.c: 38: {
  1733                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1734  000A7C  0E01               	movlw	1
  1735  000A7E  6FD1               	movwf	_cState& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;EusartApp.c: 40: }
  1739                           ;EusartApp.c: 41: return;
  1740                           
  1741                           ; BSR set to: 0
  1742  000A80  0012               	return	
  1743  000A82                     
  1744                           ; BSR set to: 0
  1745                           ;EusartApp.c: 45: InitRxMessageParams();
  1746                           
  1747                           ; BSR set to: 0
  1748  000A82  EC63  F01A         	call	_InitRxMessageParams	;wreg free
  1749                           
  1750                           ;EusartApp.c: 46: msgCount = 0;
  1751  000A86  0E00               	movlw	0
  1752  000A88  0100               	movlb	0	; () banked
  1753  000A8A  6FCA               	movwf	_msgCount& (0+255),b
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1757  000A8C  0E01               	movlw	1
  1758  000A8E  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1759  000A90  D00E               	goto	l183
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;EusartApp.c: 48: {
  1763                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1764  000A92  ECD3  F017         	call	_EUSART1_Read	;wreg free
  1765  000A96  0101               	movlb	1	; () banked
  1766  000A98  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1767                           
  1768                           ; BSR set to: 1
  1769                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1770  000A9A  C1CB  F0D7         	movff	readUartMessage@chRec,_rxMsgQueue
  1771                           
  1772                           ; BSR set to: 1
  1773                           ;EusartApp.c: 51: if(chRec == (0x24))
  1774  000A9E  0E24               	movlw	36
  1775  000AA0  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1776  000AA2  A4D8               	btfss	status,2,c
  1777  000AA4  0012               	return	
  1778                           
  1779                           ; BSR set to: 1
  1780                           ;EusartApp.c: 52: {
  1781                           ;EusartApp.c: 53: cState = READ_GROUP;
  1782  000AA6  0E02               	movlw	2
  1783  000AA8  0100               	movlb	0	; () banked
  1784  000AAA  6FD1               	movwf	_cState& (0+255),b
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;EusartApp.c: 54: }
  1788                           ;EusartApp.c: 55: }
  1789  000AAC  0012               	return	
  1790  000AAE                     l183:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;EusartApp.c: 56: else
  1794                           ;EusartApp.c: 57: {
  1795                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1796                           
  1797                           ; BSR set to: 0
  1798  000AAE  0E00               	movlw	0
  1799  000AB0  6FD1               	movwf	_cState& (0+255),b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;EusartApp.c: 59: }
  1803                           ;EusartApp.c: 61: break;
  1804  000AB2  0012               	return	
  1805  000AB4                     
  1806                           ; BSR set to: 0
  1807                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1808                           
  1809                           ; BSR set to: 0
  1810  000AB4  0E01               	movlw	1
  1811  000AB6  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1812  000AB8  0012               	return	
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;EusartApp.c: 66: {
  1816                           ;EusartApp.c: 67: group = EUSART1_Read();
  1817  000ABA  ECD3  F017         	call	_EUSART1_Read	;wreg free
  1818  000ABE  0100               	movlb	0	; () banked
  1819  000AC0  6FD0               	movwf	_group& (0+255),b
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1823  000AC2  C0D0  F0D8         	movff	_group,_rxMsgQueue+1
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1827  000AC6  0E03               	movlw	3
  1828  000AC8  6FD1               	movwf	_cState& (0+255),b
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;EusartApp.c: 70: }
  1832                           ;EusartApp.c: 71: break;
  1833  000ACA  0012               	return	
  1834  000ACC                     
  1835                           ; BSR set to: 0
  1836                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1837                           
  1838                           ; BSR set to: 0
  1839  000ACC  0E01               	movlw	1
  1840  000ACE  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1841  000AD0  0012               	return	
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;EusartApp.c: 76: {
  1845                           ;EusartApp.c: 77: request = EUSART1_Read();
  1846  000AD2  ECD3  F017         	call	_EUSART1_Read	;wreg free
  1847  000AD6  0100               	movlb	0	; () banked
  1848  000AD8  6FCF               	movwf	_request& (0+255),b
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1852  000ADA  C0CF  F0D9         	movff	_request,_rxMsgQueue+2
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1856  000ADE  0E04               	movlw	4
  1857  000AE0  6FD1               	movwf	_cState& (0+255),b
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;EusartApp.c: 80: }
  1861                           ;EusartApp.c: 81: break;
  1862  000AE2  0012               	return	
  1863  000AE4                     
  1864                           ; BSR set to: 0
  1865                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1866                           
  1867                           ; BSR set to: 0
  1868  000AE4  0E01               	movlw	1
  1869  000AE6  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1870  000AE8  0012               	return	
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;EusartApp.c: 85: {
  1874                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1875  000AEA  ECD3  F017         	call	_EUSART1_Read	;wreg free
  1876  000AEE  0100               	movlb	0	; () banked
  1877  000AF0  6FCE               	movwf	_dataSize& (0+255),b
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1881  000AF2  C0CE  F0DA         	movff	_dataSize,_rxMsgQueue+3
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;EusartApp.c: 88: if(dataSize == 0)
  1885  000AF6  51CE               	movf	_dataSize& (0+255),w,b
  1886  000AF8  A4D8               	btfss	status,2,c
  1887  000AFA  D003               	goto	l193
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;EusartApp.c: 89: {
  1891                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1892  000AFC  0E06               	movlw	6
  1893  000AFE  6FD1               	movwf	_cState& (0+255),b
  1894                           
  1895                           ;EusartApp.c: 91: }
  1896  000B00  0012               	return	
  1897  000B02                     l193:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;EusartApp.c: 92: else
  1901                           ;EusartApp.c: 93: {
  1902                           ;EusartApp.c: 94: cState = READ_DATA;
  1903                           
  1904                           ; BSR set to: 0
  1905  000B02  0E05               	movlw	5
  1906  000B04  6FD1               	movwf	_cState& (0+255),b
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;EusartApp.c: 95: }
  1910                           ;EusartApp.c: 97: }
  1911                           ;EusartApp.c: 99: break;
  1912                           
  1913                           ; BSR set to: 0
  1914  000B06  0012               	return	
  1915  000B08                     
  1916                           ; BSR set to: 0
  1917                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1918                           
  1919                           ; BSR set to: 0
  1920  000B08  51CE               	movf	_dataSize& (0+255),w,b
  1921  000B0A  5DD2               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1922  000B0C  A0D8               	btfss	status,0,c
  1923  000B0E  0012               	return	
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;EusartApp.c: 104: {
  1927                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1928  000B10  0EAE               	movlw	low _rxMsgData
  1929  000B12  6E20               	movwf	ZeroArray@array,c
  1930  000B14  0E01               	movlw	high _rxMsgData
  1931  000B16  6E21               	movwf	ZeroArray@array+1,c
  1932  000B18  0E00               	movlw	0
  1933  000B1A  6E23               	movwf	ZeroArray@size+1,c
  1934  000B1C  0E14               	movlw	20
  1935  000B1E  6E22               	movwf	ZeroArray@size,c
  1936  000B20  EC2A  F01B         	call	_ZeroArray	;wreg free
  1937                           
  1938                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1939  000B24  0E00               	movlw	0
  1940  000B26  0101               	movlb	1	; () banked
  1941  000B28  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  1942  000B2A  0E00               	movlw	0
  1943  000B2C  6FC9               	movwf	readUartMessage@idx& (0+255),b
  1944  000B2E  D022               	goto	l197
  1945  000B30                     
  1946                           ; BSR set to: 1
  1947                           ;EusartApp.c: 108: {
  1948                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1949                           
  1950                           ; BSR set to: 1
  1951  000B30  ECD3  F017         	call	_EUSART1_Read	;wreg free
  1952  000B34  0101               	movlb	1	; () banked
  1953  000B36  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1954                           
  1955                           ; BSR set to: 1
  1956                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1957  000B38  0100               	movlb	0	; () banked
  1958  000B3A  51CA               	movf	_msgCount& (0+255),w,b
  1959  000B3C  0101               	movlb	1	; () banked
  1960  000B3E  6FC5               	movwf	??_readUartMessage& (0+255),b
  1961  000B40  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1962  000B42  0E04               	movlw	4
  1963  000B44  27C5               	addwf	??_readUartMessage& (0+255),f,b
  1964  000B46  0E00               	movlw	0
  1965  000B48  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1966  000B4A  0ED7               	movlw	low _rxMsgQueue
  1967  000B4C  25C5               	addwf	??_readUartMessage& (0+255),w,b
  1968  000B4E  6ED9               	movwf	fsr2l,c
  1969  000B50  0E00               	movlw	high _rxMsgQueue
  1970  000B52  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1971  000B54  6EDA               	movwf	fsr2h,c
  1972  000B56  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1973                           
  1974                           ; BSR set to: 1
  1975  000B5A  0100               	movlb	0	; () banked
  1976  000B5C  2BCA               	incf	_msgCount& (0+255),f,b
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  1980  000B5E  0EAE               	movlw	low _rxMsgData
  1981  000B60  0101               	movlb	1	; () banked
  1982  000B62  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  1983  000B64  6ED9               	movwf	fsr2l,c
  1984  000B66  0E01               	movlw	high _rxMsgData
  1985  000B68  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  1986  000B6A  6EDA               	movwf	fsr2h,c
  1987  000B6C  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1988                           
  1989                           ; BSR set to: 1
  1990  000B70  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  1991  000B72  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  1992  000B74                     l197:
  1993                           
  1994                           ; BSR set to: 1
  1995                           
  1996                           ; BSR set to: 1
  1997  000B74  0100               	movlb	0	; () banked
  1998  000B76  51CE               	movf	_dataSize& (0+255),w,b
  1999  000B78  0101               	movlb	1	; () banked
  2000  000B7A  6FC5               	movwf	??_readUartMessage& (0+255),b
  2001  000B7C  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2002  000B7E  51C5               	movf	??_readUartMessage& (0+255),w,b
  2003  000B80  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  2004  000B82  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2005  000B84  0A80               	xorlw	128
  2006  000B86  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2007  000B88  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2008  000B8A  0A80               	xorlw	128
  2009  000B8C  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2010  000B8E  A0D8               	btfss	status,0,c
  2011  000B90  D7CF               	goto	l198
  2012                           
  2013                           ; BSR set to: 1
  2014                           ;EusartApp.c: 112: }
  2015                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2016                           
  2017                           ; BSR set to: 1
  2018  000B92  0E06               	movlw	6
  2019  000B94  0100               	movlb	0	; () banked
  2020  000B96  6FD1               	movwf	_cState& (0+255),b
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;EusartApp.c: 115: }
  2024                           ;EusartApp.c: 116: break;
  2025  000B98  0012               	return	
  2026  000B9A                     
  2027                           ; BSR set to: 0
  2028                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2029                           
  2030                           ; BSR set to: 0
  2031  000B9A  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2032  000B9C  B4D8               	btfsc	status,2,c
  2033  000B9E  0012               	return	
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;EusartApp.c: 120: {
  2037                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2038  000BA0  ECD3  F017         	call	_EUSART1_Read	;wreg free
  2039  000BA4  0100               	movlb	0	; () banked
  2040  000BA6  6FCB               	movwf	_crcGiven& (0+255),b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2044  000BA8  0ED7               	movlw	low _rxMsgQueue
  2045  000BAA  6E18               	movwf	crc8@dataArray,c
  2046  000BAC  0E00               	movlw	high _rxMsgQueue
  2047  000BAE  6E19               	movwf	crc8@dataArray+1,c
  2048  000BB0  0E04               	movlw	4
  2049  000BB2  25CA               	addwf	_msgCount& (0+255),w,b
  2050  000BB4  6E1A               	movwf	crc8@dataSize,c
  2051  000BB6  6A1B               	clrf	crc8@dataSize+1,c
  2052  000BB8  0E00               	movlw	0
  2053  000BBA  221B               	addwfc	crc8@dataSize+1,f,c
  2054  000BBC  EC42  F017         	call	_crc8	;wreg free
  2055  000BC0  0100               	movlb	0	; () banked
  2056  000BC2  6FCC               	movwf	_crcCalc& (0+255),b
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2060  000BC4  51CC               	movf	_crcCalc& (0+255),w,b
  2061  000BC6  19CB               	xorwf	_crcGiven& (0+255),w,b
  2062  000BC8  A4D8               	btfss	status,2,c
  2063  000BCA  D003               	goto	l202
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;EusartApp.c: 125: {
  2067                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2068  000BCC  0E07               	movlw	7
  2069  000BCE  6FD1               	movwf	_cState& (0+255),b
  2070                           
  2071                           ;EusartApp.c: 127: }
  2072  000BD0  0012               	return	
  2073  000BD2                     l202:
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;EusartApp.c: 128: else
  2077                           ;EusartApp.c: 129: {
  2078                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2079                           
  2080                           ; BSR set to: 0
  2081  000BD2  0E00               	movlw	0
  2082  000BD4  6FD1               	movwf	_cState& (0+255),b
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;EusartApp.c: 131: }
  2086                           ;EusartApp.c: 132: }
  2087                           ;EusartApp.c: 133: break;
  2088                           
  2089                           ; BSR set to: 0
  2090  000BD6  0012               	return	
  2091  000BD8                     
  2092                           ; BSR set to: 0
  2093                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2094                           
  2095                           ; BSR set to: 0
  2096  000BD8  0EFE               	movlw	254
  2097  000BDA  0101               	movlb	1	; () banked
  2098  000BDC  6FC5               	movwf	??_readUartMessage& (0+255),b
  2099  000BDE  0EFF               	movlw	255
  2100  000BE0  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2101  000BE2  0100               	movlb	0	; () banked
  2102  000BE4  51D0               	movf	_group& (0+255),w,b
  2103  000BE6  0101               	movlb	1	; () banked
  2104  000BE8  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2105  000BEA  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2106  000BEC  90D8               	bcf	status,0,c
  2107  000BEE  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2108  000BF0  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2109  000BF2  51C5               	movf	??_readUartMessage& (0+255),w,b
  2110  000BF4  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2111  000BF6  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2112  000BF8  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2113  000BFA  0EEB               	movlw	low _groupsArray
  2114  000BFC  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2115  000BFE  6ED9               	movwf	fsr2l,c
  2116  000C00  0E00               	movlw	high _groupsArray
  2117  000C02  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2118  000C04  6EDA               	movwf	fsr2h,c
  2119  000C06  D801               	call	u7948
  2120  000C08  D010               	goto	u7949
  2121  000C0A                     u7948:
  2122  000C0A  0005               	push	
  2123  000C0C  6EFA               	movwf	pclath,c
  2124  000C0E  50DE               	movf	postinc2,w,c
  2125  000C10  6EFD               	movwf	tosl,c
  2126  000C12  50DE               	movf	postinc2,w,c
  2127  000C14  6EFE               	movwf	tosh,c
  2128  000C16  50F8               	movf	tblptru,w,c
  2129  000C18  6EFF               	movwf	tosu,c
  2130  000C1A  50FA               	movf	pclath,w,c
  2131  000C1C  0EAE               	movlw	low _rxMsgData
  2132  000C1E  6FC2               	movwf	GroupDAC@data& (0+255),b
  2133  000C20  0E01               	movlw	high _rxMsgData
  2134  000C22  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2135  000C24  0100               	movlb	0	; () banked
  2136  000C26  51CF               	movf	_request& (0+255),w,b
  2137  000C28  0012               	return		;indir
  2138  000C2A                     u7949:
  2139                           
  2140                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2141  000C2A  0E00               	movlw	0
  2142  000C2C  0100               	movlb	0	; () banked
  2143  000C2E  6FD1               	movwf	_cState& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;EusartApp.c: 139: }
  2147                           
  2148                           ;EusartApp.c: 138: break;
  2149  000C30  0012               	return	
  2150  000C32                     l178:
  2151                           
  2152                           ; BSR set to: 0
  2153  000C32  0100               	movlb	0	; () banked
  2154  000C34  51D1               	movf	_cState& (0+255),w,b
  2155                           
  2156                           ; Switch size 1, requested type "space"
  2157                           ; Number of cases is 8, Range of values is 0 to 7
  2158                           ; switch strategies available:
  2159                           ; Name         Instructions Cycles
  2160                           ; simple_byte           25    13 (average)
  2161                           ;	Chosen strategy is simple_byte
  2162  000C36  0A00               	xorlw	0	; case 0
  2163  000C38  B4D8               	btfsc	status,2,c
  2164  000C3A  D71C               	goto	l179
  2165  000C3C  0A01               	xorlw	1	; case 1
  2166  000C3E  B4D8               	btfsc	status,2,c
  2167  000C40  D720               	goto	l182
  2168  000C42  0A03               	xorlw	3	; case 2
  2169  000C44  B4D8               	btfsc	status,2,c
  2170  000C46  D736               	goto	l187
  2171  000C48  0A01               	xorlw	1	; case 3
  2172  000C4A  B4D8               	btfsc	status,2,c
  2173  000C4C  D73F               	goto	l189
  2174  000C4E  0A07               	xorlw	7	; case 4
  2175  000C50  B4D8               	btfsc	status,2,c
  2176  000C52  D748               	goto	l191
  2177  000C54  0A01               	xorlw	1	; case 5
  2178  000C56  B4D8               	btfsc	status,2,c
  2179  000C58  D757               	goto	l195
  2180  000C5A  0A03               	xorlw	3	; case 6
  2181  000C5C  B4D8               	btfsc	status,2,c
  2182  000C5E  D79D               	goto	l200
  2183  000C60  0A01               	xorlw	1	; case 7
  2184  000C62  A4D8               	btfss	status,2,c
  2185  000C64  0012               	return	
  2186  000C66  D7B8               	goto	l204
  2187  000C68                     __end_of_readUartMessage:
  2188                           	opt stack 0
  2189                           tosu	equ	0xFFF
  2190                           tosh	equ	0xFFE
  2191                           tosl	equ	0xFFD
  2192                           pclath	equ	0xFFA
  2193                           tblptru	equ	0xFF8
  2194                           tblptrh	equ	0xFF7
  2195                           tblptrl	equ	0xFF6
  2196                           tablat	equ	0xFF5
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1l	equ	0xFE1
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           fsr2h	equ	0xFDA
  2204                           fsr2l	equ	0xFD9
  2205                           status	equ	0xFD8
  2206                           
  2207 ;; *************** function _InitRxMessageParams *****************
  2208 ;; Defined at:
  2209 ;;		line 142 in file "EusartApp.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         0       0       0       0       0       0       0
  2224 ;;      Locals:         0       0       0       0       0       0       0
  2225 ;;      Temps:          0       0       0       0       0       0       0
  2226 ;;      Totals:         0       0       0       0       0       0       0
  2227 ;;Total ram usage:        0 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    5
  2230 ;; This function calls:
  2231 ;;		_ZeroArray
  2232 ;; This function is called by:
  2233 ;;		_readUartMessage
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text2
  2238  0034C6                     __ptext2:
  2239                           	opt stack 0
  2240  0034C6                     _InitRxMessageParams:
  2241                           	opt stack 24
  2242                           
  2243                           ;EusartApp.c: 146: dataSize = 0;
  2244                           
  2245                           ;incstack = 0
  2246  0034C6  0E00               	movlw	0
  2247  0034C8  0100               	movlb	0	; () banked
  2248  0034CA  6FCE               	movwf	_dataSize& (0+255),b
  2249                           
  2250                           ;EusartApp.c: 147: crcCalc = 0;
  2251  0034CC  0E00               	movlw	0
  2252  0034CE  6FCC               	movwf	_crcCalc& (0+255),b
  2253                           
  2254                           ;EusartApp.c: 148: crcGiven = 0;
  2255  0034D0  0E00               	movlw	0
  2256  0034D2  6FCB               	movwf	_crcGiven& (0+255),b
  2257                           
  2258                           ;EusartApp.c: 149: msgCount = 0;
  2259  0034D4  0E00               	movlw	0
  2260  0034D6  6FCA               	movwf	_msgCount& (0+255),b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2264  0034D8  0ED7               	movlw	low _rxMsgQueue
  2265  0034DA  6E20               	movwf	ZeroArray@array,c
  2266  0034DC  0E00               	movlw	high _rxMsgQueue
  2267  0034DE  6E21               	movwf	ZeroArray@array+1,c
  2268  0034E0  0E00               	movlw	0
  2269  0034E2  6E23               	movwf	ZeroArray@size+1,c
  2270  0034E4  0E14               	movlw	20
  2271  0034E6  6E22               	movwf	ZeroArray@size,c
  2272  0034E8  EC2A  F01B         	call	_ZeroArray
  2273  0034EC  0012               	return		;funcret
  2274  0034EE                     __end_of_InitRxMessageParams:
  2275                           	opt stack 0
  2276                           tosu	equ	0xFFF
  2277                           tosh	equ	0xFFE
  2278                           tosl	equ	0xFFD
  2279                           pclath	equ	0xFFA
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           fsr2h	equ	0xFDA
  2291                           fsr2l	equ	0xFD9
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _GroupDAC *****************
  2295 ;; Defined at:
  2296 ;;		line 133 in file "MessageFunctions.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  request         1    wreg     enum E12
  2299 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2300 ;;		 -> rxMsgData(20), 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  request         1   95[BANK0 ] enum E12
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2312 ;;      Params:         0       0       2       0       0       0       0
  2313 ;;      Locals:         0       1       0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0
  2315 ;;      Totals:         0       1       2       0       0       0       0
  2316 ;;Total ram usage:        3 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    8
  2319 ;; This function calls:
  2320 ;;		_DacSetValue
  2321 ;; This function is called by:
  2322 ;;		_readUartMessage
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text3
  2327  0035F8                     __ptext3:
  2328                           	opt stack 0
  2329  0035F8                     _GroupDAC:
  2330                           	opt stack 21
  2331                           
  2332                           ;incstack = 0
  2333                           ;GroupDAC@request stored from wreg
  2334  0035F8  0100               	movlb	0	; () banked
  2335  0035FA  6FBF               	movwf	GroupDAC@request& (0+255),b
  2336                           
  2337                           ;MessageFunctions.c: 135: switch (request)
  2338  0035FC  D007               	goto	l1226
  2339  0035FE                     
  2340                           ;MessageFunctions.c: 138: DacSetValue(data);
  2341  0035FE  C1C2  F02E         	movff	GroupDAC@data,DacSetValue@data
  2342  003602  C1C3  F02F         	movff	GroupDAC@data+1,DacSetValue@data+1
  2343  003606  EC81  F019         	call	_DacSetValue	;wreg free
  2344                           
  2345                           ;MessageFunctions.c: 143: }
  2346                           
  2347                           ;MessageFunctions.c: 142: break;
  2348                           
  2349                           ;MessageFunctions.c: 141: default:
  2350                           
  2351                           ;MessageFunctions.c: 139: break;
  2352  00360A  0012               	return	
  2353  00360C                     l1226:
  2354  00360C  0100               	movlb	0	; () banked
  2355  00360E  51BF               	movf	GroupDAC@request& (0+255),w,b
  2356                           
  2357                           ; Switch size 1, requested type "space"
  2358                           ; Number of cases is 1, Range of values is 97 to 97
  2359                           ; switch strategies available:
  2360                           ; Name         Instructions Cycles
  2361                           ; simple_byte            4     3 (average)
  2362                           ;	Chosen strategy is simple_byte
  2363  003610  0A61               	xorlw	97	; case 97
  2364  003612  A4D8               	btfss	status,2,c
  2365  003614  0012               	return	
  2366  003616  D7F3               	goto	l1227
  2367  003618                     __end_of_GroupDAC:
  2368                           	opt stack 0
  2369                           tosu	equ	0xFFF
  2370                           tosh	equ	0xFFE
  2371                           tosl	equ	0xFFD
  2372                           pclath	equ	0xFFA
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           postinc2	equ	0xFDE
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _GroupFlashMemory *****************
  2388 ;; Defined at:
  2389 ;;		line 112 in file "MessageFunctions.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  request         1    wreg     enum E12
  2392 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  request         1    2[BANK1 ] enum E12
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2404 ;;      Params:         0       0       2       0       0       0       0
  2405 ;;      Locals:         0       0       1       0       0       0       0
  2406 ;;      Temps:          0       1       0       0       0       0       0
  2407 ;;      Totals:         0       1       3       0       0       0       0
  2408 ;;Total ram usage:        4 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    7
  2411 ;; This function calls:
  2412 ;;		_FlashEreaseMem
  2413 ;;		_FlashReadCondition
  2414 ;;		_FlashReadUart
  2415 ;; This function is called by:
  2416 ;;		_readUartMessage
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text4
  2421  002F62                     __ptext4:
  2422                           	opt stack 0
  2423  002F62                     _GroupFlashMemory:
  2424                           	opt stack 22
  2425                           
  2426                           ;incstack = 0
  2427                           ;GroupFlashMemory@request stored from wreg
  2428  002F62  0101               	movlb	1	; () banked
  2429  002F64  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2430                           
  2431                           ;MessageFunctions.c: 114: switch (request)
  2432  002F66  D013               	goto	l1217
  2433  002F68                     
  2434                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2435  002F68  ECF0  F016         	call	_FlashEreaseMem	;wreg free
  2436                           
  2437                           ;MessageFunctions.c: 118: break;
  2438  002F6C  0012               	return	
  2439  002F6E                     
  2440                           ;MessageFunctions.c: 121: FlashReadCondition();
  2441  002F6E  ECDA  F00B         	call	_FlashReadCondition	;wreg free
  2442                           
  2443                           ;MessageFunctions.c: 122: break;
  2444  002F72  0012               	return	
  2445  002F74                     
  2446                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2447  002F74  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2448  002F78  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2449  002F7C  50DF               	movf	indf2,w,c
  2450  002F7E  0100               	movlb	0	; () banked
  2451  002F80  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2452  002F82  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2453  002F84  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2454  002F86  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2455  002F88  EC55  F003         	call	_FlashReadUart	;wreg free
  2456                           
  2457                           ;MessageFunctions.c: 130: }
  2458                           
  2459                           ;MessageFunctions.c: 129: break;
  2460                           
  2461                           ;MessageFunctions.c: 128: default:
  2462                           
  2463                           ;MessageFunctions.c: 126: break;
  2464  002F8C  0012               	return	
  2465  002F8E                     l1217:
  2466  002F8E  0101               	movlb	1	; () banked
  2467  002F90  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2468                           
  2469                           ; Switch size 1, requested type "space"
  2470                           ; Number of cases is 3, Range of values is 81 to 83
  2471                           ; switch strategies available:
  2472                           ; Name         Instructions Cycles
  2473                           ; simple_byte           10     6 (average)
  2474                           ;	Chosen strategy is simple_byte
  2475  002F92  0A51               	xorlw	81	; case 81
  2476  002F94  B4D8               	btfsc	status,2,c
  2477  002F96  D7E8               	goto	l1218
  2478  002F98  0A03               	xorlw	3	; case 82
  2479  002F9A  B4D8               	btfsc	status,2,c
  2480  002F9C  D7E8               	goto	l1220
  2481  002F9E  0A01               	xorlw	1	; case 83
  2482  002FA0  A4D8               	btfss	status,2,c
  2483  002FA2  0012               	return	
  2484  002FA4  D7E7               	goto	l1221
  2485  002FA6                     __end_of_GroupFlashMemory:
  2486                           	opt stack 0
  2487                           tosu	equ	0xFFF
  2488                           tosh	equ	0xFFE
  2489                           tosl	equ	0xFFD
  2490                           pclath	equ	0xFFA
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1l	equ	0xFE1
  2499                           indf2	equ	0xFDF
  2500                           postinc2	equ	0xFDE
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _GroupAdc *****************
  2506 ;; Defined at:
  2507 ;;		line 67 in file "MessageFunctions.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  request         1    wreg     enum E12
  2510 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  request         1   95[BANK0 ] enum E12
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2522 ;;      Params:         0       0       2       0       0       0       0
  2523 ;;      Locals:         0       1       0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0
  2525 ;;      Totals:         0       1       2       0       0       0       0
  2526 ;;Total ram usage:        3 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    7
  2529 ;; This function calls:
  2530 ;;		_SetAdcOperationMode
  2531 ;;		_SetChannelMode
  2532 ;;		_SetConversionResultFormat
  2533 ;; This function is called by:
  2534 ;;		_readUartMessage
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text5
  2539  002ED2                     __ptext5:
  2540                           	opt stack 0
  2541  002ED2                     _GroupAdc:
  2542                           	opt stack 22
  2543                           
  2544                           ;incstack = 0
  2545                           ;GroupAdc@request stored from wreg
  2546  002ED2  0100               	movlb	0	; () banked
  2547  002ED4  6FBF               	movwf	GroupAdc@request& (0+255),b
  2548                           
  2549                           ;MessageFunctions.c: 69: switch (request)
  2550  002ED6  D015               	goto	l1198
  2551  002ED8                     
  2552                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2553  002ED8  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2554  002EDC  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2555  002EE0  ECD6  F01B         	call	_SetAdcOperationMode	;wreg free
  2556                           
  2557                           ;MessageFunctions.c: 73: break;
  2558  002EE4  0012               	return	
  2559  002EE6                     
  2560                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2561  002EE6  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2562  002EEA  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2563  002EEE  EC06  F01A         	call	_SetChannelMode	;wreg free
  2564                           
  2565                           ;MessageFunctions.c: 77: break;
  2566  002EF2  0012               	return	
  2567  002EF4                     
  2568                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2569  002EF4  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2570  002EF8  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2571  002EFC  ECD0  F01B         	call	_SetConversionResultFormat	;wreg free
  2572                           
  2573                           ;MessageFunctions.c: 85: }
  2574                           
  2575                           ;MessageFunctions.c: 84: break;
  2576                           
  2577                           ;MessageFunctions.c: 83: default:
  2578                           
  2579                           ;MessageFunctions.c: 81: break;
  2580  002F00  0012               	return	
  2581  002F02                     l1198:
  2582  002F02  0100               	movlb	0	; () banked
  2583  002F04  51BF               	movf	GroupAdc@request& (0+255),w,b
  2584                           
  2585                           ; Switch size 1, requested type "space"
  2586                           ; Number of cases is 3, Range of values is 49 to 51
  2587                           ; switch strategies available:
  2588                           ; Name         Instructions Cycles
  2589                           ; simple_byte           10     6 (average)
  2590                           ;	Chosen strategy is simple_byte
  2591  002F06  0A31               	xorlw	49	; case 49
  2592  002F08  B4D8               	btfsc	status,2,c
  2593  002F0A  D7E6               	goto	l1199
  2594  002F0C  0A03               	xorlw	3	; case 50
  2595  002F0E  B4D8               	btfsc	status,2,c
  2596  002F10  D7EA               	goto	l1201
  2597  002F12  0A01               	xorlw	1	; case 51
  2598  002F14  A4D8               	btfss	status,2,c
  2599  002F16  0012               	return	
  2600  002F18  D7ED               	goto	l1202
  2601  002F1A                     __end_of_GroupAdc:
  2602                           	opt stack 0
  2603                           tosu	equ	0xFFF
  2604                           tosh	equ	0xFFE
  2605                           tosl	equ	0xFFD
  2606                           pclath	equ	0xFFA
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _GroupStatusAndVersion *****************
  2622 ;; Defined at:
  2623 ;;		line 38 in file "MessageFunctions.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  request         1    wreg     enum E12
  2626 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  request         1   95[BANK0 ] enum E12
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2638 ;;      Params:         0       0       2       0       0       0       0
  2639 ;;      Locals:         0       1       0       0       0       0       0
  2640 ;;      Temps:          0       0       0       0       0       0       0
  2641 ;;      Totals:         0       1       2       0       0       0       0
  2642 ;;Total ram usage:        3 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    7
  2645 ;; This function calls:
  2646 ;;		_GetCpldFwVersion
  2647 ;;		_GetMcuFwVersion
  2648 ;;		_GetMcuRunTime
  2649 ;;		_SetCpldFwVersion
  2650 ;;		_SetMcuFwVersion
  2651 ;; This function is called by:
  2652 ;;		_readUartMessage
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text6
  2657  002BD6                     __ptext6:
  2658                           	opt stack 0
  2659  002BD6                     _GroupStatusAndVersion:
  2660                           	opt stack 22
  2661                           
  2662                           ;incstack = 0
  2663                           ;GroupStatusAndVersion@request stored from wreg
  2664  002BD6  0100               	movlb	0	; () banked
  2665  002BD8  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2666                           
  2667                           ;MessageFunctions.c: 40: switch (request)
  2668  002BDA  D017               	goto	l1187
  2669  002BDC                     
  2670                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2671  002BDC  EC7E  F013         	call	_GetMcuFwVersion	;wreg free
  2672                           
  2673                           ;MessageFunctions.c: 44: break;
  2674  002BE0  0012               	return	
  2675  002BE2                     
  2676                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2677  002BE2  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2678  002BE6  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2679  002BEA  EC4B  F019         	call	_SetMcuFwVersion	;wreg free
  2680                           
  2681                           ;MessageFunctions.c: 48: break;
  2682  002BEE  0012               	return	
  2683  002BF0                     
  2684                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2685  002BF0  EC65  F012         	call	_GetCpldFwVersion	;wreg free
  2686                           
  2687                           ;MessageFunctions.c: 52: break;
  2688  002BF4  0012               	return	
  2689  002BF6                     
  2690                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2691  002BF6  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2692  002BFA  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2693  002BFE  EC38  F018         	call	_SetCpldFwVersion	;wreg free
  2694                           
  2695                           ;MessageFunctions.c: 56: break;
  2696  002C02  0012               	return	
  2697  002C04                     
  2698                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2699  002C04  EC48  F00E         	call	_GetMcuRunTime	;wreg free
  2700                           
  2701                           ;MessageFunctions.c: 64: }
  2702                           
  2703                           ;MessageFunctions.c: 63: break;
  2704                           
  2705                           ;MessageFunctions.c: 62: default:
  2706                           
  2707                           ;MessageFunctions.c: 60: break;
  2708  002C08  0012               	return	
  2709  002C0A                     l1187:
  2710  002C0A  0100               	movlb	0	; () banked
  2711  002C0C  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2712                           
  2713                           ; Switch size 1, requested type "space"
  2714                           ; Number of cases is 5, Range of values is 33 to 37
  2715                           ; switch strategies available:
  2716                           ; Name         Instructions Cycles
  2717                           ; simple_byte           16     9 (average)
  2718                           ;	Chosen strategy is simple_byte
  2719  002C0E  0A21               	xorlw	33	; case 33
  2720  002C10  B4D8               	btfsc	status,2,c
  2721  002C12  D7F8               	goto	l1193
  2722  002C14  0A03               	xorlw	3	; case 34
  2723  002C16  B4D8               	btfsc	status,2,c
  2724  002C18  D7E1               	goto	l1188
  2725  002C1A  0A01               	xorlw	1	; case 35
  2726  002C1C  B4D8               	btfsc	status,2,c
  2727  002C1E  D7E8               	goto	l1191
  2728  002C20  0A07               	xorlw	7	; case 36
  2729  002C22  B4D8               	btfsc	status,2,c
  2730  002C24  D7DE               	goto	l1190
  2731  002C26  0A01               	xorlw	1	; case 37
  2732  002C28  A4D8               	btfss	status,2,c
  2733  002C2A  0012               	return	
  2734  002C2C  D7E4               	goto	l1192
  2735  002C2E                     __end_of_GroupStatusAndVersion:
  2736                           	opt stack 0
  2737                           tosu	equ	0xFFF
  2738                           tosh	equ	0xFFE
  2739                           tosl	equ	0xFFD
  2740                           pclath	equ	0xFFA
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1l	equ	0xFE1
  2749                           indf2	equ	0xFDF
  2750                           postinc2	equ	0xFDE
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function _GroupControlMcu *****************
  2756 ;; Defined at:
  2757 ;;		line 11 in file "MessageFunctions.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  request         1    wreg     enum E12
  2760 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  request         1   95[BANK0 ] enum E12
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2772 ;;      Params:         0       0       2       0       0       0       0
  2773 ;;      Locals:         0       1       0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0
  2775 ;;      Totals:         0       1       2       0       0       0       0
  2776 ;;Total ram usage:        3 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    7
  2779 ;; This function calls:
  2780 ;;		_ResetCpld
  2781 ;;		_ResetMcu
  2782 ;;		_testLeds
  2783 ;; This function is called by:
  2784 ;;		_readUartMessage
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text7
  2789  003136                     __ptext7:
  2790                           	opt stack 0
  2791  003136                     _GroupControlMcu:
  2792                           	opt stack 22
  2793                           
  2794                           ;incstack = 0
  2795                           ;GroupControlMcu@request stored from wreg
  2796  003136  0100               	movlb	0	; () banked
  2797  003138  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2798                           
  2799                           ;MessageFunctions.c: 13: switch (request)
  2800  00313A  D009               	goto	l1176
  2801  00313C                     
  2802                           ;MessageFunctions.c: 16: testLeds();
  2803  00313C  EC35  F014         	call	_testLeds	;wreg free
  2804                           
  2805                           ;MessageFunctions.c: 17: break;
  2806  003140  0012               	return	
  2807  003142                     
  2808                           ;MessageFunctions.c: 20: ResetMcu();
  2809  003142  ECAE  F01B         	call	_ResetMcu	;wreg free
  2810                           
  2811                           ;MessageFunctions.c: 21: break;
  2812  003146  0012               	return	
  2813  003148                     
  2814                           ;MessageFunctions.c: 24: ResetCpld();
  2815  003148  ECCA  F01B         	call	_ResetCpld	;wreg free
  2816                           
  2817                           ;MessageFunctions.c: 35: }
  2818                           
  2819                           ;MessageFunctions.c: 34: break;
  2820                           
  2821                           ;MessageFunctions.c: 33: default:
  2822                           
  2823                           ;MessageFunctions.c: 31: break;
  2824                           
  2825                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2826                           
  2827                           ;MessageFunctions.c: 28: break;
  2828                           
  2829                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2830                           
  2831                           ;MessageFunctions.c: 25: break;
  2832  00314C  0012               	return	
  2833  00314E                     l1176:
  2834  00314E  0100               	movlb	0	; () banked
  2835  003150  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2836                           
  2837                           ; Switch size 1, requested type "space"
  2838                           ; Number of cases is 5, Range of values is 17 to 21
  2839                           ; switch strategies available:
  2840                           ; Name         Instructions Cycles
  2841                           ; simple_byte           16     9 (average)
  2842                           ;	Chosen strategy is simple_byte
  2843  003152  0A11               	xorlw	17	; case 17
  2844  003154  B4D8               	btfsc	status,2,c
  2845  003156  D7F5               	goto	l1179
  2846  003158  0A03               	xorlw	3	; case 18
  2847  00315A  B4D8               	btfsc	status,2,c
  2848  00315C  D7F5               	goto	l1180
  2849  00315E  0A01               	xorlw	1	; case 19
  2850  003160  B4D8               	btfsc	status,2,c
  2851  003162  0012               	return	
  2852  003164  0A07               	xorlw	7	; case 20
  2853  003166  B4D8               	btfsc	status,2,c
  2854  003168  0012               	return	
  2855  00316A  0A01               	xorlw	1	; case 21
  2856  00316C  A4D8               	btfss	status,2,c
  2857  00316E  0012               	return	
  2858  003170  D7E5               	goto	l1177
  2859  003172                     __end_of_GroupControlMcu:
  2860                           	opt stack 0
  2861                           tosu	equ	0xFFF
  2862                           tosh	equ	0xFFE
  2863                           tosl	equ	0xFFD
  2864                           pclath	equ	0xFFA
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1l	equ	0xFE1
  2873                           indf2	equ	0xFDF
  2874                           postinc2	equ	0xFDE
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _GroupSynthesizers *****************
  2880 ;; Defined at:
  2881 ;;		line 87 in file "MessageFunctions.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  request         1    wreg     enum E12
  2884 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  request         1   95[BANK0 ] enum E12
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2896 ;;      Params:         0       0       2       0       0       0       0
  2897 ;;      Locals:         0       1       0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0
  2899 ;;      Totals:         0       1       2       0       0       0       0
  2900 ;;Total ram usage:        3 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    8
  2903 ;; This function calls:
  2904 ;;		_PLLUartInitialize
  2905 ;;		_UpdateRxFreq
  2906 ;;		_UpdateTxFreq
  2907 ;; This function is called by:
  2908 ;;		_readUartMessage
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text8
  2913  002AC2                     __ptext8:
  2914                           	opt stack 0
  2915  002AC2                     _GroupSynthesizers:
  2916                           	opt stack 21
  2917                           
  2918                           ;incstack = 0
  2919                           ;GroupSynthesizers@request stored from wreg
  2920  002AC2  0100               	movlb	0	; () banked
  2921  002AC4  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2922                           
  2923                           ;MessageFunctions.c: 89: switch (request)
  2924  002AC6  D01C               	goto	l1207
  2925  002AC8                     
  2926                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2927  002AC8  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2928  002ACC  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2929  002AD0  EC01  F01C         	call	_PLLUartInitialize	;wreg free
  2930                           
  2931                           ;MessageFunctions.c: 93: break;
  2932  002AD4  0012               	return	
  2933  002AD6                     
  2934                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2935  002AD6  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2936  002ADA  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2937  002ADE  EC01  F01C         	call	_PLLUartInitialize	;wreg free
  2938                           
  2939                           ;MessageFunctions.c: 97: break;
  2940  002AE2  0012               	return	
  2941  002AE4                     
  2942                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2943  002AE4  C1C2  F02C         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2944  002AE8  C1C3  F02D         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2945  002AEC  EC2B  F00F         	call	_UpdateTxFreq	;wreg free
  2946                           
  2947                           ;MessageFunctions.c: 101: break;
  2948  002AF0  0012               	return	
  2949  002AF2                     
  2950                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2951  002AF2  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2952  002AF6  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2953  002AFA  EC17  F018         	call	_UpdateRxFreq	;wreg free
  2954                           
  2955                           ;MessageFunctions.c: 109: }
  2956                           
  2957                           ;MessageFunctions.c: 108: break;
  2958                           
  2959                           ;MessageFunctions.c: 107: default:
  2960                           
  2961                           ;MessageFunctions.c: 105: break;
  2962  002AFE  0012               	return	
  2963  002B00                     l1207:
  2964  002B00  0100               	movlb	0	; () banked
  2965  002B02  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2966                           
  2967                           ; Switch size 1, requested type "space"
  2968                           ; Number of cases is 4, Range of values is 64 to 67
  2969                           ; switch strategies available:
  2970                           ; Name         Instructions Cycles
  2971                           ; simple_byte           13     7 (average)
  2972                           ;	Chosen strategy is simple_byte
  2973  002B04  0A40               	xorlw	64	; case 64
  2974  002B06  B4D8               	btfsc	status,2,c
  2975  002B08  D7DF               	goto	l1208
  2976  002B0A  0A01               	xorlw	1	; case 65
  2977  002B0C  B4D8               	btfsc	status,2,c
  2978  002B0E  D7E3               	goto	l1210
  2979  002B10  0A03               	xorlw	3	; case 66
  2980  002B12  B4D8               	btfsc	status,2,c
  2981  002B14  D7E7               	goto	l1211
  2982  002B16  0A01               	xorlw	1	; case 67
  2983  002B18  A4D8               	btfss	status,2,c
  2984  002B1A  0012               	return	
  2985  002B1C  D7EA               	goto	l1212
  2986  002B1E                     __end_of_GroupSynthesizers:
  2987                           	opt stack 0
  2988                           tosu	equ	0xFFF
  2989                           tosh	equ	0xFFE
  2990                           tosl	equ	0xFFD
  2991                           pclath	equ	0xFFA
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _UpdateTxFreq *****************
  3007 ;; Defined at:
  3008 ;;		line 60 in file "SyntApp.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  data            2   43[COMRAM] PTR unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3022 ;;      Params:         2       0       0       0       0       0       0
  3023 ;;      Locals:         0       0       0       0       0       0       0
  3024 ;;      Temps:          0       0       0       0       0       0       0
  3025 ;;      Totals:         2       0       0       0       0       0       0
  3026 ;;Total ram usage:        2 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    6
  3029 ;; This function calls:
  3030 ;;		_SWSPI_send_word
  3031 ;;		_SendAckMessage
  3032 ;; This function is called by:
  3033 ;;		_GroupSynthesizers
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text9
  3038  001E56                     __ptext9:
  3039                           	opt stack 0
  3040  001E56                     _UpdateTxFreq:
  3041                           	opt stack 22
  3042                           
  3043                           ;SyntApp.c: 67: SWSPI_send_word(SYNTH_TX, 0x00C026BA, 3);
  3044                           
  3045                           ;incstack = 0
  3046  001E56  0EBA               	movlw	186
  3047  001E58  6E21               	movwf	SWSPI_send_word@data,c
  3048  001E5A  0E26               	movlw	38
  3049  001E5C  6E22               	movwf	SWSPI_send_word@data+1,c
  3050  001E5E  0EC0               	movlw	192
  3051  001E60  6E23               	movwf	SWSPI_send_word@data+2,c
  3052  001E62  0E00               	movlw	0
  3053  001E64  6E24               	movwf	SWSPI_send_word@data+3,c
  3054  001E66  0E03               	movlw	3
  3055  001E68  6E25               	movwf	SWSPI_send_word@dataSize,c
  3056  001E6A  0E00               	movlw	0
  3057  001E6C  ECC5  F010         	call	_SWSPI_send_word
  3058                           
  3059                           ;SyntApp.c: 68: SWSPI_send_word(SYNTH_TX, 0x3501E076, 3);
  3060  001E70  0E76               	movlw	118
  3061  001E72  6E21               	movwf	SWSPI_send_word@data,c
  3062  001E74  0EE0               	movlw	224
  3063  001E76  6E22               	movwf	SWSPI_send_word@data+1,c
  3064  001E78  0E01               	movlw	1
  3065  001E7A  6E23               	movwf	SWSPI_send_word@data+2,c
  3066  001E7C  0E35               	movlw	53
  3067  001E7E  6E24               	movwf	SWSPI_send_word@data+3,c
  3068  001E80  0E03               	movlw	3
  3069  001E82  6E25               	movwf	SWSPI_send_word@dataSize,c
  3070  001E84  0E00               	movlw	0
  3071  001E86  ECC5  F010         	call	_SWSPI_send_word
  3072                           
  3073                           ;SyntApp.c: 69: SWSPI_send_word(SYNTH_TX, 0x32008B84, 3);
  3074  001E8A  0E84               	movlw	132
  3075  001E8C  6E21               	movwf	SWSPI_send_word@data,c
  3076  001E8E  0E8B               	movlw	139
  3077  001E90  6E22               	movwf	SWSPI_send_word@data+1,c
  3078  001E92  0E00               	movlw	0
  3079  001E94  6E23               	movwf	SWSPI_send_word@data+2,c
  3080  001E96  0E32               	movlw	50
  3081  001E98  6E24               	movwf	SWSPI_send_word@data+3,c
  3082  001E9A  0E03               	movlw	3
  3083  001E9C  6E25               	movwf	SWSPI_send_word@dataSize,c
  3084  001E9E  0E00               	movlw	0
  3085  001EA0  ECC5  F010         	call	_SWSPI_send_word
  3086                           
  3087                           ;SyntApp.c: 70: SWSPI_send_word(SYNTH_TX, 0x00080032, 3);
  3088  001EA4  0E32               	movlw	50
  3089  001EA6  6E21               	movwf	SWSPI_send_word@data,c
  3090  001EA8  0E00               	movlw	0
  3091  001EAA  6E22               	movwf	SWSPI_send_word@data+1,c
  3092  001EAC  0E08               	movlw	8
  3093  001EAE  6E23               	movwf	SWSPI_send_word@data+2,c
  3094  001EB0  0E00               	movlw	0
  3095  001EB2  6E24               	movwf	SWSPI_send_word@data+3,c
  3096  001EB4  0E03               	movlw	3
  3097  001EB6  6E25               	movwf	SWSPI_send_word@dataSize,c
  3098  001EB8  0E00               	movlw	0
  3099  001EBA  ECC5  F010         	call	_SWSPI_send_word
  3100                           
  3101                           ;SyntApp.c: 71: SWSPI_send_word(SYNTH_TX, 0x01AAAAA1, 3);
  3102  001EBE  0EA1               	movlw	161
  3103  001EC0  6E21               	movwf	SWSPI_send_word@data,c
  3104  001EC2  0EAA               	movlw	170
  3105  001EC4  6E22               	movwf	SWSPI_send_word@data+1,c
  3106  001EC6  0EAA               	movlw	170
  3107  001EC8  6E23               	movwf	SWSPI_send_word@data+2,c
  3108  001ECA  0E01               	movlw	1
  3109  001ECC  6E24               	movwf	SWSPI_send_word@data+3,c
  3110  001ECE  0E03               	movlw	3
  3111  001ED0  6E25               	movwf	SWSPI_send_word@dataSize,c
  3112  001ED2  0E00               	movlw	0
  3113  001ED4  ECC5  F010         	call	_SWSPI_send_word
  3114                           
  3115                           ;SyntApp.c: 72: SWSPI_send_word(SYNTH_TX, 0x00200410, 3);
  3116  001ED8  0E10               	movlw	16
  3117  001EDA  6E21               	movwf	SWSPI_send_word@data,c
  3118  001EDC  0E04               	movlw	4
  3119  001EDE  6E22               	movwf	SWSPI_send_word@data+1,c
  3120  001EE0  0E20               	movlw	32
  3121  001EE2  6E23               	movwf	SWSPI_send_word@data+2,c
  3122  001EE4  0E00               	movlw	0
  3123  001EE6  6E24               	movwf	SWSPI_send_word@data+3,c
  3124  001EE8  0E03               	movlw	3
  3125  001EEA  6E25               	movwf	SWSPI_send_word@dataSize,c
  3126  001EEC  0E00               	movlw	0
  3127  001EEE  ECC5  F010         	call	_SWSPI_send_word
  3128                           
  3129                           ;SyntApp.c: 73: SWSPI_send_word(SYNTH_TX, 0x32008B84, 3);
  3130  001EF2  0E84               	movlw	132
  3131  001EF4  6E21               	movwf	SWSPI_send_word@data,c
  3132  001EF6  0E8B               	movlw	139
  3133  001EF8  6E22               	movwf	SWSPI_send_word@data+1,c
  3134  001EFA  0E00               	movlw	0
  3135  001EFC  6E23               	movwf	SWSPI_send_word@data+2,c
  3136  001EFE  0E32               	movlw	50
  3137  001F00  6E24               	movwf	SWSPI_send_word@data+3,c
  3138  001F02  0E03               	movlw	3
  3139  001F04  6E25               	movwf	SWSPI_send_word@dataSize,c
  3140  001F06  0E00               	movlw	0
  3141  001F08  ECC5  F010         	call	_SWSPI_send_word
  3142                           
  3143                           ;SyntApp.c: 74: SWSPI_send_word(SYNTH_TX, 0x00200410, 3);
  3144  001F0C  0E10               	movlw	16
  3145  001F0E  6E21               	movwf	SWSPI_send_word@data,c
  3146  001F10  0E04               	movlw	4
  3147  001F12  6E22               	movwf	SWSPI_send_word@data+1,c
  3148  001F14  0E20               	movlw	32
  3149  001F16  6E23               	movwf	SWSPI_send_word@data+2,c
  3150  001F18  0E00               	movlw	0
  3151  001F1A  6E24               	movwf	SWSPI_send_word@data+3,c
  3152  001F1C  0E03               	movlw	3
  3153  001F1E  6E25               	movwf	SWSPI_send_word@dataSize,c
  3154  001F20  0E00               	movlw	0
  3155  001F22  ECC5  F010         	call	_SWSPI_send_word
  3156                           
  3157                           ;SyntApp.c: 76: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3158  001F26  0E42               	movlw	66
  3159  001F28  6E24               	movwf	SendAckMessage@inRequest,c
  3160  001F2A  0E04               	movlw	4
  3161  001F2C  EC19  F017         	call	_SendAckMessage
  3162  001F30  0012               	return		;funcret
  3163  001F32                     __end_of_UpdateTxFreq:
  3164                           	opt stack 0
  3165                           tosu	equ	0xFFF
  3166                           tosh	equ	0xFFE
  3167                           tosl	equ	0xFFD
  3168                           pclath	equ	0xFFA
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           postinc0	equ	0xFEE
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1l	equ	0xFE1
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _UpdateRxFreq *****************
  3184 ;; Defined at:
  3185 ;;		line 79 in file "SyntApp.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  data            2   45[COMRAM] PTR unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  regData         4   21[BANK0 ] unsigned long 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3199 ;;      Params:         2       0       0       0       0       0       0
  3200 ;;      Locals:         0       4       0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0
  3202 ;;      Totals:         2       4       0       0       0       0       0
  3203 ;;Total ram usage:        6 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    7
  3206 ;; This function calls:
  3207 ;;		_GetIntFromUartData
  3208 ;;		_SWSPI_send_word
  3209 ;;		_SendAckMessage
  3210 ;; This function is called by:
  3211 ;;		_GroupSynthesizers
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text10
  3216  00302E                     __ptext10:
  3217                           	opt stack 0
  3218  00302E                     _UpdateRxFreq:
  3219                           	opt stack 21
  3220                           
  3221                           ;SyntApp.c: 81: uint32_t regData = GetIntFromUartData(data);
  3222                           
  3223                           ;incstack = 0
  3224  00302E  C02E  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3225  003032  C02F  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3226  003036  ECCF  F011         	call	_GetIntFromUartData	;wreg free
  3227  00303A  C066  F075         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3228  00303E  C067  F076         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3229  003042  C068  F077         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3230  003046  C069  F078         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3231                           
  3232                           ;SyntApp.c: 82: SWSPI_send_word(SYNTH_RX, regData, 3);
  3233  00304A  C075  F021         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3234  00304E  C076  F022         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3235  003052  C077  F023         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3236  003056  C078  F024         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3237  00305A  0E03               	movlw	3
  3238  00305C  6E25               	movwf	SWSPI_send_word@dataSize,c
  3239  00305E  0E01               	movlw	1
  3240  003060  ECC5  F010         	call	_SWSPI_send_word
  3241                           
  3242                           ;SyntApp.c: 83: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3243  003064  0E43               	movlw	67
  3244  003066  6E24               	movwf	SendAckMessage@inRequest,c
  3245  003068  0E04               	movlw	4
  3246  00306A  EC19  F017         	call	_SendAckMessage
  3247  00306E  0012               	return		;funcret
  3248  003070                     __end_of_UpdateRxFreq:
  3249                           	opt stack 0
  3250                           tosu	equ	0xFFF
  3251                           tosh	equ	0xFFE
  3252                           tosl	equ	0xFFD
  3253                           pclath	equ	0xFFA
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postdec1	equ	0xFE5
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _PLLUartInitialize *****************
  3269 ;; Defined at:
  3270 ;;		line 51 in file "SyntApp.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  data            2   23[COMRAM] PTR unsigned char 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		None
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         2       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         2       0       0       0       0       0       0
  3288 ;;Total ram usage:        2 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_GroupSynthesizers
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text11
  3299  003802                     __ptext11:
  3300                           	opt stack 0
  3301  003802                     _PLLUartInitialize:
  3302                           	opt stack 25
  3303                           
  3304                           ;incstack = 0
  3305  003802  0012               	return		;funcret
  3306  003804                     __end_of_PLLUartInitialize:
  3307                           	opt stack 0
  3308                           tosu	equ	0xFFF
  3309                           tosh	equ	0xFFE
  3310                           tosl	equ	0xFFD
  3311                           pclath	equ	0xFFA
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           postinc0	equ	0xFEE
  3317                           wreg	equ	0xFE8
  3318                           postdec1	equ	0xFE5
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function _SetMcuFwVersion *****************
  3327 ;; Defined at:
  3328 ;;		line 15 in file "SystemStatus.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  data            2   43[COMRAM] PTR unsigned char 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  idx             1   45[COMRAM] unsigned char 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3342 ;;      Params:         2       0       0       0       0       0       0
  3343 ;;      Locals:         1       0       0       0       0       0       0
  3344 ;;      Temps:          0       0       0       0       0       0       0
  3345 ;;      Totals:         3       0       0       0       0       0       0
  3346 ;;Total ram usage:        3 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    6
  3349 ;; This function calls:
  3350 ;;		_EepromWrite
  3351 ;;		_SendAckMessage
  3352 ;; This function is called by:
  3353 ;;		_GroupStatusAndVersion
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text12
  3358  003296                     __ptext12:
  3359                           	opt stack 0
  3360  003296                     _SetMcuFwVersion:
  3361                           	opt stack 22
  3362                           
  3363                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3364                           
  3365                           ;incstack = 0
  3366  003296  0E00               	movlw	0
  3367  003298  6E2E               	movwf	SetMcuFwVersion@idx,c
  3368  00329A                     l7472:
  3369  00329A  0E03               	movlw	3
  3370  00329C  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3371  00329E  D001               	goto	l1346
  3372  0032A0  D00F               	goto	u7430
  3373  0032A2                     l1346:
  3374                           
  3375                           ;SystemStatus.c: 18: {
  3376                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3377  0032A2  502E               	movf	SetMcuFwVersion@idx,w,c
  3378  0032A4  0D01               	mullw	1
  3379  0032A6  50F3               	movf	prodl,w,c
  3380  0032A8  242C               	addwf	SetMcuFwVersion@data,w,c
  3381  0032AA  6ED9               	movwf	fsr2l,c
  3382  0032AC  50F4               	movf	prodh,w,c
  3383  0032AE  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3384  0032B0  6EDA               	movwf	fsr2h,c
  3385  0032B2  50DF               	movf	indf2,w,c
  3386  0032B4  6E1B               	movwf	EepromWrite@data,c
  3387  0032B6  502E               	movf	SetMcuFwVersion@idx,w,c
  3388  0032B8  ECA7  F01B         	call	_EepromWrite
  3389  0032BC  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3390  0032BE  D7ED               	goto	l7472
  3391  0032C0                     u7430:
  3392                           
  3393                           ;SystemStatus.c: 20: }
  3394                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3395  0032C0  0E24               	movlw	36
  3396  0032C2  6E24               	movwf	SendAckMessage@inRequest,c
  3397  0032C4  0E02               	movlw	2
  3398  0032C6  EC19  F017         	call	_SendAckMessage
  3399  0032CA  0012               	return		;funcret
  3400  0032CC                     __end_of_SetMcuFwVersion:
  3401                           	opt stack 0
  3402                           tosu	equ	0xFFF
  3403                           tosh	equ	0xFFE
  3404                           tosl	equ	0xFFD
  3405                           pclath	equ	0xFFA
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           postdec1	equ	0xFE5
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           fsr2h	equ	0xFDA
  3419                           fsr2l	equ	0xFD9
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function _SetCpldFwVersion *****************
  3423 ;; Defined at:
  3424 ;;		line 49 in file "SystemStatus.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  data            2   43[COMRAM] PTR unsigned char 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  idx             2   45[COMRAM] int 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3438 ;;      Params:         2       0       0       0       0       0       0
  3439 ;;      Locals:         2       0       0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0
  3441 ;;      Totals:         4       0       0       0       0       0       0
  3442 ;;Total ram usage:        4 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    6
  3445 ;; This function calls:
  3446 ;;		_EepromWrite
  3447 ;;		_SendAckMessage
  3448 ;; This function is called by:
  3449 ;;		_GroupStatusAndVersion
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text13
  3454  003070                     __ptext13:
  3455                           	opt stack 0
  3456  003070                     _SetCpldFwVersion:
  3457                           	opt stack 22
  3458                           
  3459                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3460                           
  3461                           ;incstack = 0
  3462  003070  0E00               	movlw	0
  3463  003072  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3464  003074  0E00               	movlw	0
  3465  003076  6E2E               	movwf	SetCpldFwVersion@idx,c
  3466  003078                     l7512:
  3467  003078  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3468  00307A  D006               	goto	l1356
  3469  00307C  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3470  00307E  E113               	bnz	l7522
  3471  003080  0E04               	movlw	4
  3472  003082  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3473  003084  B0D8               	btfsc	status,0,c
  3474  003086  D00F               	goto	u7470
  3475  003088                     l1356:
  3476                           
  3477                           ;SystemStatus.c: 52: {
  3478                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3479  003088  502E               	movf	SetCpldFwVersion@idx,w,c
  3480  00308A  242C               	addwf	SetCpldFwVersion@data,w,c
  3481  00308C  6ED9               	movwf	fsr2l,c
  3482  00308E  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3483  003090  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3484  003092  6EDA               	movwf	fsr2h,c
  3485  003094  50DF               	movf	indf2,w,c
  3486  003096  6E1B               	movwf	EepromWrite@data,c
  3487  003098  502E               	movf	SetCpldFwVersion@idx,w,c
  3488  00309A  0F04               	addlw	4
  3489  00309C  ECA7  F01B         	call	_EepromWrite
  3490  0030A0  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3491  0030A2  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3492  0030A4  D7E9               	goto	l7512
  3493  0030A6                     u7470:
  3494  0030A6                     l7522:
  3495                           
  3496                           ;SystemStatus.c: 54: }
  3497                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3498  0030A6  0E25               	movlw	37
  3499  0030A8  6E24               	movwf	SendAckMessage@inRequest,c
  3500  0030AA  0E02               	movlw	2
  3501  0030AC  EC19  F017         	call	_SendAckMessage
  3502  0030B0  0012               	return		;funcret
  3503  0030B2                     __end_of_SetCpldFwVersion:
  3504                           	opt stack 0
  3505                           tosu	equ	0xFFF
  3506                           tosh	equ	0xFFE
  3507                           tosl	equ	0xFFD
  3508                           pclath	equ	0xFFA
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           postinc0	equ	0xFEE
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _EepromWrite *****************
  3526 ;; Defined at:
  3527 ;;		line 220 in file "FlashApp.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  address         1    wreg     unsigned char 
  3530 ;;  data            1   26[COMRAM] unsigned char 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  address         1   27[COMRAM] unsigned char 
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3542 ;;      Params:         1       0       0       0       0       0       0
  3543 ;;      Locals:         1       0       0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0
  3545 ;;      Totals:         2       0       0       0       0       0       0
  3546 ;;Total ram usage:        2 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    4
  3549 ;; This function calls:
  3550 ;;		_DATAEE_WriteByte
  3551 ;; This function is called by:
  3552 ;;		_SetMcuFwVersion
  3553 ;;		_SetCpldFwVersion
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text14
  3558  00374E                     __ptext14:
  3559                           	opt stack 0
  3560  00374E                     _EepromWrite:
  3561                           	opt stack 23
  3562                           
  3563                           ;incstack = 0
  3564                           ;EepromWrite@address stored from wreg
  3565  00374E  6E1C               	movwf	EepromWrite@address,c
  3566                           
  3567                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3568  003750  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3569  003754  501C               	movf	EepromWrite@address,w,c
  3570  003756  EC66  F019         	call	_DATAEE_WriteByte
  3571  00375A  0012               	return		;funcret
  3572  00375C                     __end_of_EepromWrite:
  3573                           	opt stack 0
  3574                           tosu	equ	0xFFF
  3575                           tosh	equ	0xFFE
  3576                           tosl	equ	0xFFD
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _DATAEE_WriteByte *****************
  3595 ;; Defined at:
  3596 ;;		line 167 in file "mcc_generated_files/memory.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  bAdd            1    wreg     unsigned char 
  3599 ;;  bData           1   23[COMRAM] unsigned char 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  bAdd            1   24[COMRAM] unsigned char 
  3602 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3612 ;;      Params:         1       0       0       0       0       0       0
  3613 ;;      Locals:         2       0       0       0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0
  3615 ;;      Totals:         3       0       0       0       0       0       0
  3616 ;;Total ram usage:        3 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    3
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_EepromWrite
  3623 ;;		_EepromTest
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text15
  3628  0032CC                     __ptext15:
  3629                           	opt stack 0
  3630  0032CC                     _DATAEE_WriteByte:
  3631                           	opt stack 23
  3632                           
  3633                           ;incstack = 0
  3634                           ;DATAEE_WriteByte@bAdd stored from wreg
  3635  0032CC  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3636                           
  3637                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3638  0032CE  0E00               	movlw	0
  3639  0032D0  BEF2               	btfsc	intcon,7,c	;volatile
  3640  0032D2  0E01               	movlw	1
  3641  0032D4  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3642                           
  3643                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3644  0032D6  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3645                           
  3646                           ;memory.c: 172: EEDATA = bData;
  3647  0032DA  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3648                           
  3649                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3650  0032DE  9EA6               	bcf	4006,7,c	;volsfr
  3651                           
  3652                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3653  0032E0  9CA6               	bcf	4006,6,c	;volsfr
  3654                           
  3655                           ;memory.c: 175: EECON1bits.WREN = 1;
  3656  0032E2  84A6               	bsf	4006,2,c	;volsfr
  3657                           
  3658                           ;memory.c: 176: INTCONbits.GIE = 0;
  3659  0032E4  9EF2               	bcf	intcon,7,c	;volatile
  3660                           
  3661                           ;memory.c: 177: EECON2 = 0x55;
  3662  0032E6  0E55               	movlw	85
  3663  0032E8  6EA7               	movwf	4007,c	;volsfr
  3664                           
  3665                           ;memory.c: 178: EECON2 = 0xAA;
  3666  0032EA  0EAA               	movlw	170
  3667  0032EC  6EA7               	movwf	4007,c	;volsfr
  3668                           
  3669                           ;memory.c: 179: EECON1bits.WR = 1;
  3670  0032EE  82A6               	bsf	4006,1,c	;volsfr
  3671  0032F0                     
  3672                           ;memory.c: 182: {
  3673  0032F0  B2A6               	btfsc	4006,1,c	;volsfr
  3674  0032F2  D7FE               	goto	l959
  3675                           
  3676                           ;memory.c: 183: }
  3677                           ;memory.c: 185: EECON1bits.WREN = 0;
  3678  0032F4  94A6               	bcf	4006,2,c	;volsfr
  3679                           
  3680                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3681  0032F6  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3682  0032F8  D002               	bra	u6205
  3683  0032FA  9EF2               	bcf	intcon,7,c	;volatile
  3684  0032FC  D001               	bra	u6206
  3685  0032FE                     u6205:
  3686  0032FE  8EF2               	bsf	intcon,7,c	;volatile
  3687  003300                     u6206:
  3688  003300  0012               	return		;funcret
  3689  003302                     __end_of_DATAEE_WriteByte:
  3690                           	opt stack 0
  3691                           tosu	equ	0xFFF
  3692                           tosh	equ	0xFFE
  3693                           tosl	equ	0xFFD
  3694                           pclath	equ	0xFFA
  3695                           tblptru	equ	0xFF8
  3696                           tblptrh	equ	0xFF7
  3697                           tblptrl	equ	0xFF6
  3698                           tablat	equ	0xFF5
  3699                           prodh	equ	0xFF4
  3700                           prodl	equ	0xFF3
  3701                           intcon	equ	0xFF2
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           postdec1	equ	0xFE5
  3705                           fsr1l	equ	0xFE1
  3706                           indf2	equ	0xFDF
  3707                           postinc2	equ	0xFDE
  3708                           fsr2h	equ	0xFDA
  3709                           fsr2l	equ	0xFD9
  3710                           status	equ	0xFD8
  3711                           
  3712 ;; *************** function _GetMcuRunTime *****************
  3713 ;; Defined at:
  3714 ;;		line 92 in file "SystemStatus.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  idx             2   13[BANK0 ] int 
  3719 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3720 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3730 ;;      Params:         0       0       0       0       0       0       0
  3731 ;;      Locals:         0      15       0       0       0       0       0
  3732 ;;      Temps:          2       0       0       0       0       0       0
  3733 ;;      Totals:         2      15       0       0       0       0       0
  3734 ;;Total ram usage:       17 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    5
  3737 ;; This function calls:
  3738 ;;		_WriteUartMessage
  3739 ;;		___lldiv
  3740 ;;		___llmod
  3741 ;;		_crc8
  3742 ;; This function is called by:
  3743 ;;		_GroupStatusAndVersion
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text16
  3748  001C90                     __ptext16:
  3749                           	opt stack 0
  3750  001C90                     _GetMcuRunTime:
  3751                           	opt stack 23
  3752                           
  3753                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3754                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3755                           
  3756                           ;incstack = 0
  3757  001C90  0E24               	movlw	36
  3758  001C92  0100               	movlb	0	; () banked
  3759  001C94  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3760                           
  3761                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3762  001C96  0E02               	movlw	2
  3763  001C98  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3764                           
  3765                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3766  001C9A  0E21               	movlw	33
  3767  001C9C  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3768                           
  3769                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3770  001C9E  0E04               	movlw	4
  3771  001CA0  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3775  001CA2  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3776  001CA6  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3777  001CAA  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3778  001CAE  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3779                           
  3780                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3781  001CB2  0E00               	movlw	0
  3782  001CB4  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3783  001CB6  0E00               	movlw	0
  3784  001CB8  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3785  001CBA                     l7528:
  3786                           
  3787                           ; BSR set to: 0
  3788  001CBA  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3789  001CBC  D006               	goto	l1372
  3790  001CBE  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3791  001CC0  E142               	bnz	l7540
  3792  001CC2  0E04               	movlw	4
  3793  001CC4  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3794  001CC6  B0D8               	btfsc	status,0,c
  3795  001CC8  D03E               	goto	u7490
  3796  001CCA                     l1372:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;SystemStatus.c: 107: {
  3800                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3801                           
  3802                           ; BSR set to: 0
  3803  001CCA  0E04               	movlw	4
  3804  001CCC  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3805  001CCE  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3806  001CD0  0E00               	movlw	0
  3807  001CD2  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3808  001CD4  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3809  001CD6  0E60               	movlw	low GetMcuRunTime@TxMsg
  3810  001CD8  2425               	addwf	??_GetMcuRunTime,w,c
  3811  001CDA  6ED9               	movwf	fsr2l,c
  3812  001CDC  0E00               	movlw	high GetMcuRunTime@TxMsg
  3813  001CDE  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3814  001CE0  6EDA               	movwf	fsr2h,c
  3815  001CE2  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3816  001CE6  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3817  001CEA  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3818  001CEE  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3819  001CF2  0E0A               	movlw	10
  3820  001CF4  6E1C               	movwf	___llmod@divisor,c
  3821  001CF6  0E00               	movlw	0
  3822  001CF8  6E1D               	movwf	___llmod@divisor+1,c
  3823  001CFA  0E00               	movlw	0
  3824  001CFC  6E1E               	movwf	___llmod@divisor+2,c
  3825  001CFE  0E00               	movlw	0
  3826  001D00  6E1F               	movwf	___llmod@divisor+3,c
  3827  001D02  EC9F  F014         	call	___llmod	;wreg free
  3828  001D06  5018               	movf	?___llmod,w,c
  3829  001D08  6EDF               	movwf	indf2,c
  3830                           
  3831                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3832  001D0A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3833  001D0E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3834  001D12  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3835  001D16  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3836  001D1A  0E0A               	movlw	10
  3837  001D1C  6E1C               	movwf	___lldiv@divisor,c
  3838  001D1E  0E00               	movlw	0
  3839  001D20  6E1D               	movwf	___lldiv@divisor+1,c
  3840  001D22  0E00               	movlw	0
  3841  001D24  6E1E               	movwf	___lldiv@divisor+2,c
  3842  001D26  0E00               	movlw	0
  3843  001D28  6E1F               	movwf	___lldiv@divisor+3,c
  3844  001D2A  EC3D  F013         	call	___lldiv	;wreg free
  3845  001D2E  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3846  001D32  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3847  001D36  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3848  001D3A  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3849  001D3E  0100               	movlb	0	; () banked
  3850  001D40  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3851  001D42  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3852  001D44  D7BA               	goto	l7528
  3853  001D46                     u7490:
  3854  001D46                     l7540:
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;SystemStatus.c: 110: }
  3858                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3859  001D46  0E60               	movlw	low GetMcuRunTime@TxMsg
  3860  001D48  6E18               	movwf	crc8@dataArray,c
  3861  001D4A  0E00               	movlw	high GetMcuRunTime@TxMsg
  3862  001D4C  6E19               	movwf	crc8@dataArray+1,c
  3863  001D4E  0E00               	movlw	0
  3864  001D50  6E1B               	movwf	crc8@dataSize+1,c
  3865  001D52  0E08               	movlw	8
  3866  001D54  6E1A               	movwf	crc8@dataSize,c
  3867  001D56  EC42  F017         	call	_crc8	;wreg free
  3868  001D5A  0100               	movlb	0	; () banked
  3869  001D5C  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3873  001D5E  0E60               	movlw	low GetMcuRunTime@TxMsg
  3874  001D60  6E19               	movwf	WriteUartMessage@dataBuf,c
  3875  001D62  0E00               	movlw	high GetMcuRunTime@TxMsg
  3876  001D64  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3877  001D66  0E00               	movlw	0
  3878  001D68  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3879  001D6A  0E09               	movlw	9
  3880  001D6C  6E1B               	movwf	WriteUartMessage@dataSize,c
  3881  001D6E  ECB7  F019         	call	_WriteUartMessage	;wreg free
  3882  001D72  0012               	return		;funcret
  3883  001D74                     __end_of_GetMcuRunTime:
  3884                           	opt stack 0
  3885                           tosu	equ	0xFFF
  3886                           tosh	equ	0xFFE
  3887                           tosl	equ	0xFFD
  3888                           pclath	equ	0xFFA
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           postdec1	equ	0xFE5
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function ___lldiv *****************
  3907 ;; Defined at:
  3908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  dividend        4   23[COMRAM] unsigned long 
  3911 ;;  divisor         4   27[COMRAM] unsigned long 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  quotient        4   31[COMRAM] unsigned long 
  3914 ;;  counter         1   35[COMRAM] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  4   23[COMRAM] unsigned long 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2, status,0
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3924 ;;      Params:         8       0       0       0       0       0       0
  3925 ;;      Locals:         5       0       0       0       0       0       0
  3926 ;;      Temps:          0       0       0       0       0       0       0
  3927 ;;      Totals:        13       0       0       0       0       0       0
  3928 ;;Total ram usage:       13 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    3
  3931 ;; This function calls:
  3932 ;;		Nothing
  3933 ;; This function is called by:
  3934 ;;		_GetMcuRunTime
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           	psect	text17
  3939  00267A                     __ptext17:
  3940                           	opt stack 0
  3941  00267A                     ___lldiv:
  3942                           	opt stack 24
  3943                           
  3944                           ;incstack = 0
  3945  00267A  0E00               	movlw	0
  3946  00267C  6E20               	movwf	___lldiv@quotient,c
  3947  00267E  0E00               	movlw	0
  3948  002680  6E21               	movwf	___lldiv@quotient+1,c
  3949  002682  0E00               	movlw	0
  3950  002684  6E22               	movwf	___lldiv@quotient+2,c
  3951  002686  0E00               	movlw	0
  3952  002688  6E23               	movwf	___lldiv@quotient+3,c
  3953  00268A  501C               	movf	___lldiv@divisor,w,c
  3954  00268C  101D               	iorwf	___lldiv@divisor+1,w,c
  3955  00268E  101E               	iorwf	___lldiv@divisor+2,w,c
  3956  002690  101F               	iorwf	___lldiv@divisor+3,w,c
  3957  002692  B4D8               	btfsc	status,2,c
  3958  002694  D02A               	goto	l1799
  3959  002696  0E01               	movlw	1
  3960  002698  6E24               	movwf	___lldiv@counter,c
  3961  00269A  D006               	goto	l1794
  3962  00269C  90D8               	bcf	status,0,c
  3963  00269E  361C               	rlcf	___lldiv@divisor,f,c
  3964  0026A0  361D               	rlcf	___lldiv@divisor+1,f,c
  3965  0026A2  361E               	rlcf	___lldiv@divisor+2,f,c
  3966  0026A4  361F               	rlcf	___lldiv@divisor+3,f,c
  3967  0026A6  2A24               	incf	___lldiv@counter,f,c
  3968  0026A8                     l1794:
  3969  0026A8  AE1F               	btfss	___lldiv@divisor+3,7,c
  3970  0026AA  D7F8               	goto	l1795
  3971  0026AC                     u6990:
  3972  0026AC  90D8               	bcf	status,0,c
  3973  0026AE  3620               	rlcf	___lldiv@quotient,f,c
  3974  0026B0  3621               	rlcf	___lldiv@quotient+1,f,c
  3975  0026B2  3622               	rlcf	___lldiv@quotient+2,f,c
  3976  0026B4  3623               	rlcf	___lldiv@quotient+3,f,c
  3977  0026B6  501C               	movf	___lldiv@divisor,w,c
  3978  0026B8  5C18               	subwf	___lldiv@dividend,w,c
  3979  0026BA  501D               	movf	___lldiv@divisor+1,w,c
  3980  0026BC  5819               	subwfb	___lldiv@dividend+1,w,c
  3981  0026BE  501E               	movf	___lldiv@divisor+2,w,c
  3982  0026C0  581A               	subwfb	___lldiv@dividend+2,w,c
  3983  0026C2  501F               	movf	___lldiv@divisor+3,w,c
  3984  0026C4  581B               	subwfb	___lldiv@dividend+3,w,c
  3985  0026C6  A0D8               	btfss	status,0,c
  3986  0026C8  D009               	goto	l1798
  3987  0026CA  501C               	movf	___lldiv@divisor,w,c
  3988  0026CC  5E18               	subwf	___lldiv@dividend,f,c
  3989  0026CE  501D               	movf	___lldiv@divisor+1,w,c
  3990  0026D0  5A19               	subwfb	___lldiv@dividend+1,f,c
  3991  0026D2  501E               	movf	___lldiv@divisor+2,w,c
  3992  0026D4  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3993  0026D6  501F               	movf	___lldiv@divisor+3,w,c
  3994  0026D8  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3995  0026DA  8020               	bsf	___lldiv@quotient,0,c
  3996  0026DC                     l1798:
  3997  0026DC  90D8               	bcf	status,0,c
  3998  0026DE  321F               	rrcf	___lldiv@divisor+3,f,c
  3999  0026E0  321E               	rrcf	___lldiv@divisor+2,f,c
  4000  0026E2  321D               	rrcf	___lldiv@divisor+1,f,c
  4001  0026E4  321C               	rrcf	___lldiv@divisor,f,c
  4002  0026E6  2E24               	decfsz	___lldiv@counter,f,c
  4003  0026E8  D7E1               	goto	u6990
  4004  0026EA                     l1799:
  4005  0026EA  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4006  0026EE  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4007  0026F2  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4008  0026F6  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4009  0026FA  0012               	return		;funcret
  4010  0026FC                     __end_of___lldiv:
  4011                           	opt stack 0
  4012                           tosu	equ	0xFFF
  4013                           tosh	equ	0xFFE
  4014                           tosl	equ	0xFFD
  4015                           pclath	equ	0xFFA
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           postdec1	equ	0xFE5
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           fsr2h	equ	0xFDA
  4030                           fsr2l	equ	0xFD9
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _GetMcuFwVersion *****************
  4034 ;; Defined at:
  4035 ;;		line 26 in file "SystemStatus.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  idx             1   46[COMRAM] unsigned char 
  4040 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4050 ;;      Params:         0       0       0       0       0       0       0
  4051 ;;      Locals:        10       0       0       0       0       0       0
  4052 ;;      Temps:          2       0       0       0       0       0       0
  4053 ;;      Totals:        12       0       0       0       0       0       0
  4054 ;;Total ram usage:       12 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    5
  4057 ;; This function calls:
  4058 ;;		_EepromRead
  4059 ;;		_WriteUartMessage
  4060 ;;		_ZeroArray
  4061 ;;		_crc8
  4062 ;; This function is called by:
  4063 ;;		_GroupStatusAndVersion
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text18
  4068  0026FC                     __ptext18:
  4069                           	opt stack 0
  4070  0026FC                     _GetMcuFwVersion:
  4071                           	opt stack 23
  4072                           
  4073                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  4074                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4075                           
  4076                           ;incstack = 0
  4077  0026FC  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4078  0026FE  6E20               	movwf	ZeroArray@array,c
  4079  002700  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4080  002702  6E21               	movwf	ZeroArray@array+1,c
  4081  002704  0E00               	movlw	0
  4082  002706  6E23               	movwf	ZeroArray@size+1,c
  4083  002708  0E09               	movlw	9
  4084  00270A  6E22               	movwf	ZeroArray@size,c
  4085  00270C  EC2A  F01B         	call	_ZeroArray	;wreg free
  4086                           
  4087                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  4088  002710  0E24               	movlw	36
  4089  002712  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  4090                           
  4091                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4092  002714  0E02               	movlw	2
  4093  002716  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  4094                           
  4095                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4096  002718  0E22               	movlw	34
  4097  00271A  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  4098                           
  4099                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  4100  00271C  0E04               	movlw	4
  4101  00271E  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  4102                           
  4103                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  4104  002720  0E00               	movlw	0
  4105  002722  6E2F               	movwf	GetMcuFwVersion@idx,c
  4106  002724                     l7456:
  4107  002724  0E03               	movlw	3
  4108  002726  642F               	cpfsgt	GetMcuFwVersion@idx,c
  4109  002728  D001               	goto	l1351
  4110  00272A  D013               	goto	u7410
  4111  00272C                     l1351:
  4112                           
  4113                           ;SystemStatus.c: 40: {
  4114                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  4115  00272C  502F               	movf	GetMcuFwVersion@idx,w,c
  4116  00272E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4117  002730  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  4118  002732  0E04               	movlw	4
  4119  002734  2624               	addwf	??_GetMcuFwVersion,f,c
  4120  002736  0E00               	movlw	0
  4121  002738  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  4122  00273A  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4123  00273C  2424               	addwf	??_GetMcuFwVersion,w,c
  4124  00273E  6ED9               	movwf	fsr2l,c
  4125  002740  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4126  002742  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  4127  002744  6EDA               	movwf	fsr2h,c
  4128  002746  502F               	movf	GetMcuFwVersion@idx,w,c
  4129  002748  ECE8  F01B         	call	_EepromRead
  4130  00274C  6EDF               	movwf	indf2,c
  4131  00274E  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4132  002750  D7E9               	goto	l7456
  4133  002752                     u7410:
  4134                           
  4135                           ;SystemStatus.c: 42: }
  4136                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4137  002752  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4138  002754  6E18               	movwf	crc8@dataArray,c
  4139  002756  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4140  002758  6E19               	movwf	crc8@dataArray+1,c
  4141  00275A  0E00               	movlw	0
  4142  00275C  6E1B               	movwf	crc8@dataSize+1,c
  4143  00275E  0E08               	movlw	8
  4144  002760  6E1A               	movwf	crc8@dataSize,c
  4145  002762  EC42  F017         	call	_crc8	;wreg free
  4146  002766  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4147                           
  4148                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4149  002768  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4150  00276A  6E19               	movwf	WriteUartMessage@dataBuf,c
  4151  00276C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4152  00276E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4153  002770  0E00               	movlw	0
  4154  002772  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4155  002774  0E09               	movlw	9
  4156  002776  6E1B               	movwf	WriteUartMessage@dataSize,c
  4157  002778  ECB7  F019         	call	_WriteUartMessage	;wreg free
  4158  00277C  0012               	return		;funcret
  4159  00277E                     __end_of_GetMcuFwVersion:
  4160                           	opt stack 0
  4161                           tosu	equ	0xFFF
  4162                           tosh	equ	0xFFE
  4163                           tosl	equ	0xFFD
  4164                           pclath	equ	0xFFA
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           postdec1	equ	0xFE5
  4175                           fsr1l	equ	0xFE1
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _GetCpldFwVersion *****************
  4183 ;; Defined at:
  4184 ;;		line 58 in file "SystemStatus.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  idx             2   46[COMRAM] int 
  4189 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4199 ;;      Params:         0       0       0       0       0       0       0
  4200 ;;      Locals:        11       0       0       0       0       0       0
  4201 ;;      Temps:          2       0       0       0       0       0       0
  4202 ;;      Totals:        13       0       0       0       0       0       0
  4203 ;;Total ram usage:       13 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    5
  4206 ;; This function calls:
  4207 ;;		_EepromRead
  4208 ;;		_WriteUartMessage
  4209 ;;		_ZeroArray
  4210 ;;		_crc8
  4211 ;; This function is called by:
  4212 ;;		_GroupStatusAndVersion
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text19
  4217  0024CA                     __ptext19:
  4218                           	opt stack 0
  4219  0024CA                     _GetCpldFwVersion:
  4220                           	opt stack 23
  4221                           
  4222                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4223                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4224                           
  4225                           ;incstack = 0
  4226  0024CA  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4227  0024CC  6E20               	movwf	ZeroArray@array,c
  4228  0024CE  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4229  0024D0  6E21               	movwf	ZeroArray@array+1,c
  4230  0024D2  0E00               	movlw	0
  4231  0024D4  6E23               	movwf	ZeroArray@size+1,c
  4232  0024D6  0E09               	movlw	9
  4233  0024D8  6E22               	movwf	ZeroArray@size,c
  4234  0024DA  EC2A  F01B         	call	_ZeroArray	;wreg free
  4235                           
  4236                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4237  0024DE  0E24               	movlw	36
  4238  0024E0  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4239                           
  4240                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4241  0024E2  0E02               	movlw	2
  4242  0024E4  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4243                           
  4244                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4245  0024E6  0E23               	movlw	35
  4246  0024E8  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4247                           
  4248                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4249  0024EA  0E04               	movlw	4
  4250  0024EC  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4251                           
  4252                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4253  0024EE  0E00               	movlw	0
  4254  0024F0  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4255  0024F2  0E00               	movlw	0
  4256  0024F4  6E2F               	movwf	GetCpldFwVersion@idx,c
  4257  0024F6                     l7496:
  4258  0024F6  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4259  0024F8  D006               	goto	l1361
  4260  0024FA  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4261  0024FC  E118               	bnz	l7506
  4262  0024FE  0E04               	movlw	4
  4263  002500  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4264  002502  B0D8               	btfsc	status,0,c
  4265  002504  D014               	goto	u7450
  4266  002506                     l1361:
  4267                           
  4268                           ;SystemStatus.c: 72: {
  4269                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4270  002506  0E04               	movlw	4
  4271  002508  242F               	addwf	GetCpldFwVersion@idx,w,c
  4272  00250A  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4273  00250C  0E00               	movlw	0
  4274  00250E  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4275  002510  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4276  002512  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4277  002514  2424               	addwf	??_GetCpldFwVersion,w,c
  4278  002516  6ED9               	movwf	fsr2l,c
  4279  002518  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4280  00251A  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4281  00251C  6EDA               	movwf	fsr2h,c
  4282  00251E  502F               	movf	GetCpldFwVersion@idx,w,c
  4283  002520  0F04               	addlw	4
  4284  002522  ECE8  F01B         	call	_EepromRead
  4285  002526  6EDF               	movwf	indf2,c
  4286  002528  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4287  00252A  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4288  00252C  D7E4               	goto	l7496
  4289  00252E                     u7450:
  4290  00252E                     l7506:
  4291                           
  4292                           ;SystemStatus.c: 74: }
  4293                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4294  00252E  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4295  002530  6E18               	movwf	crc8@dataArray,c
  4296  002532  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4297  002534  6E19               	movwf	crc8@dataArray+1,c
  4298  002536  0E00               	movlw	0
  4299  002538  6E1B               	movwf	crc8@dataSize+1,c
  4300  00253A  0E08               	movlw	8
  4301  00253C  6E1A               	movwf	crc8@dataSize,c
  4302  00253E  EC42  F017         	call	_crc8	;wreg free
  4303  002542  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4304                           
  4305                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4306  002544  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4307  002546  6E19               	movwf	WriteUartMessage@dataBuf,c
  4308  002548  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4309  00254A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4310  00254C  0E00               	movlw	0
  4311  00254E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4312  002550  0E09               	movlw	9
  4313  002552  6E1B               	movwf	WriteUartMessage@dataSize,c
  4314  002554  ECB7  F019         	call	_WriteUartMessage	;wreg free
  4315  002558  0012               	return		;funcret
  4316  00255A                     __end_of_GetCpldFwVersion:
  4317                           	opt stack 0
  4318                           tosu	equ	0xFFF
  4319                           tosh	equ	0xFFE
  4320                           tosl	equ	0xFFD
  4321                           pclath	equ	0xFFA
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           postdec1	equ	0xFE5
  4332                           fsr1l	equ	0xFE1
  4333                           indf2	equ	0xFDF
  4334                           postinc2	equ	0xFDE
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _EepromRead *****************
  4340 ;; Defined at:
  4341 ;;		line 215 in file "FlashApp.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  address         1    wreg     unsigned char 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  address         1   24[COMRAM] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      unsigned char 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4355 ;;      Params:         0       0       0       0       0       0       0
  4356 ;;      Locals:         1       0       0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0
  4358 ;;      Totals:         1       0       0       0       0       0       0
  4359 ;;Total ram usage:        1 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    4
  4362 ;; This function calls:
  4363 ;;		_DATAEE_ReadByte
  4364 ;; This function is called by:
  4365 ;;		_GetMcuFwVersion
  4366 ;;		_GetCpldFwVersion
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text20
  4371  0037D0                     __ptext20:
  4372                           	opt stack 0
  4373  0037D0                     _EepromRead:
  4374                           	opt stack 23
  4375                           
  4376                           ;incstack = 0
  4377                           ;EepromRead@address stored from wreg
  4378  0037D0  6E19               	movwf	EepromRead@address,c
  4379                           
  4380                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
  4381  0037D2  5019               	movf	EepromRead@address,w,c
  4382  0037D4  EC78  F01B         	call	_DATAEE_ReadByte
  4383  0037D8  0012               	return	
  4384  0037DA                     __end_of_EepromRead:
  4385                           	opt stack 0
  4386                           tosu	equ	0xFFF
  4387                           tosh	equ	0xFFE
  4388                           tosl	equ	0xFFD
  4389                           pclath	equ	0xFFA
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _DATAEE_ReadByte *****************
  4408 ;; Defined at:
  4409 ;;		line 194 in file "mcc_generated_files/memory.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  bAdd            1    wreg     unsigned char 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  bAdd            1   23[COMRAM] unsigned char 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      unsigned char 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4423 ;;      Params:         0       0       0       0       0       0       0
  4424 ;;      Locals:         1       0       0       0       0       0       0
  4425 ;;      Temps:          0       0       0       0       0       0       0
  4426 ;;      Totals:         1       0       0       0       0       0       0
  4427 ;;Total ram usage:        1 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    3
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_EepromRead
  4434 ;;		_EepromTest
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text21
  4439  0036F0                     __ptext21:
  4440                           	opt stack 0
  4441  0036F0                     _DATAEE_ReadByte:
  4442                           	opt stack 23
  4443                           
  4444                           ;incstack = 0
  4445                           ;DATAEE_ReadByte@bAdd stored from wreg
  4446  0036F0  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  4447                           
  4448                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  4449  0036F2  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  4450                           
  4451                           ;memory.c: 198: EECON1bits.CFGS = 0;
  4452  0036F6  9CA6               	bcf	4006,6,c	;volsfr
  4453                           
  4454                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  4455  0036F8  9EA6               	bcf	4006,7,c	;volsfr
  4456                           
  4457                           ;memory.c: 200: EECON1bits.RD = 1;
  4458  0036FA  80A6               	bsf	4006,0,c	;volsfr
  4459                           
  4460                           ;memory.c: 201: __nop();
  4461  0036FC  F000               	nop	
  4462                           
  4463                           ;memory.c: 202: __nop();
  4464  0036FE  F000               	nop	
  4465                           
  4466                           ;memory.c: 204: return (EEDATA);
  4467  003700  50A8               	movf	4008,w,c	;volatile
  4468  003702  0012               	return	
  4469  003704                     __end_of_DATAEE_ReadByte:
  4470                           	opt stack 0
  4471                           tosu	equ	0xFFF
  4472                           tosh	equ	0xFFE
  4473                           tosl	equ	0xFFD
  4474                           pclath	equ	0xFFA
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           postinc0	equ	0xFEE
  4483                           wreg	equ	0xFE8
  4484                           postdec1	equ	0xFE5
  4485                           fsr1l	equ	0xFE1
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function _FlashReadUart *****************
  4493 ;; Defined at:
  4494 ;;		line 62 in file "FlashApp.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  numOfSampleT    2   43[COMRAM] int 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  idx             2   91[BANK0 ] int 
  4499 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4500 ;;  offset          2   93[BANK0 ] int 
  4501 ;;  j               2   89[BANK0 ] int 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      void 
  4504 ;; Registers used:
  4505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4511 ;;      Params:         2       0       0       0       0       0       0
  4512 ;;      Locals:         0      83       0       0       0       0       0
  4513 ;;      Temps:          0      12       0       0       0       0       0
  4514 ;;      Totals:         2      95       0       0       0       0       0
  4515 ;;Total ram usage:       97 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    6
  4518 ;; This function calls:
  4519 ;;		_FLASH_IsWriteDone
  4520 ;;		_FLASH_ReadByte
  4521 ;;		_SendAckMessage
  4522 ;;		_WriteUartMessage
  4523 ;;		_ZeroArray
  4524 ;;		_abs
  4525 ;;		_crc8
  4526 ;; This function is called by:
  4527 ;;		_GroupFlashMemory
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text22
  4532  0006AA                     __ptext22:
  4533                           	opt stack 0
  4534  0006AA                     _FlashReadUart:
  4535                           	opt stack 22
  4536                           
  4537                           ;FlashApp.c: 65: int j=0;
  4538                           
  4539                           ;incstack = 0
  4540  0006AA  0E00               	movlw	0
  4541  0006AC  0100               	movlb	0	; () banked
  4542  0006AE  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4543  0006B0  0E00               	movlw	0
  4544  0006B2  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4545                           
  4546                           ;FlashApp.c: 66: int offset = 0;
  4547  0006B4  0E00               	movlw	0
  4548  0006B6  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4549  0006B8  0E00               	movlw	0
  4550  0006BA  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4554                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4555  0006BC  0E6C               	movlw	low FlashReadUart@TxMsg
  4556  0006BE  6E20               	movwf	ZeroArray@array,c
  4557  0006C0  0E00               	movlw	high FlashReadUart@TxMsg
  4558  0006C2  6E21               	movwf	ZeroArray@array+1,c
  4559  0006C4  0E00               	movlw	0
  4560  0006C6  6E23               	movwf	ZeroArray@size+1,c
  4561  0006C8  0E45               	movlw	69
  4562  0006CA  6E22               	movwf	ZeroArray@size,c
  4563  0006CC  EC2A  F01B         	call	_ZeroArray	;wreg free
  4564                           
  4565                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4566  0006D0  ECC3  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4567  0006D4  0900               	iorlw	0
  4568  0006D6  B4D8               	btfsc	status,2,c
  4569  0006D8  0012               	return	
  4570                           
  4571                           ;FlashApp.c: 74: }
  4572                           ;FlashApp.c: 76: if (numOfReadSamples)
  4573                           
  4574                           ;FlashApp.c: 72: {
  4575                           ;FlashApp.c: 73: return;
  4576  0006DA  503E               	movf	_numOfReadSamples,w,c
  4577  0006DC  103F               	iorwf	_numOfReadSamples+1,w,c
  4578  0006DE  1040               	iorwf	_numOfReadSamples+2,w,c
  4579  0006E0  1041               	iorwf	_numOfReadSamples+3,w,c
  4580  0006E2  B4D8               	btfsc	status,2,c
  4581  0006E4  D0EE               	goto	l290
  4582                           
  4583                           ;FlashApp.c: 77: {
  4584                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4585  0006E6  5031               	movf	_numOfValidateSamples,w,c
  4586  0006E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4587  0006EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4588  0006EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4589  0006EE  B4D8               	btfsc	status,2,c
  4590  0006F0  D09A               	goto	l291
  4591                           
  4592                           ;FlashApp.c: 79: {
  4593                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4594  0006F2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4595  0006F6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4596  0006FA  0E00               	movlw	0
  4597  0006FC  0100               	movlb	0	; () banked
  4598  0006FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4599  000700  0EFF               	movlw	255
  4600  000702  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4601  000704  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4602  000706  5031               	movf	_numOfValidateSamples,w,c
  4603  000708  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4604  00070A  5032               	movf	_numOfValidateSamples+1,w,c
  4605  00070C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4606  00070E  5033               	movf	_numOfValidateSamples+2,w,c
  4607  000710  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4608  000712  5034               	movf	_numOfValidateSamples+3,w,c
  4609  000714  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4610  000716  B0D8               	btfsc	status,0,c
  4611  000718  D002               	goto	u7200
  4612  00071A  0E01               	movlw	1
  4613  00071C  D001               	goto	u7210
  4614  00071E                     u7200:
  4615  00071E  0E00               	movlw	0
  4616  000720                     u7210:
  4617  000720  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4618  000722  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4619  000724  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4620  000726  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4621  000728  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4622  00072A  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4623  00072C  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4624  00072E  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4625  000730  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4626  000732  0E00               	movlw	0
  4627  000734  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4628  000736  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4629  000738  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4630  00073A  5031               	movf	_numOfValidateSamples,w,c
  4631  00073C  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4632  00073E  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4633  000740  5032               	movf	_numOfValidateSamples+1,w,c
  4634  000742  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4635  000744  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4636  000746  5033               	movf	_numOfValidateSamples+2,w,c
  4637  000748  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4638  00074A  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4639  00074C  5034               	movf	_numOfValidateSamples+3,w,c
  4640  00074E  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4641  000750  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4642  000752  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4643  000754  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4644  000756  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4645  000758  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4646  00075A  A4D8               	btfss	status,2,c
  4647  00075C  D00A               	goto	l293
  4648                           
  4649                           ; BSR set to: 0
  4650  00075E  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$565
  4651  000762  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$565+1
  4652  000766  0E00               	movlw	0
  4653  000768  BFB2               	btfsc	(_FlashReadUart$565+1)& (0+255),7,b
  4654  00076A  0EFF               	movlw	-1
  4655  00076C  6FB3               	movwf	(_FlashReadUart$565+2)& (0+255),b
  4656  00076E  6FB4               	movwf	(_FlashReadUart$565+3)& (0+255),b
  4657  000770  D008               	goto	l295
  4658  000772                     l293:
  4659                           
  4660                           ; BSR set to: 0
  4661  000772  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$565
  4662  000776  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$565+1
  4663  00077A  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$565+2
  4664  00077E  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$565+3
  4665  000782                     l295:
  4666                           
  4667                           ; BSR set to: 0
  4668  000782  C0B1  F0BD         	movff	_FlashReadUart$565,FlashReadUart@offset
  4669  000786  C0B2  F0BE         	movff	_FlashReadUart$565+1,FlashReadUart@offset+1
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;FlashApp.c: 81: if(offset < 0)
  4673  00078A  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4674  00078C  D091               	goto	l298
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;FlashApp.c: 82: {
  4678                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4679  00078E  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4680  000792  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4681  000796  EC77  F01A         	call	_abs	;wreg free
  4682  00079A  C018  F060         	movff	?_abs,??_FlashReadUart
  4683  00079E  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4684  0007A2  0E00               	movlw	0
  4685  0007A4  0100               	movlb	0	; () banked
  4686  0007A6  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4687  0007A8  0EFF               	movlw	255
  4688  0007AA  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4689  0007AC  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4690  0007AE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4691  0007B0  5C3E               	subwf	_numOfReadSamples,w,c
  4692  0007B2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4693  0007B4  583F               	subwfb	_numOfReadSamples+1,w,c
  4694  0007B6  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4695  0007B8  5840               	subwfb	_numOfReadSamples+2,w,c
  4696  0007BA  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4697  0007BC  5841               	subwfb	_numOfReadSamples+3,w,c
  4698  0007BE  B0D8               	btfsc	status,0,c
  4699  0007C0  D016               	goto	l297
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;FlashApp.c: 84: {
  4703                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4704  0007C2  503E               	movf	_numOfReadSamples,w,c
  4705  0007C4  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4706  0007C6  6F60               	movwf	??_FlashReadUart& (0+255),b
  4707  0007C8  503F               	movf	_numOfReadSamples+1,w,c
  4708  0007CA  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4709  0007CC  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4710  0007CE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4711  0007D0  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4712  0007D2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4713  0007D4  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4717  0007D6  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4718  0007DA  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4719  0007DE  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4720  0007E0  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4721  0007E2  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4722  0007E4  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4723  0007E6  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4724  0007EA  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4725  0007EE                     l297:
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;FlashApp.c: 88: }
  4729                           ;FlashApp.c: 90: readAddress += offset * (64);
  4730  0007EE  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4731  0007F2  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4732  0007F6  0E06               	movlw	6
  4733  0007F8                     u7255:
  4734  0007F8  90D8               	bcf	status,0,c
  4735  0007FA  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4736  0007FC  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4737  0007FE  2EE8               	decfsz	wreg,f,c
  4738  000800  D7FB               	goto	u7255
  4739  000802  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4740  000806  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4741  00080A  0E00               	movlw	0
  4742  00080C  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4743  00080E  0EFF               	movlw	255
  4744  000810  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4745  000812  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4746  000814  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4747  000816  27F7               	addwf	_readAddress& (0+255),f,b
  4748  000818  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4749  00081A  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4750  00081C  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4751  00081E  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4752  000820  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4753  000822  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;FlashApp.c: 91: }
  4757                           ;FlashApp.c: 92: }
  4758  000824  D045               	goto	l298
  4759  000826                     l291:
  4760                           
  4761                           ;FlashApp.c: 93: else
  4762                           ;FlashApp.c: 94: {
  4763                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4764                           
  4765                           ; BSR set to: 0
  4766  000826  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4767  00082A  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4768  00082E  0E00               	movlw	0
  4769  000830  0100               	movlb	0	; () banked
  4770  000832  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4771  000834  0EFF               	movlw	255
  4772  000836  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4773  000838  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4774  00083A  503E               	movf	_numOfReadSamples,w,c
  4775  00083C  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4776  00083E  503F               	movf	_numOfReadSamples+1,w,c
  4777  000840  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4778  000842  5040               	movf	_numOfReadSamples+2,w,c
  4779  000844  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4780  000846  5041               	movf	_numOfReadSamples+3,w,c
  4781  000848  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4782  00084A  A0D8               	btfss	status,0,c
  4783  00084C  D009               	goto	l300
  4784                           
  4785                           ; BSR set to: 0
  4786  00084E  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$566
  4787  000852  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$566+1
  4788  000856  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$566+2
  4789  00085A  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$566+3
  4790  00085E  D009               	goto	l302
  4791  000860                     l300:
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796  000860  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$566
  4797  000864  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$566+1
  4798  000868  0E00               	movlw	0
  4799  00086A  BFB6               	btfsc	(_FlashReadUart$566+1)& (0+255),7,b
  4800  00086C  0EFF               	movlw	-1
  4801  00086E  6FB7               	movwf	(_FlashReadUart$566+2)& (0+255),b
  4802  000870  6FB8               	movwf	(_FlashReadUart$566+3)& (0+255),b
  4803  000872                     l302:
  4804                           
  4805                           ; BSR set to: 0
  4806                           
  4807                           ; BSR set to: 0
  4808  000872  C0B5  F02C         	movff	_FlashReadUart$566,FlashReadUart@numOfSampleToRead
  4809  000876  C0B6  F02D         	movff	_FlashReadUart$566+1,FlashReadUart@numOfSampleToRead+1
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4813  00087A  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4814  00087E  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4815  000882  0E06               	movlw	6
  4816  000884                     u7275:
  4817  000884  90D8               	bcf	status,0,c
  4818  000886  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4819  000888  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4820  00088A  2EE8               	decfsz	wreg,f,c
  4821  00088C  D7FB               	goto	u7275
  4822  00088E  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4823  000892  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4824  000896  0E00               	movlw	0
  4825  000898  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4826  00089A  0EFF               	movlw	255
  4827  00089C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4828  00089E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4829  0008A0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4830  0008A2  5FF7               	subwf	_readAddress& (0+255),f,b
  4831  0008A4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4832  0008A6  5BF8               	subwfb	(_readAddress+1)& (0+255),f,b
  4833  0008A8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4834  0008AA  5BF9               	subwfb	(_readAddress+2)& (0+255),f,b
  4835  0008AC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4836  0008AE  5BFA               	subwfb	(_readAddress+3)& (0+255),f,b
  4837  0008B0                     l298:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;FlashApp.c: 97: }
  4841                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4842                           
  4843                           ; BSR set to: 0
  4844  0008B0  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4845  0008B2  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4846  0008B4  E13E               	bnz	l7364
  4847  0008B6  05F7               	decf	_readAddress& (0+255),w,b
  4848  0008B8  0E40               	movlw	64
  4849  0008BA  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4850  0008BC  B0D8               	btfsc	status,0,c
  4851  0008BE  D039               	goto	l308
  4852  0008C0  D023               	goto	u7310
  4853  0008C2                     l290:
  4854                           
  4855                           ;FlashApp.c: 104: else
  4856                           ;FlashApp.c: 105: {
  4857                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4858                           
  4859                           ; BSR set to: 0
  4860  0008C2  503B               	movf	_isReWriteDone,w,c
  4861  0008C4  B4D8               	btfsc	status,2,c
  4862  0008C6  D029               	goto	l305
  4863  0008C8  0100               	movlb	0	; () banked
  4864  0008CA  51F7               	movf	_readAddress& (0+255),w,b
  4865  0008CC  5C42               	subwf	_writeAddress,w,c
  4866  0008CE  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4867  0008D0  5843               	subwfb	_writeAddress+1,w,c
  4868  0008D2  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4869  0008D4  5844               	subwfb	_writeAddress+2,w,c
  4870  0008D6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4871  0008D8  5845               	subwfb	_writeAddress+3,w,c
  4872  0008DA  A0D8               	btfss	status,0,c
  4873  0008DC  D01E               	goto	l305
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;FlashApp.c: 107: {
  4877                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4878  0008DE  0E40               	movlw	64
  4879  0008E0  2442               	addwf	_writeAddress,w,c
  4880  0008E2  6FF7               	movwf	_readAddress& (0+255),b
  4881  0008E4  0E00               	movlw	0
  4882  0008E6  2043               	addwfc	_writeAddress+1,w,c
  4883  0008E8  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4884  0008EA  0E00               	movlw	0
  4885  0008EC  2044               	addwfc	_writeAddress+2,w,c
  4886  0008EE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4887  0008F0  0E00               	movlw	0
  4888  0008F2  2045               	addwfc	_writeAddress+3,w,c
  4889  0008F4  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4890                           
  4891                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4892  0008F6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4893  0008F8  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4894  0008FA  E106               	bnz	u7310
  4895  0008FC  0EF0               	movlw	240
  4896  0008FE  5DF7               	subwf	_readAddress& (0+255),w,b
  4897  000900  0E7F               	movlw	127
  4898  000902  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4899  000904  A0D8               	btfss	status,0,c
  4900  000906  D015               	goto	l308
  4901  000908                     u7310:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;FlashApp.c: 110: {
  4905                           ;FlashApp.c: 111: readAddress = 0x4000;
  4906  000908  0E00               	movlw	0
  4907  00090A  6FF7               	movwf	_readAddress& (0+255),b
  4908  00090C  0E40               	movlw	64
  4909  00090E  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4910  000910  0E00               	movlw	0
  4911  000912  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4912  000914  0E00               	movlw	0
  4913  000916  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;FlashApp.c: 112: }
  4917                           ;FlashApp.c: 114: }
  4918  000918  D00C               	goto	l308
  4919  00091A                     l305:
  4920                           
  4921                           ;FlashApp.c: 115: else
  4922                           ;FlashApp.c: 116: {
  4923                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4924                           
  4925                           ; BSR set to: 0
  4926  00091A  5031               	movf	_numOfValidateSamples,w,c
  4927  00091C  1032               	iorwf	_numOfValidateSamples+1,w,c
  4928  00091E  1033               	iorwf	_numOfValidateSamples+2,w,c
  4929  000920  1034               	iorwf	_numOfValidateSamples+3,w,c
  4930  000922  A4D8               	btfss	status,2,c
  4931  000924  D006               	goto	l308
  4932                           
  4933                           ;FlashApp.c: 118: {
  4934                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4935  000926  0E55               	movlw	85
  4936  000928  6E24               	movwf	SendAckMessage@inRequest,c
  4937  00092A  0E05               	movlw	5
  4938  00092C  EC19  F017         	call	_SendAckMessage
  4939                           
  4940                           ;FlashApp.c: 120: return;
  4941  000930  0012               	return	
  4942  000932                     l308:
  4943  000932                     l7364:
  4944                           
  4945                           ;FlashApp.c: 121: }
  4946                           ;FlashApp.c: 123: }
  4947                           ;FlashApp.c: 124: }
  4948                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4949  000932  0E24               	movlw	36
  4950  000934  0100               	movlb	0	; () banked
  4951  000936  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4952                           
  4953                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4954  000938  0E05               	movlw	5
  4955  00093A  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4956                           
  4957                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4958  00093C  0E54               	movlw	84
  4959  00093E  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4960                           
  4961                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4962  000940  0E40               	movlw	64
  4963  000942  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4964                           
  4965                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4966  000944  0E00               	movlw	0
  4967  000946  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4968  000948  0E00               	movlw	0
  4969  00094A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4970  00094C  D084               	goto	l309
  4971  00094E                     
  4972                           ; BSR set to: 0
  4973                           ;FlashApp.c: 133: {
  4974                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4975                           
  4976                           ; BSR set to: 0
  4977  00094E  0E00               	movlw	0
  4978  000950  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4979  000952  0E00               	movlw	0
  4980  000954  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4981  000956                     l7368:
  4982                           
  4983                           ; BSR set to: 0
  4984  000956  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4985  000958  D006               	goto	l311
  4986  00095A  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4987  00095C  E12C               	bnz	l7378
  4988  00095E  0E40               	movlw	64
  4989  000960  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4990  000962  B0D8               	btfsc	status,0,c
  4991  000964  D028               	goto	u7340
  4992  000966                     l311:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;FlashApp.c: 136: {
  4996                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4997                           
  4998                           ; BSR set to: 0
  4999  000966  0E04               	movlw	4
  5000  000968  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  5001  00096A  6F60               	movwf	??_FlashReadUart& (0+255),b
  5002  00096C  0E00               	movlw	0
  5003  00096E  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5004  000970  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5005  000972  0E6C               	movlw	low FlashReadUart@TxMsg
  5006  000974  2560               	addwf	??_FlashReadUart& (0+255),w,b
  5007  000976  6ED9               	movwf	fsr2l,c
  5008  000978  0E00               	movlw	high FlashReadUart@TxMsg
  5009  00097A  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5010  00097C  6EDA               	movwf	fsr2h,c
  5011  00097E  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5012  000982  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5013  000986  0E00               	movlw	0
  5014  000988  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5015  00098A  0EFF               	movlw	255
  5016  00098C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5017  00098E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5018  000990  51F7               	movf	_readAddress& (0+255),w,b
  5019  000992  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5020  000994  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5021  000996  51F8               	movf	(_readAddress+1)& (0+255),w,b
  5022  000998  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5023  00099A  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5024  00099C  51F9               	movf	(_readAddress+2)& (0+255),w,b
  5025  00099E  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5026  0009A0  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5027  0009A2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  5028  0009A4  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5029  0009A6  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5030  0009A8  EC96  F01B         	call	_FLASH_ReadByte	;wreg free
  5031  0009AC  6EDF               	movwf	indf2,c
  5032  0009AE  0100               	movlb	0	; () banked
  5033  0009B0  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  5034  0009B2  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5035  0009B4  D7D0               	goto	l7368
  5036  0009B6                     u7340:
  5037  0009B6                     l7378:
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;FlashApp.c: 138: }
  5041                           ;FlashApp.c: 140: readAddress += (64);
  5042  0009B6  0E40               	movlw	64
  5043  0009B8  27F7               	addwf	_readAddress& (0+255),f,b
  5044  0009BA  0E00               	movlw	0
  5045  0009BC  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  5046  0009BE  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  5047  0009C0  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  5048                           
  5049                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  5050  0009C2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  5051  0009C4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  5052  0009C6  E106               	bnz	u7350
  5053  0009C8  0EF0               	movlw	240
  5054  0009CA  5DF7               	subwf	_readAddress& (0+255),w,b
  5055  0009CC  0E7F               	movlw	127
  5056  0009CE  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  5057  0009D0  A0D8               	btfss	status,0,c
  5058  0009D2  D008               	goto	l313
  5059  0009D4                     u7350:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;FlashApp.c: 142: {
  5063                           ;FlashApp.c: 143: readAddress = 0x4000;
  5064  0009D4  0E00               	movlw	0
  5065  0009D6  6FF7               	movwf	_readAddress& (0+255),b
  5066  0009D8  0E40               	movlw	64
  5067  0009DA  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5068  0009DC  0E00               	movlw	0
  5069  0009DE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5070  0009E0  0E00               	movlw	0
  5071  0009E2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5072  0009E4                     l313:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;FlashApp.c: 144: }
  5076                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5077                           
  5078                           ; BSR set to: 0
  5079  0009E4  0E6C               	movlw	low FlashReadUart@TxMsg
  5080  0009E6  6E18               	movwf	crc8@dataArray,c
  5081  0009E8  0E00               	movlw	high FlashReadUart@TxMsg
  5082  0009EA  6E19               	movwf	crc8@dataArray+1,c
  5083  0009EC  0E00               	movlw	0
  5084  0009EE  6E1B               	movwf	crc8@dataSize+1,c
  5085  0009F0  0E44               	movlw	68
  5086  0009F2  6E1A               	movwf	crc8@dataSize,c
  5087  0009F4  EC42  F017         	call	_crc8	;wreg free
  5088  0009F8  0100               	movlb	0	; () banked
  5089  0009FA  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5093  0009FC  0E6C               	movlw	low FlashReadUart@TxMsg
  5094  0009FE  6E19               	movwf	WriteUartMessage@dataBuf,c
  5095  000A00  0E00               	movlw	high FlashReadUart@TxMsg
  5096  000A02  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5097  000A04  0E00               	movlw	0
  5098  000A06  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5099  000A08  0E45               	movlw	69
  5100  000A0A  6E1B               	movwf	WriteUartMessage@dataSize,c
  5101  000A0C  ECB7  F019         	call	_WriteUartMessage	;wreg free
  5102                           
  5103                           ;FlashApp.c: 149: if(numOfValidateSamples)
  5104  000A10  5031               	movf	_numOfValidateSamples,w,c
  5105  000A12  1032               	iorwf	_numOfValidateSamples+1,w,c
  5106  000A14  1033               	iorwf	_numOfValidateSamples+2,w,c
  5107  000A16  1034               	iorwf	_numOfValidateSamples+3,w,c
  5108  000A18  B4D8               	btfsc	status,2,c
  5109  000A1A  D01A               	goto	l316
  5110                           
  5111                           ;FlashApp.c: 150: {
  5112                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  5113  000A1C  043E               	decf	_numOfReadSamples,w,c
  5114  000A1E  0EFF               	movlw	255
  5115  000A20  583F               	subwfb	_numOfReadSamples+1,w,c
  5116  000A22  0EFF               	movlw	255
  5117  000A24  5840               	subwfb	_numOfReadSamples+2,w,c
  5118  000A26  0EFF               	movlw	255
  5119  000A28  5841               	subwfb	_numOfReadSamples+3,w,c
  5120  000A2A  B0D8               	btfsc	status,0,c
  5121  000A2C  D006               	goto	l315
  5122                           
  5123                           ;FlashApp.c: 152: {
  5124                           ;FlashApp.c: 153: numOfReadSamples++;
  5125  000A2E  0E01               	movlw	1
  5126  000A30  263E               	addwf	_numOfReadSamples,f,c
  5127  000A32  0E00               	movlw	0
  5128  000A34  223F               	addwfc	_numOfReadSamples+1,f,c
  5129  000A36  2240               	addwfc	_numOfReadSamples+2,f,c
  5130  000A38  2241               	addwfc	_numOfReadSamples+3,f,c
  5131  000A3A                     l315:
  5132                           
  5133                           ;FlashApp.c: 154: }
  5134                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  5135  000A3A  5031               	movf	_numOfValidateSamples,w,c
  5136  000A3C  1032               	iorwf	_numOfValidateSamples+1,w,c
  5137  000A3E  1033               	iorwf	_numOfValidateSamples+2,w,c
  5138  000A40  1034               	iorwf	_numOfValidateSamples+3,w,c
  5139  000A42  B4D8               	btfsc	status,2,c
  5140  000A44  D005               	goto	l316
  5141                           
  5142                           ;FlashApp.c: 156: {
  5143                           ;FlashApp.c: 157: numOfValidateSamples--;
  5144  000A46  0631               	decf	_numOfValidateSamples,f,c
  5145  000A48  0E00               	movlw	0
  5146  000A4A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5147  000A4C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5148  000A4E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5149  000A50                     l316:
  5150  000A50  0100               	movlb	0	; () banked
  5151  000A52  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5152  000A54  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5153  000A56                     l309:
  5154                           
  5155                           ; BSR set to: 0
  5156                           
  5157                           ; BSR set to: 0
  5158  000A56  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  5159  000A58  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5160  000A5A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5161  000A5C  0A80               	xorlw	128
  5162  000A5E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5163  000A60  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5164  000A62  0A80               	xorlw	128
  5165  000A64  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5166  000A66  B0D8               	btfsc	status,0,c
  5167  000A68  0012               	return	
  5168  000A6A  D771               	goto	l310
  5169  000A6C                     __end_of_FlashReadUart:
  5170                           	opt stack 0
  5171                           tosu	equ	0xFFF
  5172                           tosh	equ	0xFFE
  5173                           tosl	equ	0xFFD
  5174                           pclath	equ	0xFFA
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           postdec1	equ	0xFE5
  5185                           fsr1l	equ	0xFE1
  5186                           indf2	equ	0xFDF
  5187                           postinc2	equ	0xFDE
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function _abs *****************
  5193 ;; Defined at:
  5194 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  a               2   23[COMRAM] int 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  2   23[COMRAM] int 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5208 ;;      Params:         2       0       0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0
  5210 ;;      Temps:          2       0       0       0       0       0       0
  5211 ;;      Totals:         4       0       0       0       0       0       0
  5212 ;;Total ram usage:        4 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    3
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_FlashReadUart
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text23
  5223  0034EE                     __ptext23:
  5224                           	opt stack 0
  5225  0034EE                     _abs:
  5226                           	opt stack 24
  5227                           
  5228                           ;incstack = 0
  5229  0034EE  AE19               	btfss	abs@a+1,7,c
  5230  0034F0  D00D               	goto	l1489
  5231  0034F2  C018  F01A         	movff	abs@a,??_abs
  5232  0034F6  C019  F01B         	movff	abs@a+1,??_abs+1
  5233  0034FA  1E1A               	comf	??_abs,f,c
  5234  0034FC  1E1B               	comf	??_abs+1,f,c
  5235  0034FE  4A1A               	infsnz	??_abs,f,c
  5236  003500  2A1B               	incf	??_abs+1,f,c
  5237  003502  C01A  F018         	movff	??_abs,?_abs
  5238  003506  C01B  F019         	movff	??_abs+1,?_abs+1
  5239  00350A  0012               	return	
  5240  00350C                     l1489:
  5241  00350C  C018  F018         	movff	abs@a,?_abs
  5242  003510  C019  F019         	movff	abs@a+1,?_abs+1
  5243  003514  0012               	return		;funcret
  5244  003516                     __end_of_abs:
  5245                           	opt stack 0
  5246                           tosu	equ	0xFFF
  5247                           tosh	equ	0xFFE
  5248                           tosl	equ	0xFFD
  5249                           pclath	equ	0xFFA
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           postinc0	equ	0xFEE
  5258                           wreg	equ	0xFE8
  5259                           postdec1	equ	0xFE5
  5260                           fsr1l	equ	0xFE1
  5261                           indf2	equ	0xFDF
  5262                           postinc2	equ	0xFDE
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function _FLASH_ReadByte *****************
  5268 ;; Defined at:
  5269 ;;		line 58 in file "mcc_generated_files/memory.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      unsigned char 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5283 ;;      Params:         4       0       0       0       0       0       0
  5284 ;;      Locals:         0       0       0       0       0       0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0
  5286 ;;      Totals:         4       0       0       0       0       0       0
  5287 ;;Total ram usage:        4 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    3
  5290 ;; This function calls:
  5291 ;;		Nothing
  5292 ;; This function is called by:
  5293 ;;		_FlashReadUart
  5294 ;;		_FlashTest
  5295 ;;		_FLASH_ReadWord
  5296 ;;		_FLASH_WriteByte
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text24
  5301  00372C                     __ptext24:
  5302                           	opt stack 0
  5303  00372C                     _FLASH_ReadByte:
  5304                           	opt stack 24
  5305                           
  5306                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5307                           
  5308                           ;incstack = 0
  5309  00372C  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5310                           
  5311                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5312  003730  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5313                           
  5314                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5315  003734  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5316  003738  0008               	tblrd		*	;# 
  5317                           
  5318                           ;memory.c: 66: return (TABLAT);
  5319  00373A  50F5               	movf	tablat,w,c	;volatile
  5320  00373C  0012               	return	
  5321  00373E                     __end_of_FLASH_ReadByte:
  5322                           	opt stack 0
  5323                           tosu	equ	0xFFF
  5324                           tosh	equ	0xFFE
  5325                           tosl	equ	0xFFD
  5326                           pclath	equ	0xFFA
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           postinc0	equ	0xFEE
  5335                           wreg	equ	0xFE8
  5336                           postdec1	equ	0xFE5
  5337                           fsr1l	equ	0xFE1
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _FlashReadCondition *****************
  5345 ;; Defined at:
  5346 ;;		line 178 in file "FlashApp.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;		None
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         0       0       0       0       0       0       0
  5361 ;;      Locals:         9       0       0       0       0       0       0
  5362 ;;      Temps:          4       0       0       0       0       0       0
  5363 ;;      Totals:        13       0       0       0       0       0       0
  5364 ;;Total ram usage:       13 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    5
  5367 ;; This function calls:
  5368 ;;		_WriteUartMessage
  5369 ;;		_ZeroArray
  5370 ;;		_crc8
  5371 ;;		_make8
  5372 ;; This function is called by:
  5373 ;;		_GroupFlashMemory
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text25
  5378  0017B4                     __ptext25:
  5379                           	opt stack 0
  5380  0017B4                     _FlashReadCondition:
  5381                           	opt stack 23
  5382                           
  5383                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5384                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5385                           
  5386                           ;incstack = 0
  5387  0017B4  0E28               	movlw	low FlashReadCondition@TxMsg
  5388  0017B6  6E20               	movwf	ZeroArray@array,c
  5389  0017B8  0E00               	movlw	high FlashReadCondition@TxMsg
  5390  0017BA  6E21               	movwf	ZeroArray@array+1,c
  5391  0017BC  0E00               	movlw	0
  5392  0017BE  6E23               	movwf	ZeroArray@size+1,c
  5393  0017C0  0E09               	movlw	9
  5394  0017C2  6E22               	movwf	ZeroArray@size,c
  5395  0017C4  EC2A  F01B         	call	_ZeroArray	;wreg free
  5396                           
  5397                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5398  0017C8  0E24               	movlw	36
  5399  0017CA  6E28               	movwf	FlashReadCondition@TxMsg,c
  5400                           
  5401                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5402  0017CC  0E05               	movlw	5
  5403  0017CE  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5404                           
  5405                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5406  0017D0  0E52               	movlw	82
  5407  0017D2  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5408                           
  5409                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5410  0017D4  0E04               	movlw	4
  5411  0017D6  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5412                           
  5413                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5414  0017D8  0EF0               	movlw	240
  5415  0017DA  6E18               	movwf	make8@data,c
  5416  0017DC  0E3F               	movlw	63
  5417  0017DE  6E19               	movwf	make8@data+1,c
  5418  0017E0  0E00               	movlw	0
  5419  0017E2  6E1A               	movwf	make8@data+2,c
  5420  0017E4  0E00               	movlw	0
  5421  0017E6  6E1B               	movwf	make8@data+3,c
  5422  0017E8  0E01               	movlw	1
  5423  0017EA  6E1C               	movwf	make8@dataLocation,c
  5424  0017EC  EC8F  F015         	call	_make8	;wreg free
  5425  0017F0  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5426                           
  5427                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5428  0017F2  0EF0               	movlw	240
  5429  0017F4  6E18               	movwf	make8@data,c
  5430  0017F6  0E3F               	movlw	63
  5431  0017F8  6E19               	movwf	make8@data+1,c
  5432  0017FA  0E00               	movlw	0
  5433  0017FC  6E1A               	movwf	make8@data+2,c
  5434  0017FE  0E00               	movlw	0
  5435  001800  6E1B               	movwf	make8@data+3,c
  5436  001802  0E00               	movlw	0
  5437  001804  6E1C               	movwf	make8@dataLocation,c
  5438  001806  EC8F  F015         	call	_make8	;wreg free
  5439  00180A  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5440                           
  5441                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5442  00180C  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5443  001810  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5444  001814  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5445  001818  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5446  00181C  1E24               	comf	??_FlashReadCondition,f,c
  5447  00181E  1E25               	comf	??_FlashReadCondition+1,f,c
  5448  001820  1E26               	comf	??_FlashReadCondition+2,f,c
  5449  001822  1E27               	comf	??_FlashReadCondition+3,f,c
  5450  001824  2A24               	incf	??_FlashReadCondition,f,c
  5451  001826  0E00               	movlw	0
  5452  001828  2225               	addwfc	??_FlashReadCondition+1,f,c
  5453  00182A  2226               	addwfc	??_FlashReadCondition+2,f,c
  5454  00182C  2227               	addwfc	??_FlashReadCondition+3,f,c
  5455  00182E  0EF0               	movlw	240
  5456  001830  2424               	addwf	??_FlashReadCondition,w,c
  5457  001832  6E18               	movwf	make8@data,c
  5458  001834  0E7F               	movlw	127
  5459  001836  2025               	addwfc	??_FlashReadCondition+1,w,c
  5460  001838  6E19               	movwf	make8@data+1,c
  5461  00183A  0E00               	movlw	0
  5462  00183C  2026               	addwfc	??_FlashReadCondition+2,w,c
  5463  00183E  6E1A               	movwf	make8@data+2,c
  5464  001840  0E00               	movlw	0
  5465  001842  2027               	addwfc	??_FlashReadCondition+3,w,c
  5466  001844  6E1B               	movwf	make8@data+3,c
  5467  001846  0E01               	movlw	1
  5468  001848  6E1C               	movwf	make8@dataLocation,c
  5469  00184A  EC8F  F015         	call	_make8	;wreg free
  5470  00184E  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5471                           
  5472                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5473  001850  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5474  001854  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5475  001858  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5476  00185C  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5477  001860  1E24               	comf	??_FlashReadCondition,f,c
  5478  001862  1E25               	comf	??_FlashReadCondition+1,f,c
  5479  001864  1E26               	comf	??_FlashReadCondition+2,f,c
  5480  001866  1E27               	comf	??_FlashReadCondition+3,f,c
  5481  001868  2A24               	incf	??_FlashReadCondition,f,c
  5482  00186A  0E00               	movlw	0
  5483  00186C  2225               	addwfc	??_FlashReadCondition+1,f,c
  5484  00186E  2226               	addwfc	??_FlashReadCondition+2,f,c
  5485  001870  2227               	addwfc	??_FlashReadCondition+3,f,c
  5486  001872  0EF0               	movlw	240
  5487  001874  2424               	addwf	??_FlashReadCondition,w,c
  5488  001876  6E18               	movwf	make8@data,c
  5489  001878  0E7F               	movlw	127
  5490  00187A  2025               	addwfc	??_FlashReadCondition+1,w,c
  5491  00187C  6E19               	movwf	make8@data+1,c
  5492  00187E  0E00               	movlw	0
  5493  001880  2026               	addwfc	??_FlashReadCondition+2,w,c
  5494  001882  6E1A               	movwf	make8@data+2,c
  5495  001884  0E00               	movlw	0
  5496  001886  2027               	addwfc	??_FlashReadCondition+3,w,c
  5497  001888  6E1B               	movwf	make8@data+3,c
  5498  00188A  0E00               	movlw	0
  5499  00188C  6E1C               	movwf	make8@dataLocation,c
  5500  00188E  EC8F  F015         	call	_make8	;wreg free
  5501  001892  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5502                           
  5503                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5504  001894  0E28               	movlw	low FlashReadCondition@TxMsg
  5505  001896  6E18               	movwf	crc8@dataArray,c
  5506  001898  0E00               	movlw	high FlashReadCondition@TxMsg
  5507  00189A  6E19               	movwf	crc8@dataArray+1,c
  5508  00189C  0E00               	movlw	0
  5509  00189E  6E1B               	movwf	crc8@dataSize+1,c
  5510  0018A0  0E08               	movlw	8
  5511  0018A2  6E1A               	movwf	crc8@dataSize,c
  5512  0018A4  EC42  F017         	call	_crc8	;wreg free
  5513  0018A8  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5514                           
  5515                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5516  0018AA  0E28               	movlw	low FlashReadCondition@TxMsg
  5517  0018AC  6E19               	movwf	WriteUartMessage@dataBuf,c
  5518  0018AE  0E00               	movlw	high FlashReadCondition@TxMsg
  5519  0018B0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5520  0018B2  0E00               	movlw	0
  5521  0018B4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5522  0018B6  0E09               	movlw	9
  5523  0018B8  6E1B               	movwf	WriteUartMessage@dataSize,c
  5524  0018BA  ECB7  F019         	call	_WriteUartMessage	;wreg free
  5525  0018BE  0012               	return		;funcret
  5526  0018C0                     __end_of_FlashReadCondition:
  5527                           	opt stack 0
  5528                           tosu	equ	0xFFF
  5529                           tosh	equ	0xFFE
  5530                           tosl	equ	0xFFD
  5531                           pclath	equ	0xFFA
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon	equ	0xFF2
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           postdec1	equ	0xFE5
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           fsr2h	equ	0xFDA
  5546                           fsr2l	equ	0xFD9
  5547                           status	equ	0xFD8
  5548                           
  5549 ;; *************** function _FlashEreaseMem *****************
  5550 ;; Defined at:
  5551 ;;		line 168 in file "FlashApp.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;		None
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5565 ;;      Params:         0       0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0
  5568 ;;      Totals:         0       0       0       0       0       0       0
  5569 ;;Total ram usage:        0 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    6
  5572 ;; This function calls:
  5573 ;;		_SendAckMessage
  5574 ;;		_ZeroArray
  5575 ;; This function is called by:
  5576 ;;		_GroupFlashMemory
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text26
  5581  002DE0                     __ptext26:
  5582                           	opt stack 0
  5583  002DE0                     _FlashEreaseMem:
  5584                           	opt stack 22
  5585                           
  5586                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5587                           
  5588                           ;incstack = 0
  5589  002DE0  0E00               	movlw	0
  5590  002DE2  6E42               	movwf	_writeAddress,c
  5591  002DE4  0E40               	movlw	64
  5592  002DE6  6E43               	movwf	_writeAddress+1,c
  5593  002DE8  0E00               	movlw	0
  5594  002DEA  6E44               	movwf	_writeAddress+2,c
  5595  002DEC  0E00               	movlw	0
  5596  002DEE  6E45               	movwf	_writeAddress+3,c
  5597                           
  5598                           ;FlashApp.c: 171: readAddress = 0x4000;
  5599  002DF0  0E00               	movlw	0
  5600  002DF2  0100               	movlb	0	; () banked
  5601  002DF4  6FF7               	movwf	_readAddress& (0+255),b
  5602  002DF6  0E40               	movlw	64
  5603  002DF8  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5604  002DFA  0E00               	movlw	0
  5605  002DFC  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5606  002DFE  0E00               	movlw	0
  5607  002E00  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5608                           
  5609                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5610  002E02  0E00               	movlw	0
  5611  002E04  6E31               	movwf	_numOfValidateSamples,c
  5612  002E06  0E00               	movlw	0
  5613  002E08  6E32               	movwf	_numOfValidateSamples+1,c
  5614  002E0A  0E00               	movlw	0
  5615  002E0C  6E33               	movwf	_numOfValidateSamples+2,c
  5616  002E0E  0E00               	movlw	0
  5617  002E10  6E34               	movwf	_numOfValidateSamples+3,c
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5621  002E12  0E6E               	movlw	low _sampleArray
  5622  002E14  6E20               	movwf	ZeroArray@array,c
  5623  002E16  0E01               	movlw	high _sampleArray
  5624  002E18  6E21               	movwf	ZeroArray@array+1,c
  5625  002E1A  0E00               	movlw	0
  5626  002E1C  6E23               	movwf	ZeroArray@size+1,c
  5627  002E1E  0E20               	movlw	32
  5628  002E20  6E22               	movwf	ZeroArray@size,c
  5629  002E22  EC2A  F01B         	call	_ZeroArray	;wreg free
  5630                           
  5631                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5632  002E26  0E51               	movlw	81
  5633  002E28  6E24               	movwf	SendAckMessage@inRequest,c
  5634  002E2A  0E05               	movlw	5
  5635  002E2C  EC19  F017         	call	_SendAckMessage
  5636  002E30  0012               	return		;funcret
  5637  002E32                     __end_of_FlashEreaseMem:
  5638                           	opt stack 0
  5639                           tosu	equ	0xFFF
  5640                           tosh	equ	0xFFE
  5641                           tosl	equ	0xFFD
  5642                           pclath	equ	0xFFA
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           postinc0	equ	0xFEE
  5651                           wreg	equ	0xFE8
  5652                           postdec1	equ	0xFE5
  5653                           fsr1l	equ	0xFE1
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _DacSetValue *****************
  5661 ;; Defined at:
  5662 ;;		line 33 in file "DacApp.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  data            2   45[COMRAM] PTR unsigned char 
  5665 ;;		 -> rxMsgData(20), 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  regData         2   21[BANK0 ] unsigned int 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5677 ;;      Params:         2       0       0       0       0       0       0
  5678 ;;      Locals:         0       2       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0
  5680 ;;      Totals:         2       2       0       0       0       0       0
  5681 ;;Total ram usage:        4 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    7
  5684 ;; This function calls:
  5685 ;;		_GetIntFromUartData
  5686 ;;		_SWSPI_send_word
  5687 ;;		_SendAckMessage
  5688 ;; This function is called by:
  5689 ;;		_GroupDAC
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text27
  5694  003302                     __ptext27:
  5695                           	opt stack 0
  5696  003302                     _DacSetValue:
  5697                           	opt stack 21
  5698                           
  5699                           ;DacApp.c: 35: uint16_t regData = GetIntFromUartData(data);
  5700                           
  5701                           ;incstack = 0
  5702  003302  C02E  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5703  003306  C02F  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5704  00330A  ECCF  F011         	call	_GetIntFromUartData	;wreg free
  5705  00330E  C066  F075         	movff	?_GetIntFromUartData,DacSetValue@regData
  5706  003312  C067  F076         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5707                           
  5708                           ;DacApp.c: 36: SWSPI_send_word(EXT_DAC, regData, 1);
  5709  003316  C075  F021         	movff	DacSetValue@regData,SWSPI_send_word@data
  5710  00331A  C076  F022         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5711  00331E  6A23               	clrf	SWSPI_send_word@data+2,c
  5712  003320  6A24               	clrf	SWSPI_send_word@data+3,c
  5713  003322  0E01               	movlw	1
  5714  003324  6E25               	movwf	SWSPI_send_word@dataSize,c
  5715  003326  0E02               	movlw	2
  5716  003328  ECC5  F010         	call	_SWSPI_send_word
  5717                           
  5718                           ;DacApp.c: 39: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5719  00332C  0E61               	movlw	97
  5720  00332E  6E24               	movwf	SendAckMessage@inRequest,c
  5721  003330  0E06               	movlw	6
  5722  003332  EC19  F017         	call	_SendAckMessage
  5723  003336  0012               	return		;funcret
  5724  003338                     __end_of_DacSetValue:
  5725                           	opt stack 0
  5726                           tosu	equ	0xFFF
  5727                           tosh	equ	0xFFE
  5728                           tosl	equ	0xFFD
  5729                           pclath	equ	0xFFA
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           postdec1	equ	0xFE5
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           fsr2h	equ	0xFDA
  5744                           fsr2l	equ	0xFD9
  5745                           status	equ	0xFD8
  5746                           
  5747 ;; *************** function _GetIntFromUartData *****************
  5748 ;; Defined at:
  5749 ;;		line 40 in file "SystemCommon.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5752 ;;		 -> rxMsgData(20), 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  c               1   18[BANK0 ] unsigned char 
  5755 ;;  idx             2   19[BANK0 ] int 
  5756 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  4    6[BANK0 ] unsigned long 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5766 ;;      Params:         0       4       0       0       0       0       0
  5767 ;;      Locals:         0      11       0       0       0       0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0
  5769 ;;      Totals:         0      15       0       0       0       0       0
  5770 ;;Total ram usage:       15 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    6
  5773 ;; This function calls:
  5774 ;;		_ZeroArray
  5775 ;;		_strtol
  5776 ;; This function is called by:
  5777 ;;		_DacSetValue
  5778 ;;		_UpdateRxFreq
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text28
  5783  00239E                     __ptext28:
  5784                           	opt stack 0
  5785  00239E                     _GetIntFromUartData:
  5786                           	opt stack 21
  5787                           
  5788                           ;SystemCommon.c: 42: char dataRegArr[8];
  5789                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  5790                           
  5791                           ;incstack = 0
  5792  00239E  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5793  0023A0  6E20               	movwf	ZeroArray@array,c
  5794  0023A2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5795  0023A4  6E21               	movwf	ZeroArray@array+1,c
  5796  0023A6  0E00               	movlw	0
  5797  0023A8  6E23               	movwf	ZeroArray@size+1,c
  5798  0023AA  0E08               	movlw	8
  5799  0023AC  6E22               	movwf	ZeroArray@size,c
  5800  0023AE  EC2A  F01B         	call	_ZeroArray	;wreg free
  5801                           
  5802                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  5803  0023B2  0E00               	movlw	0
  5804  0023B4  0100               	movlb	0	; () banked
  5805  0023B6  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5806  0023B8  0E00               	movlw	0
  5807  0023BA  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  5808  0023BC                     l7056:
  5809                           
  5810                           ; BSR set to: 0
  5811  0023BC  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5812  0023BE  D006               	goto	l1280
  5813  0023C0  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5814  0023C2  E123               	bnz	l7074
  5815  0023C4  0E08               	movlw	8
  5816  0023C6  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5817  0023C8  B0D8               	btfsc	status,0,c
  5818  0023CA  D01F               	goto	u6890
  5819  0023CC                     l1280:
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;SystemCommon.c: 46: {
  5823                           ;SystemCommon.c: 47: char c = data[idx] + '0';
  5824                           
  5825                           ; BSR set to: 0
  5826  0023CC  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5827  0023CE  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5828  0023D0  6ED9               	movwf	fsr2l,c
  5829  0023D2  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5830  0023D4  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5831  0023D6  6EDA               	movwf	fsr2h,c
  5832  0023D8  50DF               	movf	indf2,w,c
  5833  0023DA  0F30               	addlw	48
  5834  0023DC  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;SystemCommon.c: 48: if(c == 0x40)
  5838  0023DE  0E40               	movlw	64
  5839  0023E0  1972               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5840  0023E2  B4D8               	btfsc	status,2,c
  5841  0023E4  D012               	goto	u6890
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;SystemCommon.c: 52: else
  5845                           ;SystemCommon.c: 53: {
  5846                           ;SystemCommon.c: 54: dataRegArr[idx] = data[idx] + '0';
  5847                           
  5848                           ; BSR set to: 0
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;SystemCommon.c: 51: }
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;SystemCommon.c: 49: {
  5855                           ;SystemCommon.c: 50: break;
  5856  0023E6  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5857  0023E8  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5858  0023EA  6ED9               	movwf	fsr2l,c
  5859  0023EC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5860  0023EE  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5861  0023F0  6EDA               	movwf	fsr2h,c
  5862  0023F2  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5863  0023F4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5864  0023F6  6EE1               	movwf	fsr1l,c
  5865  0023F8  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5866  0023FA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5867  0023FC  6EE2               	movwf	fsr1h,c
  5868  0023FE  50E7               	movf	indf1,w,c
  5869  002400  0F30               	addlw	48
  5870  002402  6EDF               	movwf	indf2,c
  5871                           
  5872                           ; BSR set to: 0
  5873                           
  5874                           ; BSR set to: 0
  5875  002404  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5876  002406  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5877  002408  D7D9               	goto	l7056
  5878  00240A                     u6890:
  5879  00240A                     l7074:
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;SystemCommon.c: 55: }
  5883                           ;SystemCommon.c: 57: }
  5884                           ;SystemCommon.c: 59: return strtol(dataRegArr, (0), 16);
  5885  00240A  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5886  00240C  6E24               	movwf	strtol@s,c
  5887  00240E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5888  002410  6E25               	movwf	strtol@s+1,c
  5889  002412  0E00               	movlw	0
  5890  002414  6E26               	movwf	strtol@endptr,c
  5891  002416  0E00               	movlw	0
  5892  002418  6E27               	movwf	strtol@endptr+1,c
  5893  00241A  0E00               	movlw	0
  5894  00241C  6E29               	movwf	strtol@base+1,c
  5895  00241E  0E10               	movlw	16
  5896  002420  6E28               	movwf	strtol@base,c
  5897  002422  EC2D  F007         	call	_strtol	;wreg free
  5898  002426  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5899  00242A  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5900  00242E  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5901  002432  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5902  002436  0012               	return	
  5903  002438                     __end_of_GetIntFromUartData:
  5904                           	opt stack 0
  5905                           tosu	equ	0xFFF
  5906                           tosh	equ	0xFFE
  5907                           tosl	equ	0xFFD
  5908                           pclath	equ	0xFFA
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           postinc0	equ	0xFEE
  5917                           wreg	equ	0xFE8
  5918                           indf1	equ	0xFE7
  5919                           postdec1	equ	0xFE5
  5920                           fsr1h	equ	0xFE2
  5921                           fsr1l	equ	0xFE1
  5922                           indf2	equ	0xFDF
  5923                           postinc2	equ	0xFDE
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           
  5928 ;; *************** function _strtol *****************
  5929 ;; Defined at:
  5930 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5933 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5934 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5935 ;;		 -> NULL(0), 
  5936 ;;  base            2   39[COMRAM] int 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;  a               4    1[BANK0 ] long 
  5939 ;;  c               1    5[BANK0 ] unsigned char 
  5940 ;;  sign            1    0[BANK0 ] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  4   35[COMRAM] long 
  5943 ;; Registers used:
  5944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5950 ;;      Params:         6       0       0       0       0       0       0
  5951 ;;      Locals:         0       6       0       0       0       0       0
  5952 ;;      Temps:          4       0       0       0       0       0       0
  5953 ;;      Totals:        10       6       0       0       0       0       0
  5954 ;;Total ram usage:       16 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    5
  5957 ;; This function calls:
  5958 ;;		___lmul
  5959 ;;		_isalpha
  5960 ;;		_isdigit
  5961 ;;		_isspace
  5962 ;;		_toupper
  5963 ;; This function is called by:
  5964 ;;		_GetIntFromUartData
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text29
  5969  000E5A                     __ptext29:
  5970                           	opt stack 0
  5971  000E5A                     _strtol:
  5972                           	opt stack 21
  5973                           
  5974                           ;incstack = 0
  5975  000E5A  C024  FFD9         	movff	strtol@s,fsr2l
  5976  000E5E  C025  FFDA         	movff	strtol@s+1,fsr2h
  5977  000E62  50DF               	movf	indf2,w,c
  5978  000E64  0100               	movlb	0	; () banked
  5979  000E66  6F65               	movwf	strtol@c& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982  000E68  4A24               	infsnz	strtol@s,f,c
  5983  000E6A  2A25               	incf	strtol@s+1,f,c
  5984                           
  5985                           ; BSR set to: 0
  5986  000E6C  5165               	movf	strtol@c& (0+255),w,b
  5987  000E6E  EC9F  F01A         	call	_isspace
  5988  000E72  B0D8               	btfsc	status,0,c
  5989  000E74  D7F2               	goto	_strtol
  5990  000E76  0E00               	movlw	0
  5991  000E78  0100               	movlb	0	; () banked
  5992  000E7A  6F61               	movwf	strtol@a& (0+255),b
  5993  000E7C  0E00               	movlw	0
  5994  000E7E  6F62               	movwf	(strtol@a+1)& (0+255),b
  5995  000E80  0E00               	movlw	0
  5996  000E82  6F63               	movwf	(strtol@a+2)& (0+255),b
  5997  000E84  0E00               	movlw	0
  5998  000E86  6F64               	movwf	(strtol@a+3)& (0+255),b
  5999  000E88  0E00               	movlw	0
  6000  000E8A  6F60               	movwf	strtol@sign& (0+255),b
  6001                           
  6002                           ; BSR set to: 0
  6003  000E8C  0E2D               	movlw	45
  6004  000E8E  1965               	xorwf	strtol@c& (0+255),w,b
  6005  000E90  A4D8               	btfss	status,2,c
  6006  000E92  D003               	goto	l2022
  6007                           
  6008                           ; BSR set to: 0
  6009  000E94  0E01               	movlw	1
  6010  000E96  6F60               	movwf	strtol@sign& (0+255),b
  6011  000E98  D004               	goto	u6310
  6012  000E9A                     l2022:
  6013                           
  6014                           ; BSR set to: 0
  6015                           
  6016                           ; BSR set to: 0
  6017  000E9A  0E2B               	movlw	43
  6018  000E9C  1965               	xorwf	strtol@c& (0+255),w,b
  6019  000E9E  A4D8               	btfss	status,2,c
  6020  000EA0  D008               	goto	l2024
  6021  000EA2                     u6310:
  6022                           
  6023                           ; BSR set to: 0
  6024  000EA2  C024  FFD9         	movff	strtol@s,fsr2l
  6025  000EA6  C025  FFDA         	movff	strtol@s+1,fsr2h
  6026  000EAA  50DF               	movf	indf2,w,c
  6027  000EAC  6F65               	movwf	strtol@c& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030  000EAE  4A24               	infsnz	strtol@s,f,c
  6031  000EB0  2A25               	incf	strtol@s+1,f,c
  6032  000EB2                     l2024:
  6033                           
  6034                           ; BSR set to: 0
  6035                           
  6036                           ; BSR set to: 0
  6037                           
  6038                           ; BSR set to: 0
  6039  000EB2  0E30               	movlw	48
  6040  000EB4  1965               	xorwf	strtol@c& (0+255),w,b
  6041  000EB6  A4D8               	btfss	status,2,c
  6042  000EB8  D02E               	goto	l2032
  6043                           
  6044                           ; BSR set to: 0
  6045  000EBA  C024  FFD9         	movff	strtol@s,fsr2l
  6046  000EBE  C025  FFDA         	movff	strtol@s+1,fsr2h
  6047  000EC2  50DF               	movf	indf2,w,c
  6048  000EC4  6F65               	movwf	strtol@c& (0+255),b
  6049                           
  6050                           ; BSR set to: 0
  6051  000EC6  4A24               	infsnz	strtol@s,f,c
  6052  000EC8  2A25               	incf	strtol@s+1,f,c
  6053                           
  6054                           ; BSR set to: 0
  6055  000ECA  5028               	movf	strtol@base,w,c
  6056  000ECC  1029               	iorwf	strtol@base+1,w,c
  6057  000ECE  B4D8               	btfsc	status,2,c
  6058  000ED0  D005               	goto	u6340
  6059                           
  6060                           ; BSR set to: 0
  6061  000ED2  0E10               	movlw	16
  6062  000ED4  1828               	xorwf	strtol@base,w,c
  6063  000ED6  1029               	iorwf	strtol@base+1,w,c
  6064  000ED8  A4D8               	btfss	status,2,c
  6065  000EDA  D015               	goto	l2026
  6066  000EDC                     u6340:
  6067                           
  6068                           ; BSR set to: 0
  6069                           
  6070                           ; BSR set to: 0
  6071  000EDC  0E78               	movlw	120
  6072  000EDE  1965               	xorwf	strtol@c& (0+255),w,b
  6073  000EE0  B4D8               	btfsc	status,2,c
  6074  000EE2  D004               	goto	u6360
  6075                           
  6076                           ; BSR set to: 0
  6077  000EE4  0E58               	movlw	88
  6078  000EE6  1965               	xorwf	strtol@c& (0+255),w,b
  6079  000EE8  A4D8               	btfss	status,2,c
  6080  000EEA  D00D               	goto	l2026
  6081  000EEC                     u6360:
  6082                           
  6083                           ; BSR set to: 0
  6084                           
  6085                           ; BSR set to: 0
  6086  000EEC  0E00               	movlw	0
  6087  000EEE  6E29               	movwf	strtol@base+1,c
  6088  000EF0  0E10               	movlw	16
  6089  000EF2  6E28               	movwf	strtol@base,c
  6090                           
  6091                           ; BSR set to: 0
  6092  000EF4  C024  FFD9         	movff	strtol@s,fsr2l
  6093  000EF8  C025  FFDA         	movff	strtol@s+1,fsr2h
  6094  000EFC  50DF               	movf	indf2,w,c
  6095  000EFE  6F65               	movwf	strtol@c& (0+255),b
  6096                           
  6097                           ; BSR set to: 0
  6098  000F00  4A24               	infsnz	strtol@s,f,c
  6099  000F02  2A25               	incf	strtol@s+1,f,c
  6100  000F04  D008               	goto	l2032
  6101  000F06                     l2026:
  6102                           
  6103                           ; BSR set to: 0
  6104                           
  6105                           ; BSR set to: 0
  6106  000F06  5028               	movf	strtol@base,w,c
  6107  000F08  1029               	iorwf	strtol@base+1,w,c
  6108  000F0A  A4D8               	btfss	status,2,c
  6109  000F0C  D004               	goto	l2032
  6110                           
  6111                           ; BSR set to: 0
  6112  000F0E  0E00               	movlw	0
  6113  000F10  6E29               	movwf	strtol@base+1,c
  6114  000F12  0E08               	movlw	8
  6115  000F14  6E28               	movwf	strtol@base,c
  6116  000F16                     l2032:
  6117                           
  6118                           ; BSR set to: 0
  6119                           
  6120                           ; BSR set to: 0
  6121                           
  6122                           ; BSR set to: 0
  6123                           
  6124                           ; BSR set to: 0
  6125  000F16  5028               	movf	strtol@base,w,c
  6126  000F18  1029               	iorwf	strtol@base+1,w,c
  6127  000F1A  A4D8               	btfss	status,2,c
  6128  000F1C  D004               	goto	l2033
  6129                           
  6130                           ; BSR set to: 0
  6131  000F1E  0E00               	movlw	0
  6132  000F20  6E29               	movwf	strtol@base+1,c
  6133  000F22  0E0A               	movlw	10
  6134  000F24  6E28               	movwf	strtol@base,c
  6135  000F26                     l2033:
  6136                           
  6137                           ; BSR set to: 0
  6138                           
  6139                           ; BSR set to: 0
  6140                           
  6141                           ; BSR set to: 0
  6142  000F26  5165               	movf	strtol@c& (0+255),w,b
  6143  000F28  EC8B  F01A         	call	_isalpha
  6144  000F2C  A0D8               	btfss	status,0,c
  6145  000F2E  D008               	goto	l2035
  6146  000F30  0100               	movlb	0	; () banked
  6147  000F32  5165               	movf	strtol@c& (0+255),w,b
  6148  000F34  EC82  F01B         	call	_toupper
  6149  000F38  0FC9               	addlw	201
  6150  000F3A  0100               	movlb	0	; () banked
  6151  000F3C  6F65               	movwf	strtol@c& (0+255),b
  6152  000F3E  D009               	goto	l2038
  6153  000F40                     l2035:
  6154                           
  6155                           ; BSR set to: 0
  6156  000F40  0100               	movlb	0	; () banked
  6157  000F42  5165               	movf	strtol@c& (0+255),w,b
  6158  000F44  EC0C  F01B         	call	_isdigit
  6159  000F48  A0D8               	btfss	status,0,c
  6160  000F4A  D039               	goto	l2039
  6161  000F4C  0E30               	movlw	48
  6162  000F4E  0100               	movlb	0	; () banked
  6163  000F50  5F65               	subwf	strtol@c& (0+255),f,b
  6164  000F52                     l2038:
  6165                           
  6166                           ; BSR set to: 0
  6167                           
  6168                           ; BSR set to: 0
  6169                           
  6170                           ; BSR set to: 0
  6171  000F52  5165               	movf	strtol@c& (0+255),w,b
  6172  000F54  6E2A               	movwf	??_strtol& (0+255),c
  6173  000F56  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6174  000F58  5028               	movf	strtol@base,w,c
  6175  000F5A  5C2A               	subwf	??_strtol,w,c
  6176  000F5C  502B               	movf	??_strtol+1,w,c
  6177  000F5E  0A80               	xorlw	128
  6178  000F60  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6179  000F62  5029               	movf	strtol@base+1,w,c
  6180  000F64  0A80               	xorlw	128
  6181  000F66  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6182  000F68  B0D8               	btfsc	status,0,c
  6183  000F6A  D029               	goto	l2039
  6184                           
  6185                           ; BSR set to: 0
  6186                           
  6187                           ; BSR set to: 0
  6188                           
  6189                           ; BSR set to: 0
  6190  000F6C  C028  F018         	movff	strtol@base,___lmul@multiplier
  6191  000F70  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6192  000F74  0E00               	movlw	0
  6193  000F76  BE19               	btfsc	___lmul@multiplier+1,7,c
  6194  000F78  0EFF               	movlw	-1
  6195  000F7A  6E1A               	movwf	___lmul@multiplier+2,c
  6196  000F7C  6E1B               	movwf	___lmul@multiplier+3,c
  6197  000F7E  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6198  000F82  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6199  000F86  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6200  000F8A  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6201  000F8E  EC6F  F016         	call	___lmul	;wreg free
  6202  000F92  0100               	movlb	0	; () banked
  6203  000F94  5165               	movf	strtol@c& (0+255),w,b
  6204  000F96  2418               	addwf	?___lmul,w,c
  6205  000F98  6F61               	movwf	strtol@a& (0+255),b
  6206  000F9A  0E00               	movlw	0
  6207  000F9C  2019               	addwfc	?___lmul+1,w,c
  6208  000F9E  6F62               	movwf	(strtol@a+1)& (0+255),b
  6209  000FA0  0E00               	movlw	0
  6210  000FA2  201A               	addwfc	?___lmul+2,w,c
  6211  000FA4  6F63               	movwf	(strtol@a+2)& (0+255),b
  6212  000FA6  0E00               	movlw	0
  6213  000FA8  201B               	addwfc	?___lmul+3,w,c
  6214  000FAA  6F64               	movwf	(strtol@a+3)& (0+255),b
  6215                           
  6216                           ; BSR set to: 0
  6217  000FAC  C024  FFD9         	movff	strtol@s,fsr2l
  6218  000FB0  C025  FFDA         	movff	strtol@s+1,fsr2h
  6219  000FB4  50DF               	movf	indf2,w,c
  6220  000FB6  6F65               	movwf	strtol@c& (0+255),b
  6221                           
  6222                           ; BSR set to: 0
  6223  000FB8  4A24               	infsnz	strtol@s,f,c
  6224  000FBA  2A25               	incf	strtol@s+1,f,c
  6225  000FBC  D7B4               	goto	l2033
  6226  000FBE                     l2039:
  6227                           
  6228                           ; BSR set to: 0
  6229  000FBE  5026               	movf	strtol@endptr,w,c
  6230  000FC0  1027               	iorwf	strtol@endptr+1,w,c
  6231  000FC2  B4D8               	btfsc	status,2,c
  6232  000FC4  D00E               	goto	l2041
  6233  000FC6  0EFF               	movlw	255
  6234  000FC8  2424               	addwf	strtol@s,w,c
  6235  000FCA  6E2A               	movwf	??_strtol& (0+255),c
  6236  000FCC  0EFF               	movlw	255
  6237  000FCE  2025               	addwfc	strtol@s+1,w,c
  6238  000FD0  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6239  000FD2  C026  FFD9         	movff	strtol@endptr,fsr2l
  6240  000FD6  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6241  000FDA  C02A  FFDE         	movff	??_strtol,postinc2
  6242  000FDE  C02B  FFDD         	movff	??_strtol+1,postdec2
  6243  000FE2                     l2041:
  6244  000FE2  0100               	movlb	0	; () banked
  6245  000FE4  5160               	movf	strtol@sign& (0+255),w,b
  6246  000FE6  B4D8               	btfsc	status,2,c
  6247  000FE8  D01A               	goto	l2042
  6248                           
  6249                           ; BSR set to: 0
  6250  000FEA  C061  F02A         	movff	strtol@a,??_strtol
  6251  000FEE  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6252  000FF2  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6253  000FF6  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6254  000FFA  1E2A               	comf	??_strtol,f,c
  6255  000FFC  1E2B               	comf	??_strtol+1,f,c
  6256  000FFE  1E2C               	comf	??_strtol+2,f,c
  6257  001000  1E2D               	comf	??_strtol+3,f,c
  6258  001002  2A2A               	incf	??_strtol,f,c
  6259  001004  0E00               	movlw	0
  6260  001006  222B               	addwfc	??_strtol+1,f,c
  6261  001008  222C               	addwfc	??_strtol+2,f,c
  6262  00100A  222D               	addwfc	??_strtol+3,f,c
  6263  00100C  C02A  F024         	movff	??_strtol,?_strtol
  6264  001010  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6265  001014  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6266  001018  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6267                           
  6268                           ; BSR set to: 0
  6269  00101C  0012               	return	
  6270  00101E                     l2042:
  6271                           
  6272                           ; BSR set to: 0
  6273  00101E  C061  F024         	movff	strtol@a,?_strtol
  6274  001022  C062  F025         	movff	strtol@a+1,?_strtol+1
  6275  001026  C063  F026         	movff	strtol@a+2,?_strtol+2
  6276  00102A  C064  F027         	movff	strtol@a+3,?_strtol+3
  6277                           
  6278                           ; BSR set to: 0
  6279  00102E  0012               	return		;funcret
  6280  001030                     __end_of_strtol:
  6281                           	opt stack 0
  6282                           tosu	equ	0xFFF
  6283                           tosh	equ	0xFFE
  6284                           tosl	equ	0xFFD
  6285                           pclath	equ	0xFFA
  6286                           tblptru	equ	0xFF8
  6287                           tblptrh	equ	0xFF7
  6288                           tblptrl	equ	0xFF6
  6289                           tablat	equ	0xFF5
  6290                           prodh	equ	0xFF4
  6291                           prodl	equ	0xFF3
  6292                           intcon	equ	0xFF2
  6293                           postinc0	equ	0xFEE
  6294                           wreg	equ	0xFE8
  6295                           indf1	equ	0xFE7
  6296                           postdec1	equ	0xFE5
  6297                           fsr1h	equ	0xFE2
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _toupper *****************
  6307 ;; Defined at:
  6308 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  c               1    wreg     unsigned char 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  c               1   23[COMRAM] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      unsigned char 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6322 ;;      Params:         0       0       0       0       0       0       0
  6323 ;;      Locals:         1       0       0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0
  6325 ;;      Totals:         1       0       0       0       0       0       0
  6326 ;;Total ram usage:        1 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    3
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_strtol
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text30
  6337  003704                     __ptext30:
  6338                           	opt stack 0
  6339  003704                     _toupper:
  6340                           	opt stack 22
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;incstack = 0
  6344                           ;toupper@c stored from wreg
  6345  003704  6E18               	movwf	toupper@c,c
  6346  003706  0E7B               	movlw	123
  6347  003708  6018               	cpfslt	toupper@c,c
  6348  00370A  D004               	goto	l2046
  6349  00370C  0E60               	movlw	96
  6350  00370E  6418               	cpfsgt	toupper@c,c
  6351  003710  D001               	goto	l2046
  6352  003712  9A18               	bcf	toupper@c,5,c
  6353  003714                     l2046:
  6354  003714  5018               	movf	toupper@c,w,c
  6355  003716  0012               	return	
  6356  003718                     __end_of_toupper:
  6357                           	opt stack 0
  6358                           tosu	equ	0xFFF
  6359                           tosh	equ	0xFFE
  6360                           tosl	equ	0xFFD
  6361                           pclath	equ	0xFFA
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon	equ	0xFF2
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           indf1	equ	0xFE7
  6372                           postdec1	equ	0xFE5
  6373                           fsr1h	equ	0xFE2
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           postdec2	equ	0xFDD
  6378                           fsr2h	equ	0xFDA
  6379                           fsr2l	equ	0xFD9
  6380                           status	equ	0xFD8
  6381                           
  6382 ;; *************** function _isspace *****************
  6383 ;; Defined at:
  6384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  c               1    wreg     unsigned char 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  c               1   25[COMRAM] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6398 ;;      Params:         0       0       0       0       0       0       0
  6399 ;;      Locals:         2       0       0       0       0       0       0
  6400 ;;      Temps:          1       0       0       0       0       0       0
  6401 ;;      Totals:         3       0       0       0       0       0       0
  6402 ;;Total ram usage:        3 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    3
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_strtol
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text31
  6413  00353E                     __ptext31:
  6414                           	opt stack 0
  6415  00353E                     _isspace:
  6416                           	opt stack 22
  6417                           
  6418                           ;incstack = 0
  6419                           ;isspace@c stored from wreg
  6420  00353E  6E1A               	movwf	isspace@c,c
  6421  003540  0E01               	movlw	1
  6422  003542  6E19               	movwf	_isspace$2989,c
  6423  003544  0E20               	movlw	32
  6424  003546  181A               	xorwf	isspace@c,w,c
  6425  003548  B4D8               	btfsc	status,2,c
  6426  00354A  D008               	goto	l2128
  6427  00354C  0E0E               	movlw	14
  6428  00354E  601A               	cpfslt	isspace@c,c
  6429  003550  D003               	goto	u6080
  6430  003552  0E09               	movlw	9
  6431  003554  601A               	cpfslt	isspace@c,c
  6432  003556  D002               	goto	l2128
  6433  003558                     u6080:
  6434  003558  0E00               	movlw	0
  6435  00355A  6E19               	movwf	_isspace$2989,c
  6436  00355C                     l2128:
  6437  00355C  C019  F018         	movff	_isspace$2989,??_isspace
  6438  003560  3018               	rrcf	??_isspace,w,c
  6439  003562  0012               	return	
  6440  003564                     __end_of_isspace:
  6441                           	opt stack 0
  6442                           tosu	equ	0xFFF
  6443                           tosh	equ	0xFFE
  6444                           tosl	equ	0xFFD
  6445                           pclath	equ	0xFFA
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           indf1	equ	0xFE7
  6456                           postdec1	equ	0xFE5
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _isdigit *****************
  6467 ;; Defined at:
  6468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  c               1    wreg     unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  c               1   25[COMRAM] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6482 ;;      Params:         0       0       0       0       0       0       0
  6483 ;;      Locals:         2       0       0       0       0       0       0
  6484 ;;      Temps:          1       0       0       0       0       0       0
  6485 ;;      Totals:         3       0       0       0       0       0       0
  6486 ;;Total ram usage:        3 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    3
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_strtol
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text32
  6497  003618                     __ptext32:
  6498                           	opt stack 0
  6499  003618                     _isdigit:
  6500                           	opt stack 22
  6501                           
  6502                           ;incstack = 0
  6503                           ;isdigit@c stored from wreg
  6504  003618  6E1A               	movwf	isdigit@c,c
  6505  00361A  0E00               	movlw	0
  6506  00361C  6E19               	movwf	_isdigit$2986,c
  6507  00361E  0E3A               	movlw	58
  6508  003620  601A               	cpfslt	isdigit@c,c
  6509  003622  D005               	goto	l2123
  6510  003624  0E2F               	movlw	47
  6511  003626  641A               	cpfsgt	isdigit@c,c
  6512  003628  D002               	goto	l2123
  6513  00362A  0E01               	movlw	1
  6514  00362C  6E19               	movwf	_isdigit$2986,c
  6515  00362E                     l2123:
  6516  00362E  C019  F018         	movff	_isdigit$2986,??_isdigit
  6517  003632  3018               	rrcf	??_isdigit,w,c
  6518  003634  0012               	return	
  6519  003636                     __end_of_isdigit:
  6520                           	opt stack 0
  6521                           tosu	equ	0xFFF
  6522                           tosh	equ	0xFFE
  6523                           tosl	equ	0xFFD
  6524                           pclath	equ	0xFFA
  6525                           tblptru	equ	0xFF8
  6526                           tblptrh	equ	0xFF7
  6527                           tblptrl	equ	0xFF6
  6528                           tablat	equ	0xFF5
  6529                           prodh	equ	0xFF4
  6530                           prodl	equ	0xFF3
  6531                           intcon	equ	0xFF2
  6532                           postinc0	equ	0xFEE
  6533                           wreg	equ	0xFE8
  6534                           indf1	equ	0xFE7
  6535                           postdec1	equ	0xFE5
  6536                           fsr1h	equ	0xFE2
  6537                           fsr1l	equ	0xFE1
  6538                           indf2	equ	0xFDF
  6539                           postinc2	equ	0xFDE
  6540                           postdec2	equ	0xFDD
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _isalpha *****************
  6546 ;; Defined at:
  6547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  c               1    wreg     unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  c               1   28[COMRAM] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;		None               void
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6561 ;;      Params:         0       0       0       0       0       0       0
  6562 ;;      Locals:         2       0       0       0       0       0       0
  6563 ;;      Temps:          1       0       0       0       0       0       0
  6564 ;;      Totals:         3       0       0       0       0       0       0
  6565 ;;Total ram usage:        3 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    4
  6568 ;; This function calls:
  6569 ;;		_isupper
  6570 ;; This function is called by:
  6571 ;;		_strtol
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text33
  6576  003516                     __ptext33:
  6577                           	opt stack 0
  6578  003516                     _isalpha:
  6579                           	opt stack 21
  6580                           
  6581                           ;incstack = 0
  6582                           ;isalpha@c stored from wreg
  6583  003516  6E1D               	movwf	isalpha@c,c
  6584  003518  0E01               	movlw	1
  6585  00351A  6E1C               	movwf	_isalpha$2983,c
  6586  00351C  0E7B               	movlw	123
  6587  00351E  601D               	cpfslt	isalpha@c,c
  6588  003520  D003               	goto	u6100
  6589  003522  0E61               	movlw	97
  6590  003524  601D               	cpfslt	isalpha@c,c
  6591  003526  D007               	goto	l2118
  6592  003528                     u6100:
  6593  003528  501D               	movf	isalpha@c,w,c
  6594  00352A  EC1B  F01B         	call	_isupper
  6595  00352E  B0D8               	btfsc	status,0,c
  6596  003530  D002               	goto	l2118
  6597  003532  0E00               	movlw	0
  6598  003534  6E1C               	movwf	_isalpha$2983,c
  6599  003536                     l2118:
  6600  003536  C01C  F01B         	movff	_isalpha$2983,??_isalpha
  6601  00353A  301B               	rrcf	??_isalpha,w,c
  6602  00353C  0012               	return	
  6603  00353E                     __end_of_isalpha:
  6604                           	opt stack 0
  6605                           tosu	equ	0xFFF
  6606                           tosh	equ	0xFFE
  6607                           tosl	equ	0xFFD
  6608                           pclath	equ	0xFFA
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           prodh	equ	0xFF4
  6614                           prodl	equ	0xFF3
  6615                           intcon	equ	0xFF2
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           indf1	equ	0xFE7
  6619                           postdec1	equ	0xFE5
  6620                           fsr1h	equ	0xFE2
  6621                           fsr1l	equ	0xFE1
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _isupper *****************
  6630 ;; Defined at:
  6631 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  c               1    wreg     unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  c               1   25[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6645 ;;      Params:         0       0       0       0       0       0       0
  6646 ;;      Locals:         2       0       0       0       0       0       0
  6647 ;;      Temps:          1       0       0       0       0       0       0
  6648 ;;      Totals:         3       0       0       0       0       0       0
  6649 ;;Total ram usage:        3 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    3
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_isalpha
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text34
  6660  003636                     __ptext34:
  6661                           	opt stack 0
  6662  003636                     _isupper:
  6663                           	opt stack 21
  6664                           
  6665                           ;incstack = 0
  6666                           ;isupper@c stored from wreg
  6667  003636  6E1A               	movwf	isupper@c,c
  6668  003638  0E00               	movlw	0
  6669  00363A  6E19               	movwf	_isupper$2992,c
  6670  00363C  0E5B               	movlw	91
  6671  00363E  601A               	cpfslt	isupper@c,c
  6672  003640  D005               	goto	l2133
  6673  003642  0E40               	movlw	64
  6674  003644  641A               	cpfsgt	isupper@c,c
  6675  003646  D002               	goto	l2133
  6676  003648  0E01               	movlw	1
  6677  00364A  6E19               	movwf	_isupper$2992,c
  6678  00364C                     l2133:
  6679  00364C  C019  F018         	movff	_isupper$2992,??_isupper
  6680  003650  3018               	rrcf	??_isupper,w,c
  6681  003652  0012               	return	
  6682  003654                     __end_of_isupper:
  6683                           	opt stack 0
  6684                           tosu	equ	0xFFF
  6685                           tosh	equ	0xFFE
  6686                           tosl	equ	0xFFD
  6687                           pclath	equ	0xFFA
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           postinc0	equ	0xFEE
  6696                           wreg	equ	0xFE8
  6697                           indf1	equ	0xFE7
  6698                           postdec1	equ	0xFE5
  6699                           fsr1h	equ	0xFE2
  6700                           fsr1l	equ	0xFE1
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function ___lmul *****************
  6709 ;; Defined at:
  6710 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;  multiplier      4   23[COMRAM] unsigned long 
  6713 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  product         4   31[COMRAM] unsigned long 
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  4   23[COMRAM] unsigned long 
  6718 ;; Registers used:
  6719 ;;		wreg, status,2, status,0
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6725 ;;      Params:         8       0       0       0       0       0       0
  6726 ;;      Locals:         4       0       0       0       0       0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0
  6728 ;;      Totals:        12       0       0       0       0       0       0
  6729 ;;Total ram usage:       12 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    3
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_strtol
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text35
  6740  002CDE                     __ptext35:
  6741                           	opt stack 0
  6742  002CDE                     ___lmul:
  6743                           	opt stack 22
  6744                           
  6745                           ;incstack = 0
  6746  002CDE  0E00               	movlw	0
  6747  002CE0  6E20               	movwf	___lmul@product,c
  6748  002CE2  0E00               	movlw	0
  6749  002CE4  6E21               	movwf	___lmul@product+1,c
  6750  002CE6  0E00               	movlw	0
  6751  002CE8  6E22               	movwf	___lmul@product+2,c
  6752  002CEA  0E00               	movlw	0
  6753  002CEC  6E23               	movwf	___lmul@product+3,c
  6754  002CEE  A018               	btfss	___lmul@multiplier,0,c
  6755  002CF0  D008               	goto	l1452
  6756  002CF2  501C               	movf	___lmul@multiplicand,w,c
  6757  002CF4  2620               	addwf	___lmul@product,f,c
  6758  002CF6  501D               	movf	___lmul@multiplicand+1,w,c
  6759  002CF8  2221               	addwfc	___lmul@product+1,f,c
  6760  002CFA  501E               	movf	___lmul@multiplicand+2,w,c
  6761  002CFC  2222               	addwfc	___lmul@product+2,f,c
  6762  002CFE  501F               	movf	___lmul@multiplicand+3,w,c
  6763  002D00  2223               	addwfc	___lmul@product+3,f,c
  6764  002D02                     l1452:
  6765  002D02  90D8               	bcf	status,0,c
  6766  002D04  361C               	rlcf	___lmul@multiplicand,f,c
  6767  002D06  361D               	rlcf	___lmul@multiplicand+1,f,c
  6768  002D08  361E               	rlcf	___lmul@multiplicand+2,f,c
  6769  002D0A  361F               	rlcf	___lmul@multiplicand+3,f,c
  6770  002D0C  90D8               	bcf	status,0,c
  6771  002D0E  321B               	rrcf	___lmul@multiplier+3,f,c
  6772  002D10  321A               	rrcf	___lmul@multiplier+2,f,c
  6773  002D12  3219               	rrcf	___lmul@multiplier+1,f,c
  6774  002D14  3218               	rrcf	___lmul@multiplier,f,c
  6775  002D16  5018               	movf	___lmul@multiplier,w,c
  6776  002D18  1019               	iorwf	___lmul@multiplier+1,w,c
  6777  002D1A  101A               	iorwf	___lmul@multiplier+2,w,c
  6778  002D1C  101B               	iorwf	___lmul@multiplier+3,w,c
  6779  002D1E  A4D8               	btfss	status,2,c
  6780  002D20  D7E6               	goto	l1451
  6781  002D22  C020  F018         	movff	___lmul@product,?___lmul
  6782  002D26  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6783  002D2A  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6784  002D2E  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6785  002D32  0012               	return		;funcret
  6786  002D34                     __end_of___lmul:
  6787                           	opt stack 0
  6788                           tosu	equ	0xFFF
  6789                           tosh	equ	0xFFE
  6790                           tosl	equ	0xFFD
  6791                           pclath	equ	0xFFA
  6792                           tblptru	equ	0xFF8
  6793                           tblptrh	equ	0xFF7
  6794                           tblptrl	equ	0xFF6
  6795                           tablat	equ	0xFF5
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           intcon	equ	0xFF2
  6799                           postinc0	equ	0xFEE
  6800                           wreg	equ	0xFE8
  6801                           indf1	equ	0xFE7
  6802                           postdec1	equ	0xFE5
  6803                           fsr1h	equ	0xFE2
  6804                           fsr1l	equ	0xFE1
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           postdec2	equ	0xFDD
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _testLeds *****************
  6813 ;; Defined at:
  6814 ;;		line 43 in file "LedsApp.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  idx             2   44[COMRAM] int 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6828 ;;      Params:         0       0       0       0       0       0       0
  6829 ;;      Locals:         2       0       0       0       0       0       0
  6830 ;;      Temps:          1       0       0       0       0       0       0
  6831 ;;      Totals:         3       0       0       0       0       0       0
  6832 ;;Total ram usage:        3 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    6
  6835 ;; This function calls:
  6836 ;;		_SendAckMessage
  6837 ;; This function is called by:
  6838 ;;		_GroupControlMcu
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text36
  6843  00286A                     __ptext36:
  6844                           	opt stack 0
  6845  00286A                     _testLeds:
  6846                           	opt stack 22
  6847                           
  6848                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6849                           
  6850                           ;incstack = 0
  6851  00286A  0E00               	movlw	0
  6852  00286C  6E2E               	movwf	testLeds@idx+1,c
  6853  00286E  0E00               	movlw	0
  6854  002870  6E2D               	movwf	testLeds@idx,c
  6855  002872                     l7240:
  6856  002872  BE2E               	btfsc	testLeds@idx+1,7,c
  6857  002874  D006               	goto	l50
  6858  002876  502E               	movf	testLeds@idx+1,w,c
  6859  002878  E127               	bnz	l7254
  6860  00287A  0E0A               	movlw	10
  6861  00287C  5C2D               	subwf	testLeds@idx,w,c
  6862  00287E  B0D8               	btfsc	status,0,c
  6863  002880  D023               	goto	u7100
  6864  002882                     l50:
  6865                           
  6866                           ;LedsApp.c: 47: {
  6867                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6868  002882  808B               	bsf	3979,0,c	;volatile
  6869                           
  6870                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6871  002884  0E82               	movlw	130
  6872  002886  6E2C               	movwf	??_testLeds& (0+255),c
  6873  002888  0EDE               	movlw	222
  6874  00288A                     u8107:
  6875  00288A  2EE8               	decfsz	wreg,f,c
  6876  00288C  D7FE               	bra	u8107
  6877  00288E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6878  002890  D7FC               	bra	u8107
  6879                           
  6880                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6881  002892  888A               	bsf	3978,4,c	;volatile
  6882                           
  6883                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6884  002894  0E82               	movlw	130
  6885  002896  6E2C               	movwf	??_testLeds& (0+255),c
  6886  002898  0EDE               	movlw	222
  6887  00289A                     u8117:
  6888  00289A  2EE8               	decfsz	wreg,f,c
  6889  00289C  D7FE               	bra	u8117
  6890  00289E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6891  0028A0  D7FC               	bra	u8117
  6892                           
  6893                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6894  0028A2  908B               	bcf	3979,0,c	;volatile
  6895                           
  6896                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6897  0028A4  0E82               	movlw	130
  6898  0028A6  6E2C               	movwf	??_testLeds& (0+255),c
  6899  0028A8  0EDE               	movlw	222
  6900  0028AA                     u8127:
  6901  0028AA  2EE8               	decfsz	wreg,f,c
  6902  0028AC  D7FE               	bra	u8127
  6903  0028AE  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6904  0028B0  D7FC               	bra	u8127
  6905                           
  6906                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6907  0028B2  988A               	bcf	3978,4,c	;volatile
  6908                           
  6909                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6910  0028B4  0E82               	movlw	130
  6911  0028B6  6E2C               	movwf	??_testLeds& (0+255),c
  6912  0028B8  0EDE               	movlw	222
  6913  0028BA                     u8137:
  6914  0028BA  2EE8               	decfsz	wreg,f,c
  6915  0028BC  D7FE               	bra	u8137
  6916  0028BE  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6917  0028C0  D7FC               	bra	u8137
  6918  0028C2  4A2D               	infsnz	testLeds@idx,f,c
  6919  0028C4  2A2E               	incf	testLeds@idx+1,f,c
  6920  0028C6  D7D5               	goto	l7240
  6921  0028C8                     u7100:
  6922  0028C8                     l7254:
  6923                           
  6924                           ;LedsApp.c: 57: }
  6925                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6926  0028C8  0E15               	movlw	21
  6927  0028CA  6E24               	movwf	SendAckMessage@inRequest,c
  6928  0028CC  0E01               	movlw	1
  6929  0028CE  EC19  F017         	call	_SendAckMessage
  6930  0028D2  0012               	return	
  6931  0028D4                     __end_of_testLeds:
  6932                           	opt stack 0
  6933                           tosu	equ	0xFFF
  6934                           tosh	equ	0xFFE
  6935                           tosl	equ	0xFFD
  6936                           pclath	equ	0xFFA
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           indf1	equ	0xFE7
  6947                           postdec1	equ	0xFE5
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _ResetMcu *****************
  6958 ;; Defined at:
  6959 ;;		line 85 in file "SystemCommon.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6973 ;;      Params:         0       0       0       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0
  6976 ;;      Totals:         0       0       0       0       0       0       0
  6977 ;;Total ram usage:        0 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    6
  6980 ;; This function calls:
  6981 ;;		_SendAckMessage
  6982 ;; This function is called by:
  6983 ;;		_GroupControlMcu
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text37
  6988  00375C                     __ptext37:
  6989                           	opt stack 0
  6990  00375C                     _ResetMcu:
  6991                           	opt stack 22
  6992                           
  6993                           ;SystemCommon.c: 88: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          MCU);
  6994                           
  6995                           ;incstack = 0
  6996  00375C  0E11               	movlw	17
  6997  00375E  6E24               	movwf	SendAckMessage@inRequest,c
  6998  003760  0E01               	movlw	1
  6999  003762  EC19  F017         	call	_SendAckMessage
  7000  003766  00FF               	reset		;# 
  7001  003768  0012               	return		;funcret
  7002  00376A                     __end_of_ResetMcu:
  7003                           	opt stack 0
  7004                           tosu	equ	0xFFF
  7005                           tosh	equ	0xFFE
  7006                           tosl	equ	0xFFD
  7007                           pclath	equ	0xFFA
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           postinc0	equ	0xFEE
  7016                           wreg	equ	0xFE8
  7017                           indf1	equ	0xFE7
  7018                           postdec1	equ	0xFE5
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _ResetCpld *****************
  7029 ;; Defined at:
  7030 ;;		line 94 in file "SystemCommon.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;		None
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      void 
  7037 ;; Registers used:
  7038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7044 ;;      Params:         0       0       0       0       0       0       0
  7045 ;;      Locals:         0       0       0       0       0       0       0
  7046 ;;      Temps:          0       0       0       0       0       0       0
  7047 ;;      Totals:         0       0       0       0       0       0       0
  7048 ;;Total ram usage:        0 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    6
  7051 ;; This function calls:
  7052 ;;		_SendAckMessage
  7053 ;; This function is called by:
  7054 ;;		_GroupControlMcu
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text38
  7059  003794                     __ptext38:
  7060                           	opt stack 0
  7061  003794                     _ResetCpld:
  7062                           	opt stack 22
  7063                           
  7064                           ;SystemCommon.c: 97: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          CPLD);
  7065                           
  7066                           ;incstack = 0
  7067  003794  0E12               	movlw	18
  7068  003796  6E24               	movwf	SendAckMessage@inRequest,c
  7069  003798  0E01               	movlw	1
  7070  00379A  EC19  F017         	call	_SendAckMessage
  7071  00379E  0012               	return		;funcret
  7072  0037A0                     __end_of_ResetCpld:
  7073                           	opt stack 0
  7074                           tosu	equ	0xFFF
  7075                           tosh	equ	0xFFE
  7076                           tosl	equ	0xFFD
  7077                           pclath	equ	0xFFA
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           indf1	equ	0xFE7
  7088                           postdec1	equ	0xFE5
  7089                           fsr1h	equ	0xFE2
  7090                           fsr1l	equ	0xFE1
  7091                           indf2	equ	0xFDF
  7092                           postinc2	equ	0xFDE
  7093                           postdec2	equ	0xFDD
  7094                           fsr2h	equ	0xFDA
  7095                           fsr2l	equ	0xFD9
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function _SetConversionResultFormat *****************
  7099 ;; Defined at:
  7100 ;;		line 38 in file "AdcApp.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  data            2   43[COMRAM] PTR unsigned char 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;		None
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7114 ;;      Params:         2       0       0       0       0       0       0
  7115 ;;      Locals:         0       0       0       0       0       0       0
  7116 ;;      Temps:          0       0       0       0       0       0       0
  7117 ;;      Totals:         2       0       0       0       0       0       0
  7118 ;;Total ram usage:        2 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    6
  7121 ;; This function calls:
  7122 ;;		_SendAckMessage
  7123 ;; This function is called by:
  7124 ;;		_GroupAdc
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text39
  7129  0037A0                     __ptext39:
  7130                           	opt stack 0
  7131  0037A0                     _SetConversionResultFormat:
  7132                           	opt stack 22
  7133                           
  7134                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7135                           
  7136                           ;incstack = 0
  7137  0037A0  0E33               	movlw	51
  7138  0037A2  6E24               	movwf	SendAckMessage@inRequest,c
  7139  0037A4  0E03               	movlw	3
  7140  0037A6  EC19  F017         	call	_SendAckMessage
  7141  0037AA  0012               	return		;funcret
  7142  0037AC                     __end_of_SetConversionResultFormat:
  7143                           	opt stack 0
  7144                           tosu	equ	0xFFF
  7145                           tosh	equ	0xFFE
  7146                           tosl	equ	0xFFD
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           intcon	equ	0xFF2
  7155                           postinc0	equ	0xFEE
  7156                           wreg	equ	0xFE8
  7157                           indf1	equ	0xFE7
  7158                           postdec1	equ	0xFE5
  7159                           fsr1h	equ	0xFE2
  7160                           fsr1l	equ	0xFE1
  7161                           indf2	equ	0xFDF
  7162                           postinc2	equ	0xFDE
  7163                           postdec2	equ	0xFDD
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168 ;; *************** function _SetChannelMode *****************
  7169 ;; Defined at:
  7170 ;;		line 43 in file "AdcApp.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  data            2   43[COMRAM] PTR unsigned char 
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      void 
  7177 ;; Registers used:
  7178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7184 ;;      Params:         2       0       0       0       0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0
  7186 ;;      Temps:          0       0       0       0       0       0       0
  7187 ;;      Totals:         2       0       0       0       0       0       0
  7188 ;;Total ram usage:        2 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; Hardware stack levels required when called:    6
  7191 ;; This function calls:
  7192 ;;		_SendAckMessage
  7193 ;; This function is called by:
  7194 ;;		_GroupAdc
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text40
  7199  00340C                     __ptext40:
  7200                           	opt stack 0
  7201  00340C                     _SetChannelMode:
  7202                           	opt stack 22
  7203                           
  7204                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7205                           
  7206                           ;incstack = 0
  7207  00340C  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7208  003410  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7209  003414  50DF               	movf	indf2,w,c
  7210  003416  6E3C               	movwf	_adcSampleMode,c
  7211                           
  7212                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7213  003418  043C               	decf	_adcSampleMode,w,c
  7214  00341A  A4D8               	btfss	status,2,c
  7215  00341C  D009               	goto	l108
  7216                           
  7217                           ;AdcApp.c: 47: {
  7218                           ;AdcApp.c: 48: channel = data[1];
  7219  00341E  EE20 F001          	lfsr	2,1
  7220  003422  502C               	movf	SetChannelMode@data,w,c
  7221  003424  26D9               	addwf	fsr2l,f,c
  7222  003426  502D               	movf	SetChannelMode@data+1,w,c
  7223  003428  22DA               	addwfc	fsr2h,f,c
  7224  00342A  50DF               	movf	indf2,w,c
  7225  00342C  0100               	movlb	0	; () banked
  7226  00342E  6FD3               	movwf	_channel& (0+255),b
  7227  003430                     l108:
  7228                           
  7229                           ;AdcApp.c: 49: }
  7230                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7231                           
  7232                           ; BSR set to: 0
  7233  003430  0E32               	movlw	50
  7234  003432  6E24               	movwf	SendAckMessage@inRequest,c
  7235  003434  0E03               	movlw	3
  7236  003436  EC19  F017         	call	_SendAckMessage
  7237  00343A  0012               	return		;funcret
  7238  00343C                     __end_of_SetChannelMode:
  7239                           	opt stack 0
  7240                           tosu	equ	0xFFF
  7241                           tosh	equ	0xFFE
  7242                           tosl	equ	0xFFD
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           postinc0	equ	0xFEE
  7252                           wreg	equ	0xFE8
  7253                           indf1	equ	0xFE7
  7254                           postdec1	equ	0xFE5
  7255                           fsr1h	equ	0xFE2
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _SetAdcOperationMode *****************
  7265 ;; Defined at:
  7266 ;;		line 33 in file "AdcApp.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  data            2   43[COMRAM] PTR unsigned char 
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7280 ;;      Params:         2       0       0       0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0
  7283 ;;      Totals:         2       0       0       0       0       0       0
  7284 ;;Total ram usage:        2 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    6
  7287 ;; This function calls:
  7288 ;;		_SendAckMessage
  7289 ;; This function is called by:
  7290 ;;		_GroupAdc
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           	psect	text41
  7295  0037AC                     __ptext41:
  7296                           	opt stack 0
  7297  0037AC                     _SetAdcOperationMode:
  7298                           	opt stack 22
  7299                           
  7300                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7301                           
  7302                           ;incstack = 0
  7303  0037AC  0E31               	movlw	49
  7304  0037AE  6E24               	movwf	SendAckMessage@inRequest,c
  7305  0037B0  0E03               	movlw	3
  7306  0037B2  EC19  F017         	call	_SendAckMessage
  7307  0037B6  0012               	return		;funcret
  7308  0037B8                     __end_of_SetAdcOperationMode:
  7309                           	opt stack 0
  7310                           tosu	equ	0xFFF
  7311                           tosh	equ	0xFFE
  7312                           tosl	equ	0xFFD
  7313                           pclath	equ	0xFFA
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           intcon	equ	0xFF2
  7321                           postinc0	equ	0xFEE
  7322                           wreg	equ	0xFE8
  7323                           indf1	equ	0xFE7
  7324                           postdec1	equ	0xFE5
  7325                           fsr1h	equ	0xFE2
  7326                           fsr1l	equ	0xFE1
  7327                           indf2	equ	0xFDF
  7328                           postinc2	equ	0xFDE
  7329                           postdec2	equ	0xFDD
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function _EUSART1_Read *****************
  7335 ;; Defined at:
  7336 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;		None
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  readValue       2   24[COMRAM] unsigned int 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      unsigned char 
  7343 ;; Registers used:
  7344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7350 ;;      Params:         0       0       0       0       0       0       0
  7351 ;;      Locals:         2       0       0       0       0       0       0
  7352 ;;      Temps:          1       0       0       0       0       0       0
  7353 ;;      Totals:         3       0       0       0       0       0       0
  7354 ;;Total ram usage:        3 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    3
  7357 ;; This function calls:
  7358 ;;		Nothing
  7359 ;; This function is called by:
  7360 ;;		_readUartMessage
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text42
  7365  002FA6                     __ptext42:
  7366                           	opt stack 0
  7367  002FA6                     _EUSART1_Read:
  7368                           	opt stack 26
  7369                           
  7370                           ;eusart1.c: 112: uint16_t readValue = 0;
  7371                           
  7372                           ;incstack = 0
  7373  002FA6  0E00               	movlw	0
  7374  002FA8  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7375  002FAA  0E00               	movlw	0
  7376  002FAC  6E19               	movwf	EUSART1_Read@readValue,c
  7377                           
  7378                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7379  002FAE  0100               	movlb	0	; () banked
  7380  002FB0  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7381  002FB2  A4D8               	btfss	status,2,c
  7382  002FB4  D002               	goto	l838
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;eusart1.c: 120: {
  7386                           ;eusart1.c: 121: return readValue;
  7387  002FB6  5019               	movf	EUSART1_Read@readValue,w,c
  7388                           
  7389                           ; BSR set to: 0
  7390  002FB8  0012               	return	
  7391  002FBA                     l838:
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;eusart1.c: 122: }
  7395                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7396                           
  7397                           ; BSR set to: 0
  7398  002FBA  5037               	movf	_eusart1RxTail,w,c	;volatile
  7399  002FBC  0D01               	mullw	1
  7400  002FBE  0E46               	movlw	low _eusart1RxBuffer
  7401  002FC0  24F3               	addwf	prodl,w,c
  7402  002FC2  6ED9               	movwf	fsr2l,c
  7403  002FC4  0E01               	movlw	high _eusart1RxBuffer
  7404  002FC6  20F4               	addwfc	prodh,w,c
  7405  002FC8  6EDA               	movwf	fsr2h,c
  7406  002FCA  50DF               	movf	indf2,w,c
  7407  002FCC  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7408  002FCE  5018               	movf	??_EUSART1_Read,w,c
  7409  002FD0  6E19               	movwf	EUSART1_Read@readValue,c
  7410  002FD2  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7411                           
  7412                           ; BSR set to: 0
  7413  002FD4  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7417  002FD6  0E27               	movlw	39
  7418  002FD8  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7419  002FDA  D002               	goto	l840
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;eusart1.c: 126: {
  7423                           ;eusart1.c: 127: eusart1RxTail = 0;
  7424  002FDC  0E00               	movlw	0
  7425  002FDE  6E37               	movwf	_eusart1RxTail,c	;volatile
  7426  002FE0                     l840:
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;eusart1.c: 128: }
  7430                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7431                           
  7432                           ; BSR set to: 0
  7433  002FE0  9A9D               	bcf	3997,5,c	;volatile
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;eusart1.c: 130: eusart1RxCount--;
  7437  002FE2  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7441  002FE4  8A9D               	bsf	3997,5,c	;volatile
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;eusart1.c: 133: return readValue;
  7445  002FE6  5019               	movf	EUSART1_Read@readValue,w,c
  7446  002FE8  0012               	return	
  7447  002FEA                     __end_of_EUSART1_Read:
  7448                           	opt stack 0
  7449                           tosu	equ	0xFFF
  7450                           tosh	equ	0xFFE
  7451                           tosl	equ	0xFFD
  7452                           pclath	equ	0xFFA
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           indf1	equ	0xFE7
  7463                           postdec1	equ	0xFE5
  7464                           fsr1h	equ	0xFE2
  7465                           fsr1l	equ	0xFE1
  7466                           indf2	equ	0xFDF
  7467                           postinc2	equ	0xFDE
  7468                           postdec2	equ	0xFDD
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _keepAliveSignalUart *****************
  7474 ;; Defined at:
  7475 ;;		line 117 in file "SystemStatus.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7489 ;;      Params:         0       0       0       0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0
  7492 ;;      Totals:         0       0       0       0       0       0       0
  7493 ;;Total ram usage:        0 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    6
  7496 ;; This function calls:
  7497 ;;		_SendAckMessage
  7498 ;; This function is called by:
  7499 ;;		_main
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text43
  7504  0037B8                     __ptext43:
  7505                           	opt stack 0
  7506  0037B8                     _keepAliveSignalUart:
  7507                           	opt stack 24
  7508                           
  7509                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;incstack = 0
  7513  0037B8  0E16               	movlw	22
  7514  0037BA  6E24               	movwf	SendAckMessage@inRequest,c
  7515  0037BC  0E01               	movlw	1
  7516  0037BE  EC19  F017         	call	_SendAckMessage
  7517  0037C2  0012               	return		;funcret
  7518  0037C4                     __end_of_keepAliveSignalUart:
  7519                           	opt stack 0
  7520                           tosu	equ	0xFFF
  7521                           tosh	equ	0xFFE
  7522                           tosl	equ	0xFFD
  7523                           pclath	equ	0xFFA
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           indf1	equ	0xFE7
  7534                           postdec1	equ	0xFE5
  7535                           fsr1h	equ	0xFE2
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _keepAliveSignalLed *****************
  7545 ;; Defined at:
  7546 ;;		line 35 in file "LedsApp.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7560 ;;      Params:         0       0       0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0
  7562 ;;      Temps:          1       0       0       0       0       0       0
  7563 ;;      Totals:         1       0       0       0       0       0       0
  7564 ;;Total ram usage:        1 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    3
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_main
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text44
  7575  0036C2                     __ptext44:
  7576                           	opt stack 0
  7577  0036C2                     _keepAliveSignalLed:
  7578                           	opt stack 27
  7579                           
  7580                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7581                           
  7582                           ;incstack = 0
  7583  0036C2  B08B               	btfsc	3979,0,c	;volatile
  7584  0036C4  D003               	goto	u5230
  7585  0036C6  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7586  0036C8  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7587  0036CA  D001               	goto	u5248
  7588  0036CC                     u5230:
  7589  0036CC  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7590  0036CE                     u5248:
  7591  0036CE  508B               	movf	3979,w,c	;volatile
  7592  0036D0  1818               	xorwf	??_keepAliveSignalLed,w,c
  7593  0036D2  0BFE               	andlw	-2
  7594  0036D4  1818               	xorwf	??_keepAliveSignalLed,w,c
  7595  0036D6  6E8B               	movwf	3979,c	;volatile
  7596  0036D8  0012               	return		;funcret
  7597  0036DA                     __end_of_keepAliveSignalLed:
  7598                           	opt stack 0
  7599                           tosu	equ	0xFFF
  7600                           tosh	equ	0xFFE
  7601                           tosl	equ	0xFFD
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           indf1	equ	0xFE7
  7613                           postdec1	equ	0xFE5
  7614                           fsr1h	equ	0xFE2
  7615                           fsr1l	equ	0xFE1
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _SetMcuSystem *****************
  7624 ;; Defined at:
  7625 ;;		line 11 in file "SystemSettings.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7639 ;;      Params:         0       0       0       0       0       0       0
  7640 ;;      Locals:         0       0       0       0       0       0       0
  7641 ;;      Temps:          0       0       0       0       0       0       0
  7642 ;;      Totals:         0       0       0       0       0       0       0
  7643 ;;Total ram usage:        0 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    6
  7646 ;; This function calls:
  7647 ;;		_SYSTEM_Initialize
  7648 ;; This function is called by:
  7649 ;;		_main
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           	psect	text45
  7654  0037DA                     __ptext45:
  7655                           	opt stack 0
  7656  0037DA                     _SetMcuSystem:
  7657                           	opt stack 24
  7658                           
  7659                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7660                           
  7661                           ;incstack = 0
  7662  0037DA  EC47  F01B         	call	_SYSTEM_Initialize	;wreg free
  7663                           
  7664                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7665  0037DE  8EF2               	bsf	intcon,7,c	;volatile
  7666                           
  7667                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7668  0037E0  8CF2               	bsf	intcon,6,c	;volatile
  7669  0037E2  0012               	return		;funcret
  7670  0037E4                     __end_of_SetMcuSystem:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           postinc0	equ	0xFEE
  7684                           wreg	equ	0xFE8
  7685                           indf1	equ	0xFE7
  7686                           postdec1	equ	0xFE5
  7687                           fsr1h	equ	0xFE2
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _SYSTEM_Initialize *****************
  7697 ;; Defined at:
  7698 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      void 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7712 ;;      Params:         0       0       0       0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    5
  7719 ;; This function calls:
  7720 ;;		_ADC_Initialize
  7721 ;;		_EUSART1_Initialize
  7722 ;;		_INTERRUPT_Initialize
  7723 ;;		_OSCILLATOR_Initialize
  7724 ;;		_PIN_MANAGER_Initialize
  7725 ;;		_TMR0_Initialize
  7726 ;; This function is called by:
  7727 ;;		_SetMcuSystem
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text46
  7732  00368E                     __ptext46:
  7733                           	opt stack 0
  7734  00368E                     _SYSTEM_Initialize:
  7735                           	opt stack 24
  7736                           
  7737                           ;mcc.c: 114: INTERRUPT_Initialize();
  7738                           
  7739                           ;incstack = 0
  7740  00368E  ECF9  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7741                           
  7742                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7743  003692  EC8D  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7744                           
  7745                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7746  003696  ECB5  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7747                           
  7748                           ;mcc.c: 117: ADC_Initialize();
  7749  00369A  EC6D  F01B         	call	_ADC_Initialize	;wreg free
  7750                           
  7751                           ;mcc.c: 118: TMR0_Initialize();
  7752  00369E  ECD2  F019         	call	_TMR0_Initialize	;wreg free
  7753                           
  7754                           ;mcc.c: 119: EUSART1_Initialize();
  7755  0036A2  EC9C  F019         	call	_EUSART1_Initialize	;wreg free
  7756  0036A6  0012               	return		;funcret
  7757  0036A8                     __end_of_SYSTEM_Initialize:
  7758                           	opt stack 0
  7759                           tosu	equ	0xFFF
  7760                           tosh	equ	0xFFE
  7761                           tosl	equ	0xFFD
  7762                           pclath	equ	0xFFA
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           postinc0	equ	0xFEE
  7771                           wreg	equ	0xFE8
  7772                           indf1	equ	0xFE7
  7773                           postdec1	equ	0xFE5
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _TMR0_Initialize *****************
  7784 ;; Defined at:
  7785 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7799 ;;      Params:         0       0       0       0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0
  7801 ;;      Temps:          2       0       0       0       0       0       0
  7802 ;;      Totals:         2       0       0       0       0       0       0
  7803 ;;Total ram usage:        2 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    4
  7806 ;; This function calls:
  7807 ;;		_TMR0_SetInterruptHandler
  7808 ;; This function is called by:
  7809 ;;		_SYSTEM_Initialize
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text47
  7814  0033A4                     __ptext47:
  7815                           	opt stack 0
  7816  0033A4                     _TMR0_Initialize:
  7817                           	opt stack 24
  7818                           
  7819                           ;tmr0.c: 71: TMR0H = 0x3C;
  7820                           
  7821                           ;incstack = 0
  7822  0033A4  0E3C               	movlw	60
  7823  0033A6  6ED7               	movwf	4055,c	;volatile
  7824                           
  7825                           ;tmr0.c: 74: TMR0L = 0xAF;
  7826  0033A8  0EAF               	movlw	175
  7827  0033AA  6ED6               	movwf	4054,c	;volatile
  7828                           
  7829                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7830  0033AC  50D6               	movf	4054,w,c	;volatile
  7831  0033AE  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7832  0033B2  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7833  0033B4  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7834  0033B8  6A1A               	clrf	??_TMR0_Initialize,c
  7835  0033BA  101A               	iorwf	??_TMR0_Initialize,w,c
  7836  0033BC  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7837  0033BE  501B               	movf	??_TMR0_Initialize+1,w,c
  7838  0033C0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7839                           
  7840                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7841  0033C2  94F2               	bcf	intcon,2,c	;volatile
  7842                           
  7843                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7844  0033C4  8AF2               	bsf	intcon,5,c	;volatile
  7845                           
  7846                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7847  0033C6  0E00               	movlw	0
  7848  0033C8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7849  0033CA  0E00               	movlw	0
  7850  0033CC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7851  0033CE  ECF2  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7852                           
  7853                           ;tmr0.c: 90: T0CON = 0x90;
  7854  0033D2  0E90               	movlw	144
  7855  0033D4  6ED5               	movwf	4053,c	;volatile
  7856  0033D6  0012               	return		;funcret
  7857  0033D8                     __end_of_TMR0_Initialize:
  7858                           	opt stack 0
  7859                           tosu	equ	0xFFF
  7860                           tosh	equ	0xFFE
  7861                           tosl	equ	0xFFD
  7862                           pclath	equ	0xFFA
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           postinc0	equ	0xFEE
  7871                           wreg	equ	0xFE8
  7872                           indf1	equ	0xFE7
  7873                           postdec1	equ	0xFE5
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _TMR0_SetInterruptHandler *****************
  7884 ;; Defined at:
  7885 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7888 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;		None
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  1    wreg      void 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7900 ;;      Params:         2       0       0       0       0       0       0
  7901 ;;      Locals:         0       0       0       0       0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0
  7903 ;;      Totals:         2       0       0       0       0       0       0
  7904 ;;Total ram usage:        2 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    3
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_TMR0_Initialize
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	text48
  7915  0037E4                     __ptext48:
  7916                           	opt stack 0
  7917  0037E4                     _TMR0_SetInterruptHandler:
  7918                           	opt stack 24
  7919                           
  7920                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7921                           
  7922                           ;incstack = 0
  7923  0037E4  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7924  0037E8  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7925  0037EC  0012               	return		;funcret
  7926  0037EE                     __end_of_TMR0_SetInterruptHandler:
  7927                           	opt stack 0
  7928                           tosu	equ	0xFFF
  7929                           tosh	equ	0xFFE
  7930                           tosl	equ	0xFFD
  7931                           pclath	equ	0xFFA
  7932                           tblptru	equ	0xFF8
  7933                           tblptrh	equ	0xFF7
  7934                           tblptrl	equ	0xFF6
  7935                           tablat	equ	0xFF5
  7936                           prodh	equ	0xFF4
  7937                           prodl	equ	0xFF3
  7938                           intcon	equ	0xFF2
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           indf1	equ	0xFE7
  7942                           postdec1	equ	0xFE5
  7943                           fsr1h	equ	0xFE2
  7944                           fsr1l	equ	0xFE1
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function _PIN_MANAGER_Initialize *****************
  7953 ;; Defined at:
  7954 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;		None
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;		None
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7968 ;;      Params:         0       0       0       0       0       0       0
  7969 ;;      Locals:         0       0       0       0       0       0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0
  7971 ;;      Totals:         0       0       0       0       0       0       0
  7972 ;;Total ram usage:        0 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    3
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_SYSTEM_Initialize
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text49
  7983  002F1A                     __ptext49:
  7984                           	opt stack 0
  7985  002F1A                     _PIN_MANAGER_Initialize:
  7986                           	opt stack 25
  7987                           
  7988                           ;pin_manager.c: 57: LATE = 0x00;
  7989                           
  7990                           ;incstack = 0
  7991  002F1A  0E00               	movlw	0
  7992  002F1C  6E8D               	movwf	3981,c	;volatile
  7993                           
  7994                           ;pin_manager.c: 58: LATD = 0x00;
  7995  002F1E  0E00               	movlw	0
  7996  002F20  6E8C               	movwf	3980,c	;volatile
  7997                           
  7998                           ;pin_manager.c: 59: LATA = 0x06;
  7999  002F22  0E06               	movlw	6
  8000  002F24  6E89               	movwf	3977,c	;volatile
  8001                           
  8002                           ;pin_manager.c: 60: LATB = 0x00;
  8003  002F26  0E00               	movlw	0
  8004  002F28  6E8A               	movwf	3978,c	;volatile
  8005                           
  8006                           ;pin_manager.c: 61: LATC = 0x00;
  8007  002F2A  0E00               	movlw	0
  8008  002F2C  6E8B               	movwf	3979,c	;volatile
  8009                           
  8010                           ;pin_manager.c: 66: TRISE = 0x07;
  8011  002F2E  0E07               	movlw	7
  8012  002F30  6E96               	movwf	3990,c	;volatile
  8013                           
  8014                           ;pin_manager.c: 67: TRISA = 0xE1;
  8015  002F32  0EE1               	movlw	225
  8016  002F34  6E92               	movwf	3986,c	;volatile
  8017                           
  8018                           ;pin_manager.c: 68: TRISB = 0xEF;
  8019  002F36  0EEF               	movlw	239
  8020  002F38  6E93               	movwf	3987,c	;volatile
  8021                           
  8022                           ;pin_manager.c: 69: TRISC = 0x80;
  8023  002F3A  0E80               	movlw	128
  8024  002F3C  6E94               	movwf	3988,c	;volatile
  8025                           
  8026                           ;pin_manager.c: 70: TRISD = 0xF2;
  8027  002F3E  0EF2               	movlw	242
  8028  002F40  6E95               	movwf	3989,c	;volatile
  8029                           
  8030                           ;pin_manager.c: 75: ANSELC = 0x30;
  8031  002F42  0E30               	movlw	48
  8032  002F44  010F               	movlb	15	; () banked
  8033  002F46  6F3A               	movwf	58,b	;volatile
  8034                           
  8035                           ;pin_manager.c: 76: ANSELB = 0x33;
  8036  002F48  0E33               	movlw	51
  8037  002F4A  6F39               	movwf	57,b	;volatile
  8038                           
  8039                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8040  002F4C  0EE4               	movlw	228
  8041  002F4E  6F3B               	movwf	59,b	;volatile
  8042                           
  8043                           ;pin_manager.c: 78: ANSELE = 0x07;
  8044  002F50  0E07               	movlw	7
  8045  002F52  6F3C               	movwf	60,b	;volatile
  8046                           
  8047                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8048  002F54  0E2F               	movlw	47
  8049  002F56  6F38               	movwf	56,b	;volatile
  8050                           
  8051                           ;pin_manager.c: 84: WPUB = 0xC2;
  8052  002F58  0EC2               	movlw	194
  8053  002F5A  6E61               	movwf	3937,c	;volatile
  8054                           
  8055                           ; BSR set to: 15
  8056                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8057  002F5C  9EF1               	bcf	intcon2,7,c	;volatile
  8058                           
  8059                           ; BSR set to: 15
  8060                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8061  002F5E  86F2               	bsf	intcon,3,c	;volatile
  8062                           
  8063                           ; BSR set to: 15
  8064  002F60  0012               	return		;funcret
  8065  002F62                     __end_of_PIN_MANAGER_Initialize:
  8066                           	opt stack 0
  8067                           tosu	equ	0xFFF
  8068                           tosh	equ	0xFFE
  8069                           tosl	equ	0xFFD
  8070                           pclath	equ	0xFFA
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           postdec1	equ	0xFE5
  8083                           fsr1h	equ	0xFE2
  8084                           fsr1l	equ	0xFE1
  8085                           indf2	equ	0xFDF
  8086                           postinc2	equ	0xFDE
  8087                           postdec2	equ	0xFDD
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function _OSCILLATOR_Initialize *****************
  8093 ;; Defined at:
  8094 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;		None
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;		None
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  1    wreg      void 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8108 ;;      Params:         0       0       0       0       0       0       0
  8109 ;;      Locals:         0       0       0       0       0       0       0
  8110 ;;      Temps:          0       0       0       0       0       0       0
  8111 ;;      Totals:         0       0       0       0       0       0       0
  8112 ;;Total ram usage:        0 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    3
  8115 ;; This function calls:
  8116 ;;		Nothing
  8117 ;; This function is called by:
  8118 ;;		_SYSTEM_Initialize
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text50
  8123  00376A                     __ptext50:
  8124                           	opt stack 0
  8125  00376A                     _OSCILLATOR_Initialize:
  8126                           	opt stack 25
  8127                           
  8128                           ;mcc.c: 125: OSCCON = 0x60;
  8129                           
  8130                           ; BSR set to: 15
  8131                           ;incstack = 0
  8132  00376A  0E60               	movlw	96
  8133  00376C  6ED3               	movwf	4051,c	;volatile
  8134                           
  8135                           ;mcc.c: 127: OSCCON2 = 0x04;
  8136  00376E  0E04               	movlw	4
  8137  003770  6ED2               	movwf	4050,c	;volatile
  8138                           
  8139                           ;mcc.c: 129: OSCTUNE = 0x00;
  8140  003772  0E00               	movlw	0
  8141  003774  6E9B               	movwf	3995,c	;volatile
  8142  003776  0012               	return		;funcret
  8143  003778                     __end_of_OSCILLATOR_Initialize:
  8144                           	opt stack 0
  8145                           tosu	equ	0xFFF
  8146                           tosh	equ	0xFFE
  8147                           tosl	equ	0xFFD
  8148                           pclath	equ	0xFFA
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           intcon2	equ	0xFF1
  8157                           postinc0	equ	0xFEE
  8158                           wreg	equ	0xFE8
  8159                           indf1	equ	0xFE7
  8160                           postdec1	equ	0xFE5
  8161                           fsr1h	equ	0xFE2
  8162                           fsr1l	equ	0xFE1
  8163                           indf2	equ	0xFDF
  8164                           postinc2	equ	0xFDE
  8165                           postdec2	equ	0xFDD
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170 ;; *************** function _INTERRUPT_Initialize *****************
  8171 ;; Defined at:
  8172 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;		None
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;		None
  8177 ;; Return value:  Size  Location     Type
  8178 ;;                  1    wreg      void 
  8179 ;; Registers used:
  8180 ;;		None
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8186 ;;      Params:         0       0       0       0       0       0       0
  8187 ;;      Locals:         0       0       0       0       0       0       0
  8188 ;;      Temps:          0       0       0       0       0       0       0
  8189 ;;      Totals:         0       0       0       0       0       0       0
  8190 ;;Total ram usage:        0 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    3
  8193 ;; This function calls:
  8194 ;;		Nothing
  8195 ;; This function is called by:
  8196 ;;		_SYSTEM_Initialize
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text51
  8201  0037F2                     __ptext51:
  8202                           	opt stack 0
  8203  0037F2                     _INTERRUPT_Initialize:
  8204                           	opt stack 25
  8205                           
  8206                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8207                           
  8208                           ;incstack = 0
  8209  0037F2  9ED0               	bcf	4048,7,c	;volatile
  8210  0037F4  0012               	return		;funcret
  8211  0037F6                     __end_of_INTERRUPT_Initialize:
  8212                           	opt stack 0
  8213                           tosu	equ	0xFFF
  8214                           tosh	equ	0xFFE
  8215                           tosl	equ	0xFFD
  8216                           pclath	equ	0xFFA
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           intcon2	equ	0xFF1
  8225                           postinc0	equ	0xFEE
  8226                           wreg	equ	0xFE8
  8227                           indf1	equ	0xFE7
  8228                           postdec1	equ	0xFE5
  8229                           fsr1h	equ	0xFE2
  8230                           fsr1l	equ	0xFE1
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _EUSART1_Initialize *****************
  8239 ;; Defined at:
  8240 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg, status,2
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8254 ;;      Params:         0       0       0       0       0       0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0
  8257 ;;      Totals:         0       0       0       0       0       0       0
  8258 ;;Total ram usage:        0 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    3
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_SYSTEM_Initialize
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text52
  8269  003338                     __ptext52:
  8270                           	opt stack 0
  8271  003338                     _EUSART1_Initialize:
  8272                           	opt stack 25
  8273                           
  8274                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8275                           
  8276                           ;incstack = 0
  8277  003338  9A9D               	bcf	3997,5,c	;volatile
  8278                           
  8279                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8280  00333A  989D               	bcf	3997,4,c	;volatile
  8281                           
  8282                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8283  00333C  0E08               	movlw	8
  8284  00333E  6EB8               	movwf	4024,c	;volatile
  8285                           
  8286                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8287  003340  0E90               	movlw	144
  8288  003342  6EAB               	movwf	4011,c	;volatile
  8289                           
  8290                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8291  003344  0E24               	movlw	36
  8292  003346  6EAC               	movwf	4012,c	;volatile
  8293                           
  8294                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8295  003348  0E10               	movlw	16
  8296  00334A  6EAF               	movwf	4015,c	;volatile
  8297                           
  8298                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8299  00334C  0E00               	movlw	0
  8300  00334E  6EB0               	movwf	4016,c	;volatile
  8301                           
  8302                           ;eusart1.c: 98: eusart1TxHead = 0;
  8303  003350  0E00               	movlw	0
  8304  003352  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8305                           
  8306                           ;eusart1.c: 99: eusart1TxTail = 0;
  8307  003354  0E00               	movlw	0
  8308  003356  6E39               	movwf	_eusart1TxTail,c	;volatile
  8309                           
  8310                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8311  003358  0E46               	movlw	70
  8312  00335A  0100               	movlb	0	; () banked
  8313  00335C  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8314                           
  8315                           ;eusart1.c: 102: eusart1RxHead = 0;
  8316  00335E  0E00               	movlw	0
  8317  003360  6E38               	movwf	_eusart1RxHead,c	;volatile
  8318                           
  8319                           ;eusart1.c: 103: eusart1RxTail = 0;
  8320  003362  0E00               	movlw	0
  8321  003364  6E37               	movwf	_eusart1RxTail,c	;volatile
  8322                           
  8323                           ;eusart1.c: 104: eusart1RxCount = 0;
  8324  003366  0E00               	movlw	0
  8325  003368  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8329  00336A  8A9D               	bsf	3997,5,c	;volatile
  8330                           
  8331                           ; BSR set to: 0
  8332  00336C  0012               	return		;funcret
  8333  00336E                     __end_of_EUSART1_Initialize:
  8334                           	opt stack 0
  8335                           tosu	equ	0xFFF
  8336                           tosh	equ	0xFFE
  8337                           tosl	equ	0xFFD
  8338                           pclath	equ	0xFFA
  8339                           tblptru	equ	0xFF8
  8340                           tblptrh	equ	0xFF7
  8341                           tblptrl	equ	0xFF6
  8342                           tablat	equ	0xFF5
  8343                           prodh	equ	0xFF4
  8344                           prodl	equ	0xFF3
  8345                           intcon	equ	0xFF2
  8346                           intcon2	equ	0xFF1
  8347                           postinc0	equ	0xFEE
  8348                           wreg	equ	0xFE8
  8349                           indf1	equ	0xFE7
  8350                           postdec1	equ	0xFE5
  8351                           fsr1h	equ	0xFE2
  8352                           fsr1l	equ	0xFE1
  8353                           indf2	equ	0xFDF
  8354                           postinc2	equ	0xFDE
  8355                           postdec2	equ	0xFDD
  8356                           fsr2h	equ	0xFDA
  8357                           fsr2l	equ	0xFD9
  8358                           status	equ	0xFD8
  8359                           
  8360 ;; *************** function _ADC_Initialize *****************
  8361 ;; Defined at:
  8362 ;;		line 58 in file "mcc_generated_files/adc.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;		None
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;		None
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  1    wreg      void 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8376 ;;      Params:         0       0       0       0       0       0       0
  8377 ;;      Locals:         0       0       0       0       0       0       0
  8378 ;;      Temps:          0       0       0       0       0       0       0
  8379 ;;      Totals:         0       0       0       0       0       0       0
  8380 ;;Total ram usage:        0 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    3
  8383 ;; This function calls:
  8384 ;;		Nothing
  8385 ;; This function is called by:
  8386 ;;		_SYSTEM_Initialize
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           	psect	text53
  8391  0036DA                     __ptext53:
  8392                           	opt stack 0
  8393  0036DA                     _ADC_Initialize:
  8394                           	opt stack 25
  8395                           
  8396                           ;adc.c: 63: ADCON0 = 0x05;
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;incstack = 0
  8400  0036DA  0E05               	movlw	5
  8401  0036DC  6EC2               	movwf	4034,c	;volatile
  8402                           
  8403                           ;adc.c: 66: ADCON1 = 0x00;
  8404  0036DE  0E00               	movlw	0
  8405  0036E0  6EC1               	movwf	4033,c	;volatile
  8406                           
  8407                           ;adc.c: 69: ADCON2 = 0x87;
  8408  0036E2  0E87               	movlw	135
  8409  0036E4  6EC0               	movwf	4032,c	;volatile
  8410                           
  8411                           ;adc.c: 72: ADRESL = 0x00;
  8412  0036E6  0E00               	movlw	0
  8413  0036E8  6EC3               	movwf	4035,c	;volatile
  8414                           
  8415                           ;adc.c: 75: ADRESH = 0x00;
  8416  0036EA  0E00               	movlw	0
  8417  0036EC  6EC4               	movwf	4036,c	;volatile
  8418  0036EE  0012               	return		;funcret
  8419  0036F0                     __end_of_ADC_Initialize:
  8420                           	opt stack 0
  8421                           tosu	equ	0xFFF
  8422                           tosh	equ	0xFFE
  8423                           tosl	equ	0xFFD
  8424                           pclath	equ	0xFFA
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           intcon	equ	0xFF2
  8432                           intcon2	equ	0xFF1
  8433                           postinc0	equ	0xFEE
  8434                           wreg	equ	0xFE8
  8435                           indf1	equ	0xFE7
  8436                           postdec1	equ	0xFE5
  8437                           fsr1h	equ	0xFE2
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _SetMcuRunTime *****************
  8447 ;; Defined at:
  8448 ;;		line 81 in file "SystemStatus.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;		None
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;		None
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  1    wreg      void 
  8455 ;; Registers used:
  8456 ;;		wreg, status,2, status,0, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8462 ;;      Params:         0       0       0       0       0       0       0
  8463 ;;      Locals:         0       0       0       0       0       0       0
  8464 ;;      Temps:          0       0       0       0       0       0       0
  8465 ;;      Totals:         0       0       0       0       0       0       0
  8466 ;;Total ram usage:        0 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    4
  8469 ;; This function calls:
  8470 ;;		___llmod
  8471 ;; This function is called by:
  8472 ;;		_main
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text54
  8477  002FEA                     __ptext54:
  8478                           	opt stack 0
  8479  002FEA                     _SetMcuRunTime:
  8480                           	opt stack 26
  8481                           
  8482                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8483                           
  8484                           ;incstack = 0
  8485  002FEA  0E01               	movlw	1
  8486  002FEC  0100               	movlb	0	; () banked
  8487  002FEE  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8488  002FF0  0E00               	movlw	0
  8489  002FF2  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8490  002FF4  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8491  002FF6  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8495  002FF8  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8496  002FFC  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8497  003000  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8498  003004  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8499  003008  0E80               	movlw	128
  8500  00300A  6E1C               	movwf	___llmod@divisor,c
  8501  00300C  0E43               	movlw	67
  8502  00300E  6E1D               	movwf	___llmod@divisor+1,c
  8503  003010  0E00               	movlw	0
  8504  003012  6E1E               	movwf	___llmod@divisor+2,c
  8505  003014  0E00               	movlw	0
  8506  003016  6E1F               	movwf	___llmod@divisor+3,c
  8507  003018  EC9F  F014         	call	___llmod	;wreg free
  8508  00301C  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8509  003020  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8510  003024  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8511  003028  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8512  00302C  0012               	return		;funcret
  8513  00302E                     __end_of_SetMcuRunTime:
  8514                           	opt stack 0
  8515                           tosu	equ	0xFFF
  8516                           tosh	equ	0xFFE
  8517                           tosl	equ	0xFFD
  8518                           pclath	equ	0xFFA
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           postinc0	equ	0xFEE
  8528                           wreg	equ	0xFE8
  8529                           indf1	equ	0xFE7
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function ___llmod *****************
  8541 ;; Defined at:
  8542 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  dividend        4   23[COMRAM] unsigned long 
  8545 ;;  divisor         4   27[COMRAM] unsigned long 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  counter         1   31[COMRAM] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  4   23[COMRAM] unsigned long 
  8550 ;; Registers used:
  8551 ;;		wreg, status,2, status,0
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8557 ;;      Params:         8       0       0       0       0       0       0
  8558 ;;      Locals:         1       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0
  8560 ;;      Totals:         9       0       0       0       0       0       0
  8561 ;;Total ram usage:        9 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    3
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_SetMcuRunTime
  8568 ;;		_GetMcuRunTime
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text55
  8573  00293E                     __ptext55:
  8574                           	opt stack 0
  8575  00293E                     ___llmod:
  8576                           	opt stack 24
  8577                           
  8578                           ;incstack = 0
  8579  00293E  501C               	movf	___llmod@divisor,w,c
  8580  002940  101D               	iorwf	___llmod@divisor+1,w,c
  8581  002942  101E               	iorwf	___llmod@divisor+2,w,c
  8582  002944  101F               	iorwf	___llmod@divisor+3,w,c
  8583  002946  B4D8               	btfsc	status,2,c
  8584  002948  D024               	goto	l1809
  8585  00294A  0E01               	movlw	1
  8586  00294C  6E20               	movwf	___llmod@counter,c
  8587  00294E  D006               	goto	l1804
  8588  002950  90D8               	bcf	status,0,c
  8589  002952  361C               	rlcf	___llmod@divisor,f,c
  8590  002954  361D               	rlcf	___llmod@divisor+1,f,c
  8591  002956  361E               	rlcf	___llmod@divisor+2,f,c
  8592  002958  361F               	rlcf	___llmod@divisor+3,f,c
  8593  00295A  2A20               	incf	___llmod@counter,f,c
  8594  00295C                     l1804:
  8595  00295C  AE1F               	btfss	___llmod@divisor+3,7,c
  8596  00295E  D7F8               	goto	l1805
  8597  002960                     u7020:
  8598  002960  501C               	movf	___llmod@divisor,w,c
  8599  002962  5C18               	subwf	___llmod@dividend,w,c
  8600  002964  501D               	movf	___llmod@divisor+1,w,c
  8601  002966  5819               	subwfb	___llmod@dividend+1,w,c
  8602  002968  501E               	movf	___llmod@divisor+2,w,c
  8603  00296A  581A               	subwfb	___llmod@dividend+2,w,c
  8604  00296C  501F               	movf	___llmod@divisor+3,w,c
  8605  00296E  581B               	subwfb	___llmod@dividend+3,w,c
  8606  002970  A0D8               	btfss	status,0,c
  8607  002972  D008               	goto	l1808
  8608  002974  501C               	movf	___llmod@divisor,w,c
  8609  002976  5E18               	subwf	___llmod@dividend,f,c
  8610  002978  501D               	movf	___llmod@divisor+1,w,c
  8611  00297A  5A19               	subwfb	___llmod@dividend+1,f,c
  8612  00297C  501E               	movf	___llmod@divisor+2,w,c
  8613  00297E  5A1A               	subwfb	___llmod@dividend+2,f,c
  8614  002980  501F               	movf	___llmod@divisor+3,w,c
  8615  002982  5A1B               	subwfb	___llmod@dividend+3,f,c
  8616  002984                     l1808:
  8617  002984  90D8               	bcf	status,0,c
  8618  002986  321F               	rrcf	___llmod@divisor+3,f,c
  8619  002988  321E               	rrcf	___llmod@divisor+2,f,c
  8620  00298A  321D               	rrcf	___llmod@divisor+1,f,c
  8621  00298C  321C               	rrcf	___llmod@divisor,f,c
  8622  00298E  2E20               	decfsz	___llmod@counter,f,c
  8623  002990  D7E7               	goto	u7020
  8624  002992                     l1809:
  8625  002992  C018  F018         	movff	___llmod@dividend,?___llmod
  8626  002996  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8627  00299A  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8628  00299E  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8629  0029A2  0012               	return		;funcret
  8630  0029A4                     __end_of___llmod:
  8631                           	opt stack 0
  8632                           tosu	equ	0xFFF
  8633                           tosh	equ	0xFFE
  8634                           tosl	equ	0xFFD
  8635                           pclath	equ	0xFFA
  8636                           tblptru	equ	0xFF8
  8637                           tblptrh	equ	0xFF7
  8638                           tblptrl	equ	0xFF6
  8639                           tablat	equ	0xFF5
  8640                           prodh	equ	0xFF4
  8641                           prodl	equ	0xFF3
  8642                           intcon	equ	0xFF2
  8643                           intcon2	equ	0xFF1
  8644                           postinc0	equ	0xFEE
  8645                           wreg	equ	0xFE8
  8646                           indf1	equ	0xFE7
  8647                           postdec1	equ	0xFE5
  8648                           fsr1h	equ	0xFE2
  8649                           fsr1l	equ	0xFE1
  8650                           indf2	equ	0xFDF
  8651                           postinc2	equ	0xFDE
  8652                           postdec2	equ	0xFDD
  8653                           fsr2h	equ	0xFDA
  8654                           fsr2l	equ	0xFD9
  8655                           status	equ	0xFD8
  8656                           
  8657 ;; *************** function _SendSystemStartAck *****************
  8658 ;; Defined at:
  8659 ;;		line 103 in file "SystemCommon.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;		None
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      void 
  8666 ;; Registers used:
  8667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8673 ;;      Params:         0       0       0       0       0       0       0
  8674 ;;      Locals:         0       0       0       0       0       0       0
  8675 ;;      Temps:          0       0       0       0       0       0       0
  8676 ;;      Totals:         0       0       0       0       0       0       0
  8677 ;;Total ram usage:        0 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    6
  8680 ;; This function calls:
  8681 ;;		_SendAckMessage
  8682 ;; This function is called by:
  8683 ;;		_main
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text56
  8688  0037C4                     __ptext56:
  8689                           	opt stack 0
  8690  0037C4                     _SendSystemStartAck:
  8691                           	opt stack 24
  8692                           
  8693                           ;SystemCommon.c: 105: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8694                           
  8695                           ;incstack = 0
  8696  0037C4  0E10               	movlw	16
  8697  0037C6  6E24               	movwf	SendAckMessage@inRequest,c
  8698  0037C8  0E01               	movlw	1
  8699  0037CA  EC19  F017         	call	_SendAckMessage
  8700  0037CE  0012               	return		;funcret
  8701  0037D0                     __end_of_SendSystemStartAck:
  8702                           	opt stack 0
  8703                           tosu	equ	0xFFF
  8704                           tosh	equ	0xFFE
  8705                           tosl	equ	0xFFD
  8706                           pclath	equ	0xFFA
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           intcon2	equ	0xFF1
  8715                           postinc0	equ	0xFEE
  8716                           wreg	equ	0xFE8
  8717                           indf1	equ	0xFE7
  8718                           postdec1	equ	0xFE5
  8719                           fsr1h	equ	0xFE2
  8720                           fsr1l	equ	0xFE1
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _SendAckMessage *****************
  8729 ;; Defined at:
  8730 ;;		line 171 in file "EusartApp.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  inGroup         1    wreg     enum E7163
  8733 ;;  inRequest       1   35[COMRAM] enum E7171
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  inGroup         1   36[COMRAM] enum E7163
  8736 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8746 ;;      Params:         1       0       0       0       0       0       0
  8747 ;;      Locals:         7       0       0       0       0       0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0
  8749 ;;      Totals:         8       0       0       0       0       0       0
  8750 ;;Total ram usage:        8 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    5
  8753 ;; This function calls:
  8754 ;;		_WriteUartMessage
  8755 ;;		_ZeroArray
  8756 ;;		_crc8
  8757 ;; This function is called by:
  8758 ;;		_testLeds
  8759 ;;		_SetAdcOperationMode
  8760 ;;		_SetConversionResultFormat
  8761 ;;		_SetChannelMode
  8762 ;;		_FlashReadUart
  8763 ;;		_FlashEreaseMem
  8764 ;;		_DacSetValue
  8765 ;;		_UpdateTxFreq
  8766 ;;		_UpdateRxFreq
  8767 ;;		_ResetMcu
  8768 ;;		_ResetCpld
  8769 ;;		_SendSystemStartAck
  8770 ;;		_SetMcuFwVersion
  8771 ;;		_SetCpldFwVersion
  8772 ;;		_keepAliveSignalUart
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text57
  8777  002E32                     __ptext57:
  8778                           	opt stack 0
  8779  002E32                     _SendAckMessage:
  8780                           	opt stack 22
  8781                           
  8782                           ;incstack = 0
  8783                           ;SendAckMessage@inGroup stored from wreg
  8784  002E32  6E25               	movwf	SendAckMessage@inGroup,c
  8785                           
  8786                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8787                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8788  002E34  0E26               	movlw	low SendAckMessage@TxMsg
  8789  002E36  6E20               	movwf	ZeroArray@array,c
  8790  002E38  0E00               	movlw	high SendAckMessage@TxMsg
  8791  002E3A  6E21               	movwf	ZeroArray@array+1,c
  8792  002E3C  0E00               	movlw	0
  8793  002E3E  6E23               	movwf	ZeroArray@size+1,c
  8794  002E40  0E06               	movlw	6
  8795  002E42  6E22               	movwf	ZeroArray@size,c
  8796  002E44  EC2A  F01B         	call	_ZeroArray	;wreg free
  8797                           
  8798                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8799  002E48  0E24               	movlw	36
  8800  002E4A  6E26               	movwf	SendAckMessage@TxMsg,c
  8801                           
  8802                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8803  002E4C  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8804                           
  8805                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8806  002E50  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8807                           
  8808                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8809  002E54  0E00               	movlw	0
  8810  002E56  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8811                           
  8812                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8813  002E58  0E26               	movlw	low SendAckMessage@TxMsg
  8814  002E5A  6E18               	movwf	crc8@dataArray,c
  8815  002E5C  0E00               	movlw	high SendAckMessage@TxMsg
  8816  002E5E  6E19               	movwf	crc8@dataArray+1,c
  8817  002E60  0E00               	movlw	0
  8818  002E62  6E1B               	movwf	crc8@dataSize+1,c
  8819  002E64  0E05               	movlw	5
  8820  002E66  6E1A               	movwf	crc8@dataSize,c
  8821  002E68  EC42  F017         	call	_crc8	;wreg free
  8822  002E6C  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8823                           
  8824                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8825  002E6E  0E26               	movlw	low SendAckMessage@TxMsg
  8826  002E70  6E19               	movwf	WriteUartMessage@dataBuf,c
  8827  002E72  0E00               	movlw	high SendAckMessage@TxMsg
  8828  002E74  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8829  002E76  0E00               	movlw	0
  8830  002E78  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8831  002E7A  0E06               	movlw	6
  8832  002E7C  6E1B               	movwf	WriteUartMessage@dataSize,c
  8833  002E7E  ECB7  F019         	call	_WriteUartMessage	;wreg free
  8834  002E82  0012               	return		;funcret
  8835  002E84                     __end_of_SendAckMessage:
  8836                           	opt stack 0
  8837                           tosu	equ	0xFFF
  8838                           tosh	equ	0xFFE
  8839                           tosl	equ	0xFFD
  8840                           pclath	equ	0xFFA
  8841                           tblptru	equ	0xFF8
  8842                           tblptrh	equ	0xFF7
  8843                           tblptrl	equ	0xFF6
  8844                           tablat	equ	0xFF5
  8845                           prodh	equ	0xFF4
  8846                           prodl	equ	0xFF3
  8847                           intcon	equ	0xFF2
  8848                           intcon2	equ	0xFF1
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           indf1	equ	0xFE7
  8852                           postdec1	equ	0xFE5
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           fsr2h	equ	0xFDA
  8859                           fsr2l	equ	0xFD9
  8860                           status	equ	0xFD8
  8861                           
  8862 ;; *************** function _crc8 *****************
  8863 ;; Defined at:
  8864 ;;		line 13 in file "SystemCommon.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8867 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8868 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8869 ;;  dataSize        2   25[COMRAM] int 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  i               2   30[COMRAM] int 
  8872 ;;  crc             2   28[COMRAM] int 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      unsigned char 
  8875 ;; Registers used:
  8876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         4       0       0       0       0       0       0
  8883 ;;      Locals:         4       0       0       0       0       0       0
  8884 ;;      Temps:          1       0       0       0       0       0       0
  8885 ;;      Totals:         9       0       0       0       0       0       0
  8886 ;;Total ram usage:        9 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    3
  8889 ;; This function calls:
  8890 ;;		Nothing
  8891 ;; This function is called by:
  8892 ;;		_readUartMessage
  8893 ;;		_SendAckMessage
  8894 ;;		_FlashReadUart
  8895 ;;		_FlashReadCondition
  8896 ;;		_GetMcuFwVersion
  8897 ;;		_GetCpldFwVersion
  8898 ;;		_GetMcuRunTime
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text58
  8903  002E84                     __ptext58:
  8904                           	opt stack 0
  8905  002E84                     _crc8:
  8906                           	opt stack 26
  8907                           
  8908                           ;SystemCommon.c: 15: int crc = 0;
  8909                           
  8910                           ;incstack = 0
  8911  002E84  0E00               	movlw	0
  8912  002E86  6E1E               	movwf	crc8@crc+1,c
  8913  002E88  0E00               	movlw	0
  8914  002E8A  6E1D               	movwf	crc8@crc,c
  8915                           
  8916                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8917  002E8C  0E00               	movlw	0
  8918  002E8E  6E20               	movwf	crc8@i+1,c
  8919  002E90  0E00               	movlw	0
  8920  002E92  6E1F               	movwf	crc8@i,c
  8921  002E94  D00E               	goto	l1265
  8922  002E96                     
  8923                           ;SystemCommon.c: 17: {
  8924                           ;SystemCommon.c: 18: crc += dataArray[i];
  8925  002E96  501F               	movf	crc8@i,w,c
  8926  002E98  2418               	addwf	crc8@dataArray,w,c
  8927  002E9A  6ED9               	movwf	fsr2l,c
  8928  002E9C  5020               	movf	crc8@i+1,w,c
  8929  002E9E  2019               	addwfc	crc8@dataArray+1,w,c
  8930  002EA0  6EDA               	movwf	fsr2h,c
  8931  002EA2  50DF               	movf	indf2,w,c
  8932  002EA4  6E1C               	movwf	??_crc8& (0+255),c
  8933  002EA6  501C               	movf	??_crc8,w,c
  8934  002EA8  261D               	addwf	crc8@crc,f,c
  8935  002EAA  0E00               	movlw	0
  8936  002EAC  221E               	addwfc	crc8@crc+1,f,c
  8937  002EAE  4A1F               	infsnz	crc8@i,f,c
  8938  002EB0  2A20               	incf	crc8@i+1,f,c
  8939  002EB2                     l1265:
  8940  002EB2  501A               	movf	crc8@dataSize,w,c
  8941  002EB4  5C1F               	subwf	crc8@i,w,c
  8942  002EB6  5020               	movf	crc8@i+1,w,c
  8943  002EB8  0A80               	xorlw	128
  8944  002EBA  6E1C               	movwf	??_crc8& (0+255),c
  8945  002EBC  501B               	movf	crc8@dataSize+1,w,c
  8946  002EBE  0A80               	xorlw	128
  8947  002EC0  581C               	subwfb	??_crc8& (0+255),w,c
  8948  002EC2  A0D8               	btfss	status,0,c
  8949  002EC4  D7E8               	goto	l1266
  8950                           
  8951                           ;SystemCommon.c: 19: }
  8952                           ;SystemCommon.c: 20: crc &= 0xff;
  8953  002EC6  0EFF               	movlw	255
  8954  002EC8  161D               	andwf	crc8@crc,f,c
  8955  002ECA  0E00               	movlw	0
  8956  002ECC  161E               	andwf	crc8@crc+1,f,c
  8957                           
  8958                           ;SystemCommon.c: 21: return crc;
  8959  002ECE  501D               	movf	crc8@crc,w,c
  8960  002ED0  0012               	return	
  8961  002ED2                     __end_of_crc8:
  8962                           	opt stack 0
  8963                           tosu	equ	0xFFF
  8964                           tosh	equ	0xFFE
  8965                           tosl	equ	0xFFD
  8966                           pclath	equ	0xFFA
  8967                           tblptru	equ	0xFF8
  8968                           tblptrh	equ	0xFF7
  8969                           tblptrl	equ	0xFF6
  8970                           tablat	equ	0xFF5
  8971                           prodh	equ	0xFF4
  8972                           prodl	equ	0xFF3
  8973                           intcon	equ	0xFF2
  8974                           intcon2	equ	0xFF1
  8975                           postinc0	equ	0xFEE
  8976                           wreg	equ	0xFE8
  8977                           indf1	equ	0xFE7
  8978                           postdec1	equ	0xFE5
  8979                           fsr1h	equ	0xFE2
  8980                           fsr1l	equ	0xFE1
  8981                           indf2	equ	0xFDF
  8982                           postinc2	equ	0xFDE
  8983                           postdec2	equ	0xFDD
  8984                           fsr2h	equ	0xFDA
  8985                           fsr2l	equ	0xFD9
  8986                           status	equ	0xFD8
  8987                           
  8988 ;; *************** function _ZeroArray *****************
  8989 ;; Defined at:
  8990 ;;		line 24 in file "SystemCommon.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  array           2   31[COMRAM] PTR unsigned char 
  8993 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8994 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8995 ;;		 -> rxMsgQueue(20), 
  8996 ;;  size            2   33[COMRAM] int 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;		None
  8999 ;; Return value:  Size  Location     Type
  9000 ;;                  1    wreg      void 
  9001 ;; Registers used:
  9002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9008 ;;      Params:         4       0       0       0       0       0       0
  9009 ;;      Locals:         0       0       0       0       0       0       0
  9010 ;;      Temps:          0       0       0       0       0       0       0
  9011 ;;      Totals:         4       0       0       0       0       0       0
  9012 ;;Total ram usage:        4 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    4
  9015 ;; This function calls:
  9016 ;;		_memset
  9017 ;; This function is called by:
  9018 ;;		_readUartMessage
  9019 ;;		_InitRxMessageParams
  9020 ;;		_SendAckMessage
  9021 ;;		_FlashReadUart
  9022 ;;		_FlashEreaseMem
  9023 ;;		_FlashReadCondition
  9024 ;;		_GetIntFromUartData
  9025 ;;		_GetMcuFwVersion
  9026 ;;		_GetCpldFwVersion
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text59
  9031  003654                     __ptext59:
  9032                           	opt stack 0
  9033  003654                     _ZeroArray:
  9034                           	opt stack 25
  9035                           
  9036                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9037                           
  9038                           ;incstack = 0
  9039  003654  C020  F018         	movff	ZeroArray@array,memset@p1
  9040  003658  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9041  00365C  0E00               	movlw	0
  9042  00365E  6E1B               	movwf	memset@c+1,c
  9043  003660  0E00               	movlw	0
  9044  003662  6E1A               	movwf	memset@c,c
  9045  003664  C022  F01C         	movff	ZeroArray@size,memset@n
  9046  003668  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9047  00366C  EC4D  F01A         	call	_memset	;wreg free
  9048  003670  0012               	return		;funcret
  9049  003672                     __end_of_ZeroArray:
  9050                           	opt stack 0
  9051                           tosu	equ	0xFFF
  9052                           tosh	equ	0xFFE
  9053                           tosl	equ	0xFFD
  9054                           pclath	equ	0xFFA
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodh	equ	0xFF4
  9060                           prodl	equ	0xFF3
  9061                           intcon	equ	0xFF2
  9062                           intcon2	equ	0xFF1
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           indf1	equ	0xFE7
  9066                           postdec1	equ	0xFE5
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function _memset *****************
  9077 ;; Defined at:
  9078 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  p1              2   23[COMRAM] PTR void 
  9081 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  9082 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  9083 ;;		 -> rxMsgQueue(20), 
  9084 ;;  c               2   25[COMRAM] int 
  9085 ;;  n               2   27[COMRAM] unsigned int 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  p               2   29[COMRAM] PTR unsigned char 
  9088 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  9089 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  9090 ;;		 -> rxMsgQueue(20), 
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  2   23[COMRAM] PTR void 
  9093 ;; Registers used:
  9094 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9100 ;;      Params:         6       0       0       0       0       0       0
  9101 ;;      Locals:         2       0       0       0       0       0       0
  9102 ;;      Temps:          0       0       0       0       0       0       0
  9103 ;;      Totals:         8       0       0       0       0       0       0
  9104 ;;Total ram usage:        8 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    3
  9107 ;; This function calls:
  9108 ;;		Nothing
  9109 ;; This function is called by:
  9110 ;;		_ZeroArray
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	text60
  9115  00349A                     __ptext60:
  9116                           	opt stack 0
  9117  00349A                     _memset:
  9118                           	opt stack 25
  9119                           
  9120                           ;incstack = 0
  9121  00349A  C018  F01E         	movff	memset@p1,memset@p
  9122  00349E  C019  F01F         	movff	memset@p1+1,memset@p+1
  9123  0034A2  D008               	goto	l1871
  9124  0034A4                     l6518:
  9125  0034A4  C01E  FFD9         	movff	memset@p,fsr2l
  9126  0034A8  C01F  FFDA         	movff	memset@p+1,fsr2h
  9127  0034AC  C01A  FFDF         	movff	memset@c,indf2
  9128  0034B0  4A1E               	infsnz	memset@p,f,c
  9129  0034B2  2A1F               	incf	memset@p+1,f,c
  9130  0034B4                     l1871:
  9131  0034B4  061C               	decf	memset@n,f,c
  9132  0034B6  A0D8               	btfss	status,0,c
  9133  0034B8  061D               	decf	memset@n+1,f,c
  9134  0034BA  281C               	incf	memset@n,w,c
  9135  0034BC  E1F3               	bnz	l6518
  9136  0034BE  281D               	incf	memset@n+1,w,c
  9137  0034C0  B4D8               	btfsc	status,2,c
  9138  0034C2  0012               	return	
  9139  0034C4  D7EF               	goto	l1872
  9140  0034C6                     __end_of_memset:
  9141                           	opt stack 0
  9142                           tosu	equ	0xFFF
  9143                           tosh	equ	0xFFE
  9144                           tosl	equ	0xFFD
  9145                           pclath	equ	0xFFA
  9146                           tblptru	equ	0xFF8
  9147                           tblptrh	equ	0xFF7
  9148                           tblptrl	equ	0xFF6
  9149                           tablat	equ	0xFF5
  9150                           prodh	equ	0xFF4
  9151                           prodl	equ	0xFF3
  9152                           intcon	equ	0xFF2
  9153                           intcon2	equ	0xFF1
  9154                           postinc0	equ	0xFEE
  9155                           wreg	equ	0xFE8
  9156                           indf1	equ	0xFE7
  9157                           postdec1	equ	0xFE5
  9158                           fsr1h	equ	0xFE2
  9159                           fsr1l	equ	0xFE1
  9160                           indf2	equ	0xFDF
  9161                           postinc2	equ	0xFDE
  9162                           postdec2	equ	0xFDD
  9163                           fsr2h	equ	0xFDA
  9164                           fsr2l	equ	0xFD9
  9165                           status	equ	0xFD8
  9166                           
  9167 ;; *************** function _WriteUartMessage *****************
  9168 ;; Defined at:
  9169 ;;		line 158 in file "EusartApp.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9172 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9173 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9174 ;;  dataSize        2   26[COMRAM] int 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  idx             2   29[COMRAM] int 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      void 
  9179 ;; Registers used:
  9180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9186 ;;      Params:         4       0       0       0       0       0       0
  9187 ;;      Locals:         2       0       0       0       0       0       0
  9188 ;;      Temps:          1       0       0       0       0       0       0
  9189 ;;      Totals:         7       0       0       0       0       0       0
  9190 ;;Total ram usage:        7 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:    4
  9193 ;; This function calls:
  9194 ;;		_EUSART1_Write
  9195 ;; This function is called by:
  9196 ;;		_SendAckMessage
  9197 ;;		_FlashReadUart
  9198 ;;		_FlashReadCondition
  9199 ;;		_GetMcuFwVersion
  9200 ;;		_GetCpldFwVersion
  9201 ;;		_GetMcuRunTime
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text61
  9206  00336E                     __ptext61:
  9207                           	opt stack 0
  9208  00336E                     _WriteUartMessage:
  9209                           	opt stack 22
  9210                           
  9211                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9212                           
  9213                           ;incstack = 0
  9214  00336E  0E00               	movlw	0
  9215  003370  6E1F               	movwf	WriteUartMessage@idx+1,c
  9216  003372  0E00               	movlw	0
  9217  003374  6E1E               	movwf	WriteUartMessage@idx,c
  9218  003376  D00B               	goto	l210
  9219  003378                     
  9220                           ;EusartApp.c: 161: {
  9221                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9222  003378  501E               	movf	WriteUartMessage@idx,w,c
  9223  00337A  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9224  00337C  6ED9               	movwf	fsr2l,c
  9225  00337E  501F               	movf	WriteUartMessage@idx+1,w,c
  9226  003380  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9227  003382  6EDA               	movwf	fsr2h,c
  9228  003384  50DF               	movf	indf2,w,c
  9229  003386  ECB9  F018         	call	_EUSART1_Write
  9230  00338A  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9231  00338C  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9232  00338E                     l210:
  9233  00338E  501B               	movf	WriteUartMessage@dataSize,w,c
  9234  003390  5C1E               	subwf	WriteUartMessage@idx,w,c
  9235  003392  501F               	movf	WriteUartMessage@idx+1,w,c
  9236  003394  0A80               	xorlw	128
  9237  003396  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9238  003398  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9239  00339A  0A80               	xorlw	128
  9240  00339C  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9241  00339E  B0D8               	btfsc	status,0,c
  9242  0033A0  0012               	return	
  9243  0033A2  D7EA               	goto	l211
  9244  0033A4                     __end_of_WriteUartMessage:
  9245                           	opt stack 0
  9246                           tosu	equ	0xFFF
  9247                           tosh	equ	0xFFE
  9248                           tosl	equ	0xFFD
  9249                           pclath	equ	0xFFA
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           intcon	equ	0xFF2
  9257                           intcon2	equ	0xFF1
  9258                           postinc0	equ	0xFEE
  9259                           wreg	equ	0xFE8
  9260                           indf1	equ	0xFE7
  9261                           postdec1	equ	0xFE5
  9262                           fsr1h	equ	0xFE2
  9263                           fsr1l	equ	0xFE1
  9264                           indf2	equ	0xFDF
  9265                           postinc2	equ	0xFDE
  9266                           postdec2	equ	0xFDD
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           
  9271 ;; *************** function _EUSART1_Write *****************
  9272 ;; Defined at:
  9273 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;  txData          1    wreg     unsigned char 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;  txData          1   23[COMRAM] unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         0       0       0       0       0       0       0
  9288 ;;      Locals:         1       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0
  9290 ;;      Totals:         1       0       0       0       0       0       0
  9291 ;;Total ram usage:        1 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    3
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_WriteUartMessage
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text62
  9302  003172                     __ptext62:
  9303                           	opt stack 0
  9304  003172                     _EUSART1_Write:
  9305                           	opt stack 22
  9306                           
  9307                           ;incstack = 0
  9308                           ;EUSART1_Write@txData stored from wreg
  9309  003172  6E18               	movwf	EUSART1_Write@txData,c
  9310  003174                     
  9311                           ;eusart1.c: 160: {
  9312                           
  9313                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9314  003174  0100               	movlb	0	; () banked
  9315  003176  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9316  003178  B4D8               	btfsc	status,2,c
  9317  00317A  D7FC               	goto	l6462
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;eusart1.c: 161: }
  9321                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9322  00317C  B89D               	btfsc	3997,4,c	;volatile
  9323  00317E  D003               	goto	l851
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;eusart1.c: 164: {
  9327                           ;eusart1.c: 165: TXREG1 = txData;
  9328  003180  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9329                           
  9330                           ;eusart1.c: 166: }
  9331  003184  D012               	goto	l852
  9332  003186                     l851:
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;eusart1.c: 167: else
  9336                           ;eusart1.c: 168: {
  9337                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9338  003186  989D               	bcf	3997,4,c	;volatile
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9342  003188  503A               	movf	_eusart1TxHead,w,c	;volatile
  9343  00318A  0D01               	mullw	1
  9344  00318C  0E00               	movlw	low _eusart1TxBuffer
  9345  00318E  24F3               	addwf	prodl,w,c
  9346  003190  6ED9               	movwf	fsr2l,c
  9347  003192  0E01               	movlw	high _eusart1TxBuffer
  9348  003194  20F4               	addwfc	prodh,w,c
  9349  003196  6EDA               	movwf	fsr2h,c
  9350  003198  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9351                           
  9352                           ; BSR set to: 0
  9353  00319C  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9357  00319E  0E45               	movlw	69
  9358  0031A0  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9359  0031A2  D002               	goto	l853
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;eusart1.c: 172: {
  9363                           ;eusart1.c: 173: eusart1TxHead = 0;
  9364  0031A4  0E00               	movlw	0
  9365  0031A6  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9366  0031A8                     l853:
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;eusart1.c: 174: }
  9370                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9371                           
  9372                           ; BSR set to: 0
  9373  0031A8  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9374  0031AA                     l852:
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;eusart1.c: 176: }
  9378                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9379                           
  9380                           ; BSR set to: 0
  9381  0031AA  889D               	bsf	3997,4,c	;volatile
  9382                           
  9383                           ; BSR set to: 0
  9384  0031AC  0012               	return		;funcret
  9385  0031AE                     __end_of_EUSART1_Write:
  9386                           	opt stack 0
  9387                           tosu	equ	0xFFF
  9388                           tosh	equ	0xFFE
  9389                           tosl	equ	0xFFD
  9390                           pclath	equ	0xFFA
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon2	equ	0xFF1
  9399                           postinc0	equ	0xFEE
  9400                           wreg	equ	0xFE8
  9401                           indf1	equ	0xFE7
  9402                           postdec1	equ	0xFE5
  9403                           fsr1h	equ	0xFE2
  9404                           fsr1l	equ	0xFE1
  9405                           indf2	equ	0xFDF
  9406                           postinc2	equ	0xFDE
  9407                           postdec2	equ	0xFDD
  9408                           fsr2h	equ	0xFDA
  9409                           fsr2l	equ	0xFD9
  9410                           status	equ	0xFD8
  9411                           
  9412 ;; *************** function _InitSystemApplicationManagers *****************
  9413 ;; Defined at:
  9414 ;;		line 33 in file "SystemSettings.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;		None
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;		None
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9428 ;;      Params:         0       0       0       0       0       0       0
  9429 ;;      Locals:         0       0       0       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0
  9431 ;;      Totals:         0       0       0       0       0       0       0
  9432 ;;Total ram usage:        0 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    7
  9435 ;; This function calls:
  9436 ;;		_ClearMcuRunTime
  9437 ;;		_DacInit
  9438 ;;		_InitAdcApplicationMgr
  9439 ;;		_InitSevenSegment
  9440 ;;		_PLLInitialize
  9441 ;;		_TMR0_StartTimer
  9442 ;; This function is called by:
  9443 ;;		_main
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text63
  9448  0036A8                     __ptext63:
  9449                           	opt stack 0
  9450  0036A8                     _InitSystemApplicationManagers:
  9451                           	opt stack 23
  9452                           
  9453                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;incstack = 0
  9457  0036A8  ECBC  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9458                           
  9459                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9460  0036AC  ECFB  F01B         	call	_TMR0_StartTimer	;wreg free
  9461                           
  9462                           ;SystemSettings.c: 42: InitSevenSegment();
  9463  0036B0  ECB2  F01A         	call	_InitSevenSegment	;wreg free
  9464                           
  9465                           ;SystemSettings.c: 45: PLLInitialize();
  9466  0036B4  ECCA  F009         	call	_PLLInitialize	;wreg free
  9467                           
  9468                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9469  0036B8  EC8C  F01B         	call	_ClearMcuRunTime	;wreg free
  9470                           
  9471                           ;SystemSettings.c: 51: DacInit();
  9472  0036BC  EC6A  F014         	call	_DacInit	;wreg free
  9473  0036C0  0012               	return		;funcret
  9474  0036C2                     __end_of_InitSystemApplicationManagers:
  9475                           	opt stack 0
  9476                           tosu	equ	0xFFF
  9477                           tosh	equ	0xFFE
  9478                           tosl	equ	0xFFD
  9479                           pclath	equ	0xFFA
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           intcon2	equ	0xFF1
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           postdec1	equ	0xFE5
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           fsr2h	equ	0xFDA
  9498                           fsr2l	equ	0xFD9
  9499                           status	equ	0xFD8
  9500                           
  9501 ;; *************** function _TMR0_StartTimer *****************
  9502 ;; Defined at:
  9503 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;		None
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;		None
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      void 
  9510 ;; Registers used:
  9511 ;;		None
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9517 ;;      Params:         0       0       0       0       0       0       0
  9518 ;;      Locals:         0       0       0       0       0       0       0
  9519 ;;      Temps:          0       0       0       0       0       0       0
  9520 ;;      Totals:         0       0       0       0       0       0       0
  9521 ;;Total ram usage:        0 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    3
  9524 ;; This function calls:
  9525 ;;		Nothing
  9526 ;; This function is called by:
  9527 ;;		_InitSystemApplicationManagers
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text64
  9532  0037F6                     __ptext64:
  9533                           	opt stack 0
  9534  0037F6                     _TMR0_StartTimer:
  9535                           	opt stack 26
  9536                           
  9537                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9538                           
  9539                           ;incstack = 0
  9540  0037F6  8ED5               	bsf	4053,7,c	;volatile
  9541  0037F8  0012               	return		;funcret
  9542  0037FA                     __end_of_TMR0_StartTimer:
  9543                           	opt stack 0
  9544                           tosu	equ	0xFFF
  9545                           tosh	equ	0xFFE
  9546                           tosl	equ	0xFFD
  9547                           pclath	equ	0xFFA
  9548                           tblptru	equ	0xFF8
  9549                           tblptrh	equ	0xFF7
  9550                           tblptrl	equ	0xFF6
  9551                           tablat	equ	0xFF5
  9552                           prodh	equ	0xFF4
  9553                           prodl	equ	0xFF3
  9554                           intcon	equ	0xFF2
  9555                           intcon2	equ	0xFF1
  9556                           postinc0	equ	0xFEE
  9557                           wreg	equ	0xFE8
  9558                           indf1	equ	0xFE7
  9559                           postdec1	equ	0xFE5
  9560                           fsr1h	equ	0xFE2
  9561                           fsr1l	equ	0xFE1
  9562                           indf2	equ	0xFDF
  9563                           postinc2	equ	0xFDE
  9564                           postdec2	equ	0xFDD
  9565                           fsr2h	equ	0xFDA
  9566                           fsr2l	equ	0xFD9
  9567                           status	equ	0xFD8
  9568                           
  9569 ;; *************** function _PLLInitialize *****************
  9570 ;; Defined at:
  9571 ;;		line 14 in file "SyntApp.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  idx             2   45[COMRAM] int 
  9576 ;;  idx             2   43[COMRAM] int 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9586 ;;      Params:         0       0       0       0       0       0       0
  9587 ;;      Locals:         4       0       0       0       0       0       0
  9588 ;;      Temps:          2       0       0       0       0       0       0
  9589 ;;      Totals:         6       0       0       0       0       0       0
  9590 ;;Total ram usage:        6 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    6
  9593 ;; This function calls:
  9594 ;;		_SWSPI_send_word
  9595 ;;		_SwSpi_Set_CE_Pin
  9596 ;; This function is called by:
  9597 ;;		_InitSystemApplicationManagers
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text65
  9602  001394                     __ptext65:
  9603                           	opt stack 0
  9604  001394                     _PLLInitialize:
  9605                           	opt stack 23
  9606                           
  9607                           ;SyntApp.c: 17: IOCB = 0b10000000;
  9608                           
  9609                           ;incstack = 0
  9610  001394  0E80               	movlw	128
  9611  001396  6E62               	movwf	3938,c	;volatile
  9612                           
  9613                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9614  001398  0E01               	movlw	1
  9615  00139A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9616  00139C  0E00               	movlw	0
  9617  00139E  ECD7  F018         	call	_SwSpi_Set_CE_Pin
  9618                           
  9619                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  9620  0013A2  0E00               	movlw	0
  9621  0013A4  6E2D               	movwf	PLLInitialize@idx+1,c
  9622  0013A6  0E00               	movlw	0
  9623  0013A8  6E2C               	movwf	PLLInitialize@idx,c
  9624  0013AA                     l7722:
  9625  0013AA  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  9626  0013AC  D006               	goto	l500
  9627  0013AE  502D               	movf	PLLInitialize@idx+1,w,c
  9628  0013B0  E128               	bnz	l7732
  9629  0013B2  0E0D               	movlw	13
  9630  0013B4  5C2C               	subwf	PLLInitialize@idx,w,c
  9631  0013B6  B0D8               	btfsc	status,0,c
  9632  0013B8  D024               	goto	u7760
  9633  0013BA                     l500:
  9634                           
  9635                           ;SyntApp.c: 25: {
  9636                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
  9637  0013BA  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  9638  0013BE  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  9639  0013C2  90D8               	bcf	status,0,c
  9640  0013C4  362A               	rlcf	??_PLLInitialize,f,c
  9641  0013C6  362B               	rlcf	??_PLLInitialize+1,f,c
  9642  0013C8  90D8               	bcf	status,0,c
  9643  0013CA  362A               	rlcf	??_PLLInitialize,f,c
  9644  0013CC  362B               	rlcf	??_PLLInitialize+1,f,c
  9645  0013CE  0E01               	movlw	low _TEST_PLL_REGISTERS
  9646  0013D0  242A               	addwf	??_PLLInitialize,w,c
  9647  0013D2  6EF6               	movwf	tblptrl,c
  9648  0013D4  0E06               	movlw	high _TEST_PLL_REGISTERS
  9649  0013D6  202B               	addwfc	??_PLLInitialize+1,w,c
  9650  0013D8  6EF7               	movwf	tblptrh,c
  9651  0013DA                     	if	0	;There are less than 3 active tblptr bytes
  9652  0013DA                     	endif
  9653  0013DA  0009               	tblrd		*+
  9654  0013DC  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9655  0013E0  0009               	tblrd		*+
  9656  0013E2  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9657  0013E6  0009               	tblrd		*+
  9658  0013E8  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9659  0013EC  000A               	tblrd		*-
  9660  0013EE  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9661  0013F2  0E03               	movlw	3
  9662  0013F4  6E25               	movwf	SWSPI_send_word@dataSize,c
  9663  0013F6  0E00               	movlw	0
  9664  0013F8  ECC5  F010         	call	_SWSPI_send_word
  9665  0013FC  4A2C               	infsnz	PLLInitialize@idx,f,c
  9666  0013FE  2A2D               	incf	PLLInitialize@idx+1,f,c
  9667  001400  D7D4               	goto	l7722
  9668  001402                     u7760:
  9669  001402                     l7732:
  9670                           
  9671                           ;SyntApp.c: 27: }
  9672                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9673  001402  0E01               	movlw	1
  9674  001404  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9675  001406  0E01               	movlw	1
  9676  001408  ECD7  F018         	call	_SwSpi_Set_CE_Pin
  9677                           
  9678                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  9679  00140C  0E00               	movlw	0
  9680  00140E  6E2F               	movwf	PLLInitialize@idx_812+1,c
  9681  001410  0E00               	movlw	0
  9682  001412  6E2E               	movwf	PLLInitialize@idx_812,c
  9683  001414                     l7736:
  9684  001414  BE2F               	btfsc	PLLInitialize@idx_812+1,7,c
  9685  001416  D006               	goto	l502
  9686  001418  502F               	movf	PLLInitialize@idx_812+1,w,c
  9687  00141A  E128               	bnz	l7746
  9688  00141C  0E0D               	movlw	13
  9689  00141E  5C2E               	subwf	PLLInitialize@idx_812,w,c
  9690  001420  B0D8               	btfsc	status,0,c
  9691  001422  D024               	goto	u7780
  9692  001424                     l502:
  9693                           
  9694                           ;SyntApp.c: 40: {
  9695                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  9696  001424  C02E  F02A         	movff	PLLInitialize@idx_812,??_PLLInitialize
  9697  001428  C02F  F02B         	movff	PLLInitialize@idx_812+1,??_PLLInitialize+1
  9698  00142C  90D8               	bcf	status,0,c
  9699  00142E  362A               	rlcf	??_PLLInitialize,f,c
  9700  001430  362B               	rlcf	??_PLLInitialize+1,f,c
  9701  001432  90D8               	bcf	status,0,c
  9702  001434  362A               	rlcf	??_PLLInitialize,f,c
  9703  001436  362B               	rlcf	??_PLLInitialize+1,f,c
  9704  001438  0E35               	movlw	low _PLL_INIT_REGISTERS
  9705  00143A  242A               	addwf	??_PLLInitialize,w,c
  9706  00143C  6EF6               	movwf	tblptrl,c
  9707  00143E  0E06               	movlw	high _PLL_INIT_REGISTERS
  9708  001440  202B               	addwfc	??_PLLInitialize+1,w,c
  9709  001442  6EF7               	movwf	tblptrh,c
  9710  001444                     	if	0	;There are less than 3 active tblptr bytes
  9711  001444                     	endif
  9712  001444  0009               	tblrd		*+
  9713  001446  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9714  00144A  0009               	tblrd		*+
  9715  00144C  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9716  001450  0009               	tblrd		*+
  9717  001452  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9718  001456  000A               	tblrd		*-
  9719  001458  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9720  00145C  0E03               	movlw	3
  9721  00145E  6E25               	movwf	SWSPI_send_word@dataSize,c
  9722  001460  0E01               	movlw	1
  9723  001462  ECC5  F010         	call	_SWSPI_send_word
  9724  001466  4A2E               	infsnz	PLLInitialize@idx_812,f,c
  9725  001468  2A2F               	incf	PLLInitialize@idx_812+1,f,c
  9726  00146A  D7D4               	goto	l7736
  9727  00146C                     u7780:
  9728  00146C                     l7746:
  9729                           
  9730                           ;SyntApp.c: 42: }
  9731                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  9732  00146C  0E45               	movlw	low (_PLL_INIT_REGISTERS+16)
  9733  00146E  6EF6               	movwf	tblptrl,c
  9734  001470  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9735  001472  6EF7               	movwf	tblptrh,c
  9736  001474                     	if	0	;tblptru may be non-zero
  9737  001474                     	endif
  9738  001474                     	if	0	;tblptru may be non-zero
  9739  001474                     	endif
  9740  001474  0009               	tblrd		*+
  9741  001476  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9742  00147A  0009               	tblrd		*+
  9743  00147C  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9744  001480  0009               	tblrd		*+
  9745  001482  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9746  001486  000A               	tblrd		*-
  9747  001488  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9748  00148C  0E03               	movlw	3
  9749  00148E  6E25               	movwf	SWSPI_send_word@dataSize,c
  9750  001490  0E01               	movlw	1
  9751  001492  ECC5  F010         	call	_SWSPI_send_word
  9752                           
  9753                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  9754  001496  0E3D               	movlw	low (_PLL_INIT_REGISTERS+8)
  9755  001498  6EF6               	movwf	tblptrl,c
  9756  00149A  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9757  00149C  6EF7               	movwf	tblptrh,c
  9758  00149E                     	if	0	;tblptru may be non-zero
  9759  00149E                     	endif
  9760  00149E                     	if	0	;tblptru may be non-zero
  9761  00149E                     	endif
  9762  00149E  0009               	tblrd		*+
  9763  0014A0  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9764  0014A4  0009               	tblrd		*+
  9765  0014A6  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9766  0014AA  0009               	tblrd		*+
  9767  0014AC  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9768  0014B0  000A               	tblrd		*-
  9769  0014B2  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9770  0014B6  0E03               	movlw	3
  9771  0014B8  6E25               	movwf	SWSPI_send_word@dataSize,c
  9772  0014BA  0E01               	movlw	1
  9773  0014BC  ECC5  F010         	call	_SWSPI_send_word
  9774                           
  9775                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  9776  0014C0  0E39               	movlw	low (_PLL_INIT_REGISTERS+4)
  9777  0014C2  6EF6               	movwf	tblptrl,c
  9778  0014C4  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9779  0014C6  6EF7               	movwf	tblptrh,c
  9780  0014C8                     	if	0	;tblptru may be non-zero
  9781  0014C8                     	endif
  9782  0014C8                     	if	0	;tblptru may be non-zero
  9783  0014C8                     	endif
  9784  0014C8  0009               	tblrd		*+
  9785  0014CA  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9786  0014CE  0009               	tblrd		*+
  9787  0014D0  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9788  0014D4  0009               	tblrd		*+
  9789  0014D6  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9790  0014DA  000A               	tblrd		*-
  9791  0014DC  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9792  0014E0  0E03               	movlw	3
  9793  0014E2  6E25               	movwf	SWSPI_send_word@dataSize,c
  9794  0014E4  0E01               	movlw	1
  9795  0014E6  ECC5  F010         	call	_SWSPI_send_word
  9796                           
  9797                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  9798  0014EA  0E35               	movlw	low _PLL_INIT_REGISTERS
  9799  0014EC  6EF6               	movwf	tblptrl,c
  9800  0014EE                     	if	1	;There is more than 1 active tblptr byte
  9801  0014EE  0E06               	movlw	high _PLL_INIT_REGISTERS
  9802  0014F0  6EF7               	movwf	tblptrh,c
  9803  0014F2                     	endif
  9804  0014F2                     	if	0	;There are less than 3 active tblptr bytes
  9805  0014F2                     	endif
  9806  0014F2  0009               	tblrd		*+
  9807  0014F4  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9808  0014F8  0009               	tblrd		*+
  9809  0014FA  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9810  0014FE  0009               	tblrd		*+
  9811  001500  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9812  001504  000A               	tblrd		*-
  9813  001506  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9814  00150A  0E03               	movlw	3
  9815  00150C  6E25               	movwf	SWSPI_send_word@dataSize,c
  9816  00150E  0E01               	movlw	1
  9817  001510  ECC5  F010         	call	_SWSPI_send_word
  9818  001514  0012               	return		;funcret
  9819  001516                     __end_of_PLLInitialize:
  9820                           	opt stack 0
  9821                           tosu	equ	0xFFF
  9822                           tosh	equ	0xFFE
  9823                           tosl	equ	0xFFD
  9824                           pclath	equ	0xFFA
  9825                           tblptru	equ	0xFF8
  9826                           tblptrh	equ	0xFF7
  9827                           tblptrl	equ	0xFF6
  9828                           tablat	equ	0xFF5
  9829                           prodh	equ	0xFF4
  9830                           prodl	equ	0xFF3
  9831                           intcon	equ	0xFF2
  9832                           intcon2	equ	0xFF1
  9833                           postinc0	equ	0xFEE
  9834                           wreg	equ	0xFE8
  9835                           indf1	equ	0xFE7
  9836                           postdec1	equ	0xFE5
  9837                           fsr1h	equ	0xFE2
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9847 ;; Defined at:
  9848 ;;		line 221 in file "SwSpiApp.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  phrType         1    wreg     enum E7538
  9851 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;  phrType         1   24[COMRAM] enum E7538
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  1    wreg      void 
  9856 ;; Registers used:
  9857 ;;		wreg, status,2, status,0
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9863 ;;      Params:         1       0       0       0       0       0       0
  9864 ;;      Locals:         1       0       0       0       0       0       0
  9865 ;;      Temps:          0       0       0       0       0       0       0
  9866 ;;      Totals:         2       0       0       0       0       0       0
  9867 ;;Total ram usage:        2 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; Hardware stack levels required when called:    3
  9870 ;; This function calls:
  9871 ;;		Nothing
  9872 ;; This function is called by:
  9873 ;;		_PLLInitialize
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text66
  9878  0031AE                     __ptext66:
  9879                           	opt stack 0
  9880  0031AE                     _SwSpi_Set_CE_Pin:
  9881                           	opt stack 25
  9882                           
  9883                           ;incstack = 0
  9884                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9885  0031AE  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9886                           
  9887                           ;SwSpiApp.c: 223: switch(phrType)
  9888  0031B0  D014               	goto	l670
  9889  0031B2                     
  9890                           ;SwSpiApp.c: 226: if(cPinMode == 1)
  9891  0031B2  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9892  0031B4  A4D8               	btfss	status,2,c
  9893  0031B6  D002               	goto	l672
  9894                           
  9895                           ;SwSpiApp.c: 227: {
  9896                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
  9897  0031B8  828B               	bsf	3979,1,c	;volatile
  9898                           
  9899                           ;SwSpiApp.c: 229: }
  9900  0031BA  0012               	return	
  9901  0031BC                     l672:
  9902                           
  9903                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
  9904  0031BC  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9905  0031BE  A4D8               	btfss	status,2,c
  9906  0031C0  0012               	return	
  9907                           
  9908                           ;SwSpiApp.c: 231: {
  9909                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
  9910  0031C2  928B               	bcf	3979,1,c	;volatile
  9911                           
  9912                           ;SwSpiApp.c: 233: }
  9913                           ;SwSpiApp.c: 234: break;
  9914  0031C4  0012               	return	
  9915  0031C6                     
  9916                           ;SwSpiApp.c: 237: if(cPinMode == 1)
  9917  0031C6  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9918  0031C8  A4D8               	btfss	status,2,c
  9919  0031CA  D002               	goto	l681
  9920                           
  9921                           ;SwSpiApp.c: 238: {
  9922                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
  9923  0031CC  848C               	bsf	3980,2,c	;volatile
  9924                           
  9925                           ;SwSpiApp.c: 240: }
  9926  0031CE  0012               	return	
  9927  0031D0                     l681:
  9928                           
  9929                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
  9930  0031D0  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9931  0031D2  A4D8               	btfss	status,2,c
  9932  0031D4  0012               	return	
  9933                           
  9934                           ;SwSpiApp.c: 242: {
  9935                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
  9936  0031D6  928B               	bcf	3979,1,c	;volatile
  9937                           
  9938                           ;SwSpiApp.c: 246: }
  9939                           
  9940                           ;SwSpiApp.c: 244: }
  9941                           ;SwSpiApp.c: 245: break;
  9942  0031D8  0012               	return	
  9943  0031DA                     l670:
  9944  0031DA  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9945                           
  9946                           ; Switch size 1, requested type "space"
  9947                           ; Number of cases is 2, Range of values is 0 to 1
  9948                           ; switch strategies available:
  9949                           ; Name         Instructions Cycles
  9950                           ; simple_byte            7     4 (average)
  9951                           ;	Chosen strategy is simple_byte
  9952  0031DC  0A00               	xorlw	0	; case 0
  9953  0031DE  B4D8               	btfsc	status,2,c
  9954  0031E0  D7E8               	goto	l671
  9955  0031E2  0A01               	xorlw	1	; case 1
  9956  0031E4  A4D8               	btfss	status,2,c
  9957  0031E6  0012               	return	
  9958  0031E8  D7EE               	goto	l680
  9959  0031EA                     __end_of_SwSpi_Set_CE_Pin:
  9960                           	opt stack 0
  9961                           tosu	equ	0xFFF
  9962                           tosh	equ	0xFFE
  9963                           tosl	equ	0xFFD
  9964                           pclath	equ	0xFFA
  9965                           tblptru	equ	0xFF8
  9966                           tblptrh	equ	0xFF7
  9967                           tblptrl	equ	0xFF6
  9968                           tablat	equ	0xFF5
  9969                           prodh	equ	0xFF4
  9970                           prodl	equ	0xFF3
  9971                           intcon	equ	0xFF2
  9972                           intcon2	equ	0xFF1
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           indf1	equ	0xFE7
  9976                           postdec1	equ	0xFE5
  9977                           fsr1h	equ	0xFE2
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           fsr2h	equ	0xFDA
  9983                           fsr2l	equ	0xFD9
  9984                           status	equ	0xFD8
  9985                           
  9986 ;; *************** function _InitSevenSegment *****************
  9987 ;; Defined at:
  9988 ;;		line 14 in file "SevenSegmentApp.c"
  9989 ;; Parameters:    Size  Location     Type
  9990 ;;		None
  9991 ;; Auto vars:     Size  Location     Type
  9992 ;;		None
  9993 ;; Return value:  Size  Location     Type
  9994 ;;                  1    wreg      void 
  9995 ;; Registers used:
  9996 ;;		wreg, status,2
  9997 ;; Tracked objects:
  9998 ;;		On entry : 0/0
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10002 ;;      Params:         0       0       0       0       0       0       0
 10003 ;;      Locals:         0       0       0       0       0       0       0
 10004 ;;      Temps:          0       0       0       0       0       0       0
 10005 ;;      Totals:         0       0       0       0       0       0       0
 10006 ;;Total ram usage:        0 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; Hardware stack levels required when called:    3
 10009 ;; This function calls:
 10010 ;;		Nothing
 10011 ;; This function is called by:
 10012 ;;		_InitSystemApplicationManagers
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text67
 10017  003564                     __ptext67:
 10018                           	opt stack 0
 10019  003564                     _InitSevenSegment:
 10020                           	opt stack 26
 10021                           
 10022                           ;SevenSegmentApp.c: 16: ANSELA = 0;
 10023                           
 10024                           ;incstack = 0
 10025  003564  0E00               	movlw	0
 10026  003566  010F               	movlb	15	; () banked
 10027  003568  6F38               	movwf	56,b	;volatile
 10028                           
 10029                           ;SevenSegmentApp.c: 17: ANSELD = 0;
 10030  00356A  0E00               	movlw	0
 10031  00356C  6F3B               	movwf	59,b	;volatile
 10032                           
 10033                           ;SevenSegmentApp.c: 19: TRISA = 0;
 10034  00356E  0E00               	movlw	0
 10035  003570  6E92               	movwf	3986,c	;volatile
 10036                           
 10037                           ;SevenSegmentApp.c: 20: LATA = 0;
 10038  003572  0E00               	movlw	0
 10039  003574  6E89               	movwf	3977,c	;volatile
 10040                           
 10041                           ;SevenSegmentApp.c: 21: TRISD = 0;
 10042  003576  0E00               	movlw	0
 10043  003578  6E95               	movwf	3989,c	;volatile
 10044                           
 10045                           ;SevenSegmentApp.c: 22: LATD = 0;
 10046  00357A  0E00               	movlw	0
 10047  00357C  6E8C               	movwf	3980,c	;volatile
 10048                           
 10049                           ;SevenSegmentApp.c: 24: cnt = 1;
 10050  00357E  0E00               	movlw	0
 10051  003580  0100               	movlb	0	; () banked
 10052  003582  6FFE               	movwf	(_cnt+1)& (0+255),b
 10053  003584  0E01               	movlw	1
 10054  003586  6FFD               	movwf	_cnt& (0+255),b
 10055                           
 10056                           ; BSR set to: 0
 10057  003588  0012               	return		;funcret
 10058  00358A                     __end_of_InitSevenSegment:
 10059                           	opt stack 0
 10060                           tosu	equ	0xFFF
 10061                           tosh	equ	0xFFE
 10062                           tosl	equ	0xFFD
 10063                           pclath	equ	0xFFA
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           intcon2	equ	0xFF1
 10072                           postinc0	equ	0xFEE
 10073                           wreg	equ	0xFE8
 10074                           indf1	equ	0xFE7
 10075                           postdec1	equ	0xFE5
 10076                           fsr1h	equ	0xFE2
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           fsr2h	equ	0xFDA
 10082                           fsr2l	equ	0xFD9
 10083                           status	equ	0xFD8
 10084                           
 10085 ;; *************** function _InitAdcApplicationMgr *****************
 10086 ;; Defined at:
 10087 ;;		line 22 in file "AdcApp.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  channel         1   23[COMRAM] unsigned char 
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  1    wreg      void 
 10094 ;; Registers used:
 10095 ;;		wreg, status,2
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10101 ;;      Params:         0       0       0       0       0       0       0
 10102 ;;      Locals:         1       0       0       0       0       0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0
 10104 ;;      Totals:         1       0       0       0       0       0       0
 10105 ;;Total ram usage:        1 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    3
 10108 ;; This function calls:
 10109 ;;		Nothing
 10110 ;; This function is called by:
 10111 ;;		_InitSystemApplicationManagers
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text68
 10116  003778                     __ptext68:
 10117                           	opt stack 0
 10118  003778                     _InitAdcApplicationMgr:
 10119                           	opt stack 26
 10120                           
 10121                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;incstack = 0
 10125  003778  0E00               	movlw	0
 10126  00377A  6E3D               	movwf	_conversionFormat,c
 10127                           
 10128                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10129  00377C  0E00               	movlw	0
 10130  00377E  6E3C               	movwf	_adcSampleMode,c
 10131                           
 10132                           ;AdcApp.c: 26: char channel = 0;
 10133  003780  0E00               	movlw	0
 10134  003782  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10135  003784  0012               	return		;funcret
 10136  003786                     __end_of_InitAdcApplicationMgr:
 10137                           	opt stack 0
 10138                           tosu	equ	0xFFF
 10139                           tosh	equ	0xFFE
 10140                           tosl	equ	0xFFD
 10141                           pclath	equ	0xFFA
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           intcon	equ	0xFF2
 10149                           intcon2	equ	0xFF1
 10150                           postinc0	equ	0xFEE
 10151                           wreg	equ	0xFE8
 10152                           indf1	equ	0xFE7
 10153                           postdec1	equ	0xFE5
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           fsr2h	equ	0xFDA
 10160                           fsr2l	equ	0xFD9
 10161                           status	equ	0xFD8
 10162                           
 10163 ;; *************** function _DacInit *****************
 10164 ;; Defined at:
 10165 ;;		line 24 in file "DacApp.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;		None
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;		None
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg, status,2, status,0, cstack
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10179 ;;      Params:         0       0       0       0       0       0       0
 10180 ;;      Locals:         0       0       0       0       0       0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0
 10182 ;;      Totals:         0       0       0       0       0       0       0
 10183 ;;Total ram usage:        0 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    6
 10186 ;; This function calls:
 10187 ;;		_SWSPI_send_word
 10188 ;; This function is called by:
 10189 ;;		_InitSystemApplicationManagers
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text69
 10194  0028D4                     __ptext69:
 10195                           	opt stack 0
 10196  0028D4                     _DacInit:
 10197                           	opt stack 23
 10198                           
 10199                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 10200                           
 10201                           ;incstack = 0
 10202  0028D4  0E44               	movlw	68
 10203  0028D6  6E21               	movwf	SWSPI_send_word@data,c
 10204  0028D8  0E23               	movlw	35
 10205  0028DA  6E22               	movwf	SWSPI_send_word@data+1,c
 10206  0028DC  0E00               	movlw	0
 10207  0028DE  6E23               	movwf	SWSPI_send_word@data+2,c
 10208  0028E0  0E00               	movlw	0
 10209  0028E2  6E24               	movwf	SWSPI_send_word@data+3,c
 10210  0028E4  0E01               	movlw	1
 10211  0028E6  6E25               	movwf	SWSPI_send_word@dataSize,c
 10212  0028E8  0E02               	movlw	2
 10213  0028EA  ECC5  F010         	call	_SWSPI_send_word
 10214                           
 10215                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 10216  0028EE  0E44               	movlw	68
 10217  0028F0  6E21               	movwf	SWSPI_send_word@data,c
 10218  0028F2  0E63               	movlw	99
 10219  0028F4  6E22               	movwf	SWSPI_send_word@data+1,c
 10220  0028F6  0E00               	movlw	0
 10221  0028F8  6E23               	movwf	SWSPI_send_word@data+2,c
 10222  0028FA  0E00               	movlw	0
 10223  0028FC  6E24               	movwf	SWSPI_send_word@data+3,c
 10224  0028FE  0E01               	movlw	1
 10225  002900  6E25               	movwf	SWSPI_send_word@dataSize,c
 10226  002902  0E02               	movlw	2
 10227  002904  ECC5  F010         	call	_SWSPI_send_word
 10228                           
 10229                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 10230  002908  0E44               	movlw	68
 10231  00290A  6E21               	movwf	SWSPI_send_word@data,c
 10232  00290C  0EA3               	movlw	163
 10233  00290E  6E22               	movwf	SWSPI_send_word@data+1,c
 10234  002910  0E00               	movlw	0
 10235  002912  6E23               	movwf	SWSPI_send_word@data+2,c
 10236  002914  0E00               	movlw	0
 10237  002916  6E24               	movwf	SWSPI_send_word@data+3,c
 10238  002918  0E01               	movlw	1
 10239  00291A  6E25               	movwf	SWSPI_send_word@dataSize,c
 10240  00291C  0E02               	movlw	2
 10241  00291E  ECC5  F010         	call	_SWSPI_send_word
 10242                           
 10243                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 10244  002922  0E44               	movlw	68
 10245  002924  6E21               	movwf	SWSPI_send_word@data,c
 10246  002926  0EE3               	movlw	227
 10247  002928  6E22               	movwf	SWSPI_send_word@data+1,c
 10248  00292A  0E00               	movlw	0
 10249  00292C  6E23               	movwf	SWSPI_send_word@data+2,c
 10250  00292E  0E00               	movlw	0
 10251  002930  6E24               	movwf	SWSPI_send_word@data+3,c
 10252  002932  0E01               	movlw	1
 10253  002934  6E25               	movwf	SWSPI_send_word@dataSize,c
 10254  002936  0E02               	movlw	2
 10255  002938  ECC5  F010         	call	_SWSPI_send_word
 10256  00293C  0012               	return		;funcret
 10257  00293E                     __end_of_DacInit:
 10258                           	opt stack 0
 10259                           tosu	equ	0xFFF
 10260                           tosh	equ	0xFFE
 10261                           tosl	equ	0xFFD
 10262                           pclath	equ	0xFFA
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           postinc0	equ	0xFEE
 10272                           wreg	equ	0xFE8
 10273                           indf1	equ	0xFE7
 10274                           postdec1	equ	0xFE5
 10275                           fsr1h	equ	0xFE2
 10276                           fsr1l	equ	0xFE1
 10277                           indf2	equ	0xFDF
 10278                           postinc2	equ	0xFDE
 10279                           postdec2	equ	0xFDD
 10280                           fsr2h	equ	0xFDA
 10281                           fsr2l	equ	0xFD9
 10282                           status	equ	0xFD8
 10283                           
 10284 ;; *************** function _SWSPI_send_word *****************
 10285 ;; Defined at:
 10286 ;;		line 17 in file "SwSpiApp.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;  phrType         1    wreg     enum E7538
 10289 ;;  data            4   32[COMRAM] unsigned long 
 10290 ;;  dataSize        1   36[COMRAM] unsigned char 
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;  phrType         1   40[COMRAM] enum E7538
 10293 ;;  datac           1   37[COMRAM] unsigned char 
 10294 ;;  idx             2   38[COMRAM] int 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      void 
 10297 ;; Registers used:
 10298 ;;		wreg, status,2, status,0, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10304 ;;      Params:         5       0       0       0       0       0       0
 10305 ;;      Locals:         4       0       0       0       0       0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0
 10307 ;;      Totals:         9       0       0       0       0       0       0
 10308 ;;Total ram usage:        9 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    5
 10311 ;; This function calls:
 10312 ;;		_SWSPI_DAC_send_bits
 10313 ;;		_SWSPI_Synth_send_bits
 10314 ;;		_SwSpi_Set_Dac_Sync_Pin
 10315 ;;		_SwSpi_Set_Synth_Le_Pin
 10316 ;;		_make8
 10317 ;; This function is called by:
 10318 ;;		_DacInit
 10319 ;;		_DacSetValue
 10320 ;;		_PLLInitialize
 10321 ;;		_UpdateTxFreq
 10322 ;;		_UpdateRxFreq
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           	psect	text70
 10327  00218A                     __ptext70:
 10328                           	opt stack 0
 10329  00218A                     _SWSPI_send_word:
 10330                           	opt stack 22
 10331                           
 10332                           ;incstack = 0
 10333                           ;SWSPI_send_word@phrType stored from wreg
 10334  00218A  6E29               	movwf	SWSPI_send_word@phrType,c
 10335                           
 10336                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10337  00218C  9EF2               	bcf	intcon,7,c	;volatile
 10338                           
 10339                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10340  00218E  5029               	movf	SWSPI_send_word@phrType,w,c
 10341  002190  B4D8               	btfsc	status,2,c
 10342  002192  D003               	goto	u6770
 10343  002194  0429               	decf	SWSPI_send_word@phrType,w,c
 10344  002196  A4D8               	btfss	status,2,c
 10345  002198  D005               	goto	l569
 10346  00219A                     u6770:
 10347                           
 10348                           ;SwSpiApp.c: 24: {
 10349                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10350  00219A  0E00               	movlw	0
 10351  00219C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10352  00219E  5029               	movf	SWSPI_send_word@phrType,w,c
 10353  0021A0  ECF5  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10354  0021A4                     l569:
 10355                           
 10356                           ;SwSpiApp.c: 26: }
 10357                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
 10358  0021A4  0E02               	movlw	2
 10359  0021A6  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10360  0021A8  A4D8               	btfss	status,2,c
 10361  0021AA  D003               	goto	l572
 10362                           
 10363                           ;SwSpiApp.c: 28: {
 10364                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 10365  0021AC  0E00               	movlw	0
 10366  0021AE  EC39  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10367  0021B2                     l572:
 10368                           
 10369                           ;SwSpiApp.c: 30: }
 10370                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 10371  0021B2  0E01               	movlw	1
 10372  0021B4  2425               	addwf	SWSPI_send_word@dataSize,w,c
 10373  0021B6  6E27               	movwf	SWSPI_send_word@idx,c
 10374  0021B8  6A28               	clrf	SWSPI_send_word@idx+1,c
 10375  0021BA  0E00               	movlw	0
 10376  0021BC  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 10377  0021BE                     l7020:
 10378  0021BE  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 10379  0021C0  D02B               	goto	u6830
 10380  0021C2  5028               	movf	SWSPI_send_word@idx+1,w,c
 10381  0021C4  E103               	bnz	l7024
 10382  0021C6  0427               	decf	SWSPI_send_word@idx,w,c
 10383  0021C8  A0D8               	btfss	status,0,c
 10384  0021CA  D026               	goto	u6830
 10385  0021CC                     l7024:
 10386                           
 10387                           ;SwSpiApp.c: 36: {
 10388                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 10389  0021CC  C021  F018         	movff	SWSPI_send_word@data,make8@data
 10390  0021D0  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10391  0021D4  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10392  0021D8  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10393  0021DC  0427               	decf	SWSPI_send_word@idx,w,c
 10394  0021DE  6E1C               	movwf	make8@dataLocation,c
 10395  0021E0  EC8F  F015         	call	_make8	;wreg free
 10396  0021E4  6E26               	movwf	SWSPI_send_word@datac,c
 10397                           
 10398                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10399  0021E6  5029               	movf	SWSPI_send_word@phrType,w,c
 10400  0021E8  B4D8               	btfsc	status,2,c
 10401  0021EA  D003               	goto	u6810
 10402  0021EC  0429               	decf	SWSPI_send_word@phrType,w,c
 10403  0021EE  A4D8               	btfss	status,2,c
 10404  0021F0  D006               	goto	l575
 10405  0021F2                     u6810:
 10406                           
 10407                           ;SwSpiApp.c: 40: {
 10408                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
 10409  0021F2  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
 10410  0021F6  5029               	movf	SWSPI_send_word@phrType,w,c
 10411  0021F8  EC17  F016         	call	_SWSPI_Synth_send_bits
 10412                           
 10413                           ;SwSpiApp.c: 42: }
 10414  0021FC  D009               	goto	l579
 10415  0021FE                     l575:
 10416                           
 10417                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
 10418  0021FE  0E02               	movlw	2
 10419  002200  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10420  002202  A4D8               	btfss	status,2,c
 10421  002204  D005               	goto	l579
 10422                           
 10423                           ;SwSpiApp.c: 44: {
 10424                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
 10425  002206  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10426  00220A  5029               	movf	SWSPI_send_word@phrType,w,c
 10427  00220C  EC43  F016         	call	_SWSPI_DAC_send_bits
 10428  002210                     l579:
 10429  002210  0627               	decf	SWSPI_send_word@idx,f,c
 10430  002212  A0D8               	btfss	status,0,c
 10431  002214  0628               	decf	SWSPI_send_word@idx+1,f,c
 10432  002216  D7D3               	goto	l7020
 10433  002218                     u6830:
 10434                           
 10435                           ;SwSpiApp.c: 46: }
 10436                           ;SwSpiApp.c: 47: }
 10437                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
 10438  002218  0E02               	movlw	2
 10439  00221A  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10440  00221C  A4D8               	btfss	status,2,c
 10441  00221E  D004               	goto	l580
 10442                           
 10443                           ;SwSpiApp.c: 53: {
 10444                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
 10445  002220  0E01               	movlw	1
 10446  002222  EC39  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10447                           
 10448                           ;SwSpiApp.c: 55: }
 10449  002226  D00B               	goto	l582
 10450  002228                     l580:
 10451                           
 10452                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10453  002228  5029               	movf	SWSPI_send_word@phrType,w,c
 10454  00222A  B4D8               	btfsc	status,2,c
 10455  00222C  D003               	goto	u6860
 10456  00222E  0429               	decf	SWSPI_send_word@phrType,w,c
 10457  002230  A4D8               	btfss	status,2,c
 10458  002232  D005               	goto	l582
 10459  002234                     u6860:
 10460                           
 10461                           ;SwSpiApp.c: 57: {
 10462                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10463  002234  0E01               	movlw	1
 10464  002236  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10465  002238  5029               	movf	SWSPI_send_word@phrType,w,c
 10466  00223A  ECF5  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10467  00223E                     l582:
 10468                           
 10469                           ;SwSpiApp.c: 59: }
 10470                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
 10471  00223E  8EF2               	bsf	intcon,7,c	;volatile
 10472  002240  0012               	return		;funcret
 10473  002242                     __end_of_SWSPI_send_word:
 10474                           	opt stack 0
 10475                           tosu	equ	0xFFF
 10476                           tosh	equ	0xFFE
 10477                           tosl	equ	0xFFD
 10478                           pclath	equ	0xFFA
 10479                           tblptru	equ	0xFF8
 10480                           tblptrh	equ	0xFF7
 10481                           tblptrl	equ	0xFF6
 10482                           tablat	equ	0xFF5
 10483                           prodh	equ	0xFF4
 10484                           prodl	equ	0xFF3
 10485                           intcon	equ	0xFF2
 10486                           intcon2	equ	0xFF1
 10487                           postinc0	equ	0xFEE
 10488                           wreg	equ	0xFE8
 10489                           indf1	equ	0xFE7
 10490                           postdec1	equ	0xFE5
 10491                           fsr1h	equ	0xFE2
 10492                           fsr1l	equ	0xFE1
 10493                           indf2	equ	0xFDF
 10494                           postinc2	equ	0xFDE
 10495                           postdec2	equ	0xFDD
 10496                           fsr2h	equ	0xFDA
 10497                           fsr2l	equ	0xFD9
 10498                           status	equ	0xFD8
 10499                           
 10500 ;; *************** function _make8 *****************
 10501 ;; Defined at:
 10502 ;;		line 62 in file "SystemCommon.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;  data            4   23[COMRAM] unsigned long 
 10505 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10506 ;; Auto vars:     Size  Location     Type
 10507 ;;		None
 10508 ;; Return value:  Size  Location     Type
 10509 ;;                  1    wreg      unsigned char 
 10510 ;; Registers used:
 10511 ;;		wreg, status,2, status,0
 10512 ;; Tracked objects:
 10513 ;;		On entry : 0/0
 10514 ;;		On exit  : 0/0
 10515 ;;		Unchanged: 0/0
 10516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10517 ;;      Params:         5       0       0       0       0       0       0
 10518 ;;      Locals:         0       0       0       0       0       0       0
 10519 ;;      Temps:          4       0       0       0       0       0       0
 10520 ;;      Totals:         9       0       0       0       0       0       0
 10521 ;;Total ram usage:        9 bytes
 10522 ;; Hardware stack levels used:    1
 10523 ;; Hardware stack levels required when called:    3
 10524 ;; This function calls:
 10525 ;;		Nothing
 10526 ;; This function is called by:
 10527 ;;		_FlashReadCondition
 10528 ;;		_SWSPI_send_word
 10529 ;; This function uses a non-reentrant model
 10530 ;;
 10531                           
 10532                           	psect	text71
 10533  002B1E                     __ptext71:
 10534                           	opt stack 0
 10535  002B1E                     _make8:
 10536                           	opt stack 23
 10537                           
 10538                           ;SystemCommon.c: 64: switch(dataLocation)
 10539                           
 10540                           ;incstack = 0
 10541  002B1E  D01F               	goto	l1287
 10542  002B20                     
 10543                           ;SystemCommon.c: 67: return (data & 0x000000ff);
 10544  002B20  5018               	movf	make8@data,w,c
 10545  002B22  0012               	return	
 10546  002B24                     
 10547                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
 10548  002B24  5019               	movf	make8@data+1,w,c
 10549  002B26  0012               	return	
 10550  002B28                     
 10551                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
 10552  002B28  501A               	movf	make8@data+2,w,c
 10553  002B2A  0012               	return	
 10554  002B2C                     
 10555                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
 10556  002B2C  0E00               	movlw	0
 10557  002B2E  1418               	andwf	make8@data,w,c
 10558  002B30  6E1D               	movwf	??_make8& (0+255),c
 10559  002B32  0E00               	movlw	0
 10560  002B34  1419               	andwf	make8@data+1,w,c
 10561  002B36  6E1E               	movwf	(??_make8+1)& (0+255),c
 10562  002B38  0E00               	movlw	0
 10563  002B3A  141A               	andwf	make8@data+2,w,c
 10564  002B3C  6E1F               	movwf	(??_make8+2)& (0+255),c
 10565  002B3E  0EFF               	movlw	255
 10566  002B40  141B               	andwf	make8@data+3,w,c
 10567  002B42  6E20               	movwf	(??_make8+3)& (0+255),c
 10568  002B44  0E19               	movlw	25
 10569  002B46  D005               	goto	u6180
 10570  002B48                     u6185:
 10571  002B48  90D8               	bcf	status,0,c
 10572  002B4A  3220               	rrcf	??_make8+3,f,c
 10573  002B4C  321F               	rrcf	??_make8+2,f,c
 10574  002B4E  321E               	rrcf	??_make8+1,f,c
 10575  002B50  321D               	rrcf	??_make8,f,c
 10576  002B52                     u6180:
 10577  002B52  2EE8               	decfsz	wreg,f,c
 10578  002B54  D7F9               	goto	u6185
 10579  002B56  501D               	movf	??_make8,w,c
 10580  002B58  0012               	return	
 10581  002B5A                     
 10582                           ;SystemCommon.c: 79: return (0);
 10583  002B5A  0E00               	movlw	0
 10584                           
 10585                           ;SystemCommon.c: 80: }
 10586  002B5C  0012               	return	
 10587  002B5E                     l1287:
 10588  002B5E  501C               	movf	make8@dataLocation,w,c
 10589                           
 10590                           ; Switch size 1, requested type "space"
 10591                           ; Number of cases is 4, Range of values is 0 to 3
 10592                           ; switch strategies available:
 10593                           ; Name         Instructions Cycles
 10594                           ; simple_byte           13     7 (average)
 10595                           ;	Chosen strategy is simple_byte
 10596  002B60  0A00               	xorlw	0	; case 0
 10597  002B62  B4D8               	btfsc	status,2,c
 10598  002B64  D7DD               	goto	l1288
 10599  002B66  0A01               	xorlw	1	; case 1
 10600  002B68  B4D8               	btfsc	status,2,c
 10601  002B6A  D7DC               	goto	l1290
 10602  002B6C  0A03               	xorlw	3	; case 2
 10603  002B6E  B4D8               	btfsc	status,2,c
 10604  002B70  D7DB               	goto	l1291
 10605  002B72  0A01               	xorlw	1	; case 3
 10606  002B74  B4D8               	btfsc	status,2,c
 10607  002B76  D7DA               	goto	l1292
 10608  002B78  D7F0               	goto	l1293
 10609  002B7A                     __end_of_make8:
 10610                           	opt stack 0
 10611                           tosu	equ	0xFFF
 10612                           tosh	equ	0xFFE
 10613                           tosl	equ	0xFFD
 10614                           pclath	equ	0xFFA
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           intcon2	equ	0xFF1
 10623                           postinc0	equ	0xFEE
 10624                           wreg	equ	0xFE8
 10625                           indf1	equ	0xFE7
 10626                           postdec1	equ	0xFE5
 10627                           fsr1h	equ	0xFE2
 10628                           fsr1l	equ	0xFE1
 10629                           indf2	equ	0xFDF
 10630                           postinc2	equ	0xFDE
 10631                           postdec2	equ	0xFDD
 10632                           fsr2h	equ	0xFDA
 10633                           fsr2l	equ	0xFD9
 10634                           status	equ	0xFD8
 10635                           
 10636 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10637 ;; Defined at:
 10638 ;;		line 252 in file "SwSpiApp.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;  phrType         1    wreg     enum E7538
 10641 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  phrType         1   24[COMRAM] enum E7538
 10644 ;; Return value:  Size  Location     Type
 10645 ;;                  1    wreg      void 
 10646 ;; Registers used:
 10647 ;;		wreg, status,2, status,0
 10648 ;; Tracked objects:
 10649 ;;		On entry : 0/0
 10650 ;;		On exit  : 0/0
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10653 ;;      Params:         1       0       0       0       0       0       0
 10654 ;;      Locals:         1       0       0       0       0       0       0
 10655 ;;      Temps:          0       0       0       0       0       0       0
 10656 ;;      Totals:         2       0       0       0       0       0       0
 10657 ;;Total ram usage:        2 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; Hardware stack levels required when called:    3
 10660 ;; This function calls:
 10661 ;;		Nothing
 10662 ;; This function is called by:
 10663 ;;		_SWSPI_send_word
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text72
 10668  0031EA                     __ptext72:
 10669                           	opt stack 0
 10670  0031EA                     _SwSpi_Set_Synth_Le_Pin:
 10671                           	opt stack 23
 10672                           
 10673                           ;incstack = 0
 10674                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10675  0031EA  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10676                           
 10677                           ;SwSpiApp.c: 254: switch(phrType)
 10678  0031EC  D014               	goto	l691
 10679  0031EE                     
 10680                           ;SwSpiApp.c: 257: if(cPinMode == 1)
 10681  0031EE  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10682  0031F0  A4D8               	btfss	status,2,c
 10683  0031F2  D002               	goto	l693
 10684                           
 10685                           ;SwSpiApp.c: 258: {
 10686                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
 10687  0031F4  848B               	bsf	3979,2,c	;volatile
 10688                           
 10689                           ;SwSpiApp.c: 260: }
 10690  0031F6  0012               	return	
 10691  0031F8                     l693:
 10692                           
 10693                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
 10694  0031F8  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10695  0031FA  A4D8               	btfss	status,2,c
 10696  0031FC  0012               	return	
 10697                           
 10698                           ;SwSpiApp.c: 262: {
 10699                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
 10700  0031FE  948B               	bcf	3979,2,c	;volatile
 10701                           
 10702                           ;SwSpiApp.c: 264: }
 10703                           ;SwSpiApp.c: 265: break;
 10704  003200  0012               	return	
 10705  003202                     
 10706                           ;SwSpiApp.c: 268: if(cPinMode == 1)
 10707  003202  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10708  003204  A4D8               	btfss	status,2,c
 10709  003206  D002               	goto	l702
 10710                           
 10711                           ;SwSpiApp.c: 269: {
 10712                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
 10713  003208  868C               	bsf	3980,3,c	;volatile
 10714                           
 10715                           ;SwSpiApp.c: 271: }
 10716  00320A  0012               	return	
 10717  00320C                     l702:
 10718                           
 10719                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
 10720  00320C  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10721  00320E  A4D8               	btfss	status,2,c
 10722  003210  0012               	return	
 10723                           
 10724                           ;SwSpiApp.c: 273: {
 10725                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
 10726  003212  968C               	bcf	3980,3,c	;volatile
 10727                           
 10728                           ;SwSpiApp.c: 277: }
 10729                           
 10730                           ;SwSpiApp.c: 275: }
 10731                           ;SwSpiApp.c: 276: break;
 10732  003214  0012               	return	
 10733  003216                     l691:
 10734  003216  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10735                           
 10736                           ; Switch size 1, requested type "space"
 10737                           ; Number of cases is 2, Range of values is 0 to 1
 10738                           ; switch strategies available:
 10739                           ; Name         Instructions Cycles
 10740                           ; simple_byte            7     4 (average)
 10741                           ;	Chosen strategy is simple_byte
 10742  003218  0A00               	xorlw	0	; case 0
 10743  00321A  B4D8               	btfsc	status,2,c
 10744  00321C  D7E8               	goto	l692
 10745  00321E  0A01               	xorlw	1	; case 1
 10746  003220  A4D8               	btfss	status,2,c
 10747  003222  0012               	return	
 10748  003224  D7EE               	goto	l701
 10749  003226                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10750                           	opt stack 0
 10751                           tosu	equ	0xFFF
 10752                           tosh	equ	0xFFE
 10753                           tosl	equ	0xFFD
 10754                           pclath	equ	0xFFA
 10755                           tblptru	equ	0xFF8
 10756                           tblptrh	equ	0xFF7
 10757                           tblptrl	equ	0xFF6
 10758                           tablat	equ	0xFF5
 10759                           prodh	equ	0xFF4
 10760                           prodl	equ	0xFF3
 10761                           intcon	equ	0xFF2
 10762                           intcon2	equ	0xFF1
 10763                           postinc0	equ	0xFEE
 10764                           wreg	equ	0xFE8
 10765                           indf1	equ	0xFE7
 10766                           postdec1	equ	0xFE5
 10767                           fsr1h	equ	0xFE2
 10768                           fsr1l	equ	0xFE1
 10769                           indf2	equ	0xFDF
 10770                           postinc2	equ	0xFDE
 10771                           postdec2	equ	0xFDD
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           
 10776 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10777 ;; Defined at:
 10778 ;;		line 280 in file "SwSpiApp.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  cPinMode        1    wreg     unsigned char 
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10783 ;; Return value:  Size  Location     Type
 10784 ;;                  1    wreg      void 
 10785 ;; Registers used:
 10786 ;;		wreg, status,2, status,0
 10787 ;; Tracked objects:
 10788 ;;		On entry : 0/0
 10789 ;;		On exit  : 0/0
 10790 ;;		Unchanged: 0/0
 10791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10792 ;;      Params:         0       0       0       0       0       0       0
 10793 ;;      Locals:         1       0       0       0       0       0       0
 10794 ;;      Temps:          0       0       0       0       0       0       0
 10795 ;;      Totals:         1       0       0       0       0       0       0
 10796 ;;Total ram usage:        1 bytes
 10797 ;; Hardware stack levels used:    1
 10798 ;; Hardware stack levels required when called:    3
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_SWSPI_send_word
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806                           	psect	text73
 10807  003672                     __ptext73:
 10808                           	opt stack 0
 10809  003672                     _SwSpi_Set_Dac_Sync_Pin:
 10810                           	opt stack 23
 10811                           
 10812                           ;incstack = 0
 10813                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10814  003672  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10815                           
 10816                           ;SwSpiApp.c: 282: switch(cPinMode)
 10817  003674  D004               	goto	l712
 10818  003676                     
 10819                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
 10820  003676  9489               	bcf	3977,2,c	;volatile
 10821                           
 10822                           ;SwSpiApp.c: 286: break;
 10823  003678  0012               	return	
 10824  00367A                     
 10825                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
 10826  00367A  8489               	bsf	3977,2,c	;volatile
 10827                           
 10828                           ;SwSpiApp.c: 291: }
 10829                           
 10830                           ;SwSpiApp.c: 290: break;
 10831  00367C  0012               	return	
 10832  00367E                     l712:
 10833  00367E  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10834                           
 10835                           ; Switch size 1, requested type "space"
 10836                           ; Number of cases is 2, Range of values is 0 to 1
 10837                           ; switch strategies available:
 10838                           ; Name         Instructions Cycles
 10839                           ; simple_byte            7     4 (average)
 10840                           ;	Chosen strategy is simple_byte
 10841  003680  0A00               	xorlw	0	; case 0
 10842  003682  B4D8               	btfsc	status,2,c
 10843  003684  D7F8               	goto	l713
 10844  003686  0A01               	xorlw	1	; case 1
 10845  003688  A4D8               	btfss	status,2,c
 10846  00368A  0012               	return	
 10847  00368C  D7F6               	goto	l717
 10848  00368E                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10849                           	opt stack 0
 10850                           tosu	equ	0xFFF
 10851                           tosh	equ	0xFFE
 10852                           tosl	equ	0xFFD
 10853                           pclath	equ	0xFFA
 10854                           tblptru	equ	0xFF8
 10855                           tblptrh	equ	0xFF7
 10856                           tblptrl	equ	0xFF6
 10857                           tablat	equ	0xFF5
 10858                           prodh	equ	0xFF4
 10859                           prodl	equ	0xFF3
 10860                           intcon	equ	0xFF2
 10861                           intcon2	equ	0xFF1
 10862                           postinc0	equ	0xFEE
 10863                           wreg	equ	0xFE8
 10864                           indf1	equ	0xFE7
 10865                           postdec1	equ	0xFE5
 10866                           fsr1h	equ	0xFE2
 10867                           fsr1l	equ	0xFE1
 10868                           indf2	equ	0xFDF
 10869                           postinc2	equ	0xFDE
 10870                           postdec2	equ	0xFDD
 10871                           fsr2h	equ	0xFDA
 10872                           fsr2l	equ	0xFD9
 10873                           status	equ	0xFD8
 10874                           
 10875 ;; *************** function _SWSPI_Synth_send_bits *****************
 10876 ;; Defined at:
 10877 ;;		line 89 in file "SwSpiApp.c"
 10878 ;; Parameters:    Size  Location     Type
 10879 ;;  phrType         1    wreg     enum E7538
 10880 ;;  data            1   25[COMRAM] unsigned char 
 10881 ;; Auto vars:     Size  Location     Type
 10882 ;;  phrType         1   27[COMRAM] enum E7538
 10883 ;;  count           1   26[COMRAM] unsigned char 
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      void 
 10886 ;; Registers used:
 10887 ;;		wreg, status,2, status,0, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10893 ;;      Params:         1       0       0       0       0       0       0
 10894 ;;      Locals:         2       0       0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0
 10896 ;;      Totals:         3       0       0       0       0       0       0
 10897 ;;Total ram usage:        3 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    4
 10900 ;; This function calls:
 10901 ;;		_SwSpi_Clk_Pin
 10902 ;;		_SwSpi_Data_Pin
 10903 ;; This function is called by:
 10904 ;;		_SWSPI_send_word
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           	psect	text74
 10909  002C2E                     __ptext74:
 10910                           	opt stack 0
 10911  002C2E                     _SWSPI_Synth_send_bits:
 10912                           	opt stack 22
 10913                           
 10914                           ;incstack = 0
 10915                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10916  002C2E  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
 10917                           
 10918                           ;SwSpiApp.c: 91: uint8_t count;
 10919                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
 10920  002C30  0E08               	movlw	8
 10921  002C32  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
 10922  002C34  D01A               	goto	l596
 10923  002C36                     
 10924                           ;SwSpiApp.c: 93: {
 10925                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
 10926  002C36  0E00               	movlw	0
 10927  002C38  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10928  002C3A  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10929  002C3C  ECC5  F016         	call	_SwSpi_Clk_Pin
 10930                           
 10931                           ;SwSpiApp.c: 96: if (data & 0X80)
 10932  002C40  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
 10933  002C42  D006               	goto	l598
 10934                           
 10935                           ;SwSpiApp.c: 97: {
 10936                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
 10937  002C44  0E01               	movlw	1
 10938  002C46  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10939  002C48  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10940  002C4A  EC9A  F016         	call	_SwSpi_Data_Pin
 10941                           
 10942                           ;SwSpiApp.c: 100: }
 10943  002C4E  D005               	goto	l599
 10944  002C50                     l598:
 10945                           
 10946                           ;SwSpiApp.c: 101: else
 10947                           ;SwSpiApp.c: 102: {
 10948                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
 10949  002C50  0E00               	movlw	0
 10950  002C52  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10951  002C54  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10952  002C56  EC9A  F016         	call	_SwSpi_Data_Pin
 10953  002C5A                     l599:
 10954                           
 10955                           ;SwSpiApp.c: 104: }
 10956                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
 10957  002C5A  0E01               	movlw	1
 10958  002C5C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10959  002C5E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10960  002C60  ECC5  F016         	call	_SwSpi_Clk_Pin
 10961  002C64  061B               	decf	SWSPI_Synth_send_bits@count,f,c
 10962  002C66  90D8               	bcf	status,0,c
 10963  002C68  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
 10964  002C6A                     l596:
 10965  002C6A  501B               	movf	SWSPI_Synth_send_bits@count,w,c
 10966  002C6C  A4D8               	btfss	status,2,c
 10967  002C6E  D7E3               	goto	l597
 10968                           
 10969                           ;SwSpiApp.c: 113: }
 10970                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
 10971  002C70  0E00               	movlw	0
 10972  002C72  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10973  002C74  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10974  002C76  EC9A  F016         	call	_SwSpi_Data_Pin
 10975                           
 10976                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
 10977  002C7A  0E00               	movlw	0
 10978  002C7C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10979  002C7E  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 10980  002C80  ECC5  F016         	call	_SwSpi_Clk_Pin
 10981  002C84  0012               	return		;funcret
 10982  002C86                     __end_of_SWSPI_Synth_send_bits:
 10983                           	opt stack 0
 10984                           tosu	equ	0xFFF
 10985                           tosh	equ	0xFFE
 10986                           tosl	equ	0xFFD
 10987                           pclath	equ	0xFFA
 10988                           tblptru	equ	0xFF8
 10989                           tblptrh	equ	0xFF7
 10990                           tblptrl	equ	0xFF6
 10991                           tablat	equ	0xFF5
 10992                           prodh	equ	0xFF4
 10993                           prodl	equ	0xFF3
 10994                           intcon	equ	0xFF2
 10995                           intcon2	equ	0xFF1
 10996                           postinc0	equ	0xFEE
 10997                           wreg	equ	0xFE8
 10998                           indf1	equ	0xFE7
 10999                           postdec1	equ	0xFE5
 11000                           fsr1h	equ	0xFE2
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           fsr2h	equ	0xFDA
 11006                           fsr2l	equ	0xFD9
 11007                           status	equ	0xFD8
 11008                           
 11009 ;; *************** function _SWSPI_DAC_send_bits *****************
 11010 ;; Defined at:
 11011 ;;		line 65 in file "SwSpiApp.c"
 11012 ;; Parameters:    Size  Location     Type
 11013 ;;  phrType         1    wreg     enum E7538
 11014 ;;  data            1   25[COMRAM] unsigned char 
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;  phrType         1   27[COMRAM] enum E7538
 11017 ;;  count           1   26[COMRAM] unsigned char 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;                  1    wreg      void 
 11020 ;; Registers used:
 11021 ;;		wreg, status,2, status,0, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11027 ;;      Params:         1       0       0       0       0       0       0
 11028 ;;      Locals:         2       0       0       0       0       0       0
 11029 ;;      Temps:          0       0       0       0       0       0       0
 11030 ;;      Totals:         3       0       0       0       0       0       0
 11031 ;;Total ram usage:        3 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    4
 11034 ;; This function calls:
 11035 ;;		_SwSpi_Clk_Pin
 11036 ;;		_SwSpi_Data_Pin
 11037 ;; This function is called by:
 11038 ;;		_SWSPI_send_word
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           	psect	text75
 11043  002C86                     __ptext75:
 11044                           	opt stack 0
 11045  002C86                     _SWSPI_DAC_send_bits:
 11046                           	opt stack 22
 11047                           
 11048                           ;incstack = 0
 11049                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11050  002C86  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11051                           
 11052                           ;SwSpiApp.c: 67: uint8_t count;
 11053                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
 11054  002C88  0E08               	movlw	8
 11055  002C8A  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11056  002C8C  D01A               	goto	l588
 11057  002C8E                     
 11058                           ;SwSpiApp.c: 69: {
 11059                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
 11060  002C8E  0E01               	movlw	1
 11061  002C90  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11062  002C92  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11063  002C94  ECC5  F016         	call	_SwSpi_Clk_Pin
 11064                           
 11065                           ;SwSpiApp.c: 72: if (data & 0X80)
 11066  002C98  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11067  002C9A  D006               	goto	l590
 11068                           
 11069                           ;SwSpiApp.c: 73: {
 11070                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
 11071  002C9C  0E01               	movlw	1
 11072  002C9E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11073  002CA0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11074  002CA2  EC9A  F016         	call	_SwSpi_Data_Pin
 11075                           
 11076                           ;SwSpiApp.c: 76: }
 11077  002CA6  D005               	goto	l591
 11078  002CA8                     l590:
 11079                           
 11080                           ;SwSpiApp.c: 77: else
 11081                           ;SwSpiApp.c: 78: {
 11082                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
 11083  002CA8  0E00               	movlw	0
 11084  002CAA  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11085  002CAC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11086  002CAE  EC9A  F016         	call	_SwSpi_Data_Pin
 11087  002CB2                     l591:
 11088                           
 11089                           ;SwSpiApp.c: 80: }
 11090                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
 11091  002CB2  0E00               	movlw	0
 11092  002CB4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11093  002CB6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11094  002CB8  ECC5  F016         	call	_SwSpi_Clk_Pin
 11095  002CBC  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11096  002CBE  90D8               	bcf	status,0,c
 11097  002CC0  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11098  002CC2                     l588:
 11099  002CC2  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11100  002CC4  A4D8               	btfss	status,2,c
 11101  002CC6  D7E3               	goto	l589
 11102                           
 11103                           ;SwSpiApp.c: 83: }
 11104                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
 11105  002CC8  0E00               	movlw	0
 11106  002CCA  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11107  002CCC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11108  002CCE  EC9A  F016         	call	_SwSpi_Data_Pin
 11109                           
 11110                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
 11111  002CD2  0E00               	movlw	0
 11112  002CD4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11113  002CD6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11114  002CD8  ECC5  F016         	call	_SwSpi_Clk_Pin
 11115  002CDC  0012               	return		;funcret
 11116  002CDE                     __end_of_SWSPI_DAC_send_bits:
 11117                           	opt stack 0
 11118                           tosu	equ	0xFFF
 11119                           tosh	equ	0xFFE
 11120                           tosl	equ	0xFFD
 11121                           pclath	equ	0xFFA
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           intcon2	equ	0xFF1
 11130                           postinc0	equ	0xFEE
 11131                           wreg	equ	0xFE8
 11132                           indf1	equ	0xFE7
 11133                           postdec1	equ	0xFE5
 11134                           fsr1h	equ	0xFE2
 11135                           fsr1l	equ	0xFE1
 11136                           indf2	equ	0xFDF
 11137                           postinc2	equ	0xFDE
 11138                           postdec2	equ	0xFDD
 11139                           fsr2h	equ	0xFDA
 11140                           fsr2l	equ	0xFD9
 11141                           status	equ	0xFD8
 11142                           
 11143 ;; *************** function _SwSpi_Data_Pin *****************
 11144 ;; Defined at:
 11145 ;;		line 123 in file "SwSpiApp.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  phrType         1    wreg     enum E7538
 11148 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;  phrType         1   24[COMRAM] enum E7538
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      void 
 11153 ;; Registers used:
 11154 ;;		wreg, status,2, status,0
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11160 ;;      Params:         1       0       0       0       0       0       0
 11161 ;;      Locals:         1       0       0       0       0       0       0
 11162 ;;      Temps:          0       0       0       0       0       0       0
 11163 ;;      Totals:         2       0       0       0       0       0       0
 11164 ;;Total ram usage:        2 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; Hardware stack levels required when called:    3
 11167 ;; This function calls:
 11168 ;;		Nothing
 11169 ;; This function is called by:
 11170 ;;		_SWSPI_DAC_send_bits
 11171 ;;		_SWSPI_Synth_send_bits
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text76
 11176  002D34                     __ptext76:
 11177                           	opt stack 0
 11178  002D34                     _SwSpi_Data_Pin:
 11179                           	opt stack 22
 11180                           
 11181                           ;incstack = 0
 11182                           ;SwSpi_Data_Pin@phrType stored from wreg
 11183  002D34  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11184                           
 11185                           ;SwSpiApp.c: 125: switch(phrType)
 11186  002D36  D01E               	goto	l604
 11187  002D38                     
 11188                           ;SwSpiApp.c: 128: if(cPinMode == 1)
 11189  002D38  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11190  002D3A  A4D8               	btfss	status,2,c
 11191  002D3C  D002               	goto	l606
 11192                           
 11193                           ;SwSpiApp.c: 129: {
 11194                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
 11195  002D3E  808C               	bsf	3980,0,c	;volatile
 11196                           
 11197                           ;SwSpiApp.c: 131: }
 11198  002D40  0012               	return	
 11199  002D42                     l606:
 11200                           
 11201                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
 11202  002D42  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11203  002D44  A4D8               	btfss	status,2,c
 11204  002D46  0012               	return	
 11205                           
 11206                           ;SwSpiApp.c: 133: {
 11207                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
 11208  002D48  908C               	bcf	3980,0,c	;volatile
 11209                           
 11210                           ;SwSpiApp.c: 135: }
 11211                           ;SwSpiApp.c: 136: break;
 11212  002D4A  0012               	return	
 11213  002D4C                     
 11214                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 11215  002D4C  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11216  002D4E  A4D8               	btfss	status,2,c
 11217  002D50  D002               	goto	l615
 11218                           
 11219                           ;SwSpiApp.c: 140: {
 11220                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
 11221  002D52  8A8B               	bsf	3979,5,c	;volatile
 11222                           
 11223                           ;SwSpiApp.c: 142: }
 11224  002D54  0012               	return	
 11225  002D56                     l615:
 11226                           
 11227                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 11228  002D56  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11229  002D58  A4D8               	btfss	status,2,c
 11230  002D5A  0012               	return	
 11231                           
 11232                           ;SwSpiApp.c: 144: {
 11233                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
 11234  002D5C  9A8B               	bcf	3979,5,c	;volatile
 11235                           
 11236                           ;SwSpiApp.c: 146: }
 11237                           ;SwSpiApp.c: 147: break;
 11238  002D5E  0012               	return	
 11239  002D60                     
 11240                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 11241  002D60  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11242  002D62  A4D8               	btfss	status,2,c
 11243  002D64  D002               	goto	l623
 11244                           
 11245                           ;SwSpiApp.c: 151: {
 11246                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
 11247  002D66  8889               	bsf	3977,4,c	;volatile
 11248                           
 11249                           ;SwSpiApp.c: 153: }
 11250  002D68  0012               	return	
 11251  002D6A                     l623:
 11252                           
 11253                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 11254  002D6A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11255  002D6C  A4D8               	btfss	status,2,c
 11256  002D6E  0012               	return	
 11257                           
 11258                           ;SwSpiApp.c: 155: {
 11259                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
 11260  002D70  9889               	bcf	3977,4,c	;volatile
 11261                           
 11262                           ;SwSpiApp.c: 159: }
 11263                           
 11264                           ;SwSpiApp.c: 157: }
 11265                           ;SwSpiApp.c: 158: break;
 11266  002D72  0012               	return	
 11267  002D74                     l604:
 11268  002D74  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11269                           
 11270                           ; Switch size 1, requested type "space"
 11271                           ; Number of cases is 3, Range of values is 0 to 2
 11272                           ; switch strategies available:
 11273                           ; Name         Instructions Cycles
 11274                           ; simple_byte           10     6 (average)
 11275                           ;	Chosen strategy is simple_byte
 11276  002D76  0A00               	xorlw	0	; case 0
 11277  002D78  B4D8               	btfsc	status,2,c
 11278  002D7A  D7DE               	goto	l605
 11279  002D7C  0A01               	xorlw	1	; case 1
 11280  002D7E  B4D8               	btfsc	status,2,c
 11281  002D80  D7E5               	goto	l614
 11282  002D82  0A03               	xorlw	3	; case 2
 11283  002D84  A4D8               	btfss	status,2,c
 11284  002D86  0012               	return	
 11285  002D88  D7EB               	goto	l622
 11286  002D8A                     __end_of_SwSpi_Data_Pin:
 11287                           	opt stack 0
 11288                           tosu	equ	0xFFF
 11289                           tosh	equ	0xFFE
 11290                           tosl	equ	0xFFD
 11291                           pclath	equ	0xFFA
 11292                           tblptru	equ	0xFF8
 11293                           tblptrh	equ	0xFF7
 11294                           tblptrl	equ	0xFF6
 11295                           tablat	equ	0xFF5
 11296                           prodh	equ	0xFF4
 11297                           prodl	equ	0xFF3
 11298                           intcon	equ	0xFF2
 11299                           intcon2	equ	0xFF1
 11300                           postinc0	equ	0xFEE
 11301                           wreg	equ	0xFE8
 11302                           indf1	equ	0xFE7
 11303                           postdec1	equ	0xFE5
 11304                           fsr1h	equ	0xFE2
 11305                           fsr1l	equ	0xFE1
 11306                           indf2	equ	0xFDF
 11307                           postinc2	equ	0xFDE
 11308                           postdec2	equ	0xFDD
 11309                           fsr2h	equ	0xFDA
 11310                           fsr2l	equ	0xFD9
 11311                           status	equ	0xFD8
 11312                           
 11313 ;; *************** function _SwSpi_Clk_Pin *****************
 11314 ;; Defined at:
 11315 ;;		line 162 in file "SwSpiApp.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;  phrType         1    wreg     enum E7538
 11318 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;  phrType         1   24[COMRAM] enum E7538
 11321 ;; Return value:  Size  Location     Type
 11322 ;;                  1    wreg      void 
 11323 ;; Registers used:
 11324 ;;		wreg, status,2, status,0
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11330 ;;      Params:         1       0       0       0       0       0       0
 11331 ;;      Locals:         1       0       0       0       0       0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0
 11333 ;;      Totals:         2       0       0       0       0       0       0
 11334 ;;Total ram usage:        2 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    3
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_SWSPI_DAC_send_bits
 11341 ;;		_SWSPI_Synth_send_bits
 11342 ;;		_SwSpi_Synth_Toggle_Clock
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           	psect	text77
 11347  002D8A                     __ptext77:
 11348                           	opt stack 0
 11349  002D8A                     _SwSpi_Clk_Pin:
 11350                           	opt stack 22
 11351                           
 11352                           ;incstack = 0
 11353                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11354  002D8A  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11355                           
 11356                           ;SwSpiApp.c: 164: switch(phrType)
 11357  002D8C  D01E               	goto	l633
 11358  002D8E                     
 11359                           ;SwSpiApp.c: 167: if(cPinMode == 1)
 11360  002D8E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11361  002D90  A4D8               	btfss	status,2,c
 11362  002D92  D002               	goto	l635
 11363                           
 11364                           ;SwSpiApp.c: 168: {
 11365                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
 11366  002D94  868B               	bsf	3979,3,c	;volatile
 11367                           
 11368                           ;SwSpiApp.c: 170: }
 11369  002D96  0012               	return	
 11370  002D98                     l635:
 11371                           
 11372                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
 11373  002D98  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11374  002D9A  A4D8               	btfss	status,2,c
 11375  002D9C  0012               	return	
 11376                           
 11377                           ;SwSpiApp.c: 172: {
 11378                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
 11379  002D9E  968B               	bcf	3979,3,c	;volatile
 11380                           
 11381                           ;SwSpiApp.c: 174: }
 11382                           ;SwSpiApp.c: 175: break;
 11383  002DA0  0012               	return	
 11384  002DA2                     
 11385                           ;SwSpiApp.c: 178: if(cPinMode == 1)
 11386  002DA2  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11387  002DA4  A4D8               	btfss	status,2,c
 11388  002DA6  D002               	goto	l644
 11389                           
 11390                           ;SwSpiApp.c: 179: {
 11391                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
 11392  002DA8  888B               	bsf	3979,4,c	;volatile
 11393                           
 11394                           ;SwSpiApp.c: 181: }
 11395  002DAA  0012               	return	
 11396  002DAC                     l644:
 11397                           
 11398                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
 11399  002DAC  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11400  002DAE  A4D8               	btfss	status,2,c
 11401  002DB0  0012               	return	
 11402                           
 11403                           ;SwSpiApp.c: 183: {
 11404                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
 11405  002DB2  988B               	bcf	3979,4,c	;volatile
 11406                           
 11407                           ;SwSpiApp.c: 185: }
 11408                           ;SwSpiApp.c: 187: break;
 11409  002DB4  0012               	return	
 11410  002DB6                     
 11411                           ;SwSpiApp.c: 190: if(cPinMode == 1)
 11412  002DB6  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11413  002DB8  A4D8               	btfss	status,2,c
 11414  002DBA  D002               	goto	l652
 11415                           
 11416                           ;SwSpiApp.c: 191: {
 11417                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
 11418  002DBC  8689               	bsf	3977,3,c	;volatile
 11419                           
 11420                           ;SwSpiApp.c: 193: }
 11421  002DBE  0012               	return	
 11422  002DC0                     l652:
 11423                           
 11424                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
 11425  002DC0  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11426  002DC2  A4D8               	btfss	status,2,c
 11427  002DC4  0012               	return	
 11428                           
 11429                           ;SwSpiApp.c: 195: {
 11430                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
 11431  002DC6  9689               	bcf	3977,3,c	;volatile
 11432                           
 11433                           ;SwSpiApp.c: 199: }
 11434                           
 11435                           ;SwSpiApp.c: 197: }
 11436                           ;SwSpiApp.c: 198: break;
 11437  002DC8  0012               	return	
 11438  002DCA                     l633:
 11439  002DCA  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11440                           
 11441                           ; Switch size 1, requested type "space"
 11442                           ; Number of cases is 3, Range of values is 0 to 2
 11443                           ; switch strategies available:
 11444                           ; Name         Instructions Cycles
 11445                           ; simple_byte           10     6 (average)
 11446                           ;	Chosen strategy is simple_byte
 11447  002DCC  0A00               	xorlw	0	; case 0
 11448  002DCE  B4D8               	btfsc	status,2,c
 11449  002DD0  D7DE               	goto	l634
 11450  002DD2  0A01               	xorlw	1	; case 1
 11451  002DD4  B4D8               	btfsc	status,2,c
 11452  002DD6  D7E5               	goto	l643
 11453  002DD8  0A03               	xorlw	3	; case 2
 11454  002DDA  A4D8               	btfss	status,2,c
 11455  002DDC  0012               	return	
 11456  002DDE  D7EB               	goto	l651
 11457  002DE0                     __end_of_SwSpi_Clk_Pin:
 11458                           	opt stack 0
 11459                           tosu	equ	0xFFF
 11460                           tosh	equ	0xFFE
 11461                           tosl	equ	0xFFD
 11462                           pclath	equ	0xFFA
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           intcon2	equ	0xFF1
 11471                           postinc0	equ	0xFEE
 11472                           wreg	equ	0xFE8
 11473                           indf1	equ	0xFE7
 11474                           postdec1	equ	0xFE5
 11475                           fsr1h	equ	0xFE2
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function _ClearMcuRunTime *****************
 11485 ;; Defined at:
 11486 ;;		line 87 in file "SystemStatus.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;		None
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, status,2
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11500 ;;      Params:         0       0       0       0       0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0
 11502 ;;      Temps:          0       0       0       0       0       0       0
 11503 ;;      Totals:         0       0       0       0       0       0       0
 11504 ;;Total ram usage:        0 bytes
 11505 ;; Hardware stack levels used:    1
 11506 ;; Hardware stack levels required when called:    3
 11507 ;; This function calls:
 11508 ;;		Nothing
 11509 ;; This function is called by:
 11510 ;;		_InitSystemApplicationManagers
 11511 ;; This function uses a non-reentrant model
 11512 ;;
 11513                           
 11514                           	psect	text78
 11515  003718                     __ptext78:
 11516                           	opt stack 0
 11517  003718                     _ClearMcuRunTime:
 11518                           	opt stack 26
 11519                           
 11520                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11521                           
 11522                           ;incstack = 0
 11523  003718  0E00               	movlw	0
 11524  00371A  0100               	movlb	0	; () banked
 11525  00371C  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11526  00371E  0E00               	movlw	0
 11527  003720  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11528  003722  0E00               	movlw	0
 11529  003724  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11530  003726  0E00               	movlw	0
 11531  003728  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11532                           
 11533                           ; BSR set to: 0
 11534  00372A  0012               	return		;funcret
 11535  00372C                     __end_of_ClearMcuRunTime:
 11536                           	opt stack 0
 11537                           tosu	equ	0xFFF
 11538                           tosh	equ	0xFFE
 11539                           tosl	equ	0xFFD
 11540                           pclath	equ	0xFFA
 11541                           tblptru	equ	0xFF8
 11542                           tblptrh	equ	0xFF7
 11543                           tblptrl	equ	0xFF6
 11544                           tablat	equ	0xFF5
 11545                           prodh	equ	0xFF4
 11546                           prodl	equ	0xFF3
 11547                           intcon	equ	0xFF2
 11548                           intcon2	equ	0xFF1
 11549                           postinc0	equ	0xFEE
 11550                           wreg	equ	0xFE8
 11551                           indf1	equ	0xFE7
 11552                           postdec1	equ	0xFE5
 11553                           fsr1h	equ	0xFE2
 11554                           fsr1l	equ	0xFE1
 11555                           indf2	equ	0xFDF
 11556                           postinc2	equ	0xFDE
 11557                           postdec2	equ	0xFDD
 11558                           fsr2h	equ	0xFDA
 11559                           fsr2l	equ	0xFD9
 11560                           status	equ	0xFD8
 11561                           
 11562 ;; *************** function _CheckFlashPrecentage *****************
 11563 ;; Defined at:
 11564 ;;		line 205 in file "FlashApp.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;		None
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;  precentage      3   28[BANK0 ] void 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      unsigned char 
 11571 ;; Registers used:
 11572 ;;		wreg, status,2, status,0, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11578 ;;      Params:         0       0       0       0       0       0       0
 11579 ;;      Locals:         0       3       0       0       0       0       0
 11580 ;;      Temps:          0       4       0       0       0       0       0
 11581 ;;      Totals:         0       7       0       0       0       0       0
 11582 ;;Total ram usage:        7 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    5
 11585 ;; This function calls:
 11586 ;;		___ftdiv
 11587 ;;		___ftge
 11588 ;;		___ftmul
 11589 ;;		___lltoft
 11590 ;; This function is called by:
 11591 ;;		_main
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text79
 11596  002242                     __ptext79:
 11597                           	opt stack 0
 11598  002242                     _CheckFlashPrecentage:
 11599                           	opt stack 25
 11600                           
 11601                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;incstack = 0
 11605  002242  0EE0               	movlw	224
 11606  002244  6E2C               	movwf	___ftdiv@f2,c
 11607  002246  0EFF               	movlw	255
 11608  002248  6E2D               	movwf	___ftdiv@f2+1,c
 11609  00224A  0E46               	movlw	70
 11610  00224C  6E2E               	movwf	___ftdiv@f2+2,c
 11611  00224E  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11612  002252  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11613  002256  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11614  00225A  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11615  00225E  0100               	movlb	0	; () banked
 11616  002260  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11617  002262  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11618  002264  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11619  002266  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11620  002268  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11621  00226A  0E00               	movlw	0
 11622  00226C  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11623  00226E  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11624  002270  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11625  002272  0EF0               	movlw	240
 11626  002274  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11627  002276  6E20               	movwf	___lltoft@c,c
 11628  002278  0E7F               	movlw	127
 11629  00227A  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11630  00227C  6E21               	movwf	___lltoft@c+1,c
 11631  00227E  0E00               	movlw	0
 11632  002280  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11633  002282  6E22               	movwf	___lltoft@c+2,c
 11634  002284  0E00               	movlw	0
 11635  002286  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11636  002288  6E23               	movwf	___lltoft@c+3,c
 11637  00228A  ECBD  F015         	call	___lltoft	;wreg free
 11638  00228E  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11639  002292  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11640  002296  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11641  00229A  ECD4  F00D         	call	___ftdiv	;wreg free
 11642  00229E  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11643  0022A2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11644  0022A6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11645  0022AA  0E00               	movlw	0
 11646  0022AC  0100               	movlb	0	; () banked
 11647  0022AE  6F6C               	movwf	___ftmul@f2& (0+255),b
 11648  0022B0  0EC8               	movlw	200
 11649  0022B2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11650  0022B4  0E42               	movlw	66
 11651  0022B6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11652  0022B8  EC59  F00D         	call	___ftmul	;wreg free
 11653  0022BC  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11654  0022C0  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11655  0022C4  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11656                           
 11657                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11658  0022C8  0E00               	movlw	0
 11659  0022CA  6E18               	movwf	___ftge@ff1,c
 11660  0022CC  0E96               	movlw	150
 11661  0022CE  6E19               	movwf	___ftge@ff1+1,c
 11662  0022D0  0E42               	movlw	66
 11663  0022D2  6E1A               	movwf	___ftge@ff1+2,c
 11664  0022D4  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11665  0022D8  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11666  0022DC  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11667  0022E0  ECF5  F012         	call	___ftge	;wreg free
 11668  0022E4  B0D8               	btfsc	status,0,c
 11669  0022E6  D002               	goto	u7950
 11670  0022E8  0E01               	movlw	1
 11671  0022EA  0012               	return	
 11672  0022EC                     u7950:
 11673  0022EC  0E00               	movlw	0
 11674  0022EE  0012               	return	
 11675  0022F0                     __end_of_CheckFlashPrecentage:
 11676                           	opt stack 0
 11677                           tosu	equ	0xFFF
 11678                           tosh	equ	0xFFE
 11679                           tosl	equ	0xFFD
 11680                           pclath	equ	0xFFA
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodh	equ	0xFF4
 11686                           prodl	equ	0xFF3
 11687                           intcon	equ	0xFF2
 11688                           intcon2	equ	0xFF1
 11689                           postinc0	equ	0xFEE
 11690                           wreg	equ	0xFE8
 11691                           indf1	equ	0xFE7
 11692                           postdec1	equ	0xFE5
 11693                           fsr1h	equ	0xFE2
 11694                           fsr1l	equ	0xFE1
 11695                           indf2	equ	0xFDF
 11696                           postinc2	equ	0xFDE
 11697                           postdec2	equ	0xFDD
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _BlinkOkLeds *****************
 11703 ;; Defined at:
 11704 ;;		line 24 in file "LedsApp.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  state           1    wreg     enum E7554
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  state           1   26[COMRAM] enum E7554
 11709 ;;  idx             2   27[COMRAM] int 
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		wreg, status,2, status,0
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11719 ;;      Params:         0       0       0       0       0       0       0
 11720 ;;      Locals:         3       0       0       0       0       0       0
 11721 ;;      Temps:          3       0       0       0       0       0       0
 11722 ;;      Totals:         6       0       0       0       0       0       0
 11723 ;;Total ram usage:        6 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    3
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_main
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text80
 11734  002A06                     __ptext80:
 11735                           	opt stack 0
 11736  002A06                     _BlinkOkLeds:
 11737                           	opt stack 27
 11738                           
 11739                           ;incstack = 0
 11740                           ;BlinkOkLeds@state stored from wreg
 11741  002A06  6E1B               	movwf	BlinkOkLeds@state,c
 11742                           
 11743                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11744  002A08  0E00               	movlw	0
 11745  002A0A  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11746  002A0C  0E00               	movlw	0
 11747  002A0E  6E1C               	movwf	BlinkOkLeds@idx,c
 11748  002A10                     l6008:
 11749  002A10  501B               	movf	BlinkOkLeds@state,w,c
 11750  002A12  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11751  002A14  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11752  002A16  5018               	movf	??_BlinkOkLeds,w,c
 11753  002A18  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11754  002A1A  501D               	movf	BlinkOkLeds@idx+1,w,c
 11755  002A1C  0A80               	xorlw	128
 11756  002A1E  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11757  002A20  5019               	movf	??_BlinkOkLeds+1,w,c
 11758  002A22  0A80               	xorlw	128
 11759  002A24  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11760  002A26  B0D8               	btfsc	status,0,c
 11761  002A28  0012               	return	
 11762                           
 11763                           ;LedsApp.c: 27: {
 11764                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11765  002A2A  908B               	bcf	3979,0,c	;volatile
 11766                           
 11767                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11768  002A2C  0E02               	movlw	2
 11769  002A2E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11770  002A30  0E04               	movlw	4
 11771  002A32  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11772  002A34  0EBA               	movlw	186
 11773  002A36                     u8147:
 11774  002A36  2EE8               	decfsz	wreg,f,c
 11775  002A38  D7FE               	bra	u8147
 11776  002A3A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11777  002A3C  D7FC               	bra	u8147
 11778  002A3E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11779  002A40  D7FA               	bra	u8147
 11780  002A42  D000               	nop2	
 11781                           
 11782                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11783  002A44  808B               	bsf	3979,0,c	;volatile
 11784                           
 11785                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 11786  002A46  0E02               	movlw	2
 11787  002A48  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11788  002A4A  0E04               	movlw	4
 11789  002A4C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11790  002A4E  0EBA               	movlw	186
 11791  002A50                     u8157:
 11792  002A50  2EE8               	decfsz	wreg,f,c
 11793  002A52  D7FE               	bra	u8157
 11794  002A54  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11795  002A56  D7FC               	bra	u8157
 11796  002A58  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11797  002A5A  D7FA               	bra	u8157
 11798  002A5C  D000               	nop2	
 11799  002A5E  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 11800  002A60  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 11801  002A62  D7D6               	goto	l6008
 11802  002A64                     __end_of_BlinkOkLeds:
 11803                           	opt stack 0
 11804                           tosu	equ	0xFFF
 11805                           tosh	equ	0xFFE
 11806                           tosl	equ	0xFFD
 11807                           pclath	equ	0xFFA
 11808                           tblptru	equ	0xFF8
 11809                           tblptrh	equ	0xFF7
 11810                           tblptrl	equ	0xFF6
 11811                           tablat	equ	0xFF5
 11812                           prodh	equ	0xFF4
 11813                           prodl	equ	0xFF3
 11814                           intcon	equ	0xFF2
 11815                           intcon2	equ	0xFF1
 11816                           postinc0	equ	0xFEE
 11817                           wreg	equ	0xFE8
 11818                           indf1	equ	0xFE7
 11819                           postdec1	equ	0xFE5
 11820                           fsr1h	equ	0xFE2
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           fsr2h	equ	0xFDA
 11826                           fsr2l	equ	0xFD9
 11827                           status	equ	0xFD8
 11828                           
 11829 ;; *************** function _BlinkErrorLeds *****************
 11830 ;; Defined at:
 11831 ;;		line 13 in file "LedsApp.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;  state           1    wreg     enum E7557
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  state           1   26[COMRAM] enum E7557
 11836 ;;  idx             2   27[COMRAM] int 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  1    wreg      void 
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11846 ;;      Params:         0       0       0       0       0       0       0
 11847 ;;      Locals:         3       0       0       0       0       0       0
 11848 ;;      Temps:          3       0       0       0       0       0       0
 11849 ;;      Totals:         6       0       0       0       0       0       0
 11850 ;;Total ram usage:        6 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    3
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_main
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           	psect	text81
 11861  002A64                     __ptext81:
 11862                           	opt stack 0
 11863  002A64                     _BlinkErrorLeds:
 11864                           	opt stack 27
 11865                           
 11866                           ;incstack = 0
 11867                           ;BlinkErrorLeds@state stored from wreg
 11868  002A64  6E1B               	movwf	BlinkErrorLeds@state,c
 11869                           
 11870                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 11871  002A66  0E00               	movlw	0
 11872  002A68  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 11873  002A6A  0E00               	movlw	0
 11874  002A6C  6E1C               	movwf	BlinkErrorLeds@idx,c
 11875  002A6E                     l5996:
 11876  002A6E  501B               	movf	BlinkErrorLeds@state,w,c
 11877  002A70  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11878  002A72  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 11879  002A74  5018               	movf	??_BlinkErrorLeds,w,c
 11880  002A76  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 11881  002A78  501D               	movf	BlinkErrorLeds@idx+1,w,c
 11882  002A7A  0A80               	xorlw	128
 11883  002A7C  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 11884  002A7E  5019               	movf	??_BlinkErrorLeds+1,w,c
 11885  002A80  0A80               	xorlw	128
 11886  002A82  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 11887  002A84  B0D8               	btfsc	status,0,c
 11888  002A86  0012               	return	
 11889                           
 11890                           ;LedsApp.c: 16: {
 11891                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 11892  002A88  988A               	bcf	3978,4,c	;volatile
 11893                           
 11894                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 11895  002A8A  0E02               	movlw	2
 11896  002A8C  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11897  002A8E  0E04               	movlw	4
 11898  002A90  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11899  002A92  0EBA               	movlw	186
 11900  002A94                     u8167:
 11901  002A94  2EE8               	decfsz	wreg,f,c
 11902  002A96  D7FE               	bra	u8167
 11903  002A98  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11904  002A9A  D7FC               	bra	u8167
 11905  002A9C  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11906  002A9E  D7FA               	bra	u8167
 11907  002AA0  D000               	nop2	
 11908                           
 11909                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 11910  002AA2  888A               	bsf	3978,4,c	;volatile
 11911                           
 11912                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 11913  002AA4  0E02               	movlw	2
 11914  002AA6  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11915  002AA8  0E04               	movlw	4
 11916  002AAA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11917  002AAC  0EBA               	movlw	186
 11918  002AAE                     u8177:
 11919  002AAE  2EE8               	decfsz	wreg,f,c
 11920  002AB0  D7FE               	bra	u8177
 11921  002AB2  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11922  002AB4  D7FC               	bra	u8177
 11923  002AB6  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11924  002AB8  D7FA               	bra	u8177
 11925  002ABA  D000               	nop2	
 11926  002ABC  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 11927  002ABE  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 11928  002AC0  D7D6               	goto	l5996
 11929  002AC2                     __end_of_BlinkErrorLeds:
 11930                           	opt stack 0
 11931                           tosu	equ	0xFFF
 11932                           tosh	equ	0xFFE
 11933                           tosl	equ	0xFFD
 11934                           pclath	equ	0xFFA
 11935                           tblptru	equ	0xFF8
 11936                           tblptrh	equ	0xFF7
 11937                           tblptrl	equ	0xFF6
 11938                           tablat	equ	0xFF5
 11939                           prodh	equ	0xFF4
 11940                           prodl	equ	0xFF3
 11941                           intcon	equ	0xFF2
 11942                           intcon2	equ	0xFF1
 11943                           postinc0	equ	0xFEE
 11944                           wreg	equ	0xFE8
 11945                           indf1	equ	0xFE7
 11946                           postdec1	equ	0xFE5
 11947                           fsr1h	equ	0xFE2
 11948                           fsr1l	equ	0xFE1
 11949                           indf2	equ	0xFDF
 11950                           postinc2	equ	0xFDE
 11951                           postdec2	equ	0xFDD
 11952                           fsr2h	equ	0xFDA
 11953                           fsr2l	equ	0xFD9
 11954                           status	equ	0xFD8
 11955                           
 11956 ;; *************** function _AdcConvert *****************
 11957 ;; Defined at:
 11958 ;;		line 56 in file "AdcApp.c"
 11959 ;; Parameters:    Size  Location     Type
 11960 ;;		None
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 11963 ;;  idx             1   92[BANK0 ] unsigned char 
 11964 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 11965 ;;  adcRes          2   90[BANK0 ] unsigned int 
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  1    wreg      void 
 11968 ;; Registers used:
 11969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11975 ;;      Params:         0       0       0       0       0       0       0
 11976 ;;      Locals:         0      10       0       0       0       0       0
 11977 ;;      Temps:          0       2       0       0       0       0       0
 11978 ;;      Totals:         0      12       0       0       0       0       0
 11979 ;;Total ram usage:       12 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    8
 11982 ;; This function calls:
 11983 ;;		_ADC_GetConversion
 11984 ;;		_FlashSampleWrite
 11985 ;;		___ftdiv
 11986 ;;		___ftmul
 11987 ;;		___fttol
 11988 ;;		___lwtoft
 11989 ;;		_pow
 11990 ;; This function is called by:
 11991 ;;		_main
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           	psect	text82
 11996  001030                     __ptext82:
 11997                           	opt stack 0
 11998  001030                     _AdcConvert:
 11999                           	opt stack 22
 12000                           
 12001                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12002                           
 12003                           ;incstack = 0
 12004  001030  0E00               	movlw	0
 12005  001032  0100               	movlb	0	; () banked
 12006  001034  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12007  001036  0E00               	movlw	0
 12008  001038  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 12009                           
 12010                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12011  00103A  503C               	movf	_adcSampleMode,w,c
 12012  00103C  A4D8               	btfss	status,2,c
 12013  00103E  D073               	goto	l112
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;AdcApp.c: 64: {
 12017                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12018  001040  0E00               	movlw	0
 12019  001042  6FBC               	movwf	AdcConvert@idx& (0+255),b
 12020  001044                     l7830:
 12021                           
 12022                           ; BSR set to: 0
 12023  001044  0E06               	movlw	6
 12024  001046  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 12025  001048  D001               	goto	l113
 12026  00104A  0012               	return	
 12027  00104C                     l113:
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;AdcApp.c: 66: {
 12031                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12032                           
 12033                           ; BSR set to: 0
 12034  00104C  51BC               	movf	AdcConvert@idx& (0+255),w,b
 12035  00104E  0D01               	mullw	1
 12036  001050  0E69               	movlw	low _channelArr
 12037  001052  24F3               	addwf	prodl,w,c
 12038  001054  6EF6               	movwf	tblptrl,c
 12039  001056  0E06               	movlw	high _channelArr
 12040  001058  20F4               	addwfc	prodh,w,c
 12041  00105A  6EF7               	movwf	tblptrh,c
 12042  00105C                     	if	0	;There are less than 3 active tblptr bytes
 12043  00105C                     	endif
 12044  00105C  0008               	tblrd		*
 12045  00105E  50F5               	movf	tablat,w,c
 12046  001060  EC1E  F01A         	call	_ADC_GetConversion
 12047  001064  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12048  001068  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12049                           
 12050                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12051  00106C  0E00               	movlw	0
 12052  00106E  0100               	movlb	0	; () banked
 12053  001070  6FA3               	movwf	pow@y& (0+255),b
 12054  001072  0E20               	movlw	32
 12055  001074  6FA4               	movwf	(pow@y+1)& (0+255),b
 12056  001076  0E41               	movlw	65
 12057  001078  6FA5               	movwf	(pow@y+2)& (0+255),b
 12058  00107A  0E00               	movlw	0
 12059  00107C  6FA0               	movwf	pow@x& (0+255),b
 12060  00107E  0E00               	movlw	0
 12061  001080  6FA1               	movwf	(pow@x+1)& (0+255),b
 12062  001082  0E40               	movlw	64
 12063  001084  6FA2               	movwf	(pow@x+2)& (0+255),b
 12064  001086  EC8B  F00A         	call	_pow	;wreg free
 12065  00108A  C0A0  F0B7         	movff	?_pow,_AdcConvert$3276
 12066  00108E  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3276+1
 12067  001092  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3276+2
 12068                           
 12069                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12070  001096  0EC0               	movlw	192
 12071  001098  0100               	movlb	0	; () banked
 12072  00109A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12073  00109C  0E50               	movlw	80
 12074  00109E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12075  0010A0  0E45               	movlw	69
 12076  0010A2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12077  0010A4  C0B7  F02C         	movff	_AdcConvert$3276,___ftdiv@f2
 12078  0010A8  C0B8  F02D         	movff	_AdcConvert$3276+1,___ftdiv@f2+1
 12079  0010AC  C0B9  F02E         	movff	_AdcConvert$3276+2,___ftdiv@f2+2
 12080  0010B0  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12081  0010B4  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12082  0010B8  ECEA  F01A         	call	___lwtoft	;wreg free
 12083  0010BC  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12084  0010C0  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12085  0010C4  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12086  0010C8  ECD4  F00D         	call	___ftdiv	;wreg free
 12087  0010CC  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12088  0010D0  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12089  0010D4  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12090  0010D8  EC59  F00D         	call	___ftmul	;wreg free
 12091  0010DC  C069  F078         	movff	?___ftmul,___fttol@f1
 12092  0010E0  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12093  0010E4  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12094  0010E8  ECDD  F00C         	call	___fttol	;wreg free
 12095  0010EC  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12096  0010F0  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12097                           
 12098                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12099  0010F4  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12100  0010F8  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12101  0010FC  0100               	movlb	0	; () banked
 12102  0010FE  29BC               	incf	AdcConvert@idx& (0+255),w,b
 12103  001100  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12104  001102  EC60  F00C         	call	_FlashSampleWrite	;wreg free
 12105                           
 12106                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12107  001106  0E03               	movlw	3
 12108  001108  0100               	movlb	0	; () banked
 12109  00110A  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 12110  00110C  0E8A               	movlw	138
 12111  00110E  6FB1               	movwf	??_AdcConvert& (0+255),b
 12112  001110  0E55               	movlw	85
 12113  001112                     u8187:
 12114  001112  2EE8               	decfsz	wreg,f,c
 12115  001114  D7FE               	bra	u8187
 12116  001116  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 12117  001118  D7FC               	bra	u8187
 12118  00111A  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12119  00111C  D7FA               	bra	u8187
 12120  00111E  D000               	nop2	
 12121  001120  0100               	movlb	0	; () banked
 12122  001122  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 12123  001124  D78F               	goto	l7830
 12124  001126                     l112:
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12128                           
 12129                           ; BSR set to: 0
 12130  001126  043C               	decf	_adcSampleMode,w,c
 12131  001128  A4D8               	btfss	status,2,c
 12132  00112A  0012               	return	
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;AdcApp.c: 74: {
 12136                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12137  00112C  51D3               	movf	_channel& (0+255),w,b
 12138  00112E  0D01               	mullw	1
 12139  001130  0E69               	movlw	low _channelArr
 12140  001132  24F3               	addwf	prodl,w,c
 12141  001134  6EF6               	movwf	tblptrl,c
 12142  001136  0E06               	movlw	high _channelArr
 12143  001138  20F4               	addwfc	prodh,w,c
 12144  00113A  6EF7               	movwf	tblptrh,c
 12145  00113C                     	if	0	;There are less than 3 active tblptr bytes
 12146  00113C                     	endif
 12147  00113C  0008               	tblrd		*
 12148  00113E  50F5               	movf	tablat,w,c
 12149  001140  EC1E  F01A         	call	_ADC_GetConversion
 12150  001144  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
 12151  001148  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
 12152                           
 12153                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12154  00114C  0E00               	movlw	0
 12155  00114E  0100               	movlb	0	; () banked
 12156  001150  6FA3               	movwf	pow@y& (0+255),b
 12157  001152  0E20               	movlw	32
 12158  001154  6FA4               	movwf	(pow@y+1)& (0+255),b
 12159  001156  0E41               	movlw	65
 12160  001158  6FA5               	movwf	(pow@y+2)& (0+255),b
 12161  00115A  0E00               	movlw	0
 12162  00115C  6FA0               	movwf	pow@x& (0+255),b
 12163  00115E  0E00               	movlw	0
 12164  001160  6FA1               	movwf	(pow@x+1)& (0+255),b
 12165  001162  0E40               	movlw	64
 12166  001164  6FA2               	movwf	(pow@x+2)& (0+255),b
 12167  001166  EC8B  F00A         	call	_pow	;wreg free
 12168  00116A  C0A0  F0B7         	movff	?_pow,_AdcConvert$3276
 12169  00116E  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3276+1
 12170  001172  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3276+2
 12171                           
 12172                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12173  001176  0EC0               	movlw	192
 12174  001178  0100               	movlb	0	; () banked
 12175  00117A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12176  00117C  0E50               	movlw	80
 12177  00117E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12178  001180  0E45               	movlw	69
 12179  001182  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12180  001184  C0B7  F02C         	movff	_AdcConvert$3276,___ftdiv@f2
 12181  001188  C0B8  F02D         	movff	_AdcConvert$3276+1,___ftdiv@f2+1
 12182  00118C  C0B9  F02E         	movff	_AdcConvert$3276+2,___ftdiv@f2+2
 12183  001190  C0B5  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
 12184  001194  C0B6  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
 12185  001198  ECEA  F01A         	call	___lwtoft	;wreg free
 12186  00119C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12187  0011A0  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12188  0011A4  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12189  0011A8  ECD4  F00D         	call	___ftdiv	;wreg free
 12190  0011AC  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12191  0011B0  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12192  0011B4  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12193  0011B8  EC59  F00D         	call	___ftmul	;wreg free
 12194  0011BC  C069  F078         	movff	?___ftmul,___fttol@f1
 12195  0011C0  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12196  0011C4  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12197  0011C8  ECDD  F00C         	call	___fttol	;wreg free
 12198  0011CC  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12199  0011D0  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12200                           
 12201                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12202  0011D4  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12203  0011D8  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12204  0011DC  0E01               	movlw	1
 12205  0011DE  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12206  0011E0  EC60  F00C         	call	_FlashSampleWrite	;wreg free
 12207  0011E4  0012               	return	
 12208  0011E6                     __end_of_AdcConvert:
 12209                           	opt stack 0
 12210                           tosu	equ	0xFFF
 12211                           tosh	equ	0xFFE
 12212                           tosl	equ	0xFFD
 12213                           pclath	equ	0xFFA
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           intcon2	equ	0xFF1
 12222                           postinc0	equ	0xFEE
 12223                           wreg	equ	0xFE8
 12224                           indf1	equ	0xFE7
 12225                           postdec1	equ	0xFE5
 12226                           fsr1h	equ	0xFE2
 12227                           fsr1l	equ	0xFE1
 12228                           indf2	equ	0xFDF
 12229                           postinc2	equ	0xFDE
 12230                           postdec2	equ	0xFDD
 12231                           fsr2h	equ	0xFDA
 12232                           fsr2l	equ	0xFD9
 12233                           status	equ	0xFD8
 12234                           
 12235 ;; *************** function _pow *****************
 12236 ;; Defined at:
 12237 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;  x               3   64[BANK0 ] void 
 12240 ;;  y               3   67[BANK0 ] void 
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;  yi              4   77[BANK0 ] unsigned long 
 12243 ;;  sign            1   76[BANK0 ] unsigned char 
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  3   64[BANK0 ] unsigned char 
 12246 ;; Registers used:
 12247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12253 ;;      Params:         0       6       0       0       0       0       0
 12254 ;;      Locals:         0      11       0       0       0       0       0
 12255 ;;      Temps:          0       0       0       0       0       0       0
 12256 ;;      Totals:         0      17       0       0       0       0       0
 12257 ;;Total ram usage:       17 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    7
 12260 ;; This function calls:
 12261 ;;		___ftge
 12262 ;;		___ftmul
 12263 ;;		___ftneg
 12264 ;;		___fttol
 12265 ;;		___lltoft
 12266 ;;		_exp
 12267 ;;		_log
 12268 ;; This function is called by:
 12269 ;;		_AdcConvert
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           	psect	text83
 12274  001516                     __ptext83:
 12275                           	opt stack 0
 12276  001516                     _pow:
 12277                           	opt stack 22
 12278                           
 12279                           ;incstack = 0
 12280  001516  0E00               	movlw	0
 12281  001518  0100               	movlb	0	; () banked
 12282  00151A  6FAC               	movwf	pow@sign& (0+255),b
 12283                           
 12284                           ; BSR set to: 0
 12285  00151C  51A0               	movf	pow@x& (0+255),w,b
 12286  00151E  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12287  001520  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12288  001522  A4D8               	btfss	status,2,c
 12289  001524  D01D               	goto	l1883
 12290                           
 12291                           ; BSR set to: 0
 12292  001526  0E00               	movlw	0
 12293  001528  6E18               	movwf	___ftge@ff1,c
 12294  00152A  0E00               	movlw	0
 12295  00152C  6E19               	movwf	___ftge@ff1+1,c
 12296  00152E  0E00               	movlw	0
 12297  001530  6E1A               	movwf	___ftge@ff1+2,c
 12298  001532  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12299  001536  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12300  00153A  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12301  00153E  ECF5  F012         	call	___ftge	;wreg free
 12302  001542  A0D8               	btfss	status,0,c
 12303  001544  D005               	goto	l1884
 12304  001546  0E00               	movlw	0
 12305  001548  0100               	movlb	0	; () banked
 12306  00154A  6FC5               	movwf	(_errno+1)& (0+255),b
 12307  00154C  0E21               	movlw	33
 12308  00154E  6FC4               	movwf	_errno& (0+255),b
 12309  001550                     l1884:
 12310  001550  0E00               	movlw	0
 12311  001552  0100               	movlb	0	; () banked
 12312  001554  6FA0               	movwf	?_pow& (0+255),b
 12313  001556  0E00               	movlw	0
 12314  001558  6FA1               	movwf	(?_pow+1)& (0+255),b
 12315  00155A  0E00               	movlw	0
 12316  00155C  6FA2               	movwf	(?_pow+2)& (0+255),b
 12317                           
 12318                           ; BSR set to: 0
 12319  00155E  0012               	return	
 12320  001560                     l1883:
 12321                           
 12322                           ; BSR set to: 0
 12323                           
 12324                           ; BSR set to: 0
 12325  001560  51A3               	movf	pow@y& (0+255),w,b
 12326  001562  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12327  001564  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12328  001566  A4D8               	btfss	status,2,c
 12329  001568  D007               	goto	l1886
 12330                           
 12331                           ; BSR set to: 0
 12332  00156A  0E00               	movlw	0
 12333  00156C  6FA0               	movwf	?_pow& (0+255),b
 12334  00156E  0E80               	movlw	128
 12335  001570  6FA1               	movwf	(?_pow+1)& (0+255),b
 12336  001572  0E3F               	movlw	63
 12337  001574  6FA2               	movwf	(?_pow+2)& (0+255),b
 12338                           
 12339                           ; BSR set to: 0
 12340  001576  0012               	return	
 12341  001578                     l1886:
 12342                           
 12343                           ; BSR set to: 0
 12344                           
 12345                           ; BSR set to: 0
 12346  001578  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12347  00157A  D041               	goto	l1887
 12348                           
 12349                           ; BSR set to: 0
 12350  00157C  C0A3  F078         	movff	pow@y,___fttol@f1
 12351  001580  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12352  001584  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12353  001588  ECDD  F00C         	call	___fttol	;wreg free
 12354  00158C  C078  F0AD         	movff	?___fttol,pow@yi
 12355  001590  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12356  001594  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12357  001598  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12358  00159C  C0AD  F020         	movff	pow@yi,___lltoft@c
 12359  0015A0  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12360  0015A4  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12361  0015A8  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12362  0015AC  ECBD  F015         	call	___lltoft	;wreg free
 12363  0015B0  0100               	movlb	0	; () banked
 12364  0015B2  51A3               	movf	pow@y& (0+255),w,b
 12365  0015B4  1820               	xorwf	?___lltoft,w,c
 12366  0015B6  E107               	bnz	u7650
 12367  0015B8  51A4               	movf	(pow@y+1)& (0+255),w,b
 12368  0015BA  1821               	xorwf	?___lltoft+1,w,c
 12369  0015BC  E104               	bnz	u7650
 12370  0015BE  51A5               	movf	(pow@y+2)& (0+255),w,b
 12371  0015C0  1822               	xorwf	?___lltoft+2,w,c
 12372  0015C2  B4D8               	btfsc	status,2,c
 12373  0015C4  D00B               	goto	l1888
 12374  0015C6                     u7650:
 12375                           
 12376                           ; BSR set to: 0
 12377  0015C6  0E00               	movlw	0
 12378  0015C8  6FC5               	movwf	(_errno+1)& (0+255),b
 12379  0015CA  0E21               	movlw	33
 12380  0015CC  6FC4               	movwf	_errno& (0+255),b
 12381  0015CE  0E00               	movlw	0
 12382  0015D0  6FA0               	movwf	?_pow& (0+255),b
 12383  0015D2  0E00               	movlw	0
 12384  0015D4  6FA1               	movwf	(?_pow+1)& (0+255),b
 12385  0015D6  0E00               	movlw	0
 12386  0015D8  6FA2               	movwf	(?_pow+2)& (0+255),b
 12387                           
 12388                           ; BSR set to: 0
 12389  0015DA  0012               	return	
 12390  0015DC                     l1888:
 12391                           
 12392                           ; BSR set to: 0
 12393                           
 12394                           ; BSR set to: 0
 12395  0015DC  51AD               	movf	pow@yi& (0+255),w,b
 12396  0015DE  0B01               	andlw	1
 12397  0015E0  6FAC               	movwf	pow@sign& (0+255),b
 12398                           
 12399                           ; BSR set to: 0
 12400  0015E2  C0A0  F018         	movff	pow@x,___ftneg@f1
 12401  0015E6  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12402  0015EA  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12403  0015EE  ECD8  F01A         	call	___ftneg	;wreg free
 12404  0015F2  C018  F0A0         	movff	?___ftneg,pow@x
 12405  0015F6  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12406  0015FA  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12407  0015FE                     l1887:
 12408  0015FE  C0A0  F08E         	movff	pow@x,log@x
 12409  001602  C0A1  F08F         	movff	pow@x+1,log@x+1
 12410  001606  C0A2  F090         	movff	pow@x+2,log@x+2
 12411  00160A  EC49  F00B         	call	_log	;wreg free
 12412  00160E  C08E  F0A6         	movff	?_log,_pow$3277
 12413  001612  C08F  F0A7         	movff	?_log+1,_pow$3277+1
 12414  001616  C090  F0A8         	movff	?_log+2,_pow$3277+2
 12415  00161A  C0A6  F069         	movff	_pow$3277,___ftmul@f1
 12416  00161E  C0A7  F06A         	movff	_pow$3277+1,___ftmul@f1+1
 12417  001622  C0A8  F06B         	movff	_pow$3277+2,___ftmul@f1+2
 12418  001626  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12419  00162A  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12420  00162E  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12421  001632  EC59  F00D         	call	___ftmul	;wreg free
 12422  001636  C069  F0A9         	movff	?___ftmul,_pow$3278
 12423  00163A  C06A  F0AA         	movff	?___ftmul+1,_pow$3278+1
 12424  00163E  C06B  F0AB         	movff	?___ftmul+2,_pow$3278+2
 12425  001642  C0A9  F097         	movff	_pow$3278,exp@x
 12426  001646  C0AA  F098         	movff	_pow$3278+1,exp@x+1
 12427  00164A  C0AB  F099         	movff	_pow$3278+2,exp@x+2
 12428  00164E  EC34  F006         	call	_exp	;wreg free
 12429  001652  C097  F0A0         	movff	?_exp,pow@x
 12430  001656  C098  F0A1         	movff	?_exp+1,pow@x+1
 12431  00165A  C099  F0A2         	movff	?_exp+2,pow@x+2
 12432  00165E  0100               	movlb	0	; () banked
 12433  001660  51AC               	movf	pow@sign& (0+255),w,b
 12434  001662  B4D8               	btfsc	status,2,c
 12435  001664  D00F               	goto	l1889
 12436                           
 12437                           ; BSR set to: 0
 12438  001666  C0A0  F018         	movff	pow@x,___ftneg@f1
 12439  00166A  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12440  00166E  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12441  001672  ECD8  F01A         	call	___ftneg	;wreg free
 12442  001676  C018  F0A0         	movff	?___ftneg,?_pow
 12443  00167A  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12444  00167E  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12445  001682  0012               	return	
 12446  001684                     l1889:
 12447                           
 12448                           ; BSR set to: 0
 12449  001684  C0A0  F0A0         	movff	pow@x,?_pow
 12450  001688  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12451  00168C  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12452  001690  0012               	return		;funcret
 12453  001692                     __end_of_pow:
 12454                           	opt stack 0
 12455                           tosu	equ	0xFFF
 12456                           tosh	equ	0xFFE
 12457                           tosl	equ	0xFFD
 12458                           pclath	equ	0xFFA
 12459                           tblptru	equ	0xFF8
 12460                           tblptrh	equ	0xFF7
 12461                           tblptrl	equ	0xFF6
 12462                           tablat	equ	0xFF5
 12463                           prodh	equ	0xFF4
 12464                           prodl	equ	0xFF3
 12465                           intcon	equ	0xFF2
 12466                           intcon2	equ	0xFF1
 12467                           postinc0	equ	0xFEE
 12468                           wreg	equ	0xFE8
 12469                           indf1	equ	0xFE7
 12470                           postdec1	equ	0xFE5
 12471                           fsr1h	equ	0xFE2
 12472                           fsr1l	equ	0xFE1
 12473                           indf2	equ	0xFDF
 12474                           postinc2	equ	0xFDE
 12475                           postdec2	equ	0xFDD
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _log *****************
 12481 ;; Defined at:
 12482 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  x               3   46[BANK0 ] unsigned char 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  exponent        2   49[BANK0 ] int 
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  3   46[BANK0 ] int 
 12489 ;; Registers used:
 12490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12496 ;;      Params:         0       3       0       0       0       0       0
 12497 ;;      Locals:         0       2       0       0       0       0       0
 12498 ;;      Temps:          0       0       0       0       0       0       0
 12499 ;;      Totals:         0       5       0       0       0       0       0
 12500 ;;Total ram usage:        5 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    6
 12503 ;; This function calls:
 12504 ;;		___awtoft
 12505 ;;		___ftadd
 12506 ;;		___ftmul
 12507 ;;		_eval_poly
 12508 ;;		_frexp
 12509 ;; This function is called by:
 12510 ;;		_pow
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           	psect	text84
 12515  001692                     __ptext84:
 12516                           	opt stack 0
 12517  001692                     _log:
 12518                           	opt stack 22
 12519                           
 12520                           ;incstack = 0
 12521  001692  0100               	movlb	0	; () banked
 12522  001694  AF90               	btfss	(log@x+2)& (0+255),7,b
 12523  001696  D00B               	goto	l2145
 12524                           
 12525                           ; BSR set to: 0
 12526  001698  0E00               	movlw	0
 12527  00169A  6FC5               	movwf	(_errno+1)& (0+255),b
 12528  00169C  0E21               	movlw	33
 12529  00169E  6FC4               	movwf	_errno& (0+255),b
 12530  0016A0  0E00               	movlw	0
 12531  0016A2  6F8E               	movwf	?_log& (0+255),b
 12532  0016A4  0E00               	movlw	0
 12533  0016A6  6F8F               	movwf	(?_log+1)& (0+255),b
 12534  0016A8  0E00               	movlw	0
 12535  0016AA  6F90               	movwf	(?_log+2)& (0+255),b
 12536                           
 12537                           ; BSR set to: 0
 12538  0016AC  0012               	return	
 12539  0016AE                     l2145:
 12540                           
 12541                           ; BSR set to: 0
 12542                           
 12543                           ; BSR set to: 0
 12544  0016AE  518E               	movf	log@x& (0+255),w,b
 12545  0016B0  118F               	iorwf	(log@x+1)& (0+255),w,b
 12546  0016B2  1190               	iorwf	(log@x+2)& (0+255),w,b
 12547  0016B4  A4D8               	btfss	status,2,c
 12548  0016B6  D00B               	goto	l2147
 12549                           
 12550                           ; BSR set to: 0
 12551  0016B8  0E00               	movlw	0
 12552  0016BA  6FC5               	movwf	(_errno+1)& (0+255),b
 12553  0016BC  0E22               	movlw	34
 12554  0016BE  6FC4               	movwf	_errno& (0+255),b
 12555  0016C0  0E00               	movlw	0
 12556  0016C2  6F8E               	movwf	?_log& (0+255),b
 12557  0016C4  0E00               	movlw	0
 12558  0016C6  6F8F               	movwf	(?_log+1)& (0+255),b
 12559  0016C8  0E00               	movlw	0
 12560  0016CA  6F90               	movwf	(?_log+2)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563  0016CC  0012               	return	
 12564  0016CE                     l2147:
 12565                           
 12566                           ; BSR set to: 0
 12567                           
 12568                           ; BSR set to: 0
 12569  0016CE  0E00               	movlw	0
 12570  0016D0  6F6C               	movwf	___ftmul@f2& (0+255),b
 12571  0016D2  0E00               	movlw	0
 12572  0016D4  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12573  0016D6  0E40               	movlw	64
 12574  0016D8  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12575  0016DA  0E91               	movlw	low log@exponent
 12576  0016DC  6E1B               	movwf	frexp@eptr,c
 12577  0016DE  0E00               	movlw	high log@exponent
 12578  0016E0  6E1C               	movwf	frexp@eptr+1,c
 12579  0016E2  C08E  F018         	movff	log@x,frexp@value
 12580  0016E6  C08F  F019         	movff	log@x+1,frexp@value+1
 12581  0016EA  C090  F01A         	movff	log@x+2,frexp@value+2
 12582  0016EE  ECAD  F012         	call	_frexp	;wreg free
 12583  0016F2  C018  F069         	movff	?_frexp,___ftmul@f1
 12584  0016F6  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12585  0016FA  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12586  0016FE  EC59  F00D         	call	___ftmul	;wreg free
 12587  001702  C069  F078         	movff	?___ftmul,___ftadd@f1
 12588  001706  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12589  00170A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12590  00170E  0E00               	movlw	0
 12591  001710  0100               	movlb	0	; () banked
 12592  001712  6F7B               	movwf	___ftadd@f2& (0+255),b
 12593  001714  0E80               	movlw	128
 12594  001716  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12595  001718  0EBF               	movlw	191
 12596  00171A  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12597  00171C  ECF3  F008         	call	___ftadd	;wreg free
 12598  001720  C078  F08E         	movff	?___ftadd,log@x
 12599  001724  C079  F08F         	movff	?___ftadd+1,log@x+1
 12600  001728  C07A  F090         	movff	?___ftadd+2,log@x+2
 12601  00172C  0100               	movlb	0	; () banked
 12602  00172E  0791               	decf	log@exponent& (0+255),f,b
 12603  001730  A0D8               	btfss	status,0,c
 12604  001732  0792               	decf	(log@exponent+1)& (0+255),f,b
 12605                           
 12606                           ; BSR set to: 0
 12607  001734  C08E  F084         	movff	log@x,eval_poly@x
 12608  001738  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12609  00173C  C090  F086         	movff	log@x+2,eval_poly@x+2
 12610  001740  0E8E               	movlw	low log@coeff
 12611  001742  6F87               	movwf	eval_poly@d& (0+255),b
 12612  001744  0E06               	movlw	high log@coeff
 12613  001746  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12614  001748  0E00               	movlw	0
 12615  00174A  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12616  00174C  0E08               	movlw	8
 12617  00174E  6F89               	movwf	eval_poly@n& (0+255),b
 12618  001750  EC99  F00F         	call	_eval_poly	;wreg free
 12619  001754  C084  F08E         	movff	?_eval_poly,log@x
 12620  001758  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12621  00175C  C086  F090         	movff	?_eval_poly+2,log@x+2
 12622  001760  0E72               	movlw	114
 12623  001762  0100               	movlb	0	; () banked
 12624  001764  6F6C               	movwf	___ftmul@f2& (0+255),b
 12625  001766  0E31               	movlw	49
 12626  001768  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12627  00176A  0E3F               	movlw	63
 12628  00176C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12629  00176E  C091  F020         	movff	log@exponent,___awtoft@c
 12630  001772  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12631  001776  EC13  F019         	call	___awtoft	;wreg free
 12632  00177A  C020  F069         	movff	?___awtoft,___ftmul@f1
 12633  00177E  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12634  001782  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12635  001786  EC59  F00D         	call	___ftmul	;wreg free
 12636  00178A  C069  F078         	movff	?___ftmul,___ftadd@f1
 12637  00178E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12638  001792  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12639  001796  C08E  F07B         	movff	log@x,___ftadd@f2
 12640  00179A  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12641  00179E  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12642  0017A2  ECF3  F008         	call	___ftadd	;wreg free
 12643  0017A6  C078  F08E         	movff	?___ftadd,?_log
 12644  0017AA  C079  F08F         	movff	?___ftadd+1,?_log+1
 12645  0017AE  C07A  F090         	movff	?___ftadd+2,?_log+2
 12646  0017B2  0012               	return	
 12647  0017B4                     __end_of_log:
 12648                           	opt stack 0
 12649                           tosu	equ	0xFFF
 12650                           tosh	equ	0xFFE
 12651                           tosl	equ	0xFFD
 12652                           pclath	equ	0xFFA
 12653                           tblptru	equ	0xFF8
 12654                           tblptrh	equ	0xFF7
 12655                           tblptrl	equ	0xFF6
 12656                           tablat	equ	0xFF5
 12657                           prodh	equ	0xFF4
 12658                           prodl	equ	0xFF3
 12659                           intcon	equ	0xFF2
 12660                           intcon2	equ	0xFF1
 12661                           postinc0	equ	0xFEE
 12662                           wreg	equ	0xFE8
 12663                           indf1	equ	0xFE7
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _exp *****************
 12675 ;; Defined at:
 12676 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  x               3   55[BANK0 ] int 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  exponent        2   61[BANK0 ] int 
 12681 ;;  sign            1   63[BANK0 ] unsigned char 
 12682 ;; Return value:  Size  Location     Type
 12683 ;;                  3   55[BANK0 ] unsigned char 
 12684 ;; Registers used:
 12685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12691 ;;      Params:         0       3       0       0       0       0       0
 12692 ;;      Locals:         0       6       0       0       0       0       0
 12693 ;;      Temps:          0       0       0       0       0       0       0
 12694 ;;      Totals:         0       9       0       0       0       0       0
 12695 ;;Total ram usage:        9 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; Hardware stack levels required when called:    6
 12698 ;; This function calls:
 12699 ;;		___awtoft
 12700 ;;		___ftdiv
 12701 ;;		___ftge
 12702 ;;		___ftmul
 12703 ;;		___ftneg
 12704 ;;		___ftsub
 12705 ;;		___fttol
 12706 ;;		_eval_poly
 12707 ;;		_floor
 12708 ;;		_ldexp
 12709 ;; This function is called by:
 12710 ;;		_pow
 12711 ;; This function uses a non-reentrant model
 12712 ;;
 12713                           
 12714                           	psect	text85
 12715  000C68                     __ptext85:
 12716                           	opt stack 0
 12717  000C68                     _exp:
 12718                           	opt stack 22
 12719                           
 12720                           ;incstack = 0
 12721  000C68  0100               	movlb	0	; () banked
 12722  000C6A  5197               	movf	exp@x& (0+255),w,b
 12723  000C6C  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12724  000C6E  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12725  000C70  A4D8               	btfss	status,2,c
 12726  000C72  D007               	goto	l2081
 12727                           
 12728                           ; BSR set to: 0
 12729  000C74  0E00               	movlw	0
 12730  000C76  6F97               	movwf	?_exp& (0+255),b
 12731  000C78  0E80               	movlw	128
 12732  000C7A  6F98               	movwf	(?_exp+1)& (0+255),b
 12733  000C7C  0E3F               	movlw	63
 12734  000C7E  6F99               	movwf	(?_exp+2)& (0+255),b
 12735                           
 12736                           ; BSR set to: 0
 12737  000C80  0012               	return	
 12738  000C82                     l2081:
 12739                           
 12740                           ; BSR set to: 0
 12741                           
 12742                           ; BSR set to: 0
 12743  000C82  0E72               	movlw	114
 12744  000C84  6E18               	movwf	___ftge@ff1,c
 12745  000C86  0E31               	movlw	49
 12746  000C88  6E19               	movwf	___ftge@ff1+1,c
 12747  000C8A  0E44               	movlw	68
 12748  000C8C  6E1A               	movwf	___ftge@ff1+2,c
 12749  000C8E  C097  F01B         	movff	exp@x,___ftge@ff2
 12750  000C92  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12751  000C96  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12752  000C9A  ECF5  F012         	call	___ftge	;wreg free
 12753  000C9E  B0D8               	btfsc	status,0,c
 12754  000CA0  D00C               	goto	l2083
 12755  000CA2  0E00               	movlw	0
 12756  000CA4  0100               	movlb	0	; () banked
 12757  000CA6  6FC5               	movwf	(_errno+1)& (0+255),b
 12758  000CA8  0E22               	movlw	34
 12759  000CAA  6FC4               	movwf	_errno& (0+255),b
 12760  000CAC  0EFF               	movlw	255
 12761  000CAE  6F97               	movwf	?_exp& (0+255),b
 12762  000CB0  0E7F               	movlw	127
 12763  000CB2  6F98               	movwf	(?_exp+1)& (0+255),b
 12764  000CB4  0E7F               	movlw	127
 12765  000CB6  6F99               	movwf	(?_exp+2)& (0+255),b
 12766                           
 12767                           ; BSR set to: 0
 12768  000CB8  0012               	return	
 12769  000CBA                     l2083:
 12770                           
 12771                           ; BSR set to: 0
 12772  000CBA  C097  F018         	movff	exp@x,___ftge@ff1
 12773  000CBE  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12774  000CC2  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12775  000CC6  0E49               	movlw	73
 12776  000CC8  6E1B               	movwf	___ftge@ff2,c
 12777  000CCA  0E3A               	movlw	58
 12778  000CCC  6E1C               	movwf	___ftge@ff2+1,c
 12779  000CCE  0EC4               	movlw	196
 12780  000CD0  6E1D               	movwf	___ftge@ff2+2,c
 12781  000CD2  ECF5  F012         	call	___ftge	;wreg free
 12782  000CD6  B0D8               	btfsc	status,0,c
 12783  000CD8  D00C               	goto	l2084
 12784  000CDA  0E00               	movlw	0
 12785  000CDC  0100               	movlb	0	; () banked
 12786  000CDE  6FC5               	movwf	(_errno+1)& (0+255),b
 12787  000CE0  0E22               	movlw	34
 12788  000CE2  6FC4               	movwf	_errno& (0+255),b
 12789  000CE4  0E00               	movlw	0
 12790  000CE6  6F97               	movwf	?_exp& (0+255),b
 12791  000CE8  0E00               	movlw	0
 12792  000CEA  6F98               	movwf	(?_exp+1)& (0+255),b
 12793  000CEC  0E00               	movlw	0
 12794  000CEE  6F99               	movwf	(?_exp+2)& (0+255),b
 12795                           
 12796                           ; BSR set to: 0
 12797  000CF0  0012               	return	
 12798  000CF2                     l2084:
 12799                           
 12800                           ; BSR set to: 0
 12801  000CF2  0100               	movlb	0	; () banked
 12802  000CF4  AF99               	btfss	(exp@x+2)& (0+255),7,b
 12803  000CF6  D002               	goto	u7560
 12804  000CF8  0E01               	movlw	1
 12805  000CFA  D001               	goto	u7570
 12806  000CFC                     u7560:
 12807  000CFC  0E00               	movlw	0
 12808  000CFE                     u7570:
 12809  000CFE  6F9F               	movwf	exp@sign& (0+255),b
 12810                           
 12811                           ; BSR set to: 0
 12812  000D00  519F               	movf	exp@sign& (0+255),w,b
 12813  000D02  B4D8               	btfsc	status,2,c
 12814  000D04  D00E               	goto	l2085
 12815                           
 12816                           ; BSR set to: 0
 12817  000D06  C097  F018         	movff	exp@x,___ftneg@f1
 12818  000D0A  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 12819  000D0E  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 12820  000D12  ECD8  F01A         	call	___ftneg	;wreg free
 12821  000D16  C018  F097         	movff	?___ftneg,exp@x
 12822  000D1A  C019  F098         	movff	?___ftneg+1,exp@x+1
 12823  000D1E  C01A  F099         	movff	?___ftneg+2,exp@x+2
 12824  000D22                     l2085:
 12825  000D22  C097  F069         	movff	exp@x,___ftmul@f1
 12826  000D26  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 12827  000D2A  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 12828  000D2E  0EAA               	movlw	170
 12829  000D30  0100               	movlb	0	; () banked
 12830  000D32  6F6C               	movwf	___ftmul@f2& (0+255),b
 12831  000D34  0EB8               	movlw	184
 12832  000D36  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12833  000D38  0E3F               	movlw	63
 12834  000D3A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12835  000D3C  EC59  F00D         	call	___ftmul	;wreg free
 12836  000D40  C069  F097         	movff	?___ftmul,exp@x
 12837  000D44  C06A  F098         	movff	?___ftmul+1,exp@x+1
 12838  000D48  C06B  F099         	movff	?___ftmul+2,exp@x+2
 12839  000D4C  C097  F08F         	movff	exp@x,floor@x
 12840  000D50  C098  F090         	movff	exp@x+1,floor@x+1
 12841  000D54  C099  F091         	movff	exp@x+2,floor@x+2
 12842  000D58  ECBA  F00E         	call	_floor	;wreg free
 12843  000D5C  C08F  F09A         	movff	?_floor,_exp$3279
 12844  000D60  C090  F09B         	movff	?_floor+1,_exp$3279+1
 12845  000D64  C091  F09C         	movff	?_floor+2,_exp$3279+2
 12846  000D68  C09A  F078         	movff	_exp$3279,___fttol@f1
 12847  000D6C  C09B  F079         	movff	_exp$3279+1,___fttol@f1+1
 12848  000D70  C09C  F07A         	movff	_exp$3279+2,___fttol@f1+2
 12849  000D74  ECDD  F00C         	call	___fttol	;wreg free
 12850  000D78  C078  F09D         	movff	?___fttol,exp@exponent
 12851  000D7C  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 12852  000D80  C097  F084         	movff	exp@x,___ftsub@f1
 12853  000D84  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 12854  000D88  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 12855  000D8C  C09D  F020         	movff	exp@exponent,___awtoft@c
 12856  000D90  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 12857  000D94  EC13  F019         	call	___awtoft	;wreg free
 12858  000D98  C020  F087         	movff	?___awtoft,___ftsub@f2
 12859  000D9C  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 12860  000DA0  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 12861  000DA4  EC59  F018         	call	___ftsub	;wreg free
 12862  000DA8  C084  F097         	movff	?___ftsub,exp@x
 12863  000DAC  C085  F098         	movff	?___ftsub+1,exp@x+1
 12864  000DB0  C086  F099         	movff	?___ftsub+2,exp@x+2
 12865  000DB4  C097  F084         	movff	exp@x,eval_poly@x
 12866  000DB8  C098  F085         	movff	exp@x+1,eval_poly@x+1
 12867  000DBC  C099  F086         	movff	exp@x+2,eval_poly@x+2
 12868  000DC0  0E70               	movlw	low exp@coeff
 12869  000DC2  0100               	movlb	0	; () banked
 12870  000DC4  6F87               	movwf	eval_poly@d& (0+255),b
 12871  000DC6  0E06               	movlw	high exp@coeff
 12872  000DC8  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12873  000DCA  0E00               	movlw	0
 12874  000DCC  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12875  000DCE  0E09               	movlw	9
 12876  000DD0  6F89               	movwf	eval_poly@n& (0+255),b
 12877  000DD2  EC99  F00F         	call	_eval_poly	;wreg free
 12878  000DD6  C084  F08E         	movff	?_eval_poly,ldexp@value
 12879  000DDA  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 12880  000DDE  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 12881  000DE2  C09D  F091         	movff	exp@exponent,ldexp@newexp
 12882  000DE6  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 12883  000DEA  EC04  F010         	call	_ldexp	;wreg free
 12884  000DEE  C08E  F097         	movff	?_ldexp,exp@x
 12885  000DF2  C08F  F098         	movff	?_ldexp+1,exp@x+1
 12886  000DF6  C090  F099         	movff	?_ldexp+2,exp@x+2
 12887  000DFA  0100               	movlb	0	; () banked
 12888  000DFC  519F               	movf	exp@sign& (0+255),w,b
 12889  000DFE  B4D8               	btfsc	status,2,c
 12890  000E00  D025               	goto	l2086
 12891                           
 12892                           ; BSR set to: 0
 12893  000E02  2997               	incf	exp@x& (0+255),w,b
 12894  000E04  E10E               	bnz	l7616
 12895  000E06  0E7F               	movlw	127
 12896  000E08  1998               	xorwf	(exp@x+1)& (0+255),w,b
 12897  000E0A  E10B               	bnz	l7616
 12898  000E0C  0E7F               	movlw	127
 12899  000E0E  1999               	xorwf	(exp@x+2)& (0+255),w,b
 12900  000E10  A4D8               	btfss	status,2,c
 12901  000E12  D007               	goto	l2087
 12902                           
 12903                           ; BSR set to: 0
 12904  000E14  0E00               	movlw	0
 12905  000E16  6F97               	movwf	?_exp& (0+255),b
 12906  000E18  0E00               	movlw	0
 12907  000E1A  6F98               	movwf	(?_exp+1)& (0+255),b
 12908  000E1C  0E00               	movlw	0
 12909  000E1E  6F99               	movwf	(?_exp+2)& (0+255),b
 12910                           
 12911                           ; BSR set to: 0
 12912  000E20  0012               	return	
 12913  000E22                     l2087:
 12914  000E22                     l7616:
 12915                           
 12916                           ; BSR set to: 0
 12917  000E22  0E00               	movlw	0
 12918  000E24  6E29               	movwf	___ftdiv@f1,c
 12919  000E26  0E80               	movlw	128
 12920  000E28  6E2A               	movwf	___ftdiv@f1+1,c
 12921  000E2A  0E3F               	movlw	63
 12922  000E2C  6E2B               	movwf	___ftdiv@f1+2,c
 12923  000E2E  C097  F02C         	movff	exp@x,___ftdiv@f2
 12924  000E32  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 12925  000E36  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 12926  000E3A  ECD4  F00D         	call	___ftdiv	;wreg free
 12927  000E3E  C029  F097         	movff	?___ftdiv,?_exp
 12928  000E42  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 12929  000E46  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 12930  000E4A  0012               	return	
 12931  000E4C                     l2086:
 12932                           
 12933                           ; BSR set to: 0
 12934  000E4C  C097  F097         	movff	exp@x,?_exp
 12935  000E50  C098  F098         	movff	exp@x+1,?_exp+1
 12936  000E54  C099  F099         	movff	exp@x+2,?_exp+2
 12937  000E58  0012               	return		;funcret
 12938  000E5A                     __end_of_exp:
 12939                           	opt stack 0
 12940                           tosu	equ	0xFFF
 12941                           tosh	equ	0xFFE
 12942                           tosl	equ	0xFFD
 12943                           pclath	equ	0xFFA
 12944                           tblptru	equ	0xFF8
 12945                           tblptrh	equ	0xFF7
 12946                           tblptrl	equ	0xFF6
 12947                           tablat	equ	0xFF5
 12948                           prodh	equ	0xFF4
 12949                           prodl	equ	0xFF3
 12950                           intcon	equ	0xFF2
 12951                           intcon2	equ	0xFF1
 12952                           postinc0	equ	0xFEE
 12953                           wreg	equ	0xFE8
 12954                           indf1	equ	0xFE7
 12955                           postdec1	equ	0xFE5
 12956                           fsr1h	equ	0xFE2
 12957                           fsr1l	equ	0xFE1
 12958                           indf2	equ	0xFDF
 12959                           postinc2	equ	0xFDE
 12960                           postdec2	equ	0xFDD
 12961                           fsr2h	equ	0xFDA
 12962                           fsr2l	equ	0xFD9
 12963                           status	equ	0xFD8
 12964                           
 12965 ;; *************** function _ldexp *****************
 12966 ;; Defined at:
 12967 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  value           3   46[BANK0 ] unsigned char 
 12970 ;;  newexp          2   49[BANK0 ] int 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;		None
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  3   46[BANK0 ] int 
 12975 ;; Registers used:
 12976 ;;		wreg, status,2, status,0
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12982 ;;      Params:         0       5       0       0       0       0       0
 12983 ;;      Locals:         0       0       0       0       0       0       0
 12984 ;;      Temps:          0       2       0       0       0       0       0
 12985 ;;      Totals:         0       7       0       0       0       0       0
 12986 ;;Total ram usage:        7 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    3
 12989 ;; This function calls:
 12990 ;;		Nothing
 12991 ;; This function is called by:
 12992 ;;		_exp
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           	psect	text86
 12997  002008                     __ptext86:
 12998                           	opt stack 0
 12999  002008                     _ldexp:
 13000                           	opt stack 24
 13001                           
 13002                           ;incstack = 0
 13003  002008  0100               	movlb	0	; () banked
 13004  00200A  518E               	movf	ldexp@value& (0+255),w,b
 13005  00200C  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 13006  00200E  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 13007  002010  A4D8               	btfss	status,2,c
 13008  002012  D007               	goto	l2105
 13009                           
 13010                           ; BSR set to: 0
 13011  002014  0E00               	movlw	0
 13012  002016  6F8E               	movwf	?_ldexp& (0+255),b
 13013  002018  0E00               	movlw	0
 13014  00201A  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13015  00201C  0E00               	movlw	0
 13016  00201E  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13017                           
 13018                           ; BSR set to: 0
 13019  002020  0012               	return	
 13020  002022                     l2105:
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ; BSR set to: 0
 13025  002022  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13026  002024  0B7F               	andlw	127
 13027  002026  6F93               	movwf	??_ldexp& (0+255),b
 13028  002028  6B94               	clrf	(??_ldexp+1)& (0+255),b
 13029  00202A  90D8               	bcf	status,0,c
 13030  00202C  3793               	rlcf	??_ldexp& (0+255),f,b
 13031  00202E  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 13032  002030  5193               	movf	??_ldexp& (0+255),w,b
 13033  002032  2791               	addwf	ldexp@newexp& (0+255),f,b
 13034  002034  5194               	movf	(??_ldexp+1)& (0+255),w,b
 13035  002036  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13036  002038  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 13037  00203A  D003               	goto	u4370
 13038  00203C  6B93               	clrf	??_ldexp& (0+255),b
 13039  00203E  2B93               	incf	??_ldexp& (0+255),f,b
 13040  002040  D002               	goto	u4378
 13041  002042                     u4370:
 13042  002042  0100               	movlb	0	; () banked
 13043  002044  6B93               	clrf	??_ldexp& (0+255),b
 13044  002046                     u4378:
 13045  002046  5193               	movf	??_ldexp& (0+255),w,b
 13046  002048  2791               	addwf	ldexp@newexp& (0+255),f,b
 13047  00204A  0E00               	movlw	0
 13048  00204C  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13049  00204E  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13050  002050  D00B               	goto	l2107
 13051                           
 13052                           ; BSR set to: 0
 13053  002052  0E00               	movlw	0
 13054  002054  6FC5               	movwf	(_errno+1)& (0+255),b
 13055  002056  0E22               	movlw	34
 13056  002058  6FC4               	movwf	_errno& (0+255),b
 13057  00205A  0E00               	movlw	0
 13058  00205C  6F8E               	movwf	?_ldexp& (0+255),b
 13059  00205E  0E00               	movlw	0
 13060  002060  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13061  002062  0E00               	movlw	0
 13062  002064                     L1:
 13063  002064  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13064                           
 13065                           ; BSR set to: 0
 13066  002066  0012               	return	
 13067  002068                     l2107:
 13068                           
 13069                           ; BSR set to: 0
 13070                           
 13071                           ; BSR set to: 0
 13072  002068  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13073  00206A  D015               	goto	l2109
 13074  00206C  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 13075  00206E  A0D8               	btfss	status,0,c
 13076  002070  D012               	goto	l2109
 13077                           
 13078                           ; BSR set to: 0
 13079  002072  0E00               	movlw	0
 13080  002074  6FC5               	movwf	(_errno+1)& (0+255),b
 13081  002076  0E22               	movlw	34
 13082  002078  6FC4               	movwf	_errno& (0+255),b
 13083                           
 13084                           ; BSR set to: 0
 13085  00207A  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 13086  00207C  D006               	goto	l2110
 13087                           
 13088                           ; BSR set to: 0
 13089  00207E  0EFF               	movlw	255
 13090  002080  6F8E               	movwf	?_ldexp& (0+255),b
 13091  002082  0E7F               	movlw	127
 13092  002084  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13093  002086  0EFF               	movlw	255
 13094  002088  D7ED               	goto	L1
 13095  00208A                     l2110:
 13096                           
 13097                           ; BSR set to: 0
 13098                           
 13099                           ; BSR set to: 0
 13100  00208A  0EFF               	movlw	255
 13101  00208C  6F8E               	movwf	?_ldexp& (0+255),b
 13102  00208E  0E7F               	movlw	127
 13103  002090  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13104  002092  0E7F               	movlw	127
 13105  002094  D7E7               	goto	L1
 13106  002096                     l2109:
 13107                           
 13108                           ; BSR set to: 0
 13109                           
 13110                           ; BSR set to: 0
 13111  002096  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13112  002098  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13113  00209A  6F94               	movwf	(??_ldexp+1)& (0+255),b
 13114  00209C  3191               	rrcf	ldexp@newexp& (0+255),w,b
 13115  00209E  6F93               	movwf	??_ldexp& (0+255),b
 13116  0020A0  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13117  0020A2  1993               	xorwf	??_ldexp& (0+255),w,b
 13118  0020A4  0B80               	andlw	-128
 13119  0020A6  1993               	xorwf	??_ldexp& (0+255),w,b
 13120  0020A8  6F90               	movwf	(ldexp@value+2)& (0+255),b
 13121  0020AA  C091  F093         	movff	ldexp@newexp,??_ldexp
 13122  0020AE  0E01               	movlw	1
 13123  0020B0  1793               	andwf	??_ldexp& (0+255),f,b
 13124  0020B2  3393               	rrcf	??_ldexp& (0+255),f,b
 13125  0020B4  3393               	rrcf	??_ldexp& (0+255),f,b
 13126  0020B6  518F               	movf	(ldexp@value+1)& (0+255),w,b
 13127  0020B8  1993               	xorwf	??_ldexp& (0+255),w,b
 13128  0020BA  0B7F               	andlw	-129
 13129  0020BC  1993               	xorwf	??_ldexp& (0+255),w,b
 13130  0020BE  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 13131                           
 13132                           ; BSR set to: 0
 13133                           
 13134                           ; BSR set to: 0
 13135                           
 13136                           ; BSR set to: 0
 13137  0020C0  C08E  F08E         	movff	ldexp@value,?_ldexp
 13138  0020C4  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 13139  0020C8  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 13140  0020CC  0012               	return	
 13141  0020CE                     __end_of_ldexp:
 13142                           	opt stack 0
 13143                           tosu	equ	0xFFF
 13144                           tosh	equ	0xFFE
 13145                           tosl	equ	0xFFD
 13146                           pclath	equ	0xFFA
 13147                           tblptru	equ	0xFF8
 13148                           tblptrh	equ	0xFF7
 13149                           tblptrl	equ	0xFF6
 13150                           tablat	equ	0xFF5
 13151                           prodh	equ	0xFF4
 13152                           prodl	equ	0xFF3
 13153                           intcon	equ	0xFF2
 13154                           intcon2	equ	0xFF1
 13155                           postinc0	equ	0xFEE
 13156                           wreg	equ	0xFE8
 13157                           indf1	equ	0xFE7
 13158                           postdec1	equ	0xFE5
 13159                           fsr1h	equ	0xFE2
 13160                           fsr1l	equ	0xFE1
 13161                           indf2	equ	0xFDF
 13162                           postinc2	equ	0xFDE
 13163                           postdec2	equ	0xFDD
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function _floor *****************
 13169 ;; Defined at:
 13170 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  x               3   47[BANK0 ] int 
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;  i               3   50[BANK0 ] int 
 13175 ;;  expon           2   53[BANK0 ] int 
 13176 ;; Return value:  Size  Location     Type
 13177 ;;                  3   47[BANK0 ] int 
 13178 ;; Registers used:
 13179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13180 ;; Tracked objects:
 13181 ;;		On entry : 0/0
 13182 ;;		On exit  : 0/0
 13183 ;;		Unchanged: 0/0
 13184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13185 ;;      Params:         0       3       0       0       0       0       0
 13186 ;;      Locals:         0       5       0       0       0       0       0
 13187 ;;      Temps:          0       0       0       0       0       0       0
 13188 ;;      Totals:         0       8       0       0       0       0       0
 13189 ;;Total ram usage:        8 bytes
 13190 ;; Hardware stack levels used:    1
 13191 ;; Hardware stack levels required when called:    5
 13192 ;; This function calls:
 13193 ;;		___altoft
 13194 ;;		___ftadd
 13195 ;;		___ftge
 13196 ;;		___fttol
 13197 ;;		_frexp
 13198 ;; This function is called by:
 13199 ;;		_exp
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           	psect	text87
 13204  001D74                     __ptext87:
 13205                           	opt stack 0
 13206  001D74                     _floor:
 13207                           	opt stack 22
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;incstack = 0
 13211  001D74  C08F  F018         	movff	floor@x,frexp@value
 13212  001D78  C090  F019         	movff	floor@x+1,frexp@value+1
 13213  001D7C  C091  F01A         	movff	floor@x+2,frexp@value+2
 13214  001D80  0E95               	movlw	low floor@expon
 13215  001D82  6E1B               	movwf	frexp@eptr,c
 13216  001D84  0E00               	movlw	high floor@expon
 13217  001D86  6E1C               	movwf	frexp@eptr+1,c
 13218  001D88  ECAD  F012         	call	_frexp	;wreg free
 13219  001D8C  0100               	movlb	0	; () banked
 13220  001D8E  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13221  001D90  D010               	goto	l2092
 13222                           
 13223                           ; BSR set to: 0
 13224  001D92  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13225  001D94  D007               	goto	l2093
 13226                           
 13227                           ; BSR set to: 0
 13228  001D96  0E00               	movlw	0
 13229  001D98  6F8F               	movwf	?_floor& (0+255),b
 13230  001D9A  0E80               	movlw	128
 13231  001D9C  6F90               	movwf	(?_floor+1)& (0+255),b
 13232  001D9E  0EBF               	movlw	191
 13233  001DA0  6F91               	movwf	(?_floor+2)& (0+255),b
 13234                           
 13235                           ; BSR set to: 0
 13236  001DA2  0012               	return	
 13237  001DA4                     l2093:
 13238                           
 13239                           ; BSR set to: 0
 13240                           
 13241                           ; BSR set to: 0
 13242  001DA4  0E00               	movlw	0
 13243  001DA6  6F8F               	movwf	?_floor& (0+255),b
 13244  001DA8  0E00               	movlw	0
 13245  001DAA  6F90               	movwf	(?_floor+1)& (0+255),b
 13246  001DAC  0E00               	movlw	0
 13247  001DAE  6F91               	movwf	(?_floor+2)& (0+255),b
 13248                           
 13249                           ; BSR set to: 0
 13250  001DB0  0012               	return	
 13251  001DB2                     l2092:
 13252                           
 13253                           ; BSR set to: 0
 13254                           
 13255                           ; BSR set to: 0
 13256  001DB2  5196               	movf	(floor@expon+1)& (0+255),w,b
 13257  001DB4  E104               	bnz	u7060
 13258  001DB6  0E15               	movlw	21
 13259  001DB8  5D95               	subwf	floor@expon& (0+255),w,b
 13260  001DBA  A0D8               	btfss	status,0,c
 13261  001DBC  D007               	goto	l2095
 13262  001DBE                     u7060:
 13263                           
 13264                           ; BSR set to: 0
 13265  001DBE  C08F  F08F         	movff	floor@x,?_floor
 13266  001DC2  C090  F090         	movff	floor@x+1,?_floor+1
 13267  001DC6  C091  F091         	movff	floor@x+2,?_floor+2
 13268  001DCA  0012               	return	
 13269  001DCC                     l2095:
 13270                           
 13271                           ; BSR set to: 0
 13272                           
 13273                           ; BSR set to: 0
 13274  001DCC  C08F  F078         	movff	floor@x,___fttol@f1
 13275  001DD0  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13276  001DD4  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13277  001DD8  ECDD  F00C         	call	___fttol	;wreg free
 13278  001DDC  C078  F087         	movff	?___fttol,___altoft@c
 13279  001DE0  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13280  001DE4  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13281  001DE8  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13282  001DEC  ECBF  F013         	call	___altoft	;wreg free
 13283  001DF0  C087  F092         	movff	?___altoft,floor@i
 13284  001DF4  C088  F093         	movff	?___altoft+1,floor@i+1
 13285  001DF8  C089  F094         	movff	?___altoft+2,floor@i+2
 13286  001DFC  C08F  F018         	movff	floor@x,___ftge@ff1
 13287  001E00  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13288  001E04  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13289  001E08  C092  F01B         	movff	floor@i,___ftge@ff2
 13290  001E0C  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13291  001E10  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13292  001E14  ECF5  F012         	call	___ftge	;wreg free
 13293  001E18  B0D8               	btfsc	status,0,c
 13294  001E1A  D016               	goto	l2096
 13295  001E1C  C092  F078         	movff	floor@i,___ftadd@f1
 13296  001E20  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13297  001E24  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13298  001E28  0E00               	movlw	0
 13299  001E2A  0100               	movlb	0	; () banked
 13300  001E2C  6F7B               	movwf	___ftadd@f2& (0+255),b
 13301  001E2E  0E80               	movlw	128
 13302  001E30  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13303  001E32  0EBF               	movlw	191
 13304  001E34  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13305  001E36  ECF3  F008         	call	___ftadd	;wreg free
 13306  001E3A  C078  F08F         	movff	?___ftadd,?_floor
 13307  001E3E  C079  F090         	movff	?___ftadd+1,?_floor+1
 13308  001E42  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13309  001E46  0012               	return	
 13310  001E48                     l2096:
 13311  001E48  C092  F08F         	movff	floor@i,?_floor
 13312  001E4C  C093  F090         	movff	floor@i+1,?_floor+1
 13313  001E50  C094  F091         	movff	floor@i+2,?_floor+2
 13314  001E54  0012               	return		;funcret
 13315  001E56                     __end_of_floor:
 13316                           	opt stack 0
 13317                           tosu	equ	0xFFF
 13318                           tosh	equ	0xFFE
 13319                           tosl	equ	0xFFD
 13320                           pclath	equ	0xFFA
 13321                           tblptru	equ	0xFF8
 13322                           tblptrh	equ	0xFF7
 13323                           tblptrl	equ	0xFF6
 13324                           tablat	equ	0xFF5
 13325                           prodh	equ	0xFF4
 13326                           prodl	equ	0xFF3
 13327                           intcon	equ	0xFF2
 13328                           intcon2	equ	0xFF1
 13329                           postinc0	equ	0xFEE
 13330                           wreg	equ	0xFE8
 13331                           indf1	equ	0xFE7
 13332                           postdec1	equ	0xFE5
 13333                           fsr1h	equ	0xFE2
 13334                           fsr1l	equ	0xFE1
 13335                           indf2	equ	0xFDF
 13336                           postinc2	equ	0xFDE
 13337                           postdec2	equ	0xFDD
 13338                           fsr2h	equ	0xFDA
 13339                           fsr2l	equ	0xFD9
 13340                           status	equ	0xFD8
 13341                           
 13342 ;; *************** function _frexp *****************
 13343 ;; Defined at:
 13344 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13345 ;; Parameters:    Size  Location     Type
 13346 ;;  value           3   23[COMRAM] int 
 13347 ;;  eptr            2   26[COMRAM] PTR int 
 13348 ;;		 -> log@exponent(2), floor@expon(2), 
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;		None
 13351 ;; Return value:  Size  Location     Type
 13352 ;;                  3   23[COMRAM] PTR int 
 13353 ;; Registers used:
 13354 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13355 ;; Tracked objects:
 13356 ;;		On entry : 0/0
 13357 ;;		On exit  : 0/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13360 ;;      Params:         5       0       0       0       0       0       0
 13361 ;;      Locals:         0       0       0       0       0       0       0
 13362 ;;      Temps:          2       0       0       0       0       0       0
 13363 ;;      Totals:         7       0       0       0       0       0       0
 13364 ;;Total ram usage:        7 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; Hardware stack levels required when called:    3
 13367 ;; This function calls:
 13368 ;;		Nothing
 13369 ;; This function is called by:
 13370 ;;		_floor
 13371 ;;		_log
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374                           
 13375                           	psect	text88
 13376  00255A                     __ptext88:
 13377                           	opt stack 0
 13378  00255A                     _frexp:
 13379                           	opt stack 24
 13380                           
 13381                           ;incstack = 0
 13382  00255A  5018               	movf	frexp@value,w,c
 13383  00255C  1019               	iorwf	frexp@value+1,w,c
 13384  00255E  101A               	iorwf	frexp@value+2,w,c
 13385  002560  A4D8               	btfss	status,2,c
 13386  002562  D00F               	goto	l2101
 13387  002564  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13388  002568  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13389  00256C  0E00               	movlw	0
 13390  00256E  6EDE               	movwf	postinc2,c
 13391  002570  0E00               	movlw	0
 13392  002572  6EDD               	movwf	postdec2,c
 13393  002574  0E00               	movlw	0
 13394  002576  6E18               	movwf	?_frexp,c
 13395  002578  0E00               	movlw	0
 13396  00257A  6E19               	movwf	?_frexp+1,c
 13397  00257C  0E00               	movlw	0
 13398  00257E  6E1A               	movwf	?_frexp+2,c
 13399  002580  0012               	return	
 13400  002582                     l2101:
 13401  002582  501A               	movf	frexp@value+2,w,c
 13402  002584  0B7F               	andlw	127
 13403  002586  6E1D               	movwf	??_frexp& (0+255),c
 13404  002588  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13405  00258A  90D8               	bcf	status,0,c
 13406  00258C  361D               	rlcf	??_frexp,f,c
 13407  00258E  361E               	rlcf	??_frexp+1,f,c
 13408  002590  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13409  002594  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13410  002598  C01D  FFDE         	movff	??_frexp,postinc2
 13411  00259C  C01E  FFDD         	movff	??_frexp+1,postdec2
 13412  0025A0  AE19               	btfss	frexp@value+1,7,c
 13413  0025A2  D003               	goto	u3980
 13414  0025A4  6A1D               	clrf	??_frexp& (0+255),c
 13415  0025A6  2A1D               	incf	??_frexp& (0+255),f,c
 13416  0025A8  D001               	goto	u3988
 13417  0025AA                     u3980:
 13418  0025AA  6A1D               	clrf	??_frexp& (0+255),c
 13419  0025AC                     u3988:
 13420  0025AC  501D               	movf	??_frexp,w,c
 13421  0025AE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13422  0025B2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13423  0025B6  12DE               	iorwf	postinc2,f,c
 13424  0025B8  0E00               	movlw	0
 13425  0025BA  12DD               	iorwf	postdec2,f,c
 13426  0025BC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13427  0025C0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13428  0025C4  0E82               	movlw	130
 13429  0025C6  26DE               	addwf	postinc2,f,c
 13430  0025C8  0EFF               	movlw	255
 13431  0025CA  22DD               	addwfc	postdec2,f,c
 13432  0025CC  801A               	bsf	frexp@value+2,0,c
 13433  0025CE  821A               	bsf	frexp@value+2,1,c
 13434  0025D0  841A               	bsf	frexp@value+2,2,c
 13435  0025D2  861A               	bsf	frexp@value+2,3,c
 13436  0025D4  881A               	bsf	frexp@value+2,4,c
 13437  0025D6  8A1A               	bsf	frexp@value+2,5,c
 13438  0025D8  9C1A               	bcf	frexp@value+2,6,c
 13439  0025DA  9E19               	bcf	frexp@value+1,7,c
 13440  0025DC  C018  F018         	movff	frexp@value,?_frexp
 13441  0025E0  C019  F019         	movff	frexp@value+1,?_frexp+1
 13442  0025E4  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13443  0025E8  0012               	return	
 13444  0025EA                     __end_of_frexp:
 13445                           	opt stack 0
 13446                           tosu	equ	0xFFF
 13447                           tosh	equ	0xFFE
 13448                           tosl	equ	0xFFD
 13449                           pclath	equ	0xFFA
 13450                           tblptru	equ	0xFF8
 13451                           tblptrh	equ	0xFF7
 13452                           tblptrl	equ	0xFF6
 13453                           tablat	equ	0xFF5
 13454                           prodh	equ	0xFF4
 13455                           prodl	equ	0xFF3
 13456                           intcon	equ	0xFF2
 13457                           intcon2	equ	0xFF1
 13458                           postinc0	equ	0xFEE
 13459                           wreg	equ	0xFE8
 13460                           indf1	equ	0xFE7
 13461                           postdec1	equ	0xFE5
 13462                           fsr1h	equ	0xFE2
 13463                           fsr1l	equ	0xFE1
 13464                           indf2	equ	0xFDF
 13465                           postinc2	equ	0xFDE
 13466                           postdec2	equ	0xFDD
 13467                           fsr2h	equ	0xFDA
 13468                           fsr2l	equ	0xFD9
 13469                           status	equ	0xFD8
 13470                           
 13471 ;; *************** function ___fttol *****************
 13472 ;; Defined at:
 13473 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13474 ;; Parameters:    Size  Location     Type
 13475 ;;  f1              3   24[BANK0 ] float 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;  lval            4   34[BANK0 ] unsigned long 
 13478 ;;  exp1            1   38[BANK0 ] unsigned char 
 13479 ;;  sign1           1   33[BANK0 ] unsigned char 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  4   24[BANK0 ] long 
 13482 ;; Registers used:
 13483 ;;		wreg, status,2, status,0
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13489 ;;      Params:         0       4       0       0       0       0       0
 13490 ;;      Locals:         0       6       0       0       0       0       0
 13491 ;;      Temps:          0       5       0       0       0       0       0
 13492 ;;      Totals:         0      15       0       0       0       0       0
 13493 ;;Total ram usage:       15 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    3
 13496 ;; This function calls:
 13497 ;;		Nothing
 13498 ;; This function is called by:
 13499 ;;		_AdcConvert
 13500 ;;		_pow
 13501 ;;		_exp
 13502 ;;		_floor
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text89
 13507  0019BA                     __ptext89:
 13508                           	opt stack 0
 13509  0019BA                     ___fttol:
 13510                           	opt stack 23
 13511                           
 13512                           ;incstack = 0
 13513  0019BA  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13514  0019BE  0100               	movlb	0	; () banked
 13515  0019C0  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13516  0019C2  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13517  0019C4  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13518  0019C6  377C               	rlcf	??___fttol& (0+255),f,b
 13519  0019C8  E301               	bnc	u3891
 13520  0019CA  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13521  0019CC                     u3891:
 13522  0019CC  517C               	movf	??___fttol& (0+255),w,b
 13523  0019CE  6F86               	movwf	___fttol@exp1& (0+255),b
 13524  0019D0  5186               	movf	___fttol@exp1& (0+255),w,b
 13525  0019D2  A4D8               	btfss	status,2,c
 13526  0019D4  D009               	goto	l1758
 13527                           
 13528                           ; BSR set to: 0
 13529  0019D6  0E00               	movlw	0
 13530  0019D8  6F78               	movwf	?___fttol& (0+255),b
 13531  0019DA  0E00               	movlw	0
 13532  0019DC  6F79               	movwf	(?___fttol+1)& (0+255),b
 13533  0019DE  0E00               	movlw	0
 13534  0019E0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13535  0019E2  0E00               	movlw	0
 13536  0019E4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13537                           
 13538                           ; BSR set to: 0
 13539  0019E6  0012               	return	
 13540  0019E8                     l1758:
 13541                           
 13542                           ; BSR set to: 0
 13543                           
 13544                           ; BSR set to: 0
 13545  0019E8  0E17               	movlw	23
 13546  0019EA  6F7C               	movwf	??___fttol& (0+255),b
 13547  0019EC  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13548  0019F0  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13549  0019F4  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13550  0019F8  297C               	incf	??___fttol& (0+255),w,b
 13551  0019FA  6F80               	movwf	(??___fttol+4)& (0+255),b
 13552  0019FC  D004               	goto	u3910
 13553  0019FE                     u3915:
 13554  0019FE  90D8               	bcf	status,0,c
 13555  001A00  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13556  001A02  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13557  001A04  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13558  001A06                     u3910:
 13559  001A06  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13560  001A08  D7FA               	goto	u3915
 13561  001A0A  0100               	movlb	0	; () banked
 13562  001A0C  517D               	movf	(??___fttol+1)& (0+255),w,b
 13563  001A0E  6F81               	movwf	___fttol@sign1& (0+255),b
 13564                           
 13565                           ; BSR set to: 0
 13566  001A10  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13567                           
 13568                           ; BSR set to: 0
 13569  001A12  0EFF               	movlw	255
 13570  001A14  1778               	andwf	___fttol@f1& (0+255),f,b
 13571  001A16  0EFF               	movlw	255
 13572  001A18  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13573  001A1A  0E00               	movlw	0
 13574  001A1C  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13575                           
 13576                           ; BSR set to: 0
 13577  001A1E  5178               	movf	___fttol@f1& (0+255),w,b
 13578  001A20  6F82               	movwf	___fttol@lval& (0+255),b
 13579  001A22  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13580  001A24  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13581  001A26  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13582  001A28  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13583  001A2A  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13584                           
 13585                           ; BSR set to: 0
 13586  001A2C  0E8E               	movlw	142
 13587  001A2E  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13588                           
 13589                           ; BSR set to: 0
 13590  001A30  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13591  001A32  D016               	goto	l1760
 13592                           
 13593                           ; BSR set to: 0
 13594  001A34  5186               	movf	___fttol@exp1& (0+255),w,b
 13595  001A36  0A80               	xorlw	128
 13596  001A38  0F8F               	addlw	143
 13597  001A3A  B0D8               	btfsc	status,0,c
 13598  001A3C  D009               	goto	l1761
 13599                           
 13600                           ; BSR set to: 0
 13601  001A3E  0E00               	movlw	0
 13602  001A40  6F78               	movwf	?___fttol& (0+255),b
 13603  001A42  0E00               	movlw	0
 13604  001A44  6F79               	movwf	(?___fttol+1)& (0+255),b
 13605  001A46  0E00               	movlw	0
 13606  001A48  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13607  001A4A  0E00               	movlw	0
 13608  001A4C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13609                           
 13610                           ; BSR set to: 0
 13611  001A4E  0012               	return	
 13612  001A50                     l1761:
 13613                           
 13614                           ; BSR set to: 0
 13615                           
 13616                           ; BSR set to: 0
 13617                           
 13618                           ; BSR set to: 0
 13619  001A50  90D8               	bcf	status,0,c
 13620  001A52  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13621  001A54  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13622  001A56  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13623  001A58  3382               	rrcf	___fttol@lval& (0+255),f,b
 13624                           
 13625                           ; BSR set to: 0
 13626  001A5A  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13627  001A5C  D7F9               	goto	l1761
 13628                           
 13629                           ; BSR set to: 0
 13630  001A5E  D015               	goto	u3950
 13631  001A60                     l1760:
 13632                           
 13633                           ; BSR set to: 0
 13634                           
 13635                           ; BSR set to: 0
 13636  001A60  0E17               	movlw	23
 13637  001A62  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13638  001A64  D00F               	goto	l1766
 13639                           
 13640                           ; BSR set to: 0
 13641  001A66  0E00               	movlw	0
 13642  001A68  6F78               	movwf	?___fttol& (0+255),b
 13643  001A6A  0E00               	movlw	0
 13644  001A6C  6F79               	movwf	(?___fttol+1)& (0+255),b
 13645  001A6E  0E00               	movlw	0
 13646  001A70  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13647  001A72  0E00               	movlw	0
 13648  001A74  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13649                           
 13650                           ; BSR set to: 0
 13651  001A76  0012               	return	
 13652  001A78                     
 13653                           ; BSR set to: 0
 13654                           
 13655                           ; BSR set to: 0
 13656  001A78  90D8               	bcf	status,0,c
 13657  001A7A  3782               	rlcf	___fttol@lval& (0+255),f,b
 13658  001A7C  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13659  001A7E  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13660  001A80  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13661  001A82  0786               	decf	___fttol@exp1& (0+255),f,b
 13662  001A84                     l1766:
 13663                           
 13664                           ; BSR set to: 0
 13665                           
 13666                           ; BSR set to: 0
 13667  001A84  5186               	movf	___fttol@exp1& (0+255),w,b
 13668  001A86  A4D8               	btfss	status,2,c
 13669  001A88  D7F7               	goto	l1767
 13670  001A8A                     u3950:
 13671                           
 13672                           ; BSR set to: 0
 13673                           
 13674                           ; BSR set to: 0
 13675                           
 13676                           ; BSR set to: 0
 13677  001A8A  5181               	movf	___fttol@sign1& (0+255),w,b
 13678  001A8C  B4D8               	btfsc	status,2,c
 13679  001A8E  D008               	goto	l1769
 13680                           
 13681                           ; BSR set to: 0
 13682  001A90  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13683  001A92  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13684  001A94  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13685  001A96  6D82               	negf	___fttol@lval& (0+255),b
 13686  001A98  0E00               	movlw	0
 13687  001A9A  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13688  001A9C  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13689  001A9E  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13690  001AA0                     l1769:
 13691                           
 13692                           ; BSR set to: 0
 13693                           
 13694                           ; BSR set to: 0
 13695  001AA0  C082  F078         	movff	___fttol@lval,?___fttol
 13696  001AA4  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13697  001AA8  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13698  001AAC  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13699  001AB0  0012               	return	
 13700  001AB2                     __end_of___fttol:
 13701                           	opt stack 0
 13702                           tosu	equ	0xFFF
 13703                           tosh	equ	0xFFE
 13704                           tosl	equ	0xFFD
 13705                           pclath	equ	0xFFA
 13706                           tblptru	equ	0xFF8
 13707                           tblptrh	equ	0xFF7
 13708                           tblptrl	equ	0xFF6
 13709                           tablat	equ	0xFF5
 13710                           prodh	equ	0xFF4
 13711                           prodl	equ	0xFF3
 13712                           intcon	equ	0xFF2
 13713                           intcon2	equ	0xFF1
 13714                           postinc0	equ	0xFEE
 13715                           wreg	equ	0xFE8
 13716                           indf1	equ	0xFE7
 13717                           postdec1	equ	0xFE5
 13718                           fsr1h	equ	0xFE2
 13719                           fsr1l	equ	0xFE1
 13720                           indf2	equ	0xFDF
 13721                           postinc2	equ	0xFDE
 13722                           postdec2	equ	0xFDD
 13723                           fsr2h	equ	0xFDA
 13724                           fsr2l	equ	0xFD9
 13725                           status	equ	0xFD8
 13726                           
 13727 ;; *************** function ___ftge *****************
 13728 ;; Defined at:
 13729 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13730 ;; Parameters:    Size  Location     Type
 13731 ;;  ff1             3   23[COMRAM] float 
 13732 ;;  ff2             3   26[COMRAM] float 
 13733 ;; Auto vars:     Size  Location     Type
 13734 ;;		None
 13735 ;; Return value:  Size  Location     Type
 13736 ;;		None               void
 13737 ;; Registers used:
 13738 ;;		wreg, status,2, status,0
 13739 ;; Tracked objects:
 13740 ;;		On entry : 0/0
 13741 ;;		On exit  : 0/0
 13742 ;;		Unchanged: 0/0
 13743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13744 ;;      Params:         6       0       0       0       0       0       0
 13745 ;;      Locals:         0       0       0       0       0       0       0
 13746 ;;      Temps:          3       0       0       0       0       0       0
 13747 ;;      Totals:         9       0       0       0       0       0       0
 13748 ;;Total ram usage:        9 bytes
 13749 ;; Hardware stack levels used:    1
 13750 ;; Hardware stack levels required when called:    3
 13751 ;; This function calls:
 13752 ;;		Nothing
 13753 ;; This function is called by:
 13754 ;;		_CheckFlashPrecentage
 13755 ;;		_pow
 13756 ;;		_exp
 13757 ;;		_floor
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text90
 13762  0025EA                     __ptext90:
 13763                           	opt stack 0
 13764  0025EA                     ___ftge:
 13765                           	opt stack 26
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;incstack = 0
 13769  0025EA  AE1A               	btfss	___ftge@ff1+2,7,c
 13770  0025EC  D016               	goto	l1730
 13771  0025EE  C018  F01E         	movff	___ftge@ff1,??___ftge
 13772  0025F2  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13773  0025F6  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13774  0025FA  1E1E               	comf	??___ftge,f,c
 13775  0025FC  1E1F               	comf	??___ftge+1,f,c
 13776  0025FE  1E20               	comf	??___ftge+2,f,c
 13777  002600  2A1E               	incf	??___ftge,f,c
 13778  002602  0E00               	movlw	0
 13779  002604  221F               	addwfc	??___ftge+1,f,c
 13780  002606  2220               	addwfc	??___ftge+2,f,c
 13781  002608  0E00               	movlw	0
 13782  00260A  241E               	addwf	??___ftge,w,c
 13783  00260C  6E18               	movwf	___ftge@ff1,c
 13784  00260E  0E00               	movlw	0
 13785  002610  201F               	addwfc	??___ftge+1,w,c
 13786  002612  6E19               	movwf	___ftge@ff1+1,c
 13787  002614  0E80               	movlw	128
 13788  002616  2020               	addwfc	??___ftge+2,w,c
 13789  002618  6E1A               	movwf	___ftge@ff1+2,c
 13790  00261A                     l1730:
 13791  00261A  AE1D               	btfss	___ftge@ff2+2,7,c
 13792  00261C  D016               	goto	l1731
 13793  00261E  C01B  F01E         	movff	___ftge@ff2,??___ftge
 13794  002622  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 13795  002626  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 13796  00262A  1E1E               	comf	??___ftge,f,c
 13797  00262C  1E1F               	comf	??___ftge+1,f,c
 13798  00262E  1E20               	comf	??___ftge+2,f,c
 13799  002630  2A1E               	incf	??___ftge,f,c
 13800  002632  0E00               	movlw	0
 13801  002634  221F               	addwfc	??___ftge+1,f,c
 13802  002636  2220               	addwfc	??___ftge+2,f,c
 13803  002638  0E00               	movlw	0
 13804  00263A  241E               	addwf	??___ftge,w,c
 13805  00263C  6E1B               	movwf	___ftge@ff2,c
 13806  00263E  0E00               	movlw	0
 13807  002640  201F               	addwfc	??___ftge+1,w,c
 13808  002642  6E1C               	movwf	___ftge@ff2+1,c
 13809  002644  0E80               	movlw	128
 13810  002646  2020               	addwfc	??___ftge+2,w,c
 13811  002648  6E1D               	movwf	___ftge@ff2+2,c
 13812  00264A                     l1731:
 13813  00264A  0E00               	movlw	0
 13814  00264C  1A18               	xorwf	___ftge@ff1,f,c
 13815  00264E  0E00               	movlw	0
 13816  002650  1A19               	xorwf	___ftge@ff1+1,f,c
 13817  002652  0E80               	movlw	128
 13818  002654  1A1A               	xorwf	___ftge@ff1+2,f,c
 13819  002656  0E00               	movlw	0
 13820  002658  1A1B               	xorwf	___ftge@ff2,f,c
 13821  00265A  0E00               	movlw	0
 13822  00265C  1A1C               	xorwf	___ftge@ff2+1,f,c
 13823  00265E  0E80               	movlw	128
 13824  002660  1A1D               	xorwf	___ftge@ff2+2,f,c
 13825  002662  501B               	movf	___ftge@ff2,w,c
 13826  002664  5C18               	subwf	___ftge@ff1,w,c
 13827  002666  501C               	movf	___ftge@ff2+1,w,c
 13828  002668  5819               	subwfb	___ftge@ff1+1,w,c
 13829  00266A  501D               	movf	___ftge@ff2+2,w,c
 13830  00266C  581A               	subwfb	___ftge@ff1+2,w,c
 13831  00266E  B0D8               	btfsc	status,0,c
 13832  002670  D002               	goto	l4392
 13833  002672  90D8               	bcf	status,0,c
 13834  002674  0012               	return	
 13835  002676                     l4392:
 13836  002676  80D8               	bsf	status,0,c
 13837  002678  0012               	return	
 13838  00267A                     __end_of___ftge:
 13839                           	opt stack 0
 13840                           tosu	equ	0xFFF
 13841                           tosh	equ	0xFFE
 13842                           tosl	equ	0xFFD
 13843                           pclath	equ	0xFFA
 13844                           tblptru	equ	0xFF8
 13845                           tblptrh	equ	0xFF7
 13846                           tblptrl	equ	0xFF6
 13847                           tablat	equ	0xFF5
 13848                           prodh	equ	0xFF4
 13849                           prodl	equ	0xFF3
 13850                           intcon	equ	0xFF2
 13851                           intcon2	equ	0xFF1
 13852                           postinc0	equ	0xFEE
 13853                           wreg	equ	0xFE8
 13854                           indf1	equ	0xFE7
 13855                           postdec1	equ	0xFE5
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function ___altoft *****************
 13866 ;; Defined at:
 13867 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  c               4   39[BANK0 ] long 
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  sign            1   47[COMRAM] unsigned char 
 13872 ;;  exp             1   46[COMRAM] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  3   39[BANK0 ] float 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0, cstack
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13882 ;;      Params:         0       4       0       0       0       0       0
 13883 ;;      Locals:         2       0       0       0       0       0       0
 13884 ;;      Temps:          0       4       0       0       0       0       0
 13885 ;;      Totals:         2       8       0       0       0       0       0
 13886 ;;Total ram usage:       10 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    4
 13889 ;; This function calls:
 13890 ;;		___ftpack
 13891 ;; This function is called by:
 13892 ;;		_floor
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text91
 13897  00277E                     __ptext91:
 13898                           	opt stack 0
 13899  00277E                     ___altoft:
 13900                           	opt stack 22
 13901                           
 13902                           ;incstack = 0
 13903  00277E  0E00               	movlw	0
 13904  002780  6E30               	movwf	___altoft@sign,c
 13905  002782  0E8E               	movlw	142
 13906  002784  6E2F               	movwf	___altoft@exp,c
 13907  002786  0100               	movlb	0	; () banked
 13908  002788  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 13909  00278A  D011               	goto	l1528
 13910                           
 13911                           ; BSR set to: 0
 13912  00278C  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 13913  00278E  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 13914  002790  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 13915  002792  6D87               	negf	___altoft@c& (0+255),b
 13916  002794  0E00               	movlw	0
 13917  002796  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 13918  002798  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 13919  00279A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 13920                           
 13921                           ; BSR set to: 0
 13922  00279C  0E01               	movlw	1
 13923  00279E  6E30               	movwf	___altoft@sign,c
 13924                           
 13925                           ; BSR set to: 0
 13926  0027A0  D006               	goto	l1528
 13927  0027A2                     
 13928                           ; BSR set to: 0
 13929                           
 13930                           ; BSR set to: 0
 13931  0027A2  90D8               	bcf	status,0,c
 13932  0027A4  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 13933  0027A6  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 13934  0027A8  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 13935  0027AA  3387               	rrcf	___altoft@c& (0+255),f,b
 13936  0027AC  2A2F               	incf	___altoft@exp,f,c
 13937  0027AE                     l1528:
 13938                           
 13939                           ; BSR set to: 0
 13940                           
 13941                           ; BSR set to: 0
 13942  0027AE  0E00               	movlw	0
 13943  0027B0  1587               	andwf	___altoft@c& (0+255),w,b
 13944  0027B2  6F8B               	movwf	??___altoft& (0+255),b
 13945  0027B4  0E00               	movlw	0
 13946  0027B6  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 13947  0027B8  6F8C               	movwf	(??___altoft+1)& (0+255),b
 13948  0027BA  0E00               	movlw	0
 13949  0027BC  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 13950  0027BE  6F8D               	movwf	(??___altoft+2)& (0+255),b
 13951  0027C0  0EFF               	movlw	255
 13952  0027C2  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 13953  0027C4  6F8E               	movwf	(??___altoft+3)& (0+255),b
 13954  0027C6  518B               	movf	??___altoft& (0+255),w,b
 13955  0027C8  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 13956  0027CA  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 13957  0027CC  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 13958  0027CE  A4D8               	btfss	status,2,c
 13959  0027D0  D7E8               	goto	l1529
 13960                           
 13961                           ; BSR set to: 0
 13962                           
 13963                           ; BSR set to: 0
 13964  0027D2  C087  F018         	movff	___altoft@c,___ftpack@arg
 13965  0027D6  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 13966  0027DA  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 13967  0027DE  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 13968  0027E2  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 13969  0027E6  EC78  F011         	call	___ftpack	;wreg free
 13970  0027EA  C018  F087         	movff	?___ftpack,?___altoft
 13971  0027EE  C019  F088         	movff	?___ftpack+1,?___altoft+1
 13972  0027F2  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 13973  0027F6  0012               	return	
 13974  0027F8                     __end_of___altoft:
 13975                           	opt stack 0
 13976                           tosu	equ	0xFFF
 13977                           tosh	equ	0xFFE
 13978                           tosl	equ	0xFFD
 13979                           pclath	equ	0xFFA
 13980                           tblptru	equ	0xFF8
 13981                           tblptrh	equ	0xFF7
 13982                           tblptrl	equ	0xFF6
 13983                           tablat	equ	0xFF5
 13984                           prodh	equ	0xFF4
 13985                           prodl	equ	0xFF3
 13986                           intcon	equ	0xFF2
 13987                           intcon2	equ	0xFF1
 13988                           postinc0	equ	0xFEE
 13989                           wreg	equ	0xFE8
 13990                           indf1	equ	0xFE7
 13991                           postdec1	equ	0xFE5
 13992                           fsr1h	equ	0xFE2
 13993                           fsr1l	equ	0xFE1
 13994                           indf2	equ	0xFDF
 13995                           postinc2	equ	0xFDE
 13996                           postdec2	equ	0xFDD
 13997                           fsr2h	equ	0xFDA
 13998                           fsr2l	equ	0xFD9
 13999                           status	equ	0xFD8
 14000                           
 14001 ;; *************** function _eval_poly *****************
 14002 ;; Defined at:
 14003 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14004 ;; Parameters:    Size  Location     Type
 14005 ;;  x               3   36[BANK0 ] float 
 14006 ;;  d               2   39[BANK0 ] PTR const 
 14007 ;;		 -> log@coeff(27), exp@coeff(30), 
 14008 ;;  n               2   41[BANK0 ] int 
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;  res             3   43[BANK0 ] int 
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  3   36[BANK0 ] int 
 14013 ;; Registers used:
 14014 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : 0/0
 14017 ;;		On exit  : 0/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14020 ;;      Params:         0       7       0       0       0       0       0
 14021 ;;      Locals:         0       3       0       0       0       0       0
 14022 ;;      Temps:          2       0       0       0       0       0       0
 14023 ;;      Totals:         2      10       0       0       0       0       0
 14024 ;;Total ram usage:       12 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:    5
 14027 ;; This function calls:
 14028 ;;		___ftadd
 14029 ;;		___ftmul
 14030 ;;		___wmul
 14031 ;; This function is called by:
 14032 ;;		_exp
 14033 ;;		_log
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text92
 14038  001F32                     __ptext92:
 14039                           	opt stack 0
 14040  001F32                     _eval_poly:
 14041                           	opt stack 22
 14042                           
 14043                           ;incstack = 0
 14044  001F32  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14045  001F36  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14046  001F3A  0E00               	movlw	0
 14047  001F3C  6E1B               	movwf	___wmul@multiplicand+1,c
 14048  001F3E  0E03               	movlw	3
 14049  001F40  6E1A               	movwf	___wmul@multiplicand,c
 14050  001F42  ECC5  F01A         	call	___wmul	;wreg free
 14051  001F46  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14052  001F4A  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14053  001F4E  5018               	movf	?___wmul,w,c
 14054  001F50  262F               	addwf	??_eval_poly,f,c
 14055  001F52  5019               	movf	?___wmul+1,w,c
 14056  001F54  2230               	addwfc	??_eval_poly+1,f,c
 14057  001F56  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14058  001F5A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14059  001F5E                     	if	0	;tblptru may be non-zero
 14060  001F5E                     	endif
 14061  001F5E                     	if	0	;tblptru may be non-zero
 14062  001F5E                     	endif
 14063  001F5E  0009               	tblrd		*+
 14064  001F60  CFF5 F08B          	movff	tablat,eval_poly@res
 14065  001F64  0009               	tblrd		*+
 14066  001F66  CFF5 F08C          	movff	tablat,eval_poly@res+1
 14067  001F6A  000A               	tblrd		*-
 14068  001F6C  CFF5 F08D          	movff	tablat,eval_poly@res+2
 14069  001F70  D03F               	goto	l2153
 14070  001F72  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 14071  001F76  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 14072  001F7A  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 14073  001F7E  C084  F069         	movff	eval_poly@x,___ftmul@f1
 14074  001F82  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 14075  001F86  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 14076  001F8A  EC59  F00D         	call	___ftmul	;wreg free
 14077  001F8E  C069  F078         	movff	?___ftmul,___ftadd@f1
 14078  001F92  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14079  001F96  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14080  001F9A  0E00               	movlw	0
 14081  001F9C  6E1B               	movwf	___wmul@multiplicand+1,c
 14082  001F9E  0E03               	movlw	3
 14083  001FA0  6E1A               	movwf	___wmul@multiplicand,c
 14084  001FA2  0100               	movlb	0	; () banked
 14085  001FA4  0789               	decf	eval_poly@n& (0+255),f,b
 14086  001FA6  A0D8               	btfss	status,0,c
 14087  001FA8  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 14088  001FAA  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14089  001FAE  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14090  001FB2  ECC5  F01A         	call	___wmul	;wreg free
 14091  001FB6  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14092  001FBA  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14093  001FBE  5018               	movf	?___wmul,w,c
 14094  001FC0  262F               	addwf	??_eval_poly,f,c
 14095  001FC2  5019               	movf	?___wmul+1,w,c
 14096  001FC4  2230               	addwfc	??_eval_poly+1,f,c
 14097  001FC6  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14098  001FCA  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14099  001FCE                     	if	0	;tblptru may be non-zero
 14100  001FCE                     	endif
 14101  001FCE                     	if	0	;tblptru may be non-zero
 14102  001FCE                     	endif
 14103  001FCE  0009               	tblrd		*+
 14104  001FD0  CFF5 F07B          	movff	tablat,___ftadd@f2
 14105  001FD4  0009               	tblrd		*+
 14106  001FD6  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 14107  001FDA  000A               	tblrd		*-
 14108  001FDC  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 14109  001FE0  ECF3  F008         	call	___ftadd	;wreg free
 14110  001FE4  C078  F08B         	movff	?___ftadd,eval_poly@res
 14111  001FE8  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 14112  001FEC  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 14113  001FF0                     l2153:
 14114  001FF0  0100               	movlb	0	; () banked
 14115  001FF2  5189               	movf	eval_poly@n& (0+255),w,b
 14116  001FF4  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14117  001FF6  A4D8               	btfss	status,2,c
 14118  001FF8  D7BC               	goto	l2154
 14119                           
 14120                           ; BSR set to: 0
 14121  001FFA  C08B  F084         	movff	eval_poly@res,?_eval_poly
 14122  001FFE  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14123  002002  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14124                           
 14125                           ; BSR set to: 0
 14126  002006  0012               	return		;funcret
 14127  002008                     __end_of_eval_poly:
 14128                           	opt stack 0
 14129                           tosu	equ	0xFFF
 14130                           tosh	equ	0xFFE
 14131                           tosl	equ	0xFFD
 14132                           pclath	equ	0xFFA
 14133                           tblptru	equ	0xFF8
 14134                           tblptrh	equ	0xFF7
 14135                           tblptrl	equ	0xFF6
 14136                           tablat	equ	0xFF5
 14137                           prodh	equ	0xFF4
 14138                           prodl	equ	0xFF3
 14139                           intcon	equ	0xFF2
 14140                           intcon2	equ	0xFF1
 14141                           postinc0	equ	0xFEE
 14142                           wreg	equ	0xFE8
 14143                           indf1	equ	0xFE7
 14144                           postdec1	equ	0xFE5
 14145                           fsr1h	equ	0xFE2
 14146                           fsr1l	equ	0xFE1
 14147                           indf2	equ	0xFDF
 14148                           postinc2	equ	0xFDE
 14149                           postdec2	equ	0xFDD
 14150                           fsr2h	equ	0xFDA
 14151                           fsr2l	equ	0xFD9
 14152                           status	equ	0xFD8
 14153                           
 14154 ;; *************** function ___wmul *****************
 14155 ;; Defined at:
 14156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;  multiplier      2   23[COMRAM] unsigned int 
 14159 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;  product         2   27[COMRAM] unsigned int 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  2   23[COMRAM] unsigned int 
 14164 ;; Registers used:
 14165 ;;		wreg, status,2, status,0, prodl, prodh
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14171 ;;      Params:         4       0       0       0       0       0       0
 14172 ;;      Locals:         2       0       0       0       0       0       0
 14173 ;;      Temps:          0       0       0       0       0       0       0
 14174 ;;      Totals:         6       0       0       0       0       0       0
 14175 ;;Total ram usage:        6 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    3
 14178 ;; This function calls:
 14179 ;;		Nothing
 14180 ;; This function is called by:
 14181 ;;		_eval_poly
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           	psect	text93
 14186  00358A                     __ptext93:
 14187                           	opt stack 0
 14188  00358A                     ___wmul:
 14189                           	opt stack 23
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;incstack = 0
 14193  00358A  5018               	movf	___wmul@multiplier,w,c
 14194  00358C  021A               	mulwf	___wmul@multiplicand,c
 14195  00358E  CFF3 F01C          	movff	prodl,___wmul@product
 14196  003592  CFF4 F01D          	movff	prodh,___wmul@product+1
 14197  003596  5018               	movf	___wmul@multiplier,w,c
 14198  003598  021B               	mulwf	___wmul@multiplicand+1,c
 14199  00359A  50F3               	movf	prodl,w,c
 14200  00359C  261D               	addwf	___wmul@product+1,f,c
 14201  00359E  5019               	movf	___wmul@multiplier+1,w,c
 14202  0035A0  021A               	mulwf	___wmul@multiplicand,c
 14203  0035A2  50F3               	movf	prodl,w,c
 14204  0035A4  261D               	addwf	___wmul@product+1,f,c
 14205  0035A6  C01C  F018         	movff	___wmul@product,?___wmul
 14206  0035AA  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14207  0035AE  0012               	return	
 14208  0035B0                     __end_of___wmul:
 14209                           	opt stack 0
 14210                           tosu	equ	0xFFF
 14211                           tosh	equ	0xFFE
 14212                           tosl	equ	0xFFD
 14213                           pclath	equ	0xFFA
 14214                           tblptru	equ	0xFF8
 14215                           tblptrh	equ	0xFF7
 14216                           tblptrl	equ	0xFF6
 14217                           tablat	equ	0xFF5
 14218                           prodh	equ	0xFF4
 14219                           prodl	equ	0xFF3
 14220                           intcon	equ	0xFF2
 14221                           intcon2	equ	0xFF1
 14222                           postinc0	equ	0xFEE
 14223                           wreg	equ	0xFE8
 14224                           indf1	equ	0xFE7
 14225                           postdec1	equ	0xFE5
 14226                           fsr1h	equ	0xFE2
 14227                           fsr1l	equ	0xFE1
 14228                           indf2	equ	0xFDF
 14229                           postinc2	equ	0xFDE
 14230                           postdec2	equ	0xFDD
 14231                           fsr2h	equ	0xFDA
 14232                           fsr2l	equ	0xFD9
 14233                           status	equ	0xFD8
 14234                           
 14235 ;; *************** function ___ftmul *****************
 14236 ;; Defined at:
 14237 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;  f1              3    9[BANK0 ] float 
 14240 ;;  f2              3   12[BANK0 ] float 
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14243 ;;  sign            1   23[BANK0 ] unsigned char 
 14244 ;;  cntr            1   22[BANK0 ] unsigned char 
 14245 ;;  exp             1   18[BANK0 ] unsigned char 
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  3    9[BANK0 ] float 
 14248 ;; Registers used:
 14249 ;;		wreg, status,2, status,0, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14255 ;;      Params:         0       6       0       0       0       0       0
 14256 ;;      Locals:         0       6       0       0       0       0       0
 14257 ;;      Temps:          0       3       0       0       0       0       0
 14258 ;;      Totals:         0      15       0       0       0       0       0
 14259 ;;Total ram usage:       15 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    4
 14262 ;; This function calls:
 14263 ;;		___ftpack
 14264 ;; This function is called by:
 14265 ;;		_AdcConvert
 14266 ;;		_CheckFlashPrecentage
 14267 ;;		_pow
 14268 ;;		_exp
 14269 ;;		_log
 14270 ;;		_eval_poly
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           	psect	text94
 14275  001AB2                     __ptext94:
 14276                           	opt stack 0
 14277  001AB2                     ___ftmul:
 14278                           	opt stack 25
 14279                           
 14280                           ;incstack = 0
 14281  001AB2  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14282  001AB6  0100               	movlb	0	; () banked
 14283  001AB8  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14284  001ABA  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14285  001ABC  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14286  001ABE  376F               	rlcf	??___ftmul& (0+255),f,b
 14287  001AC0  E301               	bnc	u6671
 14288  001AC2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14289  001AC4                     u6671:
 14290  001AC4  516F               	movf	??___ftmul& (0+255),w,b
 14291  001AC6  6F72               	movwf	___ftmul@exp& (0+255),b
 14292  001AC8  5172               	movf	___ftmul@exp& (0+255),w,b
 14293  001ACA  A4D8               	btfss	status,2,c
 14294  001ACC  D007               	goto	l1737
 14295                           
 14296                           ; BSR set to: 0
 14297  001ACE  0E00               	movlw	0
 14298  001AD0  6F69               	movwf	?___ftmul& (0+255),b
 14299  001AD2  0E00               	movlw	0
 14300  001AD4  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14301  001AD6  0E00               	movlw	0
 14302  001AD8  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14303                           
 14304                           ; BSR set to: 0
 14305  001ADA  0012               	return	
 14306  001ADC                     l1737:
 14307                           
 14308                           ; BSR set to: 0
 14309                           
 14310                           ; BSR set to: 0
 14311  001ADC  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14312  001AE0  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14313  001AE2  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14314  001AE4  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14315  001AE6  376F               	rlcf	??___ftmul& (0+255),f,b
 14316  001AE8  E301               	bnc	u6691
 14317  001AEA  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14318  001AEC                     u6691:
 14319  001AEC  516F               	movf	??___ftmul& (0+255),w,b
 14320  001AEE  6F77               	movwf	___ftmul@sign& (0+255),b
 14321  001AF0  5177               	movf	___ftmul@sign& (0+255),w,b
 14322  001AF2  A4D8               	btfss	status,2,c
 14323  001AF4  D007               	goto	l1739
 14324                           
 14325                           ; BSR set to: 0
 14326  001AF6  0E00               	movlw	0
 14327  001AF8  6F69               	movwf	?___ftmul& (0+255),b
 14328  001AFA  0E00               	movlw	0
 14329  001AFC  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14330  001AFE  0E00               	movlw	0
 14331  001B00  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14332                           
 14333                           ; BSR set to: 0
 14334  001B02  0012               	return	
 14335  001B04                     l1739:
 14336                           
 14337                           ; BSR set to: 0
 14338                           
 14339                           ; BSR set to: 0
 14340  001B04  5177               	movf	___ftmul@sign& (0+255),w,b
 14341  001B06  0F7B               	addlw	123
 14342  001B08  2772               	addwf	___ftmul@exp& (0+255),f,b
 14343                           
 14344                           ; BSR set to: 0
 14345  001B0A  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14346  001B0E  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14347  001B10  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14348  001B12  0E80               	movlw	128
 14349  001B14  1777               	andwf	___ftmul@sign& (0+255),f,b
 14350                           
 14351                           ; BSR set to: 0
 14352  001B16  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14353                           
 14354                           ; BSR set to: 0
 14355  001B18  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14356                           
 14357                           ; BSR set to: 0
 14358  001B1A  0EFF               	movlw	255
 14359  001B1C  176C               	andwf	___ftmul@f2& (0+255),f,b
 14360  001B1E  0EFF               	movlw	255
 14361  001B20  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14362  001B22  0E00               	movlw	0
 14363  001B24  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14364                           
 14365                           ; BSR set to: 0
 14366  001B26  0E00               	movlw	0
 14367  001B28  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14368  001B2A  0E00               	movlw	0
 14369  001B2C  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14370  001B2E  0E00               	movlw	0
 14371  001B30  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14372                           
 14373                           ; BSR set to: 0
 14374  001B32  0E07               	movlw	7
 14375  001B34  6F76               	movwf	___ftmul@cntr& (0+255),b
 14376  001B36                     
 14377                           ; BSR set to: 0
 14378                           
 14379                           ; BSR set to: 0
 14380  001B36  A169               	btfss	___ftmul@f1& (0+255),0,b
 14381  001B38  D006               	goto	l1741
 14382                           
 14383                           ; BSR set to: 0
 14384  001B3A  516C               	movf	___ftmul@f2& (0+255),w,b
 14385  001B3C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14386  001B3E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14387  001B40  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14388  001B42  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14389  001B44  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14390  001B46                     l1741:
 14391                           
 14392                           ; BSR set to: 0
 14393                           
 14394                           ; BSR set to: 0
 14395  001B46  90D8               	bcf	status,0,c
 14396  001B48  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14397  001B4A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14398  001B4C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14399  001B4E  90D8               	bcf	status,0,c
 14400  001B50  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14401  001B52  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14402  001B54  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14403                           
 14404                           ; BSR set to: 0
 14405  001B56  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14406  001B58  D7EE               	goto	l1740
 14407                           
 14408                           ; BSR set to: 0
 14409                           
 14410                           ; BSR set to: 0
 14411  001B5A  0E09               	movlw	9
 14412  001B5C  6F76               	movwf	___ftmul@cntr& (0+255),b
 14413  001B5E                     
 14414                           ; BSR set to: 0
 14415                           
 14416                           ; BSR set to: 0
 14417  001B5E  A169               	btfss	___ftmul@f1& (0+255),0,b
 14418  001B60  D006               	goto	l1744
 14419                           
 14420                           ; BSR set to: 0
 14421  001B62  516C               	movf	___ftmul@f2& (0+255),w,b
 14422  001B64  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14423  001B66  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14424  001B68  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14425  001B6A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14426  001B6C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14427  001B6E                     l1744:
 14428                           
 14429                           ; BSR set to: 0
 14430                           
 14431                           ; BSR set to: 0
 14432  001B6E  90D8               	bcf	status,0,c
 14433  001B70  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14434  001B72  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14435  001B74  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14436  001B76  90D8               	bcf	status,0,c
 14437  001B78  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14438  001B7A  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14439  001B7C  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14440                           
 14441                           ; BSR set to: 0
 14442  001B7E  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14443  001B80  D7EE               	goto	l1743
 14444                           
 14445                           ; BSR set to: 0
 14446                           
 14447                           ; BSR set to: 0
 14448  001B82  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14449  001B86  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14450  001B8A  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14451  001B8E  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14452  001B92  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14453  001B96  EC78  F011         	call	___ftpack	;wreg free
 14454  001B9A  C018  F069         	movff	?___ftpack,?___ftmul
 14455  001B9E  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14456  001BA2  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14457  001BA6  0012               	return	
 14458  001BA8                     __end_of___ftmul:
 14459                           	opt stack 0
 14460                           tosu	equ	0xFFF
 14461                           tosh	equ	0xFFE
 14462                           tosl	equ	0xFFD
 14463                           pclath	equ	0xFFA
 14464                           tblptru	equ	0xFF8
 14465                           tblptrh	equ	0xFF7
 14466                           tblptrl	equ	0xFF6
 14467                           tablat	equ	0xFF5
 14468                           prodh	equ	0xFF4
 14469                           prodl	equ	0xFF3
 14470                           intcon	equ	0xFF2
 14471                           intcon2	equ	0xFF1
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           indf1	equ	0xFE7
 14475                           postdec1	equ	0xFE5
 14476                           fsr1h	equ	0xFE2
 14477                           fsr1l	equ	0xFE1
 14478                           indf2	equ	0xFDF
 14479                           postinc2	equ	0xFDE
 14480                           postdec2	equ	0xFDD
 14481                           fsr2h	equ	0xFDA
 14482                           fsr2l	equ	0xFD9
 14483                           status	equ	0xFD8
 14484                           
 14485 ;; *************** function ___ftsub *****************
 14486 ;; Defined at:
 14487 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14488 ;; Parameters:    Size  Location     Type
 14489 ;;  f1              3   36[BANK0 ] float 
 14490 ;;  f2              3   39[BANK0 ] float 
 14491 ;; Auto vars:     Size  Location     Type
 14492 ;;		None
 14493 ;; Return value:  Size  Location     Type
 14494 ;;                  3   36[BANK0 ] float 
 14495 ;; Registers used:
 14496 ;;		wreg, status,2, status,0, cstack
 14497 ;; Tracked objects:
 14498 ;;		On entry : 0/0
 14499 ;;		On exit  : 0/0
 14500 ;;		Unchanged: 0/0
 14501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14502 ;;      Params:         0       6       0       0       0       0       0
 14503 ;;      Locals:         0       0       0       0       0       0       0
 14504 ;;      Temps:          0       0       0       0       0       0       0
 14505 ;;      Totals:         0       6       0       0       0       0       0
 14506 ;;Total ram usage:        6 bytes
 14507 ;; Hardware stack levels used:    1
 14508 ;; Hardware stack levels required when called:    5
 14509 ;; This function calls:
 14510 ;;		___ftadd
 14511 ;; This function is called by:
 14512 ;;		_exp
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           	psect	text95
 14517  0030B2                     __ptext95:
 14518                           	opt stack 0
 14519  0030B2                     ___ftsub:
 14520                           	opt stack 22
 14521                           
 14522                           ;incstack = 0
 14523  0030B2  0100               	movlb	0	; () banked
 14524  0030B4  5187               	movf	___ftsub@f2& (0+255),w,b
 14525  0030B6  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14526  0030B8  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14527  0030BA  B4D8               	btfsc	status,2,c
 14528  0030BC  D006               	goto	l1754
 14529                           
 14530                           ; BSR set to: 0
 14531  0030BE  0E00               	movlw	0
 14532  0030C0  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14533  0030C2  0E00               	movlw	0
 14534  0030C4  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14535  0030C6  0E80               	movlw	128
 14536  0030C8  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14537  0030CA                     l1754:
 14538                           
 14539                           ; BSR set to: 0
 14540                           
 14541                           ; BSR set to: 0
 14542  0030CA  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14543  0030CE  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14544  0030D2  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14545  0030D6  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14546  0030DA  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14547  0030DE  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14548  0030E2  ECF3  F008         	call	___ftadd	;wreg free
 14549  0030E6  C078  F084         	movff	?___ftadd,?___ftsub
 14550  0030EA  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14551  0030EE  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14552  0030F2  0012               	return	
 14553  0030F4                     __end_of___ftsub:
 14554                           	opt stack 0
 14555                           tosu	equ	0xFFF
 14556                           tosh	equ	0xFFE
 14557                           tosl	equ	0xFFD
 14558                           pclath	equ	0xFFA
 14559                           tblptru	equ	0xFF8
 14560                           tblptrh	equ	0xFF7
 14561                           tblptrl	equ	0xFF6
 14562                           tablat	equ	0xFF5
 14563                           prodh	equ	0xFF4
 14564                           prodl	equ	0xFF3
 14565                           intcon	equ	0xFF2
 14566                           intcon2	equ	0xFF1
 14567                           postinc0	equ	0xFEE
 14568                           wreg	equ	0xFE8
 14569                           indf1	equ	0xFE7
 14570                           postdec1	equ	0xFE5
 14571                           fsr1h	equ	0xFE2
 14572                           fsr1l	equ	0xFE1
 14573                           indf2	equ	0xFDF
 14574                           postinc2	equ	0xFDE
 14575                           postdec2	equ	0xFDD
 14576                           fsr2h	equ	0xFDA
 14577                           fsr2l	equ	0xFD9
 14578                           status	equ	0xFD8
 14579                           
 14580 ;; *************** function ___ftadd *****************
 14581 ;; Defined at:
 14582 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14583 ;; Parameters:    Size  Location     Type
 14584 ;;  f1              3   24[BANK0 ] float 
 14585 ;;  f2              3   27[BANK0 ] float 
 14586 ;; Auto vars:     Size  Location     Type
 14587 ;;  exp1            1   35[BANK0 ] unsigned char 
 14588 ;;  exp2            1   34[BANK0 ] unsigned char 
 14589 ;;  sign            1   33[BANK0 ] unsigned char 
 14590 ;; Return value:  Size  Location     Type
 14591 ;;                  3   24[BANK0 ] float 
 14592 ;; Registers used:
 14593 ;;		wreg, status,2, status,0, cstack
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14599 ;;      Params:         0       6       0       0       0       0       0
 14600 ;;      Locals:         0       3       0       0       0       0       0
 14601 ;;      Temps:          0       3       0       0       0       0       0
 14602 ;;      Totals:         0      12       0       0       0       0       0
 14603 ;;Total ram usage:       12 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    4
 14606 ;; This function calls:
 14607 ;;		___ftpack
 14608 ;; This function is called by:
 14609 ;;		___ftsub
 14610 ;;		_floor
 14611 ;;		_log
 14612 ;;		_eval_poly
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text96
 14617  0011E6                     __ptext96:
 14618                           	opt stack 0
 14619  0011E6                     ___ftadd:
 14620                           	opt stack 22
 14621                           
 14622                           ;incstack = 0
 14623  0011E6  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14624  0011EA  0100               	movlb	0	; () banked
 14625  0011EC  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14626  0011EE  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14627  0011F0  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14628  0011F2  377E               	rlcf	??___ftadd& (0+255),f,b
 14629  0011F4  E301               	bnc	u6461
 14630  0011F6  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14631  0011F8                     u6461:
 14632  0011F8  517E               	movf	??___ftadd& (0+255),w,b
 14633  0011FA  6F83               	movwf	___ftadd@exp1& (0+255),b
 14634  0011FC  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14635  001200  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14636  001202  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14637  001204  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14638  001206  377E               	rlcf	??___ftadd& (0+255),f,b
 14639  001208  E301               	bnc	u6471
 14640  00120A  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14641  00120C                     u6471:
 14642  00120C  517E               	movf	??___ftadd& (0+255),w,b
 14643  00120E  6F82               	movwf	___ftadd@exp2& (0+255),b
 14644                           
 14645                           ; BSR set to: 0
 14646  001210  5183               	movf	___ftadd@exp1& (0+255),w,b
 14647  001212  B4D8               	btfsc	status,2,c
 14648  001214  D00B               	goto	u6500
 14649                           
 14650                           ; BSR set to: 0
 14651  001216  5182               	movf	___ftadd@exp2& (0+255),w,b
 14652  001218  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14653  00121A  B0D8               	btfsc	status,0,c
 14654  00121C  D00E               	goto	l1689
 14655                           
 14656                           ; BSR set to: 0
 14657  00121E  5183               	movf	___ftadd@exp1& (0+255),w,b
 14658  001220  0800               	sublw	0
 14659  001222  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14660  001224  6F7E               	movwf	??___ftadd& (0+255),b
 14661  001226  0E18               	movlw	24
 14662  001228  657E               	cpfsgt	??___ftadd& (0+255),b
 14663  00122A  D007               	goto	l1689
 14664  00122C                     u6500:
 14665                           
 14666                           ; BSR set to: 0
 14667  00122C  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14668  001230  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14669  001234  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14670  001238  0012               	return	
 14671  00123A                     l1689:
 14672                           
 14673                           ; BSR set to: 0
 14674                           
 14675                           ; BSR set to: 0
 14676  00123A  5182               	movf	___ftadd@exp2& (0+255),w,b
 14677  00123C  B4D8               	btfsc	status,2,c
 14678  00123E  D00B               	goto	u6530
 14679                           
 14680                           ; BSR set to: 0
 14681  001240  5183               	movf	___ftadd@exp1& (0+255),w,b
 14682  001242  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14683  001244  B0D8               	btfsc	status,0,c
 14684  001246  D00E               	goto	l1693
 14685                           
 14686                           ; BSR set to: 0
 14687  001248  5182               	movf	___ftadd@exp2& (0+255),w,b
 14688  00124A  0800               	sublw	0
 14689  00124C  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14690  00124E  6F7E               	movwf	??___ftadd& (0+255),b
 14691  001250  0E18               	movlw	24
 14692  001252  657E               	cpfsgt	??___ftadd& (0+255),b
 14693  001254  D007               	goto	l1693
 14694  001256                     u6530:
 14695                           
 14696                           ; BSR set to: 0
 14697  001256  C078  F078         	movff	___ftadd@f1,?___ftadd
 14698  00125A  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14699  00125E  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14700  001262  0012               	return	
 14701  001264                     l1693:
 14702                           
 14703                           ; BSR set to: 0
 14704                           
 14705                           ; BSR set to: 0
 14706  001264  0E06               	movlw	6
 14707  001266  6F81               	movwf	___ftadd@sign& (0+255),b
 14708                           
 14709                           ; BSR set to: 0
 14710  001268  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14711                           
 14712                           ; BSR set to: 0
 14713  00126A  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14714                           
 14715                           ; BSR set to: 0
 14716                           
 14717                           ; BSR set to: 0
 14718  00126C  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14719                           
 14720                           ; BSR set to: 0
 14721  00126E  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14722                           
 14723                           ; BSR set to: 0
 14724  001270  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14725                           
 14726                           ; BSR set to: 0
 14727  001272  0EFF               	movlw	255
 14728  001274  1778               	andwf	___ftadd@f1& (0+255),f,b
 14729  001276  0EFF               	movlw	255
 14730  001278  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14731  00127A  0E00               	movlw	0
 14732  00127C  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14733  00127E  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14734                           
 14735                           ; BSR set to: 0
 14736  001280  0EFF               	movlw	255
 14737  001282  177B               	andwf	___ftadd@f2& (0+255),f,b
 14738  001284  0EFF               	movlw	255
 14739  001286  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14740  001288  0E00               	movlw	0
 14741  00128A  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14742                           
 14743                           ; BSR set to: 0
 14744  00128C  5182               	movf	___ftadd@exp2& (0+255),w,b
 14745  00128E  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14746  001290  B0D8               	btfsc	status,0,c
 14747  001292  D01B               	goto	l1698
 14748  001294                     u6560:
 14749                           
 14750                           ; BSR set to: 0
 14751                           
 14752                           ; BSR set to: 0
 14753  001294  90D8               	bcf	status,0,c
 14754  001296  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14755  001298  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14756  00129A  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14757  00129C  0782               	decf	___ftadd@exp2& (0+255),f,b
 14758                           
 14759                           ; BSR set to: 0
 14760  00129E  5183               	movf	___ftadd@exp1& (0+255),w,b
 14761  0012A0  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14762  0012A2  B4D8               	btfsc	status,2,c
 14763  0012A4  D00D               	goto	l1703
 14764                           
 14765                           ; BSR set to: 0
 14766  0012A6  0781               	decf	___ftadd@sign& (0+255),f,b
 14767  0012A8  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14768  0012AC  0E07               	movlw	7
 14769  0012AE  177E               	andwf	??___ftadd& (0+255),f,b
 14770  0012B0  B4D8               	btfsc	status,2,c
 14771  0012B2  D006               	goto	l1703
 14772  0012B4  D7EF               	goto	u6560
 14773  0012B6                     
 14774                           ; BSR set to: 0
 14775                           
 14776                           ; BSR set to: 0
 14777  0012B6  90D8               	bcf	status,0,c
 14778  0012B8  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14779  0012BA  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14780  0012BC  3378               	rrcf	___ftadd@f1& (0+255),f,b
 14781  0012BE  2B83               	incf	___ftadd@exp1& (0+255),f,b
 14782  0012C0                     l1703:
 14783                           
 14784                           ; BSR set to: 0
 14785                           
 14786                           ; BSR set to: 0
 14787  0012C0  5182               	movf	___ftadd@exp2& (0+255),w,b
 14788  0012C2  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14789  0012C4  B4D8               	btfsc	status,2,c
 14790  0012C6  D01F               	goto	u6630
 14791  0012C8  D7F6               	goto	l1704
 14792  0012CA                     l1698:
 14793                           
 14794                           ; BSR set to: 0
 14795                           
 14796                           ; BSR set to: 0
 14797  0012CA  5183               	movf	___ftadd@exp1& (0+255),w,b
 14798  0012CC  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14799  0012CE  B0D8               	btfsc	status,0,c
 14800  0012D0  D01A               	goto	u6630
 14801  0012D2                     u6600:
 14802                           
 14803                           ; BSR set to: 0
 14804                           
 14805                           ; BSR set to: 0
 14806  0012D2  90D8               	bcf	status,0,c
 14807  0012D4  3778               	rlcf	___ftadd@f1& (0+255),f,b
 14808  0012D6  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14809  0012D8  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14810  0012DA  0783               	decf	___ftadd@exp1& (0+255),f,b
 14811                           
 14812                           ; BSR set to: 0
 14813  0012DC  5183               	movf	___ftadd@exp1& (0+255),w,b
 14814  0012DE  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14815  0012E0  B4D8               	btfsc	status,2,c
 14816  0012E2  D00D               	goto	l1712
 14817                           
 14818                           ; BSR set to: 0
 14819  0012E4  0781               	decf	___ftadd@sign& (0+255),f,b
 14820  0012E6  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14821  0012EA  0E07               	movlw	7
 14822  0012EC  177E               	andwf	??___ftadd& (0+255),f,b
 14823  0012EE  B4D8               	btfsc	status,2,c
 14824  0012F0  D006               	goto	l1712
 14825  0012F2  D7EF               	goto	u6600
 14826  0012F4                     
 14827                           ; BSR set to: 0
 14828                           
 14829                           ; BSR set to: 0
 14830  0012F4  90D8               	bcf	status,0,c
 14831  0012F6  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14832  0012F8  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14833  0012FA  337B               	rrcf	___ftadd@f2& (0+255),f,b
 14834  0012FC  2B82               	incf	___ftadd@exp2& (0+255),f,b
 14835  0012FE                     l1712:
 14836                           
 14837                           ; BSR set to: 0
 14838                           
 14839                           ; BSR set to: 0
 14840  0012FE  5182               	movf	___ftadd@exp2& (0+255),w,b
 14841  001300  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14842  001302  A4D8               	btfss	status,2,c
 14843  001304  D7F7               	goto	l1713
 14844  001306                     u6630:
 14845                           
 14846                           ; BSR set to: 0
 14847                           
 14848                           ; BSR set to: 0
 14849                           
 14850                           ; BSR set to: 0
 14851  001306  AF81               	btfss	___ftadd@sign& (0+255),7,b
 14852  001308  D00C               	goto	l1715
 14853                           
 14854                           ; BSR set to: 0
 14855  00130A  0EFF               	movlw	255
 14856  00130C  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 14857  00130E  0EFF               	movlw	255
 14858  001310  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14859  001312  0EFF               	movlw	255
 14860  001314  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14861  001316  0E01               	movlw	1
 14862  001318  2778               	addwf	___ftadd@f1& (0+255),f,b
 14863  00131A  0E00               	movlw	0
 14864  00131C  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14865  00131E  0E00               	movlw	0
 14866  001320  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14867  001322                     l1715:
 14868                           
 14869                           ; BSR set to: 0
 14870  001322  AD81               	btfss	___ftadd@sign& (0+255),6,b
 14871  001324  D00C               	goto	l1716
 14872                           
 14873                           ; BSR set to: 0
 14874  001326  0EFF               	movlw	255
 14875  001328  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14876  00132A  0EFF               	movlw	255
 14877  00132C  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14878  00132E  0EFF               	movlw	255
 14879  001330  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14880  001332  0E01               	movlw	1
 14881  001334  277B               	addwf	___ftadd@f2& (0+255),f,b
 14882  001336  0E00               	movlw	0
 14883  001338  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14884  00133A  0E00               	movlw	0
 14885  00133C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14886  00133E                     l1716:
 14887                           
 14888                           ; BSR set to: 0
 14889                           
 14890                           ; BSR set to: 0
 14891  00133E  0E00               	movlw	0
 14892  001340  6F81               	movwf	___ftadd@sign& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895  001342  5178               	movf	___ftadd@f1& (0+255),w,b
 14896  001344  277B               	addwf	___ftadd@f2& (0+255),f,b
 14897  001346  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 14898  001348  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14899  00134A  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 14900  00134C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14901                           
 14902                           ; BSR set to: 0
 14903  00134E  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14904  001350  D00E               	goto	l1717
 14905                           
 14906                           ; BSR set to: 0
 14907  001352  0EFF               	movlw	255
 14908  001354  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14909  001356  0EFF               	movlw	255
 14910  001358  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14911  00135A  0EFF               	movlw	255
 14912  00135C  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14913  00135E  0E01               	movlw	1
 14914  001360  277B               	addwf	___ftadd@f2& (0+255),f,b
 14915  001362  0E00               	movlw	0
 14916  001364  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14917  001366  0E00               	movlw	0
 14918  001368  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14919                           
 14920                           ; BSR set to: 0
 14921  00136A  0E01               	movlw	1
 14922  00136C  6F81               	movwf	___ftadd@sign& (0+255),b
 14923  00136E                     l1717:
 14924                           
 14925                           ; BSR set to: 0
 14926                           
 14927                           ; BSR set to: 0
 14928  00136E  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 14929  001372  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 14930  001376  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 14931  00137A  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 14932  00137E  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 14933  001382  EC78  F011         	call	___ftpack	;wreg free
 14934  001386  C018  F078         	movff	?___ftpack,?___ftadd
 14935  00138A  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 14936  00138E  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 14937  001392  0012               	return	
 14938  001394                     __end_of___ftadd:
 14939                           	opt stack 0
 14940                           tosu	equ	0xFFF
 14941                           tosh	equ	0xFFE
 14942                           tosl	equ	0xFFD
 14943                           pclath	equ	0xFFA
 14944                           tblptru	equ	0xFF8
 14945                           tblptrh	equ	0xFF7
 14946                           tblptrl	equ	0xFF6
 14947                           tablat	equ	0xFF5
 14948                           prodh	equ	0xFF4
 14949                           prodl	equ	0xFF3
 14950                           intcon	equ	0xFF2
 14951                           intcon2	equ	0xFF1
 14952                           postinc0	equ	0xFEE
 14953                           wreg	equ	0xFE8
 14954                           indf1	equ	0xFE7
 14955                           postdec1	equ	0xFE5
 14956                           fsr1h	equ	0xFE2
 14957                           fsr1l	equ	0xFE1
 14958                           indf2	equ	0xFDF
 14959                           postinc2	equ	0xFDE
 14960                           postdec2	equ	0xFDD
 14961                           fsr2h	equ	0xFDA
 14962                           fsr2l	equ	0xFD9
 14963                           status	equ	0xFD8
 14964                           
 14965 ;; *************** function ___ftneg *****************
 14966 ;; Defined at:
 14967 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;  f1              3   23[COMRAM] float 
 14970 ;; Auto vars:     Size  Location     Type
 14971 ;;		None
 14972 ;; Return value:  Size  Location     Type
 14973 ;;                  3   23[COMRAM] float 
 14974 ;; Registers used:
 14975 ;;		wreg, status,2, status,0
 14976 ;; Tracked objects:
 14977 ;;		On entry : 0/0
 14978 ;;		On exit  : 0/0
 14979 ;;		Unchanged: 0/0
 14980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14981 ;;      Params:         3       0       0       0       0       0       0
 14982 ;;      Locals:         0       0       0       0       0       0       0
 14983 ;;      Temps:          0       0       0       0       0       0       0
 14984 ;;      Totals:         3       0       0       0       0       0       0
 14985 ;;Total ram usage:        3 bytes
 14986 ;; Hardware stack levels used:    1
 14987 ;; Hardware stack levels required when called:    3
 14988 ;; This function calls:
 14989 ;;		Nothing
 14990 ;; This function is called by:
 14991 ;;		_pow
 14992 ;;		_exp
 14993 ;; This function uses a non-reentrant model
 14994 ;;
 14995                           
 14996                           	psect	text97
 14997  0035B0                     __ptext97:
 14998                           	opt stack 0
 14999  0035B0                     ___ftneg:
 15000                           	opt stack 24
 15001                           
 15002                           ;incstack = 0
 15003  0035B0  5018               	movf	___ftneg@f1,w,c
 15004  0035B2  1019               	iorwf	___ftneg@f1+1,w,c
 15005  0035B4  101A               	iorwf	___ftneg@f1+2,w,c
 15006  0035B6  B4D8               	btfsc	status,2,c
 15007  0035B8  D006               	goto	l1748
 15008  0035BA  0E00               	movlw	0
 15009  0035BC  1A18               	xorwf	___ftneg@f1,f,c
 15010  0035BE  0E00               	movlw	0
 15011  0035C0  1A19               	xorwf	___ftneg@f1+1,f,c
 15012  0035C2  0E80               	movlw	128
 15013  0035C4  1A1A               	xorwf	___ftneg@f1+2,f,c
 15014  0035C6                     l1748:
 15015  0035C6  C018  F018         	movff	___ftneg@f1,?___ftneg
 15016  0035CA  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15017  0035CE  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15018  0035D2  0012               	return		;funcret
 15019  0035D4                     __end_of___ftneg:
 15020                           	opt stack 0
 15021                           tosu	equ	0xFFF
 15022                           tosh	equ	0xFFE
 15023                           tosl	equ	0xFFD
 15024                           pclath	equ	0xFFA
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           intcon2	equ	0xFF1
 15033                           postinc0	equ	0xFEE
 15034                           wreg	equ	0xFE8
 15035                           indf1	equ	0xFE7
 15036                           postdec1	equ	0xFE5
 15037                           fsr1h	equ	0xFE2
 15038                           fsr1l	equ	0xFE1
 15039                           indf2	equ	0xFDF
 15040                           postinc2	equ	0xFDE
 15041                           postdec2	equ	0xFDD
 15042                           fsr2h	equ	0xFDA
 15043                           fsr2l	equ	0xFD9
 15044                           status	equ	0xFD8
 15045                           
 15046 ;; *************** function ___ftdiv *****************
 15047 ;; Defined at:
 15048 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  f1              3   40[COMRAM] float 
 15051 ;;  f2              3   43[COMRAM] float 
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;  f3              3    4[BANK0 ] float 
 15054 ;;  sign            1    8[BANK0 ] unsigned char 
 15055 ;;  exp             1    7[BANK0 ] unsigned char 
 15056 ;;  cntr            1    3[BANK0 ] unsigned char 
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  3   40[COMRAM] float 
 15059 ;; Registers used:
 15060 ;;		wreg, status,2, status,0, cstack
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15066 ;;      Params:         6       0       0       0       0       0       0
 15067 ;;      Locals:         0       6       0       0       0       0       0
 15068 ;;      Temps:          0       3       0       0       0       0       0
 15069 ;;      Totals:         6       9       0       0       0       0       0
 15070 ;;Total ram usage:       15 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    4
 15073 ;; This function calls:
 15074 ;;		___ftpack
 15075 ;; This function is called by:
 15076 ;;		_AdcConvert
 15077 ;;		_CheckFlashPrecentage
 15078 ;;		_exp
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           	psect	text98
 15083  001BA8                     __ptext98:
 15084                           	opt stack 0
 15085  001BA8                     ___ftdiv:
 15086                           	opt stack 25
 15087                           
 15088                           ;incstack = 0
 15089  001BA8  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 15090  001BAC  0100               	movlb	0	; () banked
 15091  001BAE  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15092  001BB0  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15093  001BB2  342A               	rlcf	___ftdiv@f1+1,w,c
 15094  001BB4  3760               	rlcf	??___ftdiv& (0+255),f,b
 15095  001BB6  E301               	bnc	u6911
 15096  001BB8  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15097  001BBA                     u6911:
 15098  001BBA  5160               	movf	??___ftdiv& (0+255),w,b
 15099  001BBC  6F67               	movwf	___ftdiv@exp& (0+255),b
 15100  001BBE  5167               	movf	___ftdiv@exp& (0+255),w,b
 15101  001BC0  A4D8               	btfss	status,2,c
 15102  001BC2  D007               	goto	l1722
 15103                           
 15104                           ; BSR set to: 0
 15105  001BC4  0E00               	movlw	0
 15106  001BC6  6E29               	movwf	?___ftdiv,c
 15107  001BC8  0E00               	movlw	0
 15108  001BCA  6E2A               	movwf	?___ftdiv+1,c
 15109  001BCC  0E00               	movlw	0
 15110  001BCE  6E2B               	movwf	?___ftdiv+2,c
 15111                           
 15112                           ; BSR set to: 0
 15113  001BD0  0012               	return	
 15114  001BD2                     l1722:
 15115                           
 15116                           ; BSR set to: 0
 15117                           
 15118                           ; BSR set to: 0
 15119  001BD2  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15120  001BD6  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15121  001BD8  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15122  001BDA  342D               	rlcf	___ftdiv@f2+1,w,c
 15123  001BDC  3760               	rlcf	??___ftdiv& (0+255),f,b
 15124  001BDE  E301               	bnc	u6931
 15125  001BE0  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15126  001BE2                     u6931:
 15127  001BE2  5160               	movf	??___ftdiv& (0+255),w,b
 15128  001BE4  6F68               	movwf	___ftdiv@sign& (0+255),b
 15129  001BE6  5168               	movf	___ftdiv@sign& (0+255),w,b
 15130  001BE8  A4D8               	btfss	status,2,c
 15131  001BEA  D007               	goto	l1724
 15132                           
 15133                           ; BSR set to: 0
 15134  001BEC  0E00               	movlw	0
 15135  001BEE  6E29               	movwf	?___ftdiv,c
 15136  001BF0  0E00               	movlw	0
 15137  001BF2  6E2A               	movwf	?___ftdiv+1,c
 15138  001BF4  0E00               	movlw	0
 15139  001BF6  6E2B               	movwf	?___ftdiv+2,c
 15140                           
 15141                           ; BSR set to: 0
 15142  001BF8  0012               	return	
 15143  001BFA                     l1724:
 15144                           
 15145                           ; BSR set to: 0
 15146                           
 15147                           ; BSR set to: 0
 15148  001BFA  0E00               	movlw	0
 15149  001BFC  6F64               	movwf	___ftdiv@f3& (0+255),b
 15150  001BFE  0E00               	movlw	0
 15151  001C00  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15152  001C02  0E00               	movlw	0
 15153  001C04  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15154                           
 15155                           ; BSR set to: 0
 15156  001C06  5168               	movf	___ftdiv@sign& (0+255),w,b
 15157  001C08  0F89               	addlw	137
 15158  001C0A  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15159                           
 15160                           ; BSR set to: 0
 15161  001C0C  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15162                           
 15163                           ; BSR set to: 0
 15164  001C10  502E               	movf	___ftdiv@f2+2,w,c
 15165  001C12  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15166                           
 15167                           ; BSR set to: 0
 15168  001C14  0E80               	movlw	128
 15169  001C16  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15170                           
 15171                           ; BSR set to: 0
 15172  001C18  8E2A               	bsf	___ftdiv@f1+1,7,c
 15173                           
 15174                           ; BSR set to: 0
 15175  001C1A  0EFF               	movlw	255
 15176  001C1C  1629               	andwf	___ftdiv@f1,f,c
 15177  001C1E  0EFF               	movlw	255
 15178  001C20  162A               	andwf	___ftdiv@f1+1,f,c
 15179  001C22  0E00               	movlw	0
 15180  001C24  162B               	andwf	___ftdiv@f1+2,f,c
 15181                           
 15182                           ; BSR set to: 0
 15183  001C26  8E2D               	bsf	___ftdiv@f2+1,7,c
 15184                           
 15185                           ; BSR set to: 0
 15186  001C28  0EFF               	movlw	255
 15187  001C2A  162C               	andwf	___ftdiv@f2,f,c
 15188  001C2C  0EFF               	movlw	255
 15189  001C2E  162D               	andwf	___ftdiv@f2+1,f,c
 15190  001C30  0E00               	movlw	0
 15191  001C32  162E               	andwf	___ftdiv@f2+2,f,c
 15192                           
 15193                           ; BSR set to: 0
 15194  001C34  0E18               	movlw	24
 15195  001C36  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15196  001C38                     
 15197                           ; BSR set to: 0
 15198                           
 15199                           ; BSR set to: 0
 15200  001C38  90D8               	bcf	status,0,c
 15201  001C3A  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15202  001C3C  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15203  001C3E  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15204                           
 15205                           ; BSR set to: 0
 15206  001C40  502C               	movf	___ftdiv@f2,w,c
 15207  001C42  5C29               	subwf	___ftdiv@f1,w,c
 15208  001C44  502D               	movf	___ftdiv@f2+1,w,c
 15209  001C46  582A               	subwfb	___ftdiv@f1+1,w,c
 15210  001C48  502E               	movf	___ftdiv@f2+2,w,c
 15211  001C4A  582B               	subwfb	___ftdiv@f1+2,w,c
 15212  001C4C  A0D8               	btfss	status,0,c
 15213  001C4E  D007               	goto	l1726
 15214                           
 15215                           ; BSR set to: 0
 15216  001C50  502C               	movf	___ftdiv@f2,w,c
 15217  001C52  5E29               	subwf	___ftdiv@f1,f,c
 15218  001C54  502D               	movf	___ftdiv@f2+1,w,c
 15219  001C56  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15220  001C58  502E               	movf	___ftdiv@f2+2,w,c
 15221  001C5A  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15222                           
 15223                           ; BSR set to: 0
 15224  001C5C  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15225  001C5E                     l1726:
 15226                           
 15227                           ; BSR set to: 0
 15228  001C5E  90D8               	bcf	status,0,c
 15229  001C60  3629               	rlcf	___ftdiv@f1,f,c
 15230  001C62  362A               	rlcf	___ftdiv@f1+1,f,c
 15231  001C64  362B               	rlcf	___ftdiv@f1+2,f,c
 15232                           
 15233                           ; BSR set to: 0
 15234  001C66  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15235  001C68  D7E7               	goto	l1725
 15236                           
 15237                           ; BSR set to: 0
 15238                           
 15239                           ; BSR set to: 0
 15240  001C6A  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15241  001C6E  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15242  001C72  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15243  001C76  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15244  001C7A  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15245  001C7E  EC78  F011         	call	___ftpack	;wreg free
 15246  001C82  C018  F029         	movff	?___ftpack,?___ftdiv
 15247  001C86  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15248  001C8A  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15249  001C8E  0012               	return	
 15250  001C90                     __end_of___ftdiv:
 15251                           	opt stack 0
 15252                           tosu	equ	0xFFF
 15253                           tosh	equ	0xFFE
 15254                           tosl	equ	0xFFD
 15255                           pclath	equ	0xFFA
 15256                           tblptru	equ	0xFF8
 15257                           tblptrh	equ	0xFF7
 15258                           tblptrl	equ	0xFF6
 15259                           tablat	equ	0xFF5
 15260                           prodh	equ	0xFF4
 15261                           prodl	equ	0xFF3
 15262                           intcon	equ	0xFF2
 15263                           intcon2	equ	0xFF1
 15264                           postinc0	equ	0xFEE
 15265                           wreg	equ	0xFE8
 15266                           indf1	equ	0xFE7
 15267                           postdec1	equ	0xFE5
 15268                           fsr1h	equ	0xFE2
 15269                           fsr1l	equ	0xFE1
 15270                           indf2	equ	0xFDF
 15271                           postinc2	equ	0xFDE
 15272                           postdec2	equ	0xFDD
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function ___awtoft *****************
 15278 ;; Defined at:
 15279 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  c               2   31[COMRAM] int 
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;  sign            1   34[COMRAM] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;                  3   31[COMRAM] float 
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, status,0, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15293 ;;      Params:         3       0       0       0       0       0       0
 15294 ;;      Locals:         1       0       0       0       0       0       0
 15295 ;;      Temps:          0       0       0       0       0       0       0
 15296 ;;      Totals:         4       0       0       0       0       0       0
 15297 ;;Total ram usage:        4 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    4
 15300 ;; This function calls:
 15301 ;;		___ftpack
 15302 ;; This function is called by:
 15303 ;;		_exp
 15304 ;;		_log
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text99
 15309  003226                     __ptext99:
 15310                           	opt stack 0
 15311  003226                     ___awtoft:
 15312                           	opt stack 23
 15313                           
 15314                           ;incstack = 0
 15315  003226  0E00               	movlw	0
 15316  003228  6E23               	movwf	___awtoft@sign,c
 15317  00322A  AE21               	btfss	___awtoft@c+1,7,c
 15318  00322C  D006               	goto	l1639
 15319  00322E  6C20               	negf	___awtoft@c,c
 15320  003230  1E21               	comf	___awtoft@c+1,f,c
 15321  003232  B0D8               	btfsc	status,0,c
 15322  003234  2A21               	incf	___awtoft@c+1,f,c
 15323  003236  0E01               	movlw	1
 15324  003238  6E23               	movwf	___awtoft@sign,c
 15325  00323A                     l1639:
 15326  00323A  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15327  00323E  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15328  003242  6A1A               	clrf	___ftpack@arg+2,c
 15329  003244  0E8E               	movlw	142
 15330  003246  6E1B               	movwf	___ftpack@exp,c
 15331  003248  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15332  00324C  EC78  F011         	call	___ftpack	;wreg free
 15333  003250  C018  F020         	movff	?___ftpack,?___awtoft
 15334  003254  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15335  003258  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15336  00325C  0012               	return	
 15337  00325E                     __end_of___awtoft:
 15338                           	opt stack 0
 15339                           tosu	equ	0xFFF
 15340                           tosh	equ	0xFFE
 15341                           tosl	equ	0xFFD
 15342                           pclath	equ	0xFFA
 15343                           tblptru	equ	0xFF8
 15344                           tblptrh	equ	0xFF7
 15345                           tblptrl	equ	0xFF6
 15346                           tablat	equ	0xFF5
 15347                           prodh	equ	0xFF4
 15348                           prodl	equ	0xFF3
 15349                           intcon	equ	0xFF2
 15350                           intcon2	equ	0xFF1
 15351                           postinc0	equ	0xFEE
 15352                           wreg	equ	0xFE8
 15353                           indf1	equ	0xFE7
 15354                           postdec1	equ	0xFE5
 15355                           fsr1h	equ	0xFE2
 15356                           fsr1l	equ	0xFE1
 15357                           indf2	equ	0xFDF
 15358                           postinc2	equ	0xFDE
 15359                           postdec2	equ	0xFDD
 15360                           fsr2h	equ	0xFDA
 15361                           fsr2l	equ	0xFD9
 15362                           status	equ	0xFD8
 15363                           
 15364 ;; *************** function ___lltoft *****************
 15365 ;; Defined at:
 15366 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15367 ;; Parameters:    Size  Location     Type
 15368 ;;  c               4   31[COMRAM] unsigned long 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;  exp             1   39[COMRAM] unsigned char 
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  3   31[COMRAM] float 
 15373 ;; Registers used:
 15374 ;;		wreg, status,2, status,0, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15380 ;;      Params:         4       0       0       0       0       0       0
 15381 ;;      Locals:         1       0       0       0       0       0       0
 15382 ;;      Temps:          4       0       0       0       0       0       0
 15383 ;;      Totals:         9       0       0       0       0       0       0
 15384 ;;Total ram usage:        9 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    4
 15387 ;; This function calls:
 15388 ;;		___ftpack
 15389 ;; This function is called by:
 15390 ;;		_CheckFlashPrecentage
 15391 ;;		_pow
 15392 ;; This function uses a non-reentrant model
 15393 ;;
 15394                           
 15395                           	psect	text100
 15396  002B7A                     __ptext100:
 15397                           	opt stack 0
 15398  002B7A                     ___lltoft:
 15399                           	opt stack 25
 15400                           
 15401                           ;incstack = 0
 15402  002B7A  0E8E               	movlw	142
 15403  002B7C  6E28               	movwf	___lltoft@exp,c
 15404  002B7E  D006               	goto	l1815
 15405  002B80  90D8               	bcf	status,0,c
 15406  002B82  3223               	rrcf	___lltoft@c+3,f,c
 15407  002B84  3222               	rrcf	___lltoft@c+2,f,c
 15408  002B86  3221               	rrcf	___lltoft@c+1,f,c
 15409  002B88  3220               	rrcf	___lltoft@c,f,c
 15410  002B8A  2A28               	incf	___lltoft@exp,f,c
 15411  002B8C                     l1815:
 15412  002B8C  0E00               	movlw	0
 15413  002B8E  1420               	andwf	___lltoft@c,w,c
 15414  002B90  6E24               	movwf	??___lltoft& (0+255),c
 15415  002B92  0E00               	movlw	0
 15416  002B94  1421               	andwf	___lltoft@c+1,w,c
 15417  002B96  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15418  002B98  0E00               	movlw	0
 15419  002B9A  1422               	andwf	___lltoft@c+2,w,c
 15420  002B9C  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15421  002B9E  0EFF               	movlw	255
 15422  002BA0  1423               	andwf	___lltoft@c+3,w,c
 15423  002BA2  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15424  002BA4  5024               	movf	??___lltoft,w,c
 15425  002BA6  1025               	iorwf	??___lltoft+1,w,c
 15426  002BA8  1026               	iorwf	??___lltoft+2,w,c
 15427  002BAA  1027               	iorwf	??___lltoft+3,w,c
 15428  002BAC  A4D8               	btfss	status,2,c
 15429  002BAE  D7E8               	goto	l1816
 15430  002BB0  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15431  002BB4  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15432  002BB8  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15433  002BBC  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15434  002BC0  0E00               	movlw	0
 15435  002BC2  6E1C               	movwf	___ftpack@sign,c
 15436  002BC4  EC78  F011         	call	___ftpack	;wreg free
 15437  002BC8  C018  F020         	movff	?___ftpack,?___lltoft
 15438  002BCC  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15439  002BD0  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15440  002BD4  0012               	return	
 15441  002BD6                     __end_of___lltoft:
 15442                           	opt stack 0
 15443                           tosu	equ	0xFFF
 15444                           tosh	equ	0xFFE
 15445                           tosl	equ	0xFFD
 15446                           pclath	equ	0xFFA
 15447                           tblptru	equ	0xFF8
 15448                           tblptrh	equ	0xFF7
 15449                           tblptrl	equ	0xFF6
 15450                           tablat	equ	0xFF5
 15451                           prodh	equ	0xFF4
 15452                           prodl	equ	0xFF3
 15453                           intcon	equ	0xFF2
 15454                           intcon2	equ	0xFF1
 15455                           postinc0	equ	0xFEE
 15456                           wreg	equ	0xFE8
 15457                           indf1	equ	0xFE7
 15458                           postdec1	equ	0xFE5
 15459                           fsr1h	equ	0xFE2
 15460                           fsr1l	equ	0xFE1
 15461                           indf2	equ	0xFDF
 15462                           postinc2	equ	0xFDE
 15463                           postdec2	equ	0xFDD
 15464                           fsr2h	equ	0xFDA
 15465                           fsr2l	equ	0xFD9
 15466                           status	equ	0xFD8
 15467                           
 15468 ;; *************** function ___lwtoft *****************
 15469 ;; Defined at:
 15470 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15471 ;; Parameters:    Size  Location     Type
 15472 ;;  c               2   31[COMRAM] unsigned int 
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;		None
 15475 ;; Return value:  Size  Location     Type
 15476 ;;                  3   31[COMRAM] float 
 15477 ;; Registers used:
 15478 ;;		wreg, status,2, status,0, cstack
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15484 ;;      Params:         3       0       0       0       0       0       0
 15485 ;;      Locals:         0       0       0       0       0       0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0
 15487 ;;      Totals:         3       0       0       0       0       0       0
 15488 ;;Total ram usage:        3 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; Hardware stack levels required when called:    4
 15491 ;; This function calls:
 15492 ;;		___ftpack
 15493 ;; This function is called by:
 15494 ;;		_AdcConvert
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           	psect	text101
 15499  0035D4                     __ptext101:
 15500                           	opt stack 0
 15501  0035D4                     ___lwtoft:
 15502                           	opt stack 25
 15503                           
 15504                           ;incstack = 0
 15505  0035D4  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15506  0035D8  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15507  0035DC  6A1A               	clrf	___ftpack@arg+2,c
 15508  0035DE  0E8E               	movlw	142
 15509  0035E0  6E1B               	movwf	___ftpack@exp,c
 15510  0035E2  0E00               	movlw	0
 15511  0035E4  6E1C               	movwf	___ftpack@sign,c
 15512  0035E6  EC78  F011         	call	___ftpack	;wreg free
 15513  0035EA  C018  F020         	movff	?___ftpack,?___lwtoft
 15514  0035EE  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15515  0035F2  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15516  0035F6  0012               	return	
 15517  0035F8                     __end_of___lwtoft:
 15518                           	opt stack 0
 15519                           tosu	equ	0xFFF
 15520                           tosh	equ	0xFFE
 15521                           tosl	equ	0xFFD
 15522                           pclath	equ	0xFFA
 15523                           tblptru	equ	0xFF8
 15524                           tblptrh	equ	0xFF7
 15525                           tblptrl	equ	0xFF6
 15526                           tablat	equ	0xFF5
 15527                           prodh	equ	0xFF4
 15528                           prodl	equ	0xFF3
 15529                           intcon	equ	0xFF2
 15530                           intcon2	equ	0xFF1
 15531                           postinc0	equ	0xFEE
 15532                           wreg	equ	0xFE8
 15533                           indf1	equ	0xFE7
 15534                           postdec1	equ	0xFE5
 15535                           fsr1h	equ	0xFE2
 15536                           fsr1l	equ	0xFE1
 15537                           indf2	equ	0xFDF
 15538                           postinc2	equ	0xFDE
 15539                           postdec2	equ	0xFDD
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function ___ftpack *****************
 15545 ;; Defined at:
 15546 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;  arg             3   23[COMRAM] unsigned um
 15549 ;;  exp             1   26[COMRAM] unsigned char 
 15550 ;;  sign            1   27[COMRAM] unsigned char 
 15551 ;; Auto vars:     Size  Location     Type
 15552 ;;		None
 15553 ;; Return value:  Size  Location     Type
 15554 ;;                  3   23[COMRAM] float 
 15555 ;; Registers used:
 15556 ;;		wreg, status,2, status,0
 15557 ;; Tracked objects:
 15558 ;;		On entry : 0/0
 15559 ;;		On exit  : 0/0
 15560 ;;		Unchanged: 0/0
 15561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15562 ;;      Params:         5       0       0       0       0       0       0
 15563 ;;      Locals:         0       0       0       0       0       0       0
 15564 ;;      Temps:          3       0       0       0       0       0       0
 15565 ;;      Totals:         8       0       0       0       0       0       0
 15566 ;;Total ram usage:        8 bytes
 15567 ;; Hardware stack levels used:    1
 15568 ;; Hardware stack levels required when called:    3
 15569 ;; This function calls:
 15570 ;;		Nothing
 15571 ;; This function is called by:
 15572 ;;		___altoft
 15573 ;;		___awtoft
 15574 ;;		___ftadd
 15575 ;;		___ftdiv
 15576 ;;		___ftmul
 15577 ;;		___lltoft
 15578 ;;		___lwtoft
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           	psect	text102
 15583  0022F0                     __ptext102:
 15584                           	opt stack 0
 15585  0022F0                     ___ftpack:
 15586                           	opt stack 25
 15587                           
 15588                           ;incstack = 0
 15589  0022F0  501B               	movf	___ftpack@exp,w,c
 15590  0022F2  B4D8               	btfsc	status,2,c
 15591  0022F4  D005               	goto	u5990
 15592  0022F6  5018               	movf	___ftpack@arg,w,c
 15593  0022F8  1019               	iorwf	___ftpack@arg+1,w,c
 15594  0022FA  101A               	iorwf	___ftpack@arg+2,w,c
 15595  0022FC  A4D8               	btfss	status,2,c
 15596  0022FE  D00C               	goto	l1658
 15597  002300                     u5990:
 15598  002300  0E00               	movlw	0
 15599  002302  6E18               	movwf	?___ftpack,c
 15600  002304  0E00               	movlw	0
 15601  002306  6E19               	movwf	?___ftpack+1,c
 15602  002308  0E00               	movlw	0
 15603  00230A  6E1A               	movwf	?___ftpack+2,c
 15604  00230C  0012               	return	
 15605  00230E  2A1B               	incf	___ftpack@exp,f,c
 15606  002310  90D8               	bcf	status,0,c
 15607  002312  321A               	rrcf	___ftpack@arg+2,f,c
 15608  002314  3219               	rrcf	___ftpack@arg+1,f,c
 15609  002316  3218               	rrcf	___ftpack@arg,f,c
 15610  002318                     l1658:
 15611  002318  0E00               	movlw	0
 15612  00231A  1418               	andwf	___ftpack@arg,w,c
 15613  00231C  6E1D               	movwf	??___ftpack& (0+255),c
 15614  00231E  0E00               	movlw	0
 15615  002320  1419               	andwf	___ftpack@arg+1,w,c
 15616  002322  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15617  002324  0EFE               	movlw	254
 15618  002326  141A               	andwf	___ftpack@arg+2,w,c
 15619  002328  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15620  00232A  501D               	movf	??___ftpack,w,c
 15621  00232C  101E               	iorwf	??___ftpack+1,w,c
 15622  00232E  101F               	iorwf	??___ftpack+2,w,c
 15623  002330  B4D8               	btfsc	status,2,c
 15624  002332  D00C               	goto	l1661
 15625  002334  D7EC               	goto	l1659
 15626  002336  2A1B               	incf	___ftpack@exp,f,c
 15627  002338  0E01               	movlw	1
 15628  00233A  2618               	addwf	___ftpack@arg,f,c
 15629  00233C  0E00               	movlw	0
 15630  00233E  2219               	addwfc	___ftpack@arg+1,f,c
 15631  002340  0E00               	movlw	0
 15632  002342  221A               	addwfc	___ftpack@arg+2,f,c
 15633  002344  90D8               	bcf	status,0,c
 15634  002346  321A               	rrcf	___ftpack@arg+2,f,c
 15635  002348  3219               	rrcf	___ftpack@arg+1,f,c
 15636  00234A  3218               	rrcf	___ftpack@arg,f,c
 15637  00234C                     l1661:
 15638  00234C  0E00               	movlw	0
 15639  00234E  1418               	andwf	___ftpack@arg,w,c
 15640  002350  6E1D               	movwf	??___ftpack& (0+255),c
 15641  002352  0E00               	movlw	0
 15642  002354  1419               	andwf	___ftpack@arg+1,w,c
 15643  002356  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15644  002358  0EFF               	movlw	255
 15645  00235A  141A               	andwf	___ftpack@arg+2,w,c
 15646  00235C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15647  00235E  501D               	movf	??___ftpack,w,c
 15648  002360  101E               	iorwf	??___ftpack+1,w,c
 15649  002362  101F               	iorwf	??___ftpack+2,w,c
 15650  002364  B4D8               	btfsc	status,2,c
 15651  002366  D006               	goto	l1664
 15652  002368  D7E6               	goto	l1662
 15653  00236A  061B               	decf	___ftpack@exp,f,c
 15654  00236C  90D8               	bcf	status,0,c
 15655  00236E  3618               	rlcf	___ftpack@arg,f,c
 15656  002370  3619               	rlcf	___ftpack@arg+1,f,c
 15657  002372  361A               	rlcf	___ftpack@arg+2,f,c
 15658  002374                     l1664:
 15659  002374  BE19               	btfsc	___ftpack@arg+1,7,c
 15660  002376  D003               	goto	u6030
 15661  002378  0E02               	movlw	2
 15662  00237A  601B               	cpfslt	___ftpack@exp,c
 15663  00237C  D7F6               	goto	l1665
 15664  00237E                     u6030:
 15665  00237E  A01B               	btfss	___ftpack@exp,0,c
 15666  002380  9E19               	bcf	___ftpack@arg+1,7,c
 15667  002382  90D8               	bcf	status,0,c
 15668  002384  321B               	rrcf	___ftpack@exp,f,c
 15669  002386  501B               	movf	___ftpack@exp,w,c
 15670  002388  121A               	iorwf	___ftpack@arg+2,f,c
 15671  00238A  501C               	movf	___ftpack@sign,w,c
 15672  00238C  A4D8               	btfss	status,2,c
 15673  00238E  8E1A               	bsf	___ftpack@arg+2,7,c
 15674  002390  C018  F018         	movff	___ftpack@arg,?___ftpack
 15675  002394  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15676  002398  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15677  00239C  0012               	return	
 15678  00239E                     __end_of___ftpack:
 15679                           	opt stack 0
 15680                           tosu	equ	0xFFF
 15681                           tosh	equ	0xFFE
 15682                           tosl	equ	0xFFD
 15683                           pclath	equ	0xFFA
 15684                           tblptru	equ	0xFF8
 15685                           tblptrh	equ	0xFF7
 15686                           tblptrl	equ	0xFF6
 15687                           tablat	equ	0xFF5
 15688                           prodh	equ	0xFF4
 15689                           prodl	equ	0xFF3
 15690                           intcon	equ	0xFF2
 15691                           intcon2	equ	0xFF1
 15692                           postinc0	equ	0xFEE
 15693                           wreg	equ	0xFE8
 15694                           indf1	equ	0xFE7
 15695                           postdec1	equ	0xFE5
 15696                           fsr1h	equ	0xFE2
 15697                           fsr1l	equ	0xFE1
 15698                           indf2	equ	0xFDF
 15699                           postinc2	equ	0xFDE
 15700                           postdec2	equ	0xFDD
 15701                           fsr2h	equ	0xFDA
 15702                           fsr2l	equ	0xFD9
 15703                           status	equ	0xFD8
 15704                           
 15705 ;; *************** function _FlashSampleWrite *****************
 15706 ;; Defined at:
 15707 ;;		line 29 in file "FlashApp.c"
 15708 ;; Parameters:    Size  Location     Type
 15709 ;;  sampleData      2   44[COMRAM] unsigned int 
 15710 ;;  channelNum      1   46[COMRAM] unsigned char 
 15711 ;; Auto vars:     Size  Location     Type
 15712 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15713 ;; Return value:  Size  Location     Type
 15714 ;;                  1    wreg      void 
 15715 ;; Registers used:
 15716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15717 ;; Tracked objects:
 15718 ;;		On entry : 0/0
 15719 ;;		On exit  : 0/0
 15720 ;;		Unchanged: 0/0
 15721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15722 ;;      Params:         3       0       0       0       0       0       0
 15723 ;;      Locals:         0       2       0       0       0       0       0
 15724 ;;      Temps:          0       2       0       0       0       0       0
 15725 ;;      Totals:         3       4       0       0       0       0       0
 15726 ;;Total ram usage:        7 bytes
 15727 ;; Hardware stack levels used:    1
 15728 ;; Hardware stack levels required when called:    5
 15729 ;; This function calls:
 15730 ;;		_FLASH_IsWriteDone
 15731 ;;		_FLASH_WriteBlock
 15732 ;; This function is called by:
 15733 ;;		_AdcConvert
 15734 ;; This function uses a non-reentrant model
 15735 ;;
 15736                           
 15737                           	psect	text103
 15738  0018C0                     __ptext103:
 15739                           	opt stack 0
 15740  0018C0                     _FlashSampleWrite:
 15741                           	opt stack 24
 15742                           
 15743                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15744                           
 15745                           ;incstack = 0
 15746  0018C0  502F               	movf	FlashSampleWrite@channelNum,w,c
 15747  0018C2  0100               	movlb	0	; () banked
 15748  0018C4  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15749  0018C6  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15750  0018C8  0E0C               	movlw	12
 15751  0018CA                     u7675:
 15752  0018CA  90D8               	bcf	status,0,c
 15753  0018CC  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15754  0018CE  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15755  0018D0  2EE8               	decfsz	wreg,f,c
 15756  0018D2  D7FB               	goto	u7675
 15757  0018D4  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15758  0018D8  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15759                           
 15760                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15761  0018DC  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15762  0018DE  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15763  0018E0  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15764  0018E2  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15768  0018E4  90D8               	bcf	status,0,c
 15769  0018E6  35C6               	rlcf	_sampleCount& (0+255),w,b
 15770  0018E8  6ED9               	movwf	fsr2l,c
 15771  0018EA  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 15772  0018EC  6EDA               	movwf	fsr2h,c
 15773  0018EE  0E6E               	movlw	low _sampleArray
 15774  0018F0  26D9               	addwf	fsr2l,f,c
 15775  0018F2  0E01               	movlw	high _sampleArray
 15776  0018F4  22DA               	addwfc	fsr2h,f,c
 15777  0018F6  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15778  0018FA  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;FlashApp.c: 35: sampleCount ++;
 15782  0018FE  4BC6               	infsnz	_sampleCount& (0+255),f,b
 15783  001900  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 15784                           
 15785                           ; BSR set to: 0
 15786                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 15787  001902  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 15788  001906  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 15789  00190A  90D8               	bcf	status,0,c
 15790  00190C  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15791  00190E  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15792  001910  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 15793  001912  E104               	bnz	u7680
 15794  001914  0E40               	movlw	64
 15795  001916  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 15796  001918  A0D8               	btfss	status,0,c
 15797  00191A  0012               	return	
 15798  00191C                     u7680:
 15799                           
 15800                           ; BSR set to: 0
 15801  00191C  ECC3  F01B         	call	_FLASH_IsWriteDone	;wreg free
 15802  001920  0900               	iorlw	0
 15803  001922  B4D8               	btfsc	status,2,c
 15804  001924  0012               	return	
 15805                           
 15806                           ;FlashApp.c: 38: {
 15807                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 15808  001926  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 15809  00192A  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 15810  00192E  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 15811  001932  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 15812  001936  0E6E               	movlw	low _sampleArray
 15813  001938  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 15814  00193A  0E01               	movlw	high _sampleArray
 15815  00193C  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 15816  00193E  EC67  F010         	call	_FLASH_WriteBlock	;wreg free
 15817                           
 15818                           ;FlashApp.c: 40: writeAddress += (64);
 15819  001942  0E40               	movlw	64
 15820  001944  2642               	addwf	_writeAddress,f,c
 15821  001946  0E00               	movlw	0
 15822  001948  2243               	addwfc	_writeAddress+1,f,c
 15823  00194A  2244               	addwfc	_writeAddress+2,f,c
 15824  00194C  2245               	addwfc	_writeAddress+3,f,c
 15825                           
 15826                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 15827  00194E  5045               	movf	_writeAddress+3,w,c
 15828  001950  1044               	iorwf	_writeAddress+2,w,c
 15829  001952  E106               	bnz	u7700
 15830  001954  0EF0               	movlw	240
 15831  001956  5C42               	subwf	_writeAddress,w,c
 15832  001958  0E7F               	movlw	127
 15833  00195A  5843               	subwfb	_writeAddress+1,w,c
 15834  00195C  A0D8               	btfss	status,0,c
 15835  00195E  D018               	goto	l283
 15836  001960                     u7700:
 15837                           
 15838                           ;FlashApp.c: 42: {
 15839                           ;FlashApp.c: 43: writeAddress = 0x4000;
 15840  001960  0E00               	movlw	0
 15841  001962  6E42               	movwf	_writeAddress,c
 15842  001964  0E40               	movlw	64
 15843  001966  6E43               	movwf	_writeAddress+1,c
 15844  001968  0E00               	movlw	0
 15845  00196A  6E44               	movwf	_writeAddress+2,c
 15846  00196C  0E00               	movlw	0
 15847  00196E  6E45               	movwf	_writeAddress+3,c
 15848                           
 15849                           ;FlashApp.c: 44: isReWriteDone = 1;
 15850  001970  0E01               	movlw	1
 15851  001972  6E3B               	movwf	_isReWriteDone,c
 15852                           
 15853                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 15854  001974  0E40               	movlw	64
 15855  001976  0100               	movlb	0	; () banked
 15856  001978  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 15857  00197A  11F7               	iorwf	_readAddress& (0+255),w,b
 15858  00197C  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 15859  00197E  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 15860  001980  A4D8               	btfss	status,2,c
 15861  001982  D006               	goto	l283
 15862                           
 15863                           ; BSR set to: 0
 15864                           ;FlashApp.c: 46: {
 15865                           ;FlashApp.c: 47: readAddress += (64);
 15866  001984  0E40               	movlw	64
 15867  001986  27F7               	addwf	_readAddress& (0+255),f,b
 15868  001988  0E00               	movlw	0
 15869  00198A  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 15870  00198C  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 15871  00198E  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 15872  001990                     l283:
 15873                           
 15874                           ;FlashApp.c: 48: }
 15875                           ;FlashApp.c: 49: }
 15876                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 15877                           
 15878                           ; BSR set to: 0
 15879  001990  0431               	decf	_numOfValidateSamples,w,c
 15880  001992  0EFF               	movlw	255
 15881  001994  5832               	subwfb	_numOfValidateSamples+1,w,c
 15882  001996  0EFF               	movlw	255
 15883  001998  5833               	subwfb	_numOfValidateSamples+2,w,c
 15884  00199A  0EFF               	movlw	255
 15885  00199C  5834               	subwfb	_numOfValidateSamples+3,w,c
 15886  00199E  B0D8               	btfsc	status,0,c
 15887  0019A0  D006               	goto	l284
 15888                           
 15889                           ;FlashApp.c: 52: {
 15890                           ;FlashApp.c: 53: numOfValidateSamples++;
 15891  0019A2  0E01               	movlw	1
 15892  0019A4  2631               	addwf	_numOfValidateSamples,f,c
 15893  0019A6  0E00               	movlw	0
 15894  0019A8  2232               	addwfc	_numOfValidateSamples+1,f,c
 15895  0019AA  2233               	addwfc	_numOfValidateSamples+2,f,c
 15896  0019AC  2234               	addwfc	_numOfValidateSamples+3,f,c
 15897  0019AE                     l284:
 15898                           
 15899                           ;FlashApp.c: 54: }
 15900                           ;FlashApp.c: 55: sampleCount = 0;
 15901  0019AE  0E00               	movlw	0
 15902  0019B0  0100               	movlb	0	; () banked
 15903  0019B2  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 15904  0019B4  0E00               	movlw	0
 15905  0019B6  6FC6               	movwf	_sampleCount& (0+255),b
 15906  0019B8  0012               	return	
 15907  0019BA                     __end_of_FlashSampleWrite:
 15908                           	opt stack 0
 15909                           tosu	equ	0xFFF
 15910                           tosh	equ	0xFFE
 15911                           tosl	equ	0xFFD
 15912                           pclath	equ	0xFFA
 15913                           tblptru	equ	0xFF8
 15914                           tblptrh	equ	0xFF7
 15915                           tblptrl	equ	0xFF6
 15916                           tablat	equ	0xFF5
 15917                           prodh	equ	0xFF4
 15918                           prodl	equ	0xFF3
 15919                           intcon	equ	0xFF2
 15920                           intcon2	equ	0xFF1
 15921                           postinc0	equ	0xFEE
 15922                           wreg	equ	0xFE8
 15923                           indf1	equ	0xFE7
 15924                           postdec1	equ	0xFE5
 15925                           fsr1h	equ	0xFE2
 15926                           fsr1l	equ	0xFE1
 15927                           indf2	equ	0xFDF
 15928                           postinc2	equ	0xFDE
 15929                           postdec2	equ	0xFDD
 15930                           fsr2h	equ	0xFDA
 15931                           fsr2l	equ	0xFD9
 15932                           status	equ	0xFD8
 15933                           
 15934 ;; *************** function _FLASH_WriteBlock *****************
 15935 ;; Defined at:
 15936 ;;		line 93 in file "mcc_generated_files/memory.c"
 15937 ;; Parameters:    Size  Location     Type
 15938 ;;  writeAddr       4   28[COMRAM] unsigned long 
 15939 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 15940 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 15941 ;; Auto vars:     Size  Location     Type
 15942 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 15943 ;;  i               1   43[COMRAM] unsigned char 
 15944 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;                  1    wreg      char 
 15947 ;; Registers used:
 15948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15949 ;; Tracked objects:
 15950 ;;		On entry : 0/0
 15951 ;;		On exit  : 0/0
 15952 ;;		Unchanged: 0/0
 15953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15954 ;;      Params:         6       0       0       0       0       0       0
 15955 ;;      Locals:         6       0       0       0       0       0       0
 15956 ;;      Temps:          4       0       0       0       0       0       0
 15957 ;;      Totals:        16       0       0       0       0       0       0
 15958 ;;Total ram usage:       16 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; Hardware stack levels required when called:    4
 15961 ;; This function calls:
 15962 ;;		_FLASH_EraseBlock
 15963 ;; This function is called by:
 15964 ;;		_FlashSampleWrite
 15965 ;;		_FlashTest
 15966 ;;		_FLASH_WriteByte
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           	psect	text104
 15971  0020CE                     __ptext104:
 15972                           	opt stack 0
 15973  0020CE                     _FLASH_WriteBlock:
 15974                           	opt stack 24
 15975                           
 15976                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 15977                           
 15978                           ;incstack = 0
 15979  0020CE  0EC0               	movlw	192
 15980  0020D0  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 15981  0020D2  0E7F               	movlw	127
 15982  0020D4  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 15983  0020D6  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 15984  0020DA  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 15985  0020DE  5023               	movf	??_FLASH_WriteBlock,w,c
 15986  0020E0  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 15987  0020E2  5024               	movf	??_FLASH_WriteBlock+1,w,c
 15988  0020E4  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 15989  0020E6  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 15990  0020EA  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 15991  0020EE  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 15992  0020F0  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 15993                           
 15994                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 15995  0020F2  0E00               	movlw	0
 15996  0020F4  BEF2               	btfsc	intcon,7,c	;volatile
 15997  0020F6  0E01               	movlw	1
 15998  0020F8  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 15999                           
 16000                           ;memory.c: 97: uint8_t i;
 16001                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16002  0020FA  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16003  0020FC  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16004  0020FE  E144               	bnz	l948
 16005  002100  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16006  002102  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16007  002104  E141               	bnz	l948
 16008  002106  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16009  002108  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16010  00210A  E13E               	bnz	l948
 16011  00210C  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16012  00210E  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16013  002110  A4D8               	btfss	status,2,c
 16014  002112  0012               	return	
 16015                           
 16016                           ;memory.c: 103: }
 16017                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16018                           
 16019                           ;memory.c: 101: {
 16020                           ;memory.c: 102: return -1;
 16021                           ;	Return value of _FLASH_WriteBlock is never used
 16022  002114  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16023  002118  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16024  00211C  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16025  002120  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16026  002124  ECEC  F019         	call	_FLASH_EraseBlock	;wreg free
 16027                           
 16028                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16029  002128  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16030                           
 16031                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16032  00212C  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16033                           
 16034                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16035  002130  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16036                           
 16037                           ;memory.c: 114: for (i=0; i<(64); i++)
 16038  002134  0E00               	movlw	0
 16039  002136  6E2C               	movwf	FLASH_WriteBlock@i,c
 16040  002138                     l7288:
 16041  002138  0E3F               	movlw	63
 16042  00213A  642C               	cpfsgt	FLASH_WriteBlock@i,c
 16043  00213C  D001               	goto	l949
 16044  00213E  D013               	goto	u7150
 16045  002140                     l949:
 16046                           
 16047                           ;memory.c: 115: {
 16048                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16049  002140  502C               	movf	FLASH_WriteBlock@i,w,c
 16050  002142  0D01               	mullw	1
 16051  002144  50F3               	movf	prodl,w,c
 16052  002146  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16053  002148  6ED9               	movwf	fsr2l,c
 16054  00214A  50F4               	movf	prodh,w,c
 16055  00214C  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16056  00214E  6EDA               	movwf	fsr2h,c
 16057  002150  50DF               	movf	indf2,w,c
 16058  002152  6EF5               	movwf	tablat,c	;volatile
 16059                           
 16060                           ;memory.c: 118: if (i == ((64)-1))
 16061  002154  0E3F               	movlw	63
 16062  002156  182C               	xorwf	FLASH_WriteBlock@i,w,c
 16063  002158  A4D8               	btfss	status,2,c
 16064  00215A  D002               	goto	l951
 16065  00215C  000C               	tblwt		*	;# 
 16066                           
 16067                           ;memory.c: 121: }
 16068  00215E  D001               	goto	l952
 16069  002160                     l951:
 16070  002160  000D               	tblwt		*+	;# 
 16071  002162                     l952:
 16072  002162  2A2C               	incf	FLASH_WriteBlock@i,f,c
 16073  002164  D7E9               	goto	l7288
 16074  002166                     u7150:
 16075                           
 16076                           ;memory.c: 125: }
 16077                           ;memory.c: 126: }
 16078                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16079  002166  88A1               	bsf	4001,4,c	;volatile
 16080                           
 16081                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16082  002168  8EA6               	bsf	4006,7,c	;volsfr
 16083                           
 16084                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16085  00216A  9CA6               	bcf	4006,6,c	;volsfr
 16086                           
 16087                           ;memory.c: 131: EECON1bits.WREN = 1;
 16088  00216C  84A6               	bsf	4006,2,c	;volsfr
 16089                           
 16090                           ;memory.c: 132: INTCONbits.GIE = 0;
 16091  00216E  9EF2               	bcf	intcon,7,c	;volatile
 16092                           
 16093                           ;memory.c: 133: EECON2 = 0x55;
 16094  002170  0E55               	movlw	85
 16095  002172  6EA7               	movwf	4007,c	;volsfr
 16096                           
 16097                           ;memory.c: 134: EECON2 = 0xAA;
 16098  002174  0EAA               	movlw	170
 16099  002176  6EA7               	movwf	4007,c	;volsfr
 16100                           
 16101                           ;memory.c: 135: EECON1bits.WR = 1;
 16102  002178  82A6               	bsf	4006,1,c	;volsfr
 16103                           
 16104                           ;memory.c: 137: EECON1bits.WREN = 0;
 16105  00217A  94A6               	bcf	4006,2,c	;volsfr
 16106                           
 16107                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16108  00217C  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16109  00217E  D002               	bra	u7165
 16110  002180  9EF2               	bcf	intcon,7,c	;volatile
 16111  002182  D001               	bra	u7166
 16112  002184                     u7165:
 16113  002184  8EF2               	bsf	intcon,7,c	;volatile
 16114  002186                     u7166:
 16115  002186  0012               	return	
 16116  002188                     l948:
 16117  002188  0012               	return		;funcret
 16118  00218A                     __end_of_FLASH_WriteBlock:
 16119                           	opt stack 0
 16120                           tosu	equ	0xFFF
 16121                           tosh	equ	0xFFE
 16122                           tosl	equ	0xFFD
 16123                           pclath	equ	0xFFA
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           intcon2	equ	0xFF1
 16132                           postinc0	equ	0xFEE
 16133                           wreg	equ	0xFE8
 16134                           indf1	equ	0xFE7
 16135                           postdec1	equ	0xFE5
 16136                           fsr1h	equ	0xFE2
 16137                           fsr1l	equ	0xFE1
 16138                           indf2	equ	0xFDF
 16139                           postinc2	equ	0xFDE
 16140                           postdec2	equ	0xFDD
 16141                           fsr2h	equ	0xFDA
 16142                           fsr2l	equ	0xFD9
 16143                           status	equ	0xFD8
 16144                           
 16145 ;; *************** function _FLASH_EraseBlock *****************
 16146 ;; Defined at:
 16147 ;;		line 144 in file "mcc_generated_files/memory.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16152 ;; Return value:  Size  Location     Type
 16153 ;;                  1    wreg      void 
 16154 ;; Registers used:
 16155 ;;		wreg, status,2
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16161 ;;      Params:         4       0       0       0       0       0       0
 16162 ;;      Locals:         1       0       0       0       0       0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0
 16164 ;;      Totals:         5       0       0       0       0       0       0
 16165 ;;Total ram usage:        5 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    3
 16168 ;; This function calls:
 16169 ;;		Nothing
 16170 ;; This function is called by:
 16171 ;;		_FLASH_WriteBlock
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           	psect	text105
 16176  0033D8                     __ptext105:
 16177                           	opt stack 0
 16178  0033D8                     _FLASH_EraseBlock:
 16179                           	opt stack 24
 16180                           
 16181                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16182                           
 16183                           ;incstack = 0
 16184  0033D8  0E00               	movlw	0
 16185  0033DA  BEF2               	btfsc	intcon,7,c	;volatile
 16186  0033DC  0E01               	movlw	1
 16187  0033DE  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16188                           
 16189                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16190  0033E0  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16191                           
 16192                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16193  0033E4  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16194                           
 16195                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16196  0033E8  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16197                           
 16198                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16199  0033EC  8EA6               	bsf	4006,7,c	;volsfr
 16200                           
 16201                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16202  0033EE  9CA6               	bcf	4006,6,c	;volsfr
 16203                           
 16204                           ;memory.c: 154: EECON1bits.WREN = 1;
 16205  0033F0  84A6               	bsf	4006,2,c	;volsfr
 16206                           
 16207                           ;memory.c: 155: EECON1bits.FREE = 1;
 16208  0033F2  88A6               	bsf	4006,4,c	;volsfr
 16209                           
 16210                           ;memory.c: 156: INTCONbits.GIE = 0;
 16211  0033F4  9EF2               	bcf	intcon,7,c	;volatile
 16212                           
 16213                           ;memory.c: 157: EECON2 = 0x55;
 16214  0033F6  0E55               	movlw	85
 16215  0033F8  6EA7               	movwf	4007,c	;volsfr
 16216                           
 16217                           ;memory.c: 158: EECON2 = 0xAA;
 16218  0033FA  0EAA               	movlw	170
 16219  0033FC  6EA7               	movwf	4007,c	;volsfr
 16220                           
 16221                           ;memory.c: 159: EECON1bits.WR = 1;
 16222  0033FE  82A6               	bsf	4006,1,c	;volsfr
 16223                           
 16224                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16225  003400  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16226  003402  D002               	bra	u6905
 16227  003404  9EF2               	bcf	intcon,7,c	;volatile
 16228  003406  D001               	bra	u6906
 16229  003408                     u6905:
 16230  003408  8EF2               	bsf	intcon,7,c	;volatile
 16231  00340A                     u6906:
 16232  00340A  0012               	return		;funcret
 16233  00340C                     __end_of_FLASH_EraseBlock:
 16234                           	opt stack 0
 16235                           tosu	equ	0xFFF
 16236                           tosh	equ	0xFFE
 16237                           tosl	equ	0xFFD
 16238                           pclath	equ	0xFFA
 16239                           tblptru	equ	0xFF8
 16240                           tblptrh	equ	0xFF7
 16241                           tblptrl	equ	0xFF6
 16242                           tablat	equ	0xFF5
 16243                           prodh	equ	0xFF4
 16244                           prodl	equ	0xFF3
 16245                           intcon	equ	0xFF2
 16246                           intcon2	equ	0xFF1
 16247                           postinc0	equ	0xFEE
 16248                           wreg	equ	0xFE8
 16249                           indf1	equ	0xFE7
 16250                           postdec1	equ	0xFE5
 16251                           fsr1h	equ	0xFE2
 16252                           fsr1l	equ	0xFE1
 16253                           indf2	equ	0xFDF
 16254                           postinc2	equ	0xFDE
 16255                           postdec2	equ	0xFDD
 16256                           fsr2h	equ	0xFDA
 16257                           fsr2l	equ	0xFD9
 16258                           status	equ	0xFD8
 16259                           
 16260 ;; *************** function _FLASH_IsWriteDone *****************
 16261 ;; Defined at:
 16262 ;;		line 189 in file "mcc_generated_files/memory.c"
 16263 ;; Parameters:    Size  Location     Type
 16264 ;;		None
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;		None
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  1    wreg      unsigned char 
 16269 ;; Registers used:
 16270 ;;		wreg
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16276 ;;      Params:         0       0       0       0       0       0       0
 16277 ;;      Locals:         0       0       0       0       0       0       0
 16278 ;;      Temps:          0       0       0       0       0       0       0
 16279 ;;      Totals:         0       0       0       0       0       0       0
 16280 ;;Total ram usage:        0 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    3
 16283 ;; This function calls:
 16284 ;;		Nothing
 16285 ;; This function is called by:
 16286 ;;		_FlashSampleWrite
 16287 ;;		_FlashReadUart
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           	psect	text106
 16292  003786                     __ptext106:
 16293                           	opt stack 0
 16294  003786                     _FLASH_IsWriteDone:
 16295                           	opt stack 24
 16296                           
 16297                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16298                           
 16299                           ;incstack = 0
 16300  003786  A2A6               	btfss	4006,1,c	;volsfr
 16301  003788  D001               	goto	u6731
 16302  00378A  D002               	goto	u6730
 16303  00378C                     u6731:
 16304  00378C  0E01               	movlw	1
 16305  00378E  0012               	return	
 16306  003790                     u6730:
 16307  003790  0E00               	movlw	0
 16308  003792  0012               	return	
 16309  003794                     __end_of_FLASH_IsWriteDone:
 16310                           	opt stack 0
 16311                           tosu	equ	0xFFF
 16312                           tosh	equ	0xFFE
 16313                           tosl	equ	0xFFD
 16314                           pclath	equ	0xFFA
 16315                           tblptru	equ	0xFF8
 16316                           tblptrh	equ	0xFF7
 16317                           tblptrl	equ	0xFF6
 16318                           tablat	equ	0xFF5
 16319                           prodh	equ	0xFF4
 16320                           prodl	equ	0xFF3
 16321                           intcon	equ	0xFF2
 16322                           intcon2	equ	0xFF1
 16323                           postinc0	equ	0xFEE
 16324                           wreg	equ	0xFE8
 16325                           indf1	equ	0xFE7
 16326                           postdec1	equ	0xFE5
 16327                           fsr1h	equ	0xFE2
 16328                           fsr1l	equ	0xFE1
 16329                           indf2	equ	0xFDF
 16330                           postinc2	equ	0xFDE
 16331                           postdec2	equ	0xFDD
 16332                           fsr2h	equ	0xFDA
 16333                           fsr2l	equ	0xFD9
 16334                           status	equ	0xFD8
 16335                           
 16336 ;; *************** function _ADC_GetConversion *****************
 16337 ;; Defined at:
 16338 ;;		line 106 in file "mcc_generated_files/adc.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;  channel         1    wreg     enum E6975
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  channel         1   27[COMRAM] enum E6975
 16343 ;; Return value:  Size  Location     Type
 16344 ;;                  2   23[COMRAM] unsigned int 
 16345 ;; Registers used:
 16346 ;;		wreg, status,2, status,0
 16347 ;; Tracked objects:
 16348 ;;		On entry : 0/0
 16349 ;;		On exit  : 0/0
 16350 ;;		Unchanged: 0/0
 16351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16352 ;;      Params:         2       0       0       0       0       0       0
 16353 ;;      Locals:         1       0       0       0       0       0       0
 16354 ;;      Temps:          2       0       0       0       0       0       0
 16355 ;;      Totals:         5       0       0       0       0       0       0
 16356 ;;Total ram usage:        5 bytes
 16357 ;; Hardware stack levels used:    1
 16358 ;; Hardware stack levels required when called:    3
 16359 ;; This function calls:
 16360 ;;		Nothing
 16361 ;; This function is called by:
 16362 ;;		_AdcConvert
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366                           	psect	text107
 16367  00343C                     __ptext107:
 16368                           	opt stack 0
 16369  00343C                     _ADC_GetConversion:
 16370                           	opt stack 26
 16371                           
 16372                           ;incstack = 0
 16373                           ;ADC_GetConversion@channel stored from wreg
 16374  00343C  6E1C               	movwf	ADC_GetConversion@channel,c
 16375                           
 16376                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16377  00343E  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16378  003442  461A               	rlncf	??_ADC_GetConversion,f,c
 16379  003444  461A               	rlncf	??_ADC_GetConversion,f,c
 16380  003446  50C2               	movf	4034,w,c	;volatile
 16381  003448  181A               	xorwf	??_ADC_GetConversion,w,c
 16382  00344A  0B83               	andlw	-125
 16383  00344C  181A               	xorwf	??_ADC_GetConversion,w,c
 16384  00344E  6EC2               	movwf	4034,c	;volatile
 16385                           
 16386                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16387  003450  80C2               	bsf	4034,0,c	;volatile
 16388                           
 16389                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16390  003452  82C2               	bsf	4034,1,c	;volatile
 16391  003454                     
 16392                           ;adc.c: 119: {
 16393  003454  B2C2               	btfsc	4034,1,c	;volatile
 16394  003456  D7FE               	goto	l1061
 16395                           
 16396                           ;adc.c: 120: }
 16397                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16398  003458  50C4               	movf	4036,w,c	;volatile
 16399  00345A  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16400  00345C  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16401  00345E  50C3               	movf	4035,w,c	;volatile
 16402  003460  241A               	addwf	??_ADC_GetConversion,w,c
 16403  003462  6E18               	movwf	?_ADC_GetConversion,c
 16404  003464  0E00               	movlw	0
 16405  003466  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16406  003468  6E19               	movwf	?_ADC_GetConversion+1,c
 16407  00346A  0012               	return	
 16408  00346C                     __end_of_ADC_GetConversion:
 16409                           	opt stack 0
 16410                           tosu	equ	0xFFF
 16411                           tosh	equ	0xFFE
 16412                           tosl	equ	0xFFD
 16413                           pclath	equ	0xFFA
 16414                           tblptru	equ	0xFF8
 16415                           tblptrh	equ	0xFF7
 16416                           tblptrl	equ	0xFF6
 16417                           tablat	equ	0xFF5
 16418                           prodh	equ	0xFF4
 16419                           prodl	equ	0xFF3
 16420                           intcon	equ	0xFF2
 16421                           intcon2	equ	0xFF1
 16422                           postinc0	equ	0xFEE
 16423                           wreg	equ	0xFE8
 16424                           indf1	equ	0xFE7
 16425                           postdec1	equ	0xFE5
 16426                           fsr1h	equ	0xFE2
 16427                           fsr1l	equ	0xFE1
 16428                           indf2	equ	0xFDF
 16429                           postinc2	equ	0xFDE
 16430                           postdec2	equ	0xFDD
 16431                           fsr2h	equ	0xFDA
 16432                           fsr2l	equ	0xFD9
 16433                           status	equ	0xFD8
 16434                           
 16435 ;; *************** function _INTERRUPT_InterruptManager *****************
 16436 ;; Defined at:
 16437 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;		None
 16440 ;; Auto vars:     Size  Location     Type
 16441 ;;		None
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  1    wreg      void 
 16444 ;; Registers used:
 16445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : 0/0
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16451 ;;      Params:         0       0       0       0       0       0       0
 16452 ;;      Locals:         0       0       0       0       0       0       0
 16453 ;;      Temps:         18       0       0       0       0       0       0
 16454 ;;      Totals:        18       0       0       0       0       0       0
 16455 ;;Total ram usage:       18 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    2
 16458 ;; This function calls:
 16459 ;;		_EUSART1_Receive_ISR
 16460 ;;		_EUSART1_Transmit_ISR
 16461 ;;		_MEMORY_ISR
 16462 ;;		_PIN_MANAGER_IOC
 16463 ;;		_TMR0_ISR
 16464 ;; This function is called by:
 16465 ;;		Interrupt level 2
 16466 ;; This function uses a non-reentrant model
 16467 ;;
 16468                           
 16469                           	psect	intcode
 16470  000008                     __pintcode:
 16471                           	opt stack 0
 16472  000008                     _INTERRUPT_InterruptManager:
 16473                           	opt stack 21
 16474                           
 16475                           ;incstack = 0
 16476  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16477  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16478  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16479  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16480  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16481  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16482  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16483  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16484  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16485  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16486  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16487  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16488  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16489  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16490  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16491  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16492  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16493  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16494  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16495                           
 16496                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16497  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16498  000054  A0F2               	btfss	intcon,0,c	;volatile
 16499  000056  D003               	goto	i2l786
 16500                           
 16501                           ;interrupt_manager.c: 61: {
 16502                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16503  000058  ECFD  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16504                           
 16505                           ;interrupt_manager.c: 63: }
 16506  00005C  D019               	goto	i2l795
 16507  00005E                     i2l786:
 16508                           
 16509                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16510  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16511  000060  A4F2               	btfss	intcon,2,c	;volatile
 16512  000062  D003               	goto	i2l788
 16513                           
 16514                           ;interrupt_manager.c: 65: {
 16515                           ;interrupt_manager.c: 66: TMR0_ISR();
 16516  000064  EC1C  F012         	call	_TMR0_ISR	;wreg free
 16517                           
 16518                           ;interrupt_manager.c: 67: }
 16519  000068  D013               	goto	i2l795
 16520  00006A                     i2l788:
 16521                           
 16522                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16523  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16524  00006C  D011               	goto	i2l795
 16525                           
 16526                           ;interrupt_manager.c: 69: {
 16527                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16528  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16529  000070  A8A1               	btfss	4001,4,c	;volatile
 16530  000072  D003               	goto	i2l791
 16531                           
 16532                           ;interrupt_manager.c: 71: {
 16533                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16534  000074  ECFF  F01B         	call	_MEMORY_ISR	;wreg free
 16535                           
 16536                           ;interrupt_manager.c: 73: }
 16537  000078  D00B               	goto	i2l795
 16538  00007A                     i2l791:
 16539                           
 16540                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16541  00007A  B89D               	btfsc	3997,4,c	;volatile
 16542  00007C  A89E               	btfss	3998,4,c	;volatile
 16543  00007E  D003               	goto	i2l793
 16544                           
 16545                           ;interrupt_manager.c: 75: {
 16546                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16547  000080  EC2F  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 16548                           
 16549                           ;interrupt_manager.c: 77: }
 16550  000084  D005               	goto	i2l795
 16551  000086                     i2l793:
 16552                           
 16553                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16554  000086  BA9D               	btfsc	3997,5,c	;volatile
 16555  000088  AA9E               	btfss	3998,5,c	;volatile
 16556  00008A  D002               	goto	i2l795
 16557                           
 16558                           ;interrupt_manager.c: 79: {
 16559                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16560  00008C  EC36  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16561  000090                     i2l795:
 16562                           
 16563                           ;interrupt_manager.c: 87: else
 16564                           ;interrupt_manager.c: 88: {
 16565                           
 16566                           ;interrupt_manager.c: 85: }
 16567                           ;interrupt_manager.c: 86: }
 16568                           
 16569                           ;interrupt_manager.c: 82: else
 16570                           ;interrupt_manager.c: 83: {
 16571  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16572  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16573  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16574  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16575  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16576  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16577  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16578  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16579  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16580  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16581  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16582  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16583  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16584  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16585  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16586  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16587  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16588  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16589  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16590  0000DA  0011               	retfie		f
 16591  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16592                           	opt stack 0
 16593                           tosu	equ	0xFFF
 16594                           tosh	equ	0xFFE
 16595                           tosl	equ	0xFFD
 16596                           pclatu	equ	0xFFB
 16597                           pclath	equ	0xFFA
 16598                           tblptru	equ	0xFF8
 16599                           tblptrh	equ	0xFF7
 16600                           tblptrl	equ	0xFF6
 16601                           tablat	equ	0xFF5
 16602                           prodh	equ	0xFF4
 16603                           prodl	equ	0xFF3
 16604                           intcon	equ	0xFF2
 16605                           intcon2	equ	0xFF1
 16606                           postinc0	equ	0xFEE
 16607                           fsr0h	equ	0xFEA
 16608                           fsr0l	equ	0xFE9
 16609                           wreg	equ	0xFE8
 16610                           indf1	equ	0xFE7
 16611                           postdec1	equ	0xFE5
 16612                           fsr1h	equ	0xFE2
 16613                           fsr1l	equ	0xFE1
 16614                           indf2	equ	0xFDF
 16615                           postinc2	equ	0xFDE
 16616                           postdec2	equ	0xFDD
 16617                           fsr2h	equ	0xFDA
 16618                           fsr2l	equ	0xFD9
 16619                           status	equ	0xFD8
 16620                           
 16621 ;; *************** function _TMR0_ISR *****************
 16622 ;; Defined at:
 16623 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16624 ;; Parameters:    Size  Location     Type
 16625 ;;		None
 16626 ;; Auto vars:     Size  Location     Type
 16627 ;;		None
 16628 ;; Return value:  Size  Location     Type
 16629 ;;                  1    wreg      void 
 16630 ;; Registers used:
 16631 ;;		wreg, status,2, status,0, cstack
 16632 ;; Tracked objects:
 16633 ;;		On entry : 0/0
 16634 ;;		On exit  : 0/0
 16635 ;;		Unchanged: 0/0
 16636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16637 ;;      Params:         0       0       0       0       0       0       0
 16638 ;;      Locals:         0       0       0       0       0       0       0
 16639 ;;      Temps:          0       0       0       0       0       0       0
 16640 ;;      Totals:         0       0       0       0       0       0       0
 16641 ;;Total ram usage:        0 bytes
 16642 ;; Hardware stack levels used:    1
 16643 ;; Hardware stack levels required when called:    1
 16644 ;; This function calls:
 16645 ;;		___lwmod
 16646 ;; This function is called by:
 16647 ;;		_INTERRUPT_InterruptManager
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           	psect	text109
 16652  002438                     __ptext109:
 16653                           	opt stack 0
 16654  002438                     _TMR0_ISR:
 16655                           	opt stack 21
 16656                           
 16657                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16658                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16659                           
 16660                           ;incstack = 0
 16661  002438  94F2               	bcf	intcon,2,c	;volatile
 16662                           
 16663                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16664  00243A  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16665  00243C  6ED7               	movwf	4055,c	;volatile
 16666                           
 16667                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16668  00243E  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16669                           
 16670                           ;tmr0.c: 146: CountCallBack ++;
 16671  002442  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16672  002444  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16673                           
 16674                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16675  002446  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16676  00244A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16677  00244E  0E00               	movlw	0
 16678  002450  6E04               	movwf	___lwmod@divisor+1,c
 16679  002452  0E14               	movlw	20
 16680  002454  6E03               	movwf	___lwmod@divisor,c
 16681  002456  EC7A  F018         	call	___lwmod	;wreg free
 16682  00245A  5001               	movf	?___lwmod,w,c
 16683  00245C  1002               	iorwf	?___lwmod+1,w,c
 16684  00245E  A4D8               	btfss	status,2,c
 16685  002460  D003               	goto	i2l1017
 16686                           
 16687                           ;tmr0.c: 148: {
 16688                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16689  002462  0E01               	movlw	1
 16690  002464  0100               	movlb	0	; () banked
 16691  002466  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16692  002468                     i2l1017:
 16693                           
 16694                           ;tmr0.c: 150: }
 16695                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16696                           
 16697                           ; BSR set to: 0
 16698  002468  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16699  00246C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16700  002470  0E00               	movlw	0
 16701  002472  6E04               	movwf	___lwmod@divisor+1,c
 16702  002474  0E32               	movlw	50
 16703  002476  6E03               	movwf	___lwmod@divisor,c
 16704  002478  EC7A  F018         	call	___lwmod	;wreg free
 16705  00247C  5001               	movf	?___lwmod,w,c
 16706  00247E  1002               	iorwf	?___lwmod+1,w,c
 16707  002480  A4D8               	btfss	status,2,c
 16708  002482  D003               	goto	i2l1018
 16709                           
 16710                           ;tmr0.c: 153: {
 16711                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16712  002484  0E01               	movlw	1
 16713  002486  0100               	movlb	0	; () banked
 16714  002488  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16715  00248A                     i2l1018:
 16716                           
 16717                           ;tmr0.c: 155: }
 16718                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16719                           
 16720                           ; BSR set to: 0
 16721  00248A  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16722  00248E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16723  002492  0E01               	movlw	1
 16724  002494  6E04               	movwf	___lwmod@divisor+1,c
 16725  002496  0E2C               	movlw	44
 16726  002498  6E03               	movwf	___lwmod@divisor,c
 16727  00249A  EC7A  F018         	call	___lwmod	;wreg free
 16728  00249E  5001               	movf	?___lwmod,w,c
 16729  0024A0  1002               	iorwf	?___lwmod+1,w,c
 16730  0024A2  A4D8               	btfss	status,2,c
 16731  0024A4  D003               	goto	i2l1019
 16732                           
 16733                           ;tmr0.c: 157: {
 16734                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16735  0024A6  0E01               	movlw	1
 16736  0024A8  0100               	movlb	0	; () banked
 16737  0024AA  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16738  0024AC                     i2l1019:
 16739                           
 16740                           ;tmr0.c: 159: }
 16741                           ;tmr0.c: 161: CountCallBack %= 300;
 16742                           
 16743                           ; BSR set to: 0
 16744  0024AC  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16745  0024B0  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16746  0024B4  0E01               	movlw	1
 16747  0024B6  6E04               	movwf	___lwmod@divisor+1,c
 16748  0024B8  0E2C               	movlw	44
 16749  0024BA  6E03               	movwf	___lwmod@divisor,c
 16750  0024BC  EC7A  F018         	call	___lwmod	;wreg free
 16751  0024C0  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16752  0024C4  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16753  0024C8  0012               	return		;funcret
 16754  0024CA                     __end_of_TMR0_ISR:
 16755                           	opt stack 0
 16756                           tosu	equ	0xFFF
 16757                           tosh	equ	0xFFE
 16758                           tosl	equ	0xFFD
 16759                           pclatu	equ	0xFFB
 16760                           pclath	equ	0xFFA
 16761                           tblptru	equ	0xFF8
 16762                           tblptrh	equ	0xFF7
 16763                           tblptrl	equ	0xFF6
 16764                           tablat	equ	0xFF5
 16765                           prodh	equ	0xFF4
 16766                           prodl	equ	0xFF3
 16767                           intcon	equ	0xFF2
 16768                           intcon2	equ	0xFF1
 16769                           postinc0	equ	0xFEE
 16770                           fsr0h	equ	0xFEA
 16771                           fsr0l	equ	0xFE9
 16772                           wreg	equ	0xFE8
 16773                           indf1	equ	0xFE7
 16774                           postdec1	equ	0xFE5
 16775                           fsr1h	equ	0xFE2
 16776                           fsr1l	equ	0xFE1
 16777                           indf2	equ	0xFDF
 16778                           postinc2	equ	0xFDE
 16779                           postdec2	equ	0xFDD
 16780                           fsr2h	equ	0xFDA
 16781                           fsr2l	equ	0xFD9
 16782                           status	equ	0xFD8
 16783                           
 16784 ;; *************** function ___lwmod *****************
 16785 ;; Defined at:
 16786 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16787 ;; Parameters:    Size  Location     Type
 16788 ;;  dividend        2    0[COMRAM] unsigned int 
 16789 ;;  divisor         2    2[COMRAM] unsigned int 
 16790 ;; Auto vars:     Size  Location     Type
 16791 ;;  counter         1    4[COMRAM] unsigned char 
 16792 ;; Return value:  Size  Location     Type
 16793 ;;                  2    0[COMRAM] unsigned int 
 16794 ;; Registers used:
 16795 ;;		wreg, status,2, status,0
 16796 ;; Tracked objects:
 16797 ;;		On entry : 0/0
 16798 ;;		On exit  : 0/0
 16799 ;;		Unchanged: 0/0
 16800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16801 ;;      Params:         4       0       0       0       0       0       0
 16802 ;;      Locals:         1       0       0       0       0       0       0
 16803 ;;      Temps:          0       0       0       0       0       0       0
 16804 ;;      Totals:         5       0       0       0       0       0       0
 16805 ;;Total ram usage:        5 bytes
 16806 ;; Hardware stack levels used:    1
 16807 ;; This function calls:
 16808 ;;		Nothing
 16809 ;; This function is called by:
 16810 ;;		_TMR0_ISR
 16811 ;;		_segmentCounter
 16812 ;; This function uses a non-reentrant model
 16813 ;;
 16814                           
 16815                           	psect	text110
 16816  0030F4                     __ptext110:
 16817                           	opt stack 0
 16818  0030F4                     ___lwmod:
 16819                           	opt stack 21
 16820                           
 16821                           ;incstack = 0
 16822  0030F4  5003               	movf	___lwmod@divisor,w,c
 16823  0030F6  1004               	iorwf	___lwmod@divisor+1,w,c
 16824  0030F8  B4D8               	btfsc	status,2,c
 16825  0030FA  D018               	goto	i2l1862
 16826  0030FC  0E01               	movlw	1
 16827  0030FE  6E05               	movwf	___lwmod@counter,c
 16828  003100  D004               	goto	i2l1857
 16829  003102  90D8               	bcf	status,0,c
 16830  003104  3603               	rlcf	___lwmod@divisor,f,c
 16831  003106  3604               	rlcf	___lwmod@divisor+1,f,c
 16832  003108  2A05               	incf	___lwmod@counter,f,c
 16833  00310A                     i2l1857:
 16834  00310A  AE04               	btfss	___lwmod@divisor+1,7,c
 16835  00310C  D7FA               	goto	i2l1858
 16836  00310E                     i2u517_40:
 16837  00310E  5003               	movf	___lwmod@divisor,w,c
 16838  003110  5C01               	subwf	___lwmod@dividend,w,c
 16839  003112  5004               	movf	___lwmod@divisor+1,w,c
 16840  003114  5802               	subwfb	___lwmod@dividend+1,w,c
 16841  003116  A0D8               	btfss	status,0,c
 16842  003118  D004               	goto	i2l1861
 16843  00311A  5003               	movf	___lwmod@divisor,w,c
 16844  00311C  5E01               	subwf	___lwmod@dividend,f,c
 16845  00311E  5004               	movf	___lwmod@divisor+1,w,c
 16846  003120  5A02               	subwfb	___lwmod@dividend+1,f,c
 16847  003122                     i2l1861:
 16848  003122  90D8               	bcf	status,0,c
 16849  003124  3204               	rrcf	___lwmod@divisor+1,f,c
 16850  003126  3203               	rrcf	___lwmod@divisor,f,c
 16851  003128  2E05               	decfsz	___lwmod@counter,f,c
 16852  00312A  D7F1               	goto	i2u517_40
 16853  00312C                     i2l1862:
 16854  00312C  C001  F001         	movff	___lwmod@dividend,?___lwmod
 16855  003130  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 16856  003134  0012               	return		;funcret
 16857  003136                     __end_of___lwmod:
 16858                           	opt stack 0
 16859                           tosu	equ	0xFFF
 16860                           tosh	equ	0xFFE
 16861                           tosl	equ	0xFFD
 16862                           pclatu	equ	0xFFB
 16863                           pclath	equ	0xFFA
 16864                           tblptru	equ	0xFF8
 16865                           tblptrh	equ	0xFF7
 16866                           tblptrl	equ	0xFF6
 16867                           tablat	equ	0xFF5
 16868                           prodh	equ	0xFF4
 16869                           prodl	equ	0xFF3
 16870                           intcon	equ	0xFF2
 16871                           intcon2	equ	0xFF1
 16872                           postinc0	equ	0xFEE
 16873                           fsr0h	equ	0xFEA
 16874                           fsr0l	equ	0xFE9
 16875                           wreg	equ	0xFE8
 16876                           indf1	equ	0xFE7
 16877                           postdec1	equ	0xFE5
 16878                           fsr1h	equ	0xFE2
 16879                           fsr1l	equ	0xFE1
 16880                           indf2	equ	0xFDF
 16881                           postinc2	equ	0xFDE
 16882                           postdec2	equ	0xFDD
 16883                           fsr2h	equ	0xFDA
 16884                           fsr2l	equ	0xFD9
 16885                           status	equ	0xFD8
 16886                           
 16887 ;; *************** function _PIN_MANAGER_IOC *****************
 16888 ;; Defined at:
 16889 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 16890 ;; Parameters:    Size  Location     Type
 16891 ;;		None
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;		None
 16894 ;; Return value:  Size  Location     Type
 16895 ;;                  1    wreg      void 
 16896 ;; Registers used:
 16897 ;;		None
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16903 ;;      Params:         0       0       0       0       0       0       0
 16904 ;;      Locals:         0       0       0       0       0       0       0
 16905 ;;      Temps:          0       0       0       0       0       0       0
 16906 ;;      Totals:         0       0       0       0       0       0       0
 16907 ;;Total ram usage:        0 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; This function calls:
 16910 ;;		Nothing
 16911 ;; This function is called by:
 16912 ;;		_INTERRUPT_InterruptManager
 16913 ;; This function uses a non-reentrant model
 16914 ;;
 16915                           
 16916                           	psect	text111
 16917  0037FA                     __ptext111:
 16918                           	opt stack 0
 16919  0037FA                     _PIN_MANAGER_IOC:
 16920                           	opt stack 22
 16921                           
 16922                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 16923                           
 16924                           ;incstack = 0
 16925  0037FA  90F2               	bcf	intcon,0,c	;volatile
 16926  0037FC  0012               	return		;funcret
 16927  0037FE                     __end_of_PIN_MANAGER_IOC:
 16928                           	opt stack 0
 16929                           tosu	equ	0xFFF
 16930                           tosh	equ	0xFFE
 16931                           tosl	equ	0xFFD
 16932                           pclatu	equ	0xFFB
 16933                           pclath	equ	0xFFA
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon2	equ	0xFF1
 16942                           postinc0	equ	0xFEE
 16943                           fsr0h	equ	0xFEA
 16944                           fsr0l	equ	0xFE9
 16945                           wreg	equ	0xFE8
 16946                           indf1	equ	0xFE7
 16947                           postdec1	equ	0xFE5
 16948                           fsr1h	equ	0xFE2
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _MEMORY_ISR *****************
 16958 ;; Defined at:
 16959 ;;		line 206 in file "mcc_generated_files/memory.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;		None
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;		None
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		None
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16973 ;;      Params:         0       0       0       0       0       0       0
 16974 ;;      Locals:         0       0       0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0
 16976 ;;      Totals:         0       0       0       0       0       0       0
 16977 ;;Total ram usage:        0 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; This function calls:
 16980 ;;		Nothing
 16981 ;; This function is called by:
 16982 ;;		_INTERRUPT_InterruptManager
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           	psect	text112
 16987  0037FE                     __ptext112:
 16988                           	opt stack 0
 16989  0037FE                     _MEMORY_ISR:
 16990                           	opt stack 22
 16991                           
 16992                           ;memory.c: 209: PIR2bits.EEIF = 0;
 16993                           
 16994                           ;incstack = 0
 16995  0037FE  98A1               	bcf	4001,4,c	;volatile
 16996  003800  0012               	return		;funcret
 16997  003802                     __end_of_MEMORY_ISR:
 16998                           	opt stack 0
 16999                           tosu	equ	0xFFF
 17000                           tosh	equ	0xFFE
 17001                           tosl	equ	0xFFD
 17002                           pclatu	equ	0xFFB
 17003                           pclath	equ	0xFFA
 17004                           tblptru	equ	0xFF8
 17005                           tblptrh	equ	0xFF7
 17006                           tblptrl	equ	0xFF6
 17007                           tablat	equ	0xFF5
 17008                           prodh	equ	0xFF4
 17009                           prodl	equ	0xFF3
 17010                           intcon	equ	0xFF2
 17011                           intcon2	equ	0xFF1
 17012                           postinc0	equ	0xFEE
 17013                           fsr0h	equ	0xFEA
 17014                           fsr0l	equ	0xFE9
 17015                           wreg	equ	0xFE8
 17016                           indf1	equ	0xFE7
 17017                           postdec1	equ	0xFE5
 17018                           fsr1h	equ	0xFE2
 17019                           fsr1l	equ	0xFE1
 17020                           indf2	equ	0xFDF
 17021                           postinc2	equ	0xFDE
 17022                           postdec2	equ	0xFDD
 17023                           fsr2h	equ	0xFDA
 17024                           fsr2l	equ	0xFD9
 17025                           status	equ	0xFD8
 17026                           
 17027 ;; *************** function _EUSART1_Transmit_ISR *****************
 17028 ;; Defined at:
 17029 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17030 ;; Parameters:    Size  Location     Type
 17031 ;;		None
 17032 ;; Auto vars:     Size  Location     Type
 17033 ;;		None
 17034 ;; Return value:  Size  Location     Type
 17035 ;;                  1    wreg      void 
 17036 ;; Registers used:
 17037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17038 ;; Tracked objects:
 17039 ;;		On entry : 0/0
 17040 ;;		On exit  : 0/0
 17041 ;;		Unchanged: 0/0
 17042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17043 ;;      Params:         0       0       0       0       0       0       0
 17044 ;;      Locals:         0       0       0       0       0       0       0
 17045 ;;      Temps:          0       0       0       0       0       0       0
 17046 ;;      Totals:         0       0       0       0       0       0       0
 17047 ;;Total ram usage:        0 bytes
 17048 ;; Hardware stack levels used:    1
 17049 ;; This function calls:
 17050 ;;		Nothing
 17051 ;; This function is called by:
 17052 ;;		_INTERRUPT_InterruptManager
 17053 ;; This function uses a non-reentrant model
 17054 ;;
 17055                           
 17056                           	psect	text113
 17057  00325E                     __ptext113:
 17058                           	opt stack 0
 17059  00325E                     _EUSART1_Transmit_ISR:
 17060                           	opt stack 22
 17061                           
 17062                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17063                           
 17064                           ;incstack = 0
 17065  00325E  0E46               	movlw	70
 17066  003260  0100               	movlb	0	; () banked
 17067  003262  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17068  003264  D012               	goto	i2l857
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;eusart1.c: 186: {
 17072                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17073  003266  5039               	movf	_eusart1TxTail,w,c	;volatile
 17074  003268  0D01               	mullw	1
 17075  00326A  0E00               	movlw	low _eusart1TxBuffer
 17076  00326C  24F3               	addwf	prodl,w,c
 17077  00326E  6ED9               	movwf	fsr2l,c
 17078  003270  0E01               	movlw	high _eusart1TxBuffer
 17079  003272  20F4               	addwfc	prodh,w,c
 17080  003274  6EDA               	movwf	fsr2h,c
 17081  003276  50DF               	movf	indf2,w,c
 17082  003278  6EAD               	movwf	4013,c	;volatile
 17083                           
 17084                           ; BSR set to: 0
 17085  00327A  2A39               	incf	_eusart1TxTail,f,c	;volatile
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17089  00327C  0E45               	movlw	69
 17090  00327E  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 17091  003280  D002               	goto	i2l858
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;eusart1.c: 189: {
 17095                           ;eusart1.c: 190: eusart1TxTail = 0;
 17096  003282  0E00               	movlw	0
 17097  003284  6E39               	movwf	_eusart1TxTail,c	;volatile
 17098  003286                     i2l858:
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;eusart1.c: 191: }
 17102                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17103                           
 17104                           ; BSR set to: 0
 17105  003286  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17106                           
 17107                           ;eusart1.c: 193: }
 17108  003288  0012               	return	
 17109  00328A                     i2l857:
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;eusart1.c: 194: else
 17113                           ;eusart1.c: 195: {
 17114                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17115  00328A  989D               	bcf	3997,4,c	;volatile
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;eusart1.c: 197: eusart1TxTail = 0;
 17119  00328C  0E00               	movlw	0
 17120  00328E  6E39               	movwf	_eusart1TxTail,c	;volatile
 17121                           
 17122                           ;eusart1.c: 198: eusart1TxHead = 0;
 17123  003290  0E00               	movlw	0
 17124  003292  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17125  003294  0012               	return	
 17126  003296                     __end_of_EUSART1_Transmit_ISR:
 17127                           	opt stack 0
 17128                           tosu	equ	0xFFF
 17129                           tosh	equ	0xFFE
 17130                           tosl	equ	0xFFD
 17131                           pclatu	equ	0xFFB
 17132                           pclath	equ	0xFFA
 17133                           tblptru	equ	0xFF8
 17134                           tblptrh	equ	0xFF7
 17135                           tblptrl	equ	0xFF6
 17136                           tablat	equ	0xFF5
 17137                           prodh	equ	0xFF4
 17138                           prodl	equ	0xFF3
 17139                           intcon	equ	0xFF2
 17140                           intcon2	equ	0xFF1
 17141                           postinc0	equ	0xFEE
 17142                           fsr0h	equ	0xFEA
 17143                           fsr0l	equ	0xFE9
 17144                           wreg	equ	0xFE8
 17145                           indf1	equ	0xFE7
 17146                           postdec1	equ	0xFE5
 17147                           fsr1h	equ	0xFE2
 17148                           fsr1l	equ	0xFE1
 17149                           indf2	equ	0xFDF
 17150                           postinc2	equ	0xFDE
 17151                           postdec2	equ	0xFDD
 17152                           fsr2h	equ	0xFDA
 17153                           fsr2l	equ	0xFD9
 17154                           status	equ	0xFD8
 17155                           
 17156 ;; *************** function _EUSART1_Receive_ISR *****************
 17157 ;; Defined at:
 17158 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17159 ;; Parameters:    Size  Location     Type
 17160 ;;		None
 17161 ;; Auto vars:     Size  Location     Type
 17162 ;;		None
 17163 ;; Return value:  Size  Location     Type
 17164 ;;                  1    wreg      void 
 17165 ;; Registers used:
 17166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17167 ;; Tracked objects:
 17168 ;;		On entry : 0/0
 17169 ;;		On exit  : 0/0
 17170 ;;		Unchanged: 0/0
 17171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17172 ;;      Params:         0       0       0       0       0       0       0
 17173 ;;      Locals:         0       0       0       0       0       0       0
 17174 ;;      Temps:          0       0       0       0       0       0       0
 17175 ;;      Totals:         0       0       0       0       0       0       0
 17176 ;;Total ram usage:        0 bytes
 17177 ;; Hardware stack levels used:    1
 17178 ;; This function calls:
 17179 ;;		Nothing
 17180 ;; This function is called by:
 17181 ;;		_INTERRUPT_InterruptManager
 17182 ;; This function uses a non-reentrant model
 17183 ;;
 17184                           
 17185                           	psect	text114
 17186  00346C                     __ptext114:
 17187                           	opt stack 0
 17188  00346C                     _EUSART1_Receive_ISR:
 17189                           	opt stack 22
 17190                           
 17191                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17192                           
 17193                           ; BSR set to: 0
 17194                           ;incstack = 0
 17195  00346C  A2AB               	btfss	4011,1,c	;volatile
 17196  00346E  D002               	goto	i2l863
 17197                           
 17198                           ;eusart1.c: 206: {
 17199                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17200  003470  98AB               	bcf	4011,4,c	;volatile
 17201                           
 17202                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17203  003472  88AB               	bsf	4011,4,c	;volatile
 17204  003474                     i2l863:
 17205                           
 17206                           ;eusart1.c: 210: }
 17207                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17208  003474  5038               	movf	_eusart1RxHead,w,c	;volatile
 17209  003476  0D01               	mullw	1
 17210  003478  0E46               	movlw	low _eusart1RxBuffer
 17211  00347A  24F3               	addwf	prodl,w,c
 17212  00347C  6ED9               	movwf	fsr2l,c
 17213  00347E  0E01               	movlw	high _eusart1RxBuffer
 17214  003480  20F4               	addwfc	prodh,w,c
 17215  003482  6EDA               	movwf	fsr2h,c
 17216  003484  CFAE FFDF          	movff	4014,indf2	;volatile
 17217  003488  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17218                           
 17219                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17220  00348A  0E27               	movlw	39
 17221  00348C  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17222  00348E  D002               	goto	i2l864
 17223                           
 17224                           ;eusart1.c: 217: {
 17225                           ;eusart1.c: 218: eusart1RxHead = 0;
 17226  003490  0E00               	movlw	0
 17227  003492  6E38               	movwf	_eusart1RxHead,c	;volatile
 17228  003494                     i2l864:
 17229                           
 17230                           ;eusart1.c: 219: }
 17231                           ;eusart1.c: 220: eusart1RxCount++;
 17232  003494  0100               	movlb	0	; () banked
 17233  003496  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17234                           
 17235                           ; BSR set to: 0
 17236  003498  0012               	return		;funcret
 17237  00349A                     __end_of_EUSART1_Receive_ISR:
 17238                           	opt stack 0
 17239                           tosu	equ	0xFFF
 17240                           tosh	equ	0xFFE
 17241                           tosl	equ	0xFFD
 17242                           pclatu	equ	0xFFB
 17243                           pclath	equ	0xFFA
 17244                           tblptru	equ	0xFF8
 17245                           tblptrh	equ	0xFF7
 17246                           tblptrl	equ	0xFF6
 17247                           tablat	equ	0xFF5
 17248                           prodh	equ	0xFF4
 17249                           prodl	equ	0xFF3
 17250                           intcon	equ	0xFF2
 17251                           intcon2	equ	0xFF1
 17252                           postinc0	equ	0xFEE
 17253                           fsr0h	equ	0xFEA
 17254                           fsr0l	equ	0xFE9
 17255                           wreg	equ	0xFE8
 17256                           indf1	equ	0xFE7
 17257                           postdec1	equ	0xFE5
 17258                           fsr1h	equ	0xFE2
 17259                           fsr1l	equ	0xFE1
 17260                           indf2	equ	0xFDF
 17261                           postinc2	equ	0xFDE
 17262                           postdec2	equ	0xFDD
 17263                           fsr2h	equ	0xFDA
 17264                           fsr2l	equ	0xFD9
 17265                           status	equ	0xFD8
 17266                           tosu	equ	0xFFF
 17267                           tosh	equ	0xFFE
 17268                           tosl	equ	0xFFD
 17269                           pclatu	equ	0xFFB
 17270                           pclath	equ	0xFFA
 17271                           tblptru	equ	0xFF8
 17272                           tblptrh	equ	0xFF7
 17273                           tblptrl	equ	0xFF6
 17274                           tablat	equ	0xFF5
 17275                           prodh	equ	0xFF4
 17276                           prodl	equ	0xFF3
 17277                           intcon	equ	0xFF2
 17278                           intcon2	equ	0xFF1
 17279                           postinc0	equ	0xFEE
 17280                           fsr0h	equ	0xFEA
 17281                           fsr0l	equ	0xFE9
 17282                           wreg	equ	0xFE8
 17283                           indf1	equ	0xFE7
 17284                           postdec1	equ	0xFE5
 17285                           fsr1h	equ	0xFE2
 17286                           fsr1l	equ	0xFE1
 17287                           indf2	equ	0xFDF
 17288                           postinc2	equ	0xFDE
 17289                           postdec2	equ	0xFDD
 17290                           fsr2h	equ	0xFDA
 17291                           fsr2l	equ	0xFD9
 17292                           status	equ	0xFD8
 17293                           
 17294                           	psect	text115
 17295  000000                     __ptext115:
 17296                           	opt stack 0
 17297                           tosu	equ	0xFFF
 17298                           tosh	equ	0xFFE
 17299                           tosl	equ	0xFFD
 17300                           pclatu	equ	0xFFB
 17301                           pclath	equ	0xFFA
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           intcon2	equ	0xFF1
 17310                           postinc0	equ	0xFEE
 17311                           fsr0h	equ	0xFEA
 17312                           fsr0l	equ	0xFE9
 17313                           wreg	equ	0xFE8
 17314                           indf1	equ	0xFE7
 17315                           postdec1	equ	0xFE5
 17316                           fsr1h	equ	0xFE2
 17317                           fsr1l	equ	0xFE1
 17318                           indf2	equ	0xFDF
 17319                           postinc2	equ	0xFDE
 17320                           postdec2	equ	0xFDD
 17321                           fsr2h	equ	0xFDA
 17322                           fsr2l	equ	0xFD9
 17323                           status	equ	0xFD8
 17324                           
 17325                           	psect	rparam
 17326  0000                     tosu	equ	0xFFF
 17327                           tosh	equ	0xFFE
 17328                           tosl	equ	0xFFD
 17329                           pclatu	equ	0xFFB
 17330                           pclath	equ	0xFFA
 17331                           tblptru	equ	0xFF8
 17332                           tblptrh	equ	0xFF7
 17333                           tblptrl	equ	0xFF6
 17334                           tablat	equ	0xFF5
 17335                           prodh	equ	0xFF4
 17336                           prodl	equ	0xFF3
 17337                           intcon	equ	0xFF2
 17338                           intcon2	equ	0xFF1
 17339                           postinc0	equ	0xFEE
 17340                           fsr0h	equ	0xFEA
 17341                           fsr0l	equ	0xFE9
 17342                           wreg	equ	0xFE8
 17343                           indf1	equ	0xFE7
 17344                           postdec1	equ	0xFE5
 17345                           fsr1h	equ	0xFE2
 17346                           fsr1l	equ	0xFE1
 17347                           indf2	equ	0xFDF
 17348                           postinc2	equ	0xFDE
 17349                           postdec2	equ	0xFDD
 17350                           fsr2h	equ	0xFDA
 17351                           fsr2l	equ	0xFD9
 17352                           status	equ	0xFD8
 17353                           
 17354                           	psect	temp
 17355  000048                     btemp:
 17356                           	opt stack 0
 17357  000048                     	ds	1
 17358  0000                     int$flags	set	btemp
 17359  0000                     wtemp6	set	btemp+1
 17360                           tosu	equ	0xFFF
 17361                           tosh	equ	0xFFE
 17362                           tosl	equ	0xFFD
 17363                           pclatu	equ	0xFFB
 17364                           pclath	equ	0xFFA
 17365                           tblptru	equ	0xFF8
 17366                           tblptrh	equ	0xFF7
 17367                           tblptrl	equ	0xFF6
 17368                           tablat	equ	0xFF5
 17369                           prodh	equ	0xFF4
 17370                           prodl	equ	0xFF3
 17371                           intcon	equ	0xFF2
 17372                           intcon2	equ	0xFF1
 17373                           postinc0	equ	0xFEE
 17374                           fsr0h	equ	0xFEA
 17375                           fsr0l	equ	0xFE9
 17376                           wreg	equ	0xFE8
 17377                           indf1	equ	0xFE7
 17378                           postdec1	equ	0xFE5
 17379                           fsr1h	equ	0xFE2
 17380                           fsr1l	equ	0xFE1
 17381                           indf2	equ	0xFDF
 17382                           postinc2	equ	0xFDE
 17383                           postdec2	equ	0xFDD
 17384                           fsr2h	equ	0xFDA
 17385                           fsr2l	equ	0xFD9
 17386                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    168
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     96     160
    BANK1           256     10     204
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _UpdateTxFreq->_SendAckMessage
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateRxFreq->_GetIntFromUartData
    _GroupFlashMemory->_FlashReadUart
    _DacSetValue->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  307705
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  161492
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2089
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   37884
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         2     0      2   16281
                                             43 COMRAM     2     0      2
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   21268
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   29239
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7228
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7228
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5276
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5276
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   27788
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   12928
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6250
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8548
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   21395
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          4     2      2   21268
                                             45 COMRAM     2     0      2
                                             21 BANK0      2     2      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  15    11      4    4922
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   19476
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6527
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   19833
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6611
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6459
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2089
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   19925
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0   10192
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    9732
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    9732
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1055
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                                3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      A      CC       8       79.7%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     60      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       3        0.0%
DATA                 0      0     1B3       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 06 10:13:03 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 36DA                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                         _GroupControlMcu 3136               __end_of_keepAliveSignalUart 37C4  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l50 2882                       __end_of_BlinkOkLeds 2A64  
                         _SWSPI_send_word 218A                       ___wmul@multiplicand 001A  
                         _timer0ReloadVal 0046                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0083  
                            ___ftadd@exp2 0082                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l112 1126                                       l200 0B9A  
                                     l113 104C                                       l210 338E  
                                     l202 0BD2                                       l211 3378  
                                     l108 3430                                       l300 0860  
                                     l204 0BD8                                       l310 094E  
                                     l302 0872                                       l311 0966  
                                     l313 09E4                                       l305 091A  
                                     l315 0A3A                                       l500 13BA  
                                     l316 0A50                                       l308 0932  
                                     l309 0A56                                       l502 1424  
                                     l182 0A82                                       l191 0AE4  
                                     l183 0AAE                                       l193 0B02  
                                     l290 08C2                                       l178 0C32  
                                     l283 1990                                       l291 0826  
                                     l195 0B08                                       l187 0AB4  
                                     l179 0A74                                       l284 19AE  
                                     l604 2D74                                       l605 2D38  
                                     l701 3202                                       l293 0772  
                                     l197 0B74                                       l189 0ACC  
                                     l622 2D60                                       l614 2D4C  
                                     l606 2D42                                       l702 320C  
                                     l198 0B30                                       l623 2D6A  
                                     l615 2D56                                       l295 0782  
                                     l712 367E                                       l633 2DCA  
                                     l713 3676                                       l297 07EE  
                                     l634 2D8E                                       l298 08B0  
                                     l651 2DB6                                       l643 2DA2  
                                     l635 2D98                                       l652 2DC0  
                                     l644 2DAC                                       l580 2228  
                                     l572 21B2                                       l717 367A  
                                     l590 2CA8                                       l582 223E  
                                     l670 31DA                                       l591 2CB2  
                                     l575 21FE                                       l671 31B2  
                                     l680 31C6                                       l672 31BC  
                                     l840 2FE0                                       l569 21A4  
                                     l681 31D0                                       l691 3216  
                                     l579 2210                                       l851 3186  
                                     l588 2CC2                                       l596 2C6A  
                                     l692 31EE                                       l852 31AA  
                                     l589 2C8E                                       l597 2C36  
                                     l693 31F8                                       l853 31A8  
                                     l598 2C50                                       l838 2FBA  
                                     l951 2160                                       l599 2C5A  
                                     l952 2162                                       l948 2188  
                                     l949 2140                                       l959 32F0  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CB                          PLLInitialize@idx 002C  
                                     _abs 34EE                                       _cnt 00FD  
                                     _exp 0C68                                       _log 1692  
                                     _pow 1516                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
              __end_of_FlashReadCondition 18C0                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                                      l1201 2EE6  
                                    l1210 2AD6                                      l1202 2EF4  
                                    l1211 2AE4                                      ?_abs 0018  
                                    l1212 2AF2                                      l1220 2F6E  
                                    l1061 3454                                      l2101 2582  
                                    l1221 2F74                                      l2110 208A  
                                    l2022 0E9A                                      l1207 2B00  
                                    l2032 0F16                                      l2024 0EB2  
                                    l1208 2AC8                                      l2105 2022  
                                    l2041 0FE2                                      l2033 0F26  
                                    l1217 2F8E                                      l2042 101E  
                                    l2026 0F06                                      l1218 2F68  
                                    l1226 360C                                      l2107 2068  
                                    l2123 362E                                      l2035 0F40  
                                    l1227 35FE                                      l1180 3148  
                                    l2109 2096                                      l2133 364C  
                                    l2118 3536                                      l2046 3714  
                                    l2038 0F52                                      l1190 2BE2  
                                    l1430 29B6                                      l2039 0FBE  
                                    l1351 272C                                      l1191 2BF0  
                                    l1431 29CE                                      l2128 355C  
                                    l1280 23CC                                      l1176 314E  
                                    l1192 2BF6                                      l2153 1FF0  
                                    l2081 0C82                                      l2145 16AE  
                                    l1265 2EB2                                      l1361 2506  
                                    l1177 313C                                      l1193 2C04  
                                    l1433 29F4                                      l2154 1F72  
                                    l1290 2B24                                      l1266 2E96  
                                    l1346 32A2                                      l1434 29E8  
                                    l2083 0CBA                                      l2147 16CE  
                                    l1291 2B28                                      l1451 2CEE  
                                    l1179 3142                                      l1187 2C0A  
                                    l2092 1DB2                                      l2084 0CF2  
                                    l1292 2B2C                                      l1452 2D02  
                                    l1372 1CCA                                      l1356 3088  
                                    l1188 2BDC                                      l2093 1DA4  
                                    l2085 0D22                                      l1293 2B5A  
                                    l2086 0E4C                                      l1198 2F02  
                                    l1703 12C0                                      l2095 1DCC  
                                    l2087 0E22                                      l1287 2B5E  
                                    l1199 2ED8                                      l1712 12FE  
                                    l1704 12B6                                      l1528 27AE  
                                    l2096 1E48                                      l1288 2B20  
                                    l1713 12F4                                      l1529 27A2  
                                    l1722 1BD2                                      l1730 261A  
                                    l1715 1322                                      l1731 264A  
                                    l1724 1BFA                                      l1716 133E  
                                    l1740 1B36                                      l1804 295C  
                                    l1661 234C                                      l1725 1C38  
                                    l1717 136E                                      l1741 1B46  
                                    l1805 2950                                      l1662 2336  
                                    l1726 1C5E                                      l1815 2B8C  
                                    l1639 323A                                      l1743 1B5E  
                                    l1664 2374                                      l1816 2B80  
                                    l1744 1B6E                                      l1760 1A60  
                                    l1808 2984                                      l1665 236A  
                                    l1737 1ADC                                      l1761 1A50  
                                    l1809 2992                                      l1489 350C  
                                    l1658 2318                                      l1754 30CA  
                                    l1659 230E                                      l1739 1B04  
                                    l1748 35C6                                      l1693 1264  
                                    l1766 1A84                                      l1758 19E8  
                                    l1767 1A78                                      l1871 34B4  
                                    l6008 2A10                                      l1872 34A4  
                                    l1689 123A                                      l1769 1AA0  
                                    l1698 12CA                                      l1794 26A8  
                                    l1883 1560                                      l1795 269C  
                                    l1884 1550                                      l7020 21BE  
                                    l1886 1578                                      l1798 26DC  
                                    l1887 15FE                                      l1799 26EA  
                                    l4392 2676                                      l1888 15DC  
                                    l7024 21CC                                      l1889 1684  
                                    l7240 2872                                      l7056 23BC  
                                    l7074 240A                                      ?_exp 0097  
                                    ?_log 008E                                      l6462 3174  
                                    l6518 34A4                                      l7254 28C8  
                                    l7512 3078                                      l7506 252E  
                                    l7522 30A6                                      l7364 0932  
                                    l7540 1D46                                      l7288 2138  
                                    l7616 0E22                                      l7368 0956  
                                    l7456 2724                                      l7528 1CBA  
                                    l7472 329A                                      l7722 13AA  
                                    l7378 09B6                                      l7732 1402  
                                    l7830 1044                                      l7736 1414  
                                    l7496 24F6                                      l7746 146C  
                                    l5996 2A6E                                      ?_pow 00A0  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u6100 3528  
                                    u6030 237E                                      u5230 36CC  
                                    u4370 2042                                      u7020 2960  
                                    u7100 28C8                                      u6205 32FE  
                                    u3910 1A06                                      u6310 0EA2  
                                    u6206 3300                                      u5248 36CE  
                                    u6080 3558                                      u7200 071E  
                                    u4378 2046                                      u7210 0720  
                                    u3915 19FE                                      u6500 122C  
                                    u7060 1DBE                                      u6180 2B52  
                                    u6340 0EDC                                      u7150 2166  
                                    u3950 1A8A                                      u7310 0908  
                                    u6600 12D2                                      u6360 0EEC  
                                    u6185 2B48                                      u6530 1256  
                                    u7410 2752                                      u3891 19CC  
                                    u8107 288A                                      u3980 25AA  
                                    u7340 09B6                                      u7165 2184  
                                    u6461 11F8                                      u8117 289A  
                                    u7166 2186                                      u6630 1306  
                                    u7350 09D4                                      u7430 32C0  
                                    u6471 120C                                      u8127 28AA  
                                    u7255 07F8                                      u6560 1294  
                                    u8137 28BA                                      u6730 3790  
                                    u6810 21F2                                      u7450 252E  
                                    u6731 378C                                      u8147 2A36  
                                    u7275 0884                                      u7700 1960  
                                    u3988 25AC                                      u8157 2A50  
                                    u6830 2218                                      u7470 30A6  
                                    u6911 1BBA                                      u6671 1AC4  
                                    u8167 2A94                                      u7560 0CFC  
                                    u6905 3408                                      u8177 2AAE  
                                    u6906 340A                                      u7570 0CFE  
                                    u7650 15C6                                      u6770 219A  
                                    u7490 1D46                                      u6931 1BE2  
                                    u6691 1AEC                                      u8187 1112  
                                    u6860 2234                                      u5990 2300  
                                    u7680 191C                                      u7760 1402  
                                    u6890 240A                                      u7675 18CA  
                                    u7780 146C                                      u7950 22EC  
                                    u6990 26AC                                      u7948 0C0A  
                                    u7949 0C2A                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3172  
                                    abs@a 0018                                      _crc8 2E84  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CD  
                                    _main 29A4                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 37F6                           __end_of_DacInit 293E  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 375C                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003C                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2A64                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 33D8            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 3778                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1394  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1C90  
                         __end_of___ftneg 35D4                           __end_of___lldiv 26FC  
                              _EepromRead 37D0                           __end_of___ftmul 1BA8  
                                   _T0CON 000FD5                           __end_of___llmod 29A4  
                         __end_of___ftsub 30F4                           __end_of___fttol 1AB2  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 3136  
                                   i2l863 3474                                     i2l791 007A  
                                   i2l864 3494                                     i2l857 328A  
                                   i2l793 0086                                     i2l858 3286  
                                   i2l786 005E                                     i2l795 0090  
                                   i2l788 006A                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _PORTD 000F83  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2C86  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 2438  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 325E  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 24CA                             __CFG_WRTB$OFF 000000  
                __size_of_SetMcuFwVersion 0036                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 002E  
                         _DATAEE_ReadByte 36F0                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 37FE  
                                   crc8@i 001F                                     _make8 2B1E  
          __size_of_SWSPI_Synth_send_bits 0058                     __end_of_GetMcuRunTime 1D74  
                                   _count 00C8                                     _floor 1D74  
                                   _ldexp 2008                                     _frexp 255A  
                                   _errno 00C4             __end_of_SWSPI_Synth_send_bits 2C86  
                         __end_of_isalpha 353E                           __end_of_isdigit 3636  
                                   _group 00D0                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 3564  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                         __end_of_isupper 3654                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AD  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 3718            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                 __end_of_GroupControlMcu 3172                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000        __size_of_SetConversionResultFormat 000C  
                             exp@exponent 009D            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 2AC2  
                             ldexp@newexp 0091                   __end_of_SWSPI_send_word 2242  
                             _BlinkOkLeds 2A06                   WriteUartMessage@dataBuf 0019  
                         __initialization 27F8                               log@exponent 0091  
                            __end_of_crc8 2ED2                __end_of_EUSART1_Initialize 336E  
                            __end_of_main 2A06                   FLASH_ReadByte@flashAddr 0018  
             ?_INTERRUPT_InterruptManager 0001                          __end_of_GroupDAC 3618  
                         _readUartMessage 0A6C                          __end_of_GroupAdc 2F1A  
                                  ??_crc8 001C                                    ??_main 0031  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D4                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 376A  
                     SetMcuFwVersion@data 002C                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 37FA                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 008E  
                                  ?_frexp 0018                          __end_of___altoft 27F8  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002A                                    _EECON2 000FA7  
                        __end_of___awtoft 325E                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 239E                          __end_of___lltoft 2BD6  
                       _FlashReadUart$565 00B1                         _FlashReadUart$566 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1017 2468  
                                  i2l1018 248A                                    i2l1019 24AC  
                          __CFG_WDTEN$OFF 000000                                    i2l1861 3122  
                                  i2l1862 312C                                    i2l1857 310A  
                                  i2l1858 3102                                    _TABLAT 000FF5  
                             _EepromWrite 374E                                    _RCREG1 000FAE  
                        __end_of___lwtoft 35F8                   __size_of_FlashEreaseMem 0052  
               __size_of_FLASH_EraseBlock 0034                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 3672  
                 __size_of_SwSpi_Data_Pin 0056                  GroupSynthesizers@request 00BF  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                __end_of_GroupFlashMemory 2FA6                           ?_BlinkErrorLeds 0001  
                        _GetCpldFwVersion 24CA                            __CFG_XINST$OFF 000000  
                       ?_SetCpldFwVersion 002C                                    _cState 00D1  
                                  ___ftge 25EA                                    ___lmul 2CDE  
               SWSPI_Synth_send_bits@data 001A                                    ___wmul 358A  
                     UpdateRxFreq@regData 0075                                 ??___ftadd 007E  
                          __CFG_STVREN$ON 000000                                 ??___ftdiv 0060  
                               ??___ftneg 001B                         ?_InitSevenSegment 0001  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 1516                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                      ??_SetCpldFwVersion 002E                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                        __size_of_ResetCpld 000C  
                        ?_TMR0_Initialize 0001                                    _memset 349A  
                                  clear_0 283E                                    clear_1 284A  
                                  clear_2 2856                        ??_InitSevenSegment 0018  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 3704  
                             ?_EepromRead 0001                                    _strtol 0E5A  
                                  floor@i 0092                     __end_of_SwSpi_Clk_Pin 2DE0  
                                  floor@x 008F                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A6C  
                        __end_of_testLeds 28D4                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 26FC                          __end_ofexp@coeff 068E  
                       _SYSTEM_Initialize 368E                          __end_oflog@coeff 06A9  
                              __accesstop 0060                   __end_of__initialization 285C  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                   __end_of_readUartMessage 0C68  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0021  
                            ?_DacSetValue 002E                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                          __pcstackCOMRAM 0001                              __pidataBANK0 373E  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 2B7A  
                        _DATAEE_WriteByte 32CC                             __end_of_floor 1E56  
                           __end_of_ldexp 20CE                             __end_of_frexp 25EA  
                  _SwSpi_Set_Synth_Le_Pin 31EA                      GroupFlashMemory@data 01C2  
                              ___lwtoft@c 0020                      __end_of_EUSART1_Read 2FEA  
                            ??_MEMORY_ISR 0001                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 01C4                        _keepAliveSignalLed 36C2  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 349A  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 36A8  
                         _AdcConvert$3276 00B7                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 37A0                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0669                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 000E                __end_of_SendSystemStartAck 37D0  
           __end_of_InitAdcApplicationMgr 3786                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 3802                                 ?_ResetMcu 0001  
                      _FlashReadCondition 17B4           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 37EE  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 3672                                 ?___altoft 0087  
                                 ?_memset 0018                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 37B8                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 372C                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 22F0                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 277E                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 28D4  
                   GetIntFromUartData@idx 0073                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B1                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2DE0                          _FLASH_EraseBlock 33D8  
          __size_of_GroupStatusAndVersion 0058                            _SwSpi_Data_Pin 2D34  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2C2E  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 2FEA                        _GetIntFromUartData 239E  
                         __CFG_PWRTEN$OFF 000000                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                        UpdateRxFreq@data 002E                     SendAckMessage@inGroup 0025  
                        ?_readUartMessage 0001                    GroupControlMcu@request 00BF  
                               ?_testLeds 0001                      PLLInitialize@idx_812 002E  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 11E6  
                                 ___ftdiv 1BA8                                   ___ftneg 35B0  
                                 ___lldiv 267A                           __size_of___wmul 0026  
                                 ___ftmul 1AB2                                   ___llmod 293E  
                                 ___ftsub 30B2                                   ___fttol 19BA  
              FlashSampleWrite@rotateLeft 0062                              crc8@dataSize 001A  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 30F4  
                    AdcConvert@_adcResult 00B3                              __psmallconst 0600  
                              ??___altoft 008B                    __end_of_FLASH_ReadByte 373E  
              SWSPI_Synth_send_bits@count 001B                     _mcuRunTimeIn5SecTicks 00C0  
                                 _crcCalc 00CC                                   _channel 00D3  
                                 __pcinit 27F8                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 2008  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 29A4  
                                 __ptext1 0A6C                                   __ptext2 34C6  
                                 __ptext3 35F8                                   __ptext4 2F62  
                                 __ptext5 2ED2                                   __ptext6 2BD6  
                                 __ptext7 3136                                   __ptext8 2AC2  
                                 __ptext9 1E56                                   crc8@crc 001D  
                      __end_of_AdcConvert 11E6                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 376A  
                            __size_of_abs 0028                                   _isalpha 3516  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 3618                              __size_of_pow 017C  
                      _EUSART1_Initialize 3338                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 353E                  __end_of_GetCpldFwVersion 255A  
                                 _isupper 3636                          UpdateTxFreq@data 002C  
                                 _request 00CF                           GroupDAC@request 00BF  
                    ??_GetIntFromUartData 002E                    __end_of_FlashEreaseMem 2E32  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                  __end_of_SwSpi_Data_Pin 2D8A                                   _toupper 3704  
                    end_of_initialization 285C                       GetCpldFwVersion@idx 002F  
                           ?_UpdateRxFreq 002E                                   exp@sign 009F  
                           ?_UpdateTxFreq 002C                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                              ?_EepromWrite 001B  
                     SetCpldFwVersion@idx 002E                     _SWSPI_Synth_send_bits 2C2E  
              __end_of_TEST_PLL_REGISTERS 0635                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 0000                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 37E4                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BA                                ??_testLeds 002C  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 00D7  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                __end_of_PLL_INIT_REGISTERS 0669  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 34C6  
                             testLeds@idx 002D                      __size_of_DacSetValue 0036  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 36C2  
  __size_of_InitSystemApplicationManagers 001A             _InitSystemApplicationManagers 36A8  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 37E4                              ??_EepromRead 0019  
                         _SetMcuFwVersion 3296                          ?_GetMcuFwVersion 0001  
               __size_of_SetCpldFwVersion 0042                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 368E                              strtol@endptr 0026  
           FLASH_WriteBlock@flashWrBufPtr 0021                 __size_of_InitSevenSegment 0026  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                            ??_UpdateRxFreq 0030  
                          ??_UpdateTxFreq 002E                  __end_of_DATAEE_WriteByte 3302  
             __end_of_SWSPI_DAC_send_bits 2CDE                  FLASH_EraseBlock@baseAddr 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2FA6  
                    _CheckFlashPrecentage 2242                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 37DA                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 37F6  
                          __end_of___ftge 267A              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2D34                            __end_of___wmul 35B0  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 37EE  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 36DA  
                        _FLASH_WriteBlock 20CE                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 34C6                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 1030  
                     start_initialization 27F8                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 008E           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 3516                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E5A                               __end_of_log 17B4  
                             __end_of_pow 1692                  AdcConvert@_adcResult_332 00B5  
                           _GetMcuRunTime 1C90                    ?_SWSPI_Synth_send_bits 001A  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 31AE  
                      GetMcuFwVersion@idx 002F                        SetMcuFwVersion@idx 002E  
                  __size_of_PLLInitialize 0182                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                                 _ResetCpld 3794  
                  __size_of_SwSpi_Clk_Pin 0056                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 3226                       _keepAliveSignalUart 37B8  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 336E  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03C2  
                                ??___ftge 001E                                  ??___lmul 0020  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 36F0  
       __end_of_SetConversionResultFormat 37AC                               __pdataBANK0 00EB  
                 SWSPI_DAC_send_bits@data 001A                   __end_of_SetMcuFwVersion 32CC  
                                ??_memset 001E                  __size_of_GroupControlMcu 003C  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 2E32  
                          _SetChannelMode 340C                  __end_of_FLASH_EraseBlock 340C  
                      _SendSystemStartAck 37C4                  __size_of_SWSPI_send_word 00B8  
                                ??_strtol 002A                            _eusart1RxCount 00D2  
                       __size_of___altoft 007A                                 _ZeroArray 3654  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                       ?_SendSystemStartAck 0001  
                            _isalpha$2983 001C                            ?_GetMcuRunTime 0001  
                            _isdigit$2986 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 31AE              __size_of_EUSART1_Receive_ISR 002E  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FB  
                               __pnvBANK0 00FB                  __size_of_TMR0_StartTimer 0004  
                              ?_ResetCpld 0001                    _PIN_MANAGER_Initialize 2F1A  
                    ??_SendSystemStartAck 002C                     _InitAdcApplicationMgr 3778  
                               __pintcode 0008                    __end_of_SendAckMessage 2E84  
                               __ptext100 2B7A                                 __ptext101 35D4  
                               __ptext110 30F4                                 __ptext102 22F0  
                               __ptext111 37FA                                 __ptext103 18C0  
                               __ptext112 37FE                                 __ptext104 20CE  
                               __ptext113 325E                                 __ptext105 33D8  
                               __ptext114 346C                                 __ptext106 3786  
                               __ptext115 0000                                 __ptext107 343C  
                               __ptext109 2438                                  ?___ftadd 0078  
                                ?___ftdiv 0029                    __end_of_SetChannelMode 343C  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 18C0                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                      __end_of_UpdateRxFreq 3070  
                       __size_of_testLeds 006A                             _PLLInitialize 1394  
           SetConversionResultFormat@data 002C                      __end_of_UpdateTxFreq 1F32  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                     ??_keepAliveSignalUart 002C  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 2D8A  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1F32                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00D6                                  ?_isspace 0001  
                        _SetCpldFwVersion 3070                              _SetMcuSystem 37DA  
                                ?_isupper 0001                             _FlashReadUart 06AA  
                       _PLLUartInitialize 3802                         ?_GetCpldFwVersion 0001  
                        _InitSevenSegment 3564              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 003D  
                      ??_GetCpldFwVersion 0024                      _INTERRUPT_Initialize 37F2  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 010C  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 2BD6  
                       _GroupSynthesizers 2AC2       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                                  i2u517_40 310E  
                     SWSPI_send_word@data 0021                        ?_GroupSynthesizers 01C2  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 2438  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                      _TEST_PLL_REGISTERS 0601                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                          ?_SetMcuFwVersion 002C  
                     ??_GroupSynthesizers 0031                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 01FC                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
               __end_of_PLLUartInitialize 3804                        __end_of_channelArr 0670  
                        ??_SwSpi_Data_Pin 0019                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0084                            ?_FlashReadUart 002C  
                       ??_GroupControlMcu 0031                        _PLL_INIT_REGISTERS 0635  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$2989 0019                         ??_SWSPI_send_word 0026  
                   GetCpldFwVersion@TxMsg 0026               __size_of_GetIntFromUartData 009A  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 280C  
                               copy_data1 282C                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2B1E                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 218A                                  _GroupDAC 35F8  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2ED2  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 375C  
                           ??_DacSetValue 0030                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 343C  
                     FlashReadUart@offset 00BD                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 3718                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 277E  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 3226  
                           crc8@dataArray 0018                                  ___ftpack 22F0  
                        _numOfReadSamples 003E                                  ___lltoft 2B7A  
                       _FLASH_IsWriteDone 3786                       WriteUartMessage@idx 001E  
                                ___lwtoft 35D4                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3279 009A                              _isupper$2992 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 33A4  
                        __size_of_isalpha 0028                                  _crcGiven 00CB  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 001B  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                      DacSetValue@regData 0075                                  __ptext10 302E  
                                __ptext11 3802                                  __ptext20 37D0  
                                __ptext12 3296                                  __ptext21 36F0  
                                __ptext13 3070                                  __ptext30 3704  
                                __ptext22 06AA                                  __ptext14 374E  
                                __ptext31 353E                                  __ptext23 34EE  
                                __ptext15 32CC                                  __ptext40 340C  
                                __ptext32 3618                                  __ptext24 372C  
                                __ptext16 1C90                                  __ptext41 37AC  
                                __ptext33 3516                                  __ptext25 17B4  
                                __ptext17 267A                                  __ptext50 376A  
                                __ptext42 2FA6                                  __ptext34 3636  
                                __ptext26 2DE0                                  __ptext18 26FC  
                                __ptext51 37F2                                  __ptext43 37B8  
                                __ptext35 2CDE                                  __ptext27 3302  
                                __ptext19 24CA                                  __ptext60 349A  
                                __ptext52 3338                                  __ptext44 36C2  
                                __ptext36 286A                                  __ptext28 239E  
                                __ptext61 336E                                  __ptext53 36DA  
                                __ptext45 37DA                                  __ptext37 375C  
                                __ptext29 0E5A                                  __ptext70 218A  
                                __ptext62 3172                                  __ptext54 2FEA  
                                __ptext46 368E                                  __ptext38 3794  
                                __ptext71 2B1E                                  __ptext63 36A8  
                                __ptext55 293E                                  __ptext47 33A4  
                                __ptext39 37A0                                  __ptext80 2A06  
                                __ptext72 31EA                                  __ptext64 37F6  
                                __ptext56 37C4                                  __ptext48 37E4  
                                __ptext81 2A64                                  __ptext73 3672  
                                __ptext65 1394                                  __ptext57 2E32  
                                __ptext49 2F1A                                  __ptext90 25EA  
                                __ptext82 1030                                  __ptext74 2C2E  
                                __ptext66 31AE                                  __ptext58 2E84  
                                __ptext91 277E                                  __ptext83 1516  
                                __ptext75 2C86                                  __ptext67 3564  
                                __ptext59 3654                                  __ptext92 1F32  
                                __ptext84 1692                                  __ptext76 2D34  
                                __ptext68 3778                                  __ptext93 358A  
                                __ptext85 0C68                                  __ptext77 2D8A  
                                __ptext69 28D4                                  __ptext94 1AB2  
                                __ptext86 2008                                  __ptext78 3718  
                                __ptext95 30B2                                  __ptext87 1D74  
                                __ptext79 2242                                  __ptext96 11E6  
                                __ptext88 255A                                  __ptext97 35B0  
                                __ptext89 19BA                                  __ptext98 1BA8  
                                __ptext99 3226                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 001C                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3277 00A6                                  _pow$3278 00A9  
                     ??_FLASH_IsWriteDone 0018                       GetIntFromUartData@c 0072  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0082                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 01C2  
                                _msgCount 00CA              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 346C  
            __size_of_SWSPI_DAC_send_bits 0058                     __size_of_UpdateRxFreq 0042  
                   __size_of_UpdateTxFreq 00DC                        SWSPI_send_word@idx 0027  
                             _groupsArray 00EB                           ??_PLLInitialize 002A  
                                _testLeds 286A                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                                strtol@base 0028  
                              strtol@sign 0060                 __end_of_FLASH_IsWriteDone 3794  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 3338                       _EUSART1_Receive_ISR 346C  
                __end_of_SwSpi_Set_CE_Pin 31EA                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 34EE                                  exp@coeff 0670  
                              _MEMORY_ISR 37FE                           ??_FlashReadUart 0060  
                                log@coeff 068E                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 0029                      SetCpldFwVersion@data 002C  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00C6                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C5  
               _SetConversionResultFormat 37A0                  __end_of_FlashSampleWrite 19BA  
                                intlevel2 0000                              _UpdateRxFreq 302E  
                            _UpdateTxFreq 1E56                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 302E                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 005C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 372C                                _RCSTA1bits 000FAB  
                                isupper@c 001A              __end_of_EUSART1_Transmit_ISR 3296  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                __end_of_SetCpldFwVersion 30B2                         _TimerSamplingFlag 00D5  
                           AdcConvert@idx 00BC                  __end_of_InitSevenSegment 358A  
                     _SetAdcOperationMode 37AC                             _isReWriteDone 003B  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                         EepromRead@address 0019  
                        ___lldiv@quotient 0020                          _GroupFlashMemory 2F62  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 33A4  
                         ___lwmod@counter 0005                                  toupper@c 0018  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 002C  
                           ??_EepromWrite 001C                                _AdcConvert 1030  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2F62  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 37FA                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
               __size_of_GetCpldFwVersion 0090                               _DacSetValue 3302  
