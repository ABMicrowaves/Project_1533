

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 25 18:04:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.45
   109                           ; Generated 16/11/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F45K22 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   144  0000                     
   145                           	psect	idataCOMRAM
   146  002A9A                     __pidataCOMRAM:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _writeAddress
   150  002A9A  4000               	dw	16384
   151  002A9C  0000               	dw	0
   152                           
   153                           	psect	idataBANK0
   154  002A62                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _groupsArray
   158  002A62  2E                 	db	low _GroupRx
   159  002A63  26                 	db	high _GroupRx
   160  002A64  0C                 	db	low _GroupTx
   161  002A65  24                 	db	high _GroupTx
   162  002A66  FA                 	db	low _GroupCommon
   163  002A67  28                 	db	high _GroupCommon
   164  002A68  00                 	db	0
   165  002A69  00                 	db	0
   166  002A6A  00                 	db	0
   167  002A6B  00                 	db	0
   168  002A6C  00                 	db	0
   169  002A6D  00                 	db	0
   170                           
   171                           ;initializer for _readAddress
   172  002A6E  4000               	dw	16384
   173  002A70  0000               	dw	0
   174                           
   175                           	psect	mediumconst
   176  007A58                     __pmediumconst:
   177                           	opt stack 0
   178  007A58  00                 	db	0
   179  007A59                     _TEST_PLL_REGISTERS:
   180                           	opt stack 0
   181  007A59  041C               	dw	1052
   182  007A5B  0001               	dw	1
   183  007A5D  300B               	dw	12299
   184  007A5F  0061               	dw	97
   185  007A61  26BA               	dw	9914
   186  007A63  00C0               	dw	192
   187  007A65  FCC9               	dw	64713
   188  007A67  1A19               	dw	6681
   189  007A69  0428               	dw	1064
   190  007A6B  102D               	dw	4141
   191  007A6D  00E7               	dw	231
   192  007A6F  1200               	dw	4608
   193  007A71  6076               	dw	24694
   194  007A73  3505               	dw	13573
   195  007A75  0025               	dw	37
   196  007A77  0080               	dw	128
   197  007A79  8B84               	dw	35716
   198  007A7B  3200               	dw	12800
   199  007A7D  0003               	dw	3
   200  007A7F  0000               	dw	0
   201  007A81  0032               	dw	50
   202  007A83  0008               	dw	8
   203  007A85  AAA1               	dw	43681
   204  007A87  01AA               	dw	426
   205  007A89  0EDA               	dw	3802
   206  007A8B  0003               	dw	3
   207  007A8D                     __end_of_TEST_PLL_REGISTERS:
   208                           	opt stack 0
   209  007A8D                     _PLL_INIT_REGISTERS:
   210                           	opt stack 0
   211  007A8D  041C               	dw	1052
   212  007A8F  0001               	dw	1
   213  007A91  300B               	dw	12299
   214  007A93  0061               	dw	97
   215  007A95  323A               	dw	12858
   216  007A97  00C0               	dw	192
   217  007A99  BCC9               	dw	48329
   218  007A9B  2221               	dw	8737
   219  007A9D  0428               	dw	1064
   220  007A9F  102D               	dw	4141
   221  007AA1  00E7               	dw	231
   222  007AA3  1200               	dw	4608
   223  007AA5  2076               	dw	8310
   224  007AA7  3501               	dw	13569
   225  007AA9  0025               	dw	37
   226  007AAB  0080               	dw	128
   227  007AAD  9B84               	dw	39812
   228  007AAF  3400               	dw	13312
   229  007AB1  0003               	dw	3
   230  007AB3  0000               	dw	0
   231  007AB5  0012               	dw	18
   232  007AB7  0000               	dw	0
   233  007AB9  0001               	dw	1
   234  007ABB  0600               	dw	1536
   235  007ABD  0340               	dw	832
   236  007ABF  0020               	dw	32
   237  007AC1                     __end_of_PLL_INIT_REGISTERS:
   238                           	opt stack 0
   239  007AC1                     _dpowers:
   240                           	opt stack 0
   241  007AC1  0001               	dw	1
   242  007AC3  000A               	dw	10
   243  007AC5  0064               	dw	100
   244  007AC7  03E8               	dw	1000
   245  007AC9  2710               	dw	10000
   246  007ACB                     __end_of_dpowers:
   247                           	opt stack 0
   248  007ACB                     _channelArr:
   249                           	opt stack 0
   250  007ACB  04                 	db	4
   251  007ACC  05                 	db	5
   252  007ACD  06                 	db	6
   253  007ACE  07                 	db	7
   254  007ACF                     __end_of_channelArr:
   255                           	opt stack 0
   256  007ACF                     exp@coeff:
   257                           	opt stack 0
   258  007ACF  00                 	db	0
   259  007AD0  80                 	db	128
   260  007AD1  3F                 	db	63
   261  007AD2  72                 	db	114
   262  007AD3  31                 	db	49
   263  007AD4  3F                 	db	63
   264  007AD5  FE                 	db	254
   265  007AD6  75                 	db	117
   266  007AD7  3E                 	db	62
   267  007AD8  58                 	db	88
   268  007AD9  63                 	db	99
   269  007ADA  3D                 	db	61
   270  007ADB  95                 	db	149
   271  007ADC  1D                 	db	29
   272  007ADD  3C                 	db	60
   273  007ADE  C5                 	db	197
   274  007ADF  AE                 	db	174
   275  007AE0  3A                 	db	58
   276  007AE1  79                 	db	121
   277  007AE2  21                 	db	33
   278  007AE3  39                 	db	57
   279  007AE4  94                 	db	148
   280  007AE5  80                 	db	128
   281  007AE6  37                 	db	55
   282  007AE7  93                 	db	147
   283  007AE8  A7                 	db	167
   284  007AE9  35                 	db	53
   285  007AEA  56                 	db	86
   286  007AEB  15                 	db	21
   287  007AEC  34                 	db	52
   288  007AED                     __end_ofexp@coeff:
   289                           	opt stack 0
   290  007AED                     log@coeff:
   291                           	opt stack 0
   292  007AED  00                 	db	0
   293  007AEE  00                 	db	0
   294  007AEF  00                 	db	0
   295  007AF0  00                 	db	0
   296  007AF1  80                 	db	128
   297  007AF2  3F                 	db	63
   298  007AF3  F0                 	db	240
   299  007AF4  FF                 	db	255
   300  007AF5  BE                 	db	190
   301  007AF6  E2                 	db	226
   302  007AF7  A9                 	db	169
   303  007AF8  3E                 	db	62
   304  007AF9  83                 	db	131
   305  007AFA  76                 	db	118
   306  007AFB  BE                 	db	190
   307  007AFC  AE                 	db	174
   308  007AFD  2B                 	db	43
   309  007AFE  3E                 	db	62
   310  007AFF  3C                 	db	60
   311  007B00  C3                 	db	195
   312  007B01  BD                 	db	189
   313  007B02  D2                 	db	210
   314  007B03  13                 	db	19
   315  007B04  3D                 	db	61
   316  007B05  78                 	db	120
   317  007B06  D3                 	db	211
   318  007B07  BB                 	db	187
   319  007B08                     __end_oflog@coeff:
   320                           	opt stack 0
   321  007B08                     STR_32:
   322                           
   323                           ; BSR set to: 0
   324  007B08  24                 	db	36
   325  007B09  52                 	db	82	;'R'
   326  007B0A  43                 	db	67	;'C'
   327  007B0B  50                 	db	80	;'P'
   328  007B0C  20                 	db	32
   329  007B0D  3C                 	db	60	;'<'
   330  007B0E  58                 	db	88	;'X'
   331  007B0F  3E                 	db	62	;'>'
   332  007B10  3C                 	db	60	;'<'
   333  007B11  63                 	db	99	;'c'
   334  007B12  72                 	db	114	;'r'
   335  007B13  3E                 	db	62	;'>'
   336  007B14  20                 	db	32
   337  007B15  20                 	db	32
   338  007B16  20                 	db	32
   339  007B17  20                 	db	32
   340  007B18  20                 	db	32
   341  007B19  53                 	db	83	;'S'
   342  007B1A  65                 	db	101	;'e'
   343  007B1B  74                 	db	116	;'t'
   344  007B1C  20                 	db	32
   345  007B1D  43                 	db	67	;'C'
   346  007B1E  6F                 	db	111	;'o'
   347  007B1F  6D                 	db	109	;'m'
   348  007B20  70                 	db	112	;'p'
   349  007B21  72                 	db	114	;'r'
   350  007B22  65                 	db	101	;'e'
   351  007B23  73                 	db	115	;'s'
   352  007B24  73                 	db	115	;'s'
   353  007B25  69                 	db	105	;'i'
   354  007B26  6F                 	db	111	;'o'
   355  007B27  6E                 	db	110	;'n'
   356  007B28  20                 	db	32
   357  007B29  6F                 	db	111	;'o'
   358  007B2A  70                 	db	112	;'p'
   359  007B2B  65                 	db	101	;'e'
   360  007B2C  72                 	db	114	;'r'
   361  007B2D  61                 	db	97	;'a'
   362  007B2E  74                 	db	116	;'t'
   363  007B2F  69                 	db	105	;'i'
   364  007B30  6F                 	db	111	;'o'
   365  007B31  6E                 	db	110	;'n'
   366  007B32  20                 	db	32
   367  007B33  6D                 	db	109	;'m'
   368  007B34  6F                 	db	111	;'o'
   369  007B35  64                 	db	100	;'d'
   370  007B36  65                 	db	101	;'e'
   371  007B37  20                 	db	32
   372  007B38  61                 	db	97	;'a'
   373  007B39  74                 	db	116	;'t'
   374  007B3A  20                 	db	32
   375  007B3B  52                 	db	82	;'R'
   376  007B3C  58                 	db	88	;'X'
   377  007B3D  20                 	db	32
   378  007B3E  73                 	db	115	;'s'
   379  007B3F  79                 	db	121	;'y'
   380  007B40  73                 	db	115	;'s'
   381  007B41  74                 	db	116	;'t'
   382  007B42  65                 	db	101	;'e'
   383  007B43  6D                 	db	109	;'m'
   384  007B44  3A                 	db	58	;':'
   385  007B45  20                 	db	32
   386  007B46  41                 	db	65	;'A'
   387  007B47  75                 	db	117	;'u'
   388  007B48  74                 	db	116	;'t'
   389  007B49  6F                 	db	111	;'o'
   390  007B4A  6D                 	db	109	;'m'
   391  007B4B  61                 	db	97	;'a'
   392  007B4C  74                 	db	116	;'t'
   393  007B4D  69                 	db	105	;'i'
   394  007B4E  63                 	db	99	;'c'
   395  007B4F  5B                 	db	91	;'['
   396  007B50  31                 	db	49	;'1'
   397  007B51  5D                 	db	93	;']'
   398  007B52  20                 	db	32
   399  007B53  4D                 	db	77	;'M'
   400  007B54  61                 	db	97	;'a'
   401  007B55  6E                 	db	110	;'n'
   402  007B56  75                 	db	117	;'u'
   403  007B57  61                 	db	97	;'a'
   404  007B58  6C                 	db	108	;'l'
   405  007B59  5B                 	db	91	;'['
   406  007B5A  30                 	db	48	;'0'
   407  007B5B  5D                 	db	93	;']'
   408  007B5C  20                 	db	32
   409  007B5D  5B                 	db	91	;'['
   410  007B5E  44                 	db	68	;'D'
   411  007B5F  65                 	db	101	;'e'
   412  007B60  66                 	db	102	;'f'
   413  007B61  61                 	db	97	;'a'
   414  007B62  75                 	db	117	;'u'
   415  007B63  6C                 	db	108	;'l'
   416  007B64  74                 	db	116	;'t'
   417  007B65  20                 	db	32
   418  007B66  3D                 	db	61	;'='
   419  007B67  20                 	db	32
   420  007B68  30                 	db	48	;'0'
   421  007B69  5D                 	db	93	;']'
   422  007B6A  0D                 	db	13
   423  007B6B  0A                 	db	10
   424  007B6C  00                 	db	0
   425  007B6D                     STR_31:
   426                           
   427                           ; BSR set to: 0
   428  007B6D  24                 	db	36
   429  007B6E  52                 	db	82	;'R'
   430  007B6F  43                 	db	67	;'C'
   431  007B70  52                 	db	82	;'R'
   432  007B71  20                 	db	32
   433  007B72  3C                 	db	60	;'<'
   434  007B73  58                 	db	88	;'X'
   435  007B74  3E                 	db	62	;'>'
   436  007B75  3C                 	db	60	;'<'
   437  007B76  63                 	db	99	;'c'
   438  007B77  72                 	db	114	;'r'
   439  007B78  3E                 	db	62	;'>'
   440  007B79  20                 	db	32
   441  007B7A  20                 	db	32
   442  007B7B  20                 	db	32
   443  007B7C  20                 	db	32
   444  007B7D  20                 	db	32
   445  007B7E  53                 	db	83	;'S'
   446  007B7F  65                 	db	101	;'e'
   447  007B80  74                 	db	116	;'t'
   448  007B81  20                 	db	32
   449  007B82  43                 	db	67	;'C'
   450  007B83  6F                 	db	111	;'o'
   451  007B84  6D                 	db	109	;'m'
   452  007B85  70                 	db	112	;'p'
   453  007B86  72                 	db	114	;'r'
   454  007B87  65                 	db	101	;'e'
   455  007B88  73                 	db	115	;'s'
   456  007B89  73                 	db	115	;'s'
   457  007B8A  69                 	db	105	;'i'
   458  007B8B  6F                 	db	111	;'o'
   459  007B8C  6E                 	db	110	;'n'
   460  007B8D  20                 	db	32
   461  007B8E  72                 	db	114	;'r'
   462  007B8F  61                 	db	97	;'a'
   463  007B90  6E                 	db	110	;'n'
   464  007B91  67                 	db	103	;'g'
   465  007B92  65                 	db	101	;'e'
   466  007B93  20                 	db	32
   467  007B94  61                 	db	97	;'a'
   468  007B95  74                 	db	116	;'t'
   469  007B96  20                 	db	32
   470  007B97  52                 	db	82	;'R'
   471  007B98  58                 	db	88	;'X'
   472  007B99  20                 	db	32
   473  007B9A  73                 	db	115	;'s'
   474  007B9B  79                 	db	121	;'y'
   475  007B9C  73                 	db	115	;'s'
   476  007B9D  74                 	db	116	;'t'
   477  007B9E  65                 	db	101	;'e'
   478  007B9F  6D                 	db	109	;'m'
   479  007BA0  2E                 	db	46
   480  007BA1  20                 	db	32
   481  007BA2  48                 	db	72	;'H'
   482  007BA3  69                 	db	105	;'i'
   483  007BA4  67                 	db	103	;'g'
   484  007BA5  68                 	db	104	;'h'
   485  007BA6  20                 	db	32
   486  007BA7  5B                 	db	91	;'['
   487  007BA8  31                 	db	49	;'1'
   488  007BA9  5D                 	db	93	;']'
   489  007BAA  20                 	db	32
   490  007BAB  4C                 	db	76	;'L'
   491  007BAC  6F                 	db	111	;'o'
   492  007BAD  77                 	db	119	;'w'
   493  007BAE  20                 	db	32
   494  007BAF  5B                 	db	91	;'['
   495  007BB0  30                 	db	48	;'0'
   496  007BB1  5D                 	db	93	;']'
   497  007BB2  20                 	db	32
   498  007BB3  5B                 	db	91	;'['
   499  007BB4  44                 	db	68	;'D'
   500  007BB5  65                 	db	101	;'e'
   501  007BB6  66                 	db	102	;'f'
   502  007BB7  61                 	db	97	;'a'
   503  007BB8  75                 	db	117	;'u'
   504  007BB9  6C                 	db	108	;'l'
   505  007BBA  74                 	db	116	;'t'
   506  007BBB  20                 	db	32
   507  007BBC  3D                 	db	61	;'='
   508  007BBD  20                 	db	32
   509  007BBE  30                 	db	48	;'0'
   510  007BBF  5D                 	db	93	;']'
   511  007BC0  0D                 	db	13
   512  007BC1  0A                 	db	10
   513  007BC2  00                 	db	0
   514  007BC3                     STR_36:
   515                           
   516                           ; BSR set to: 0
   517  007BC3  24                 	db	36
   518  007BC4  53                 	db	83	;'S'
   519  007BC5  42                 	db	66	;'B'
   520  007BC6  55                 	db	85	;'U'
   521  007BC7  20                 	db	32
   522  007BC8  3C                 	db	60	;'<'
   523  007BC9  58                 	db	88	;'X'
   524  007BCA  3E                 	db	62	;'>'
   525  007BCB  3C                 	db	60	;'<'
   526  007BCC  63                 	db	99	;'c'
   527  007BCD  72                 	db	114	;'r'
   528  007BCE  3E                 	db	62	;'>'
   529  007BCF  20                 	db	32
   530  007BD0  20                 	db	32
   531  007BD1  20                 	db	32
   532  007BD2  20                 	db	32
   533  007BD3  20                 	db	32
   534  007BD4  53                 	db	83	;'S'
   535  007BD5  65                 	db	101	;'e'
   536  007BD6  74                 	db	116	;'t'
   537  007BD7  20                 	db	32
   538  007BD8  55                 	db	85	;'U'
   539  007BD9  41                 	db	65	;'A'
   540  007BDA  52                 	db	82	;'R'
   541  007BDB  54                 	db	84	;'T'
   542  007BDC  20                 	db	32
   543  007BDD  61                 	db	97	;'a'
   544  007BDE  75                 	db	117	;'u'
   545  007BDF  74                 	db	116	;'t'
   546  007BE0  6F                 	db	111	;'o'
   547  007BE1  6D                 	db	109	;'m'
   548  007BE2  61                 	db	97	;'a'
   549  007BE3  74                 	db	116	;'t'
   550  007BE4  69                 	db	105	;'i'
   551  007BE5  63                 	db	99	;'c'
   552  007BE6  20                 	db	32
   553  007BE7  6F                 	db	111	;'o'
   554  007BE8  70                 	db	112	;'p'
   555  007BE9  65                 	db	101	;'e'
   556  007BEA  72                 	db	114	;'r'
   557  007BEB  61                 	db	97	;'a'
   558  007BEC  74                 	db	116	;'t'
   559  007BED  69                 	db	105	;'i'
   560  007BEE  6F                 	db	111	;'o'
   561  007BEF  6E                 	db	110	;'n'
   562  007BF0  3A                 	db	58	;':'
   563  007BF1  20                 	db	32
   564  007BF2  41                 	db	65	;'A'
   565  007BF3  75                 	db	117	;'u'
   566  007BF4  74                 	db	116	;'t'
   567  007BF5  6F                 	db	111	;'o'
   568  007BF6  6D                 	db	109	;'m'
   569  007BF7  61                 	db	97	;'a'
   570  007BF8  74                 	db	116	;'t'
   571  007BF9  69                 	db	105	;'i'
   572  007BFA  63                 	db	99	;'c'
   573  007BFB  5B                 	db	91	;'['
   574  007BFC  31                 	db	49	;'1'
   575  007BFD  5D                 	db	93	;']'
   576  007BFE  20                 	db	32
   577  007BFF  4D                 	db	77	;'M'
   578  007C00  61                 	db	97	;'a'
   579  007C01  6E                 	db	110	;'n'
   580  007C02  75                 	db	117	;'u'
   581  007C03  61                 	db	97	;'a'
   582  007C04  6C                 	db	108	;'l'
   583  007C05  5B                 	db	91	;'['
   584  007C06  30                 	db	48	;'0'
   585  007C07  5D                 	db	93	;']'
   586  007C08  20                 	db	32
   587  007C09  5B                 	db	91	;'['
   588  007C0A  44                 	db	68	;'D'
   589  007C0B  65                 	db	101	;'e'
   590  007C0C  66                 	db	102	;'f'
   591  007C0D  61                 	db	97	;'a'
   592  007C0E  75                 	db	117	;'u'
   593  007C0F  6C                 	db	108	;'l'
   594  007C10  74                 	db	116	;'t'
   595  007C11  20                 	db	32
   596  007C12  3D                 	db	61	;'='
   597  007C13  20                 	db	32
   598  007C14  30                 	db	48	;'0'
   599  007C15  5D                 	db	93	;']'
   600  007C16  0D                 	db	13
   601  007C17  0A                 	db	10
   602  007C18  00                 	db	0
   603  007C19                     STR_25:
   604                           
   605                           ; BSR set to: 0
   606  007C19  24                 	db	36
   607  007C1A  54                 	db	84	;'T'
   608  007C1B  58                 	db	88	;'X'
   609  007C1C  20                 	db	32
   610  007C1D  3C                 	db	60	;'<'
   611  007C1E  58                 	db	88	;'X'
   612  007C1F  3E                 	db	62	;'>'
   613  007C20  3C                 	db	60	;'<'
   614  007C21  63                 	db	99	;'c'
   615  007C22  72                 	db	114	;'r'
   616  007C23  3E                 	db	62	;'>'
   617  007C24  20                 	db	32
   618  007C25  20                 	db	32
   619  007C26  20                 	db	32
   620  007C27  20                 	db	32
   621  007C28  20                 	db	32
   622  007C29  20                 	db	32
   623  007C2A  54                 	db	84	;'T'
   624  007C2B  75                 	db	117	;'u'
   625  007C2C  72                 	db	114	;'r'
   626  007C2D  6E                 	db	110	;'n'
   627  007C2E  20                 	db	32
   628  007C2F  6F                 	db	111	;'o'
   629  007C30  6E                 	db	110	;'n'
   630  007C31  5B                 	db	91	;'['
   631  007C32  31                 	db	49	;'1'
   632  007C33  5D                 	db	93	;']'
   633  007C34  20                 	db	32
   634  007C35  2F                 	db	47
   635  007C36  20                 	db	32
   636  007C37  6F                 	db	111	;'o'
   637  007C38  66                 	db	102	;'f'
   638  007C39  66                 	db	102	;'f'
   639  007C3A  5B                 	db	91	;'['
   640  007C3B  30                 	db	48	;'0'
   641  007C3C  5D                 	db	93	;']'
   642  007C3D  20                 	db	32
   643  007C3E  74                 	db	116	;'t'
   644  007C3F  72                 	db	114	;'r'
   645  007C40  61                 	db	97	;'a'
   646  007C41  6E                 	db	110	;'n'
   647  007C42  73                 	db	115	;'s'
   648  007C43  6D                 	db	109	;'m'
   649  007C44  69                 	db	105	;'i'
   650  007C45  73                 	db	115	;'s'
   651  007C46  73                 	db	115	;'s'
   652  007C47  69                 	db	105	;'i'
   653  007C48  6F                 	db	111	;'o'
   654  007C49  6E                 	db	110	;'n'
   655  007C4A  20                 	db	32
   656  007C4B  61                 	db	97	;'a'
   657  007C4C  74                 	db	116	;'t'
   658  007C4D  20                 	db	32
   659  007C4E  54                 	db	84	;'T'
   660  007C4F  58                 	db	88	;'X'
   661  007C50  20                 	db	32
   662  007C51  73                 	db	115	;'s'
   663  007C52  79                 	db	121	;'y'
   664  007C53  73                 	db	115	;'s'
   665  007C54  74                 	db	116	;'t'
   666  007C55  65                 	db	101	;'e'
   667  007C56  6D                 	db	109	;'m'
   668  007C57  20                 	db	32
   669  007C58  5B                 	db	91	;'['
   670  007C59  44                 	db	68	;'D'
   671  007C5A  65                 	db	101	;'e'
   672  007C5B  66                 	db	102	;'f'
   673  007C5C  61                 	db	97	;'a'
   674  007C5D  75                 	db	117	;'u'
   675  007C5E  6C                 	db	108	;'l'
   676  007C5F  74                 	db	116	;'t'
   677  007C60  20                 	db	32
   678  007C61  3D                 	db	61	;'='
   679  007C62  20                 	db	32
   680  007C63  30                 	db	48	;'0'
   681  007C64  5D                 	db	93	;']'
   682  007C65  0D                 	db	13
   683  007C66  0A                 	db	10
   684  007C67  00                 	db	0
   685  007C68                     STR_24:
   686                           
   687                           ; BSR set to: 0
   688  007C68  24                 	db	36
   689  007C69  54                 	db	84	;'T'
   690  007C6A  42                 	db	66	;'B'
   691  007C6B  20                 	db	32
   692  007C6C  3C                 	db	60	;'<'
   693  007C6D  58                 	db	88	;'X'
   694  007C6E  3E                 	db	62	;'>'
   695  007C6F  3C                 	db	60	;'<'
   696  007C70  63                 	db	99	;'c'
   697  007C71  72                 	db	114	;'r'
   698  007C72  3E                 	db	62	;'>'
   699  007C73  20                 	db	32
   700  007C74  20                 	db	32
   701  007C75  20                 	db	32
   702  007C76  20                 	db	32
   703  007C77  20                 	db	32
   704  007C78  20                 	db	32
   705  007C79  54                 	db	84	;'T'
   706  007C7A  75                 	db	117	;'u'
   707  007C7B  72                 	db	114	;'r'
   708  007C7C  6E                 	db	110	;'n'
   709  007C7D  20                 	db	32
   710  007C7E  6F                 	db	111	;'o'
   711  007C7F  6E                 	db	110	;'n'
   712  007C80  5B                 	db	91	;'['
   713  007C81  31                 	db	49	;'1'
   714  007C82  5D                 	db	93	;']'
   715  007C83  20                 	db	32
   716  007C84  2F                 	db	47
   717  007C85  20                 	db	32
   718  007C86  6F                 	db	111	;'o'
   719  007C87  66                 	db	102	;'f'
   720  007C88  66                 	db	102	;'f'
   721  007C89  5B                 	db	91	;'['
   722  007C8A  30                 	db	48	;'0'
   723  007C8B  5D                 	db	93	;']'
   724  007C8C  20                 	db	32
   725  007C8D  42                 	db	66	;'B'
   726  007C8E  49                 	db	73	;'I'
   727  007C8F  54                 	db	84	;'T'
   728  007C90  20                 	db	32
   729  007C91  6D                 	db	109	;'m'
   730  007C92  6F                 	db	111	;'o'
   731  007C93  64                 	db	100	;'d'
   732  007C94  65                 	db	101	;'e'
   733  007C95  20                 	db	32
   734  007C96  61                 	db	97	;'a'
   735  007C97  74                 	db	116	;'t'
   736  007C98  20                 	db	32
   737  007C99  54                 	db	84	;'T'
   738  007C9A  58                 	db	88	;'X'
   739  007C9B  20                 	db	32
   740  007C9C  73                 	db	115	;'s'
   741  007C9D  79                 	db	121	;'y'
   742  007C9E  73                 	db	115	;'s'
   743  007C9F  74                 	db	116	;'t'
   744  007CA0  65                 	db	101	;'e'
   745  007CA1  6D                 	db	109	;'m'
   746  007CA2  20                 	db	32
   747  007CA3  5B                 	db	91	;'['
   748  007CA4  44                 	db	68	;'D'
   749  007CA5  65                 	db	101	;'e'
   750  007CA6  66                 	db	102	;'f'
   751  007CA7  61                 	db	97	;'a'
   752  007CA8  75                 	db	117	;'u'
   753  007CA9  6C                 	db	108	;'l'
   754  007CAA  74                 	db	116	;'t'
   755  007CAB  20                 	db	32
   756  007CAC  3D                 	db	61	;'='
   757  007CAD  20                 	db	32
   758  007CAE  30                 	db	48	;'0'
   759  007CAF  5D                 	db	93	;']'
   760  007CB0  0D                 	db	13
   761  007CB1  0A                 	db	10
   762  007CB2  00                 	db	0
   763  007CB3                     STR_27:
   764                           
   765                           ; BSR set to: 0
   766  007CB3  24                 	db	36
   767  007CB4  52                 	db	82	;'R'
   768  007CB5  49                 	db	73	;'I'
   769  007CB6  20                 	db	32
   770  007CB7  3C                 	db	60	;'<'
   771  007CB8  58                 	db	88	;'X'
   772  007CB9  58                 	db	88	;'X'
   773  007CBA  58                 	db	88	;'X'
   774  007CBB  58                 	db	88	;'X'
   775  007CBC  3E                 	db	62	;'>'
   776  007CBD  3C                 	db	60	;'<'
   777  007CBE  63                 	db	99	;'c'
   778  007CBF  72                 	db	114	;'r'
   779  007CC0  3E                 	db	62	;'>'
   780  007CC1  20                 	db	32
   781  007CC2  20                 	db	32
   782  007CC3  20                 	db	32
   783  007CC4  49                 	db	73	;'I'
   784  007CC5  6E                 	db	110	;'n'
   785  007CC6  69                 	db	105	;'i'
   786  007CC7  74                 	db	116	;'t'
   787  007CC8  20                 	db	32
   788  007CC9  52                 	db	82	;'R'
   789  007CCA  58                 	db	88	;'X'
   790  007CCB  20                 	db	32
   791  007CCC  73                 	db	115	;'s'
   792  007CCD  79                 	db	121	;'y'
   793  007CCE  73                 	db	115	;'s'
   794  007CCF  74                 	db	116	;'t'
   795  007CD0  65                 	db	101	;'e'
   796  007CD1  6D                 	db	109	;'m'
   797  007CD2  20                 	db	32
   798  007CD3  61                 	db	97	;'a'
   799  007CD4  6E                 	db	110	;'n'
   800  007CD5  64                 	db	100	;'d'
   801  007CD6  20                 	db	32
   802  007CD7  73                 	db	115	;'s'
   803  007CD8  65                 	db	101	;'e'
   804  007CD9  74                 	db	116	;'t'
   805  007CDA  20                 	db	32
   806  007CDB  66                 	db	102	;'f'
   807  007CDC  72                 	db	114	;'r'
   808  007CDD  65                 	db	101	;'e'
   809  007CDE  71                 	db	113	;'q'
   810  007CDF  75                 	db	117	;'u'
   811  007CE0  65                 	db	101	;'e'
   812  007CE1  6E                 	db	110	;'n'
   813  007CE2  63                 	db	99	;'c'
   814  007CE3  79                 	db	121	;'y'
   815  007CE4  20                 	db	32
   816  007CE5  61                 	db	97	;'a'
   817  007CE6  74                 	db	116	;'t'
   818  007CE7  20                 	db	32
   819  007CE8  58                 	db	88	;'X'
   820  007CE9  58                 	db	88	;'X'
   821  007CEA  58                 	db	88	;'X'
   822  007CEB  58                 	db	88	;'X'
   823  007CEC  20                 	db	32
   824  007CED  28                 	db	40
   825  007CEE  30                 	db	48	;'0'
   826  007CEF  2D                 	db	45
   827  007CF0  39                 	db	57	;'9'
   828  007CF1  39                 	db	57	;'9'
   829  007CF2  39                 	db	57	;'9'
   830  007CF3  39                 	db	57	;'9'
   831  007CF4  29                 	db	41
   832  007CF5  5B                 	db	91	;'['
   833  007CF6  4D                 	db	77	;'M'
   834  007CF7  48                 	db	72	;'H'
   835  007CF8  7A                 	db	122	;'z'
   836  007CF9  5D                 	db	93	;']'
   837  007CFA  0D                 	db	13
   838  007CFB  0A                 	db	10
   839  007CFC  00                 	db	0
   840  007CFD                     STR_21:
   841                           
   842                           ; BSR set to: 0
   843  007CFD  24                 	db	36
   844  007CFE  54                 	db	84	;'T'
   845  007CFF  49                 	db	73	;'I'
   846  007D00  20                 	db	32
   847  007D01  3C                 	db	60	;'<'
   848  007D02  58                 	db	88	;'X'
   849  007D03  58                 	db	88	;'X'
   850  007D04  58                 	db	88	;'X'
   851  007D05  58                 	db	88	;'X'
   852  007D06  3E                 	db	62	;'>'
   853  007D07  3C                 	db	60	;'<'
   854  007D08  63                 	db	99	;'c'
   855  007D09  72                 	db	114	;'r'
   856  007D0A  3E                 	db	62	;'>'
   857  007D0B  20                 	db	32
   858  007D0C  20                 	db	32
   859  007D0D  20                 	db	32
   860  007D0E  49                 	db	73	;'I'
   861  007D0F  6E                 	db	110	;'n'
   862  007D10  69                 	db	105	;'i'
   863  007D11  74                 	db	116	;'t'
   864  007D12  20                 	db	32
   865  007D13  54                 	db	84	;'T'
   866  007D14  58                 	db	88	;'X'
   867  007D15  20                 	db	32
   868  007D16  73                 	db	115	;'s'
   869  007D17  79                 	db	121	;'y'
   870  007D18  73                 	db	115	;'s'
   871  007D19  74                 	db	116	;'t'
   872  007D1A  65                 	db	101	;'e'
   873  007D1B  6D                 	db	109	;'m'
   874  007D1C  20                 	db	32
   875  007D1D  61                 	db	97	;'a'
   876  007D1E  6E                 	db	110	;'n'
   877  007D1F  64                 	db	100	;'d'
   878  007D20  20                 	db	32
   879  007D21  73                 	db	115	;'s'
   880  007D22  65                 	db	101	;'e'
   881  007D23  74                 	db	116	;'t'
   882  007D24  20                 	db	32
   883  007D25  66                 	db	102	;'f'
   884  007D26  72                 	db	114	;'r'
   885  007D27  65                 	db	101	;'e'
   886  007D28  71                 	db	113	;'q'
   887  007D29  75                 	db	117	;'u'
   888  007D2A  65                 	db	101	;'e'
   889  007D2B  6E                 	db	110	;'n'
   890  007D2C  63                 	db	99	;'c'
   891  007D2D  79                 	db	121	;'y'
   892  007D2E  20                 	db	32
   893  007D2F  28                 	db	40
   894  007D30  30                 	db	48	;'0'
   895  007D31  2D                 	db	45
   896  007D32  39                 	db	57	;'9'
   897  007D33  39                 	db	57	;'9'
   898  007D34  39                 	db	57	;'9'
   899  007D35  39                 	db	57	;'9'
   900  007D36  29                 	db	41
   901  007D37  5B                 	db	91	;'['
   902  007D38  4D                 	db	77	;'M'
   903  007D39  48                 	db	72	;'H'
   904  007D3A  7A                 	db	122	;'z'
   905  007D3B  5D                 	db	93	;']'
   906  007D3C  0D                 	db	13
   907  007D3D  0A                 	db	10
   908  007D3E  00                 	db	0
   909  007D3F                     STR_29:
   910                           
   911                           ; BSR set to: 0
   912  007D3F  24                 	db	36
   913  007D40  52                 	db	82	;'R'
   914  007D41  42                 	db	66	;'B'
   915  007D42  20                 	db	32
   916  007D43  3C                 	db	60	;'<'
   917  007D44  58                 	db	88	;'X'
   918  007D45  3E                 	db	62	;'>'
   919  007D46  3C                 	db	60	;'<'
   920  007D47  63                 	db	99	;'c'
   921  007D48  72                 	db	114	;'r'
   922  007D49  3E                 	db	62	;'>'
   923  007D4A  20                 	db	32
   924  007D4B  20                 	db	32
   925  007D4C  20                 	db	32
   926  007D4D  20                 	db	32
   927  007D4E  20                 	db	32
   928  007D4F  20                 	db	32
   929  007D50  54                 	db	84	;'T'
   930  007D51  75                 	db	117	;'u'
   931  007D52  72                 	db	114	;'r'
   932  007D53  6E                 	db	110	;'n'
   933  007D54  20                 	db	32
   934  007D55  6F                 	db	111	;'o'
   935  007D56  6E                 	db	110	;'n'
   936  007D57  5B                 	db	91	;'['
   937  007D58  31                 	db	49	;'1'
   938  007D59  5D                 	db	93	;']'
   939  007D5A  20                 	db	32
   940  007D5B  2F                 	db	47
   941  007D5C  20                 	db	32
   942  007D5D  6F                 	db	111	;'o'
   943  007D5E  66                 	db	102	;'f'
   944  007D5F  66                 	db	102	;'f'
   945  007D60  5B                 	db	91	;'['
   946  007D61  30                 	db	48	;'0'
   947  007D62  5D                 	db	93	;']'
   948  007D63  20                 	db	32
   949  007D64  42                 	db	66	;'B'
   950  007D65  49                 	db	73	;'I'
   951  007D66  54                 	db	84	;'T'
   952  007D67  20                 	db	32
   953  007D68  6D                 	db	109	;'m'
   954  007D69  6F                 	db	111	;'o'
   955  007D6A  64                 	db	100	;'d'
   956  007D6B  65                 	db	101	;'e'
   957  007D6C  20                 	db	32
   958  007D6D  61                 	db	97	;'a'
   959  007D6E  74                 	db	116	;'t'
   960  007D6F  20                 	db	32
   961  007D70  52                 	db	82	;'R'
   962  007D71  58                 	db	88	;'X'
   963  007D72  20                 	db	32
   964  007D73  73                 	db	115	;'s'
   965  007D74  79                 	db	121	;'y'
   966  007D75  73                 	db	115	;'s'
   967  007D76  74                 	db	116	;'t'
   968  007D77  65                 	db	101	;'e'
   969  007D78  6D                 	db	109	;'m'
   970  007D79  2E                 	db	46
   971  007D7A  0D                 	db	13
   972  007D7B  0A                 	db	10
   973  007D7C  00                 	db	0
   974  007D7D                     STR_22:
   975                           
   976                           ; BSR set to: 0
   977  007D7D  24                 	db	36
   978  007D7E  54                 	db	84	;'T'
   979  007D7F  46                 	db	70	;'F'
   980  007D80  20                 	db	32
   981  007D81  3C                 	db	60	;'<'
   982  007D82  58                 	db	88	;'X'
   983  007D83  58                 	db	88	;'X'
   984  007D84  58                 	db	88	;'X'
   985  007D85  58                 	db	88	;'X'
   986  007D86  3E                 	db	62	;'>'
   987  007D87  3C                 	db	60	;'<'
   988  007D88  63                 	db	99	;'c'
   989  007D89  72                 	db	114	;'r'
   990  007D8A  3E                 	db	62	;'>'
   991  007D8B  20                 	db	32
   992  007D8C  20                 	db	32
   993  007D8D  20                 	db	32
   994  007D8E  53                 	db	83	;'S'
   995  007D8F  65                 	db	101	;'e'
   996  007D90  74                 	db	116	;'t'
   997  007D91  20                 	db	32
   998  007D92  54                 	db	84	;'T'
   999  007D93  58                 	db	88	;'X'
  1000  007D94  20                 	db	32
  1001  007D95  73                 	db	115	;'s'
  1002  007D96  79                 	db	121	;'y'
  1003  007D97  73                 	db	115	;'s'
  1004  007D98  74                 	db	116	;'t'
  1005  007D99  65                 	db	101	;'e'
  1006  007D9A  6D                 	db	109	;'m'
  1007  007D9B  20                 	db	32
  1008  007D9C  66                 	db	102	;'f'
  1009  007D9D  72                 	db	114	;'r'
  1010  007D9E  65                 	db	101	;'e'
  1011  007D9F  71                 	db	113	;'q'
  1012  007DA0  75                 	db	117	;'u'
  1013  007DA1  65                 	db	101	;'e'
  1014  007DA2  6E                 	db	110	;'n'
  1015  007DA3  63                 	db	99	;'c'
  1016  007DA4  79                 	db	121	;'y'
  1017  007DA5  20                 	db	32
  1018  007DA6  61                 	db	97	;'a'
  1019  007DA7  74                 	db	116	;'t'
  1020  007DA8  20                 	db	32
  1021  007DA9  28                 	db	40
  1022  007DAA  30                 	db	48	;'0'
  1023  007DAB  2D                 	db	45
  1024  007DAC  39                 	db	57	;'9'
  1025  007DAD  39                 	db	57	;'9'
  1026  007DAE  39                 	db	57	;'9'
  1027  007DAF  39                 	db	57	;'9'
  1028  007DB0  29                 	db	41
  1029  007DB1  5B                 	db	91	;'['
  1030  007DB2  4D                 	db	77	;'M'
  1031  007DB3  48                 	db	72	;'H'
  1032  007DB4  7A                 	db	122	;'z'
  1033  007DB5  5D                 	db	93	;']'
  1034  007DB6  2E                 	db	46
  1035  007DB7  0D                 	db	13
  1036  007DB8  0A                 	db	10
  1037  007DB9  00                 	db	0
  1038  007DBA                     STR_30:
  1039                           
  1040                           ; BSR set to: 0
  1041  007DBA  24                 	db	36
  1042  007DBB  52                 	db	82	;'R'
  1043  007DBC  58                 	db	88	;'X'
  1044  007DBD  20                 	db	32
  1045  007DBE  3C                 	db	60	;'<'
  1046  007DBF  58                 	db	88	;'X'
  1047  007DC0  3E                 	db	62	;'>'
  1048  007DC1  3C                 	db	60	;'<'
  1049  007DC2  63                 	db	99	;'c'
  1050  007DC3  72                 	db	114	;'r'
  1051  007DC4  3E                 	db	62	;'>'
  1052  007DC5  20                 	db	32
  1053  007DC6  20                 	db	32
  1054  007DC7  20                 	db	32
  1055  007DC8  20                 	db	32
  1056  007DC9  20                 	db	32
  1057  007DCA  20                 	db	32
  1058  007DCB  54                 	db	84	;'T'
  1059  007DCC  75                 	db	117	;'u'
  1060  007DCD  72                 	db	114	;'r'
  1061  007DCE  6E                 	db	110	;'n'
  1062  007DCF  20                 	db	32
  1063  007DD0  6F                 	db	111	;'o'
  1064  007DD1  6E                 	db	110	;'n'
  1065  007DD2  5B                 	db	91	;'['
  1066  007DD3  31                 	db	49	;'1'
  1067  007DD4  5D                 	db	93	;']'
  1068  007DD5  20                 	db	32
  1069  007DD6  2F                 	db	47
  1070  007DD7  20                 	db	32
  1071  007DD8  6F                 	db	111	;'o'
  1072  007DD9  66                 	db	102	;'f'
  1073  007DDA  66                 	db	102	;'f'
  1074  007DDB  5B                 	db	91	;'['
  1075  007DDC  30                 	db	48	;'0'
  1076  007DDD  5D                 	db	93	;']'
  1077  007DDE  20                 	db	32
  1078  007DDF  72                 	db	114	;'r'
  1079  007DE0  65                 	db	101	;'e'
  1080  007DE1  63                 	db	99	;'c'
  1081  007DE2  65                 	db	101	;'e'
  1082  007DE3  69                 	db	105	;'i'
  1083  007DE4  76                 	db	118	;'v'
  1084  007DE5  65                 	db	101	;'e'
  1085  007DE6  20                 	db	32
  1086  007DE7  61                 	db	97	;'a'
  1087  007DE8  74                 	db	116	;'t'
  1088  007DE9  20                 	db	32
  1089  007DEA  52                 	db	82	;'R'
  1090  007DEB  58                 	db	88	;'X'
  1091  007DEC  20                 	db	32
  1092  007DED  73                 	db	115	;'s'
  1093  007DEE  79                 	db	121	;'y'
  1094  007DEF  73                 	db	115	;'s'
  1095  007DF0  74                 	db	116	;'t'
  1096  007DF1  65                 	db	101	;'e'
  1097  007DF2  6D                 	db	109	;'m'
  1098  007DF3  2E                 	db	46
  1099  007DF4  0D                 	db	13
  1100  007DF5  0A                 	db	10
  1101  007DF6  00                 	db	0
  1102  007DF7                     STR_35:
  1103                           
  1104                           ; BSR set to: 0
  1105  007DF7  24                 	db	36
  1106  007DF8  53                 	db	83	;'S'
  1107  007DF9  42                 	db	66	;'B'
  1108  007DFA  54                 	db	84	;'T'
  1109  007DFB  20                 	db	32
  1110  007DFC  3C                 	db	60	;'<'
  1111  007DFD  58                 	db	88	;'X'
  1112  007DFE  58                 	db	88	;'X'
  1113  007DFF  3E                 	db	62	;'>'
  1114  007E00  3C                 	db	60	;'<'
  1115  007E01  63                 	db	99	;'c'
  1116  007E02  72                 	db	114	;'r'
  1117  007E03  3E                 	db	62	;'>'
  1118  007E04  20                 	db	32
  1119  007E05  20                 	db	32
  1120  007E06  20                 	db	32
  1121  007E07  20                 	db	32
  1122  007E08  53                 	db	83	;'S'
  1123  007E09  65                 	db	101	;'e'
  1124  007E0A  74                 	db	116	;'t'
  1125  007E0B  20                 	db	32
  1126  007E0C  55                 	db	85	;'U'
  1127  007E0D  41                 	db	65	;'A'
  1128  007E0E  52                 	db	82	;'R'
  1129  007E0F  54                 	db	84	;'T'
  1130  007E10  20                 	db	32
  1131  007E11  72                 	db	114	;'r'
  1132  007E12  65                 	db	101	;'e'
  1133  007E13  66                 	db	102	;'f'
  1134  007E14  72                 	db	114	;'r'
  1135  007E15  65                 	db	101	;'e'
  1136  007E16  73                 	db	115	;'s'
  1137  007E17  68                 	db	104	;'h'
  1138  007E18  20                 	db	32
  1139  007E19  72                 	db	114	;'r'
  1140  007E1A  61                 	db	97	;'a'
  1141  007E1B  74                 	db	116	;'t'
  1142  007E1C  65                 	db	101	;'e'
  1143  007E1D  20                 	db	32
  1144  007E1E  28                 	db	40
  1145  007E1F  31                 	db	49	;'1'
  1146  007E20  2D                 	db	45
  1147  007E21  32                 	db	50	;'2'
  1148  007E22  30                 	db	48	;'0'
  1149  007E23  29                 	db	41
  1150  007E24  5B                 	db	91	;'['
  1151  007E25  48                 	db	72	;'H'
  1152  007E26  7A                 	db	122	;'z'
  1153  007E27  5D                 	db	93	;']'
  1154  007E28  2E                 	db	46
  1155  007E29  0D                 	db	13
  1156  007E2A  0A                 	db	10
  1157  007E2B  00                 	db	0
  1158  007E2C                     STR_34:
  1159                           
  1160                           ; BSR set to: 0
  1161  007E2C  24                 	db	36
  1162  007E2D  53                 	db	83	;'S'
  1163  007E2E  48                 	db	72	;'H'
  1164  007E2F  20                 	db	32
  1165  007E30  3C                 	db	60	;'<'
  1166  007E31  63                 	db	99	;'c'
  1167  007E32  72                 	db	114	;'r'
  1168  007E33  3E                 	db	62	;'>'
  1169  007E34  20                 	db	32
  1170  007E35  20                 	db	32
  1171  007E36  20                 	db	32
  1172  007E37  20                 	db	32
  1173  007E38  20                 	db	32
  1174  007E39  20                 	db	32
  1175  007E3A  20                 	db	32
  1176  007E3B  20                 	db	32
  1177  007E3C  20                 	db	32
  1178  007E3D  50                 	db	80	;'P'
  1179  007E3E  72                 	db	114	;'r'
  1180  007E3F  69                 	db	105	;'i'
  1181  007E40  6E                 	db	110	;'n'
  1182  007E41  74                 	db	116	;'t'
  1183  007E42  20                 	db	32
  1184  007E43  73                 	db	115	;'s'
  1185  007E44  79                 	db	121	;'y'
  1186  007E45  73                 	db	115	;'s'
  1187  007E46  74                 	db	116	;'t'
  1188  007E47  65                 	db	101	;'e'
  1189  007E48  6D                 	db	109	;'m'
  1190  007E49  20                 	db	32
  1191  007E4A  68                 	db	104	;'h'
  1192  007E4B  65                 	db	101	;'e'
  1193  007E4C  6C                 	db	108	;'l'
  1194  007E4D  70                 	db	112	;'p'
  1195  007E4E  20                 	db	32
  1196  007E4F  6D                 	db	109	;'m'
  1197  007E50  65                 	db	101	;'e'
  1198  007E51  73                 	db	115	;'s'
  1199  007E52  73                 	db	115	;'s'
  1200  007E53  61                 	db	97	;'a'
  1201  007E54  67                 	db	103	;'g'
  1202  007E55  65                 	db	101	;'e'
  1203  007E56  2E                 	db	46
  1204  007E57  0D                 	db	13
  1205  007E58  0A                 	db	10
  1206  007E59  00                 	db	0
  1207  007E5A                     STR_23:
  1208                           
  1209                           ; BSR set to: 0
  1210  007E5A  24                 	db	36
  1211  007E5B  54                 	db	84	;'T'
  1212  007E5C  51                 	db	81	;'Q'
  1213  007E5D  20                 	db	32
  1214  007E5E  3C                 	db	60	;'<'
  1215  007E5F  63                 	db	99	;'c'
  1216  007E60  72                 	db	114	;'r'
  1217  007E61  3E                 	db	62	;'>'
  1218  007E62  20                 	db	32
  1219  007E63  20                 	db	32
  1220  007E64  20                 	db	32
  1221  007E65  20                 	db	32
  1222  007E66  20                 	db	32
  1223  007E67  20                 	db	32
  1224  007E68  20                 	db	32
  1225  007E69  20                 	db	32
  1226  007E6A  20                 	db	32
  1227  007E6B  47                 	db	71	;'G'
  1228  007E6C  65                 	db	101	;'e'
  1229  007E6D  74                 	db	116	;'t'
  1230  007E6E  20                 	db	32
  1231  007E6F  73                 	db	115	;'s'
  1232  007E70  74                 	db	116	;'t'
  1233  007E71  61                 	db	97	;'a'
  1234  007E72  74                 	db	116	;'t'
  1235  007E73  75                 	db	117	;'u'
  1236  007E74  73                 	db	115	;'s'
  1237  007E75  20                 	db	32
  1238  007E76  66                 	db	102	;'f'
  1239  007E77  72                 	db	114	;'r'
  1240  007E78  6F                 	db	111	;'o'
  1241  007E79  6D                 	db	109	;'m'
  1242  007E7A  20                 	db	32
  1243  007E7B  54                 	db	84	;'T'
  1244  007E7C  58                 	db	88	;'X'
  1245  007E7D  20                 	db	32
  1246  007E7E  73                 	db	115	;'s'
  1247  007E7F  79                 	db	121	;'y'
  1248  007E80  73                 	db	115	;'s'
  1249  007E81  74                 	db	116	;'t'
  1250  007E82  65                 	db	101	;'e'
  1251  007E83  6D                 	db	109	;'m'
  1252  007E84  2E                 	db	46
  1253  007E85  0D                 	db	13
  1254  007E86  0A                 	db	10
  1255  007E87  00                 	db	0
  1256  007E88                     STR_28:
  1257                           
  1258                           ; BSR set to: 0
  1259  007E88  24                 	db	36
  1260  007E89  52                 	db	82	;'R'
  1261  007E8A  51                 	db	81	;'Q'
  1262  007E8B  20                 	db	32
  1263  007E8C  3C                 	db	60	;'<'
  1264  007E8D  63                 	db	99	;'c'
  1265  007E8E  72                 	db	114	;'r'
  1266  007E8F  3E                 	db	62	;'>'
  1267  007E90  20                 	db	32
  1268  007E91  20                 	db	32
  1269  007E92  20                 	db	32
  1270  007E93  20                 	db	32
  1271  007E94  20                 	db	32
  1272  007E95  20                 	db	32
  1273  007E96  20                 	db	32
  1274  007E97  20                 	db	32
  1275  007E98  20                 	db	32
  1276  007E99  47                 	db	71	;'G'
  1277  007E9A  65                 	db	101	;'e'
  1278  007E9B  74                 	db	116	;'t'
  1279  007E9C  20                 	db	32
  1280  007E9D  73                 	db	115	;'s'
  1281  007E9E  74                 	db	116	;'t'
  1282  007E9F  61                 	db	97	;'a'
  1283  007EA0  74                 	db	116	;'t'
  1284  007EA1  75                 	db	117	;'u'
  1285  007EA2  73                 	db	115	;'s'
  1286  007EA3  20                 	db	32
  1287  007EA4  66                 	db	102	;'f'
  1288  007EA5  72                 	db	114	;'r'
  1289  007EA6  6F                 	db	111	;'o'
  1290  007EA7  6D                 	db	109	;'m'
  1291  007EA8  20                 	db	32
  1292  007EA9  52                 	db	82	;'R'
  1293  007EAA  58                 	db	88	;'X'
  1294  007EAB  20                 	db	32
  1295  007EAC  73                 	db	115	;'s'
  1296  007EAD  79                 	db	121	;'y'
  1297  007EAE  73                 	db	115	;'s'
  1298  007EAF  74                 	db	116	;'t'
  1299  007EB0  65                 	db	101	;'e'
  1300  007EB1  6D                 	db	109	;'m'
  1301  007EB2  0D                 	db	13
  1302  007EB3  0A                 	db	10
  1303  007EB4  00                 	db	0
  1304  007EB5                     STR_37:
  1305                           
  1306                           ; BSR set to: 0
  1307  007EB5  24                 	db	36
  1308  007EB6  53                 	db	83	;'S'
  1309  007EB7  51                 	db	81	;'Q'
  1310  007EB8  20                 	db	32
  1311  007EB9  3C                 	db	60	;'<'
  1312  007EBA  58                 	db	88	;'X'
  1313  007EBB  3E                 	db	62	;'>'
  1314  007EBC  3C                 	db	60	;'<'
  1315  007EBD  63                 	db	99	;'c'
  1316  007EBE  72                 	db	114	;'r'
  1317  007EBF  3E                 	db	62	;'>'
  1318  007EC0  20                 	db	32
  1319  007EC1  20                 	db	32
  1320  007EC2  20                 	db	32
  1321  007EC3  20                 	db	32
  1322  007EC4  20                 	db	32
  1323  007EC5  20                 	db	32
  1324  007EC6  47                 	db	71	;'G'
  1325  007EC7  65                 	db	101	;'e'
  1326  007EC8  74                 	db	116	;'t'
  1327  007EC9  20                 	db	32
  1328  007ECA  73                 	db	115	;'s'
  1329  007ECB  79                 	db	121	;'y'
  1330  007ECC  73                 	db	115	;'s'
  1331  007ECD  74                 	db	116	;'t'
  1332  007ECE  65                 	db	101	;'e'
  1333  007ECF  6D                 	db	109	;'m'
  1334  007ED0  20                 	db	32
  1335  007ED1  73                 	db	115	;'s'
  1336  007ED2  74                 	db	116	;'t'
  1337  007ED3  61                 	db	97	;'a'
  1338  007ED4  74                 	db	116	;'t'
  1339  007ED5  75                 	db	117	;'u'
  1340  007ED6  73                 	db	115	;'s'
  1341  007ED7  2E                 	db	46
  1342  007ED8  0D                 	db	13
  1343  007ED9  0A                 	db	10
  1344  007EDA  00                 	db	0
  1345  007EDB                     STR_38:
  1346                           
  1347                           ; BSR set to: 0
  1348  007EDB  24                 	db	36
  1349  007EDC  53                 	db	83	;'S'
  1350  007EDD  4C                 	db	76	;'L'
  1351  007EDE  20                 	db	32
  1352  007EDF  3C                 	db	60	;'<'
  1353  007EE0  63                 	db	99	;'c'
  1354  007EE1  72                 	db	114	;'r'
  1355  007EE2  3E                 	db	62	;'>'
  1356  007EE3  20                 	db	32
  1357  007EE4  20                 	db	32
  1358  007EE5  20                 	db	32
  1359  007EE6  20                 	db	32
  1360  007EE7  20                 	db	32
  1361  007EE8  20                 	db	32
  1362  007EE9  20                 	db	32
  1363  007EEA  20                 	db	32
  1364  007EEB  20                 	db	32
  1365  007EEC  54                 	db	84	;'T'
  1366  007EED  65                 	db	101	;'e'
  1367  007EEE  73                 	db	115	;'s'
  1368  007EEF  74                 	db	116	;'t'
  1369  007EF0  20                 	db	32
  1370  007EF1  73                 	db	115	;'s'
  1371  007EF2  79                 	db	121	;'y'
  1372  007EF3  73                 	db	115	;'s'
  1373  007EF4  74                 	db	116	;'t'
  1374  007EF5  65                 	db	101	;'e'
  1375  007EF6  6D                 	db	109	;'m'
  1376  007EF7  20                 	db	32
  1377  007EF8  4C                 	db	76	;'L'
  1378  007EF9  45                 	db	69	;'E'
  1379  007EFA  44                 	db	68	;'D'
  1380  007EFB  73                 	db	115	;'s'
  1381  007EFC  2E                 	db	46
  1382  007EFD  0D                 	db	13
  1383  007EFE  0A                 	db	10
  1384  007EFF  00                 	db	0
  1385  007F00                     STR_11:
  1386                           
  1387                           ; BSR set to: 0
  1388  007F00  2A                 	db	42
  1389  007F01  2A                 	db	42
  1390  007F02  2A                 	db	42
  1391  007F03  2A                 	db	42
  1392  007F04  2A                 	db	42
  1393  007F05  2A                 	db	42
  1394  007F06  2A                 	db	42
  1395  007F07  2A                 	db	42
  1396  007F08  2A                 	db	42
  1397  007F09  2A                 	db	42
  1398  007F0A  2A                 	db	42
  1399  007F0B  2A                 	db	42
  1400  007F0C  2A                 	db	42
  1401  007F0D  2A                 	db	42
  1402  007F0E  2A                 	db	42
  1403  007F0F  2A                 	db	42
  1404  007F10  2A                 	db	42
  1405  007F11  2A                 	db	42
  1406  007F12  2A                 	db	42
  1407  007F13  2A                 	db	42
  1408  007F14  2A                 	db	42
  1409  007F15  2A                 	db	42
  1410  007F16  2A                 	db	42
  1411  007F17  2A                 	db	42
  1412  007F18  2A                 	db	42
  1413  007F19  2A                 	db	42
  1414  007F1A  2A                 	db	42
  1415  007F1B  20                 	db	32
  1416  007F1C  0A                 	db	10
  1417  007F1D  0D                 	db	13
  1418  007F1E  00                 	db	0
  1419  007F1F                     STR_33:
  1420                           
  1421                           ; BSR set to: 0
  1422  007F1F  0A                 	db	10
  1423  007F20  0D                 	db	13
  1424  007F21  3C                 	db	60	;'<'
  1425  007F22  43                 	db	67	;'C'
  1426  007F23  6F                 	db	111	;'o'
  1427  007F24  6D                 	db	109	;'m'
  1428  007F25  6D                 	db	109	;'m'
  1429  007F26  6F                 	db	111	;'o'
  1430  007F27  6E                 	db	110	;'n'
  1431  007F28  20                 	db	32
  1432  007F29  73                 	db	115	;'s'
  1433  007F2A  79                 	db	121	;'y'
  1434  007F2B  73                 	db	115	;'s'
  1435  007F2C  74                 	db	116	;'t'
  1436  007F2D  65                 	db	101	;'e'
  1437  007F2E  6D                 	db	109	;'m'
  1438  007F2F  20                 	db	32
  1439  007F30  63                 	db	99	;'c'
  1440  007F31  6F                 	db	111	;'o'
  1441  007F32  6D                 	db	109	;'m'
  1442  007F33  6D                 	db	109	;'m'
  1443  007F34  61                 	db	97	;'a'
  1444  007F35  6E                 	db	110	;'n'
  1445  007F36  64                 	db	100	;'d'
  1446  007F37  73                 	db	115	;'s'
  1447  007F38  3E                 	db	62	;'>'
  1448  007F39  0A                 	db	10
  1449  007F3A  0D                 	db	13
  1450  007F3B  00                 	db	0
  1451  007F3C                     STR_26:
  1452                           
  1453                           ; BSR set to: 0
  1454  007F3C  0A                 	db	10
  1455  007F3D  0D                 	db	13
  1456  007F3E  3C                 	db	60	;'<'
  1457  007F3F  52                 	db	82	;'R'
  1458  007F40  58                 	db	88	;'X'
  1459  007F41  20                 	db	32
  1460  007F42  73                 	db	115	;'s'
  1461  007F43  79                 	db	121	;'y'
  1462  007F44  73                 	db	115	;'s'
  1463  007F45  74                 	db	116	;'t'
  1464  007F46  65                 	db	101	;'e'
  1465  007F47  6D                 	db	109	;'m'
  1466  007F48  20                 	db	32
  1467  007F49  63                 	db	99	;'c'
  1468  007F4A  6F                 	db	111	;'o'
  1469  007F4B  6D                 	db	109	;'m'
  1470  007F4C  6D                 	db	109	;'m'
  1471  007F4D  61                 	db	97	;'a'
  1472  007F4E  6E                 	db	110	;'n'
  1473  007F4F  64                 	db	100	;'d'
  1474  007F50  73                 	db	115	;'s'
  1475  007F51  3E                 	db	62	;'>'
  1476  007F52  0A                 	db	10
  1477  007F53  0D                 	db	13
  1478  007F54  00                 	db	0
  1479  007F55                     STR_20:
  1480                           
  1481                           ; BSR set to: 0
  1482  007F55  3C                 	db	60	;'<'
  1483  007F56  54                 	db	84	;'T'
  1484  007F57  58                 	db	88	;'X'
  1485  007F58  20                 	db	32
  1486  007F59  73                 	db	115	;'s'
  1487  007F5A  79                 	db	121	;'y'
  1488  007F5B  73                 	db	115	;'s'
  1489  007F5C  74                 	db	116	;'t'
  1490  007F5D  65                 	db	101	;'e'
  1491  007F5E  6D                 	db	109	;'m'
  1492  007F5F  20                 	db	32
  1493  007F60  63                 	db	99	;'c'
  1494  007F61  6F                 	db	111	;'o'
  1495  007F62  6D                 	db	109	;'m'
  1496  007F63  6D                 	db	109	;'m'
  1497  007F64  61                 	db	97	;'a'
  1498  007F65  6E                 	db	110	;'n'
  1499  007F66  64                 	db	100	;'d'
  1500  007F67  73                 	db	115	;'s'
  1501  007F68  3E                 	db	62	;'>'
  1502  007F69  0A                 	db	10
  1503  007F6A  0D                 	db	13
  1504  007F6B  00                 	db	0
  1505  007F6C                     STR_12:
  1506                           
  1507                           ; BSR set to: 0
  1508  007F6C  46                 	db	70	;'F'
  1509  007F6D  41                 	db	65	;'A'
  1510  007F6E  53                 	db	83	;'S'
  1511  007F6F  54                 	db	84	;'T'
  1512  007F70  20                 	db	32
  1513  007F71  4C                 	db	76	;'L'
  1514  007F72  49                 	db	73	;'I'
  1515  007F73  4E                 	db	78	;'N'
  1516  007F74  4B                 	db	75	;'K'
  1517  007F75  20                 	db	32
  1518  007F76  53                 	db	83	;'S'
  1519  007F77  59                 	db	89	;'Y'
  1520  007F78  53                 	db	83	;'S'
  1521  007F79  54                 	db	84	;'T'
  1522  007F7A  45                 	db	69	;'E'
  1523  007F7B  4D                 	db	77	;'M'
  1524  007F7C  20                 	db	32
  1525  007F7D  0A                 	db	10
  1526  007F7E  0D                 	db	13
  1527  007F7F  00                 	db	0
  1528  007F80                     STR_17:
  1529                           
  1530                           ; BSR set to: 0
  1531  007F80  43                 	db	67	;'C'
  1532  007F81  6F                 	db	111	;'o'
  1533  007F82  6D                 	db	109	;'m'
  1534  007F83  70                 	db	112	;'p'
  1535  007F84  69                 	db	105	;'i'
  1536  007F85  6C                 	db	108	;'l'
  1537  007F86  65                 	db	101	;'e'
  1538  007F87  20                 	db	32
  1539  007F88  74                 	db	116	;'t'
  1540  007F89  69                 	db	105	;'i'
  1541  007F8A  6D                 	db	109	;'m'
  1542  007F8B  65                 	db	101	;'e'
  1543  007F8C  3A                 	db	58	;':'
  1544  007F8D  20                 	db	32
  1545  007F8E  25                 	db	37
  1546  007F8F  73                 	db	115	;'s'
  1547  007F90  20                 	db	32
  1548  007F91  0A                 	db	10
  1549  007F92  0D                 	db	13
  1550  007F93  00                 	db	0
  1551  007F94                     STR_15:
  1552                           
  1553                           ; BSR set to: 0
  1554  007F94  43                 	db	67	;'C'
  1555  007F95  6F                 	db	111	;'o'
  1556  007F96  6D                 	db	109	;'m'
  1557  007F97  70                 	db	112	;'p'
  1558  007F98  69                 	db	105	;'i'
  1559  007F99  6C                 	db	108	;'l'
  1560  007F9A  65                 	db	101	;'e'
  1561  007F9B  20                 	db	32
  1562  007F9C  64                 	db	100	;'d'
  1563  007F9D  61                 	db	97	;'a'
  1564  007F9E  74                 	db	116	;'t'
  1565  007F9F  65                 	db	101	;'e'
  1566  007FA0  3A                 	db	58	;':'
  1567  007FA1  20                 	db	32
  1568  007FA2  25                 	db	37
  1569  007FA3  73                 	db	115	;'s'
  1570  007FA4  20                 	db	32
  1571  007FA5  0A                 	db	10
  1572  007FA6  0D                 	db	13
  1573  007FA7  00                 	db	0
  1574  007FA8                     STR_13:
  1575                           
  1576                           ; BSR set to: 0
  1577  007FA8  53                 	db	83	;'S'
  1578  007FA9  57                 	db	87	;'W'
  1579  007FAA  20                 	db	32
  1580  007FAB  56                 	db	86	;'V'
  1581  007FAC  45                 	db	69	;'E'
  1582  007FAD  53                 	db	83	;'S'
  1583  007FAE  52                 	db	82	;'R'
  1584  007FAF  49                 	db	73	;'I'
  1585  007FB0  4F                 	db	79	;'O'
  1586  007FB1  4E                 	db	78	;'N'
  1587  007FB2  3A                 	db	58	;':'
  1588  007FB3  20                 	db	32
  1589  007FB4  25                 	db	37
  1590  007FB5  73                 	db	115	;'s'
  1591  007FB6  20                 	db	32
  1592  007FB7  0A                 	db	10
  1593  007FB8  0D                 	db	13
  1594  007FB9  00                 	db	0
  1595  007FBA                     STR_16:
  1596                           
  1597                           ; BSR set to: 0
  1598  007FBA  4D                 	db	77	;'M'
  1599  007FBB  61                 	db	97	;'a'
  1600  007FBC  72                 	db	114	;'r'
  1601  007FBD  20                 	db	32
  1602  007FBE  32                 	db	50	;'2'
  1603  007FBF  35                 	db	53	;'5'
  1604  007FC0  20                 	db	32
  1605  007FC1  32                 	db	50	;'2'
  1606  007FC2  30                 	db	48	;'0'
  1607  007FC3  31                 	db	49	;'1'
  1608  007FC4  38                 	db	56	;'8'
  1609  007FC5  00                 	db	0
  1610  007FC6                     STR_7:
  1611                           
  1612                           ; BSR set to: 0
  1613  007FC6  4E                 	db	78	;'N'
  1614  007FC7  4F                 	db	79	;'O'
  1615  007FC8  54                 	db	84	;'T'
  1616  007FC9  20                 	db	32
  1617  007FCA  4F                 	db	79	;'O'
  1618  007FCB  2E                 	db	46
  1619  007FCC  4B                 	db	75	;'K'
  1620  007FCD  20                 	db	32
  1621  007FCE  0A                 	db	10
  1622  007FCF  0D                 	db	13
  1623  007FD0  00                 	db	0
  1624  007FD1                     STR_1:
  1625                           
  1626                           ; BSR set to: 0
  1627  007FD1  4E                 	db	78	;'N'
  1628  007FD2  4F                 	db	79	;'O'
  1629  007FD3  54                 	db	84	;'T'
  1630  007FD4  20                 	db	32
  1631  007FD5  4F                 	db	79	;'O'
  1632  007FD6  4B                 	db	75	;'K'
  1633  007FD7  20                 	db	32
  1634  007FD8  0A                 	db	10
  1635  007FD9  0D                 	db	13
  1636  007FDA  00                 	db	0
  1637  007FDB                     STR_18:
  1638                           
  1639                           ; BSR set to: 0
  1640  007FDB  31                 	db	49	;'1'
  1641  007FDC  37                 	db	55	;'7'
  1642  007FDD  3A                 	db	58	;':'
  1643  007FDE  35                 	db	53	;'5'
  1644  007FDF  36                 	db	54	;'6'
  1645  007FE0  3A                 	db	58	;':'
  1646  007FE1  30                 	db	48	;'0'
  1647  007FE2  32                 	db	50	;'2'
  1648  007FE3  00                 	db	0
  1649  007FE4                     STR_6:
  1650                           
  1651                           ; BSR set to: 0
  1652  007FE4  0A                 	db	10
  1653  007FE5  0D                 	db	13
  1654  007FE6  20                 	db	32
  1655  007FE7  4F                 	db	79	;'O'
  1656  007FE8  4B                 	db	75	;'K'
  1657  007FE9  20                 	db	32
  1658  007FEA  0A                 	db	10
  1659  007FEB  0D                 	db	13
  1660  007FEC  00                 	db	0
  1661  007FED                     STR_39:
  1662                           
  1663                           ; BSR set to: 0
  1664  007FED  28                 	db	40
  1665  007FEE  6E                 	db	110	;'n'
  1666  007FEF  75                 	db	117	;'u'
  1667  007FF0  6C                 	db	108	;'l'
  1668  007FF1  6C                 	db	108	;'l'
  1669  007FF2  29                 	db	41
  1670  007FF3  00                 	db	0
  1671  007FF4                     STR_14:
  1672                           
  1673                           ; BSR set to: 0
  1674  007FF4  31                 	db	49	;'1'
  1675  007FF5  5F                 	db	95	;'_'
  1676  007FF6  30                 	db	48	;'0'
  1677  007FF7  30                 	db	48	;'0'
  1678  007FF8  32                 	db	50	;'2'
  1679  007FF9  00                 	db	0
  1680  007FFA                     STR_5:
  1681                           
  1682                           ; BSR set to: 0
  1683  007FFA  25                 	db	37
  1684  007FFB  64                 	db	100	;'d'
  1685  007FFC  20                 	db	32
  1686  007FFD  09                 	db	9
  1687  007FFE  00                 	db	0
  1688  0000                     
  1689                           ; #config settings
  1690  007FFF  00                 	db	0	; dummy byte at the end
  1691  0000                     
  1692                           	psect	nvCOMRAM
  1693  000046                     __pnvCOMRAM:
  1694                           	opt stack 0
  1695  000046                     _timer0ReloadVal:
  1696                           	opt stack 0
  1697  000046                     	ds	2
  1698                           
  1699                           	psect	nvBANK0
  1700  0000D7                     __pnvBANK0:
  1701                           	opt stack 0
  1702  0000D7                     _TMR0_InterruptHandler:
  1703                           	opt stack 0
  1704  0000D7                     	ds	2
  1705  0000D9                     _eusart1TxBufferRemaining:
  1706                           	opt stack 0
  1707  0000D9                     	ds	1
  1708  0000                     _ANSELA	set	3896
  1709  0000                     _ANSELE	set	3900
  1710  0000                     _ANSELD	set	3899
  1711  0000                     _ANSELB	set	3897
  1712  0000                     _ANSELC	set	3898
  1713  0000                     _ADCON0bits	set	4034
  1714  0000                     _ADRESH	set	4036
  1715  0000                     _ADRESL	set	4035
  1716  0000                     _ADCON2	set	4032
  1717  0000                     _ADCON1	set	4033
  1718  0000                     _ADCON0	set	4034
  1719  0000                     _T0CONbits	set	4053
  1720  0000                     _T0CON	set	4053
  1721  0000                     _TMR0L	set	4054
  1722  0000                     _TMR0H	set	4055
  1723  0000                     _EEDATA	set	4008
  1724  0000                     _EEADR	set	4009
  1725  0000                     _EECON2	set	4007
  1726  0000                     _EECON1bits	set	4006
  1727  0000                     _TABLAT	set	4085
  1728  0000                     _TBLPTRL	set	4086
  1729  0000                     _TBLPTRH	set	4087
  1730  0000                     _TBLPTRU	set	4088
  1731  0000                     _INTCON2bits	set	4081
  1732  0000                     _WPUB	set	3937
  1733  0000                     _TRISD	set	3989
  1734  0000                     _TRISC	set	3988
  1735  0000                     _TRISB	set	3987
  1736  0000                     _TRISA	set	3986
  1737  0000                     _TRISE	set	3990
  1738  0000                     _LATC	set	3979
  1739  0000                     _LATB	set	3978
  1740  0000                     _LATA	set	3977
  1741  0000                     _LATD	set	3980
  1742  0000                     _LATE	set	3981
  1743  0000                     _RCREG1	set	4014
  1744  0000                     _RCSTA1bits	set	4011
  1745  0000                     _TXREG1	set	4013
  1746  0000                     _SPBRGH1	set	4016
  1747  0000                     _SPBRG1	set	4015
  1748  0000                     _TXSTA1	set	4012
  1749  0000                     _RCSTA1	set	4011
  1750  0000                     _BAUDCON1	set	4024
  1751  0000                     _PIR1bits	set	3998
  1752  0000                     _PIE1bits	set	3997
  1753  0000                     _PIR2bits	set	4001
  1754  0000                     _PIE2bits	set	4000
  1755  0000                     _RCONbits	set	4048
  1756  0000                     _OSCTUNE	set	3995
  1757  0000                     _OSCCON2	set	4050
  1758  0000                     _OSCCON	set	4051
  1759  0000                     _LATAbits	set	3977
  1760  0000                     _LATDbits	set	3980
  1761  0000                     _INTCONbits	set	4082
  1762  0000                     _IOCB	set	3938
  1763  0000                     _LATCbits	set	3979
  1764  0000                     _LATBbits	set	3978
  1765                           
  1766                           	psect	cinit
  1767  001E90                     __pcinit:
  1768                           	opt stack 0
  1769  001E90                     start_initialization:
  1770                           	opt stack 0
  1771  001E90                     __initialization:
  1772                           	opt stack 0
  1773                           
  1774                           ; Initialize objects allocated to BANK0 (16 bytes)
  1775                           ; load TBLPTR registers with __pidataBANK0
  1776  001E90  0E62               	movlw	low __pidataBANK0
  1777  001E92  6EF6               	movwf	tblptrl,c
  1778  001E94  0E2A               	movlw	high __pidataBANK0
  1779  001E96  6EF7               	movwf	tblptrh,c
  1780  001E98  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1781  001E9A  6EF8               	movwf	tblptru,c
  1782  001E9C  EE00  F0C7         	lfsr	0,__pdataBANK0
  1783  001EA0  EE10 F010          	lfsr	1,16
  1784  001EA4                     copy_data0:
  1785  001EA4  0009               	tblrd		*+
  1786  001EA6  CFF5 FFEE          	movff	tablat,postinc0
  1787  001EAA  50E5               	movf	postdec1,w,c
  1788  001EAC  50E1               	movf	fsr1l,w,c
  1789  001EAE  E1FA               	bnz	copy_data0
  1790                           
  1791                           ; Initialize objects allocated to COMRAM (4 bytes)
  1792                           ; load TBLPTR registers with __pidataCOMRAM
  1793  001EB0  0E9A               	movlw	low __pidataCOMRAM
  1794  001EB2  6EF6               	movwf	tblptrl,c
  1795  001EB4  0E2A               	movlw	high __pidataCOMRAM
  1796  001EB6  6EF7               	movwf	tblptrh,c
  1797  001EB8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1798  001EBA  6EF8               	movwf	tblptru,c
  1799  001EBC  EE00  F042         	lfsr	0,__pdataCOMRAM
  1800  001EC0  EE10 F004          	lfsr	1,4
  1801  001EC4                     copy_data1:
  1802  001EC4  0009               	tblrd		*+
  1803  001EC6  CFF5 FFEE          	movff	tablat,postinc0
  1804  001ECA  50E5               	movf	postdec1,w,c
  1805  001ECC  50E1               	movf	fsr1l,w,c
  1806  001ECE  E1FA               	bnz	copy_data1
  1807                           
  1808                           ; Clear objects allocated to BANK1 (214 bytes)
  1809  001ED0  EE01  F000         	lfsr	0,__pbssBANK1
  1810  001ED4  0ED6               	movlw	214
  1811  001ED6                     clear_0:
  1812  001ED6  6AEE               	clrf	postinc0,c
  1813  001ED8  06E8               	decf	wreg,f,c
  1814  001EDA  E1FD               	bnz	clear_0
  1815                           
  1816                           ; Clear objects allocated to BANK0 (26 bytes)
  1817  001EDC  EE00  F0AD         	lfsr	0,__pbssBANK0
  1818  001EE0  0E1A               	movlw	26
  1819  001EE2                     clear_1:
  1820  001EE2  6AEE               	clrf	postinc0,c
  1821  001EE4  06E8               	decf	wreg,f,c
  1822  001EE6  E1FD               	bnz	clear_1
  1823                           
  1824                           ; Clear objects allocated to COMRAM (17 bytes)
  1825  001EE8  EE00  F031         	lfsr	0,__pbssCOMRAM
  1826  001EEC  0E11               	movlw	17
  1827  001EEE                     clear_2:
  1828  001EEE  6AEE               	clrf	postinc0,c
  1829  001EF0  06E8               	decf	wreg,f,c
  1830  001EF2  E1FD               	bnz	clear_2
  1831  001EF4                     end_of_initialization:
  1832                           	opt stack 0
  1833  001EF4                     __end_of__initialization:
  1834                           	opt stack 0
  1835  001EF4  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1836  001EF6  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1837  001EF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1838  001EFA  6EF8               	movwf	tblptru,c
  1839  001EFC  0100               	movlb	0
  1840  001EFE  EFDF  F011         	goto	_main	;jump to C main() function
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssCOMRAM
  1851  000031                     __pbssCOMRAM:
  1852                           	opt stack 0
  1853  000031                     _numOfValidateSamples:
  1854                           	opt stack 0
  1855  000031                     	ds	4
  1856  000035                     TMR0_ISR@CountCallBack:
  1857                           	opt stack 0
  1858  000035                     	ds	2
  1859  000037                     _channelNum:
  1860                           	opt stack 0
  1861  000037                     	ds	2
  1862  000039                     _eusart1RxTail:
  1863                           	opt stack 0
  1864  000039                     	ds	1
  1865  00003A                     _eusart1RxHead:
  1866                           	opt stack 0
  1867  00003A                     	ds	1
  1868  00003B                     _eusart1TxTail:
  1869                           	opt stack 0
  1870  00003B                     	ds	1
  1871  00003C                     _eusart1TxHead:
  1872                           	opt stack 0
  1873  00003C                     	ds	1
  1874  00003D                     _adcSampleMode:
  1875                           	opt stack 0
  1876  00003D                     	ds	1
  1877  00003E                     _numOfReadSamples:
  1878                           	opt stack 0
  1879  00003E                     	ds	4
  1880                           tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           postdec1	equ	0xFE5
  1887                           fsr1l	equ	0xFE1
  1888                           
  1889                           	psect	dataCOMRAM
  1890  000042                     __pdataCOMRAM:
  1891                           	opt stack 0
  1892  000042                     _writeAddress:
  1893                           	opt stack 0
  1894  000042                     	ds	4
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1l	equ	0xFE1
  1903                           
  1904                           	psect	bssBANK0
  1905  0000AD                     __pbssBANK0:
  1906                           	opt stack 0
  1907  0000AD                     _mcuRunTimeIn5SecTicks:
  1908                           	opt stack 0
  1909  0000AD                     	ds	4
  1910  0000B1                     _errno:
  1911                           	opt stack 0
  1912  0000B1                     	ds	2
  1913  0000B3                     _sampleCount:
  1914                           	opt stack 0
  1915  0000B3                     	ds	2
  1916  0000B5                     _numSamples:
  1917                           	opt stack 0
  1918  0000B5                     	ds	2
  1919  0000B7                     _count:
  1920                           	opt stack 0
  1921  0000B7                     	ds	2
  1922  0000B9                     _isReWriteDone:
  1923                           	opt stack 0
  1924  0000B9                     	ds	1
  1925  0000BA                     _msgCount:
  1926                           	opt stack 0
  1927  0000BA                     	ds	1
  1928  0000BB                     _crcGiven:
  1929                           	opt stack 0
  1930  0000BB                     	ds	1
  1931  0000BC                     _crcCalc:
  1932                           	opt stack 0
  1933  0000BC                     	ds	1
  1934  0000BD                     _dataSize:
  1935                           	opt stack 0
  1936  0000BD                     	ds	1
  1937  0000BE                     _request:
  1938                           	opt stack 0
  1939  0000BE                     	ds	1
  1940  0000BF                     _group:
  1941                           	opt stack 0
  1942  0000BF                     	ds	1
  1943  0000C0                     _cState:
  1944                           	opt stack 0
  1945  0000C0                     	ds	1
  1946  0000C1                     _eusart1RxCount:
  1947                           	opt stack 0
  1948  0000C1                     	ds	1
  1949  0000C2                     _channel:
  1950                           	opt stack 0
  1951  0000C2                     	ds	1
  1952  0000C3                     _needToSample:
  1953                           	opt stack 0
  1954  0000C3                     	ds	1
  1955  0000C4                     _TimerKeepAliveFlag:
  1956                           	opt stack 0
  1957  0000C4                     	ds	1
  1958  0000C5                     _TimerSamplingFlag:
  1959                           	opt stack 0
  1960  0000C5                     	ds	1
  1961  0000C6                     _TimerOneSecFlag:
  1962                           	opt stack 0
  1963  0000C6                     	ds	1
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1l	equ	0xFE1
  1972                           
  1973                           	psect	dataBANK0
  1974  0000C7                     __pdataBANK0:
  1975                           	opt stack 0
  1976  0000C7                     _groupsArray:
  1977                           	opt stack 0
  1978  0000C7                     	ds	12
  1979  0000D3                     _readAddress:
  1980                           	opt stack 0
  1981  0000D3                     	ds	4
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           postdec1	equ	0xFE5
  1989                           fsr1l	equ	0xFE1
  1990                           
  1991                           	psect	bssBANK1
  1992  000100                     __pbssBANK1:
  1993                           	opt stack 0
  1994  000100                     _eusart1TxBuffer:
  1995                           	opt stack 0
  1996  000100                     	ds	70
  1997  000146                     _eusart1RxBuffer:
  1998                           	opt stack 0
  1999  000146                     	ds	40
  2000  00016E                     _sampleArray:
  2001                           	opt stack 0
  2002  00016E                     	ds	64
  2003  0001AE                     _rxMsgData:
  2004                           	opt stack 0
  2005  0001AE                     	ds	20
  2006  0001C2                     _rxMsgQueue:
  2007                           	opt stack 0
  2008  0001C2                     	ds	20
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           
  2018                           	psect	cstackBANK2
  2019  000200                     __pcstackBANK2:
  2020                           	opt stack 0
  2021  000200                     SampleSingleChannel@dest:
  2022                           	opt stack 0
  2023  000200                     readUartByte@dest:
  2024                           	opt stack 0
  2025                           
  2026                           ; 50 bytes @ 0x0
  2027  000200                     	ds	50
  2028  000232                     readUartByte@idx:
  2029                           	opt stack 0
  2030  000232                     _SampleSingleChannel$2938:
  2031                           	opt stack 0
  2032                           
  2033                           ; 3 bytes @ 0x32
  2034  000232                     	ds	2
  2035  000234                     readUartByte@chRec:
  2036                           	opt stack 0
  2037                           
  2038                           ; 1 bytes @ 0x34
  2039  000234                     	ds	1
  2040  000235                     SampleSingleChannel@_adcResult:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x35
  2044  000235                     	ds	2
  2045  000237                     SampleSingleChannel@adcRes:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x37
  2049  000237                     	ds	2
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           postdec1	equ	0xFE5
  2057                           fsr1l	equ	0xFE1
  2058                           
  2059                           	psect	cstackBANK0
  2060  000060                     __pcstackBANK0:
  2061                           	opt stack 0
  2062  000060                     sprintf@flag:
  2063                           	opt stack 0
  2064  000060                     ___ftdiv@cntr:
  2065                           	opt stack 0
  2066  000060                     strtol@sign:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x0
  2070  000060                     	ds	1
  2071  000061                     sprintf@prec:
  2072                           	opt stack 0
  2073  000061                     ___ftdiv@f3:
  2074                           	opt stack 0
  2075  000061                     strtol@a:
  2076                           	opt stack 0
  2077                           
  2078                           ; 4 bytes @ 0x1
  2079  000061                     	ds	1
  2080  000062                     sprintf@ap:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x2
  2084  000062                     	ds	2
  2085  000064                     ___ftdiv@exp:
  2086                           	opt stack 0
  2087  000064                     sprintf@cp:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x4
  2091  000064                     	ds	1
  2092  000065                     ___ftdiv@sign:
  2093                           	opt stack 0
  2094  000065                     strtol@c:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x5
  2098  000065                     	ds	1
  2099  000066                     ?___ftmul:
  2100                           	opt stack 0
  2101  000066                     ?_GetIntFromUartData:
  2102                           	opt stack 0
  2103  000066                     GetIntFromUartData@data:
  2104                           	opt stack 0
  2105  000066                     sprintf@val:
  2106                           	opt stack 0
  2107  000066                     ___ftmul@f1:
  2108                           	opt stack 0
  2109                           
  2110                           ; 3 bytes @ 0x6
  2111  000066                     	ds	2
  2112  000068                     sprintf@c:
  2113                           	opt stack 0
  2114                           
  2115                           ; 1 bytes @ 0x8
  2116  000068                     	ds	1
  2117  000069                     ___ftmul@f2:
  2118                           	opt stack 0
  2119  000069                     SendUartSystemInitMessage@dest:
  2120                           	opt stack 0
  2121  000069                     PrintHelpScreen@dest:
  2122                           	opt stack 0
  2123                           
  2124                           ; 50 bytes @ 0x9
  2125  000069                     	ds	1
  2126  00006A                     GetIntFromUartData@dataRegArr:
  2127                           	opt stack 0
  2128                           
  2129                           ; 8 bytes @ 0xA
  2130  00006A                     	ds	2
  2131  00006C                     ___ftmul@exp:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0xC
  2135  00006C                     	ds	1
  2136  00006D                     ___ftmul@f3_as_product:
  2137                           	opt stack 0
  2138                           
  2139                           ; 3 bytes @ 0xD
  2140  00006D                     	ds	3
  2141  000070                     ___ftmul@cntr:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x10
  2145  000070                     	ds	1
  2146  000071                     ___ftmul@sign:
  2147                           	opt stack 0
  2148                           
  2149                           ; 1 bytes @ 0x11
  2150  000071                     	ds	1
  2151  000072                     ?___ftadd:
  2152                           	opt stack 0
  2153  000072                     ?___fttol:
  2154                           	opt stack 0
  2155  000072                     GetIntFromUartData@c:
  2156                           	opt stack 0
  2157  000072                     ___ftadd@f1:
  2158                           	opt stack 0
  2159  000072                     ___fttol@f1:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x12
  2163  000072                     	ds	1
  2164  000073                     GetIntFromUartData@idx:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x13
  2168  000073                     	ds	2
  2169  000075                     AdcSingleSample@data:
  2170                           	opt stack 0
  2171  000075                     ___ftadd@f2:
  2172                           	opt stack 0
  2173                           
  2174                           ; 3 bytes @ 0x15
  2175  000075                     	ds	1
  2176  000076                     ??___fttol:
  2177                           
  2178                           ; 1 bytes @ 0x16
  2179  000076                     	ds	1
  2180  000077                     AdcSingleSample@cType:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x17
  2184  000077                     	ds	1
  2185  000078                     ??___ftadd:
  2186  000078                     AdcSingleSample@retNum:
  2187                           	opt stack 0
  2188                           
  2189                           ; 4 bytes @ 0x18
  2190  000078                     	ds	3
  2191  00007B                     ___ftadd@sign:
  2192                           	opt stack 0
  2193  00007B                     ___fttol@sign1:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x1B
  2197  00007B                     	ds	1
  2198  00007C                     ___ftadd@exp2:
  2199                           	opt stack 0
  2200  00007C                     ___fttol@lval:
  2201                           	opt stack 0
  2202                           
  2203                           ; 4 bytes @ 0x1C
  2204  00007C                     	ds	1
  2205  00007D                     ___ftadd@exp1:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x1D
  2209  00007D                     	ds	1
  2210  00007E                     ?___ftsub:
  2211                           	opt stack 0
  2212  00007E                     ?_eval_poly:
  2213                           	opt stack 0
  2214  00007E                     ___ftsub@f1:
  2215                           	opt stack 0
  2216  00007E                     eval_poly@x:
  2217                           	opt stack 0
  2218                           
  2219                           ; 3 bytes @ 0x1E
  2220  00007E                     	ds	2
  2221  000080                     ___fttol@exp1:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x20
  2225  000080                     	ds	1
  2226  000081                     ?___altoft:
  2227                           	opt stack 0
  2228  000081                     eval_poly@d:
  2229                           	opt stack 0
  2230  000081                     ___ftsub@f2:
  2231                           	opt stack 0
  2232  000081                     ___altoft@c:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x21
  2236  000081                     	ds	2
  2237  000083                     eval_poly@n:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x23
  2241  000083                     	ds	2
  2242  000085                     ??___altoft:
  2243  000085                     eval_poly@res:
  2244                           	opt stack 0
  2245                           
  2246                           ; 3 bytes @ 0x25
  2247  000085                     	ds	3
  2248  000088                     ?_log:
  2249                           	opt stack 0
  2250  000088                     ?_ldexp:
  2251                           	opt stack 0
  2252  000088                     ldexp@value:
  2253                           	opt stack 0
  2254  000088                     log@x:
  2255                           	opt stack 0
  2256                           
  2257                           ; 3 bytes @ 0x28
  2258  000088                     	ds	1
  2259  000089                     ?_floor:
  2260                           	opt stack 0
  2261  000089                     floor@x:
  2262                           	opt stack 0
  2263                           
  2264                           ; 3 bytes @ 0x29
  2265  000089                     	ds	2
  2266  00008B                     ldexp@newexp:
  2267                           	opt stack 0
  2268  00008B                     log@exponent:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x2B
  2272  00008B                     	ds	1
  2273  00008C                     floor@i:
  2274                           	opt stack 0
  2275                           
  2276                           ; 3 bytes @ 0x2C
  2277  00008C                     	ds	1
  2278  00008D                     ??_ldexp:
  2279                           
  2280                           ; 1 bytes @ 0x2D
  2281  00008D                     	ds	2
  2282  00008F                     floor@expon:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x2F
  2286  00008F                     	ds	2
  2287  000091                     ?_exp:
  2288                           	opt stack 0
  2289  000091                     exp@x:
  2290                           	opt stack 0
  2291                           
  2292                           ; 3 bytes @ 0x31
  2293  000091                     	ds	3
  2294  000094                     _exp$2941:
  2295                           	opt stack 0
  2296                           
  2297                           ; 3 bytes @ 0x34
  2298  000094                     	ds	3
  2299  000097                     exp@exponent:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x37
  2303  000097                     	ds	2
  2304  000099                     exp@sign:
  2305                           	opt stack 0
  2306                           
  2307                           ; 1 bytes @ 0x39
  2308  000099                     	ds	1
  2309  00009A                     ?_pow:
  2310                           	opt stack 0
  2311  00009A                     pow@x:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x3A
  2315  00009A                     	ds	1
  2316  00009B                     GroupRx@data:
  2317                           	opt stack 0
  2318  00009B                     GroupTx@data:
  2319                           	opt stack 0
  2320  00009B                     GroupCommon@data:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x3B
  2324  00009B                     	ds	2
  2325  00009D                     GroupRx@request:
  2326                           	opt stack 0
  2327  00009D                     GroupTx@request:
  2328                           	opt stack 0
  2329  00009D                     GroupCommon@request:
  2330                           	opt stack 0
  2331  00009D                     pow@y:
  2332                           	opt stack 0
  2333                           
  2334                           ; 3 bytes @ 0x3D
  2335  00009D                     	ds	1
  2336  00009E                     ??_readUartByte:
  2337                           
  2338                           ; 1 bytes @ 0x3E
  2339  00009E                     	ds	2
  2340  0000A0                     _pow$2939:
  2341                           	opt stack 0
  2342                           
  2343                           ; 3 bytes @ 0x40
  2344  0000A0                     	ds	3
  2345  0000A3                     _pow$2940:
  2346                           	opt stack 0
  2347                           
  2348                           ; 3 bytes @ 0x43
  2349  0000A3                     	ds	3
  2350  0000A6                     pow@sign:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x46
  2354  0000A6                     	ds	1
  2355  0000A7                     pow@yi:
  2356                           	opt stack 0
  2357                           
  2358                           ; 4 bytes @ 0x47
  2359  0000A7                     	ds	4
  2360  0000AB                     ??_SampleSingleChannel:
  2361                           
  2362                           ; 1 bytes @ 0x4B
  2363  0000AB                     	ds	2
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           postdec1	equ	0xFE5
  2371                           fsr1l	equ	0xFE1
  2372                           
  2373                           	psect	cstackCOMRAM
  2374  000001                     __pcstackCOMRAM:
  2375                           	opt stack 0
  2376  000001                     ?i2___lwmod:
  2377                           	opt stack 0
  2378  000001                     i2___lwmod@dividend:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x0
  2382  000001                     	ds	2
  2383  000003                     i2___lwmod@divisor:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x2
  2387  000003                     	ds	2
  2388  000005                     i2___lwmod@counter:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x4
  2392  000005                     	ds	1
  2393  000006                     ??_INTERRUPT_InterruptManager:
  2394                           
  2395                           ; 1 bytes @ 0x5
  2396  000006                     	ds	18
  2397  000018                     ??_EUSART1_Read:
  2398  000018                     ??_isspace:
  2399  000018                     ??_isdigit:
  2400  000018                     ??_isupper:
  2401  000018                     ??_BlinkOkLeds:
  2402  000018                     ??_keepAliveSignalLed:
  2403  000018                     ??_testLeds:
  2404  000018                     ?_ADC_GetConversion:
  2405                           	opt stack 0
  2406  000018                     ?___wmul:
  2407                           	opt stack 0
  2408  000018                     ?___lwdiv:
  2409                           	opt stack 0
  2410  000018                     ?___ftpack:
  2411                           	opt stack 0
  2412  000018                     ?_frexp:
  2413                           	opt stack 0
  2414  000018                     ?___ftneg:
  2415                           	opt stack 0
  2416  000018                     ?___lmul:
  2417                           	opt stack 0
  2418  000018                     ?___lldiv:
  2419                           	opt stack 0
  2420  000018                     SwSpi_Data_Pin@cPinMode:
  2421                           	opt stack 0
  2422  000018                     SwSpi_Clk_Pin@cPinMode:
  2423                           	opt stack 0
  2424  000018                     SwSpi_Set_CE_Pin@cPinMode:
  2425                           	opt stack 0
  2426  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2427                           	opt stack 0
  2428  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2429                           	opt stack 0
  2430  000018                     EUSART1_Write@txData:
  2431                           	opt stack 0
  2432  000018                     toupper@c:
  2433                           	opt stack 0
  2434  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2435                           	opt stack 0
  2436  000018                     ___wmul@multiplier:
  2437                           	opt stack 0
  2438  000018                     ___lwdiv@dividend:
  2439                           	opt stack 0
  2440  000018                     memset@p1:
  2441                           	opt stack 0
  2442  000018                     ___ftpack@arg:
  2443                           	opt stack 0
  2444  000018                     ___ftge@ff1:
  2445                           	opt stack 0
  2446  000018                     ___ftneg@f1:
  2447                           	opt stack 0
  2448  000018                     frexp@value:
  2449                           	opt stack 0
  2450  000018                     make8@data:
  2451                           	opt stack 0
  2452  000018                     ___lmul@multiplier:
  2453                           	opt stack 0
  2454  000018                     ___lldiv@dividend:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0x17
  2458  000018                     	ds	1
  2459  000019                     SwSpi_Data_Pin@phrType:
  2460                           	opt stack 0
  2461  000019                     SwSpi_Clk_Pin@phrType:
  2462                           	opt stack 0
  2463  000019                     SwSpi_Set_CE_Pin@phrType:
  2464                           	opt stack 0
  2465  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2466                           	opt stack 0
  2467  000019                     _isdigit$2611:
  2468                           	opt stack 0
  2469  000019                     _isspace$2614:
  2470                           	opt stack 0
  2471  000019                     _isupper$2617:
  2472                           	opt stack 0
  2473  000019                     testLeds@idx:
  2474                           	opt stack 0
  2475  000019                     UART_Write_Text@text:
  2476                           	opt stack 0
  2477  000019                     EUSART1_Read@readValue:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x18
  2481  000019                     	ds	1
  2482  00001A                     ??_ADC_GetConversion:
  2483  00001A                     ??_TMR0_Initialize:
  2484  00001A                     SWSPI_DAC_send_bits@data:
  2485                           	opt stack 0
  2486  00001A                     SWSPI_Synth_send_bits@data:
  2487                           	opt stack 0
  2488  00001A                     isdigit@c:
  2489                           	opt stack 0
  2490  00001A                     isspace@c:
  2491                           	opt stack 0
  2492  00001A                     isupper@c:
  2493                           	opt stack 0
  2494  00001A                     ___wmul@multiplicand:
  2495                           	opt stack 0
  2496  00001A                     ___lwdiv@divisor:
  2497                           	opt stack 0
  2498  00001A                     memset@c:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x19
  2502  00001A                     	ds	1
  2503  00001B                     ??_UART_Write_Text:
  2504  00001B                     ??_isalpha:
  2505  00001B                     BlinkOkLeds@state:
  2506                           	opt stack 0
  2507  00001B                     SWSPI_DAC_send_bits@count:
  2508                           	opt stack 0
  2509  00001B                     SWSPI_Synth_send_bits@count:
  2510                           	opt stack 0
  2511  00001B                     ___ftpack@exp:
  2512                           	opt stack 0
  2513  00001B                     frexp@eptr:
  2514                           	opt stack 0
  2515  00001B                     ___ftge@ff2:
  2516                           	opt stack 0
  2517                           
  2518                           ; 3 bytes @ 0x1A
  2519  00001B                     	ds	1
  2520  00001C                     SWSPI_DAC_send_bits@phrType:
  2521                           	opt stack 0
  2522  00001C                     SWSPI_Synth_send_bits@phrType:
  2523                           	opt stack 0
  2524  00001C                     ADC_GetConversion@channel:
  2525                           	opt stack 0
  2526  00001C                     make8@dataLocation:
  2527                           	opt stack 0
  2528  00001C                     ___ftpack@sign:
  2529                           	opt stack 0
  2530  00001C                     ___lwdiv@counter:
  2531                           	opt stack 0
  2532  00001C                     _isalpha$2608:
  2533                           	opt stack 0
  2534  00001C                     BlinkOkLeds@idx:
  2535                           	opt stack 0
  2536  00001C                     ___wmul@product:
  2537                           	opt stack 0
  2538  00001C                     memset@n:
  2539                           	opt stack 0
  2540  00001C                     ___lmul@multiplicand:
  2541                           	opt stack 0
  2542  00001C                     ___lldiv@divisor:
  2543                           	opt stack 0
  2544                           
  2545                           ; 4 bytes @ 0x1B
  2546  00001C                     	ds	1
  2547  00001D                     ??_make8:
  2548  00001D                     ??___ftpack:
  2549  00001D                     ??_frexp:
  2550  00001D                     isalpha@c:
  2551                           	opt stack 0
  2552  00001D                     UART_Write_Text@i:
  2553                           	opt stack 0
  2554  00001D                     ___lwdiv@quotient:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x1C
  2558  00001D                     	ds	1
  2559  00001E                     ??___ftge:
  2560  00001E                     memset@p:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x1D
  2564  00001E                     	ds	1
  2565  00001F                     ?___lwmod:
  2566                           	opt stack 0
  2567  00001F                     ___lwmod@dividend:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x1E
  2571  00001F                     	ds	1
  2572  000020                     ?___awtoft:
  2573                           	opt stack 0
  2574  000020                     ?___lltoft:
  2575                           	opt stack 0
  2576  000020                     ?___lwtoft:
  2577                           	opt stack 0
  2578  000020                     ZeroArray@array:
  2579                           	opt stack 0
  2580  000020                     ___awtoft@c:
  2581                           	opt stack 0
  2582  000020                     ___lwtoft@c:
  2583                           	opt stack 0
  2584  000020                     ___lmul@product:
  2585                           	opt stack 0
  2586  000020                     ___lldiv@quotient:
  2587                           	opt stack 0
  2588  000020                     ___lltoft@c:
  2589                           	opt stack 0
  2590                           
  2591                           ; 4 bytes @ 0x1F
  2592  000020                     	ds	1
  2593  000021                     ___lwmod@divisor:
  2594                           	opt stack 0
  2595  000021                     SWSPI_send_word@data:
  2596                           	opt stack 0
  2597                           
  2598                           ; 4 bytes @ 0x20
  2599  000021                     	ds	1
  2600  000022                     ZeroArray@size:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x21
  2604  000022                     	ds	1
  2605  000023                     ?___ftdiv:
  2606                           	opt stack 0
  2607  000023                     ___awtoft@sign:
  2608                           	opt stack 0
  2609  000023                     ___lwmod@counter:
  2610                           	opt stack 0
  2611  000023                     ___ftdiv@f1:
  2612                           	opt stack 0
  2613                           
  2614                           ; 3 bytes @ 0x22
  2615  000023                     	ds	1
  2616  000024                     ??___lltoft:
  2617  000024                     ?_sprintf:
  2618                           	opt stack 0
  2619  000024                     ?_strtol:
  2620                           	opt stack 0
  2621  000024                     ___lldiv@counter:
  2622                           	opt stack 0
  2623  000024                     sprintf@sp:
  2624                           	opt stack 0
  2625  000024                     strtol@s:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x23
  2629  000024                     	ds	1
  2630  000025                     ?___llmod:
  2631                           	opt stack 0
  2632  000025                     SWSPI_send_word@dataSize:
  2633                           	opt stack 0
  2634  000025                     ___llmod@dividend:
  2635                           	opt stack 0
  2636                           
  2637                           ; 4 bytes @ 0x24
  2638  000025                     	ds	1
  2639  000026                     SWSPI_send_word@datac:
  2640                           	opt stack 0
  2641  000026                     sprintf@f:
  2642                           	opt stack 0
  2643  000026                     strtol@endptr:
  2644                           	opt stack 0
  2645  000026                     ___ftdiv@f2:
  2646                           	opt stack 0
  2647                           
  2648                           ; 3 bytes @ 0x25
  2649  000026                     	ds	1
  2650  000027                     SWSPI_send_word@idx:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x26
  2654  000027                     	ds	1
  2655  000028                     ___lltoft@exp:
  2656                           	opt stack 0
  2657  000028                     strtol@base:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x27
  2661  000028                     	ds	1
  2662  000029                     ??___ftdiv:
  2663  000029                     SWSPI_send_word@phrType:
  2664                           	opt stack 0
  2665  000029                     ___llmod@divisor:
  2666                           	opt stack 0
  2667                           
  2668                           ; 4 bytes @ 0x28
  2669  000029                     	ds	1
  2670  00002A                     ??_sprintf:
  2671  00002A                     ??_strtol:
  2672  00002A                     ??_PLLInitialize:
  2673                           
  2674                           ; 1 bytes @ 0x29
  2675  00002A                     	ds	1
  2676  00002B                     
  2677                           ; 1 bytes @ 0x2A
  2678  00002B                     	ds	1
  2679  00002C                     ??___ftmul:
  2680  00002C                     PLLInitialize@idx:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x2B
  2684  00002C                     	ds	1
  2685  00002D                     ___llmod@counter:
  2686                           	opt stack 0
  2687                           
  2688                           ; 1 bytes @ 0x2C
  2689  00002D                     	ds	1
  2690  00002E                     ??_GetIntFromUartData:
  2691  00002E                     PLLInitialize@idx_591:
  2692                           	opt stack 0
  2693                           
  2694                           ; 2 bytes @ 0x2D
  2695  00002E                     	ds	1
  2696  00002F                     ??_eval_poly:
  2697  00002F                     ___altoft@exp:
  2698                           	opt stack 0
  2699                           
  2700                           ; 1 bytes @ 0x2E
  2701  00002F                     	ds	1
  2702  000030                     ___altoft@sign:
  2703                           	opt stack 0
  2704                           
  2705                           ; 1 bytes @ 0x2F
  2706  000030                     	ds	1
  2707  000031                     tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           postinc0	equ	0xFEE
  2712                           wreg	equ	0xFE8
  2713                           postdec1	equ	0xFE5
  2714                           fsr1l	equ	0xFE1
  2715                           
  2716                           ; 1 bytes @ 0x30
  2717 ;;
  2718 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2719 ;;
  2720 ;; *************** function _main *****************
  2721 ;; Defined at:
  2722 ;;		line 13 in file "main.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2736 ;;      Params:         0       0       0       0       0       0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0
  2738 ;;      Temps:          0       0       0       0       0       0       0
  2739 ;;      Totals:         0       0       0       0       0       0       0
  2740 ;;Total ram usage:        0 bytes
  2741 ;; Hardware stack levels required when called:   10
  2742 ;; This function calls:
  2743 ;;		_BlinkOkLeds
  2744 ;;		_InitSystemApplicationManagers
  2745 ;;		_SampleSingleChannel
  2746 ;;		_SendUartSystemInitMessage
  2747 ;;		_SetMcuRunTime
  2748 ;;		_SetMcuSystem
  2749 ;;		_keepAliveSignalLed
  2750 ;;		_readUartByte
  2751 ;; This function is called by:
  2752 ;;		Startup code after reset
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text0
  2757  0023BE                     __ptext0:
  2758                           	opt stack 0
  2759  0023BE                     _main:
  2760                           	opt stack 21
  2761                           
  2762                           ;main.c: 16: SetMcuSystem();
  2763                           
  2764                           ;incstack = 0
  2765  0023BE  EC40  F015         	call	_SetMcuSystem	;wreg free
  2766                           
  2767                           ;main.c: 19: InitSystemApplicationManagers();
  2768  0023C2  EC12  F015         	call	_InitSystemApplicationManagers	;wreg free
  2769                           
  2770                           ;main.c: 22: SendUartSystemInitMessage();
  2771  0023C6  ECB9  F00B         	call	_SendUartSystemInitMessage	;wreg free
  2772                           
  2773                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2774  0023CA  0E03               	movlw	3
  2775  0023CC  EC52  F010         	call	_BlinkOkLeds
  2776  0023D0                     
  2777                           ;main.c: 29: {
  2778                           ;main.c: 30: readUartByte();
  2779  0023D0  EC70  F000         	call	_readUartByte	;wreg free
  2780                           
  2781                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2782  0023D4  0100               	movlb	0	; () banked
  2783  0023D6  05C6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  2784  0023D8  A4D8               	btfss	status,2,c
  2785  0023DA  D006               	goto	l1279
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 33: {
  2789                           ;main.c: 35: SetMcuRunTime();
  2790  0023DC  EC92  F012         	call	_SetMcuRunTime	;wreg free
  2791                           
  2792                           ;main.c: 36: TimerOneSecFlag = 0;
  2793  0023E0  0E00               	movlw	0
  2794  0023E2  0100               	movlb	0	; () banked
  2795  0023E4  6FC6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  2796                           
  2797                           ;main.c: 37: }
  2798  0023E6  D7F4               	goto	l1278
  2799  0023E8                     l1279:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  2803                           
  2804                           ; BSR set to: 0
  2805  0023E8  05C4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  2806  0023EA  A4D8               	btfss	status,2,c
  2807  0023EC  D006               	goto	l1281
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 39: {
  2811                           ;main.c: 40: keepAliveSignalLed();
  2812  0023EE  ECFB  F014         	call	_keepAliveSignalLed	;wreg free
  2813                           
  2814                           ;main.c: 41: TimerKeepAliveFlag = 0;
  2815  0023F2  0E00               	movlw	0
  2816  0023F4  0100               	movlb	0	; () banked
  2817  0023F6  6FC4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  2818                           
  2819                           ;main.c: 42: }
  2820  0023F8  D7EB               	goto	l1278
  2821  0023FA                     l1281:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 43: else if (TimerSamplingFlag == 1)
  2825                           
  2826                           ; BSR set to: 0
  2827  0023FA  05C5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  2828  0023FC  A4D8               	btfss	status,2,c
  2829  0023FE  D7E8               	goto	l1278
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 44: {
  2833                           ;main.c: 45: if(1 == needToSample)
  2834  002400  05C3               	decf	_needToSample& (0+255),w,b	;volatile
  2835  002402  A4D8               	btfss	status,2,c
  2836  002404  D7E5               	goto	l1278
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 46: {
  2840                           ;main.c: 47: SampleSingleChannel();
  2841  002406  EC51  F009         	call	_SampleSingleChannel	;wreg free
  2842  00240A  D7E2               	goto	l1278
  2843  00240C                     __end_of_main:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postdec1	equ	0xFE5
  2852                           fsr1l	equ	0xFE1
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _readUartByte *****************
  2856 ;; Defined at:
  2857 ;;		line 28 in file "EusartApp.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  idx             2   50[BANK2 ] int 
  2862 ;;  dest           50    0[BANK2 ] unsigned char [50]
  2863 ;;  chRec           1   52[BANK2 ] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       0       0       0       0       0       0
  2874 ;;      Locals:         0       0       0      53       0       0       0
  2875 ;;      Temps:          0       3       0       0       0       0       0
  2876 ;;      Totals:         0       3       0      53       0       0       0
  2877 ;;Total ram usage:       56 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    9
  2880 ;; This function calls:
  2881 ;;		_EUSART1_Read
  2882 ;;		_GroupCommon
  2883 ;;		_GroupRx
  2884 ;;		_GroupTx
  2885 ;;		_InitRxMessageParams
  2886 ;;		_UART_Write_Text
  2887 ;;		_sprintf
  2888 ;;		_toupper
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text1
  2895  0000E0                     __ptext1:
  2896                           	opt stack 0
  2897  0000E0                     _readUartByte:
  2898                           	opt stack 21
  2899                           
  2900                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2901                           
  2902                           ;incstack = 0
  2903  0000E0  0E00               	movlw	0
  2904  0000E2  0102               	movlb	2	; () banked
  2905  0000E4  6F34               	movwf	readUartByte@chRec& (0+255),b
  2906                           
  2907                           ;EusartApp.c: 32: char dest[50];
  2908                           ;EusartApp.c: 34: switch(cState)
  2909  0000E6  D157               	goto	l177
  2910  0000E8                     
  2911                           ;EusartApp.c: 38: InitRxMessageParams();
  2912                           
  2913                           ; BSR set to: 2
  2914  0000E8  EC4E  F012         	call	_InitRxMessageParams	;wreg free
  2915                           
  2916                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2917  0000EC  0E01               	movlw	1
  2918  0000EE  0100               	movlb	0	; () banked
  2919  0000F0  6FC0               	movwf	_cState& (0+255),b
  2920                           
  2921                           ;EusartApp.c: 40: break;
  2922  0000F2  0012               	return	
  2923  0000F4                     
  2924                           ; BSR set to: 0
  2925                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  2926                           
  2927                           ; BSR set to: 0
  2928  0000F4  EC70  F012         	call	_EUSART1_Read	;wreg free
  2929  0000F8  0102               	movlb	2	; () banked
  2930  0000FA  6F34               	movwf	readUartByte@chRec& (0+255),b
  2931                           
  2932                           ; BSR set to: 2
  2933                           ;EusartApp.c: 46: if(chRec == (0x24))
  2934  0000FC  0E24               	movlw	36
  2935  0000FE  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  2936  000100  A4D8               	btfss	status,2,c
  2937  000102  0012               	return	
  2938                           
  2939                           ; BSR set to: 2
  2940                           ;EusartApp.c: 47: {
  2941                           ;EusartApp.c: 48: cState = READ_STREAM;
  2942  000104  0E02               	movlw	2
  2943  000106  0100               	movlb	0	; () banked
  2944  000108  6FC0               	movwf	_cState& (0+255),b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;EusartApp.c: 49: }
  2948                           ;EusartApp.c: 50: break;
  2949  00010A  0012               	return	
  2950  00010C                     
  2951                           ; BSR set to: 0
  2952                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  2953                           
  2954                           ; BSR set to: 0
  2955  00010C  51C1               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2956  00010E  B4D8               	btfsc	status,2,c
  2957  000110  0012               	return	
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;EusartApp.c: 55: {
  2961                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  2962  000112  EC70  F012         	call	_EUSART1_Read	;wreg free
  2963  000116  0102               	movlb	2	; () banked
  2964  000118  6F34               	movwf	readUartByte@chRec& (0+255),b
  2965                           
  2966                           ; BSR set to: 2
  2967                           ;EusartApp.c: 57: if(chRec == (0))
  2968  00011A  5134               	movf	readUartByte@chRec& (0+255),w,b
  2969  00011C  B4D8               	btfsc	status,2,c
  2970  00011E  0012               	return	
  2971                           
  2972                           ; BSR set to: 2
  2973                           ;EusartApp.c: 61: else if(chRec == (0xd))
  2974                           
  2975                           ; BSR set to: 2
  2976                           
  2977                           ; BSR set to: 2
  2978                           ;EusartApp.c: 60: }
  2979                           
  2980                           ; BSR set to: 2
  2981                           ;EusartApp.c: 58: {
  2982                           ;EusartApp.c: 59: return;
  2983  000120  0E0D               	movlw	13
  2984  000122  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  2985  000124  A4D8               	btfss	status,2,c
  2986  000126  D004               	goto	l187
  2987                           
  2988                           ; BSR set to: 2
  2989                           ;EusartApp.c: 62: {
  2990                           ;EusartApp.c: 63: cState = READ_GROUP;
  2991  000128  0E03               	movlw	3
  2992  00012A  0100               	movlb	0	; () banked
  2993  00012C  6FC0               	movwf	_cState& (0+255),b
  2994                           
  2995                           ;EusartApp.c: 64: }
  2996  00012E  0012               	return	
  2997  000130                     l187:
  2998                           
  2999                           ;EusartApp.c: 65: else
  3000                           ;EusartApp.c: 66: {
  3001                           ;EusartApp.c: 67: if(chRec != ' ')
  3002                           
  3003                           ; BSR set to: 0
  3004  000130  0E20               	movlw	32
  3005  000132  0102               	movlb	2	; () banked
  3006  000134  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3007  000136  B4D8               	btfsc	status,2,c
  3008  000138  0012               	return	
  3009                           
  3010                           ; BSR set to: 2
  3011                           ;EusartApp.c: 68: {
  3012                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  3013  00013A  0100               	movlb	0	; () banked
  3014  00013C  51BA               	movf	_msgCount& (0+255),w,b
  3015  00013E  0D01               	mullw	1
  3016  000140  0EC2               	movlw	low _rxMsgQueue
  3017  000142  24F3               	addwf	prodl,w,c
  3018  000144  6ED9               	movwf	fsr2l,c
  3019  000146  0E01               	movlw	high _rxMsgQueue
  3020  000148  20F4               	addwfc	prodh,w,c
  3021  00014A  6EDA               	movwf	fsr2h,c
  3022  00014C  C234  FFDF         	movff	readUartByte@chRec,indf2
  3023                           
  3024                           ; BSR set to: 0
  3025  000150  2BBA               	incf	_msgCount& (0+255),f,b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;EusartApp.c: 76: }
  3029                           ;EusartApp.c: 77: break;
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;EusartApp.c: 73: else
  3033                           ;EusartApp.c: 74: {
  3034                           ;EusartApp.c: 75: return;
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;EusartApp.c: 70: }
  3038                           ;EusartApp.c: 71: }
  3039                           ;EusartApp.c: 72: }
  3040                           
  3041                           ; BSR set to: 0
  3042                           
  3043                           ; BSR set to: 0
  3044  000152  0012               	return	
  3045  000154                     
  3046                           ; BSR set to: 0
  3047                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  3048                           
  3049                           ; BSR set to: 0
  3050  000154  0101               	movlb	1	; () banked
  3051  000156  51C2               	movf	_rxMsgQueue& (0+255),w,b
  3052  000158  EC1D  F015         	call	_toupper
  3053  00015C  0102               	movlb	2	; () banked
  3054  00015E  6F34               	movwf	readUartByte@chRec& (0+255),b
  3055                           
  3056                           ;EusartApp.c: 83: switch(chRec)
  3057  000160  D026               	goto	l192
  3058  000162                     
  3059                           ; BSR set to: 2
  3060                           ;EusartApp.c: 87: group = RX_GROUP;
  3061                           
  3062                           ; BSR set to: 2
  3063  000162  0E00               	movlw	0
  3064  000164  0100               	movlb	0	; () banked
  3065  000166  6FBF               	movwf	_group& (0+255),b
  3066                           
  3067                           ;EusartApp.c: 88: cState = READ_REQUEST;
  3068  000168  0E04               	movlw	4
  3069  00016A  6FC0               	movwf	_cState& (0+255),b
  3070                           
  3071                           ;EusartApp.c: 89: break;
  3072  00016C  0012               	return	
  3073  00016E                     
  3074                           ;EusartApp.c: 93: group = TX_GROUP;
  3075                           
  3076                           ; BSR set to: 0
  3077  00016E  0E01               	movlw	1
  3078  000170  0100               	movlb	0	; () banked
  3079  000172  6FBF               	movwf	_group& (0+255),b
  3080                           
  3081                           ;EusartApp.c: 94: cState = READ_REQUEST;
  3082  000174  0E04               	movlw	4
  3083  000176  6FC0               	movwf	_cState& (0+255),b
  3084                           
  3085                           ;EusartApp.c: 95: break;
  3086  000178  0012               	return	
  3087  00017A                     
  3088                           ;EusartApp.c: 99: group = COMMON_GROUP;
  3089                           
  3090                           ; BSR set to: 0
  3091  00017A  0E02               	movlw	2
  3092  00017C  0100               	movlb	0	; () banked
  3093  00017E  6FBF               	movwf	_group& (0+255),b
  3094                           
  3095                           ;EusartApp.c: 100: cState = READ_REQUEST;
  3096  000180  0E04               	movlw	4
  3097  000182  6FC0               	movwf	_cState& (0+255),b
  3098                           
  3099                           ;EusartApp.c: 101: break;
  3100  000184  0012               	return	
  3101  000186                     
  3102                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  3103                           
  3104                           ; BSR set to: 0
  3105  000186  0E00               	movlw	low readUartByte@dest
  3106  000188  6E24               	movwf	sprintf@sp,c
  3107  00018A  0E02               	movlw	high readUartByte@dest
  3108  00018C  6E25               	movwf	sprintf@sp+1,c
  3109  00018E  0EC6               	movlw	low STR_7
  3110  000190  6E26               	movwf	sprintf@f,c
  3111  000192  0E7F               	movlw	high STR_7
  3112  000194  6E27               	movwf	sprintf@f+1,c
  3113  000196  ECFB  F004         	call	_sprintf	;wreg free
  3114                           
  3115                           ;EusartApp.c: 105: UART_Write_Text(dest);
  3116  00019A  0E00               	movlw	low readUartByte@dest
  3117  00019C  6E19               	movwf	UART_Write_Text@text,c
  3118  00019E  0E02               	movlw	high readUartByte@dest
  3119  0001A0  6E1A               	movwf	UART_Write_Text@text+1,c
  3120  0001A2  EC81  F00F         	call	_UART_Write_Text	;wreg free
  3121                           
  3122                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  3123  0001A6  0E00               	movlw	0
  3124  0001A8  0100               	movlb	0	; () banked
  3125  0001AA  6FC0               	movwf	_cState& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;EusartApp.c: 108: }
  3129                           
  3130                           ;EusartApp.c: 107: break;
  3131  0001AC  0012               	return	
  3132  0001AE                     l192:
  3133                           
  3134                           ; BSR set to: 0
  3135  0001AE  0102               	movlb	2	; () banked
  3136  0001B0  5134               	movf	readUartByte@chRec& (0+255),w,b
  3137                           
  3138                           ; Switch size 1, requested type "space"
  3139                           ; Number of cases is 3, Range of values is 82 to 84
  3140                           ; switch strategies available:
  3141                           ; Name         Instructions Cycles
  3142                           ; simple_byte           10     6 (average)
  3143                           ;	Chosen strategy is simple_byte
  3144  0001B2  0A52               	xorlw	82	; case 82
  3145  0001B4  B4D8               	btfsc	status,2,c
  3146  0001B6  D7D5               	goto	l193
  3147  0001B8  0A01               	xorlw	1	; case 83
  3148  0001BA  B4D8               	btfsc	status,2,c
  3149  0001BC  D7DE               	goto	l196
  3150  0001BE  0A07               	xorlw	7	; case 84
  3151  0001C0  B4D8               	btfsc	status,2,c
  3152  0001C2  D7D5               	goto	l195
  3153  0001C4  D7E0               	goto	l197
  3154  0001C6                     
  3155                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  3156                           
  3157                           ; BSR set to: 2
  3158  0001C6  0101               	movlb	1	; () banked
  3159  0001C8  51C3               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3160  0001CA  EC1D  F015         	call	_toupper
  3161  0001CE  0102               	movlb	2	; () banked
  3162  0001D0  6F34               	movwf	readUartByte@chRec& (0+255),b
  3163                           
  3164                           ;EusartApp.c: 115: switch(group)
  3165  0001D2  D072               	goto	l199
  3166  0001D4                     
  3167                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  3168                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'C' || chRec == 'S' ||
  3169                           ;EusartApp.c: 121: chRec == 'C')
  3170                           
  3171                           ; BSR set to: 2
  3172  0001D4  0E49               	movlw	73
  3173  0001D6  0102               	movlb	2	; () banked
  3174  0001D8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3175  0001DA  B4D8               	btfsc	status,2,c
  3176  0001DC  D018               	goto	u7810
  3177                           
  3178                           ; BSR set to: 2
  3179  0001DE  0E46               	movlw	70
  3180  0001E0  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3181  0001E2  B4D8               	btfsc	status,2,c
  3182  0001E4  D014               	goto	u7810
  3183                           
  3184                           ; BSR set to: 2
  3185  0001E6  0E51               	movlw	81
  3186  0001E8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3187  0001EA  B4D8               	btfsc	status,2,c
  3188  0001EC  D010               	goto	u7810
  3189                           
  3190                           ; BSR set to: 2
  3191  0001EE  0E58               	movlw	88
  3192  0001F0  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3193  0001F2  B4D8               	btfsc	status,2,c
  3194  0001F4  D00C               	goto	u7810
  3195                           
  3196                           ; BSR set to: 2
  3197  0001F6  0E43               	movlw	67
  3198  0001F8  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3199  0001FA  B4D8               	btfsc	status,2,c
  3200  0001FC  D008               	goto	u7810
  3201                           
  3202                           ; BSR set to: 2
  3203  0001FE  0E53               	movlw	83
  3204  000200  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3205  000202  B4D8               	btfsc	status,2,c
  3206  000204  D004               	goto	u7810
  3207                           
  3208                           ; BSR set to: 2
  3209  000206  0E43               	movlw	67
  3210  000208  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3211  00020A  A4D8               	btfss	status,2,c
  3212  00020C  D007               	goto	l201
  3213  00020E                     u7810:
  3214                           
  3215                           ; BSR set to: 2
  3216                           ;EusartApp.c: 122: {
  3217                           ;EusartApp.c: 124: request = chRec - '0';
  3218                           
  3219                           ; BSR set to: 2
  3220  00020E  5134               	movf	readUartByte@chRec& (0+255),w,b
  3221  000210  0FD0               	addlw	208
  3222  000212  0100               	movlb	0	; () banked
  3223  000214  6FBE               	movwf	_request& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;EusartApp.c: 125: cState = READ_DATA_SIZE;
  3227  000216  0E05               	movlw	5
  3228  000218  6FC0               	movwf	_cState& (0+255),b
  3229                           
  3230                           ;EusartApp.c: 127: }
  3231  00021A  0012               	return	
  3232  00021C                     l201:
  3233                           
  3234                           ;EusartApp.c: 128: else
  3235                           ;EusartApp.c: 129: {
  3236                           ;EusartApp.c: 130: UART_Write_Text("NOT OK \n\r");
  3237                           
  3238                           ; BSR set to: 0
  3239  00021C  0ED1               	movlw	low STR_1
  3240  00021E  6E19               	movwf	UART_Write_Text@text,c
  3241  000220  0E7F               	movlw	high STR_1
  3242  000222  6E1A               	movwf	UART_Write_Text@text+1,c
  3243  000224  EC81  F00F         	call	_UART_Write_Text	;wreg free
  3244                           
  3245                           ;EusartApp.c: 131: cState = START_RX_MESSAGE_READ;
  3246  000228  0E00               	movlw	0
  3247  00022A  0100               	movlb	0	; () banked
  3248  00022C  6FC0               	movwf	_cState& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;EusartApp.c: 132: }
  3252                           ;EusartApp.c: 133: return;
  3253                           
  3254                           ; BSR set to: 0
  3255  00022E  0012               	return	
  3256  000230                     
  3257                           ; BSR set to: 0
  3258                           ;EusartApp.c: 137: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  3259                           
  3260                           ; BSR set to: 0
  3261  000230  0E49               	movlw	73
  3262  000232  0102               	movlb	2	; () banked
  3263  000234  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3264  000236  B4D8               	btfsc	status,2,c
  3265  000238  D014               	goto	u7870
  3266                           
  3267                           ; BSR set to: 2
  3268  00023A  0E46               	movlw	70
  3269  00023C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3270  00023E  B4D8               	btfsc	status,2,c
  3271  000240  D010               	goto	u7870
  3272                           
  3273                           ; BSR set to: 2
  3274  000242  0E51               	movlw	81
  3275  000244  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3276  000246  B4D8               	btfsc	status,2,c
  3277  000248  D00C               	goto	u7870
  3278                           
  3279                           ; BSR set to: 2
  3280  00024A  0E58               	movlw	88
  3281  00024C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3282  00024E  B4D8               	btfsc	status,2,c
  3283  000250  D008               	goto	u7870
  3284                           
  3285                           ; BSR set to: 2
  3286  000252  0E42               	movlw	66
  3287  000254  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3288  000256  B4D8               	btfsc	status,2,c
  3289  000258  D004               	goto	u7870
  3290                           
  3291                           ; BSR set to: 2
  3292  00025A  0E53               	movlw	83
  3293  00025C  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3294  00025E  A4D8               	btfss	status,2,c
  3295  000260  D007               	goto	l206
  3296  000262                     u7870:
  3297                           
  3298                           ; BSR set to: 2
  3299                           ;EusartApp.c: 138: {
  3300                           ;EusartApp.c: 139: request = (chRec - '0');
  3301                           
  3302                           ; BSR set to: 2
  3303  000262  5134               	movf	readUartByte@chRec& (0+255),w,b
  3304  000264  0FD0               	addlw	208
  3305  000266  0100               	movlb	0	; () banked
  3306  000268  6FBE               	movwf	_request& (0+255),b
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  3310  00026A  0E05               	movlw	5
  3311  00026C  6FC0               	movwf	_cState& (0+255),b
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;EusartApp.c: 142: }
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;EusartApp.c: 141: return;
  3318  00026E  0012               	return	
  3319  000270                     l206:
  3320                           
  3321                           ;EusartApp.c: 143: else
  3322                           ;EusartApp.c: 144: {
  3323                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  3324                           
  3325                           ; BSR set to: 0
  3326  000270  0ED1               	movlw	low STR_1
  3327  000272  6E19               	movwf	UART_Write_Text@text,c
  3328  000274  0E7F               	movlw	high STR_1
  3329  000276  6E1A               	movwf	UART_Write_Text@text+1,c
  3330  000278  EC81  F00F         	call	_UART_Write_Text	;wreg free
  3331                           
  3332                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  3333  00027C  0E00               	movlw	0
  3334  00027E  0100               	movlb	0	; () banked
  3335  000280  6FC0               	movwf	_cState& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;EusartApp.c: 147: }
  3339                           ;EusartApp.c: 148: break;
  3340  000282  0012               	return	
  3341  000284                     
  3342                           ; BSR set to: 0
  3343                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L')
  3344                           
  3345                           ; BSR set to: 0
  3346  000284  0E48               	movlw	72
  3347  000286  0102               	movlb	2	; () banked
  3348  000288  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3349  00028A  B4D8               	btfsc	status,2,c
  3350  00028C  D004               	goto	u7890
  3351                           
  3352                           ; BSR set to: 2
  3353  00028E  0E4C               	movlw	76
  3354  000290  1934               	xorwf	readUartByte@chRec& (0+255),w,b
  3355  000292  A4D8               	btfss	status,2,c
  3356  000294  D007               	goto	l212
  3357  000296                     u7890:
  3358                           
  3359                           ; BSR set to: 2
  3360                           ;EusartApp.c: 153: {
  3361                           ;EusartApp.c: 154: request = (chRec - '0');
  3362                           
  3363                           ; BSR set to: 2
  3364  000296  5134               	movf	readUartByte@chRec& (0+255),w,b
  3365  000298  0FD0               	addlw	208
  3366  00029A  0100               	movlb	0	; () banked
  3367  00029C  6FBE               	movwf	_request& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;EusartApp.c: 155: cState = READ_DATA_SIZE;
  3371  00029E  0E05               	movlw	5
  3372  0002A0  6FC0               	movwf	_cState& (0+255),b
  3373                           
  3374                           ;EusartApp.c: 156: }
  3375  0002A2  0012               	return	
  3376  0002A4                     l212:
  3377                           
  3378                           ;EusartApp.c: 157: else
  3379                           ;EusartApp.c: 158: {
  3380                           ;EusartApp.c: 159: UART_Write_Text("NOT OK \n\r");
  3381                           
  3382                           ; BSR set to: 0
  3383  0002A4  0ED1               	movlw	low STR_1
  3384  0002A6  6E19               	movwf	UART_Write_Text@text,c
  3385  0002A8  0E7F               	movlw	high STR_1
  3386  0002AA  6E1A               	movwf	UART_Write_Text@text+1,c
  3387  0002AC  EC81  F00F         	call	_UART_Write_Text	;wreg free
  3388                           
  3389                           ;EusartApp.c: 160: cState = START_RX_MESSAGE_READ;
  3390  0002B0  0E00               	movlw	0
  3391  0002B2  0100               	movlb	0	; () banked
  3392  0002B4  6FC0               	movwf	_cState& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;EusartApp.c: 161: }
  3396                           ;EusartApp.c: 162: }
  3397  0002B6  0012               	return	
  3398  0002B8                     l199:
  3399                           
  3400                           ; BSR set to: 0
  3401  0002B8  0100               	movlb	0	; () banked
  3402  0002BA  51BF               	movf	_group& (0+255),w,b
  3403                           
  3404                           ; Switch size 1, requested type "space"
  3405                           ; Number of cases is 3, Range of values is 0 to 2
  3406                           ; switch strategies available:
  3407                           ; Name         Instructions Cycles
  3408                           ; simple_byte           10     6 (average)
  3409                           ;	Chosen strategy is simple_byte
  3410  0002BC  0A00               	xorlw	0	; case 0
  3411  0002BE  B4D8               	btfsc	status,2,c
  3412  0002C0  D789               	goto	l200
  3413  0002C2  0A01               	xorlw	1	; case 1
  3414  0002C4  B4D8               	btfsc	status,2,c
  3415  0002C6  D7B4               	goto	l205
  3416  0002C8  0A03               	xorlw	3	; case 2
  3417  0002CA  A4D8               	btfss	status,2,c
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;EusartApp.c: 163: return;
  3421  0002CC  0012               	return	
  3422  0002CE  D7DA               	goto	l211
  3423  0002D0                     
  3424                           ; BSR set to: 0
  3425                           ;EusartApp.c: 167: dataSize = msgCount - 2;
  3426                           
  3427                           ; BSR set to: 0
  3428  0002D0  51BA               	movf	_msgCount& (0+255),w,b
  3429  0002D2  0FFE               	addlw	254
  3430  0002D4  6FBD               	movwf	_dataSize& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;EusartApp.c: 168: rxMsgData[(0x0)] = dataSize;
  3434  0002D6  C0BD  F1AE         	movff	_dataSize,_rxMsgData
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;EusartApp.c: 169: if(dataSize == 0)
  3438  0002DA  51BD               	movf	_dataSize& (0+255),w,b
  3439  0002DC  A4D8               	btfss	status,2,c
  3440  0002DE  D003               	goto	l217
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;EusartApp.c: 170: {
  3444                           ;EusartApp.c: 171: cState = JUMP_FUNCTION;
  3445  0002E0  0E08               	movlw	8
  3446  0002E2  6FC0               	movwf	_cState& (0+255),b
  3447                           
  3448                           ;EusartApp.c: 172: }
  3449  0002E4  0012               	return	
  3450  0002E6                     l217:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;EusartApp.c: 173: else
  3454                           ;EusartApp.c: 174: {
  3455                           ;EusartApp.c: 175: cState = READ_DATA;
  3456                           
  3457                           ; BSR set to: 0
  3458  0002E6  0E06               	movlw	6
  3459  0002E8  6FC0               	movwf	_cState& (0+255),b
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;EusartApp.c: 176: }
  3463                           ;EusartApp.c: 178: break;
  3464  0002EA  0012               	return	
  3465  0002EC                     
  3466                           ; BSR set to: 0
  3467                           ;EusartApp.c: 182: for(int idx = 1; idx < dataSize + 1; idx++)
  3468                           
  3469                           ; BSR set to: 0
  3470  0002EC  0E00               	movlw	0
  3471  0002EE  0102               	movlb	2	; () banked
  3472  0002F0  6F33               	movwf	(readUartByte@idx+1)& (0+255),b
  3473  0002F2  0E01               	movlw	1
  3474  0002F4  6F32               	movwf	readUartByte@idx& (0+255),b
  3475  0002F6  D01B               	goto	l220
  3476  0002F8                     
  3477                           ;EusartApp.c: 183: {
  3478                           ;EusartApp.c: 184: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  3479                           
  3480                           ; BSR set to: 2
  3481  0002F8  0E01               	movlw	1
  3482  0002FA  0102               	movlb	2	; () banked
  3483  0002FC  2532               	addwf	readUartByte@idx& (0+255),w,b
  3484  0002FE  0100               	movlb	0	; () banked
  3485  000300  6F9E               	movwf	??_readUartByte& (0+255),b
  3486  000302  0E00               	movlw	0
  3487  000304  0102               	movlb	2	; () banked
  3488  000306  2133               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3489  000308  0100               	movlb	0	; () banked
  3490  00030A  6F9F               	movwf	(??_readUartByte+1)& (0+255),b
  3491  00030C  0EC2               	movlw	low _rxMsgQueue
  3492  00030E  259E               	addwf	??_readUartByte& (0+255),w,b
  3493  000310  6ED9               	movwf	fsr2l,c
  3494  000312  0E01               	movlw	high _rxMsgQueue
  3495  000314  219F               	addwfc	(??_readUartByte+1)& (0+255),w,b
  3496  000316  6EDA               	movwf	fsr2h,c
  3497  000318  0EAE               	movlw	low _rxMsgData
  3498  00031A  0102               	movlb	2	; () banked
  3499  00031C  2532               	addwf	readUartByte@idx& (0+255),w,b
  3500  00031E  6EE1               	movwf	fsr1l,c
  3501  000320  0E01               	movlw	high _rxMsgData
  3502  000322  2133               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3503  000324  6EE2               	movwf	fsr1h,c
  3504  000326  CFDF FFE7          	movff	indf2,indf1
  3505                           
  3506                           ; BSR set to: 2
  3507  00032A  4B32               	infsnz	readUartByte@idx& (0+255),f,b
  3508  00032C  2B33               	incf	(readUartByte@idx+1)& (0+255),f,b
  3509  00032E                     l220:
  3510                           
  3511                           ; BSR set to: 2
  3512                           
  3513                           ; BSR set to: 2
  3514  00032E  0100               	movlb	0	; () banked
  3515  000330  51BD               	movf	_dataSize& (0+255),w,b
  3516  000332  6F9E               	movwf	??_readUartByte& (0+255),b
  3517  000334  6B9F               	clrf	(??_readUartByte+1)& (0+255),b
  3518  000336  0E01               	movlw	1
  3519  000338  279E               	addwf	??_readUartByte& (0+255),f,b
  3520  00033A  0E00               	movlw	0
  3521  00033C  239F               	addwfc	(??_readUartByte+1)& (0+255),f,b
  3522  00033E  519E               	movf	??_readUartByte& (0+255),w,b
  3523  000340  0102               	movlb	2	; () banked
  3524  000342  5D32               	subwf	readUartByte@idx& (0+255),w,b
  3525  000344  5133               	movf	(readUartByte@idx+1)& (0+255),w,b
  3526  000346  0A80               	xorlw	128
  3527  000348  0100               	movlb	0	; () banked
  3528  00034A  6FA0               	movwf	(??_readUartByte+2)& (0+255),b
  3529  00034C  519F               	movf	(??_readUartByte+1)& (0+255),w,b
  3530  00034E  0A80               	xorlw	128
  3531  000350  59A0               	subwfb	(??_readUartByte+2)& (0+255),w,b
  3532  000352  A0D8               	btfss	status,0,c
  3533  000354  D7D1               	goto	l221
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;EusartApp.c: 185: }
  3537                           ;EusartApp.c: 187: cState = JUMP_FUNCTION;
  3538                           
  3539                           ; BSR set to: 0
  3540  000356  0E08               	movlw	8
  3541  000358  6FC0               	movwf	_cState& (0+255),b
  3542                           
  3543                           ;EusartApp.c: 188: break;
  3544  00035A  0012               	return	
  3545  00035C                     
  3546                           ; BSR set to: 0
  3547                           ;EusartApp.c: 192: groupsArray[group](request, rxMsgData);
  3548                           
  3549                           ; BSR set to: 0
  3550  00035C  51BF               	movf	_group& (0+255),w,b
  3551  00035E  0D02               	mullw	2
  3552  000360  0EC7               	movlw	low _groupsArray
  3553  000362  24F3               	addwf	prodl,w,c
  3554  000364  6ED9               	movwf	fsr2l,c
  3555  000366  0E00               	movlw	high _groupsArray
  3556  000368  20F4               	addwfc	prodh,w,c
  3557  00036A  6EDA               	movwf	fsr2h,c
  3558  00036C  D801               	call	u7928
  3559  00036E  D00F               	goto	u7929
  3560  000370                     u7928:
  3561  000370  0005               	push	
  3562  000372  6EFA               	movwf	pclath,c
  3563  000374  50DE               	movf	postinc2,w,c
  3564  000376  6EFD               	movwf	tosl,c
  3565  000378  50DE               	movf	postinc2,w,c
  3566  00037A  6EFE               	movwf	tosh,c
  3567  00037C  50F8               	movf	tblptru,w,c
  3568  00037E  6EFF               	movwf	tosu,c
  3569  000380  50FA               	movf	pclath,w,c
  3570  000382  0EAE               	movlw	low _rxMsgData
  3571  000384  6F9B               	movwf	GroupCommon@data& (0+255),b
  3572  000386  0E01               	movlw	high _rxMsgData
  3573  000388  6F9C               	movwf	(GroupCommon@data+1)& (0+255),b
  3574  00038A  51BE               	movf	_request& (0+255),w,b
  3575  00038C  0012               	return		;indir
  3576  00038E                     u7929:
  3577                           
  3578                           ;EusartApp.c: 193: cState = START_RX_MESSAGE_READ;
  3579  00038E  0E00               	movlw	0
  3580  000390  0100               	movlb	0	; () banked
  3581  000392  6FC0               	movwf	_cState& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;EusartApp.c: 195: }
  3585                           
  3586                           ;EusartApp.c: 194: break;
  3587  000394  0012               	return	
  3588  000396                     l177:
  3589                           
  3590                           ; BSR set to: 0
  3591  000396  0100               	movlb	0	; () banked
  3592  000398  51C0               	movf	_cState& (0+255),w,b
  3593                           
  3594                           ; Switch size 1, requested type "space"
  3595                           ; Number of cases is 8, Range of values is 0 to 8
  3596                           ; switch strategies available:
  3597                           ; Name         Instructions Cycles
  3598                           ; simple_byte           25    13 (average)
  3599                           ;	Chosen strategy is simple_byte
  3600  00039A  0A00               	xorlw	0	; case 0
  3601  00039C  B4D8               	btfsc	status,2,c
  3602  00039E  D6A4               	goto	l178
  3603  0003A0  0A01               	xorlw	1	; case 1
  3604  0003A2  B4D8               	btfsc	status,2,c
  3605  0003A4  D6A7               	goto	l180
  3606  0003A6  0A03               	xorlw	3	; case 2
  3607  0003A8  B4D8               	btfsc	status,2,c
  3608  0003AA  D6B0               	goto	l182
  3609  0003AC  0A01               	xorlw	1	; case 3
  3610  0003AE  B4D8               	btfsc	status,2,c
  3611  0003B0  D6D1               	goto	l191
  3612  0003B2  0A07               	xorlw	7	; case 4
  3613  0003B4  B4D8               	btfsc	status,2,c
  3614  0003B6  D707               	goto	l198
  3615  0003B8  0A01               	xorlw	1	; case 5
  3616  0003BA  B4D8               	btfsc	status,2,c
  3617  0003BC  D789               	goto	l216
  3618  0003BE  0A03               	xorlw	3	; case 6
  3619  0003C0  B4D8               	btfsc	status,2,c
  3620  0003C2  D794               	goto	l219
  3621  0003C4  0A0E               	xorlw	14	; case 8
  3622  0003C6  A4D8               	btfss	status,2,c
  3623  0003C8  0012               	return	
  3624  0003CA  D7C8               	goto	l223
  3625  0003CC                     __end_of_readUartByte:
  3626                           	opt stack 0
  3627                           tosu	equ	0xFFF
  3628                           tosh	equ	0xFFE
  3629                           tosl	equ	0xFFD
  3630                           pclath	equ	0xFFA
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           prodh	equ	0xFF4
  3636                           prodl	equ	0xFF3
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           indf1	equ	0xFE7
  3640                           postdec1	equ	0xFE5
  3641                           fsr1h	equ	0xFE2
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _InitRxMessageParams *****************
  3650 ;; Defined at:
  3651 ;;		line 198 in file "EusartApp.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;		None
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;		None
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3665 ;;      Params:         0       0       0       0       0       0       0
  3666 ;;      Locals:         0       0       0       0       0       0       0
  3667 ;;      Temps:          0       0       0       0       0       0       0
  3668 ;;      Totals:         0       0       0       0       0       0       0
  3669 ;;Total ram usage:        0 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    5
  3672 ;; This function calls:
  3673 ;;		_ZeroArray
  3674 ;; This function is called by:
  3675 ;;		_readUartByte
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text2
  3680  00249C                     __ptext2:
  3681                           	opt stack 0
  3682  00249C                     _InitRxMessageParams:
  3683                           	opt stack 24
  3684                           
  3685                           ;EusartApp.c: 200: group = 0;
  3686                           
  3687                           ;incstack = 0
  3688  00249C  0E00               	movlw	0
  3689  00249E  0100               	movlb	0	; () banked
  3690  0024A0  6FBF               	movwf	_group& (0+255),b
  3691                           
  3692                           ;EusartApp.c: 201: request = 0;
  3693  0024A2  0E00               	movlw	0
  3694  0024A4  6FBE               	movwf	_request& (0+255),b
  3695                           
  3696                           ;EusartApp.c: 202: msgCount = 0;
  3697  0024A6  0E00               	movlw	0
  3698  0024A8  6FBA               	movwf	_msgCount& (0+255),b
  3699                           
  3700                           ;EusartApp.c: 203: dataSize = 0;
  3701  0024AA  0E00               	movlw	0
  3702  0024AC  6FBD               	movwf	_dataSize& (0+255),b
  3703                           
  3704                           ;EusartApp.c: 204: crcCalc = 0;
  3705  0024AE  0E00               	movlw	0
  3706  0024B0  6FBC               	movwf	_crcCalc& (0+255),b
  3707                           
  3708                           ;EusartApp.c: 205: crcGiven = 0;
  3709  0024B2  0E00               	movlw	0
  3710  0024B4  6FBB               	movwf	_crcGiven& (0+255),b
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;EusartApp.c: 206: ZeroArray(rxMsgQueue, (0x14));
  3714  0024B6  0EC2               	movlw	low _rxMsgQueue
  3715  0024B8  6E20               	movwf	ZeroArray@array,c
  3716  0024BA  0E01               	movlw	high _rxMsgQueue
  3717  0024BC  6E21               	movwf	ZeroArray@array+1,c
  3718  0024BE  0E00               	movlw	0
  3719  0024C0  6E23               	movwf	ZeroArray@size+1,c
  3720  0024C2  0E14               	movlw	20
  3721  0024C4  6E22               	movwf	ZeroArray@size,c
  3722  0024C6  ECD1  F014         	call	_ZeroArray
  3723                           
  3724                           ;EusartApp.c: 207: ZeroArray(rxMsgData, (0x14));
  3725  0024CA  0EAE               	movlw	low _rxMsgData
  3726  0024CC  6E20               	movwf	ZeroArray@array,c
  3727  0024CE  0E01               	movlw	high _rxMsgData
  3728  0024D0  6E21               	movwf	ZeroArray@array+1,c
  3729  0024D2  0E00               	movlw	0
  3730  0024D4  6E23               	movwf	ZeroArray@size+1,c
  3731  0024D6  0E14               	movlw	20
  3732  0024D8  6E22               	movwf	ZeroArray@size,c
  3733  0024DA  ECD1  F014         	call	_ZeroArray	;wreg free
  3734  0024DE  0012               	return		;funcret
  3735  0024E0                     __end_of_InitRxMessageParams:
  3736                           	opt stack 0
  3737                           tosu	equ	0xFFF
  3738                           tosh	equ	0xFFE
  3739                           tosl	equ	0xFFD
  3740                           pclath	equ	0xFFA
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           prodh	equ	0xFF4
  3746                           prodl	equ	0xFF3
  3747                           postinc0	equ	0xFEE
  3748                           wreg	equ	0xFE8
  3749                           indf1	equ	0xFE7
  3750                           postdec1	equ	0xFE5
  3751                           fsr1h	equ	0xFE2
  3752                           fsr1l	equ	0xFE1
  3753                           indf2	equ	0xFDF
  3754                           postinc2	equ	0xFDE
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _GroupCommon *****************
  3760 ;; Defined at:
  3761 ;;		line 79 in file "MessageFunctions.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  request         1    wreg     enum E6
  3764 ;;  data            2   59[BANK0 ] PTR unsigned char 
  3765 ;;		 -> rxMsgData(20), 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  request         1   61[BANK0 ] enum E6
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3777 ;;      Params:         0       2       0       0       0       0       0
  3778 ;;      Locals:         0       1       0       0       0       0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0
  3780 ;;      Totals:         0       3       0       0       0       0       0
  3781 ;;Total ram usage:        3 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    6
  3784 ;; This function calls:
  3785 ;;		_PrintHelpScreen
  3786 ;;		_testLeds
  3787 ;; This function is called by:
  3788 ;;		_readUartByte
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text3
  3793  0028FA                     __ptext3:
  3794                           	opt stack 0
  3795  0028FA                     _GroupCommon:
  3796                           	opt stack 23
  3797                           
  3798                           ;incstack = 0
  3799                           ;GroupCommon@request stored from wreg
  3800  0028FA  0100               	movlb	0	; () banked
  3801  0028FC  6F9D               	movwf	GroupCommon@request& (0+255),b
  3802                           
  3803                           ;MessageFunctions.c: 81: switch (request)
  3804  0028FE  D006               	goto	l1102
  3805  002900                     
  3806                           ;MessageFunctions.c: 84: PrintHelpScreen();
  3807  002900  ECE6  F001         	call	_PrintHelpScreen	;wreg free
  3808                           
  3809                           ;MessageFunctions.c: 85: break;
  3810  002904  0012               	return	
  3811  002906                     
  3812                           ;MessageFunctions.c: 88: testLeds();
  3813  002906  EC22  F010         	call	_testLeds	;wreg free
  3814                           
  3815                           ;MessageFunctions.c: 93: }
  3816                           
  3817                           ;MessageFunctions.c: 92: break;
  3818                           
  3819                           ;MessageFunctions.c: 91: default:
  3820                           
  3821                           ;MessageFunctions.c: 89: break;
  3822  00290A  0012               	return	
  3823  00290C                     l1102:
  3824  00290C  0100               	movlb	0	; () banked
  3825  00290E  519D               	movf	GroupCommon@request& (0+255),w,b
  3826                           
  3827                           ; Switch size 1, requested type "space"
  3828                           ; Number of cases is 2, Range of values is 24 to 28
  3829                           ; switch strategies available:
  3830                           ; Name         Instructions Cycles
  3831                           ; simple_byte            7     4 (average)
  3832                           ;	Chosen strategy is simple_byte
  3833  002910  0A18               	xorlw	24	; case 24
  3834  002912  B4D8               	btfsc	status,2,c
  3835  002914  D7F5               	goto	l1103
  3836  002916  0A04               	xorlw	4	; case 28
  3837  002918  A4D8               	btfss	status,2,c
  3838  00291A  0012               	return	
  3839  00291C  D7F4               	goto	l1105
  3840  00291E                     __end_of_GroupCommon:
  3841                           	opt stack 0
  3842                           tosu	equ	0xFFF
  3843                           tosh	equ	0xFFE
  3844                           tosl	equ	0xFFD
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           indf1	equ	0xFE7
  3855                           postdec1	equ	0xFE5
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           postinc2	equ	0xFDE
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _GroupRx *****************
  3865 ;; Defined at:
  3866 ;;		line 11 in file "MessageFunctions.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  request         1    wreg     enum E6
  3869 ;;  data            2   59[BANK0 ] PTR unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  request         1   61[BANK0 ] enum E6
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3881 ;;      Params:         0       2       0       0       0       0       0
  3882 ;;      Locals:         0       1       0       0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0
  3884 ;;      Totals:         0       3       0       0       0       0       0
  3885 ;;Total ram usage:        3 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    8
  3888 ;; This function calls:
  3889 ;;		_AdcSingleSample
  3890 ;; This function is called by:
  3891 ;;		_readUartByte
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text4
  3896  00262E                     __ptext4:
  3897                           	opt stack 0
  3898  00262E                     _GroupRx:
  3899                           	opt stack 21
  3900                           
  3901                           ;incstack = 0
  3902                           ;GroupRx@request stored from wreg
  3903  00262E  0100               	movlb	0	; () banked
  3904  002630  6F9D               	movwf	GroupRx@request& (0+255),b
  3905                           
  3906                           ;MessageFunctions.c: 13: switch (request)
  3907  002632  D008               	goto	l1076
  3908  002634                     
  3909                           ;MessageFunctions.c: 34: AdcSingleSample(RX_TYPE, data);
  3910  002634  C09B  F075         	movff	GroupRx@data,AdcSingleSample@data
  3911  002638  C09C  F076         	movff	GroupRx@data+1,AdcSingleSample@data+1
  3912  00263C  0E01               	movlw	1
  3913  00263E  EC2A  F008         	call	_AdcSingleSample
  3914                           
  3915                           ;MessageFunctions.c: 39: }
  3916                           
  3917                           ;MessageFunctions.c: 38: break;
  3918                           
  3919                           ;MessageFunctions.c: 37: default:
  3920                           
  3921                           ;MessageFunctions.c: 35: break;
  3922  002642  0012               	return	
  3923  002644                     l1076:
  3924  002644  0100               	movlb	0	; () banked
  3925  002646  519D               	movf	GroupRx@request& (0+255),w,b
  3926                           
  3927                           ; Switch size 1, requested type "space"
  3928                           ; Number of cases is 6, Range of values is 18 to 40
  3929                           ; switch strategies available:
  3930                           ; Name         Instructions Cycles
  3931                           ; simple_byte           19    10 (average)
  3932                           ;	Chosen strategy is simple_byte
  3933  002648  0A12               	xorlw	18	; case 18
  3934  00264A  B4D8               	btfsc	status,2,c
  3935  00264C  0012               	return	
  3936  00264E  0A04               	xorlw	4	; case 22
  3937  002650  B4D8               	btfsc	status,2,c
  3938  002652  0012               	return	
  3939  002654  0A0F               	xorlw	15	; case 25
  3940  002656  B4D8               	btfsc	status,2,c
  3941  002658  0012               	return	
  3942  00265A  0A38               	xorlw	56	; case 33
  3943  00265C  B4D8               	btfsc	status,2,c
  3944  00265E  0012               	return	
  3945  002660  0A02               	xorlw	2	; case 35
  3946  002662  B4D8               	btfsc	status,2,c
  3947  002664  D7E7               	goto	l1083
  3948  002666  0A0B               	xorlw	11	; case 40
  3949  002668  0012               	return	
  3950  00266A                     __end_of_GroupRx:
  3951                           	opt stack 0
  3952                           tosu	equ	0xFFF
  3953                           tosh	equ	0xFFE
  3954                           tosl	equ	0xFFD
  3955                           pclath	equ	0xFFA
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           indf1	equ	0xFE7
  3965                           postdec1	equ	0xFE5
  3966                           fsr1h	equ	0xFE2
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _GroupTx *****************
  3975 ;; Defined at:
  3976 ;;		line 42 in file "MessageFunctions.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  request         1    wreg     enum E6
  3979 ;;  data            2   59[BANK0 ] PTR unsigned char 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  request         1   61[BANK0 ] enum E6
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3991 ;;      Params:         0       2       0       0       0       0       0
  3992 ;;      Locals:         0       1       0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0
  3994 ;;      Totals:         0       3       0       0       0       0       0
  3995 ;;Total ram usage:        3 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    8
  3998 ;; This function calls:
  3999 ;;		_AdcSingleSample
  4000 ;; This function is called by:
  4001 ;;		_readUartByte
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text5
  4006  00240C                     __ptext5:
  4007                           	opt stack 0
  4008  00240C                     _GroupTx:
  4009                           	opt stack 21
  4010                           
  4011                           ;incstack = 0
  4012                           ;GroupTx@request stored from wreg
  4013  00240C  0100               	movlb	0	; () banked
  4014  00240E  6F9D               	movwf	GroupTx@request& (0+255),b
  4015                           
  4016                           ;MessageFunctions.c: 44: switch (request)
  4017  002410  D008               	goto	l1088
  4018  002412                     
  4019                           ;MessageFunctions.c: 71: AdcSingleSample(TX_TYPE, data);
  4020  002412  C09B  F075         	movff	GroupTx@data,AdcSingleSample@data
  4021  002416  C09C  F076         	movff	GroupTx@data+1,AdcSingleSample@data+1
  4022  00241A  0E00               	movlw	0
  4023  00241C  EC2A  F008         	call	_AdcSingleSample
  4024                           
  4025                           ;MessageFunctions.c: 76: }
  4026                           
  4027                           ;MessageFunctions.c: 75: break;
  4028                           
  4029                           ;MessageFunctions.c: 74: default:
  4030                           
  4031                           ;MessageFunctions.c: 72: break;
  4032  002420  0012               	return	
  4033  002422                     l1088:
  4034  002422  0100               	movlb	0	; () banked
  4035  002424  519D               	movf	GroupTx@request& (0+255),w,b
  4036                           
  4037                           ; Switch size 1, requested type "space"
  4038                           ; Number of cases is 8, Range of values is 18 to 101
  4039                           ; switch strategies available:
  4040                           ; Name         Instructions Cycles
  4041                           ; simple_byte           25    13 (average)
  4042                           ;	Chosen strategy is simple_byte
  4043  002426  0A12               	xorlw	18	; case 18
  4044  002428  B4D8               	btfsc	status,2,c
  4045  00242A  0012               	return	
  4046  00242C  0A04               	xorlw	4	; case 22
  4047  00242E  B4D8               	btfsc	status,2,c
  4048  002430  0012               	return	
  4049  002432  0A0F               	xorlw	15	; case 25
  4050  002434  B4D8               	btfsc	status,2,c
  4051  002436  0012               	return	
  4052  002438  0A38               	xorlw	56	; case 33
  4053  00243A  B4D8               	btfsc	status,2,c
  4054  00243C  0012               	return	
  4055  00243E  0A02               	xorlw	2	; case 35
  4056  002440  B4D8               	btfsc	status,2,c
  4057  002442  D7E7               	goto	l1097
  4058  002444  0A0B               	xorlw	11	; case 40
  4059  002446  B4D8               	btfsc	status,2,c
  4060  002448  0012               	return	
  4061  00244A  0A4B               	xorlw	75	; case 99
  4062  00244C  B4D8               	btfsc	status,2,c
  4063  00244E  0012               	return	
  4064  002450  0A06               	xorlw	6	; case 101
  4065  002452  0012               	return	
  4066  002454                     __end_of_GroupTx:
  4067                           	opt stack 0
  4068                           tosu	equ	0xFFF
  4069                           tosh	equ	0xFFE
  4070                           tosl	equ	0xFFD
  4071                           pclath	equ	0xFFA
  4072                           tblptru	equ	0xFF8
  4073                           tblptrh	equ	0xFF7
  4074                           tblptrl	equ	0xFF6
  4075                           tablat	equ	0xFF5
  4076                           prodh	equ	0xFF4
  4077                           prodl	equ	0xFF3
  4078                           postinc0	equ	0xFEE
  4079                           wreg	equ	0xFE8
  4080                           indf1	equ	0xFE7
  4081                           postdec1	equ	0xFE5
  4082                           fsr1h	equ	0xFE2
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           fsr2h	equ	0xFDA
  4087                           fsr2l	equ	0xFD9
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _AdcSingleSample *****************
  4091 ;; Defined at:
  4092 ;;		line 46 in file "AdcApp.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;  cType           1    wreg     enum E177
  4095 ;;  data            2   21[BANK0 ] PTR unsigned char 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  cType           1   23[BANK0 ] enum E177
  4098 ;;  retNum          4   24[BANK0 ] unsigned long 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4108 ;;      Params:         0       2       0       0       0       0       0
  4109 ;;      Locals:         0       5       0       0       0       0       0
  4110 ;;      Temps:          1       0       0       0       0       0       0
  4111 ;;      Totals:         1       7       0       0       0       0       0
  4112 ;;Total ram usage:        8 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    7
  4115 ;; This function calls:
  4116 ;;		_GetIntFromUartData
  4117 ;;		_UART_Write_Text
  4118 ;;		___lldiv
  4119 ;;		___llmod
  4120 ;; This function is called by:
  4121 ;;		_GroupRx
  4122 ;;		_GroupTx
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text6
  4127  001054                     __ptext6:
  4128                           	opt stack 0
  4129  001054                     _AdcSingleSample:
  4130                           	opt stack 21
  4131                           
  4132                           ;incstack = 0
  4133                           ;AdcSingleSample@cType stored from wreg
  4134  001054  0100               	movlb	0	; () banked
  4135  001056  6F77               	movwf	AdcSingleSample@cType& (0+255),b
  4136                           
  4137                           ;AdcApp.c: 48: uint32_t retNum = 0x0;
  4138  001058  0E00               	movlw	0
  4139  00105A  0100               	movlb	0	; () banked
  4140  00105C  6F78               	movwf	AdcSingleSample@retNum& (0+255),b
  4141  00105E  0E00               	movlw	0
  4142  001060  6F79               	movwf	(AdcSingleSample@retNum+1)& (0+255),b
  4143  001062  0E00               	movlw	0
  4144  001064  6F7A               	movwf	(AdcSingleSample@retNum+2)& (0+255),b
  4145  001066  0E00               	movlw	0
  4146  001068  6F7B               	movwf	(AdcSingleSample@retNum+3)& (0+255),b
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;AdcApp.c: 50: if(data[0] == '0')
  4150  00106A  C075  FFD9         	movff	AdcSingleSample@data,fsr2l
  4151  00106E  C076  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  4152  001072  0E30               	movlw	48
  4153  001074  18DE               	xorwf	postinc2,w,c
  4154  001076  A4D8               	btfss	status,2,c
  4155  001078  D007               	goto	l100
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;AdcApp.c: 51: {
  4159                           ;AdcApp.c: 52: UART_Write_Text("NOT OK \n\r");
  4160  00107A  0ED1               	movlw	low STR_1
  4161  00107C  6E19               	movwf	UART_Write_Text@text,c
  4162  00107E  0E7F               	movlw	high STR_1
  4163  001080  6E1A               	movwf	UART_Write_Text@text+1,c
  4164  001082  EC81  F00F         	call	_UART_Write_Text	;wreg free
  4165                           
  4166                           ;AdcApp.c: 53: }
  4167  001086  0012               	return	
  4168  001088                     l100:
  4169                           
  4170                           ;AdcApp.c: 54: else
  4171                           ;AdcApp.c: 55: {
  4172                           ;AdcApp.c: 56: retNum = GetIntFromUartData(data);
  4173  001088  C075  F066         	movff	AdcSingleSample@data,GetIntFromUartData@data
  4174  00108C  C076  F067         	movff	AdcSingleSample@data+1,GetIntFromUartData@data+1
  4175  001090  ECA7  F00D         	call	_GetIntFromUartData	;wreg free
  4176  001094  C066  F078         	movff	?_GetIntFromUartData,AdcSingleSample@retNum
  4177  001098  C067  F079         	movff	?_GetIntFromUartData+1,AdcSingleSample@retNum+1
  4178  00109C  C068  F07A         	movff	?_GetIntFromUartData+2,AdcSingleSample@retNum+2
  4179  0010A0  C069  F07B         	movff	?_GetIntFromUartData+3,AdcSingleSample@retNum+3
  4180                           
  4181                           ;AdcApp.c: 57: channelNum = (retNum / 0xA) % 0x64;
  4182  0010A4  0E0A               	movlw	10
  4183  0010A6  6E1C               	movwf	___lldiv@divisor,c
  4184  0010A8  0E00               	movlw	0
  4185  0010AA  6E1D               	movwf	___lldiv@divisor+1,c
  4186  0010AC  0E00               	movlw	0
  4187  0010AE  6E1E               	movwf	___lldiv@divisor+2,c
  4188  0010B0  0E00               	movlw	0
  4189  0010B2  6E1F               	movwf	___lldiv@divisor+3,c
  4190  0010B4  C078  F018         	movff	AdcSingleSample@retNum,___lldiv@dividend
  4191  0010B8  C079  F019         	movff	AdcSingleSample@retNum+1,___lldiv@dividend+1
  4192  0010BC  C07A  F01A         	movff	AdcSingleSample@retNum+2,___lldiv@dividend+2
  4193  0010C0  C07B  F01B         	movff	AdcSingleSample@retNum+3,___lldiv@dividend+3
  4194  0010C4  ECCA  F00E         	call	___lldiv	;wreg free
  4195  0010C8  C018  F025         	movff	?___lldiv,___llmod@dividend
  4196  0010CC  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  4197  0010D0  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  4198  0010D4  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  4199  0010D8  0E64               	movlw	100
  4200  0010DA  6E29               	movwf	___llmod@divisor,c
  4201  0010DC  0E00               	movlw	0
  4202  0010DE  6E2A               	movwf	___llmod@divisor+1,c
  4203  0010E0  0E00               	movlw	0
  4204  0010E2  6E2B               	movwf	___llmod@divisor+2,c
  4205  0010E4  0E00               	movlw	0
  4206  0010E6  6E2C               	movwf	___llmod@divisor+3,c
  4207  0010E8  ECEF  F00F         	call	___llmod	;wreg free
  4208  0010EC  C025  F037         	movff	?___llmod,_channelNum
  4209  0010F0  C026  F038         	movff	?___llmod+1,_channelNum+1
  4210                           
  4211                           ;AdcApp.c: 58: numSamples = retNum % 0xA;
  4212  0010F4  C078  F025         	movff	AdcSingleSample@retNum,___llmod@dividend
  4213  0010F8  C079  F026         	movff	AdcSingleSample@retNum+1,___llmod@dividend+1
  4214  0010FC  C07A  F027         	movff	AdcSingleSample@retNum+2,___llmod@dividend+2
  4215  001100  C07B  F028         	movff	AdcSingleSample@retNum+3,___llmod@dividend+3
  4216  001104  0E0A               	movlw	10
  4217  001106  6E29               	movwf	___llmod@divisor,c
  4218  001108  0E00               	movlw	0
  4219  00110A  6E2A               	movwf	___llmod@divisor+1,c
  4220  00110C  0E00               	movlw	0
  4221  00110E  6E2B               	movwf	___llmod@divisor+2,c
  4222  001110  0E00               	movlw	0
  4223  001112  6E2C               	movwf	___llmod@divisor+3,c
  4224  001114  ECEF  F00F         	call	___llmod	;wreg free
  4225  001118  C025  F0B5         	movff	?___llmod,_numSamples
  4226  00111C  C026  F0B6         	movff	?___llmod+1,_numSamples+1
  4227                           
  4228                           ;AdcApp.c: 60: if(channelNum > (0x04))
  4229  001120  5038               	movf	_channelNum+1,w,c
  4230  001122  E104               	bnz	u7440
  4231  001124  0E05               	movlw	5
  4232  001126  5C37               	subwf	_channelNum,w,c
  4233  001128  A0D8               	btfss	status,0,c
  4234  00112A  D007               	goto	l102
  4235  00112C                     u7440:
  4236                           
  4237                           ;AdcApp.c: 61: {
  4238                           ;AdcApp.c: 62: UART_Write_Text("NOT OK \n\r");
  4239  00112C  0ED1               	movlw	low STR_1
  4240  00112E  6E19               	movwf	UART_Write_Text@text,c
  4241  001130  0E7F               	movlw	high STR_1
  4242  001132  6E1A               	movwf	UART_Write_Text@text+1,c
  4243  001134  EC81  F00F         	call	_UART_Write_Text	;wreg free
  4244                           
  4245                           ;AdcApp.c: 63: }
  4246  001138  0012               	return	
  4247  00113A                     l102:
  4248                           
  4249                           ;AdcApp.c: 64: else
  4250                           ;AdcApp.c: 65: {
  4251                           ;AdcApp.c: 66: if(cType == TX_TYPE)
  4252  00113A  0100               	movlb	0	; () banked
  4253  00113C  5177               	movf	AdcSingleSample@cType& (0+255),w,b
  4254  00113E  A4D8               	btfss	status,2,c
  4255  001140  D011               	goto	l108
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;AdcApp.c: 67: {
  4259                           ;AdcApp.c: 68: if(channelNum == 0x0 || channelNum == 0x1)
  4260  001142  5037               	movf	_channelNum,w,c
  4261  001144  1038               	iorwf	_channelNum+1,w,c
  4262  001146  B4D8               	btfsc	status,2,c
  4263  001148  D004               	goto	u7470
  4264                           
  4265                           ; BSR set to: 0
  4266  00114A  0437               	decf	_channelNum,w,c
  4267  00114C  1038               	iorwf	_channelNum+1,w,c
  4268  00114E  A4D8               	btfss	status,2,c
  4269  001150  D003               	goto	l105
  4270  001152                     u7470:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;AdcApp.c: 69: {
  4274                           ;AdcApp.c: 70: needToSample = 1;
  4275                           
  4276                           ; BSR set to: 0
  4277  001152  0E01               	movlw	1
  4278  001154  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  4279                           
  4280                           ;AdcApp.c: 71: }
  4281  001156  D006               	goto	l108
  4282  001158                     l105:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;AdcApp.c: 72: else
  4286                           ;AdcApp.c: 73: {
  4287                           ;AdcApp.c: 74: UART_Write_Text("NOT OK \n\r");
  4288                           
  4289                           ; BSR set to: 0
  4290  001158  0ED1               	movlw	low STR_1
  4291  00115A  6E19               	movwf	UART_Write_Text@text,c
  4292  00115C  0E7F               	movlw	high STR_1
  4293  00115E  6E1A               	movwf	UART_Write_Text@text+1,c
  4294  001160  EC81  F00F         	call	_UART_Write_Text	;wreg free
  4295  001164                     l108:
  4296                           
  4297                           ;AdcApp.c: 75: }
  4298                           ;AdcApp.c: 77: }
  4299                           ;AdcApp.c: 79: if(cType == RX_TYPE)
  4300  001164  0100               	movlb	0	; () banked
  4301  001166  0577               	decf	AdcSingleSample@cType& (0+255),w,b
  4302  001168  A4D8               	btfss	status,2,c
  4303  00116A  D003               	goto	l109
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;AdcApp.c: 80: {
  4307                           ;AdcApp.c: 81: needToSample = 1;
  4308  00116C  0E01               	movlw	1
  4309  00116E  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  4310                           
  4311                           ;AdcApp.c: 82: }
  4312  001170  0012               	return	
  4313  001172                     l109:
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;AdcApp.c: 83: else
  4317                           ;AdcApp.c: 84: {
  4318                           ;AdcApp.c: 85: UART_Write_Text("NOT OK \n\r");
  4319                           
  4320                           ; BSR set to: 0
  4321  001172  0ED1               	movlw	low STR_1
  4322  001174  6E19               	movwf	UART_Write_Text@text,c
  4323  001176  0E7F               	movlw	high STR_1
  4324  001178  6E1A               	movwf	UART_Write_Text@text+1,c
  4325  00117A  EC81  F00F         	call	_UART_Write_Text	;wreg free
  4326  00117E  0012               	return	
  4327  001180                     __end_of_AdcSingleSample:
  4328                           	opt stack 0
  4329                           tosu	equ	0xFFF
  4330                           tosh	equ	0xFFE
  4331                           tosl	equ	0xFFD
  4332                           pclath	equ	0xFFA
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           indf1	equ	0xFE7
  4342                           postdec1	equ	0xFE5
  4343                           fsr1h	equ	0xFE2
  4344                           fsr1l	equ	0xFE1
  4345                           indf2	equ	0xFDF
  4346                           postinc2	equ	0xFDE
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function ___lldiv *****************
  4352 ;; Defined at:
  4353 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  dividend        4   23[COMRAM] unsigned long 
  4356 ;;  divisor         4   27[COMRAM] unsigned long 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  quotient        4   31[COMRAM] unsigned long 
  4359 ;;  counter         1   35[COMRAM] unsigned char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  4   23[COMRAM] unsigned long 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2, status,0
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4369 ;;      Params:         8       0       0       0       0       0       0
  4370 ;;      Locals:         5       0       0       0       0       0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0
  4372 ;;      Totals:        13       0       0       0       0       0       0
  4373 ;;Total ram usage:       13 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_AdcSingleSample
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text7
  4384  001D94                     __ptext7:
  4385                           	opt stack 0
  4386  001D94                     ___lldiv:
  4387                           	opt stack 24
  4388                           
  4389                           ;incstack = 0
  4390  001D94  0E00               	movlw	0
  4391  001D96  6E20               	movwf	___lldiv@quotient,c
  4392  001D98  0E00               	movlw	0
  4393  001D9A  6E21               	movwf	___lldiv@quotient+1,c
  4394  001D9C  0E00               	movlw	0
  4395  001D9E  6E22               	movwf	___lldiv@quotient+2,c
  4396  001DA0  0E00               	movlw	0
  4397  001DA2  6E23               	movwf	___lldiv@quotient+3,c
  4398  001DA4  501C               	movf	___lldiv@divisor,w,c
  4399  001DA6  101D               	iorwf	___lldiv@divisor+1,w,c
  4400  001DA8  101E               	iorwf	___lldiv@divisor+2,w,c
  4401  001DAA  101F               	iorwf	___lldiv@divisor+3,w,c
  4402  001DAC  B4D8               	btfsc	status,2,c
  4403  001DAE  D02A               	goto	l1680
  4404  001DB0  0E01               	movlw	1
  4405  001DB2  6E24               	movwf	___lldiv@counter,c
  4406  001DB4  D006               	goto	l1675
  4407  001DB6  90D8               	bcf	status,0,c
  4408  001DB8  361C               	rlcf	___lldiv@divisor,f,c
  4409  001DBA  361D               	rlcf	___lldiv@divisor+1,f,c
  4410  001DBC  361E               	rlcf	___lldiv@divisor+2,f,c
  4411  001DBE  361F               	rlcf	___lldiv@divisor+3,f,c
  4412  001DC0  2A24               	incf	___lldiv@counter,f,c
  4413  001DC2                     l1675:
  4414  001DC2  AE1F               	btfss	___lldiv@divisor+3,7,c
  4415  001DC4  D7F8               	goto	l1676
  4416  001DC6                     u7260:
  4417  001DC6  90D8               	bcf	status,0,c
  4418  001DC8  3620               	rlcf	___lldiv@quotient,f,c
  4419  001DCA  3621               	rlcf	___lldiv@quotient+1,f,c
  4420  001DCC  3622               	rlcf	___lldiv@quotient+2,f,c
  4421  001DCE  3623               	rlcf	___lldiv@quotient+3,f,c
  4422  001DD0  501C               	movf	___lldiv@divisor,w,c
  4423  001DD2  5C18               	subwf	___lldiv@dividend,w,c
  4424  001DD4  501D               	movf	___lldiv@divisor+1,w,c
  4425  001DD6  5819               	subwfb	___lldiv@dividend+1,w,c
  4426  001DD8  501E               	movf	___lldiv@divisor+2,w,c
  4427  001DDA  581A               	subwfb	___lldiv@dividend+2,w,c
  4428  001DDC  501F               	movf	___lldiv@divisor+3,w,c
  4429  001DDE  581B               	subwfb	___lldiv@dividend+3,w,c
  4430  001DE0  A0D8               	btfss	status,0,c
  4431  001DE2  D009               	goto	l1679
  4432  001DE4  501C               	movf	___lldiv@divisor,w,c
  4433  001DE6  5E18               	subwf	___lldiv@dividend,f,c
  4434  001DE8  501D               	movf	___lldiv@divisor+1,w,c
  4435  001DEA  5A19               	subwfb	___lldiv@dividend+1,f,c
  4436  001DEC  501E               	movf	___lldiv@divisor+2,w,c
  4437  001DEE  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4438  001DF0  501F               	movf	___lldiv@divisor+3,w,c
  4439  001DF2  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4440  001DF4  8020               	bsf	___lldiv@quotient,0,c
  4441  001DF6                     l1679:
  4442  001DF6  90D8               	bcf	status,0,c
  4443  001DF8  321F               	rrcf	___lldiv@divisor+3,f,c
  4444  001DFA  321E               	rrcf	___lldiv@divisor+2,f,c
  4445  001DFC  321D               	rrcf	___lldiv@divisor+1,f,c
  4446  001DFE  321C               	rrcf	___lldiv@divisor,f,c
  4447  001E00  2E24               	decfsz	___lldiv@counter,f,c
  4448  001E02  D7E1               	goto	u7260
  4449  001E04                     l1680:
  4450  001E04  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4451  001E08  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4452  001E0C  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4453  001E10  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4454  001E14  0012               	return		;funcret
  4455  001E16                     __end_of___lldiv:
  4456                           	opt stack 0
  4457                           tosu	equ	0xFFF
  4458                           tosh	equ	0xFFE
  4459                           tosl	equ	0xFFD
  4460                           pclath	equ	0xFFA
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           prodh	equ	0xFF4
  4466                           prodl	equ	0xFF3
  4467                           postinc0	equ	0xFEE
  4468                           wreg	equ	0xFE8
  4469                           indf1	equ	0xFE7
  4470                           postdec1	equ	0xFE5
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _GetIntFromUartData *****************
  4480 ;; Defined at:
  4481 ;;		line 40 in file "SystemCommon.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  data            2    6[BANK0 ] PTR unsigned char 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  c               1   18[BANK0 ] unsigned char 
  4486 ;;  idx             2   19[BANK0 ] int 
  4487 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  4    6[BANK0 ] unsigned long 
  4490 ;; Registers used:
  4491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         0       4       0       0       0       0       0
  4498 ;;      Locals:         0      11       0       0       0       0       0
  4499 ;;      Temps:          2       0       0       0       0       0       0
  4500 ;;      Totals:         2      15       0       0       0       0       0
  4501 ;;Total ram usage:       17 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    6
  4504 ;; This function calls:
  4505 ;;		_ZeroArray
  4506 ;;		_strtol
  4507 ;; This function is called by:
  4508 ;;		_AdcSingleSample
  4509 ;;		_DacSetValue
  4510 ;;		_UpdateRxFreq
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text8
  4515  001B4E                     __ptext8:
  4516                           	opt stack 0
  4517  001B4E                     _GetIntFromUartData:
  4518                           	opt stack 21
  4519                           
  4520                           ;SystemCommon.c: 42: char dataRegArr[8];
  4521                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  4522                           
  4523                           ;incstack = 0
  4524  001B4E  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4525  001B50  6E20               	movwf	ZeroArray@array,c
  4526  001B52  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4527  001B54  6E21               	movwf	ZeroArray@array+1,c
  4528  001B56  0E00               	movlw	0
  4529  001B58  6E23               	movwf	ZeroArray@size+1,c
  4530  001B5A  0E08               	movlw	8
  4531  001B5C  6E22               	movwf	ZeroArray@size,c
  4532  001B5E  ECD1  F014         	call	_ZeroArray	;wreg free
  4533                           
  4534                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  4535  001B62  0E00               	movlw	0
  4536  001B64  0100               	movlb	0	; () banked
  4537  001B66  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  4538  001B68  0E00               	movlw	0
  4539  001B6A  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  4540  001B6C                     l6713:
  4541                           
  4542                           ; BSR set to: 0
  4543  001B6C  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  4544  001B6E  D006               	goto	l1151
  4545  001B70  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  4546  001B72  E120               	bnz	l6731
  4547  001B74  0E08               	movlw	8
  4548  001B76  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  4549  001B78  B0D8               	btfsc	status,0,c
  4550  001B7A  D01C               	goto	u7060
  4551  001B7C                     l1151:
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;SystemCommon.c: 46: {
  4555                           ;SystemCommon.c: 47: char c = data[idx + 1];
  4556                           
  4557                           ; BSR set to: 0
  4558  001B7C  0E01               	movlw	1
  4559  001B7E  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  4560  001B80  6E2E               	movwf	??_GetIntFromUartData& (0+255),c
  4561  001B82  0E00               	movlw	0
  4562  001B84  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  4563  001B86  6E2F               	movwf	(??_GetIntFromUartData+1)& (0+255),c
  4564  001B88  502E               	movf	??_GetIntFromUartData,w,c
  4565  001B8A  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  4566  001B8C  6ED9               	movwf	fsr2l,c
  4567  001B8E  502F               	movf	??_GetIntFromUartData+1,w,c
  4568  001B90  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  4569  001B92  6EDA               	movwf	fsr2h,c
  4570  001B94  50DF               	movf	indf2,w,c
  4571  001B96  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;SystemCommon.c: 48: if(c == (0))
  4575  001B98  5172               	movf	GetIntFromUartData@c& (0+255),w,b
  4576  001B9A  B4D8               	btfsc	status,2,c
  4577  001B9C  D00B               	goto	u7060
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;SystemCommon.c: 52: else
  4581                           ;SystemCommon.c: 53: {
  4582                           ;SystemCommon.c: 54: dataRegArr[idx] = c;
  4583                           
  4584                           ; BSR set to: 0
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;SystemCommon.c: 51: }
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;SystemCommon.c: 49: {
  4591                           ;SystemCommon.c: 50: break;
  4592  001B9E  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4593  001BA0  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  4594  001BA2  6ED9               	movwf	fsr2l,c
  4595  001BA4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4596  001BA6  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  4597  001BA8  6EDA               	movwf	fsr2h,c
  4598  001BAA  C072  FFDF         	movff	GetIntFromUartData@c,indf2
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  001BAE  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  4604  001BB0  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  4605  001BB2  D7DC               	goto	l6713
  4606  001BB4                     u7060:
  4607  001BB4                     l6731:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;SystemCommon.c: 55: }
  4611                           ;SystemCommon.c: 56: }
  4612                           ;SystemCommon.c: 58: return strtol(dataRegArr, (0), 10);
  4613  001BB4  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  4614  001BB6  6E24               	movwf	strtol@s,c
  4615  001BB8  0E00               	movlw	high GetIntFromUartData@dataRegArr
  4616  001BBA  6E25               	movwf	strtol@s+1,c
  4617  001BBC  0E00               	movlw	0
  4618  001BBE  6E26               	movwf	strtol@endptr,c
  4619  001BC0  0E00               	movlw	0
  4620  001BC2  6E27               	movwf	strtol@endptr+1,c
  4621  001BC4  0E00               	movlw	0
  4622  001BC6  6E29               	movwf	strtol@base+1,c
  4623  001BC8  0E0A               	movlw	10
  4624  001BCA  6E28               	movwf	strtol@base,c
  4625  001BCC  EC10  F004         	call	_strtol	;wreg free
  4626  001BD0  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  4627  001BD4  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  4628  001BD8  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  4629  001BDC  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  4630  001BE0  0012               	return	
  4631  001BE2                     __end_of_GetIntFromUartData:
  4632                           	opt stack 0
  4633                           tosu	equ	0xFFF
  4634                           tosh	equ	0xFFE
  4635                           tosl	equ	0xFFD
  4636                           pclath	equ	0xFFA
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           indf1	equ	0xFE7
  4646                           postdec1	equ	0xFE5
  4647                           fsr1h	equ	0xFE2
  4648                           fsr1l	equ	0xFE1
  4649                           indf2	equ	0xFDF
  4650                           postinc2	equ	0xFDE
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function _strtol *****************
  4656 ;; Defined at:
  4657 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  s               2   35[COMRAM] PTR const unsigned char 
  4660 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  4661 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  4662 ;;		 -> NULL(0), 
  4663 ;;  base            2   39[COMRAM] int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  a               4    1[BANK0 ] long 
  4666 ;;  c               1    5[BANK0 ] unsigned char 
  4667 ;;  sign            1    0[BANK0 ] unsigned char 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  4   35[COMRAM] long 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4677 ;;      Params:         6       0       0       0       0       0       0
  4678 ;;      Locals:         0       6       0       0       0       0       0
  4679 ;;      Temps:          4       0       0       0       0       0       0
  4680 ;;      Totals:        10       6       0       0       0       0       0
  4681 ;;Total ram usage:       16 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    5
  4684 ;; This function calls:
  4685 ;;		___lmul
  4686 ;;		_isalpha
  4687 ;;		_isdigit
  4688 ;;		_isspace
  4689 ;;		_toupper
  4690 ;; This function is called by:
  4691 ;;		_GetIntFromUartData
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text9
  4696  000820                     __ptext9:
  4697                           	opt stack 0
  4698  000820                     _strtol:
  4699                           	opt stack 21
  4700                           
  4701                           ;incstack = 0
  4702  000820  C024  FFD9         	movff	strtol@s,fsr2l
  4703  000824  C025  FFDA         	movff	strtol@s+1,fsr2h
  4704  000828  50DF               	movf	indf2,w,c
  4705  00082A  0100               	movlb	0	; () banked
  4706  00082C  6F65               	movwf	strtol@c& (0+255),b
  4707                           
  4708                           ; BSR set to: 0
  4709  00082E  4A24               	infsnz	strtol@s,f,c
  4710  000830  2A25               	incf	strtol@s+1,f,c
  4711                           
  4712                           ; BSR set to: 0
  4713  000832  5165               	movf	strtol@c& (0+255),w,b
  4714  000834  EC57  F014         	call	_isspace
  4715  000838  B0D8               	btfsc	status,0,c
  4716  00083A  D7F2               	goto	_strtol
  4717  00083C  0E00               	movlw	0
  4718  00083E  0100               	movlb	0	; () banked
  4719  000840  6F61               	movwf	strtol@a& (0+255),b
  4720  000842  0E00               	movlw	0
  4721  000844  6F62               	movwf	(strtol@a+1)& (0+255),b
  4722  000846  0E00               	movlw	0
  4723  000848  6F63               	movwf	(strtol@a+2)& (0+255),b
  4724  00084A  0E00               	movlw	0
  4725  00084C  6F64               	movwf	(strtol@a+3)& (0+255),b
  4726  00084E  0E00               	movlw	0
  4727  000850  6F60               	movwf	strtol@sign& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730  000852  0E2D               	movlw	45
  4731  000854  1965               	xorwf	strtol@c& (0+255),w,b
  4732  000856  A4D8               	btfss	status,2,c
  4733  000858  D003               	goto	l1903
  4734                           
  4735                           ; BSR set to: 0
  4736  00085A  0E01               	movlw	1
  4737  00085C  6F60               	movwf	strtol@sign& (0+255),b
  4738  00085E  D004               	goto	u6400
  4739  000860                     l1903:
  4740                           
  4741                           ; BSR set to: 0
  4742                           
  4743                           ; BSR set to: 0
  4744  000860  0E2B               	movlw	43
  4745  000862  1965               	xorwf	strtol@c& (0+255),w,b
  4746  000864  A4D8               	btfss	status,2,c
  4747  000866  D008               	goto	l1905
  4748  000868                     u6400:
  4749                           
  4750                           ; BSR set to: 0
  4751  000868  C024  FFD9         	movff	strtol@s,fsr2l
  4752  00086C  C025  FFDA         	movff	strtol@s+1,fsr2h
  4753  000870  50DF               	movf	indf2,w,c
  4754  000872  6F65               	movwf	strtol@c& (0+255),b
  4755                           
  4756                           ; BSR set to: 0
  4757  000874  4A24               	infsnz	strtol@s,f,c
  4758  000876  2A25               	incf	strtol@s+1,f,c
  4759  000878                     l1905:
  4760                           
  4761                           ; BSR set to: 0
  4762                           
  4763                           ; BSR set to: 0
  4764                           
  4765                           ; BSR set to: 0
  4766  000878  0E30               	movlw	48
  4767  00087A  1965               	xorwf	strtol@c& (0+255),w,b
  4768  00087C  A4D8               	btfss	status,2,c
  4769  00087E  D02E               	goto	l1913
  4770                           
  4771                           ; BSR set to: 0
  4772  000880  C024  FFD9         	movff	strtol@s,fsr2l
  4773  000884  C025  FFDA         	movff	strtol@s+1,fsr2h
  4774  000888  50DF               	movf	indf2,w,c
  4775  00088A  6F65               	movwf	strtol@c& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778  00088C  4A24               	infsnz	strtol@s,f,c
  4779  00088E  2A25               	incf	strtol@s+1,f,c
  4780                           
  4781                           ; BSR set to: 0
  4782  000890  5028               	movf	strtol@base,w,c
  4783  000892  1029               	iorwf	strtol@base+1,w,c
  4784  000894  B4D8               	btfsc	status,2,c
  4785  000896  D005               	goto	u6430
  4786                           
  4787                           ; BSR set to: 0
  4788  000898  0E10               	movlw	16
  4789  00089A  1828               	xorwf	strtol@base,w,c
  4790  00089C  1029               	iorwf	strtol@base+1,w,c
  4791  00089E  A4D8               	btfss	status,2,c
  4792  0008A0  D015               	goto	l1907
  4793  0008A2                     u6430:
  4794                           
  4795                           ; BSR set to: 0
  4796                           
  4797                           ; BSR set to: 0
  4798  0008A2  0E78               	movlw	120
  4799  0008A4  1965               	xorwf	strtol@c& (0+255),w,b
  4800  0008A6  B4D8               	btfsc	status,2,c
  4801  0008A8  D004               	goto	u6450
  4802                           
  4803                           ; BSR set to: 0
  4804  0008AA  0E58               	movlw	88
  4805  0008AC  1965               	xorwf	strtol@c& (0+255),w,b
  4806  0008AE  A4D8               	btfss	status,2,c
  4807  0008B0  D00D               	goto	l1907
  4808  0008B2                     u6450:
  4809                           
  4810                           ; BSR set to: 0
  4811                           
  4812                           ; BSR set to: 0
  4813  0008B2  0E00               	movlw	0
  4814  0008B4  6E29               	movwf	strtol@base+1,c
  4815  0008B6  0E10               	movlw	16
  4816  0008B8  6E28               	movwf	strtol@base,c
  4817                           
  4818                           ; BSR set to: 0
  4819  0008BA  C024  FFD9         	movff	strtol@s,fsr2l
  4820  0008BE  C025  FFDA         	movff	strtol@s+1,fsr2h
  4821  0008C2  50DF               	movf	indf2,w,c
  4822  0008C4  6F65               	movwf	strtol@c& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825  0008C6  4A24               	infsnz	strtol@s,f,c
  4826  0008C8  2A25               	incf	strtol@s+1,f,c
  4827  0008CA  D008               	goto	l1913
  4828  0008CC                     l1907:
  4829                           
  4830                           ; BSR set to: 0
  4831                           
  4832                           ; BSR set to: 0
  4833  0008CC  5028               	movf	strtol@base,w,c
  4834  0008CE  1029               	iorwf	strtol@base+1,w,c
  4835  0008D0  A4D8               	btfss	status,2,c
  4836  0008D2  D004               	goto	l1913
  4837                           
  4838                           ; BSR set to: 0
  4839  0008D4  0E00               	movlw	0
  4840  0008D6  6E29               	movwf	strtol@base+1,c
  4841  0008D8  0E08               	movlw	8
  4842  0008DA  6E28               	movwf	strtol@base,c
  4843  0008DC                     l1913:
  4844                           
  4845                           ; BSR set to: 0
  4846                           
  4847                           ; BSR set to: 0
  4848                           
  4849                           ; BSR set to: 0
  4850                           
  4851                           ; BSR set to: 0
  4852  0008DC  5028               	movf	strtol@base,w,c
  4853  0008DE  1029               	iorwf	strtol@base+1,w,c
  4854  0008E0  A4D8               	btfss	status,2,c
  4855  0008E2  D004               	goto	l1914
  4856                           
  4857                           ; BSR set to: 0
  4858  0008E4  0E00               	movlw	0
  4859  0008E6  6E29               	movwf	strtol@base+1,c
  4860  0008E8  0E0A               	movlw	10
  4861  0008EA  6E28               	movwf	strtol@base,c
  4862  0008EC                     l1914:
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  0008EC  5165               	movf	strtol@c& (0+255),w,b
  4870  0008EE  EC43  F014         	call	_isalpha
  4871  0008F2  A0D8               	btfss	status,0,c
  4872  0008F4  D008               	goto	l1916
  4873  0008F6  0100               	movlb	0	; () banked
  4874  0008F8  5165               	movf	strtol@c& (0+255),w,b
  4875  0008FA  EC1D  F015         	call	_toupper
  4876  0008FE  0FC9               	addlw	201
  4877  000900  0100               	movlb	0	; () banked
  4878  000902  6F65               	movwf	strtol@c& (0+255),b
  4879  000904  D009               	goto	l1919
  4880  000906                     l1916:
  4881                           
  4882                           ; BSR set to: 0
  4883  000906  0100               	movlb	0	; () banked
  4884  000908  5165               	movf	strtol@c& (0+255),w,b
  4885  00090A  ECB3  F014         	call	_isdigit
  4886  00090E  A0D8               	btfss	status,0,c
  4887  000910  D039               	goto	l1920
  4888  000912  0E30               	movlw	48
  4889  000914  0100               	movlb	0	; () banked
  4890  000916  5F65               	subwf	strtol@c& (0+255),f,b
  4891  000918                     l1919:
  4892                           
  4893                           ; BSR set to: 0
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  000918  5165               	movf	strtol@c& (0+255),w,b
  4899  00091A  6E2A               	movwf	??_strtol& (0+255),c
  4900  00091C  6A2B               	clrf	(??_strtol+1)& (0+255),c
  4901  00091E  5028               	movf	strtol@base,w,c
  4902  000920  5C2A               	subwf	??_strtol,w,c
  4903  000922  502B               	movf	??_strtol+1,w,c
  4904  000924  0A80               	xorlw	128
  4905  000926  6E2C               	movwf	(??_strtol+2)& (0+255),c
  4906  000928  5029               	movf	strtol@base+1,w,c
  4907  00092A  0A80               	xorlw	128
  4908  00092C  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  4909  00092E  B0D8               	btfsc	status,0,c
  4910  000930  D029               	goto	l1920
  4911                           
  4912                           ; BSR set to: 0
  4913                           
  4914                           ; BSR set to: 0
  4915                           
  4916                           ; BSR set to: 0
  4917  000932  C028  F018         	movff	strtol@base,___lmul@multiplier
  4918  000936  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  4919  00093A  0E00               	movlw	0
  4920  00093C  BE19               	btfsc	___lmul@multiplier+1,7,c
  4921  00093E  0EFF               	movlw	-1
  4922  000940  6E1A               	movwf	___lmul@multiplier+2,c
  4923  000942  6E1B               	movwf	___lmul@multiplier+3,c
  4924  000944  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  4925  000948  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  4926  00094C  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  4927  000950  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  4928  000954  EC35  F011         	call	___lmul	;wreg free
  4929  000958  0100               	movlb	0	; () banked
  4930  00095A  5165               	movf	strtol@c& (0+255),w,b
  4931  00095C  2418               	addwf	?___lmul,w,c
  4932  00095E  6F61               	movwf	strtol@a& (0+255),b
  4933  000960  0E00               	movlw	0
  4934  000962  2019               	addwfc	?___lmul+1,w,c
  4935  000964  6F62               	movwf	(strtol@a+1)& (0+255),b
  4936  000966  0E00               	movlw	0
  4937  000968  201A               	addwfc	?___lmul+2,w,c
  4938  00096A  6F63               	movwf	(strtol@a+2)& (0+255),b
  4939  00096C  0E00               	movlw	0
  4940  00096E  201B               	addwfc	?___lmul+3,w,c
  4941  000970  6F64               	movwf	(strtol@a+3)& (0+255),b
  4942                           
  4943                           ; BSR set to: 0
  4944  000972  C024  FFD9         	movff	strtol@s,fsr2l
  4945  000976  C025  FFDA         	movff	strtol@s+1,fsr2h
  4946  00097A  50DF               	movf	indf2,w,c
  4947  00097C  6F65               	movwf	strtol@c& (0+255),b
  4948                           
  4949                           ; BSR set to: 0
  4950  00097E  4A24               	infsnz	strtol@s,f,c
  4951  000980  2A25               	incf	strtol@s+1,f,c
  4952  000982  D7B4               	goto	l1914
  4953  000984                     l1920:
  4954                           
  4955                           ; BSR set to: 0
  4956  000984  5026               	movf	strtol@endptr,w,c
  4957  000986  1027               	iorwf	strtol@endptr+1,w,c
  4958  000988  B4D8               	btfsc	status,2,c
  4959  00098A  D00E               	goto	l1922
  4960  00098C  0EFF               	movlw	255
  4961  00098E  2424               	addwf	strtol@s,w,c
  4962  000990  6E2A               	movwf	??_strtol& (0+255),c
  4963  000992  0EFF               	movlw	255
  4964  000994  2025               	addwfc	strtol@s+1,w,c
  4965  000996  6E2B               	movwf	(??_strtol+1)& (0+255),c
  4966  000998  C026  FFD9         	movff	strtol@endptr,fsr2l
  4967  00099C  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  4968  0009A0  C02A  FFDE         	movff	??_strtol,postinc2
  4969  0009A4  C02B  FFDD         	movff	??_strtol+1,postdec2
  4970  0009A8                     l1922:
  4971  0009A8  0100               	movlb	0	; () banked
  4972  0009AA  5160               	movf	strtol@sign& (0+255),w,b
  4973  0009AC  B4D8               	btfsc	status,2,c
  4974  0009AE  D01A               	goto	l1923
  4975                           
  4976                           ; BSR set to: 0
  4977  0009B0  C061  F02A         	movff	strtol@a,??_strtol
  4978  0009B4  C062  F02B         	movff	strtol@a+1,??_strtol+1
  4979  0009B8  C063  F02C         	movff	strtol@a+2,??_strtol+2
  4980  0009BC  C064  F02D         	movff	strtol@a+3,??_strtol+3
  4981  0009C0  1E2A               	comf	??_strtol,f,c
  4982  0009C2  1E2B               	comf	??_strtol+1,f,c
  4983  0009C4  1E2C               	comf	??_strtol+2,f,c
  4984  0009C6  1E2D               	comf	??_strtol+3,f,c
  4985  0009C8  2A2A               	incf	??_strtol,f,c
  4986  0009CA  0E00               	movlw	0
  4987  0009CC  222B               	addwfc	??_strtol+1,f,c
  4988  0009CE  222C               	addwfc	??_strtol+2,f,c
  4989  0009D0  222D               	addwfc	??_strtol+3,f,c
  4990  0009D2  C02A  F024         	movff	??_strtol,?_strtol
  4991  0009D6  C02B  F025         	movff	??_strtol+1,?_strtol+1
  4992  0009DA  C02C  F026         	movff	??_strtol+2,?_strtol+2
  4993  0009DE  C02D  F027         	movff	??_strtol+3,?_strtol+3
  4994                           
  4995                           ; BSR set to: 0
  4996  0009E2  0012               	return	
  4997  0009E4                     l1923:
  4998                           
  4999                           ; BSR set to: 0
  5000  0009E4  C061  F024         	movff	strtol@a,?_strtol
  5001  0009E8  C062  F025         	movff	strtol@a+1,?_strtol+1
  5002  0009EC  C063  F026         	movff	strtol@a+2,?_strtol+2
  5003  0009F0  C064  F027         	movff	strtol@a+3,?_strtol+3
  5004                           
  5005                           ; BSR set to: 0
  5006  0009F4  0012               	return		;funcret
  5007  0009F6                     __end_of_strtol:
  5008                           	opt stack 0
  5009                           tosu	equ	0xFFF
  5010                           tosh	equ	0xFFE
  5011                           tosl	equ	0xFFD
  5012                           pclath	equ	0xFFA
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           indf1	equ	0xFE7
  5022                           postdec1	equ	0xFE5
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           postinc2	equ	0xFDE
  5027                           postdec2	equ	0xFDD
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function _toupper *****************
  5033 ;; Defined at:
  5034 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  c               1    wreg     unsigned char 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  c               1   23[COMRAM] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      unsigned char 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5048 ;;      Params:         0       0       0       0       0       0       0
  5049 ;;      Locals:         1       0       0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0
  5051 ;;      Totals:         1       0       0       0       0       0       0
  5052 ;;Total ram usage:        1 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    3
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_readUartByte
  5059 ;;		_strtol
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text10
  5064  002A3A                     __ptext10:
  5065                           	opt stack 0
  5066  002A3A                     _toupper:
  5067                           	opt stack 26
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;incstack = 0
  5071                           ;toupper@c stored from wreg
  5072  002A3A  6E18               	movwf	toupper@c,c
  5073  002A3C  0E7B               	movlw	123
  5074  002A3E  6018               	cpfslt	toupper@c,c
  5075  002A40  D004               	goto	l1927
  5076  002A42  0E60               	movlw	96
  5077  002A44  6418               	cpfsgt	toupper@c,c
  5078  002A46  D001               	goto	l1927
  5079  002A48  9A18               	bcf	toupper@c,5,c
  5080  002A4A                     l1927:
  5081  002A4A  5018               	movf	toupper@c,w,c
  5082  002A4C  0012               	return	
  5083  002A4E                     __end_of_toupper:
  5084                           	opt stack 0
  5085                           tosu	equ	0xFFF
  5086                           tosh	equ	0xFFE
  5087                           tosl	equ	0xFFD
  5088                           pclath	equ	0xFFA
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           indf1	equ	0xFE7
  5098                           postdec1	equ	0xFE5
  5099                           fsr1h	equ	0xFE2
  5100                           fsr1l	equ	0xFE1
  5101                           indf2	equ	0xFDF
  5102                           postinc2	equ	0xFDE
  5103                           postdec2	equ	0xFDD
  5104                           fsr2h	equ	0xFDA
  5105                           fsr2l	equ	0xFD9
  5106                           status	equ	0xFD8
  5107                           
  5108 ;; *************** function _isspace *****************
  5109 ;; Defined at:
  5110 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;  c               1    wreg     unsigned char 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  c               1   25[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;		None               void
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5124 ;;      Params:         0       0       0       0       0       0       0
  5125 ;;      Locals:         2       0       0       0       0       0       0
  5126 ;;      Temps:          1       0       0       0       0       0       0
  5127 ;;      Totals:         3       0       0       0       0       0       0
  5128 ;;Total ram usage:        3 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    3
  5131 ;; This function calls:
  5132 ;;		Nothing
  5133 ;; This function is called by:
  5134 ;;		_strtol
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text11
  5139  0028AE                     __ptext11:
  5140                           	opt stack 0
  5141  0028AE                     _isspace:
  5142                           	opt stack 22
  5143                           
  5144                           ;incstack = 0
  5145                           ;isspace@c stored from wreg
  5146  0028AE  6E1A               	movwf	isspace@c,c
  5147  0028B0  0E01               	movlw	1
  5148  0028B2  6E19               	movwf	_isspace$2614,c
  5149  0028B4  0E20               	movlw	32
  5150  0028B6  181A               	xorwf	isspace@c,w,c
  5151  0028B8  B4D8               	btfsc	status,2,c
  5152  0028BA  D008               	goto	l2009
  5153  0028BC  0E0E               	movlw	14
  5154  0028BE  601A               	cpfslt	isspace@c,c
  5155  0028C0  D003               	goto	u6290
  5156  0028C2  0E09               	movlw	9
  5157  0028C4  601A               	cpfslt	isspace@c,c
  5158  0028C6  D002               	goto	l2009
  5159  0028C8                     u6290:
  5160  0028C8  0E00               	movlw	0
  5161  0028CA  6E19               	movwf	_isspace$2614,c
  5162  0028CC                     l2009:
  5163  0028CC  C019  F018         	movff	_isspace$2614,??_isspace
  5164  0028D0  3018               	rrcf	??_isspace,w,c
  5165  0028D2  0012               	return	
  5166  0028D4                     __end_of_isspace:
  5167                           	opt stack 0
  5168                           tosu	equ	0xFFF
  5169                           tosh	equ	0xFFE
  5170                           tosl	equ	0xFFD
  5171                           pclath	equ	0xFFA
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           postinc0	equ	0xFEE
  5179                           wreg	equ	0xFE8
  5180                           indf1	equ	0xFE7
  5181                           postdec1	equ	0xFE5
  5182                           fsr1h	equ	0xFE2
  5183                           fsr1l	equ	0xFE1
  5184                           indf2	equ	0xFDF
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8
  5190                           
  5191 ;; *************** function _isdigit *****************
  5192 ;; Defined at:
  5193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  c               1    wreg     unsigned char 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  c               1   25[COMRAM] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;		None               void
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5207 ;;      Params:         0       0       0       0       0       0       0
  5208 ;;      Locals:         2       0       0       0       0       0       0
  5209 ;;      Temps:          1       0       0       0       0       0       0
  5210 ;;      Totals:         3       0       0       0       0       0       0
  5211 ;;Total ram usage:        3 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    3
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_strtol
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text12
  5222  002966                     __ptext12:
  5223                           	opt stack 0
  5224  002966                     _isdigit:
  5225                           	opt stack 22
  5226                           
  5227                           ;incstack = 0
  5228                           ;isdigit@c stored from wreg
  5229  002966  6E1A               	movwf	isdigit@c,c
  5230  002968  0E00               	movlw	0
  5231  00296A  6E19               	movwf	_isdigit$2611,c
  5232  00296C  0E3A               	movlw	58
  5233  00296E  601A               	cpfslt	isdigit@c,c
  5234  002970  D005               	goto	l2004
  5235  002972  0E2F               	movlw	47
  5236  002974  641A               	cpfsgt	isdigit@c,c
  5237  002976  D002               	goto	l2004
  5238  002978  0E01               	movlw	1
  5239  00297A  6E19               	movwf	_isdigit$2611,c
  5240  00297C                     l2004:
  5241  00297C  C019  F018         	movff	_isdigit$2611,??_isdigit
  5242  002980  3018               	rrcf	??_isdigit,w,c
  5243  002982  0012               	return	
  5244  002984                     __end_of_isdigit:
  5245                           	opt stack 0
  5246                           tosu	equ	0xFFF
  5247                           tosh	equ	0xFFE
  5248                           tosl	equ	0xFFD
  5249                           pclath	equ	0xFFA
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           indf1	equ	0xFE7
  5259                           postdec1	equ	0xFE5
  5260                           fsr1h	equ	0xFE2
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _isalpha *****************
  5270 ;; Defined at:
  5271 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  c               1    wreg     unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  c               1   28[COMRAM] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5285 ;;      Params:         0       0       0       0       0       0       0
  5286 ;;      Locals:         2       0       0       0       0       0       0
  5287 ;;      Temps:          1       0       0       0       0       0       0
  5288 ;;      Totals:         3       0       0       0       0       0       0
  5289 ;;Total ram usage:        3 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    4
  5292 ;; This function calls:
  5293 ;;		_isupper
  5294 ;; This function is called by:
  5295 ;;		_strtol
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           	psect	text13
  5300  002886                     __ptext13:
  5301                           	opt stack 0
  5302  002886                     _isalpha:
  5303                           	opt stack 21
  5304                           
  5305                           ;incstack = 0
  5306                           ;isalpha@c stored from wreg
  5307  002886  6E1D               	movwf	isalpha@c,c
  5308  002888  0E01               	movlw	1
  5309  00288A  6E1C               	movwf	_isalpha$2608,c
  5310  00288C  0E7B               	movlw	123
  5311  00288E  601D               	cpfslt	isalpha@c,c
  5312  002890  D003               	goto	u6310
  5313  002892  0E61               	movlw	97
  5314  002894  601D               	cpfslt	isalpha@c,c
  5315  002896  D007               	goto	l1999
  5316  002898                     u6310:
  5317  002898  501D               	movf	isalpha@c,w,c
  5318  00289A  ECC2  F014         	call	_isupper
  5319  00289E  B0D8               	btfsc	status,0,c
  5320  0028A0  D002               	goto	l1999
  5321  0028A2  0E00               	movlw	0
  5322  0028A4  6E1C               	movwf	_isalpha$2608,c
  5323  0028A6                     l1999:
  5324  0028A6  C01C  F01B         	movff	_isalpha$2608,??_isalpha
  5325  0028AA  301B               	rrcf	??_isalpha,w,c
  5326  0028AC  0012               	return	
  5327  0028AE                     __end_of_isalpha:
  5328                           	opt stack 0
  5329                           tosu	equ	0xFFF
  5330                           tosh	equ	0xFFE
  5331                           tosl	equ	0xFFD
  5332                           pclath	equ	0xFFA
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           postinc0	equ	0xFEE
  5340                           wreg	equ	0xFE8
  5341                           indf1	equ	0xFE7
  5342                           postdec1	equ	0xFE5
  5343                           fsr1h	equ	0xFE2
  5344                           fsr1l	equ	0xFE1
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function _isupper *****************
  5353 ;; Defined at:
  5354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;  c               1    wreg     unsigned char 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  c               1   25[COMRAM] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;		None               void
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5368 ;;      Params:         0       0       0       0       0       0       0
  5369 ;;      Locals:         2       0       0       0       0       0       0
  5370 ;;      Temps:          1       0       0       0       0       0       0
  5371 ;;      Totals:         3       0       0       0       0       0       0
  5372 ;;Total ram usage:        3 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    3
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_isalpha
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text14
  5383  002984                     __ptext14:
  5384                           	opt stack 0
  5385  002984                     _isupper:
  5386                           	opt stack 21
  5387                           
  5388                           ;incstack = 0
  5389                           ;isupper@c stored from wreg
  5390  002984  6E1A               	movwf	isupper@c,c
  5391  002986  0E00               	movlw	0
  5392  002988  6E19               	movwf	_isupper$2617,c
  5393  00298A  0E5B               	movlw	91
  5394  00298C  601A               	cpfslt	isupper@c,c
  5395  00298E  D005               	goto	l2014
  5396  002990  0E40               	movlw	64
  5397  002992  641A               	cpfsgt	isupper@c,c
  5398  002994  D002               	goto	l2014
  5399  002996  0E01               	movlw	1
  5400  002998  6E19               	movwf	_isupper$2617,c
  5401  00299A                     l2014:
  5402  00299A  C019  F018         	movff	_isupper$2617,??_isupper
  5403  00299E  3018               	rrcf	??_isupper,w,c
  5404  0029A0  0012               	return	
  5405  0029A2                     __end_of_isupper:
  5406                           	opt stack 0
  5407                           tosu	equ	0xFFF
  5408                           tosh	equ	0xFFE
  5409                           tosl	equ	0xFFD
  5410                           pclath	equ	0xFFA
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           postinc0	equ	0xFEE
  5418                           wreg	equ	0xFE8
  5419                           indf1	equ	0xFE7
  5420                           postdec1	equ	0xFE5
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function ___lmul *****************
  5431 ;; Defined at:
  5432 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  multiplier      4   23[COMRAM] unsigned long 
  5435 ;;  multiplicand    4   27[COMRAM] unsigned long 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  product         4   31[COMRAM] unsigned long 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  4   23[COMRAM] unsigned long 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5447 ;;      Params:         8       0       0       0       0       0       0
  5448 ;;      Locals:         4       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0
  5450 ;;      Totals:        12       0       0       0       0       0       0
  5451 ;;Total ram usage:       12 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    3
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_strtol
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text15
  5462  00226A                     __ptext15:
  5463                           	opt stack 0
  5464  00226A                     ___lmul:
  5465                           	opt stack 22
  5466                           
  5467                           ;incstack = 0
  5468  00226A  0E00               	movlw	0
  5469  00226C  6E20               	movwf	___lmul@product,c
  5470  00226E  0E00               	movlw	0
  5471  002270  6E21               	movwf	___lmul@product+1,c
  5472  002272  0E00               	movlw	0
  5473  002274  6E22               	movwf	___lmul@product+2,c
  5474  002276  0E00               	movlw	0
  5475  002278  6E23               	movwf	___lmul@product+3,c
  5476  00227A  A018               	btfss	___lmul@multiplier,0,c
  5477  00227C  D008               	goto	l1333
  5478  00227E  501C               	movf	___lmul@multiplicand,w,c
  5479  002280  2620               	addwf	___lmul@product,f,c
  5480  002282  501D               	movf	___lmul@multiplicand+1,w,c
  5481  002284  2221               	addwfc	___lmul@product+1,f,c
  5482  002286  501E               	movf	___lmul@multiplicand+2,w,c
  5483  002288  2222               	addwfc	___lmul@product+2,f,c
  5484  00228A  501F               	movf	___lmul@multiplicand+3,w,c
  5485  00228C  2223               	addwfc	___lmul@product+3,f,c
  5486  00228E                     l1333:
  5487  00228E  90D8               	bcf	status,0,c
  5488  002290  361C               	rlcf	___lmul@multiplicand,f,c
  5489  002292  361D               	rlcf	___lmul@multiplicand+1,f,c
  5490  002294  361E               	rlcf	___lmul@multiplicand+2,f,c
  5491  002296  361F               	rlcf	___lmul@multiplicand+3,f,c
  5492  002298  90D8               	bcf	status,0,c
  5493  00229A  321B               	rrcf	___lmul@multiplier+3,f,c
  5494  00229C  321A               	rrcf	___lmul@multiplier+2,f,c
  5495  00229E  3219               	rrcf	___lmul@multiplier+1,f,c
  5496  0022A0  3218               	rrcf	___lmul@multiplier,f,c
  5497  0022A2  5018               	movf	___lmul@multiplier,w,c
  5498  0022A4  1019               	iorwf	___lmul@multiplier+1,w,c
  5499  0022A6  101A               	iorwf	___lmul@multiplier+2,w,c
  5500  0022A8  101B               	iorwf	___lmul@multiplier+3,w,c
  5501  0022AA  A4D8               	btfss	status,2,c
  5502  0022AC  D7E6               	goto	l1332
  5503  0022AE  C020  F018         	movff	___lmul@product,?___lmul
  5504  0022B2  C021  F019         	movff	___lmul@product+1,?___lmul+1
  5505  0022B6  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  5506  0022BA  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  5507  0022BE  0012               	return		;funcret
  5508  0022C0                     __end_of___lmul:
  5509                           	opt stack 0
  5510                           tosu	equ	0xFFF
  5511                           tosh	equ	0xFFE
  5512                           tosl	equ	0xFFD
  5513                           pclath	equ	0xFFA
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           indf1	equ	0xFE7
  5523                           postdec1	equ	0xFE5
  5524                           fsr1h	equ	0xFE2
  5525                           fsr1l	equ	0xFE1
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           postdec2	equ	0xFDD
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _ZeroArray *****************
  5534 ;; Defined at:
  5535 ;;		line 24 in file "SystemCommon.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  array           2   31[COMRAM] PTR unsigned char 
  5538 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5539 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5540 ;;  size            2   33[COMRAM] int 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;		None
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5552 ;;      Params:         4       0       0       0       0       0       0
  5553 ;;      Locals:         0       0       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0
  5555 ;;      Totals:         4       0       0       0       0       0       0
  5556 ;;Total ram usage:        4 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		_memset
  5561 ;; This function is called by:
  5562 ;;		_InitRxMessageParams
  5563 ;;		_GetIntFromUartData
  5564 ;;		_SendAckMessage
  5565 ;;		_FlashReadUart
  5566 ;;		_FlashEreaseMem
  5567 ;;		_FlashReadCondition
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text16
  5572  0029A2                     __ptext16:
  5573                           	opt stack 0
  5574  0029A2                     _ZeroArray:
  5575                           	opt stack 24
  5576                           
  5577                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  5578                           
  5579                           ;incstack = 0
  5580  0029A2  C020  F018         	movff	ZeroArray@array,memset@p1
  5581  0029A6  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  5582  0029AA  0E00               	movlw	0
  5583  0029AC  6E1B               	movwf	memset@c+1,c
  5584  0029AE  0E00               	movlw	0
  5585  0029B0  6E1A               	movwf	memset@c,c
  5586  0029B2  C022  F01C         	movff	ZeroArray@size,memset@n
  5587  0029B6  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  5588  0029BA  EC2D  F014         	call	_memset	;wreg free
  5589  0029BE  0012               	return		;funcret
  5590  0029C0                     __end_of_ZeroArray:
  5591                           	opt stack 0
  5592                           tosu	equ	0xFFF
  5593                           tosh	equ	0xFFE
  5594                           tosl	equ	0xFFD
  5595                           pclath	equ	0xFFA
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           indf1	equ	0xFE7
  5605                           postdec1	equ	0xFE5
  5606                           fsr1h	equ	0xFE2
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _memset *****************
  5616 ;; Defined at:
  5617 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  p1              2   23[COMRAM] PTR void 
  5620 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5621 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5622 ;;  c               2   25[COMRAM] int 
  5623 ;;  n               2   27[COMRAM] unsigned int 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  p               2   29[COMRAM] PTR unsigned char 
  5626 ;;		 -> GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(7), FlashReadUart@TxMsg(67), sampleArray(64), 
  5627 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  2   23[COMRAM] PTR void 
  5630 ;; Registers used:
  5631 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5637 ;;      Params:         6       0       0       0       0       0       0
  5638 ;;      Locals:         2       0       0       0       0       0       0
  5639 ;;      Temps:          0       0       0       0       0       0       0
  5640 ;;      Totals:         8       0       0       0       0       0       0
  5641 ;;Total ram usage:        8 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    3
  5644 ;; This function calls:
  5645 ;;		Nothing
  5646 ;; This function is called by:
  5647 ;;		_ZeroArray
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text17
  5652  00285A                     __ptext17:
  5653                           	opt stack 0
  5654  00285A                     _memset:
  5655                           	opt stack 24
  5656                           
  5657                           ;incstack = 0
  5658  00285A  C018  F01E         	movff	memset@p1,memset@p
  5659  00285E  C019  F01F         	movff	memset@p1+1,memset@p+1
  5660  002862  D008               	goto	l1752
  5661  002864                     l6249:
  5662  002864  C01E  FFD9         	movff	memset@p,fsr2l
  5663  002868  C01F  FFDA         	movff	memset@p+1,fsr2h
  5664  00286C  C01A  FFDF         	movff	memset@c,indf2
  5665  002870  4A1E               	infsnz	memset@p,f,c
  5666  002872  2A1F               	incf	memset@p+1,f,c
  5667  002874                     l1752:
  5668  002874  061C               	decf	memset@n,f,c
  5669  002876  A0D8               	btfss	status,0,c
  5670  002878  061D               	decf	memset@n+1,f,c
  5671  00287A  281C               	incf	memset@n,w,c
  5672  00287C  E1F3               	bnz	l6249
  5673  00287E  281D               	incf	memset@n+1,w,c
  5674  002880  B4D8               	btfsc	status,2,c
  5675  002882  0012               	return	
  5676  002884  D7EF               	goto	l1753
  5677  002886                     __end_of_memset:
  5678                           	opt stack 0
  5679                           tosu	equ	0xFFF
  5680                           tosh	equ	0xFFE
  5681                           tosl	equ	0xFFD
  5682                           pclath	equ	0xFFA
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           indf1	equ	0xFE7
  5692                           postdec1	equ	0xFE5
  5693                           fsr1h	equ	0xFE2
  5694                           fsr1l	equ	0xFE1
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           postdec2	equ	0xFDD
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _testLeds *****************
  5703 ;; Defined at:
  5704 ;;		line 43 in file "LedsApp.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  idx             2   24[COMRAM] int 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5718 ;;      Params:         0       0       0       0       0       0       0
  5719 ;;      Locals:         2       0       0       0       0       0       0
  5720 ;;      Temps:          1       0       0       0       0       0       0
  5721 ;;      Totals:         3       0       0       0       0       0       0
  5722 ;;Total ram usage:        3 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    3
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_GroupCommon
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text18
  5733  002044                     __ptext18:
  5734                           	opt stack 0
  5735  002044                     _testLeds:
  5736                           	opt stack 25
  5737                           
  5738                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  5739                           
  5740                           ;incstack = 0
  5741  002044  0E00               	movlw	0
  5742  002046  6E1A               	movwf	testLeds@idx+1,c
  5743  002048  0E00               	movlw	0
  5744  00204A  6E19               	movwf	testLeds@idx,c
  5745  00204C                     l6987:
  5746  00204C  BE1A               	btfsc	testLeds@idx+1,7,c
  5747  00204E  D006               	goto	l44
  5748  002050  501A               	movf	testLeds@idx+1,w,c
  5749  002052  E127               	bnz	l46
  5750  002054  0E0A               	movlw	10
  5751  002056  5C19               	subwf	testLeds@idx,w,c
  5752  002058  B0D8               	btfsc	status,0,c
  5753  00205A  0012               	return	
  5754  00205C                     l44:
  5755                           
  5756                           ;LedsApp.c: 47: {
  5757                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  5758  00205C  808B               	bsf	3979,0,c	;volatile
  5759                           
  5760                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  5761  00205E  0E82               	movlw	130
  5762  002060  6E18               	movwf	??_testLeds& (0+255),c
  5763  002062  0EDE               	movlw	222
  5764  002064                     u8217:
  5765  002064  2EE8               	decfsz	wreg,f,c
  5766  002066  D7FE               	bra	u8217
  5767  002068  2E18               	decfsz	??_testLeds& (0+255),f,c
  5768  00206A  D7FC               	bra	u8217
  5769                           
  5770                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  5771  00206C  888A               	bsf	3978,4,c	;volatile
  5772                           
  5773                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  5774  00206E  0E82               	movlw	130
  5775  002070  6E18               	movwf	??_testLeds& (0+255),c
  5776  002072  0EDE               	movlw	222
  5777  002074                     u8227:
  5778  002074  2EE8               	decfsz	wreg,f,c
  5779  002076  D7FE               	bra	u8227
  5780  002078  2E18               	decfsz	??_testLeds& (0+255),f,c
  5781  00207A  D7FC               	bra	u8227
  5782                           
  5783                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  5784  00207C  908B               	bcf	3979,0,c	;volatile
  5785                           
  5786                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  5787  00207E  0E82               	movlw	130
  5788  002080  6E18               	movwf	??_testLeds& (0+255),c
  5789  002082  0EDE               	movlw	222
  5790  002084                     u8237:
  5791  002084  2EE8               	decfsz	wreg,f,c
  5792  002086  D7FE               	bra	u8237
  5793  002088  2E18               	decfsz	??_testLeds& (0+255),f,c
  5794  00208A  D7FC               	bra	u8237
  5795                           
  5796                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  5797  00208C  988A               	bcf	3978,4,c	;volatile
  5798                           
  5799                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  5800  00208E  0E82               	movlw	130
  5801  002090  6E18               	movwf	??_testLeds& (0+255),c
  5802  002092  0EDE               	movlw	222
  5803  002094                     u8247:
  5804  002094  2EE8               	decfsz	wreg,f,c
  5805  002096  D7FE               	bra	u8247
  5806  002098  2E18               	decfsz	??_testLeds& (0+255),f,c
  5807  00209A  D7FC               	bra	u8247
  5808  00209C  4A19               	infsnz	testLeds@idx,f,c
  5809  00209E  2A1A               	incf	testLeds@idx+1,f,c
  5810  0020A0  D7D5               	goto	l6987
  5811  0020A2                     l46:
  5812  0020A2  0012               	return		;funcret
  5813  0020A4                     __end_of_testLeds:
  5814                           	opt stack 0
  5815                           tosu	equ	0xFFF
  5816                           tosh	equ	0xFFE
  5817                           tosl	equ	0xFFD
  5818                           pclath	equ	0xFFA
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           indf1	equ	0xFE7
  5828                           postdec1	equ	0xFE5
  5829                           fsr1h	equ	0xFE2
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           postinc2	equ	0xFDE
  5833                           postdec2	equ	0xFDD
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function _PrintHelpScreen *****************
  5839 ;; Defined at:
  5840 ;;		line 89 in file "SystemStatus.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  dest           50    9[BANK0 ] unsigned char [50]
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5854 ;;      Params:         0       0       0       0       0       0       0
  5855 ;;      Locals:         0      50       0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0
  5857 ;;      Totals:         0      50       0       0       0       0       0
  5858 ;;Total ram usage:       50 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    5
  5861 ;; This function calls:
  5862 ;;		_UART_Write_Text
  5863 ;;		_sprintf
  5864 ;; This function is called by:
  5865 ;;		_GroupCommon
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text19
  5870  0003CC                     __ptext19:
  5871                           	opt stack 0
  5872  0003CC                     _PrintHelpScreen:
  5873                           	opt stack 23
  5874                           
  5875                           ;SystemStatus.c: 91: char dest[50];
  5876                           ;SystemStatus.c: 94: sprintf(dest, "<TX system commands>\n\r");
  5877                           
  5878                           ;incstack = 0
  5879  0003CC  0E69               	movlw	low PrintHelpScreen@dest
  5880  0003CE  6E24               	movwf	sprintf@sp,c
  5881  0003D0  0E00               	movlw	high PrintHelpScreen@dest
  5882  0003D2  6E25               	movwf	sprintf@sp+1,c
  5883  0003D4  0E55               	movlw	low STR_20
  5884  0003D6  6E26               	movwf	sprintf@f,c
  5885  0003D8  0E7F               	movlw	high STR_20
  5886  0003DA  6E27               	movwf	sprintf@f+1,c
  5887  0003DC  ECFB  F004         	call	_sprintf	;wreg free
  5888                           
  5889                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  5890  0003E0  0E69               	movlw	low PrintHelpScreen@dest
  5891  0003E2  6E19               	movwf	UART_Write_Text@text,c
  5892  0003E4  0E00               	movlw	high PrintHelpScreen@dest
  5893  0003E6  6E1A               	movwf	UART_Write_Text@text+1,c
  5894  0003E8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5895                           
  5896                           ;SystemStatus.c: 97: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  5897  0003EC  0E69               	movlw	low PrintHelpScreen@dest
  5898  0003EE  6E24               	movwf	sprintf@sp,c
  5899  0003F0  0E00               	movlw	high PrintHelpScreen@dest
  5900  0003F2  6E25               	movwf	sprintf@sp+1,c
  5901  0003F4  0EFD               	movlw	low STR_21
  5902  0003F6  6E26               	movwf	sprintf@f,c
  5903  0003F8  0E7C               	movlw	high STR_21
  5904  0003FA  6E27               	movwf	sprintf@f+1,c
  5905  0003FC  ECFB  F004         	call	_sprintf	;wreg free
  5906                           
  5907                           ;SystemStatus.c: 98: UART_Write_Text(dest);
  5908  000400  0E69               	movlw	low PrintHelpScreen@dest
  5909  000402  6E19               	movwf	UART_Write_Text@text,c
  5910  000404  0E00               	movlw	high PrintHelpScreen@dest
  5911  000406  6E1A               	movwf	UART_Write_Text@text+1,c
  5912  000408  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5913                           
  5914                           ;SystemStatus.c: 99: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  5915  00040C  0E69               	movlw	low PrintHelpScreen@dest
  5916  00040E  6E24               	movwf	sprintf@sp,c
  5917  000410  0E00               	movlw	high PrintHelpScreen@dest
  5918  000412  6E25               	movwf	sprintf@sp+1,c
  5919  000414  0E7D               	movlw	low STR_22
  5920  000416  6E26               	movwf	sprintf@f,c
  5921  000418  0E7D               	movlw	high STR_22
  5922  00041A  6E27               	movwf	sprintf@f+1,c
  5923  00041C  ECFB  F004         	call	_sprintf	;wreg free
  5924                           
  5925                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  5926  000420  0E69               	movlw	low PrintHelpScreen@dest
  5927  000422  6E19               	movwf	UART_Write_Text@text,c
  5928  000424  0E00               	movlw	high PrintHelpScreen@dest
  5929  000426  6E1A               	movwf	UART_Write_Text@text+1,c
  5930  000428  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5931                           
  5932                           ;SystemStatus.c: 101: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  5933  00042C  0E69               	movlw	low PrintHelpScreen@dest
  5934  00042E  6E24               	movwf	sprintf@sp,c
  5935  000430  0E00               	movlw	high PrintHelpScreen@dest
  5936  000432  6E25               	movwf	sprintf@sp+1,c
  5937  000434  0E5A               	movlw	low STR_23
  5938  000436  6E26               	movwf	sprintf@f,c
  5939  000438  0E7E               	movlw	high STR_23
  5940  00043A  6E27               	movwf	sprintf@f+1,c
  5941  00043C  ECFB  F004         	call	_sprintf	;wreg free
  5942                           
  5943                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  5944  000440  0E69               	movlw	low PrintHelpScreen@dest
  5945  000442  6E19               	movwf	UART_Write_Text@text,c
  5946  000444  0E00               	movlw	high PrintHelpScreen@dest
  5947  000446  6E1A               	movwf	UART_Write_Text@text+1,c
  5948  000448  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5949                           
  5950                           ;SystemStatus.c: 103: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  5951  00044C  0E69               	movlw	low PrintHelpScreen@dest
  5952  00044E  6E24               	movwf	sprintf@sp,c
  5953  000450  0E00               	movlw	high PrintHelpScreen@dest
  5954  000452  6E25               	movwf	sprintf@sp+1,c
  5955  000454  0E68               	movlw	low STR_24
  5956  000456  6E26               	movwf	sprintf@f,c
  5957  000458  0E7C               	movlw	high STR_24
  5958  00045A  6E27               	movwf	sprintf@f+1,c
  5959  00045C  ECFB  F004         	call	_sprintf	;wreg free
  5960                           
  5961                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  5962  000460  0E69               	movlw	low PrintHelpScreen@dest
  5963  000462  6E19               	movwf	UART_Write_Text@text,c
  5964  000464  0E00               	movlw	high PrintHelpScreen@dest
  5965  000466  6E1A               	movwf	UART_Write_Text@text+1,c
  5966  000468  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5967                           
  5968                           ;SystemStatus.c: 105: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  5969  00046C  0E69               	movlw	low PrintHelpScreen@dest
  5970  00046E  6E24               	movwf	sprintf@sp,c
  5971  000470  0E00               	movlw	high PrintHelpScreen@dest
  5972  000472  6E25               	movwf	sprintf@sp+1,c
  5973  000474  0E19               	movlw	low STR_25
  5974  000476  6E26               	movwf	sprintf@f,c
  5975  000478  0E7C               	movlw	high STR_25
  5976  00047A  6E27               	movwf	sprintf@f+1,c
  5977  00047C  ECFB  F004         	call	_sprintf	;wreg free
  5978                           
  5979                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  5980  000480  0E69               	movlw	low PrintHelpScreen@dest
  5981  000482  6E19               	movwf	UART_Write_Text@text,c
  5982  000484  0E00               	movlw	high PrintHelpScreen@dest
  5983  000486  6E1A               	movwf	UART_Write_Text@text+1,c
  5984  000488  EC81  F00F         	call	_UART_Write_Text	;wreg free
  5985                           
  5986                           ;SystemStatus.c: 109: sprintf(dest, "\n\r<RX system commands>\n\r");
  5987  00048C  0E69               	movlw	low PrintHelpScreen@dest
  5988  00048E  6E24               	movwf	sprintf@sp,c
  5989  000490  0E00               	movlw	high PrintHelpScreen@dest
  5990  000492  6E25               	movwf	sprintf@sp+1,c
  5991  000494  0E3C               	movlw	low STR_26
  5992  000496  6E26               	movwf	sprintf@f,c
  5993  000498  0E7F               	movlw	high STR_26
  5994  00049A  6E27               	movwf	sprintf@f+1,c
  5995  00049C  ECFB  F004         	call	_sprintf	;wreg free
  5996                           
  5997                           ;SystemStatus.c: 110: UART_Write_Text(dest);
  5998  0004A0  0E69               	movlw	low PrintHelpScreen@dest
  5999  0004A2  6E19               	movwf	UART_Write_Text@text,c
  6000  0004A4  0E00               	movlw	high PrintHelpScreen@dest
  6001  0004A6  6E1A               	movwf	UART_Write_Text@text+1,c
  6002  0004A8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6003                           
  6004                           ;SystemStatus.c: 111: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  6005  0004AC  0E69               	movlw	low PrintHelpScreen@dest
  6006  0004AE  6E24               	movwf	sprintf@sp,c
  6007  0004B0  0E00               	movlw	high PrintHelpScreen@dest
  6008  0004B2  6E25               	movwf	sprintf@sp+1,c
  6009  0004B4  0EB3               	movlw	low STR_27
  6010  0004B6  6E26               	movwf	sprintf@f,c
  6011  0004B8  0E7C               	movlw	high STR_27
  6012  0004BA  6E27               	movwf	sprintf@f+1,c
  6013  0004BC  ECFB  F004         	call	_sprintf	;wreg free
  6014                           
  6015                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  6016  0004C0  0E69               	movlw	low PrintHelpScreen@dest
  6017  0004C2  6E19               	movwf	UART_Write_Text@text,c
  6018  0004C4  0E00               	movlw	high PrintHelpScreen@dest
  6019  0004C6  6E1A               	movwf	UART_Write_Text@text+1,c
  6020  0004C8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6021                           
  6022                           ;SystemStatus.c: 113: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  6023  0004CC  0E69               	movlw	low PrintHelpScreen@dest
  6024  0004CE  6E24               	movwf	sprintf@sp,c
  6025  0004D0  0E00               	movlw	high PrintHelpScreen@dest
  6026  0004D2  6E25               	movwf	sprintf@sp+1,c
  6027  0004D4  0E88               	movlw	low STR_28
  6028  0004D6  6E26               	movwf	sprintf@f,c
  6029  0004D8  0E7E               	movlw	high STR_28
  6030  0004DA  6E27               	movwf	sprintf@f+1,c
  6031  0004DC  ECFB  F004         	call	_sprintf	;wreg free
  6032                           
  6033                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  6034  0004E0  0E69               	movlw	low PrintHelpScreen@dest
  6035  0004E2  6E19               	movwf	UART_Write_Text@text,c
  6036  0004E4  0E00               	movlw	high PrintHelpScreen@dest
  6037  0004E6  6E1A               	movwf	UART_Write_Text@text+1,c
  6038  0004E8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6039                           
  6040                           ;SystemStatus.c: 115: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  6041  0004EC  0E69               	movlw	low PrintHelpScreen@dest
  6042  0004EE  6E24               	movwf	sprintf@sp,c
  6043  0004F0  0E00               	movlw	high PrintHelpScreen@dest
  6044  0004F2  6E25               	movwf	sprintf@sp+1,c
  6045  0004F4  0E3F               	movlw	low STR_29
  6046  0004F6  6E26               	movwf	sprintf@f,c
  6047  0004F8  0E7D               	movlw	high STR_29
  6048  0004FA  6E27               	movwf	sprintf@f+1,c
  6049  0004FC  ECFB  F004         	call	_sprintf	;wreg free
  6050                           
  6051                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  6052  000500  0E69               	movlw	low PrintHelpScreen@dest
  6053  000502  6E19               	movwf	UART_Write_Text@text,c
  6054  000504  0E00               	movlw	high PrintHelpScreen@dest
  6055  000506  6E1A               	movwf	UART_Write_Text@text+1,c
  6056  000508  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6057                           
  6058                           ;SystemStatus.c: 117: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  6059  00050C  0E69               	movlw	low PrintHelpScreen@dest
  6060  00050E  6E24               	movwf	sprintf@sp,c
  6061  000510  0E00               	movlw	high PrintHelpScreen@dest
  6062  000512  6E25               	movwf	sprintf@sp+1,c
  6063  000514  0EBA               	movlw	low STR_30
  6064  000516  6E26               	movwf	sprintf@f,c
  6065  000518  0E7D               	movlw	high STR_30
  6066  00051A  6E27               	movwf	sprintf@f+1,c
  6067  00051C  ECFB  F004         	call	_sprintf	;wreg free
  6068                           
  6069                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  6070  000520  0E69               	movlw	low PrintHelpScreen@dest
  6071  000522  6E19               	movwf	UART_Write_Text@text,c
  6072  000524  0E00               	movlw	high PrintHelpScreen@dest
  6073  000526  6E1A               	movwf	UART_Write_Text@text+1,c
  6074  000528  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6075                           
  6076                           ;SystemStatus.c: 119: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  6077  00052C  0E69               	movlw	low PrintHelpScreen@dest
  6078  00052E  6E24               	movwf	sprintf@sp,c
  6079  000530  0E00               	movlw	high PrintHelpScreen@dest
  6080  000532  6E25               	movwf	sprintf@sp+1,c
  6081  000534  0E6D               	movlw	low STR_31
  6082  000536  6E26               	movwf	sprintf@f,c
  6083  000538  0E7B               	movlw	high STR_31
  6084  00053A  6E27               	movwf	sprintf@f+1,c
  6085  00053C  ECFB  F004         	call	_sprintf	;wreg free
  6086                           
  6087                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  6088  000540  0E69               	movlw	low PrintHelpScreen@dest
  6089  000542  6E19               	movwf	UART_Write_Text@text,c
  6090  000544  0E00               	movlw	high PrintHelpScreen@dest
  6091  000546  6E1A               	movwf	UART_Write_Text@text+1,c
  6092  000548  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6093                           
  6094                           ;SystemStatus.c: 121: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  6095  00054C  0E69               	movlw	low PrintHelpScreen@dest
  6096  00054E  6E24               	movwf	sprintf@sp,c
  6097  000550  0E00               	movlw	high PrintHelpScreen@dest
  6098  000552  6E25               	movwf	sprintf@sp+1,c
  6099  000554  0E08               	movlw	low STR_32
  6100  000556  6E26               	movwf	sprintf@f,c
  6101  000558  0E7B               	movlw	high STR_32
  6102  00055A  6E27               	movwf	sprintf@f+1,c
  6103  00055C  ECFB  F004         	call	_sprintf	;wreg free
  6104                           
  6105                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  6106  000560  0E69               	movlw	low PrintHelpScreen@dest
  6107  000562  6E19               	movwf	UART_Write_Text@text,c
  6108  000564  0E00               	movlw	high PrintHelpScreen@dest
  6109  000566  6E1A               	movwf	UART_Write_Text@text+1,c
  6110  000568  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6111                           
  6112                           ;SystemStatus.c: 125: sprintf(dest, "\n\r<Common system commands>\n\r");
  6113  00056C  0E69               	movlw	low PrintHelpScreen@dest
  6114  00056E  6E24               	movwf	sprintf@sp,c
  6115  000570  0E00               	movlw	high PrintHelpScreen@dest
  6116  000572  6E25               	movwf	sprintf@sp+1,c
  6117  000574  0E1F               	movlw	low STR_33
  6118  000576  6E26               	movwf	sprintf@f,c
  6119  000578  0E7F               	movlw	high STR_33
  6120  00057A  6E27               	movwf	sprintf@f+1,c
  6121  00057C  ECFB  F004         	call	_sprintf	;wreg free
  6122                           
  6123                           ;SystemStatus.c: 126: UART_Write_Text(dest);
  6124  000580  0E69               	movlw	low PrintHelpScreen@dest
  6125  000582  6E19               	movwf	UART_Write_Text@text,c
  6126  000584  0E00               	movlw	high PrintHelpScreen@dest
  6127  000586  6E1A               	movwf	UART_Write_Text@text+1,c
  6128  000588  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6129                           
  6130                           ;SystemStatus.c: 127: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  6131  00058C  0E69               	movlw	low PrintHelpScreen@dest
  6132  00058E  6E24               	movwf	sprintf@sp,c
  6133  000590  0E00               	movlw	high PrintHelpScreen@dest
  6134  000592  6E25               	movwf	sprintf@sp+1,c
  6135  000594  0E2C               	movlw	low STR_34
  6136  000596  6E26               	movwf	sprintf@f,c
  6137  000598  0E7E               	movlw	high STR_34
  6138  00059A  6E27               	movwf	sprintf@f+1,c
  6139  00059C  ECFB  F004         	call	_sprintf	;wreg free
  6140                           
  6141                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  6142  0005A0  0E69               	movlw	low PrintHelpScreen@dest
  6143  0005A2  6E19               	movwf	UART_Write_Text@text,c
  6144  0005A4  0E00               	movlw	high PrintHelpScreen@dest
  6145  0005A6  6E1A               	movwf	UART_Write_Text@text+1,c
  6146  0005A8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6147                           
  6148                           ;SystemStatus.c: 129: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  6149  0005AC  0E69               	movlw	low PrintHelpScreen@dest
  6150  0005AE  6E24               	movwf	sprintf@sp,c
  6151  0005B0  0E00               	movlw	high PrintHelpScreen@dest
  6152  0005B2  6E25               	movwf	sprintf@sp+1,c
  6153  0005B4  0EF7               	movlw	low STR_35
  6154  0005B6  6E26               	movwf	sprintf@f,c
  6155  0005B8  0E7D               	movlw	high STR_35
  6156  0005BA  6E27               	movwf	sprintf@f+1,c
  6157  0005BC  ECFB  F004         	call	_sprintf	;wreg free
  6158                           
  6159                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  6160  0005C0  0E69               	movlw	low PrintHelpScreen@dest
  6161  0005C2  6E19               	movwf	UART_Write_Text@text,c
  6162  0005C4  0E00               	movlw	high PrintHelpScreen@dest
  6163  0005C6  6E1A               	movwf	UART_Write_Text@text+1,c
  6164  0005C8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6165                           
  6166                           ;SystemStatus.c: 131: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  6167  0005CC  0E69               	movlw	low PrintHelpScreen@dest
  6168  0005CE  6E24               	movwf	sprintf@sp,c
  6169  0005D0  0E00               	movlw	high PrintHelpScreen@dest
  6170  0005D2  6E25               	movwf	sprintf@sp+1,c
  6171  0005D4  0EC3               	movlw	low STR_36
  6172  0005D6  6E26               	movwf	sprintf@f,c
  6173  0005D8  0E7B               	movlw	high STR_36
  6174  0005DA  6E27               	movwf	sprintf@f+1,c
  6175  0005DC  ECFB  F004         	call	_sprintf	;wreg free
  6176                           
  6177                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  6178  0005E0  0E69               	movlw	low PrintHelpScreen@dest
  6179  0005E2  6E19               	movwf	UART_Write_Text@text,c
  6180  0005E4  0E00               	movlw	high PrintHelpScreen@dest
  6181  0005E6  6E1A               	movwf	UART_Write_Text@text+1,c
  6182  0005E8  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6183                           
  6184                           ;SystemStatus.c: 133: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  6185  0005EC  0E69               	movlw	low PrintHelpScreen@dest
  6186  0005EE  6E24               	movwf	sprintf@sp,c
  6187  0005F0  0E00               	movlw	high PrintHelpScreen@dest
  6188  0005F2  6E25               	movwf	sprintf@sp+1,c
  6189  0005F4  0EB5               	movlw	low STR_37
  6190  0005F6  6E26               	movwf	sprintf@f,c
  6191  0005F8  0E7E               	movlw	high STR_37
  6192  0005FA  6E27               	movwf	sprintf@f+1,c
  6193  0005FC  ECFB  F004         	call	_sprintf	;wreg free
  6194                           
  6195                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  6196  000600  0E69               	movlw	low PrintHelpScreen@dest
  6197  000602  6E19               	movwf	UART_Write_Text@text,c
  6198  000604  0E00               	movlw	high PrintHelpScreen@dest
  6199  000606  6E1A               	movwf	UART_Write_Text@text+1,c
  6200  000608  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6201                           
  6202                           ;SystemStatus.c: 135: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  6203  00060C  0E69               	movlw	low PrintHelpScreen@dest
  6204  00060E  6E24               	movwf	sprintf@sp,c
  6205  000610  0E00               	movlw	high PrintHelpScreen@dest
  6206  000612  6E25               	movwf	sprintf@sp+1,c
  6207  000614  0EDB               	movlw	low STR_38
  6208  000616  6E26               	movwf	sprintf@f,c
  6209  000618  0E7E               	movlw	high STR_38
  6210  00061A  6E27               	movwf	sprintf@f+1,c
  6211  00061C  ECFB  F004         	call	_sprintf	;wreg free
  6212                           
  6213                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  6214  000620  0E69               	movlw	low PrintHelpScreen@dest
  6215  000622  6E19               	movwf	UART_Write_Text@text,c
  6216  000624  0E00               	movlw	high PrintHelpScreen@dest
  6217  000626  6E1A               	movwf	UART_Write_Text@text+1,c
  6218  000628  EC81  F00F         	call	_UART_Write_Text	;wreg free
  6219  00062C  0012               	return		;funcret
  6220  00062E                     __end_of_PrintHelpScreen:
  6221                           	opt stack 0
  6222                           tosu	equ	0xFFF
  6223                           tosh	equ	0xFFE
  6224                           tosl	equ	0xFFD
  6225                           pclath	equ	0xFFA
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           postinc0	equ	0xFEE
  6233                           wreg	equ	0xFE8
  6234                           indf1	equ	0xFE7
  6235                           postdec1	equ	0xFE5
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _EUSART1_Read *****************
  6246 ;; Defined at:
  6247 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  readValue       2   24[COMRAM] unsigned int 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      unsigned char 
  6254 ;; Registers used:
  6255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6261 ;;      Params:         0       0       0       0       0       0       0
  6262 ;;      Locals:         2       0       0       0       0       0       0
  6263 ;;      Temps:          1       0       0       0       0       0       0
  6264 ;;      Totals:         3       0       0       0       0       0       0
  6265 ;;Total ram usage:        3 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    3
  6268 ;; This function calls:
  6269 ;;		Nothing
  6270 ;; This function is called by:
  6271 ;;		_readUartByte
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           	psect	text20
  6276  0024E0                     __ptext20:
  6277                           	opt stack 0
  6278  0024E0                     _EUSART1_Read:
  6279                           	opt stack 26
  6280                           
  6281                           ;eusart1.c: 112: uint16_t readValue = 0;
  6282                           
  6283                           ;incstack = 0
  6284  0024E0  0E00               	movlw	0
  6285  0024E2  6E1A               	movwf	EUSART1_Read@readValue+1,c
  6286  0024E4  0E00               	movlw	0
  6287  0024E6  6E19               	movwf	EUSART1_Read@readValue,c
  6288                           
  6289                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  6290  0024E8  0100               	movlb	0	; () banked
  6291  0024EA  51C1               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  6292  0024EC  A4D8               	btfss	status,2,c
  6293  0024EE  D002               	goto	l778
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;eusart1.c: 120: {
  6297                           ;eusart1.c: 121: return readValue;
  6298  0024F0  5019               	movf	EUSART1_Read@readValue,w,c
  6299                           
  6300                           ; BSR set to: 0
  6301  0024F2  0012               	return	
  6302  0024F4                     l778:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;eusart1.c: 122: }
  6306                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  6307                           
  6308                           ; BSR set to: 0
  6309  0024F4  5039               	movf	_eusart1RxTail,w,c	;volatile
  6310  0024F6  0D01               	mullw	1
  6311  0024F8  0E46               	movlw	low _eusart1RxBuffer
  6312  0024FA  24F3               	addwf	prodl,w,c
  6313  0024FC  6ED9               	movwf	fsr2l,c
  6314  0024FE  0E01               	movlw	high _eusart1RxBuffer
  6315  002500  20F4               	addwfc	prodh,w,c
  6316  002502  6EDA               	movwf	fsr2h,c
  6317  002504  50DF               	movf	indf2,w,c
  6318  002506  6E18               	movwf	??_EUSART1_Read& (0+255),c
  6319  002508  5018               	movf	??_EUSART1_Read,w,c
  6320  00250A  6E19               	movwf	EUSART1_Read@readValue,c
  6321  00250C  6A1A               	clrf	EUSART1_Read@readValue+1,c
  6322                           
  6323                           ; BSR set to: 0
  6324  00250E  2A39               	incf	_eusart1RxTail,f,c	;volatile
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  6328  002510  0E27               	movlw	39
  6329  002512  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  6330  002514  D002               	goto	l780
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;eusart1.c: 126: {
  6334                           ;eusart1.c: 127: eusart1RxTail = 0;
  6335  002516  0E00               	movlw	0
  6336  002518  6E39               	movwf	_eusart1RxTail,c	;volatile
  6337  00251A                     l780:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;eusart1.c: 128: }
  6341                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  6342                           
  6343                           ; BSR set to: 0
  6344  00251A  9A9D               	bcf	3997,5,c	;volatile
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;eusart1.c: 130: eusart1RxCount--;
  6348  00251C  07C1               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  6352  00251E  8A9D               	bsf	3997,5,c	;volatile
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;eusart1.c: 133: return readValue;
  6356  002520  5019               	movf	EUSART1_Read@readValue,w,c
  6357  002522  0012               	return	
  6358  002524                     __end_of_EUSART1_Read:
  6359                           	opt stack 0
  6360                           tosu	equ	0xFFF
  6361                           tosh	equ	0xFFE
  6362                           tosl	equ	0xFFD
  6363                           pclath	equ	0xFFA
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           postinc0	equ	0xFEE
  6371                           wreg	equ	0xFE8
  6372                           indf1	equ	0xFE7
  6373                           postdec1	equ	0xFE5
  6374                           fsr1h	equ	0xFE2
  6375                           fsr1l	equ	0xFE1
  6376                           indf2	equ	0xFDF
  6377                           postinc2	equ	0xFDE
  6378                           postdec2	equ	0xFDD
  6379                           fsr2h	equ	0xFDA
  6380                           fsr2l	equ	0xFD9
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _keepAliveSignalLed *****************
  6384 ;; Defined at:
  6385 ;;		line 35 in file "LedsApp.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, status,2, status,0
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6399 ;;      Params:         0       0       0       0       0       0       0
  6400 ;;      Locals:         0       0       0       0       0       0       0
  6401 ;;      Temps:          1       0       0       0       0       0       0
  6402 ;;      Totals:         1       0       0       0       0       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    3
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_main
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text21
  6414  0029F6                     __ptext21:
  6415                           	opt stack 0
  6416  0029F6                     _keepAliveSignalLed:
  6417                           	opt stack 27
  6418                           
  6419                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;incstack = 0
  6423  0029F6  B08B               	btfsc	3979,0,c	;volatile
  6424  0029F8  D003               	goto	u5130
  6425  0029FA  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  6426  0029FC  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  6427  0029FE  D001               	goto	u5148
  6428  002A00                     u5130:
  6429  002A00  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  6430  002A02                     u5148:
  6431  002A02  508B               	movf	3979,w,c	;volatile
  6432  002A04  1818               	xorwf	??_keepAliveSignalLed,w,c
  6433  002A06  0BFE               	andlw	-2
  6434  002A08  1818               	xorwf	??_keepAliveSignalLed,w,c
  6435  002A0A  6E8B               	movwf	3979,c	;volatile
  6436  002A0C  0012               	return		;funcret
  6437  002A0E                     __end_of_keepAliveSignalLed:
  6438                           	opt stack 0
  6439                           tosu	equ	0xFFF
  6440                           tosh	equ	0xFFE
  6441                           tosl	equ	0xFFD
  6442                           pclath	equ	0xFFA
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postdec1	equ	0xFE5
  6453                           fsr1h	equ	0xFE2
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _SetMcuSystem *****************
  6463 ;; Defined at:
  6464 ;;		line 11 in file "SystemSettings.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6478 ;;      Params:         0       0       0       0       0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    6
  6485 ;; This function calls:
  6486 ;;		_SYSTEM_Initialize
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text22
  6493  002A80                     __ptext22:
  6494                           	opt stack 0
  6495  002A80                     _SetMcuSystem:
  6496                           	opt stack 24
  6497                           
  6498                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  6499                           
  6500                           ;incstack = 0
  6501  002A80  ECEE  F014         	call	_SYSTEM_Initialize	;wreg free
  6502                           
  6503                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  6504  002A84  8EF2               	bsf	intcon,7,c	;volatile
  6505                           
  6506                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  6507  002A86  8CF2               	bsf	intcon,6,c	;volatile
  6508  002A88  0012               	return		;funcret
  6509  002A8A                     __end_of_SetMcuSystem:
  6510                           	opt stack 0
  6511                           tosu	equ	0xFFF
  6512                           tosh	equ	0xFFE
  6513                           tosl	equ	0xFFD
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           indf1	equ	0xFE7
  6525                           postdec1	equ	0xFE5
  6526                           fsr1h	equ	0xFE2
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _SYSTEM_Initialize *****************
  6536 ;; Defined at:
  6537 ;;		line 112 in file "mcc_generated_files/mcc.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;		None
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;		None
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      void 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6551 ;;      Params:         0       0       0       0       0       0       0
  6552 ;;      Locals:         0       0       0       0       0       0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0
  6554 ;;      Totals:         0       0       0       0       0       0       0
  6555 ;;Total ram usage:        0 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    5
  6558 ;; This function calls:
  6559 ;;		_ADC_Initialize
  6560 ;;		_EUSART1_Initialize
  6561 ;;		_INTERRUPT_Initialize
  6562 ;;		_OSCILLATOR_Initialize
  6563 ;;		_PIN_MANAGER_Initialize
  6564 ;;		_TMR0_Initialize
  6565 ;; This function is called by:
  6566 ;;		_SetMcuSystem
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text23
  6571  0029DC                     __ptext23:
  6572                           	opt stack 0
  6573  0029DC                     _SYSTEM_Initialize:
  6574                           	opt stack 24
  6575                           
  6576                           ;mcc.c: 114: INTERRUPT_Initialize();
  6577                           
  6578                           ;incstack = 0
  6579  0029DC  EC4F  F015         	call	_INTERRUPT_Initialize	;wreg free
  6580                           
  6581                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  6582  0029E0  EC2A  F012         	call	_PIN_MANAGER_Initialize	;wreg free
  6583                           
  6584                           ;mcc.c: 116: OSCILLATOR_Initialize();
  6585  0029E4  EC39  F015         	call	_OSCILLATOR_Initialize	;wreg free
  6586                           
  6587                           ;mcc.c: 117: TMR0_Initialize();
  6588  0029E8  ECE2  F013         	call	_TMR0_Initialize	;wreg free
  6589                           
  6590                           ;mcc.c: 118: ADC_Initialize();
  6591  0029EC  EC07  F015         	call	_ADC_Initialize	;wreg free
  6592                           
  6593                           ;mcc.c: 119: EUSART1_Initialize();
  6594  0029F0  ECC7  F013         	call	_EUSART1_Initialize	;wreg free
  6595  0029F4  0012               	return		;funcret
  6596  0029F6                     __end_of_SYSTEM_Initialize:
  6597                           	opt stack 0
  6598                           tosu	equ	0xFFF
  6599                           tosh	equ	0xFFE
  6600                           tosl	equ	0xFFD
  6601                           pclath	equ	0xFFA
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           postinc0	equ	0xFEE
  6610                           wreg	equ	0xFE8
  6611                           indf1	equ	0xFE7
  6612                           postdec1	equ	0xFE5
  6613                           fsr1h	equ	0xFE2
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _TMR0_Initialize *****************
  6623 ;; Defined at:
  6624 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6638 ;;      Params:         0       0       0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0
  6640 ;;      Temps:          2       0       0       0       0       0       0
  6641 ;;      Totals:         2       0       0       0       0       0       0
  6642 ;;Total ram usage:        2 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    4
  6645 ;; This function calls:
  6646 ;;		_TMR0_SetInterruptHandler
  6647 ;; This function is called by:
  6648 ;;		_SYSTEM_Initialize
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text24
  6653  0027C4                     __ptext24:
  6654                           	opt stack 0
  6655  0027C4                     _TMR0_Initialize:
  6656                           	opt stack 24
  6657                           
  6658                           ;tmr0.c: 71: TMR0H = 0x3C;
  6659                           
  6660                           ;incstack = 0
  6661  0027C4  0E3C               	movlw	60
  6662  0027C6  6ED7               	movwf	4055,c	;volatile
  6663                           
  6664                           ;tmr0.c: 74: TMR0L = 0xAF;
  6665  0027C8  0EAF               	movlw	175
  6666  0027CA  6ED6               	movwf	4054,c	;volatile
  6667                           
  6668                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  6669  0027CC  50D6               	movf	4054,w,c	;volatile
  6670  0027CE  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  6671  0027D2  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  6672  0027D4  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  6673  0027D8  6A1A               	clrf	??_TMR0_Initialize,c
  6674  0027DA  101A               	iorwf	??_TMR0_Initialize,w,c
  6675  0027DC  6E46               	movwf	_timer0ReloadVal,c	;volatile
  6676  0027DE  501B               	movf	??_TMR0_Initialize+1,w,c
  6677  0027E0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  6678                           
  6679                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  6680  0027E2  94F2               	bcf	intcon,2,c	;volatile
  6681                           
  6682                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  6683  0027E4  8AF2               	bsf	intcon,5,c	;volatile
  6684                           
  6685                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6686  0027E6  0E00               	movlw	0
  6687  0027E8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  6688  0027EA  0E00               	movlw	0
  6689  0027EC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  6690  0027EE  EC45  F015         	call	_TMR0_SetInterruptHandler	;wreg free
  6691                           
  6692                           ;tmr0.c: 90: T0CON = 0x90;
  6693  0027F2  0E90               	movlw	144
  6694  0027F4  6ED5               	movwf	4053,c	;volatile
  6695  0027F6  0012               	return		;funcret
  6696  0027F8                     __end_of_TMR0_Initialize:
  6697                           	opt stack 0
  6698                           tosu	equ	0xFFF
  6699                           tosh	equ	0xFFE
  6700                           tosl	equ	0xFFD
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           indf1	equ	0xFE7
  6712                           postdec1	equ	0xFE5
  6713                           fsr1h	equ	0xFE2
  6714                           fsr1l	equ	0xFE1
  6715                           indf2	equ	0xFDF
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           fsr2h	equ	0xFDA
  6719                           fsr2l	equ	0xFD9
  6720                           status	equ	0xFD8
  6721                           
  6722 ;; *************** function _TMR0_SetInterruptHandler *****************
  6723 ;; Defined at:
  6724 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  6727 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg, status,2, status,0
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6739 ;;      Params:         2       0       0       0       0       0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0
  6742 ;;      Totals:         2       0       0       0       0       0       0
  6743 ;;Total ram usage:        2 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    3
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_TMR0_Initialize
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text25
  6754  002A8A                     __ptext25:
  6755                           	opt stack 0
  6756  002A8A                     _TMR0_SetInterruptHandler:
  6757                           	opt stack 24
  6758                           
  6759                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  6760                           
  6761                           ;incstack = 0
  6762  002A8A  C018  F0D7         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  6763  002A8E  C019  F0D8         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  6764  002A92  0012               	return		;funcret
  6765  002A94                     __end_of_TMR0_SetInterruptHandler:
  6766                           	opt stack 0
  6767                           tosu	equ	0xFFF
  6768                           tosh	equ	0xFFE
  6769                           tosl	equ	0xFFD
  6770                           pclath	equ	0xFFA
  6771                           tblptru	equ	0xFF8
  6772                           tblptrh	equ	0xFF7
  6773                           tblptrl	equ	0xFF6
  6774                           tablat	equ	0xFF5
  6775                           prodh	equ	0xFF4
  6776                           prodl	equ	0xFF3
  6777                           intcon	equ	0xFF2
  6778                           postinc0	equ	0xFEE
  6779                           wreg	equ	0xFE8
  6780                           indf1	equ	0xFE7
  6781                           postdec1	equ	0xFE5
  6782                           fsr1h	equ	0xFE2
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _PIN_MANAGER_Initialize *****************
  6792 ;; Defined at:
  6793 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6807 ;;      Params:         0       0       0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0
  6809 ;;      Temps:          0       0       0       0       0       0       0
  6810 ;;      Totals:         0       0       0       0       0       0       0
  6811 ;;Total ram usage:        0 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    3
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_SYSTEM_Initialize
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text26
  6822  002454                     __ptext26:
  6823                           	opt stack 0
  6824  002454                     _PIN_MANAGER_Initialize:
  6825                           	opt stack 25
  6826                           
  6827                           ;pin_manager.c: 57: LATE = 0x00;
  6828                           
  6829                           ;incstack = 0
  6830  002454  0E00               	movlw	0
  6831  002456  6E8D               	movwf	3981,c	;volatile
  6832                           
  6833                           ;pin_manager.c: 58: LATD = 0x00;
  6834  002458  0E00               	movlw	0
  6835  00245A  6E8C               	movwf	3980,c	;volatile
  6836                           
  6837                           ;pin_manager.c: 59: LATA = 0x06;
  6838  00245C  0E06               	movlw	6
  6839  00245E  6E89               	movwf	3977,c	;volatile
  6840                           
  6841                           ;pin_manager.c: 60: LATB = 0x00;
  6842  002460  0E00               	movlw	0
  6843  002462  6E8A               	movwf	3978,c	;volatile
  6844                           
  6845                           ;pin_manager.c: 61: LATC = 0x00;
  6846  002464  0E00               	movlw	0
  6847  002466  6E8B               	movwf	3979,c	;volatile
  6848                           
  6849                           ;pin_manager.c: 66: TRISE = 0x07;
  6850  002468  0E07               	movlw	7
  6851  00246A  6E96               	movwf	3990,c	;volatile
  6852                           
  6853                           ;pin_manager.c: 67: TRISA = 0xE1;
  6854  00246C  0EE1               	movlw	225
  6855  00246E  6E92               	movwf	3986,c	;volatile
  6856                           
  6857                           ;pin_manager.c: 68: TRISB = 0xEF;
  6858  002470  0EEF               	movlw	239
  6859  002472  6E93               	movwf	3987,c	;volatile
  6860                           
  6861                           ;pin_manager.c: 69: TRISC = 0x80;
  6862  002474  0E80               	movlw	128
  6863  002476  6E94               	movwf	3988,c	;volatile
  6864                           
  6865                           ;pin_manager.c: 70: TRISD = 0xF2;
  6866  002478  0EF2               	movlw	242
  6867  00247A  6E95               	movwf	3989,c	;volatile
  6868                           
  6869                           ;pin_manager.c: 75: ANSELC = 0x30;
  6870  00247C  0E30               	movlw	48
  6871  00247E  010F               	movlb	15	; () banked
  6872  002480  6F3A               	movwf	58,b	;volatile
  6873                           
  6874                           ;pin_manager.c: 76: ANSELB = 0x33;
  6875  002482  0E33               	movlw	51
  6876  002484  6F39               	movwf	57,b	;volatile
  6877                           
  6878                           ;pin_manager.c: 77: ANSELD = 0xE4;
  6879  002486  0EE4               	movlw	228
  6880  002488  6F3B               	movwf	59,b	;volatile
  6881                           
  6882                           ;pin_manager.c: 78: ANSELE = 0x07;
  6883  00248A  0E07               	movlw	7
  6884  00248C  6F3C               	movwf	60,b	;volatile
  6885                           
  6886                           ;pin_manager.c: 79: ANSELA = 0x2F;
  6887  00248E  0E2F               	movlw	47
  6888  002490  6F38               	movwf	56,b	;volatile
  6889                           
  6890                           ;pin_manager.c: 84: WPUB = 0xC2;
  6891  002492  0EC2               	movlw	194
  6892  002494  6E61               	movwf	3937,c	;volatile
  6893                           
  6894                           ; BSR set to: 15
  6895                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  6896  002496  8EF1               	bsf	intcon2,7,c	;volatile
  6897                           
  6898                           ; BSR set to: 15
  6899                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  6900  002498  86F2               	bsf	intcon,3,c	;volatile
  6901                           
  6902                           ; BSR set to: 15
  6903  00249A  0012               	return		;funcret
  6904  00249C                     __end_of_PIN_MANAGER_Initialize:
  6905                           	opt stack 0
  6906                           tosu	equ	0xFFF
  6907                           tosh	equ	0xFFE
  6908                           tosl	equ	0xFFD
  6909                           pclath	equ	0xFFA
  6910                           tblptru	equ	0xFF8
  6911                           tblptrh	equ	0xFF7
  6912                           tblptrl	equ	0xFF6
  6913                           tablat	equ	0xFF5
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           intcon	equ	0xFF2
  6917                           intcon2	equ	0xFF1
  6918                           postinc0	equ	0xFEE
  6919                           wreg	equ	0xFE8
  6920                           indf1	equ	0xFE7
  6921                           postdec1	equ	0xFE5
  6922                           fsr1h	equ	0xFE2
  6923                           fsr1l	equ	0xFE1
  6924                           indf2	equ	0xFDF
  6925                           postinc2	equ	0xFDE
  6926                           postdec2	equ	0xFDD
  6927                           fsr2h	equ	0xFDA
  6928                           fsr2l	equ	0xFD9
  6929                           status	equ	0xFD8
  6930                           
  6931 ;; *************** function _OSCILLATOR_Initialize *****************
  6932 ;; Defined at:
  6933 ;;		line 122 in file "mcc_generated_files/mcc.c"
  6934 ;; Parameters:    Size  Location     Type
  6935 ;;		None
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;		None
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      void 
  6940 ;; Registers used:
  6941 ;;		wreg, status,2
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6947 ;;      Params:         0       0       0       0       0       0       0
  6948 ;;      Locals:         0       0       0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0
  6950 ;;      Totals:         0       0       0       0       0       0       0
  6951 ;;Total ram usage:        0 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    3
  6954 ;; This function calls:
  6955 ;;		Nothing
  6956 ;; This function is called by:
  6957 ;;		_SYSTEM_Initialize
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text27
  6962  002A72                     __ptext27:
  6963                           	opt stack 0
  6964  002A72                     _OSCILLATOR_Initialize:
  6965                           	opt stack 25
  6966                           
  6967                           ;mcc.c: 125: OSCCON = 0x60;
  6968                           
  6969                           ; BSR set to: 15
  6970                           ;incstack = 0
  6971  002A72  0E60               	movlw	96
  6972  002A74  6ED3               	movwf	4051,c	;volatile
  6973                           
  6974                           ;mcc.c: 127: OSCCON2 = 0x04;
  6975  002A76  0E04               	movlw	4
  6976  002A78  6ED2               	movwf	4050,c	;volatile
  6977                           
  6978                           ;mcc.c: 129: OSCTUNE = 0x00;
  6979  002A7A  0E00               	movlw	0
  6980  002A7C  6E9B               	movwf	3995,c	;volatile
  6981  002A7E  0012               	return		;funcret
  6982  002A80                     __end_of_OSCILLATOR_Initialize:
  6983                           	opt stack 0
  6984                           tosu	equ	0xFFF
  6985                           tosh	equ	0xFFE
  6986                           tosl	equ	0xFFD
  6987                           pclath	equ	0xFFA
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           intcon2	equ	0xFF1
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           indf1	equ	0xFE7
  6999                           postdec1	equ	0xFE5
  7000                           fsr1h	equ	0xFE2
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _INTERRUPT_Initialize *****************
  7010 ;; Defined at:
  7011 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  1    wreg      void 
  7018 ;; Registers used:
  7019 ;;		None
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7025 ;;      Params:         0       0       0       0       0       0       0
  7026 ;;      Locals:         0       0       0       0       0       0       0
  7027 ;;      Temps:          0       0       0       0       0       0       0
  7028 ;;      Totals:         0       0       0       0       0       0       0
  7029 ;;Total ram usage:        0 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    3
  7032 ;; This function calls:
  7033 ;;		Nothing
  7034 ;; This function is called by:
  7035 ;;		_SYSTEM_Initialize
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text28
  7040  002A9E                     __ptext28:
  7041                           	opt stack 0
  7042  002A9E                     _INTERRUPT_Initialize:
  7043                           	opt stack 25
  7044                           
  7045                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  7046                           
  7047                           ;incstack = 0
  7048  002A9E  9ED0               	bcf	4048,7,c	;volatile
  7049  002AA0  0012               	return		;funcret
  7050  002AA2                     __end_of_INTERRUPT_Initialize:
  7051                           	opt stack 0
  7052                           tosu	equ	0xFFF
  7053                           tosh	equ	0xFFE
  7054                           tosl	equ	0xFFD
  7055                           pclath	equ	0xFFA
  7056                           tblptru	equ	0xFF8
  7057                           tblptrh	equ	0xFF7
  7058                           tblptrl	equ	0xFF6
  7059                           tablat	equ	0xFF5
  7060                           prodh	equ	0xFF4
  7061                           prodl	equ	0xFF3
  7062                           intcon	equ	0xFF2
  7063                           intcon2	equ	0xFF1
  7064                           postinc0	equ	0xFEE
  7065                           wreg	equ	0xFE8
  7066                           indf1	equ	0xFE7
  7067                           postdec1	equ	0xFE5
  7068                           fsr1h	equ	0xFE2
  7069                           fsr1l	equ	0xFE1
  7070                           indf2	equ	0xFDF
  7071                           postinc2	equ	0xFDE
  7072                           postdec2	equ	0xFDD
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077 ;; *************** function _EUSART1_Initialize *****************
  7078 ;; Defined at:
  7079 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7093 ;;      Params:         0       0       0       0       0       0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0
  7096 ;;      Totals:         0       0       0       0       0       0       0
  7097 ;;Total ram usage:        0 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    3
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_SYSTEM_Initialize
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text29
  7108  00278E                     __ptext29:
  7109                           	opt stack 0
  7110  00278E                     _EUSART1_Initialize:
  7111                           	opt stack 25
  7112                           
  7113                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  7114                           
  7115                           ;incstack = 0
  7116  00278E  9A9D               	bcf	3997,5,c	;volatile
  7117                           
  7118                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  7119  002790  989D               	bcf	3997,4,c	;volatile
  7120                           
  7121                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  7122  002792  0E08               	movlw	8
  7123  002794  6EB8               	movwf	4024,c	;volatile
  7124                           
  7125                           ;eusart1.c: 85: RCSTA1 = 0x90;
  7126  002796  0E90               	movlw	144
  7127  002798  6EAB               	movwf	4011,c	;volatile
  7128                           
  7129                           ;eusart1.c: 88: TXSTA1 = 0x24;
  7130  00279A  0E24               	movlw	36
  7131  00279C  6EAC               	movwf	4012,c	;volatile
  7132                           
  7133                           ;eusart1.c: 91: SPBRG1 = 0x10;
  7134  00279E  0E10               	movlw	16
  7135  0027A0  6EAF               	movwf	4015,c	;volatile
  7136                           
  7137                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  7138  0027A2  0E00               	movlw	0
  7139  0027A4  6EB0               	movwf	4016,c	;volatile
  7140                           
  7141                           ;eusart1.c: 98: eusart1TxHead = 0;
  7142  0027A6  0E00               	movlw	0
  7143  0027A8  6E3C               	movwf	_eusart1TxHead,c	;volatile
  7144                           
  7145                           ;eusart1.c: 99: eusart1TxTail = 0;
  7146  0027AA  0E00               	movlw	0
  7147  0027AC  6E3B               	movwf	_eusart1TxTail,c	;volatile
  7148                           
  7149                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7150  0027AE  0E46               	movlw	70
  7151  0027B0  0100               	movlb	0	; () banked
  7152  0027B2  6FD9               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  7153                           
  7154                           ;eusart1.c: 102: eusart1RxHead = 0;
  7155  0027B4  0E00               	movlw	0
  7156  0027B6  6E3A               	movwf	_eusart1RxHead,c	;volatile
  7157                           
  7158                           ;eusart1.c: 103: eusart1RxTail = 0;
  7159  0027B8  0E00               	movlw	0
  7160  0027BA  6E39               	movwf	_eusart1RxTail,c	;volatile
  7161                           
  7162                           ;eusart1.c: 104: eusart1RxCount = 0;
  7163  0027BC  0E00               	movlw	0
  7164  0027BE  6FC1               	movwf	_eusart1RxCount& (0+255),b	;volatile
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  7168  0027C0  8A9D               	bsf	3997,5,c	;volatile
  7169                           
  7170                           ; BSR set to: 0
  7171  0027C2  0012               	return		;funcret
  7172  0027C4                     __end_of_EUSART1_Initialize:
  7173                           	opt stack 0
  7174                           tosu	equ	0xFFF
  7175                           tosh	equ	0xFFE
  7176                           tosl	equ	0xFFD
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           intcon2	equ	0xFF1
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postdec1	equ	0xFE5
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _ADC_Initialize *****************
  7200 ;; Defined at:
  7201 ;;		line 58 in file "mcc_generated_files/adc.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7215 ;;      Params:         0       0       0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0
  7218 ;;      Totals:         0       0       0       0       0       0       0
  7219 ;;Total ram usage:        0 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    3
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_SYSTEM_Initialize
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text30
  7230  002A0E                     __ptext30:
  7231                           	opt stack 0
  7232  002A0E                     _ADC_Initialize:
  7233                           	opt stack 25
  7234                           
  7235                           ;adc.c: 63: ADCON0 = 0x05;
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;incstack = 0
  7239  002A0E  0E05               	movlw	5
  7240  002A10  6EC2               	movwf	4034,c	;volatile
  7241                           
  7242                           ;adc.c: 66: ADCON1 = 0x00;
  7243  002A12  0E00               	movlw	0
  7244  002A14  6EC1               	movwf	4033,c	;volatile
  7245                           
  7246                           ;adc.c: 69: ADCON2 = 0x87;
  7247  002A16  0E87               	movlw	135
  7248  002A18  6EC0               	movwf	4032,c	;volatile
  7249                           
  7250                           ;adc.c: 72: ADRESL = 0x00;
  7251  002A1A  0E00               	movlw	0
  7252  002A1C  6EC3               	movwf	4035,c	;volatile
  7253                           
  7254                           ;adc.c: 75: ADRESH = 0x00;
  7255  002A1E  0E00               	movlw	0
  7256  002A20  6EC4               	movwf	4036,c	;volatile
  7257  002A22  0012               	return		;funcret
  7258  002A24                     __end_of_ADC_Initialize:
  7259                           	opt stack 0
  7260                           tosu	equ	0xFFF
  7261                           tosh	equ	0xFFE
  7262                           tosl	equ	0xFFD
  7263                           pclath	equ	0xFFA
  7264                           tblptru	equ	0xFF8
  7265                           tblptrh	equ	0xFF7
  7266                           tblptrl	equ	0xFF6
  7267                           tablat	equ	0xFF5
  7268                           prodh	equ	0xFF4
  7269                           prodl	equ	0xFF3
  7270                           intcon	equ	0xFF2
  7271                           intcon2	equ	0xFF1
  7272                           postinc0	equ	0xFEE
  7273                           wreg	equ	0xFE8
  7274                           indf1	equ	0xFE7
  7275                           postdec1	equ	0xFE5
  7276                           fsr1h	equ	0xFE2
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _SetMcuRunTime *****************
  7286 ;; Defined at:
  7287 ;;		line 45 in file "SystemStatus.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7301 ;;      Params:         0       0       0       0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0
  7304 ;;      Totals:         0       0       0       0       0       0       0
  7305 ;;Total ram usage:        0 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    4
  7308 ;; This function calls:
  7309 ;;		___llmod
  7310 ;; This function is called by:
  7311 ;;		_main
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text31
  7316  002524                     __ptext31:
  7317                           	opt stack 0
  7318  002524                     _SetMcuRunTime:
  7319                           	opt stack 26
  7320                           
  7321                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks++;
  7322                           
  7323                           ;incstack = 0
  7324  002524  0E01               	movlw	1
  7325  002526  0100               	movlb	0	; () banked
  7326  002528  27AD               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  7327  00252A  0E00               	movlw	0
  7328  00252C  23AE               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  7329  00252E  23AF               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  7330  002530  23B0               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks %= (17280);
  7334  002532  C0AD  F025         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  7335  002536  C0AE  F026         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  7336  00253A  C0AF  F027         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  7337  00253E  C0B0  F028         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  7338  002542  0E80               	movlw	128
  7339  002544  6E29               	movwf	___llmod@divisor,c
  7340  002546  0E43               	movlw	67
  7341  002548  6E2A               	movwf	___llmod@divisor+1,c
  7342  00254A  0E00               	movlw	0
  7343  00254C  6E2B               	movwf	___llmod@divisor+2,c
  7344  00254E  0E00               	movlw	0
  7345  002550  6E2C               	movwf	___llmod@divisor+3,c
  7346  002552  ECEF  F00F         	call	___llmod	;wreg free
  7347  002556  C025  F0AD         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  7348  00255A  C026  F0AE         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  7349  00255E  C027  F0AF         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  7350  002562  C028  F0B0         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  7351  002566  0012               	return		;funcret
  7352  002568                     __end_of_SetMcuRunTime:
  7353                           	opt stack 0
  7354                           tosu	equ	0xFFF
  7355                           tosh	equ	0xFFE
  7356                           tosl	equ	0xFFD
  7357                           pclath	equ	0xFFA
  7358                           tblptru	equ	0xFF8
  7359                           tblptrh	equ	0xFF7
  7360                           tblptrl	equ	0xFF6
  7361                           tablat	equ	0xFF5
  7362                           prodh	equ	0xFF4
  7363                           prodl	equ	0xFF3
  7364                           intcon	equ	0xFF2
  7365                           intcon2	equ	0xFF1
  7366                           postinc0	equ	0xFEE
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           postdec1	equ	0xFE5
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function ___llmod *****************
  7380 ;; Defined at:
  7381 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  dividend        4   36[COMRAM] unsigned long 
  7384 ;;  divisor         4   40[COMRAM] unsigned long 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  counter         1   44[COMRAM] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  4   36[COMRAM] unsigned long 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7396 ;;      Params:         8       0       0       0       0       0       0
  7397 ;;      Locals:         1       0       0       0       0       0       0
  7398 ;;      Temps:          0       0       0       0       0       0       0
  7399 ;;      Totals:         9       0       0       0       0       0       0
  7400 ;;Total ram usage:        9 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    3
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_AdcSingleSample
  7407 ;;		_SetMcuRunTime
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text32
  7412  001FDE                     __ptext32:
  7413                           	opt stack 0
  7414  001FDE                     ___llmod:
  7415                           	opt stack 24
  7416                           
  7417                           ;incstack = 0
  7418  001FDE  5029               	movf	___llmod@divisor,w,c
  7419  001FE0  102A               	iorwf	___llmod@divisor+1,w,c
  7420  001FE2  102B               	iorwf	___llmod@divisor+2,w,c
  7421  001FE4  102C               	iorwf	___llmod@divisor+3,w,c
  7422  001FE6  B4D8               	btfsc	status,2,c
  7423  001FE8  D024               	goto	l1690
  7424  001FEA  0E01               	movlw	1
  7425  001FEC  6E2D               	movwf	___llmod@counter,c
  7426  001FEE  D006               	goto	l1685
  7427  001FF0  90D8               	bcf	status,0,c
  7428  001FF2  3629               	rlcf	___llmod@divisor,f,c
  7429  001FF4  362A               	rlcf	___llmod@divisor+1,f,c
  7430  001FF6  362B               	rlcf	___llmod@divisor+2,f,c
  7431  001FF8  362C               	rlcf	___llmod@divisor+3,f,c
  7432  001FFA  2A2D               	incf	___llmod@counter,f,c
  7433  001FFC                     l1685:
  7434  001FFC  AE2C               	btfss	___llmod@divisor+3,7,c
  7435  001FFE  D7F8               	goto	l1686
  7436  002000                     u7290:
  7437  002000  5029               	movf	___llmod@divisor,w,c
  7438  002002  5C25               	subwf	___llmod@dividend,w,c
  7439  002004  502A               	movf	___llmod@divisor+1,w,c
  7440  002006  5826               	subwfb	___llmod@dividend+1,w,c
  7441  002008  502B               	movf	___llmod@divisor+2,w,c
  7442  00200A  5827               	subwfb	___llmod@dividend+2,w,c
  7443  00200C  502C               	movf	___llmod@divisor+3,w,c
  7444  00200E  5828               	subwfb	___llmod@dividend+3,w,c
  7445  002010  A0D8               	btfss	status,0,c
  7446  002012  D008               	goto	l1689
  7447  002014  5029               	movf	___llmod@divisor,w,c
  7448  002016  5E25               	subwf	___llmod@dividend,f,c
  7449  002018  502A               	movf	___llmod@divisor+1,w,c
  7450  00201A  5A26               	subwfb	___llmod@dividend+1,f,c
  7451  00201C  502B               	movf	___llmod@divisor+2,w,c
  7452  00201E  5A27               	subwfb	___llmod@dividend+2,f,c
  7453  002020  502C               	movf	___llmod@divisor+3,w,c
  7454  002022  5A28               	subwfb	___llmod@dividend+3,f,c
  7455  002024                     l1689:
  7456  002024  90D8               	bcf	status,0,c
  7457  002026  322C               	rrcf	___llmod@divisor+3,f,c
  7458  002028  322B               	rrcf	___llmod@divisor+2,f,c
  7459  00202A  322A               	rrcf	___llmod@divisor+1,f,c
  7460  00202C  3229               	rrcf	___llmod@divisor,f,c
  7461  00202E  2E2D               	decfsz	___llmod@counter,f,c
  7462  002030  D7E7               	goto	u7290
  7463  002032                     l1690:
  7464  002032  C025  F025         	movff	___llmod@dividend,?___llmod
  7465  002036  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  7466  00203A  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  7467  00203E  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  7468  002042  0012               	return		;funcret
  7469  002044                     __end_of___llmod:
  7470                           	opt stack 0
  7471                           tosu	equ	0xFFF
  7472                           tosh	equ	0xFFE
  7473                           tosl	equ	0xFFD
  7474                           pclath	equ	0xFFA
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           intcon2	equ	0xFF1
  7483                           postinc0	equ	0xFEE
  7484                           wreg	equ	0xFE8
  7485                           indf1	equ	0xFE7
  7486                           postdec1	equ	0xFE5
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           indf2	equ	0xFDF
  7490                           postinc2	equ	0xFDE
  7491                           postdec2	equ	0xFDD
  7492                           fsr2h	equ	0xFDA
  7493                           fsr2l	equ	0xFD9
  7494                           status	equ	0xFD8
  7495                           
  7496 ;; *************** function _SendUartSystemInitMessage *****************
  7497 ;; Defined at:
  7498 ;;		line 66 in file "SystemStatus.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;		None
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  dest           50    9[BANK0 ] unsigned char [50]
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7512 ;;      Params:         0       0       0       0       0       0       0
  7513 ;;      Locals:         0      50       0       0       0       0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0
  7515 ;;      Totals:         0      50       0       0       0       0       0
  7516 ;;Total ram usage:       50 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    5
  7519 ;; This function calls:
  7520 ;;		_UART_Write_Text
  7521 ;;		_sprintf
  7522 ;; This function is called by:
  7523 ;;		_main
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text33
  7528  001772                     __ptext33:
  7529                           	opt stack 0
  7530  001772                     _SendUartSystemInitMessage:
  7531                           	opt stack 25
  7532                           
  7533                           ;SystemStatus.c: 68: char dest[50];
  7534                           ;SystemStatus.c: 70: sprintf(dest, "*************************** \n\r");
  7535                           
  7536                           ;incstack = 0
  7537  001772  0E69               	movlw	low SendUartSystemInitMessage@dest
  7538  001774  6E24               	movwf	sprintf@sp,c
  7539  001776  0E00               	movlw	high SendUartSystemInitMessage@dest
  7540  001778  6E25               	movwf	sprintf@sp+1,c
  7541  00177A  0E00               	movlw	low STR_11
  7542  00177C  6E26               	movwf	sprintf@f,c
  7543  00177E  0E7F               	movlw	high STR_11
  7544  001780  6E27               	movwf	sprintf@f+1,c
  7545  001782  ECFB  F004         	call	_sprintf	;wreg free
  7546                           
  7547                           ;SystemStatus.c: 71: UART_Write_Text(dest);
  7548  001786  0E69               	movlw	low SendUartSystemInitMessage@dest
  7549  001788  6E19               	movwf	UART_Write_Text@text,c
  7550  00178A  0E00               	movlw	high SendUartSystemInitMessage@dest
  7551  00178C  6E1A               	movwf	UART_Write_Text@text+1,c
  7552  00178E  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7553                           
  7554                           ;SystemStatus.c: 73: sprintf(dest, "FAST LINK SYSTEM \n\r");
  7555  001792  0E69               	movlw	low SendUartSystemInitMessage@dest
  7556  001794  6E24               	movwf	sprintf@sp,c
  7557  001796  0E00               	movlw	high SendUartSystemInitMessage@dest
  7558  001798  6E25               	movwf	sprintf@sp+1,c
  7559  00179A  0E6C               	movlw	low STR_12
  7560  00179C  6E26               	movwf	sprintf@f,c
  7561  00179E  0E7F               	movlw	high STR_12
  7562  0017A0  6E27               	movwf	sprintf@f+1,c
  7563  0017A2  ECFB  F004         	call	_sprintf	;wreg free
  7564                           
  7565                           ;SystemStatus.c: 74: UART_Write_Text(dest);
  7566  0017A6  0E69               	movlw	low SendUartSystemInitMessage@dest
  7567  0017A8  6E19               	movwf	UART_Write_Text@text,c
  7568  0017AA  0E00               	movlw	high SendUartSystemInitMessage@dest
  7569  0017AC  6E1A               	movwf	UART_Write_Text@text+1,c
  7570  0017AE  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7571                           
  7572                           ;SystemStatus.c: 76: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  7573  0017B2  0E69               	movlw	low SendUartSystemInitMessage@dest
  7574  0017B4  6E24               	movwf	sprintf@sp,c
  7575  0017B6  0E00               	movlw	high SendUartSystemInitMessage@dest
  7576  0017B8  6E25               	movwf	sprintf@sp+1,c
  7577  0017BA  0EA8               	movlw	low STR_13
  7578  0017BC  6E26               	movwf	sprintf@f,c
  7579  0017BE  0E7F               	movlw	high STR_13
  7580  0017C0  6E27               	movwf	sprintf@f+1,c
  7581  0017C2  0EF4               	movlw	low STR_14
  7582  0017C4  6E28               	movwf	?_sprintf+4,c
  7583  0017C6  0E7F               	movlw	high STR_14
  7584  0017C8  6E29               	movwf	?_sprintf+5,c
  7585  0017CA  ECFB  F004         	call	_sprintf	;wreg free
  7586                           
  7587                           ;SystemStatus.c: 77: UART_Write_Text(dest);
  7588  0017CE  0E69               	movlw	low SendUartSystemInitMessage@dest
  7589  0017D0  6E19               	movwf	UART_Write_Text@text,c
  7590  0017D2  0E00               	movlw	high SendUartSystemInitMessage@dest
  7591  0017D4  6E1A               	movwf	UART_Write_Text@text+1,c
  7592  0017D6  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7593                           
  7594                           ;SystemStatus.c: 79: sprintf(dest, "Compile date: %s \n\r", "Mar 25 2018");
  7595  0017DA  0E69               	movlw	low SendUartSystemInitMessage@dest
  7596  0017DC  6E24               	movwf	sprintf@sp,c
  7597  0017DE  0E00               	movlw	high SendUartSystemInitMessage@dest
  7598  0017E0  6E25               	movwf	sprintf@sp+1,c
  7599  0017E2  0E94               	movlw	low STR_15
  7600  0017E4  6E26               	movwf	sprintf@f,c
  7601  0017E6  0E7F               	movlw	high STR_15
  7602  0017E8  6E27               	movwf	sprintf@f+1,c
  7603  0017EA  0EBA               	movlw	low STR_16
  7604  0017EC  6E28               	movwf	?_sprintf+4,c
  7605  0017EE  0E7F               	movlw	high STR_16
  7606  0017F0  6E29               	movwf	?_sprintf+5,c
  7607  0017F2  ECFB  F004         	call	_sprintf	;wreg free
  7608                           
  7609                           ;SystemStatus.c: 80: UART_Write_Text(dest);
  7610  0017F6  0E69               	movlw	low SendUartSystemInitMessage@dest
  7611  0017F8  6E19               	movwf	UART_Write_Text@text,c
  7612  0017FA  0E00               	movlw	high SendUartSystemInitMessage@dest
  7613  0017FC  6E1A               	movwf	UART_Write_Text@text+1,c
  7614  0017FE  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7615                           
  7616                           ;SystemStatus.c: 82: sprintf(dest, "Compile time: %s \n\r", "17:56:02");
  7617  001802  0E69               	movlw	low SendUartSystemInitMessage@dest
  7618  001804  6E24               	movwf	sprintf@sp,c
  7619  001806  0E00               	movlw	high SendUartSystemInitMessage@dest
  7620  001808  6E25               	movwf	sprintf@sp+1,c
  7621  00180A  0E80               	movlw	low STR_17
  7622  00180C  6E26               	movwf	sprintf@f,c
  7623  00180E  0E7F               	movlw	high STR_17
  7624  001810  6E27               	movwf	sprintf@f+1,c
  7625  001812  0EDB               	movlw	low STR_18
  7626  001814  6E28               	movwf	?_sprintf+4,c
  7627  001816  0E7F               	movlw	high STR_18
  7628  001818  6E29               	movwf	?_sprintf+5,c
  7629  00181A  ECFB  F004         	call	_sprintf	;wreg free
  7630                           
  7631                           ;SystemStatus.c: 83: UART_Write_Text(dest);
  7632  00181E  0E69               	movlw	low SendUartSystemInitMessage@dest
  7633  001820  6E19               	movwf	UART_Write_Text@text,c
  7634  001822  0E00               	movlw	high SendUartSystemInitMessage@dest
  7635  001824  6E1A               	movwf	UART_Write_Text@text+1,c
  7636  001826  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7637                           
  7638                           ;SystemStatus.c: 85: sprintf(dest, "*************************** \n\r");
  7639  00182A  0E69               	movlw	low SendUartSystemInitMessage@dest
  7640  00182C  6E24               	movwf	sprintf@sp,c
  7641  00182E  0E00               	movlw	high SendUartSystemInitMessage@dest
  7642  001830  6E25               	movwf	sprintf@sp+1,c
  7643  001832  0E00               	movlw	low STR_11
  7644  001834  6E26               	movwf	sprintf@f,c
  7645  001836  0E7F               	movlw	high STR_11
  7646  001838  6E27               	movwf	sprintf@f+1,c
  7647  00183A  ECFB  F004         	call	_sprintf	;wreg free
  7648                           
  7649                           ;SystemStatus.c: 86: UART_Write_Text(dest);
  7650  00183E  0E69               	movlw	low SendUartSystemInitMessage@dest
  7651  001840  6E19               	movwf	UART_Write_Text@text,c
  7652  001842  0E00               	movlw	high SendUartSystemInitMessage@dest
  7653  001844  6E1A               	movwf	UART_Write_Text@text+1,c
  7654  001846  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7655  00184A  0012               	return		;funcret
  7656  00184C                     __end_of_SendUartSystemInitMessage:
  7657                           	opt stack 0
  7658                           tosu	equ	0xFFF
  7659                           tosh	equ	0xFFE
  7660                           tosl	equ	0xFFD
  7661                           pclath	equ	0xFFA
  7662                           tblptru	equ	0xFF8
  7663                           tblptrh	equ	0xFF7
  7664                           tblptrl	equ	0xFF6
  7665                           tablat	equ	0xFF5
  7666                           prodh	equ	0xFF4
  7667                           prodl	equ	0xFF3
  7668                           intcon	equ	0xFF2
  7669                           intcon2	equ	0xFF1
  7670                           postinc0	equ	0xFEE
  7671                           wreg	equ	0xFE8
  7672                           indf1	equ	0xFE7
  7673                           postdec1	equ	0xFE5
  7674                           fsr1h	equ	0xFE2
  7675                           fsr1l	equ	0xFE1
  7676                           indf2	equ	0xFDF
  7677                           postinc2	equ	0xFDE
  7678                           postdec2	equ	0xFDD
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function _SampleSingleChannel *****************
  7684 ;; Defined at:
  7685 ;;		line 91 in file "AdcApp.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;		None
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  _adcResult      2   53[BANK2 ] unsigned int 
  7690 ;;  dest           50    0[BANK2 ] unsigned char [50]
  7691 ;;  adcRes          2   55[BANK2 ] unsigned int 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      unsigned char 
  7694 ;; Registers used:
  7695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7701 ;;      Params:         0       0       0       0       0       0       0
  7702 ;;      Locals:         0       0       0      57       0       0       0
  7703 ;;      Temps:          0       2       0       0       0       0       0
  7704 ;;      Totals:         0       2       0      57       0       0       0
  7705 ;;Total ram usage:       59 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    8
  7708 ;; This function calls:
  7709 ;;		_ADC_GetConversion
  7710 ;;		_UART_Write_Text
  7711 ;;		___ftdiv
  7712 ;;		___ftmul
  7713 ;;		___fttol
  7714 ;;		___lwtoft
  7715 ;;		_pow
  7716 ;;		_sprintf
  7717 ;; This function is called by:
  7718 ;;		_main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text34
  7723  0012A2                     __ptext34:
  7724                           	opt stack 0
  7725  0012A2                     _SampleSingleChannel:
  7726                           	opt stack 22
  7727                           
  7728                           ;AdcApp.c: 93: char dest[50];
  7729                           ;AdcApp.c: 94: uint16_t adcRes = 0x0;
  7730                           
  7731                           ;incstack = 0
  7732  0012A2  0E00               	movlw	0
  7733  0012A4  0102               	movlb	2	; () banked
  7734  0012A6  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  7735  0012A8  0E00               	movlw	0
  7736  0012AA  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
  7737                           
  7738                           ; BSR set to: 2
  7739                           ;AdcApp.c: 95: if(numSamples--)
  7740  0012AC  0100               	movlb	0	; () banked
  7741  0012AE  07B5               	decf	_numSamples& (0+255),f,b
  7742  0012B0  A0D8               	btfss	status,0,c
  7743  0012B2  07B6               	decf	(_numSamples+1)& (0+255),f,b
  7744  0012B4  29B5               	incf	_numSamples& (0+255),w,b
  7745  0012B6  E103               	bnz	u7690
  7746  0012B8  29B6               	incf	(_numSamples+1)& (0+255),w,b
  7747  0012BA  B4D8               	btfsc	status,2,c
  7748  0012BC  D074               	goto	l114
  7749  0012BE                     u7690:
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;AdcApp.c: 96: {
  7753                           ;AdcApp.c: 97: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  7754  0012BE  0ECB               	movlw	low _channelArr
  7755  0012C0  2437               	addwf	_channelNum,w,c
  7756  0012C2  6EF6               	movwf	tblptrl,c
  7757  0012C4  0E7A               	movlw	high _channelArr
  7758  0012C6  2038               	addwfc	_channelNum+1,w,c
  7759  0012C8  6EF7               	movwf	tblptrh,c
  7760  0012CA                     	if	0	;There are less than 3 active tblptr bytes
  7761  0012CA                     	endif
  7762  0012CA  0008               	tblrd		*
  7763  0012CC  50F5               	movf	tablat,w,c
  7764  0012CE  EC15  F014         	call	_ADC_GetConversion
  7765  0012D2  C018  F235         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  7766  0012D6  C019  F236         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  7767                           
  7768                           ;AdcApp.c: 98: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7769  0012DA  0E00               	movlw	0
  7770  0012DC  0100               	movlb	0	; () banked
  7771  0012DE  6F9D               	movwf	pow@y& (0+255),b
  7772  0012E0  0E20               	movlw	32
  7773  0012E2  6F9E               	movwf	(pow@y+1)& (0+255),b
  7774  0012E4  0E41               	movlw	65
  7775  0012E6  6F9F               	movwf	(pow@y+2)& (0+255),b
  7776  0012E8  0E00               	movlw	0
  7777  0012EA  6F9A               	movwf	pow@x& (0+255),b
  7778  0012EC  0E00               	movlw	0
  7779  0012EE  6F9B               	movwf	(pow@x+1)& (0+255),b
  7780  0012F0  0E40               	movlw	64
  7781  0012F2  6F9C               	movwf	(pow@x+2)& (0+255),b
  7782  0012F4  EC6C  F007         	call	_pow	;wreg free
  7783  0012F8  C09A  F232         	movff	?_pow,_SampleSingleChannel$2938
  7784  0012FC  C09B  F233         	movff	?_pow+1,_SampleSingleChannel$2938+1
  7785  001300  C09C  F234         	movff	?_pow+2,_SampleSingleChannel$2938+2
  7786                           
  7787                           ;AdcApp.c: 98: adcRes = (_adcResult/pow(2,(10)))*(3340);
  7788  001304  0EC0               	movlw	192
  7789  001306  0100               	movlb	0	; () banked
  7790  001308  6F69               	movwf	___ftmul@f2& (0+255),b
  7791  00130A  0E50               	movlw	80
  7792  00130C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  7793  00130E  0E45               	movlw	69
  7794  001310  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  7795  001312  C232  F026         	movff	_SampleSingleChannel$2938,___ftdiv@f2
  7796  001316  C233  F027         	movff	_SampleSingleChannel$2938+1,___ftdiv@f2+1
  7797  00131A  C234  F028         	movff	_SampleSingleChannel$2938+2,___ftdiv@f2+2
  7798  00131E  C235  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  7799  001322  C236  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  7800  001326  ECA1  F014         	call	___lwtoft	;wreg free
  7801  00132A  C020  F023         	movff	?___lwtoft,___ftdiv@f1
  7802  00132E  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
  7803  001332  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
  7804  001336  ECD4  F00A         	call	___ftdiv	;wreg free
  7805  00133A  C023  F066         	movff	?___ftdiv,___ftmul@f1
  7806  00133E  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  7807  001342  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  7808  001346  EC59  F00A         	call	___ftmul	;wreg free
  7809  00134A  C066  F072         	movff	?___ftmul,___fttol@f1
  7810  00134E  C067  F073         	movff	?___ftmul+1,___fttol@f1+1
  7811  001352  C068  F074         	movff	?___ftmul+2,___fttol@f1+2
  7812  001356  ECDD  F009         	call	___fttol	;wreg free
  7813  00135A  C072  F237         	movff	?___fttol,SampleSingleChannel@adcRes
  7814  00135E  C073  F238         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  7815                           
  7816                           ;AdcApp.c: 100: sprintf(dest, "%d \t", adcRes);
  7817  001362  0E00               	movlw	low SampleSingleChannel@dest
  7818  001364  6E24               	movwf	sprintf@sp,c
  7819  001366  0E02               	movlw	high SampleSingleChannel@dest
  7820  001368  6E25               	movwf	sprintf@sp+1,c
  7821  00136A  0EFA               	movlw	low STR_5
  7822  00136C  6E26               	movwf	sprintf@f,c
  7823  00136E  0E7F               	movlw	high STR_5
  7824  001370  6E27               	movwf	sprintf@f+1,c
  7825  001372  C237  F028         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  7826  001376  C238  F029         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  7827  00137A  ECFB  F004         	call	_sprintf	;wreg free
  7828                           
  7829                           ;AdcApp.c: 101: UART_Write_Text(dest);
  7830  00137E  0E00               	movlw	low SampleSingleChannel@dest
  7831  001380  6E19               	movwf	UART_Write_Text@text,c
  7832  001382  0E02               	movlw	high SampleSingleChannel@dest
  7833  001384  6E1A               	movwf	UART_Write_Text@text+1,c
  7834  001386  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7835                           
  7836                           ;AdcApp.c: 102: _delay((unsigned long)((1000)*(8000000/4000.0)));
  7837  00138A  0E0B               	movlw	11
  7838  00138C  0100               	movlb	0	; () banked
  7839  00138E  6FAC               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  7840  001390  0E26               	movlw	38
  7841  001392  6FAB               	movwf	??_SampleSingleChannel& (0+255),b
  7842  001394  0E5D               	movlw	93
  7843  001396                     u8257:
  7844  001396  2EE8               	decfsz	wreg,f,c
  7845  001398  D7FE               	bra	u8257
  7846  00139A  2FAB               	decfsz	??_SampleSingleChannel& (0+255),f,b
  7847  00139C  D7FC               	bra	u8257
  7848  00139E  2FAC               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  7849  0013A0  D7FA               	bra	u8257
  7850  0013A2  D000               	nop2	
  7851                           
  7852                           ;AdcApp.c: 103: }
  7853  0013A4  0012               	return	
  7854  0013A6                     l114:
  7855                           
  7856                           ;AdcApp.c: 104: else
  7857                           ;AdcApp.c: 105: {
  7858                           ;AdcApp.c: 106: needToSample = 0;
  7859  0013A6  0E00               	movlw	0
  7860  0013A8  0100               	movlb	0	; () banked
  7861  0013AA  6FC3               	movwf	_needToSample& (0+255),b	;volatile
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;AdcApp.c: 107: UART_Write_Text("\n\r OK \n\r");
  7865  0013AC  0EE4               	movlw	low STR_6
  7866  0013AE  6E19               	movwf	UART_Write_Text@text,c
  7867  0013B0  0E7F               	movlw	high STR_6
  7868  0013B2  6E1A               	movwf	UART_Write_Text@text+1,c
  7869  0013B4  EC81  F00F         	call	_UART_Write_Text	;wreg free
  7870  0013B8  0012               	return	
  7871  0013BA                     __end_of_SampleSingleChannel:
  7872                           	opt stack 0
  7873                           tosu	equ	0xFFF
  7874                           tosh	equ	0xFFE
  7875                           tosl	equ	0xFFD
  7876                           pclath	equ	0xFFA
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           intcon2	equ	0xFF1
  7885                           postinc0	equ	0xFEE
  7886                           wreg	equ	0xFE8
  7887                           indf1	equ	0xFE7
  7888                           postdec1	equ	0xFE5
  7889                           fsr1h	equ	0xFE2
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function _sprintf *****************
  7899 ;; Defined at:
  7900 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  sp              2   35[COMRAM] PTR unsigned char 
  7903 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50
      +), 
  7904 ;;  f               2   37[COMRAM] PTR const unsigned char 
  7905 ;;		 -> STR_38(37), STR_37(38), STR_36(86), STR_35(53), 
  7906 ;;		 -> STR_34(46), STR_33(29), STR_32(101), STR_31(86), 
  7907 ;;		 -> STR_30(61), STR_29(62), STR_28(45), STR_27(74), 
  7908 ;;		 -> STR_26(25), STR_25(79), STR_24(75), STR_23(46), 
  7909 ;;		 -> STR_22(61), STR_21(66), STR_20(23), STR_19(31), 
  7910 ;;		 -> STR_17(20), STR_15(20), STR_13(18), STR_12(20), 
  7911 ;;		 -> STR_11(31), STR_7(11), STR_5(5), 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  tmpval          4    0        struct .
  7914 ;;  val             2    6[BANK0 ] unsigned int 
  7915 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  7916 ;;		 -> STR_39(7), STR_18(9), STR_16(12), STR_14(6), 
  7917 ;;  ap              2    2[BANK0 ] PTR void [1]
  7918 ;;		 -> ?_sprintf(2), 
  7919 ;;  len             2    0        unsigned int 
  7920 ;;  c               1    8[BANK0 ] char 
  7921 ;;  prec            1    1[BANK0 ] char 
  7922 ;;  flag            1    0[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2   35[COMRAM] int 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7932 ;;      Params:         6       0       0       0       0       0       0
  7933 ;;      Locals:         0       9       0       0       0       0       0
  7934 ;;      Temps:          1       0       0       0       0       0       0
  7935 ;;      Totals:         7       9       0       0       0       0       0
  7936 ;;Total ram usage:       16 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    4
  7939 ;; This function calls:
  7940 ;;		___lwdiv
  7941 ;;		___lwmod
  7942 ;; This function is called by:
  7943 ;;		_SampleSingleChannel
  7944 ;;		_readUartByte
  7945 ;;		_SendUartSystemInitMessage
  7946 ;;		_PrintHelpScreen
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text35
  7951  0009F6                     __ptext35:
  7952                           	opt stack 0
  7953  0009F6                     _sprintf:
  7954                           	opt stack 25
  7955                           
  7956                           ;doprnt.c: 494: va_list ap;
  7957                           ;doprnt.c: 499: signed char c;
  7958                           ;doprnt.c: 506: signed char prec;
  7959                           ;doprnt.c: 508: unsigned char flag;
  7960                           ;doprnt.c: 523: union {
  7961                           ;doprnt.c: 524: unsigned long vd;
  7962                           ;doprnt.c: 525: double integ;
  7963                           ;doprnt.c: 526: } tmpval;
  7964                           ;doprnt.c: 528: unsigned int val;
  7965                           ;doprnt.c: 529: unsigned len;
  7966                           ;doprnt.c: 530: const char * cp;
  7967                           ;doprnt.c: 533: *ap = __va_start();
  7968                           
  7969                           ;incstack = 0
  7970  0009F6  0E28               	movlw	low (?_sprintf+4)
  7971  0009F8  0100               	movlb	0	; () banked
  7972  0009FA  6F62               	movwf	sprintf@ap& (0+255),b
  7973  0009FC  0E00               	movlw	high (?_sprintf+4)
  7974  0009FE  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  7975                           
  7976                           ;doprnt.c: 536: while(c = *f++) {
  7977  000A00  D0C0               	goto	u7150
  7978  000A02                     
  7979                           ; BSR set to: 0
  7980                           ;doprnt.c: 538: if(c != '%')
  7981                           
  7982                           ; BSR set to: 0
  7983  000A02  0E25               	movlw	37
  7984  000A04  1968               	xorwf	sprintf@c& (0+255),w,b
  7985  000A06  B4D8               	btfsc	status,2,c
  7986  000A08  D009               	goto	l1298
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;doprnt.c: 540: {
  7990                           ;doprnt.c: 541: ((*sp++ = (c)));
  7991  000A0A  C024  FFD9         	movff	sprintf@sp,fsr2l
  7992  000A0E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  7993  000A12  C068  FFDF         	movff	sprintf@c,indf2
  7994                           
  7995                           ; BSR set to: 0
  7996  000A16  4A24               	infsnz	sprintf@sp,f,c
  7997  000A18  2A25               	incf	sprintf@sp+1,f,c
  7998                           
  7999                           ;doprnt.c: 542: continue;
  8000  000A1A  D0B3               	goto	u7150
  8001  000A1C                     l1298:
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;doprnt.c: 543: }
  8005                           ;doprnt.c: 548: flag = 0;
  8006                           
  8007                           ; BSR set to: 0
  8008  000A1C  0E00               	movlw	0
  8009  000A1E  6F60               	movwf	sprintf@flag& (0+255),b
  8010                           
  8011                           ;doprnt.c: 635: switch(c = *f++) {
  8012  000A20  D02E               	goto	l1299
  8013  000A22                     
  8014                           ; BSR set to: 0
  8015                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8016                           
  8017                           ; BSR set to: 0
  8018  000A22  C062  FFD9         	movff	sprintf@ap,fsr2l
  8019  000A26  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8020  000A2A  CFDE F064          	movff	postinc2,sprintf@cp
  8021  000A2E  CFDD F065          	movff	postdec2,sprintf@cp+1
  8022                           
  8023                           ; BSR set to: 0
  8024  000A32  0E02               	movlw	2
  8025  000A34  2762               	addwf	sprintf@ap& (0+255),f,b
  8026  000A36  0E00               	movlw	0
  8027  000A38  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;doprnt.c: 740: if(!cp)
  8031  000A3A  5164               	movf	sprintf@cp& (0+255),w,b
  8032  000A3C  1165               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8033  000A3E  A4D8               	btfss	status,2,c
  8034  000A40  D014               	goto	l1307
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;doprnt.c: 741: cp = "(null)";
  8038  000A42  0EED               	movlw	low STR_39
  8039  000A44  6F64               	movwf	sprintf@cp& (0+255),b
  8040  000A46  0E7F               	movlw	high STR_39
  8041  000A48  6F65               	movwf	(sprintf@cp+1)& (0+255),b
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;doprnt.c: 777: while(*cp)
  8045  000A4A  D00F               	goto	l1307
  8046  000A4C                     
  8047                           ; BSR set to: 0
  8048                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  8049                           
  8050                           ; BSR set to: 0
  8051  000A4C  C064  FFF6         	movff	sprintf@cp,tblptrl
  8052  000A50  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8053  000A54                     	if	0	;tblptru may be non-zero
  8054  000A54                     	endif
  8055  000A54                     	if	0	;tblptru may be non-zero
  8056  000A54                     	endif
  8057  000A54  C024  FFD9         	movff	sprintf@sp,fsr2l
  8058  000A58  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8059  000A5C  0008               	tblrd		*
  8060  000A5E  CFF5 FFDF          	movff	tablat,indf2
  8061                           
  8062                           ; BSR set to: 0
  8063  000A62  4B64               	infsnz	sprintf@cp& (0+255),f,b
  8064  000A64  2B65               	incf	(sprintf@cp+1)& (0+255),f,b
  8065                           
  8066                           ; BSR set to: 0
  8067  000A66  4A24               	infsnz	sprintf@sp,f,c
  8068  000A68  2A25               	incf	sprintf@sp+1,f,c
  8069  000A6A                     l1307:
  8070                           
  8071                           ; BSR set to: 0
  8072                           
  8073                           ; BSR set to: 0
  8074  000A6A  C064  FFF6         	movff	sprintf@cp,tblptrl
  8075  000A6E  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8076  000A72                     	if	0	;tblptru may be non-zero
  8077  000A72                     	endif
  8078  000A72                     	if	0	;tblptru may be non-zero
  8079  000A72                     	endif
  8080  000A72  0008               	tblrd		*
  8081  000A74  50F5               	movf	tablat,w,c
  8082  000A76  0900               	iorlw	0
  8083  000A78  B4D8               	btfsc	status,2,c
  8084  000A7A  D083               	goto	u7150
  8085  000A7C  D7E7               	goto	l1308
  8086  000A7E                     l1299:
  8087                           
  8088                           ; BSR set to: 0
  8089                           
  8090                           ; BSR set to: 0
  8091  000A7E  C026  FFF6         	movff	sprintf@f,tblptrl
  8092  000A82  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8093  000A86  4A26               	infsnz	sprintf@f,f,c
  8094  000A88  2A27               	incf	sprintf@f+1,f,c
  8095  000A8A                     	if	0	;tblptru may be non-zero
  8096  000A8A                     	endif
  8097  000A8A                     	if	0	;tblptru may be non-zero
  8098  000A8A                     	endif
  8099  000A8A  0008               	tblrd		*
  8100  000A8C  CFF5 F068          	movff	tablat,sprintf@c
  8101  000A90  5168               	movf	sprintf@c& (0+255),w,b
  8102                           
  8103                           ; Switch size 1, requested type "space"
  8104                           ; Number of cases is 4, Range of values is 0 to 115
  8105                           ; switch strategies available:
  8106                           ; Name         Instructions Cycles
  8107                           ; simple_byte           13     7 (average)
  8108                           ;	Chosen strategy is simple_byte
  8109  000A92  0A00               	xorlw	0	; case 0
  8110  000A94  B4D8               	btfsc	status,2,c
  8111  000A96  D081               	goto	u7160
  8112  000A98  0A64               	xorlw	100	; case 100
  8113  000A9A  B4D8               	btfsc	status,2,c
  8114  000A9C  D007               	goto	l1304
  8115  000A9E  0A0D               	xorlw	13	; case 105
  8116  000AA0  B4D8               	btfsc	status,2,c
  8117  000AA2  D004               	goto	l1304
  8118  000AA4  0A1A               	xorlw	26	; case 115
  8119  000AA6  B4D8               	btfsc	status,2,c
  8120  000AA8  D7BC               	goto	l1305
  8121  000AAA  D06B               	goto	u7150
  8122  000AAC                     l1304:
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;doprnt.c: 1253: {
  8126                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8127                           
  8128                           ; BSR set to: 0
  8129  000AAC  C062  FFD9         	movff	sprintf@ap,fsr2l
  8130  000AB0  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8131  000AB4  CFDE F066          	movff	postinc2,sprintf@val
  8132  000AB8  CFDD F067          	movff	postdec2,sprintf@val+1
  8133                           
  8134                           ; BSR set to: 0
  8135  000ABC  0E02               	movlw	2
  8136  000ABE  2762               	addwf	sprintf@ap& (0+255),f,b
  8137  000AC0  0E00               	movlw	0
  8138  000AC2  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;doprnt.c: 1261: if((int)val < 0) {
  8142  000AC4  AF67               	btfss	(sprintf@val+1)& (0+255),7,b
  8143  000AC6  D006               	goto	l1311
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;doprnt.c: 1262: flag |= 0x03;
  8147  000AC8  0E03               	movlw	3
  8148  000ACA  1360               	iorwf	sprintf@flag& (0+255),f,b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;doprnt.c: 1263: val = -val;
  8152  000ACC  6D66               	negf	sprintf@val& (0+255),b
  8153  000ACE  1F67               	comf	(sprintf@val+1)& (0+255),f,b
  8154  000AD0  B0D8               	btfsc	status,0,c
  8155  000AD2  2B67               	incf	(sprintf@val+1)& (0+255),f,b
  8156  000AD4                     l1311:
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;doprnt.c: 1264: }
  8160                           ;doprnt.c: 1266: }
  8161                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8162                           
  8163                           ; BSR set to: 0
  8164  000AD4  0E01               	movlw	1
  8165  000AD6  6F68               	movwf	sprintf@c& (0+255),b
  8166  000AD8                     l6777:
  8167                           
  8168                           ; BSR set to: 0
  8169  000AD8  0E05               	movlw	5
  8170  000ADA  1968               	xorwf	sprintf@c& (0+255),w,b
  8171  000ADC  B4D8               	btfsc	status,2,c
  8172  000ADE  D012               	goto	u7130
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;doprnt.c: 1306: if(val < dpowers[c])
  8176                           
  8177                           ; BSR set to: 0
  8178                           
  8179                           ; BSR set to: 0
  8180  000AE0  5168               	movf	sprintf@c& (0+255),w,b
  8181  000AE2  0D02               	mullw	2
  8182  000AE4  0EC1               	movlw	low _dpowers
  8183  000AE6  24F3               	addwf	prodl,w,c
  8184  000AE8  6EF6               	movwf	tblptrl,c
  8185  000AEA  0E7A               	movlw	high _dpowers
  8186  000AEC  20F4               	addwfc	prodh,w,c
  8187  000AEE  6EF7               	movwf	tblptrh,c
  8188  000AF0                     	if	0	;There are less than 3 active tblptr bytes
  8189  000AF0                     	endif
  8190  000AF0  0009               	tblrd		*+
  8191  000AF2  50F5               	movf	tablat,w,c
  8192  000AF4  5D66               	subwf	sprintf@val& (0+255),w,b
  8193  000AF6  0009               	tblrd		*+
  8194  000AF8  50F5               	movf	tablat,w,c
  8195  000AFA  5967               	subwfb	(sprintf@val+1)& (0+255),w,b
  8196  000AFC  A0D8               	btfss	status,0,c
  8197  000AFE  D002               	goto	u7130
  8198                           
  8199                           ; BSR set to: 0
  8200                           
  8201                           ; BSR set to: 0
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;doprnt.c: 1307: break;
  8205  000B00  2B68               	incf	sprintf@c& (0+255),f,b
  8206  000B02  D7EA               	goto	l6777
  8207  000B04                     u7130:
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;doprnt.c: 1422: {
  8211                           ;doprnt.c: 1438: if(flag & 0x03)
  8212                           
  8213                           ; BSR set to: 0
  8214  000B04  C060  F02A         	movff	sprintf@flag,??_sprintf
  8215  000B08  0E03               	movlw	3
  8216  000B0A  162A               	andwf	??_sprintf,f,c
  8217  000B0C  B4D8               	btfsc	status,2,c
  8218  000B0E  D008               	goto	l1315
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8222  000B10  C024  FFD9         	movff	sprintf@sp,fsr2l
  8223  000B14  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8224  000B18  0E2D               	movlw	45
  8225  000B1A  6EDF               	movwf	indf2,c
  8226                           
  8227                           ; BSR set to: 0
  8228  000B1C  4A24               	infsnz	sprintf@sp,f,c
  8229  000B1E  2A25               	incf	sprintf@sp+1,f,c
  8230  000B20                     l1315:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;doprnt.c: 1469: }
  8234                           ;doprnt.c: 1472: prec = c;
  8235                           
  8236                           ; BSR set to: 0
  8237  000B20  C068  F061         	movff	sprintf@c,sprintf@prec
  8238                           
  8239                           ;doprnt.c: 1474: while(prec--) {
  8240  000B24  D02A               	goto	l1316
  8241  000B26                     
  8242                           ; BSR set to: 0
  8243                           ;doprnt.c: 1478: {
  8244                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8245                           
  8246                           ; BSR set to: 0
  8247  000B26  5161               	movf	sprintf@prec& (0+255),w,b
  8248  000B28  0D02               	mullw	2
  8249  000B2A  0EC1               	movlw	low _dpowers
  8250  000B2C  24F3               	addwf	prodl,w,c
  8251  000B2E  6EF6               	movwf	tblptrl,c
  8252  000B30  0E7A               	movlw	high _dpowers
  8253  000B32  20F4               	addwfc	prodh,w,c
  8254  000B34  6EF7               	movwf	tblptrh,c
  8255  000B36                     	if	0	;There are less than 3 active tblptr bytes
  8256  000B36                     	endif
  8257  000B36  0009               	tblrd		*+
  8258  000B38  CFF5 F01A          	movff	tablat,___lwdiv@divisor
  8259  000B3C  000A               	tblrd		*-
  8260  000B3E  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
  8261  000B42  C066  F018         	movff	sprintf@val,___lwdiv@dividend
  8262  000B46  C067  F019         	movff	sprintf@val+1,___lwdiv@dividend+1
  8263  000B4A  ECB6  F011         	call	___lwdiv	;wreg free
  8264  000B4E  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
  8265  000B52  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
  8266  000B56  0E00               	movlw	0
  8267  000B58  6E22               	movwf	___lwmod@divisor+1,c
  8268  000B5A  0E0A               	movlw	10
  8269  000B5C  6E21               	movwf	___lwmod@divisor,c
  8270  000B5E  ECB4  F012         	call	___lwmod	;wreg free
  8271  000B62  501F               	movf	?___lwmod,w,c
  8272  000B64  0F30               	addlw	48
  8273  000B66  0100               	movlb	0	; () banked
  8274  000B68  6F68               	movwf	sprintf@c& (0+255),b
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;doprnt.c: 1523: }
  8278                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8279  000B6A  C024  FFD9         	movff	sprintf@sp,fsr2l
  8280  000B6E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8281  000B72  C068  FFDF         	movff	sprintf@c,indf2
  8282                           
  8283                           ; BSR set to: 0
  8284  000B76  4A24               	infsnz	sprintf@sp,f,c
  8285  000B78  2A25               	incf	sprintf@sp+1,f,c
  8286  000B7A                     l1316:
  8287                           
  8288                           ; BSR set to: 0
  8289                           
  8290                           ; BSR set to: 0
  8291  000B7A  0761               	decf	sprintf@prec& (0+255),f,b
  8292  000B7C  2961               	incf	sprintf@prec& (0+255),w,b
  8293  000B7E  A4D8               	btfss	status,2,c
  8294  000B80  D7D2               	goto	l1317
  8295  000B82                     u7150:
  8296                           
  8297                           ; BSR set to: 0
  8298                           
  8299                           ; BSR set to: 0
  8300                           
  8301                           ; BSR set to: 0
  8302  000B82  C026  FFF6         	movff	sprintf@f,tblptrl
  8303  000B86  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8304  000B8A  4A26               	infsnz	sprintf@f,f,c
  8305  000B8C  2A27               	incf	sprintf@f+1,f,c
  8306  000B8E                     	if	0	;tblptru may be non-zero
  8307  000B8E                     	endif
  8308  000B8E                     	if	0	;tblptru may be non-zero
  8309  000B8E                     	endif
  8310  000B8E  0008               	tblrd		*
  8311  000B90  CFF5 F068          	movff	tablat,sprintf@c
  8312  000B94  5168               	movf	sprintf@c& (0+255),w,b
  8313  000B96  A4D8               	btfss	status,2,c
  8314  000B98  D734               	goto	l1297
  8315  000B9A                     u7160:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;doprnt.c: 1538: *sp = 0;
  8319                           
  8320                           ; BSR set to: 0
  8321                           
  8322                           ;doprnt.c: 1525: }
  8323                           ;doprnt.c: 1533: }
  8324                           ;doprnt.c: 1535: alldone:
  8325                           
  8326                           ; BSR set to: 0
  8327  000B9A  C024  FFD9         	movff	sprintf@sp,fsr2l
  8328  000B9E  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8329  000BA2  0E00               	movlw	0
  8330  000BA4  6EDF               	movwf	indf2,c
  8331  000BA6  0012               	return	
  8332  000BA8                     __end_of_sprintf:
  8333                           	opt stack 0
  8334                           tosu	equ	0xFFF
  8335                           tosh	equ	0xFFE
  8336                           tosl	equ	0xFFD
  8337                           pclath	equ	0xFFA
  8338                           tblptru	equ	0xFF8
  8339                           tblptrh	equ	0xFF7
  8340                           tblptrl	equ	0xFF6
  8341                           tablat	equ	0xFF5
  8342                           prodh	equ	0xFF4
  8343                           prodl	equ	0xFF3
  8344                           intcon	equ	0xFF2
  8345                           intcon2	equ	0xFF1
  8346                           postinc0	equ	0xFEE
  8347                           wreg	equ	0xFE8
  8348                           indf1	equ	0xFE7
  8349                           postdec1	equ	0xFE5
  8350                           fsr1h	equ	0xFE2
  8351                           fsr1l	equ	0xFE1
  8352                           indf2	equ	0xFDF
  8353                           postinc2	equ	0xFDE
  8354                           postdec2	equ	0xFDD
  8355                           fsr2h	equ	0xFDA
  8356                           fsr2l	equ	0xFD9
  8357                           status	equ	0xFD8
  8358                           
  8359 ;; *************** function ___lwmod *****************
  8360 ;; Defined at:
  8361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;  dividend        2   30[COMRAM] unsigned int 
  8364 ;;  divisor         2   32[COMRAM] unsigned int 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  counter         1   34[COMRAM] unsigned char 
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  2   30[COMRAM] unsigned int 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2, status,0
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8376 ;;      Params:         4       0       0       0       0       0       0
  8377 ;;      Locals:         1       0       0       0       0       0       0
  8378 ;;      Temps:          0       0       0       0       0       0       0
  8379 ;;      Totals:         5       0       0       0       0       0       0
  8380 ;;Total ram usage:        5 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    3
  8383 ;; This function calls:
  8384 ;;		Nothing
  8385 ;; This function is called by:
  8386 ;;		_sprintf
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           	psect	text36
  8391  002568                     __ptext36:
  8392                           	opt stack 0
  8393  002568                     ___lwmod:
  8394                           	opt stack 25
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;incstack = 0
  8398  002568  5021               	movf	___lwmod@divisor,w,c
  8399  00256A  1022               	iorwf	___lwmod@divisor+1,w,c
  8400  00256C  B4D8               	btfsc	status,2,c
  8401  00256E  D018               	goto	l1743
  8402  002570  0E01               	movlw	1
  8403  002572  6E23               	movwf	___lwmod@counter,c
  8404  002574  D004               	goto	l1738
  8405  002576  90D8               	bcf	status,0,c
  8406  002578  3621               	rlcf	___lwmod@divisor,f,c
  8407  00257A  3622               	rlcf	___lwmod@divisor+1,f,c
  8408  00257C  2A23               	incf	___lwmod@counter,f,c
  8409  00257E                     l1738:
  8410  00257E  AE22               	btfss	___lwmod@divisor+1,7,c
  8411  002580  D7FA               	goto	l1739
  8412  002582                     u6970:
  8413  002582  5021               	movf	___lwmod@divisor,w,c
  8414  002584  5C1F               	subwf	___lwmod@dividend,w,c
  8415  002586  5022               	movf	___lwmod@divisor+1,w,c
  8416  002588  5820               	subwfb	___lwmod@dividend+1,w,c
  8417  00258A  A0D8               	btfss	status,0,c
  8418  00258C  D004               	goto	l1742
  8419  00258E  5021               	movf	___lwmod@divisor,w,c
  8420  002590  5E1F               	subwf	___lwmod@dividend,f,c
  8421  002592  5022               	movf	___lwmod@divisor+1,w,c
  8422  002594  5A20               	subwfb	___lwmod@dividend+1,f,c
  8423  002596                     l1742:
  8424  002596  90D8               	bcf	status,0,c
  8425  002598  3222               	rrcf	___lwmod@divisor+1,f,c
  8426  00259A  3221               	rrcf	___lwmod@divisor,f,c
  8427  00259C  2E23               	decfsz	___lwmod@counter,f,c
  8428  00259E  D7F1               	goto	u6970
  8429  0025A0                     l1743:
  8430  0025A0  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  8431  0025A4  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  8432  0025A8  0012               	return		;funcret
  8433  0025AA                     __end_of___lwmod:
  8434                           	opt stack 0
  8435                           tosu	equ	0xFFF
  8436                           tosh	equ	0xFFE
  8437                           tosl	equ	0xFFD
  8438                           pclath	equ	0xFFA
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           postinc0	equ	0xFEE
  8448                           wreg	equ	0xFE8
  8449                           indf1	equ	0xFE7
  8450                           postdec1	equ	0xFE5
  8451                           fsr1h	equ	0xFE2
  8452                           fsr1l	equ	0xFE1
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function ___lwdiv *****************
  8461 ;; Defined at:
  8462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  dividend        2   23[COMRAM] unsigned int 
  8465 ;;  divisor         2   25[COMRAM] unsigned int 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  quotient        2   28[COMRAM] unsigned int 
  8468 ;;  counter         1   27[COMRAM] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  2   23[COMRAM] unsigned int 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8478 ;;      Params:         4       0       0       0       0       0       0
  8479 ;;      Locals:         3       0       0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0       0       0
  8481 ;;      Totals:         7       0       0       0       0       0       0
  8482 ;;Total ram usage:        7 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    3
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		_sprintf
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text37
  8493  00236C                     __ptext37:
  8494                           	opt stack 0
  8495  00236C                     ___lwdiv:
  8496                           	opt stack 25
  8497                           
  8498                           ;incstack = 0
  8499  00236C  0E00               	movlw	0
  8500  00236E  6E1E               	movwf	___lwdiv@quotient+1,c
  8501  002370  0E00               	movlw	0
  8502  002372  6E1D               	movwf	___lwdiv@quotient,c
  8503  002374  501A               	movf	___lwdiv@divisor,w,c
  8504  002376  101B               	iorwf	___lwdiv@divisor+1,w,c
  8505  002378  B4D8               	btfsc	status,2,c
  8506  00237A  D01C               	goto	l1733
  8507  00237C  0E01               	movlw	1
  8508  00237E  6E1C               	movwf	___lwdiv@counter,c
  8509  002380  D004               	goto	l1728
  8510  002382  90D8               	bcf	status,0,c
  8511  002384  361A               	rlcf	___lwdiv@divisor,f,c
  8512  002386  361B               	rlcf	___lwdiv@divisor+1,f,c
  8513  002388  2A1C               	incf	___lwdiv@counter,f,c
  8514  00238A                     l1728:
  8515  00238A  AE1B               	btfss	___lwdiv@divisor+1,7,c
  8516  00238C  D7FA               	goto	l1729
  8517  00238E                     u6940:
  8518  00238E  90D8               	bcf	status,0,c
  8519  002390  361D               	rlcf	___lwdiv@quotient,f,c
  8520  002392  361E               	rlcf	___lwdiv@quotient+1,f,c
  8521  002394  501A               	movf	___lwdiv@divisor,w,c
  8522  002396  5C18               	subwf	___lwdiv@dividend,w,c
  8523  002398  501B               	movf	___lwdiv@divisor+1,w,c
  8524  00239A  5819               	subwfb	___lwdiv@dividend+1,w,c
  8525  00239C  A0D8               	btfss	status,0,c
  8526  00239E  D005               	goto	l1732
  8527  0023A0  501A               	movf	___lwdiv@divisor,w,c
  8528  0023A2  5E18               	subwf	___lwdiv@dividend,f,c
  8529  0023A4  501B               	movf	___lwdiv@divisor+1,w,c
  8530  0023A6  5A19               	subwfb	___lwdiv@dividend+1,f,c
  8531  0023A8  801D               	bsf	___lwdiv@quotient,0,c
  8532  0023AA                     l1732:
  8533  0023AA  90D8               	bcf	status,0,c
  8534  0023AC  321B               	rrcf	___lwdiv@divisor+1,f,c
  8535  0023AE  321A               	rrcf	___lwdiv@divisor,f,c
  8536  0023B0  2E1C               	decfsz	___lwdiv@counter,f,c
  8537  0023B2  D7ED               	goto	u6940
  8538  0023B4                     l1733:
  8539  0023B4  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  8540  0023B8  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8541  0023BC  0012               	return		;funcret
  8542  0023BE                     __end_of___lwdiv:
  8543                           	opt stack 0
  8544                           tosu	equ	0xFFF
  8545                           tosh	equ	0xFFE
  8546                           tosl	equ	0xFFD
  8547                           pclath	equ	0xFFA
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           indf1	equ	0xFE7
  8559                           postdec1	equ	0xFE5
  8560                           fsr1h	equ	0xFE2
  8561                           fsr1l	equ	0xFE1
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function _pow *****************
  8570 ;; Defined at:
  8571 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  x               3   58[BANK0 ] unsigned int 
  8574 ;;  y               3   61[BANK0 ] unsigned int 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  yi              4   71[BANK0 ] unsigned long 
  8577 ;;  sign            1   70[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  3   58[BANK0 ] unsigned char 
  8580 ;; Registers used:
  8581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8587 ;;      Params:         0       6       0       0       0       0       0
  8588 ;;      Locals:         0      11       0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0
  8590 ;;      Totals:         0      17       0       0       0       0       0
  8591 ;;Total ram usage:       17 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    7
  8594 ;; This function calls:
  8595 ;;		___ftge
  8596 ;;		___ftmul
  8597 ;;		___ftneg
  8598 ;;		___fttol
  8599 ;;		___lltoft
  8600 ;;		_exp
  8601 ;;		_log
  8602 ;; This function is called by:
  8603 ;;		_SampleSingleChannel
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           	psect	text38
  8608  000ED8                     __ptext38:
  8609                           	opt stack 0
  8610  000ED8                     _pow:
  8611                           	opt stack 22
  8612                           
  8613                           ;incstack = 0
  8614  000ED8  0E00               	movlw	0
  8615  000EDA  0100               	movlb	0	; () banked
  8616  000EDC  6FA6               	movwf	pow@sign& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619  000EDE  519A               	movf	pow@x& (0+255),w,b
  8620  000EE0  119B               	iorwf	(pow@x+1)& (0+255),w,b
  8621  000EE2  119C               	iorwf	(pow@x+2)& (0+255),w,b
  8622  000EE4  A4D8               	btfss	status,2,c
  8623  000EE6  D01D               	goto	l1764
  8624                           
  8625                           ; BSR set to: 0
  8626  000EE8  0E00               	movlw	0
  8627  000EEA  6E18               	movwf	___ftge@ff1,c
  8628  000EEC  0E00               	movlw	0
  8629  000EEE  6E19               	movwf	___ftge@ff1+1,c
  8630  000EF0  0E00               	movlw	0
  8631  000EF2  6E1A               	movwf	___ftge@ff1+2,c
  8632  000EF4  C09D  F01B         	movff	pow@y,___ftge@ff2
  8633  000EF8  C09E  F01C         	movff	pow@y+1,___ftge@ff2+1
  8634  000EFC  C09F  F01D         	movff	pow@y+2,___ftge@ff2+2
  8635  000F00  EC82  F00E         	call	___ftge	;wreg free
  8636  000F04  A0D8               	btfss	status,0,c
  8637  000F06  D005               	goto	l1765
  8638  000F08  0E00               	movlw	0
  8639  000F0A  0100               	movlb	0	; () banked
  8640  000F0C  6FB2               	movwf	(_errno+1)& (0+255),b
  8641  000F0E  0E21               	movlw	33
  8642  000F10  6FB1               	movwf	_errno& (0+255),b
  8643  000F12                     l1765:
  8644  000F12  0E00               	movlw	0
  8645  000F14  0100               	movlb	0	; () banked
  8646  000F16  6F9A               	movwf	?_pow& (0+255),b
  8647  000F18  0E00               	movlw	0
  8648  000F1A  6F9B               	movwf	(?_pow+1)& (0+255),b
  8649  000F1C  0E00               	movlw	0
  8650  000F1E  6F9C               	movwf	(?_pow+2)& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653  000F20  0012               	return	
  8654  000F22                     l1764:
  8655                           
  8656                           ; BSR set to: 0
  8657                           
  8658                           ; BSR set to: 0
  8659  000F22  519D               	movf	pow@y& (0+255),w,b
  8660  000F24  119E               	iorwf	(pow@y+1)& (0+255),w,b
  8661  000F26  119F               	iorwf	(pow@y+2)& (0+255),w,b
  8662  000F28  A4D8               	btfss	status,2,c
  8663  000F2A  D007               	goto	l1767
  8664                           
  8665                           ; BSR set to: 0
  8666  000F2C  0E00               	movlw	0
  8667  000F2E  6F9A               	movwf	?_pow& (0+255),b
  8668  000F30  0E80               	movlw	128
  8669  000F32  6F9B               	movwf	(?_pow+1)& (0+255),b
  8670  000F34  0E3F               	movlw	63
  8671  000F36  6F9C               	movwf	(?_pow+2)& (0+255),b
  8672                           
  8673                           ; BSR set to: 0
  8674  000F38  0012               	return	
  8675  000F3A                     l1767:
  8676                           
  8677                           ; BSR set to: 0
  8678                           
  8679                           ; BSR set to: 0
  8680  000F3A  AF9C               	btfss	(pow@x+2)& (0+255),7,b
  8681  000F3C  D041               	goto	l1768
  8682                           
  8683                           ; BSR set to: 0
  8684  000F3E  C09D  F072         	movff	pow@y,___fttol@f1
  8685  000F42  C09E  F073         	movff	pow@y+1,___fttol@f1+1
  8686  000F46  C09F  F074         	movff	pow@y+2,___fttol@f1+2
  8687  000F4A  ECDD  F009         	call	___fttol	;wreg free
  8688  000F4E  C072  F0A7         	movff	?___fttol,pow@yi
  8689  000F52  C073  F0A8         	movff	?___fttol+1,pow@yi+1
  8690  000F56  C074  F0A9         	movff	?___fttol+2,pow@yi+2
  8691  000F5A  C075  F0AA         	movff	?___fttol+3,pow@yi+3
  8692  000F5E  C0A7  F020         	movff	pow@yi,___lltoft@c
  8693  000F62  C0A8  F021         	movff	pow@yi+1,___lltoft@c+1
  8694  000F66  C0A9  F022         	movff	pow@yi+2,___lltoft@c+2
  8695  000F6A  C0AA  F023         	movff	pow@yi+3,___lltoft@c+3
  8696  000F6E  EC81  F010         	call	___lltoft	;wreg free
  8697  000F72  0100               	movlb	0	; () banked
  8698  000F74  519D               	movf	pow@y& (0+255),w,b
  8699  000F76  1820               	xorwf	?___lltoft,w,c
  8700  000F78  E107               	bnz	u7650
  8701  000F7A  519E               	movf	(pow@y+1)& (0+255),w,b
  8702  000F7C  1821               	xorwf	?___lltoft+1,w,c
  8703  000F7E  E104               	bnz	u7650
  8704  000F80  519F               	movf	(pow@y+2)& (0+255),w,b
  8705  000F82  1822               	xorwf	?___lltoft+2,w,c
  8706  000F84  B4D8               	btfsc	status,2,c
  8707  000F86  D00B               	goto	l1769
  8708  000F88                     u7650:
  8709                           
  8710                           ; BSR set to: 0
  8711  000F88  0E00               	movlw	0
  8712  000F8A  6FB2               	movwf	(_errno+1)& (0+255),b
  8713  000F8C  0E21               	movlw	33
  8714  000F8E  6FB1               	movwf	_errno& (0+255),b
  8715  000F90  0E00               	movlw	0
  8716  000F92  6F9A               	movwf	?_pow& (0+255),b
  8717  000F94  0E00               	movlw	0
  8718  000F96  6F9B               	movwf	(?_pow+1)& (0+255),b
  8719  000F98  0E00               	movlw	0
  8720  000F9A  6F9C               	movwf	(?_pow+2)& (0+255),b
  8721                           
  8722                           ; BSR set to: 0
  8723  000F9C  0012               	return	
  8724  000F9E                     l1769:
  8725                           
  8726                           ; BSR set to: 0
  8727                           
  8728                           ; BSR set to: 0
  8729  000F9E  51A7               	movf	pow@yi& (0+255),w,b
  8730  000FA0  0B01               	andlw	1
  8731  000FA2  6FA6               	movwf	pow@sign& (0+255),b
  8732                           
  8733                           ; BSR set to: 0
  8734  000FA4  C09A  F018         	movff	pow@x,___ftneg@f1
  8735  000FA8  C09B  F019         	movff	pow@x+1,___ftneg@f1+1
  8736  000FAC  C09C  F01A         	movff	pow@x+2,___ftneg@f1+2
  8737  000FB0  EC8F  F014         	call	___ftneg	;wreg free
  8738  000FB4  C018  F09A         	movff	?___ftneg,pow@x
  8739  000FB8  C019  F09B         	movff	?___ftneg+1,pow@x+1
  8740  000FBC  C01A  F09C         	movff	?___ftneg+2,pow@x+2
  8741  000FC0                     l1768:
  8742  000FC0  C09A  F088         	movff	pow@x,log@x
  8743  000FC4  C09B  F089         	movff	pow@x+1,log@x+1
  8744  000FC8  C09C  F08A         	movff	pow@x+2,log@x+2
  8745  000FCC  ECC0  F008         	call	_log	;wreg free
  8746  000FD0  C088  F0A0         	movff	?_log,_pow$2939
  8747  000FD4  C089  F0A1         	movff	?_log+1,_pow$2939+1
  8748  000FD8  C08A  F0A2         	movff	?_log+2,_pow$2939+2
  8749  000FDC  C0A0  F066         	movff	_pow$2939,___ftmul@f1
  8750  000FE0  C0A1  F067         	movff	_pow$2939+1,___ftmul@f1+1
  8751  000FE4  C0A2  F068         	movff	_pow$2939+2,___ftmul@f1+2
  8752  000FE8  C09D  F069         	movff	pow@y,___ftmul@f2
  8753  000FEC  C09E  F06A         	movff	pow@y+1,___ftmul@f2+1
  8754  000FF0  C09F  F06B         	movff	pow@y+2,___ftmul@f2+2
  8755  000FF4  EC59  F00A         	call	___ftmul	;wreg free
  8756  000FF8  C066  F0A3         	movff	?___ftmul,_pow$2940
  8757  000FFC  C067  F0A4         	movff	?___ftmul+1,_pow$2940+1
  8758  001000  C068  F0A5         	movff	?___ftmul+2,_pow$2940+2
  8759  001004  C0A3  F091         	movff	_pow$2940,exp@x
  8760  001008  C0A4  F092         	movff	_pow$2940+1,exp@x+1
  8761  00100C  C0A5  F093         	movff	_pow$2940+2,exp@x+2
  8762  001010  EC17  F003         	call	_exp	;wreg free
  8763  001014  C091  F09A         	movff	?_exp,pow@x
  8764  001018  C092  F09B         	movff	?_exp+1,pow@x+1
  8765  00101C  C093  F09C         	movff	?_exp+2,pow@x+2
  8766  001020  0100               	movlb	0	; () banked
  8767  001022  51A6               	movf	pow@sign& (0+255),w,b
  8768  001024  B4D8               	btfsc	status,2,c
  8769  001026  D00F               	goto	l1770
  8770                           
  8771                           ; BSR set to: 0
  8772  001028  C09A  F018         	movff	pow@x,___ftneg@f1
  8773  00102C  C09B  F019         	movff	pow@x+1,___ftneg@f1+1
  8774  001030  C09C  F01A         	movff	pow@x+2,___ftneg@f1+2
  8775  001034  EC8F  F014         	call	___ftneg	;wreg free
  8776  001038  C018  F09A         	movff	?___ftneg,?_pow
  8777  00103C  C019  F09B         	movff	?___ftneg+1,?_pow+1
  8778  001040  C01A  F09C         	movff	?___ftneg+2,?_pow+2
  8779  001044  0012               	return	
  8780  001046                     l1770:
  8781                           
  8782                           ; BSR set to: 0
  8783  001046  C09A  F09A         	movff	pow@x,?_pow
  8784  00104A  C09B  F09B         	movff	pow@x+1,?_pow+1
  8785  00104E  C09C  F09C         	movff	pow@x+2,?_pow+2
  8786  001052  0012               	return		;funcret
  8787  001054                     __end_of_pow:
  8788                           	opt stack 0
  8789                           tosu	equ	0xFFF
  8790                           tosh	equ	0xFFE
  8791                           tosl	equ	0xFFD
  8792                           pclath	equ	0xFFA
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           prodh	equ	0xFF4
  8798                           prodl	equ	0xFF3
  8799                           intcon	equ	0xFF2
  8800                           intcon2	equ	0xFF1
  8801                           postinc0	equ	0xFEE
  8802                           wreg	equ	0xFE8
  8803                           indf1	equ	0xFE7
  8804                           postdec1	equ	0xFE5
  8805                           fsr1h	equ	0xFE2
  8806                           fsr1l	equ	0xFE1
  8807                           indf2	equ	0xFDF
  8808                           postinc2	equ	0xFDE
  8809                           postdec2	equ	0xFDD
  8810                           fsr2h	equ	0xFDA
  8811                           fsr2l	equ	0xFD9
  8812                           status	equ	0xFD8
  8813                           
  8814 ;; *************** function _log *****************
  8815 ;; Defined at:
  8816 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;  x               3   40[BANK0 ] unsigned char 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;  exponent        2   43[BANK0 ] int 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  3   40[BANK0 ] int 
  8823 ;; Registers used:
  8824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8830 ;;      Params:         0       3       0       0       0       0       0
  8831 ;;      Locals:         0       2       0       0       0       0       0
  8832 ;;      Temps:          0       0       0       0       0       0       0
  8833 ;;      Totals:         0       5       0       0       0       0       0
  8834 ;;Total ram usage:        5 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    6
  8837 ;; This function calls:
  8838 ;;		___awtoft
  8839 ;;		___ftadd
  8840 ;;		___ftmul
  8841 ;;		_eval_poly
  8842 ;;		_frexp
  8843 ;; This function is called by:
  8844 ;;		_pow
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text39
  8849  001180                     __ptext39:
  8850                           	opt stack 0
  8851  001180                     _log:
  8852                           	opt stack 22
  8853                           
  8854                           ;incstack = 0
  8855  001180  0100               	movlb	0	; () banked
  8856  001182  AF8A               	btfss	(log@x+2)& (0+255),7,b
  8857  001184  D00B               	goto	l2026
  8858                           
  8859                           ; BSR set to: 0
  8860  001186  0E00               	movlw	0
  8861  001188  6FB2               	movwf	(_errno+1)& (0+255),b
  8862  00118A  0E21               	movlw	33
  8863  00118C  6FB1               	movwf	_errno& (0+255),b
  8864  00118E  0E00               	movlw	0
  8865  001190  6F88               	movwf	?_log& (0+255),b
  8866  001192  0E00               	movlw	0
  8867  001194  6F89               	movwf	(?_log+1)& (0+255),b
  8868  001196  0E00               	movlw	0
  8869  001198  6F8A               	movwf	(?_log+2)& (0+255),b
  8870                           
  8871                           ; BSR set to: 0
  8872  00119A  0012               	return	
  8873  00119C                     l2026:
  8874                           
  8875                           ; BSR set to: 0
  8876                           
  8877                           ; BSR set to: 0
  8878  00119C  5188               	movf	log@x& (0+255),w,b
  8879  00119E  1189               	iorwf	(log@x+1)& (0+255),w,b
  8880  0011A0  118A               	iorwf	(log@x+2)& (0+255),w,b
  8881  0011A2  A4D8               	btfss	status,2,c
  8882  0011A4  D00B               	goto	l2028
  8883                           
  8884                           ; BSR set to: 0
  8885  0011A6  0E00               	movlw	0
  8886  0011A8  6FB2               	movwf	(_errno+1)& (0+255),b
  8887  0011AA  0E22               	movlw	34
  8888  0011AC  6FB1               	movwf	_errno& (0+255),b
  8889  0011AE  0E00               	movlw	0
  8890  0011B0  6F88               	movwf	?_log& (0+255),b
  8891  0011B2  0E00               	movlw	0
  8892  0011B4  6F89               	movwf	(?_log+1)& (0+255),b
  8893  0011B6  0E00               	movlw	0
  8894  0011B8  6F8A               	movwf	(?_log+2)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897  0011BA  0012               	return	
  8898  0011BC                     l2028:
  8899                           
  8900                           ; BSR set to: 0
  8901                           
  8902                           ; BSR set to: 0
  8903  0011BC  0E00               	movlw	0
  8904  0011BE  6F69               	movwf	___ftmul@f2& (0+255),b
  8905  0011C0  0E00               	movlw	0
  8906  0011C2  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  8907  0011C4  0E40               	movlw	64
  8908  0011C6  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  8909  0011C8  0E8B               	movlw	low log@exponent
  8910  0011CA  6E1B               	movwf	frexp@eptr,c
  8911  0011CC  0E00               	movlw	high log@exponent
  8912  0011CE  6E1C               	movwf	frexp@eptr+1,c
  8913  0011D0  C088  F018         	movff	log@x,frexp@value
  8914  0011D4  C089  F019         	movff	log@x+1,frexp@value+1
  8915  0011D8  C08A  F01A         	movff	log@x+2,frexp@value+2
  8916  0011DC  EC3A  F00E         	call	_frexp	;wreg free
  8917  0011E0  C018  F066         	movff	?_frexp,___ftmul@f1
  8918  0011E4  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
  8919  0011E8  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
  8920  0011EC  EC59  F00A         	call	___ftmul	;wreg free
  8921  0011F0  C066  F072         	movff	?___ftmul,___ftadd@f1
  8922  0011F4  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
  8923  0011F8  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
  8924  0011FC  0E00               	movlw	0
  8925  0011FE  0100               	movlb	0	; () banked
  8926  001200  6F75               	movwf	___ftadd@f2& (0+255),b
  8927  001202  0E80               	movlw	128
  8928  001204  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  8929  001206  0EBF               	movlw	191
  8930  001208  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  8931  00120A  ECD4  F005         	call	___ftadd	;wreg free
  8932  00120E  C072  F088         	movff	?___ftadd,log@x
  8933  001212  C073  F089         	movff	?___ftadd+1,log@x+1
  8934  001216  C074  F08A         	movff	?___ftadd+2,log@x+2
  8935  00121A  0100               	movlb	0	; () banked
  8936  00121C  078B               	decf	log@exponent& (0+255),f,b
  8937  00121E  A0D8               	btfss	status,0,c
  8938  001220  078C               	decf	(log@exponent+1)& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941  001222  C088  F07E         	movff	log@x,eval_poly@x
  8942  001226  C089  F07F         	movff	log@x+1,eval_poly@x+1
  8943  00122A  C08A  F080         	movff	log@x+2,eval_poly@x+2
  8944  00122E  0EED               	movlw	low log@coeff
  8945  001230  6F81               	movwf	eval_poly@d& (0+255),b
  8946  001232  0E7A               	movlw	high log@coeff
  8947  001234  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  8948  001236  0E00               	movlw	0
  8949  001238  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  8950  00123A  0E08               	movlw	8
  8951  00123C  6F83               	movwf	eval_poly@n& (0+255),b
  8952  00123E  EC26  F00C         	call	_eval_poly	;wreg free
  8953  001242  C07E  F088         	movff	?_eval_poly,log@x
  8954  001246  C07F  F089         	movff	?_eval_poly+1,log@x+1
  8955  00124A  C080  F08A         	movff	?_eval_poly+2,log@x+2
  8956  00124E  0E72               	movlw	114
  8957  001250  0100               	movlb	0	; () banked
  8958  001252  6F69               	movwf	___ftmul@f2& (0+255),b
  8959  001254  0E31               	movlw	49
  8960  001256  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  8961  001258  0E3F               	movlw	63
  8962  00125A  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  8963  00125C  C08B  F020         	movff	log@exponent,___awtoft@c
  8964  001260  C08C  F021         	movff	log@exponent+1,___awtoft@c+1
  8965  001264  EC8F  F013         	call	___awtoft	;wreg free
  8966  001268  C020  F066         	movff	?___awtoft,___ftmul@f1
  8967  00126C  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
  8968  001270  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
  8969  001274  EC59  F00A         	call	___ftmul	;wreg free
  8970  001278  C066  F072         	movff	?___ftmul,___ftadd@f1
  8971  00127C  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
  8972  001280  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
  8973  001284  C088  F075         	movff	log@x,___ftadd@f2
  8974  001288  C089  F076         	movff	log@x+1,___ftadd@f2+1
  8975  00128C  C08A  F077         	movff	log@x+2,___ftadd@f2+2
  8976  001290  ECD4  F005         	call	___ftadd	;wreg free
  8977  001294  C072  F088         	movff	?___ftadd,?_log
  8978  001298  C073  F089         	movff	?___ftadd+1,?_log+1
  8979  00129C  C074  F08A         	movff	?___ftadd+2,?_log+2
  8980  0012A0  0012               	return	
  8981  0012A2                     __end_of_log:
  8982                           	opt stack 0
  8983                           tosu	equ	0xFFF
  8984                           tosh	equ	0xFFE
  8985                           tosl	equ	0xFFD
  8986                           pclath	equ	0xFFA
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           intcon2	equ	0xFF1
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           indf1	equ	0xFE7
  8998                           postdec1	equ	0xFE5
  8999                           fsr1h	equ	0xFE2
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008 ;; *************** function _exp *****************
  9009 ;; Defined at:
  9010 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  x               3   49[BANK0 ] int 
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  exponent        2   55[BANK0 ] int 
  9015 ;;  sign            1   57[BANK0 ] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  3   49[BANK0 ] unsigned char 
  9018 ;; Registers used:
  9019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9025 ;;      Params:         0       3       0       0       0       0       0
  9026 ;;      Locals:         0       6       0       0       0       0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0
  9028 ;;      Totals:         0       9       0       0       0       0       0
  9029 ;;Total ram usage:        9 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    6
  9032 ;; This function calls:
  9033 ;;		___awtoft
  9034 ;;		___ftdiv
  9035 ;;		___ftge
  9036 ;;		___ftmul
  9037 ;;		___ftneg
  9038 ;;		___ftsub
  9039 ;;		___fttol
  9040 ;;		_eval_poly
  9041 ;;		_floor
  9042 ;;		_ldexp
  9043 ;; This function is called by:
  9044 ;;		_pow
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           	psect	text40
  9049  00062E                     __ptext40:
  9050                           	opt stack 0
  9051  00062E                     _exp:
  9052                           	opt stack 22
  9053                           
  9054                           ;incstack = 0
  9055  00062E  0100               	movlb	0	; () banked
  9056  000630  5191               	movf	exp@x& (0+255),w,b
  9057  000632  1192               	iorwf	(exp@x+1)& (0+255),w,b
  9058  000634  1193               	iorwf	(exp@x+2)& (0+255),w,b
  9059  000636  A4D8               	btfss	status,2,c
  9060  000638  D007               	goto	l1962
  9061                           
  9062                           ; BSR set to: 0
  9063  00063A  0E00               	movlw	0
  9064  00063C  6F91               	movwf	?_exp& (0+255),b
  9065  00063E  0E80               	movlw	128
  9066  000640  6F92               	movwf	(?_exp+1)& (0+255),b
  9067  000642  0E3F               	movlw	63
  9068  000644  6F93               	movwf	(?_exp+2)& (0+255),b
  9069                           
  9070                           ; BSR set to: 0
  9071  000646  0012               	return	
  9072  000648                     l1962:
  9073                           
  9074                           ; BSR set to: 0
  9075                           
  9076                           ; BSR set to: 0
  9077  000648  0E72               	movlw	114
  9078  00064A  6E18               	movwf	___ftge@ff1,c
  9079  00064C  0E31               	movlw	49
  9080  00064E  6E19               	movwf	___ftge@ff1+1,c
  9081  000650  0E44               	movlw	68
  9082  000652  6E1A               	movwf	___ftge@ff1+2,c
  9083  000654  C091  F01B         	movff	exp@x,___ftge@ff2
  9084  000658  C092  F01C         	movff	exp@x+1,___ftge@ff2+1
  9085  00065C  C093  F01D         	movff	exp@x+2,___ftge@ff2+2
  9086  000660  EC82  F00E         	call	___ftge	;wreg free
  9087  000664  B0D8               	btfsc	status,0,c
  9088  000666  D00C               	goto	l1964
  9089  000668  0E00               	movlw	0
  9090  00066A  0100               	movlb	0	; () banked
  9091  00066C  6FB2               	movwf	(_errno+1)& (0+255),b
  9092  00066E  0E22               	movlw	34
  9093  000670  6FB1               	movwf	_errno& (0+255),b
  9094  000672  0EFF               	movlw	255
  9095  000674  6F91               	movwf	?_exp& (0+255),b
  9096  000676  0E7F               	movlw	127
  9097  000678  6F92               	movwf	(?_exp+1)& (0+255),b
  9098  00067A  0E7F               	movlw	127
  9099  00067C  6F93               	movwf	(?_exp+2)& (0+255),b
  9100                           
  9101                           ; BSR set to: 0
  9102  00067E  0012               	return	
  9103  000680                     l1964:
  9104                           
  9105                           ; BSR set to: 0
  9106  000680  C091  F018         	movff	exp@x,___ftge@ff1
  9107  000684  C092  F019         	movff	exp@x+1,___ftge@ff1+1
  9108  000688  C093  F01A         	movff	exp@x+2,___ftge@ff1+2
  9109  00068C  0E49               	movlw	73
  9110  00068E  6E1B               	movwf	___ftge@ff2,c
  9111  000690  0E3A               	movlw	58
  9112  000692  6E1C               	movwf	___ftge@ff2+1,c
  9113  000694  0EC4               	movlw	196
  9114  000696  6E1D               	movwf	___ftge@ff2+2,c
  9115  000698  EC82  F00E         	call	___ftge	;wreg free
  9116  00069C  B0D8               	btfsc	status,0,c
  9117  00069E  D00C               	goto	l1965
  9118  0006A0  0E00               	movlw	0
  9119  0006A2  0100               	movlb	0	; () banked
  9120  0006A4  6FB2               	movwf	(_errno+1)& (0+255),b
  9121  0006A6  0E22               	movlw	34
  9122  0006A8  6FB1               	movwf	_errno& (0+255),b
  9123  0006AA  0E00               	movlw	0
  9124  0006AC  6F91               	movwf	?_exp& (0+255),b
  9125  0006AE  0E00               	movlw	0
  9126  0006B0  6F92               	movwf	(?_exp+1)& (0+255),b
  9127  0006B2  0E00               	movlw	0
  9128  0006B4  6F93               	movwf	(?_exp+2)& (0+255),b
  9129                           
  9130                           ; BSR set to: 0
  9131  0006B6  0012               	return	
  9132  0006B8                     l1965:
  9133                           
  9134                           ; BSR set to: 0
  9135  0006B8  0100               	movlb	0	; () banked
  9136  0006BA  AF93               	btfss	(exp@x+2)& (0+255),7,b
  9137  0006BC  D002               	goto	u7550
  9138  0006BE  0E01               	movlw	1
  9139  0006C0  D001               	goto	u7560
  9140  0006C2                     u7550:
  9141  0006C2  0E00               	movlw	0
  9142  0006C4                     u7560:
  9143  0006C4  6F99               	movwf	exp@sign& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146  0006C6  5199               	movf	exp@sign& (0+255),w,b
  9147  0006C8  B4D8               	btfsc	status,2,c
  9148  0006CA  D00E               	goto	l1966
  9149                           
  9150                           ; BSR set to: 0
  9151  0006CC  C091  F018         	movff	exp@x,___ftneg@f1
  9152  0006D0  C092  F019         	movff	exp@x+1,___ftneg@f1+1
  9153  0006D4  C093  F01A         	movff	exp@x+2,___ftneg@f1+2
  9154  0006D8  EC8F  F014         	call	___ftneg	;wreg free
  9155  0006DC  C018  F091         	movff	?___ftneg,exp@x
  9156  0006E0  C019  F092         	movff	?___ftneg+1,exp@x+1
  9157  0006E4  C01A  F093         	movff	?___ftneg+2,exp@x+2
  9158  0006E8                     l1966:
  9159  0006E8  C091  F066         	movff	exp@x,___ftmul@f1
  9160  0006EC  C092  F067         	movff	exp@x+1,___ftmul@f1+1
  9161  0006F0  C093  F068         	movff	exp@x+2,___ftmul@f1+2
  9162  0006F4  0EAA               	movlw	170
  9163  0006F6  0100               	movlb	0	; () banked
  9164  0006F8  6F69               	movwf	___ftmul@f2& (0+255),b
  9165  0006FA  0EB8               	movlw	184
  9166  0006FC  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  9167  0006FE  0E3F               	movlw	63
  9168  000700  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  9169  000702  EC59  F00A         	call	___ftmul	;wreg free
  9170  000706  C066  F091         	movff	?___ftmul,exp@x
  9171  00070A  C067  F092         	movff	?___ftmul+1,exp@x+1
  9172  00070E  C068  F093         	movff	?___ftmul+2,exp@x+2
  9173  000712  C091  F089         	movff	exp@x,floor@x
  9174  000716  C092  F08A         	movff	exp@x+1,floor@x+1
  9175  00071A  C093  F08B         	movff	exp@x+2,floor@x+2
  9176  00071E  EC48  F00B         	call	_floor	;wreg free
  9177  000722  C089  F094         	movff	?_floor,_exp$2941
  9178  000726  C08A  F095         	movff	?_floor+1,_exp$2941+1
  9179  00072A  C08B  F096         	movff	?_floor+2,_exp$2941+2
  9180  00072E  C094  F072         	movff	_exp$2941,___fttol@f1
  9181  000732  C095  F073         	movff	_exp$2941+1,___fttol@f1+1
  9182  000736  C096  F074         	movff	_exp$2941+2,___fttol@f1+2
  9183  00073A  ECDD  F009         	call	___fttol	;wreg free
  9184  00073E  C072  F097         	movff	?___fttol,exp@exponent
  9185  000742  C073  F098         	movff	?___fttol+1,exp@exponent+1
  9186  000746  C091  F07E         	movff	exp@x,___ftsub@f1
  9187  00074A  C092  F07F         	movff	exp@x+1,___ftsub@f1+1
  9188  00074E  C093  F080         	movff	exp@x+2,___ftsub@f1+2
  9189  000752  C097  F020         	movff	exp@exponent,___awtoft@c
  9190  000756  C098  F021         	movff	exp@exponent+1,___awtoft@c+1
  9191  00075A  EC8F  F013         	call	___awtoft	;wreg free
  9192  00075E  C020  F081         	movff	?___awtoft,___ftsub@f2
  9193  000762  C021  F082         	movff	?___awtoft+1,___ftsub@f2+1
  9194  000766  C022  F083         	movff	?___awtoft+2,___ftsub@f2+2
  9195  00076A  ECD5  F012         	call	___ftsub	;wreg free
  9196  00076E  C07E  F091         	movff	?___ftsub,exp@x
  9197  000772  C07F  F092         	movff	?___ftsub+1,exp@x+1
  9198  000776  C080  F093         	movff	?___ftsub+2,exp@x+2
  9199  00077A  C091  F07E         	movff	exp@x,eval_poly@x
  9200  00077E  C092  F07F         	movff	exp@x+1,eval_poly@x+1
  9201  000782  C093  F080         	movff	exp@x+2,eval_poly@x+2
  9202  000786  0ECF               	movlw	low exp@coeff
  9203  000788  0100               	movlb	0	; () banked
  9204  00078A  6F81               	movwf	eval_poly@d& (0+255),b
  9205  00078C  0E7A               	movlw	high exp@coeff
  9206  00078E  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  9207  000790  0E00               	movlw	0
  9208  000792  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  9209  000794  0E09               	movlw	9
  9210  000796  6F83               	movwf	eval_poly@n& (0+255),b
  9211  000798  EC26  F00C         	call	_eval_poly	;wreg free
  9212  00079C  C07E  F088         	movff	?_eval_poly,ldexp@value
  9213  0007A0  C07F  F089         	movff	?_eval_poly+1,ldexp@value+1
  9214  0007A4  C080  F08A         	movff	?_eval_poly+2,ldexp@value+2
  9215  0007A8  C097  F08B         	movff	exp@exponent,ldexp@newexp
  9216  0007AC  C098  F08C         	movff	exp@exponent+1,ldexp@newexp+1
  9217  0007B0  EC91  F00C         	call	_ldexp	;wreg free
  9218  0007B4  C088  F091         	movff	?_ldexp,exp@x
  9219  0007B8  C089  F092         	movff	?_ldexp+1,exp@x+1
  9220  0007BC  C08A  F093         	movff	?_ldexp+2,exp@x+2
  9221  0007C0  0100               	movlb	0	; () banked
  9222  0007C2  5199               	movf	exp@sign& (0+255),w,b
  9223  0007C4  B4D8               	btfsc	status,2,c
  9224  0007C6  D025               	goto	l1967
  9225                           
  9226                           ; BSR set to: 0
  9227  0007C8  2991               	incf	exp@x& (0+255),w,b
  9228  0007CA  E10E               	bnz	l7157
  9229  0007CC  0E7F               	movlw	127
  9230  0007CE  1992               	xorwf	(exp@x+1)& (0+255),w,b
  9231  0007D0  E10B               	bnz	l7157
  9232  0007D2  0E7F               	movlw	127
  9233  0007D4  1993               	xorwf	(exp@x+2)& (0+255),w,b
  9234  0007D6  A4D8               	btfss	status,2,c
  9235  0007D8  D007               	goto	l1968
  9236                           
  9237                           ; BSR set to: 0
  9238  0007DA  0E00               	movlw	0
  9239  0007DC  6F91               	movwf	?_exp& (0+255),b
  9240  0007DE  0E00               	movlw	0
  9241  0007E0  6F92               	movwf	(?_exp+1)& (0+255),b
  9242  0007E2  0E00               	movlw	0
  9243  0007E4  6F93               	movwf	(?_exp+2)& (0+255),b
  9244                           
  9245                           ; BSR set to: 0
  9246  0007E6  0012               	return	
  9247  0007E8                     l1968:
  9248  0007E8                     l7157:
  9249                           
  9250                           ; BSR set to: 0
  9251  0007E8  0E00               	movlw	0
  9252  0007EA  6E23               	movwf	___ftdiv@f1,c
  9253  0007EC  0E80               	movlw	128
  9254  0007EE  6E24               	movwf	___ftdiv@f1+1,c
  9255  0007F0  0E3F               	movlw	63
  9256  0007F2  6E25               	movwf	___ftdiv@f1+2,c
  9257  0007F4  C091  F026         	movff	exp@x,___ftdiv@f2
  9258  0007F8  C092  F027         	movff	exp@x+1,___ftdiv@f2+1
  9259  0007FC  C093  F028         	movff	exp@x+2,___ftdiv@f2+2
  9260  000800  ECD4  F00A         	call	___ftdiv	;wreg free
  9261  000804  C023  F091         	movff	?___ftdiv,?_exp
  9262  000808  C024  F092         	movff	?___ftdiv+1,?_exp+1
  9263  00080C  C025  F093         	movff	?___ftdiv+2,?_exp+2
  9264  000810  0012               	return	
  9265  000812                     l1967:
  9266                           
  9267                           ; BSR set to: 0
  9268  000812  C091  F091         	movff	exp@x,?_exp
  9269  000816  C092  F092         	movff	exp@x+1,?_exp+1
  9270  00081A  C093  F093         	movff	exp@x+2,?_exp+2
  9271  00081E  0012               	return		;funcret
  9272  000820                     __end_of_exp:
  9273                           	opt stack 0
  9274                           tosu	equ	0xFFF
  9275                           tosh	equ	0xFFE
  9276                           tosl	equ	0xFFD
  9277                           pclath	equ	0xFFA
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           intcon	equ	0xFF2
  9285                           intcon2	equ	0xFF1
  9286                           postinc0	equ	0xFEE
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           postdec1	equ	0xFE5
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _ldexp *****************
  9300 ;; Defined at:
  9301 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  value           3   40[BANK0 ] unsigned char 
  9304 ;;  newexp          2   43[BANK0 ] int 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  3   40[BANK0 ] int 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9316 ;;      Params:         0       5       0       0       0       0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0
  9318 ;;      Temps:          0       2       0       0       0       0       0
  9319 ;;      Totals:         0       7       0       0       0       0       0
  9320 ;;Total ram usage:        7 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    3
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_exp
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           	psect	text41
  9331  001922                     __ptext41:
  9332                           	opt stack 0
  9333  001922                     _ldexp:
  9334                           	opt stack 24
  9335                           
  9336                           ;incstack = 0
  9337  001922  0100               	movlb	0	; () banked
  9338  001924  5188               	movf	ldexp@value& (0+255),w,b
  9339  001926  1189               	iorwf	(ldexp@value+1)& (0+255),w,b
  9340  001928  118A               	iorwf	(ldexp@value+2)& (0+255),w,b
  9341  00192A  A4D8               	btfss	status,2,c
  9342  00192C  D007               	goto	l1986
  9343                           
  9344                           ; BSR set to: 0
  9345  00192E  0E00               	movlw	0
  9346  001930  6F88               	movwf	?_ldexp& (0+255),b
  9347  001932  0E00               	movlw	0
  9348  001934  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9349  001936  0E00               	movlw	0
  9350  001938  6F8A               	movwf	(?_ldexp+2)& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353  00193A  0012               	return	
  9354  00193C                     l1986:
  9355                           
  9356                           ; BSR set to: 0
  9357                           
  9358                           ; BSR set to: 0
  9359  00193C  518A               	movf	(ldexp@value+2)& (0+255),w,b
  9360  00193E  0B7F               	andlw	127
  9361  001940  6F8D               	movwf	??_ldexp& (0+255),b
  9362  001942  6B8E               	clrf	(??_ldexp+1)& (0+255),b
  9363  001944  90D8               	bcf	status,0,c
  9364  001946  378D               	rlcf	??_ldexp& (0+255),f,b
  9365  001948  378E               	rlcf	(??_ldexp+1)& (0+255),f,b
  9366  00194A  518D               	movf	??_ldexp& (0+255),w,b
  9367  00194C  278B               	addwf	ldexp@newexp& (0+255),f,b
  9368  00194E  518E               	movf	(??_ldexp+1)& (0+255),w,b
  9369  001950  238C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9370  001952  AF89               	btfss	(ldexp@value+1)& (0+255),7,b
  9371  001954  D003               	goto	u7370
  9372  001956  6B8D               	clrf	??_ldexp& (0+255),b
  9373  001958  2B8D               	incf	??_ldexp& (0+255),f,b
  9374  00195A  D002               	goto	u7378
  9375  00195C                     u7370:
  9376  00195C  0100               	movlb	0	; () banked
  9377  00195E  6B8D               	clrf	??_ldexp& (0+255),b
  9378  001960                     u7378:
  9379  001960  518D               	movf	??_ldexp& (0+255),w,b
  9380  001962  278B               	addwf	ldexp@newexp& (0+255),f,b
  9381  001964  0E00               	movlw	0
  9382  001966  238C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  9383  001968  AF8C               	btfss	(ldexp@newexp+1)& (0+255),7,b
  9384  00196A  D00B               	goto	l1988
  9385                           
  9386                           ; BSR set to: 0
  9387  00196C  0E00               	movlw	0
  9388  00196E  6FB2               	movwf	(_errno+1)& (0+255),b
  9389  001970  0E22               	movlw	34
  9390  001972  6FB1               	movwf	_errno& (0+255),b
  9391  001974  0E00               	movlw	0
  9392  001976  6F88               	movwf	?_ldexp& (0+255),b
  9393  001978  0E00               	movlw	0
  9394  00197A  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9395  00197C  0E00               	movlw	0
  9396  00197E                     L1:
  9397  00197E  6F8A               	movwf	(?_ldexp+2)& (0+255),b
  9398                           
  9399                           ; BSR set to: 0
  9400  001980  0012               	return	
  9401  001982                     l1988:
  9402                           
  9403                           ; BSR set to: 0
  9404                           
  9405                           ; BSR set to: 0
  9406  001982  BF8C               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  9407  001984  D015               	goto	l1990
  9408  001986  058C               	decf	(ldexp@newexp+1)& (0+255),w,b
  9409  001988  A0D8               	btfss	status,0,c
  9410  00198A  D012               	goto	l1990
  9411                           
  9412                           ; BSR set to: 0
  9413  00198C  0E00               	movlw	0
  9414  00198E  6FB2               	movwf	(_errno+1)& (0+255),b
  9415  001990  0E22               	movlw	34
  9416  001992  6FB1               	movwf	_errno& (0+255),b
  9417                           
  9418                           ; BSR set to: 0
  9419  001994  AF8A               	btfss	(ldexp@value+2)& (0+255),7,b
  9420  001996  D006               	goto	l1991
  9421                           
  9422                           ; BSR set to: 0
  9423  001998  0EFF               	movlw	255
  9424  00199A  6F88               	movwf	?_ldexp& (0+255),b
  9425  00199C  0E7F               	movlw	127
  9426  00199E  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9427  0019A0  0EFF               	movlw	255
  9428  0019A2  D7ED               	goto	L1
  9429  0019A4                     l1991:
  9430                           
  9431                           ; BSR set to: 0
  9432                           
  9433                           ; BSR set to: 0
  9434  0019A4  0EFF               	movlw	255
  9435  0019A6  6F88               	movwf	?_ldexp& (0+255),b
  9436  0019A8  0E7F               	movlw	127
  9437  0019AA  6F89               	movwf	(?_ldexp+1)& (0+255),b
  9438  0019AC  0E7F               	movlw	127
  9439  0019AE  D7E7               	goto	L1
  9440  0019B0                     l1990:
  9441                           
  9442                           ; BSR set to: 0
  9443                           
  9444                           ; BSR set to: 0
  9445  0019B0  358C               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9446  0019B2  318C               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9447  0019B4  6F8E               	movwf	(??_ldexp+1)& (0+255),b
  9448  0019B6  318B               	rrcf	ldexp@newexp& (0+255),w,b
  9449  0019B8  6F8D               	movwf	??_ldexp& (0+255),b
  9450  0019BA  518A               	movf	(ldexp@value+2)& (0+255),w,b
  9451  0019BC  198D               	xorwf	??_ldexp& (0+255),w,b
  9452  0019BE  0B80               	andlw	-128
  9453  0019C0  198D               	xorwf	??_ldexp& (0+255),w,b
  9454  0019C2  6F8A               	movwf	(ldexp@value+2)& (0+255),b
  9455  0019C4  C08B  F08D         	movff	ldexp@newexp,??_ldexp
  9456  0019C8  0E01               	movlw	1
  9457  0019CA  178D               	andwf	??_ldexp& (0+255),f,b
  9458  0019CC  338D               	rrcf	??_ldexp& (0+255),f,b
  9459  0019CE  338D               	rrcf	??_ldexp& (0+255),f,b
  9460  0019D0  5189               	movf	(ldexp@value+1)& (0+255),w,b
  9461  0019D2  198D               	xorwf	??_ldexp& (0+255),w,b
  9462  0019D4  0B7F               	andlw	-129
  9463  0019D6  198D               	xorwf	??_ldexp& (0+255),w,b
  9464  0019D8  6F89               	movwf	(ldexp@value+1)& (0+255),b
  9465                           
  9466                           ; BSR set to: 0
  9467                           
  9468                           ; BSR set to: 0
  9469                           
  9470                           ; BSR set to: 0
  9471  0019DA  C088  F088         	movff	ldexp@value,?_ldexp
  9472  0019DE  C089  F089         	movff	ldexp@value+1,?_ldexp+1
  9473  0019E2  C08A  F08A         	movff	ldexp@value+2,?_ldexp+2
  9474  0019E6  0012               	return	
  9475  0019E8                     __end_of_ldexp:
  9476                           	opt stack 0
  9477                           tosu	equ	0xFFF
  9478                           tosh	equ	0xFFE
  9479                           tosl	equ	0xFFD
  9480                           pclath	equ	0xFFA
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           intcon2	equ	0xFF1
  9489                           postinc0	equ	0xFEE
  9490                           wreg	equ	0xFE8
  9491                           indf1	equ	0xFE7
  9492                           postdec1	equ	0xFE5
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function _floor *****************
  9503 ;; Defined at:
  9504 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  x               3   41[BANK0 ] int 
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  i               3   44[BANK0 ] int 
  9509 ;;  expon           2   47[BANK0 ] int 
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  3   41[BANK0 ] int 
  9512 ;; Registers used:
  9513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9519 ;;      Params:         0       3       0       0       0       0       0
  9520 ;;      Locals:         0       5       0       0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0
  9522 ;;      Totals:         0       8       0       0       0       0       0
  9523 ;;Total ram usage:        8 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    5
  9526 ;; This function calls:
  9527 ;;		___altoft
  9528 ;;		___ftadd
  9529 ;;		___ftge
  9530 ;;		___fttol
  9531 ;;		_frexp
  9532 ;; This function is called by:
  9533 ;;		_exp
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           	psect	text42
  9538  001690                     __ptext42:
  9539                           	opt stack 0
  9540  001690                     _floor:
  9541                           	opt stack 22
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;incstack = 0
  9545  001690  C089  F018         	movff	floor@x,frexp@value
  9546  001694  C08A  F019         	movff	floor@x+1,frexp@value+1
  9547  001698  C08B  F01A         	movff	floor@x+2,frexp@value+2
  9548  00169C  0E8F               	movlw	low floor@expon
  9549  00169E  6E1B               	movwf	frexp@eptr,c
  9550  0016A0  0E00               	movlw	high floor@expon
  9551  0016A2  6E1C               	movwf	frexp@eptr+1,c
  9552  0016A4  EC3A  F00E         	call	_frexp	;wreg free
  9553  0016A8  0100               	movlb	0	; () banked
  9554  0016AA  AF90               	btfss	(floor@expon+1)& (0+255),7,b
  9555  0016AC  D010               	goto	l1973
  9556                           
  9557                           ; BSR set to: 0
  9558  0016AE  AF8B               	btfss	(floor@x+2)& (0+255),7,b
  9559  0016B0  D007               	goto	l1974
  9560                           
  9561                           ; BSR set to: 0
  9562  0016B2  0E00               	movlw	0
  9563  0016B4  6F89               	movwf	?_floor& (0+255),b
  9564  0016B6  0E80               	movlw	128
  9565  0016B8  6F8A               	movwf	(?_floor+1)& (0+255),b
  9566  0016BA  0EBF               	movlw	191
  9567  0016BC  6F8B               	movwf	(?_floor+2)& (0+255),b
  9568                           
  9569                           ; BSR set to: 0
  9570  0016BE  0012               	return	
  9571  0016C0                     l1974:
  9572                           
  9573                           ; BSR set to: 0
  9574                           
  9575                           ; BSR set to: 0
  9576  0016C0  0E00               	movlw	0
  9577  0016C2  6F89               	movwf	?_floor& (0+255),b
  9578  0016C4  0E00               	movlw	0
  9579  0016C6  6F8A               	movwf	(?_floor+1)& (0+255),b
  9580  0016C8  0E00               	movlw	0
  9581  0016CA  6F8B               	movwf	(?_floor+2)& (0+255),b
  9582                           
  9583                           ; BSR set to: 0
  9584  0016CC  0012               	return	
  9585  0016CE                     l1973:
  9586                           
  9587                           ; BSR set to: 0
  9588                           
  9589                           ; BSR set to: 0
  9590  0016CE  5190               	movf	(floor@expon+1)& (0+255),w,b
  9591  0016D0  E104               	bnz	u7330
  9592  0016D2  0E15               	movlw	21
  9593  0016D4  5D8F               	subwf	floor@expon& (0+255),w,b
  9594  0016D6  A0D8               	btfss	status,0,c
  9595  0016D8  D007               	goto	l1976
  9596  0016DA                     u7330:
  9597                           
  9598                           ; BSR set to: 0
  9599  0016DA  C089  F089         	movff	floor@x,?_floor
  9600  0016DE  C08A  F08A         	movff	floor@x+1,?_floor+1
  9601  0016E2  C08B  F08B         	movff	floor@x+2,?_floor+2
  9602  0016E6  0012               	return	
  9603  0016E8                     l1976:
  9604                           
  9605                           ; BSR set to: 0
  9606                           
  9607                           ; BSR set to: 0
  9608  0016E8  C089  F072         	movff	floor@x,___fttol@f1
  9609  0016EC  C08A  F073         	movff	floor@x+1,___fttol@f1+1
  9610  0016F0  C08B  F074         	movff	floor@x+2,___fttol@f1+2
  9611  0016F4  ECDD  F009         	call	___fttol	;wreg free
  9612  0016F8  C072  F081         	movff	?___fttol,___altoft@c
  9613  0016FC  C073  F082         	movff	?___fttol+1,___altoft@c+1
  9614  001700  C074  F083         	movff	?___fttol+2,___altoft@c+2
  9615  001704  C075  F084         	movff	?___fttol+3,___altoft@c+3
  9616  001708  EC0B  F00F         	call	___altoft	;wreg free
  9617  00170C  C081  F08C         	movff	?___altoft,floor@i
  9618  001710  C082  F08D         	movff	?___altoft+1,floor@i+1
  9619  001714  C083  F08E         	movff	?___altoft+2,floor@i+2
  9620  001718  C089  F018         	movff	floor@x,___ftge@ff1
  9621  00171C  C08A  F019         	movff	floor@x+1,___ftge@ff1+1
  9622  001720  C08B  F01A         	movff	floor@x+2,___ftge@ff1+2
  9623  001724  C08C  F01B         	movff	floor@i,___ftge@ff2
  9624  001728  C08D  F01C         	movff	floor@i+1,___ftge@ff2+1
  9625  00172C  C08E  F01D         	movff	floor@i+2,___ftge@ff2+2
  9626  001730  EC82  F00E         	call	___ftge	;wreg free
  9627  001734  B0D8               	btfsc	status,0,c
  9628  001736  D016               	goto	l1977
  9629  001738  C08C  F072         	movff	floor@i,___ftadd@f1
  9630  00173C  C08D  F073         	movff	floor@i+1,___ftadd@f1+1
  9631  001740  C08E  F074         	movff	floor@i+2,___ftadd@f1+2
  9632  001744  0E00               	movlw	0
  9633  001746  0100               	movlb	0	; () banked
  9634  001748  6F75               	movwf	___ftadd@f2& (0+255),b
  9635  00174A  0E80               	movlw	128
  9636  00174C  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  9637  00174E  0EBF               	movlw	191
  9638  001750  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  9639  001752  ECD4  F005         	call	___ftadd	;wreg free
  9640  001756  C072  F089         	movff	?___ftadd,?_floor
  9641  00175A  C073  F08A         	movff	?___ftadd+1,?_floor+1
  9642  00175E  C074  F08B         	movff	?___ftadd+2,?_floor+2
  9643  001762  0012               	return	
  9644  001764                     l1977:
  9645  001764  C08C  F089         	movff	floor@i,?_floor
  9646  001768  C08D  F08A         	movff	floor@i+1,?_floor+1
  9647  00176C  C08E  F08B         	movff	floor@i+2,?_floor+2
  9648  001770  0012               	return		;funcret
  9649  001772                     __end_of_floor:
  9650                           	opt stack 0
  9651                           tosu	equ	0xFFF
  9652                           tosh	equ	0xFFE
  9653                           tosl	equ	0xFFD
  9654                           pclath	equ	0xFFA
  9655                           tblptru	equ	0xFF8
  9656                           tblptrh	equ	0xFF7
  9657                           tblptrl	equ	0xFF6
  9658                           tablat	equ	0xFF5
  9659                           prodh	equ	0xFF4
  9660                           prodl	equ	0xFF3
  9661                           intcon	equ	0xFF2
  9662                           intcon2	equ	0xFF1
  9663                           postinc0	equ	0xFEE
  9664                           wreg	equ	0xFE8
  9665                           indf1	equ	0xFE7
  9666                           postdec1	equ	0xFE5
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676 ;; *************** function _frexp *****************
  9677 ;; Defined at:
  9678 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  value           3   23[COMRAM] int 
  9681 ;;  eptr            2   26[COMRAM] PTR int 
  9682 ;;		 -> log@exponent(2), floor@expon(2), 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;                  3   23[COMRAM] PTR int 
  9687 ;; Registers used:
  9688 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9694 ;;      Params:         5       0       0       0       0       0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0
  9696 ;;      Temps:          2       0       0       0       0       0       0
  9697 ;;      Totals:         7       0       0       0       0       0       0
  9698 ;;Total ram usage:        7 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    3
  9701 ;; This function calls:
  9702 ;;		Nothing
  9703 ;; This function is called by:
  9704 ;;		_floor
  9705 ;;		_log
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           	psect	text43
  9710  001C74                     __ptext43:
  9711                           	opt stack 0
  9712  001C74                     _frexp:
  9713                           	opt stack 24
  9714                           
  9715                           ;incstack = 0
  9716  001C74  5018               	movf	frexp@value,w,c
  9717  001C76  1019               	iorwf	frexp@value+1,w,c
  9718  001C78  101A               	iorwf	frexp@value+2,w,c
  9719  001C7A  A4D8               	btfss	status,2,c
  9720  001C7C  D00F               	goto	l1982
  9721  001C7E  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9722  001C82  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9723  001C86  0E00               	movlw	0
  9724  001C88  6EDE               	movwf	postinc2,c
  9725  001C8A  0E00               	movlw	0
  9726  001C8C  6EDD               	movwf	postdec2,c
  9727  001C8E  0E00               	movlw	0
  9728  001C90  6E18               	movwf	?_frexp,c
  9729  001C92  0E00               	movlw	0
  9730  001C94  6E19               	movwf	?_frexp+1,c
  9731  001C96  0E00               	movlw	0
  9732  001C98  6E1A               	movwf	?_frexp+2,c
  9733  001C9A  0012               	return	
  9734  001C9C                     l1982:
  9735  001C9C  501A               	movf	frexp@value+2,w,c
  9736  001C9E  0B7F               	andlw	127
  9737  001CA0  6E1D               	movwf	??_frexp& (0+255),c
  9738  001CA2  6A1E               	clrf	(??_frexp+1)& (0+255),c
  9739  001CA4  90D8               	bcf	status,0,c
  9740  001CA6  361D               	rlcf	??_frexp,f,c
  9741  001CA8  361E               	rlcf	??_frexp+1,f,c
  9742  001CAA  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9743  001CAE  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9744  001CB2  C01D  FFDE         	movff	??_frexp,postinc2
  9745  001CB6  C01E  FFDD         	movff	??_frexp+1,postdec2
  9746  001CBA  AE19               	btfss	frexp@value+1,7,c
  9747  001CBC  D003               	goto	u7000
  9748  001CBE  6A1D               	clrf	??_frexp& (0+255),c
  9749  001CC0  2A1D               	incf	??_frexp& (0+255),f,c
  9750  001CC2  D001               	goto	u7008
  9751  001CC4                     u7000:
  9752  001CC4  6A1D               	clrf	??_frexp& (0+255),c
  9753  001CC6                     u7008:
  9754  001CC6  501D               	movf	??_frexp,w,c
  9755  001CC8  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9756  001CCC  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9757  001CD0  12DE               	iorwf	postinc2,f,c
  9758  001CD2  0E00               	movlw	0
  9759  001CD4  12DD               	iorwf	postdec2,f,c
  9760  001CD6  C01B  FFD9         	movff	frexp@eptr,fsr2l
  9761  001CDA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  9762  001CDE  0E82               	movlw	130
  9763  001CE0  26DE               	addwf	postinc2,f,c
  9764  001CE2  0EFF               	movlw	255
  9765  001CE4  22DD               	addwfc	postdec2,f,c
  9766  001CE6  801A               	bsf	frexp@value+2,0,c
  9767  001CE8  821A               	bsf	frexp@value+2,1,c
  9768  001CEA  841A               	bsf	frexp@value+2,2,c
  9769  001CEC  861A               	bsf	frexp@value+2,3,c
  9770  001CEE  881A               	bsf	frexp@value+2,4,c
  9771  001CF0  8A1A               	bsf	frexp@value+2,5,c
  9772  001CF2  9C1A               	bcf	frexp@value+2,6,c
  9773  001CF4  9E19               	bcf	frexp@value+1,7,c
  9774  001CF6  C018  F018         	movff	frexp@value,?_frexp
  9775  001CFA  C019  F019         	movff	frexp@value+1,?_frexp+1
  9776  001CFE  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  9777  001D02  0012               	return	
  9778  001D04                     __end_of_frexp:
  9779                           	opt stack 0
  9780                           tosu	equ	0xFFF
  9781                           tosh	equ	0xFFE
  9782                           tosl	equ	0xFFD
  9783                           pclath	equ	0xFFA
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon2	equ	0xFF1
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           indf1	equ	0xFE7
  9795                           postdec1	equ	0xFE5
  9796                           fsr1h	equ	0xFE2
  9797                           fsr1l	equ	0xFE1
  9798                           indf2	equ	0xFDF
  9799                           postinc2	equ	0xFDE
  9800                           postdec2	equ	0xFDD
  9801                           fsr2h	equ	0xFDA
  9802                           fsr2l	equ	0xFD9
  9803                           status	equ	0xFD8
  9804                           
  9805 ;; *************** function ___fttol *****************
  9806 ;; Defined at:
  9807 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  f1              3   18[BANK0 ] float 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;  lval            4   28[BANK0 ] unsigned long 
  9812 ;;  exp1            1   32[BANK0 ] unsigned char 
  9813 ;;  sign1           1   27[BANK0 ] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  4   18[BANK0 ] long 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9823 ;;      Params:         0       4       0       0       0       0       0
  9824 ;;      Locals:         0       6       0       0       0       0       0
  9825 ;;      Temps:          0       5       0       0       0       0       0
  9826 ;;      Totals:         0      15       0       0       0       0       0
  9827 ;;Total ram usage:       15 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    3
  9830 ;; This function calls:
  9831 ;;		Nothing
  9832 ;; This function is called by:
  9833 ;;		_SampleSingleChannel
  9834 ;;		_pow
  9835 ;;		_exp
  9836 ;;		_floor
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text44
  9841  0013BA                     __ptext44:
  9842                           	opt stack 0
  9843  0013BA                     ___fttol:
  9844                           	opt stack 23
  9845                           
  9846                           ;incstack = 0
  9847  0013BA  C074  F076         	movff	___fttol@f1+2,??___fttol
  9848  0013BE  0100               	movlb	0	; () banked
  9849  0013C0  6B77               	clrf	(??___fttol+1)& (0+255),b
  9850  0013C2  6B78               	clrf	(??___fttol+2)& (0+255),b
  9851  0013C4  3573               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9852  0013C6  3776               	rlcf	??___fttol& (0+255),f,b
  9853  0013C8  E301               	bnc	u6851
  9854  0013CA  8177               	bsf	(??___fttol+1)& (0+255),0,b
  9855  0013CC                     u6851:
  9856  0013CC  5176               	movf	??___fttol& (0+255),w,b
  9857  0013CE  6F80               	movwf	___fttol@exp1& (0+255),b
  9858  0013D0  5180               	movf	___fttol@exp1& (0+255),w,b
  9859  0013D2  A4D8               	btfss	status,2,c
  9860  0013D4  D009               	goto	l1639
  9861                           
  9862                           ; BSR set to: 0
  9863  0013D6  0E00               	movlw	0
  9864  0013D8  6F72               	movwf	?___fttol& (0+255),b
  9865  0013DA  0E00               	movlw	0
  9866  0013DC  6F73               	movwf	(?___fttol+1)& (0+255),b
  9867  0013DE  0E00               	movlw	0
  9868  0013E0  6F74               	movwf	(?___fttol+2)& (0+255),b
  9869  0013E2  0E00               	movlw	0
  9870  0013E4  6F75               	movwf	(?___fttol+3)& (0+255),b
  9871                           
  9872                           ; BSR set to: 0
  9873  0013E6  0012               	return	
  9874  0013E8                     l1639:
  9875                           
  9876                           ; BSR set to: 0
  9877                           
  9878                           ; BSR set to: 0
  9879  0013E8  0E17               	movlw	23
  9880  0013EA  6F76               	movwf	??___fttol& (0+255),b
  9881  0013EC  C072  F077         	movff	___fttol@f1,??___fttol+1
  9882  0013F0  C073  F078         	movff	___fttol@f1+1,??___fttol+2
  9883  0013F4  C074  F079         	movff	___fttol@f1+2,??___fttol+3
  9884  0013F8  2976               	incf	??___fttol& (0+255),w,b
  9885  0013FA  6F7A               	movwf	(??___fttol+4)& (0+255),b
  9886  0013FC  D004               	goto	u6870
  9887  0013FE                     u6875:
  9888  0013FE  90D8               	bcf	status,0,c
  9889  001400  3379               	rrcf	(??___fttol+3)& (0+255),f,b
  9890  001402  3378               	rrcf	(??___fttol+2)& (0+255),f,b
  9891  001404  3377               	rrcf	(??___fttol+1)& (0+255),f,b
  9892  001406                     u6870:
  9893  001406  2F7A               	decfsz	(??___fttol+4)& (0+255),f,b
  9894  001408  D7FA               	goto	u6875
  9895  00140A  0100               	movlb	0	; () banked
  9896  00140C  5177               	movf	(??___fttol+1)& (0+255),w,b
  9897  00140E  6F7B               	movwf	___fttol@sign1& (0+255),b
  9898                           
  9899                           ; BSR set to: 0
  9900  001410  8F73               	bsf	(___fttol@f1+1)& (0+255),7,b
  9901                           
  9902                           ; BSR set to: 0
  9903  001412  0EFF               	movlw	255
  9904  001414  1772               	andwf	___fttol@f1& (0+255),f,b
  9905  001416  0EFF               	movlw	255
  9906  001418  1773               	andwf	(___fttol@f1+1)& (0+255),f,b
  9907  00141A  0E00               	movlw	0
  9908  00141C  1774               	andwf	(___fttol@f1+2)& (0+255),f,b
  9909                           
  9910                           ; BSR set to: 0
  9911  00141E  5172               	movf	___fttol@f1& (0+255),w,b
  9912  001420  6F7C               	movwf	___fttol@lval& (0+255),b
  9913  001422  5173               	movf	(___fttol@f1+1)& (0+255),w,b
  9914  001424  6F7D               	movwf	(___fttol@lval+1)& (0+255),b
  9915  001426  5174               	movf	(___fttol@f1+2)& (0+255),w,b
  9916  001428  6F7E               	movwf	(___fttol@lval+2)& (0+255),b
  9917  00142A  6B7F               	clrf	(___fttol@lval+3)& (0+255),b
  9918                           
  9919                           ; BSR set to: 0
  9920  00142C  0E8E               	movlw	142
  9921  00142E  5F80               	subwf	___fttol@exp1& (0+255),f,b
  9922                           
  9923                           ; BSR set to: 0
  9924  001430  AF80               	btfss	___fttol@exp1& (0+255),7,b
  9925  001432  D016               	goto	l1641
  9926                           
  9927                           ; BSR set to: 0
  9928  001434  5180               	movf	___fttol@exp1& (0+255),w,b
  9929  001436  0A80               	xorlw	128
  9930  001438  0F8F               	addlw	143
  9931  00143A  B0D8               	btfsc	status,0,c
  9932  00143C  D009               	goto	l1642
  9933                           
  9934                           ; BSR set to: 0
  9935  00143E  0E00               	movlw	0
  9936  001440  6F72               	movwf	?___fttol& (0+255),b
  9937  001442  0E00               	movlw	0
  9938  001444  6F73               	movwf	(?___fttol+1)& (0+255),b
  9939  001446  0E00               	movlw	0
  9940  001448  6F74               	movwf	(?___fttol+2)& (0+255),b
  9941  00144A  0E00               	movlw	0
  9942  00144C  6F75               	movwf	(?___fttol+3)& (0+255),b
  9943                           
  9944                           ; BSR set to: 0
  9945  00144E  0012               	return	
  9946  001450                     l1642:
  9947                           
  9948                           ; BSR set to: 0
  9949                           
  9950                           ; BSR set to: 0
  9951                           
  9952                           ; BSR set to: 0
  9953  001450  90D8               	bcf	status,0,c
  9954  001452  337F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9955  001454  337E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9956  001456  337D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9957  001458  337C               	rrcf	___fttol@lval& (0+255),f,b
  9958                           
  9959                           ; BSR set to: 0
  9960  00145A  3F80               	incfsz	___fttol@exp1& (0+255),f,b
  9961  00145C  D7F9               	goto	l1642
  9962                           
  9963                           ; BSR set to: 0
  9964  00145E  D015               	goto	u6910
  9965  001460                     l1641:
  9966                           
  9967                           ; BSR set to: 0
  9968                           
  9969                           ; BSR set to: 0
  9970  001460  0E17               	movlw	23
  9971  001462  6580               	cpfsgt	___fttol@exp1& (0+255),b
  9972  001464  D00F               	goto	l1647
  9973                           
  9974                           ; BSR set to: 0
  9975  001466  0E00               	movlw	0
  9976  001468  6F72               	movwf	?___fttol& (0+255),b
  9977  00146A  0E00               	movlw	0
  9978  00146C  6F73               	movwf	(?___fttol+1)& (0+255),b
  9979  00146E  0E00               	movlw	0
  9980  001470  6F74               	movwf	(?___fttol+2)& (0+255),b
  9981  001472  0E00               	movlw	0
  9982  001474  6F75               	movwf	(?___fttol+3)& (0+255),b
  9983                           
  9984                           ; BSR set to: 0
  9985  001476  0012               	return	
  9986  001478                     
  9987                           ; BSR set to: 0
  9988                           
  9989                           ; BSR set to: 0
  9990  001478  90D8               	bcf	status,0,c
  9991  00147A  377C               	rlcf	___fttol@lval& (0+255),f,b
  9992  00147C  377D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9993  00147E  377E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9994  001480  377F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9995  001482  0780               	decf	___fttol@exp1& (0+255),f,b
  9996  001484                     l1647:
  9997                           
  9998                           ; BSR set to: 0
  9999                           
 10000                           ; BSR set to: 0
 10001  001484  5180               	movf	___fttol@exp1& (0+255),w,b
 10002  001486  A4D8               	btfss	status,2,c
 10003  001488  D7F7               	goto	l1648
 10004  00148A                     u6910:
 10005                           
 10006                           ; BSR set to: 0
 10007                           
 10008                           ; BSR set to: 0
 10009                           
 10010                           ; BSR set to: 0
 10011  00148A  517B               	movf	___fttol@sign1& (0+255),w,b
 10012  00148C  B4D8               	btfsc	status,2,c
 10013  00148E  D008               	goto	l1650
 10014                           
 10015                           ; BSR set to: 0
 10016  001490  1F7F               	comf	(___fttol@lval+3)& (0+255),f,b
 10017  001492  1F7E               	comf	(___fttol@lval+2)& (0+255),f,b
 10018  001494  1F7D               	comf	(___fttol@lval+1)& (0+255),f,b
 10019  001496  6D7C               	negf	___fttol@lval& (0+255),b
 10020  001498  0E00               	movlw	0
 10021  00149A  237D               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10022  00149C  237E               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10023  00149E  237F               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10024  0014A0                     l1650:
 10025                           
 10026                           ; BSR set to: 0
 10027                           
 10028                           ; BSR set to: 0
 10029  0014A0  C07C  F072         	movff	___fttol@lval,?___fttol
 10030  0014A4  C07D  F073         	movff	___fttol@lval+1,?___fttol+1
 10031  0014A8  C07E  F074         	movff	___fttol@lval+2,?___fttol+2
 10032  0014AC  C07F  F075         	movff	___fttol@lval+3,?___fttol+3
 10033  0014B0  0012               	return	
 10034  0014B2                     __end_of___fttol:
 10035                           	opt stack 0
 10036                           tosu	equ	0xFFF
 10037                           tosh	equ	0xFFE
 10038                           tosl	equ	0xFFD
 10039                           pclath	equ	0xFFA
 10040                           tblptru	equ	0xFF8
 10041                           tblptrh	equ	0xFF7
 10042                           tblptrl	equ	0xFF6
 10043                           tablat	equ	0xFF5
 10044                           prodh	equ	0xFF4
 10045                           prodl	equ	0xFF3
 10046                           intcon	equ	0xFF2
 10047                           intcon2	equ	0xFF1
 10048                           postinc0	equ	0xFEE
 10049                           wreg	equ	0xFE8
 10050                           indf1	equ	0xFE7
 10051                           postdec1	equ	0xFE5
 10052                           fsr1h	equ	0xFE2
 10053                           fsr1l	equ	0xFE1
 10054                           indf2	equ	0xFDF
 10055                           postinc2	equ	0xFDE
 10056                           postdec2	equ	0xFDD
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function ___ftge *****************
 10062 ;; Defined at:
 10063 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  ff1             3   23[COMRAM] float 
 10066 ;;  ff2             3   26[COMRAM] float 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;		None
 10069 ;; Return value:  Size  Location     Type
 10070 ;;		None               void
 10071 ;; Registers used:
 10072 ;;		wreg, status,2, status,0
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10078 ;;      Params:         6       0       0       0       0       0       0
 10079 ;;      Locals:         0       0       0       0       0       0       0
 10080 ;;      Temps:          3       0       0       0       0       0       0
 10081 ;;      Totals:         9       0       0       0       0       0       0
 10082 ;;Total ram usage:        9 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; Hardware stack levels required when called:    3
 10085 ;; This function calls:
 10086 ;;		Nothing
 10087 ;; This function is called by:
 10088 ;;		_pow
 10089 ;;		_exp
 10090 ;;		_floor
 10091 ;;		_CheckFlashPrecentage
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           	psect	text45
 10096  001D04                     __ptext45:
 10097                           	opt stack 0
 10098  001D04                     ___ftge:
 10099                           	opt stack 23
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;incstack = 0
 10103  001D04  AE1A               	btfss	___ftge@ff1+2,7,c
 10104  001D06  D016               	goto	l1611
 10105  001D08  C018  F01E         	movff	___ftge@ff1,??___ftge
 10106  001D0C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 10107  001D10  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 10108  001D14  1E1E               	comf	??___ftge,f,c
 10109  001D16  1E1F               	comf	??___ftge+1,f,c
 10110  001D18  1E20               	comf	??___ftge+2,f,c
 10111  001D1A  2A1E               	incf	??___ftge,f,c
 10112  001D1C  0E00               	movlw	0
 10113  001D1E  221F               	addwfc	??___ftge+1,f,c
 10114  001D20  2220               	addwfc	??___ftge+2,f,c
 10115  001D22  0E00               	movlw	0
 10116  001D24  241E               	addwf	??___ftge,w,c
 10117  001D26  6E18               	movwf	___ftge@ff1,c
 10118  001D28  0E00               	movlw	0
 10119  001D2A  201F               	addwfc	??___ftge+1,w,c
 10120  001D2C  6E19               	movwf	___ftge@ff1+1,c
 10121  001D2E  0E80               	movlw	128
 10122  001D30  2020               	addwfc	??___ftge+2,w,c
 10123  001D32  6E1A               	movwf	___ftge@ff1+2,c
 10124  001D34                     l1611:
 10125  001D34  AE1D               	btfss	___ftge@ff2+2,7,c
 10126  001D36  D016               	goto	l1612
 10127  001D38  C01B  F01E         	movff	___ftge@ff2,??___ftge
 10128  001D3C  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 10129  001D40  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 10130  001D44  1E1E               	comf	??___ftge,f,c
 10131  001D46  1E1F               	comf	??___ftge+1,f,c
 10132  001D48  1E20               	comf	??___ftge+2,f,c
 10133  001D4A  2A1E               	incf	??___ftge,f,c
 10134  001D4C  0E00               	movlw	0
 10135  001D4E  221F               	addwfc	??___ftge+1,f,c
 10136  001D50  2220               	addwfc	??___ftge+2,f,c
 10137  001D52  0E00               	movlw	0
 10138  001D54  241E               	addwf	??___ftge,w,c
 10139  001D56  6E1B               	movwf	___ftge@ff2,c
 10140  001D58  0E00               	movlw	0
 10141  001D5A  201F               	addwfc	??___ftge+1,w,c
 10142  001D5C  6E1C               	movwf	___ftge@ff2+1,c
 10143  001D5E  0E80               	movlw	128
 10144  001D60  2020               	addwfc	??___ftge+2,w,c
 10145  001D62  6E1D               	movwf	___ftge@ff2+2,c
 10146  001D64                     l1612:
 10147  001D64  0E00               	movlw	0
 10148  001D66  1A18               	xorwf	___ftge@ff1,f,c
 10149  001D68  0E00               	movlw	0
 10150  001D6A  1A19               	xorwf	___ftge@ff1+1,f,c
 10151  001D6C  0E80               	movlw	128
 10152  001D6E  1A1A               	xorwf	___ftge@ff1+2,f,c
 10153  001D70  0E00               	movlw	0
 10154  001D72  1A1B               	xorwf	___ftge@ff2,f,c
 10155  001D74  0E00               	movlw	0
 10156  001D76  1A1C               	xorwf	___ftge@ff2+1,f,c
 10157  001D78  0E80               	movlw	128
 10158  001D7A  1A1D               	xorwf	___ftge@ff2+2,f,c
 10159  001D7C  501B               	movf	___ftge@ff2,w,c
 10160  001D7E  5C18               	subwf	___ftge@ff1,w,c
 10161  001D80  501C               	movf	___ftge@ff2+1,w,c
 10162  001D82  5819               	subwfb	___ftge@ff1+1,w,c
 10163  001D84  501D               	movf	___ftge@ff2+2,w,c
 10164  001D86  581A               	subwfb	___ftge@ff1+2,w,c
 10165  001D88  B0D8               	btfsc	status,0,c
 10166  001D8A  D002               	goto	l6221
 10167  001D8C  90D8               	bcf	status,0,c
 10168  001D8E  0012               	return	
 10169  001D90                     l6221:
 10170  001D90  80D8               	bsf	status,0,c
 10171  001D92  0012               	return	
 10172  001D94                     __end_of___ftge:
 10173                           	opt stack 0
 10174                           tosu	equ	0xFFF
 10175                           tosh	equ	0xFFE
 10176                           tosl	equ	0xFFD
 10177                           pclath	equ	0xFFA
 10178                           tblptru	equ	0xFF8
 10179                           tblptrh	equ	0xFF7
 10180                           tblptrl	equ	0xFF6
 10181                           tablat	equ	0xFF5
 10182                           prodh	equ	0xFF4
 10183                           prodl	equ	0xFF3
 10184                           intcon	equ	0xFF2
 10185                           intcon2	equ	0xFF1
 10186                           postinc0	equ	0xFEE
 10187                           wreg	equ	0xFE8
 10188                           indf1	equ	0xFE7
 10189                           postdec1	equ	0xFE5
 10190                           fsr1h	equ	0xFE2
 10191                           fsr1l	equ	0xFE1
 10192                           indf2	equ	0xFDF
 10193                           postinc2	equ	0xFDE
 10194                           postdec2	equ	0xFDD
 10195                           fsr2h	equ	0xFDA
 10196                           fsr2l	equ	0xFD9
 10197                           status	equ	0xFD8
 10198                           
 10199 ;; *************** function ___altoft *****************
 10200 ;; Defined at:
 10201 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;  c               4   33[BANK0 ] long 
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;  sign            1   47[COMRAM] unsigned char 
 10206 ;;  exp             1   46[COMRAM] unsigned char 
 10207 ;; Return value:  Size  Location     Type
 10208 ;;                  3   33[BANK0 ] float 
 10209 ;; Registers used:
 10210 ;;		wreg, status,2, status,0, cstack
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10216 ;;      Params:         0       4       0       0       0       0       0
 10217 ;;      Locals:         2       0       0       0       0       0       0
 10218 ;;      Temps:          0       4       0       0       0       0       0
 10219 ;;      Totals:         2       8       0       0       0       0       0
 10220 ;;Total ram usage:       10 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    4
 10223 ;; This function calls:
 10224 ;;		___ftpack
 10225 ;; This function is called by:
 10226 ;;		_floor
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           	psect	text46
 10231  001E16                     __ptext46:
 10232                           	opt stack 0
 10233  001E16                     ___altoft:
 10234                           	opt stack 22
 10235                           
 10236                           ;incstack = 0
 10237  001E16  0E00               	movlw	0
 10238  001E18  6E30               	movwf	___altoft@sign,c
 10239  001E1A  0E8E               	movlw	142
 10240  001E1C  6E2F               	movwf	___altoft@exp,c
 10241  001E1E  0100               	movlb	0	; () banked
 10242  001E20  AF84               	btfss	(___altoft@c+3)& (0+255),7,b
 10243  001E22  D011               	goto	l1409
 10244                           
 10245                           ; BSR set to: 0
 10246  001E24  1F84               	comf	(___altoft@c+3)& (0+255),f,b
 10247  001E26  1F83               	comf	(___altoft@c+2)& (0+255),f,b
 10248  001E28  1F82               	comf	(___altoft@c+1)& (0+255),f,b
 10249  001E2A  6D81               	negf	___altoft@c& (0+255),b
 10250  001E2C  0E00               	movlw	0
 10251  001E2E  2382               	addwfc	(___altoft@c+1)& (0+255),f,b
 10252  001E30  2383               	addwfc	(___altoft@c+2)& (0+255),f,b
 10253  001E32  2384               	addwfc	(___altoft@c+3)& (0+255),f,b
 10254                           
 10255                           ; BSR set to: 0
 10256  001E34  0E01               	movlw	1
 10257  001E36  6E30               	movwf	___altoft@sign,c
 10258                           
 10259                           ; BSR set to: 0
 10260  001E38  D006               	goto	l1409
 10261  001E3A                     
 10262                           ; BSR set to: 0
 10263                           
 10264                           ; BSR set to: 0
 10265  001E3A  90D8               	bcf	status,0,c
 10266  001E3C  3384               	rrcf	(___altoft@c+3)& (0+255),f,b
 10267  001E3E  3383               	rrcf	(___altoft@c+2)& (0+255),f,b
 10268  001E40  3382               	rrcf	(___altoft@c+1)& (0+255),f,b
 10269  001E42  3381               	rrcf	___altoft@c& (0+255),f,b
 10270  001E44  2A2F               	incf	___altoft@exp,f,c
 10271  001E46                     l1409:
 10272                           
 10273                           ; BSR set to: 0
 10274                           
 10275                           ; BSR set to: 0
 10276  001E46  0E00               	movlw	0
 10277  001E48  1581               	andwf	___altoft@c& (0+255),w,b
 10278  001E4A  6F85               	movwf	??___altoft& (0+255),b
 10279  001E4C  0E00               	movlw	0
 10280  001E4E  1582               	andwf	(___altoft@c+1)& (0+255),w,b
 10281  001E50  6F86               	movwf	(??___altoft+1)& (0+255),b
 10282  001E52  0E00               	movlw	0
 10283  001E54  1583               	andwf	(___altoft@c+2)& (0+255),w,b
 10284  001E56  6F87               	movwf	(??___altoft+2)& (0+255),b
 10285  001E58  0EFF               	movlw	255
 10286  001E5A  1584               	andwf	(___altoft@c+3)& (0+255),w,b
 10287  001E5C  6F88               	movwf	(??___altoft+3)& (0+255),b
 10288  001E5E  5185               	movf	??___altoft& (0+255),w,b
 10289  001E60  1186               	iorwf	(??___altoft+1)& (0+255),w,b
 10290  001E62  1187               	iorwf	(??___altoft+2)& (0+255),w,b
 10291  001E64  1188               	iorwf	(??___altoft+3)& (0+255),w,b
 10292  001E66  A4D8               	btfss	status,2,c
 10293  001E68  D7E8               	goto	l1410
 10294                           
 10295                           ; BSR set to: 0
 10296                           
 10297                           ; BSR set to: 0
 10298  001E6A  C081  F018         	movff	___altoft@c,___ftpack@arg
 10299  001E6E  C082  F019         	movff	___altoft@c+1,___ftpack@arg+1
 10300  001E72  C083  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 10301  001E76  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 10302  001E7A  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 10303  001E7E  EC50  F00D         	call	___ftpack	;wreg free
 10304  001E82  C018  F081         	movff	?___ftpack,?___altoft
 10305  001E86  C019  F082         	movff	?___ftpack+1,?___altoft+1
 10306  001E8A  C01A  F083         	movff	?___ftpack+2,?___altoft+2
 10307  001E8E  0012               	return	
 10308  001E90                     __end_of___altoft:
 10309                           	opt stack 0
 10310                           tosu	equ	0xFFF
 10311                           tosh	equ	0xFFE
 10312                           tosl	equ	0xFFD
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           postinc0	equ	0xFEE
 10323                           wreg	equ	0xFE8
 10324                           indf1	equ	0xFE7
 10325                           postdec1	equ	0xFE5
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           postdec2	equ	0xFDD
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function _eval_poly *****************
 10336 ;; Defined at:
 10337 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  x               3   30[BANK0 ] float 
 10340 ;;  d               2   33[BANK0 ] PTR const 
 10341 ;;		 -> log@coeff(27), exp@coeff(30), 
 10342 ;;  n               2   35[BANK0 ] int 
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  res             3   37[BANK0 ] int 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  3   30[BANK0 ] int 
 10347 ;; Registers used:
 10348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10354 ;;      Params:         0       7       0       0       0       0       0
 10355 ;;      Locals:         0       3       0       0       0       0       0
 10356 ;;      Temps:          2       0       0       0       0       0       0
 10357 ;;      Totals:         2      10       0       0       0       0       0
 10358 ;;Total ram usage:       12 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    5
 10361 ;; This function calls:
 10362 ;;		___ftadd
 10363 ;;		___ftmul
 10364 ;;		___wmul
 10365 ;; This function is called by:
 10366 ;;		_exp
 10367 ;;		_log
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text47
 10372  00184C                     __ptext47:
 10373                           	opt stack 0
 10374  00184C                     _eval_poly:
 10375                           	opt stack 22
 10376                           
 10377                           ;incstack = 0
 10378  00184C  C083  F018         	movff	eval_poly@n,___wmul@multiplier
 10379  001850  C084  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 10380  001854  0E00               	movlw	0
 10381  001856  6E1B               	movwf	___wmul@multiplicand+1,c
 10382  001858  0E03               	movlw	3
 10383  00185A  6E1A               	movwf	___wmul@multiplicand,c
 10384  00185C  EC6A  F014         	call	___wmul	;wreg free
 10385  001860  C081  F02F         	movff	eval_poly@d,??_eval_poly
 10386  001864  C082  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10387  001868  5018               	movf	?___wmul,w,c
 10388  00186A  262F               	addwf	??_eval_poly,f,c
 10389  00186C  5019               	movf	?___wmul+1,w,c
 10390  00186E  2230               	addwfc	??_eval_poly+1,f,c
 10391  001870  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10392  001874  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10393  001878                     	if	0	;tblptru may be non-zero
 10394  001878                     	endif
 10395  001878                     	if	0	;tblptru may be non-zero
 10396  001878                     	endif
 10397  001878  0009               	tblrd		*+
 10398  00187A  CFF5 F085          	movff	tablat,eval_poly@res
 10399  00187E  0009               	tblrd		*+
 10400  001880  CFF5 F086          	movff	tablat,eval_poly@res+1
 10401  001884  000A               	tblrd		*-
 10402  001886  CFF5 F087          	movff	tablat,eval_poly@res+2
 10403  00188A  D03F               	goto	l2034
 10404  00188C  C085  F069         	movff	eval_poly@res,___ftmul@f2
 10405  001890  C086  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 10406  001894  C087  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 10407  001898  C07E  F066         	movff	eval_poly@x,___ftmul@f1
 10408  00189C  C07F  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 10409  0018A0  C080  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 10410  0018A4  EC59  F00A         	call	___ftmul	;wreg free
 10411  0018A8  C066  F072         	movff	?___ftmul,___ftadd@f1
 10412  0018AC  C067  F073         	movff	?___ftmul+1,___ftadd@f1+1
 10413  0018B0  C068  F074         	movff	?___ftmul+2,___ftadd@f1+2
 10414  0018B4  0E00               	movlw	0
 10415  0018B6  6E1B               	movwf	___wmul@multiplicand+1,c
 10416  0018B8  0E03               	movlw	3
 10417  0018BA  6E1A               	movwf	___wmul@multiplicand,c
 10418  0018BC  0100               	movlb	0	; () banked
 10419  0018BE  0783               	decf	eval_poly@n& (0+255),f,b
 10420  0018C0  A0D8               	btfss	status,0,c
 10421  0018C2  0784               	decf	(eval_poly@n+1)& (0+255),f,b
 10422  0018C4  C083  F018         	movff	eval_poly@n,___wmul@multiplier
 10423  0018C8  C084  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 10424  0018CC  EC6A  F014         	call	___wmul	;wreg free
 10425  0018D0  C081  F02F         	movff	eval_poly@d,??_eval_poly
 10426  0018D4  C082  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10427  0018D8  5018               	movf	?___wmul,w,c
 10428  0018DA  262F               	addwf	??_eval_poly,f,c
 10429  0018DC  5019               	movf	?___wmul+1,w,c
 10430  0018DE  2230               	addwfc	??_eval_poly+1,f,c
 10431  0018E0  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10432  0018E4  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10433  0018E8                     	if	0	;tblptru may be non-zero
 10434  0018E8                     	endif
 10435  0018E8                     	if	0	;tblptru may be non-zero
 10436  0018E8                     	endif
 10437  0018E8  0009               	tblrd		*+
 10438  0018EA  CFF5 F075          	movff	tablat,___ftadd@f2
 10439  0018EE  0009               	tblrd		*+
 10440  0018F0  CFF5 F076          	movff	tablat,___ftadd@f2+1
 10441  0018F4  000A               	tblrd		*-
 10442  0018F6  CFF5 F077          	movff	tablat,___ftadd@f2+2
 10443  0018FA  ECD4  F005         	call	___ftadd	;wreg free
 10444  0018FE  C072  F085         	movff	?___ftadd,eval_poly@res
 10445  001902  C073  F086         	movff	?___ftadd+1,eval_poly@res+1
 10446  001906  C074  F087         	movff	?___ftadd+2,eval_poly@res+2
 10447  00190A                     l2034:
 10448  00190A  0100               	movlb	0	; () banked
 10449  00190C  5183               	movf	eval_poly@n& (0+255),w,b
 10450  00190E  1184               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10451  001910  A4D8               	btfss	status,2,c
 10452  001912  D7BC               	goto	l2035
 10453                           
 10454                           ; BSR set to: 0
 10455  001914  C085  F07E         	movff	eval_poly@res,?_eval_poly
 10456  001918  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
 10457  00191C  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
 10458                           
 10459                           ; BSR set to: 0
 10460  001920  0012               	return		;funcret
 10461  001922                     __end_of_eval_poly:
 10462                           	opt stack 0
 10463                           tosu	equ	0xFFF
 10464                           tosh	equ	0xFFE
 10465                           tosl	equ	0xFFD
 10466                           pclath	equ	0xFFA
 10467                           tblptru	equ	0xFF8
 10468                           tblptrh	equ	0xFF7
 10469                           tblptrl	equ	0xFF6
 10470                           tablat	equ	0xFF5
 10471                           prodh	equ	0xFF4
 10472                           prodl	equ	0xFF3
 10473                           intcon	equ	0xFF2
 10474                           intcon2	equ	0xFF1
 10475                           postinc0	equ	0xFEE
 10476                           wreg	equ	0xFE8
 10477                           indf1	equ	0xFE7
 10478                           postdec1	equ	0xFE5
 10479                           fsr1h	equ	0xFE2
 10480                           fsr1l	equ	0xFE1
 10481                           indf2	equ	0xFDF
 10482                           postinc2	equ	0xFDE
 10483                           postdec2	equ	0xFDD
 10484                           fsr2h	equ	0xFDA
 10485                           fsr2l	equ	0xFD9
 10486                           status	equ	0xFD8
 10487                           
 10488 ;; *************** function ___wmul *****************
 10489 ;; Defined at:
 10490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10491 ;; Parameters:    Size  Location     Type
 10492 ;;  multiplier      2   23[COMRAM] unsigned int 
 10493 ;;  multiplicand    2   25[COMRAM] unsigned int 
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  product         2   27[COMRAM] unsigned int 
 10496 ;; Return value:  Size  Location     Type
 10497 ;;                  2   23[COMRAM] unsigned int 
 10498 ;; Registers used:
 10499 ;;		wreg, status,2, status,0, prodl, prodh
 10500 ;; Tracked objects:
 10501 ;;		On entry : 0/0
 10502 ;;		On exit  : 0/0
 10503 ;;		Unchanged: 0/0
 10504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10505 ;;      Params:         4       0       0       0       0       0       0
 10506 ;;      Locals:         2       0       0       0       0       0       0
 10507 ;;      Temps:          0       0       0       0       0       0       0
 10508 ;;      Totals:         6       0       0       0       0       0       0
 10509 ;;Total ram usage:        6 bytes
 10510 ;; Hardware stack levels used:    1
 10511 ;; Hardware stack levels required when called:    3
 10512 ;; This function calls:
 10513 ;;		Nothing
 10514 ;; This function is called by:
 10515 ;;		_eval_poly
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text48
 10520  0028D4                     __ptext48:
 10521                           	opt stack 0
 10522  0028D4                     ___wmul:
 10523                           	opt stack 23
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;incstack = 0
 10527  0028D4  5018               	movf	___wmul@multiplier,w,c
 10528  0028D6  021A               	mulwf	___wmul@multiplicand,c
 10529  0028D8  CFF3 F01C          	movff	prodl,___wmul@product
 10530  0028DC  CFF4 F01D          	movff	prodh,___wmul@product+1
 10531  0028E0  5018               	movf	___wmul@multiplier,w,c
 10532  0028E2  021B               	mulwf	___wmul@multiplicand+1,c
 10533  0028E4  50F3               	movf	prodl,w,c
 10534  0028E6  261D               	addwf	___wmul@product+1,f,c
 10535  0028E8  5019               	movf	___wmul@multiplier+1,w,c
 10536  0028EA  021A               	mulwf	___wmul@multiplicand,c
 10537  0028EC  50F3               	movf	prodl,w,c
 10538  0028EE  261D               	addwf	___wmul@product+1,f,c
 10539  0028F0  C01C  F018         	movff	___wmul@product,?___wmul
 10540  0028F4  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 10541  0028F8  0012               	return	
 10542  0028FA                     __end_of___wmul:
 10543                           	opt stack 0
 10544                           tosu	equ	0xFFF
 10545                           tosh	equ	0xFFE
 10546                           tosl	equ	0xFFD
 10547                           pclath	equ	0xFFA
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           intcon	equ	0xFF2
 10555                           intcon2	equ	0xFF1
 10556                           postinc0	equ	0xFEE
 10557                           wreg	equ	0xFE8
 10558                           indf1	equ	0xFE7
 10559                           postdec1	equ	0xFE5
 10560                           fsr1h	equ	0xFE2
 10561                           fsr1l	equ	0xFE1
 10562                           indf2	equ	0xFDF
 10563                           postinc2	equ	0xFDE
 10564                           postdec2	equ	0xFDD
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function ___ftmul *****************
 10570 ;; Defined at:
 10571 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;  f1              3    6[BANK0 ] float 
 10574 ;;  f2              3    9[BANK0 ] float 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 10577 ;;  sign            1   17[BANK0 ] unsigned char 
 10578 ;;  cntr            1   16[BANK0 ] unsigned char 
 10579 ;;  exp             1   12[BANK0 ] unsigned char 
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  3    6[BANK0 ] float 
 10582 ;; Registers used:
 10583 ;;		wreg, status,2, status,0, cstack
 10584 ;; Tracked objects:
 10585 ;;		On entry : 0/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10589 ;;      Params:         0       6       0       0       0       0       0
 10590 ;;      Locals:         0       6       0       0       0       0       0
 10591 ;;      Temps:          3       0       0       0       0       0       0
 10592 ;;      Totals:         3      12       0       0       0       0       0
 10593 ;;Total ram usage:       15 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; Hardware stack levels required when called:    4
 10596 ;; This function calls:
 10597 ;;		___ftpack
 10598 ;; This function is called by:
 10599 ;;		_SampleSingleChannel
 10600 ;;		_pow
 10601 ;;		_exp
 10602 ;;		_log
 10603 ;;		_eval_poly
 10604 ;;		_CheckFlashPrecentage
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text49
 10609  0014B2                     __ptext49:
 10610                           	opt stack 0
 10611  0014B2                     ___ftmul:
 10612                           	opt stack 22
 10613                           
 10614                           ;incstack = 0
 10615  0014B2  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 10616  0014B6  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 10617  0014B8  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 10618  0014BA  0100               	movlb	0	; () banked
 10619  0014BC  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10620  0014BE  362C               	rlcf	??___ftmul& (0+255),f,c
 10621  0014C0  E301               	bnc	u6761
 10622  0014C2  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 10623  0014C4                     u6761:
 10624  0014C4  502C               	movf	??___ftmul,w,c
 10625  0014C6  6F6C               	movwf	___ftmul@exp& (0+255),b
 10626  0014C8  516C               	movf	___ftmul@exp& (0+255),w,b
 10627  0014CA  A4D8               	btfss	status,2,c
 10628  0014CC  D007               	goto	l1618
 10629                           
 10630                           ; BSR set to: 0
 10631  0014CE  0E00               	movlw	0
 10632  0014D0  6F66               	movwf	?___ftmul& (0+255),b
 10633  0014D2  0E00               	movlw	0
 10634  0014D4  6F67               	movwf	(?___ftmul+1)& (0+255),b
 10635  0014D6  0E00               	movlw	0
 10636  0014D8  6F68               	movwf	(?___ftmul+2)& (0+255),b
 10637                           
 10638                           ; BSR set to: 0
 10639  0014DA  0012               	return	
 10640  0014DC                     l1618:
 10641                           
 10642                           ; BSR set to: 0
 10643                           
 10644                           ; BSR set to: 0
 10645  0014DC  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 10646  0014E0  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 10647  0014E2  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 10648  0014E4  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10649  0014E6  362C               	rlcf	??___ftmul& (0+255),f,c
 10650  0014E8  E301               	bnc	u6781
 10651  0014EA  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 10652  0014EC                     u6781:
 10653  0014EC  502C               	movf	??___ftmul,w,c
 10654  0014EE  6F71               	movwf	___ftmul@sign& (0+255),b
 10655  0014F0  5171               	movf	___ftmul@sign& (0+255),w,b
 10656  0014F2  A4D8               	btfss	status,2,c
 10657  0014F4  D007               	goto	l1620
 10658                           
 10659                           ; BSR set to: 0
 10660  0014F6  0E00               	movlw	0
 10661  0014F8  6F66               	movwf	?___ftmul& (0+255),b
 10662  0014FA  0E00               	movlw	0
 10663  0014FC  6F67               	movwf	(?___ftmul+1)& (0+255),b
 10664  0014FE  0E00               	movlw	0
 10665  001500  6F68               	movwf	(?___ftmul+2)& (0+255),b
 10666                           
 10667                           ; BSR set to: 0
 10668  001502  0012               	return	
 10669  001504                     l1620:
 10670                           
 10671                           ; BSR set to: 0
 10672                           
 10673                           ; BSR set to: 0
 10674  001504  5171               	movf	___ftmul@sign& (0+255),w,b
 10675  001506  0F7B               	addlw	123
 10676  001508  276C               	addwf	___ftmul@exp& (0+255),f,b
 10677                           
 10678                           ; BSR set to: 0
 10679  00150A  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 10680  00150E  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10681  001510  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 10682  001512  0E80               	movlw	128
 10683  001514  1771               	andwf	___ftmul@sign& (0+255),f,b
 10684                           
 10685                           ; BSR set to: 0
 10686  001516  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10687                           
 10688                           ; BSR set to: 0
 10689  001518  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10690                           
 10691                           ; BSR set to: 0
 10692  00151A  0EFF               	movlw	255
 10693  00151C  1769               	andwf	___ftmul@f2& (0+255),f,b
 10694  00151E  0EFF               	movlw	255
 10695  001520  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 10696  001522  0E00               	movlw	0
 10697  001524  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 10698                           
 10699                           ; BSR set to: 0
 10700  001526  0E00               	movlw	0
 10701  001528  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 10702  00152A  0E00               	movlw	0
 10703  00152C  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 10704  00152E  0E00               	movlw	0
 10705  001530  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 10706                           
 10707                           ; BSR set to: 0
 10708  001532  0E07               	movlw	7
 10709  001534  6F70               	movwf	___ftmul@cntr& (0+255),b
 10710  001536                     
 10711                           ; BSR set to: 0
 10712                           
 10713                           ; BSR set to: 0
 10714  001536  A166               	btfss	___ftmul@f1& (0+255),0,b
 10715  001538  D006               	goto	l1622
 10716                           
 10717                           ; BSR set to: 0
 10718  00153A  5169               	movf	___ftmul@f2& (0+255),w,b
 10719  00153C  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10720  00153E  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10721  001540  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10722  001542  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10723  001544  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10724  001546                     l1622:
 10725                           
 10726                           ; BSR set to: 0
 10727                           
 10728                           ; BSR set to: 0
 10729  001546  90D8               	bcf	status,0,c
 10730  001548  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10731  00154A  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10732  00154C  3366               	rrcf	___ftmul@f1& (0+255),f,b
 10733  00154E  90D8               	bcf	status,0,c
 10734  001550  3769               	rlcf	___ftmul@f2& (0+255),f,b
 10735  001552  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 10736  001554  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 10737                           
 10738                           ; BSR set to: 0
 10739  001556  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 10740  001558  D7EE               	goto	l1621
 10741                           
 10742                           ; BSR set to: 0
 10743                           
 10744                           ; BSR set to: 0
 10745  00155A  0E09               	movlw	9
 10746  00155C  6F70               	movwf	___ftmul@cntr& (0+255),b
 10747  00155E                     
 10748                           ; BSR set to: 0
 10749                           
 10750                           ; BSR set to: 0
 10751  00155E  A166               	btfss	___ftmul@f1& (0+255),0,b
 10752  001560  D006               	goto	l1625
 10753                           
 10754                           ; BSR set to: 0
 10755  001562  5169               	movf	___ftmul@f2& (0+255),w,b
 10756  001564  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10757  001566  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 10758  001568  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10759  00156A  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 10760  00156C  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10761  00156E                     l1625:
 10762                           
 10763                           ; BSR set to: 0
 10764                           
 10765                           ; BSR set to: 0
 10766  00156E  90D8               	bcf	status,0,c
 10767  001570  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 10768  001572  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 10769  001574  3366               	rrcf	___ftmul@f1& (0+255),f,b
 10770  001576  90D8               	bcf	status,0,c
 10771  001578  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10772  00157A  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10773  00157C  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10774                           
 10775                           ; BSR set to: 0
 10776  00157E  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 10777  001580  D7EE               	goto	l1624
 10778                           
 10779                           ; BSR set to: 0
 10780                           
 10781                           ; BSR set to: 0
 10782  001582  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 10783  001586  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10784  00158A  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10785  00158E  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 10786  001592  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 10787  001596  EC50  F00D         	call	___ftpack	;wreg free
 10788  00159A  C018  F066         	movff	?___ftpack,?___ftmul
 10789  00159E  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 10790  0015A2  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 10791  0015A6  0012               	return	
 10792  0015A8                     __end_of___ftmul:
 10793                           	opt stack 0
 10794                           tosu	equ	0xFFF
 10795                           tosh	equ	0xFFE
 10796                           tosl	equ	0xFFD
 10797                           pclath	equ	0xFFA
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           intcon2	equ	0xFF1
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           indf1	equ	0xFE7
 10809                           postdec1	equ	0xFE5
 10810                           fsr1h	equ	0xFE2
 10811                           fsr1l	equ	0xFE1
 10812                           indf2	equ	0xFDF
 10813                           postinc2	equ	0xFDE
 10814                           postdec2	equ	0xFDD
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819 ;; *************** function ___ftsub *****************
 10820 ;; Defined at:
 10821 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;  f1              3   30[BANK0 ] float 
 10824 ;;  f2              3   33[BANK0 ] float 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  3   30[BANK0 ] float 
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10836 ;;      Params:         0       6       0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0
 10839 ;;      Totals:         0       6       0       0       0       0       0
 10840 ;;Total ram usage:        6 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    5
 10843 ;; This function calls:
 10844 ;;		___ftadd
 10845 ;; This function is called by:
 10846 ;;		_exp
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           	psect	text50
 10851  0025AA                     __ptext50:
 10852                           	opt stack 0
 10853  0025AA                     ___ftsub:
 10854                           	opt stack 22
 10855                           
 10856                           ;incstack = 0
 10857  0025AA  0100               	movlb	0	; () banked
 10858  0025AC  5181               	movf	___ftsub@f2& (0+255),w,b
 10859  0025AE  1182               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10860  0025B0  1183               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10861  0025B2  B4D8               	btfsc	status,2,c
 10862  0025B4  D006               	goto	l1635
 10863                           
 10864                           ; BSR set to: 0
 10865  0025B6  0E00               	movlw	0
 10866  0025B8  1B81               	xorwf	___ftsub@f2& (0+255),f,b
 10867  0025BA  0E00               	movlw	0
 10868  0025BC  1B82               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10869  0025BE  0E80               	movlw	128
 10870  0025C0  1B83               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10871  0025C2                     l1635:
 10872                           
 10873                           ; BSR set to: 0
 10874                           
 10875                           ; BSR set to: 0
 10876  0025C2  C07E  F072         	movff	___ftsub@f1,___ftadd@f1
 10877  0025C6  C07F  F073         	movff	___ftsub@f1+1,___ftadd@f1+1
 10878  0025CA  C080  F074         	movff	___ftsub@f1+2,___ftadd@f1+2
 10879  0025CE  C081  F075         	movff	___ftsub@f2,___ftadd@f2
 10880  0025D2  C082  F076         	movff	___ftsub@f2+1,___ftadd@f2+1
 10881  0025D6  C083  F077         	movff	___ftsub@f2+2,___ftadd@f2+2
 10882  0025DA  ECD4  F005         	call	___ftadd	;wreg free
 10883  0025DE  C072  F07E         	movff	?___ftadd,?___ftsub
 10884  0025E2  C073  F07F         	movff	?___ftadd+1,?___ftsub+1
 10885  0025E6  C074  F080         	movff	?___ftadd+2,?___ftsub+2
 10886  0025EA  0012               	return	
 10887  0025EC                     __end_of___ftsub:
 10888                           	opt stack 0
 10889                           tosu	equ	0xFFF
 10890                           tosh	equ	0xFFE
 10891                           tosl	equ	0xFFD
 10892                           pclath	equ	0xFFA
 10893                           tblptru	equ	0xFF8
 10894                           tblptrh	equ	0xFF7
 10895                           tblptrl	equ	0xFF6
 10896                           tablat	equ	0xFF5
 10897                           prodh	equ	0xFF4
 10898                           prodl	equ	0xFF3
 10899                           intcon	equ	0xFF2
 10900                           intcon2	equ	0xFF1
 10901                           postinc0	equ	0xFEE
 10902                           wreg	equ	0xFE8
 10903                           indf1	equ	0xFE7
 10904                           postdec1	equ	0xFE5
 10905                           fsr1h	equ	0xFE2
 10906                           fsr1l	equ	0xFE1
 10907                           indf2	equ	0xFDF
 10908                           postinc2	equ	0xFDE
 10909                           postdec2	equ	0xFDD
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           
 10914 ;; *************** function ___ftadd *****************
 10915 ;; Defined at:
 10916 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;  f1              3   18[BANK0 ] float 
 10919 ;;  f2              3   21[BANK0 ] float 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;  exp1            1   29[BANK0 ] unsigned char 
 10922 ;;  exp2            1   28[BANK0 ] unsigned char 
 10923 ;;  sign            1   27[BANK0 ] unsigned char 
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  3   18[BANK0 ] float 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0, cstack
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10933 ;;      Params:         0       6       0       0       0       0       0
 10934 ;;      Locals:         0       3       0       0       0       0       0
 10935 ;;      Temps:          0       3       0       0       0       0       0
 10936 ;;      Totals:         0      12       0       0       0       0       0
 10937 ;;Total ram usage:       12 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    4
 10940 ;; This function calls:
 10941 ;;		___ftpack
 10942 ;; This function is called by:
 10943 ;;		___ftsub
 10944 ;;		_floor
 10945 ;;		_log
 10946 ;;		_eval_poly
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text51
 10951  000BA8                     __ptext51:
 10952                           	opt stack 0
 10953  000BA8                     ___ftadd:
 10954                           	opt stack 22
 10955                           
 10956                           ;incstack = 0
 10957  000BA8  C074  F078         	movff	___ftadd@f1+2,??___ftadd
 10958  000BAC  0100               	movlb	0	; () banked
 10959  000BAE  6B79               	clrf	(??___ftadd+1)& (0+255),b
 10960  000BB0  6B7A               	clrf	(??___ftadd+2)& (0+255),b
 10961  000BB2  3573               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10962  000BB4  3778               	rlcf	??___ftadd& (0+255),f,b
 10963  000BB6  E301               	bnc	u6551
 10964  000BB8  8179               	bsf	(??___ftadd+1)& (0+255),0,b
 10965  000BBA                     u6551:
 10966  000BBA  5178               	movf	??___ftadd& (0+255),w,b
 10967  000BBC  6F7D               	movwf	___ftadd@exp1& (0+255),b
 10968  000BBE  C077  F078         	movff	___ftadd@f2+2,??___ftadd
 10969  000BC2  6B79               	clrf	(??___ftadd+1)& (0+255),b
 10970  000BC4  6B7A               	clrf	(??___ftadd+2)& (0+255),b
 10971  000BC6  3576               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10972  000BC8  3778               	rlcf	??___ftadd& (0+255),f,b
 10973  000BCA  E301               	bnc	u6561
 10974  000BCC  8179               	bsf	(??___ftadd+1)& (0+255),0,b
 10975  000BCE                     u6561:
 10976  000BCE  5178               	movf	??___ftadd& (0+255),w,b
 10977  000BD0  6F7C               	movwf	___ftadd@exp2& (0+255),b
 10978                           
 10979                           ; BSR set to: 0
 10980  000BD2  517D               	movf	___ftadd@exp1& (0+255),w,b
 10981  000BD4  B4D8               	btfsc	status,2,c
 10982  000BD6  D00B               	goto	u6590
 10983                           
 10984                           ; BSR set to: 0
 10985  000BD8  517C               	movf	___ftadd@exp2& (0+255),w,b
 10986  000BDA  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
 10987  000BDC  B0D8               	btfsc	status,0,c
 10988  000BDE  D00E               	goto	l1570
 10989                           
 10990                           ; BSR set to: 0
 10991  000BE0  517D               	movf	___ftadd@exp1& (0+255),w,b
 10992  000BE2  0800               	sublw	0
 10993  000BE4  257C               	addwf	___ftadd@exp2& (0+255),w,b
 10994  000BE6  6F78               	movwf	??___ftadd& (0+255),b
 10995  000BE8  0E18               	movlw	24
 10996  000BEA  6578               	cpfsgt	??___ftadd& (0+255),b
 10997  000BEC  D007               	goto	l1570
 10998  000BEE                     u6590:
 10999                           
 11000                           ; BSR set to: 0
 11001  000BEE  C075  F072         	movff	___ftadd@f2,?___ftadd
 11002  000BF2  C076  F073         	movff	___ftadd@f2+1,?___ftadd+1
 11003  000BF6  C077  F074         	movff	___ftadd@f2+2,?___ftadd+2
 11004  000BFA  0012               	return	
 11005  000BFC                     l1570:
 11006                           
 11007                           ; BSR set to: 0
 11008                           
 11009                           ; BSR set to: 0
 11010  000BFC  517C               	movf	___ftadd@exp2& (0+255),w,b
 11011  000BFE  B4D8               	btfsc	status,2,c
 11012  000C00  D00B               	goto	u6620
 11013                           
 11014                           ; BSR set to: 0
 11015  000C02  517D               	movf	___ftadd@exp1& (0+255),w,b
 11016  000C04  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
 11017  000C06  B0D8               	btfsc	status,0,c
 11018  000C08  D00E               	goto	l1574
 11019                           
 11020                           ; BSR set to: 0
 11021  000C0A  517C               	movf	___ftadd@exp2& (0+255),w,b
 11022  000C0C  0800               	sublw	0
 11023  000C0E  257D               	addwf	___ftadd@exp1& (0+255),w,b
 11024  000C10  6F78               	movwf	??___ftadd& (0+255),b
 11025  000C12  0E18               	movlw	24
 11026  000C14  6578               	cpfsgt	??___ftadd& (0+255),b
 11027  000C16  D007               	goto	l1574
 11028  000C18                     u6620:
 11029                           
 11030                           ; BSR set to: 0
 11031  000C18  C072  F072         	movff	___ftadd@f1,?___ftadd
 11032  000C1C  C073  F073         	movff	___ftadd@f1+1,?___ftadd+1
 11033  000C20  C074  F074         	movff	___ftadd@f1+2,?___ftadd+2
 11034  000C24  0012               	return	
 11035  000C26                     l1574:
 11036                           
 11037                           ; BSR set to: 0
 11038                           
 11039                           ; BSR set to: 0
 11040  000C26  0E06               	movlw	6
 11041  000C28  6F7B               	movwf	___ftadd@sign& (0+255),b
 11042                           
 11043                           ; BSR set to: 0
 11044  000C2A  BF74               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 11045                           
 11046                           ; BSR set to: 0
 11047  000C2C  8F7B               	bsf	___ftadd@sign& (0+255),7,b
 11048                           
 11049                           ; BSR set to: 0
 11050                           
 11051                           ; BSR set to: 0
 11052  000C2E  BF77               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 11053                           
 11054                           ; BSR set to: 0
 11055  000C30  8D7B               	bsf	___ftadd@sign& (0+255),6,b
 11056                           
 11057                           ; BSR set to: 0
 11058  000C32  8F73               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11059                           
 11060                           ; BSR set to: 0
 11061  000C34  0EFF               	movlw	255
 11062  000C36  1772               	andwf	___ftadd@f1& (0+255),f,b
 11063  000C38  0EFF               	movlw	255
 11064  000C3A  1773               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11065  000C3C  0E00               	movlw	0
 11066  000C3E  1774               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11067  000C40  8F76               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11068                           
 11069                           ; BSR set to: 0
 11070  000C42  0EFF               	movlw	255
 11071  000C44  1775               	andwf	___ftadd@f2& (0+255),f,b
 11072  000C46  0EFF               	movlw	255
 11073  000C48  1776               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11074  000C4A  0E00               	movlw	0
 11075  000C4C  1777               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11076                           
 11077                           ; BSR set to: 0
 11078  000C4E  517C               	movf	___ftadd@exp2& (0+255),w,b
 11079  000C50  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
 11080  000C52  B0D8               	btfsc	status,0,c
 11081  000C54  D01B               	goto	l1579
 11082  000C56                     u6650:
 11083                           
 11084                           ; BSR set to: 0
 11085                           
 11086                           ; BSR set to: 0
 11087  000C56  90D8               	bcf	status,0,c
 11088  000C58  3775               	rlcf	___ftadd@f2& (0+255),f,b
 11089  000C5A  3776               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11090  000C5C  3777               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11091  000C5E  077C               	decf	___ftadd@exp2& (0+255),f,b
 11092                           
 11093                           ; BSR set to: 0
 11094  000C60  517D               	movf	___ftadd@exp1& (0+255),w,b
 11095  000C62  197C               	xorwf	___ftadd@exp2& (0+255),w,b
 11096  000C64  B4D8               	btfsc	status,2,c
 11097  000C66  D00D               	goto	l1584
 11098                           
 11099                           ; BSR set to: 0
 11100  000C68  077B               	decf	___ftadd@sign& (0+255),f,b
 11101  000C6A  C07B  F078         	movff	___ftadd@sign,??___ftadd
 11102  000C6E  0E07               	movlw	7
 11103  000C70  1778               	andwf	??___ftadd& (0+255),f,b
 11104  000C72  B4D8               	btfsc	status,2,c
 11105  000C74  D006               	goto	l1584
 11106  000C76  D7EF               	goto	u6650
 11107  000C78                     
 11108                           ; BSR set to: 0
 11109                           
 11110                           ; BSR set to: 0
 11111  000C78  90D8               	bcf	status,0,c
 11112  000C7A  3374               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11113  000C7C  3373               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11114  000C7E  3372               	rrcf	___ftadd@f1& (0+255),f,b
 11115  000C80  2B7D               	incf	___ftadd@exp1& (0+255),f,b
 11116  000C82                     l1584:
 11117                           
 11118                           ; BSR set to: 0
 11119                           
 11120                           ; BSR set to: 0
 11121  000C82  517C               	movf	___ftadd@exp2& (0+255),w,b
 11122  000C84  197D               	xorwf	___ftadd@exp1& (0+255),w,b
 11123  000C86  B4D8               	btfsc	status,2,c
 11124  000C88  D01F               	goto	u6720
 11125  000C8A  D7F6               	goto	l1585
 11126  000C8C                     l1579:
 11127                           
 11128                           ; BSR set to: 0
 11129                           
 11130                           ; BSR set to: 0
 11131  000C8C  517D               	movf	___ftadd@exp1& (0+255),w,b
 11132  000C8E  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
 11133  000C90  B0D8               	btfsc	status,0,c
 11134  000C92  D01A               	goto	u6720
 11135  000C94                     u6690:
 11136                           
 11137                           ; BSR set to: 0
 11138                           
 11139                           ; BSR set to: 0
 11140  000C94  90D8               	bcf	status,0,c
 11141  000C96  3772               	rlcf	___ftadd@f1& (0+255),f,b
 11142  000C98  3773               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11143  000C9A  3774               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11144  000C9C  077D               	decf	___ftadd@exp1& (0+255),f,b
 11145                           
 11146                           ; BSR set to: 0
 11147  000C9E  517D               	movf	___ftadd@exp1& (0+255),w,b
 11148  000CA0  197C               	xorwf	___ftadd@exp2& (0+255),w,b
 11149  000CA2  B4D8               	btfsc	status,2,c
 11150  000CA4  D00D               	goto	l1593
 11151                           
 11152                           ; BSR set to: 0
 11153  000CA6  077B               	decf	___ftadd@sign& (0+255),f,b
 11154  000CA8  C07B  F078         	movff	___ftadd@sign,??___ftadd
 11155  000CAC  0E07               	movlw	7
 11156  000CAE  1778               	andwf	??___ftadd& (0+255),f,b
 11157  000CB0  B4D8               	btfsc	status,2,c
 11158  000CB2  D006               	goto	l1593
 11159  000CB4  D7EF               	goto	u6690
 11160  000CB6                     
 11161                           ; BSR set to: 0
 11162                           
 11163                           ; BSR set to: 0
 11164  000CB6  90D8               	bcf	status,0,c
 11165  000CB8  3377               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11166  000CBA  3376               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11167  000CBC  3375               	rrcf	___ftadd@f2& (0+255),f,b
 11168  000CBE  2B7C               	incf	___ftadd@exp2& (0+255),f,b
 11169  000CC0                     l1593:
 11170                           
 11171                           ; BSR set to: 0
 11172                           
 11173                           ; BSR set to: 0
 11174  000CC0  517C               	movf	___ftadd@exp2& (0+255),w,b
 11175  000CC2  197D               	xorwf	___ftadd@exp1& (0+255),w,b
 11176  000CC4  A4D8               	btfss	status,2,c
 11177  000CC6  D7F7               	goto	l1594
 11178  000CC8                     u6720:
 11179                           
 11180                           ; BSR set to: 0
 11181                           
 11182                           ; BSR set to: 0
 11183                           
 11184                           ; BSR set to: 0
 11185  000CC8  AF7B               	btfss	___ftadd@sign& (0+255),7,b
 11186  000CCA  D00C               	goto	l1596
 11187                           
 11188                           ; BSR set to: 0
 11189  000CCC  0EFF               	movlw	255
 11190  000CCE  1B72               	xorwf	___ftadd@f1& (0+255),f,b
 11191  000CD0  0EFF               	movlw	255
 11192  000CD2  1B73               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11193  000CD4  0EFF               	movlw	255
 11194  000CD6  1B74               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11195  000CD8  0E01               	movlw	1
 11196  000CDA  2772               	addwf	___ftadd@f1& (0+255),f,b
 11197  000CDC  0E00               	movlw	0
 11198  000CDE  2373               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11199  000CE0  0E00               	movlw	0
 11200  000CE2  2374               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11201  000CE4                     l1596:
 11202                           
 11203                           ; BSR set to: 0
 11204  000CE4  AD7B               	btfss	___ftadd@sign& (0+255),6,b
 11205  000CE6  D00C               	goto	l1597
 11206                           
 11207                           ; BSR set to: 0
 11208  000CE8  0EFF               	movlw	255
 11209  000CEA  1B75               	xorwf	___ftadd@f2& (0+255),f,b
 11210  000CEC  0EFF               	movlw	255
 11211  000CEE  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11212  000CF0  0EFF               	movlw	255
 11213  000CF2  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11214  000CF4  0E01               	movlw	1
 11215  000CF6  2775               	addwf	___ftadd@f2& (0+255),f,b
 11216  000CF8  0E00               	movlw	0
 11217  000CFA  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11218  000CFC  0E00               	movlw	0
 11219  000CFE  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11220  000D00                     l1597:
 11221                           
 11222                           ; BSR set to: 0
 11223                           
 11224                           ; BSR set to: 0
 11225  000D00  0E00               	movlw	0
 11226  000D02  6F7B               	movwf	___ftadd@sign& (0+255),b
 11227                           
 11228                           ; BSR set to: 0
 11229  000D04  5172               	movf	___ftadd@f1& (0+255),w,b
 11230  000D06  2775               	addwf	___ftadd@f2& (0+255),f,b
 11231  000D08  5173               	movf	(___ftadd@f1+1)& (0+255),w,b
 11232  000D0A  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11233  000D0C  5174               	movf	(___ftadd@f1+2)& (0+255),w,b
 11234  000D0E  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11235                           
 11236                           ; BSR set to: 0
 11237  000D10  AF77               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11238  000D12  D00E               	goto	l1598
 11239                           
 11240                           ; BSR set to: 0
 11241  000D14  0EFF               	movlw	255
 11242  000D16  1B75               	xorwf	___ftadd@f2& (0+255),f,b
 11243  000D18  0EFF               	movlw	255
 11244  000D1A  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11245  000D1C  0EFF               	movlw	255
 11246  000D1E  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11247  000D20  0E01               	movlw	1
 11248  000D22  2775               	addwf	___ftadd@f2& (0+255),f,b
 11249  000D24  0E00               	movlw	0
 11250  000D26  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11251  000D28  0E00               	movlw	0
 11252  000D2A  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11253                           
 11254                           ; BSR set to: 0
 11255  000D2C  0E01               	movlw	1
 11256  000D2E  6F7B               	movwf	___ftadd@sign& (0+255),b
 11257  000D30                     l1598:
 11258                           
 11259                           ; BSR set to: 0
 11260                           
 11261                           ; BSR set to: 0
 11262  000D30  C075  F018         	movff	___ftadd@f2,___ftpack@arg
 11263  000D34  C076  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 11264  000D38  C077  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 11265  000D3C  C07D  F01B         	movff	___ftadd@exp1,___ftpack@exp
 11266  000D40  C07B  F01C         	movff	___ftadd@sign,___ftpack@sign
 11267  000D44  EC50  F00D         	call	___ftpack	;wreg free
 11268  000D48  C018  F072         	movff	?___ftpack,?___ftadd
 11269  000D4C  C019  F073         	movff	?___ftpack+1,?___ftadd+1
 11270  000D50  C01A  F074         	movff	?___ftpack+2,?___ftadd+2
 11271  000D54  0012               	return	
 11272  000D56                     __end_of___ftadd:
 11273                           	opt stack 0
 11274                           tosu	equ	0xFFF
 11275                           tosh	equ	0xFFE
 11276                           tosl	equ	0xFFD
 11277                           pclath	equ	0xFFA
 11278                           tblptru	equ	0xFF8
 11279                           tblptrh	equ	0xFF7
 11280                           tblptrl	equ	0xFF6
 11281                           tablat	equ	0xFF5
 11282                           prodh	equ	0xFF4
 11283                           prodl	equ	0xFF3
 11284                           intcon	equ	0xFF2
 11285                           intcon2	equ	0xFF1
 11286                           postinc0	equ	0xFEE
 11287                           wreg	equ	0xFE8
 11288                           indf1	equ	0xFE7
 11289                           postdec1	equ	0xFE5
 11290                           fsr1h	equ	0xFE2
 11291                           fsr1l	equ	0xFE1
 11292                           indf2	equ	0xFDF
 11293                           postinc2	equ	0xFDE
 11294                           postdec2	equ	0xFDD
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function ___ftneg *****************
 11300 ;; Defined at:
 11301 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  f1              3   23[COMRAM] float 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  3   23[COMRAM] float 
 11308 ;; Registers used:
 11309 ;;		wreg, status,2, status,0
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11315 ;;      Params:         3       0       0       0       0       0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0
 11318 ;;      Totals:         3       0       0       0       0       0       0
 11319 ;;Total ram usage:        3 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    3
 11322 ;; This function calls:
 11323 ;;		Nothing
 11324 ;; This function is called by:
 11325 ;;		_pow
 11326 ;;		_exp
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text52
 11331  00291E                     __ptext52:
 11332                           	opt stack 0
 11333  00291E                     ___ftneg:
 11334                           	opt stack 24
 11335                           
 11336                           ;incstack = 0
 11337  00291E  5018               	movf	___ftneg@f1,w,c
 11338  002920  1019               	iorwf	___ftneg@f1+1,w,c
 11339  002922  101A               	iorwf	___ftneg@f1+2,w,c
 11340  002924  B4D8               	btfsc	status,2,c
 11341  002926  D006               	goto	l1629
 11342  002928  0E00               	movlw	0
 11343  00292A  1A18               	xorwf	___ftneg@f1,f,c
 11344  00292C  0E00               	movlw	0
 11345  00292E  1A19               	xorwf	___ftneg@f1+1,f,c
 11346  002930  0E80               	movlw	128
 11347  002932  1A1A               	xorwf	___ftneg@f1+2,f,c
 11348  002934                     l1629:
 11349  002934  C018  F018         	movff	___ftneg@f1,?___ftneg
 11350  002938  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 11351  00293C  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 11352  002940  0012               	return		;funcret
 11353  002942                     __end_of___ftneg:
 11354                           	opt stack 0
 11355                           tosu	equ	0xFFF
 11356                           tosh	equ	0xFFE
 11357                           tosl	equ	0xFFD
 11358                           pclath	equ	0xFFA
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           postinc0	equ	0xFEE
 11368                           wreg	equ	0xFE8
 11369                           indf1	equ	0xFE7
 11370                           postdec1	equ	0xFE5
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           fsr2h	equ	0xFDA
 11377                           fsr2l	equ	0xFD9
 11378                           status	equ	0xFD8
 11379                           
 11380 ;; *************** function ___ftdiv *****************
 11381 ;; Defined at:
 11382 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;  f1              3   34[COMRAM] float 
 11385 ;;  f2              3   37[COMRAM] float 
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;  f3              3    1[BANK0 ] float 
 11388 ;;  sign            1    5[BANK0 ] unsigned char 
 11389 ;;  exp             1    4[BANK0 ] unsigned char 
 11390 ;;  cntr            1    0[BANK0 ] unsigned char 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  3   34[COMRAM] float 
 11393 ;; Registers used:
 11394 ;;		wreg, status,2, status,0, cstack
 11395 ;; Tracked objects:
 11396 ;;		On entry : 0/0
 11397 ;;		On exit  : 0/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11400 ;;      Params:         6       0       0       0       0       0       0
 11401 ;;      Locals:         0       6       0       0       0       0       0
 11402 ;;      Temps:          3       0       0       0       0       0       0
 11403 ;;      Totals:         9       6       0       0       0       0       0
 11404 ;;Total ram usage:       15 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    4
 11407 ;; This function calls:
 11408 ;;		___ftpack
 11409 ;; This function is called by:
 11410 ;;		_SampleSingleChannel
 11411 ;;		_exp
 11412 ;;		_CheckFlashPrecentage
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           	psect	text53
 11417  0015A8                     __ptext53:
 11418                           	opt stack 0
 11419  0015A8                     ___ftdiv:
 11420                           	opt stack 23
 11421                           
 11422                           ;incstack = 0
 11423  0015A8  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 11424  0015AC  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 11425  0015AE  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 11426  0015B0  3424               	rlcf	___ftdiv@f1+1,w,c
 11427  0015B2  3629               	rlcf	??___ftdiv& (0+255),f,c
 11428  0015B4  E301               	bnc	u7171
 11429  0015B6  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 11430  0015B8                     u7171:
 11431  0015B8  5029               	movf	??___ftdiv,w,c
 11432  0015BA  0100               	movlb	0	; () banked
 11433  0015BC  6F64               	movwf	___ftdiv@exp& (0+255),b
 11434  0015BE  5164               	movf	___ftdiv@exp& (0+255),w,b
 11435  0015C0  A4D8               	btfss	status,2,c
 11436  0015C2  D007               	goto	l1603
 11437                           
 11438                           ; BSR set to: 0
 11439  0015C4  0E00               	movlw	0
 11440  0015C6  6E23               	movwf	?___ftdiv,c
 11441  0015C8  0E00               	movlw	0
 11442  0015CA  6E24               	movwf	?___ftdiv+1,c
 11443  0015CC  0E00               	movlw	0
 11444  0015CE  6E25               	movwf	?___ftdiv+2,c
 11445                           
 11446                           ; BSR set to: 0
 11447  0015D0  0012               	return	
 11448  0015D2                     l1603:
 11449                           
 11450                           ; BSR set to: 0
 11451                           
 11452                           ; BSR set to: 0
 11453  0015D2  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 11454  0015D6  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 11455  0015D8  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 11456  0015DA  3427               	rlcf	___ftdiv@f2+1,w,c
 11457  0015DC  3629               	rlcf	??___ftdiv& (0+255),f,c
 11458  0015DE  E301               	bnc	u7191
 11459  0015E0  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 11460  0015E2                     u7191:
 11461  0015E2  5029               	movf	??___ftdiv,w,c
 11462  0015E4  6F65               	movwf	___ftdiv@sign& (0+255),b
 11463  0015E6  5165               	movf	___ftdiv@sign& (0+255),w,b
 11464  0015E8  A4D8               	btfss	status,2,c
 11465  0015EA  D007               	goto	l1605
 11466                           
 11467                           ; BSR set to: 0
 11468  0015EC  0E00               	movlw	0
 11469  0015EE  6E23               	movwf	?___ftdiv,c
 11470  0015F0  0E00               	movlw	0
 11471  0015F2  6E24               	movwf	?___ftdiv+1,c
 11472  0015F4  0E00               	movlw	0
 11473  0015F6  6E25               	movwf	?___ftdiv+2,c
 11474                           
 11475                           ; BSR set to: 0
 11476  0015F8  0012               	return	
 11477  0015FA                     l1605:
 11478                           
 11479                           ; BSR set to: 0
 11480                           
 11481                           ; BSR set to: 0
 11482  0015FA  0E00               	movlw	0
 11483  0015FC  6F61               	movwf	___ftdiv@f3& (0+255),b
 11484  0015FE  0E00               	movlw	0
 11485  001600  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 11486  001602  0E00               	movlw	0
 11487  001604  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 11488                           
 11489                           ; BSR set to: 0
 11490  001606  5165               	movf	___ftdiv@sign& (0+255),w,b
 11491  001608  0F89               	addlw	137
 11492  00160A  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 11493                           
 11494                           ; BSR set to: 0
 11495  00160C  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 11496                           
 11497                           ; BSR set to: 0
 11498  001610  5028               	movf	___ftdiv@f2+2,w,c
 11499  001612  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 11500                           
 11501                           ; BSR set to: 0
 11502  001614  0E80               	movlw	128
 11503  001616  1765               	andwf	___ftdiv@sign& (0+255),f,b
 11504                           
 11505                           ; BSR set to: 0
 11506  001618  8E24               	bsf	___ftdiv@f1+1,7,c
 11507                           
 11508                           ; BSR set to: 0
 11509  00161A  0EFF               	movlw	255
 11510  00161C  1623               	andwf	___ftdiv@f1,f,c
 11511  00161E  0EFF               	movlw	255
 11512  001620  1624               	andwf	___ftdiv@f1+1,f,c
 11513  001622  0E00               	movlw	0
 11514  001624  1625               	andwf	___ftdiv@f1+2,f,c
 11515                           
 11516                           ; BSR set to: 0
 11517  001626  8E27               	bsf	___ftdiv@f2+1,7,c
 11518                           
 11519                           ; BSR set to: 0
 11520  001628  0EFF               	movlw	255
 11521  00162A  1626               	andwf	___ftdiv@f2,f,c
 11522  00162C  0EFF               	movlw	255
 11523  00162E  1627               	andwf	___ftdiv@f2+1,f,c
 11524  001630  0E00               	movlw	0
 11525  001632  1628               	andwf	___ftdiv@f2+2,f,c
 11526                           
 11527                           ; BSR set to: 0
 11528  001634  0E18               	movlw	24
 11529  001636  6F60               	movwf	___ftdiv@cntr& (0+255),b
 11530  001638                     
 11531                           ; BSR set to: 0
 11532                           
 11533                           ; BSR set to: 0
 11534  001638  90D8               	bcf	status,0,c
 11535  00163A  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 11536  00163C  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11537  00163E  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11538                           
 11539                           ; BSR set to: 0
 11540  001640  5026               	movf	___ftdiv@f2,w,c
 11541  001642  5C23               	subwf	___ftdiv@f1,w,c
 11542  001644  5027               	movf	___ftdiv@f2+1,w,c
 11543  001646  5824               	subwfb	___ftdiv@f1+1,w,c
 11544  001648  5028               	movf	___ftdiv@f2+2,w,c
 11545  00164A  5825               	subwfb	___ftdiv@f1+2,w,c
 11546  00164C  A0D8               	btfss	status,0,c
 11547  00164E  D007               	goto	l1607
 11548                           
 11549                           ; BSR set to: 0
 11550  001650  5026               	movf	___ftdiv@f2,w,c
 11551  001652  5E23               	subwf	___ftdiv@f1,f,c
 11552  001654  5027               	movf	___ftdiv@f2+1,w,c
 11553  001656  5A24               	subwfb	___ftdiv@f1+1,f,c
 11554  001658  5028               	movf	___ftdiv@f2+2,w,c
 11555  00165A  5A25               	subwfb	___ftdiv@f1+2,f,c
 11556                           
 11557                           ; BSR set to: 0
 11558  00165C  8161               	bsf	___ftdiv@f3& (0+255),0,b
 11559  00165E                     l1607:
 11560                           
 11561                           ; BSR set to: 0
 11562  00165E  90D8               	bcf	status,0,c
 11563  001660  3623               	rlcf	___ftdiv@f1,f,c
 11564  001662  3624               	rlcf	___ftdiv@f1+1,f,c
 11565  001664  3625               	rlcf	___ftdiv@f1+2,f,c
 11566                           
 11567                           ; BSR set to: 0
 11568  001666  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 11569  001668  D7E7               	goto	l1606
 11570                           
 11571                           ; BSR set to: 0
 11572                           
 11573                           ; BSR set to: 0
 11574  00166A  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 11575  00166E  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11576  001672  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11577  001676  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 11578  00167A  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 11579  00167E  EC50  F00D         	call	___ftpack	;wreg free
 11580  001682  C018  F023         	movff	?___ftpack,?___ftdiv
 11581  001686  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 11582  00168A  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 11583  00168E  0012               	return	
 11584  001690                     __end_of___ftdiv:
 11585                           	opt stack 0
 11586                           tosu	equ	0xFFF
 11587                           tosh	equ	0xFFE
 11588                           tosl	equ	0xFFD
 11589                           pclath	equ	0xFFA
 11590                           tblptru	equ	0xFF8
 11591                           tblptrh	equ	0xFF7
 11592                           tblptrl	equ	0xFF6
 11593                           tablat	equ	0xFF5
 11594                           prodh	equ	0xFF4
 11595                           prodl	equ	0xFF3
 11596                           intcon	equ	0xFF2
 11597                           intcon2	equ	0xFF1
 11598                           postinc0	equ	0xFEE
 11599                           wreg	equ	0xFE8
 11600                           indf1	equ	0xFE7
 11601                           postdec1	equ	0xFE5
 11602                           fsr1h	equ	0xFE2
 11603                           fsr1l	equ	0xFE1
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           fsr2h	equ	0xFDA
 11608                           fsr2l	equ	0xFD9
 11609                           status	equ	0xFD8
 11610                           
 11611 ;; *************** function ___awtoft *****************
 11612 ;; Defined at:
 11613 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11614 ;; Parameters:    Size  Location     Type
 11615 ;;  c               2   31[COMRAM] int 
 11616 ;; Auto vars:     Size  Location     Type
 11617 ;;  sign            1   34[COMRAM] unsigned char 
 11618 ;; Return value:  Size  Location     Type
 11619 ;;                  3   31[COMRAM] float 
 11620 ;; Registers used:
 11621 ;;		wreg, status,2, status,0, cstack
 11622 ;; Tracked objects:
 11623 ;;		On entry : 0/0
 11624 ;;		On exit  : 0/0
 11625 ;;		Unchanged: 0/0
 11626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11627 ;;      Params:         3       0       0       0       0       0       0
 11628 ;;      Locals:         1       0       0       0       0       0       0
 11629 ;;      Temps:          0       0       0       0       0       0       0
 11630 ;;      Totals:         4       0       0       0       0       0       0
 11631 ;;Total ram usage:        4 bytes
 11632 ;; Hardware stack levels used:    1
 11633 ;; Hardware stack levels required when called:    4
 11634 ;; This function calls:
 11635 ;;		___ftpack
 11636 ;; This function is called by:
 11637 ;;		_exp
 11638 ;;		_log
 11639 ;; This function uses a non-reentrant model
 11640 ;;
 11641                           
 11642                           	psect	text54
 11643  00271E                     __ptext54:
 11644                           	opt stack 0
 11645  00271E                     ___awtoft:
 11646                           	opt stack 23
 11647                           
 11648                           ;incstack = 0
 11649  00271E  0E00               	movlw	0
 11650  002720  6E23               	movwf	___awtoft@sign,c
 11651  002722  AE21               	btfss	___awtoft@c+1,7,c
 11652  002724  D006               	goto	l1520
 11653  002726  6C20               	negf	___awtoft@c,c
 11654  002728  1E21               	comf	___awtoft@c+1,f,c
 11655  00272A  B0D8               	btfsc	status,0,c
 11656  00272C  2A21               	incf	___awtoft@c+1,f,c
 11657  00272E  0E01               	movlw	1
 11658  002730  6E23               	movwf	___awtoft@sign,c
 11659  002732                     l1520:
 11660  002732  C020  F018         	movff	___awtoft@c,___ftpack@arg
 11661  002736  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 11662  00273A  6A1A               	clrf	___ftpack@arg+2,c
 11663  00273C  0E8E               	movlw	142
 11664  00273E  6E1B               	movwf	___ftpack@exp,c
 11665  002740  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 11666  002744  EC50  F00D         	call	___ftpack	;wreg free
 11667  002748  C018  F020         	movff	?___ftpack,?___awtoft
 11668  00274C  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 11669  002750  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 11670  002754  0012               	return	
 11671  002756                     __end_of___awtoft:
 11672                           	opt stack 0
 11673                           tosu	equ	0xFFF
 11674                           tosh	equ	0xFFE
 11675                           tosl	equ	0xFFD
 11676                           pclath	equ	0xFFA
 11677                           tblptru	equ	0xFF8
 11678                           tblptrh	equ	0xFF7
 11679                           tblptrl	equ	0xFF6
 11680                           tablat	equ	0xFF5
 11681                           prodh	equ	0xFF4
 11682                           prodl	equ	0xFF3
 11683                           intcon	equ	0xFF2
 11684                           intcon2	equ	0xFF1
 11685                           postinc0	equ	0xFEE
 11686                           wreg	equ	0xFE8
 11687                           indf1	equ	0xFE7
 11688                           postdec1	equ	0xFE5
 11689                           fsr1h	equ	0xFE2
 11690                           fsr1l	equ	0xFE1
 11691                           indf2	equ	0xFDF
 11692                           postinc2	equ	0xFDE
 11693                           postdec2	equ	0xFDD
 11694                           fsr2h	equ	0xFDA
 11695                           fsr2l	equ	0xFD9
 11696                           status	equ	0xFD8
 11697                           
 11698 ;; *************** function ___lltoft *****************
 11699 ;; Defined at:
 11700 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  c               4   31[COMRAM] unsigned long 
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;  exp             1   39[COMRAM] unsigned char 
 11705 ;; Return value:  Size  Location     Type
 11706 ;;                  3   31[COMRAM] float 
 11707 ;; Registers used:
 11708 ;;		wreg, status,2, status,0, cstack
 11709 ;; Tracked objects:
 11710 ;;		On entry : 0/0
 11711 ;;		On exit  : 0/0
 11712 ;;		Unchanged: 0/0
 11713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11714 ;;      Params:         4       0       0       0       0       0       0
 11715 ;;      Locals:         1       0       0       0       0       0       0
 11716 ;;      Temps:          4       0       0       0       0       0       0
 11717 ;;      Totals:         9       0       0       0       0       0       0
 11718 ;;Total ram usage:        9 bytes
 11719 ;; Hardware stack levels used:    1
 11720 ;; Hardware stack levels required when called:    4
 11721 ;; This function calls:
 11722 ;;		___ftpack
 11723 ;; This function is called by:
 11724 ;;		_pow
 11725 ;;		_CheckFlashPrecentage
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           	psect	text55
 11730  002102                     __ptext55:
 11731                           	opt stack 0
 11732  002102                     ___lltoft:
 11733                           	opt stack 24
 11734                           
 11735                           ;incstack = 0
 11736  002102  0E8E               	movlw	142
 11737  002104  6E28               	movwf	___lltoft@exp,c
 11738  002106  D006               	goto	l1696
 11739  002108  90D8               	bcf	status,0,c
 11740  00210A  3223               	rrcf	___lltoft@c+3,f,c
 11741  00210C  3222               	rrcf	___lltoft@c+2,f,c
 11742  00210E  3221               	rrcf	___lltoft@c+1,f,c
 11743  002110  3220               	rrcf	___lltoft@c,f,c
 11744  002112  2A28               	incf	___lltoft@exp,f,c
 11745  002114                     l1696:
 11746  002114  0E00               	movlw	0
 11747  002116  1420               	andwf	___lltoft@c,w,c
 11748  002118  6E24               	movwf	??___lltoft& (0+255),c
 11749  00211A  0E00               	movlw	0
 11750  00211C  1421               	andwf	___lltoft@c+1,w,c
 11751  00211E  6E25               	movwf	(??___lltoft+1)& (0+255),c
 11752  002120  0E00               	movlw	0
 11753  002122  1422               	andwf	___lltoft@c+2,w,c
 11754  002124  6E26               	movwf	(??___lltoft+2)& (0+255),c
 11755  002126  0EFF               	movlw	255
 11756  002128  1423               	andwf	___lltoft@c+3,w,c
 11757  00212A  6E27               	movwf	(??___lltoft+3)& (0+255),c
 11758  00212C  5024               	movf	??___lltoft,w,c
 11759  00212E  1025               	iorwf	??___lltoft+1,w,c
 11760  002130  1026               	iorwf	??___lltoft+2,w,c
 11761  002132  1027               	iorwf	??___lltoft+3,w,c
 11762  002134  A4D8               	btfss	status,2,c
 11763  002136  D7E8               	goto	l1697
 11764  002138  C020  F018         	movff	___lltoft@c,___ftpack@arg
 11765  00213C  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 11766  002140  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 11767  002144  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 11768  002148  0E00               	movlw	0
 11769  00214A  6E1C               	movwf	___ftpack@sign,c
 11770  00214C  EC50  F00D         	call	___ftpack	;wreg free
 11771  002150  C018  F020         	movff	?___ftpack,?___lltoft
 11772  002154  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 11773  002158  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 11774  00215C  0012               	return	
 11775  00215E                     __end_of___lltoft:
 11776                           	opt stack 0
 11777                           tosu	equ	0xFFF
 11778                           tosh	equ	0xFFE
 11779                           tosl	equ	0xFFD
 11780                           pclath	equ	0xFFA
 11781                           tblptru	equ	0xFF8
 11782                           tblptrh	equ	0xFF7
 11783                           tblptrl	equ	0xFF6
 11784                           tablat	equ	0xFF5
 11785                           prodh	equ	0xFF4
 11786                           prodl	equ	0xFF3
 11787                           intcon	equ	0xFF2
 11788                           intcon2	equ	0xFF1
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           indf1	equ	0xFE7
 11792                           postdec1	equ	0xFE5
 11793                           fsr1h	equ	0xFE2
 11794                           fsr1l	equ	0xFE1
 11795                           indf2	equ	0xFDF
 11796                           postinc2	equ	0xFDE
 11797                           postdec2	equ	0xFDD
 11798                           fsr2h	equ	0xFDA
 11799                           fsr2l	equ	0xFD9
 11800                           status	equ	0xFD8
 11801                           
 11802 ;; *************** function ___lwtoft *****************
 11803 ;; Defined at:
 11804 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;  c               2   31[COMRAM] unsigned int 
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  3   31[COMRAM] float 
 11811 ;; Registers used:
 11812 ;;		wreg, status,2, status,0, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11818 ;;      Params:         3       0       0       0       0       0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0
 11821 ;;      Totals:         3       0       0       0       0       0       0
 11822 ;;Total ram usage:        3 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    4
 11825 ;; This function calls:
 11826 ;;		___ftpack
 11827 ;; This function is called by:
 11828 ;;		_SampleSingleChannel
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           	psect	text56
 11833  002942                     __ptext56:
 11834                           	opt stack 0
 11835  002942                     ___lwtoft:
 11836                           	opt stack 25
 11837                           
 11838                           ;incstack = 0
 11839  002942  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 11840  002946  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 11841  00294A  6A1A               	clrf	___ftpack@arg+2,c
 11842  00294C  0E8E               	movlw	142
 11843  00294E  6E1B               	movwf	___ftpack@exp,c
 11844  002950  0E00               	movlw	0
 11845  002952  6E1C               	movwf	___ftpack@sign,c
 11846  002954  EC50  F00D         	call	___ftpack	;wreg free
 11847  002958  C018  F020         	movff	?___ftpack,?___lwtoft
 11848  00295C  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 11849  002960  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 11850  002964  0012               	return	
 11851  002966                     __end_of___lwtoft:
 11852                           	opt stack 0
 11853                           tosu	equ	0xFFF
 11854                           tosh	equ	0xFFE
 11855                           tosl	equ	0xFFD
 11856                           pclath	equ	0xFFA
 11857                           tblptru	equ	0xFF8
 11858                           tblptrh	equ	0xFF7
 11859                           tblptrl	equ	0xFF6
 11860                           tablat	equ	0xFF5
 11861                           prodh	equ	0xFF4
 11862                           prodl	equ	0xFF3
 11863                           intcon	equ	0xFF2
 11864                           intcon2	equ	0xFF1
 11865                           postinc0	equ	0xFEE
 11866                           wreg	equ	0xFE8
 11867                           indf1	equ	0xFE7
 11868                           postdec1	equ	0xFE5
 11869                           fsr1h	equ	0xFE2
 11870                           fsr1l	equ	0xFE1
 11871                           indf2	equ	0xFDF
 11872                           postinc2	equ	0xFDE
 11873                           postdec2	equ	0xFDD
 11874                           fsr2h	equ	0xFDA
 11875                           fsr2l	equ	0xFD9
 11876                           status	equ	0xFD8
 11877                           
 11878 ;; *************** function ___ftpack *****************
 11879 ;; Defined at:
 11880 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;  arg             3   23[COMRAM] unsigned um
 11883 ;;  exp             1   26[COMRAM] unsigned char 
 11884 ;;  sign            1   27[COMRAM] unsigned char 
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;		None
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  3   23[COMRAM] float 
 11889 ;; Registers used:
 11890 ;;		wreg, status,2, status,0
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11896 ;;      Params:         5       0       0       0       0       0       0
 11897 ;;      Locals:         0       0       0       0       0       0       0
 11898 ;;      Temps:          3       0       0       0       0       0       0
 11899 ;;      Totals:         8       0       0       0       0       0       0
 11900 ;;Total ram usage:        8 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    3
 11903 ;; This function calls:
 11904 ;;		Nothing
 11905 ;; This function is called by:
 11906 ;;		___altoft
 11907 ;;		___awtoft
 11908 ;;		___ftadd
 11909 ;;		___ftdiv
 11910 ;;		___ftmul
 11911 ;;		___lltoft
 11912 ;;		___lwtoft
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text57
 11917  001AA0                     __ptext57:
 11918                           	opt stack 0
 11919  001AA0                     ___ftpack:
 11920                           	opt stack 22
 11921                           
 11922                           ;incstack = 0
 11923  001AA0  501B               	movf	___ftpack@exp,w,c
 11924  001AA2  B4D8               	btfsc	status,2,c
 11925  001AA4  D005               	goto	u6200
 11926  001AA6  5018               	movf	___ftpack@arg,w,c
 11927  001AA8  1019               	iorwf	___ftpack@arg+1,w,c
 11928  001AAA  101A               	iorwf	___ftpack@arg+2,w,c
 11929  001AAC  A4D8               	btfss	status,2,c
 11930  001AAE  D00C               	goto	l1539
 11931  001AB0                     u6200:
 11932  001AB0  0E00               	movlw	0
 11933  001AB2  6E18               	movwf	?___ftpack,c
 11934  001AB4  0E00               	movlw	0
 11935  001AB6  6E19               	movwf	?___ftpack+1,c
 11936  001AB8  0E00               	movlw	0
 11937  001ABA  6E1A               	movwf	?___ftpack+2,c
 11938  001ABC  0012               	return	
 11939  001ABE  2A1B               	incf	___ftpack@exp,f,c
 11940  001AC0  90D8               	bcf	status,0,c
 11941  001AC2  321A               	rrcf	___ftpack@arg+2,f,c
 11942  001AC4  3219               	rrcf	___ftpack@arg+1,f,c
 11943  001AC6  3218               	rrcf	___ftpack@arg,f,c
 11944  001AC8                     l1539:
 11945  001AC8  0E00               	movlw	0
 11946  001ACA  1418               	andwf	___ftpack@arg,w,c
 11947  001ACC  6E1D               	movwf	??___ftpack& (0+255),c
 11948  001ACE  0E00               	movlw	0
 11949  001AD0  1419               	andwf	___ftpack@arg+1,w,c
 11950  001AD2  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 11951  001AD4  0EFE               	movlw	254
 11952  001AD6  141A               	andwf	___ftpack@arg+2,w,c
 11953  001AD8  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 11954  001ADA  501D               	movf	??___ftpack,w,c
 11955  001ADC  101E               	iorwf	??___ftpack+1,w,c
 11956  001ADE  101F               	iorwf	??___ftpack+2,w,c
 11957  001AE0  B4D8               	btfsc	status,2,c
 11958  001AE2  D00C               	goto	l1542
 11959  001AE4  D7EC               	goto	l1540
 11960  001AE6  2A1B               	incf	___ftpack@exp,f,c
 11961  001AE8  0E01               	movlw	1
 11962  001AEA  2618               	addwf	___ftpack@arg,f,c
 11963  001AEC  0E00               	movlw	0
 11964  001AEE  2219               	addwfc	___ftpack@arg+1,f,c
 11965  001AF0  0E00               	movlw	0
 11966  001AF2  221A               	addwfc	___ftpack@arg+2,f,c
 11967  001AF4  90D8               	bcf	status,0,c
 11968  001AF6  321A               	rrcf	___ftpack@arg+2,f,c
 11969  001AF8  3219               	rrcf	___ftpack@arg+1,f,c
 11970  001AFA  3218               	rrcf	___ftpack@arg,f,c
 11971  001AFC                     l1542:
 11972  001AFC  0E00               	movlw	0
 11973  001AFE  1418               	andwf	___ftpack@arg,w,c
 11974  001B00  6E1D               	movwf	??___ftpack& (0+255),c
 11975  001B02  0E00               	movlw	0
 11976  001B04  1419               	andwf	___ftpack@arg+1,w,c
 11977  001B06  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 11978  001B08  0EFF               	movlw	255
 11979  001B0A  141A               	andwf	___ftpack@arg+2,w,c
 11980  001B0C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 11981  001B0E  501D               	movf	??___ftpack,w,c
 11982  001B10  101E               	iorwf	??___ftpack+1,w,c
 11983  001B12  101F               	iorwf	??___ftpack+2,w,c
 11984  001B14  B4D8               	btfsc	status,2,c
 11985  001B16  D006               	goto	l1545
 11986  001B18  D7E6               	goto	l1543
 11987  001B1A  061B               	decf	___ftpack@exp,f,c
 11988  001B1C  90D8               	bcf	status,0,c
 11989  001B1E  3618               	rlcf	___ftpack@arg,f,c
 11990  001B20  3619               	rlcf	___ftpack@arg+1,f,c
 11991  001B22  361A               	rlcf	___ftpack@arg+2,f,c
 11992  001B24                     l1545:
 11993  001B24  BE19               	btfsc	___ftpack@arg+1,7,c
 11994  001B26  D003               	goto	u6240
 11995  001B28  0E02               	movlw	2
 11996  001B2A  601B               	cpfslt	___ftpack@exp,c
 11997  001B2C  D7F6               	goto	l1546
 11998  001B2E                     u6240:
 11999  001B2E  A01B               	btfss	___ftpack@exp,0,c
 12000  001B30  9E19               	bcf	___ftpack@arg+1,7,c
 12001  001B32  90D8               	bcf	status,0,c
 12002  001B34  321B               	rrcf	___ftpack@exp,f,c
 12003  001B36  501B               	movf	___ftpack@exp,w,c
 12004  001B38  121A               	iorwf	___ftpack@arg+2,f,c
 12005  001B3A  501C               	movf	___ftpack@sign,w,c
 12006  001B3C  A4D8               	btfss	status,2,c
 12007  001B3E  8E1A               	bsf	___ftpack@arg+2,7,c
 12008  001B40  C018  F018         	movff	___ftpack@arg,?___ftpack
 12009  001B44  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 12010  001B48  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 12011  001B4C  0012               	return	
 12012  001B4E                     __end_of___ftpack:
 12013                           	opt stack 0
 12014                           tosu	equ	0xFFF
 12015                           tosh	equ	0xFFE
 12016                           tosl	equ	0xFFD
 12017                           pclath	equ	0xFFA
 12018                           tblptru	equ	0xFF8
 12019                           tblptrh	equ	0xFF7
 12020                           tblptrl	equ	0xFF6
 12021                           tablat	equ	0xFF5
 12022                           prodh	equ	0xFF4
 12023                           prodl	equ	0xFF3
 12024                           intcon	equ	0xFF2
 12025                           intcon2	equ	0xFF1
 12026                           postinc0	equ	0xFEE
 12027                           wreg	equ	0xFE8
 12028                           indf1	equ	0xFE7
 12029                           postdec1	equ	0xFE5
 12030                           fsr1h	equ	0xFE2
 12031                           fsr1l	equ	0xFE1
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _UART_Write_Text *****************
 12040 ;; Defined at:
 12041 ;;		line 224 in file "EusartApp.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  text            2   24[COMRAM] PTR unsigned char 
 12044 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), STR_10(10), STR_9(10), 
 12045 ;;		 -> STR_8(10), readUartByte@dest(50), STR_6(9), SampleSingleChannel@dest(50), 
 12046 ;;		 -> STR_4(10), STR_3(10), STR_2(10), STR_1(10), 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  i               2   28[COMRAM] int 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  1    wreg      void 
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12058 ;;      Params:         2       0       0       0       0       0       0
 12059 ;;      Locals:         2       0       0       0       0       0       0
 12060 ;;      Temps:          2       0       0       0       0       0       0
 12061 ;;      Totals:         6       0       0       0       0       0       0
 12062 ;;Total ram usage:        6 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    4
 12065 ;; This function calls:
 12066 ;;		_EUSART1_Write
 12067 ;; This function is called by:
 12068 ;;		_AdcSingleSample
 12069 ;;		_SampleSingleChannel
 12070 ;;		_readUartByte
 12071 ;;		_SendUartSystemInitMessage
 12072 ;;		_PrintHelpScreen
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           	psect	text58
 12077  001F02                     __ptext58:
 12078                           	opt stack 0
 12079  001F02                     _UART_Write_Text:
 12080                           	opt stack 25
 12081                           
 12082                           ;EusartApp.c: 226: for(int i =0;text[i]!='\0';i++)
 12083                           
 12084                           ;incstack = 0
 12085  001F02  0E00               	movlw	0
 12086  001F04  6E1E               	movwf	UART_Write_Text@i+1,c
 12087  001F06  0E00               	movlw	0
 12088  001F08  6E1D               	movwf	UART_Write_Text@i,c
 12089  001F0A  D01A               	goto	l235
 12090  001F0C                     
 12091                           ;EusartApp.c: 227: {
 12092                           ;EusartApp.c: 228: EUSART1_Write(text[i]);
 12093  001F0C  501D               	movf	UART_Write_Text@i,w,c
 12094  001F0E  2419               	addwf	UART_Write_Text@text,w,c
 12095  001F10  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12096  001F12  501E               	movf	UART_Write_Text@i+1,w,c
 12097  001F14  201A               	addwfc	UART_Write_Text@text+1,w,c
 12098  001F16  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12099  001F18  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12100  001F1C  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12101  001F20  6AF8               	clrf	tblptru,c
 12102  001F22  0E05               	movlw	(high __ramtop+-1)
 12103  001F24  64F7               	cpfsgt	tblptrh,c
 12104  001F26  D003               	bra	u7017
 12105  001F28  0008               	tblrd		*
 12106  001F2A  50F5               	movf	tablat,w,c
 12107  001F2C  D005               	bra	u7010
 12108  001F2E                     u7017:
 12109  001F2E  CFF6 FFE9          	movff	tblptrl,fsr0l
 12110  001F32  CFF7 FFEA          	movff	tblptrh,fsr0h
 12111  001F36  50EF               	movf	indf0,w,c
 12112  001F38                     u7010:
 12113  001F38  EC35  F013         	call	_EUSART1_Write
 12114  001F3C  4A1D               	infsnz	UART_Write_Text@i,f,c
 12115  001F3E  2A1E               	incf	UART_Write_Text@i+1,f,c
 12116  001F40                     l235:
 12117  001F40  501D               	movf	UART_Write_Text@i,w,c
 12118  001F42  2419               	addwf	UART_Write_Text@text,w,c
 12119  001F44  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12120  001F46  501E               	movf	UART_Write_Text@i+1,w,c
 12121  001F48  201A               	addwfc	UART_Write_Text@text+1,w,c
 12122  001F4A  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12123  001F4C  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12124  001F50  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12125  001F54  6AF8               	clrf	tblptru,c
 12126  001F56  0E05               	movlw	(high __ramtop+-1)
 12127  001F58  64F7               	cpfsgt	tblptrh,c
 12128  001F5A  D003               	bra	u7027
 12129  001F5C  0008               	tblrd		*
 12130  001F5E  50F5               	movf	tablat,w,c
 12131  001F60  D005               	bra	u7020
 12132  001F62                     u7027:
 12133  001F62  CFF6 FFE9          	movff	tblptrl,fsr0l
 12134  001F66  CFF7 FFEA          	movff	tblptrh,fsr0h
 12135  001F6A  50EF               	movf	indf0,w,c
 12136  001F6C                     u7020:
 12137  001F6C  0900               	iorlw	0
 12138  001F6E  B4D8               	btfsc	status,2,c
 12139  001F70  0012               	return	
 12140  001F72  D7CC               	goto	l236
 12141  001F74                     __end_of_UART_Write_Text:
 12142                           	opt stack 0
 12143                           tosu	equ	0xFFF
 12144                           tosh	equ	0xFFE
 12145                           tosl	equ	0xFFD
 12146                           pclath	equ	0xFFA
 12147                           tblptru	equ	0xFF8
 12148                           tblptrh	equ	0xFF7
 12149                           tblptrl	equ	0xFF6
 12150                           tablat	equ	0xFF5
 12151                           prodh	equ	0xFF4
 12152                           prodl	equ	0xFF3
 12153                           intcon	equ	0xFF2
 12154                           intcon2	equ	0xFF1
 12155                           indf0	equ	0xFEF
 12156                           postinc0	equ	0xFEE
 12157                           fsr0h	equ	0xFEA
 12158                           fsr0l	equ	0xFE9
 12159                           wreg	equ	0xFE8
 12160                           indf1	equ	0xFE7
 12161                           postdec1	equ	0xFE5
 12162                           fsr1h	equ	0xFE2
 12163                           fsr1l	equ	0xFE1
 12164                           indf2	equ	0xFDF
 12165                           postinc2	equ	0xFDE
 12166                           postdec2	equ	0xFDD
 12167                           fsr2h	equ	0xFDA
 12168                           fsr2l	equ	0xFD9
 12169                           status	equ	0xFD8
 12170                           
 12171 ;; *************** function _EUSART1_Write *****************
 12172 ;; Defined at:
 12173 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 12174 ;; Parameters:    Size  Location     Type
 12175 ;;  txData          1    wreg     unsigned char 
 12176 ;; Auto vars:     Size  Location     Type
 12177 ;;  txData          1   23[COMRAM] unsigned char 
 12178 ;; Return value:  Size  Location     Type
 12179 ;;                  1    wreg      void 
 12180 ;; Registers used:
 12181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12182 ;; Tracked objects:
 12183 ;;		On entry : 0/0
 12184 ;;		On exit  : 0/0
 12185 ;;		Unchanged: 0/0
 12186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12187 ;;      Params:         0       0       0       0       0       0       0
 12188 ;;      Locals:         1       0       0       0       0       0       0
 12189 ;;      Temps:          0       0       0       0       0       0       0
 12190 ;;      Totals:         1       0       0       0       0       0       0
 12191 ;;Total ram usage:        1 bytes
 12192 ;; Hardware stack levels used:    1
 12193 ;; Hardware stack levels required when called:    3
 12194 ;; This function calls:
 12195 ;;		Nothing
 12196 ;; This function is called by:
 12197 ;;		_UART_Write_Text
 12198 ;;		_WriteUartMessage
 12199 ;; This function uses a non-reentrant model
 12200 ;;
 12201                           
 12202                           	psect	text59
 12203  00266A                     __ptext59:
 12204                           	opt stack 0
 12205  00266A                     _EUSART1_Write:
 12206                           	opt stack 25
 12207                           
 12208                           ;incstack = 0
 12209                           ;EUSART1_Write@txData stored from wreg
 12210  00266A  6E18               	movwf	EUSART1_Write@txData,c
 12211  00266C                     
 12212                           ;eusart1.c: 160: {
 12213                           
 12214                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 12215  00266C  0100               	movlb	0	; () banked
 12216  00266E  51D9               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12217  002670  B4D8               	btfsc	status,2,c
 12218  002672  D7FC               	goto	l6343
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;eusart1.c: 161: }
 12222                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 12223  002674  B89D               	btfsc	3997,4,c	;volatile
 12224  002676  D003               	goto	l791
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;eusart1.c: 164: {
 12228                           ;eusart1.c: 165: TXREG1 = txData;
 12229  002678  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12230                           
 12231                           ;eusart1.c: 166: }
 12232  00267C  D012               	goto	l792
 12233  00267E                     l791:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;eusart1.c: 167: else
 12237                           ;eusart1.c: 168: {
 12238                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 12239  00267E  989D               	bcf	3997,4,c	;volatile
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 12243  002680  503C               	movf	_eusart1TxHead,w,c	;volatile
 12244  002682  0D01               	mullw	1
 12245  002684  0E00               	movlw	low _eusart1TxBuffer
 12246  002686  24F3               	addwf	prodl,w,c
 12247  002688  6ED9               	movwf	fsr2l,c
 12248  00268A  0E01               	movlw	high _eusart1TxBuffer
 12249  00268C  20F4               	addwfc	prodh,w,c
 12250  00268E  6EDA               	movwf	fsr2h,c
 12251  002690  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 12252                           
 12253                           ; BSR set to: 0
 12254  002694  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12258  002696  0E45               	movlw	69
 12259  002698  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 12260  00269A  D002               	goto	l793
 12261                           
 12262                           ; BSR set to: 0
 12263                           ;eusart1.c: 172: {
 12264                           ;eusart1.c: 173: eusart1TxHead = 0;
 12265  00269C  0E00               	movlw	0
 12266  00269E  6E3C               	movwf	_eusart1TxHead,c	;volatile
 12267  0026A0                     l793:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;eusart1.c: 174: }
 12271                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 12272                           
 12273                           ; BSR set to: 0
 12274  0026A0  07D9               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12275  0026A2                     l792:
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;eusart1.c: 176: }
 12279                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 12280                           
 12281                           ; BSR set to: 0
 12282  0026A2  889D               	bsf	3997,4,c	;volatile
 12283                           
 12284                           ; BSR set to: 0
 12285  0026A4  0012               	return		;funcret
 12286  0026A6                     __end_of_EUSART1_Write:
 12287                           	opt stack 0
 12288                           tosu	equ	0xFFF
 12289                           tosh	equ	0xFFE
 12290                           tosl	equ	0xFFD
 12291                           pclath	equ	0xFFA
 12292                           tblptru	equ	0xFF8
 12293                           tblptrh	equ	0xFF7
 12294                           tblptrl	equ	0xFF6
 12295                           tablat	equ	0xFF5
 12296                           prodh	equ	0xFF4
 12297                           prodl	equ	0xFF3
 12298                           intcon	equ	0xFF2
 12299                           intcon2	equ	0xFF1
 12300                           indf0	equ	0xFEF
 12301                           postinc0	equ	0xFEE
 12302                           fsr0h	equ	0xFEA
 12303                           fsr0l	equ	0xFE9
 12304                           wreg	equ	0xFE8
 12305                           indf1	equ	0xFE7
 12306                           postdec1	equ	0xFE5
 12307                           fsr1h	equ	0xFE2
 12308                           fsr1l	equ	0xFE1
 12309                           indf2	equ	0xFDF
 12310                           postinc2	equ	0xFDE
 12311                           postdec2	equ	0xFDD
 12312                           fsr2h	equ	0xFDA
 12313                           fsr2l	equ	0xFD9
 12314                           status	equ	0xFD8
 12315                           
 12316 ;; *************** function _ADC_GetConversion *****************
 12317 ;; Defined at:
 12318 ;;		line 106 in file "mcc_generated_files/adc.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  channel         1    wreg     enum E6975
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;  channel         1   27[COMRAM] enum E6975
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  2   23[COMRAM] unsigned int 
 12325 ;; Registers used:
 12326 ;;		wreg, status,2, status,0
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12332 ;;      Params:         2       0       0       0       0       0       0
 12333 ;;      Locals:         1       0       0       0       0       0       0
 12334 ;;      Temps:          2       0       0       0       0       0       0
 12335 ;;      Totals:         5       0       0       0       0       0       0
 12336 ;;Total ram usage:        5 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    3
 12339 ;; This function calls:
 12340 ;;		Nothing
 12341 ;; This function is called by:
 12342 ;;		_SampleSingleChannel
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           	psect	text60
 12347  00282A                     __ptext60:
 12348                           	opt stack 0
 12349  00282A                     _ADC_GetConversion:
 12350                           	opt stack 26
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;incstack = 0
 12354                           ;ADC_GetConversion@channel stored from wreg
 12355  00282A  6E1C               	movwf	ADC_GetConversion@channel,c
 12356                           
 12357                           ;adc.c: 109: ADCON0bits.CHS = channel;
 12358  00282C  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 12359  002830  461A               	rlncf	??_ADC_GetConversion,f,c
 12360  002832  461A               	rlncf	??_ADC_GetConversion,f,c
 12361  002834  50C2               	movf	4034,w,c	;volatile
 12362  002836  181A               	xorwf	??_ADC_GetConversion,w,c
 12363  002838  0B83               	andlw	-125
 12364  00283A  181A               	xorwf	??_ADC_GetConversion,w,c
 12365  00283C  6EC2               	movwf	4034,c	;volatile
 12366                           
 12367                           ;adc.c: 112: ADCON0bits.ADON = 1;
 12368  00283E  80C2               	bsf	4034,0,c	;volatile
 12369                           
 12370                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 12371  002840  82C2               	bsf	4034,1,c	;volatile
 12372  002842                     
 12373                           ;adc.c: 119: {
 12374  002842  B2C2               	btfsc	4034,1,c	;volatile
 12375  002844  D7FE               	goto	l1001
 12376                           
 12377                           ;adc.c: 120: }
 12378                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 12379  002846  50C4               	movf	4036,w,c	;volatile
 12380  002848  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 12381  00284A  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 12382  00284C  50C3               	movf	4035,w,c	;volatile
 12383  00284E  241A               	addwf	??_ADC_GetConversion,w,c
 12384  002850  6E18               	movwf	?_ADC_GetConversion,c
 12385  002852  0E00               	movlw	0
 12386  002854  201B               	addwfc	??_ADC_GetConversion+1,w,c
 12387  002856  6E19               	movwf	?_ADC_GetConversion+1,c
 12388  002858  0012               	return	
 12389  00285A                     __end_of_ADC_GetConversion:
 12390                           	opt stack 0
 12391                           tosu	equ	0xFFF
 12392                           tosh	equ	0xFFE
 12393                           tosl	equ	0xFFD
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           intcon2	equ	0xFF1
 12403                           indf0	equ	0xFEF
 12404                           postinc0	equ	0xFEE
 12405                           fsr0h	equ	0xFEA
 12406                           fsr0l	equ	0xFE9
 12407                           wreg	equ	0xFE8
 12408                           indf1	equ	0xFE7
 12409                           postdec1	equ	0xFE5
 12410                           fsr1h	equ	0xFE2
 12411                           fsr1l	equ	0xFE1
 12412                           indf2	equ	0xFDF
 12413                           postinc2	equ	0xFDE
 12414                           postdec2	equ	0xFDD
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419 ;; *************** function _InitSystemApplicationManagers *****************
 12420 ;; Defined at:
 12421 ;;		line 33 in file "SystemSettings.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;		None
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      void 
 12428 ;; Registers used:
 12429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12435 ;;      Params:         0       0       0       0       0       0       0
 12436 ;;      Locals:         0       0       0       0       0       0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0
 12438 ;;      Totals:         0       0       0       0       0       0       0
 12439 ;;Total ram usage:        0 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    7
 12442 ;; This function calls:
 12443 ;;		_ClearMcuRunTime
 12444 ;;		_DacInit
 12445 ;;		_InitAdcApplicationMgr
 12446 ;;		_PLLInitialize
 12447 ;;		_TMR0_StartTimer
 12448 ;; This function is called by:
 12449 ;;		_main
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           	psect	text61
 12454  002A24                     __ptext61:
 12455                           	opt stack 0
 12456  002A24                     _InitSystemApplicationManagers:
 12457                           	opt stack 23
 12458                           
 12459                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 12460                           
 12461                           ;incstack = 0
 12462  002A24  EC4A  F015         	call	_InitAdcApplicationMgr	;wreg free
 12463                           
 12464                           ;SystemSettings.c: 39: TMR0_StartTimer();
 12465  002A28  EC51  F015         	call	_TMR0_StartTimer	;wreg free
 12466                           
 12467                           ;SystemSettings.c: 42: PLLInitialize();
 12468  002A2C  ECAB  F006         	call	_PLLInitialize	;wreg free
 12469                           
 12470                           ;SystemSettings.c: 45: ClearMcuRunTime();
 12471  002A30  EC27  F015         	call	_ClearMcuRunTime	;wreg free
 12472                           
 12473                           ;SystemSettings.c: 48: DacInit();
 12474  002A34  ECBA  F00F         	call	_DacInit	;wreg free
 12475  002A38  0012               	return		;funcret
 12476  002A3A                     __end_of_InitSystemApplicationManagers:
 12477                           	opt stack 0
 12478                           tosu	equ	0xFFF
 12479                           tosh	equ	0xFFE
 12480                           tosl	equ	0xFFD
 12481                           pclath	equ	0xFFA
 12482                           tblptru	equ	0xFF8
 12483                           tblptrh	equ	0xFF7
 12484                           tblptrl	equ	0xFF6
 12485                           tablat	equ	0xFF5
 12486                           prodh	equ	0xFF4
 12487                           prodl	equ	0xFF3
 12488                           intcon	equ	0xFF2
 12489                           intcon2	equ	0xFF1
 12490                           indf0	equ	0xFEF
 12491                           postinc0	equ	0xFEE
 12492                           fsr0h	equ	0xFEA
 12493                           fsr0l	equ	0xFE9
 12494                           wreg	equ	0xFE8
 12495                           indf1	equ	0xFE7
 12496                           postdec1	equ	0xFE5
 12497                           fsr1h	equ	0xFE2
 12498                           fsr1l	equ	0xFE1
 12499                           indf2	equ	0xFDF
 12500                           postinc2	equ	0xFDE
 12501                           postdec2	equ	0xFDD
 12502                           fsr2h	equ	0xFDA
 12503                           fsr2l	equ	0xFD9
 12504                           status	equ	0xFD8
 12505                           
 12506 ;; *************** function _TMR0_StartTimer *****************
 12507 ;; Defined at:
 12508 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;		None
 12511 ;; Auto vars:     Size  Location     Type
 12512 ;;		None
 12513 ;; Return value:  Size  Location     Type
 12514 ;;                  1    wreg      void 
 12515 ;; Registers used:
 12516 ;;		None
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12522 ;;      Params:         0       0       0       0       0       0       0
 12523 ;;      Locals:         0       0       0       0       0       0       0
 12524 ;;      Temps:          0       0       0       0       0       0       0
 12525 ;;      Totals:         0       0       0       0       0       0       0
 12526 ;;Total ram usage:        0 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    3
 12529 ;; This function calls:
 12530 ;;		Nothing
 12531 ;; This function is called by:
 12532 ;;		_InitSystemApplicationManagers
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           	psect	text62
 12537  002AA2                     __ptext62:
 12538                           	opt stack 0
 12539  002AA2                     _TMR0_StartTimer:
 12540                           	opt stack 26
 12541                           
 12542                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 12543                           
 12544                           ;incstack = 0
 12545  002AA2  8ED5               	bsf	4053,7,c	;volatile
 12546  002AA4  0012               	return		;funcret
 12547  002AA6                     __end_of_TMR0_StartTimer:
 12548                           	opt stack 0
 12549                           tosu	equ	0xFFF
 12550                           tosh	equ	0xFFE
 12551                           tosl	equ	0xFFD
 12552                           pclath	equ	0xFFA
 12553                           tblptru	equ	0xFF8
 12554                           tblptrh	equ	0xFF7
 12555                           tblptrl	equ	0xFF6
 12556                           tablat	equ	0xFF5
 12557                           prodh	equ	0xFF4
 12558                           prodl	equ	0xFF3
 12559                           intcon	equ	0xFF2
 12560                           intcon2	equ	0xFF1
 12561                           indf0	equ	0xFEF
 12562                           postinc0	equ	0xFEE
 12563                           fsr0h	equ	0xFEA
 12564                           fsr0l	equ	0xFE9
 12565                           wreg	equ	0xFE8
 12566                           indf1	equ	0xFE7
 12567                           postdec1	equ	0xFE5
 12568                           fsr1h	equ	0xFE2
 12569                           fsr1l	equ	0xFE1
 12570                           indf2	equ	0xFDF
 12571                           postinc2	equ	0xFDE
 12572                           postdec2	equ	0xFDD
 12573                           fsr2h	equ	0xFDA
 12574                           fsr2l	equ	0xFD9
 12575                           status	equ	0xFD8
 12576                           
 12577 ;; *************** function _PLLInitialize *****************
 12578 ;; Defined at:
 12579 ;;		line 14 in file "SyntApp.c"
 12580 ;; Parameters:    Size  Location     Type
 12581 ;;		None
 12582 ;; Auto vars:     Size  Location     Type
 12583 ;;  idx             2   45[COMRAM] int 
 12584 ;;  idx             2   43[COMRAM] int 
 12585 ;; Return value:  Size  Location     Type
 12586 ;;                  1    wreg      void 
 12587 ;; Registers used:
 12588 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12594 ;;      Params:         0       0       0       0       0       0       0
 12595 ;;      Locals:         4       0       0       0       0       0       0
 12596 ;;      Temps:          2       0       0       0       0       0       0
 12597 ;;      Totals:         6       0       0       0       0       0       0
 12598 ;;Total ram usage:        6 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    6
 12601 ;; This function calls:
 12602 ;;		_SWSPI_send_word
 12603 ;;		_SwSpi_Set_CE_Pin
 12604 ;; This function is called by:
 12605 ;;		_InitSystemApplicationManagers
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           	psect	text63
 12610  000D56                     __ptext63:
 12611                           	opt stack 0
 12612  000D56                     _PLLInitialize:
 12613                           	opt stack 23
 12614                           
 12615                           ;SyntApp.c: 17: IOCB = 0b10000000;
 12616                           
 12617                           ;incstack = 0
 12618  000D56  0E80               	movlw	128
 12619  000D58  6E62               	movwf	3938,c	;volatile
 12620                           
 12621                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 12622  000D5A  0E01               	movlw	1
 12623  000D5C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 12624  000D5E  0E00               	movlw	0
 12625  000D60  EC53  F013         	call	_SwSpi_Set_CE_Pin
 12626                           
 12627                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
 12628  000D64  0E00               	movlw	0
 12629  000D66  6E2D               	movwf	PLLInitialize@idx+1,c
 12630  000D68  0E00               	movlw	0
 12631  000D6A  6E2C               	movwf	PLLInitialize@idx,c
 12632  000D6C                     l5463:
 12633  000D6C  BE2D               	btfsc	PLLInitialize@idx+1,7,c
 12634  000D6E  D006               	goto	l444
 12635  000D70  502D               	movf	PLLInitialize@idx+1,w,c
 12636  000D72  E128               	bnz	l5473
 12637  000D74  0E0D               	movlw	13
 12638  000D76  5C2C               	subwf	PLLInitialize@idx,w,c
 12639  000D78  B0D8               	btfsc	status,0,c
 12640  000D7A  D024               	goto	u5050
 12641  000D7C                     l444:
 12642                           
 12643                           ;SyntApp.c: 25: {
 12644                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 12645  000D7C  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
 12646  000D80  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 12647  000D84  90D8               	bcf	status,0,c
 12648  000D86  362A               	rlcf	??_PLLInitialize,f,c
 12649  000D88  362B               	rlcf	??_PLLInitialize+1,f,c
 12650  000D8A  90D8               	bcf	status,0,c
 12651  000D8C  362A               	rlcf	??_PLLInitialize,f,c
 12652  000D8E  362B               	rlcf	??_PLLInitialize+1,f,c
 12653  000D90  0E59               	movlw	low _TEST_PLL_REGISTERS
 12654  000D92  242A               	addwf	??_PLLInitialize,w,c
 12655  000D94  6EF6               	movwf	tblptrl,c
 12656  000D96  0E7A               	movlw	high _TEST_PLL_REGISTERS
 12657  000D98  202B               	addwfc	??_PLLInitialize+1,w,c
 12658  000D9A  6EF7               	movwf	tblptrh,c
 12659  000D9C                     	if	0	;There are less than 3 active tblptr bytes
 12660  000D9C                     	endif
 12661  000D9C  0009               	tblrd		*+
 12662  000D9E  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12663  000DA2  0009               	tblrd		*+
 12664  000DA4  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12665  000DA8  0009               	tblrd		*+
 12666  000DAA  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12667  000DAE  000A               	tblrd		*-
 12668  000DB0  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12669  000DB4  0E03               	movlw	3
 12670  000DB6  6E25               	movwf	SWSPI_send_word@dataSize,c
 12671  000DB8  0E00               	movlw	0
 12672  000DBA  ECF4  F00C         	call	_SWSPI_send_word
 12673  000DBE  4A2C               	infsnz	PLLInitialize@idx,f,c
 12674  000DC0  2A2D               	incf	PLLInitialize@idx+1,f,c
 12675  000DC2  D7D4               	goto	l5463
 12676  000DC4                     u5050:
 12677  000DC4                     l5473:
 12678                           
 12679                           ;SyntApp.c: 27: }
 12680                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 12681  000DC4  0E01               	movlw	1
 12682  000DC6  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 12683  000DC8  0E01               	movlw	1
 12684  000DCA  EC53  F013         	call	_SwSpi_Set_CE_Pin
 12685                           
 12686                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
 12687  000DCE  0E00               	movlw	0
 12688  000DD0  6E2F               	movwf	PLLInitialize@idx_591+1,c
 12689  000DD2  0E00               	movlw	0
 12690  000DD4  6E2E               	movwf	PLLInitialize@idx_591,c
 12691  000DD6                     l5477:
 12692  000DD6  BE2F               	btfsc	PLLInitialize@idx_591+1,7,c
 12693  000DD8  D006               	goto	l446
 12694  000DDA  502F               	movf	PLLInitialize@idx_591+1,w,c
 12695  000DDC  E128               	bnz	l5487
 12696  000DDE  0E0D               	movlw	13
 12697  000DE0  5C2E               	subwf	PLLInitialize@idx_591,w,c
 12698  000DE2  B0D8               	btfsc	status,0,c
 12699  000DE4  D024               	goto	u5070
 12700  000DE6                     l446:
 12701                           
 12702                           ;SyntApp.c: 40: {
 12703                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 12704  000DE6  C02E  F02A         	movff	PLLInitialize@idx_591,??_PLLInitialize
 12705  000DEA  C02F  F02B         	movff	PLLInitialize@idx_591+1,??_PLLInitialize+1
 12706  000DEE  90D8               	bcf	status,0,c
 12707  000DF0  362A               	rlcf	??_PLLInitialize,f,c
 12708  000DF2  362B               	rlcf	??_PLLInitialize+1,f,c
 12709  000DF4  90D8               	bcf	status,0,c
 12710  000DF6  362A               	rlcf	??_PLLInitialize,f,c
 12711  000DF8  362B               	rlcf	??_PLLInitialize+1,f,c
 12712  000DFA  0E8D               	movlw	low _PLL_INIT_REGISTERS
 12713  000DFC  242A               	addwf	??_PLLInitialize,w,c
 12714  000DFE  6EF6               	movwf	tblptrl,c
 12715  000E00  0E7A               	movlw	high _PLL_INIT_REGISTERS
 12716  000E02  202B               	addwfc	??_PLLInitialize+1,w,c
 12717  000E04  6EF7               	movwf	tblptrh,c
 12718  000E06                     	if	0	;There are less than 3 active tblptr bytes
 12719  000E06                     	endif
 12720  000E06  0009               	tblrd		*+
 12721  000E08  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12722  000E0C  0009               	tblrd		*+
 12723  000E0E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12724  000E12  0009               	tblrd		*+
 12725  000E14  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12726  000E18  000A               	tblrd		*-
 12727  000E1A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12728  000E1E  0E03               	movlw	3
 12729  000E20  6E25               	movwf	SWSPI_send_word@dataSize,c
 12730  000E22  0E01               	movlw	1
 12731  000E24  ECF4  F00C         	call	_SWSPI_send_word
 12732  000E28  4A2E               	infsnz	PLLInitialize@idx_591,f,c
 12733  000E2A  2A2F               	incf	PLLInitialize@idx_591+1,f,c
 12734  000E2C  D7D4               	goto	l5477
 12735  000E2E                     u5070:
 12736  000E2E                     l5487:
 12737                           
 12738                           ;SyntApp.c: 42: }
 12739                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 12740  000E2E  0E9D               	movlw	low (_PLL_INIT_REGISTERS+16)
 12741  000E30  6EF6               	movwf	tblptrl,c
 12742  000E32  0E7A               	movlw	high (_PLL_INIT_REGISTERS+16)
 12743  000E34  6EF7               	movwf	tblptrh,c
 12744  000E36                     	if	0	;tblptru may be non-zero
 12745  000E36                     	endif
 12746  000E36                     	if	0	;tblptru may be non-zero
 12747  000E36                     	endif
 12748  000E36  0009               	tblrd		*+
 12749  000E38  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12750  000E3C  0009               	tblrd		*+
 12751  000E3E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12752  000E42  0009               	tblrd		*+
 12753  000E44  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12754  000E48  000A               	tblrd		*-
 12755  000E4A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12756  000E4E  0E03               	movlw	3
 12757  000E50  6E25               	movwf	SWSPI_send_word@dataSize,c
 12758  000E52  0E01               	movlw	1
 12759  000E54  ECF4  F00C         	call	_SWSPI_send_word
 12760                           
 12761                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 12762  000E58  0E95               	movlw	low (_PLL_INIT_REGISTERS+8)
 12763  000E5A  6EF6               	movwf	tblptrl,c
 12764  000E5C  0E7A               	movlw	high (_PLL_INIT_REGISTERS+8)
 12765  000E5E  6EF7               	movwf	tblptrh,c
 12766  000E60                     	if	0	;tblptru may be non-zero
 12767  000E60                     	endif
 12768  000E60                     	if	0	;tblptru may be non-zero
 12769  000E60                     	endif
 12770  000E60  0009               	tblrd		*+
 12771  000E62  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12772  000E66  0009               	tblrd		*+
 12773  000E68  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12774  000E6C  0009               	tblrd		*+
 12775  000E6E  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12776  000E72  000A               	tblrd		*-
 12777  000E74  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12778  000E78  0E03               	movlw	3
 12779  000E7A  6E25               	movwf	SWSPI_send_word@dataSize,c
 12780  000E7C  0E01               	movlw	1
 12781  000E7E  ECF4  F00C         	call	_SWSPI_send_word
 12782                           
 12783                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 12784  000E82  0E91               	movlw	low (_PLL_INIT_REGISTERS+4)
 12785  000E84  6EF6               	movwf	tblptrl,c
 12786  000E86  0E7A               	movlw	high (_PLL_INIT_REGISTERS+4)
 12787  000E88  6EF7               	movwf	tblptrh,c
 12788  000E8A                     	if	0	;tblptru may be non-zero
 12789  000E8A                     	endif
 12790  000E8A                     	if	0	;tblptru may be non-zero
 12791  000E8A                     	endif
 12792  000E8A  0009               	tblrd		*+
 12793  000E8C  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12794  000E90  0009               	tblrd		*+
 12795  000E92  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12796  000E96  0009               	tblrd		*+
 12797  000E98  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12798  000E9C  000A               	tblrd		*-
 12799  000E9E  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12800  000EA2  0E03               	movlw	3
 12801  000EA4  6E25               	movwf	SWSPI_send_word@dataSize,c
 12802  000EA6  0E01               	movlw	1
 12803  000EA8  ECF4  F00C         	call	_SWSPI_send_word
 12804                           
 12805                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 12806  000EAC  0E8D               	movlw	low _PLL_INIT_REGISTERS
 12807  000EAE  6EF6               	movwf	tblptrl,c
 12808  000EB0                     	if	1	;There is more than 1 active tblptr byte
 12809  000EB0  0E7A               	movlw	high _PLL_INIT_REGISTERS
 12810  000EB2  6EF7               	movwf	tblptrh,c
 12811  000EB4                     	endif
 12812  000EB4                     	if	0	;There are less than 3 active tblptr bytes
 12813  000EB4                     	endif
 12814  000EB4  0009               	tblrd		*+
 12815  000EB6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
 12816  000EBA  0009               	tblrd		*+
 12817  000EBC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
 12818  000EC0  0009               	tblrd		*+
 12819  000EC2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
 12820  000EC6  000A               	tblrd		*-
 12821  000EC8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
 12822  000ECC  0E03               	movlw	3
 12823  000ECE  6E25               	movwf	SWSPI_send_word@dataSize,c
 12824  000ED0  0E01               	movlw	1
 12825  000ED2  ECF4  F00C         	call	_SWSPI_send_word
 12826  000ED6  0012               	return		;funcret
 12827  000ED8                     __end_of_PLLInitialize:
 12828                           	opt stack 0
 12829                           tosu	equ	0xFFF
 12830                           tosh	equ	0xFFE
 12831                           tosl	equ	0xFFD
 12832                           pclath	equ	0xFFA
 12833                           tblptru	equ	0xFF8
 12834                           tblptrh	equ	0xFF7
 12835                           tblptrl	equ	0xFF6
 12836                           tablat	equ	0xFF5
 12837                           prodh	equ	0xFF4
 12838                           prodl	equ	0xFF3
 12839                           intcon	equ	0xFF2
 12840                           intcon2	equ	0xFF1
 12841                           indf0	equ	0xFEF
 12842                           postinc0	equ	0xFEE
 12843                           fsr0h	equ	0xFEA
 12844                           fsr0l	equ	0xFE9
 12845                           wreg	equ	0xFE8
 12846                           indf1	equ	0xFE7
 12847                           postdec1	equ	0xFE5
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           fsr2h	equ	0xFDA
 12854                           fsr2l	equ	0xFD9
 12855                           status	equ	0xFD8
 12856                           
 12857 ;; *************** function _SwSpi_Set_CE_Pin *****************
 12858 ;; Defined at:
 12859 ;;		line 221 in file "SwSpiApp.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;  phrType         1    wreg     enum E7593
 12862 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  phrType         1   24[COMRAM] enum E7593
 12865 ;; Return value:  Size  Location     Type
 12866 ;;                  1    wreg      void 
 12867 ;; Registers used:
 12868 ;;		wreg, status,2, status,0
 12869 ;; Tracked objects:
 12870 ;;		On entry : 0/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12874 ;;      Params:         1       0       0       0       0       0       0
 12875 ;;      Locals:         1       0       0       0       0       0       0
 12876 ;;      Temps:          0       0       0       0       0       0       0
 12877 ;;      Totals:         2       0       0       0       0       0       0
 12878 ;;Total ram usage:        2 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    3
 12881 ;; This function calls:
 12882 ;;		Nothing
 12883 ;; This function is called by:
 12884 ;;		_PLLInitialize
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           	psect	text64
 12889  0026A6                     __ptext64:
 12890                           	opt stack 0
 12891  0026A6                     _SwSpi_Set_CE_Pin:
 12892                           	opt stack 25
 12893                           
 12894                           ;incstack = 0
 12895                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 12896  0026A6  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 12897                           
 12898                           ;SwSpiApp.c: 223: switch(phrType)
 12899  0026A8  D014               	goto	l610
 12900  0026AA                     
 12901                           ;SwSpiApp.c: 226: if(cPinMode == 1)
 12902  0026AA  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12903  0026AC  A4D8               	btfss	status,2,c
 12904  0026AE  D002               	goto	l612
 12905                           
 12906                           ;SwSpiApp.c: 227: {
 12907                           ;SwSpiApp.c: 228: do { LATCbits.LATC1 = 1; } while(0);
 12908  0026B0  828B               	bsf	3979,1,c	;volatile
 12909                           
 12910                           ;SwSpiApp.c: 229: }
 12911  0026B2  0012               	return	
 12912  0026B4                     l612:
 12913                           
 12914                           ;SwSpiApp.c: 230: else if(cPinMode == 0)
 12915  0026B4  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12916  0026B6  A4D8               	btfss	status,2,c
 12917  0026B8  0012               	return	
 12918                           
 12919                           ;SwSpiApp.c: 231: {
 12920                           ;SwSpiApp.c: 232: do { LATCbits.LATC1 = 0; } while(0);
 12921  0026BA  928B               	bcf	3979,1,c	;volatile
 12922                           
 12923                           ;SwSpiApp.c: 233: }
 12924                           ;SwSpiApp.c: 234: break;
 12925  0026BC  0012               	return	
 12926  0026BE                     
 12927                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12928  0026BE  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12929  0026C0  A4D8               	btfss	status,2,c
 12930  0026C2  D002               	goto	l621
 12931                           
 12932                           ;SwSpiApp.c: 238: {
 12933                           ;SwSpiApp.c: 239: do { LATDbits.LATD2 = 1; } while(0);
 12934  0026C4  848C               	bsf	3980,2,c	;volatile
 12935                           
 12936                           ;SwSpiApp.c: 240: }
 12937  0026C6  0012               	return	
 12938  0026C8                     l621:
 12939                           
 12940                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12941  0026C8  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 12942  0026CA  A4D8               	btfss	status,2,c
 12943  0026CC  0012               	return	
 12944                           
 12945                           ;SwSpiApp.c: 242: {
 12946                           ;SwSpiApp.c: 243: do { LATCbits.LATC1 = 0; } while(0);
 12947  0026CE  928B               	bcf	3979,1,c	;volatile
 12948                           
 12949                           ;SwSpiApp.c: 246: }
 12950                           
 12951                           ;SwSpiApp.c: 244: }
 12952                           ;SwSpiApp.c: 245: break;
 12953  0026D0  0012               	return	
 12954  0026D2                     l610:
 12955  0026D2  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 12956                           
 12957                           ; Switch size 1, requested type "space"
 12958                           ; Number of cases is 2, Range of values is 0 to 1
 12959                           ; switch strategies available:
 12960                           ; Name         Instructions Cycles
 12961                           ; simple_byte            7     4 (average)
 12962                           ;	Chosen strategy is simple_byte
 12963  0026D4  0A00               	xorlw	0	; case 0
 12964  0026D6  B4D8               	btfsc	status,2,c
 12965  0026D8  D7E8               	goto	l611
 12966  0026DA  0A01               	xorlw	1	; case 1
 12967  0026DC  A4D8               	btfss	status,2,c
 12968  0026DE  0012               	return	
 12969  0026E0  D7EE               	goto	l620
 12970  0026E2                     __end_of_SwSpi_Set_CE_Pin:
 12971                           	opt stack 0
 12972                           tosu	equ	0xFFF
 12973                           tosh	equ	0xFFE
 12974                           tosl	equ	0xFFD
 12975                           pclath	equ	0xFFA
 12976                           tblptru	equ	0xFF8
 12977                           tblptrh	equ	0xFF7
 12978                           tblptrl	equ	0xFF6
 12979                           tablat	equ	0xFF5
 12980                           prodh	equ	0xFF4
 12981                           prodl	equ	0xFF3
 12982                           intcon	equ	0xFF2
 12983                           intcon2	equ	0xFF1
 12984                           indf0	equ	0xFEF
 12985                           postinc0	equ	0xFEE
 12986                           fsr0h	equ	0xFEA
 12987                           fsr0l	equ	0xFE9
 12988                           wreg	equ	0xFE8
 12989                           indf1	equ	0xFE7
 12990                           postdec1	equ	0xFE5
 12991                           fsr1h	equ	0xFE2
 12992                           fsr1l	equ	0xFE1
 12993                           indf2	equ	0xFDF
 12994                           postinc2	equ	0xFDE
 12995                           postdec2	equ	0xFDD
 12996                           fsr2h	equ	0xFDA
 12997                           fsr2l	equ	0xFD9
 12998                           status	equ	0xFD8
 12999                           
 13000 ;; *************** function _InitAdcApplicationMgr *****************
 13001 ;; Defined at:
 13002 ;;		line 23 in file "AdcApp.c"
 13003 ;; Parameters:    Size  Location     Type
 13004 ;;		None
 13005 ;; Auto vars:     Size  Location     Type
 13006 ;;		None
 13007 ;; Return value:  Size  Location     Type
 13008 ;;                  1    wreg      void 
 13009 ;; Registers used:
 13010 ;;		wreg, status,2
 13011 ;; Tracked objects:
 13012 ;;		On entry : 0/0
 13013 ;;		On exit  : 0/0
 13014 ;;		Unchanged: 0/0
 13015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13016 ;;      Params:         0       0       0       0       0       0       0
 13017 ;;      Locals:         0       0       0       0       0       0       0
 13018 ;;      Temps:          0       0       0       0       0       0       0
 13019 ;;      Totals:         0       0       0       0       0       0       0
 13020 ;;Total ram usage:        0 bytes
 13021 ;; Hardware stack levels used:    1
 13022 ;; Hardware stack levels required when called:    3
 13023 ;; This function calls:
 13024 ;;		Nothing
 13025 ;; This function is called by:
 13026 ;;		_InitSystemApplicationManagers
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           	psect	text65
 13031  002A94                     __ptext65:
 13032                           	opt stack 0
 13033  002A94                     _InitAdcApplicationMgr:
 13034                           	opt stack 26
 13035                           
 13036                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 13037                           
 13038                           ;incstack = 0
 13039  002A94  0E00               	movlw	0
 13040  002A96  6E3D               	movwf	_adcSampleMode,c
 13041  002A98  0012               	return		;funcret
 13042  002A9A                     __end_of_InitAdcApplicationMgr:
 13043                           	opt stack 0
 13044                           tosu	equ	0xFFF
 13045                           tosh	equ	0xFFE
 13046                           tosl	equ	0xFFD
 13047                           pclath	equ	0xFFA
 13048                           tblptru	equ	0xFF8
 13049                           tblptrh	equ	0xFF7
 13050                           tblptrl	equ	0xFF6
 13051                           tablat	equ	0xFF5
 13052                           prodh	equ	0xFF4
 13053                           prodl	equ	0xFF3
 13054                           intcon	equ	0xFF2
 13055                           intcon2	equ	0xFF1
 13056                           indf0	equ	0xFEF
 13057                           postinc0	equ	0xFEE
 13058                           fsr0h	equ	0xFEA
 13059                           fsr0l	equ	0xFE9
 13060                           wreg	equ	0xFE8
 13061                           indf1	equ	0xFE7
 13062                           postdec1	equ	0xFE5
 13063                           fsr1h	equ	0xFE2
 13064                           fsr1l	equ	0xFE1
 13065                           indf2	equ	0xFDF
 13066                           postinc2	equ	0xFDE
 13067                           postdec2	equ	0xFDD
 13068                           fsr2h	equ	0xFDA
 13069                           fsr2l	equ	0xFD9
 13070                           status	equ	0xFD8
 13071                           
 13072 ;; *************** function _DacInit *****************
 13073 ;; Defined at:
 13074 ;;		line 24 in file "DacApp.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;		None
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;		None
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      void 
 13081 ;; Registers used:
 13082 ;;		wreg, status,2, status,0, cstack
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13088 ;;      Params:         0       0       0       0       0       0       0
 13089 ;;      Locals:         0       0       0       0       0       0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0
 13091 ;;      Totals:         0       0       0       0       0       0       0
 13092 ;;Total ram usage:        0 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    6
 13095 ;; This function calls:
 13096 ;;		_SWSPI_send_word
 13097 ;; This function is called by:
 13098 ;;		_InitSystemApplicationManagers
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           	psect	text66
 13103  001F74                     __ptext66:
 13104                           	opt stack 0
 13105  001F74                     _DacInit:
 13106                           	opt stack 23
 13107                           
 13108                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 13109                           
 13110                           ;incstack = 0
 13111  001F74  0E44               	movlw	68
 13112  001F76  6E21               	movwf	SWSPI_send_word@data,c
 13113  001F78  0E23               	movlw	35
 13114  001F7A  6E22               	movwf	SWSPI_send_word@data+1,c
 13115  001F7C  0E00               	movlw	0
 13116  001F7E  6E23               	movwf	SWSPI_send_word@data+2,c
 13117  001F80  0E00               	movlw	0
 13118  001F82  6E24               	movwf	SWSPI_send_word@data+3,c
 13119  001F84  0E01               	movlw	1
 13120  001F86  6E25               	movwf	SWSPI_send_word@dataSize,c
 13121  001F88  0E02               	movlw	2
 13122  001F8A  ECF4  F00C         	call	_SWSPI_send_word
 13123                           
 13124                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 13125  001F8E  0E44               	movlw	68
 13126  001F90  6E21               	movwf	SWSPI_send_word@data,c
 13127  001F92  0E63               	movlw	99
 13128  001F94  6E22               	movwf	SWSPI_send_word@data+1,c
 13129  001F96  0E00               	movlw	0
 13130  001F98  6E23               	movwf	SWSPI_send_word@data+2,c
 13131  001F9A  0E00               	movlw	0
 13132  001F9C  6E24               	movwf	SWSPI_send_word@data+3,c
 13133  001F9E  0E01               	movlw	1
 13134  001FA0  6E25               	movwf	SWSPI_send_word@dataSize,c
 13135  001FA2  0E02               	movlw	2
 13136  001FA4  ECF4  F00C         	call	_SWSPI_send_word
 13137                           
 13138                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 13139  001FA8  0E44               	movlw	68
 13140  001FAA  6E21               	movwf	SWSPI_send_word@data,c
 13141  001FAC  0EA3               	movlw	163
 13142  001FAE  6E22               	movwf	SWSPI_send_word@data+1,c
 13143  001FB0  0E00               	movlw	0
 13144  001FB2  6E23               	movwf	SWSPI_send_word@data+2,c
 13145  001FB4  0E00               	movlw	0
 13146  001FB6  6E24               	movwf	SWSPI_send_word@data+3,c
 13147  001FB8  0E01               	movlw	1
 13148  001FBA  6E25               	movwf	SWSPI_send_word@dataSize,c
 13149  001FBC  0E02               	movlw	2
 13150  001FBE  ECF4  F00C         	call	_SWSPI_send_word
 13151                           
 13152                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 13153  001FC2  0E44               	movlw	68
 13154  001FC4  6E21               	movwf	SWSPI_send_word@data,c
 13155  001FC6  0EE3               	movlw	227
 13156  001FC8  6E22               	movwf	SWSPI_send_word@data+1,c
 13157  001FCA  0E00               	movlw	0
 13158  001FCC  6E23               	movwf	SWSPI_send_word@data+2,c
 13159  001FCE  0E00               	movlw	0
 13160  001FD0  6E24               	movwf	SWSPI_send_word@data+3,c
 13161  001FD2  0E01               	movlw	1
 13162  001FD4  6E25               	movwf	SWSPI_send_word@dataSize,c
 13163  001FD6  0E02               	movlw	2
 13164  001FD8  ECF4  F00C         	call	_SWSPI_send_word
 13165  001FDC  0012               	return		;funcret
 13166  001FDE                     __end_of_DacInit:
 13167                           	opt stack 0
 13168                           tosu	equ	0xFFF
 13169                           tosh	equ	0xFFE
 13170                           tosl	equ	0xFFD
 13171                           pclath	equ	0xFFA
 13172                           tblptru	equ	0xFF8
 13173                           tblptrh	equ	0xFF7
 13174                           tblptrl	equ	0xFF6
 13175                           tablat	equ	0xFF5
 13176                           prodh	equ	0xFF4
 13177                           prodl	equ	0xFF3
 13178                           intcon	equ	0xFF2
 13179                           intcon2	equ	0xFF1
 13180                           indf0	equ	0xFEF
 13181                           postinc0	equ	0xFEE
 13182                           fsr0h	equ	0xFEA
 13183                           fsr0l	equ	0xFE9
 13184                           wreg	equ	0xFE8
 13185                           indf1	equ	0xFE7
 13186                           postdec1	equ	0xFE5
 13187                           fsr1h	equ	0xFE2
 13188                           fsr1l	equ	0xFE1
 13189                           indf2	equ	0xFDF
 13190                           postinc2	equ	0xFDE
 13191                           postdec2	equ	0xFDD
 13192                           fsr2h	equ	0xFDA
 13193                           fsr2l	equ	0xFD9
 13194                           status	equ	0xFD8
 13195                           
 13196 ;; *************** function _SWSPI_send_word *****************
 13197 ;; Defined at:
 13198 ;;		line 17 in file "SwSpiApp.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;  phrType         1    wreg     enum E7593
 13201 ;;  data            4   32[COMRAM] unsigned long 
 13202 ;;  dataSize        1   36[COMRAM] unsigned char 
 13203 ;; Auto vars:     Size  Location     Type
 13204 ;;  phrType         1   40[COMRAM] enum E7593
 13205 ;;  datac           1   37[COMRAM] unsigned char 
 13206 ;;  idx             2   38[COMRAM] int 
 13207 ;; Return value:  Size  Location     Type
 13208 ;;                  1    wreg      void 
 13209 ;; Registers used:
 13210 ;;		wreg, status,2, status,0, cstack
 13211 ;; Tracked objects:
 13212 ;;		On entry : 0/0
 13213 ;;		On exit  : 0/0
 13214 ;;		Unchanged: 0/0
 13215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13216 ;;      Params:         5       0       0       0       0       0       0
 13217 ;;      Locals:         4       0       0       0       0       0       0
 13218 ;;      Temps:          0       0       0       0       0       0       0
 13219 ;;      Totals:         9       0       0       0       0       0       0
 13220 ;;Total ram usage:        9 bytes
 13221 ;; Hardware stack levels used:    1
 13222 ;; Hardware stack levels required when called:    5
 13223 ;; This function calls:
 13224 ;;		_SWSPI_DAC_send_bits
 13225 ;;		_SWSPI_Synth_send_bits
 13226 ;;		_SwSpi_Set_Dac_Sync_Pin
 13227 ;;		_SwSpi_Set_Synth_Le_Pin
 13228 ;;		_make8
 13229 ;; This function is called by:
 13230 ;;		_DacInit
 13231 ;;		_PLLInitialize
 13232 ;;		_DacSetValue
 13233 ;;		_UpdateTxFreq
 13234 ;;		_UpdateRxFreq
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           	psect	text67
 13239  0019E8                     __ptext67:
 13240                           	opt stack 0
 13241  0019E8                     _SWSPI_send_word:
 13242                           	opt stack 23
 13243                           
 13244                           ;incstack = 0
 13245                           ;SWSPI_send_word@phrType stored from wreg
 13246  0019E8  6E29               	movwf	SWSPI_send_word@phrType,c
 13247                           
 13248                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 13249  0019EA  9EF2               	bcf	intcon,7,c	;volatile
 13250                           
 13251                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13252  0019EC  5029               	movf	SWSPI_send_word@phrType,w,c
 13253  0019EE  B4D8               	btfsc	status,2,c
 13254  0019F0  D003               	goto	u4700
 13255  0019F2  0429               	decf	SWSPI_send_word@phrType,w,c
 13256  0019F4  A4D8               	btfss	status,2,c
 13257  0019F6  D005               	goto	l509
 13258  0019F8                     u4700:
 13259                           
 13260                           ;SwSpiApp.c: 24: {
 13261                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 13262  0019F8  0E00               	movlw	0
 13263  0019FA  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13264  0019FC  5029               	movf	SWSPI_send_word@phrType,w,c
 13265  0019FE  EC71  F013         	call	_SwSpi_Set_Synth_Le_Pin
 13266  001A02                     l509:
 13267                           
 13268                           ;SwSpiApp.c: 26: }
 13269                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
 13270  001A02  0E02               	movlw	2
 13271  001A04  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13272  001A06  A4D8               	btfss	status,2,c
 13273  001A08  D003               	goto	l512
 13274                           
 13275                           ;SwSpiApp.c: 28: {
 13276                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 13277  001A0A  0E00               	movlw	0
 13278  001A0C  ECE0  F014         	call	_SwSpi_Set_Dac_Sync_Pin
 13279  001A10                     l512:
 13280                           
 13281                           ;SwSpiApp.c: 30: }
 13282                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 13283  001A10  0E01               	movlw	1
 13284  001A12  2425               	addwf	SWSPI_send_word@dataSize,w,c
 13285  001A14  6E27               	movwf	SWSPI_send_word@idx,c
 13286  001A16  6A28               	clrf	SWSPI_send_word@idx+1,c
 13287  001A18  0E00               	movlw	0
 13288  001A1A  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 13289  001A1C                     l5169:
 13290  001A1C  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 13291  001A1E  D02B               	goto	u4760
 13292  001A20  5028               	movf	SWSPI_send_word@idx+1,w,c
 13293  001A22  E103               	bnz	l5173
 13294  001A24  0427               	decf	SWSPI_send_word@idx,w,c
 13295  001A26  A0D8               	btfss	status,0,c
 13296  001A28  D026               	goto	u4760
 13297  001A2A                     l5173:
 13298                           
 13299                           ;SwSpiApp.c: 36: {
 13300                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 13301  001A2A  C021  F018         	movff	SWSPI_send_word@data,make8@data
 13302  001A2E  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 13303  001A32  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 13304  001A36  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 13305  001A3A  0427               	decf	SWSPI_send_word@idx,w,c
 13306  001A3C  6E1C               	movwf	make8@dataLocation,c
 13307  001A3E  ECAF  F010         	call	_make8	;wreg free
 13308  001A42  6E26               	movwf	SWSPI_send_word@datac,c
 13309                           
 13310                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13311  001A44  5029               	movf	SWSPI_send_word@phrType,w,c
 13312  001A46  B4D8               	btfsc	status,2,c
 13313  001A48  D003               	goto	u4740
 13314  001A4A  0429               	decf	SWSPI_send_word@phrType,w,c
 13315  001A4C  A4D8               	btfss	status,2,c
 13316  001A4E  D006               	goto	l515
 13317  001A50                     u4740:
 13318                           
 13319                           ;SwSpiApp.c: 40: {
 13320                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
 13321  001A50  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
 13322  001A54  5029               	movf	SWSPI_send_word@phrType,w,c
 13323  001A56  ECDD  F010         	call	_SWSPI_Synth_send_bits
 13324                           
 13325                           ;SwSpiApp.c: 42: }
 13326  001A5A  D009               	goto	l519
 13327  001A5C                     l515:
 13328                           
 13329                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
 13330  001A5C  0E02               	movlw	2
 13331  001A5E  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13332  001A60  A4D8               	btfss	status,2,c
 13333  001A62  D005               	goto	l519
 13334                           
 13335                           ;SwSpiApp.c: 44: {
 13336                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
 13337  001A64  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 13338  001A68  5029               	movf	SWSPI_send_word@phrType,w,c
 13339  001A6A  EC09  F011         	call	_SWSPI_DAC_send_bits
 13340  001A6E                     l519:
 13341  001A6E  0627               	decf	SWSPI_send_word@idx,f,c
 13342  001A70  A0D8               	btfss	status,0,c
 13343  001A72  0628               	decf	SWSPI_send_word@idx+1,f,c
 13344  001A74  D7D3               	goto	l5169
 13345  001A76                     u4760:
 13346                           
 13347                           ;SwSpiApp.c: 46: }
 13348                           ;SwSpiApp.c: 47: }
 13349                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
 13350  001A76  0E02               	movlw	2
 13351  001A78  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13352  001A7A  A4D8               	btfss	status,2,c
 13353  001A7C  D004               	goto	l520
 13354                           
 13355                           ;SwSpiApp.c: 53: {
 13356                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
 13357  001A7E  0E01               	movlw	1
 13358  001A80  ECE0  F014         	call	_SwSpi_Set_Dac_Sync_Pin
 13359                           
 13360                           ;SwSpiApp.c: 55: }
 13361  001A84  D00B               	goto	l522
 13362  001A86                     l520:
 13363                           
 13364                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13365  001A86  5029               	movf	SWSPI_send_word@phrType,w,c
 13366  001A88  B4D8               	btfsc	status,2,c
 13367  001A8A  D003               	goto	u4790
 13368  001A8C  0429               	decf	SWSPI_send_word@phrType,w,c
 13369  001A8E  A4D8               	btfss	status,2,c
 13370  001A90  D005               	goto	l522
 13371  001A92                     u4790:
 13372                           
 13373                           ;SwSpiApp.c: 57: {
 13374                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 13375  001A92  0E01               	movlw	1
 13376  001A94  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13377  001A96  5029               	movf	SWSPI_send_word@phrType,w,c
 13378  001A98  EC71  F013         	call	_SwSpi_Set_Synth_Le_Pin
 13379  001A9C                     l522:
 13380                           
 13381                           ;SwSpiApp.c: 59: }
 13382                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
 13383  001A9C  8EF2               	bsf	intcon,7,c	;volatile
 13384  001A9E  0012               	return		;funcret
 13385  001AA0                     __end_of_SWSPI_send_word:
 13386                           	opt stack 0
 13387                           tosu	equ	0xFFF
 13388                           tosh	equ	0xFFE
 13389                           tosl	equ	0xFFD
 13390                           pclath	equ	0xFFA
 13391                           tblptru	equ	0xFF8
 13392                           tblptrh	equ	0xFF7
 13393                           tblptrl	equ	0xFF6
 13394                           tablat	equ	0xFF5
 13395                           prodh	equ	0xFF4
 13396                           prodl	equ	0xFF3
 13397                           intcon	equ	0xFF2
 13398                           intcon2	equ	0xFF1
 13399                           indf0	equ	0xFEF
 13400                           postinc0	equ	0xFEE
 13401                           fsr0h	equ	0xFEA
 13402                           fsr0l	equ	0xFE9
 13403                           wreg	equ	0xFE8
 13404                           indf1	equ	0xFE7
 13405                           postdec1	equ	0xFE5
 13406                           fsr1h	equ	0xFE2
 13407                           fsr1l	equ	0xFE1
 13408                           indf2	equ	0xFDF
 13409                           postinc2	equ	0xFDE
 13410                           postdec2	equ	0xFDD
 13411                           fsr2h	equ	0xFDA
 13412                           fsr2l	equ	0xFD9
 13413                           status	equ	0xFD8
 13414                           
 13415 ;; *************** function _make8 *****************
 13416 ;; Defined at:
 13417 ;;		line 61 in file "SystemCommon.c"
 13418 ;; Parameters:    Size  Location     Type
 13419 ;;  data            4   23[COMRAM] unsigned long 
 13420 ;;  dataLocation    1   27[COMRAM] unsigned char 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;		None
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      unsigned char 
 13425 ;; Registers used:
 13426 ;;		wreg, status,2, status,0
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13432 ;;      Params:         5       0       0       0       0       0       0
 13433 ;;      Locals:         0       0       0       0       0       0       0
 13434 ;;      Temps:          4       0       0       0       0       0       0
 13435 ;;      Totals:         9       0       0       0       0       0       0
 13436 ;;Total ram usage:        9 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    3
 13439 ;; This function calls:
 13440 ;;		Nothing
 13441 ;; This function is called by:
 13442 ;;		_SWSPI_send_word
 13443 ;;		_FlashReadCondition
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           	psect	text68
 13448  00215E                     __ptext68:
 13449                           	opt stack 0
 13450  00215E                     _make8:
 13451                           	opt stack 24
 13452                           
 13453                           ;SystemCommon.c: 63: switch(dataLocation)
 13454                           
 13455                           ;incstack = 0
 13456  00215E  D01F               	goto	l1158
 13457  002160                     
 13458                           ;SystemCommon.c: 66: return (data & 0x000000ff);
 13459  002160  5018               	movf	make8@data,w,c
 13460  002162  0012               	return	
 13461  002164                     
 13462                           ;SystemCommon.c: 69: return (data & 0x0000ff00) >> 8;
 13463  002164  5019               	movf	make8@data+1,w,c
 13464  002166  0012               	return	
 13465  002168                     
 13466                           ;SystemCommon.c: 72: return (data & 0x00ff0000) >> 16;
 13467  002168  501A               	movf	make8@data+2,w,c
 13468  00216A  0012               	return	
 13469  00216C                     
 13470                           ;SystemCommon.c: 75: return (data & 0xff000000) >> 24;
 13471  00216C  0E00               	movlw	0
 13472  00216E  1418               	andwf	make8@data,w,c
 13473  002170  6E1D               	movwf	??_make8& (0+255),c
 13474  002172  0E00               	movlw	0
 13475  002174  1419               	andwf	make8@data+1,w,c
 13476  002176  6E1E               	movwf	(??_make8+1)& (0+255),c
 13477  002178  0E00               	movlw	0
 13478  00217A  141A               	andwf	make8@data+2,w,c
 13479  00217C  6E1F               	movwf	(??_make8+2)& (0+255),c
 13480  00217E  0EFF               	movlw	255
 13481  002180  141B               	andwf	make8@data+3,w,c
 13482  002182  6E20               	movwf	(??_make8+3)& (0+255),c
 13483  002184  0E19               	movlw	25
 13484  002186  D005               	goto	u4280
 13485  002188                     u4285:
 13486  002188  90D8               	bcf	status,0,c
 13487  00218A  3220               	rrcf	??_make8+3,f,c
 13488  00218C  321F               	rrcf	??_make8+2,f,c
 13489  00218E  321E               	rrcf	??_make8+1,f,c
 13490  002190  321D               	rrcf	??_make8,f,c
 13491  002192                     u4280:
 13492  002192  2EE8               	decfsz	wreg,f,c
 13493  002194  D7F9               	goto	u4285
 13494  002196  501D               	movf	??_make8,w,c
 13495  002198  0012               	return	
 13496  00219A                     
 13497                           ;SystemCommon.c: 78: return (0);
 13498  00219A  0E00               	movlw	0
 13499                           
 13500                           ;SystemCommon.c: 79: }
 13501  00219C  0012               	return	
 13502  00219E                     l1158:
 13503  00219E  501C               	movf	make8@dataLocation,w,c
 13504                           
 13505                           ; Switch size 1, requested type "space"
 13506                           ; Number of cases is 4, Range of values is 0 to 3
 13507                           ; switch strategies available:
 13508                           ; Name         Instructions Cycles
 13509                           ; simple_byte           13     7 (average)
 13510                           ;	Chosen strategy is simple_byte
 13511  0021A0  0A00               	xorlw	0	; case 0
 13512  0021A2  B4D8               	btfsc	status,2,c
 13513  0021A4  D7DD               	goto	l1159
 13514  0021A6  0A01               	xorlw	1	; case 1
 13515  0021A8  B4D8               	btfsc	status,2,c
 13516  0021AA  D7DC               	goto	l1161
 13517  0021AC  0A03               	xorlw	3	; case 2
 13518  0021AE  B4D8               	btfsc	status,2,c
 13519  0021B0  D7DB               	goto	l1162
 13520  0021B2  0A01               	xorlw	1	; case 3
 13521  0021B4  B4D8               	btfsc	status,2,c
 13522  0021B6  D7DA               	goto	l1163
 13523  0021B8  D7F0               	goto	l1164
 13524  0021BA                     __end_of_make8:
 13525                           	opt stack 0
 13526                           tosu	equ	0xFFF
 13527                           tosh	equ	0xFFE
 13528                           tosl	equ	0xFFD
 13529                           pclath	equ	0xFFA
 13530                           tblptru	equ	0xFF8
 13531                           tblptrh	equ	0xFF7
 13532                           tblptrl	equ	0xFF6
 13533                           tablat	equ	0xFF5
 13534                           prodh	equ	0xFF4
 13535                           prodl	equ	0xFF3
 13536                           intcon	equ	0xFF2
 13537                           intcon2	equ	0xFF1
 13538                           indf0	equ	0xFEF
 13539                           postinc0	equ	0xFEE
 13540                           fsr0h	equ	0xFEA
 13541                           fsr0l	equ	0xFE9
 13542                           wreg	equ	0xFE8
 13543                           indf1	equ	0xFE7
 13544                           postdec1	equ	0xFE5
 13545                           fsr1h	equ	0xFE2
 13546                           fsr1l	equ	0xFE1
 13547                           indf2	equ	0xFDF
 13548                           postinc2	equ	0xFDE
 13549                           postdec2	equ	0xFDD
 13550                           fsr2h	equ	0xFDA
 13551                           fsr2l	equ	0xFD9
 13552                           status	equ	0xFD8
 13553                           
 13554 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 13555 ;; Defined at:
 13556 ;;		line 252 in file "SwSpiApp.c"
 13557 ;; Parameters:    Size  Location     Type
 13558 ;;  phrType         1    wreg     enum E7593
 13559 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  phrType         1   24[COMRAM] enum E7593
 13562 ;; Return value:  Size  Location     Type
 13563 ;;                  1    wreg      void 
 13564 ;; Registers used:
 13565 ;;		wreg, status,2, status,0
 13566 ;; Tracked objects:
 13567 ;;		On entry : 0/0
 13568 ;;		On exit  : 0/0
 13569 ;;		Unchanged: 0/0
 13570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13571 ;;      Params:         1       0       0       0       0       0       0
 13572 ;;      Locals:         1       0       0       0       0       0       0
 13573 ;;      Temps:          0       0       0       0       0       0       0
 13574 ;;      Totals:         2       0       0       0       0       0       0
 13575 ;;Total ram usage:        2 bytes
 13576 ;; Hardware stack levels used:    1
 13577 ;; Hardware stack levels required when called:    3
 13578 ;; This function calls:
 13579 ;;		Nothing
 13580 ;; This function is called by:
 13581 ;;		_SWSPI_send_word
 13582 ;; This function uses a non-reentrant model
 13583 ;;
 13584                           
 13585                           	psect	text69
 13586  0026E2                     __ptext69:
 13587                           	opt stack 0
 13588  0026E2                     _SwSpi_Set_Synth_Le_Pin:
 13589                           	opt stack 24
 13590                           
 13591                           ;incstack = 0
 13592                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 13593  0026E2  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 13594                           
 13595                           ;SwSpiApp.c: 254: switch(phrType)
 13596  0026E4  D014               	goto	l631
 13597  0026E6                     
 13598                           ;SwSpiApp.c: 257: if(cPinMode == 1)
 13599  0026E6  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13600  0026E8  A4D8               	btfss	status,2,c
 13601  0026EA  D002               	goto	l633
 13602                           
 13603                           ;SwSpiApp.c: 258: {
 13604                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
 13605  0026EC  848B               	bsf	3979,2,c	;volatile
 13606                           
 13607                           ;SwSpiApp.c: 260: }
 13608  0026EE  0012               	return	
 13609  0026F0                     l633:
 13610                           
 13611                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
 13612  0026F0  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13613  0026F2  A4D8               	btfss	status,2,c
 13614  0026F4  0012               	return	
 13615                           
 13616                           ;SwSpiApp.c: 262: {
 13617                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
 13618  0026F6  948B               	bcf	3979,2,c	;volatile
 13619                           
 13620                           ;SwSpiApp.c: 264: }
 13621                           ;SwSpiApp.c: 265: break;
 13622  0026F8  0012               	return	
 13623  0026FA                     
 13624                           ;SwSpiApp.c: 268: if(cPinMode == 1)
 13625  0026FA  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13626  0026FC  A4D8               	btfss	status,2,c
 13627  0026FE  D002               	goto	l642
 13628                           
 13629                           ;SwSpiApp.c: 269: {
 13630                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
 13631  002700  868C               	bsf	3980,3,c	;volatile
 13632                           
 13633                           ;SwSpiApp.c: 271: }
 13634  002702  0012               	return	
 13635  002704                     l642:
 13636                           
 13637                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
 13638  002704  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13639  002706  A4D8               	btfss	status,2,c
 13640  002708  0012               	return	
 13641                           
 13642                           ;SwSpiApp.c: 273: {
 13643                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
 13644  00270A  968C               	bcf	3980,3,c	;volatile
 13645                           
 13646                           ;SwSpiApp.c: 277: }
 13647                           
 13648                           ;SwSpiApp.c: 275: }
 13649                           ;SwSpiApp.c: 276: break;
 13650  00270C  0012               	return	
 13651  00270E                     l631:
 13652  00270E  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 13653                           
 13654                           ; Switch size 1, requested type "space"
 13655                           ; Number of cases is 2, Range of values is 0 to 1
 13656                           ; switch strategies available:
 13657                           ; Name         Instructions Cycles
 13658                           ; simple_byte            7     4 (average)
 13659                           ;	Chosen strategy is simple_byte
 13660  002710  0A00               	xorlw	0	; case 0
 13661  002712  B4D8               	btfsc	status,2,c
 13662  002714  D7E8               	goto	l632
 13663  002716  0A01               	xorlw	1	; case 1
 13664  002718  A4D8               	btfss	status,2,c
 13665  00271A  0012               	return	
 13666  00271C  D7EE               	goto	l641
 13667  00271E                     __end_of_SwSpi_Set_Synth_Le_Pin:
 13668                           	opt stack 0
 13669                           tosu	equ	0xFFF
 13670                           tosh	equ	0xFFE
 13671                           tosl	equ	0xFFD
 13672                           pclath	equ	0xFFA
 13673                           tblptru	equ	0xFF8
 13674                           tblptrh	equ	0xFF7
 13675                           tblptrl	equ	0xFF6
 13676                           tablat	equ	0xFF5
 13677                           prodh	equ	0xFF4
 13678                           prodl	equ	0xFF3
 13679                           intcon	equ	0xFF2
 13680                           intcon2	equ	0xFF1
 13681                           indf0	equ	0xFEF
 13682                           postinc0	equ	0xFEE
 13683                           fsr0h	equ	0xFEA
 13684                           fsr0l	equ	0xFE9
 13685                           wreg	equ	0xFE8
 13686                           indf1	equ	0xFE7
 13687                           postdec1	equ	0xFE5
 13688                           fsr1h	equ	0xFE2
 13689                           fsr1l	equ	0xFE1
 13690                           indf2	equ	0xFDF
 13691                           postinc2	equ	0xFDE
 13692                           postdec2	equ	0xFDD
 13693                           fsr2h	equ	0xFDA
 13694                           fsr2l	equ	0xFD9
 13695                           status	equ	0xFD8
 13696                           
 13697 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 13698 ;; Defined at:
 13699 ;;		line 280 in file "SwSpiApp.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  cPinMode        1    wreg     unsigned char 
 13702 ;; Auto vars:     Size  Location     Type
 13703 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  1    wreg      void 
 13706 ;; Registers used:
 13707 ;;		wreg, status,2, status,0
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13713 ;;      Params:         0       0       0       0       0       0       0
 13714 ;;      Locals:         1       0       0       0       0       0       0
 13715 ;;      Temps:          0       0       0       0       0       0       0
 13716 ;;      Totals:         1       0       0       0       0       0       0
 13717 ;;Total ram usage:        1 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    3
 13720 ;; This function calls:
 13721 ;;		Nothing
 13722 ;; This function is called by:
 13723 ;;		_SWSPI_send_word
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           	psect	text70
 13728  0029C0                     __ptext70:
 13729                           	opt stack 0
 13730  0029C0                     _SwSpi_Set_Dac_Sync_Pin:
 13731                           	opt stack 24
 13732                           
 13733                           ;incstack = 0
 13734                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 13735  0029C0  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 13736                           
 13737                           ;SwSpiApp.c: 282: switch(cPinMode)
 13738  0029C2  D004               	goto	l652
 13739  0029C4                     
 13740                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
 13741  0029C4  9489               	bcf	3977,2,c	;volatile
 13742                           
 13743                           ;SwSpiApp.c: 286: break;
 13744  0029C6  0012               	return	
 13745  0029C8                     
 13746                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
 13747  0029C8  8489               	bsf	3977,2,c	;volatile
 13748                           
 13749                           ;SwSpiApp.c: 291: }
 13750                           
 13751                           ;SwSpiApp.c: 290: break;
 13752  0029CA  0012               	return	
 13753  0029CC                     l652:
 13754  0029CC  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 13755                           
 13756                           ; Switch size 1, requested type "space"
 13757                           ; Number of cases is 2, Range of values is 0 to 1
 13758                           ; switch strategies available:
 13759                           ; Name         Instructions Cycles
 13760                           ; simple_byte            7     4 (average)
 13761                           ;	Chosen strategy is simple_byte
 13762  0029CE  0A00               	xorlw	0	; case 0
 13763  0029D0  B4D8               	btfsc	status,2,c
 13764  0029D2  D7F8               	goto	l653
 13765  0029D4  0A01               	xorlw	1	; case 1
 13766  0029D6  A4D8               	btfss	status,2,c
 13767  0029D8  0012               	return	
 13768  0029DA  D7F6               	goto	l657
 13769  0029DC                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 13770                           	opt stack 0
 13771                           tosu	equ	0xFFF
 13772                           tosh	equ	0xFFE
 13773                           tosl	equ	0xFFD
 13774                           pclath	equ	0xFFA
 13775                           tblptru	equ	0xFF8
 13776                           tblptrh	equ	0xFF7
 13777                           tblptrl	equ	0xFF6
 13778                           tablat	equ	0xFF5
 13779                           prodh	equ	0xFF4
 13780                           prodl	equ	0xFF3
 13781                           intcon	equ	0xFF2
 13782                           intcon2	equ	0xFF1
 13783                           indf0	equ	0xFEF
 13784                           postinc0	equ	0xFEE
 13785                           fsr0h	equ	0xFEA
 13786                           fsr0l	equ	0xFE9
 13787                           wreg	equ	0xFE8
 13788                           indf1	equ	0xFE7
 13789                           postdec1	equ	0xFE5
 13790                           fsr1h	equ	0xFE2
 13791                           fsr1l	equ	0xFE1
 13792                           indf2	equ	0xFDF
 13793                           postinc2	equ	0xFDE
 13794                           postdec2	equ	0xFDD
 13795                           fsr2h	equ	0xFDA
 13796                           fsr2l	equ	0xFD9
 13797                           status	equ	0xFD8
 13798                           
 13799 ;; *************** function _SWSPI_Synth_send_bits *****************
 13800 ;; Defined at:
 13801 ;;		line 89 in file "SwSpiApp.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;  phrType         1    wreg     enum E7593
 13804 ;;  data            1   25[COMRAM] unsigned char 
 13805 ;; Auto vars:     Size  Location     Type
 13806 ;;  phrType         1   27[COMRAM] enum E7593
 13807 ;;  count           1   26[COMRAM] unsigned char 
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  1    wreg      void 
 13810 ;; Registers used:
 13811 ;;		wreg, status,2, status,0, cstack
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13817 ;;      Params:         1       0       0       0       0       0       0
 13818 ;;      Locals:         2       0       0       0       0       0       0
 13819 ;;      Temps:          0       0       0       0       0       0       0
 13820 ;;      Totals:         3       0       0       0       0       0       0
 13821 ;;Total ram usage:        3 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    4
 13824 ;; This function calls:
 13825 ;;		_SwSpi_Clk_Pin
 13826 ;;		_SwSpi_Data_Pin
 13827 ;; This function is called by:
 13828 ;;		_SWSPI_send_word
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           	psect	text71
 13833  0021BA                     __ptext71:
 13834                           	opt stack 0
 13835  0021BA                     _SWSPI_Synth_send_bits:
 13836                           	opt stack 23
 13837                           
 13838                           ;incstack = 0
 13839                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 13840  0021BA  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
 13841                           
 13842                           ;SwSpiApp.c: 91: uint8_t count;
 13843                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
 13844  0021BC  0E08               	movlw	8
 13845  0021BE  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
 13846  0021C0  D01A               	goto	l536
 13847  0021C2                     
 13848                           ;SwSpiApp.c: 93: {
 13849                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
 13850  0021C2  0E00               	movlw	0
 13851  0021C4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13852  0021C6  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13853  0021C8  EC8B  F011         	call	_SwSpi_Clk_Pin
 13854                           
 13855                           ;SwSpiApp.c: 96: if (data & 0X80)
 13856  0021CC  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
 13857  0021CE  D006               	goto	l538
 13858                           
 13859                           ;SwSpiApp.c: 97: {
 13860                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
 13861  0021D0  0E01               	movlw	1
 13862  0021D2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13863  0021D4  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13864  0021D6  EC60  F011         	call	_SwSpi_Data_Pin
 13865                           
 13866                           ;SwSpiApp.c: 100: }
 13867  0021DA  D005               	goto	l539
 13868  0021DC                     l538:
 13869                           
 13870                           ;SwSpiApp.c: 101: else
 13871                           ;SwSpiApp.c: 102: {
 13872                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
 13873  0021DC  0E00               	movlw	0
 13874  0021DE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13875  0021E0  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13876  0021E2  EC60  F011         	call	_SwSpi_Data_Pin
 13877  0021E6                     l539:
 13878                           
 13879                           ;SwSpiApp.c: 104: }
 13880                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
 13881  0021E6  0E01               	movlw	1
 13882  0021E8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13883  0021EA  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13884  0021EC  EC8B  F011         	call	_SwSpi_Clk_Pin
 13885  0021F0  061B               	decf	SWSPI_Synth_send_bits@count,f,c
 13886  0021F2  90D8               	bcf	status,0,c
 13887  0021F4  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
 13888  0021F6                     l536:
 13889  0021F6  501B               	movf	SWSPI_Synth_send_bits@count,w,c
 13890  0021F8  A4D8               	btfss	status,2,c
 13891  0021FA  D7E3               	goto	l537
 13892                           
 13893                           ;SwSpiApp.c: 113: }
 13894                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
 13895  0021FC  0E00               	movlw	0
 13896  0021FE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13897  002200  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13898  002202  EC60  F011         	call	_SwSpi_Data_Pin
 13899                           
 13900                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
 13901  002206  0E00               	movlw	0
 13902  002208  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13903  00220A  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 13904  00220C  EC8B  F011         	call	_SwSpi_Clk_Pin
 13905  002210  0012               	return		;funcret
 13906  002212                     __end_of_SWSPI_Synth_send_bits:
 13907                           	opt stack 0
 13908                           tosu	equ	0xFFF
 13909                           tosh	equ	0xFFE
 13910                           tosl	equ	0xFFD
 13911                           pclath	equ	0xFFA
 13912                           tblptru	equ	0xFF8
 13913                           tblptrh	equ	0xFF7
 13914                           tblptrl	equ	0xFF6
 13915                           tablat	equ	0xFF5
 13916                           prodh	equ	0xFF4
 13917                           prodl	equ	0xFF3
 13918                           intcon	equ	0xFF2
 13919                           intcon2	equ	0xFF1
 13920                           indf0	equ	0xFEF
 13921                           postinc0	equ	0xFEE
 13922                           fsr0h	equ	0xFEA
 13923                           fsr0l	equ	0xFE9
 13924                           wreg	equ	0xFE8
 13925                           indf1	equ	0xFE7
 13926                           postdec1	equ	0xFE5
 13927                           fsr1h	equ	0xFE2
 13928                           fsr1l	equ	0xFE1
 13929                           indf2	equ	0xFDF
 13930                           postinc2	equ	0xFDE
 13931                           postdec2	equ	0xFDD
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _SWSPI_DAC_send_bits *****************
 13937 ;; Defined at:
 13938 ;;		line 65 in file "SwSpiApp.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;  phrType         1    wreg     enum E7593
 13941 ;;  data            1   25[COMRAM] unsigned char 
 13942 ;; Auto vars:     Size  Location     Type
 13943 ;;  phrType         1   27[COMRAM] enum E7593
 13944 ;;  count           1   26[COMRAM] unsigned char 
 13945 ;; Return value:  Size  Location     Type
 13946 ;;                  1    wreg      void 
 13947 ;; Registers used:
 13948 ;;		wreg, status,2, status,0, cstack
 13949 ;; Tracked objects:
 13950 ;;		On entry : 0/0
 13951 ;;		On exit  : 0/0
 13952 ;;		Unchanged: 0/0
 13953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13954 ;;      Params:         1       0       0       0       0       0       0
 13955 ;;      Locals:         2       0       0       0       0       0       0
 13956 ;;      Temps:          0       0       0       0       0       0       0
 13957 ;;      Totals:         3       0       0       0       0       0       0
 13958 ;;Total ram usage:        3 bytes
 13959 ;; Hardware stack levels used:    1
 13960 ;; Hardware stack levels required when called:    4
 13961 ;; This function calls:
 13962 ;;		_SwSpi_Clk_Pin
 13963 ;;		_SwSpi_Data_Pin
 13964 ;; This function is called by:
 13965 ;;		_SWSPI_send_word
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969                           	psect	text72
 13970  002212                     __ptext72:
 13971                           	opt stack 0
 13972  002212                     _SWSPI_DAC_send_bits:
 13973                           	opt stack 23
 13974                           
 13975                           ;incstack = 0
 13976                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13977  002212  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13978                           
 13979                           ;SwSpiApp.c: 67: uint8_t count;
 13980                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
 13981  002214  0E08               	movlw	8
 13982  002216  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13983  002218  D01A               	goto	l528
 13984  00221A                     
 13985                           ;SwSpiApp.c: 69: {
 13986                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
 13987  00221A  0E01               	movlw	1
 13988  00221C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13989  00221E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13990  002220  EC8B  F011         	call	_SwSpi_Clk_Pin
 13991                           
 13992                           ;SwSpiApp.c: 72: if (data & 0X80)
 13993  002224  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13994  002226  D006               	goto	l530
 13995                           
 13996                           ;SwSpiApp.c: 73: {
 13997                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
 13998  002228  0E01               	movlw	1
 13999  00222A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14000  00222C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14001  00222E  EC60  F011         	call	_SwSpi_Data_Pin
 14002                           
 14003                           ;SwSpiApp.c: 76: }
 14004  002232  D005               	goto	l531
 14005  002234                     l530:
 14006                           
 14007                           ;SwSpiApp.c: 77: else
 14008                           ;SwSpiApp.c: 78: {
 14009                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
 14010  002234  0E00               	movlw	0
 14011  002236  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14012  002238  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14013  00223A  EC60  F011         	call	_SwSpi_Data_Pin
 14014  00223E                     l531:
 14015                           
 14016                           ;SwSpiApp.c: 80: }
 14017                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
 14018  00223E  0E00               	movlw	0
 14019  002240  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14020  002242  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14021  002244  EC8B  F011         	call	_SwSpi_Clk_Pin
 14022  002248  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 14023  00224A  90D8               	bcf	status,0,c
 14024  00224C  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 14025  00224E                     l528:
 14026  00224E  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 14027  002250  A4D8               	btfss	status,2,c
 14028  002252  D7E3               	goto	l529
 14029                           
 14030                           ;SwSpiApp.c: 83: }
 14031                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
 14032  002254  0E00               	movlw	0
 14033  002256  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14034  002258  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14035  00225A  EC60  F011         	call	_SwSpi_Data_Pin
 14036                           
 14037                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
 14038  00225E  0E00               	movlw	0
 14039  002260  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14040  002262  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14041  002264  EC8B  F011         	call	_SwSpi_Clk_Pin
 14042  002268  0012               	return		;funcret
 14043  00226A                     __end_of_SWSPI_DAC_send_bits:
 14044                           	opt stack 0
 14045                           tosu	equ	0xFFF
 14046                           tosh	equ	0xFFE
 14047                           tosl	equ	0xFFD
 14048                           pclath	equ	0xFFA
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           intcon2	equ	0xFF1
 14057                           indf0	equ	0xFEF
 14058                           postinc0	equ	0xFEE
 14059                           fsr0h	equ	0xFEA
 14060                           fsr0l	equ	0xFE9
 14061                           wreg	equ	0xFE8
 14062                           indf1	equ	0xFE7
 14063                           postdec1	equ	0xFE5
 14064                           fsr1h	equ	0xFE2
 14065                           fsr1l	equ	0xFE1
 14066                           indf2	equ	0xFDF
 14067                           postinc2	equ	0xFDE
 14068                           postdec2	equ	0xFDD
 14069                           fsr2h	equ	0xFDA
 14070                           fsr2l	equ	0xFD9
 14071                           status	equ	0xFD8
 14072                           
 14073 ;; *************** function _SwSpi_Data_Pin *****************
 14074 ;; Defined at:
 14075 ;;		line 123 in file "SwSpiApp.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;  phrType         1    wreg     enum E7593
 14078 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14079 ;; Auto vars:     Size  Location     Type
 14080 ;;  phrType         1   24[COMRAM] enum E7593
 14081 ;; Return value:  Size  Location     Type
 14082 ;;                  1    wreg      void 
 14083 ;; Registers used:
 14084 ;;		wreg, status,2, status,0
 14085 ;; Tracked objects:
 14086 ;;		On entry : 0/0
 14087 ;;		On exit  : 0/0
 14088 ;;		Unchanged: 0/0
 14089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14090 ;;      Params:         1       0       0       0       0       0       0
 14091 ;;      Locals:         1       0       0       0       0       0       0
 14092 ;;      Temps:          0       0       0       0       0       0       0
 14093 ;;      Totals:         2       0       0       0       0       0       0
 14094 ;;Total ram usage:        2 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    3
 14097 ;; This function calls:
 14098 ;;		Nothing
 14099 ;; This function is called by:
 14100 ;;		_SWSPI_DAC_send_bits
 14101 ;;		_SWSPI_Synth_send_bits
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text73
 14106  0022C0                     __ptext73:
 14107                           	opt stack 0
 14108  0022C0                     _SwSpi_Data_Pin:
 14109                           	opt stack 23
 14110                           
 14111                           ;incstack = 0
 14112                           ;SwSpi_Data_Pin@phrType stored from wreg
 14113  0022C0  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 14114                           
 14115                           ;SwSpiApp.c: 125: switch(phrType)
 14116  0022C2  D01E               	goto	l544
 14117  0022C4                     
 14118                           ;SwSpiApp.c: 128: if(cPinMode == 1)
 14119  0022C4  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14120  0022C6  A4D8               	btfss	status,2,c
 14121  0022C8  D002               	goto	l546
 14122                           
 14123                           ;SwSpiApp.c: 129: {
 14124                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
 14125  0022CA  808C               	bsf	3980,0,c	;volatile
 14126                           
 14127                           ;SwSpiApp.c: 131: }
 14128  0022CC  0012               	return	
 14129  0022CE                     l546:
 14130                           
 14131                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
 14132  0022CE  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14133  0022D0  A4D8               	btfss	status,2,c
 14134  0022D2  0012               	return	
 14135                           
 14136                           ;SwSpiApp.c: 133: {
 14137                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
 14138  0022D4  908C               	bcf	3980,0,c	;volatile
 14139                           
 14140                           ;SwSpiApp.c: 135: }
 14141                           ;SwSpiApp.c: 136: break;
 14142  0022D6  0012               	return	
 14143  0022D8                     
 14144                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 14145  0022D8  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14146  0022DA  A4D8               	btfss	status,2,c
 14147  0022DC  D002               	goto	l555
 14148                           
 14149                           ;SwSpiApp.c: 140: {
 14150                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
 14151  0022DE  8A8B               	bsf	3979,5,c	;volatile
 14152                           
 14153                           ;SwSpiApp.c: 142: }
 14154  0022E0  0012               	return	
 14155  0022E2                     l555:
 14156                           
 14157                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 14158  0022E2  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14159  0022E4  A4D8               	btfss	status,2,c
 14160  0022E6  0012               	return	
 14161                           
 14162                           ;SwSpiApp.c: 144: {
 14163                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
 14164  0022E8  9A8B               	bcf	3979,5,c	;volatile
 14165                           
 14166                           ;SwSpiApp.c: 146: }
 14167                           ;SwSpiApp.c: 147: break;
 14168  0022EA  0012               	return	
 14169  0022EC                     
 14170                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 14171  0022EC  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14172  0022EE  A4D8               	btfss	status,2,c
 14173  0022F0  D002               	goto	l563
 14174                           
 14175                           ;SwSpiApp.c: 151: {
 14176                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
 14177  0022F2  8889               	bsf	3977,4,c	;volatile
 14178                           
 14179                           ;SwSpiApp.c: 153: }
 14180  0022F4  0012               	return	
 14181  0022F6                     l563:
 14182                           
 14183                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 14184  0022F6  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14185  0022F8  A4D8               	btfss	status,2,c
 14186  0022FA  0012               	return	
 14187                           
 14188                           ;SwSpiApp.c: 155: {
 14189                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
 14190  0022FC  9889               	bcf	3977,4,c	;volatile
 14191                           
 14192                           ;SwSpiApp.c: 159: }
 14193                           
 14194                           ;SwSpiApp.c: 157: }
 14195                           ;SwSpiApp.c: 158: break;
 14196  0022FE  0012               	return	
 14197  002300                     l544:
 14198  002300  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 14199                           
 14200                           ; Switch size 1, requested type "space"
 14201                           ; Number of cases is 3, Range of values is 0 to 2
 14202                           ; switch strategies available:
 14203                           ; Name         Instructions Cycles
 14204                           ; simple_byte           10     6 (average)
 14205                           ;	Chosen strategy is simple_byte
 14206  002302  0A00               	xorlw	0	; case 0
 14207  002304  B4D8               	btfsc	status,2,c
 14208  002306  D7DE               	goto	l545
 14209  002308  0A01               	xorlw	1	; case 1
 14210  00230A  B4D8               	btfsc	status,2,c
 14211  00230C  D7E5               	goto	l554
 14212  00230E  0A03               	xorlw	3	; case 2
 14213  002310  A4D8               	btfss	status,2,c
 14214  002312  0012               	return	
 14215  002314  D7EB               	goto	l562
 14216  002316                     __end_of_SwSpi_Data_Pin:
 14217                           	opt stack 0
 14218                           tosu	equ	0xFFF
 14219                           tosh	equ	0xFFE
 14220                           tosl	equ	0xFFD
 14221                           pclath	equ	0xFFA
 14222                           tblptru	equ	0xFF8
 14223                           tblptrh	equ	0xFF7
 14224                           tblptrl	equ	0xFF6
 14225                           tablat	equ	0xFF5
 14226                           prodh	equ	0xFF4
 14227                           prodl	equ	0xFF3
 14228                           intcon	equ	0xFF2
 14229                           intcon2	equ	0xFF1
 14230                           indf0	equ	0xFEF
 14231                           postinc0	equ	0xFEE
 14232                           fsr0h	equ	0xFEA
 14233                           fsr0l	equ	0xFE9
 14234                           wreg	equ	0xFE8
 14235                           indf1	equ	0xFE7
 14236                           postdec1	equ	0xFE5
 14237                           fsr1h	equ	0xFE2
 14238                           fsr1l	equ	0xFE1
 14239                           indf2	equ	0xFDF
 14240                           postinc2	equ	0xFDE
 14241                           postdec2	equ	0xFDD
 14242                           fsr2h	equ	0xFDA
 14243                           fsr2l	equ	0xFD9
 14244                           status	equ	0xFD8
 14245                           
 14246 ;; *************** function _SwSpi_Clk_Pin *****************
 14247 ;; Defined at:
 14248 ;;		line 162 in file "SwSpiApp.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;  phrType         1    wreg     enum E7593
 14251 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14252 ;; Auto vars:     Size  Location     Type
 14253 ;;  phrType         1   24[COMRAM] enum E7593
 14254 ;; Return value:  Size  Location     Type
 14255 ;;                  1    wreg      void 
 14256 ;; Registers used:
 14257 ;;		wreg, status,2, status,0
 14258 ;; Tracked objects:
 14259 ;;		On entry : 0/0
 14260 ;;		On exit  : 0/0
 14261 ;;		Unchanged: 0/0
 14262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14263 ;;      Params:         1       0       0       0       0       0       0
 14264 ;;      Locals:         1       0       0       0       0       0       0
 14265 ;;      Temps:          0       0       0       0       0       0       0
 14266 ;;      Totals:         2       0       0       0       0       0       0
 14267 ;;Total ram usage:        2 bytes
 14268 ;; Hardware stack levels used:    1
 14269 ;; Hardware stack levels required when called:    3
 14270 ;; This function calls:
 14271 ;;		Nothing
 14272 ;; This function is called by:
 14273 ;;		_SWSPI_DAC_send_bits
 14274 ;;		_SWSPI_Synth_send_bits
 14275 ;;		_SwSpi_Synth_Toggle_Clock
 14276 ;; This function uses a non-reentrant model
 14277 ;;
 14278                           
 14279                           	psect	text74
 14280  002316                     __ptext74:
 14281                           	opt stack 0
 14282  002316                     _SwSpi_Clk_Pin:
 14283                           	opt stack 23
 14284                           
 14285                           ;incstack = 0
 14286                           ;SwSpi_Clk_Pin@phrType stored from wreg
 14287  002316  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 14288                           
 14289                           ;SwSpiApp.c: 164: switch(phrType)
 14290  002318  D01E               	goto	l573
 14291  00231A                     
 14292                           ;SwSpiApp.c: 167: if(cPinMode == 1)
 14293  00231A  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14294  00231C  A4D8               	btfss	status,2,c
 14295  00231E  D002               	goto	l575
 14296                           
 14297                           ;SwSpiApp.c: 168: {
 14298                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
 14299  002320  868B               	bsf	3979,3,c	;volatile
 14300                           
 14301                           ;SwSpiApp.c: 170: }
 14302  002322  0012               	return	
 14303  002324                     l575:
 14304                           
 14305                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
 14306  002324  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14307  002326  A4D8               	btfss	status,2,c
 14308  002328  0012               	return	
 14309                           
 14310                           ;SwSpiApp.c: 172: {
 14311                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
 14312  00232A  968B               	bcf	3979,3,c	;volatile
 14313                           
 14314                           ;SwSpiApp.c: 174: }
 14315                           ;SwSpiApp.c: 175: break;
 14316  00232C  0012               	return	
 14317  00232E                     
 14318                           ;SwSpiApp.c: 178: if(cPinMode == 1)
 14319  00232E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14320  002330  A4D8               	btfss	status,2,c
 14321  002332  D002               	goto	l584
 14322                           
 14323                           ;SwSpiApp.c: 179: {
 14324                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
 14325  002334  888B               	bsf	3979,4,c	;volatile
 14326                           
 14327                           ;SwSpiApp.c: 181: }
 14328  002336  0012               	return	
 14329  002338                     l584:
 14330                           
 14331                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
 14332  002338  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14333  00233A  A4D8               	btfss	status,2,c
 14334  00233C  0012               	return	
 14335                           
 14336                           ;SwSpiApp.c: 183: {
 14337                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
 14338  00233E  988B               	bcf	3979,4,c	;volatile
 14339                           
 14340                           ;SwSpiApp.c: 185: }
 14341                           ;SwSpiApp.c: 187: break;
 14342  002340  0012               	return	
 14343  002342                     
 14344                           ;SwSpiApp.c: 190: if(cPinMode == 1)
 14345  002342  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14346  002344  A4D8               	btfss	status,2,c
 14347  002346  D002               	goto	l592
 14348                           
 14349                           ;SwSpiApp.c: 191: {
 14350                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
 14351  002348  8689               	bsf	3977,3,c	;volatile
 14352                           
 14353                           ;SwSpiApp.c: 193: }
 14354  00234A  0012               	return	
 14355  00234C                     l592:
 14356                           
 14357                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
 14358  00234C  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14359  00234E  A4D8               	btfss	status,2,c
 14360  002350  0012               	return	
 14361                           
 14362                           ;SwSpiApp.c: 195: {
 14363                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
 14364  002352  9689               	bcf	3977,3,c	;volatile
 14365                           
 14366                           ;SwSpiApp.c: 199: }
 14367                           
 14368                           ;SwSpiApp.c: 197: }
 14369                           ;SwSpiApp.c: 198: break;
 14370  002354  0012               	return	
 14371  002356                     l573:
 14372  002356  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 14373                           
 14374                           ; Switch size 1, requested type "space"
 14375                           ; Number of cases is 3, Range of values is 0 to 2
 14376                           ; switch strategies available:
 14377                           ; Name         Instructions Cycles
 14378                           ; simple_byte           10     6 (average)
 14379                           ;	Chosen strategy is simple_byte
 14380  002358  0A00               	xorlw	0	; case 0
 14381  00235A  B4D8               	btfsc	status,2,c
 14382  00235C  D7DE               	goto	l574
 14383  00235E  0A01               	xorlw	1	; case 1
 14384  002360  B4D8               	btfsc	status,2,c
 14385  002362  D7E5               	goto	l583
 14386  002364  0A03               	xorlw	3	; case 2
 14387  002366  A4D8               	btfss	status,2,c
 14388  002368  0012               	return	
 14389  00236A  D7EB               	goto	l591
 14390  00236C                     __end_of_SwSpi_Clk_Pin:
 14391                           	opt stack 0
 14392                           tosu	equ	0xFFF
 14393                           tosh	equ	0xFFE
 14394                           tosl	equ	0xFFD
 14395                           pclath	equ	0xFFA
 14396                           tblptru	equ	0xFF8
 14397                           tblptrh	equ	0xFF7
 14398                           tblptrl	equ	0xFF6
 14399                           tablat	equ	0xFF5
 14400                           prodh	equ	0xFF4
 14401                           prodl	equ	0xFF3
 14402                           intcon	equ	0xFF2
 14403                           intcon2	equ	0xFF1
 14404                           indf0	equ	0xFEF
 14405                           postinc0	equ	0xFEE
 14406                           fsr0h	equ	0xFEA
 14407                           fsr0l	equ	0xFE9
 14408                           wreg	equ	0xFE8
 14409                           indf1	equ	0xFE7
 14410                           postdec1	equ	0xFE5
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           fsr2h	equ	0xFDA
 14417                           fsr2l	equ	0xFD9
 14418                           status	equ	0xFD8
 14419                           
 14420 ;; *************** function _ClearMcuRunTime *****************
 14421 ;; Defined at:
 14422 ;;		line 51 in file "SystemStatus.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;		None
 14425 ;; Auto vars:     Size  Location     Type
 14426 ;;		None
 14427 ;; Return value:  Size  Location     Type
 14428 ;;                  1    wreg      void 
 14429 ;; Registers used:
 14430 ;;		wreg, status,2
 14431 ;; Tracked objects:
 14432 ;;		On entry : 0/0
 14433 ;;		On exit  : 0/0
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14436 ;;      Params:         0       0       0       0       0       0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used:    1
 14442 ;; Hardware stack levels required when called:    3
 14443 ;; This function calls:
 14444 ;;		Nothing
 14445 ;; This function is called by:
 14446 ;;		_InitSystemApplicationManagers
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           	psect	text75
 14451  002A4E                     __ptext75:
 14452                           	opt stack 0
 14453  002A4E                     _ClearMcuRunTime:
 14454                           	opt stack 26
 14455                           
 14456                           ;SystemStatus.c: 53: mcuRunTimeIn5SecTicks = 0;
 14457                           
 14458                           ;incstack = 0
 14459  002A4E  0E00               	movlw	0
 14460  002A50  0100               	movlb	0	; () banked
 14461  002A52  6FAD               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14462  002A54  0E00               	movlw	0
 14463  002A56  6FAE               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14464  002A58  0E00               	movlw	0
 14465  002A5A  6FAF               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14466  002A5C  0E00               	movlw	0
 14467  002A5E  6FB0               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14468                           
 14469                           ; BSR set to: 0
 14470  002A60  0012               	return		;funcret
 14471  002A62                     __end_of_ClearMcuRunTime:
 14472                           	opt stack 0
 14473                           tosu	equ	0xFFF
 14474                           tosh	equ	0xFFE
 14475                           tosl	equ	0xFFD
 14476                           pclath	equ	0xFFA
 14477                           tblptru	equ	0xFF8
 14478                           tblptrh	equ	0xFF7
 14479                           tblptrl	equ	0xFF6
 14480                           tablat	equ	0xFF5
 14481                           prodh	equ	0xFF4
 14482                           prodl	equ	0xFF3
 14483                           intcon	equ	0xFF2
 14484                           intcon2	equ	0xFF1
 14485                           indf0	equ	0xFEF
 14486                           postinc0	equ	0xFEE
 14487                           fsr0h	equ	0xFEA
 14488                           fsr0l	equ	0xFE9
 14489                           wreg	equ	0xFE8
 14490                           indf1	equ	0xFE7
 14491                           postdec1	equ	0xFE5
 14492                           fsr1h	equ	0xFE2
 14493                           fsr1l	equ	0xFE1
 14494                           indf2	equ	0xFDF
 14495                           postinc2	equ	0xFDE
 14496                           postdec2	equ	0xFDD
 14497                           fsr2h	equ	0xFDA
 14498                           fsr2l	equ	0xFD9
 14499                           status	equ	0xFD8
 14500                           
 14501 ;; *************** function _BlinkOkLeds *****************
 14502 ;; Defined at:
 14503 ;;		line 24 in file "LedsApp.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;  state           1    wreg     enum E7609
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  state           1   26[COMRAM] enum E7609
 14508 ;;  idx             2   27[COMRAM] int 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;                  1    wreg      void 
 14511 ;; Registers used:
 14512 ;;		wreg, status,2, status,0
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14518 ;;      Params:         0       0       0       0       0       0       0
 14519 ;;      Locals:         3       0       0       0       0       0       0
 14520 ;;      Temps:          3       0       0       0       0       0       0
 14521 ;;      Totals:         6       0       0       0       0       0       0
 14522 ;;Total ram usage:        6 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; Hardware stack levels required when called:    3
 14525 ;; This function calls:
 14526 ;;		Nothing
 14527 ;; This function is called by:
 14528 ;;		_main
 14529 ;; This function uses a non-reentrant model
 14530 ;;
 14531                           
 14532                           	psect	text76
 14533  0020A4                     __ptext76:
 14534                           	opt stack 0
 14535  0020A4                     _BlinkOkLeds:
 14536                           	opt stack 27
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;incstack = 0
 14540                           ;BlinkOkLeds@state stored from wreg
 14541  0020A4  6E1B               	movwf	BlinkOkLeds@state,c
 14542                           
 14543                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14544  0020A6  0E00               	movlw	0
 14545  0020A8  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14546  0020AA  0E00               	movlw	0
 14547  0020AC  6E1C               	movwf	BlinkOkLeds@idx,c
 14548  0020AE                     l5553:
 14549  0020AE  501B               	movf	BlinkOkLeds@state,w,c
 14550  0020B0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14551  0020B2  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14552  0020B4  5018               	movf	??_BlinkOkLeds,w,c
 14553  0020B6  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14554  0020B8  501D               	movf	BlinkOkLeds@idx+1,w,c
 14555  0020BA  0A80               	xorlw	128
 14556  0020BC  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14557  0020BE  5019               	movf	??_BlinkOkLeds+1,w,c
 14558  0020C0  0A80               	xorlw	128
 14559  0020C2  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14560  0020C4  B0D8               	btfsc	status,0,c
 14561  0020C6  0012               	return	
 14562                           
 14563                           ;LedsApp.c: 27: {
 14564                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14565  0020C8  908B               	bcf	3979,0,c	;volatile
 14566                           
 14567                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14568  0020CA  0E02               	movlw	2
 14569  0020CC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14570  0020CE  0E04               	movlw	4
 14571  0020D0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14572  0020D2  0EBA               	movlw	186
 14573  0020D4                     u8267:
 14574  0020D4  2EE8               	decfsz	wreg,f,c
 14575  0020D6  D7FE               	bra	u8267
 14576  0020D8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14577  0020DA  D7FC               	bra	u8267
 14578  0020DC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14579  0020DE  D7FA               	bra	u8267
 14580  0020E0  D000               	nop2	
 14581                           
 14582                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14583  0020E2  808B               	bsf	3979,0,c	;volatile
 14584                           
 14585                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14586  0020E4  0E02               	movlw	2
 14587  0020E6  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14588  0020E8  0E04               	movlw	4
 14589  0020EA  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14590  0020EC  0EBA               	movlw	186
 14591  0020EE                     u8277:
 14592  0020EE  2EE8               	decfsz	wreg,f,c
 14593  0020F0  D7FE               	bra	u8277
 14594  0020F2  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14595  0020F4  D7FC               	bra	u8277
 14596  0020F6  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14597  0020F8  D7FA               	bra	u8277
 14598  0020FA  D000               	nop2	
 14599  0020FC  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14600  0020FE  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14601  002100  D7D6               	goto	l5553
 14602  002102                     __end_of_BlinkOkLeds:
 14603                           	opt stack 0
 14604                           tosu	equ	0xFFF
 14605                           tosh	equ	0xFFE
 14606                           tosl	equ	0xFFD
 14607                           pclath	equ	0xFFA
 14608                           tblptru	equ	0xFF8
 14609                           tblptrh	equ	0xFF7
 14610                           tblptrl	equ	0xFF6
 14611                           tablat	equ	0xFF5
 14612                           prodh	equ	0xFF4
 14613                           prodl	equ	0xFF3
 14614                           intcon	equ	0xFF2
 14615                           intcon2	equ	0xFF1
 14616                           indf0	equ	0xFEF
 14617                           postinc0	equ	0xFEE
 14618                           fsr0h	equ	0xFEA
 14619                           fsr0l	equ	0xFE9
 14620                           wreg	equ	0xFE8
 14621                           indf1	equ	0xFE7
 14622                           postdec1	equ	0xFE5
 14623                           fsr1h	equ	0xFE2
 14624                           fsr1l	equ	0xFE1
 14625                           indf2	equ	0xFDF
 14626                           postinc2	equ	0xFDE
 14627                           postdec2	equ	0xFDD
 14628                           fsr2h	equ	0xFDA
 14629                           fsr2l	equ	0xFD9
 14630                           status	equ	0xFD8
 14631                           
 14632 ;; *************** function _INTERRUPT_InterruptManager *****************
 14633 ;; Defined at:
 14634 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14635 ;; Parameters:    Size  Location     Type
 14636 ;;		None
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;		None
 14639 ;; Return value:  Size  Location     Type
 14640 ;;                  1    wreg      void 
 14641 ;; Registers used:
 14642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14648 ;;      Params:         0       0       0       0       0       0       0
 14649 ;;      Locals:         0       0       0       0       0       0       0
 14650 ;;      Temps:         18       0       0       0       0       0       0
 14651 ;;      Totals:        18       0       0       0       0       0       0
 14652 ;;Total ram usage:       18 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:    2
 14655 ;; This function calls:
 14656 ;;		_EUSART1_Receive_ISR
 14657 ;;		_EUSART1_Transmit_ISR
 14658 ;;		_MEMORY_ISR
 14659 ;;		_PIN_MANAGER_IOC
 14660 ;;		_TMR0_ISR
 14661 ;; This function is called by:
 14662 ;;		Interrupt level 2
 14663 ;; This function uses a non-reentrant model
 14664 ;;
 14665                           
 14666                           	psect	intcode
 14667  000008                     __pintcode:
 14668                           	opt stack 0
 14669  000008                     _INTERRUPT_InterruptManager:
 14670                           	opt stack 21
 14671                           
 14672                           ;incstack = 0
 14673  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14674  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 14675  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14676  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14677  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14678  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14679  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14680  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14681  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14682  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14683  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14684  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14685  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14686  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14687  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14688  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14689  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14690  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14691  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 14692                           
 14693                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 14694  000052  B6F2               	btfsc	intcon,3,c	;volatile
 14695  000054  A0F2               	btfss	intcon,0,c	;volatile
 14696  000056  D003               	goto	i2l726
 14697                           
 14698                           ;interrupt_manager.c: 61: {
 14699                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 14700  000058  EC53  F015         	call	_PIN_MANAGER_IOC	;wreg free
 14701                           
 14702                           ;interrupt_manager.c: 63: }
 14703  00005C  D019               	goto	i2l735
 14704  00005E                     i2l726:
 14705                           
 14706                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14707  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 14708  000060  A4F2               	btfss	intcon,2,c	;volatile
 14709  000062  D003               	goto	i2l728
 14710                           
 14711                           ;interrupt_manager.c: 65: {
 14712                           ;interrupt_manager.c: 66: TMR0_ISR();
 14713  000064  ECF1  F00D         	call	_TMR0_ISR	;wreg free
 14714                           
 14715                           ;interrupt_manager.c: 67: }
 14716  000068  D013               	goto	i2l735
 14717  00006A                     i2l728:
 14718                           
 14719                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 14720  00006A  ACF2               	btfss	intcon,6,c	;volatile
 14721  00006C  D011               	goto	i2l735
 14722                           
 14723                           ;interrupt_manager.c: 69: {
 14724                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 14725  00006E  B8A0               	btfsc	4000,4,c	;volatile
 14726  000070  A8A1               	btfss	4001,4,c	;volatile
 14727  000072  D003               	goto	i2l731
 14728                           
 14729                           ;interrupt_manager.c: 71: {
 14730                           ;interrupt_manager.c: 72: MEMORY_ISR();
 14731  000074  EC55  F015         	call	_MEMORY_ISR	;wreg free
 14732                           
 14733                           ;interrupt_manager.c: 73: }
 14734  000078  D00B               	goto	i2l735
 14735  00007A                     i2l731:
 14736                           
 14737                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 14738  00007A  B89D               	btfsc	3997,4,c	;volatile
 14739  00007C  A89E               	btfss	3998,4,c	;volatile
 14740  00007E  D003               	goto	i2l733
 14741                           
 14742                           ;interrupt_manager.c: 75: {
 14743                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 14744  000080  ECAB  F013         	call	_EUSART1_Transmit_ISR	;wreg free
 14745                           
 14746                           ;interrupt_manager.c: 77: }
 14747  000084  D005               	goto	i2l735
 14748  000086                     i2l733:
 14749                           
 14750                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 14751  000086  BA9D               	btfsc	3997,5,c	;volatile
 14752  000088  AA9E               	btfss	3998,5,c	;volatile
 14753  00008A  D002               	goto	i2l735
 14754                           
 14755                           ;interrupt_manager.c: 79: {
 14756                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 14757  00008C  ECFC  F013         	call	_EUSART1_Receive_ISR	;wreg free
 14758  000090                     i2l735:
 14759                           
 14760                           ;interrupt_manager.c: 87: else
 14761                           ;interrupt_manager.c: 88: {
 14762                           
 14763                           ;interrupt_manager.c: 85: }
 14764                           ;interrupt_manager.c: 86: }
 14765                           
 14766                           ;interrupt_manager.c: 82: else
 14767                           ;interrupt_manager.c: 83: {
 14768  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 14769  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 14770  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 14771  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 14772  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14773  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14774  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14775  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14776  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14777  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14778  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14779  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14780  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14781  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14782  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14783  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14784  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14785  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14786  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14787  0000DA  0011               	retfie		f
 14788  0000DC                     __end_of_INTERRUPT_InterruptManager:
 14789                           	opt stack 0
 14790                           tosu	equ	0xFFF
 14791                           tosh	equ	0xFFE
 14792                           tosl	equ	0xFFD
 14793                           pclatu	equ	0xFFB
 14794                           pclath	equ	0xFFA
 14795                           tblptru	equ	0xFF8
 14796                           tblptrh	equ	0xFF7
 14797                           tblptrl	equ	0xFF6
 14798                           tablat	equ	0xFF5
 14799                           prodh	equ	0xFF4
 14800                           prodl	equ	0xFF3
 14801                           intcon	equ	0xFF2
 14802                           intcon2	equ	0xFF1
 14803                           indf0	equ	0xFEF
 14804                           postinc0	equ	0xFEE
 14805                           fsr0h	equ	0xFEA
 14806                           fsr0l	equ	0xFE9
 14807                           wreg	equ	0xFE8
 14808                           indf1	equ	0xFE7
 14809                           postdec1	equ	0xFE5
 14810                           fsr1h	equ	0xFE2
 14811                           fsr1l	equ	0xFE1
 14812                           indf2	equ	0xFDF
 14813                           postinc2	equ	0xFDE
 14814                           postdec2	equ	0xFDD
 14815                           fsr2h	equ	0xFDA
 14816                           fsr2l	equ	0xFD9
 14817                           status	equ	0xFD8
 14818                           
 14819 ;; *************** function _TMR0_ISR *****************
 14820 ;; Defined at:
 14821 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 14822 ;; Parameters:    Size  Location     Type
 14823 ;;		None
 14824 ;; Auto vars:     Size  Location     Type
 14825 ;;		None
 14826 ;; Return value:  Size  Location     Type
 14827 ;;                  1    wreg      void 
 14828 ;; Registers used:
 14829 ;;		wreg, status,2, status,0, cstack
 14830 ;; Tracked objects:
 14831 ;;		On entry : 0/0
 14832 ;;		On exit  : 0/0
 14833 ;;		Unchanged: 0/0
 14834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14835 ;;      Params:         0       0       0       0       0       0       0
 14836 ;;      Locals:         0       0       0       0       0       0       0
 14837 ;;      Temps:          0       0       0       0       0       0       0
 14838 ;;      Totals:         0       0       0       0       0       0       0
 14839 ;;Total ram usage:        0 bytes
 14840 ;; Hardware stack levels used:    1
 14841 ;; Hardware stack levels required when called:    1
 14842 ;; This function calls:
 14843 ;;		i2___lwmod
 14844 ;; This function is called by:
 14845 ;;		_INTERRUPT_InterruptManager
 14846 ;; This function uses a non-reentrant model
 14847 ;;
 14848                           
 14849                           	psect	text78
 14850  001BE2                     __ptext78:
 14851                           	opt stack 0
 14852  001BE2                     _TMR0_ISR:
 14853                           	opt stack 21
 14854                           
 14855                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 14856                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 14857                           
 14858                           ;incstack = 0
 14859  001BE2  94F2               	bcf	intcon,2,c	;volatile
 14860                           
 14861                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 14862  001BE4  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 14863  001BE6  6ED7               	movwf	4055,c	;volatile
 14864                           
 14865                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 14866  001BE8  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14867                           
 14868                           ;tmr0.c: 146: CountCallBack ++;
 14869  001BEC  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 14870  001BEE  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 14871                           
 14872                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 14873  001BF0  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14874  001BF4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14875  001BF8  0E00               	movlw	0
 14876  001BFA  6E04               	movwf	i2___lwmod@divisor+1,c
 14877  001BFC  0E14               	movlw	20
 14878  001BFE  6E03               	movwf	i2___lwmod@divisor,c
 14879  001C00  ECF6  F012         	call	i2___lwmod	;wreg free
 14880  001C04  5001               	movf	?i2___lwmod,w,c
 14881  001C06  1002               	iorwf	?i2___lwmod+1,w,c
 14882  001C08  A4D8               	btfss	status,2,c
 14883  001C0A  D003               	goto	i2l957
 14884                           
 14885                           ;tmr0.c: 148: {
 14886                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 14887  001C0C  0E01               	movlw	1
 14888  001C0E  0100               	movlb	0	; () banked
 14889  001C10  6FC6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 14890  001C12                     i2l957:
 14891                           
 14892                           ;tmr0.c: 150: }
 14893                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 14894                           
 14895                           ; BSR set to: 0
 14896  001C12  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14897  001C16  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14898  001C1A  0E00               	movlw	0
 14899  001C1C  6E04               	movwf	i2___lwmod@divisor+1,c
 14900  001C1E  0E32               	movlw	50
 14901  001C20  6E03               	movwf	i2___lwmod@divisor,c
 14902  001C22  ECF6  F012         	call	i2___lwmod	;wreg free
 14903  001C26  5001               	movf	?i2___lwmod,w,c
 14904  001C28  1002               	iorwf	?i2___lwmod+1,w,c
 14905  001C2A  A4D8               	btfss	status,2,c
 14906  001C2C  D003               	goto	i2l958
 14907                           
 14908                           ;tmr0.c: 153: {
 14909                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 14910  001C2E  0E01               	movlw	1
 14911  001C30  0100               	movlb	0	; () banked
 14912  001C32  6FC5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 14913  001C34                     i2l958:
 14914                           
 14915                           ;tmr0.c: 155: }
 14916                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 14917                           
 14918                           ; BSR set to: 0
 14919  001C34  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14920  001C38  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14921  001C3C  0E01               	movlw	1
 14922  001C3E  6E04               	movwf	i2___lwmod@divisor+1,c
 14923  001C40  0E2C               	movlw	44
 14924  001C42  6E03               	movwf	i2___lwmod@divisor,c
 14925  001C44  ECF6  F012         	call	i2___lwmod	;wreg free
 14926  001C48  5001               	movf	?i2___lwmod,w,c
 14927  001C4A  1002               	iorwf	?i2___lwmod+1,w,c
 14928  001C4C  A4D8               	btfss	status,2,c
 14929  001C4E  D003               	goto	i2l959
 14930                           
 14931                           ;tmr0.c: 157: {
 14932                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 14933  001C50  0E01               	movlw	1
 14934  001C52  0100               	movlb	0	; () banked
 14935  001C54  6FC4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 14936  001C56                     i2l959:
 14937                           
 14938                           ;tmr0.c: 159: }
 14939                           ;tmr0.c: 161: CountCallBack %= 300;
 14940                           
 14941                           ; BSR set to: 0
 14942  001C56  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 14943  001C5A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 14944  001C5E  0E01               	movlw	1
 14945  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 14946  001C62  0E2C               	movlw	44
 14947  001C64  6E03               	movwf	i2___lwmod@divisor,c
 14948  001C66  ECF6  F012         	call	i2___lwmod	;wreg free
 14949  001C6A  C001  F035         	movff	?i2___lwmod,TMR0_ISR@CountCallBack	;volatile
 14950  001C6E  C002  F036         	movff	?i2___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 14951  001C72  0012               	return		;funcret
 14952  001C74                     __end_of_TMR0_ISR:
 14953                           	opt stack 0
 14954                           tosu	equ	0xFFF
 14955                           tosh	equ	0xFFE
 14956                           tosl	equ	0xFFD
 14957                           pclatu	equ	0xFFB
 14958                           pclath	equ	0xFFA
 14959                           tblptru	equ	0xFF8
 14960                           tblptrh	equ	0xFF7
 14961                           tblptrl	equ	0xFF6
 14962                           tablat	equ	0xFF5
 14963                           prodh	equ	0xFF4
 14964                           prodl	equ	0xFF3
 14965                           intcon	equ	0xFF2
 14966                           intcon2	equ	0xFF1
 14967                           indf0	equ	0xFEF
 14968                           postinc0	equ	0xFEE
 14969                           fsr0h	equ	0xFEA
 14970                           fsr0l	equ	0xFE9
 14971                           wreg	equ	0xFE8
 14972                           indf1	equ	0xFE7
 14973                           postdec1	equ	0xFE5
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           indf2	equ	0xFDF
 14977                           postinc2	equ	0xFDE
 14978                           postdec2	equ	0xFDD
 14979                           fsr2h	equ	0xFDA
 14980                           fsr2l	equ	0xFD9
 14981                           status	equ	0xFD8
 14982                           
 14983 ;; *************** function i2___lwmod *****************
 14984 ;; Defined at:
 14985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 14986 ;; Parameters:    Size  Location     Type
 14987 ;;  dividend        2    0[COMRAM] unsigned int 
 14988 ;;  divisor         2    2[COMRAM] unsigned int 
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;  __lwmod         1    4[COMRAM] unsigned char 
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  2    0[COMRAM] unsigned int 
 14993 ;; Registers used:
 14994 ;;		wreg, status,2, status,0
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15000 ;;      Params:         4       0       0       0       0       0       0
 15001 ;;      Locals:         1       0       0       0       0       0       0
 15002 ;;      Temps:          0       0       0       0       0       0       0
 15003 ;;      Totals:         5       0       0       0       0       0       0
 15004 ;;Total ram usage:        5 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; This function calls:
 15007 ;;		Nothing
 15008 ;; This function is called by:
 15009 ;;		_TMR0_ISR
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text79
 15014  0025EC                     __ptext79:
 15015                           	opt stack 0
 15016  0025EC                     i2___lwmod:
 15017                           	opt stack 21
 15018                           
 15019                           ;incstack = 0
 15020  0025EC  5003               	movf	i2___lwmod@divisor,w,c
 15021  0025EE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 15022  0025F0  B4D8               	btfsc	status,2,c
 15023  0025F2  D018               	goto	i2l1743
 15024  0025F4  0E01               	movlw	1
 15025  0025F6  6E05               	movwf	i2___lwmod@counter,c
 15026  0025F8  D004               	goto	i2l1738
 15027  0025FA  90D8               	bcf	status,0,c
 15028  0025FC  3603               	rlcf	i2___lwmod@divisor,f,c
 15029  0025FE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 15030  002600  2A05               	incf	i2___lwmod@counter,f,c
 15031  002602                     i2l1738:
 15032  002602  AE04               	btfss	i2___lwmod@divisor+1,7,c
 15033  002604  D7FA               	goto	i2l1739
 15034  002606                     i2u509_40:
 15035  002606  5003               	movf	i2___lwmod@divisor,w,c
 15036  002608  5C01               	subwf	i2___lwmod@dividend,w,c
 15037  00260A  5004               	movf	i2___lwmod@divisor+1,w,c
 15038  00260C  5802               	subwfb	i2___lwmod@dividend+1,w,c
 15039  00260E  A0D8               	btfss	status,0,c
 15040  002610  D004               	goto	i2l1742
 15041  002612  5003               	movf	i2___lwmod@divisor,w,c
 15042  002614  5E01               	subwf	i2___lwmod@dividend,f,c
 15043  002616  5004               	movf	i2___lwmod@divisor+1,w,c
 15044  002618  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15045  00261A                     i2l1742:
 15046  00261A  90D8               	bcf	status,0,c
 15047  00261C  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15048  00261E  3203               	rrcf	i2___lwmod@divisor,f,c
 15049  002620  2E05               	decfsz	i2___lwmod@counter,f,c
 15050  002622  D7F1               	goto	i2u509_40
 15051  002624                     i2l1743:
 15052  002624  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15053  002628  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15054  00262C  0012               	return		;funcret
 15055  00262E                     __end_ofi2___lwmod:
 15056                           	opt stack 0
 15057                           tosu	equ	0xFFF
 15058                           tosh	equ	0xFFE
 15059                           tosl	equ	0xFFD
 15060                           pclatu	equ	0xFFB
 15061                           pclath	equ	0xFFA
 15062                           tblptru	equ	0xFF8
 15063                           tblptrh	equ	0xFF7
 15064                           tblptrl	equ	0xFF6
 15065                           tablat	equ	0xFF5
 15066                           prodh	equ	0xFF4
 15067                           prodl	equ	0xFF3
 15068                           intcon	equ	0xFF2
 15069                           intcon2	equ	0xFF1
 15070                           indf0	equ	0xFEF
 15071                           postinc0	equ	0xFEE
 15072                           fsr0h	equ	0xFEA
 15073                           fsr0l	equ	0xFE9
 15074                           wreg	equ	0xFE8
 15075                           indf1	equ	0xFE7
 15076                           postdec1	equ	0xFE5
 15077                           fsr1h	equ	0xFE2
 15078                           fsr1l	equ	0xFE1
 15079                           indf2	equ	0xFDF
 15080                           postinc2	equ	0xFDE
 15081                           postdec2	equ	0xFDD
 15082                           fsr2h	equ	0xFDA
 15083                           fsr2l	equ	0xFD9
 15084                           status	equ	0xFD8
 15085                           
 15086 ;; *************** function _PIN_MANAGER_IOC *****************
 15087 ;; Defined at:
 15088 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 15089 ;; Parameters:    Size  Location     Type
 15090 ;;		None
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;		None
 15093 ;; Return value:  Size  Location     Type
 15094 ;;                  1    wreg      void 
 15095 ;; Registers used:
 15096 ;;		None
 15097 ;; Tracked objects:
 15098 ;;		On entry : 0/0
 15099 ;;		On exit  : 0/0
 15100 ;;		Unchanged: 0/0
 15101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15102 ;;      Params:         0       0       0       0       0       0       0
 15103 ;;      Locals:         0       0       0       0       0       0       0
 15104 ;;      Temps:          0       0       0       0       0       0       0
 15105 ;;      Totals:         0       0       0       0       0       0       0
 15106 ;;Total ram usage:        0 bytes
 15107 ;; Hardware stack levels used:    1
 15108 ;; This function calls:
 15109 ;;		Nothing
 15110 ;; This function is called by:
 15111 ;;		_INTERRUPT_InterruptManager
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           	psect	text80
 15116  002AA6                     __ptext80:
 15117                           	opt stack 0
 15118  002AA6                     _PIN_MANAGER_IOC:
 15119                           	opt stack 22
 15120                           
 15121                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 15122                           
 15123                           ;incstack = 0
 15124  002AA6  90F2               	bcf	intcon,0,c	;volatile
 15125  002AA8  0012               	return		;funcret
 15126  002AAA                     __end_of_PIN_MANAGER_IOC:
 15127                           	opt stack 0
 15128                           tosu	equ	0xFFF
 15129                           tosh	equ	0xFFE
 15130                           tosl	equ	0xFFD
 15131                           pclatu	equ	0xFFB
 15132                           pclath	equ	0xFFA
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           intcon2	equ	0xFF1
 15141                           indf0	equ	0xFEF
 15142                           postinc0	equ	0xFEE
 15143                           fsr0h	equ	0xFEA
 15144                           fsr0l	equ	0xFE9
 15145                           wreg	equ	0xFE8
 15146                           indf1	equ	0xFE7
 15147                           postdec1	equ	0xFE5
 15148                           fsr1h	equ	0xFE2
 15149                           fsr1l	equ	0xFE1
 15150                           indf2	equ	0xFDF
 15151                           postinc2	equ	0xFDE
 15152                           postdec2	equ	0xFDD
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _MEMORY_ISR *****************
 15158 ;; Defined at:
 15159 ;;		line 206 in file "mcc_generated_files/memory.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;		None
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		None
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15173 ;;      Params:         0       0       0       0       0       0       0
 15174 ;;      Locals:         0       0       0       0       0       0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0
 15176 ;;      Totals:         0       0       0       0       0       0       0
 15177 ;;Total ram usage:        0 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; This function calls:
 15180 ;;		Nothing
 15181 ;; This function is called by:
 15182 ;;		_INTERRUPT_InterruptManager
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           	psect	text81
 15187  002AAA                     __ptext81:
 15188                           	opt stack 0
 15189  002AAA                     _MEMORY_ISR:
 15190                           	opt stack 22
 15191                           
 15192                           ;memory.c: 209: PIR2bits.EEIF = 0;
 15193                           
 15194                           ;incstack = 0
 15195  002AAA  98A1               	bcf	4001,4,c	;volatile
 15196  002AAC  0012               	return		;funcret
 15197  002AAE                     __end_of_MEMORY_ISR:
 15198                           	opt stack 0
 15199                           tosu	equ	0xFFF
 15200                           tosh	equ	0xFFE
 15201                           tosl	equ	0xFFD
 15202                           pclatu	equ	0xFFB
 15203                           pclath	equ	0xFFA
 15204                           tblptru	equ	0xFF8
 15205                           tblptrh	equ	0xFF7
 15206                           tblptrl	equ	0xFF6
 15207                           tablat	equ	0xFF5
 15208                           prodh	equ	0xFF4
 15209                           prodl	equ	0xFF3
 15210                           intcon	equ	0xFF2
 15211                           intcon2	equ	0xFF1
 15212                           indf0	equ	0xFEF
 15213                           postinc0	equ	0xFEE
 15214                           fsr0h	equ	0xFEA
 15215                           fsr0l	equ	0xFE9
 15216                           wreg	equ	0xFE8
 15217                           indf1	equ	0xFE7
 15218                           postdec1	equ	0xFE5
 15219                           fsr1h	equ	0xFE2
 15220                           fsr1l	equ	0xFE1
 15221                           indf2	equ	0xFDF
 15222                           postinc2	equ	0xFDE
 15223                           postdec2	equ	0xFDD
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function _EUSART1_Transmit_ISR *****************
 15229 ;; Defined at:
 15230 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;		None
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;		None
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15244 ;;      Params:         0       0       0       0       0       0       0
 15245 ;;      Locals:         0       0       0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0
 15247 ;;      Totals:         0       0       0       0       0       0       0
 15248 ;;Total ram usage:        0 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; This function calls:
 15251 ;;		Nothing
 15252 ;; This function is called by:
 15253 ;;		_INTERRUPT_InterruptManager
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           	psect	text82
 15258  002756                     __ptext82:
 15259                           	opt stack 0
 15260  002756                     _EUSART1_Transmit_ISR:
 15261                           	opt stack 22
 15262                           
 15263                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15264                           
 15265                           ;incstack = 0
 15266  002756  0E46               	movlw	70
 15267  002758  0100               	movlb	0	; () banked
 15268  00275A  61D9               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15269  00275C  D012               	goto	i2l797
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;eusart1.c: 186: {
 15273                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15274  00275E  503B               	movf	_eusart1TxTail,w,c	;volatile
 15275  002760  0D01               	mullw	1
 15276  002762  0E00               	movlw	low _eusart1TxBuffer
 15277  002764  24F3               	addwf	prodl,w,c
 15278  002766  6ED9               	movwf	fsr2l,c
 15279  002768  0E01               	movlw	high _eusart1TxBuffer
 15280  00276A  20F4               	addwfc	prodh,w,c
 15281  00276C  6EDA               	movwf	fsr2h,c
 15282  00276E  50DF               	movf	indf2,w,c
 15283  002770  6EAD               	movwf	4013,c	;volatile
 15284                           
 15285                           ; BSR set to: 0
 15286  002772  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15290  002774  0E45               	movlw	69
 15291  002776  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 15292  002778  D002               	goto	i2l798
 15293                           
 15294                           ; BSR set to: 0
 15295                           ;eusart1.c: 189: {
 15296                           ;eusart1.c: 190: eusart1TxTail = 0;
 15297  00277A  0E00               	movlw	0
 15298  00277C  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15299  00277E                     i2l798:
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;eusart1.c: 191: }
 15303                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15304                           
 15305                           ; BSR set to: 0
 15306  00277E  2BD9               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15307                           
 15308                           ;eusart1.c: 193: }
 15309  002780  0012               	return	
 15310  002782                     i2l797:
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;eusart1.c: 194: else
 15314                           ;eusart1.c: 195: {
 15315                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 15316  002782  989D               	bcf	3997,4,c	;volatile
 15317                           
 15318                           ; BSR set to: 0
 15319                           ;eusart1.c: 197: eusart1TxTail = 0;
 15320  002784  0E00               	movlw	0
 15321  002786  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15322                           
 15323                           ;eusart1.c: 198: eusart1TxHead = 0;
 15324  002788  0E00               	movlw	0
 15325  00278A  6E3C               	movwf	_eusart1TxHead,c	;volatile
 15326  00278C  0012               	return	
 15327  00278E                     __end_of_EUSART1_Transmit_ISR:
 15328                           	opt stack 0
 15329                           tosu	equ	0xFFF
 15330                           tosh	equ	0xFFE
 15331                           tosl	equ	0xFFD
 15332                           pclatu	equ	0xFFB
 15333                           pclath	equ	0xFFA
 15334                           tblptru	equ	0xFF8
 15335                           tblptrh	equ	0xFF7
 15336                           tblptrl	equ	0xFF6
 15337                           tablat	equ	0xFF5
 15338                           prodh	equ	0xFF4
 15339                           prodl	equ	0xFF3
 15340                           intcon	equ	0xFF2
 15341                           intcon2	equ	0xFF1
 15342                           indf0	equ	0xFEF
 15343                           postinc0	equ	0xFEE
 15344                           fsr0h	equ	0xFEA
 15345                           fsr0l	equ	0xFE9
 15346                           wreg	equ	0xFE8
 15347                           indf1	equ	0xFE7
 15348                           postdec1	equ	0xFE5
 15349                           fsr1h	equ	0xFE2
 15350                           fsr1l	equ	0xFE1
 15351                           indf2	equ	0xFDF
 15352                           postinc2	equ	0xFDE
 15353                           postdec2	equ	0xFDD
 15354                           fsr2h	equ	0xFDA
 15355                           fsr2l	equ	0xFD9
 15356                           status	equ	0xFD8
 15357                           
 15358 ;; *************** function _EUSART1_Receive_ISR *****************
 15359 ;; Defined at:
 15360 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 15361 ;; Parameters:    Size  Location     Type
 15362 ;;		None
 15363 ;; Auto vars:     Size  Location     Type
 15364 ;;		None
 15365 ;; Return value:  Size  Location     Type
 15366 ;;                  1    wreg      void 
 15367 ;; Registers used:
 15368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15369 ;; Tracked objects:
 15370 ;;		On entry : 0/0
 15371 ;;		On exit  : 0/0
 15372 ;;		Unchanged: 0/0
 15373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15374 ;;      Params:         0       0       0       0       0       0       0
 15375 ;;      Locals:         0       0       0       0       0       0       0
 15376 ;;      Temps:          0       0       0       0       0       0       0
 15377 ;;      Totals:         0       0       0       0       0       0       0
 15378 ;;Total ram usage:        0 bytes
 15379 ;; Hardware stack levels used:    1
 15380 ;; This function calls:
 15381 ;;		Nothing
 15382 ;; This function is called by:
 15383 ;;		_INTERRUPT_InterruptManager
 15384 ;; This function uses a non-reentrant model
 15385 ;;
 15386                           
 15387                           	psect	text83
 15388  0027F8                     __ptext83:
 15389                           	opt stack 0
 15390  0027F8                     _EUSART1_Receive_ISR:
 15391                           	opt stack 22
 15392                           
 15393                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;incstack = 0
 15397  0027F8  A2AB               	btfss	4011,1,c	;volatile
 15398  0027FA  D002               	goto	i2l803
 15399                           
 15400                           ;eusart1.c: 206: {
 15401                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 15402  0027FC  98AB               	bcf	4011,4,c	;volatile
 15403                           
 15404                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 15405  0027FE  88AB               	bsf	4011,4,c	;volatile
 15406  002800                     i2l803:
 15407                           
 15408                           ;eusart1.c: 210: }
 15409                           ;eusart1.c: 212: TXREG1 = RCREG1;
 15410  002800  CFAE FFAD          	movff	4014,4013	;volatile
 15411                           
 15412                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15413  002804  503A               	movf	_eusart1RxHead,w,c	;volatile
 15414  002806  0D01               	mullw	1
 15415  002808  0E46               	movlw	low _eusart1RxBuffer
 15416  00280A  24F3               	addwf	prodl,w,c
 15417  00280C  6ED9               	movwf	fsr2l,c
 15418  00280E  0E01               	movlw	high _eusart1RxBuffer
 15419  002810  20F4               	addwfc	prodh,w,c
 15420  002812  6EDA               	movwf	fsr2h,c
 15421  002814  CFAE FFDF          	movff	4014,indf2	;volatile
 15422  002818  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 15423                           
 15424                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15425  00281A  0E27               	movlw	39
 15426  00281C  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 15427  00281E  D002               	goto	i2l804
 15428                           
 15429                           ;eusart1.c: 217: {
 15430                           ;eusart1.c: 218: eusart1RxHead = 0;
 15431  002820  0E00               	movlw	0
 15432  002822  6E3A               	movwf	_eusart1RxHead,c	;volatile
 15433  002824                     i2l804:
 15434                           
 15435                           ;eusart1.c: 219: }
 15436                           ;eusart1.c: 220: eusart1RxCount++;
 15437  002824  0100               	movlb	0	; () banked
 15438  002826  2BC1               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 15439                           
 15440                           ; BSR set to: 0
 15441  002828  0012               	return		;funcret
 15442  00282A                     __end_of_EUSART1_Receive_ISR:
 15443                           	opt stack 0
 15444                           tosu	equ	0xFFF
 15445                           tosh	equ	0xFFE
 15446                           tosl	equ	0xFFD
 15447                           pclatu	equ	0xFFB
 15448                           pclath	equ	0xFFA
 15449                           tblptru	equ	0xFF8
 15450                           tblptrh	equ	0xFF7
 15451                           tblptrl	equ	0xFF6
 15452                           tablat	equ	0xFF5
 15453                           prodh	equ	0xFF4
 15454                           prodl	equ	0xFF3
 15455                           intcon	equ	0xFF2
 15456                           intcon2	equ	0xFF1
 15457                           indf0	equ	0xFEF
 15458                           postinc0	equ	0xFEE
 15459                           fsr0h	equ	0xFEA
 15460                           fsr0l	equ	0xFE9
 15461                           wreg	equ	0xFE8
 15462                           indf1	equ	0xFE7
 15463                           postdec1	equ	0xFE5
 15464                           fsr1h	equ	0xFE2
 15465                           fsr1l	equ	0xFE1
 15466                           indf2	equ	0xFDF
 15467                           postinc2	equ	0xFDE
 15468                           postdec2	equ	0xFDD
 15469                           fsr2h	equ	0xFDA
 15470                           fsr2l	equ	0xFD9
 15471                           status	equ	0xFD8
 15472                           tosu	equ	0xFFF
 15473                           tosh	equ	0xFFE
 15474                           tosl	equ	0xFFD
 15475                           pclatu	equ	0xFFB
 15476                           pclath	equ	0xFFA
 15477                           tblptru	equ	0xFF8
 15478                           tblptrh	equ	0xFF7
 15479                           tblptrl	equ	0xFF6
 15480                           tablat	equ	0xFF5
 15481                           prodh	equ	0xFF4
 15482                           prodl	equ	0xFF3
 15483                           intcon	equ	0xFF2
 15484                           intcon2	equ	0xFF1
 15485                           indf0	equ	0xFEF
 15486                           postinc0	equ	0xFEE
 15487                           fsr0h	equ	0xFEA
 15488                           fsr0l	equ	0xFE9
 15489                           wreg	equ	0xFE8
 15490                           indf1	equ	0xFE7
 15491                           postdec1	equ	0xFE5
 15492                           fsr1h	equ	0xFE2
 15493                           fsr1l	equ	0xFE1
 15494                           indf2	equ	0xFDF
 15495                           postinc2	equ	0xFDE
 15496                           postdec2	equ	0xFDD
 15497                           fsr2h	equ	0xFDA
 15498                           fsr2l	equ	0xFD9
 15499                           status	equ	0xFD8
 15500                           
 15501                           	psect	text84
 15502  000000                     __ptext84:
 15503                           	opt stack 0
 15504                           tosu	equ	0xFFF
 15505                           tosh	equ	0xFFE
 15506                           tosl	equ	0xFFD
 15507                           pclatu	equ	0xFFB
 15508                           pclath	equ	0xFFA
 15509                           tblptru	equ	0xFF8
 15510                           tblptrh	equ	0xFF7
 15511                           tblptrl	equ	0xFF6
 15512                           tablat	equ	0xFF5
 15513                           prodh	equ	0xFF4
 15514                           prodl	equ	0xFF3
 15515                           intcon	equ	0xFF2
 15516                           intcon2	equ	0xFF1
 15517                           indf0	equ	0xFEF
 15518                           postinc0	equ	0xFEE
 15519                           fsr0h	equ	0xFEA
 15520                           fsr0l	equ	0xFE9
 15521                           wreg	equ	0xFE8
 15522                           indf1	equ	0xFE7
 15523                           postdec1	equ	0xFE5
 15524                           fsr1h	equ	0xFE2
 15525                           fsr1l	equ	0xFE1
 15526                           indf2	equ	0xFDF
 15527                           postinc2	equ	0xFDE
 15528                           postdec2	equ	0xFDD
 15529                           fsr2h	equ	0xFDA
 15530                           fsr2l	equ	0xFD9
 15531                           status	equ	0xFD8
 15532                           
 15533                           	psect	rparam
 15534  0000                     tosu	equ	0xFFF
 15535                           tosh	equ	0xFFE
 15536                           tosl	equ	0xFFD
 15537                           pclatu	equ	0xFFB
 15538                           pclath	equ	0xFFA
 15539                           tblptru	equ	0xFF8
 15540                           tblptrh	equ	0xFF7
 15541                           tblptrl	equ	0xFF6
 15542                           tablat	equ	0xFF5
 15543                           prodh	equ	0xFF4
 15544                           prodl	equ	0xFF3
 15545                           intcon	equ	0xFF2
 15546                           intcon2	equ	0xFF1
 15547                           indf0	equ	0xFEF
 15548                           postinc0	equ	0xFEE
 15549                           fsr0h	equ	0xFEA
 15550                           fsr0l	equ	0xFE9
 15551                           wreg	equ	0xFE8
 15552                           indf1	equ	0xFE7
 15553                           postdec1	equ	0xFE5
 15554                           fsr1h	equ	0xFE2
 15555                           fsr1l	equ	0xFE1
 15556                           indf2	equ	0xFDF
 15557                           postinc2	equ	0xFDE
 15558                           postdec2	equ	0xFDD
 15559                           fsr2h	equ	0xFDA
 15560                           fsr2l	equ	0xFD9
 15561                           status	equ	0xFD8
 15562                           
 15563                           	psect	temp
 15564  000048                     btemp:
 15565                           	opt stack 0
 15566  000048                     	ds	1
 15567  0000                     int$flags	set	btemp
 15568  0000                     wtemp6	set	btemp+1
 15569                           tosu	equ	0xFFF
 15570                           tosh	equ	0xFFE
 15571                           tosl	equ	0xFFD
 15572                           pclatu	equ	0xFFB
 15573                           pclath	equ	0xFFA
 15574                           tblptru	equ	0xFF8
 15575                           tblptrh	equ	0xFF7
 15576                           tblptrl	equ	0xFF6
 15577                           tablat	equ	0xFF5
 15578                           prodh	equ	0xFF4
 15579                           prodl	equ	0xFF3
 15580                           intcon	equ	0xFF2
 15581                           intcon2	equ	0xFF1
 15582                           indf0	equ	0xFEF
 15583                           postinc0	equ	0xFEE
 15584                           fsr0h	equ	0xFEA
 15585                           fsr0l	equ	0xFE9
 15586                           wreg	equ	0xFE8
 15587                           indf1	equ	0xFE7
 15588                           postdec1	equ	0xFE5
 15589                           fsr1h	equ	0xFE2
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8


Data Sizes:
    Strings     1271
    Constant    175
    Data        20
    BSS         257
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     77     122
    BANK1           256      0     214
    BANK2           256     57      57
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_38(CODE[37]), STR_37(CODE[38]), STR_36(CODE[86]), STR_35(CODE[53]), 
		 -> STR_34(CODE[46]), STR_33(CODE[29]), STR_32(CODE[101]), STR_31(CODE[86]), 
		 -> STR_30(CODE[61]), STR_29(CODE[62]), STR_28(CODE[45]), STR_27(CODE[74]), 
		 -> STR_26(CODE[25]), STR_25(CODE[79]), STR_24(CODE[75]), STR_23(CODE[46]), 
		 -> STR_22(CODE[61]), STR_21(CODE[66]), STR_20(CODE[23]), STR_19(CODE[31]), 
		 -> STR_17(CODE[20]), STR_15(CODE[20]), STR_13(CODE[18]), STR_12(CODE[20]), 
		 -> STR_11(CODE[31]), STR_7(CODE[11]), STR_5(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_39(CODE[7]), STR_18(CODE[9]), STR_16(CODE[12]), STR_14(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK2[50]), SampleSingleChannel@dest(BANK2[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), STR_10(CODE[10]), STR_9(CODE[10]), 
		 -> STR_8(CODE[10]), readUartByte@dest(BANK2[50]), STR_6(CODE[9]), SampleSingleChannel@dest(BANK2[50]), 
		 -> STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[10]), 

    AdcSingleSample@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupTx->_AdcSingleSample
    _GroupRx->_AdcSingleSample
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _ZeroArray->_memset
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    ___llmod->___lldiv
    _SendUartSystemInitMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _UART_Write_Text->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->i2___lwmod

Critical Paths under _main in BANK0

    _main->_SampleSingleChannel
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _GroupCommon->_PrintHelpScreen
    _PrintHelpScreen->_sprintf
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_SampleSingleChannel

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  179285
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0   44089
                                             62 BANK0      3     3      0
                                              0 BANK2     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1729
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              3     1      2    9590
                                             59 BANK0      3     1      2
                    _AdcSingleSample
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              3     1      2    9590
                                             59 BANK0      3     1      2
                    _AdcSingleSample
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                      8     6      2    9528
                                             47 COMRAM     1     1      0
                                             21 BANK0      7     5      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  17    13      4    4621
                                             45 COMRAM     2     2      0
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1729
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   11719
                                             59 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   11555
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     772
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     772
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   10749
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  107307
                                             75 BANK0      2     2      0
                                              0 BANK2     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    6999
                                             35 COMRAM     7     1      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     852
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83533
                                             58 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26852
                                             40 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   45364
                                             49 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             40 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11674
                                             41 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     731
                                             18 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             33 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11935
                                             46 COMRAM     2     2      0
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5101
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             30 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             18 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4173
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3194
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    3342
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   16180
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    8289
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    7891
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    7891
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     367
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     367
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SetMcuRunTime
     ___llmod
       ___lldiv (ARG)
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _GroupTx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     39      39      10       22.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      D6       8       83.6%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     4D      7A       6       76.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D0       3        0.0%
DATA                 0      0     1D0       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 25 18:04:56 2018

              __end_of_keepAliveSignalLed 2A0E                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00D9                             ___altoft@sign 0030  
                                      l44 205C                                        l46 20A2  
                     __end_of_BlinkOkLeds 2102                           _SWSPI_send_word 19E8  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 007D                              ___ftadd@exp2 007C  
                             __CFG_LVP$ON 000000             SampleSingleChannel@_adcResult 0235  
                            ___ftadd@sign 007B                               ?_MEMORY_ISR 0001  
                                     l100 1088                                       l102 113A  
                                     l200 01D4                                       l105 1158  
                                     l201 021C                                       l114 13A6  
                                     l211 0284                                       l108 1164  
                                     l220 032E                                       l212 02A4  
                                     l109 1172                                       l221 02F8  
                                     l205 0230                                       l206 0270  
                                     l223 035C                                       l216 02D0  
                                     l217 02E6                                       l235 1F40  
                                     l219 02EC                                       l236 1F0C  
                                     l180 00F4                                       l182 010C  
                                     l191 0154                                       l520 1A86  
                                     l512 1A10                                       l192 01AE  
                                     l177 0396                                       l193 0162  
                                     l530 2234                                       l522 1A9C  
                                     l610 26D2                                       l178 00E8  
                                     l531 223E                                       l515 1A5C  
                                     l611 26AA                                       l195 016E  
                                     l187 0130                                       l620 26BE  
                                     l612 26B4                                       l444 0D7C  
                                     l196 017A                                       l509 1A02  
                                     l621 26C8                                       l197 0186  
                                     l446 0DE6                                       l198 01C6  
                                     l631 270E                                       l519 1A6E  
                                     l199 02B8                                       l544 2300  
                                     l528 224E                                       l536 21F6  
                                     l632 26E6                                       l545 22C4  
                                     l529 221A                                       l537 21C2  
                                     l641 26FA                                       l633 26F0  
                                     l562 22EC                                       l554 22D8  
                                     l546 22CE                                       l538 21DC  
                                     l642 2704                                       l563 22F6  
                                     l555 22E2                                       l539 21E6  
                                     l652 29CC                                       l573 2356  
                                     l653 29C4                                       l574 231A  
                                     l591 2342                                       l583 232E  
                                     l575 2324                                       l592 234C  
                                     l584 2338                                       l657 29C8  
                                     l780 251A                                       l791 267E  
                                     l792 26A2                                       l793 26A0  
                                     l778 24F4                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                          PLLInitialize@idx 002C  
                                     _exp 062E                                       _log 1180  
                                     _pow 0ED8                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
          ?_InitSystemApplicationManagers 0001                              ___ftdiv@cntr 0060  
                            ___ftdiv@sign 0065                                      l1001 2842  
                                    l1102 290C                                      l1103 2900  
                                    l1105 2906                                      l2004 297C  
                                    l2014 299A                                      l1311 0AD4  
                                    l1151 1B7C                                      l1304 0AAC  
                                    l1161 2164                                      l1305 0A22  
                                    l2009 28CC                                      l1162 2168  
                                    l2034 190A                                      l1410 1E3A  
                                    l2026 119C                                      l1163 216C  
                                    l2035 188C                                      l1315 0B20  
                                    l1307 0A6A                                      l1083 2634  
                                    l1164 219A                                      l2028 11BC  
                                    l1316 0B7A                                      l1308 0A4C  
                                    l1332 227A                                      l1076 2644  
                                    l1317 0B26                                      l1333 228E  
                                    l1158 219E                                      l1159 2160  
                                    l1520 2732                                      l1088 2422  
                                    l1409 1E46                                      l1097 2412  
                                    l1281 23FA                                      l1603 15D2  
                                    l1611 1D34                                      l1540 1ABE  
                                    l1620 1504                                      l1612 1D64  
                                    l1605 15FA                                      l1621 1536  
                                    l1542 1AFC                                      l1606 1638  
                                    l1622 1546                                      l1278 23D0  
                                    l1543 1AE6                                      l1607 165E  
                                    l1279 23E8                                      l1624 155E  
                                    l1545 1B24                                      l1625 156E  
                                    l1641 1460                                      l1297 0A02  
                                    l1546 1B1A                                      l1570 0BFC  
                                    l1618 14DC                                      l1650 14A0  
                                    l1642 1450                                      l1298 0A1C  
                                    l1539 1AC8                                      l1635 25C2  
                                    l1299 0A7E                                      l1732 23AA  
                                    l1629 2934                                      l1733 23B4  
                                    l1574 0C26                                      l1742 2596  
                                    l1647 1484                                      l1639 13E8  
                                    l1743 25A0                                      l1903 0860  
                                    l1584 0C82                                      l1648 1478  
                                    l1728 238A                                      l1752 2874  
                                    l1920 0984                                      l1680 1E04  
                                    l1593 0CC0                                      l1585 0C78  
                                    l1729 2382                                      l1753 2864  
                                    l1913 08DC                                      l1905 0878  
                                    l1594 0CB6                                      l1770 1046  
                                    l1738 257E                                      l1690 2032  
                                    l1922 09A8                                      l1914 08EC  
                                    l1579 0C8C                                      l1739 2576  
                                    l1923 09E4                                      l1907 08CC  
                                    l1675 1DC2                                      l1596 0CE4  
                                    l1764 0F22                                      l1916 0906  
                                    l1676 1DB6                                      l1597 0D00  
                                    l1765 0F12                                      l1685 1FFC  
                                    l1598 0D30                                      l1686 1FF0  
                                    l1767 0F3A                                      l1927 2A4A  
                                    l1919 0918                                      l1679 1DF6  
                                    l1696 2114                                      l1768 0FC0  
                                    l1697 2108                                      l1769 0F9E  
                                    l1689 2024                                      l1962 0648  
                                    l1964 0680                                      l5173 1A2A  
                                    l6221 1D90                                      l1973 16CE  
                                    l1965 06B8                                      l1982 1C9C  
                                    l1974 16C0                                      l1990 19B0  
                                    l1966 06E8                                      l1991 19A4  
                                    l1967 0812                                      l1976 16E8  
                                    l1968 07E8                                      l5169 1A1C  
                                    l1977 1764                                      l1986 193C  
                                    l1988 1982                                      l5463 0D6C  
                                    l6343 266C                                      l1999 28A6  
                                    l5553 20AE                                      l5473 0DC4  
                                    l6249 2864                                      ?_exp 0091  
                                    l5477 0DD6                                      l7157 07E8  
                                    ?_log 0088                                      l5487 0E2E  
                                    l6713 1B6C                                      l6731 1BB4  
                                    l6777 0AD8                                      l6987 204C  
                                    ?_pow 009A                                      STR_1 7FD1  
                                    STR_2 7FD1                                      STR_3 7FD1  
                                    STR_4 7FD1                                      STR_5 7FFA  
                                    STR_6 7FE4                                      STR_7 7FC6  
                                    STR_8 7FD1                                      STR_9 7FD1  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u5050 0DC4                                      u5130 2A00  
                                    u5070 0E2E                                      u4280 2192  
                                    u6200 1AB0                                      u7000 1CC4  
                                    u7010 1F38                                      u4700 19F8  
                                    u7020 1F6C                                      u5148 2A02  
                                    u4285 2188                                      u6310 2898  
                                    u6240 1B2E                                      u7008 1CC6  
                                    u6400 0868                                      u7017 1F2E  
                                    u7130 0B04                                      u7027 1F62  
                                    u4740 1A50                                      u7060 1BB4  
                                    u7150 0B82                                      u6430 08A2  
                                    u4760 1A76                                      u7160 0B9A  
                                    u7330 16DA                                      u6290 28C8  
                                    u6450 08B2                                      u7171 15B8  
                                    u6620 0C18                                      u7260 1DC6  
                                    u4790 1A92                                      u7191 15E2  
                                    u6551 0BBA                                      u6720 0CC8  
                                    u7440 112C                                      u6561 0BCE  
                                    u8217 2064                                      u6650 0C56  
                                    u7370 195C                                      u7290 2000  
                                    u8227 2074                                      u8237 2084  
                                    u6590 0BEE                                      u6910 148A  
                                    u7550 06C2                                      u7470 1152  
                                    u8247 2094                                      u7560 06C4  
                                    u6761 14C4                                      u8257 1396  
                                    u6690 0C94                                      u7378 1960  
                                    u7650 0F88                                      u7810 020E  
                                    u8267 20D4                                      u6851 13CC  
                                    u6940 238E                                      u8277 20EE  
                                    u6781 14EC                                      u6870 1406  
                                    u6970 2582                                      u7690 12BE  
                                    u6875 13FE                                      u7870 0262  
                                    u7928 0370                                      u7929 038E  
                                    u7890 0296                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 266A  
                 ??_InitAdcApplicationMgr 0018                                      _main 23BE  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 2AA2  
                         __end_of_DacInit 1FDE                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0091                                      log@x 0088  
               SampleSingleChannel@adcRes 0237                          ?_ClearMcuRunTime 0001  
                                    pow@x 009A                                      pow@y 009D  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                           _adcSampleMode 003D               __end_of_SampleSingleChannel 13BA  
                         GroupCommon@data 009B                              ___ftmul@cntr 0070  
                            ___param_bank 000000                              ___ftmul@sign 0071  
                 __end_of_UART_Write_Text 1F74                           __end_of_GroupRx 266A  
                         __end_of_GroupTx 2454                              ___fttol@exp1 0080  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 007C                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 27F8            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 2A80                SWSPI_DAC_send_bits@phrType 001C  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 0D56                                     STR_10 7FD1  
                                   STR_11 7F00                                     STR_12 7F6C  
                                   STR_20 7F55                                     STR_13 7FA8  
                                   STR_21 7CFD                                     STR_14 7FF4  
                                   STR_30 7DBA                                     STR_22 7D7D  
                                   STR_15 7F94                                     STR_23 7E5A  
                                   STR_31 7B6D                                     STR_16 7FBA  
                                   STR_24 7C68                                     STR_32 7B08  
                                   STR_17 7F80                                     STR_33 7F1F  
                                   STR_25 7C19           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7FDB                                     STR_26 7F3C  
                                   STR_34 7E2C                                     STR_19 7F00  
                                   STR_35 7DF7                                     STR_27 7CB3  
                                   STR_28 7E88                                     STR_36 7BC3  
                                   STR_37 7EB5                                     STR_29 7D3F  
                                   STR_38 7EDB                                     STR_39 7FED  
                         __end_of___ftdiv 1690                           __end_of___ftneg 2942  
                         __end_of___lldiv 1E16                           __end_of___ftmul 15A8  
                                   _T0CON 000FD5                           __end_of___llmod 2044  
                         __end_of___ftsub 25EC                           __end_of___fttol 14B2  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwdiv 23BE  
                         __end_of___lwmod 25AA                                     i2l803 2800  
                                   i2l731 007A                                     i2l804 2824  
                                   i2l733 0086                                     i2l726 005E  
                                   i2l735 0090                                     i2l728 006A  
                                   i2l797 2782                                     i2l957 1C12  
                                   i2l798 277E                                     i2l958 1C34  
                                   i2l959 1C56                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 2212         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1BE2  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 2756  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 1C74  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 2AAA  
                                   _make8 215E                           __end_of_dpowers 7ACB  
          __size_of_SWSPI_Synth_send_bits 0058                                     _count 00B7  
                                   _floor 1690                                     _ldexp 1922  
                                   _frexp 1C74                                     _errno 00B1  
           __end_of_SWSPI_Synth_send_bits 2212                           __end_of_isalpha 28AE  
                         __end_of_isdigit 2984                                     _group 00BF  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                           ??_GroupCommon 0031                           __end_of_isspace 28D4  
                          ?_EUSART1_Write 0001                           __end_of_isupper 29A2  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00A7                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 0BA8                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 2A4E            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 0097                      ?_SWSPI_DAC_send_bits 001A  
                      __size_ofi2___lwmod 0042                               ldexp@newexp 008B  
                 __end_of_SWSPI_send_word 1AA0                               _BlinkOkLeds 20A4  
                         __initialization 1E90                               log@exponent 008B  
              __end_of_EUSART1_Initialize 27C4                              __end_of_main 240C  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0031  
                           ___fttol@sign1 007B                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00C4                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 2AA6                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0089  
                                  ?_ldexp 0088                                    ?_frexp 0018  
                        __end_of___altoft 1E90                          ___llmod@dividend 0025  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        __end_of___awtoft 2756                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 1B4E                          __end_of___lltoft 215E  
                                  i2l1742 261A                            __CFG_WDTEN$OFF 000000  
                                  i2l1743 2624                                    i2l1738 2602  
                                  i2l1739 25FA                                    _TABLAT 000FF5  
                                  _RCREG1 000FAE                          __end_of___lwtoft 2966  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 29C0                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 291E  
                               ??_GroupRx 0031                                 ??_GroupTx 0031  
                          __CFG_XINST$OFF 000000                               GroupRx@data 009B  
                             GroupTx@data 009B                                    _cState 00C0  
                                  ___ftge 1D04                                    ___lmul 226A  
               SWSPI_Synth_send_bits@data 001A                                    ___wmul 28D4  
                               ??___ftadd 0078                            __CFG_STVREN$ON 000000  
                        ?_UART_Write_Text 0019                                 ??___ftdiv 0029  
                               ??___ftneg 001B                                 ??___lldiv 0020  
                               ??___ftmul 002C                     __end_of_PLLInitialize 0ED8  
                               ??___llmod 002D                                 ??___ftsub 002F  
                               ??___fttol 0076                                 ??___lwdiv 001C  
                               ??___lwmod 0023            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                    AdcSingleSample@cType 0077                          ?_TMR0_Initialize 0001  
                                  _memset 285A                                    clear_0 1ED6  
                                  clear_1 1EE2                                    clear_2 1EEE  
                                  _strtol 0820                                    floor@i 008C  
                   __end_of_SwSpi_Clk_Pin 236C                                    floor@x 0089  
                   ___ftmul@f3_as_product 006D                  SWSPI_DAC_send_bits@count 001B  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                          __end_of_testLeds 20A4  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 184C  
                            __mediumconst 7A58                                 ??_isspace 0018  
                       __end_ofi2___lwmod 262E                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 009E                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0044  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 002A  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0100                          __end_ofexp@coeff 7AED  
                       _SYSTEM_Initialize 29DC                          __end_oflog@coeff 7B08  
                              __accesstop 0060                   __end_of__initialization 1EF4  
                              ___altoft@c 0081                             ZeroArray@size 0022  
                              ___ftadd@f1 0072                                ___ftadd@f2 0075  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 0085  
                           ___rparam_used 000001                                ___ftdiv@f1 0023  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0061  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___ftmul@f1 0066                                ___ftmul@f2 0069  
                        ?_SWSPI_send_word 0021                                ___ftsub@f1 007E  
                              ___ftsub@f2 0081                                ___fttol@f1 0072  
                      i2___lwmod@dividend 0001                            __pcstackCOMRAM 0001  
                            __pidataBANK0 2A62                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 21BA                             __end_of_floor 1772  
                           __end_of_ldexp 19E8                             __end_of_frexp 1D04  
                  _SwSpi_Set_Synth_Le_Pin 26E2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2524                              ??_MEMORY_ISR 0001  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0035  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                        _keepAliveSignalLed 29F6  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 282A  
                __size_of_AdcSingleSample 012C                                   ??_make8 001D  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 008D                                   ??_frexp 001D  
               __end_of_SYSTEM_Initialize 29F6                             _eusart1RxHead 003A  
                     PrintHelpScreen@dest 0069                             _eusart1TxHead 003C  
                           _eusart1RxTail 0039                                __pbssBANK0 00AD  
                              __pbssBANK1 0100                               _GroupCommon 28FA  
                           _eusart1TxTail 003B                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7ACB                                _channelNum 0037  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0006  
           __end_of_InitAdcApplicationMgr 2A9A                        __end_of_MEMORY_ISR 2AAE  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 2A94  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 29C0  
                               ?___altoft 0081                                   ?_memset 0018  
                          ___lmul@product 0020                                 ?___awtoft 0020  
                               ?___ftpack 0018                                 ?___lltoft 0020  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0020  
                                 ?_strtol 0024                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 0232  
                 SampleSingleChannel@dest 0200                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 1F74  
                   GetIntFromUartData@idx 0073                            _SwSpi_Data_Pin 22C0  
                           _SetMcuRunTime 2524                        _GetIntFromUartData 1B4E  
                         __CFG_PWRTEN$OFF 000000                                   _GroupRx 262E  
                                 _GroupTx 240C                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                               ?_testLeds 0001                      PLLInitialize@idx_591 002E  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 0BA8  
                                 ___ftdiv 15A8                      __end_of_readUartByte 03CC  
                                 ___ftneg 291E                                   ___lldiv 1D94  
                         __size_of___wmul 0026                                   ___ftmul 14B2  
                                 ___llmod 1FDE                                   ___ftsub 25AA  
                                 ___fttol 13BA                                   ___lwdiv 236C  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 2568  
                              ??___altoft 0085                SWSPI_Synth_send_bits@count 001B  
                   _mcuRunTimeIn5SecTicks 00AD                                   _crcCalc 00BC  
                                 _channel 00C2                                   __pcinit 1E90  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 1922                           __size_of_memset 002C  
                                 __ramtop 0600              __size_of_SampleSingleChannel 0118  
                              ??___lltoft 0024                                   __ptext0 23BE  
                                 __ptext1 00E0                                   __ptext2 249C  
                                 __ptext3 28FA                                   __ptext4 262E  
                                 __ptext5 240C                                   __ptext6 1054  
                                 __ptext7 1D94                                   __ptext8 1B4E  
                                 __ptext9 0820                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                           __size_of_strtol 01D6  
                                 _dpowers 7AC1                     _OSCILLATOR_Initialize 2A72  
                                 _isalpha 2886                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 2966  
                            __size_of_pow 017C               ??_SendUartSystemInitMessage 002B  
                      _EUSART1_Initialize 278E                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 28AE                                   _isupper 2984  
                   AdcSingleSample@retNum 0078                                   _request 00BE  
                    ??_GetIntFromUartData 002E                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 09F6  
                  __end_of_SwSpi_Data_Pin 2316                                   _toupper 2A3A  
                    end_of_initialization 1EF4                                   exp@sign 0099  
                     ?_EUSART1_Initialize 0001                     _SWSPI_Synth_send_bits 21BA  
              __end_of_TEST_PLL_REGISTERS 7A8D                  __size_of_PrintHelpScreen 0262  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7A58  
                       ??_AdcSingleSample 0030                           ___lldiv@divisor 001C  
                              _numSamples 00B5                      __end_of_SetMcuSystem 2A8A  
                                 pow@sign 00A6                           ___lldiv@counter 0024  
                       readUartByte@chRec 0234                                ??_testLeds 0018  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 01C2  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 7AC1                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 249C                               testLeds@idx 0019  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 2A3A  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 2A24  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 2A8A  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 29DC  
                            strtol@endptr 0026                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
             __end_of_SWSPI_DAC_send_bits 226A                                 i2___lwmod 25EC  
           SendUartSystemInitMessage@dest 0069                               ___ftdiv@exp 0064  
                            _EUSART1_Read 24E0                 _SendUartSystemInitMessage 1772  
                             ___ftmul@exp 006C                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                            _needToSample 00C3              __end_of_INTERRUPT_Initialize 2AA2  
                          __end_of___ftge 1D94                            __end_of___lmul 22C0  
                      GroupCommon@request 009D                            __end_of___wmul 28FA  
                           __pidataCOMRAM 2A9A                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 2A0E                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 2886                                floor@expon 008F  
                __size_of_UART_Write_Text 0072                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 09F6                       start_initialization 1E90  
                              eval_poly@d 0081                                eval_poly@n 0083  
                              eval_poly@x 007E                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0088  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0820                               __end_of_log 12A2  
                             __end_of_pow 1054                    ?_SWSPI_Synth_send_bits 001A  
                              ?i2___lwmod 0001                           ??_SetMcuRunTime 002E  
                            ?_GroupCommon 009B                     __end_of_EUSART1_Write 26A6  
                  __size_of_PLLInitialize 0182                                frexp@value 0018  
                         ___llmod@divisor 0029                           ___llmod@counter 002D  
                __size_of_PIN_MANAGER_IOC 0004                     __size_of_readUartByte 02EC  
                  __size_of_SwSpi_Clk_Pin 0056            __end_of_SwSpi_Set_Synth_Le_Pin 271E  
                       ??_PrintHelpScreen 002B                                  ??___ftge 001E  
                                ??___lmul 0020                                  ??___wmul 001C  
                     AdcSingleSample@data 0075                      __size_of_BlinkOkLeds 005E  
                  __end_of_ADC_Initialize 2A24                               __pdataBANK0 00C7  
                 SWSPI_DAC_send_bits@data 001A                            GroupRx@request 009D  
                                ??_memset 001E                  __size_of_SWSPI_send_word 00B8  
                                ??_strtol 002A                            _eusart1RxCount 00C1  
                       __size_of___altoft 007A                                 _ZeroArray 29A2  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 009D                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK2 0200                              _isalpha$2608 001C  
                       i2___lwmod@divisor 0003                         i2___lwmod@counter 0005  
                            _isdigit$2611 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 00E0  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 26A6  
                     _SampleSingleChannel 12A2              __size_of_EUSART1_Receive_ISR 0032  
                             sprintf@flag 0060                               sprintf@prec 0061  
                   _TMR0_InterruptHandler 00D7                                 __pnvBANK0 00D7  
                __size_of_TMR0_StartTimer 0004                                  ?_GroupRx 009B  
                                ?_GroupTx 009B                          ___lwdiv@dividend 0018  
                  _PIN_MANAGER_Initialize 2454                     _InitAdcApplicationMgr 2A94  
                               __pintcode 0008                             __pmediumconst 7A58  
                                ?___ftadd 0072                                  ?___ftdiv 0023  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0066                                  ?___llmod 0025  
                                ?___ftsub 007E                                  ?___fttol 0072  
                                ?___lwdiv 0018                                  ?___lwmod 001F  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 0D56               __size_of_keepAliveSignalLed 0018  
                    ?_SampleSingleChannel 0001              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 2316  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 184C                           _TimerOneSecFlag 00C6  
                                ?_isspace 0001                           _AdcSingleSample 1054  
                            _SetMcuSystem 2A80                                  ?_isupper 0001  
                        ___lwdiv@quotient 001D                            __size_of_make8 005C  
                                ?_sprintf 0024                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                                ?_toupper 0001                               ??i2___lwmod 0005  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 2A9E  
                       ??_TMR0_Initialize 001A                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                                  i2u509_40 2606  
                        readUartByte@dest 0200                       SWSPI_send_word@data 0021  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 1BE2  
                      _TEST_PLL_REGISTERS 7A59                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                     ??_SampleSingleChannel 00AB  
      __size_of_SendUartSystemInitMessage 00DA                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7ACF                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 007E                        _PLL_INIT_REGISTERS 7A8D  
                            _isspace$2614 0019                         ??_SWSPI_send_word 0026  
             __size_of_GetIntFromUartData 0094                         ___lmul@multiplier 0018  
                             _INTCON2bits 000FF1                                 copy_data0 1EA4  
                               copy_data1 1EC4                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                  _SampleSingleChannel$2938 0232  
                   EUSART1_Read@readValue 0019                      __size_of_GroupCommon 0024  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                        __size_of_GroupRx 003C                          __size_of_GroupTx 0048  
                             _readAddress 00D3                                  __Lrparam 0000  
                       _ADC_GetConversion 282A                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 2A4E                         __CFG_P2BMX$PORTD2 000000  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 1E16                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwdiv 0052                   __end_of_AdcSingleSample 1180  
                        __size_of___lwmod 0042                                  ___awtoft 271E  
                                ___ftpack 1AA0                          _numOfReadSamples 003E  
                                ___lltoft 2102                                  ___lwtoft 2942  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                                _exp$2941 0094                              _isupper$2617 0019  
                              sprintf@val 0066                                  _dataSize 00BD  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 00BB                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 001B                           ___lwdiv@divisor 001A  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                         ___lwdiv@counter 001C                                  __ptext10 2A3A  
                                __ptext11 28AE                                  __ptext20 24E0  
                                __ptext12 2966                                  __ptext21 29F6  
                                __ptext13 2886                                  __ptext30 2A0E  
                                __ptext22 2A80                                  __ptext14 2984  
                                __ptext31 2524                                  __ptext23 29DC  
                                __ptext15 226A                                  __ptext40 062E  
                                __ptext32 1FDE                                  __ptext24 27C4  
                                __ptext16 29A2                                  __ptext41 1922  
                                __ptext33 1772                                  __ptext25 2A8A  
                                __ptext17 285A                                  __ptext50 25AA  
                                __ptext42 1690                                  __ptext34 12A2  
                                __ptext26 2454                                  __ptext18 2044  
                                __ptext51 0BA8                                  __ptext43 1C74  
                                __ptext35 09F6                                  __ptext27 2A72  
                                __ptext19 03CC                                  __ptext60 282A  
                                __ptext52 291E                                  __ptext44 13BA  
                                __ptext36 2568                                  __ptext28 2A9E  
                                __ptext61 2A24                                  __ptext53 15A8  
                                __ptext45 1D04                                  __ptext37 236C  
                                __ptext29 278E                                  __ptext70 29C0  
                                __ptext62 2AA2                                  __ptext54 271E  
                                __ptext46 1E16                                  __ptext38 0ED8  
                                __ptext71 21BA                                  __ptext63 0D56  
                                __ptext55 2102                                  __ptext47 184C  
                                __ptext39 1180                                  __ptext80 2AA6  
                                __ptext72 2212                                  __ptext64 26A6  
                                __ptext56 2942                                  __ptext48 28D4  
                                __ptext81 2AAA                                  __ptext73 22C0  
                                __ptext65 2A94                                  __ptext57 1AA0  
                                __ptext49 14B2                                  __ptext82 2756  
                                __ptext74 2316                                  __ptext66 1F74  
                                __ptext58 1F02                                  __ptext83 27F8  
                                __ptext75 2A4E                                  __ptext67 19E8  
                                __ptext59 266A                                  __ptext84 0000  
                                __ptext76 20A4                                  __ptext68 215E  
                                __ptext69 26E2                                  __ptext78 1BE2  
                                __ptext79 25EC                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 001C                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$2940 00A3                                  _pow$2939 00A0  
                     GetIntFromUartData@c 0072                           _PrintHelpScreen 03CC  
                        __size_of_sprintf 01B2                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 004E  
                                _msgCount 00BA              _TMR0_DefaultInterruptHandler 000000  
               __end_of_ADC_GetConversion 285A              __size_of_SWSPI_DAC_send_bits 0058  
                      SWSPI_send_word@idx 0027                               _groupsArray 00C7  
                         ??_PLLInitialize 002A                                  _testLeds 2044  
                                int$flags 0048                                strtol@base 0028  
                              strtol@sign 0060        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 27F8                  __end_of_SwSpi_Set_CE_Pin 26E2  
             __end_of_InitRxMessageParams 24E0                                  exp@coeff 7ACF  
                              _MEMORY_ISR 2AAA                                  log@coeff 7AED  
                  SWSPI_send_word@phrType 0029                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00B3                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  intlevel2 0000  
                               sprintf@ap 0062                                 sprintf@cp 0064  
                               sprintf@sp 0024                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 2568                          ___lwmod@dividend 001F  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 2A62  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 278E                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                         _TimerSamplingFlag 00C5  
                           _isReWriteDone 00B9                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                        ?_AdcSingleSample 0075                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 1F02  
                                sprintf@c 0068                                  sprintf@f 0026  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0021  
                         _TMR0_Initialize 27C4                   __end_of_PrintHelpScreen 062E  
                         ___lwmod@counter 0023                                  toupper@c 0018  
                       __CFG_T3CMX$PORTC0 000000                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 249C                          UART_Write_Text@i 001D  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 2AA6                __size_of_ADC_GetConversion 0030  
