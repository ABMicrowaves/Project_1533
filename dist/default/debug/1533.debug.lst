

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 18:03:03 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F45K22 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   157  0000                     
   158                           	psect	idataCOMRAM
   159  0031F0                     __pidataCOMRAM:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _writeAddress
   163  0031F0  4000               	dw	16384
   164  0031F2  0000               	dw	0
   165                           
   166                           	psect	idataBANK0
   167  0031F4                     __pidataBANK0:
   168                           	opt stack 0
   169                           
   170                           ;initializer for _readAddress
   171  0031F4  4000               	dw	16384
   172  0031F6  0000               	dw	0
   173                           
   174                           	psect	idataBANK1
   175  0031C0                     __pidataBANK1:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _groupsArray
   179  0031C0  7E                 	db	low _GroupRx
   180  0031C1  2D                 	db	high _GroupRx
   181  0031C2  A6                 	db	low _GroupTx
   182  0031C3  2A                 	db	high _GroupTx
   183  0031C4  04                 	db	low _GroupCommon
   184  0031C5  30                 	db	high _GroupCommon
   185  0031C6  00                 	db	0
   186  0031C7  00                 	db	0
   187  0031C8  00                 	db	0
   188  0031C9  00                 	db	0
   189  0031CA  00                 	db	0
   190  0031CB  00                 	db	0
   191                           
   192                           	psect	mediumconst
   193  007982                     __pmediumconst:
   194                           	opt stack 0
   195  007982  00                 	db	0
   196  007983                     _TEST_PLL_REGISTERS:
   197                           	opt stack 0
   198  007983  041C               	dw	1052
   199  007985  0001               	dw	1
   200  007987  300B               	dw	12299
   201  007989  0061               	dw	97
   202  00798B  26BA               	dw	9914
   203  00798D  00C0               	dw	192
   204  00798F  FCC9               	dw	64713
   205  007991  1A19               	dw	6681
   206  007993  0428               	dw	1064
   207  007995  102D               	dw	4141
   208  007997  00E7               	dw	231
   209  007999  1200               	dw	4608
   210  00799B  6076               	dw	24694
   211  00799D  3505               	dw	13573
   212  00799F  0025               	dw	37
   213  0079A1  0080               	dw	128
   214  0079A3  8B84               	dw	35716
   215  0079A5  3200               	dw	12800
   216  0079A7  0003               	dw	3
   217  0079A9  0000               	dw	0
   218  0079AB  0032               	dw	50
   219  0079AD  0008               	dw	8
   220  0079AF  AAA1               	dw	43681
   221  0079B1  01AA               	dw	426
   222  0079B3  0EDA               	dw	3802
   223  0079B5  0003               	dw	3
   224  0079B7                     __end_of_TEST_PLL_REGISTERS:
   225                           	opt stack 0
   226  0079B7                     _PLL_INIT_REGISTERS:
   227                           	opt stack 0
   228  0079B7  041C               	dw	1052
   229  0079B9  0001               	dw	1
   230  0079BB  300B               	dw	12299
   231  0079BD  0061               	dw	97
   232  0079BF  323A               	dw	12858
   233  0079C1  00C0               	dw	192
   234  0079C3  BCC9               	dw	48329
   235  0079C5  2221               	dw	8737
   236  0079C7  0428               	dw	1064
   237  0079C9  102D               	dw	4141
   238  0079CB  00E7               	dw	231
   239  0079CD  1200               	dw	4608
   240  0079CF  2076               	dw	8310
   241  0079D1  3501               	dw	13569
   242  0079D3  0025               	dw	37
   243  0079D5  0080               	dw	128
   244  0079D7  9B84               	dw	39812
   245  0079D9  3400               	dw	13312
   246  0079DB  0003               	dw	3
   247  0079DD  0000               	dw	0
   248  0079DF  0012               	dw	18
   249  0079E1  0000               	dw	0
   250  0079E3  0001               	dw	1
   251  0079E5  0600               	dw	1536
   252  0079E7  0340               	dw	832
   253  0079E9  0020               	dw	32
   254  0079EB                     __end_of_PLL_INIT_REGISTERS:
   255                           	opt stack 0
   256  0079EB                     _dpowers:
   257                           	opt stack 0
   258  0079EB  0001               	dw	1
   259  0079ED  000A               	dw	10
   260  0079EF  0064               	dw	100
   261  0079F1  03E8               	dw	1000
   262  0079F3  2710               	dw	10000
   263  0079F5                     __end_of_dpowers:
   264                           	opt stack 0
   265  0079F5                     _DAC_DEFAULT_INIT_VALUES:
   266                           	opt stack 0
   267  0079F5  2344               	dw	9028
   268  0079F7  6344               	dw	25412
   269  0079F9  A344               	dw	41796
   270  0079FB  E344               	dw	58180
   271  0079FD                     __end_of_DAC_DEFAULT_INIT_VALUES:
   272                           	opt stack 0
   273  0079FD                     _DAC_ADDRES:
   274                           	opt stack 0
   275  0079FD  02                 	db	2
   276  0079FE  04                 	db	4
   277  0079FF  06                 	db	6
   278  007A00  08                 	db	8
   279  007A01                     __end_of_DAC_ADDRES:
   280                           	opt stack 0
   281  007A01                     _channelArr:
   282                           	opt stack 0
   283  007A01  04                 	db	4
   284  007A02  06                 	db	6
   285  007A03  05                 	db	5
   286  007A04  07                 	db	7
   287  007A05                     __end_of_channelArr:
   288                           	opt stack 0
   289  007A05                     exp@coeff:
   290                           	opt stack 0
   291  007A05  00                 	db	0
   292  007A06  80                 	db	128
   293  007A07  3F                 	db	63
   294  007A08  72                 	db	114
   295  007A09  31                 	db	49
   296  007A0A  3F                 	db	63
   297  007A0B  FE                 	db	254
   298  007A0C  75                 	db	117
   299  007A0D  3E                 	db	62
   300  007A0E  58                 	db	88
   301  007A0F  63                 	db	99
   302  007A10  3D                 	db	61
   303  007A11  95                 	db	149
   304  007A12  1D                 	db	29
   305  007A13  3C                 	db	60
   306  007A14  C5                 	db	197
   307  007A15  AE                 	db	174
   308  007A16  3A                 	db	58
   309  007A17  79                 	db	121
   310  007A18  21                 	db	33
   311  007A19  39                 	db	57
   312  007A1A  94                 	db	148
   313  007A1B  80                 	db	128
   314  007A1C  37                 	db	55
   315  007A1D  93                 	db	147
   316  007A1E  A7                 	db	167
   317  007A1F  35                 	db	53
   318  007A20  56                 	db	86
   319  007A21  15                 	db	21
   320  007A22  34                 	db	52
   321  007A23                     __end_ofexp@coeff:
   322                           	opt stack 0
   323  007A23                     log@coeff:
   324                           	opt stack 0
   325  007A23  00                 	db	0
   326  007A24  00                 	db	0
   327  007A25  00                 	db	0
   328  007A26  00                 	db	0
   329  007A27  80                 	db	128
   330  007A28  3F                 	db	63
   331  007A29  F0                 	db	240
   332  007A2A  FF                 	db	255
   333  007A2B  BE                 	db	190
   334  007A2C  E2                 	db	226
   335  007A2D  A9                 	db	169
   336  007A2E  3E                 	db	62
   337  007A2F  83                 	db	131
   338  007A30  76                 	db	118
   339  007A31  BE                 	db	190
   340  007A32  AE                 	db	174
   341  007A33  2B                 	db	43
   342  007A34  3E                 	db	62
   343  007A35  3C                 	db	60
   344  007A36  C3                 	db	195
   345  007A37  BD                 	db	189
   346  007A38  D2                 	db	210
   347  007A39  13                 	db	19
   348  007A3A  3D                 	db	61
   349  007A3B  78                 	db	120
   350  007A3C  D3                 	db	211
   351  007A3D  BB                 	db	187
   352  007A3E                     __end_oflog@coeff:
   353                           	opt stack 0
   354  007A3E                     STR_36:
   355                           
   356                           ; BSR set to: 1
   357  007A3E  24                 	db	36
   358  007A3F  52                 	db	82	;'R'
   359  007A40  43                 	db	67	;'C'
   360  007A41  50                 	db	80	;'P'
   361  007A42  20                 	db	32
   362  007A43  3C                 	db	60	;'<'
   363  007A44  58                 	db	88	;'X'
   364  007A45  3E                 	db	62	;'>'
   365  007A46  3C                 	db	60	;'<'
   366  007A47  63                 	db	99	;'c'
   367  007A48  72                 	db	114	;'r'
   368  007A49  3E                 	db	62	;'>'
   369  007A4A  20                 	db	32
   370  007A4B  20                 	db	32
   371  007A4C  20                 	db	32
   372  007A4D  20                 	db	32
   373  007A4E  20                 	db	32
   374  007A4F  53                 	db	83	;'S'
   375  007A50  65                 	db	101	;'e'
   376  007A51  74                 	db	116	;'t'
   377  007A52  20                 	db	32
   378  007A53  43                 	db	67	;'C'
   379  007A54  6F                 	db	111	;'o'
   380  007A55  6D                 	db	109	;'m'
   381  007A56  70                 	db	112	;'p'
   382  007A57  72                 	db	114	;'r'
   383  007A58  65                 	db	101	;'e'
   384  007A59  73                 	db	115	;'s'
   385  007A5A  73                 	db	115	;'s'
   386  007A5B  69                 	db	105	;'i'
   387  007A5C  6F                 	db	111	;'o'
   388  007A5D  6E                 	db	110	;'n'
   389  007A5E  20                 	db	32
   390  007A5F  6F                 	db	111	;'o'
   391  007A60  70                 	db	112	;'p'
   392  007A61  65                 	db	101	;'e'
   393  007A62  72                 	db	114	;'r'
   394  007A63  61                 	db	97	;'a'
   395  007A64  74                 	db	116	;'t'
   396  007A65  69                 	db	105	;'i'
   397  007A66  6F                 	db	111	;'o'
   398  007A67  6E                 	db	110	;'n'
   399  007A68  20                 	db	32
   400  007A69  6D                 	db	109	;'m'
   401  007A6A  6F                 	db	111	;'o'
   402  007A6B  64                 	db	100	;'d'
   403  007A6C  65                 	db	101	;'e'
   404  007A6D  20                 	db	32
   405  007A6E  61                 	db	97	;'a'
   406  007A6F  74                 	db	116	;'t'
   407  007A70  20                 	db	32
   408  007A71  52                 	db	82	;'R'
   409  007A72  58                 	db	88	;'X'
   410  007A73  20                 	db	32
   411  007A74  73                 	db	115	;'s'
   412  007A75  79                 	db	121	;'y'
   413  007A76  73                 	db	115	;'s'
   414  007A77  74                 	db	116	;'t'
   415  007A78  65                 	db	101	;'e'
   416  007A79  6D                 	db	109	;'m'
   417  007A7A  3A                 	db	58	;':'
   418  007A7B  20                 	db	32
   419  007A7C  41                 	db	65	;'A'
   420  007A7D  75                 	db	117	;'u'
   421  007A7E  74                 	db	116	;'t'
   422  007A7F  6F                 	db	111	;'o'
   423  007A80  6D                 	db	109	;'m'
   424  007A81  61                 	db	97	;'a'
   425  007A82  74                 	db	116	;'t'
   426  007A83  69                 	db	105	;'i'
   427  007A84  63                 	db	99	;'c'
   428  007A85  5B                 	db	91	;'['
   429  007A86  31                 	db	49	;'1'
   430  007A87  5D                 	db	93	;']'
   431  007A88  20                 	db	32
   432  007A89  4D                 	db	77	;'M'
   433  007A8A  61                 	db	97	;'a'
   434  007A8B  6E                 	db	110	;'n'
   435  007A8C  75                 	db	117	;'u'
   436  007A8D  61                 	db	97	;'a'
   437  007A8E  6C                 	db	108	;'l'
   438  007A8F  5B                 	db	91	;'['
   439  007A90  30                 	db	48	;'0'
   440  007A91  5D                 	db	93	;']'
   441  007A92  20                 	db	32
   442  007A93  5B                 	db	91	;'['
   443  007A94  44                 	db	68	;'D'
   444  007A95  65                 	db	101	;'e'
   445  007A96  66                 	db	102	;'f'
   446  007A97  61                 	db	97	;'a'
   447  007A98  75                 	db	117	;'u'
   448  007A99  6C                 	db	108	;'l'
   449  007A9A  74                 	db	116	;'t'
   450  007A9B  20                 	db	32
   451  007A9C  3D                 	db	61	;'='
   452  007A9D  20                 	db	32
   453  007A9E  30                 	db	48	;'0'
   454  007A9F  5D                 	db	93	;']'
   455  007AA0  0D                 	db	13
   456  007AA1  0A                 	db	10
   457  007AA2  00                 	db	0
   458  007AA3                     STR_35:
   459                           
   460                           ; BSR set to: 1
   461  007AA3  24                 	db	36
   462  007AA4  52                 	db	82	;'R'
   463  007AA5  43                 	db	67	;'C'
   464  007AA6  52                 	db	82	;'R'
   465  007AA7  20                 	db	32
   466  007AA8  3C                 	db	60	;'<'
   467  007AA9  58                 	db	88	;'X'
   468  007AAA  3E                 	db	62	;'>'
   469  007AAB  3C                 	db	60	;'<'
   470  007AAC  63                 	db	99	;'c'
   471  007AAD  72                 	db	114	;'r'
   472  007AAE  3E                 	db	62	;'>'
   473  007AAF  20                 	db	32
   474  007AB0  20                 	db	32
   475  007AB1  20                 	db	32
   476  007AB2  20                 	db	32
   477  007AB3  20                 	db	32
   478  007AB4  53                 	db	83	;'S'
   479  007AB5  65                 	db	101	;'e'
   480  007AB6  74                 	db	116	;'t'
   481  007AB7  20                 	db	32
   482  007AB8  43                 	db	67	;'C'
   483  007AB9  6F                 	db	111	;'o'
   484  007ABA  6D                 	db	109	;'m'
   485  007ABB  70                 	db	112	;'p'
   486  007ABC  72                 	db	114	;'r'
   487  007ABD  65                 	db	101	;'e'
   488  007ABE  73                 	db	115	;'s'
   489  007ABF  73                 	db	115	;'s'
   490  007AC0  69                 	db	105	;'i'
   491  007AC1  6F                 	db	111	;'o'
   492  007AC2  6E                 	db	110	;'n'
   493  007AC3  20                 	db	32
   494  007AC4  72                 	db	114	;'r'
   495  007AC5  61                 	db	97	;'a'
   496  007AC6  6E                 	db	110	;'n'
   497  007AC7  67                 	db	103	;'g'
   498  007AC8  65                 	db	101	;'e'
   499  007AC9  20                 	db	32
   500  007ACA  61                 	db	97	;'a'
   501  007ACB  74                 	db	116	;'t'
   502  007ACC  20                 	db	32
   503  007ACD  52                 	db	82	;'R'
   504  007ACE  58                 	db	88	;'X'
   505  007ACF  20                 	db	32
   506  007AD0  73                 	db	115	;'s'
   507  007AD1  79                 	db	121	;'y'
   508  007AD2  73                 	db	115	;'s'
   509  007AD3  74                 	db	116	;'t'
   510  007AD4  65                 	db	101	;'e'
   511  007AD5  6D                 	db	109	;'m'
   512  007AD6  2E                 	db	46
   513  007AD7  20                 	db	32
   514  007AD8  48                 	db	72	;'H'
   515  007AD9  69                 	db	105	;'i'
   516  007ADA  67                 	db	103	;'g'
   517  007ADB  68                 	db	104	;'h'
   518  007ADC  20                 	db	32
   519  007ADD  5B                 	db	91	;'['
   520  007ADE  31                 	db	49	;'1'
   521  007ADF  5D                 	db	93	;']'
   522  007AE0  20                 	db	32
   523  007AE1  4C                 	db	76	;'L'
   524  007AE2  6F                 	db	111	;'o'
   525  007AE3  77                 	db	119	;'w'
   526  007AE4  20                 	db	32
   527  007AE5  5B                 	db	91	;'['
   528  007AE6  30                 	db	48	;'0'
   529  007AE7  5D                 	db	93	;']'
   530  007AE8  20                 	db	32
   531  007AE9  5B                 	db	91	;'['
   532  007AEA  44                 	db	68	;'D'
   533  007AEB  65                 	db	101	;'e'
   534  007AEC  66                 	db	102	;'f'
   535  007AED  61                 	db	97	;'a'
   536  007AEE  75                 	db	117	;'u'
   537  007AEF  6C                 	db	108	;'l'
   538  007AF0  74                 	db	116	;'t'
   539  007AF1  20                 	db	32
   540  007AF2  3D                 	db	61	;'='
   541  007AF3  20                 	db	32
   542  007AF4  30                 	db	48	;'0'
   543  007AF5  5D                 	db	93	;']'
   544  007AF6  0D                 	db	13
   545  007AF7  0A                 	db	10
   546  007AF8  00                 	db	0
   547  007AF9                     STR_40:
   548                           
   549                           ; BSR set to: 1
   550  007AF9  24                 	db	36
   551  007AFA  53                 	db	83	;'S'
   552  007AFB  42                 	db	66	;'B'
   553  007AFC  55                 	db	85	;'U'
   554  007AFD  20                 	db	32
   555  007AFE  3C                 	db	60	;'<'
   556  007AFF  58                 	db	88	;'X'
   557  007B00  3E                 	db	62	;'>'
   558  007B01  3C                 	db	60	;'<'
   559  007B02  63                 	db	99	;'c'
   560  007B03  72                 	db	114	;'r'
   561  007B04  3E                 	db	62	;'>'
   562  007B05  20                 	db	32
   563  007B06  20                 	db	32
   564  007B07  20                 	db	32
   565  007B08  20                 	db	32
   566  007B09  20                 	db	32
   567  007B0A  53                 	db	83	;'S'
   568  007B0B  65                 	db	101	;'e'
   569  007B0C  74                 	db	116	;'t'
   570  007B0D  20                 	db	32
   571  007B0E  55                 	db	85	;'U'
   572  007B0F  41                 	db	65	;'A'
   573  007B10  52                 	db	82	;'R'
   574  007B11  54                 	db	84	;'T'
   575  007B12  20                 	db	32
   576  007B13  61                 	db	97	;'a'
   577  007B14  75                 	db	117	;'u'
   578  007B15  74                 	db	116	;'t'
   579  007B16  6F                 	db	111	;'o'
   580  007B17  6D                 	db	109	;'m'
   581  007B18  61                 	db	97	;'a'
   582  007B19  74                 	db	116	;'t'
   583  007B1A  69                 	db	105	;'i'
   584  007B1B  63                 	db	99	;'c'
   585  007B1C  20                 	db	32
   586  007B1D  6F                 	db	111	;'o'
   587  007B1E  70                 	db	112	;'p'
   588  007B1F  65                 	db	101	;'e'
   589  007B20  72                 	db	114	;'r'
   590  007B21  61                 	db	97	;'a'
   591  007B22  74                 	db	116	;'t'
   592  007B23  69                 	db	105	;'i'
   593  007B24  6F                 	db	111	;'o'
   594  007B25  6E                 	db	110	;'n'
   595  007B26  3A                 	db	58	;':'
   596  007B27  20                 	db	32
   597  007B28  41                 	db	65	;'A'
   598  007B29  75                 	db	117	;'u'
   599  007B2A  74                 	db	116	;'t'
   600  007B2B  6F                 	db	111	;'o'
   601  007B2C  6D                 	db	109	;'m'
   602  007B2D  61                 	db	97	;'a'
   603  007B2E  74                 	db	116	;'t'
   604  007B2F  69                 	db	105	;'i'
   605  007B30  63                 	db	99	;'c'
   606  007B31  5B                 	db	91	;'['
   607  007B32  31                 	db	49	;'1'
   608  007B33  5D                 	db	93	;']'
   609  007B34  20                 	db	32
   610  007B35  4D                 	db	77	;'M'
   611  007B36  61                 	db	97	;'a'
   612  007B37  6E                 	db	110	;'n'
   613  007B38  75                 	db	117	;'u'
   614  007B39  61                 	db	97	;'a'
   615  007B3A  6C                 	db	108	;'l'
   616  007B3B  5B                 	db	91	;'['
   617  007B3C  30                 	db	48	;'0'
   618  007B3D  5D                 	db	93	;']'
   619  007B3E  20                 	db	32
   620  007B3F  5B                 	db	91	;'['
   621  007B40  44                 	db	68	;'D'
   622  007B41  65                 	db	101	;'e'
   623  007B42  66                 	db	102	;'f'
   624  007B43  61                 	db	97	;'a'
   625  007B44  75                 	db	117	;'u'
   626  007B45  6C                 	db	108	;'l'
   627  007B46  74                 	db	116	;'t'
   628  007B47  20                 	db	32
   629  007B48  3D                 	db	61	;'='
   630  007B49  20                 	db	32
   631  007B4A  30                 	db	48	;'0'
   632  007B4B  5D                 	db	93	;']'
   633  007B4C  0D                 	db	13
   634  007B4D  0A                 	db	10
   635  007B4E  00                 	db	0
   636  007B4F                     STR_29:
   637                           
   638                           ; BSR set to: 1
   639  007B4F  24                 	db	36
   640  007B50  54                 	db	84	;'T'
   641  007B51  58                 	db	88	;'X'
   642  007B52  20                 	db	32
   643  007B53  3C                 	db	60	;'<'
   644  007B54  58                 	db	88	;'X'
   645  007B55  3E                 	db	62	;'>'
   646  007B56  3C                 	db	60	;'<'
   647  007B57  63                 	db	99	;'c'
   648  007B58  72                 	db	114	;'r'
   649  007B59  3E                 	db	62	;'>'
   650  007B5A  20                 	db	32
   651  007B5B  20                 	db	32
   652  007B5C  20                 	db	32
   653  007B5D  20                 	db	32
   654  007B5E  20                 	db	32
   655  007B5F  20                 	db	32
   656  007B60  54                 	db	84	;'T'
   657  007B61  75                 	db	117	;'u'
   658  007B62  72                 	db	114	;'r'
   659  007B63  6E                 	db	110	;'n'
   660  007B64  20                 	db	32
   661  007B65  6F                 	db	111	;'o'
   662  007B66  6E                 	db	110	;'n'
   663  007B67  5B                 	db	91	;'['
   664  007B68  31                 	db	49	;'1'
   665  007B69  5D                 	db	93	;']'
   666  007B6A  20                 	db	32
   667  007B6B  2F                 	db	47
   668  007B6C  20                 	db	32
   669  007B6D  6F                 	db	111	;'o'
   670  007B6E  66                 	db	102	;'f'
   671  007B6F  66                 	db	102	;'f'
   672  007B70  5B                 	db	91	;'['
   673  007B71  30                 	db	48	;'0'
   674  007B72  5D                 	db	93	;']'
   675  007B73  20                 	db	32
   676  007B74  74                 	db	116	;'t'
   677  007B75  72                 	db	114	;'r'
   678  007B76  61                 	db	97	;'a'
   679  007B77  6E                 	db	110	;'n'
   680  007B78  73                 	db	115	;'s'
   681  007B79  6D                 	db	109	;'m'
   682  007B7A  69                 	db	105	;'i'
   683  007B7B  73                 	db	115	;'s'
   684  007B7C  73                 	db	115	;'s'
   685  007B7D  69                 	db	105	;'i'
   686  007B7E  6F                 	db	111	;'o'
   687  007B7F  6E                 	db	110	;'n'
   688  007B80  20                 	db	32
   689  007B81  61                 	db	97	;'a'
   690  007B82  74                 	db	116	;'t'
   691  007B83  20                 	db	32
   692  007B84  54                 	db	84	;'T'
   693  007B85  58                 	db	88	;'X'
   694  007B86  20                 	db	32
   695  007B87  73                 	db	115	;'s'
   696  007B88  79                 	db	121	;'y'
   697  007B89  73                 	db	115	;'s'
   698  007B8A  74                 	db	116	;'t'
   699  007B8B  65                 	db	101	;'e'
   700  007B8C  6D                 	db	109	;'m'
   701  007B8D  20                 	db	32
   702  007B8E  5B                 	db	91	;'['
   703  007B8F  44                 	db	68	;'D'
   704  007B90  65                 	db	101	;'e'
   705  007B91  66                 	db	102	;'f'
   706  007B92  61                 	db	97	;'a'
   707  007B93  75                 	db	117	;'u'
   708  007B94  6C                 	db	108	;'l'
   709  007B95  74                 	db	116	;'t'
   710  007B96  20                 	db	32
   711  007B97  3D                 	db	61	;'='
   712  007B98  20                 	db	32
   713  007B99  30                 	db	48	;'0'
   714  007B9A  5D                 	db	93	;']'
   715  007B9B  0D                 	db	13
   716  007B9C  0A                 	db	10
   717  007B9D  00                 	db	0
   718  007B9E                     STR_28:
   719                           
   720                           ; BSR set to: 1
   721  007B9E  24                 	db	36
   722  007B9F  54                 	db	84	;'T'
   723  007BA0  42                 	db	66	;'B'
   724  007BA1  20                 	db	32
   725  007BA2  3C                 	db	60	;'<'
   726  007BA3  58                 	db	88	;'X'
   727  007BA4  3E                 	db	62	;'>'
   728  007BA5  3C                 	db	60	;'<'
   729  007BA6  63                 	db	99	;'c'
   730  007BA7  72                 	db	114	;'r'
   731  007BA8  3E                 	db	62	;'>'
   732  007BA9  20                 	db	32
   733  007BAA  20                 	db	32
   734  007BAB  20                 	db	32
   735  007BAC  20                 	db	32
   736  007BAD  20                 	db	32
   737  007BAE  20                 	db	32
   738  007BAF  54                 	db	84	;'T'
   739  007BB0  75                 	db	117	;'u'
   740  007BB1  72                 	db	114	;'r'
   741  007BB2  6E                 	db	110	;'n'
   742  007BB3  20                 	db	32
   743  007BB4  6F                 	db	111	;'o'
   744  007BB5  6E                 	db	110	;'n'
   745  007BB6  5B                 	db	91	;'['
   746  007BB7  31                 	db	49	;'1'
   747  007BB8  5D                 	db	93	;']'
   748  007BB9  20                 	db	32
   749  007BBA  2F                 	db	47
   750  007BBB  20                 	db	32
   751  007BBC  6F                 	db	111	;'o'
   752  007BBD  66                 	db	102	;'f'
   753  007BBE  66                 	db	102	;'f'
   754  007BBF  5B                 	db	91	;'['
   755  007BC0  30                 	db	48	;'0'
   756  007BC1  5D                 	db	93	;']'
   757  007BC2  20                 	db	32
   758  007BC3  42                 	db	66	;'B'
   759  007BC4  49                 	db	73	;'I'
   760  007BC5  54                 	db	84	;'T'
   761  007BC6  20                 	db	32
   762  007BC7  6D                 	db	109	;'m'
   763  007BC8  6F                 	db	111	;'o'
   764  007BC9  64                 	db	100	;'d'
   765  007BCA  65                 	db	101	;'e'
   766  007BCB  20                 	db	32
   767  007BCC  61                 	db	97	;'a'
   768  007BCD  74                 	db	116	;'t'
   769  007BCE  20                 	db	32
   770  007BCF  54                 	db	84	;'T'
   771  007BD0  58                 	db	88	;'X'
   772  007BD1  20                 	db	32
   773  007BD2  73                 	db	115	;'s'
   774  007BD3  79                 	db	121	;'y'
   775  007BD4  73                 	db	115	;'s'
   776  007BD5  74                 	db	116	;'t'
   777  007BD6  65                 	db	101	;'e'
   778  007BD7  6D                 	db	109	;'m'
   779  007BD8  20                 	db	32
   780  007BD9  5B                 	db	91	;'['
   781  007BDA  44                 	db	68	;'D'
   782  007BDB  65                 	db	101	;'e'
   783  007BDC  66                 	db	102	;'f'
   784  007BDD  61                 	db	97	;'a'
   785  007BDE  75                 	db	117	;'u'
   786  007BDF  6C                 	db	108	;'l'
   787  007BE0  74                 	db	116	;'t'
   788  007BE1  20                 	db	32
   789  007BE2  3D                 	db	61	;'='
   790  007BE3  20                 	db	32
   791  007BE4  30                 	db	48	;'0'
   792  007BE5  5D                 	db	93	;']'
   793  007BE6  0D                 	db	13
   794  007BE7  0A                 	db	10
   795  007BE8  00                 	db	0
   796  007BE9                     STR_31:
   797                           
   798                           ; BSR set to: 1
   799  007BE9  24                 	db	36
   800  007BEA  52                 	db	82	;'R'
   801  007BEB  49                 	db	73	;'I'
   802  007BEC  20                 	db	32
   803  007BED  3C                 	db	60	;'<'
   804  007BEE  58                 	db	88	;'X'
   805  007BEF  58                 	db	88	;'X'
   806  007BF0  58                 	db	88	;'X'
   807  007BF1  58                 	db	88	;'X'
   808  007BF2  3E                 	db	62	;'>'
   809  007BF3  3C                 	db	60	;'<'
   810  007BF4  63                 	db	99	;'c'
   811  007BF5  72                 	db	114	;'r'
   812  007BF6  3E                 	db	62	;'>'
   813  007BF7  20                 	db	32
   814  007BF8  20                 	db	32
   815  007BF9  20                 	db	32
   816  007BFA  49                 	db	73	;'I'
   817  007BFB  6E                 	db	110	;'n'
   818  007BFC  69                 	db	105	;'i'
   819  007BFD  74                 	db	116	;'t'
   820  007BFE  20                 	db	32
   821  007BFF  52                 	db	82	;'R'
   822  007C00  58                 	db	88	;'X'
   823  007C01  20                 	db	32
   824  007C02  73                 	db	115	;'s'
   825  007C03  79                 	db	121	;'y'
   826  007C04  73                 	db	115	;'s'
   827  007C05  74                 	db	116	;'t'
   828  007C06  65                 	db	101	;'e'
   829  007C07  6D                 	db	109	;'m'
   830  007C08  20                 	db	32
   831  007C09  61                 	db	97	;'a'
   832  007C0A  6E                 	db	110	;'n'
   833  007C0B  64                 	db	100	;'d'
   834  007C0C  20                 	db	32
   835  007C0D  73                 	db	115	;'s'
   836  007C0E  65                 	db	101	;'e'
   837  007C0F  74                 	db	116	;'t'
   838  007C10  20                 	db	32
   839  007C11  66                 	db	102	;'f'
   840  007C12  72                 	db	114	;'r'
   841  007C13  65                 	db	101	;'e'
   842  007C14  71                 	db	113	;'q'
   843  007C15  75                 	db	117	;'u'
   844  007C16  65                 	db	101	;'e'
   845  007C17  6E                 	db	110	;'n'
   846  007C18  63                 	db	99	;'c'
   847  007C19  79                 	db	121	;'y'
   848  007C1A  20                 	db	32
   849  007C1B  61                 	db	97	;'a'
   850  007C1C  74                 	db	116	;'t'
   851  007C1D  20                 	db	32
   852  007C1E  58                 	db	88	;'X'
   853  007C1F  58                 	db	88	;'X'
   854  007C20  58                 	db	88	;'X'
   855  007C21  58                 	db	88	;'X'
   856  007C22  20                 	db	32
   857  007C23  28                 	db	40
   858  007C24  30                 	db	48	;'0'
   859  007C25  2D                 	db	45
   860  007C26  39                 	db	57	;'9'
   861  007C27  39                 	db	57	;'9'
   862  007C28  39                 	db	57	;'9'
   863  007C29  39                 	db	57	;'9'
   864  007C2A  29                 	db	41
   865  007C2B  5B                 	db	91	;'['
   866  007C2C  4D                 	db	77	;'M'
   867  007C2D  48                 	db	72	;'H'
   868  007C2E  7A                 	db	122	;'z'
   869  007C2F  5D                 	db	93	;']'
   870  007C30  0D                 	db	13
   871  007C31  0A                 	db	10
   872  007C32  00                 	db	0
   873  007C33                     STR_43:
   874                           
   875                           ; BSR set to: 1
   876  007C33  24                 	db	36
   877  007C34  54                 	db	84	;'T'
   878  007C35  44                 	db	68	;'D'
   879  007C36  20                 	db	32
   880  007C37  3C                 	db	60	;'<'
   881  007C38  44                 	db	68	;'D'
   882  007C39  41                 	db	65	;'A'
   883  007C3A  43                 	db	67	;'C'
   884  007C3B  20                 	db	32
   885  007C3C  4E                 	db	78	;'N'
   886  007C3D  55                 	db	85	;'U'
   887  007C3E  4D                 	db	77	;'M'
   888  007C3F  3E                 	db	62	;'>'
   889  007C40  3C                 	db	60	;'<'
   890  007C41  44                 	db	68	;'D'
   891  007C42  41                 	db	65	;'A'
   892  007C43  43                 	db	67	;'C'
   893  007C44  20                 	db	32
   894  007C45  56                 	db	86	;'V'
   895  007C46  41                 	db	65	;'A'
   896  007C47  4C                 	db	76	;'L'
   897  007C48  55                 	db	85	;'U'
   898  007C49  45                 	db	69	;'E'
   899  007C4A  3E                 	db	62	;'>'
   900  007C4B  3C                 	db	60	;'<'
   901  007C4C  63                 	db	99	;'c'
   902  007C4D  72                 	db	114	;'r'
   903  007C4E  3E                 	db	62	;'>'
   904  007C4F  20                 	db	32
   905  007C50  20                 	db	32
   906  007C51  20                 	db	32
   907  007C52  20                 	db	32
   908  007C53  20                 	db	32
   909  007C54  20                 	db	32
   910  007C55  20                 	db	32
   911  007C56  20                 	db	32
   912  007C57  20                 	db	32
   913  007C58  53                 	db	83	;'S'
   914  007C59  65                 	db	101	;'e'
   915  007C5A  74                 	db	116	;'t'
   916  007C5B  20                 	db	32
   917  007C5C  54                 	db	84	;'T'
   918  007C5D  58                 	db	88	;'X'
   919  007C5E  20                 	db	32
   920  007C5F  44                 	db	68	;'D'
   921  007C60  41                 	db	65	;'A'
   922  007C61  43                 	db	67	;'C'
   923  007C62  20                 	db	32
   924  007C63  3C                 	db	60	;'<'
   925  007C64  30                 	db	48	;'0'
   926  007C65  2D                 	db	45
   927  007C66  33                 	db	51	;'3'
   928  007C67  3E                 	db	62	;'>'
   929  007C68  20                 	db	32
   930  007C69  3C                 	db	60	;'<'
   931  007C6A  30                 	db	48	;'0'
   932  007C6B  2D                 	db	45
   933  007C6C  56                 	db	86	;'V'
   934  007C6D  72                 	db	114	;'r'
   935  007C6E  65                 	db	101	;'e'
   936  007C6F  66                 	db	102	;'f'
   937  007C70  5B                 	db	91	;'['
   938  007C71  34                 	db	52	;'4'
   939  007C72  20                 	db	32
   940  007C73  64                 	db	100	;'d'
   941  007C74  69                 	db	105	;'i'
   942  007C75  67                 	db	103	;'g'
   943  007C76  5D                 	db	93	;']'
   944  007C77  3E                 	db	62	;'>'
   945  007C78  20                 	db	32
   946  007C79  0D                 	db	13
   947  007C7A  0A                 	db	10
   948  007C7B  00                 	db	0
   949  007C7C                     STR_25:
   950                           
   951                           ; BSR set to: 1
   952  007C7C  24                 	db	36
   953  007C7D  54                 	db	84	;'T'
   954  007C7E  49                 	db	73	;'I'
   955  007C7F  20                 	db	32
   956  007C80  3C                 	db	60	;'<'
   957  007C81  58                 	db	88	;'X'
   958  007C82  58                 	db	88	;'X'
   959  007C83  58                 	db	88	;'X'
   960  007C84  58                 	db	88	;'X'
   961  007C85  3E                 	db	62	;'>'
   962  007C86  3C                 	db	60	;'<'
   963  007C87  63                 	db	99	;'c'
   964  007C88  72                 	db	114	;'r'
   965  007C89  3E                 	db	62	;'>'
   966  007C8A  20                 	db	32
   967  007C8B  20                 	db	32
   968  007C8C  20                 	db	32
   969  007C8D  49                 	db	73	;'I'
   970  007C8E  6E                 	db	110	;'n'
   971  007C8F  69                 	db	105	;'i'
   972  007C90  74                 	db	116	;'t'
   973  007C91  20                 	db	32
   974  007C92  54                 	db	84	;'T'
   975  007C93  58                 	db	88	;'X'
   976  007C94  20                 	db	32
   977  007C95  73                 	db	115	;'s'
   978  007C96  79                 	db	121	;'y'
   979  007C97  73                 	db	115	;'s'
   980  007C98  74                 	db	116	;'t'
   981  007C99  65                 	db	101	;'e'
   982  007C9A  6D                 	db	109	;'m'
   983  007C9B  20                 	db	32
   984  007C9C  61                 	db	97	;'a'
   985  007C9D  6E                 	db	110	;'n'
   986  007C9E  64                 	db	100	;'d'
   987  007C9F  20                 	db	32
   988  007CA0  73                 	db	115	;'s'
   989  007CA1  65                 	db	101	;'e'
   990  007CA2  74                 	db	116	;'t'
   991  007CA3  20                 	db	32
   992  007CA4  66                 	db	102	;'f'
   993  007CA5  72                 	db	114	;'r'
   994  007CA6  65                 	db	101	;'e'
   995  007CA7  71                 	db	113	;'q'
   996  007CA8  75                 	db	117	;'u'
   997  007CA9  65                 	db	101	;'e'
   998  007CAA  6E                 	db	110	;'n'
   999  007CAB  63                 	db	99	;'c'
  1000  007CAC  79                 	db	121	;'y'
  1001  007CAD  20                 	db	32
  1002  007CAE  28                 	db	40
  1003  007CAF  30                 	db	48	;'0'
  1004  007CB0  2D                 	db	45
  1005  007CB1  39                 	db	57	;'9'
  1006  007CB2  39                 	db	57	;'9'
  1007  007CB3  39                 	db	57	;'9'
  1008  007CB4  39                 	db	57	;'9'
  1009  007CB5  29                 	db	41
  1010  007CB6  5B                 	db	91	;'['
  1011  007CB7  4D                 	db	77	;'M'
  1012  007CB8  48                 	db	72	;'H'
  1013  007CB9  7A                 	db	122	;'z'
  1014  007CBA  5D                 	db	93	;']'
  1015  007CBB  0D                 	db	13
  1016  007CBC  0A                 	db	10
  1017  007CBD  00                 	db	0
  1018  007CBE                     STR_33:
  1019                           
  1020                           ; BSR set to: 1
  1021  007CBE  24                 	db	36
  1022  007CBF  52                 	db	82	;'R'
  1023  007CC0  42                 	db	66	;'B'
  1024  007CC1  20                 	db	32
  1025  007CC2  3C                 	db	60	;'<'
  1026  007CC3  58                 	db	88	;'X'
  1027  007CC4  3E                 	db	62	;'>'
  1028  007CC5  3C                 	db	60	;'<'
  1029  007CC6  63                 	db	99	;'c'
  1030  007CC7  72                 	db	114	;'r'
  1031  007CC8  3E                 	db	62	;'>'
  1032  007CC9  20                 	db	32
  1033  007CCA  20                 	db	32
  1034  007CCB  20                 	db	32
  1035  007CCC  20                 	db	32
  1036  007CCD  20                 	db	32
  1037  007CCE  20                 	db	32
  1038  007CCF  54                 	db	84	;'T'
  1039  007CD0  75                 	db	117	;'u'
  1040  007CD1  72                 	db	114	;'r'
  1041  007CD2  6E                 	db	110	;'n'
  1042  007CD3  20                 	db	32
  1043  007CD4  6F                 	db	111	;'o'
  1044  007CD5  6E                 	db	110	;'n'
  1045  007CD6  5B                 	db	91	;'['
  1046  007CD7  31                 	db	49	;'1'
  1047  007CD8  5D                 	db	93	;']'
  1048  007CD9  20                 	db	32
  1049  007CDA  2F                 	db	47
  1050  007CDB  20                 	db	32
  1051  007CDC  6F                 	db	111	;'o'
  1052  007CDD  66                 	db	102	;'f'
  1053  007CDE  66                 	db	102	;'f'
  1054  007CDF  5B                 	db	91	;'['
  1055  007CE0  30                 	db	48	;'0'
  1056  007CE1  5D                 	db	93	;']'
  1057  007CE2  20                 	db	32
  1058  007CE3  42                 	db	66	;'B'
  1059  007CE4  49                 	db	73	;'I'
  1060  007CE5  54                 	db	84	;'T'
  1061  007CE6  20                 	db	32
  1062  007CE7  6D                 	db	109	;'m'
  1063  007CE8  6F                 	db	111	;'o'
  1064  007CE9  64                 	db	100	;'d'
  1065  007CEA  65                 	db	101	;'e'
  1066  007CEB  20                 	db	32
  1067  007CEC  61                 	db	97	;'a'
  1068  007CED  74                 	db	116	;'t'
  1069  007CEE  20                 	db	32
  1070  007CEF  52                 	db	82	;'R'
  1071  007CF0  58                 	db	88	;'X'
  1072  007CF1  20                 	db	32
  1073  007CF2  73                 	db	115	;'s'
  1074  007CF3  79                 	db	121	;'y'
  1075  007CF4  73                 	db	115	;'s'
  1076  007CF5  74                 	db	116	;'t'
  1077  007CF6  65                 	db	101	;'e'
  1078  007CF7  6D                 	db	109	;'m'
  1079  007CF8  2E                 	db	46
  1080  007CF9  0D                 	db	13
  1081  007CFA  0A                 	db	10
  1082  007CFB  00                 	db	0
  1083  007CFC                     STR_26:
  1084                           
  1085                           ; BSR set to: 1
  1086  007CFC  24                 	db	36
  1087  007CFD  54                 	db	84	;'T'
  1088  007CFE  46                 	db	70	;'F'
  1089  007CFF  20                 	db	32
  1090  007D00  3C                 	db	60	;'<'
  1091  007D01  58                 	db	88	;'X'
  1092  007D02  58                 	db	88	;'X'
  1093  007D03  58                 	db	88	;'X'
  1094  007D04  58                 	db	88	;'X'
  1095  007D05  3E                 	db	62	;'>'
  1096  007D06  3C                 	db	60	;'<'
  1097  007D07  63                 	db	99	;'c'
  1098  007D08  72                 	db	114	;'r'
  1099  007D09  3E                 	db	62	;'>'
  1100  007D0A  20                 	db	32
  1101  007D0B  20                 	db	32
  1102  007D0C  20                 	db	32
  1103  007D0D  53                 	db	83	;'S'
  1104  007D0E  65                 	db	101	;'e'
  1105  007D0F  74                 	db	116	;'t'
  1106  007D10  20                 	db	32
  1107  007D11  54                 	db	84	;'T'
  1108  007D12  58                 	db	88	;'X'
  1109  007D13  20                 	db	32
  1110  007D14  73                 	db	115	;'s'
  1111  007D15  79                 	db	121	;'y'
  1112  007D16  73                 	db	115	;'s'
  1113  007D17  74                 	db	116	;'t'
  1114  007D18  65                 	db	101	;'e'
  1115  007D19  6D                 	db	109	;'m'
  1116  007D1A  20                 	db	32
  1117  007D1B  66                 	db	102	;'f'
  1118  007D1C  72                 	db	114	;'r'
  1119  007D1D  65                 	db	101	;'e'
  1120  007D1E  71                 	db	113	;'q'
  1121  007D1F  75                 	db	117	;'u'
  1122  007D20  65                 	db	101	;'e'
  1123  007D21  6E                 	db	110	;'n'
  1124  007D22  63                 	db	99	;'c'
  1125  007D23  79                 	db	121	;'y'
  1126  007D24  20                 	db	32
  1127  007D25  61                 	db	97	;'a'
  1128  007D26  74                 	db	116	;'t'
  1129  007D27  20                 	db	32
  1130  007D28  28                 	db	40
  1131  007D29  30                 	db	48	;'0'
  1132  007D2A  2D                 	db	45
  1133  007D2B  39                 	db	57	;'9'
  1134  007D2C  39                 	db	57	;'9'
  1135  007D2D  39                 	db	57	;'9'
  1136  007D2E  39                 	db	57	;'9'
  1137  007D2F  29                 	db	41
  1138  007D30  5B                 	db	91	;'['
  1139  007D31  4D                 	db	77	;'M'
  1140  007D32  48                 	db	72	;'H'
  1141  007D33  7A                 	db	122	;'z'
  1142  007D34  5D                 	db	93	;']'
  1143  007D35  2E                 	db	46
  1144  007D36  0D                 	db	13
  1145  007D37  0A                 	db	10
  1146  007D38  00                 	db	0
  1147  007D39                     STR_34:
  1148                           
  1149                           ; BSR set to: 1
  1150  007D39  24                 	db	36
  1151  007D3A  52                 	db	82	;'R'
  1152  007D3B  58                 	db	88	;'X'
  1153  007D3C  20                 	db	32
  1154  007D3D  3C                 	db	60	;'<'
  1155  007D3E  58                 	db	88	;'X'
  1156  007D3F  3E                 	db	62	;'>'
  1157  007D40  3C                 	db	60	;'<'
  1158  007D41  63                 	db	99	;'c'
  1159  007D42  72                 	db	114	;'r'
  1160  007D43  3E                 	db	62	;'>'
  1161  007D44  20                 	db	32
  1162  007D45  20                 	db	32
  1163  007D46  20                 	db	32
  1164  007D47  20                 	db	32
  1165  007D48  20                 	db	32
  1166  007D49  20                 	db	32
  1167  007D4A  54                 	db	84	;'T'
  1168  007D4B  75                 	db	117	;'u'
  1169  007D4C  72                 	db	114	;'r'
  1170  007D4D  6E                 	db	110	;'n'
  1171  007D4E  20                 	db	32
  1172  007D4F  6F                 	db	111	;'o'
  1173  007D50  6E                 	db	110	;'n'
  1174  007D51  5B                 	db	91	;'['
  1175  007D52  31                 	db	49	;'1'
  1176  007D53  5D                 	db	93	;']'
  1177  007D54  20                 	db	32
  1178  007D55  2F                 	db	47
  1179  007D56  20                 	db	32
  1180  007D57  6F                 	db	111	;'o'
  1181  007D58  66                 	db	102	;'f'
  1182  007D59  66                 	db	102	;'f'
  1183  007D5A  5B                 	db	91	;'['
  1184  007D5B  30                 	db	48	;'0'
  1185  007D5C  5D                 	db	93	;']'
  1186  007D5D  20                 	db	32
  1187  007D5E  72                 	db	114	;'r'
  1188  007D5F  65                 	db	101	;'e'
  1189  007D60  63                 	db	99	;'c'
  1190  007D61  65                 	db	101	;'e'
  1191  007D62  69                 	db	105	;'i'
  1192  007D63  76                 	db	118	;'v'
  1193  007D64  65                 	db	101	;'e'
  1194  007D65  20                 	db	32
  1195  007D66  61                 	db	97	;'a'
  1196  007D67  74                 	db	116	;'t'
  1197  007D68  20                 	db	32
  1198  007D69  52                 	db	82	;'R'
  1199  007D6A  58                 	db	88	;'X'
  1200  007D6B  20                 	db	32
  1201  007D6C  73                 	db	115	;'s'
  1202  007D6D  79                 	db	121	;'y'
  1203  007D6E  73                 	db	115	;'s'
  1204  007D6F  74                 	db	116	;'t'
  1205  007D70  65                 	db	101	;'e'
  1206  007D71  6D                 	db	109	;'m'
  1207  007D72  2E                 	db	46
  1208  007D73  0D                 	db	13
  1209  007D74  0A                 	db	10
  1210  007D75  00                 	db	0
  1211  007D76                     STR_39:
  1212                           
  1213                           ; BSR set to: 1
  1214  007D76  24                 	db	36
  1215  007D77  53                 	db	83	;'S'
  1216  007D78  42                 	db	66	;'B'
  1217  007D79  54                 	db	84	;'T'
  1218  007D7A  20                 	db	32
  1219  007D7B  3C                 	db	60	;'<'
  1220  007D7C  58                 	db	88	;'X'
  1221  007D7D  58                 	db	88	;'X'
  1222  007D7E  3E                 	db	62	;'>'
  1223  007D7F  3C                 	db	60	;'<'
  1224  007D80  63                 	db	99	;'c'
  1225  007D81  72                 	db	114	;'r'
  1226  007D82  3E                 	db	62	;'>'
  1227  007D83  20                 	db	32
  1228  007D84  20                 	db	32
  1229  007D85  20                 	db	32
  1230  007D86  20                 	db	32
  1231  007D87  53                 	db	83	;'S'
  1232  007D88  65                 	db	101	;'e'
  1233  007D89  74                 	db	116	;'t'
  1234  007D8A  20                 	db	32
  1235  007D8B  55                 	db	85	;'U'
  1236  007D8C  41                 	db	65	;'A'
  1237  007D8D  52                 	db	82	;'R'
  1238  007D8E  54                 	db	84	;'T'
  1239  007D8F  20                 	db	32
  1240  007D90  72                 	db	114	;'r'
  1241  007D91  65                 	db	101	;'e'
  1242  007D92  66                 	db	102	;'f'
  1243  007D93  72                 	db	114	;'r'
  1244  007D94  65                 	db	101	;'e'
  1245  007D95  73                 	db	115	;'s'
  1246  007D96  68                 	db	104	;'h'
  1247  007D97  20                 	db	32
  1248  007D98  72                 	db	114	;'r'
  1249  007D99  61                 	db	97	;'a'
  1250  007D9A  74                 	db	116	;'t'
  1251  007D9B  65                 	db	101	;'e'
  1252  007D9C  20                 	db	32
  1253  007D9D  28                 	db	40
  1254  007D9E  31                 	db	49	;'1'
  1255  007D9F  2D                 	db	45
  1256  007DA0  32                 	db	50	;'2'
  1257  007DA1  30                 	db	48	;'0'
  1258  007DA2  29                 	db	41
  1259  007DA3  5B                 	db	91	;'['
  1260  007DA4  48                 	db	72	;'H'
  1261  007DA5  7A                 	db	122	;'z'
  1262  007DA6  5D                 	db	93	;']'
  1263  007DA7  2E                 	db	46
  1264  007DA8  0D                 	db	13
  1265  007DA9  0A                 	db	10
  1266  007DAA  00                 	db	0
  1267  007DAB                     STR_38:
  1268                           
  1269                           ; BSR set to: 1
  1270  007DAB  24                 	db	36
  1271  007DAC  53                 	db	83	;'S'
  1272  007DAD  48                 	db	72	;'H'
  1273  007DAE  20                 	db	32
  1274  007DAF  3C                 	db	60	;'<'
  1275  007DB0  63                 	db	99	;'c'
  1276  007DB1  72                 	db	114	;'r'
  1277  007DB2  3E                 	db	62	;'>'
  1278  007DB3  20                 	db	32
  1279  007DB4  20                 	db	32
  1280  007DB5  20                 	db	32
  1281  007DB6  20                 	db	32
  1282  007DB7  20                 	db	32
  1283  007DB8  20                 	db	32
  1284  007DB9  20                 	db	32
  1285  007DBA  20                 	db	32
  1286  007DBB  20                 	db	32
  1287  007DBC  50                 	db	80	;'P'
  1288  007DBD  72                 	db	114	;'r'
  1289  007DBE  69                 	db	105	;'i'
  1290  007DBF  6E                 	db	110	;'n'
  1291  007DC0  74                 	db	116	;'t'
  1292  007DC1  20                 	db	32
  1293  007DC2  73                 	db	115	;'s'
  1294  007DC3  79                 	db	121	;'y'
  1295  007DC4  73                 	db	115	;'s'
  1296  007DC5  74                 	db	116	;'t'
  1297  007DC6  65                 	db	101	;'e'
  1298  007DC7  6D                 	db	109	;'m'
  1299  007DC8  20                 	db	32
  1300  007DC9  68                 	db	104	;'h'
  1301  007DCA  65                 	db	101	;'e'
  1302  007DCB  6C                 	db	108	;'l'
  1303  007DCC  70                 	db	112	;'p'
  1304  007DCD  20                 	db	32
  1305  007DCE  6D                 	db	109	;'m'
  1306  007DCF  65                 	db	101	;'e'
  1307  007DD0  73                 	db	115	;'s'
  1308  007DD1  73                 	db	115	;'s'
  1309  007DD2  61                 	db	97	;'a'
  1310  007DD3  67                 	db	103	;'g'
  1311  007DD4  65                 	db	101	;'e'
  1312  007DD5  2E                 	db	46
  1313  007DD6  0D                 	db	13
  1314  007DD7  0A                 	db	10
  1315  007DD8  00                 	db	0
  1316  007DD9                     STR_27:
  1317                           
  1318                           ; BSR set to: 1
  1319  007DD9  24                 	db	36
  1320  007DDA  54                 	db	84	;'T'
  1321  007DDB  51                 	db	81	;'Q'
  1322  007DDC  20                 	db	32
  1323  007DDD  3C                 	db	60	;'<'
  1324  007DDE  63                 	db	99	;'c'
  1325  007DDF  72                 	db	114	;'r'
  1326  007DE0  3E                 	db	62	;'>'
  1327  007DE1  20                 	db	32
  1328  007DE2  20                 	db	32
  1329  007DE3  20                 	db	32
  1330  007DE4  20                 	db	32
  1331  007DE5  20                 	db	32
  1332  007DE6  20                 	db	32
  1333  007DE7  20                 	db	32
  1334  007DE8  20                 	db	32
  1335  007DE9  20                 	db	32
  1336  007DEA  47                 	db	71	;'G'
  1337  007DEB  65                 	db	101	;'e'
  1338  007DEC  74                 	db	116	;'t'
  1339  007DED  20                 	db	32
  1340  007DEE  73                 	db	115	;'s'
  1341  007DEF  74                 	db	116	;'t'
  1342  007DF0  61                 	db	97	;'a'
  1343  007DF1  74                 	db	116	;'t'
  1344  007DF2  75                 	db	117	;'u'
  1345  007DF3  73                 	db	115	;'s'
  1346  007DF4  20                 	db	32
  1347  007DF5  66                 	db	102	;'f'
  1348  007DF6  72                 	db	114	;'r'
  1349  007DF7  6F                 	db	111	;'o'
  1350  007DF8  6D                 	db	109	;'m'
  1351  007DF9  20                 	db	32
  1352  007DFA  54                 	db	84	;'T'
  1353  007DFB  58                 	db	88	;'X'
  1354  007DFC  20                 	db	32
  1355  007DFD  73                 	db	115	;'s'
  1356  007DFE  79                 	db	121	;'y'
  1357  007DFF  73                 	db	115	;'s'
  1358  007E00  74                 	db	116	;'t'
  1359  007E01  65                 	db	101	;'e'
  1360  007E02  6D                 	db	109	;'m'
  1361  007E03  2E                 	db	46
  1362  007E04  0D                 	db	13
  1363  007E05  0A                 	db	10
  1364  007E06  00                 	db	0
  1365  007E07                     STR_32:
  1366                           
  1367                           ; BSR set to: 1
  1368  007E07  24                 	db	36
  1369  007E08  52                 	db	82	;'R'
  1370  007E09  51                 	db	81	;'Q'
  1371  007E0A  20                 	db	32
  1372  007E0B  3C                 	db	60	;'<'
  1373  007E0C  63                 	db	99	;'c'
  1374  007E0D  72                 	db	114	;'r'
  1375  007E0E  3E                 	db	62	;'>'
  1376  007E0F  20                 	db	32
  1377  007E10  20                 	db	32
  1378  007E11  20                 	db	32
  1379  007E12  20                 	db	32
  1380  007E13  20                 	db	32
  1381  007E14  20                 	db	32
  1382  007E15  20                 	db	32
  1383  007E16  20                 	db	32
  1384  007E17  20                 	db	32
  1385  007E18  47                 	db	71	;'G'
  1386  007E19  65                 	db	101	;'e'
  1387  007E1A  74                 	db	116	;'t'
  1388  007E1B  20                 	db	32
  1389  007E1C  73                 	db	115	;'s'
  1390  007E1D  74                 	db	116	;'t'
  1391  007E1E  61                 	db	97	;'a'
  1392  007E1F  74                 	db	116	;'t'
  1393  007E20  75                 	db	117	;'u'
  1394  007E21  73                 	db	115	;'s'
  1395  007E22  20                 	db	32
  1396  007E23  66                 	db	102	;'f'
  1397  007E24  72                 	db	114	;'r'
  1398  007E25  6F                 	db	111	;'o'
  1399  007E26  6D                 	db	109	;'m'
  1400  007E27  20                 	db	32
  1401  007E28  52                 	db	82	;'R'
  1402  007E29  58                 	db	88	;'X'
  1403  007E2A  20                 	db	32
  1404  007E2B  73                 	db	115	;'s'
  1405  007E2C  79                 	db	121	;'y'
  1406  007E2D  73                 	db	115	;'s'
  1407  007E2E  74                 	db	116	;'t'
  1408  007E2F  65                 	db	101	;'e'
  1409  007E30  6D                 	db	109	;'m'
  1410  007E31  0D                 	db	13
  1411  007E32  0A                 	db	10
  1412  007E33  00                 	db	0
  1413  007E34                     STR_41:
  1414                           
  1415                           ; BSR set to: 1
  1416  007E34  24                 	db	36
  1417  007E35  53                 	db	83	;'S'
  1418  007E36  51                 	db	81	;'Q'
  1419  007E37  20                 	db	32
  1420  007E38  3C                 	db	60	;'<'
  1421  007E39  58                 	db	88	;'X'
  1422  007E3A  3E                 	db	62	;'>'
  1423  007E3B  3C                 	db	60	;'<'
  1424  007E3C  63                 	db	99	;'c'
  1425  007E3D  72                 	db	114	;'r'
  1426  007E3E  3E                 	db	62	;'>'
  1427  007E3F  20                 	db	32
  1428  007E40  20                 	db	32
  1429  007E41  20                 	db	32
  1430  007E42  20                 	db	32
  1431  007E43  20                 	db	32
  1432  007E44  20                 	db	32
  1433  007E45  47                 	db	71	;'G'
  1434  007E46  65                 	db	101	;'e'
  1435  007E47  74                 	db	116	;'t'
  1436  007E48  20                 	db	32
  1437  007E49  73                 	db	115	;'s'
  1438  007E4A  79                 	db	121	;'y'
  1439  007E4B  73                 	db	115	;'s'
  1440  007E4C  74                 	db	116	;'t'
  1441  007E4D  65                 	db	101	;'e'
  1442  007E4E  6D                 	db	109	;'m'
  1443  007E4F  20                 	db	32
  1444  007E50  73                 	db	115	;'s'
  1445  007E51  74                 	db	116	;'t'
  1446  007E52  61                 	db	97	;'a'
  1447  007E53  74                 	db	116	;'t'
  1448  007E54  75                 	db	117	;'u'
  1449  007E55  73                 	db	115	;'s'
  1450  007E56  2E                 	db	46
  1451  007E57  0D                 	db	13
  1452  007E58  0A                 	db	10
  1453  007E59  00                 	db	0
  1454  007E5A                     STR_42:
  1455                           
  1456                           ; BSR set to: 1
  1457  007E5A  24                 	db	36
  1458  007E5B  53                 	db	83	;'S'
  1459  007E5C  4C                 	db	76	;'L'
  1460  007E5D  20                 	db	32
  1461  007E5E  3C                 	db	60	;'<'
  1462  007E5F  63                 	db	99	;'c'
  1463  007E60  72                 	db	114	;'r'
  1464  007E61  3E                 	db	62	;'>'
  1465  007E62  20                 	db	32
  1466  007E63  20                 	db	32
  1467  007E64  20                 	db	32
  1468  007E65  20                 	db	32
  1469  007E66  20                 	db	32
  1470  007E67  20                 	db	32
  1471  007E68  20                 	db	32
  1472  007E69  20                 	db	32
  1473  007E6A  20                 	db	32
  1474  007E6B  54                 	db	84	;'T'
  1475  007E6C  65                 	db	101	;'e'
  1476  007E6D  73                 	db	115	;'s'
  1477  007E6E  74                 	db	116	;'t'
  1478  007E6F  20                 	db	32
  1479  007E70  73                 	db	115	;'s'
  1480  007E71  79                 	db	121	;'y'
  1481  007E72  73                 	db	115	;'s'
  1482  007E73  74                 	db	116	;'t'
  1483  007E74  65                 	db	101	;'e'
  1484  007E75  6D                 	db	109	;'m'
  1485  007E76  20                 	db	32
  1486  007E77  4C                 	db	76	;'L'
  1487  007E78  45                 	db	69	;'E'
  1488  007E79  44                 	db	68	;'D'
  1489  007E7A  73                 	db	115	;'s'
  1490  007E7B  2E                 	db	46
  1491  007E7C  0D                 	db	13
  1492  007E7D  0A                 	db	10
  1493  007E7E  00                 	db	0
  1494  007E7F                     STR_7:
  1495                           
  1496                           ; BSR set to: 1
  1497  007E7F  52                 	db	82	;'R'
  1498  007E80  58                 	db	88	;'X'
  1499  007E81  20                 	db	32
  1500  007E82  53                 	db	83	;'S'
  1501  007E83  41                 	db	65	;'A'
  1502  007E84  4D                 	db	77	;'M'
  1503  007E85  50                 	db	80	;'P'
  1504  007E86  4C                 	db	76	;'L'
  1505  007E87  45                 	db	69	;'E'
  1506  007E88  20                 	db	32
  1507  007E89  43                 	db	67	;'C'
  1508  007E8A  48                 	db	72	;'H'
  1509  007E8B  41                 	db	65	;'A'
  1510  007E8C  4E                 	db	78	;'N'
  1511  007E8D  4E                 	db	78	;'N'
  1512  007E8E  45                 	db	69	;'E'
  1513  007E8F  4C                 	db	76	;'L'
  1514  007E90  20                 	db	32
  1515  007E91  52                 	db	82	;'R'
  1516  007E92  58                 	db	88	;'X'
  1517  007E93  2D                 	db	45
  1518  007E94  41                 	db	65	;'A'
  1519  007E95  44                 	db	68	;'D'
  1520  007E96  43                 	db	67	;'C'
  1521  007E97  5F                 	db	95	;'_'
  1522  007E98  56                 	db	86	;'V'
  1523  007E99  47                 	db	71	;'G'
  1524  007E9A  5F                 	db	95	;'_'
  1525  007E9B  4D                 	db	77	;'M'
  1526  007E9C  4F                 	db	79	;'O'
  1527  007E9D  4E                 	db	78	;'N'
  1528  007E9E  0A                 	db	10
  1529  007E9F  0D                 	db	13
  1530  007EA0  00                 	db	0
  1531  007EA1                     STR_3:
  1532                           
  1533                           ; BSR set to: 1
  1534  007EA1  54                 	db	84	;'T'
  1535  007EA2  58                 	db	88	;'X'
  1536  007EA3  20                 	db	32
  1537  007EA4  53                 	db	83	;'S'
  1538  007EA5  41                 	db	65	;'A'
  1539  007EA6  4D                 	db	77	;'M'
  1540  007EA7  50                 	db	80	;'P'
  1541  007EA8  4C                 	db	76	;'L'
  1542  007EA9  45                 	db	69	;'E'
  1543  007EAA  20                 	db	32
  1544  007EAB  43                 	db	67	;'C'
  1545  007EAC  48                 	db	72	;'H'
  1546  007EAD  41                 	db	65	;'A'
  1547  007EAE  4E                 	db	78	;'N'
  1548  007EAF  4E                 	db	78	;'N'
  1549  007EB0  45                 	db	69	;'E'
  1550  007EB1  4C                 	db	76	;'L'
  1551  007EB2  3A                 	db	58	;':'
  1552  007EB3  20                 	db	32
  1553  007EB4  54                 	db	84	;'T'
  1554  007EB5  58                 	db	88	;'X'
  1555  007EB6  2D                 	db	45
  1556  007EB7  41                 	db	65	;'A'
  1557  007EB8  44                 	db	68	;'D'
  1558  007EB9  43                 	db	67	;'C'
  1559  007EBA  5F                 	db	95	;'_'
  1560  007EBB  52                 	db	82	;'R'
  1561  007EBC  52                 	db	82	;'R'
  1562  007EBD  45                 	db	69	;'E'
  1563  007EBE  56                 	db	86	;'V'
  1564  007EBF  0A                 	db	10
  1565  007EC0  0D                 	db	13
  1566  007EC1  00                 	db	0
  1567  007EC2                     STR_6:
  1568                           
  1569                           ; BSR set to: 1
  1570  007EC2  52                 	db	82	;'R'
  1571  007EC3  58                 	db	88	;'X'
  1572  007EC4  20                 	db	32
  1573  007EC5  53                 	db	83	;'S'
  1574  007EC6  41                 	db	65	;'A'
  1575  007EC7  4D                 	db	77	;'M'
  1576  007EC8  50                 	db	80	;'P'
  1577  007EC9  4C                 	db	76	;'L'
  1578  007ECA  45                 	db	69	;'E'
  1579  007ECB  20                 	db	32
  1580  007ECC  43                 	db	67	;'C'
  1581  007ECD  48                 	db	72	;'H'
  1582  007ECE  41                 	db	65	;'A'
  1583  007ECF  4E                 	db	78	;'N'
  1584  007ED0  4E                 	db	78	;'N'
  1585  007ED1  45                 	db	69	;'E'
  1586  007ED2  4C                 	db	76	;'L'
  1587  007ED3  20                 	db	32
  1588  007ED4  52                 	db	82	;'R'
  1589  007ED5  58                 	db	88	;'X'
  1590  007ED6  2D                 	db	45
  1591  007ED7  41                 	db	65	;'A'
  1592  007ED8  44                 	db	68	;'D'
  1593  007ED9  43                 	db	67	;'C'
  1594  007EDA  5F                 	db	95	;'_'
  1595  007EDB  46                 	db	70	;'F'
  1596  007EDC  46                 	db	70	;'F'
  1597  007EDD  57                 	db	87	;'W'
  1598  007EDE  52                 	db	82	;'R'
  1599  007EDF  0A                 	db	10
  1600  007EE0  0D                 	db	13
  1601  007EE1  00                 	db	0
  1602  007EE2                     STR_15:
  1603                           
  1604                           ; BSR set to: 1
  1605  007EE2  2A                 	db	42
  1606  007EE3  2A                 	db	42
  1607  007EE4  2A                 	db	42
  1608  007EE5  2A                 	db	42
  1609  007EE6  2A                 	db	42
  1610  007EE7  2A                 	db	42
  1611  007EE8  2A                 	db	42
  1612  007EE9  2A                 	db	42
  1613  007EEA  2A                 	db	42
  1614  007EEB  2A                 	db	42
  1615  007EEC  2A                 	db	42
  1616  007EED  2A                 	db	42
  1617  007EEE  2A                 	db	42
  1618  007EEF  2A                 	db	42
  1619  007EF0  2A                 	db	42
  1620  007EF1  2A                 	db	42
  1621  007EF2  2A                 	db	42
  1622  007EF3  2A                 	db	42
  1623  007EF4  2A                 	db	42
  1624  007EF5  2A                 	db	42
  1625  007EF6  2A                 	db	42
  1626  007EF7  2A                 	db	42
  1627  007EF8  2A                 	db	42
  1628  007EF9  2A                 	db	42
  1629  007EFA  2A                 	db	42
  1630  007EFB  2A                 	db	42
  1631  007EFC  2A                 	db	42
  1632  007EFD  20                 	db	32
  1633  007EFE  0A                 	db	10
  1634  007EFF  0D                 	db	13
  1635  007F00  00                 	db	0
  1636  007F01                     STR_37:
  1637                           
  1638                           ; BSR set to: 1
  1639  007F01  0A                 	db	10
  1640  007F02  0D                 	db	13
  1641  007F03  3C                 	db	60	;'<'
  1642  007F04  43                 	db	67	;'C'
  1643  007F05  6F                 	db	111	;'o'
  1644  007F06  6D                 	db	109	;'m'
  1645  007F07  6D                 	db	109	;'m'
  1646  007F08  6F                 	db	111	;'o'
  1647  007F09  6E                 	db	110	;'n'
  1648  007F0A  20                 	db	32
  1649  007F0B  73                 	db	115	;'s'
  1650  007F0C  79                 	db	121	;'y'
  1651  007F0D  73                 	db	115	;'s'
  1652  007F0E  74                 	db	116	;'t'
  1653  007F0F  65                 	db	101	;'e'
  1654  007F10  6D                 	db	109	;'m'
  1655  007F11  20                 	db	32
  1656  007F12  63                 	db	99	;'c'
  1657  007F13  6F                 	db	111	;'o'
  1658  007F14  6D                 	db	109	;'m'
  1659  007F15  6D                 	db	109	;'m'
  1660  007F16  61                 	db	97	;'a'
  1661  007F17  6E                 	db	110	;'n'
  1662  007F18  64                 	db	100	;'d'
  1663  007F19  73                 	db	115	;'s'
  1664  007F1A  3E                 	db	62	;'>'
  1665  007F1B  0A                 	db	10
  1666  007F1C  0D                 	db	13
  1667  007F1D  00                 	db	0
  1668  007F1E                     STR_4:
  1669                           
  1670                           ; BSR set to: 1
  1671  007F1E  54                 	db	84	;'T'
  1672  007F1F  58                 	db	88	;'X'
  1673  007F20  20                 	db	32
  1674  007F21  53                 	db	83	;'S'
  1675  007F22  41                 	db	65	;'A'
  1676  007F23  4D                 	db	77	;'M'
  1677  007F24  50                 	db	80	;'P'
  1678  007F25  4C                 	db	76	;'L'
  1679  007F26  45                 	db	69	;'E'
  1680  007F27  20                 	db	32
  1681  007F28  43                 	db	67	;'C'
  1682  007F29  48                 	db	72	;'H'
  1683  007F2A  41                 	db	65	;'A'
  1684  007F2B  4E                 	db	78	;'N'
  1685  007F2C  4E                 	db	78	;'N'
  1686  007F2D  45                 	db	69	;'E'
  1687  007F2E  4C                 	db	76	;'L'
  1688  007F2F  20                 	db	32
  1689  007F30  41                 	db	65	;'A'
  1690  007F31  44                 	db	68	;'D'
  1691  007F32  43                 	db	67	;'C'
  1692  007F33  5F                 	db	95	;'_'
  1693  007F34  46                 	db	70	;'F'
  1694  007F35  46                 	db	70	;'F'
  1695  007F36  57                 	db	87	;'W'
  1696  007F37  52                 	db	82	;'R'
  1697  007F38  0A                 	db	10
  1698  007F39  0D                 	db	13
  1699  007F3A  00                 	db	0
  1700  007F3B                     STR_30:
  1701                           
  1702                           ; BSR set to: 1
  1703  007F3B  0A                 	db	10
  1704  007F3C  0D                 	db	13
  1705  007F3D  3C                 	db	60	;'<'
  1706  007F3E  52                 	db	82	;'R'
  1707  007F3F  58                 	db	88	;'X'
  1708  007F40  20                 	db	32
  1709  007F41  73                 	db	115	;'s'
  1710  007F42  79                 	db	121	;'y'
  1711  007F43  73                 	db	115	;'s'
  1712  007F44  74                 	db	116	;'t'
  1713  007F45  65                 	db	101	;'e'
  1714  007F46  6D                 	db	109	;'m'
  1715  007F47  20                 	db	32
  1716  007F48  63                 	db	99	;'c'
  1717  007F49  6F                 	db	111	;'o'
  1718  007F4A  6D                 	db	109	;'m'
  1719  007F4B  6D                 	db	109	;'m'
  1720  007F4C  61                 	db	97	;'a'
  1721  007F4D  6E                 	db	110	;'n'
  1722  007F4E  64                 	db	100	;'d'
  1723  007F4F  73                 	db	115	;'s'
  1724  007F50  3E                 	db	62	;'>'
  1725  007F51  0A                 	db	10
  1726  007F52  0D                 	db	13
  1727  007F53  00                 	db	0
  1728  007F54                     STR_24:
  1729                           
  1730                           ; BSR set to: 1
  1731  007F54  3C                 	db	60	;'<'
  1732  007F55  54                 	db	84	;'T'
  1733  007F56  58                 	db	88	;'X'
  1734  007F57  20                 	db	32
  1735  007F58  73                 	db	115	;'s'
  1736  007F59  79                 	db	121	;'y'
  1737  007F5A  73                 	db	115	;'s'
  1738  007F5B  74                 	db	116	;'t'
  1739  007F5C  65                 	db	101	;'e'
  1740  007F5D  6D                 	db	109	;'m'
  1741  007F5E  20                 	db	32
  1742  007F5F  63                 	db	99	;'c'
  1743  007F60  6F                 	db	111	;'o'
  1744  007F61  6D                 	db	109	;'m'
  1745  007F62  6D                 	db	109	;'m'
  1746  007F63  61                 	db	97	;'a'
  1747  007F64  6E                 	db	110	;'n'
  1748  007F65  64                 	db	100	;'d'
  1749  007F66  73                 	db	115	;'s'
  1750  007F67  3E                 	db	62	;'>'
  1751  007F68  0A                 	db	10
  1752  007F69  0D                 	db	13
  1753  007F6A  00                 	db	0
  1754  007F6B                     STR_16:
  1755                           
  1756                           ; BSR set to: 1
  1757  007F6B  46                 	db	70	;'F'
  1758  007F6C  41                 	db	65	;'A'
  1759  007F6D  53                 	db	83	;'S'
  1760  007F6E  54                 	db	84	;'T'
  1761  007F6F  20                 	db	32
  1762  007F70  4C                 	db	76	;'L'
  1763  007F71  49                 	db	73	;'I'
  1764  007F72  4E                 	db	78	;'N'
  1765  007F73  4B                 	db	75	;'K'
  1766  007F74  20                 	db	32
  1767  007F75  53                 	db	83	;'S'
  1768  007F76  59                 	db	89	;'Y'
  1769  007F77  53                 	db	83	;'S'
  1770  007F78  54                 	db	84	;'T'
  1771  007F79  45                 	db	69	;'E'
  1772  007F7A  4D                 	db	77	;'M'
  1773  007F7B  20                 	db	32
  1774  007F7C  0A                 	db	10
  1775  007F7D  0D                 	db	13
  1776  007F7E  00                 	db	0
  1777  007F7F                     STR_21:
  1778                           
  1779                           ; BSR set to: 1
  1780  007F7F  43                 	db	67	;'C'
  1781  007F80  6F                 	db	111	;'o'
  1782  007F81  6D                 	db	109	;'m'
  1783  007F82  70                 	db	112	;'p'
  1784  007F83  69                 	db	105	;'i'
  1785  007F84  6C                 	db	108	;'l'
  1786  007F85  65                 	db	101	;'e'
  1787  007F86  20                 	db	32
  1788  007F87  74                 	db	116	;'t'
  1789  007F88  69                 	db	105	;'i'
  1790  007F89  6D                 	db	109	;'m'
  1791  007F8A  65                 	db	101	;'e'
  1792  007F8B  3A                 	db	58	;':'
  1793  007F8C  20                 	db	32
  1794  007F8D  25                 	db	37
  1795  007F8E  73                 	db	115	;'s'
  1796  007F8F  20                 	db	32
  1797  007F90  0A                 	db	10
  1798  007F91  0D                 	db	13
  1799  007F92  00                 	db	0
  1800  007F93                     STR_19:
  1801                           
  1802                           ; BSR set to: 1
  1803  007F93  43                 	db	67	;'C'
  1804  007F94  6F                 	db	111	;'o'
  1805  007F95  6D                 	db	109	;'m'
  1806  007F96  70                 	db	112	;'p'
  1807  007F97  69                 	db	105	;'i'
  1808  007F98  6C                 	db	108	;'l'
  1809  007F99  65                 	db	101	;'e'
  1810  007F9A  20                 	db	32
  1811  007F9B  64                 	db	100	;'d'
  1812  007F9C  61                 	db	97	;'a'
  1813  007F9D  74                 	db	116	;'t'
  1814  007F9E  65                 	db	101	;'e'
  1815  007F9F  3A                 	db	58	;':'
  1816  007FA0  20                 	db	32
  1817  007FA1  25                 	db	37
  1818  007FA2  73                 	db	115	;'s'
  1819  007FA3  20                 	db	32
  1820  007FA4  0A                 	db	10
  1821  007FA5  0D                 	db	13
  1822  007FA6  00                 	db	0
  1823  007FA7                     STR_17:
  1824                           
  1825                           ; BSR set to: 1
  1826  007FA7  53                 	db	83	;'S'
  1827  007FA8  57                 	db	87	;'W'
  1828  007FA9  20                 	db	32
  1829  007FAA  56                 	db	86	;'V'
  1830  007FAB  45                 	db	69	;'E'
  1831  007FAC  53                 	db	83	;'S'
  1832  007FAD  52                 	db	82	;'R'
  1833  007FAE  49                 	db	73	;'I'
  1834  007FAF  4F                 	db	79	;'O'
  1835  007FB0  4E                 	db	78	;'N'
  1836  007FB1  3A                 	db	58	;':'
  1837  007FB2  20                 	db	32
  1838  007FB3  25                 	db	37
  1839  007FB4  73                 	db	115	;'s'
  1840  007FB5  20                 	db	32
  1841  007FB6  0A                 	db	10
  1842  007FB7  0D                 	db	13
  1843  007FB8  00                 	db	0
  1844  007FB9                     STR_20:
  1845                           
  1846                           ; BSR set to: 1
  1847  007FB9  4D                 	db	77	;'M'
  1848  007FBA  61                 	db	97	;'a'
  1849  007FBB  72                 	db	114	;'r'
  1850  007FBC  20                 	db	32
  1851  007FBD  32                 	db	50	;'2'
  1852  007FBE  36                 	db	54	;'6'
  1853  007FBF  20                 	db	32
  1854  007FC0  32                 	db	50	;'2'
  1855  007FC1  30                 	db	48	;'0'
  1856  007FC2  31                 	db	49	;'1'
  1857  007FC3  38                 	db	56	;'8'
  1858  007FC4  00                 	db	0
  1859  007FC5                     STR_11:
  1860                           
  1861                           ; BSR set to: 1
  1862  007FC5  4E                 	db	78	;'N'
  1863  007FC6  4F                 	db	79	;'O'
  1864  007FC7  54                 	db	84	;'T'
  1865  007FC8  20                 	db	32
  1866  007FC9  4F                 	db	79	;'O'
  1867  007FCA  2E                 	db	46
  1868  007FCB  4B                 	db	75	;'K'
  1869  007FCC  20                 	db	32
  1870  007FCD  0A                 	db	10
  1871  007FCE  0D                 	db	13
  1872  007FCF  00                 	db	0
  1873  007FD0                     STR_1:
  1874                           
  1875                           ; BSR set to: 1
  1876  007FD0  4E                 	db	78	;'N'
  1877  007FD1  4F                 	db	79	;'O'
  1878  007FD2  54                 	db	84	;'T'
  1879  007FD3  20                 	db	32
  1880  007FD4  4F                 	db	79	;'O'
  1881  007FD5  4B                 	db	75	;'K'
  1882  007FD6  20                 	db	32
  1883  007FD7  0A                 	db	10
  1884  007FD8  0D                 	db	13
  1885  007FD9  00                 	db	0
  1886  007FDA                     STR_22:
  1887                           
  1888                           ; BSR set to: 1
  1889  007FDA  31                 	db	49	;'1'
  1890  007FDB  38                 	db	56	;'8'
  1891  007FDC  3A                 	db	58	;':'
  1892  007FDD  30                 	db	48	;'0'
  1893  007FDE  31                 	db	49	;'1'
  1894  007FDF  3A                 	db	58	;':'
  1895  007FE0  34                 	db	52	;'4'
  1896  007FE1  34                 	db	52	;'4'
  1897  007FE2  00                 	db	0
  1898  007FE3                     STR_10:
  1899                           
  1900                           ; BSR set to: 1
  1901  007FE3  0A                 	db	10
  1902  007FE4  0D                 	db	13
  1903  007FE5  20                 	db	32
  1904  007FE6  4F                 	db	79	;'O'
  1905  007FE7  4B                 	db	75	;'K'
  1906  007FE8  20                 	db	32
  1907  007FE9  0A                 	db	10
  1908  007FEA  0D                 	db	13
  1909  007FEB  00                 	db	0
  1910  007FEC                     STR_44:
  1911                           
  1912                           ; BSR set to: 1
  1913  007FEC  28                 	db	40
  1914  007FED  6E                 	db	110	;'n'
  1915  007FEE  75                 	db	117	;'u'
  1916  007FEF  6C                 	db	108	;'l'
  1917  007FF0  6C                 	db	108	;'l'
  1918  007FF1  29                 	db	41
  1919  007FF2  00                 	db	0
  1920  007FF3                     STR_18:
  1921                           
  1922                           ; BSR set to: 1
  1923  007FF3  31                 	db	49	;'1'
  1924  007FF4  5F                 	db	95	;'_'
  1925  007FF5  30                 	db	48	;'0'
  1926  007FF6  30                 	db	48	;'0'
  1927  007FF7  32                 	db	50	;'2'
  1928  007FF8  00                 	db	0
  1929  007FF9                     STR_9:
  1930                           
  1931                           ; BSR set to: 1
  1932  007FF9  25                 	db	37
  1933  007FFA  64                 	db	100	;'d'
  1934  007FFB  20                 	db	32
  1935  007FFC  09                 	db	9
  1936  007FFD  00                 	db	0
  1937  0000                     
  1938                           ; #config settings
  1939  007FFE  00                 	db	0	; dummy byte at the end
  1940  0000                     
  1941                           	psect	nvCOMRAM
  1942  000046                     __pnvCOMRAM:
  1943                           	opt stack 0
  1944  000046                     _timer0ReloadVal:
  1945                           	opt stack 0
  1946  000046                     	ds	2
  1947                           
  1948                           	psect	nvBANK0
  1949  0000FC                     __pnvBANK0:
  1950                           	opt stack 0
  1951  0000FC                     _TMR0_InterruptHandler:
  1952                           	opt stack 0
  1953  0000FC                     	ds	2
  1954  0000FE                     _eusart1TxBufferRemaining:
  1955                           	opt stack 0
  1956  0000FE                     	ds	1
  1957  0000                     _ANSELA	set	3896
  1958  0000                     _ANSELE	set	3900
  1959  0000                     _ANSELD	set	3899
  1960  0000                     _ANSELB	set	3897
  1961  0000                     _ANSELC	set	3898
  1962  0000                     _ADCON0bits	set	4034
  1963  0000                     _ADRESH	set	4036
  1964  0000                     _ADRESL	set	4035
  1965  0000                     _ADCON2	set	4032
  1966  0000                     _ADCON1	set	4033
  1967  0000                     _ADCON0	set	4034
  1968  0000                     _T0CONbits	set	4053
  1969  0000                     _T0CON	set	4053
  1970  0000                     _TMR0L	set	4054
  1971  0000                     _TMR0H	set	4055
  1972  0000                     _EEDATA	set	4008
  1973  0000                     _EEADR	set	4009
  1974  0000                     _EECON2	set	4007
  1975  0000                     _EECON1bits	set	4006
  1976  0000                     _TABLAT	set	4085
  1977  0000                     _TBLPTRL	set	4086
  1978  0000                     _TBLPTRH	set	4087
  1979  0000                     _TBLPTRU	set	4088
  1980  0000                     _INTCON2bits	set	4081
  1981  0000                     _WPUB	set	3937
  1982  0000                     _TRISD	set	3989
  1983  0000                     _TRISC	set	3988
  1984  0000                     _TRISB	set	3987
  1985  0000                     _TRISA	set	3986
  1986  0000                     _TRISE	set	3990
  1987  0000                     _LATC	set	3979
  1988  0000                     _LATB	set	3978
  1989  0000                     _LATA	set	3977
  1990  0000                     _LATD	set	3980
  1991  0000                     _LATE	set	3981
  1992  0000                     _RCREG1	set	4014
  1993  0000                     _RCSTA1bits	set	4011
  1994  0000                     _TXREG1	set	4013
  1995  0000                     _SPBRGH1	set	4016
  1996  0000                     _SPBRG1	set	4015
  1997  0000                     _TXSTA1	set	4012
  1998  0000                     _RCSTA1	set	4011
  1999  0000                     _BAUDCON1	set	4024
  2000  0000                     _PIR1bits	set	3998
  2001  0000                     _PIE1bits	set	3997
  2002  0000                     _PIR2bits	set	4001
  2003  0000                     _PIE2bits	set	4000
  2004  0000                     _RCONbits	set	4048
  2005  0000                     _OSCTUNE	set	3995
  2006  0000                     _OSCCON2	set	4050
  2007  0000                     _OSCCON	set	4051
  2008  0000                     _LATAbits	set	3977
  2009  0000                     _LATDbits	set	3980
  2010  0000                     _INTCONbits	set	4082
  2011  0000                     _IOCB	set	3938
  2012  0000                     _LATCbits	set	3979
  2013  0000                     _LATBbits	set	3978
  2014                           
  2015                           	psect	cinit
  2016  00228C                     __pcinit:
  2017                           	opt stack 0
  2018  00228C                     start_initialization:
  2019                           	opt stack 0
  2020  00228C                     __initialization:
  2021                           	opt stack 0
  2022                           
  2023                           ; Initialize objects allocated to BANK1 (12 bytes)
  2024                           ; load TBLPTR registers with __pidataBANK1
  2025  00228C  0EC0               	movlw	low __pidataBANK1
  2026  00228E  6EF6               	movwf	tblptrl,c
  2027  002290  0E31               	movlw	high __pidataBANK1
  2028  002292  6EF7               	movwf	tblptrh,c
  2029  002294  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2030  002296  6EF8               	movwf	tblptru,c
  2031  002298  EE01  F0D4         	lfsr	0,__pdataBANK1
  2032  00229C  EE10 F00C          	lfsr	1,12
  2033  0022A0                     copy_data0:
  2034  0022A0  0009               	tblrd		*+
  2035  0022A2  CFF5 FFEE          	movff	tablat,postinc0
  2036  0022A6  50E5               	movf	postdec1,w,c
  2037  0022A8  50E1               	movf	fsr1l,w,c
  2038  0022AA  E1FA               	bnz	copy_data0
  2039                           
  2040                           ; Initialize objects allocated to BANK0 (4 bytes)
  2041                           ; load TBLPTR registers with __pidataBANK0
  2042  0022AC  0EF4               	movlw	low __pidataBANK0
  2043  0022AE  6EF6               	movwf	tblptrl,c
  2044  0022B0  0E31               	movlw	high __pidataBANK0
  2045  0022B2  6EF7               	movwf	tblptrh,c
  2046  0022B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  2047  0022B6  6EF8               	movwf	tblptru,c
  2048  0022B8  EE00  F0F8         	lfsr	0,__pdataBANK0
  2049  0022BC  EE10 F004          	lfsr	1,4
  2050  0022C0                     copy_data1:
  2051  0022C0  0009               	tblrd		*+
  2052  0022C2  CFF5 FFEE          	movff	tablat,postinc0
  2053  0022C6  50E5               	movf	postdec1,w,c
  2054  0022C8  50E1               	movf	fsr1l,w,c
  2055  0022CA  E1FA               	bnz	copy_data1
  2056                           
  2057                           ; Initialize objects allocated to COMRAM (4 bytes)
  2058                           ; load TBLPTR registers with __pidataCOMRAM
  2059  0022CC  0EF0               	movlw	low __pidataCOMRAM
  2060  0022CE  6EF6               	movwf	tblptrl,c
  2061  0022D0  0E31               	movlw	high __pidataCOMRAM
  2062  0022D2  6EF7               	movwf	tblptrh,c
  2063  0022D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2064  0022D6  6EF8               	movwf	tblptru,c
  2065  0022D8  EE00  F042         	lfsr	0,__pdataCOMRAM
  2066  0022DC  EE10 F004          	lfsr	1,4
  2067  0022E0                     copy_data2:
  2068  0022E0  0009               	tblrd		*+
  2069  0022E2  CFF5 FFEE          	movff	tablat,postinc0
  2070  0022E6  50E5               	movf	postdec1,w,c
  2071  0022E8  50E1               	movf	fsr1l,w,c
  2072  0022EA  E1FA               	bnz	copy_data2
  2073                           
  2074                           ; Clear objects allocated to BANK2 (70 bytes)
  2075  0022EC  EE02  F000         	lfsr	0,__pbssBANK2
  2076  0022F0  0E46               	movlw	70
  2077  0022F2                     clear_0:
  2078  0022F2  6AEE               	clrf	postinc0,c
  2079  0022F4  06E8               	decf	wreg,f,c
  2080  0022F6  E1FD               	bnz	clear_0
  2081                           
  2082                           ; Clear objects allocated to BANK1 (155 bytes)
  2083  0022F8  EE01  F000         	lfsr	0,__pbssBANK1
  2084  0022FC  0E9B               	movlw	155
  2085  0022FE                     clear_1:
  2086  0022FE  6AEE               	clrf	postinc0,c
  2087  002300  06E8               	decf	wreg,f,c
  2088  002302  E1FD               	bnz	clear_1
  2089                           
  2090                           ; Clear objects allocated to BANK0 (16 bytes)
  2091  002304  EE00  F0E8         	lfsr	0,__pbssBANK0
  2092  002308  0E10               	movlw	16
  2093  00230A                     clear_2:
  2094  00230A  6AEE               	clrf	postinc0,c
  2095  00230C  06E8               	decf	wreg,f,c
  2096  00230E  E1FD               	bnz	clear_2
  2097                           
  2098                           ; Clear objects allocated to COMRAM (17 bytes)
  2099  002310  EE00  F031         	lfsr	0,__pbssCOMRAM
  2100  002314  0E11               	movlw	17
  2101  002316                     clear_3:
  2102  002316  6AEE               	clrf	postinc0,c
  2103  002318  06E8               	decf	wreg,f,c
  2104  00231A  E1FD               	bnz	clear_3
  2105  00231C                     end_of_initialization:
  2106                           	opt stack 0
  2107  00231C                     __end_of__initialization:
  2108                           	opt stack 0
  2109  00231C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2110  00231E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2111  002320  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2112  002322  6EF8               	movwf	tblptru,c
  2113  002324  0100               	movlb	0
  2114  002326  EF66  F013         	goto	_main	;jump to C main() function
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           postinc0	equ	0xFEE
  2120                           wreg	equ	0xFE8
  2121                           postdec1	equ	0xFE5
  2122                           fsr1l	equ	0xFE1
  2123                           
  2124                           	psect	bssCOMRAM
  2125  000031                     __pbssCOMRAM:
  2126                           	opt stack 0
  2127  000031                     _numOfValidateSamples:
  2128                           	opt stack 0
  2129  000031                     	ds	4
  2130  000035                     TMR0_ISR@CountCallBack:
  2131                           	opt stack 0
  2132  000035                     	ds	2
  2133  000037                     _eusart1RxTail:
  2134                           	opt stack 0
  2135  000037                     	ds	1
  2136  000038                     _eusart1RxHead:
  2137                           	opt stack 0
  2138  000038                     	ds	1
  2139  000039                     _eusart1TxTail:
  2140                           	opt stack 0
  2141  000039                     	ds	1
  2142  00003A                     _eusart1TxHead:
  2143                           	opt stack 0
  2144  00003A                     	ds	1
  2145  00003B                     _isReWriteDone:
  2146                           	opt stack 0
  2147  00003B                     	ds	1
  2148  00003C                     _channel:
  2149                           	opt stack 0
  2150  00003C                     	ds	1
  2151  00003D                     _adcSampleMode:
  2152                           	opt stack 0
  2153  00003D                     	ds	1
  2154  00003E                     _numOfReadSamples:
  2155                           	opt stack 0
  2156  00003E                     	ds	4
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           
  2166                           	psect	dataCOMRAM
  2167  000042                     __pdataCOMRAM:
  2168                           	opt stack 0
  2169  000042                     _writeAddress:
  2170                           	opt stack 0
  2171  000042                     	ds	4
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           postinc0	equ	0xFEE
  2177                           wreg	equ	0xFE8
  2178                           postdec1	equ	0xFE5
  2179                           fsr1l	equ	0xFE1
  2180                           
  2181                           	psect	bssBANK0
  2182  0000E8                     __pbssBANK0:
  2183                           	opt stack 0
  2184  0000E8                     _mcuRunTimeIn5SecTicks:
  2185                           	opt stack 0
  2186  0000E8                     	ds	4
  2187  0000EC                     _errno:
  2188                           	opt stack 0
  2189  0000EC                     	ds	2
  2190  0000EE                     _sampleCount:
  2191                           	opt stack 0
  2192  0000EE                     	ds	2
  2193  0000F0                     _channelNum:
  2194                           	opt stack 0
  2195  0000F0                     	ds	2
  2196  0000F2                     _numSamples:
  2197                           	opt stack 0
  2198  0000F2                     	ds	2
  2199  0000F4                     _count:
  2200                           	opt stack 0
  2201  0000F4                     	ds	2
  2202  0000F6                     _crcGiven:
  2203                           	opt stack 0
  2204  0000F6                     	ds	1
  2205  0000F7                     _crcCalc:
  2206                           	opt stack 0
  2207  0000F7                     	ds	1
  2208                           tblptru	equ	0xFF8
  2209                           tblptrh	equ	0xFF7
  2210                           tblptrl	equ	0xFF6
  2211                           tablat	equ	0xFF5
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           postdec1	equ	0xFE5
  2215                           fsr1l	equ	0xFE1
  2216                           
  2217                           	psect	dataBANK0
  2218  0000F8                     __pdataBANK0:
  2219                           	opt stack 0
  2220  0000F8                     _readAddress:
  2221                           	opt stack 0
  2222  0000F8                     	ds	4
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           fsr1l	equ	0xFE1
  2231                           
  2232                           	psect	bssBANK1
  2233  000100                     __pbssBANK1:
  2234                           	opt stack 0
  2235  000100                     _eusart1RxBuffer:
  2236                           	opt stack 0
  2237  000100                     	ds	40
  2238  000128                     _msgCount:
  2239                           	opt stack 0
  2240  000128                     	ds	1
  2241  000129                     _dataSize:
  2242                           	opt stack 0
  2243  000129                     	ds	1
  2244  00012A                     _request:
  2245                           	opt stack 0
  2246  00012A                     	ds	1
  2247  00012B                     _group:
  2248                           	opt stack 0
  2249  00012B                     	ds	1
  2250  00012C                     _cState:
  2251                           	opt stack 0
  2252  00012C                     	ds	1
  2253  00012D                     _eusart1RxCount:
  2254                           	opt stack 0
  2255  00012D                     	ds	1
  2256  00012E                     _needToSample:
  2257                           	opt stack 0
  2258  00012E                     	ds	1
  2259  00012F                     _TimertenSecFlag:
  2260                           	opt stack 0
  2261  00012F                     	ds	1
  2262  000130                     _TimerKeepAliveFlag:
  2263                           	opt stack 0
  2264  000130                     	ds	1
  2265  000131                     _TimerSamplingFlag:
  2266                           	opt stack 0
  2267  000131                     	ds	1
  2268  000132                     _TimerOneSecFlag:
  2269                           	opt stack 0
  2270  000132                     	ds	1
  2271  000133                     _sampleArray:
  2272                           	opt stack 0
  2273  000133                     	ds	64
  2274  000173                     _rxMsgData:
  2275                           	opt stack 0
  2276  000173                     	ds	20
  2277  000187                     _rxMsgQueue:
  2278                           	opt stack 0
  2279  000187                     	ds	20
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           
  2289                           	psect	dataBANK1
  2290  0001D4                     __pdataBANK1:
  2291                           	opt stack 0
  2292  0001D4                     _groupsArray:
  2293                           	opt stack 0
  2294  0001D4                     	ds	12
  2295                           tblptru	equ	0xFF8
  2296                           tblptrh	equ	0xFF7
  2297                           tblptrl	equ	0xFF6
  2298                           tablat	equ	0xFF5
  2299                           postinc0	equ	0xFEE
  2300                           wreg	equ	0xFE8
  2301                           postdec1	equ	0xFE5
  2302                           fsr1l	equ	0xFE1
  2303                           
  2304                           	psect	bssBANK2
  2305  000200                     __pbssBANK2:
  2306                           	opt stack 0
  2307  000200                     _eusart1TxBuffer:
  2308                           	opt stack 0
  2309  000200                     	ds	70
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           
  2319                           	psect	cstackBANK1
  2320  00019B                     __pcstackBANK1:
  2321                           	opt stack 0
  2322  00019B                     SampleSingleChannel@dest:
  2323                           	opt stack 0
  2324  00019B                     readUartByte@dest:
  2325                           	opt stack 0
  2326                           
  2327                           ; 50 bytes @ 0x0
  2328  00019B                     	ds	50
  2329  0001CD                     readUartByte@idx:
  2330                           	opt stack 0
  2331  0001CD                     _SampleSingleChannel$3064:
  2332                           	opt stack 0
  2333                           
  2334                           ; 3 bytes @ 0x32
  2335  0001CD                     	ds	2
  2336  0001CF                     readUartByte@chRec:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x34
  2340  0001CF                     	ds	1
  2341  0001D0                     SampleSingleChannel@_adcResult:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x35
  2345  0001D0                     	ds	2
  2346  0001D2                     SampleSingleChannel@adcRes:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x37
  2350  0001D2                     	ds	2
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           
  2360                           	psect	cstackBANK0
  2361  000060                     __pcstackBANK0:
  2362                           	opt stack 0
  2363  000060                     ?___ftmul:
  2364                           	opt stack 0
  2365  000060                     ?___ftsub:
  2366                           	opt stack 0
  2367  000060                     sprintf@flag:
  2368                           	opt stack 0
  2369  000060                     strtol@sign:
  2370                           	opt stack 0
  2371  000060                     ___ftmul@f1:
  2372                           	opt stack 0
  2373  000060                     ___ftsub@f1:
  2374                           	opt stack 0
  2375  000060                     SWSPI_Synth_send_bits@bitArray:
  2376                           	opt stack 0
  2377                           
  2378                           ; 32 bytes @ 0x0
  2379  000060                     	ds	1
  2380  000061                     sprintf@prec:
  2381                           	opt stack 0
  2382  000061                     strtol@a:
  2383                           	opt stack 0
  2384                           
  2385                           ; 4 bytes @ 0x1
  2386  000061                     	ds	1
  2387  000062                     sprintf@ap:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x2
  2391  000062                     	ds	1
  2392  000063                     ___ftmul@f2:
  2393                           	opt stack 0
  2394  000063                     ___ftsub@f2:
  2395                           	opt stack 0
  2396                           
  2397                           ; 3 bytes @ 0x3
  2398  000063                     	ds	1
  2399  000064                     sprintf@cp:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x4
  2403  000064                     	ds	1
  2404  000065                     strtol@c:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x5
  2408  000065                     	ds	1
  2409  000066                     ??___ftmul:
  2410  000066                     ?_GetIntFromUartData:
  2411                           	opt stack 0
  2412  000066                     GetIntFromUartData@data:
  2413                           	opt stack 0
  2414  000066                     sprintf@val:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x6
  2418  000066                     	ds	2
  2419  000068                     sprintf@c:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0x8
  2423  000068                     	ds	1
  2424  000069                     ___ftmul@exp:
  2425                           	opt stack 0
  2426  000069                     SendUartSystemInitMessage@dest:
  2427                           	opt stack 0
  2428  000069                     PrintHelpScreen@dest:
  2429                           	opt stack 0
  2430                           
  2431                           ; 50 bytes @ 0x9
  2432  000069                     	ds	1
  2433  00006A                     ??_GetIntFromUartData:
  2434  00006A                     ___ftmul@f3_as_product:
  2435                           	opt stack 0
  2436                           
  2437                           ; 3 bytes @ 0xA
  2438  00006A                     	ds	2
  2439  00006C                     GetIntFromUartData@dataRegArr:
  2440                           	opt stack 0
  2441                           
  2442                           ; 8 bytes @ 0xC
  2443  00006C                     	ds	1
  2444  00006D                     ___ftmul@cntr:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0xD
  2448  00006D                     	ds	1
  2449  00006E                     ___ftmul@sign:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0xE
  2453  00006E                     	ds	1
  2454  00006F                     ?___ftdiv:
  2455                           	opt stack 0
  2456  00006F                     ?_eval_poly:
  2457                           	opt stack 0
  2458  00006F                     ___ftdiv@f1:
  2459                           	opt stack 0
  2460  00006F                     eval_poly@x:
  2461                           	opt stack 0
  2462                           
  2463                           ; 3 bytes @ 0xF
  2464  00006F                     	ds	3
  2465  000072                     eval_poly@d:
  2466                           	opt stack 0
  2467  000072                     ___ftdiv@f2:
  2468                           	opt stack 0
  2469                           
  2470                           ; 3 bytes @ 0x12
  2471  000072                     	ds	2
  2472  000074                     GetIntFromUartData@c:
  2473                           	opt stack 0
  2474  000074                     eval_poly@n:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x14
  2478  000074                     	ds	1
  2479  000075                     ??___ftdiv:
  2480  000075                     GetIntFromUartData@idx:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x15
  2484  000075                     	ds	1
  2485  000076                     ??_eval_poly:
  2486                           
  2487                           ; 1 bytes @ 0x16
  2488  000076                     	ds	2
  2489  000078                     ___ftdiv@cntr:
  2490                           	opt stack 0
  2491  000078                     eval_poly@res:
  2492                           	opt stack 0
  2493                           
  2494                           ; 3 bytes @ 0x18
  2495  000078                     	ds	1
  2496  000079                     ___ftdiv@f3:
  2497                           	opt stack 0
  2498                           
  2499                           ; 3 bytes @ 0x19
  2500  000079                     	ds	2
  2501  00007B                     ?_log:
  2502                           	opt stack 0
  2503  00007B                     ?_ldexp:
  2504                           	opt stack 0
  2505  00007B                     ldexp@value:
  2506                           	opt stack 0
  2507  00007B                     log@x:
  2508                           	opt stack 0
  2509                           
  2510                           ; 3 bytes @ 0x1B
  2511  00007B                     	ds	1
  2512  00007C                     ___ftdiv@exp:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x1C
  2516  00007C                     	ds	1
  2517  00007D                     ___ftdiv@sign:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x1D
  2521  00007D                     	ds	1
  2522  00007E                     ?___fttol:
  2523                           	opt stack 0
  2524  00007E                     ldexp@newexp:
  2525                           	opt stack 0
  2526  00007E                     log@exponent:
  2527                           	opt stack 0
  2528  00007E                     ___fttol@f1:
  2529                           	opt stack 0
  2530                           
  2531                           ; 3 bytes @ 0x1E
  2532  00007E                     	ds	2
  2533  000080                     ??_ldexp:
  2534  000080                     SWSPI_Synth_send_bits@mask:
  2535                           	opt stack 0
  2536                           
  2537                           ; 4 bytes @ 0x20
  2538  000080                     	ds	2
  2539  000082                     ??___fttol:
  2540                           
  2541                           ; 1 bytes @ 0x22
  2542  000082                     	ds	2
  2543  000084                     SWSPI_Synth_send_bits@count:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x24
  2547  000084                     	ds	1
  2548  000085                     SWSPI_Synth_send_bits@phrType:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x25
  2552  000085                     	ds	1
  2553  000086                     ??_PLLInitialize:
  2554                           
  2555                           ; 1 bytes @ 0x26
  2556  000086                     	ds	1
  2557  000087                     ___fttol@sign1:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x27
  2561  000087                     	ds	1
  2562  000088                     PLLInitialize@idx:
  2563                           	opt stack 0
  2564  000088                     ___fttol@lval:
  2565                           	opt stack 0
  2566                           
  2567                           ; 4 bytes @ 0x28
  2568  000088                     	ds	2
  2569  00008A                     PLLInitialize@idx_670:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x2A
  2573  00008A                     	ds	2
  2574  00008C                     ___fttol@exp1:
  2575                           	opt stack 0
  2576                           
  2577                           ; 1 bytes @ 0x2C
  2578  00008C                     	ds	1
  2579  00008D                     ?___altoft:
  2580                           	opt stack 0
  2581  00008D                     ___altoft@c:
  2582                           	opt stack 0
  2583                           
  2584                           ; 4 bytes @ 0x2D
  2585  00008D                     	ds	4
  2586  000091                     ??___altoft:
  2587                           
  2588                           ; 1 bytes @ 0x31
  2589  000091                     	ds	4
  2590  000095                     ___altoft@exp:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x35
  2594  000095                     	ds	1
  2595  000096                     ___altoft@sign:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x36
  2599  000096                     	ds	1
  2600  000097                     ?_floor:
  2601                           	opt stack 0
  2602  000097                     floor@x:
  2603                           	opt stack 0
  2604                           
  2605                           ; 3 bytes @ 0x37
  2606  000097                     	ds	3
  2607  00009A                     floor@i:
  2608                           	opt stack 0
  2609                           
  2610                           ; 3 bytes @ 0x3A
  2611  00009A                     	ds	3
  2612  00009D                     floor@expon:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x3D
  2616  00009D                     	ds	2
  2617  00009F                     ?_exp:
  2618                           	opt stack 0
  2619  00009F                     exp@x:
  2620                           	opt stack 0
  2621                           
  2622                           ; 3 bytes @ 0x3F
  2623  00009F                     	ds	3
  2624  0000A2                     _exp$3076:
  2625                           	opt stack 0
  2626                           
  2627                           ; 3 bytes @ 0x42
  2628  0000A2                     	ds	3
  2629  0000A5                     exp@exponent:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x45
  2633  0000A5                     	ds	2
  2634  0000A7                     exp@sign:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x47
  2638  0000A7                     	ds	1
  2639  0000A8                     ?_pow:
  2640                           	opt stack 0
  2641  0000A8                     pow@x:
  2642                           	opt stack 0
  2643                           
  2644                           ; 3 bytes @ 0x48
  2645  0000A8                     	ds	3
  2646  0000AB                     pow@y:
  2647                           	opt stack 0
  2648                           
  2649                           ; 3 bytes @ 0x4B
  2650  0000AB                     	ds	3
  2651  0000AE                     _pow$3074:
  2652                           	opt stack 0
  2653                           
  2654                           ; 3 bytes @ 0x4E
  2655  0000AE                     	ds	3
  2656  0000B1                     _pow$3075:
  2657                           	opt stack 0
  2658                           
  2659                           ; 3 bytes @ 0x51
  2660  0000B1                     	ds	3
  2661  0000B4                     pow@sign:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x54
  2665  0000B4                     	ds	1
  2666  0000B5                     pow@yi:
  2667                           	opt stack 0
  2668                           
  2669                           ; 4 bytes @ 0x55
  2670  0000B5                     	ds	4
  2671  0000B9                     ??_SampleSingleChannel:
  2672  0000B9                     ?_DacAnalogToDigitalSpi:
  2673                           	opt stack 0
  2674  0000B9                     ?_ReadIntFromEeprom:
  2675                           	opt stack 0
  2676  0000B9                     ?___llmod:
  2677                           	opt stack 0
  2678  0000B9                     DacAnalogToDigitalSpi@AnalogValMili:
  2679                           	opt stack 0
  2680  0000B9                     ReadIntFromEeprom@numOfByes:
  2681                           	opt stack 0
  2682  0000B9                     _SampleVgMonChannel$3065:
  2683                           	opt stack 0
  2684  0000B9                     ___llmod@dividend:
  2685                           	opt stack 0
  2686                           
  2687                           ; 4 bytes @ 0x59
  2688  0000B9                     	ds	2
  2689  0000BB                     DacAnalogToDigitalSpi@dacNum:
  2690                           	opt stack 0
  2691                           
  2692                           ; 1 bytes @ 0x5B
  2693  0000BB                     	ds	1
  2694  0000BC                     ??_DacAnalogToDigitalSpi:
  2695  0000BC                     SampleVgMonChannel@_adcResult:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x5C
  2699  0000BC                     	ds	1
  2700  0000BD                     ??_ReadIntFromEeprom:
  2701  0000BD                     ___llmod@divisor:
  2702                           	opt stack 0
  2703                           
  2704                           ; 4 bytes @ 0x5D
  2705  0000BD                     	ds	1
  2706  0000BE                     SampleVgMonChannel@adcRes:
  2707                           	opt stack 0
  2708                           
  2709                           ; 2 bytes @ 0x5E
  2710  0000BE                     	ds	2
  2711  0000C0                     _DacAnalogToDigitalSpi$3068:
  2712                           	opt stack 0
  2713  0000C0                     ReadIntFromEeprom@base:
  2714                           	opt stack 0
  2715                           
  2716                           ; 4 bytes @ 0x60
  2717  0000C0                     	ds	1
  2718  0000C1                     AdcSingleSample@data:
  2719                           	opt stack 0
  2720                           
  2721                           ; 2 bytes @ 0x61
  2722  0000C1                     	ds	2
  2723  0000C3                     ??_AdcSingleSample:
  2724  0000C3                     _DacAnalogToDigitalSpi$3069:
  2725                           	opt stack 0
  2726                           
  2727                           ; 3 bytes @ 0x63
  2728  0000C3                     	ds	1
  2729  0000C4                     _AdcSingleSample$3062:
  2730                           	opt stack 0
  2731  0000C4                     _ReadIntFromEeprom$3072:
  2732                           	opt stack 0
  2733                           
  2734                           ; 3 bytes @ 0x64
  2735  0000C4                     	ds	2
  2736  0000C6                     _DacAnalogToDigitalSpi$3070:
  2737                           	opt stack 0
  2738                           
  2739                           ; 3 bytes @ 0x66
  2740  0000C6                     	ds	1
  2741  0000C7                     _AdcSingleSample$3063:
  2742                           	opt stack 0
  2743  0000C7                     _ReadIntFromEeprom$3073:
  2744                           	opt stack 0
  2745                           
  2746                           ; 3 bytes @ 0x67
  2747  0000C7                     	ds	2
  2748  0000C9                     _DacAnalogToDigitalSpi$3071:
  2749                           	opt stack 0
  2750                           
  2751                           ; 3 bytes @ 0x69
  2752  0000C9                     	ds	1
  2753  0000CA                     ReadIntFromEeprom@address:
  2754                           	opt stack 0
  2755  0000CA                     AdcSingleSample@retNum:
  2756                           	opt stack 0
  2757                           
  2758                           ; 4 bytes @ 0x6A
  2759  0000CA                     	ds	1
  2760  0000CB                     ReadIntFromEeprom@retVal:
  2761                           	opt stack 0
  2762                           
  2763                           ; 4 bytes @ 0x6B
  2764  0000CB                     	ds	1
  2765  0000CC                     DacAnalogToDigitalSpi@dacDigital:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0x6C
  2769  0000CC                     	ds	2
  2770  0000CE                     AdcSingleSample@cType:
  2771                           	opt stack 0
  2772  0000CE                     DacAnalogToDigitalSpi@dacSpiVal:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x6E
  2776  0000CE                     	ds	1
  2777  0000CF                     ReadIntFromEeprom@idx:
  2778                           	opt stack 0
  2779                           
  2780                           ; 1 bytes @ 0x6F
  2781  0000CF                     	ds	1
  2782  0000D0                     ??_DacInit:
  2783  0000D0                     DacSetValue@data:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0x70
  2787  0000D0                     	ds	2
  2788  0000D2                     ??_DacSetValue:
  2789  0000D2                     DacInit@dacInput:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x72
  2793  0000D2                     	ds	1
  2794  0000D3                     DacSetValue@retNum:
  2795                           	opt stack 0
  2796                           
  2797                           ; 4 bytes @ 0x73
  2798  0000D3                     	ds	1
  2799  0000D4                     DacInit@idx:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x74
  2803  0000D4                     	ds	3
  2804  0000D7                     _DacSetValue$3066:
  2805                           	opt stack 0
  2806                           
  2807                           ; 3 bytes @ 0x77
  2808  0000D7                     	ds	3
  2809  0000DA                     _DacSetValue$3067:
  2810                           	opt stack 0
  2811                           
  2812                           ; 3 bytes @ 0x7A
  2813  0000DA                     	ds	3
  2814  0000DD                     DacSetValue@dacAnalog:
  2815                           	opt stack 0
  2816                           
  2817                           ; 2 bytes @ 0x7D
  2818  0000DD                     	ds	2
  2819  0000DF                     DacSetValue@dacDigital:
  2820                           	opt stack 0
  2821                           
  2822                           ; 2 bytes @ 0x7F
  2823  0000DF                     	ds	2
  2824  0000E1                     DacSetValue@dacNum:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x81
  2828  0000E1                     	ds	1
  2829  0000E2                     GroupRx@data:
  2830                           	opt stack 0
  2831  0000E2                     GroupTx@data:
  2832                           	opt stack 0
  2833  0000E2                     GroupCommon@data:
  2834                           	opt stack 0
  2835                           
  2836                           ; 2 bytes @ 0x82
  2837  0000E2                     	ds	2
  2838  0000E4                     GroupRx@request:
  2839                           	opt stack 0
  2840  0000E4                     GroupTx@request:
  2841                           	opt stack 0
  2842  0000E4                     GroupCommon@request:
  2843                           	opt stack 0
  2844                           
  2845                           ; 1 bytes @ 0x84
  2846  0000E4                     	ds	1
  2847  0000E5                     ??_readUartByte:
  2848                           
  2849                           ; 1 bytes @ 0x85
  2850  0000E5                     	ds	3
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           
  2860                           	psect	cstackCOMRAM
  2861  000001                     __pcstackCOMRAM:
  2862                           	opt stack 0
  2863  000001                     ?i2___lwmod:
  2864                           	opt stack 0
  2865  000001                     i2___lwmod@dividend:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x0
  2869  000001                     	ds	2
  2870  000003                     i2___lwmod@divisor:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x2
  2874  000003                     	ds	2
  2875  000005                     i2___lwmod@counter:
  2876                           	opt stack 0
  2877                           
  2878                           ; 1 bytes @ 0x4
  2879  000005                     	ds	1
  2880  000006                     ??_INTERRUPT_InterruptManager:
  2881                           
  2882                           ; 1 bytes @ 0x5
  2883  000006                     	ds	18
  2884  000018                     ??_EUSART1_Read:
  2885  000018                     ??_isspace:
  2886  000018                     ??_isdigit:
  2887  000018                     ??_isupper:
  2888  000018                     ??_BlinkOkLeds:
  2889  000018                     ??_keepAliveSignalLed:
  2890  000018                     ??_testLeds:
  2891  000018                     ?_ADC_GetConversion:
  2892                           	opt stack 0
  2893  000018                     ?___wmul:
  2894                           	opt stack 0
  2895  000018                     ?___lwdiv:
  2896                           	opt stack 0
  2897  000018                     ?___ftpack:
  2898                           	opt stack 0
  2899  000018                     ?_frexp:
  2900                           	opt stack 0
  2901  000018                     ?___ftneg:
  2902                           	opt stack 0
  2903  000018                     SwSpi_Data_Pin@cPinMode:
  2904                           	opt stack 0
  2905  000018                     SwSpi_Clk_Pin@cPinMode:
  2906                           	opt stack 0
  2907  000018                     SwSpi_Set_CE_Pin@cPinMode:
  2908                           	opt stack 0
  2909  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2910                           	opt stack 0
  2911  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2912                           	opt stack 0
  2913  000018                     EUSART1_Write@txData:
  2914                           	opt stack 0
  2915  000018                     DATAEE_WriteByte@bData:
  2916                           	opt stack 0
  2917  000018                     DATAEE_ReadByte@bAdd:
  2918                           	opt stack 0
  2919  000018                     toupper@c:
  2920                           	opt stack 0
  2921  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2922                           	opt stack 0
  2923  000018                     Make32bitsArray@array:
  2924                           	opt stack 0
  2925  000018                     ___wmul@multiplier:
  2926                           	opt stack 0
  2927  000018                     ___lwdiv@dividend:
  2928                           	opt stack 0
  2929  000018                     memset@p1:
  2930                           	opt stack 0
  2931  000018                     ___ftpack@arg:
  2932                           	opt stack 0
  2933  000018                     ___ftge@ff1:
  2934                           	opt stack 0
  2935  000018                     ___ftneg@f1:
  2936                           	opt stack 0
  2937  000018                     frexp@value:
  2938                           	opt stack 0
  2939  000018                     make8@data:
  2940                           	opt stack 0
  2941                           
  2942                           ; 4 bytes @ 0x17
  2943  000018                     	ds	1
  2944  000019                     EepromRead@address:
  2945                           	opt stack 0
  2946  000019                     SwSpi_Data_Pin@phrType:
  2947                           	opt stack 0
  2948  000019                     SwSpi_Clk_Pin@phrType:
  2949                           	opt stack 0
  2950  000019                     SwSpi_Set_CE_Pin@phrType:
  2951                           	opt stack 0
  2952  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2953                           	opt stack 0
  2954  000019                     DATAEE_WriteByte@bAdd:
  2955                           	opt stack 0
  2956  000019                     _isdigit$2742:
  2957                           	opt stack 0
  2958  000019                     _isspace$2745:
  2959                           	opt stack 0
  2960  000019                     _isupper$2748:
  2961                           	opt stack 0
  2962  000019                     testLeds@idx:
  2963                           	opt stack 0
  2964  000019                     UART_Write_Text@text:
  2965                           	opt stack 0
  2966  000019                     EUSART1_Read@readValue:
  2967                           	opt stack 0
  2968                           
  2969                           ; 2 bytes @ 0x18
  2970  000019                     	ds	1
  2971  00001A                     ??_ADC_GetConversion:
  2972  00001A                     ??_TMR0_Initialize:
  2973  00001A                     ?___lmul:
  2974                           	opt stack 0
  2975  00001A                     SWSPI_DAC_send_bits@data:
  2976                           	opt stack 0
  2977  00001A                     DATAEE_WriteByte@GIEBitValue:
  2978                           	opt stack 0
  2979  00001A                     isdigit@c:
  2980                           	opt stack 0
  2981  00001A                     isspace@c:
  2982                           	opt stack 0
  2983  00001A                     isupper@c:
  2984                           	opt stack 0
  2985  00001A                     ___wmul@multiplicand:
  2986                           	opt stack 0
  2987  00001A                     ___lwdiv@divisor:
  2988                           	opt stack 0
  2989  00001A                     memset@c:
  2990                           	opt stack 0
  2991  00001A                     Make32bitsArray@data:
  2992                           	opt stack 0
  2993  00001A                     ___lmul@multiplier:
  2994                           	opt stack 0
  2995                           
  2996                           ; 4 bytes @ 0x19
  2997  00001A                     	ds	1
  2998  00001B                     ??_UART_Write_Text:
  2999  00001B                     ??_isalpha:
  3000  00001B                     BlinkOkLeds@state:
  3001                           	opt stack 0
  3002  00001B                     EepromWrite@data:
  3003                           	opt stack 0
  3004  00001B                     SWSPI_DAC_send_bits@count:
  3005                           	opt stack 0
  3006  00001B                     ___ftpack@exp:
  3007                           	opt stack 0
  3008  00001B                     frexp@eptr:
  3009                           	opt stack 0
  3010  00001B                     ___ftge@ff2:
  3011                           	opt stack 0
  3012                           
  3013                           ; 3 bytes @ 0x1A
  3014  00001B                     	ds	1
  3015  00001C                     EepromWrite@address:
  3016                           	opt stack 0
  3017  00001C                     SWSPI_DAC_send_bits@phrType:
  3018                           	opt stack 0
  3019  00001C                     ADC_GetConversion@channel:
  3020                           	opt stack 0
  3021  00001C                     make8@dataLocation:
  3022                           	opt stack 0
  3023  00001C                     ___ftpack@sign:
  3024                           	opt stack 0
  3025  00001C                     ___lwdiv@counter:
  3026                           	opt stack 0
  3027  00001C                     _isalpha$2739:
  3028                           	opt stack 0
  3029  00001C                     BlinkOkLeds@idx:
  3030                           	opt stack 0
  3031  00001C                     ___wmul@product:
  3032                           	opt stack 0
  3033  00001C                     memset@n:
  3034                           	opt stack 0
  3035                           
  3036                           ; 2 bytes @ 0x1B
  3037  00001C                     	ds	1
  3038  00001D                     ??_make8:
  3039  00001D                     ??___ftpack:
  3040  00001D                     ??_frexp:
  3041  00001D                     isalpha@c:
  3042                           	opt stack 0
  3043  00001D                     UART_Write_Text@i:
  3044                           	opt stack 0
  3045  00001D                     ___lwdiv@quotient:
  3046                           	opt stack 0
  3047                           
  3048                           ; 2 bytes @ 0x1C
  3049  00001D                     	ds	1
  3050  00001E                     ??_Make32bitsArray:
  3051  00001E                     ??___ftge:
  3052  00001E                     memset@p:
  3053                           	opt stack 0
  3054  00001E                     ___lmul@multiplicand:
  3055                           	opt stack 0
  3056                           
  3057                           ; 4 bytes @ 0x1D
  3058  00001E                     	ds	1
  3059  00001F                     ?___lwmod:
  3060                           	opt stack 0
  3061  00001F                     ___lwmod@dividend:
  3062                           	opt stack 0
  3063                           
  3064                           ; 2 bytes @ 0x1E
  3065  00001F                     	ds	1
  3066  000020                     ?___awtoft:
  3067                           	opt stack 0
  3068  000020                     ?___lbtoft:
  3069                           	opt stack 0
  3070  000020                     ?___lltoft:
  3071                           	opt stack 0
  3072  000020                     ?___lwtoft:
  3073                           	opt stack 0
  3074  000020                     Make32bitsArray@idx:
  3075                           	opt stack 0
  3076  000020                     ZeroArray@array:
  3077                           	opt stack 0
  3078  000020                     ___awtoft@c:
  3079                           	opt stack 0
  3080  000020                     ___lwtoft@c:
  3081                           	opt stack 0
  3082  000020                     ___lltoft@c:
  3083                           	opt stack 0
  3084                           
  3085                           ; 4 bytes @ 0x1F
  3086  000020                     	ds	1
  3087  000021                     ___lwmod@divisor:
  3088                           	opt stack 0
  3089  000021                     StoreIntInEeprom@data:
  3090                           	opt stack 0
  3091                           
  3092                           ; 4 bytes @ 0x20
  3093  000021                     	ds	1
  3094  000022                     ZeroArray@size:
  3095                           	opt stack 0
  3096  000022                     ___lmul@product:
  3097                           	opt stack 0
  3098                           
  3099                           ; 4 bytes @ 0x21
  3100  000022                     	ds	1
  3101  000023                     ___awtoft@sign:
  3102                           	opt stack 0
  3103  000023                     ___lbtoft@c:
  3104                           	opt stack 0
  3105  000023                     ___lwmod@counter:
  3106                           	opt stack 0
  3107                           
  3108                           ; 1 bytes @ 0x22
  3109  000023                     	ds	1
  3110  000024                     ??___lltoft:
  3111  000024                     ?_sprintf:
  3112                           	opt stack 0
  3113  000024                     ?___ftadd:
  3114                           	opt stack 0
  3115  000024                     sprintf@sp:
  3116                           	opt stack 0
  3117  000024                     ___ftadd@f1:
  3118                           	opt stack 0
  3119  000024                     SWSPI_Synth_send_bits@data:
  3120                           	opt stack 0
  3121                           
  3122                           ; 4 bytes @ 0x23
  3123  000024                     	ds	1
  3124  000025                     StoreIntInEeprom@address:
  3125                           	opt stack 0
  3126                           
  3127                           ; 1 bytes @ 0x24
  3128  000025                     	ds	1
  3129  000026                     ?_strtol:
  3130                           	opt stack 0
  3131  000026                     StoreIntInEeprom@numOfByes:
  3132                           	opt stack 0
  3133  000026                     sprintf@f:
  3134                           	opt stack 0
  3135  000026                     strtol@s:
  3136                           	opt stack 0
  3137                           
  3138                           ; 2 bytes @ 0x25
  3139  000026                     	ds	1
  3140  000027                     ___ftadd@f2:
  3141                           	opt stack 0
  3142                           
  3143                           ; 3 bytes @ 0x26
  3144  000027                     	ds	1
  3145  000028                     StoreIntInEeprom@val:
  3146                           	opt stack 0
  3147  000028                     ___lltoft@exp:
  3148                           	opt stack 0
  3149  000028                     strtol@endptr:
  3150                           	opt stack 0
  3151  000028                     SWSPI_send_word@data:
  3152                           	opt stack 0
  3153                           
  3154                           ; 4 bytes @ 0x27
  3155  000028                     	ds	1
  3156  000029                     StoreIntInEeprom@idx:
  3157                           	opt stack 0
  3158                           
  3159                           ; 1 bytes @ 0x28
  3160  000029                     	ds	1
  3161  00002A                     ??_sprintf:
  3162  00002A                     ??___ftadd:
  3163  00002A                     strtol@base:
  3164                           	opt stack 0
  3165                           
  3166                           ; 2 bytes @ 0x29
  3167  00002A                     	ds	1
  3168  00002B                     
  3169                           ; 1 bytes @ 0x2A
  3170  00002B                     	ds	1
  3171  00002C                     ??_strtol:
  3172  00002C                     SWSPI_send_word@dataSize:
  3173                           	opt stack 0
  3174                           
  3175                           ; 1 bytes @ 0x2B
  3176  00002C                     	ds	1
  3177  00002D                     SWSPI_send_word@datac:
  3178                           	opt stack 0
  3179  00002D                     ___ftadd@sign:
  3180                           	opt stack 0
  3181                           
  3182                           ; 1 bytes @ 0x2C
  3183  00002D                     	ds	1
  3184  00002E                     ___ftadd@exp2:
  3185                           	opt stack 0
  3186  00002E                     SWSPI_send_word@idx:
  3187                           	opt stack 0
  3188                           
  3189                           ; 2 bytes @ 0x2D
  3190  00002E                     	ds	1
  3191  00002F                     ___ftadd@exp1:
  3192                           	opt stack 0
  3193                           
  3194                           ; 1 bytes @ 0x2E
  3195  00002F                     	ds	1
  3196  000030                     SWSPI_send_word@phrType:
  3197                           	opt stack 0
  3198  000030                     ___llmod@counter:
  3199                           	opt stack 0
  3200                           
  3201                           ; 1 bytes @ 0x2F
  3202  000030                     	ds	1
  3203  000031                     tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           postinc0	equ	0xFEE
  3208                           wreg	equ	0xFE8
  3209                           postdec1	equ	0xFE5
  3210                           fsr1l	equ	0xFE1
  3211                           
  3212                           ; 1 bytes @ 0x30
  3213 ;;
  3214 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3215 ;;
  3216 ;; *************** function _main *****************
  3217 ;; Defined at:
  3218 ;;		line 13 in file "main.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3232 ;;      Params:         0       0       0       0       0       0       0
  3233 ;;      Locals:         0       0       0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0
  3235 ;;      Totals:         0       0       0       0       0       0       0
  3236 ;;Total ram usage:        0 bytes
  3237 ;; Hardware stack levels required when called:   12
  3238 ;; This function calls:
  3239 ;;		_BlinkOkLeds
  3240 ;;		_InitSystemApplicationManagers
  3241 ;;		_SampleSingleChannel
  3242 ;;		_SampleVgMonChannel
  3243 ;;		_SendUartSystemInitMessage
  3244 ;;		_SetMcuRunTime
  3245 ;;		_SetMcuSystem
  3246 ;;		_keepAliveSignalLed
  3247 ;;		_readUartByte
  3248 ;; This function is called by:
  3249 ;;		Startup code after reset
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text0
  3254  0026CC                     __ptext0:
  3255                           	opt stack 0
  3256  0026CC                     _main:
  3257                           	opt stack 19
  3258                           
  3259                           ;main.c: 16: SetMcuSystem();
  3260                           
  3261                           ;incstack = 0
  3262  0026CC  ECE6  F018         	call	_SetMcuSystem	;wreg free
  3263                           
  3264                           ;main.c: 19: InitSystemApplicationManagers();
  3265  0026D0  ECA9  F018         	call	_InitSystemApplicationManagers	;wreg free
  3266                           
  3267                           ;main.c: 22: SendUartSystemInitMessage();
  3268  0026D4  EC97  F00E         	call	_SendUartSystemInitMessage	;wreg free
  3269                           
  3270                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  3271  0026D8  0E03               	movlw	3
  3272  0026DA  ECC6  F013         	call	_BlinkOkLeds
  3273  0026DE                     
  3274                           ;main.c: 29: {
  3275                           ;main.c: 30: readUartByte();
  3276  0026DE  EC70  F000         	call	_readUartByte	;wreg free
  3277                           
  3278                           ;main.c: 32: if (TimerOneSecFlag == 1)
  3279  0026E2  0101               	movlb	1	; () banked
  3280  0026E4  0532               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  3281  0026E6  A4D8               	btfss	status,2,c
  3282  0026E8  D006               	goto	l1403
  3283                           
  3284                           ; BSR set to: 1
  3285                           ;main.c: 33: {
  3286                           ;main.c: 35: SetMcuRunTime();
  3287  0026EA  ECE0  F015         	call	_SetMcuRunTime	;wreg free
  3288                           
  3289                           ;main.c: 36: TimerOneSecFlag = 0;
  3290  0026EE  0E00               	movlw	0
  3291  0026F0  0101               	movlb	1	; () banked
  3292  0026F2  6F32               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  3293                           
  3294                           ;main.c: 37: }
  3295  0026F4  D7F4               	goto	l1402
  3296  0026F6                     l1403:
  3297                           
  3298                           ; BSR set to: 1
  3299                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  3300                           
  3301                           ; BSR set to: 1
  3302  0026F6  0530               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  3303  0026F8  A4D8               	btfss	status,2,c
  3304  0026FA  D006               	goto	l1405
  3305                           
  3306                           ; BSR set to: 1
  3307                           ;main.c: 39: {
  3308                           ;main.c: 40: keepAliveSignalLed();
  3309  0026FC  EC92  F018         	call	_keepAliveSignalLed	;wreg free
  3310                           
  3311                           ;main.c: 41: TimerKeepAliveFlag = 0;
  3312  002700  0E00               	movlw	0
  3313  002702  0101               	movlb	1	; () banked
  3314  002704  6F30               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  3315                           
  3316                           ;main.c: 42: }
  3317  002706  D7EB               	goto	l1402
  3318  002708                     l1405:
  3319                           
  3320                           ; BSR set to: 1
  3321                           ;main.c: 43: else if (TimertenSecFlag == 1)
  3322                           
  3323                           ; BSR set to: 1
  3324  002708  052F               	decf	_TimertenSecFlag& (0+255),w,b	;volatile
  3325  00270A  A4D8               	btfss	status,2,c
  3326  00270C  D006               	goto	l1407
  3327                           
  3328                           ; BSR set to: 1
  3329                           ;main.c: 44: {
  3330                           ;main.c: 45: SampleVgMonChannel();
  3331  00270E  EC35  F010         	call	_SampleVgMonChannel	;wreg free
  3332                           
  3333                           ;main.c: 46: TimertenSecFlag = 0;
  3334  002712  0E00               	movlw	0
  3335  002714  0101               	movlb	1	; () banked
  3336  002716  6F2F               	movwf	_TimertenSecFlag& (0+255),b	;volatile
  3337                           
  3338                           ;main.c: 47: }
  3339  002718  D7E2               	goto	l1402
  3340  00271A                     l1407:
  3341                           
  3342                           ; BSR set to: 1
  3343                           ;main.c: 48: else if (TimerSamplingFlag == 1)
  3344                           
  3345                           ; BSR set to: 1
  3346  00271A  0531               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  3347  00271C  A4D8               	btfss	status,2,c
  3348  00271E  D7DF               	goto	l1402
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;main.c: 49: {
  3352                           ;main.c: 50: if(1 == needToSample)
  3353  002720  052E               	decf	_needToSample& (0+255),w,b	;volatile
  3354  002722  A4D8               	btfss	status,2,c
  3355  002724  D7DC               	goto	l1402
  3356                           
  3357                           ; BSR set to: 1
  3358                           ;main.c: 51: {
  3359                           ;main.c: 52: SampleSingleChannel();
  3360  002726  ECBE  F00B         	call	_SampleSingleChannel	;wreg free
  3361  00272A  D7D9               	goto	l1402
  3362  00272C                     __end_of_main:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           postinc0	equ	0xFEE
  3369                           wreg	equ	0xFE8
  3370                           postdec1	equ	0xFE5
  3371                           fsr1l	equ	0xFE1
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _readUartByte *****************
  3375 ;; Defined at:
  3376 ;;		line 28 in file "EusartApp.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  idx             2   50[BANK1 ] int 
  3381 ;;  dest           50    0[BANK1 ] unsigned char [50]
  3382 ;;  chRec           1   52[BANK1 ] unsigned char 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3392 ;;      Params:         0       0       0       0       0       0       0
  3393 ;;      Locals:         0       0      53       0       0       0       0
  3394 ;;      Temps:          0       3       0       0       0       0       0
  3395 ;;      Totals:         0       3      53       0       0       0       0
  3396 ;;Total ram usage:       56 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:   11
  3399 ;; This function calls:
  3400 ;;		_EUSART1_Read
  3401 ;;		_GroupCommon
  3402 ;;		_GroupRx
  3403 ;;		_GroupTx
  3404 ;;		_InitRxMessageParams
  3405 ;;		_UART_Write_Text
  3406 ;;		_sprintf
  3407 ;;		_toupper
  3408 ;; This function is called by:
  3409 ;;		_main
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text1
  3414  0000E0                     __ptext1:
  3415                           	opt stack 0
  3416  0000E0                     _readUartByte:
  3417                           	opt stack 19
  3418                           
  3419                           ;EusartApp.c: 31: uint8_t chRec = (0);
  3420                           
  3421                           ;incstack = 0
  3422  0000E0  0E00               	movlw	0
  3423  0000E2  0101               	movlb	1	; () banked
  3424  0000E4  6FCF               	movwf	readUartByte@chRec& (0+255),b
  3425                           
  3426                           ;EusartApp.c: 32: char dest[50];
  3427                           ;EusartApp.c: 34: switch(cState)
  3428  0000E6  D144               	goto	l215
  3429  0000E8                     
  3430                           ; BSR set to: 1
  3431                           ;EusartApp.c: 38: InitRxMessageParams();
  3432                           
  3433                           ; BSR set to: 1
  3434  0000E8  EC9B  F015         	call	_InitRxMessageParams	;wreg free
  3435                           
  3436                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  3437  0000EC  0E01               	movlw	1
  3438  0000EE  0101               	movlb	1	; () banked
  3439  0000F0  6F2C               	movwf	_cState& (0+255),b
  3440                           
  3441                           ;EusartApp.c: 40: break;
  3442  0000F2  0012               	return	
  3443  0000F4                     
  3444                           ; BSR set to: 1
  3445                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  3446                           
  3447                           ; BSR set to: 1
  3448  0000F4  ECBE  F015         	call	_EUSART1_Read	;wreg free
  3449  0000F8  0101               	movlb	1	; () banked
  3450  0000FA  6FCF               	movwf	readUartByte@chRec& (0+255),b
  3451                           
  3452                           ; BSR set to: 1
  3453                           ;EusartApp.c: 46: if(chRec == (0x24))
  3454  0000FC  0E24               	movlw	36
  3455  0000FE  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3456  000100  A4D8               	btfss	status,2,c
  3457  000102  0012               	return	
  3458                           
  3459                           ; BSR set to: 1
  3460                           ;EusartApp.c: 47: {
  3461                           ;EusartApp.c: 48: cState = READ_STREAM;
  3462  000104  0E02               	movlw	2
  3463  000106  6F2C               	movwf	_cState& (0+255),b
  3464                           
  3465                           ; BSR set to: 1
  3466                           ;EusartApp.c: 49: }
  3467                           ;EusartApp.c: 50: break;
  3468  000108  0012               	return	
  3469  00010A                     
  3470                           ; BSR set to: 1
  3471                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  3472                           
  3473                           ; BSR set to: 1
  3474  00010A  512D               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  3475  00010C  B4D8               	btfsc	status,2,c
  3476  00010E  0012               	return	
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;EusartApp.c: 55: {
  3480                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  3481  000110  ECBE  F015         	call	_EUSART1_Read	;wreg free
  3482  000114  0101               	movlb	1	; () banked
  3483  000116  6FCF               	movwf	readUartByte@chRec& (0+255),b
  3484                           
  3485                           ; BSR set to: 1
  3486                           ;EusartApp.c: 57: if(chRec == (0))
  3487  000118  51CF               	movf	readUartByte@chRec& (0+255),w,b
  3488  00011A  B4D8               	btfsc	status,2,c
  3489  00011C  0012               	return	
  3490                           
  3491                           ; BSR set to: 1
  3492                           ;EusartApp.c: 61: else if(chRec == (0xd))
  3493                           
  3494                           ; BSR set to: 1
  3495                           
  3496                           ; BSR set to: 1
  3497                           ;EusartApp.c: 60: }
  3498                           
  3499                           ; BSR set to: 1
  3500                           ;EusartApp.c: 58: {
  3501                           ;EusartApp.c: 59: return;
  3502  00011E  0E0D               	movlw	13
  3503  000120  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3504  000122  A4D8               	btfss	status,2,c
  3505  000124  D003               	goto	l225
  3506                           
  3507                           ; BSR set to: 1
  3508                           ;EusartApp.c: 62: {
  3509                           ;EusartApp.c: 63: cState = READ_GROUP;
  3510  000126  0E03               	movlw	3
  3511  000128  6F2C               	movwf	_cState& (0+255),b
  3512                           
  3513                           ;EusartApp.c: 64: }
  3514  00012A  0012               	return	
  3515  00012C                     l225:
  3516                           
  3517                           ; BSR set to: 1
  3518                           ;EusartApp.c: 65: else
  3519                           ;EusartApp.c: 66: {
  3520                           ;EusartApp.c: 67: if(chRec != ' ')
  3521                           
  3522                           ; BSR set to: 1
  3523  00012C  0E20               	movlw	32
  3524  00012E  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3525  000130  B4D8               	btfsc	status,2,c
  3526  000132  0012               	return	
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;EusartApp.c: 68: {
  3530                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  3531  000134  5128               	movf	_msgCount& (0+255),w,b
  3532  000136  0D01               	mullw	1
  3533  000138  0E87               	movlw	low _rxMsgQueue
  3534  00013A  24F3               	addwf	prodl,w,c
  3535  00013C  6ED9               	movwf	fsr2l,c
  3536  00013E  0E01               	movlw	high _rxMsgQueue
  3537  000140  20F4               	addwfc	prodh,w,c
  3538  000142  6EDA               	movwf	fsr2h,c
  3539  000144  C1CF  FFDF         	movff	readUartByte@chRec,indf2
  3540                           
  3541                           ; BSR set to: 1
  3542  000148  2B28               	incf	_msgCount& (0+255),f,b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;EusartApp.c: 76: }
  3546                           ;EusartApp.c: 77: break;
  3547                           
  3548                           ; BSR set to: 1
  3549                           ;EusartApp.c: 73: else
  3550                           ;EusartApp.c: 74: {
  3551                           ;EusartApp.c: 75: return;
  3552                           
  3553                           ; BSR set to: 1
  3554                           ;EusartApp.c: 70: }
  3555                           ;EusartApp.c: 71: }
  3556                           ;EusartApp.c: 72: }
  3557                           
  3558                           ; BSR set to: 1
  3559                           
  3560                           ; BSR set to: 1
  3561  00014A  0012               	return	
  3562  00014C                     
  3563                           ; BSR set to: 1
  3564                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  3565                           
  3566                           ; BSR set to: 1
  3567  00014C  5187               	movf	_rxMsgQueue& (0+255),w,b
  3568  00014E  ECB4  F018         	call	_toupper
  3569  000152  0101               	movlb	1	; () banked
  3570  000154  6FCF               	movwf	readUartByte@chRec& (0+255),b
  3571                           
  3572                           ;EusartApp.c: 83: switch(chRec)
  3573  000156  D023               	goto	l230
  3574  000158                     
  3575                           ; BSR set to: 1
  3576                           ;EusartApp.c: 87: group = RX_GROUP;
  3577                           
  3578                           ; BSR set to: 1
  3579  000158  0E00               	movlw	0
  3580  00015A  6F2B               	movwf	_group& (0+255),b
  3581                           
  3582                           ;EusartApp.c: 88: cState = READ_REQUEST;
  3583  00015C  0E04               	movlw	4
  3584  00015E  6F2C               	movwf	_cState& (0+255),b
  3585                           
  3586                           ;EusartApp.c: 89: break;
  3587  000160  0012               	return	
  3588  000162                     
  3589                           ; BSR set to: 1
  3590                           ;EusartApp.c: 93: group = TX_GROUP;
  3591                           
  3592                           ; BSR set to: 1
  3593  000162  0E01               	movlw	1
  3594  000164  6F2B               	movwf	_group& (0+255),b
  3595                           
  3596                           ;EusartApp.c: 94: cState = READ_REQUEST;
  3597  000166  0E04               	movlw	4
  3598  000168  6F2C               	movwf	_cState& (0+255),b
  3599                           
  3600                           ;EusartApp.c: 95: break;
  3601  00016A  0012               	return	
  3602  00016C                     
  3603                           ; BSR set to: 1
  3604                           ;EusartApp.c: 99: group = COMMON_GROUP;
  3605                           
  3606                           ; BSR set to: 1
  3607  00016C  0E02               	movlw	2
  3608  00016E  6F2B               	movwf	_group& (0+255),b
  3609                           
  3610                           ;EusartApp.c: 100: cState = READ_REQUEST;
  3611  000170  0E04               	movlw	4
  3612  000172  6F2C               	movwf	_cState& (0+255),b
  3613                           
  3614                           ;EusartApp.c: 101: break;
  3615  000174  0012               	return	
  3616  000176                     
  3617                           ; BSR set to: 1
  3618                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  3619                           
  3620                           ; BSR set to: 1
  3621  000176  0E9B               	movlw	low readUartByte@dest
  3622  000178  6E24               	movwf	sprintf@sp,c
  3623  00017A  0E01               	movlw	high readUartByte@dest
  3624  00017C  6E25               	movwf	sprintf@sp+1,c
  3625  00017E  0EC5               	movlw	low STR_11
  3626  000180  6E26               	movwf	sprintf@f,c
  3627  000182  0E7F               	movlw	high STR_11
  3628  000184  6E27               	movwf	sprintf@f+1,c
  3629  000186  ECD7  F006         	call	_sprintf	;wreg free
  3630                           
  3631                           ;EusartApp.c: 105: UART_Write_Text(dest);
  3632  00018A  0E9B               	movlw	low readUartByte@dest
  3633  00018C  6E19               	movwf	UART_Write_Text@text,c
  3634  00018E  0E01               	movlw	high readUartByte@dest
  3635  000190  6E1A               	movwf	UART_Write_Text@text+1,c
  3636  000192  ECF9  F012         	call	_UART_Write_Text	;wreg free
  3637                           
  3638                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  3639  000196  0E00               	movlw	0
  3640  000198  0101               	movlb	1	; () banked
  3641  00019A  6F2C               	movwf	_cState& (0+255),b
  3642                           
  3643                           ; BSR set to: 1
  3644                           ;EusartApp.c: 108: }
  3645                           
  3646                           ;EusartApp.c: 107: break;
  3647  00019C  0012               	return	
  3648  00019E                     l230:
  3649                           
  3650                           ; BSR set to: 1
  3651                           
  3652                           ; BSR set to: 1
  3653  00019E  51CF               	movf	readUartByte@chRec& (0+255),w,b
  3654                           
  3655                           ; Switch size 1, requested type "space"
  3656                           ; Number of cases is 3, Range of values is 82 to 84
  3657                           ; switch strategies available:
  3658                           ; Name         Instructions Cycles
  3659                           ; simple_byte           10     6 (average)
  3660                           ;	Chosen strategy is simple_byte
  3661  0001A0  0A52               	xorlw	82	; case 82
  3662  0001A2  B4D8               	btfsc	status,2,c
  3663  0001A4  D7D9               	goto	l231
  3664  0001A6  0A01               	xorlw	1	; case 83
  3665  0001A8  B4D8               	btfsc	status,2,c
  3666  0001AA  D7E0               	goto	l234
  3667  0001AC  0A07               	xorlw	7	; case 84
  3668  0001AE  B4D8               	btfsc	status,2,c
  3669  0001B0  D7D8               	goto	l233
  3670  0001B2  D7E1               	goto	l235
  3671  0001B4                     
  3672                           ; BSR set to: 1
  3673                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  3674                           
  3675                           ; BSR set to: 1
  3676  0001B4  5188               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3677  0001B6  ECB4  F018         	call	_toupper
  3678  0001BA  0101               	movlb	1	; () banked
  3679  0001BC  6FCF               	movwf	readUartByte@chRec& (0+255),b
  3680                           
  3681                           ;EusartApp.c: 115: switch(group)
  3682  0001BE  D068               	goto	l237
  3683  0001C0                     
  3684                           ; BSR set to: 1
  3685                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  3686                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'S' || chRec == 'C')
  3687                           
  3688                           ; BSR set to: 1
  3689  0001C0  0E49               	movlw	73
  3690  0001C2  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3691  0001C4  B4D8               	btfsc	status,2,c
  3692  0001C6  D014               	goto	u8370
  3693                           
  3694                           ; BSR set to: 1
  3695  0001C8  0E46               	movlw	70
  3696  0001CA  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3697  0001CC  B4D8               	btfsc	status,2,c
  3698  0001CE  D010               	goto	u8370
  3699                           
  3700                           ; BSR set to: 1
  3701  0001D0  0E51               	movlw	81
  3702  0001D2  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3703  0001D4  B4D8               	btfsc	status,2,c
  3704  0001D6  D00C               	goto	u8370
  3705                           
  3706                           ; BSR set to: 1
  3707  0001D8  0E58               	movlw	88
  3708  0001DA  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3709  0001DC  B4D8               	btfsc	status,2,c
  3710  0001DE  D008               	goto	u8370
  3711                           
  3712                           ; BSR set to: 1
  3713  0001E0  0E53               	movlw	83
  3714  0001E2  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3715  0001E4  B4D8               	btfsc	status,2,c
  3716  0001E6  D004               	goto	u8370
  3717                           
  3718                           ; BSR set to: 1
  3719  0001E8  0E43               	movlw	67
  3720  0001EA  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3721  0001EC  A4D8               	btfss	status,2,c
  3722  0001EE  D006               	goto	l239
  3723  0001F0                     u8370:
  3724                           
  3725                           ; BSR set to: 1
  3726                           ;EusartApp.c: 121: {
  3727                           ;EusartApp.c: 123: request = chRec - '0';
  3728                           
  3729                           ; BSR set to: 1
  3730  0001F0  51CF               	movf	readUartByte@chRec& (0+255),w,b
  3731  0001F2  0FD0               	addlw	208
  3732  0001F4  6F2A               	movwf	_request& (0+255),b
  3733                           
  3734                           ; BSR set to: 1
  3735                           ;EusartApp.c: 124: cState = READ_DATA_SIZE;
  3736  0001F6  0E05               	movlw	5
  3737  0001F8  6F2C               	movwf	_cState& (0+255),b
  3738                           
  3739                           ;EusartApp.c: 126: }
  3740  0001FA  0012               	return	
  3741  0001FC                     l239:
  3742                           
  3743                           ; BSR set to: 1
  3744                           ;EusartApp.c: 127: else
  3745                           ;EusartApp.c: 128: {
  3746                           ;EusartApp.c: 129: UART_Write_Text("NOT OK \n\r");
  3747                           
  3748                           ; BSR set to: 1
  3749  0001FC  0ED0               	movlw	low STR_1
  3750  0001FE  6E19               	movwf	UART_Write_Text@text,c
  3751  000200  0E7F               	movlw	high STR_1
  3752  000202  6E1A               	movwf	UART_Write_Text@text+1,c
  3753  000204  ECF9  F012         	call	_UART_Write_Text	;wreg free
  3754                           
  3755                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  3756  000208  0E00               	movlw	0
  3757  00020A  0101               	movlb	1	; () banked
  3758  00020C  6F2C               	movwf	_cState& (0+255),b
  3759                           
  3760                           ; BSR set to: 1
  3761                           ;EusartApp.c: 131: }
  3762                           ;EusartApp.c: 132: return;
  3763                           
  3764                           ; BSR set to: 1
  3765  00020E  0012               	return	
  3766  000210                     
  3767                           ; BSR set to: 1
  3768                           ;EusartApp.c: 136: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  3769                           
  3770                           ; BSR set to: 1
  3771  000210  0E49               	movlw	73
  3772  000212  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3773  000214  B4D8               	btfsc	status,2,c
  3774  000216  D014               	goto	u8430
  3775                           
  3776                           ; BSR set to: 1
  3777  000218  0E46               	movlw	70
  3778  00021A  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3779  00021C  B4D8               	btfsc	status,2,c
  3780  00021E  D010               	goto	u8430
  3781                           
  3782                           ; BSR set to: 1
  3783  000220  0E51               	movlw	81
  3784  000222  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3785  000224  B4D8               	btfsc	status,2,c
  3786  000226  D00C               	goto	u8430
  3787                           
  3788                           ; BSR set to: 1
  3789  000228  0E58               	movlw	88
  3790  00022A  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3791  00022C  B4D8               	btfsc	status,2,c
  3792  00022E  D008               	goto	u8430
  3793                           
  3794                           ; BSR set to: 1
  3795  000230  0E42               	movlw	66
  3796  000232  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3797  000234  B4D8               	btfsc	status,2,c
  3798  000236  D004               	goto	u8430
  3799                           
  3800                           ; BSR set to: 1
  3801  000238  0E53               	movlw	83
  3802  00023A  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3803  00023C  A4D8               	btfss	status,2,c
  3804  00023E  D006               	goto	l244
  3805  000240                     u8430:
  3806                           
  3807                           ; BSR set to: 1
  3808                           ;EusartApp.c: 137: {
  3809                           ;EusartApp.c: 138: request = (chRec - '0');
  3810                           
  3811                           ; BSR set to: 1
  3812  000240  51CF               	movf	readUartByte@chRec& (0+255),w,b
  3813  000242  0FD0               	addlw	208
  3814  000244  6F2A               	movwf	_request& (0+255),b
  3815                           
  3816                           ; BSR set to: 1
  3817                           ;EusartApp.c: 139: cState = READ_DATA_SIZE;
  3818  000246  0E05               	movlw	5
  3819  000248  6F2C               	movwf	_cState& (0+255),b
  3820                           
  3821                           ; BSR set to: 1
  3822                           ;EusartApp.c: 141: }
  3823                           
  3824                           ; BSR set to: 1
  3825                           ;EusartApp.c: 140: return;
  3826  00024A  0012               	return	
  3827  00024C                     l244:
  3828                           
  3829                           ; BSR set to: 1
  3830                           ;EusartApp.c: 142: else
  3831                           ;EusartApp.c: 143: {
  3832                           ;EusartApp.c: 144: UART_Write_Text("NOT OK \n\r");
  3833                           
  3834                           ; BSR set to: 1
  3835  00024C  0ED0               	movlw	low STR_1
  3836  00024E  6E19               	movwf	UART_Write_Text@text,c
  3837  000250  0E7F               	movlw	high STR_1
  3838  000252  6E1A               	movwf	UART_Write_Text@text+1,c
  3839  000254  ECF9  F012         	call	_UART_Write_Text	;wreg free
  3840                           
  3841                           ;EusartApp.c: 145: cState = START_RX_MESSAGE_READ;
  3842  000258  0E00               	movlw	0
  3843  00025A  0101               	movlb	1	; () banked
  3844  00025C  6F2C               	movwf	_cState& (0+255),b
  3845                           
  3846                           ; BSR set to: 1
  3847                           ;EusartApp.c: 146: }
  3848                           ;EusartApp.c: 147: break;
  3849  00025E  0012               	return	
  3850  000260                     
  3851                           ; BSR set to: 1
  3852                           ;EusartApp.c: 151: if(chRec == 'H' || chRec == 'L')
  3853                           
  3854                           ; BSR set to: 1
  3855  000260  0E48               	movlw	72
  3856  000262  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3857  000264  B4D8               	btfsc	status,2,c
  3858  000266  D004               	goto	u8450
  3859                           
  3860                           ; BSR set to: 1
  3861  000268  0E4C               	movlw	76
  3862  00026A  19CF               	xorwf	readUartByte@chRec& (0+255),w,b
  3863  00026C  A4D8               	btfss	status,2,c
  3864  00026E  D006               	goto	l250
  3865  000270                     u8450:
  3866                           
  3867                           ; BSR set to: 1
  3868                           ;EusartApp.c: 152: {
  3869                           ;EusartApp.c: 153: request = (chRec - '0');
  3870                           
  3871                           ; BSR set to: 1
  3872  000270  51CF               	movf	readUartByte@chRec& (0+255),w,b
  3873  000272  0FD0               	addlw	208
  3874  000274  6F2A               	movwf	_request& (0+255),b
  3875                           
  3876                           ; BSR set to: 1
  3877                           ;EusartApp.c: 154: cState = READ_DATA_SIZE;
  3878  000276  0E05               	movlw	5
  3879  000278  6F2C               	movwf	_cState& (0+255),b
  3880                           
  3881                           ;EusartApp.c: 155: }
  3882  00027A  0012               	return	
  3883  00027C                     l250:
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;EusartApp.c: 156: else
  3887                           ;EusartApp.c: 157: {
  3888                           ;EusartApp.c: 158: UART_Write_Text("NOT OK \n\r");
  3889                           
  3890                           ; BSR set to: 1
  3891  00027C  0ED0               	movlw	low STR_1
  3892  00027E  6E19               	movwf	UART_Write_Text@text,c
  3893  000280  0E7F               	movlw	high STR_1
  3894  000282  6E1A               	movwf	UART_Write_Text@text+1,c
  3895  000284  ECF9  F012         	call	_UART_Write_Text	;wreg free
  3896                           
  3897                           ;EusartApp.c: 159: cState = START_RX_MESSAGE_READ;
  3898  000288  0E00               	movlw	0
  3899  00028A  0101               	movlb	1	; () banked
  3900  00028C  6F2C               	movwf	_cState& (0+255),b
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;EusartApp.c: 160: }
  3904                           ;EusartApp.c: 161: }
  3905  00028E  0012               	return	
  3906  000290                     l237:
  3907                           
  3908                           ; BSR set to: 1
  3909                           
  3910                           ; BSR set to: 1
  3911  000290  512B               	movf	_group& (0+255),w,b
  3912                           
  3913                           ; Switch size 1, requested type "space"
  3914                           ; Number of cases is 3, Range of values is 0 to 2
  3915                           ; switch strategies available:
  3916                           ; Name         Instructions Cycles
  3917                           ; simple_byte           10     6 (average)
  3918                           ;	Chosen strategy is simple_byte
  3919  000292  0A00               	xorlw	0	; case 0
  3920  000294  B4D8               	btfsc	status,2,c
  3921  000296  D794               	goto	l238
  3922  000298  0A01               	xorlw	1	; case 1
  3923  00029A  B4D8               	btfsc	status,2,c
  3924  00029C  D7B9               	goto	l243
  3925  00029E  0A03               	xorlw	3	; case 2
  3926  0002A0  A4D8               	btfss	status,2,c
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;EusartApp.c: 162: return;
  3930  0002A2  0012               	return	
  3931  0002A4  D7DD               	goto	l249
  3932  0002A6                     
  3933                           ; BSR set to: 1
  3934                           ;EusartApp.c: 166: dataSize = msgCount - 2;
  3935                           
  3936                           ; BSR set to: 1
  3937  0002A6  5128               	movf	_msgCount& (0+255),w,b
  3938  0002A8  0FFE               	addlw	254
  3939  0002AA  6F29               	movwf	_dataSize& (0+255),b
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;EusartApp.c: 167: rxMsgData[(0x0)] = dataSize;
  3943  0002AC  C129  F173         	movff	_dataSize,_rxMsgData
  3944                           
  3945                           ; BSR set to: 1
  3946                           ;EusartApp.c: 168: if(dataSize == 0)
  3947  0002B0  5129               	movf	_dataSize& (0+255),w,b
  3948  0002B2  A4D8               	btfss	status,2,c
  3949  0002B4  D003               	goto	l255
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;EusartApp.c: 169: {
  3953                           ;EusartApp.c: 170: cState = JUMP_FUNCTION;
  3954  0002B6  0E08               	movlw	8
  3955  0002B8  6F2C               	movwf	_cState& (0+255),b
  3956                           
  3957                           ;EusartApp.c: 171: }
  3958  0002BA  0012               	return	
  3959  0002BC                     l255:
  3960                           
  3961                           ; BSR set to: 1
  3962                           ;EusartApp.c: 172: else
  3963                           ;EusartApp.c: 173: {
  3964                           ;EusartApp.c: 174: cState = READ_DATA;
  3965                           
  3966                           ; BSR set to: 1
  3967  0002BC  0E06               	movlw	6
  3968  0002BE  6F2C               	movwf	_cState& (0+255),b
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;EusartApp.c: 175: }
  3972                           ;EusartApp.c: 177: break;
  3973  0002C0  0012               	return	
  3974  0002C2                     
  3975                           ; BSR set to: 1
  3976                           ;EusartApp.c: 181: for(int idx = 1; idx < dataSize + 1; idx++)
  3977                           
  3978                           ; BSR set to: 1
  3979  0002C2  0E00               	movlw	0
  3980  0002C4  6FCE               	movwf	(readUartByte@idx+1)& (0+255),b
  3981  0002C6  0E01               	movlw	1
  3982  0002C8  6FCD               	movwf	readUartByte@idx& (0+255),b
  3983  0002CA  D01B               	goto	l258
  3984  0002CC                     
  3985                           ;EusartApp.c: 182: {
  3986                           ;EusartApp.c: 183: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  3987                           
  3988                           ; BSR set to: 1
  3989  0002CC  0E01               	movlw	1
  3990  0002CE  0101               	movlb	1	; () banked
  3991  0002D0  25CD               	addwf	readUartByte@idx& (0+255),w,b
  3992  0002D2  0100               	movlb	0	; () banked
  3993  0002D4  6FE5               	movwf	??_readUartByte& (0+255),b
  3994  0002D6  0E00               	movlw	0
  3995  0002D8  0101               	movlb	1	; () banked
  3996  0002DA  21CE               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3997  0002DC  0100               	movlb	0	; () banked
  3998  0002DE  6FE6               	movwf	(??_readUartByte+1)& (0+255),b
  3999  0002E0  0E87               	movlw	low _rxMsgQueue
  4000  0002E2  25E5               	addwf	??_readUartByte& (0+255),w,b
  4001  0002E4  6ED9               	movwf	fsr2l,c
  4002  0002E6  0E01               	movlw	high _rxMsgQueue
  4003  0002E8  21E6               	addwfc	(??_readUartByte+1)& (0+255),w,b
  4004  0002EA  6EDA               	movwf	fsr2h,c
  4005  0002EC  0E73               	movlw	low _rxMsgData
  4006  0002EE  0101               	movlb	1	; () banked
  4007  0002F0  25CD               	addwf	readUartByte@idx& (0+255),w,b
  4008  0002F2  6EE1               	movwf	fsr1l,c
  4009  0002F4  0E01               	movlw	high _rxMsgData
  4010  0002F6  21CE               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4011  0002F8  6EE2               	movwf	fsr1h,c
  4012  0002FA  CFDF FFE7          	movff	indf2,indf1
  4013                           
  4014                           ; BSR set to: 1
  4015  0002FE  4BCD               	infsnz	readUartByte@idx& (0+255),f,b
  4016  000300  2BCE               	incf	(readUartByte@idx+1)& (0+255),f,b
  4017  000302                     l258:
  4018                           
  4019                           ; BSR set to: 1
  4020                           
  4021                           ; BSR set to: 1
  4022  000302  5129               	movf	_dataSize& (0+255),w,b
  4023  000304  0100               	movlb	0	; () banked
  4024  000306  6FE5               	movwf	??_readUartByte& (0+255),b
  4025  000308  6BE6               	clrf	(??_readUartByte+1)& (0+255),b
  4026  00030A  0E01               	movlw	1
  4027  00030C  27E5               	addwf	??_readUartByte& (0+255),f,b
  4028  00030E  0E00               	movlw	0
  4029  000310  23E6               	addwfc	(??_readUartByte+1)& (0+255),f,b
  4030  000312  51E5               	movf	??_readUartByte& (0+255),w,b
  4031  000314  0101               	movlb	1	; () banked
  4032  000316  5DCD               	subwf	readUartByte@idx& (0+255),w,b
  4033  000318  51CE               	movf	(readUartByte@idx+1)& (0+255),w,b
  4034  00031A  0A80               	xorlw	128
  4035  00031C  0100               	movlb	0	; () banked
  4036  00031E  6FE7               	movwf	(??_readUartByte+2)& (0+255),b
  4037  000320  51E6               	movf	(??_readUartByte+1)& (0+255),w,b
  4038  000322  0A80               	xorlw	128
  4039  000324  59E7               	subwfb	(??_readUartByte+2)& (0+255),w,b
  4040  000326  A0D8               	btfss	status,0,c
  4041  000328  D7D1               	goto	l259
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;EusartApp.c: 184: }
  4045                           ;EusartApp.c: 186: cState = JUMP_FUNCTION;
  4046                           
  4047                           ; BSR set to: 0
  4048  00032A  0E08               	movlw	8
  4049  00032C  0101               	movlb	1	; () banked
  4050  00032E  6F2C               	movwf	_cState& (0+255),b
  4051                           
  4052                           ;EusartApp.c: 187: break;
  4053  000330  0012               	return	
  4054  000332                     
  4055                           ; BSR set to: 1
  4056                           ;EusartApp.c: 191: groupsArray[group](request, rxMsgData);
  4057                           
  4058                           ; BSR set to: 1
  4059  000332  512B               	movf	_group& (0+255),w,b
  4060  000334  0D02               	mullw	2
  4061  000336  0ED4               	movlw	low _groupsArray
  4062  000338  24F3               	addwf	prodl,w,c
  4063  00033A  6ED9               	movwf	fsr2l,c
  4064  00033C  0E01               	movlw	high _groupsArray
  4065  00033E  20F4               	addwfc	prodh,w,c
  4066  000340  6EDA               	movwf	fsr2h,c
  4067  000342  D801               	call	u8488
  4068  000344  D011               	goto	u8489
  4069  000346                     u8488:
  4070  000346  0005               	push	
  4071  000348  6EFA               	movwf	pclath,c
  4072  00034A  50DE               	movf	postinc2,w,c
  4073  00034C  6EFD               	movwf	tosl,c
  4074  00034E  50DE               	movf	postinc2,w,c
  4075  000350  6EFE               	movwf	tosh,c
  4076  000352  50F8               	movf	tblptru,w,c
  4077  000354  6EFF               	movwf	tosu,c
  4078  000356  50FA               	movf	pclath,w,c
  4079  000358  0E73               	movlw	low _rxMsgData
  4080  00035A  0100               	movlb	0	; () banked
  4081  00035C  6FE2               	movwf	GroupCommon@data& (0+255),b
  4082  00035E  0E01               	movlw	high _rxMsgData
  4083  000360  6FE3               	movwf	(GroupCommon@data+1)& (0+255),b
  4084  000362  0101               	movlb	1	; () banked
  4085  000364  512A               	movf	_request& (0+255),w,b
  4086  000366  0012               	return		;indir
  4087  000368                     u8489:
  4088                           
  4089                           ;EusartApp.c: 192: cState = START_RX_MESSAGE_READ;
  4090  000368  0E00               	movlw	0
  4091  00036A  0101               	movlb	1	; () banked
  4092  00036C  6F2C               	movwf	_cState& (0+255),b
  4093                           
  4094                           ; BSR set to: 1
  4095                           ;EusartApp.c: 194: }
  4096                           
  4097                           ;EusartApp.c: 193: break;
  4098  00036E  0012               	return	
  4099  000370                     l215:
  4100                           
  4101                           ; BSR set to: 1
  4102                           
  4103                           ; BSR set to: 1
  4104  000370  512C               	movf	_cState& (0+255),w,b
  4105                           
  4106                           ; Switch size 1, requested type "space"
  4107                           ; Number of cases is 8, Range of values is 0 to 8
  4108                           ; switch strategies available:
  4109                           ; Name         Instructions Cycles
  4110                           ; simple_byte           25    13 (average)
  4111                           ;	Chosen strategy is simple_byte
  4112  000372  0A00               	xorlw	0	; case 0
  4113  000374  B4D8               	btfsc	status,2,c
  4114  000376  D6B8               	goto	l216
  4115  000378  0A01               	xorlw	1	; case 1
  4116  00037A  B4D8               	btfsc	status,2,c
  4117  00037C  D6BB               	goto	l218
  4118  00037E  0A03               	xorlw	3	; case 2
  4119  000380  B4D8               	btfsc	status,2,c
  4120  000382  D6C3               	goto	l220
  4121  000384  0A01               	xorlw	1	; case 3
  4122  000386  B4D8               	btfsc	status,2,c
  4123  000388  D6E1               	goto	l229
  4124  00038A  0A07               	xorlw	7	; case 4
  4125  00038C  B4D8               	btfsc	status,2,c
  4126  00038E  D712               	goto	l236
  4127  000390  0A01               	xorlw	1	; case 5
  4128  000392  B4D8               	btfsc	status,2,c
  4129  000394  D788               	goto	l254
  4130  000396  0A03               	xorlw	3	; case 6
  4131  000398  B4D8               	btfsc	status,2,c
  4132  00039A  D793               	goto	l257
  4133  00039C  0A0E               	xorlw	14	; case 8
  4134  00039E  A4D8               	btfss	status,2,c
  4135  0003A0  0012               	return	
  4136  0003A2  D7C7               	goto	l261
  4137  0003A4                     __end_of_readUartByte:
  4138                           	opt stack 0
  4139                           tosu	equ	0xFFF
  4140                           tosh	equ	0xFFE
  4141                           tosl	equ	0xFFD
  4142                           pclath	equ	0xFFA
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           indf1	equ	0xFE7
  4152                           postdec1	equ	0xFE5
  4153                           fsr1h	equ	0xFE2
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _InitRxMessageParams *****************
  4162 ;; Defined at:
  4163 ;;		line 197 in file "EusartApp.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4177 ;;      Params:         0       0       0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    5
  4184 ;; This function calls:
  4185 ;;		_ZeroArray
  4186 ;; This function is called by:
  4187 ;;		_readUartByte
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text2
  4192  002B36                     __ptext2:
  4193                           	opt stack 0
  4194  002B36                     _InitRxMessageParams:
  4195                           	opt stack 24
  4196                           
  4197                           ;EusartApp.c: 199: group = 0;
  4198                           
  4199                           ; BSR set to: 1
  4200                           ;incstack = 0
  4201  002B36  0E00               	movlw	0
  4202  002B38  0101               	movlb	1	; () banked
  4203  002B3A  6F2B               	movwf	_group& (0+255),b
  4204                           
  4205                           ;EusartApp.c: 200: request = 0;
  4206  002B3C  0E00               	movlw	0
  4207  002B3E  6F2A               	movwf	_request& (0+255),b
  4208                           
  4209                           ;EusartApp.c: 201: msgCount = 0;
  4210  002B40  0E00               	movlw	0
  4211  002B42  6F28               	movwf	_msgCount& (0+255),b
  4212                           
  4213                           ;EusartApp.c: 202: dataSize = 0;
  4214  002B44  0E00               	movlw	0
  4215  002B46  6F29               	movwf	_dataSize& (0+255),b
  4216                           
  4217                           ;EusartApp.c: 203: crcCalc = 0;
  4218  002B48  0E00               	movlw	0
  4219  002B4A  0100               	movlb	0	; () banked
  4220  002B4C  6FF7               	movwf	_crcCalc& (0+255),b
  4221                           
  4222                           ;EusartApp.c: 204: crcGiven = 0;
  4223  002B4E  0E00               	movlw	0
  4224  002B50  6FF6               	movwf	_crcGiven& (0+255),b
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;EusartApp.c: 205: ZeroArray(rxMsgQueue, (0x14));
  4228  002B52  0E87               	movlw	low _rxMsgQueue
  4229  002B54  6E20               	movwf	ZeroArray@array,c
  4230  002B56  0E01               	movlw	high _rxMsgQueue
  4231  002B58  6E21               	movwf	ZeroArray@array+1,c
  4232  002B5A  0E00               	movlw	0
  4233  002B5C  6E23               	movwf	ZeroArray@size+1,c
  4234  002B5E  0E14               	movlw	20
  4235  002B60  6E22               	movwf	ZeroArray@size,c
  4236  002B62  EC68  F018         	call	_ZeroArray
  4237                           
  4238                           ;EusartApp.c: 206: ZeroArray(rxMsgData, (0x14));
  4239  002B66  0E73               	movlw	low _rxMsgData
  4240  002B68  6E20               	movwf	ZeroArray@array,c
  4241  002B6A  0E01               	movlw	high _rxMsgData
  4242  002B6C  6E21               	movwf	ZeroArray@array+1,c
  4243  002B6E  0E00               	movlw	0
  4244  002B70  6E23               	movwf	ZeroArray@size+1,c
  4245  002B72  0E14               	movlw	20
  4246  002B74  6E22               	movwf	ZeroArray@size,c
  4247  002B76  EC68  F018         	call	_ZeroArray	;wreg free
  4248  002B7A  0012               	return		;funcret
  4249  002B7C                     __end_of_InitRxMessageParams:
  4250                           	opt stack 0
  4251                           tosu	equ	0xFFF
  4252                           tosh	equ	0xFFE
  4253                           tosl	equ	0xFFD
  4254                           pclath	equ	0xFFA
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           indf1	equ	0xFE7
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _GroupCommon *****************
  4274 ;; Defined at:
  4275 ;;		line 82 in file "MessageFunctions.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  request         1    wreg     enum E6
  4278 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4279 ;;		 -> rxMsgData(20), 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  request         1  132[BANK0 ] enum E6
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4291 ;;      Params:         0       2       0       0       0       0       0
  4292 ;;      Locals:         0       1       0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0
  4294 ;;      Totals:         0       3       0       0       0       0       0
  4295 ;;Total ram usage:        3 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    6
  4298 ;; This function calls:
  4299 ;;		_PrintHelpScreen
  4300 ;;		_testLeds
  4301 ;; This function is called by:
  4302 ;;		_readUartByte
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text3
  4307  003004                     __ptext3:
  4308                           	opt stack 0
  4309  003004                     _GroupCommon:
  4310                           	opt stack 23
  4311                           
  4312                           ;incstack = 0
  4313                           ;GroupCommon@request stored from wreg
  4314  003004  0100               	movlb	0	; () banked
  4315  003006  6FE4               	movwf	GroupCommon@request& (0+255),b
  4316                           
  4317                           ;MessageFunctions.c: 84: switch (request)
  4318  003008  D006               	goto	l1190
  4319  00300A                     
  4320                           ;MessageFunctions.c: 87: PrintHelpScreen();
  4321  00300A  ECD2  F001         	call	_PrintHelpScreen	;wreg free
  4322                           
  4323                           ;MessageFunctions.c: 88: break;
  4324  00300E  0012               	return	
  4325  003010                     
  4326                           ;MessageFunctions.c: 91: testLeds();
  4327  003010  EC96  F013         	call	_testLeds	;wreg free
  4328                           
  4329                           ;MessageFunctions.c: 96: }
  4330                           
  4331                           ;MessageFunctions.c: 95: break;
  4332                           
  4333                           ;MessageFunctions.c: 94: default:
  4334                           
  4335                           ;MessageFunctions.c: 92: break;
  4336  003014  0012               	return	
  4337  003016                     l1190:
  4338  003016  0100               	movlb	0	; () banked
  4339  003018  51E4               	movf	GroupCommon@request& (0+255),w,b
  4340                           
  4341                           ; Switch size 1, requested type "space"
  4342                           ; Number of cases is 2, Range of values is 24 to 28
  4343                           ; switch strategies available:
  4344                           ; Name         Instructions Cycles
  4345                           ; simple_byte            7     4 (average)
  4346                           ;	Chosen strategy is simple_byte
  4347  00301A  0A18               	xorlw	24	; case 24
  4348  00301C  B4D8               	btfsc	status,2,c
  4349  00301E  D7F5               	goto	l1191
  4350  003020  0A04               	xorlw	4	; case 28
  4351  003022  A4D8               	btfss	status,2,c
  4352  003024  0012               	return	
  4353  003026  D7F4               	goto	l1193
  4354  003028                     __end_of_GroupCommon:
  4355                           	opt stack 0
  4356                           tosu	equ	0xFFF
  4357                           tosh	equ	0xFFE
  4358                           tosl	equ	0xFFD
  4359                           pclath	equ	0xFFA
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf1	equ	0xFE7
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _GroupRx *****************
  4379 ;; Defined at:
  4380 ;;		line 11 in file "MessageFunctions.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  request         1    wreg     enum E6
  4383 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  request         1  132[BANK0 ] enum E6
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4395 ;;      Params:         0       2       0       0       0       0       0
  4396 ;;      Locals:         0       1       0       0       0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0
  4398 ;;      Totals:         0       3       0       0       0       0       0
  4399 ;;Total ram usage:        3 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:   10
  4402 ;; This function calls:
  4403 ;;		_DacSetValue
  4404 ;; This function is called by:
  4405 ;;		_readUartByte
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text4
  4410  002D7E                     __ptext4:
  4411                           	opt stack 0
  4412  002D7E                     _GroupRx:
  4413                           	opt stack 19
  4414                           
  4415                           ;incstack = 0
  4416                           ;GroupRx@request stored from wreg
  4417  002D7E  0100               	movlb	0	; () banked
  4418  002D80  6FE4               	movwf	GroupRx@request& (0+255),b
  4419                           
  4420                           ;MessageFunctions.c: 13: switch (request)
  4421  002D82  D007               	goto	l1164
  4422  002D84                     
  4423                           ;MessageFunctions.c: 37: DacSetValue(data);
  4424  002D84  C0E2  F0D0         	movff	GroupRx@data,DacSetValue@data
  4425  002D88  C0E3  F0D1         	movff	GroupRx@data+1,DacSetValue@data+1
  4426  002D8C  EC9C  F00A         	call	_DacSetValue	;wreg free
  4427                           
  4428                           ;MessageFunctions.c: 42: }
  4429                           
  4430                           ;MessageFunctions.c: 41: break;
  4431                           
  4432                           ;MessageFunctions.c: 40: default:
  4433                           
  4434                           ;MessageFunctions.c: 38: break;
  4435  002D90  0012               	return	
  4436  002D92                     l1164:
  4437  002D92  0100               	movlb	0	; () banked
  4438  002D94  51E4               	movf	GroupRx@request& (0+255),w,b
  4439                           
  4440                           ; Switch size 1, requested type "space"
  4441                           ; Number of cases is 6, Range of values is 18 to 40
  4442                           ; switch strategies available:
  4443                           ; Name         Instructions Cycles
  4444                           ; simple_byte           19    10 (average)
  4445                           ;	Chosen strategy is simple_byte
  4446  002D96  0A12               	xorlw	18	; case 18
  4447  002D98  B4D8               	btfsc	status,2,c
  4448  002D9A  0012               	return	
  4449  002D9C  0A04               	xorlw	4	; case 22
  4450  002D9E  B4D8               	btfsc	status,2,c
  4451  002DA0  0012               	return	
  4452  002DA2  0A0F               	xorlw	15	; case 25
  4453  002DA4  B4D8               	btfsc	status,2,c
  4454  002DA6  0012               	return	
  4455  002DA8  0A38               	xorlw	56	; case 33
  4456  002DAA  B4D8               	btfsc	status,2,c
  4457  002DAC  0012               	return	
  4458  002DAE  0A02               	xorlw	2	; case 35
  4459  002DB0  B4D8               	btfsc	status,2,c
  4460  002DB2  D7E8               	goto	l1171
  4461  002DB4  0A0B               	xorlw	11	; case 40
  4462  002DB6  0012               	return	
  4463  002DB8                     __end_of_GroupRx:
  4464                           	opt stack 0
  4465                           tosu	equ	0xFFF
  4466                           tosh	equ	0xFFE
  4467                           tosl	equ	0xFFD
  4468                           pclath	equ	0xFFA
  4469                           tblptru	equ	0xFF8
  4470                           tblptrh	equ	0xFF7
  4471                           tblptrl	equ	0xFF6
  4472                           tablat	equ	0xFF5
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           postinc0	equ	0xFEE
  4476                           wreg	equ	0xFE8
  4477                           indf1	equ	0xFE7
  4478                           postdec1	equ	0xFE5
  4479                           fsr1h	equ	0xFE2
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _GroupTx *****************
  4488 ;; Defined at:
  4489 ;;		line 45 in file "MessageFunctions.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  request         1    wreg     enum E6
  4492 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  request         1  132[BANK0 ] enum E6
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4504 ;;      Params:         0       2       0       0       0       0       0
  4505 ;;      Locals:         0       1       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0
  4507 ;;      Totals:         0       3       0       0       0       0       0
  4508 ;;Total ram usage:        3 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    9
  4511 ;; This function calls:
  4512 ;;		_AdcSingleSample
  4513 ;; This function is called by:
  4514 ;;		_readUartByte
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text5
  4519  002AA6                     __ptext5:
  4520                           	opt stack 0
  4521  002AA6                     _GroupTx:
  4522                           	opt stack 20
  4523                           
  4524                           ;incstack = 0
  4525                           ;GroupTx@request stored from wreg
  4526  002AA6  0100               	movlb	0	; () banked
  4527  002AA8  6FE4               	movwf	GroupTx@request& (0+255),b
  4528                           
  4529                           ;MessageFunctions.c: 47: switch (request)
  4530  002AAA  D008               	goto	l1176
  4531  002AAC                     
  4532                           ;MessageFunctions.c: 74: AdcSingleSample(TX_TYPE, data);
  4533  002AAC  C0E2  F0C1         	movff	GroupTx@data,AdcSingleSample@data
  4534  002AB0  C0E3  F0C2         	movff	GroupTx@data+1,AdcSingleSample@data+1
  4535  002AB4  0E00               	movlw	0
  4536  002AB6  ECEE  F005         	call	_AdcSingleSample
  4537                           
  4538                           ;MessageFunctions.c: 79: }
  4539                           
  4540                           ;MessageFunctions.c: 78: break;
  4541                           
  4542                           ;MessageFunctions.c: 77: default:
  4543                           
  4544                           ;MessageFunctions.c: 75: break;
  4545  002ABA  0012               	return	
  4546  002ABC                     l1176:
  4547  002ABC  0100               	movlb	0	; () banked
  4548  002ABE  51E4               	movf	GroupTx@request& (0+255),w,b
  4549                           
  4550                           ; Switch size 1, requested type "space"
  4551                           ; Number of cases is 8, Range of values is 18 to 101
  4552                           ; switch strategies available:
  4553                           ; Name         Instructions Cycles
  4554                           ; simple_byte           25    13 (average)
  4555                           ;	Chosen strategy is simple_byte
  4556  002AC0  0A12               	xorlw	18	; case 18
  4557  002AC2  B4D8               	btfsc	status,2,c
  4558  002AC4  0012               	return	
  4559  002AC6  0A04               	xorlw	4	; case 22
  4560  002AC8  B4D8               	btfsc	status,2,c
  4561  002ACA  0012               	return	
  4562  002ACC  0A0F               	xorlw	15	; case 25
  4563  002ACE  B4D8               	btfsc	status,2,c
  4564  002AD0  0012               	return	
  4565  002AD2  0A38               	xorlw	56	; case 33
  4566  002AD4  B4D8               	btfsc	status,2,c
  4567  002AD6  0012               	return	
  4568  002AD8  0A02               	xorlw	2	; case 35
  4569  002ADA  B4D8               	btfsc	status,2,c
  4570  002ADC  D7E7               	goto	l1185
  4571  002ADE  0A0B               	xorlw	11	; case 40
  4572  002AE0  B4D8               	btfsc	status,2,c
  4573  002AE2  0012               	return	
  4574  002AE4  0A4B               	xorlw	75	; case 99
  4575  002AE6  B4D8               	btfsc	status,2,c
  4576  002AE8  0012               	return	
  4577  002AEA  0A06               	xorlw	6	; case 101
  4578  002AEC  0012               	return	
  4579  002AEE                     __end_of_GroupTx:
  4580                           	opt stack 0
  4581                           tosu	equ	0xFFF
  4582                           tosh	equ	0xFFE
  4583                           tosl	equ	0xFFD
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           postinc0	equ	0xFEE
  4592                           wreg	equ	0xFE8
  4593                           indf1	equ	0xFE7
  4594                           postdec1	equ	0xFE5
  4595                           fsr1h	equ	0xFE2
  4596                           fsr1l	equ	0xFE1
  4597                           indf2	equ	0xFDF
  4598                           postinc2	equ	0xFDE
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _AdcSingleSample *****************
  4604 ;; Defined at:
  4605 ;;		line 46 in file "AdcApp.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  cType           1    wreg     enum E177
  4608 ;;  data            2   97[BANK0 ] PTR unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  cType           1  110[BANK0 ] enum E177
  4611 ;;  retNum          4  106[BANK0 ] unsigned long 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4621 ;;      Params:         0       2       0       0       0       0       0
  4622 ;;      Locals:         0      11       0       0       0       0       0
  4623 ;;      Temps:          0       1       0       0       0       0       0
  4624 ;;      Totals:         0      14       0       0       0       0       0
  4625 ;;Total ram usage:       14 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    8
  4628 ;; This function calls:
  4629 ;;		_GetIntFromUartData
  4630 ;;		_UART_Write_Text
  4631 ;;		___awtoft
  4632 ;;		___fttol
  4633 ;;		___llmod
  4634 ;;		_pow
  4635 ;; This function is called by:
  4636 ;;		_GroupTx
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text6
  4641  000BDC                     __ptext6:
  4642                           	opt stack 0
  4643  000BDC                     _AdcSingleSample:
  4644                           	opt stack 20
  4645                           
  4646                           ;incstack = 0
  4647                           ;AdcSingleSample@cType stored from wreg
  4648  000BDC  0100               	movlb	0	; () banked
  4649  000BDE  6FCE               	movwf	AdcSingleSample@cType& (0+255),b
  4650                           
  4651                           ;AdcApp.c: 48: uint32_t retNum = 0x0;
  4652  000BE0  0E00               	movlw	0
  4653  000BE2  0100               	movlb	0	; () banked
  4654  000BE4  6FCA               	movwf	AdcSingleSample@retNum& (0+255),b
  4655  000BE6  0E00               	movlw	0
  4656  000BE8  6FCB               	movwf	(AdcSingleSample@retNum+1)& (0+255),b
  4657  000BEA  0E00               	movlw	0
  4658  000BEC  6FCC               	movwf	(AdcSingleSample@retNum+2)& (0+255),b
  4659  000BEE  0E00               	movlw	0
  4660  000BF0  6FCD               	movwf	(AdcSingleSample@retNum+3)& (0+255),b
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;AdcApp.c: 50: if(data[0] == '0')
  4664  000BF2  C0C1  FFD9         	movff	AdcSingleSample@data,fsr2l
  4665  000BF6  C0C2  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  4666  000BFA  0E30               	movlw	48
  4667  000BFC  18DE               	xorwf	postinc2,w,c
  4668  000BFE  A4D8               	btfss	status,2,c
  4669  000C00  D007               	goto	l114
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;AdcApp.c: 51: {
  4673                           ;AdcApp.c: 52: UART_Write_Text("NOT OK \n\r");
  4674  000C02  0ED0               	movlw	low STR_1
  4675  000C04  6E19               	movwf	UART_Write_Text@text,c
  4676  000C06  0E7F               	movlw	high STR_1
  4677  000C08  6E1A               	movwf	UART_Write_Text@text+1,c
  4678  000C0A  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4679                           
  4680                           ;AdcApp.c: 53: }
  4681  000C0E  0012               	return	
  4682  000C10                     l114:
  4683                           
  4684                           ;AdcApp.c: 54: else
  4685                           ;AdcApp.c: 55: {
  4686                           ;AdcApp.c: 56: retNum = GetIntFromUartData(data);
  4687  000C10  C0C1  F066         	movff	AdcSingleSample@data,GetIntFromUartData@data
  4688  000C14  C0C2  F067         	movff	AdcSingleSample@data+1,GetIntFromUartData@data+1
  4689  000C18  ECE2  F011         	call	_GetIntFromUartData	;wreg free
  4690  000C1C  C066  F0CA         	movff	?_GetIntFromUartData,AdcSingleSample@retNum
  4691  000C20  C067  F0CB         	movff	?_GetIntFromUartData+1,AdcSingleSample@retNum+1
  4692  000C24  C068  F0CC         	movff	?_GetIntFromUartData+2,AdcSingleSample@retNum+2
  4693  000C28  C069  F0CD         	movff	?_GetIntFromUartData+3,AdcSingleSample@retNum+3
  4694                           
  4695                           ;AdcApp.c: 57: channelNum = data[1] - '0';
  4696  000C2C  0100               	movlb	0	; () banked
  4697  000C2E  EE20 F001          	lfsr	2,1
  4698  000C32  51C1               	movf	AdcSingleSample@data& (0+255),w,b
  4699  000C34  26D9               	addwf	fsr2l,f,c
  4700  000C36  51C2               	movf	(AdcSingleSample@data+1)& (0+255),w,b
  4701  000C38  22DA               	addwfc	fsr2h,f,c
  4702  000C3A  50DF               	movf	indf2,w,c
  4703  000C3C  6FC3               	movwf	??_AdcSingleSample& (0+255),b
  4704  000C3E  0ED0               	movlw	208
  4705  000C40  25C3               	addwf	??_AdcSingleSample& (0+255),w,b
  4706  000C42  6FF0               	movwf	_channelNum& (0+255),b
  4707  000C44  6BF1               	clrf	(_channelNum+1)& (0+255),b
  4708  000C46  0EFF               	movlw	255
  4709  000C48  23F1               	addwfc	(_channelNum+1)& (0+255),f,b
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;AdcApp.c: 58: numSamples = retNum % (int)(pow(10,data[0] - 1));
  4713  000C4A  C0C1  FFD9         	movff	AdcSingleSample@data,fsr2l
  4714  000C4E  C0C2  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  4715  000C52  50DF               	movf	indf2,w,c
  4716  000C54  6FC3               	movwf	??_AdcSingleSample& (0+255),b
  4717  000C56  0EFF               	movlw	255
  4718  000C58  25C3               	addwf	??_AdcSingleSample& (0+255),w,b
  4719  000C5A  6E20               	movwf	___awtoft@c,c
  4720  000C5C  6A21               	clrf	___awtoft@c+1,c
  4721  000C5E  0EFF               	movlw	255
  4722  000C60  2221               	addwfc	___awtoft@c+1,f,c
  4723  000C62  EC14  F017         	call	___awtoft	;wreg free
  4724  000C66  C020  F0C4         	movff	?___awtoft,_AdcSingleSample$3062
  4725  000C6A  C021  F0C5         	movff	?___awtoft+1,_AdcSingleSample$3062+1
  4726  000C6E  C022  F0C6         	movff	?___awtoft+2,_AdcSingleSample$3062+2
  4727                           
  4728                           ;AdcApp.c: 58: numSamples = retNum % (int)(pow(10,data[0] - 1));
  4729  000C72  C0C4  F0AB         	movff	_AdcSingleSample$3062,pow@y
  4730  000C76  C0C5  F0AC         	movff	_AdcSingleSample$3062+1,pow@y+1
  4731  000C7A  C0C6  F0AD         	movff	_AdcSingleSample$3062+2,pow@y+2
  4732  000C7E  0E00               	movlw	0
  4733  000C80  0100               	movlb	0	; () banked
  4734  000C82  6FA8               	movwf	pow@x& (0+255),b
  4735  000C84  0E20               	movlw	32
  4736  000C86  6FA9               	movwf	(pow@x+1)& (0+255),b
  4737  000C88  0E41               	movlw	65
  4738  000C8A  6FAA               	movwf	(pow@x+2)& (0+255),b
  4739  000C8C  EC4B  F009         	call	_pow	;wreg free
  4740  000C90  C0A8  F0C7         	movff	?_pow,_AdcSingleSample$3063
  4741  000C94  C0A9  F0C8         	movff	?_pow+1,_AdcSingleSample$3063+1
  4742  000C98  C0AA  F0C9         	movff	?_pow+2,_AdcSingleSample$3063+2
  4743                           
  4744                           ;AdcApp.c: 58: numSamples = retNum % (int)(pow(10,data[0] - 1));
  4745  000C9C  C0CA  F0B9         	movff	AdcSingleSample@retNum,___llmod@dividend
  4746  000CA0  C0CB  F0BA         	movff	AdcSingleSample@retNum+1,___llmod@dividend+1
  4747  000CA4  C0CC  F0BB         	movff	AdcSingleSample@retNum+2,___llmod@dividend+2
  4748  000CA8  C0CD  F0BC         	movff	AdcSingleSample@retNum+3,___llmod@dividend+3
  4749  000CAC  C0C7  F07E         	movff	_AdcSingleSample$3063,___fttol@f1
  4750  000CB0  C0C8  F07F         	movff	_AdcSingleSample$3063+1,___fttol@f1+1
  4751  000CB4  C0C9  F080         	movff	_AdcSingleSample$3063+2,___fttol@f1+2
  4752  000CB8  EC4A  F00C         	call	___fttol	;wreg free
  4753  000CBC  0100               	movlb	0	; () banked
  4754  000CBE  C07E  F0BD         	movff	?___fttol,___llmod@divisor
  4755  000CC2  C07F  F0BE         	movff	?___fttol+1,___llmod@divisor+1
  4756  000CC6  0E00               	movlw	0
  4757  000CC8  BFBE               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  4758  000CCA  0EFF               	movlw	-1
  4759  000CCC  6FBF               	movwf	(___llmod@divisor+2)& (0+255),b
  4760  000CCE  6FC0               	movwf	(___llmod@divisor+3)& (0+255),b
  4761  000CD0  EC32  F013         	call	___llmod	;wreg free
  4762  000CD4  C0B9  F0F2         	movff	?___llmod,_numSamples
  4763  000CD8  C0BA  F0F3         	movff	?___llmod+1,_numSamples+1
  4764                           
  4765                           ;AdcApp.c: 61: if(channelNum > (0x04))
  4766  000CDC  0100               	movlb	0	; () banked
  4767  000CDE  51F1               	movf	(_channelNum+1)& (0+255),w,b
  4768  000CE0  E104               	bnz	u8010
  4769  000CE2  0E05               	movlw	5
  4770  000CE4  5DF0               	subwf	_channelNum& (0+255),w,b
  4771  000CE6  A0D8               	btfss	status,0,c
  4772  000CE8  D007               	goto	l116
  4773  000CEA                     u8010:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;AdcApp.c: 62: {
  4777                           ;AdcApp.c: 63: UART_Write_Text("NOT OK \n\r");
  4778  000CEA  0ED0               	movlw	low STR_1
  4779  000CEC  6E19               	movwf	UART_Write_Text@text,c
  4780  000CEE  0E7F               	movlw	high STR_1
  4781  000CF0  6E1A               	movwf	UART_Write_Text@text+1,c
  4782  000CF2  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4783                           
  4784                           ;AdcApp.c: 64: }
  4785  000CF6  0012               	return	
  4786  000CF8                     l116:
  4787                           
  4788                           ;AdcApp.c: 65: else
  4789                           ;AdcApp.c: 66: {
  4790                           ;AdcApp.c: 67: if(cType == TX_TYPE)
  4791  000CF8  0100               	movlb	0	; () banked
  4792  000CFA  51CE               	movf	AdcSingleSample@cType& (0+255),w,b
  4793  000CFC  A4D8               	btfss	status,2,c
  4794  000CFE  D029               	goto	l125
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;AdcApp.c: 68: {
  4798                           ;AdcApp.c: 70: if(channelNum == 0) UART_Write_Text("TX SAMPLE CHANNEL: TX-ADC_RREV\n\r")
      +                          ;
  4799  000D00  51F0               	movf	_channelNum& (0+255),w,b
  4800  000D02  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4801  000D04  A4D8               	btfss	status,2,c
  4802  000D06  D007               	goto	l119
  4803                           
  4804                           ; BSR set to: 0
  4805  000D08  0EA1               	movlw	low STR_3
  4806  000D0A  6E19               	movwf	UART_Write_Text@text,c
  4807  000D0C  0E7E               	movlw	high STR_3
  4808  000D0E  6E1A               	movwf	UART_Write_Text@text+1,c
  4809  000D10  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4810  000D14  D00B               	goto	l121
  4811  000D16                     l119:
  4812                           
  4813                           ;AdcApp.c: 71: else if(channelNum == 1) UART_Write_Text("TX SAMPLE CHANNEL ADC_FFWR\n\r"
      +                          );
  4814  000D16  0100               	movlb	0	; () banked
  4815  000D18  05F0               	decf	_channelNum& (0+255),w,b
  4816  000D1A  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4817  000D1C  A4D8               	btfss	status,2,c
  4818  000D1E  D006               	goto	l121
  4819                           
  4820                           ; BSR set to: 0
  4821  000D20  0E1E               	movlw	low STR_4
  4822  000D22  6E19               	movwf	UART_Write_Text@text,c
  4823  000D24  0E7F               	movlw	high STR_4
  4824  000D26  6E1A               	movwf	UART_Write_Text@text+1,c
  4825  000D28  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4826  000D2C                     l121:
  4827                           
  4828                           ;AdcApp.c: 72: if(channelNum == 0x0 || channelNum == 0x1)
  4829  000D2C  0100               	movlb	0	; () banked
  4830  000D2E  51F0               	movf	_channelNum& (0+255),w,b
  4831  000D30  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4832  000D32  B4D8               	btfsc	status,2,c
  4833  000D34  D004               	goto	u8060
  4834                           
  4835                           ; BSR set to: 0
  4836  000D36  05F0               	decf	_channelNum& (0+255),w,b
  4837  000D38  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4838  000D3A  A4D8               	btfss	status,2,c
  4839  000D3C  D004               	goto	l122
  4840  000D3E                     u8060:
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;AdcApp.c: 73: {
  4844                           ;AdcApp.c: 74: needToSample = 1;
  4845                           
  4846                           ; BSR set to: 0
  4847  000D3E  0E01               	movlw	1
  4848  000D40  0101               	movlb	1	; () banked
  4849  000D42  6F2E               	movwf	_needToSample& (0+255),b	;volatile
  4850                           
  4851                           ;AdcApp.c: 75: }
  4852  000D44  D006               	goto	l125
  4853  000D46                     l122:
  4854                           
  4855                           ;AdcApp.c: 76: else
  4856                           ;AdcApp.c: 77: {
  4857                           ;AdcApp.c: 78: UART_Write_Text("NOT OK \n\r");
  4858                           
  4859                           ; BSR set to: 1
  4860  000D46  0ED0               	movlw	low STR_1
  4861  000D48  6E19               	movwf	UART_Write_Text@text,c
  4862  000D4A  0E7F               	movlw	high STR_1
  4863  000D4C  6E1A               	movwf	UART_Write_Text@text+1,c
  4864  000D4E  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4865  000D52                     l125:
  4866                           
  4867                           ;AdcApp.c: 79: }
  4868                           ;AdcApp.c: 81: }
  4869                           ;AdcApp.c: 83: if(cType == RX_TYPE)
  4870  000D52  0100               	movlb	0	; () banked
  4871  000D54  05CE               	decf	AdcSingleSample@cType& (0+255),w,b
  4872  000D56  A4D8               	btfss	status,2,c
  4873  000D58  0012               	return	
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;AdcApp.c: 84: {
  4877                           ;AdcApp.c: 85: if(channelNum == 0) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_FFWR\n\r");
  4878  000D5A  51F0               	movf	_channelNum& (0+255),w,b
  4879  000D5C  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4880  000D5E  A4D8               	btfss	status,2,c
  4881  000D60  D007               	goto	l127
  4882                           
  4883                           ; BSR set to: 0
  4884  000D62  0EC2               	movlw	low STR_6
  4885  000D64  6E19               	movwf	UART_Write_Text@text,c
  4886  000D66  0E7E               	movlw	high STR_6
  4887  000D68  6E1A               	movwf	UART_Write_Text@text+1,c
  4888  000D6A  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4889  000D6E  D00B               	goto	l129
  4890  000D70                     l127:
  4891                           
  4892                           ;AdcApp.c: 86: else if(channelNum == 1) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_VG_MON
      +                          \n\r");
  4893  000D70  0100               	movlb	0	; () banked
  4894  000D72  05F0               	decf	_channelNum& (0+255),w,b
  4895  000D74  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4896  000D76  A4D8               	btfss	status,2,c
  4897  000D78  D006               	goto	l129
  4898                           
  4899                           ; BSR set to: 0
  4900  000D7A  0E7F               	movlw	low STR_7
  4901  000D7C  6E19               	movwf	UART_Write_Text@text,c
  4902  000D7E  0E7E               	movlw	high STR_7
  4903  000D80  6E1A               	movwf	UART_Write_Text@text+1,c
  4904  000D82  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4905  000D86                     l129:
  4906                           
  4907                           ;AdcApp.c: 87: if(channelNum == 0x0 || channelNum == 0x1)
  4908  000D86  0100               	movlb	0	; () banked
  4909  000D88  51F0               	movf	_channelNum& (0+255),w,b
  4910  000D8A  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4911  000D8C  B4D8               	btfsc	status,2,c
  4912  000D8E  D004               	goto	u8110
  4913                           
  4914                           ; BSR set to: 0
  4915  000D90  05F0               	decf	_channelNum& (0+255),w,b
  4916  000D92  11F1               	iorwf	(_channelNum+1)& (0+255),w,b
  4917  000D94  A4D8               	btfss	status,2,c
  4918  000D96  D004               	goto	l130
  4919  000D98                     u8110:
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;AdcApp.c: 88: {
  4923                           ;AdcApp.c: 89: needToSample = 1;
  4924                           
  4925                           ; BSR set to: 0
  4926  000D98  0E01               	movlw	1
  4927  000D9A  0101               	movlb	1	; () banked
  4928  000D9C  6F2E               	movwf	_needToSample& (0+255),b	;volatile
  4929                           
  4930                           ;AdcApp.c: 90: }
  4931  000D9E  0012               	return	
  4932  000DA0                     l130:
  4933                           
  4934                           ;AdcApp.c: 91: else
  4935                           ;AdcApp.c: 92: {
  4936                           ;AdcApp.c: 93: UART_Write_Text("NOT OK \n\r");
  4937                           
  4938                           ; BSR set to: 1
  4939  000DA0  0ED0               	movlw	low STR_1
  4940  000DA2  6E19               	movwf	UART_Write_Text@text,c
  4941  000DA4  0E7F               	movlw	high STR_1
  4942  000DA6  6E1A               	movwf	UART_Write_Text@text+1,c
  4943  000DA8  ECF9  F012         	call	_UART_Write_Text	;wreg free
  4944  000DAC  0012               	return	
  4945  000DAE                     __end_of_AdcSingleSample:
  4946                           	opt stack 0
  4947                           tosu	equ	0xFFF
  4948                           tosh	equ	0xFFE
  4949                           tosl	equ	0xFFD
  4950                           pclath	equ	0xFFA
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           indf1	equ	0xFE7
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _DacSetValue *****************
  4970 ;; Defined at:
  4971 ;;		line 31 in file "DacApp.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  data            2  112[BANK0 ] PTR unsigned char 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  retNum          4  115[BANK0 ] unsigned long 
  4976 ;;  dacDigital      2  127[BANK0 ] unsigned int 
  4977 ;;  dacAnalog       2  125[BANK0 ] unsigned int 
  4978 ;;  dacNum          1  129[BANK0 ] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4988 ;;      Params:         0       2       0       0       0       0       0
  4989 ;;      Locals:         0      15       0       0       0       0       0
  4990 ;;      Temps:          0       1       0       0       0       0       0
  4991 ;;      Totals:         0      18       0       0       0       0       0
  4992 ;;Total ram usage:       18 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    9
  4995 ;; This function calls:
  4996 ;;		_DacAnalogToDigitalSpi
  4997 ;;		_GetIntFromUartData
  4998 ;;		_SWSPI_send_word
  4999 ;;		_StoreIntInEeprom
  5000 ;;		___awtoft
  5001 ;;		___fttol
  5002 ;;		___llmod
  5003 ;;		_pow
  5004 ;; This function is called by:
  5005 ;;		_GroupRx
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text7
  5010  001538                     __ptext7:
  5011                           	opt stack 0
  5012  001538                     _DacSetValue:
  5013                           	opt stack 19
  5014                           
  5015                           ;DacApp.c: 33: uint32_t retNum = GetIntFromUartData(data);
  5016                           
  5017                           ;incstack = 0
  5018  001538  C0D0  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5019  00153C  C0D1  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5020  001540  ECE2  F011         	call	_GetIntFromUartData	;wreg free
  5021  001544  C066  F0D3         	movff	?_GetIntFromUartData,DacSetValue@retNum
  5022  001548  C067  F0D4         	movff	?_GetIntFromUartData+1,DacSetValue@retNum+1
  5023  00154C  C068  F0D5         	movff	?_GetIntFromUartData+2,DacSetValue@retNum+2
  5024  001550  C069  F0D6         	movff	?_GetIntFromUartData+3,DacSetValue@retNum+3
  5025                           
  5026                           ;DacApp.c: 34: uint8_t dacNum = data[1] - '0';
  5027  001554  0100               	movlb	0	; () banked
  5028  001556  EE20 F001          	lfsr	2,1
  5029  00155A  51D0               	movf	DacSetValue@data& (0+255),w,b
  5030  00155C  26D9               	addwf	fsr2l,f,c
  5031  00155E  51D1               	movf	(DacSetValue@data+1)& (0+255),w,b
  5032  001560  22DA               	addwfc	fsr2h,f,c
  5033  001562  50DF               	movf	indf2,w,c
  5034  001564  0FD0               	addlw	208
  5035  001566  6FE1               	movwf	DacSetValue@dacNum& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;DacApp.c: 35: uint16_t dacAnalog = retNum % (int)(pow(10,data[0] - 1));
  5039  001568  C0D0  FFD9         	movff	DacSetValue@data,fsr2l
  5040  00156C  C0D1  FFDA         	movff	DacSetValue@data+1,fsr2h
  5041  001570  50DF               	movf	indf2,w,c
  5042  001572  6FD2               	movwf	??_DacSetValue& (0+255),b
  5043  001574  0EFF               	movlw	255
  5044  001576  25D2               	addwf	??_DacSetValue& (0+255),w,b
  5045  001578  6E20               	movwf	___awtoft@c,c
  5046  00157A  6A21               	clrf	___awtoft@c+1,c
  5047  00157C  0EFF               	movlw	255
  5048  00157E  2221               	addwfc	___awtoft@c+1,f,c
  5049  001580  EC14  F017         	call	___awtoft	;wreg free
  5050  001584  C020  F0D7         	movff	?___awtoft,_DacSetValue$3066
  5051  001588  C021  F0D8         	movff	?___awtoft+1,_DacSetValue$3066+1
  5052  00158C  C022  F0D9         	movff	?___awtoft+2,_DacSetValue$3066+2
  5053                           
  5054                           ;DacApp.c: 35: uint16_t dacAnalog = retNum % (int)(pow(10,data[0] - 1));
  5055  001590  C0D7  F0AB         	movff	_DacSetValue$3066,pow@y
  5056  001594  C0D8  F0AC         	movff	_DacSetValue$3066+1,pow@y+1
  5057  001598  C0D9  F0AD         	movff	_DacSetValue$3066+2,pow@y+2
  5058  00159C  0E00               	movlw	0
  5059  00159E  0100               	movlb	0	; () banked
  5060  0015A0  6FA8               	movwf	pow@x& (0+255),b
  5061  0015A2  0E20               	movlw	32
  5062  0015A4  6FA9               	movwf	(pow@x+1)& (0+255),b
  5063  0015A6  0E41               	movlw	65
  5064  0015A8  6FAA               	movwf	(pow@x+2)& (0+255),b
  5065  0015AA  EC4B  F009         	call	_pow	;wreg free
  5066  0015AE  C0A8  F0DA         	movff	?_pow,_DacSetValue$3067
  5067  0015B2  C0A9  F0DB         	movff	?_pow+1,_DacSetValue$3067+1
  5068  0015B6  C0AA  F0DC         	movff	?_pow+2,_DacSetValue$3067+2
  5069                           
  5070                           ;DacApp.c: 35: uint16_t dacAnalog = retNum % (int)(pow(10,data[0] - 1));
  5071  0015BA  C0D3  F0B9         	movff	DacSetValue@retNum,___llmod@dividend
  5072  0015BE  C0D4  F0BA         	movff	DacSetValue@retNum+1,___llmod@dividend+1
  5073  0015C2  C0D5  F0BB         	movff	DacSetValue@retNum+2,___llmod@dividend+2
  5074  0015C6  C0D6  F0BC         	movff	DacSetValue@retNum+3,___llmod@dividend+3
  5075  0015CA  C0DA  F07E         	movff	_DacSetValue$3067,___fttol@f1
  5076  0015CE  C0DB  F07F         	movff	_DacSetValue$3067+1,___fttol@f1+1
  5077  0015D2  C0DC  F080         	movff	_DacSetValue$3067+2,___fttol@f1+2
  5078  0015D6  EC4A  F00C         	call	___fttol	;wreg free
  5079  0015DA  0100               	movlb	0	; () banked
  5080  0015DC  C07E  F0BD         	movff	?___fttol,___llmod@divisor
  5081  0015E0  C07F  F0BE         	movff	?___fttol+1,___llmod@divisor+1
  5082  0015E4  0E00               	movlw	0
  5083  0015E6  BFBE               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5084  0015E8  0EFF               	movlw	-1
  5085  0015EA  6FBF               	movwf	(___llmod@divisor+2)& (0+255),b
  5086  0015EC  6FC0               	movwf	(___llmod@divisor+3)& (0+255),b
  5087  0015EE  EC32  F013         	call	___llmod	;wreg free
  5088  0015F2  C0B9  F0DD         	movff	?___llmod,DacSetValue@dacAnalog
  5089  0015F6  C0BA  F0DE         	movff	?___llmod+1,DacSetValue@dacAnalog+1
  5090                           
  5091                           ;DacApp.c: 36: uint16_t dacDigital = DacAnalogToDigitalSpi(dacAnalog, dacNum);
  5092  0015FA  C0DD  F0B9         	movff	DacSetValue@dacAnalog,DacAnalogToDigitalSpi@AnalogValMili
  5093  0015FE  C0DE  F0BA         	movff	DacSetValue@dacAnalog+1,DacAnalogToDigitalSpi@AnalogValMili+1
  5094  001602  C0E1  F0BB         	movff	DacSetValue@dacNum,DacAnalogToDigitalSpi@dacNum
  5095  001606  EC0C  F004         	call	_DacAnalogToDigitalSpi	;wreg free
  5096  00160A  C0B9  F0DF         	movff	?_DacAnalogToDigitalSpi,DacSetValue@dacDigital
  5097  00160E  C0BA  F0E0         	movff	?_DacAnalogToDigitalSpi+1,DacSetValue@dacDigital+1
  5098                           
  5099                           ;DacApp.c: 39: SWSPI_send_word(EXT_DAC, dacDigital, 1);
  5100  001612  C0DF  F028         	movff	DacSetValue@dacDigital,SWSPI_send_word@data
  5101  001616  C0E0  F029         	movff	DacSetValue@dacDigital+1,SWSPI_send_word@data+1
  5102  00161A  6A2A               	clrf	SWSPI_send_word@data+2,c
  5103  00161C  6A2B               	clrf	SWSPI_send_word@data+3,c
  5104  00161E  0E01               	movlw	1
  5105  001620  6E2C               	movwf	SWSPI_send_word@dataSize,c
  5106  001622  0E02               	movlw	2
  5107  001624  EC95  F011         	call	_SWSPI_send_word
  5108                           
  5109                           ;DacApp.c: 42: StoreIntInEeprom(dacDigital, (0x40) | DAC_ADDRES[dacNum], 2);
  5110  001628  C0DF  F021         	movff	DacSetValue@dacDigital,StoreIntInEeprom@data
  5111  00162C  C0E0  F022         	movff	DacSetValue@dacDigital+1,StoreIntInEeprom@data+1
  5112  001630  6A23               	clrf	StoreIntInEeprom@data+2,c
  5113  001632  6A24               	clrf	StoreIntInEeprom@data+3,c
  5114  001634  0100               	movlb	0	; () banked
  5115  001636  51E1               	movf	DacSetValue@dacNum& (0+255),w,b
  5116  001638  0D01               	mullw	1
  5117  00163A  0EFD               	movlw	low _DAC_ADDRES
  5118  00163C  24F3               	addwf	prodl,w,c
  5119  00163E  6EF6               	movwf	tblptrl,c
  5120  001640  0E79               	movlw	high _DAC_ADDRES
  5121  001642  20F4               	addwfc	prodh,w,c
  5122  001644  6EF7               	movwf	tblptrh,c
  5123  001646                     	if	0	;There are less than 3 active tblptr bytes
  5124  001646                     	endif
  5125  001646  0008               	tblrd		*
  5126  001648  50F5               	movf	tablat,w,c
  5127  00164A  0940               	iorlw	64
  5128  00164C  6E25               	movwf	StoreIntInEeprom@address,c
  5129  00164E  0E00               	movlw	0
  5130  001650  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  5131  001652  0E02               	movlw	2
  5132  001654  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  5133  001656  ECF8  F016         	call	_StoreIntInEeprom	;wreg free
  5134  00165A  0012               	return		;funcret
  5135  00165C                     __end_of_DacSetValue:
  5136                           	opt stack 0
  5137                           tosu	equ	0xFFF
  5138                           tosh	equ	0xFFE
  5139                           tosl	equ	0xFFD
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           indf1	equ	0xFE7
  5150                           postdec1	equ	0xFE5
  5151                           fsr1h	equ	0xFE2
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _GetIntFromUartData *****************
  5160 ;; Defined at:
  5161 ;;		line 60 in file "SystemCommon.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  c               1   20[BANK0 ] unsigned char 
  5166 ;;  idx             2   21[BANK0 ] int 
  5167 ;;  dataRegArr      8   12[BANK0 ] unsigned char [8]
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  4    6[BANK0 ] unsigned long 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         0       4       0       0       0       0       0
  5178 ;;      Locals:         0      11       0       0       0       0       0
  5179 ;;      Temps:          0       2       0       0       0       0       0
  5180 ;;      Totals:         0      17       0       0       0       0       0
  5181 ;;Total ram usage:       17 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    6
  5184 ;; This function calls:
  5185 ;;		_ZeroArray
  5186 ;;		_strtol
  5187 ;; This function is called by:
  5188 ;;		_AdcSingleSample
  5189 ;;		_DacSetValue
  5190 ;;		_UpdateRxFreq
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text8
  5195  0023C4                     __ptext8:
  5196                           	opt stack 0
  5197  0023C4                     _GetIntFromUartData:
  5198                           	opt stack 21
  5199                           
  5200                           ;SystemCommon.c: 62: char dataRegArr[8];
  5201                           ;SystemCommon.c: 63: ZeroArray(dataRegArr, 8);
  5202                           
  5203                           ;incstack = 0
  5204  0023C4  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  5205  0023C6  6E20               	movwf	ZeroArray@array,c
  5206  0023C8  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5207  0023CA  6E21               	movwf	ZeroArray@array+1,c
  5208  0023CC  0E00               	movlw	0
  5209  0023CE  6E23               	movwf	ZeroArray@size+1,c
  5210  0023D0  0E08               	movlw	8
  5211  0023D2  6E22               	movwf	ZeroArray@size,c
  5212  0023D4  EC68  F018         	call	_ZeroArray	;wreg free
  5213                           
  5214                           ;SystemCommon.c: 65: for(int idx = 0; idx < 8; idx++)
  5215  0023D8  0E00               	movlw	0
  5216  0023DA  0100               	movlb	0	; () banked
  5217  0023DC  6F76               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5218  0023DE  0E00               	movlw	0
  5219  0023E0  6F75               	movwf	GetIntFromUartData@idx& (0+255),b
  5220  0023E2                     l7509:
  5221                           
  5222                           ; BSR set to: 0
  5223  0023E2  BF76               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5224  0023E4  D006               	goto	l1264
  5225  0023E6  5176               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5226  0023E8  E120               	bnz	l7527
  5227  0023EA  0E08               	movlw	8
  5228  0023EC  5D75               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5229  0023EE  B0D8               	btfsc	status,0,c
  5230  0023F0  D01C               	goto	u7800
  5231  0023F2                     l1264:
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;SystemCommon.c: 66: {
  5235                           ;SystemCommon.c: 67: char c = data[idx + 1];
  5236                           
  5237                           ; BSR set to: 0
  5238  0023F2  0E01               	movlw	1
  5239  0023F4  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5240  0023F6  6F6A               	movwf	??_GetIntFromUartData& (0+255),b
  5241  0023F8  0E00               	movlw	0
  5242  0023FA  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5243  0023FC  6F6B               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  5244  0023FE  516A               	movf	??_GetIntFromUartData& (0+255),w,b
  5245  002400  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5246  002402  6ED9               	movwf	fsr2l,c
  5247  002404  516B               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  5248  002406  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5249  002408  6EDA               	movwf	fsr2h,c
  5250  00240A  50DF               	movf	indf2,w,c
  5251  00240C  6F74               	movwf	GetIntFromUartData@c& (0+255),b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;SystemCommon.c: 68: if(c == (0))
  5255  00240E  5174               	movf	GetIntFromUartData@c& (0+255),w,b
  5256  002410  B4D8               	btfsc	status,2,c
  5257  002412  D00B               	goto	u7800
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;SystemCommon.c: 72: else
  5261                           ;SystemCommon.c: 73: {
  5262                           ;SystemCommon.c: 74: dataRegArr[idx] = c;
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;SystemCommon.c: 71: }
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;SystemCommon.c: 69: {
  5271                           ;SystemCommon.c: 70: break;
  5272  002414  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  5273  002416  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5274  002418  6ED9               	movwf	fsr2l,c
  5275  00241A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5276  00241C  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5277  00241E  6EDA               	movwf	fsr2h,c
  5278  002420  C074  FFDF         	movff	GetIntFromUartData@c,indf2
  5279                           
  5280                           ; BSR set to: 0
  5281                           
  5282                           ; BSR set to: 0
  5283  002424  4B75               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5284  002426  2B76               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5285  002428  D7DC               	goto	l7509
  5286  00242A                     u7800:
  5287  00242A                     l7527:
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;SystemCommon.c: 75: }
  5291                           ;SystemCommon.c: 76: }
  5292                           ;SystemCommon.c: 78: return strtol(dataRegArr, (0), 10);
  5293  00242A  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  5294  00242C  6E26               	movwf	strtol@s,c
  5295  00242E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5296  002430  6E27               	movwf	strtol@s+1,c
  5297  002432  0E00               	movlw	0
  5298  002434  6E28               	movwf	strtol@endptr,c
  5299  002436  0E00               	movlw	0
  5300  002438  6E29               	movwf	strtol@endptr+1,c
  5301  00243A  0E00               	movlw	0
  5302  00243C  6E2B               	movwf	strtol@base+1,c
  5303  00243E  0E0A               	movlw	10
  5304  002440  6E2A               	movwf	strtol@base,c
  5305  002442  EC03  F005         	call	_strtol	;wreg free
  5306  002446  C026  F066         	movff	?_strtol,?_GetIntFromUartData
  5307  00244A  C027  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5308  00244E  C028  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5309  002452  C029  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5310  002456  0012               	return	
  5311  002458                     __end_of_GetIntFromUartData:
  5312                           	opt stack 0
  5313                           tosu	equ	0xFFF
  5314                           tosh	equ	0xFFE
  5315                           tosl	equ	0xFFD
  5316                           pclath	equ	0xFFA
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           prodh	equ	0xFF4
  5322                           prodl	equ	0xFF3
  5323                           postinc0	equ	0xFEE
  5324                           wreg	equ	0xFE8
  5325                           indf1	equ	0xFE7
  5326                           postdec1	equ	0xFE5
  5327                           fsr1h	equ	0xFE2
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _strtol *****************
  5336 ;; Defined at:
  5337 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  s               2   37[COMRAM] PTR const unsigned char 
  5340 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5341 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  5342 ;;		 -> NULL(0), 
  5343 ;;  base            2   41[COMRAM] int 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  a               4    1[BANK0 ] long 
  5346 ;;  c               1    5[BANK0 ] unsigned char 
  5347 ;;  sign            1    0[BANK0 ] unsigned char 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  4   37[COMRAM] long 
  5350 ;; Registers used:
  5351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5357 ;;      Params:         6       0       0       0       0       0       0
  5358 ;;      Locals:         0       6       0       0       0       0       0
  5359 ;;      Temps:          4       0       0       0       0       0       0
  5360 ;;      Totals:        10       6       0       0       0       0       0
  5361 ;;Total ram usage:       16 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    5
  5364 ;; This function calls:
  5365 ;;		___lmul
  5366 ;;		_isalpha
  5367 ;;		_isdigit
  5368 ;;		_isspace
  5369 ;;		_toupper
  5370 ;; This function is called by:
  5371 ;;		_GetIntFromUartData
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text9
  5376  000A06                     __ptext9:
  5377                           	opt stack 0
  5378  000A06                     _strtol:
  5379                           	opt stack 21
  5380                           
  5381                           ;incstack = 0
  5382  000A06  C026  FFD9         	movff	strtol@s,fsr2l
  5383  000A0A  C027  FFDA         	movff	strtol@s+1,fsr2h
  5384  000A0E  50DF               	movf	indf2,w,c
  5385  000A10  0100               	movlb	0	; () banked
  5386  000A12  6F65               	movwf	strtol@c& (0+255),b
  5387                           
  5388                           ; BSR set to: 0
  5389  000A14  4A26               	infsnz	strtol@s,f,c
  5390  000A16  2A27               	incf	strtol@s+1,f,c
  5391                           
  5392                           ; BSR set to: 0
  5393  000A18  5165               	movf	strtol@c& (0+255),w,b
  5394  000A1A  ECDC  F017         	call	_isspace
  5395  000A1E  B0D8               	btfsc	status,0,c
  5396  000A20  D7F2               	goto	_strtol
  5397  000A22  0E00               	movlw	0
  5398  000A24  0100               	movlb	0	; () banked
  5399  000A26  6F61               	movwf	strtol@a& (0+255),b
  5400  000A28  0E00               	movlw	0
  5401  000A2A  6F62               	movwf	(strtol@a+1)& (0+255),b
  5402  000A2C  0E00               	movlw	0
  5403  000A2E  6F63               	movwf	(strtol@a+2)& (0+255),b
  5404  000A30  0E00               	movlw	0
  5405  000A32  6F64               	movwf	(strtol@a+3)& (0+255),b
  5406  000A34  0E00               	movlw	0
  5407  000A36  6F60               	movwf	strtol@sign& (0+255),b
  5408                           
  5409                           ; BSR set to: 0
  5410  000A38  0E2D               	movlw	45
  5411  000A3A  1965               	xorwf	strtol@c& (0+255),w,b
  5412  000A3C  A4D8               	btfss	status,2,c
  5413  000A3E  D003               	goto	l2029
  5414                           
  5415                           ; BSR set to: 0
  5416  000A40  0E01               	movlw	1
  5417  000A42  6F60               	movwf	strtol@sign& (0+255),b
  5418  000A44  D004               	goto	u7560
  5419  000A46                     l2029:
  5420                           
  5421                           ; BSR set to: 0
  5422                           
  5423                           ; BSR set to: 0
  5424  000A46  0E2B               	movlw	43
  5425  000A48  1965               	xorwf	strtol@c& (0+255),w,b
  5426  000A4A  A4D8               	btfss	status,2,c
  5427  000A4C  D008               	goto	l2031
  5428  000A4E                     u7560:
  5429                           
  5430                           ; BSR set to: 0
  5431  000A4E  C026  FFD9         	movff	strtol@s,fsr2l
  5432  000A52  C027  FFDA         	movff	strtol@s+1,fsr2h
  5433  000A56  50DF               	movf	indf2,w,c
  5434  000A58  6F65               	movwf	strtol@c& (0+255),b
  5435                           
  5436                           ; BSR set to: 0
  5437  000A5A  4A26               	infsnz	strtol@s,f,c
  5438  000A5C  2A27               	incf	strtol@s+1,f,c
  5439  000A5E                     l2031:
  5440                           
  5441                           ; BSR set to: 0
  5442                           
  5443                           ; BSR set to: 0
  5444                           
  5445                           ; BSR set to: 0
  5446  000A5E  0E30               	movlw	48
  5447  000A60  1965               	xorwf	strtol@c& (0+255),w,b
  5448  000A62  A4D8               	btfss	status,2,c
  5449  000A64  D02E               	goto	l2039
  5450                           
  5451                           ; BSR set to: 0
  5452  000A66  C026  FFD9         	movff	strtol@s,fsr2l
  5453  000A6A  C027  FFDA         	movff	strtol@s+1,fsr2h
  5454  000A6E  50DF               	movf	indf2,w,c
  5455  000A70  6F65               	movwf	strtol@c& (0+255),b
  5456                           
  5457                           ; BSR set to: 0
  5458  000A72  4A26               	infsnz	strtol@s,f,c
  5459  000A74  2A27               	incf	strtol@s+1,f,c
  5460                           
  5461                           ; BSR set to: 0
  5462  000A76  502A               	movf	strtol@base,w,c
  5463  000A78  102B               	iorwf	strtol@base+1,w,c
  5464  000A7A  B4D8               	btfsc	status,2,c
  5465  000A7C  D005               	goto	u7590
  5466                           
  5467                           ; BSR set to: 0
  5468  000A7E  0E10               	movlw	16
  5469  000A80  182A               	xorwf	strtol@base,w,c
  5470  000A82  102B               	iorwf	strtol@base+1,w,c
  5471  000A84  A4D8               	btfss	status,2,c
  5472  000A86  D015               	goto	l2033
  5473  000A88                     u7590:
  5474                           
  5475                           ; BSR set to: 0
  5476                           
  5477                           ; BSR set to: 0
  5478  000A88  0E78               	movlw	120
  5479  000A8A  1965               	xorwf	strtol@c& (0+255),w,b
  5480  000A8C  B4D8               	btfsc	status,2,c
  5481  000A8E  D004               	goto	u7610
  5482                           
  5483                           ; BSR set to: 0
  5484  000A90  0E58               	movlw	88
  5485  000A92  1965               	xorwf	strtol@c& (0+255),w,b
  5486  000A94  A4D8               	btfss	status,2,c
  5487  000A96  D00D               	goto	l2033
  5488  000A98                     u7610:
  5489                           
  5490                           ; BSR set to: 0
  5491                           
  5492                           ; BSR set to: 0
  5493  000A98  0E00               	movlw	0
  5494  000A9A  6E2B               	movwf	strtol@base+1,c
  5495  000A9C  0E10               	movlw	16
  5496  000A9E  6E2A               	movwf	strtol@base,c
  5497                           
  5498                           ; BSR set to: 0
  5499  000AA0  C026  FFD9         	movff	strtol@s,fsr2l
  5500  000AA4  C027  FFDA         	movff	strtol@s+1,fsr2h
  5501  000AA8  50DF               	movf	indf2,w,c
  5502  000AAA  6F65               	movwf	strtol@c& (0+255),b
  5503                           
  5504                           ; BSR set to: 0
  5505  000AAC  4A26               	infsnz	strtol@s,f,c
  5506  000AAE  2A27               	incf	strtol@s+1,f,c
  5507  000AB0  D008               	goto	l2039
  5508  000AB2                     l2033:
  5509                           
  5510                           ; BSR set to: 0
  5511                           
  5512                           ; BSR set to: 0
  5513  000AB2  502A               	movf	strtol@base,w,c
  5514  000AB4  102B               	iorwf	strtol@base+1,w,c
  5515  000AB6  A4D8               	btfss	status,2,c
  5516  000AB8  D004               	goto	l2039
  5517                           
  5518                           ; BSR set to: 0
  5519  000ABA  0E00               	movlw	0
  5520  000ABC  6E2B               	movwf	strtol@base+1,c
  5521  000ABE  0E08               	movlw	8
  5522  000AC0  6E2A               	movwf	strtol@base,c
  5523  000AC2                     l2039:
  5524                           
  5525                           ; BSR set to: 0
  5526                           
  5527                           ; BSR set to: 0
  5528                           
  5529                           ; BSR set to: 0
  5530                           
  5531                           ; BSR set to: 0
  5532  000AC2  502A               	movf	strtol@base,w,c
  5533  000AC4  102B               	iorwf	strtol@base+1,w,c
  5534  000AC6  A4D8               	btfss	status,2,c
  5535  000AC8  D004               	goto	l2040
  5536                           
  5537                           ; BSR set to: 0
  5538  000ACA  0E00               	movlw	0
  5539  000ACC  6E2B               	movwf	strtol@base+1,c
  5540  000ACE  0E0A               	movlw	10
  5541  000AD0  6E2A               	movwf	strtol@base,c
  5542  000AD2                     l2040:
  5543                           
  5544                           ; BSR set to: 0
  5545                           
  5546                           ; BSR set to: 0
  5547                           
  5548                           ; BSR set to: 0
  5549  000AD2  5165               	movf	strtol@c& (0+255),w,b
  5550  000AD4  ECC8  F017         	call	_isalpha
  5551  000AD8  A0D8               	btfss	status,0,c
  5552  000ADA  D008               	goto	l2042
  5553  000ADC  0100               	movlb	0	; () banked
  5554  000ADE  5165               	movf	strtol@c& (0+255),w,b
  5555  000AE0  ECB4  F018         	call	_toupper
  5556  000AE4  0FC9               	addlw	201
  5557  000AE6  0100               	movlb	0	; () banked
  5558  000AE8  6F65               	movwf	strtol@c& (0+255),b
  5559  000AEA  D009               	goto	l2045
  5560  000AEC                     l2042:
  5561                           
  5562                           ; BSR set to: 0
  5563  000AEC  0100               	movlb	0	; () banked
  5564  000AEE  5165               	movf	strtol@c& (0+255),w,b
  5565  000AF0  EC4A  F018         	call	_isdigit
  5566  000AF4  A0D8               	btfss	status,0,c
  5567  000AF6  D039               	goto	l2046
  5568  000AF8  0E30               	movlw	48
  5569  000AFA  0100               	movlb	0	; () banked
  5570  000AFC  5F65               	subwf	strtol@c& (0+255),f,b
  5571  000AFE                     l2045:
  5572                           
  5573                           ; BSR set to: 0
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ; BSR set to: 0
  5578  000AFE  5165               	movf	strtol@c& (0+255),w,b
  5579  000B00  6E2C               	movwf	??_strtol& (0+255),c
  5580  000B02  6A2D               	clrf	(??_strtol+1)& (0+255),c
  5581  000B04  502A               	movf	strtol@base,w,c
  5582  000B06  5C2C               	subwf	??_strtol,w,c
  5583  000B08  502D               	movf	??_strtol+1,w,c
  5584  000B0A  0A80               	xorlw	128
  5585  000B0C  6E2E               	movwf	(??_strtol+2)& (0+255),c
  5586  000B0E  502B               	movf	strtol@base+1,w,c
  5587  000B10  0A80               	xorlw	128
  5588  000B12  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  5589  000B14  B0D8               	btfsc	status,0,c
  5590  000B16  D029               	goto	l2046
  5591                           
  5592                           ; BSR set to: 0
  5593                           
  5594                           ; BSR set to: 0
  5595                           
  5596                           ; BSR set to: 0
  5597  000B18  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  5598  000B1C  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  5599  000B20  0E00               	movlw	0
  5600  000B22  BE1B               	btfsc	___lmul@multiplier+1,7,c
  5601  000B24  0EFF               	movlw	-1
  5602  000B26  6E1C               	movwf	___lmul@multiplier+2,c
  5603  000B28  6E1D               	movwf	___lmul@multiplier+3,c
  5604  000B2A  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  5605  000B2E  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  5606  000B32  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  5607  000B36  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  5608  000B3A  ECFF  F014         	call	___lmul	;wreg free
  5609  000B3E  0100               	movlb	0	; () banked
  5610  000B40  5165               	movf	strtol@c& (0+255),w,b
  5611  000B42  241A               	addwf	?___lmul,w,c
  5612  000B44  6F61               	movwf	strtol@a& (0+255),b
  5613  000B46  0E00               	movlw	0
  5614  000B48  201B               	addwfc	?___lmul+1,w,c
  5615  000B4A  6F62               	movwf	(strtol@a+1)& (0+255),b
  5616  000B4C  0E00               	movlw	0
  5617  000B4E  201C               	addwfc	?___lmul+2,w,c
  5618  000B50  6F63               	movwf	(strtol@a+2)& (0+255),b
  5619  000B52  0E00               	movlw	0
  5620  000B54  201D               	addwfc	?___lmul+3,w,c
  5621  000B56  6F64               	movwf	(strtol@a+3)& (0+255),b
  5622                           
  5623                           ; BSR set to: 0
  5624  000B58  C026  FFD9         	movff	strtol@s,fsr2l
  5625  000B5C  C027  FFDA         	movff	strtol@s+1,fsr2h
  5626  000B60  50DF               	movf	indf2,w,c
  5627  000B62  6F65               	movwf	strtol@c& (0+255),b
  5628                           
  5629                           ; BSR set to: 0
  5630  000B64  4A26               	infsnz	strtol@s,f,c
  5631  000B66  2A27               	incf	strtol@s+1,f,c
  5632  000B68  D7B4               	goto	l2040
  5633  000B6A                     l2046:
  5634                           
  5635                           ; BSR set to: 0
  5636  000B6A  5028               	movf	strtol@endptr,w,c
  5637  000B6C  1029               	iorwf	strtol@endptr+1,w,c
  5638  000B6E  B4D8               	btfsc	status,2,c
  5639  000B70  D00E               	goto	l2048
  5640  000B72  0EFF               	movlw	255
  5641  000B74  2426               	addwf	strtol@s,w,c
  5642  000B76  6E2C               	movwf	??_strtol& (0+255),c
  5643  000B78  0EFF               	movlw	255
  5644  000B7A  2027               	addwfc	strtol@s+1,w,c
  5645  000B7C  6E2D               	movwf	(??_strtol+1)& (0+255),c
  5646  000B7E  C028  FFD9         	movff	strtol@endptr,fsr2l
  5647  000B82  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  5648  000B86  C02C  FFDE         	movff	??_strtol,postinc2
  5649  000B8A  C02D  FFDD         	movff	??_strtol+1,postdec2
  5650  000B8E                     l2048:
  5651  000B8E  0100               	movlb	0	; () banked
  5652  000B90  5160               	movf	strtol@sign& (0+255),w,b
  5653  000B92  B4D8               	btfsc	status,2,c
  5654  000B94  D01A               	goto	l2049
  5655                           
  5656                           ; BSR set to: 0
  5657  000B96  C061  F02C         	movff	strtol@a,??_strtol
  5658  000B9A  C062  F02D         	movff	strtol@a+1,??_strtol+1
  5659  000B9E  C063  F02E         	movff	strtol@a+2,??_strtol+2
  5660  000BA2  C064  F02F         	movff	strtol@a+3,??_strtol+3
  5661  000BA6  1E2C               	comf	??_strtol,f,c
  5662  000BA8  1E2D               	comf	??_strtol+1,f,c
  5663  000BAA  1E2E               	comf	??_strtol+2,f,c
  5664  000BAC  1E2F               	comf	??_strtol+3,f,c
  5665  000BAE  2A2C               	incf	??_strtol,f,c
  5666  000BB0  0E00               	movlw	0
  5667  000BB2  222D               	addwfc	??_strtol+1,f,c
  5668  000BB4  222E               	addwfc	??_strtol+2,f,c
  5669  000BB6  222F               	addwfc	??_strtol+3,f,c
  5670  000BB8  C02C  F026         	movff	??_strtol,?_strtol
  5671  000BBC  C02D  F027         	movff	??_strtol+1,?_strtol+1
  5672  000BC0  C02E  F028         	movff	??_strtol+2,?_strtol+2
  5673  000BC4  C02F  F029         	movff	??_strtol+3,?_strtol+3
  5674                           
  5675                           ; BSR set to: 0
  5676  000BC8  0012               	return	
  5677  000BCA                     l2049:
  5678                           
  5679                           ; BSR set to: 0
  5680  000BCA  C061  F026         	movff	strtol@a,?_strtol
  5681  000BCE  C062  F027         	movff	strtol@a+1,?_strtol+1
  5682  000BD2  C063  F028         	movff	strtol@a+2,?_strtol+2
  5683  000BD6  C064  F029         	movff	strtol@a+3,?_strtol+3
  5684                           
  5685                           ; BSR set to: 0
  5686  000BDA  0012               	return		;funcret
  5687  000BDC                     __end_of_strtol:
  5688                           	opt stack 0
  5689                           tosu	equ	0xFFF
  5690                           tosh	equ	0xFFE
  5691                           tosl	equ	0xFFD
  5692                           pclath	equ	0xFFA
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           postdec1	equ	0xFE5
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           fsr2h	equ	0xFDA
  5709                           fsr2l	equ	0xFD9
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _toupper *****************
  5713 ;; Defined at:
  5714 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  c               1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  c               1   23[COMRAM] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      unsigned char 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5728 ;;      Params:         0       0       0       0       0       0       0
  5729 ;;      Locals:         1       0       0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0
  5731 ;;      Totals:         1       0       0       0       0       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    3
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_readUartByte
  5739 ;;		_strtol
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text10
  5744  003168                     __ptext10:
  5745                           	opt stack 0
  5746  003168                     _toupper:
  5747                           	opt stack 26
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;incstack = 0
  5751                           ;toupper@c stored from wreg
  5752  003168  6E18               	movwf	toupper@c,c
  5753  00316A  0E7B               	movlw	123
  5754  00316C  6018               	cpfslt	toupper@c,c
  5755  00316E  D004               	goto	l2053
  5756  003170  0E60               	movlw	96
  5757  003172  6418               	cpfsgt	toupper@c,c
  5758  003174  D001               	goto	l2053
  5759  003176  9A18               	bcf	toupper@c,5,c
  5760  003178                     l2053:
  5761  003178  5018               	movf	toupper@c,w,c
  5762  00317A  0012               	return	
  5763  00317C                     __end_of_toupper:
  5764                           	opt stack 0
  5765                           tosu	equ	0xFFF
  5766                           tosh	equ	0xFFE
  5767                           tosl	equ	0xFFD
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           postdec1	equ	0xFE5
  5779                           fsr1h	equ	0xFE2
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           postdec2	equ	0xFDD
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _isspace *****************
  5789 ;; Defined at:
  5790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  c               1    wreg     unsigned char 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  c               1   25[COMRAM] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;		None               void
  5797 ;; Registers used:
  5798 ;;		wreg, status,2, status,0
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5804 ;;      Params:         0       0       0       0       0       0       0
  5805 ;;      Locals:         2       0       0       0       0       0       0
  5806 ;;      Temps:          1       0       0       0       0       0       0
  5807 ;;      Totals:         3       0       0       0       0       0       0
  5808 ;;Total ram usage:        3 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    3
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_strtol
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text11
  5819  002FB8                     __ptext11:
  5820                           	opt stack 0
  5821  002FB8                     _isspace:
  5822                           	opt stack 22
  5823                           
  5824                           ;incstack = 0
  5825                           ;isspace@c stored from wreg
  5826  002FB8  6E1A               	movwf	isspace@c,c
  5827  002FBA  0E01               	movlw	1
  5828  002FBC  6E19               	movwf	_isspace$2745,c
  5829  002FBE  0E20               	movlw	32
  5830  002FC0  181A               	xorwf	isspace@c,w,c
  5831  002FC2  B4D8               	btfsc	status,2,c
  5832  002FC4  D008               	goto	l2135
  5833  002FC6  0E0E               	movlw	14
  5834  002FC8  601A               	cpfslt	isspace@c,c
  5835  002FCA  D003               	goto	u7290
  5836  002FCC  0E09               	movlw	9
  5837  002FCE  601A               	cpfslt	isspace@c,c
  5838  002FD0  D002               	goto	l2135
  5839  002FD2                     u7290:
  5840  002FD2  0E00               	movlw	0
  5841  002FD4  6E19               	movwf	_isspace$2745,c
  5842  002FD6                     l2135:
  5843  002FD6  C019  F018         	movff	_isspace$2745,??_isspace
  5844  002FDA  3018               	rrcf	??_isspace,w,c
  5845  002FDC  0012               	return	
  5846  002FDE                     __end_of_isspace:
  5847                           	opt stack 0
  5848                           tosu	equ	0xFFF
  5849                           tosh	equ	0xFFE
  5850                           tosl	equ	0xFFD
  5851                           pclath	equ	0xFFA
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           indf1	equ	0xFE7
  5861                           postdec1	equ	0xFE5
  5862                           fsr1h	equ	0xFE2
  5863                           fsr1l	equ	0xFE1
  5864                           indf2	equ	0xFDF
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           fsr2h	equ	0xFDA
  5868                           fsr2l	equ	0xFD9
  5869                           status	equ	0xFD8
  5870                           
  5871 ;; *************** function _isdigit *****************
  5872 ;; Defined at:
  5873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  c               1    wreg     unsigned char 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  c               1   25[COMRAM] unsigned char 
  5878 ;; Return value:  Size  Location     Type
  5879 ;;		None               void
  5880 ;; Registers used:
  5881 ;;		wreg, status,2, status,0
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5887 ;;      Params:         0       0       0       0       0       0       0
  5888 ;;      Locals:         2       0       0       0       0       0       0
  5889 ;;      Temps:          1       0       0       0       0       0       0
  5890 ;;      Totals:         3       0       0       0       0       0       0
  5891 ;;Total ram usage:        3 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    3
  5894 ;; This function calls:
  5895 ;;		Nothing
  5896 ;; This function is called by:
  5897 ;;		_strtol
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           	psect	text12
  5902  003094                     __ptext12:
  5903                           	opt stack 0
  5904  003094                     _isdigit:
  5905                           	opt stack 22
  5906                           
  5907                           ;incstack = 0
  5908                           ;isdigit@c stored from wreg
  5909  003094  6E1A               	movwf	isdigit@c,c
  5910  003096  0E00               	movlw	0
  5911  003098  6E19               	movwf	_isdigit$2742,c
  5912  00309A  0E3A               	movlw	58
  5913  00309C  601A               	cpfslt	isdigit@c,c
  5914  00309E  D005               	goto	l2130
  5915  0030A0  0E2F               	movlw	47
  5916  0030A2  641A               	cpfsgt	isdigit@c,c
  5917  0030A4  D002               	goto	l2130
  5918  0030A6  0E01               	movlw	1
  5919  0030A8  6E19               	movwf	_isdigit$2742,c
  5920  0030AA                     l2130:
  5921  0030AA  C019  F018         	movff	_isdigit$2742,??_isdigit
  5922  0030AE  3018               	rrcf	??_isdigit,w,c
  5923  0030B0  0012               	return	
  5924  0030B2                     __end_of_isdigit:
  5925                           	opt stack 0
  5926                           tosu	equ	0xFFF
  5927                           tosh	equ	0xFFE
  5928                           tosl	equ	0xFFD
  5929                           pclath	equ	0xFFA
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           indf1	equ	0xFE7
  5939                           postdec1	equ	0xFE5
  5940                           fsr1h	equ	0xFE2
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _isalpha *****************
  5950 ;; Defined at:
  5951 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  c               1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  c               1   28[COMRAM] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5965 ;;      Params:         0       0       0       0       0       0       0
  5966 ;;      Locals:         2       0       0       0       0       0       0
  5967 ;;      Temps:          1       0       0       0       0       0       0
  5968 ;;      Totals:         3       0       0       0       0       0       0
  5969 ;;Total ram usage:        3 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    4
  5972 ;; This function calls:
  5973 ;;		_isupper
  5974 ;; This function is called by:
  5975 ;;		_strtol
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text13
  5980  002F90                     __ptext13:
  5981                           	opt stack 0
  5982  002F90                     _isalpha:
  5983                           	opt stack 21
  5984                           
  5985                           ;incstack = 0
  5986                           ;isalpha@c stored from wreg
  5987  002F90  6E1D               	movwf	isalpha@c,c
  5988  002F92  0E01               	movlw	1
  5989  002F94  6E1C               	movwf	_isalpha$2739,c
  5990  002F96  0E7B               	movlw	123
  5991  002F98  601D               	cpfslt	isalpha@c,c
  5992  002F9A  D003               	goto	u7310
  5993  002F9C  0E61               	movlw	97
  5994  002F9E  601D               	cpfslt	isalpha@c,c
  5995  002FA0  D007               	goto	l2125
  5996  002FA2                     u7310:
  5997  002FA2  501D               	movf	isalpha@c,w,c
  5998  002FA4  EC59  F018         	call	_isupper
  5999  002FA8  B0D8               	btfsc	status,0,c
  6000  002FAA  D002               	goto	l2125
  6001  002FAC  0E00               	movlw	0
  6002  002FAE  6E1C               	movwf	_isalpha$2739,c
  6003  002FB0                     l2125:
  6004  002FB0  C01C  F01B         	movff	_isalpha$2739,??_isalpha
  6005  002FB4  301B               	rrcf	??_isalpha,w,c
  6006  002FB6  0012               	return	
  6007  002FB8                     __end_of_isalpha:
  6008                           	opt stack 0
  6009                           tosu	equ	0xFFF
  6010                           tosh	equ	0xFFE
  6011                           tosl	equ	0xFFD
  6012                           pclath	equ	0xFFA
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           indf1	equ	0xFE7
  6022                           postdec1	equ	0xFE5
  6023                           fsr1h	equ	0xFE2
  6024                           fsr1l	equ	0xFE1
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _isupper *****************
  6033 ;; Defined at:
  6034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  c               1    wreg     unsigned char 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  c               1   25[COMRAM] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6048 ;;      Params:         0       0       0       0       0       0       0
  6049 ;;      Locals:         2       0       0       0       0       0       0
  6050 ;;      Temps:          1       0       0       0       0       0       0
  6051 ;;      Totals:         3       0       0       0       0       0       0
  6052 ;;Total ram usage:        3 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    3
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_isalpha
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text14
  6063  0030B2                     __ptext14:
  6064                           	opt stack 0
  6065  0030B2                     _isupper:
  6066                           	opt stack 21
  6067                           
  6068                           ;incstack = 0
  6069                           ;isupper@c stored from wreg
  6070  0030B2  6E1A               	movwf	isupper@c,c
  6071  0030B4  0E00               	movlw	0
  6072  0030B6  6E19               	movwf	_isupper$2748,c
  6073  0030B8  0E5B               	movlw	91
  6074  0030BA  601A               	cpfslt	isupper@c,c
  6075  0030BC  D005               	goto	l2140
  6076  0030BE  0E40               	movlw	64
  6077  0030C0  641A               	cpfsgt	isupper@c,c
  6078  0030C2  D002               	goto	l2140
  6079  0030C4  0E01               	movlw	1
  6080  0030C6  6E19               	movwf	_isupper$2748,c
  6081  0030C8                     l2140:
  6082  0030C8  C019  F018         	movff	_isupper$2748,??_isupper
  6083  0030CC  3018               	rrcf	??_isupper,w,c
  6084  0030CE  0012               	return	
  6085  0030D0                     __end_of_isupper:
  6086                           	opt stack 0
  6087                           tosu	equ	0xFFF
  6088                           tosh	equ	0xFFE
  6089                           tosl	equ	0xFFD
  6090                           pclath	equ	0xFFA
  6091                           tblptru	equ	0xFF8
  6092                           tblptrh	equ	0xFF7
  6093                           tblptrl	equ	0xFF6
  6094                           tablat	equ	0xFF5
  6095                           prodh	equ	0xFF4
  6096                           prodl	equ	0xFF3
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           indf1	equ	0xFE7
  6100                           postdec1	equ	0xFE5
  6101                           fsr1h	equ	0xFE2
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _DacAnalogToDigitalSpi *****************
  6111 ;; Defined at:
  6112 ;;		line 46 in file "DacApp.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  AnalogValMil    2   89[BANK0 ] unsigned int 
  6115 ;;  dacNum          1   91[BANK0 ] unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  dacSpiVal       2  110[BANK0 ] unsigned int 
  6118 ;;  dacDigital      2  108[BANK0 ] unsigned int 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  2   89[BANK0 ] unsigned int 
  6121 ;; Registers used:
  6122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6128 ;;      Params:         0       3       0       0       0       0       0
  6129 ;;      Locals:         0      16       0       0       0       0       0
  6130 ;;      Temps:          0       4       0       0       0       0       0
  6131 ;;      Totals:         0      23       0       0       0       0       0
  6132 ;;Total ram usage:       23 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    8
  6135 ;; This function calls:
  6136 ;;		___ftadd
  6137 ;;		___ftdiv
  6138 ;;		___ftmul
  6139 ;;		___fttol
  6140 ;;		___lbtoft
  6141 ;;		___lwtoft
  6142 ;;		_pow
  6143 ;; This function is called by:
  6144 ;;		_DacSetValue
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text15
  6149  000818                     __ptext15:
  6150                           	opt stack 0
  6151  000818                     _DacAnalogToDigitalSpi:
  6152                           	opt stack 19
  6153                           
  6154                           ;DacApp.c: 48: uint16_t dacDigital = (int)((AnalogValMili * (pow(2, (10)) - 1)) / (4880)
      +                          );
  6155                           
  6156                           ;incstack = 0
  6157  000818  0E00               	movlw	0
  6158  00081A  0100               	movlb	0	; () banked
  6159  00081C  6FAB               	movwf	pow@y& (0+255),b
  6160  00081E  0E20               	movlw	32
  6161  000820  6FAC               	movwf	(pow@y+1)& (0+255),b
  6162  000822  0E41               	movlw	65
  6163  000824  6FAD               	movwf	(pow@y+2)& (0+255),b
  6164  000826  0E00               	movlw	0
  6165  000828  6FA8               	movwf	pow@x& (0+255),b
  6166  00082A  0E00               	movlw	0
  6167  00082C  6FA9               	movwf	(pow@x+1)& (0+255),b
  6168  00082E  0E40               	movlw	64
  6169  000830  6FAA               	movwf	(pow@x+2)& (0+255),b
  6170  000832  EC4B  F009         	call	_pow	;wreg free
  6171  000836  C0A8  F0C0         	movff	?_pow,_DacAnalogToDigitalSpi$3068
  6172  00083A  C0A9  F0C1         	movff	?_pow+1,_DacAnalogToDigitalSpi$3068+1
  6173  00083E  C0AA  F0C2         	movff	?_pow+2,_DacAnalogToDigitalSpi$3068+2
  6174                           
  6175                           ;DacApp.c: 48: uint16_t dacDigital = (int)((AnalogValMili * (pow(2, (10)) - 1)) / (4880)
      +                          );
  6176  000842  0E80               	movlw	128
  6177  000844  0100               	movlb	0	; () banked
  6178  000846  6F72               	movwf	___ftdiv@f2& (0+255),b
  6179  000848  0E98               	movlw	152
  6180  00084A  6F73               	movwf	(___ftdiv@f2+1)& (0+255),b
  6181  00084C  0E45               	movlw	69
  6182  00084E  6F74               	movwf	(___ftdiv@f2+2)& (0+255),b
  6183  000850  C0B9  F020         	movff	DacAnalogToDigitalSpi@AnalogValMili,___lwtoft@c
  6184  000854  C0BA  F021         	movff	DacAnalogToDigitalSpi@AnalogValMili+1,___lwtoft@c+1
  6185  000858  EC26  F018         	call	___lwtoft	;wreg free
  6186  00085C  C020  F063         	movff	?___lwtoft,___ftmul@f2
  6187  000860  C021  F064         	movff	?___lwtoft+1,___ftmul@f2+1
  6188  000864  C022  F065         	movff	?___lwtoft+2,___ftmul@f2+2
  6189  000868  0E00               	movlw	0
  6190  00086A  6E27               	movwf	___ftadd@f2,c
  6191  00086C  0E80               	movlw	128
  6192  00086E  6E28               	movwf	___ftadd@f2+1,c
  6193  000870  0EBF               	movlw	191
  6194  000872  6E29               	movwf	___ftadd@f2+2,c
  6195  000874  C0C0  F024         	movff	_DacAnalogToDigitalSpi$3068,___ftadd@f1
  6196  000878  C0C1  F025         	movff	_DacAnalogToDigitalSpi$3068+1,___ftadd@f1+1
  6197  00087C  C0C2  F026         	movff	_DacAnalogToDigitalSpi$3068+2,___ftadd@f1+2
  6198  000880  ECB0  F007         	call	___ftadd	;wreg free
  6199  000884  C024  F060         	movff	?___ftadd,___ftmul@f1
  6200  000888  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  6201  00088C  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  6202  000890  ECC6  F00C         	call	___ftmul	;wreg free
  6203  000894  C060  F06F         	movff	?___ftmul,___ftdiv@f1
  6204  000898  C061  F070         	movff	?___ftmul+1,___ftdiv@f1+1
  6205  00089C  C062  F071         	movff	?___ftmul+2,___ftdiv@f1+2
  6206  0008A0  EC41  F00D         	call	___ftdiv	;wreg free
  6207  0008A4  C06F  F07E         	movff	?___ftdiv,___fttol@f1
  6208  0008A8  C070  F07F         	movff	?___ftdiv+1,___fttol@f1+1
  6209  0008AC  C071  F080         	movff	?___ftdiv+2,___fttol@f1+2
  6210  0008B0  EC4A  F00C         	call	___fttol	;wreg free
  6211  0008B4  C07E  F0CC         	movff	?___fttol,DacAnalogToDigitalSpi@dacDigital
  6212  0008B8  C07F  F0CD         	movff	?___fttol+1,DacAnalogToDigitalSpi@dacDigital+1
  6213                           
  6214                           ;DacApp.c: 49: uint16_t dacSpiVal = (int)(dacNum * pow(2,14)) | (int)((0x1) * pow(2,13))
      +                           | (int)(dacDigital * pow(2,2));
  6215  0008BC  0E00               	movlw	0
  6216  0008BE  0100               	movlb	0	; () banked
  6217  0008C0  6FAB               	movwf	pow@y& (0+255),b
  6218  0008C2  0E00               	movlw	0
  6219  0008C4  6FAC               	movwf	(pow@y+1)& (0+255),b
  6220  0008C6  0E40               	movlw	64
  6221  0008C8  6FAD               	movwf	(pow@y+2)& (0+255),b
  6222  0008CA  0E00               	movlw	0
  6223  0008CC  6FA8               	movwf	pow@x& (0+255),b
  6224  0008CE  0E00               	movlw	0
  6225  0008D0  6FA9               	movwf	(pow@x+1)& (0+255),b
  6226  0008D2  0E40               	movlw	64
  6227  0008D4  6FAA               	movwf	(pow@x+2)& (0+255),b
  6228  0008D6  EC4B  F009         	call	_pow	;wreg free
  6229  0008DA  C0A8  F0C3         	movff	?_pow,_DacAnalogToDigitalSpi$3069
  6230  0008DE  C0A9  F0C4         	movff	?_pow+1,_DacAnalogToDigitalSpi$3069+1
  6231  0008E2  C0AA  F0C5         	movff	?_pow+2,_DacAnalogToDigitalSpi$3069+2
  6232                           
  6233                           ;DacApp.c: 49: uint16_t dacSpiVal = (int)(dacNum * pow(2,14)) | (int)((0x1) * pow(2,13))
      +                           | (int)(dacDigital * pow(2,2));
  6234  0008E6  0E00               	movlw	0
  6235  0008E8  0100               	movlb	0	; () banked
  6236  0008EA  6FAB               	movwf	pow@y& (0+255),b
  6237  0008EC  0E50               	movlw	80
  6238  0008EE  6FAC               	movwf	(pow@y+1)& (0+255),b
  6239  0008F0  0E41               	movlw	65
  6240  0008F2  6FAD               	movwf	(pow@y+2)& (0+255),b
  6241  0008F4  0E00               	movlw	0
  6242  0008F6  6FA8               	movwf	pow@x& (0+255),b
  6243  0008F8  0E00               	movlw	0
  6244  0008FA  6FA9               	movwf	(pow@x+1)& (0+255),b
  6245  0008FC  0E40               	movlw	64
  6246  0008FE  6FAA               	movwf	(pow@x+2)& (0+255),b
  6247  000900  EC4B  F009         	call	_pow	;wreg free
  6248  000904  C0A8  F0C6         	movff	?_pow,_DacAnalogToDigitalSpi$3070
  6249  000908  C0A9  F0C7         	movff	?_pow+1,_DacAnalogToDigitalSpi$3070+1
  6250  00090C  C0AA  F0C8         	movff	?_pow+2,_DacAnalogToDigitalSpi$3070+2
  6251                           
  6252                           ;DacApp.c: 49: uint16_t dacSpiVal = (int)(dacNum * pow(2,14)) | (int)((0x1) * pow(2,13))
      +                           | (int)(dacDigital * pow(2,2));
  6253  000910  0E00               	movlw	0
  6254  000912  0100               	movlb	0	; () banked
  6255  000914  6FAB               	movwf	pow@y& (0+255),b
  6256  000916  0E60               	movlw	96
  6257  000918  6FAC               	movwf	(pow@y+1)& (0+255),b
  6258  00091A  0E41               	movlw	65
  6259  00091C  6FAD               	movwf	(pow@y+2)& (0+255),b
  6260  00091E  0E00               	movlw	0
  6261  000920  6FA8               	movwf	pow@x& (0+255),b
  6262  000922  0E00               	movlw	0
  6263  000924  6FA9               	movwf	(pow@x+1)& (0+255),b
  6264  000926  0E40               	movlw	64
  6265  000928  6FAA               	movwf	(pow@x+2)& (0+255),b
  6266  00092A  EC4B  F009         	call	_pow	;wreg free
  6267  00092E  C0A8  F0C9         	movff	?_pow,_DacAnalogToDigitalSpi$3071
  6268  000932  C0A9  F0CA         	movff	?_pow+1,_DacAnalogToDigitalSpi$3071+1
  6269  000936  C0AA  F0CB         	movff	?_pow+2,_DacAnalogToDigitalSpi$3071+2
  6270                           
  6271                           ;DacApp.c: 49: uint16_t dacSpiVal = (int)(dacNum * pow(2,14)) | (int)((0x1) * pow(2,13))
      +                           | (int)(dacDigital * pow(2,2));
  6272  00093A  C0C9  F063         	movff	_DacAnalogToDigitalSpi$3071,___ftmul@f2
  6273  00093E  C0CA  F064         	movff	_DacAnalogToDigitalSpi$3071+1,___ftmul@f2+1
  6274  000942  C0CB  F065         	movff	_DacAnalogToDigitalSpi$3071+2,___ftmul@f2+2
  6275  000946  0100               	movlb	0	; () banked
  6276  000948  51BB               	movf	DacAnalogToDigitalSpi@dacNum& (0+255),w,b
  6277  00094A  EC14  F018         	call	___lbtoft
  6278  00094E  C020  F060         	movff	?___lbtoft,___ftmul@f1
  6279  000952  C021  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  6280  000956  C022  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  6281  00095A  ECC6  F00C         	call	___ftmul	;wreg free
  6282  00095E  C060  F07E         	movff	?___ftmul,___fttol@f1
  6283  000962  C061  F07F         	movff	?___ftmul+1,___fttol@f1+1
  6284  000966  C062  F080         	movff	?___ftmul+2,___fttol@f1+2
  6285  00096A  EC4A  F00C         	call	___fttol	;wreg free
  6286  00096E  C07E  F0BC         	movff	?___fttol,??_DacAnalogToDigitalSpi
  6287  000972  C07F  F0BD         	movff	?___fttol+1,??_DacAnalogToDigitalSpi+1
  6288  000976  C080  F0BE         	movff	?___fttol+2,??_DacAnalogToDigitalSpi+2
  6289  00097A  C081  F0BF         	movff	?___fttol+3,??_DacAnalogToDigitalSpi+3
  6290  00097E  0E00               	movlw	0
  6291  000980  0100               	movlb	0	; () banked
  6292  000982  6F63               	movwf	___ftmul@f2& (0+255),b
  6293  000984  0E80               	movlw	128
  6294  000986  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6295  000988  0E3F               	movlw	63
  6296  00098A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6297  00098C  C0C6  F060         	movff	_DacAnalogToDigitalSpi$3070,___ftmul@f1
  6298  000990  C0C7  F061         	movff	_DacAnalogToDigitalSpi$3070+1,___ftmul@f1+1
  6299  000994  C0C8  F062         	movff	_DacAnalogToDigitalSpi$3070+2,___ftmul@f1+2
  6300  000998  ECC6  F00C         	call	___ftmul	;wreg free
  6301  00099C  C060  F07E         	movff	?___ftmul,___fttol@f1
  6302  0009A0  C061  F07F         	movff	?___ftmul+1,___fttol@f1+1
  6303  0009A4  C062  F080         	movff	?___ftmul+2,___fttol@f1+2
  6304  0009A8  EC4A  F00C         	call	___fttol	;wreg free
  6305  0009AC  0100               	movlb	0	; () banked
  6306  0009AE  517E               	movf	?___fttol& (0+255),w,b
  6307  0009B0  13BC               	iorwf	??_DacAnalogToDigitalSpi& (0+255),f,b
  6308  0009B2  517F               	movf	(?___fttol+1)& (0+255),w,b
  6309  0009B4  13BD               	iorwf	(??_DacAnalogToDigitalSpi+1)& (0+255),f,b
  6310  0009B6  C0C3  F063         	movff	_DacAnalogToDigitalSpi$3069,___ftmul@f2
  6311  0009BA  C0C4  F064         	movff	_DacAnalogToDigitalSpi$3069+1,___ftmul@f2+1
  6312  0009BE  C0C5  F065         	movff	_DacAnalogToDigitalSpi$3069+2,___ftmul@f2+2
  6313  0009C2  C0CC  F020         	movff	DacAnalogToDigitalSpi@dacDigital,___lwtoft@c
  6314  0009C6  C0CD  F021         	movff	DacAnalogToDigitalSpi@dacDigital+1,___lwtoft@c+1
  6315  0009CA  EC26  F018         	call	___lwtoft	;wreg free
  6316  0009CE  C020  F060         	movff	?___lwtoft,___ftmul@f1
  6317  0009D2  C021  F061         	movff	?___lwtoft+1,___ftmul@f1+1
  6318  0009D6  C022  F062         	movff	?___lwtoft+2,___ftmul@f1+2
  6319  0009DA  ECC6  F00C         	call	___ftmul	;wreg free
  6320  0009DE  C060  F07E         	movff	?___ftmul,___fttol@f1
  6321  0009E2  C061  F07F         	movff	?___ftmul+1,___fttol@f1+1
  6322  0009E6  C062  F080         	movff	?___ftmul+2,___fttol@f1+2
  6323  0009EA  EC4A  F00C         	call	___fttol	;wreg free
  6324  0009EE  0100               	movlb	0	; () banked
  6325  0009F0  517E               	movf	?___fttol& (0+255),w,b
  6326  0009F2  11BC               	iorwf	??_DacAnalogToDigitalSpi& (0+255),w,b
  6327  0009F4  6FCE               	movwf	DacAnalogToDigitalSpi@dacSpiVal& (0+255),b
  6328  0009F6  517F               	movf	(?___fttol+1)& (0+255),w,b
  6329  0009F8  11BD               	iorwf	(??_DacAnalogToDigitalSpi+1)& (0+255),w,b
  6330  0009FA  6FCF               	movwf	(DacAnalogToDigitalSpi@dacSpiVal+1)& (0+255),b
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;DacApp.c: 50: return dacSpiVal;
  6334  0009FC  C0CE  F0B9         	movff	DacAnalogToDigitalSpi@dacSpiVal,?_DacAnalogToDigitalSpi
  6335  000A00  C0CF  F0BA         	movff	DacAnalogToDigitalSpi@dacSpiVal+1,?_DacAnalogToDigitalSpi+1
  6336  000A04  0012               	return	
  6337  000A06                     __end_of_DacAnalogToDigitalSpi:
  6338                           	opt stack 0
  6339                           tosu	equ	0xFFF
  6340                           tosh	equ	0xFFE
  6341                           tosl	equ	0xFFD
  6342                           pclath	equ	0xFFA
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           indf1	equ	0xFE7
  6352                           postdec1	equ	0xFE5
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function ___lbtoft *****************
  6363 ;; Defined at:
  6364 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  c               1    wreg     unsigned char 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  c               1   34[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  3   31[COMRAM] float 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6378 ;;      Params:         3       0       0       0       0       0       0
  6379 ;;      Locals:         1       0       0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0
  6381 ;;      Totals:         4       0       0       0       0       0       0
  6382 ;;Total ram usage:        4 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    4
  6385 ;; This function calls:
  6386 ;;		___ftpack
  6387 ;; This function is called by:
  6388 ;;		_DacAnalogToDigitalSpi
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text16
  6393  003028                     __ptext16:
  6394                           	opt stack 0
  6395  003028                     ___lbtoft:
  6396                           	opt stack 22
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;incstack = 0
  6400                           ;___lbtoft@c stored from wreg
  6401  003028  6E23               	movwf	___lbtoft@c,c
  6402  00302A  5023               	movf	___lbtoft@c,w,c
  6403  00302C  6E18               	movwf	___ftpack@arg,c
  6404  00302E  6A19               	clrf	___ftpack@arg+1,c
  6405  003030  6A1A               	clrf	___ftpack@arg+2,c
  6406  003032  0E8E               	movlw	142
  6407  003034  6E1B               	movwf	___ftpack@exp,c
  6408  003036  0E00               	movlw	0
  6409  003038  6E1C               	movwf	___ftpack@sign,c
  6410  00303A  ECEF  F010         	call	___ftpack	;wreg free
  6411  00303E  C018  F020         	movff	?___ftpack,?___lbtoft
  6412  003042  C019  F021         	movff	?___ftpack+1,?___lbtoft+1
  6413  003046  C01A  F022         	movff	?___ftpack+2,?___lbtoft+2
  6414  00304A  0012               	return	
  6415  00304C                     __end_of___lbtoft:
  6416                           	opt stack 0
  6417                           tosu	equ	0xFFF
  6418                           tosh	equ	0xFFE
  6419                           tosl	equ	0xFFD
  6420                           pclath	equ	0xFFA
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           prodh	equ	0xFF4
  6426                           prodl	equ	0xFF3
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           indf1	equ	0xFE7
  6430                           postdec1	equ	0xFE5
  6431                           fsr1h	equ	0xFE2
  6432                           fsr1l	equ	0xFE1
  6433                           indf2	equ	0xFDF
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _testLeds *****************
  6441 ;; Defined at:
  6442 ;;		line 43 in file "LedsApp.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  idx             2   24[COMRAM] int 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6456 ;;      Params:         0       0       0       0       0       0       0
  6457 ;;      Locals:         2       0       0       0       0       0       0
  6458 ;;      Temps:          1       0       0       0       0       0       0
  6459 ;;      Totals:         3       0       0       0       0       0       0
  6460 ;;Total ram usage:        3 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    3
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_GroupCommon
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text17
  6471  00272C                     __ptext17:
  6472                           	opt stack 0
  6473  00272C                     _testLeds:
  6474                           	opt stack 25
  6475                           
  6476                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6477                           
  6478                           ;incstack = 0
  6479  00272C  0E00               	movlw	0
  6480  00272E  6E1A               	movwf	testLeds@idx+1,c
  6481  002730  0E00               	movlw	0
  6482  002732  6E19               	movwf	testLeds@idx,c
  6483  002734                     l5551:
  6484  002734  BE1A               	btfsc	testLeds@idx+1,7,c
  6485  002736  D006               	goto	l50
  6486  002738  501A               	movf	testLeds@idx+1,w,c
  6487  00273A  E127               	bnz	l52
  6488  00273C  0E0A               	movlw	10
  6489  00273E  5C19               	subwf	testLeds@idx,w,c
  6490  002740  B0D8               	btfsc	status,0,c
  6491  002742  0012               	return	
  6492  002744                     l50:
  6493                           
  6494                           ;LedsApp.c: 47: {
  6495                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6496  002744  808B               	bsf	3979,0,c	;volatile
  6497                           
  6498                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6499  002746  0E82               	movlw	130
  6500  002748  6E18               	movwf	??_testLeds& (0+255),c
  6501  00274A  0EDE               	movlw	222
  6502  00274C                     u8787:
  6503  00274C  2EE8               	decfsz	wreg,f,c
  6504  00274E  D7FE               	bra	u8787
  6505  002750  2E18               	decfsz	??_testLeds& (0+255),f,c
  6506  002752  D7FC               	bra	u8787
  6507                           
  6508                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6509  002754  888A               	bsf	3978,4,c	;volatile
  6510                           
  6511                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6512  002756  0E82               	movlw	130
  6513  002758  6E18               	movwf	??_testLeds& (0+255),c
  6514  00275A  0EDE               	movlw	222
  6515  00275C                     u8797:
  6516  00275C  2EE8               	decfsz	wreg,f,c
  6517  00275E  D7FE               	bra	u8797
  6518  002760  2E18               	decfsz	??_testLeds& (0+255),f,c
  6519  002762  D7FC               	bra	u8797
  6520                           
  6521                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6522  002764  908B               	bcf	3979,0,c	;volatile
  6523                           
  6524                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6525  002766  0E82               	movlw	130
  6526  002768  6E18               	movwf	??_testLeds& (0+255),c
  6527  00276A  0EDE               	movlw	222
  6528  00276C                     u8807:
  6529  00276C  2EE8               	decfsz	wreg,f,c
  6530  00276E  D7FE               	bra	u8807
  6531  002770  2E18               	decfsz	??_testLeds& (0+255),f,c
  6532  002772  D7FC               	bra	u8807
  6533                           
  6534                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6535  002774  988A               	bcf	3978,4,c	;volatile
  6536                           
  6537                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6538  002776  0E82               	movlw	130
  6539  002778  6E18               	movwf	??_testLeds& (0+255),c
  6540  00277A  0EDE               	movlw	222
  6541  00277C                     u8817:
  6542  00277C  2EE8               	decfsz	wreg,f,c
  6543  00277E  D7FE               	bra	u8817
  6544  002780  2E18               	decfsz	??_testLeds& (0+255),f,c
  6545  002782  D7FC               	bra	u8817
  6546  002784  4A19               	infsnz	testLeds@idx,f,c
  6547  002786  2A1A               	incf	testLeds@idx+1,f,c
  6548  002788  D7D5               	goto	l5551
  6549  00278A                     l52:
  6550  00278A  0012               	return		;funcret
  6551  00278C                     __end_of_testLeds:
  6552                           	opt stack 0
  6553                           tosu	equ	0xFFF
  6554                           tosh	equ	0xFFE
  6555                           tosl	equ	0xFFD
  6556                           pclath	equ	0xFFA
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           indf1	equ	0xFE7
  6566                           postdec1	equ	0xFE5
  6567                           fsr1h	equ	0xFE2
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function _PrintHelpScreen *****************
  6577 ;; Defined at:
  6578 ;;		line 89 in file "SystemStatus.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  dest           50    9[BANK0 ] unsigned char [50]
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      void 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6592 ;;      Params:         0       0       0       0       0       0       0
  6593 ;;      Locals:         0      50       0       0       0       0       0
  6594 ;;      Temps:          0       0       0       0       0       0       0
  6595 ;;      Totals:         0      50       0       0       0       0       0
  6596 ;;Total ram usage:       50 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    5
  6599 ;; This function calls:
  6600 ;;		_UART_Write_Text
  6601 ;;		_sprintf
  6602 ;; This function is called by:
  6603 ;;		_GroupCommon
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text18
  6608  0003A4                     __ptext18:
  6609                           	opt stack 0
  6610  0003A4                     _PrintHelpScreen:
  6611                           	opt stack 23
  6612                           
  6613                           ;SystemStatus.c: 91: char dest[50];
  6614                           ;SystemStatus.c: 94: sprintf(dest, "<TX system commands>\n\r");
  6615                           
  6616                           ;incstack = 0
  6617  0003A4  0E69               	movlw	low PrintHelpScreen@dest
  6618  0003A6  6E24               	movwf	sprintf@sp,c
  6619  0003A8  0E00               	movlw	high PrintHelpScreen@dest
  6620  0003AA  6E25               	movwf	sprintf@sp+1,c
  6621  0003AC  0E54               	movlw	low STR_24
  6622  0003AE  6E26               	movwf	sprintf@f,c
  6623  0003B0  0E7F               	movlw	high STR_24
  6624  0003B2  6E27               	movwf	sprintf@f+1,c
  6625  0003B4  ECD7  F006         	call	_sprintf	;wreg free
  6626                           
  6627                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  6628  0003B8  0E69               	movlw	low PrintHelpScreen@dest
  6629  0003BA  6E19               	movwf	UART_Write_Text@text,c
  6630  0003BC  0E00               	movlw	high PrintHelpScreen@dest
  6631  0003BE  6E1A               	movwf	UART_Write_Text@text+1,c
  6632  0003C0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6633                           
  6634                           ;SystemStatus.c: 97: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  6635  0003C4  0E69               	movlw	low PrintHelpScreen@dest
  6636  0003C6  6E24               	movwf	sprintf@sp,c
  6637  0003C8  0E00               	movlw	high PrintHelpScreen@dest
  6638  0003CA  6E25               	movwf	sprintf@sp+1,c
  6639  0003CC  0E7C               	movlw	low STR_25
  6640  0003CE  6E26               	movwf	sprintf@f,c
  6641  0003D0  0E7C               	movlw	high STR_25
  6642  0003D2  6E27               	movwf	sprintf@f+1,c
  6643  0003D4  ECD7  F006         	call	_sprintf	;wreg free
  6644                           
  6645                           ;SystemStatus.c: 98: UART_Write_Text(dest);
  6646  0003D8  0E69               	movlw	low PrintHelpScreen@dest
  6647  0003DA  6E19               	movwf	UART_Write_Text@text,c
  6648  0003DC  0E00               	movlw	high PrintHelpScreen@dest
  6649  0003DE  6E1A               	movwf	UART_Write_Text@text+1,c
  6650  0003E0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6651                           
  6652                           ;SystemStatus.c: 99: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  6653  0003E4  0E69               	movlw	low PrintHelpScreen@dest
  6654  0003E6  6E24               	movwf	sprintf@sp,c
  6655  0003E8  0E00               	movlw	high PrintHelpScreen@dest
  6656  0003EA  6E25               	movwf	sprintf@sp+1,c
  6657  0003EC  0EFC               	movlw	low STR_26
  6658  0003EE  6E26               	movwf	sprintf@f,c
  6659  0003F0  0E7C               	movlw	high STR_26
  6660  0003F2  6E27               	movwf	sprintf@f+1,c
  6661  0003F4  ECD7  F006         	call	_sprintf	;wreg free
  6662                           
  6663                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  6664  0003F8  0E69               	movlw	low PrintHelpScreen@dest
  6665  0003FA  6E19               	movwf	UART_Write_Text@text,c
  6666  0003FC  0E00               	movlw	high PrintHelpScreen@dest
  6667  0003FE  6E1A               	movwf	UART_Write_Text@text+1,c
  6668  000400  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6669                           
  6670                           ;SystemStatus.c: 101: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  6671  000404  0E69               	movlw	low PrintHelpScreen@dest
  6672  000406  6E24               	movwf	sprintf@sp,c
  6673  000408  0E00               	movlw	high PrintHelpScreen@dest
  6674  00040A  6E25               	movwf	sprintf@sp+1,c
  6675  00040C  0ED9               	movlw	low STR_27
  6676  00040E  6E26               	movwf	sprintf@f,c
  6677  000410  0E7D               	movlw	high STR_27
  6678  000412  6E27               	movwf	sprintf@f+1,c
  6679  000414  ECD7  F006         	call	_sprintf	;wreg free
  6680                           
  6681                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  6682  000418  0E69               	movlw	low PrintHelpScreen@dest
  6683  00041A  6E19               	movwf	UART_Write_Text@text,c
  6684  00041C  0E00               	movlw	high PrintHelpScreen@dest
  6685  00041E  6E1A               	movwf	UART_Write_Text@text+1,c
  6686  000420  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6687                           
  6688                           ;SystemStatus.c: 103: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  6689  000424  0E69               	movlw	low PrintHelpScreen@dest
  6690  000426  6E24               	movwf	sprintf@sp,c
  6691  000428  0E00               	movlw	high PrintHelpScreen@dest
  6692  00042A  6E25               	movwf	sprintf@sp+1,c
  6693  00042C  0E9E               	movlw	low STR_28
  6694  00042E  6E26               	movwf	sprintf@f,c
  6695  000430  0E7B               	movlw	high STR_28
  6696  000432  6E27               	movwf	sprintf@f+1,c
  6697  000434  ECD7  F006         	call	_sprintf	;wreg free
  6698                           
  6699                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  6700  000438  0E69               	movlw	low PrintHelpScreen@dest
  6701  00043A  6E19               	movwf	UART_Write_Text@text,c
  6702  00043C  0E00               	movlw	high PrintHelpScreen@dest
  6703  00043E  6E1A               	movwf	UART_Write_Text@text+1,c
  6704  000440  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6705                           
  6706                           ;SystemStatus.c: 105: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  6707  000444  0E69               	movlw	low PrintHelpScreen@dest
  6708  000446  6E24               	movwf	sprintf@sp,c
  6709  000448  0E00               	movlw	high PrintHelpScreen@dest
  6710  00044A  6E25               	movwf	sprintf@sp+1,c
  6711  00044C  0E4F               	movlw	low STR_29
  6712  00044E  6E26               	movwf	sprintf@f,c
  6713  000450  0E7B               	movlw	high STR_29
  6714  000452  6E27               	movwf	sprintf@f+1,c
  6715  000454  ECD7  F006         	call	_sprintf	;wreg free
  6716                           
  6717                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  6718  000458  0E69               	movlw	low PrintHelpScreen@dest
  6719  00045A  6E19               	movwf	UART_Write_Text@text,c
  6720  00045C  0E00               	movlw	high PrintHelpScreen@dest
  6721  00045E  6E1A               	movwf	UART_Write_Text@text+1,c
  6722  000460  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6723                           
  6724                           ;SystemStatus.c: 109: sprintf(dest, "\n\r<RX system commands>\n\r");
  6725  000464  0E69               	movlw	low PrintHelpScreen@dest
  6726  000466  6E24               	movwf	sprintf@sp,c
  6727  000468  0E00               	movlw	high PrintHelpScreen@dest
  6728  00046A  6E25               	movwf	sprintf@sp+1,c
  6729  00046C  0E3B               	movlw	low STR_30
  6730  00046E  6E26               	movwf	sprintf@f,c
  6731  000470  0E7F               	movlw	high STR_30
  6732  000472  6E27               	movwf	sprintf@f+1,c
  6733  000474  ECD7  F006         	call	_sprintf	;wreg free
  6734                           
  6735                           ;SystemStatus.c: 110: UART_Write_Text(dest);
  6736  000478  0E69               	movlw	low PrintHelpScreen@dest
  6737  00047A  6E19               	movwf	UART_Write_Text@text,c
  6738  00047C  0E00               	movlw	high PrintHelpScreen@dest
  6739  00047E  6E1A               	movwf	UART_Write_Text@text+1,c
  6740  000480  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6741                           
  6742                           ;SystemStatus.c: 111: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  6743  000484  0E69               	movlw	low PrintHelpScreen@dest
  6744  000486  6E24               	movwf	sprintf@sp,c
  6745  000488  0E00               	movlw	high PrintHelpScreen@dest
  6746  00048A  6E25               	movwf	sprintf@sp+1,c
  6747  00048C  0EE9               	movlw	low STR_31
  6748  00048E  6E26               	movwf	sprintf@f,c
  6749  000490  0E7B               	movlw	high STR_31
  6750  000492  6E27               	movwf	sprintf@f+1,c
  6751  000494  ECD7  F006         	call	_sprintf	;wreg free
  6752                           
  6753                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  6754  000498  0E69               	movlw	low PrintHelpScreen@dest
  6755  00049A  6E19               	movwf	UART_Write_Text@text,c
  6756  00049C  0E00               	movlw	high PrintHelpScreen@dest
  6757  00049E  6E1A               	movwf	UART_Write_Text@text+1,c
  6758  0004A0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6759                           
  6760                           ;SystemStatus.c: 113: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  6761  0004A4  0E69               	movlw	low PrintHelpScreen@dest
  6762  0004A6  6E24               	movwf	sprintf@sp,c
  6763  0004A8  0E00               	movlw	high PrintHelpScreen@dest
  6764  0004AA  6E25               	movwf	sprintf@sp+1,c
  6765  0004AC  0E07               	movlw	low STR_32
  6766  0004AE  6E26               	movwf	sprintf@f,c
  6767  0004B0  0E7E               	movlw	high STR_32
  6768  0004B2  6E27               	movwf	sprintf@f+1,c
  6769  0004B4  ECD7  F006         	call	_sprintf	;wreg free
  6770                           
  6771                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  6772  0004B8  0E69               	movlw	low PrintHelpScreen@dest
  6773  0004BA  6E19               	movwf	UART_Write_Text@text,c
  6774  0004BC  0E00               	movlw	high PrintHelpScreen@dest
  6775  0004BE  6E1A               	movwf	UART_Write_Text@text+1,c
  6776  0004C0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6777                           
  6778                           ;SystemStatus.c: 115: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  6779  0004C4  0E69               	movlw	low PrintHelpScreen@dest
  6780  0004C6  6E24               	movwf	sprintf@sp,c
  6781  0004C8  0E00               	movlw	high PrintHelpScreen@dest
  6782  0004CA  6E25               	movwf	sprintf@sp+1,c
  6783  0004CC  0EBE               	movlw	low STR_33
  6784  0004CE  6E26               	movwf	sprintf@f,c
  6785  0004D0  0E7C               	movlw	high STR_33
  6786  0004D2  6E27               	movwf	sprintf@f+1,c
  6787  0004D4  ECD7  F006         	call	_sprintf	;wreg free
  6788                           
  6789                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  6790  0004D8  0E69               	movlw	low PrintHelpScreen@dest
  6791  0004DA  6E19               	movwf	UART_Write_Text@text,c
  6792  0004DC  0E00               	movlw	high PrintHelpScreen@dest
  6793  0004DE  6E1A               	movwf	UART_Write_Text@text+1,c
  6794  0004E0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6795                           
  6796                           ;SystemStatus.c: 117: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  6797  0004E4  0E69               	movlw	low PrintHelpScreen@dest
  6798  0004E6  6E24               	movwf	sprintf@sp,c
  6799  0004E8  0E00               	movlw	high PrintHelpScreen@dest
  6800  0004EA  6E25               	movwf	sprintf@sp+1,c
  6801  0004EC  0E39               	movlw	low STR_34
  6802  0004EE  6E26               	movwf	sprintf@f,c
  6803  0004F0  0E7D               	movlw	high STR_34
  6804  0004F2  6E27               	movwf	sprintf@f+1,c
  6805  0004F4  ECD7  F006         	call	_sprintf	;wreg free
  6806                           
  6807                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  6808  0004F8  0E69               	movlw	low PrintHelpScreen@dest
  6809  0004FA  6E19               	movwf	UART_Write_Text@text,c
  6810  0004FC  0E00               	movlw	high PrintHelpScreen@dest
  6811  0004FE  6E1A               	movwf	UART_Write_Text@text+1,c
  6812  000500  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6813                           
  6814                           ;SystemStatus.c: 119: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  6815  000504  0E69               	movlw	low PrintHelpScreen@dest
  6816  000506  6E24               	movwf	sprintf@sp,c
  6817  000508  0E00               	movlw	high PrintHelpScreen@dest
  6818  00050A  6E25               	movwf	sprintf@sp+1,c
  6819  00050C  0EA3               	movlw	low STR_35
  6820  00050E  6E26               	movwf	sprintf@f,c
  6821  000510  0E7A               	movlw	high STR_35
  6822  000512  6E27               	movwf	sprintf@f+1,c
  6823  000514  ECD7  F006         	call	_sprintf	;wreg free
  6824                           
  6825                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  6826  000518  0E69               	movlw	low PrintHelpScreen@dest
  6827  00051A  6E19               	movwf	UART_Write_Text@text,c
  6828  00051C  0E00               	movlw	high PrintHelpScreen@dest
  6829  00051E  6E1A               	movwf	UART_Write_Text@text+1,c
  6830  000520  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6831                           
  6832                           ;SystemStatus.c: 121: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  6833  000524  0E69               	movlw	low PrintHelpScreen@dest
  6834  000526  6E24               	movwf	sprintf@sp,c
  6835  000528  0E00               	movlw	high PrintHelpScreen@dest
  6836  00052A  6E25               	movwf	sprintf@sp+1,c
  6837  00052C  0E3E               	movlw	low STR_36
  6838  00052E  6E26               	movwf	sprintf@f,c
  6839  000530  0E7A               	movlw	high STR_36
  6840  000532  6E27               	movwf	sprintf@f+1,c
  6841  000534  ECD7  F006         	call	_sprintf	;wreg free
  6842                           
  6843                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  6844  000538  0E69               	movlw	low PrintHelpScreen@dest
  6845  00053A  6E19               	movwf	UART_Write_Text@text,c
  6846  00053C  0E00               	movlw	high PrintHelpScreen@dest
  6847  00053E  6E1A               	movwf	UART_Write_Text@text+1,c
  6848  000540  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6849                           
  6850                           ;SystemStatus.c: 125: sprintf(dest, "\n\r<Common system commands>\n\r");
  6851  000544  0E69               	movlw	low PrintHelpScreen@dest
  6852  000546  6E24               	movwf	sprintf@sp,c
  6853  000548  0E00               	movlw	high PrintHelpScreen@dest
  6854  00054A  6E25               	movwf	sprintf@sp+1,c
  6855  00054C  0E01               	movlw	low STR_37
  6856  00054E  6E26               	movwf	sprintf@f,c
  6857  000550  0E7F               	movlw	high STR_37
  6858  000552  6E27               	movwf	sprintf@f+1,c
  6859  000554  ECD7  F006         	call	_sprintf	;wreg free
  6860                           
  6861                           ;SystemStatus.c: 126: UART_Write_Text(dest);
  6862  000558  0E69               	movlw	low PrintHelpScreen@dest
  6863  00055A  6E19               	movwf	UART_Write_Text@text,c
  6864  00055C  0E00               	movlw	high PrintHelpScreen@dest
  6865  00055E  6E1A               	movwf	UART_Write_Text@text+1,c
  6866  000560  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6867                           
  6868                           ;SystemStatus.c: 127: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  6869  000564  0E69               	movlw	low PrintHelpScreen@dest
  6870  000566  6E24               	movwf	sprintf@sp,c
  6871  000568  0E00               	movlw	high PrintHelpScreen@dest
  6872  00056A  6E25               	movwf	sprintf@sp+1,c
  6873  00056C  0EAB               	movlw	low STR_38
  6874  00056E  6E26               	movwf	sprintf@f,c
  6875  000570  0E7D               	movlw	high STR_38
  6876  000572  6E27               	movwf	sprintf@f+1,c
  6877  000574  ECD7  F006         	call	_sprintf	;wreg free
  6878                           
  6879                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  6880  000578  0E69               	movlw	low PrintHelpScreen@dest
  6881  00057A  6E19               	movwf	UART_Write_Text@text,c
  6882  00057C  0E00               	movlw	high PrintHelpScreen@dest
  6883  00057E  6E1A               	movwf	UART_Write_Text@text+1,c
  6884  000580  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6885                           
  6886                           ;SystemStatus.c: 129: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  6887  000584  0E69               	movlw	low PrintHelpScreen@dest
  6888  000586  6E24               	movwf	sprintf@sp,c
  6889  000588  0E00               	movlw	high PrintHelpScreen@dest
  6890  00058A  6E25               	movwf	sprintf@sp+1,c
  6891  00058C  0E76               	movlw	low STR_39
  6892  00058E  6E26               	movwf	sprintf@f,c
  6893  000590  0E7D               	movlw	high STR_39
  6894  000592  6E27               	movwf	sprintf@f+1,c
  6895  000594  ECD7  F006         	call	_sprintf	;wreg free
  6896                           
  6897                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  6898  000598  0E69               	movlw	low PrintHelpScreen@dest
  6899  00059A  6E19               	movwf	UART_Write_Text@text,c
  6900  00059C  0E00               	movlw	high PrintHelpScreen@dest
  6901  00059E  6E1A               	movwf	UART_Write_Text@text+1,c
  6902  0005A0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6903                           
  6904                           ;SystemStatus.c: 131: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  6905  0005A4  0E69               	movlw	low PrintHelpScreen@dest
  6906  0005A6  6E24               	movwf	sprintf@sp,c
  6907  0005A8  0E00               	movlw	high PrintHelpScreen@dest
  6908  0005AA  6E25               	movwf	sprintf@sp+1,c
  6909  0005AC  0EF9               	movlw	low STR_40
  6910  0005AE  6E26               	movwf	sprintf@f,c
  6911  0005B0  0E7A               	movlw	high STR_40
  6912  0005B2  6E27               	movwf	sprintf@f+1,c
  6913  0005B4  ECD7  F006         	call	_sprintf	;wreg free
  6914                           
  6915                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  6916  0005B8  0E69               	movlw	low PrintHelpScreen@dest
  6917  0005BA  6E19               	movwf	UART_Write_Text@text,c
  6918  0005BC  0E00               	movlw	high PrintHelpScreen@dest
  6919  0005BE  6E1A               	movwf	UART_Write_Text@text+1,c
  6920  0005C0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6921                           
  6922                           ;SystemStatus.c: 133: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  6923  0005C4  0E69               	movlw	low PrintHelpScreen@dest
  6924  0005C6  6E24               	movwf	sprintf@sp,c
  6925  0005C8  0E00               	movlw	high PrintHelpScreen@dest
  6926  0005CA  6E25               	movwf	sprintf@sp+1,c
  6927  0005CC  0E34               	movlw	low STR_41
  6928  0005CE  6E26               	movwf	sprintf@f,c
  6929  0005D0  0E7E               	movlw	high STR_41
  6930  0005D2  6E27               	movwf	sprintf@f+1,c
  6931  0005D4  ECD7  F006         	call	_sprintf	;wreg free
  6932                           
  6933                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  6934  0005D8  0E69               	movlw	low PrintHelpScreen@dest
  6935  0005DA  6E19               	movwf	UART_Write_Text@text,c
  6936  0005DC  0E00               	movlw	high PrintHelpScreen@dest
  6937  0005DE  6E1A               	movwf	UART_Write_Text@text+1,c
  6938  0005E0  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6939                           
  6940                           ;SystemStatus.c: 135: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  6941  0005E4  0E69               	movlw	low PrintHelpScreen@dest
  6942  0005E6  6E24               	movwf	sprintf@sp,c
  6943  0005E8  0E00               	movlw	high PrintHelpScreen@dest
  6944  0005EA  6E25               	movwf	sprintf@sp+1,c
  6945  0005EC  0E5A               	movlw	low STR_42
  6946  0005EE  6E26               	movwf	sprintf@f,c
  6947  0005F0  0E7E               	movlw	high STR_42
  6948  0005F2  6E27               	movwf	sprintf@f+1,c
  6949  0005F4  ECD7  F006         	call	_sprintf	;wreg free
  6950                           
  6951                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  6952  0005F8  0E69               	movlw	low PrintHelpScreen@dest
  6953  0005FA  6E19               	movwf	UART_Write_Text@text,c
  6954  0005FC  0E00               	movlw	high PrintHelpScreen@dest
  6955  0005FE  6E1A               	movwf	UART_Write_Text@text+1,c
  6956  000600  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6957                           
  6958                           ;SystemStatus.c: 137: sprintf(dest, "$TD <DAC NUM><DAC VALUE><cr>         Set TX DAC <0-
      +                          3> <0-Vref[4 dig]> \r\n");
  6959  000604  0E69               	movlw	low PrintHelpScreen@dest
  6960  000606  6E24               	movwf	sprintf@sp,c
  6961  000608  0E00               	movlw	high PrintHelpScreen@dest
  6962  00060A  6E25               	movwf	sprintf@sp+1,c
  6963  00060C  0E33               	movlw	low STR_43
  6964  00060E  6E26               	movwf	sprintf@f,c
  6965  000610  0E7C               	movlw	high STR_43
  6966  000612  6E27               	movwf	sprintf@f+1,c
  6967  000614  ECD7  F006         	call	_sprintf	;wreg free
  6968                           
  6969                           ;SystemStatus.c: 138: UART_Write_Text(dest);
  6970  000618  0E69               	movlw	low PrintHelpScreen@dest
  6971  00061A  6E19               	movwf	UART_Write_Text@text,c
  6972  00061C  0E00               	movlw	high PrintHelpScreen@dest
  6973  00061E  6E1A               	movwf	UART_Write_Text@text+1,c
  6974  000620  ECF9  F012         	call	_UART_Write_Text	;wreg free
  6975  000624  0012               	return		;funcret
  6976  000626                     __end_of_PrintHelpScreen:
  6977                           	opt stack 0
  6978                           tosu	equ	0xFFF
  6979                           tosh	equ	0xFFE
  6980                           tosl	equ	0xFFD
  6981                           pclath	equ	0xFFA
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           indf1	equ	0xFE7
  6991                           postdec1	equ	0xFE5
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _EUSART1_Read *****************
  7002 ;; Defined at:
  7003 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;		None
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  readValue       2   24[COMRAM] unsigned int 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      unsigned char 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7017 ;;      Params:         0       0       0       0       0       0       0
  7018 ;;      Locals:         2       0       0       0       0       0       0
  7019 ;;      Temps:          1       0       0       0       0       0       0
  7020 ;;      Totals:         3       0       0       0       0       0       0
  7021 ;;Total ram usage:        3 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    3
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		_readUartByte
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text19
  7032  002B7C                     __ptext19:
  7033                           	opt stack 0
  7034  002B7C                     _EUSART1_Read:
  7035                           	opt stack 26
  7036                           
  7037                           ;eusart1.c: 112: uint16_t readValue = 0;
  7038                           
  7039                           ;incstack = 0
  7040  002B7C  0E00               	movlw	0
  7041  002B7E  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7042  002B80  0E00               	movlw	0
  7043  002B82  6E19               	movwf	EUSART1_Read@readValue,c
  7044                           
  7045                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7046  002B84  0101               	movlb	1	; () banked
  7047  002B86  512D               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7048  002B88  A4D8               	btfss	status,2,c
  7049  002B8A  D002               	goto	l849
  7050                           
  7051                           ; BSR set to: 1
  7052                           ;eusart1.c: 120: {
  7053                           ;eusart1.c: 121: return readValue;
  7054  002B8C  5019               	movf	EUSART1_Read@readValue,w,c
  7055                           
  7056                           ; BSR set to: 1
  7057  002B8E  0012               	return	
  7058  002B90                     l849:
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;eusart1.c: 122: }
  7062                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7063                           
  7064                           ; BSR set to: 1
  7065  002B90  5037               	movf	_eusart1RxTail,w,c	;volatile
  7066  002B92  0D01               	mullw	1
  7067  002B94  0E00               	movlw	low _eusart1RxBuffer
  7068  002B96  24F3               	addwf	prodl,w,c
  7069  002B98  6ED9               	movwf	fsr2l,c
  7070  002B9A  0E01               	movlw	high _eusart1RxBuffer
  7071  002B9C  20F4               	addwfc	prodh,w,c
  7072  002B9E  6EDA               	movwf	fsr2h,c
  7073  002BA0  50DF               	movf	indf2,w,c
  7074  002BA2  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7075  002BA4  5018               	movf	??_EUSART1_Read,w,c
  7076  002BA6  6E19               	movwf	EUSART1_Read@readValue,c
  7077  002BA8  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7078                           
  7079                           ; BSR set to: 1
  7080  002BAA  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7081                           
  7082                           ; BSR set to: 1
  7083                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7084  002BAC  0E27               	movlw	39
  7085  002BAE  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7086  002BB0  D002               	goto	l851
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;eusart1.c: 126: {
  7090                           ;eusart1.c: 127: eusart1RxTail = 0;
  7091  002BB2  0E00               	movlw	0
  7092  002BB4  6E37               	movwf	_eusart1RxTail,c	;volatile
  7093  002BB6                     l851:
  7094                           
  7095                           ; BSR set to: 1
  7096                           ;eusart1.c: 128: }
  7097                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7098                           
  7099                           ; BSR set to: 1
  7100  002BB6  9A9D               	bcf	3997,5,c	;volatile
  7101                           
  7102                           ; BSR set to: 1
  7103                           ;eusart1.c: 130: eusart1RxCount--;
  7104  002BB8  072D               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7105                           
  7106                           ; BSR set to: 1
  7107                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7108  002BBA  8A9D               	bsf	3997,5,c	;volatile
  7109                           
  7110                           ; BSR set to: 1
  7111                           ;eusart1.c: 133: return readValue;
  7112  002BBC  5019               	movf	EUSART1_Read@readValue,w,c
  7113  002BBE  0012               	return	
  7114  002BC0                     __end_of_EUSART1_Read:
  7115                           	opt stack 0
  7116                           tosu	equ	0xFFF
  7117                           tosh	equ	0xFFE
  7118                           tosl	equ	0xFFD
  7119                           pclath	equ	0xFFA
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           postinc0	equ	0xFEE
  7127                           wreg	equ	0xFE8
  7128                           indf1	equ	0xFE7
  7129                           postdec1	equ	0xFE5
  7130                           fsr1h	equ	0xFE2
  7131                           fsr1l	equ	0xFE1
  7132                           indf2	equ	0xFDF
  7133                           postinc2	equ	0xFDE
  7134                           postdec2	equ	0xFDD
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function _keepAliveSignalLed *****************
  7140 ;; Defined at:
  7141 ;;		line 35 in file "LedsApp.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      void 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7155 ;;      Params:         0       0       0       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0
  7157 ;;      Temps:          1       0       0       0       0       0       0
  7158 ;;      Totals:         1       0       0       0       0       0       0
  7159 ;;Total ram usage:        1 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    3
  7162 ;; This function calls:
  7163 ;;		Nothing
  7164 ;; This function is called by:
  7165 ;;		_main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text20
  7170  003124                     __ptext20:
  7171                           	opt stack 0
  7172  003124                     _keepAliveSignalLed:
  7173                           	opt stack 27
  7174                           
  7175                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7176                           
  7177                           ; BSR set to: 1
  7178                           ;incstack = 0
  7179  003124  B08B               	btfsc	3979,0,c	;volatile
  7180  003126  D003               	goto	u5240
  7181  003128  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7182  00312A  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7183  00312C  D001               	goto	u5258
  7184  00312E                     u5240:
  7185  00312E  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7186  003130                     u5258:
  7187  003130  508B               	movf	3979,w,c	;volatile
  7188  003132  1818               	xorwf	??_keepAliveSignalLed,w,c
  7189  003134  0BFE               	andlw	-2
  7190  003136  1818               	xorwf	??_keepAliveSignalLed,w,c
  7191  003138  6E8B               	movwf	3979,c	;volatile
  7192  00313A  0012               	return		;funcret
  7193  00313C                     __end_of_keepAliveSignalLed:
  7194                           	opt stack 0
  7195                           tosu	equ	0xFFF
  7196                           tosh	equ	0xFFE
  7197                           tosl	equ	0xFFD
  7198                           pclath	equ	0xFFA
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           postinc0	equ	0xFEE
  7206                           wreg	equ	0xFE8
  7207                           indf1	equ	0xFE7
  7208                           postdec1	equ	0xFE5
  7209                           fsr1h	equ	0xFE2
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _SetMcuSystem *****************
  7219 ;; Defined at:
  7220 ;;		line 11 in file "SystemSettings.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;		None
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1    wreg      void 
  7227 ;; Registers used:
  7228 ;;		wreg, status,2, status,0, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7234 ;;      Params:         0       0       0       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0       0       0
  7237 ;;      Totals:         0       0       0       0       0       0       0
  7238 ;;Total ram usage:        0 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    6
  7241 ;; This function calls:
  7242 ;;		_SYSTEM_Initialize
  7243 ;; This function is called by:
  7244 ;;		_main
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text21
  7249  0031CC                     __ptext21:
  7250                           	opt stack 0
  7251  0031CC                     _SetMcuSystem:
  7252                           	opt stack 24
  7253                           
  7254                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7255                           
  7256                           ;incstack = 0
  7257  0031CC  EC85  F018         	call	_SYSTEM_Initialize	;wreg free
  7258                           
  7259                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7260  0031D0  8EF2               	bsf	intcon,7,c	;volatile
  7261                           
  7262                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7263  0031D2  8CF2               	bsf	intcon,6,c	;volatile
  7264  0031D4  0012               	return		;funcret
  7265  0031D6                     __end_of_SetMcuSystem:
  7266                           	opt stack 0
  7267                           tosu	equ	0xFFF
  7268                           tosh	equ	0xFFE
  7269                           tosl	equ	0xFFD
  7270                           pclath	equ	0xFFA
  7271                           tblptru	equ	0xFF8
  7272                           tblptrh	equ	0xFF7
  7273                           tblptrl	equ	0xFF6
  7274                           tablat	equ	0xFF5
  7275                           prodh	equ	0xFF4
  7276                           prodl	equ	0xFF3
  7277                           intcon	equ	0xFF2
  7278                           postinc0	equ	0xFEE
  7279                           wreg	equ	0xFE8
  7280                           indf1	equ	0xFE7
  7281                           postdec1	equ	0xFE5
  7282                           fsr1h	equ	0xFE2
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           fsr2h	equ	0xFDA
  7288                           fsr2l	equ	0xFD9
  7289                           status	equ	0xFD8
  7290                           
  7291 ;; *************** function _SYSTEM_Initialize *****************
  7292 ;; Defined at:
  7293 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;		None
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;		None
  7298 ;; Return value:  Size  Location     Type
  7299 ;;                  1    wreg      void 
  7300 ;; Registers used:
  7301 ;;		wreg, status,2, status,0, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7307 ;;      Params:         0       0       0       0       0       0       0
  7308 ;;      Locals:         0       0       0       0       0       0       0
  7309 ;;      Temps:          0       0       0       0       0       0       0
  7310 ;;      Totals:         0       0       0       0       0       0       0
  7311 ;;Total ram usage:        0 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:    5
  7314 ;; This function calls:
  7315 ;;		_ADC_Initialize
  7316 ;;		_EUSART1_Initialize
  7317 ;;		_INTERRUPT_Initialize
  7318 ;;		_OSCILLATOR_Initialize
  7319 ;;		_PIN_MANAGER_Initialize
  7320 ;;		_TMR0_Initialize
  7321 ;; This function is called by:
  7322 ;;		_SetMcuSystem
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text22
  7327  00310A                     __ptext22:
  7328                           	opt stack 0
  7329  00310A                     _SYSTEM_Initialize:
  7330                           	opt stack 24
  7331                           
  7332                           ;mcc.c: 114: INTERRUPT_Initialize();
  7333                           
  7334                           ;incstack = 0
  7335  00310A  ECFC  F018         	call	_INTERRUPT_Initialize	;wreg free
  7336                           
  7337                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7338  00310E  EC77  F015         	call	_PIN_MANAGER_Initialize	;wreg free
  7339                           
  7340                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7341  003112  ECD2  F018         	call	_OSCILLATOR_Initialize	;wreg free
  7342                           
  7343                           ;mcc.c: 117: TMR0_Initialize();
  7344  003116  EC67  F017         	call	_TMR0_Initialize	;wreg free
  7345                           
  7346                           ;mcc.c: 118: ADC_Initialize();
  7347  00311A  EC9E  F018         	call	_ADC_Initialize	;wreg free
  7348                           
  7349                           ;mcc.c: 119: EUSART1_Initialize();
  7350  00311E  ECDC  F016         	call	_EUSART1_Initialize	;wreg free
  7351  003122  0012               	return		;funcret
  7352  003124                     __end_of_SYSTEM_Initialize:
  7353                           	opt stack 0
  7354                           tosu	equ	0xFFF
  7355                           tosh	equ	0xFFE
  7356                           tosl	equ	0xFFD
  7357                           pclath	equ	0xFFA
  7358                           tblptru	equ	0xFF8
  7359                           tblptrh	equ	0xFF7
  7360                           tblptrl	equ	0xFF6
  7361                           tablat	equ	0xFF5
  7362                           prodh	equ	0xFF4
  7363                           prodl	equ	0xFF3
  7364                           intcon	equ	0xFF2
  7365                           postinc0	equ	0xFEE
  7366                           wreg	equ	0xFE8
  7367                           indf1	equ	0xFE7
  7368                           postdec1	equ	0xFE5
  7369                           fsr1h	equ	0xFE2
  7370                           fsr1l	equ	0xFE1
  7371                           indf2	equ	0xFDF
  7372                           postinc2	equ	0xFDE
  7373                           postdec2	equ	0xFDD
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _TMR0_Initialize *****************
  7379 ;; Defined at:
  7380 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      void 
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7394 ;;      Params:         0       0       0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0
  7396 ;;      Temps:          2       0       0       0       0       0       0
  7397 ;;      Totals:         2       0       0       0       0       0       0
  7398 ;;Total ram usage:        2 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    4
  7401 ;; This function calls:
  7402 ;;		_TMR0_SetInterruptHandler
  7403 ;; This function is called by:
  7404 ;;		_SYSTEM_Initialize
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text23
  7409  002ECE                     __ptext23:
  7410                           	opt stack 0
  7411  002ECE                     _TMR0_Initialize:
  7412                           	opt stack 24
  7413                           
  7414                           ;tmr0.c: 71: TMR0H = 0x3C;
  7415                           
  7416                           ;incstack = 0
  7417  002ECE  0E3C               	movlw	60
  7418  002ED0  6ED7               	movwf	4055,c	;volatile
  7419                           
  7420                           ;tmr0.c: 74: TMR0L = 0xAF;
  7421  002ED2  0EAF               	movlw	175
  7422  002ED4  6ED6               	movwf	4054,c	;volatile
  7423                           
  7424                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7425  002ED6  50D6               	movf	4054,w,c	;volatile
  7426  002ED8  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7427  002EDC  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7428  002EDE  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7429  002EE2  6A1A               	clrf	??_TMR0_Initialize,c
  7430  002EE4  101A               	iorwf	??_TMR0_Initialize,w,c
  7431  002EE6  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7432  002EE8  501B               	movf	??_TMR0_Initialize+1,w,c
  7433  002EEA  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7434                           
  7435                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7436  002EEC  94F2               	bcf	intcon,2,c	;volatile
  7437                           
  7438                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7439  002EEE  8AF2               	bsf	intcon,5,c	;volatile
  7440                           
  7441                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7442  002EF0  0E00               	movlw	0
  7443  002EF2  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7444  002EF4  0E00               	movlw	0
  7445  002EF6  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7446  002EF8  ECEB  F018         	call	_TMR0_SetInterruptHandler	;wreg free
  7447                           
  7448                           ;tmr0.c: 90: T0CON = 0x90;
  7449  002EFC  0E90               	movlw	144
  7450  002EFE  6ED5               	movwf	4053,c	;volatile
  7451  002F00  0012               	return		;funcret
  7452  002F02                     __end_of_TMR0_Initialize:
  7453                           	opt stack 0
  7454                           tosu	equ	0xFFF
  7455                           tosh	equ	0xFFE
  7456                           tosl	equ	0xFFD
  7457                           pclath	equ	0xFFA
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           intcon	equ	0xFF2
  7465                           postinc0	equ	0xFEE
  7466                           wreg	equ	0xFE8
  7467                           indf1	equ	0xFE7
  7468                           postdec1	equ	0xFE5
  7469                           fsr1h	equ	0xFE2
  7470                           fsr1l	equ	0xFE1
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function _TMR0_SetInterruptHandler *****************
  7479 ;; Defined at:
  7480 ;;		line 181 in file "mcc_generated_files/tmr0.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7483 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;		None
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      void 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7495 ;;      Params:         2       0       0       0       0       0       0
  7496 ;;      Locals:         0       0       0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0
  7498 ;;      Totals:         2       0       0       0       0       0       0
  7499 ;;Total ram usage:        2 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    3
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_TMR0_Initialize
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text24
  7510  0031D6                     __ptext24:
  7511                           	opt stack 0
  7512  0031D6                     _TMR0_SetInterruptHandler:
  7513                           	opt stack 24
  7514                           
  7515                           ;tmr0.c: 182: TMR0_InterruptHandler = InterruptHandler;
  7516                           
  7517                           ;incstack = 0
  7518  0031D6  C018  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7519  0031DA  C019  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7520  0031DE  0012               	return		;funcret
  7521  0031E0                     __end_of_TMR0_SetInterruptHandler:
  7522                           	opt stack 0
  7523                           tosu	equ	0xFFF
  7524                           tosh	equ	0xFFE
  7525                           tosl	equ	0xFFD
  7526                           pclath	equ	0xFFA
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           postinc0	equ	0xFEE
  7535                           wreg	equ	0xFE8
  7536                           indf1	equ	0xFE7
  7537                           postdec1	equ	0xFE5
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           postdec2	equ	0xFDD
  7543                           fsr2h	equ	0xFDA
  7544                           fsr2l	equ	0xFD9
  7545                           status	equ	0xFD8
  7546                           
  7547 ;; *************** function _PIN_MANAGER_Initialize *****************
  7548 ;; Defined at:
  7549 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;		None
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg, status,2
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7563 ;;      Params:         0       0       0       0       0       0       0
  7564 ;;      Locals:         0       0       0       0       0       0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0
  7566 ;;      Totals:         0       0       0       0       0       0       0
  7567 ;;Total ram usage:        0 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    3
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		_SYSTEM_Initialize
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text25
  7578  002AEE                     __ptext25:
  7579                           	opt stack 0
  7580  002AEE                     _PIN_MANAGER_Initialize:
  7581                           	opt stack 25
  7582                           
  7583                           ;pin_manager.c: 57: LATE = 0x00;
  7584                           
  7585                           ;incstack = 0
  7586  002AEE  0E00               	movlw	0
  7587  002AF0  6E8D               	movwf	3981,c	;volatile
  7588                           
  7589                           ;pin_manager.c: 58: LATD = 0x00;
  7590  002AF2  0E00               	movlw	0
  7591  002AF4  6E8C               	movwf	3980,c	;volatile
  7592                           
  7593                           ;pin_manager.c: 59: LATA = 0x06;
  7594  002AF6  0E06               	movlw	6
  7595  002AF8  6E89               	movwf	3977,c	;volatile
  7596                           
  7597                           ;pin_manager.c: 60: LATB = 0x00;
  7598  002AFA  0E00               	movlw	0
  7599  002AFC  6E8A               	movwf	3978,c	;volatile
  7600                           
  7601                           ;pin_manager.c: 61: LATC = 0x00;
  7602  002AFE  0E00               	movlw	0
  7603  002B00  6E8B               	movwf	3979,c	;volatile
  7604                           
  7605                           ;pin_manager.c: 66: TRISE = 0x07;
  7606  002B02  0E07               	movlw	7
  7607  002B04  6E96               	movwf	3990,c	;volatile
  7608                           
  7609                           ;pin_manager.c: 67: TRISA = 0xE1;
  7610  002B06  0EE1               	movlw	225
  7611  002B08  6E92               	movwf	3986,c	;volatile
  7612                           
  7613                           ;pin_manager.c: 68: TRISB = 0xEE;
  7614  002B0A  0EEE               	movlw	238
  7615  002B0C  6E93               	movwf	3987,c	;volatile
  7616                           
  7617                           ;pin_manager.c: 69: TRISC = 0x80;
  7618  002B0E  0E80               	movlw	128
  7619  002B10  6E94               	movwf	3988,c	;volatile
  7620                           
  7621                           ;pin_manager.c: 70: TRISD = 0xF2;
  7622  002B12  0EF2               	movlw	242
  7623  002B14  6E95               	movwf	3989,c	;volatile
  7624                           
  7625                           ;pin_manager.c: 75: ANSELC = 0x30;
  7626  002B16  0E30               	movlw	48
  7627  002B18  010F               	movlb	15	; () banked
  7628  002B1A  6F3A               	movwf	58,b	;volatile
  7629                           
  7630                           ;pin_manager.c: 76: ANSELB = 0x32;
  7631  002B1C  0E32               	movlw	50
  7632  002B1E  6F39               	movwf	57,b	;volatile
  7633                           
  7634                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7635  002B20  0EE4               	movlw	228
  7636  002B22  6F3B               	movwf	59,b	;volatile
  7637                           
  7638                           ;pin_manager.c: 78: ANSELE = 0x07;
  7639  002B24  0E07               	movlw	7
  7640  002B26  6F3C               	movwf	60,b	;volatile
  7641                           
  7642                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7643  002B28  0E2F               	movlw	47
  7644  002B2A  6F38               	movwf	56,b	;volatile
  7645                           
  7646                           ;pin_manager.c: 84: WPUB = 0xC2;
  7647  002B2C  0EC2               	movlw	194
  7648  002B2E  6E61               	movwf	3937,c	;volatile
  7649                           
  7650                           ; BSR set to: 15
  7651                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  7652  002B30  8EF1               	bsf	intcon2,7,c	;volatile
  7653                           
  7654                           ; BSR set to: 15
  7655                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7656  002B32  86F2               	bsf	intcon,3,c	;volatile
  7657                           
  7658                           ; BSR set to: 15
  7659  002B34  0012               	return		;funcret
  7660  002B36                     __end_of_PIN_MANAGER_Initialize:
  7661                           	opt stack 0
  7662                           tosu	equ	0xFFF
  7663                           tosh	equ	0xFFE
  7664                           tosl	equ	0xFFD
  7665                           pclath	equ	0xFFA
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           intcon2	equ	0xFF1
  7674                           postinc0	equ	0xFEE
  7675                           wreg	equ	0xFE8
  7676                           indf1	equ	0xFE7
  7677                           postdec1	equ	0xFE5
  7678                           fsr1h	equ	0xFE2
  7679                           fsr1l	equ	0xFE1
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687 ;; *************** function _OSCILLATOR_Initialize *****************
  7688 ;; Defined at:
  7689 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;		None
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7703 ;;      Params:         0       0       0       0       0       0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0
  7706 ;;      Totals:         0       0       0       0       0       0       0
  7707 ;;Total ram usage:        0 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    3
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_SYSTEM_Initialize
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text26
  7718  0031A4                     __ptext26:
  7719                           	opt stack 0
  7720  0031A4                     _OSCILLATOR_Initialize:
  7721                           	opt stack 25
  7722                           
  7723                           ;mcc.c: 125: OSCCON = 0x60;
  7724                           
  7725                           ; BSR set to: 15
  7726                           ;incstack = 0
  7727  0031A4  0E60               	movlw	96
  7728  0031A6  6ED3               	movwf	4051,c	;volatile
  7729                           
  7730                           ;mcc.c: 127: OSCCON2 = 0x04;
  7731  0031A8  0E04               	movlw	4
  7732  0031AA  6ED2               	movwf	4050,c	;volatile
  7733                           
  7734                           ;mcc.c: 129: OSCTUNE = 0x00;
  7735  0031AC  0E00               	movlw	0
  7736  0031AE  6E9B               	movwf	3995,c	;volatile
  7737  0031B0  0012               	return		;funcret
  7738  0031B2                     __end_of_OSCILLATOR_Initialize:
  7739                           	opt stack 0
  7740                           tosu	equ	0xFFF
  7741                           tosh	equ	0xFFE
  7742                           tosl	equ	0xFFD
  7743                           pclath	equ	0xFFA
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon2	equ	0xFF1
  7752                           postinc0	equ	0xFEE
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _INTERRUPT_Initialize *****************
  7766 ;; Defined at:
  7767 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1    wreg      void 
  7774 ;; Registers used:
  7775 ;;		None
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7781 ;;      Params:         0       0       0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0
  7784 ;;      Totals:         0       0       0       0       0       0       0
  7785 ;;Total ram usage:        0 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    3
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_SYSTEM_Initialize
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text27
  7796  0031F8                     __ptext27:
  7797                           	opt stack 0
  7798  0031F8                     _INTERRUPT_Initialize:
  7799                           	opt stack 25
  7800                           
  7801                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  7802                           
  7803                           ;incstack = 0
  7804  0031F8  9ED0               	bcf	4048,7,c	;volatile
  7805  0031FA  0012               	return		;funcret
  7806  0031FC                     __end_of_INTERRUPT_Initialize:
  7807                           	opt stack 0
  7808                           tosu	equ	0xFFF
  7809                           tosh	equ	0xFFE
  7810                           tosl	equ	0xFFD
  7811                           pclath	equ	0xFFA
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           intcon2	equ	0xFF1
  7820                           postinc0	equ	0xFEE
  7821                           wreg	equ	0xFE8
  7822                           indf1	equ	0xFE7
  7823                           postdec1	equ	0xFE5
  7824                           fsr1h	equ	0xFE2
  7825                           fsr1l	equ	0xFE1
  7826                           indf2	equ	0xFDF
  7827                           postinc2	equ	0xFDE
  7828                           postdec2	equ	0xFDD
  7829                           fsr2h	equ	0xFDA
  7830                           fsr2l	equ	0xFD9
  7831                           status	equ	0xFD8
  7832                           
  7833 ;; *************** function _EUSART1_Initialize *****************
  7834 ;; Defined at:
  7835 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;		None
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      void 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7849 ;;      Params:         0       0       0       0       0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0
  7852 ;;      Totals:         0       0       0       0       0       0       0
  7853 ;;Total ram usage:        0 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    3
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_SYSTEM_Initialize
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text28
  7864  002DB8                     __ptext28:
  7865                           	opt stack 0
  7866  002DB8                     _EUSART1_Initialize:
  7867                           	opt stack 25
  7868                           
  7869                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  7870                           
  7871                           ;incstack = 0
  7872  002DB8  9A9D               	bcf	3997,5,c	;volatile
  7873                           
  7874                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  7875  002DBA  989D               	bcf	3997,4,c	;volatile
  7876                           
  7877                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  7878  002DBC  0E08               	movlw	8
  7879  002DBE  6EB8               	movwf	4024,c	;volatile
  7880                           
  7881                           ;eusart1.c: 85: RCSTA1 = 0x90;
  7882  002DC0  0E90               	movlw	144
  7883  002DC2  6EAB               	movwf	4011,c	;volatile
  7884                           
  7885                           ;eusart1.c: 88: TXSTA1 = 0x24;
  7886  002DC4  0E24               	movlw	36
  7887  002DC6  6EAC               	movwf	4012,c	;volatile
  7888                           
  7889                           ;eusart1.c: 91: SPBRG1 = 0x10;
  7890  002DC8  0E10               	movlw	16
  7891  002DCA  6EAF               	movwf	4015,c	;volatile
  7892                           
  7893                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  7894  002DCC  0E00               	movlw	0
  7895  002DCE  6EB0               	movwf	4016,c	;volatile
  7896                           
  7897                           ;eusart1.c: 98: eusart1TxHead = 0;
  7898  002DD0  0E00               	movlw	0
  7899  002DD2  6E3A               	movwf	_eusart1TxHead,c	;volatile
  7900                           
  7901                           ;eusart1.c: 99: eusart1TxTail = 0;
  7902  002DD4  0E00               	movlw	0
  7903  002DD6  6E39               	movwf	_eusart1TxTail,c	;volatile
  7904                           
  7905                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7906  002DD8  0E46               	movlw	70
  7907  002DDA  0100               	movlb	0	; () banked
  7908  002DDC  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  7909                           
  7910                           ;eusart1.c: 102: eusart1RxHead = 0;
  7911  002DDE  0E00               	movlw	0
  7912  002DE0  6E38               	movwf	_eusart1RxHead,c	;volatile
  7913                           
  7914                           ;eusart1.c: 103: eusart1RxTail = 0;
  7915  002DE2  0E00               	movlw	0
  7916  002DE4  6E37               	movwf	_eusart1RxTail,c	;volatile
  7917                           
  7918                           ;eusart1.c: 104: eusart1RxCount = 0;
  7919  002DE6  0E00               	movlw	0
  7920  002DE8  0101               	movlb	1	; () banked
  7921  002DEA  6F2D               	movwf	_eusart1RxCount& (0+255),b	;volatile
  7922                           
  7923                           ; BSR set to: 1
  7924                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  7925  002DEC  8A9D               	bsf	3997,5,c	;volatile
  7926                           
  7927                           ; BSR set to: 1
  7928  002DEE  0012               	return		;funcret
  7929  002DF0                     __end_of_EUSART1_Initialize:
  7930                           	opt stack 0
  7931                           tosu	equ	0xFFF
  7932                           tosh	equ	0xFFE
  7933                           tosl	equ	0xFFD
  7934                           pclath	equ	0xFFA
  7935                           tblptru	equ	0xFF8
  7936                           tblptrh	equ	0xFF7
  7937                           tblptrl	equ	0xFF6
  7938                           tablat	equ	0xFF5
  7939                           prodh	equ	0xFF4
  7940                           prodl	equ	0xFF3
  7941                           intcon	equ	0xFF2
  7942                           intcon2	equ	0xFF1
  7943                           postinc0	equ	0xFEE
  7944                           wreg	equ	0xFE8
  7945                           indf1	equ	0xFE7
  7946                           postdec1	equ	0xFE5
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _ADC_Initialize *****************
  7957 ;; Defined at:
  7958 ;;		line 58 in file "mcc_generated_files/adc.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg, status,2
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7972 ;;      Params:         0       0       0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0
  7975 ;;      Totals:         0       0       0       0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    3
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_SYSTEM_Initialize
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text29
  7987  00313C                     __ptext29:
  7988                           	opt stack 0
  7989  00313C                     _ADC_Initialize:
  7990                           	opt stack 25
  7991                           
  7992                           ;adc.c: 63: ADCON0 = 0x05;
  7993                           
  7994                           ; BSR set to: 1
  7995                           ;incstack = 0
  7996  00313C  0E05               	movlw	5
  7997  00313E  6EC2               	movwf	4034,c	;volatile
  7998                           
  7999                           ;adc.c: 66: ADCON1 = 0x00;
  8000  003140  0E00               	movlw	0
  8001  003142  6EC1               	movwf	4033,c	;volatile
  8002                           
  8003                           ;adc.c: 69: ADCON2 = 0x87;
  8004  003144  0E87               	movlw	135
  8005  003146  6EC0               	movwf	4032,c	;volatile
  8006                           
  8007                           ;adc.c: 72: ADRESL = 0x00;
  8008  003148  0E00               	movlw	0
  8009  00314A  6EC3               	movwf	4035,c	;volatile
  8010                           
  8011                           ;adc.c: 75: ADRESH = 0x00;
  8012  00314C  0E00               	movlw	0
  8013  00314E  6EC4               	movwf	4036,c	;volatile
  8014  003150  0012               	return		;funcret
  8015  003152                     __end_of_ADC_Initialize:
  8016                           	opt stack 0
  8017                           tosu	equ	0xFFF
  8018                           tosh	equ	0xFFE
  8019                           tosl	equ	0xFFD
  8020                           pclath	equ	0xFFA
  8021                           tblptru	equ	0xFF8
  8022                           tblptrh	equ	0xFF7
  8023                           tblptrl	equ	0xFF6
  8024                           tablat	equ	0xFF5
  8025                           prodh	equ	0xFF4
  8026                           prodl	equ	0xFF3
  8027                           intcon	equ	0xFF2
  8028                           intcon2	equ	0xFF1
  8029                           postinc0	equ	0xFEE
  8030                           wreg	equ	0xFE8
  8031                           indf1	equ	0xFE7
  8032                           postdec1	equ	0xFE5
  8033                           fsr1h	equ	0xFE2
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           fsr2h	equ	0xFDA
  8039                           fsr2l	equ	0xFD9
  8040                           status	equ	0xFD8
  8041                           
  8042 ;; *************** function _SetMcuRunTime *****************
  8043 ;; Defined at:
  8044 ;;		line 45 in file "SystemStatus.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0, cstack
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8058 ;;      Params:         0       0       0       0       0       0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0
  8060 ;;      Temps:          0       0       0       0       0       0       0
  8061 ;;      Totals:         0       0       0       0       0       0       0
  8062 ;;Total ram usage:        0 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    4
  8065 ;; This function calls:
  8066 ;;		___llmod
  8067 ;; This function is called by:
  8068 ;;		_main
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text30
  8073  002BC0                     __ptext30:
  8074                           	opt stack 0
  8075  002BC0                     _SetMcuRunTime:
  8076                           	opt stack 26
  8077                           
  8078                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks++;
  8079                           
  8080                           ;incstack = 0
  8081  002BC0  0E01               	movlw	1
  8082  002BC2  0100               	movlb	0	; () banked
  8083  002BC4  27E8               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8084  002BC6  0E00               	movlw	0
  8085  002BC8  23E9               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8086  002BCA  23EA               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8087  002BCC  23EB               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks %= (17280);
  8091  002BCE  C0E8  F0B9         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8092  002BD2  C0E9  F0BA         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8093  002BD6  C0EA  F0BB         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8094  002BDA  C0EB  F0BC         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8095  002BDE  0E80               	movlw	128
  8096  002BE0  6FBD               	movwf	___llmod@divisor& (0+255),b
  8097  002BE2  0E43               	movlw	67
  8098  002BE4  6FBE               	movwf	(___llmod@divisor+1)& (0+255),b
  8099  002BE6  0E00               	movlw	0
  8100  002BE8  6FBF               	movwf	(___llmod@divisor+2)& (0+255),b
  8101  002BEA  0E00               	movlw	0
  8102  002BEC  6FC0               	movwf	(___llmod@divisor+3)& (0+255),b
  8103  002BEE  EC32  F013         	call	___llmod	;wreg free
  8104  002BF2  C0B9  F0E8         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8105  002BF6  C0BA  F0E9         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8106  002BFA  C0BB  F0EA         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8107  002BFE  C0BC  F0EB         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8108  002C02  0012               	return		;funcret
  8109  002C04                     __end_of_SetMcuRunTime:
  8110                           	opt stack 0
  8111                           tosu	equ	0xFFF
  8112                           tosh	equ	0xFFE
  8113                           tosl	equ	0xFFD
  8114                           pclath	equ	0xFFA
  8115                           tblptru	equ	0xFF8
  8116                           tblptrh	equ	0xFF7
  8117                           tblptrl	equ	0xFF6
  8118                           tablat	equ	0xFF5
  8119                           prodh	equ	0xFF4
  8120                           prodl	equ	0xFF3
  8121                           intcon	equ	0xFF2
  8122                           intcon2	equ	0xFF1
  8123                           postinc0	equ	0xFEE
  8124                           wreg	equ	0xFE8
  8125                           indf1	equ	0xFE7
  8126                           postdec1	equ	0xFE5
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function ___llmod *****************
  8137 ;; Defined at:
  8138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  dividend        4   89[BANK0 ] unsigned long 
  8141 ;;  divisor         4   93[BANK0 ] unsigned long 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  counter         1   47[COMRAM] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  4   89[BANK0 ] unsigned long 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8153 ;;      Params:         0       8       0       0       0       0       0
  8154 ;;      Locals:         1       0       0       0       0       0       0
  8155 ;;      Temps:          0       0       0       0       0       0       0
  8156 ;;      Totals:         1       8       0       0       0       0       0
  8157 ;;Total ram usage:        9 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    3
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_AdcSingleSample
  8164 ;;		_DacSetValue
  8165 ;;		_SetMcuRunTime
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	text31
  8170  002664                     __ptext31:
  8171                           	opt stack 0
  8172  002664                     ___llmod:
  8173                           	opt stack 24
  8174                           
  8175                           ;incstack = 0
  8176  002664  0100               	movlb	0	; () banked
  8177  002666  51BD               	movf	___llmod@divisor& (0+255),w,b
  8178  002668  11BE               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8179  00266A  11BF               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8180  00266C  11C0               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8181  00266E  B4D8               	btfsc	status,2,c
  8182  002670  D024               	goto	l1816
  8183                           
  8184                           ; BSR set to: 0
  8185  002672  0E01               	movlw	1
  8186  002674  6E30               	movwf	___llmod@counter,c
  8187  002676  D006               	goto	l1811
  8188  002678                     
  8189                           ; BSR set to: 0
  8190                           
  8191                           ; BSR set to: 0
  8192  002678  90D8               	bcf	status,0,c
  8193  00267A  37BD               	rlcf	___llmod@divisor& (0+255),f,b
  8194  00267C  37BE               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8195  00267E  37BF               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8196  002680  37C0               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8197  002682  2A30               	incf	___llmod@counter,f,c
  8198  002684                     l1811:
  8199                           
  8200                           ; BSR set to: 0
  8201                           
  8202                           ; BSR set to: 0
  8203  002684  AFC0               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8204  002686  D7F8               	goto	l1812
  8205  002688                     u7980:
  8206                           
  8207                           ; BSR set to: 0
  8208                           
  8209                           ; BSR set to: 0
  8210                           
  8211                           ; BSR set to: 0
  8212  002688  51BD               	movf	___llmod@divisor& (0+255),w,b
  8213  00268A  5DB9               	subwf	___llmod@dividend& (0+255),w,b
  8214  00268C  51BE               	movf	(___llmod@divisor+1)& (0+255),w,b
  8215  00268E  59BA               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8216  002690  51BF               	movf	(___llmod@divisor+2)& (0+255),w,b
  8217  002692  59BB               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8218  002694  51C0               	movf	(___llmod@divisor+3)& (0+255),w,b
  8219  002696  59BC               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8220  002698  A0D8               	btfss	status,0,c
  8221  00269A  D008               	goto	l1815
  8222                           
  8223                           ; BSR set to: 0
  8224  00269C  51BD               	movf	___llmod@divisor& (0+255),w,b
  8225  00269E  5FB9               	subwf	___llmod@dividend& (0+255),f,b
  8226  0026A0  51BE               	movf	(___llmod@divisor+1)& (0+255),w,b
  8227  0026A2  5BBA               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8228  0026A4  51BF               	movf	(___llmod@divisor+2)& (0+255),w,b
  8229  0026A6  5BBB               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8230  0026A8  51C0               	movf	(___llmod@divisor+3)& (0+255),w,b
  8231  0026AA  5BBC               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8232  0026AC                     l1815:
  8233                           
  8234                           ; BSR set to: 0
  8235                           
  8236                           ; BSR set to: 0
  8237  0026AC  90D8               	bcf	status,0,c
  8238  0026AE  33C0               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8239  0026B0  33BF               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8240  0026B2  33BE               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8241  0026B4  33BD               	rrcf	___llmod@divisor& (0+255),f,b
  8242                           
  8243                           ; BSR set to: 0
  8244  0026B6  2E30               	decfsz	___llmod@counter,f,c
  8245  0026B8  D7E7               	goto	u7980
  8246  0026BA                     l1816:
  8247                           
  8248                           ; BSR set to: 0
  8249                           
  8250                           ; BSR set to: 0
  8251  0026BA  C0B9  F0B9         	movff	___llmod@dividend,?___llmod
  8252  0026BE  C0BA  F0BA         	movff	___llmod@dividend+1,?___llmod+1
  8253  0026C2  C0BB  F0BB         	movff	___llmod@dividend+2,?___llmod+2
  8254  0026C6  C0BC  F0BC         	movff	___llmod@dividend+3,?___llmod+3
  8255                           
  8256                           ; BSR set to: 0
  8257  0026CA  0012               	return		;funcret
  8258  0026CC                     __end_of___llmod:
  8259                           	opt stack 0
  8260                           tosu	equ	0xFFF
  8261                           tosh	equ	0xFFE
  8262                           tosl	equ	0xFFD
  8263                           pclath	equ	0xFFA
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           postinc0	equ	0xFEE
  8273                           wreg	equ	0xFE8
  8274                           indf1	equ	0xFE7
  8275                           postdec1	equ	0xFE5
  8276                           fsr1h	equ	0xFE2
  8277                           fsr1l	equ	0xFE1
  8278                           indf2	equ	0xFDF
  8279                           postinc2	equ	0xFDE
  8280                           postdec2	equ	0xFDD
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _SendUartSystemInitMessage *****************
  8286 ;; Defined at:
  8287 ;;		line 66 in file "SystemStatus.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;		None
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  dest           50    9[BANK0 ] unsigned char [50]
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  1    wreg      void 
  8294 ;; Registers used:
  8295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8301 ;;      Params:         0       0       0       0       0       0       0
  8302 ;;      Locals:         0      50       0       0       0       0       0
  8303 ;;      Temps:          0       0       0       0       0       0       0
  8304 ;;      Totals:         0      50       0       0       0       0       0
  8305 ;;Total ram usage:       50 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    5
  8308 ;; This function calls:
  8309 ;;		_UART_Write_Text
  8310 ;;		_sprintf
  8311 ;; This function is called by:
  8312 ;;		_main
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text32
  8317  001D2E                     __ptext32:
  8318                           	opt stack 0
  8319  001D2E                     _SendUartSystemInitMessage:
  8320                           	opt stack 25
  8321                           
  8322                           ;SystemStatus.c: 68: char dest[50];
  8323                           ;SystemStatus.c: 70: sprintf(dest, "*************************** \n\r");
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;incstack = 0
  8327  001D2E  0E69               	movlw	low SendUartSystemInitMessage@dest
  8328  001D30  6E24               	movwf	sprintf@sp,c
  8329  001D32  0E00               	movlw	high SendUartSystemInitMessage@dest
  8330  001D34  6E25               	movwf	sprintf@sp+1,c
  8331  001D36  0EE2               	movlw	low STR_15
  8332  001D38  6E26               	movwf	sprintf@f,c
  8333  001D3A  0E7E               	movlw	high STR_15
  8334  001D3C  6E27               	movwf	sprintf@f+1,c
  8335  001D3E  ECD7  F006         	call	_sprintf	;wreg free
  8336                           
  8337                           ;SystemStatus.c: 71: UART_Write_Text(dest);
  8338  001D42  0E69               	movlw	low SendUartSystemInitMessage@dest
  8339  001D44  6E19               	movwf	UART_Write_Text@text,c
  8340  001D46  0E00               	movlw	high SendUartSystemInitMessage@dest
  8341  001D48  6E1A               	movwf	UART_Write_Text@text+1,c
  8342  001D4A  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8343                           
  8344                           ;SystemStatus.c: 73: sprintf(dest, "FAST LINK SYSTEM \n\r");
  8345  001D4E  0E69               	movlw	low SendUartSystemInitMessage@dest
  8346  001D50  6E24               	movwf	sprintf@sp,c
  8347  001D52  0E00               	movlw	high SendUartSystemInitMessage@dest
  8348  001D54  6E25               	movwf	sprintf@sp+1,c
  8349  001D56  0E6B               	movlw	low STR_16
  8350  001D58  6E26               	movwf	sprintf@f,c
  8351  001D5A  0E7F               	movlw	high STR_16
  8352  001D5C  6E27               	movwf	sprintf@f+1,c
  8353  001D5E  ECD7  F006         	call	_sprintf	;wreg free
  8354                           
  8355                           ;SystemStatus.c: 74: UART_Write_Text(dest);
  8356  001D62  0E69               	movlw	low SendUartSystemInitMessage@dest
  8357  001D64  6E19               	movwf	UART_Write_Text@text,c
  8358  001D66  0E00               	movlw	high SendUartSystemInitMessage@dest
  8359  001D68  6E1A               	movwf	UART_Write_Text@text+1,c
  8360  001D6A  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8361                           
  8362                           ;SystemStatus.c: 76: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  8363  001D6E  0E69               	movlw	low SendUartSystemInitMessage@dest
  8364  001D70  6E24               	movwf	sprintf@sp,c
  8365  001D72  0E00               	movlw	high SendUartSystemInitMessage@dest
  8366  001D74  6E25               	movwf	sprintf@sp+1,c
  8367  001D76  0EA7               	movlw	low STR_17
  8368  001D78  6E26               	movwf	sprintf@f,c
  8369  001D7A  0E7F               	movlw	high STR_17
  8370  001D7C  6E27               	movwf	sprintf@f+1,c
  8371  001D7E  0EF3               	movlw	low STR_18
  8372  001D80  6E28               	movwf	?_sprintf+4,c
  8373  001D82  0E7F               	movlw	high STR_18
  8374  001D84  6E29               	movwf	?_sprintf+5,c
  8375  001D86  ECD7  F006         	call	_sprintf	;wreg free
  8376                           
  8377                           ;SystemStatus.c: 77: UART_Write_Text(dest);
  8378  001D8A  0E69               	movlw	low SendUartSystemInitMessage@dest
  8379  001D8C  6E19               	movwf	UART_Write_Text@text,c
  8380  001D8E  0E00               	movlw	high SendUartSystemInitMessage@dest
  8381  001D90  6E1A               	movwf	UART_Write_Text@text+1,c
  8382  001D92  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8383                           
  8384                           ;SystemStatus.c: 79: sprintf(dest, "Compile date: %s \n\r", "Mar 26 2018");
  8385  001D96  0E69               	movlw	low SendUartSystemInitMessage@dest
  8386  001D98  6E24               	movwf	sprintf@sp,c
  8387  001D9A  0E00               	movlw	high SendUartSystemInitMessage@dest
  8388  001D9C  6E25               	movwf	sprintf@sp+1,c
  8389  001D9E  0E93               	movlw	low STR_19
  8390  001DA0  6E26               	movwf	sprintf@f,c
  8391  001DA2  0E7F               	movlw	high STR_19
  8392  001DA4  6E27               	movwf	sprintf@f+1,c
  8393  001DA6  0EB9               	movlw	low STR_20
  8394  001DA8  6E28               	movwf	?_sprintf+4,c
  8395  001DAA  0E7F               	movlw	high STR_20
  8396  001DAC  6E29               	movwf	?_sprintf+5,c
  8397  001DAE  ECD7  F006         	call	_sprintf	;wreg free
  8398                           
  8399                           ;SystemStatus.c: 80: UART_Write_Text(dest);
  8400  001DB2  0E69               	movlw	low SendUartSystemInitMessage@dest
  8401  001DB4  6E19               	movwf	UART_Write_Text@text,c
  8402  001DB6  0E00               	movlw	high SendUartSystemInitMessage@dest
  8403  001DB8  6E1A               	movwf	UART_Write_Text@text+1,c
  8404  001DBA  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8405                           
  8406                           ;SystemStatus.c: 82: sprintf(dest, "Compile time: %s \n\r", "18:01:44");
  8407  001DBE  0E69               	movlw	low SendUartSystemInitMessage@dest
  8408  001DC0  6E24               	movwf	sprintf@sp,c
  8409  001DC2  0E00               	movlw	high SendUartSystemInitMessage@dest
  8410  001DC4  6E25               	movwf	sprintf@sp+1,c
  8411  001DC6  0E7F               	movlw	low STR_21
  8412  001DC8  6E26               	movwf	sprintf@f,c
  8413  001DCA  0E7F               	movlw	high STR_21
  8414  001DCC  6E27               	movwf	sprintf@f+1,c
  8415  001DCE  0EDA               	movlw	low STR_22
  8416  001DD0  6E28               	movwf	?_sprintf+4,c
  8417  001DD2  0E7F               	movlw	high STR_22
  8418  001DD4  6E29               	movwf	?_sprintf+5,c
  8419  001DD6  ECD7  F006         	call	_sprintf	;wreg free
  8420                           
  8421                           ;SystemStatus.c: 83: UART_Write_Text(dest);
  8422  001DDA  0E69               	movlw	low SendUartSystemInitMessage@dest
  8423  001DDC  6E19               	movwf	UART_Write_Text@text,c
  8424  001DDE  0E00               	movlw	high SendUartSystemInitMessage@dest
  8425  001DE0  6E1A               	movwf	UART_Write_Text@text+1,c
  8426  001DE2  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8427                           
  8428                           ;SystemStatus.c: 85: sprintf(dest, "*************************** \n\r");
  8429  001DE6  0E69               	movlw	low SendUartSystemInitMessage@dest
  8430  001DE8  6E24               	movwf	sprintf@sp,c
  8431  001DEA  0E00               	movlw	high SendUartSystemInitMessage@dest
  8432  001DEC  6E25               	movwf	sprintf@sp+1,c
  8433  001DEE  0EE2               	movlw	low STR_15
  8434  001DF0  6E26               	movwf	sprintf@f,c
  8435  001DF2  0E7E               	movlw	high STR_15
  8436  001DF4  6E27               	movwf	sprintf@f+1,c
  8437  001DF6  ECD7  F006         	call	_sprintf	;wreg free
  8438                           
  8439                           ;SystemStatus.c: 86: UART_Write_Text(dest);
  8440  001DFA  0E69               	movlw	low SendUartSystemInitMessage@dest
  8441  001DFC  6E19               	movwf	UART_Write_Text@text,c
  8442  001DFE  0E00               	movlw	high SendUartSystemInitMessage@dest
  8443  001E00  6E1A               	movwf	UART_Write_Text@text+1,c
  8444  001E02  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8445  001E06  0012               	return		;funcret
  8446  001E08                     __end_of_SendUartSystemInitMessage:
  8447                           	opt stack 0
  8448                           tosu	equ	0xFFF
  8449                           tosh	equ	0xFFE
  8450                           tosl	equ	0xFFD
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           intcon	equ	0xFF2
  8459                           intcon2	equ	0xFF1
  8460                           postinc0	equ	0xFEE
  8461                           wreg	equ	0xFE8
  8462                           indf1	equ	0xFE7
  8463                           postdec1	equ	0xFE5
  8464                           fsr1h	equ	0xFE2
  8465                           fsr1l	equ	0xFE1
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473 ;; *************** function _SampleVgMonChannel *****************
  8474 ;; Defined at:
  8475 ;;		line 121 in file "AdcApp.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  adcRes          2   94[BANK0 ] unsigned int 
  8480 ;;  _adcResult      2   92[BANK0 ] unsigned int 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  1    wreg      void 
  8483 ;; Registers used:
  8484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8490 ;;      Params:         0       0       0       0       0       0       0
  8491 ;;      Locals:         0       7       0       0       0       0       0
  8492 ;;      Temps:          0       0       0       0       0       0       0
  8493 ;;      Totals:         0       7       0       0       0       0       0
  8494 ;;Total ram usage:        7 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    8
  8497 ;; This function calls:
  8498 ;;		_ADC_GetConversion
  8499 ;;		___ftdiv
  8500 ;;		___ftmul
  8501 ;;		___fttol
  8502 ;;		___lwtoft
  8503 ;;		_pow
  8504 ;; This function is called by:
  8505 ;;		_main
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text33
  8510  00206A                     __ptext33:
  8511                           	opt stack 0
  8512  00206A                     _SampleVgMonChannel:
  8513                           	opt stack 22
  8514                           
  8515                           ;AdcApp.c: 124: uint16_t adcRes = 0x0;
  8516                           
  8517                           ;incstack = 0
  8518  00206A  0E00               	movlw	0
  8519  00206C  0100               	movlb	0	; () banked
  8520  00206E  6FBF               	movwf	(SampleVgMonChannel@adcRes+1)& (0+255),b
  8521  002070  0E00               	movlw	0
  8522  002072  6FBE               	movwf	SampleVgMonChannel@adcRes& (0+255),b
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;AdcApp.c: 126: adc_result_t _adcResult = ADC_GetConversion(channelArr[0x3]);
  8526  002074  0E04               	movlw	low (_channelArr+3)
  8527  002076  6EF6               	movwf	tblptrl,c
  8528  002078  0E7A               	movlw	high (_channelArr+3)
  8529  00207A  6EF7               	movwf	tblptrh,c
  8530  00207C                     	if	0	;tblptru may be non-zero
  8531  00207C                     	endif
  8532  00207C                     	if	0	;tblptru may be non-zero
  8533  00207C                     	endif
  8534  00207C  0008               	tblrd		*
  8535  00207E  50F5               	movf	tablat,w,c
  8536  002080  EC9A  F017         	call	_ADC_GetConversion
  8537  002084  C018  F0BC         	movff	?_ADC_GetConversion,SampleVgMonChannel@_adcResult
  8538  002088  C019  F0BD         	movff	?_ADC_GetConversion+1,SampleVgMonChannel@_adcResult+1
  8539                           
  8540                           ;AdcApp.c: 127: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8541  00208C  0E00               	movlw	0
  8542  00208E  0100               	movlb	0	; () banked
  8543  002090  6FAB               	movwf	pow@y& (0+255),b
  8544  002092  0E20               	movlw	32
  8545  002094  6FAC               	movwf	(pow@y+1)& (0+255),b
  8546  002096  0E41               	movlw	65
  8547  002098  6FAD               	movwf	(pow@y+2)& (0+255),b
  8548  00209A  0E00               	movlw	0
  8549  00209C  6FA8               	movwf	pow@x& (0+255),b
  8550  00209E  0E00               	movlw	0
  8551  0020A0  6FA9               	movwf	(pow@x+1)& (0+255),b
  8552  0020A2  0E40               	movlw	64
  8553  0020A4  6FAA               	movwf	(pow@x+2)& (0+255),b
  8554  0020A6  EC4B  F009         	call	_pow	;wreg free
  8555  0020AA  C0A8  F0B9         	movff	?_pow,_SampleVgMonChannel$3065
  8556  0020AE  C0A9  F0BA         	movff	?_pow+1,_SampleVgMonChannel$3065+1
  8557  0020B2  C0AA  F0BB         	movff	?_pow+2,_SampleVgMonChannel$3065+2
  8558                           
  8559                           ;AdcApp.c: 127: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8560  0020B6  0EC0               	movlw	192
  8561  0020B8  0100               	movlb	0	; () banked
  8562  0020BA  6F63               	movwf	___ftmul@f2& (0+255),b
  8563  0020BC  0E50               	movlw	80
  8564  0020BE  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8565  0020C0  0E45               	movlw	69
  8566  0020C2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8567  0020C4  C0B9  F072         	movff	_SampleVgMonChannel$3065,___ftdiv@f2
  8568  0020C8  C0BA  F073         	movff	_SampleVgMonChannel$3065+1,___ftdiv@f2+1
  8569  0020CC  C0BB  F074         	movff	_SampleVgMonChannel$3065+2,___ftdiv@f2+2
  8570  0020D0  C0BC  F020         	movff	SampleVgMonChannel@_adcResult,___lwtoft@c
  8571  0020D4  C0BD  F021         	movff	SampleVgMonChannel@_adcResult+1,___lwtoft@c+1
  8572  0020D8  EC26  F018         	call	___lwtoft	;wreg free
  8573  0020DC  C020  F06F         	movff	?___lwtoft,___ftdiv@f1
  8574  0020E0  C021  F070         	movff	?___lwtoft+1,___ftdiv@f1+1
  8575  0020E4  C022  F071         	movff	?___lwtoft+2,___ftdiv@f1+2
  8576  0020E8  EC41  F00D         	call	___ftdiv	;wreg free
  8577  0020EC  C06F  F060         	movff	?___ftdiv,___ftmul@f1
  8578  0020F0  C070  F061         	movff	?___ftdiv+1,___ftmul@f1+1
  8579  0020F4  C071  F062         	movff	?___ftdiv+2,___ftmul@f1+2
  8580  0020F8  ECC6  F00C         	call	___ftmul	;wreg free
  8581  0020FC  C060  F07E         	movff	?___ftmul,___fttol@f1
  8582  002100  C061  F07F         	movff	?___ftmul+1,___fttol@f1+1
  8583  002104  C062  F080         	movff	?___ftmul+2,___fttol@f1+2
  8584  002108  EC4A  F00C         	call	___fttol	;wreg free
  8585  00210C  C07E  F0BE         	movff	?___fttol,SampleVgMonChannel@adcRes
  8586  002110  C07F  F0BF         	movff	?___fttol+1,SampleVgMonChannel@adcRes+1
  8587                           
  8588                           ;AdcApp.c: 129: if(adcRes > (3400) / 2)
  8589  002114  0EA5               	movlw	165
  8590  002116  0100               	movlb	0	; () banked
  8591  002118  5DBE               	subwf	SampleVgMonChannel@adcRes& (0+255),w,b
  8592  00211A  0E06               	movlw	6
  8593  00211C  59BF               	subwfb	(SampleVgMonChannel@adcRes+1)& (0+255),w,b
  8594  00211E  A0D8               	btfss	status,0,c
  8595  002120  D002               	goto	l142
  8596                           
  8597                           ; BSR set to: 0
  8598                           
  8599                           ;AdcApp.c: 130: {
  8600                           ;AdcApp.c: 131: do { LATBbits.LATB0 = 1; } while(0);
  8601  002122  808A               	bsf	3978,0,c	;volatile
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;AdcApp.c: 133: }
  8605  002124  0012               	return	
  8606  002126                     l142:
  8607                           
  8608                           ; BSR set to: 0
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;AdcApp.c: 134: else
  8612                           ;AdcApp.c: 135: {
  8613                           ;AdcApp.c: 136: do { LATBbits.LATB0 = 0; } while(0);
  8614  002126  908A               	bcf	3978,0,c	;volatile
  8615                           
  8616                           ; BSR set to: 0
  8617  002128  0012               	return	
  8618  00212A                     __end_of_SampleVgMonChannel:
  8619                           	opt stack 0
  8620                           tosu	equ	0xFFF
  8621                           tosh	equ	0xFFE
  8622                           tosl	equ	0xFFD
  8623                           pclath	equ	0xFFA
  8624                           tblptru	equ	0xFF8
  8625                           tblptrh	equ	0xFF7
  8626                           tblptrl	equ	0xFF6
  8627                           tablat	equ	0xFF5
  8628                           prodh	equ	0xFF4
  8629                           prodl	equ	0xFF3
  8630                           intcon	equ	0xFF2
  8631                           intcon2	equ	0xFF1
  8632                           postinc0	equ	0xFEE
  8633                           wreg	equ	0xFE8
  8634                           indf1	equ	0xFE7
  8635                           postdec1	equ	0xFE5
  8636                           fsr1h	equ	0xFE2
  8637                           fsr1l	equ	0xFE1
  8638                           indf2	equ	0xFDF
  8639                           postinc2	equ	0xFDE
  8640                           postdec2	equ	0xFDD
  8641                           fsr2h	equ	0xFDA
  8642                           fsr2l	equ	0xFD9
  8643                           status	equ	0xFD8
  8644                           
  8645 ;; *************** function _SampleSingleChannel *****************
  8646 ;; Defined at:
  8647 ;;		line 101 in file "AdcApp.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  _adcResult      2   53[BANK1 ] unsigned int 
  8652 ;;  dest           50    0[BANK1 ] unsigned char [50]
  8653 ;;  adcRes          2   55[BANK1 ] unsigned int 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      unsigned char 
  8656 ;; Registers used:
  8657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8663 ;;      Params:         0       0       0       0       0       0       0
  8664 ;;      Locals:         0       0      57       0       0       0       0
  8665 ;;      Temps:          0       2       0       0       0       0       0
  8666 ;;      Totals:         0       2      57       0       0       0       0
  8667 ;;Total ram usage:       59 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    8
  8670 ;; This function calls:
  8671 ;;		_ADC_GetConversion
  8672 ;;		_UART_Write_Text
  8673 ;;		___ftdiv
  8674 ;;		___ftmul
  8675 ;;		___fttol
  8676 ;;		___lwtoft
  8677 ;;		_pow
  8678 ;;		_sprintf
  8679 ;; This function is called by:
  8680 ;;		_main
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text34
  8685  00177C                     __ptext34:
  8686                           	opt stack 0
  8687  00177C                     _SampleSingleChannel:
  8688                           	opt stack 22
  8689                           
  8690                           ;AdcApp.c: 103: char dest[50];
  8691                           ;AdcApp.c: 104: uint16_t adcRes = 0x0;
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;incstack = 0
  8695  00177C  0E00               	movlw	0
  8696  00177E  0101               	movlb	1	; () banked
  8697  001780  6FD3               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  8698  001782  0E00               	movlw	0
  8699  001784  6FD2               	movwf	SampleSingleChannel@adcRes& (0+255),b
  8700                           
  8701                           ; BSR set to: 1
  8702                           ;AdcApp.c: 105: if(numSamples--)
  8703  001786  0100               	movlb	0	; () banked
  8704  001788  07F2               	decf	_numSamples& (0+255),f,b
  8705  00178A  A0D8               	btfss	status,0,c
  8706  00178C  07F3               	decf	(_numSamples+1)& (0+255),f,b
  8707  00178E  29F2               	incf	_numSamples& (0+255),w,b
  8708  001790  E103               	bnz	u8250
  8709  001792  29F3               	incf	(_numSamples+1)& (0+255),w,b
  8710  001794  B4D8               	btfsc	status,2,c
  8711  001796  D074               	goto	l137
  8712  001798                     u8250:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;AdcApp.c: 106: {
  8716                           ;AdcApp.c: 107: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  8717  001798  0E01               	movlw	low _channelArr
  8718  00179A  25F0               	addwf	_channelNum& (0+255),w,b
  8719  00179C  6EF6               	movwf	tblptrl,c
  8720  00179E  0E7A               	movlw	high _channelArr
  8721  0017A0  21F1               	addwfc	(_channelNum+1)& (0+255),w,b
  8722  0017A2  6EF7               	movwf	tblptrh,c
  8723  0017A4                     	if	0	;There are less than 3 active tblptr bytes
  8724  0017A4                     	endif
  8725  0017A4  0008               	tblrd		*
  8726  0017A6  50F5               	movf	tablat,w,c
  8727  0017A8  EC9A  F017         	call	_ADC_GetConversion
  8728  0017AC  C018  F1D0         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  8729  0017B0  C019  F1D1         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  8730                           
  8731                           ;AdcApp.c: 108: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8732  0017B4  0E00               	movlw	0
  8733  0017B6  0100               	movlb	0	; () banked
  8734  0017B8  6FAB               	movwf	pow@y& (0+255),b
  8735  0017BA  0E20               	movlw	32
  8736  0017BC  6FAC               	movwf	(pow@y+1)& (0+255),b
  8737  0017BE  0E41               	movlw	65
  8738  0017C0  6FAD               	movwf	(pow@y+2)& (0+255),b
  8739  0017C2  0E00               	movlw	0
  8740  0017C4  6FA8               	movwf	pow@x& (0+255),b
  8741  0017C6  0E00               	movlw	0
  8742  0017C8  6FA9               	movwf	(pow@x+1)& (0+255),b
  8743  0017CA  0E40               	movlw	64
  8744  0017CC  6FAA               	movwf	(pow@x+2)& (0+255),b
  8745  0017CE  EC4B  F009         	call	_pow	;wreg free
  8746  0017D2  C0A8  F1CD         	movff	?_pow,_SampleSingleChannel$3064
  8747  0017D6  C0A9  F1CE         	movff	?_pow+1,_SampleSingleChannel$3064+1
  8748  0017DA  C0AA  F1CF         	movff	?_pow+2,_SampleSingleChannel$3064+2
  8749                           
  8750                           ;AdcApp.c: 108: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8751  0017DE  0EC0               	movlw	192
  8752  0017E0  0100               	movlb	0	; () banked
  8753  0017E2  6F63               	movwf	___ftmul@f2& (0+255),b
  8754  0017E4  0E50               	movlw	80
  8755  0017E6  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  8756  0017E8  0E45               	movlw	69
  8757  0017EA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  8758  0017EC  C1CD  F072         	movff	_SampleSingleChannel$3064,___ftdiv@f2
  8759  0017F0  C1CE  F073         	movff	_SampleSingleChannel$3064+1,___ftdiv@f2+1
  8760  0017F4  C1CF  F074         	movff	_SampleSingleChannel$3064+2,___ftdiv@f2+2
  8761  0017F8  C1D0  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  8762  0017FC  C1D1  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  8763  001800  EC26  F018         	call	___lwtoft	;wreg free
  8764  001804  C020  F06F         	movff	?___lwtoft,___ftdiv@f1
  8765  001808  C021  F070         	movff	?___lwtoft+1,___ftdiv@f1+1
  8766  00180C  C022  F071         	movff	?___lwtoft+2,___ftdiv@f1+2
  8767  001810  EC41  F00D         	call	___ftdiv	;wreg free
  8768  001814  C06F  F060         	movff	?___ftdiv,___ftmul@f1
  8769  001818  C070  F061         	movff	?___ftdiv+1,___ftmul@f1+1
  8770  00181C  C071  F062         	movff	?___ftdiv+2,___ftmul@f1+2
  8771  001820  ECC6  F00C         	call	___ftmul	;wreg free
  8772  001824  C060  F07E         	movff	?___ftmul,___fttol@f1
  8773  001828  C061  F07F         	movff	?___ftmul+1,___fttol@f1+1
  8774  00182C  C062  F080         	movff	?___ftmul+2,___fttol@f1+2
  8775  001830  EC4A  F00C         	call	___fttol	;wreg free
  8776  001834  C07E  F1D2         	movff	?___fttol,SampleSingleChannel@adcRes
  8777  001838  C07F  F1D3         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  8778                           
  8779                           ;AdcApp.c: 110: sprintf(dest, "%d \t", adcRes);
  8780  00183C  0E9B               	movlw	low SampleSingleChannel@dest
  8781  00183E  6E24               	movwf	sprintf@sp,c
  8782  001840  0E01               	movlw	high SampleSingleChannel@dest
  8783  001842  6E25               	movwf	sprintf@sp+1,c
  8784  001844  0EF9               	movlw	low STR_9
  8785  001846  6E26               	movwf	sprintf@f,c
  8786  001848  0E7F               	movlw	high STR_9
  8787  00184A  6E27               	movwf	sprintf@f+1,c
  8788  00184C  C1D2  F028         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  8789  001850  C1D3  F029         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  8790  001854  ECD7  F006         	call	_sprintf	;wreg free
  8791                           
  8792                           ;AdcApp.c: 111: UART_Write_Text(dest);
  8793  001858  0E9B               	movlw	low SampleSingleChannel@dest
  8794  00185A  6E19               	movwf	UART_Write_Text@text,c
  8795  00185C  0E01               	movlw	high SampleSingleChannel@dest
  8796  00185E  6E1A               	movwf	UART_Write_Text@text+1,c
  8797  001860  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8798                           
  8799                           ;AdcApp.c: 112: _delay((unsigned long)((1000)*(8000000/4000.0)));
  8800  001864  0E0B               	movlw	11
  8801  001866  0100               	movlb	0	; () banked
  8802  001868  6FBA               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  8803  00186A  0E26               	movlw	38
  8804  00186C  6FB9               	movwf	??_SampleSingleChannel& (0+255),b
  8805  00186E  0E5D               	movlw	93
  8806  001870                     u8827:
  8807  001870  2EE8               	decfsz	wreg,f,c
  8808  001872  D7FE               	bra	u8827
  8809  001874  2FB9               	decfsz	??_SampleSingleChannel& (0+255),f,b
  8810  001876  D7FC               	bra	u8827
  8811  001878  2FBA               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  8812  00187A  D7FA               	bra	u8827
  8813  00187C  D000               	nop2	
  8814                           
  8815                           ;AdcApp.c: 113: }
  8816  00187E  0012               	return	
  8817  001880                     l137:
  8818                           
  8819                           ;AdcApp.c: 114: else
  8820                           ;AdcApp.c: 115: {
  8821                           ;AdcApp.c: 116: needToSample = 0;
  8822  001880  0E00               	movlw	0
  8823  001882  0101               	movlb	1	; () banked
  8824  001884  6F2E               	movwf	_needToSample& (0+255),b	;volatile
  8825                           
  8826                           ; BSR set to: 1
  8827                           ;AdcApp.c: 117: UART_Write_Text("\n\r OK \n\r");
  8828  001886  0EE3               	movlw	low STR_10
  8829  001888  6E19               	movwf	UART_Write_Text@text,c
  8830  00188A  0E7F               	movlw	high STR_10
  8831  00188C  6E1A               	movwf	UART_Write_Text@text+1,c
  8832  00188E  ECF9  F012         	call	_UART_Write_Text	;wreg free
  8833  001892  0012               	return	
  8834  001894                     __end_of_SampleSingleChannel:
  8835                           	opt stack 0
  8836                           tosu	equ	0xFFF
  8837                           tosh	equ	0xFFE
  8838                           tosl	equ	0xFFD
  8839                           pclath	equ	0xFFA
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           indf1	equ	0xFE7
  8851                           postdec1	equ	0xFE5
  8852                           fsr1h	equ	0xFE2
  8853                           fsr1l	equ	0xFE1
  8854                           indf2	equ	0xFDF
  8855                           postinc2	equ	0xFDE
  8856                           postdec2	equ	0xFDD
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function _sprintf *****************
  8862 ;; Defined at:
  8863 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  sp              2   35[COMRAM] PTR unsigned char 
  8866 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50
      +), 
  8867 ;;  f               2   37[COMRAM] PTR const unsigned char 
  8868 ;;		 -> STR_43(73), STR_42(37), STR_41(38), STR_40(86), 
  8869 ;;		 -> STR_39(53), STR_38(46), STR_37(29), STR_36(101), 
  8870 ;;		 -> STR_35(86), STR_34(61), STR_33(62), STR_32(45), 
  8871 ;;		 -> STR_31(74), STR_30(25), STR_29(79), STR_28(75), 
  8872 ;;		 -> STR_27(46), STR_26(61), STR_25(66), STR_24(23), 
  8873 ;;		 -> STR_23(31), STR_21(20), STR_19(20), STR_17(18), 
  8874 ;;		 -> STR_16(20), STR_15(31), STR_11(11), STR_9(5), 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  tmpval          4    0        struct .
  8877 ;;  val             2    6[BANK0 ] unsigned int 
  8878 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  8879 ;;		 -> STR_44(7), STR_22(9), STR_20(12), STR_18(6), 
  8880 ;;  ap              2    2[BANK0 ] PTR void [1]
  8881 ;;		 -> ?_sprintf(2), 
  8882 ;;  len             2    0        unsigned int 
  8883 ;;  c               1    8[BANK0 ] char 
  8884 ;;  prec            1    1[BANK0 ] char 
  8885 ;;  flag            1    0[BANK0 ] unsigned char 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  2   35[COMRAM] int 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8895 ;;      Params:         6       0       0       0       0       0       0
  8896 ;;      Locals:         0       9       0       0       0       0       0
  8897 ;;      Temps:          1       0       0       0       0       0       0
  8898 ;;      Totals:         7       9       0       0       0       0       0
  8899 ;;Total ram usage:       16 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    4
  8902 ;; This function calls:
  8903 ;;		___lwdiv
  8904 ;;		___lwmod
  8905 ;; This function is called by:
  8906 ;;		_SampleSingleChannel
  8907 ;;		_readUartByte
  8908 ;;		_SendUartSystemInitMessage
  8909 ;;		_PrintHelpScreen
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           	psect	text35
  8914  000DAE                     __ptext35:
  8915                           	opt stack 0
  8916  000DAE                     _sprintf:
  8917                           	opt stack 25
  8918                           
  8919                           ;doprnt.c: 494: va_list ap;
  8920                           ;doprnt.c: 499: signed char c;
  8921                           ;doprnt.c: 506: signed char prec;
  8922                           ;doprnt.c: 508: unsigned char flag;
  8923                           ;doprnt.c: 523: union {
  8924                           ;doprnt.c: 524: unsigned long vd;
  8925                           ;doprnt.c: 525: double integ;
  8926                           ;doprnt.c: 526: } tmpval;
  8927                           ;doprnt.c: 528: unsigned int val;
  8928                           ;doprnt.c: 529: unsigned len;
  8929                           ;doprnt.c: 530: const char * cp;
  8930                           ;doprnt.c: 533: *ap = __va_start();
  8931                           
  8932                           ;incstack = 0
  8933  000DAE  0E28               	movlw	low (?_sprintf+4)
  8934  000DB0  0100               	movlb	0	; () banked
  8935  000DB2  6F62               	movwf	sprintf@ap& (0+255),b
  8936  000DB4  0E00               	movlw	high (?_sprintf+4)
  8937  000DB6  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  8938                           
  8939                           ;doprnt.c: 536: while(c = *f++) {
  8940  000DB8  D0C0               	goto	u7890
  8941  000DBA                     
  8942                           ; BSR set to: 0
  8943                           ;doprnt.c: 538: if(c != '%')
  8944                           
  8945                           ; BSR set to: 0
  8946  000DBA  0E25               	movlw	37
  8947  000DBC  1968               	xorwf	sprintf@c& (0+255),w,b
  8948  000DBE  B4D8               	btfsc	status,2,c
  8949  000DC0  D009               	goto	l1424
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;doprnt.c: 540: {
  8953                           ;doprnt.c: 541: ((*sp++ = (c)));
  8954  000DC2  C024  FFD9         	movff	sprintf@sp,fsr2l
  8955  000DC6  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8956  000DCA  C068  FFDF         	movff	sprintf@c,indf2
  8957                           
  8958                           ; BSR set to: 0
  8959  000DCE  4A24               	infsnz	sprintf@sp,f,c
  8960  000DD0  2A25               	incf	sprintf@sp+1,f,c
  8961                           
  8962                           ;doprnt.c: 542: continue;
  8963  000DD2  D0B3               	goto	u7890
  8964  000DD4                     l1424:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;doprnt.c: 543: }
  8968                           ;doprnt.c: 548: flag = 0;
  8969                           
  8970                           ; BSR set to: 0
  8971  000DD4  0E00               	movlw	0
  8972  000DD6  6F60               	movwf	sprintf@flag& (0+255),b
  8973                           
  8974                           ;doprnt.c: 635: switch(c = *f++) {
  8975  000DD8  D02E               	goto	l1425
  8976  000DDA                     
  8977                           ; BSR set to: 0
  8978                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8979                           
  8980                           ; BSR set to: 0
  8981  000DDA  C062  FFD9         	movff	sprintf@ap,fsr2l
  8982  000DDE  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8983  000DE2  CFDE F064          	movff	postinc2,sprintf@cp
  8984  000DE6  CFDD F065          	movff	postdec2,sprintf@cp+1
  8985                           
  8986                           ; BSR set to: 0
  8987  000DEA  0E02               	movlw	2
  8988  000DEC  2762               	addwf	sprintf@ap& (0+255),f,b
  8989  000DEE  0E00               	movlw	0
  8990  000DF0  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;doprnt.c: 740: if(!cp)
  8994  000DF2  5164               	movf	sprintf@cp& (0+255),w,b
  8995  000DF4  1165               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8996  000DF6  A4D8               	btfss	status,2,c
  8997  000DF8  D014               	goto	l1433
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;doprnt.c: 741: cp = "(null)";
  9001  000DFA  0EEC               	movlw	low STR_44
  9002  000DFC  6F64               	movwf	sprintf@cp& (0+255),b
  9003  000DFE  0E7F               	movlw	high STR_44
  9004  000E00  6F65               	movwf	(sprintf@cp+1)& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;doprnt.c: 777: while(*cp)
  9008  000E02  D00F               	goto	l1433
  9009  000E04                     
  9010                           ; BSR set to: 0
  9011                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  9012                           
  9013                           ; BSR set to: 0
  9014  000E04  C064  FFF6         	movff	sprintf@cp,tblptrl
  9015  000E08  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  9016  000E0C                     	if	0	;tblptru may be non-zero
  9017  000E0C                     	endif
  9018  000E0C                     	if	0	;tblptru may be non-zero
  9019  000E0C                     	endif
  9020  000E0C  C024  FFD9         	movff	sprintf@sp,fsr2l
  9021  000E10  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9022  000E14  0008               	tblrd		*
  9023  000E16  CFF5 FFDF          	movff	tablat,indf2
  9024                           
  9025                           ; BSR set to: 0
  9026  000E1A  4B64               	infsnz	sprintf@cp& (0+255),f,b
  9027  000E1C  2B65               	incf	(sprintf@cp+1)& (0+255),f,b
  9028                           
  9029                           ; BSR set to: 0
  9030  000E1E  4A24               	infsnz	sprintf@sp,f,c
  9031  000E20  2A25               	incf	sprintf@sp+1,f,c
  9032  000E22                     l1433:
  9033                           
  9034                           ; BSR set to: 0
  9035                           
  9036                           ; BSR set to: 0
  9037  000E22  C064  FFF6         	movff	sprintf@cp,tblptrl
  9038  000E26  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  9039  000E2A                     	if	0	;tblptru may be non-zero
  9040  000E2A                     	endif
  9041  000E2A                     	if	0	;tblptru may be non-zero
  9042  000E2A                     	endif
  9043  000E2A  0008               	tblrd		*
  9044  000E2C  50F5               	movf	tablat,w,c
  9045  000E2E  0900               	iorlw	0
  9046  000E30  B4D8               	btfsc	status,2,c
  9047  000E32  D083               	goto	u7890
  9048  000E34  D7E7               	goto	l1434
  9049  000E36                     l1425:
  9050                           
  9051                           ; BSR set to: 0
  9052                           
  9053                           ; BSR set to: 0
  9054  000E36  C026  FFF6         	movff	sprintf@f,tblptrl
  9055  000E3A  C027  FFF7         	movff	sprintf@f+1,tblptrh
  9056  000E3E  4A26               	infsnz	sprintf@f,f,c
  9057  000E40  2A27               	incf	sprintf@f+1,f,c
  9058  000E42                     	if	0	;tblptru may be non-zero
  9059  000E42                     	endif
  9060  000E42                     	if	0	;tblptru may be non-zero
  9061  000E42                     	endif
  9062  000E42  0008               	tblrd		*
  9063  000E44  CFF5 F068          	movff	tablat,sprintf@c
  9064  000E48  5168               	movf	sprintf@c& (0+255),w,b
  9065                           
  9066                           ; Switch size 1, requested type "space"
  9067                           ; Number of cases is 4, Range of values is 0 to 115
  9068                           ; switch strategies available:
  9069                           ; Name         Instructions Cycles
  9070                           ; simple_byte           13     7 (average)
  9071                           ;	Chosen strategy is simple_byte
  9072  000E4A  0A00               	xorlw	0	; case 0
  9073  000E4C  B4D8               	btfsc	status,2,c
  9074  000E4E  D081               	goto	u7900
  9075  000E50  0A64               	xorlw	100	; case 100
  9076  000E52  B4D8               	btfsc	status,2,c
  9077  000E54  D007               	goto	l1430
  9078  000E56  0A0D               	xorlw	13	; case 105
  9079  000E58  B4D8               	btfsc	status,2,c
  9080  000E5A  D004               	goto	l1430
  9081  000E5C  0A1A               	xorlw	26	; case 115
  9082  000E5E  B4D8               	btfsc	status,2,c
  9083  000E60  D7BC               	goto	l1431
  9084  000E62  D06B               	goto	u7890
  9085  000E64                     l1430:
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;doprnt.c: 1253: {
  9089                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9090                           
  9091                           ; BSR set to: 0
  9092  000E64  C062  FFD9         	movff	sprintf@ap,fsr2l
  9093  000E68  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  9094  000E6C  CFDE F066          	movff	postinc2,sprintf@val
  9095  000E70  CFDD F067          	movff	postdec2,sprintf@val+1
  9096                           
  9097                           ; BSR set to: 0
  9098  000E74  0E02               	movlw	2
  9099  000E76  2762               	addwf	sprintf@ap& (0+255),f,b
  9100  000E78  0E00               	movlw	0
  9101  000E7A  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9102                           
  9103                           ; BSR set to: 0
  9104                           ;doprnt.c: 1261: if((int)val < 0) {
  9105  000E7C  AF67               	btfss	(sprintf@val+1)& (0+255),7,b
  9106  000E7E  D006               	goto	l1437
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;doprnt.c: 1262: flag |= 0x03;
  9110  000E80  0E03               	movlw	3
  9111  000E82  1360               	iorwf	sprintf@flag& (0+255),f,b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;doprnt.c: 1263: val = -val;
  9115  000E84  6D66               	negf	sprintf@val& (0+255),b
  9116  000E86  1F67               	comf	(sprintf@val+1)& (0+255),f,b
  9117  000E88  B0D8               	btfsc	status,0,c
  9118  000E8A  2B67               	incf	(sprintf@val+1)& (0+255),f,b
  9119  000E8C                     l1437:
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;doprnt.c: 1264: }
  9123                           ;doprnt.c: 1266: }
  9124                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9125                           
  9126                           ; BSR set to: 0
  9127  000E8C  0E01               	movlw	1
  9128  000E8E  6F68               	movwf	sprintf@c& (0+255),b
  9129  000E90                     l7573:
  9130                           
  9131                           ; BSR set to: 0
  9132  000E90  0E05               	movlw	5
  9133  000E92  1968               	xorwf	sprintf@c& (0+255),w,b
  9134  000E94  B4D8               	btfsc	status,2,c
  9135  000E96  D012               	goto	u7870
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;doprnt.c: 1306: if(val < dpowers[c])
  9139                           
  9140                           ; BSR set to: 0
  9141                           
  9142                           ; BSR set to: 0
  9143  000E98  5168               	movf	sprintf@c& (0+255),w,b
  9144  000E9A  0D02               	mullw	2
  9145  000E9C  0EEB               	movlw	low _dpowers
  9146  000E9E  24F3               	addwf	prodl,w,c
  9147  000EA0  6EF6               	movwf	tblptrl,c
  9148  000EA2  0E79               	movlw	high _dpowers
  9149  000EA4  20F4               	addwfc	prodh,w,c
  9150  000EA6  6EF7               	movwf	tblptrh,c
  9151  000EA8                     	if	0	;There are less than 3 active tblptr bytes
  9152  000EA8                     	endif
  9153  000EA8  0009               	tblrd		*+
  9154  000EAA  50F5               	movf	tablat,w,c
  9155  000EAC  5D66               	subwf	sprintf@val& (0+255),w,b
  9156  000EAE  0009               	tblrd		*+
  9157  000EB0  50F5               	movf	tablat,w,c
  9158  000EB2  5967               	subwfb	(sprintf@val+1)& (0+255),w,b
  9159  000EB4  A0D8               	btfss	status,0,c
  9160  000EB6  D002               	goto	u7870
  9161                           
  9162                           ; BSR set to: 0
  9163                           
  9164                           ; BSR set to: 0
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;doprnt.c: 1307: break;
  9168  000EB8  2B68               	incf	sprintf@c& (0+255),f,b
  9169  000EBA  D7EA               	goto	l7573
  9170  000EBC                     u7870:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;doprnt.c: 1422: {
  9174                           ;doprnt.c: 1438: if(flag & 0x03)
  9175                           
  9176                           ; BSR set to: 0
  9177  000EBC  C060  F02A         	movff	sprintf@flag,??_sprintf
  9178  000EC0  0E03               	movlw	3
  9179  000EC2  162A               	andwf	??_sprintf,f,c
  9180  000EC4  B4D8               	btfsc	status,2,c
  9181  000EC6  D008               	goto	l1441
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9185  000EC8  C024  FFD9         	movff	sprintf@sp,fsr2l
  9186  000ECC  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9187  000ED0  0E2D               	movlw	45
  9188  000ED2  6EDF               	movwf	indf2,c
  9189                           
  9190                           ; BSR set to: 0
  9191  000ED4  4A24               	infsnz	sprintf@sp,f,c
  9192  000ED6  2A25               	incf	sprintf@sp+1,f,c
  9193  000ED8                     l1441:
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;doprnt.c: 1469: }
  9197                           ;doprnt.c: 1472: prec = c;
  9198                           
  9199                           ; BSR set to: 0
  9200  000ED8  C068  F061         	movff	sprintf@c,sprintf@prec
  9201                           
  9202                           ;doprnt.c: 1474: while(prec--) {
  9203  000EDC  D02A               	goto	l1442
  9204  000EDE                     
  9205                           ; BSR set to: 0
  9206                           ;doprnt.c: 1478: {
  9207                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9208                           
  9209                           ; BSR set to: 0
  9210  000EDE  5161               	movf	sprintf@prec& (0+255),w,b
  9211  000EE0  0D02               	mullw	2
  9212  000EE2  0EEB               	movlw	low _dpowers
  9213  000EE4  24F3               	addwf	prodl,w,c
  9214  000EE6  6EF6               	movwf	tblptrl,c
  9215  000EE8  0E79               	movlw	high _dpowers
  9216  000EEA  20F4               	addwfc	prodh,w,c
  9217  000EEC  6EF7               	movwf	tblptrh,c
  9218  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  9219  000EEE                     	endif
  9220  000EEE  0009               	tblrd		*+
  9221  000EF0  CFF5 F01A          	movff	tablat,___lwdiv@divisor
  9222  000EF4  000A               	tblrd		*-
  9223  000EF6  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
  9224  000EFA  C066  F018         	movff	sprintf@val,___lwdiv@dividend
  9225  000EFE  C067  F019         	movff	sprintf@val+1,___lwdiv@dividend+1
  9226  000F02  EC2A  F015         	call	___lwdiv	;wreg free
  9227  000F06  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
  9228  000F0A  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
  9229  000F0E  0E00               	movlw	0
  9230  000F10  6E22               	movwf	___lwmod@divisor+1,c
  9231  000F12  0E0A               	movlw	10
  9232  000F14  6E21               	movwf	___lwmod@divisor,c
  9233  000F16  EC02  F016         	call	___lwmod	;wreg free
  9234  000F1A  501F               	movf	?___lwmod,w,c
  9235  000F1C  0F30               	addlw	48
  9236  000F1E  0100               	movlb	0	; () banked
  9237  000F20  6F68               	movwf	sprintf@c& (0+255),b
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;doprnt.c: 1523: }
  9241                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9242  000F22  C024  FFD9         	movff	sprintf@sp,fsr2l
  9243  000F26  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9244  000F2A  C068  FFDF         	movff	sprintf@c,indf2
  9245                           
  9246                           ; BSR set to: 0
  9247  000F2E  4A24               	infsnz	sprintf@sp,f,c
  9248  000F30  2A25               	incf	sprintf@sp+1,f,c
  9249  000F32                     l1442:
  9250                           
  9251                           ; BSR set to: 0
  9252                           
  9253                           ; BSR set to: 0
  9254  000F32  0761               	decf	sprintf@prec& (0+255),f,b
  9255  000F34  2961               	incf	sprintf@prec& (0+255),w,b
  9256  000F36  A4D8               	btfss	status,2,c
  9257  000F38  D7D2               	goto	l1443
  9258  000F3A                     u7890:
  9259                           
  9260                           ; BSR set to: 0
  9261                           
  9262                           ; BSR set to: 0
  9263                           
  9264                           ; BSR set to: 0
  9265  000F3A  C026  FFF6         	movff	sprintf@f,tblptrl
  9266  000F3E  C027  FFF7         	movff	sprintf@f+1,tblptrh
  9267  000F42  4A26               	infsnz	sprintf@f,f,c
  9268  000F44  2A27               	incf	sprintf@f+1,f,c
  9269  000F46                     	if	0	;tblptru may be non-zero
  9270  000F46                     	endif
  9271  000F46                     	if	0	;tblptru may be non-zero
  9272  000F46                     	endif
  9273  000F46  0008               	tblrd		*
  9274  000F48  CFF5 F068          	movff	tablat,sprintf@c
  9275  000F4C  5168               	movf	sprintf@c& (0+255),w,b
  9276  000F4E  A4D8               	btfss	status,2,c
  9277  000F50  D734               	goto	l1423
  9278  000F52                     u7900:
  9279                           
  9280                           ; BSR set to: 0
  9281                           ;doprnt.c: 1538: *sp = 0;
  9282                           
  9283                           ; BSR set to: 0
  9284                           
  9285                           ;doprnt.c: 1525: }
  9286                           ;doprnt.c: 1533: }
  9287                           ;doprnt.c: 1535: alldone:
  9288                           
  9289                           ; BSR set to: 0
  9290  000F52  C024  FFD9         	movff	sprintf@sp,fsr2l
  9291  000F56  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  9292  000F5A  0E00               	movlw	0
  9293  000F5C  6EDF               	movwf	indf2,c
  9294  000F5E  0012               	return	
  9295  000F60                     __end_of_sprintf:
  9296                           	opt stack 0
  9297                           tosu	equ	0xFFF
  9298                           tosh	equ	0xFFE
  9299                           tosl	equ	0xFFD
  9300                           pclath	equ	0xFFA
  9301                           tblptru	equ	0xFF8
  9302                           tblptrh	equ	0xFF7
  9303                           tblptrl	equ	0xFF6
  9304                           tablat	equ	0xFF5
  9305                           prodh	equ	0xFF4
  9306                           prodl	equ	0xFF3
  9307                           intcon	equ	0xFF2
  9308                           intcon2	equ	0xFF1
  9309                           postinc0	equ	0xFEE
  9310                           wreg	equ	0xFE8
  9311                           indf1	equ	0xFE7
  9312                           postdec1	equ	0xFE5
  9313                           fsr1h	equ	0xFE2
  9314                           fsr1l	equ	0xFE1
  9315                           indf2	equ	0xFDF
  9316                           postinc2	equ	0xFDE
  9317                           postdec2	equ	0xFDD
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function ___lwmod *****************
  9323 ;; Defined at:
  9324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  dividend        2   30[COMRAM] unsigned int 
  9327 ;;  divisor         2   32[COMRAM] unsigned int 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  counter         1   34[COMRAM] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  2   30[COMRAM] unsigned int 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9339 ;;      Params:         4       0       0       0       0       0       0
  9340 ;;      Locals:         1       0       0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0
  9342 ;;      Totals:         5       0       0       0       0       0       0
  9343 ;;Total ram usage:        5 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    3
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_sprintf
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text36
  9354  002C04                     __ptext36:
  9355                           	opt stack 0
  9356  002C04                     ___lwmod:
  9357                           	opt stack 25
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;incstack = 0
  9361  002C04  5021               	movf	___lwmod@divisor,w,c
  9362  002C06  1022               	iorwf	___lwmod@divisor+1,w,c
  9363  002C08  B4D8               	btfsc	status,2,c
  9364  002C0A  D018               	goto	l1869
  9365  002C0C  0E01               	movlw	1
  9366  002C0E  6E23               	movwf	___lwmod@counter,c
  9367  002C10  D004               	goto	l1864
  9368  002C12  90D8               	bcf	status,0,c
  9369  002C14  3621               	rlcf	___lwmod@divisor,f,c
  9370  002C16  3622               	rlcf	___lwmod@divisor+1,f,c
  9371  002C18  2A23               	incf	___lwmod@counter,f,c
  9372  002C1A                     l1864:
  9373  002C1A  AE22               	btfss	___lwmod@divisor+1,7,c
  9374  002C1C  D7FA               	goto	l1865
  9375  002C1E                     u7730:
  9376  002C1E  5021               	movf	___lwmod@divisor,w,c
  9377  002C20  5C1F               	subwf	___lwmod@dividend,w,c
  9378  002C22  5022               	movf	___lwmod@divisor+1,w,c
  9379  002C24  5820               	subwfb	___lwmod@dividend+1,w,c
  9380  002C26  A0D8               	btfss	status,0,c
  9381  002C28  D004               	goto	l1868
  9382  002C2A  5021               	movf	___lwmod@divisor,w,c
  9383  002C2C  5E1F               	subwf	___lwmod@dividend,f,c
  9384  002C2E  5022               	movf	___lwmod@divisor+1,w,c
  9385  002C30  5A20               	subwfb	___lwmod@dividend+1,f,c
  9386  002C32                     l1868:
  9387  002C32  90D8               	bcf	status,0,c
  9388  002C34  3222               	rrcf	___lwmod@divisor+1,f,c
  9389  002C36  3221               	rrcf	___lwmod@divisor,f,c
  9390  002C38  2E23               	decfsz	___lwmod@counter,f,c
  9391  002C3A  D7F1               	goto	u7730
  9392  002C3C                     l1869:
  9393  002C3C  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  9394  002C40  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  9395  002C44  0012               	return		;funcret
  9396  002C46                     __end_of___lwmod:
  9397                           	opt stack 0
  9398                           tosu	equ	0xFFF
  9399                           tosh	equ	0xFFE
  9400                           tosl	equ	0xFFD
  9401                           pclath	equ	0xFFA
  9402                           tblptru	equ	0xFF8
  9403                           tblptrh	equ	0xFF7
  9404                           tblptrl	equ	0xFF6
  9405                           tablat	equ	0xFF5
  9406                           prodh	equ	0xFF4
  9407                           prodl	equ	0xFF3
  9408                           intcon	equ	0xFF2
  9409                           intcon2	equ	0xFF1
  9410                           postinc0	equ	0xFEE
  9411                           wreg	equ	0xFE8
  9412                           indf1	equ	0xFE7
  9413                           postdec1	equ	0xFE5
  9414                           fsr1h	equ	0xFE2
  9415                           fsr1l	equ	0xFE1
  9416                           indf2	equ	0xFDF
  9417                           postinc2	equ	0xFDE
  9418                           postdec2	equ	0xFDD
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function ___lwdiv *****************
  9424 ;; Defined at:
  9425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;  dividend        2   23[COMRAM] unsigned int 
  9428 ;;  divisor         2   25[COMRAM] unsigned int 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  quotient        2   28[COMRAM] unsigned int 
  9431 ;;  counter         1   27[COMRAM] unsigned char 
  9432 ;; Return value:  Size  Location     Type
  9433 ;;                  2   23[COMRAM] unsigned int 
  9434 ;; Registers used:
  9435 ;;		wreg, status,2, status,0
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9441 ;;      Params:         4       0       0       0       0       0       0
  9442 ;;      Locals:         3       0       0       0       0       0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0
  9444 ;;      Totals:         7       0       0       0       0       0       0
  9445 ;;Total ram usage:        7 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    3
  9448 ;; This function calls:
  9449 ;;		Nothing
  9450 ;; This function is called by:
  9451 ;;		_sprintf
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text37
  9456  002A54                     __ptext37:
  9457                           	opt stack 0
  9458  002A54                     ___lwdiv:
  9459                           	opt stack 25
  9460                           
  9461                           ;incstack = 0
  9462  002A54  0E00               	movlw	0
  9463  002A56  6E1E               	movwf	___lwdiv@quotient+1,c
  9464  002A58  0E00               	movlw	0
  9465  002A5A  6E1D               	movwf	___lwdiv@quotient,c
  9466  002A5C  501A               	movf	___lwdiv@divisor,w,c
  9467  002A5E  101B               	iorwf	___lwdiv@divisor+1,w,c
  9468  002A60  B4D8               	btfsc	status,2,c
  9469  002A62  D01C               	goto	l1859
  9470  002A64  0E01               	movlw	1
  9471  002A66  6E1C               	movwf	___lwdiv@counter,c
  9472  002A68  D004               	goto	l1854
  9473  002A6A  90D8               	bcf	status,0,c
  9474  002A6C  361A               	rlcf	___lwdiv@divisor,f,c
  9475  002A6E  361B               	rlcf	___lwdiv@divisor+1,f,c
  9476  002A70  2A1C               	incf	___lwdiv@counter,f,c
  9477  002A72                     l1854:
  9478  002A72  AE1B               	btfss	___lwdiv@divisor+1,7,c
  9479  002A74  D7FA               	goto	l1855
  9480  002A76                     u7700:
  9481  002A76  90D8               	bcf	status,0,c
  9482  002A78  361D               	rlcf	___lwdiv@quotient,f,c
  9483  002A7A  361E               	rlcf	___lwdiv@quotient+1,f,c
  9484  002A7C  501A               	movf	___lwdiv@divisor,w,c
  9485  002A7E  5C18               	subwf	___lwdiv@dividend,w,c
  9486  002A80  501B               	movf	___lwdiv@divisor+1,w,c
  9487  002A82  5819               	subwfb	___lwdiv@dividend+1,w,c
  9488  002A84  A0D8               	btfss	status,0,c
  9489  002A86  D005               	goto	l1858
  9490  002A88  501A               	movf	___lwdiv@divisor,w,c
  9491  002A8A  5E18               	subwf	___lwdiv@dividend,f,c
  9492  002A8C  501B               	movf	___lwdiv@divisor+1,w,c
  9493  002A8E  5A19               	subwfb	___lwdiv@dividend+1,f,c
  9494  002A90  801D               	bsf	___lwdiv@quotient,0,c
  9495  002A92                     l1858:
  9496  002A92  90D8               	bcf	status,0,c
  9497  002A94  321B               	rrcf	___lwdiv@divisor+1,f,c
  9498  002A96  321A               	rrcf	___lwdiv@divisor,f,c
  9499  002A98  2E1C               	decfsz	___lwdiv@counter,f,c
  9500  002A9A  D7ED               	goto	u7700
  9501  002A9C                     l1859:
  9502  002A9C  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  9503  002AA0  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9504  002AA4  0012               	return		;funcret
  9505  002AA6                     __end_of___lwdiv:
  9506                           	opt stack 0
  9507                           tosu	equ	0xFFF
  9508                           tosh	equ	0xFFE
  9509                           tosl	equ	0xFFD
  9510                           pclath	equ	0xFFA
  9511                           tblptru	equ	0xFF8
  9512                           tblptrh	equ	0xFF7
  9513                           tblptrl	equ	0xFF6
  9514                           tablat	equ	0xFF5
  9515                           prodh	equ	0xFF4
  9516                           prodl	equ	0xFF3
  9517                           intcon	equ	0xFF2
  9518                           intcon2	equ	0xFF1
  9519                           postinc0	equ	0xFEE
  9520                           wreg	equ	0xFE8
  9521                           indf1	equ	0xFE7
  9522                           postdec1	equ	0xFE5
  9523                           fsr1h	equ	0xFE2
  9524                           fsr1l	equ	0xFE1
  9525                           indf2	equ	0xFDF
  9526                           postinc2	equ	0xFDE
  9527                           postdec2	equ	0xFDD
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function ___lwtoft *****************
  9533 ;; Defined at:
  9534 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  c               2   31[COMRAM] unsigned int 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  3   31[COMRAM] float 
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9548 ;;      Params:         3       0       0       0       0       0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0
  9551 ;;      Totals:         3       0       0       0       0       0       0
  9552 ;;Total ram usage:        3 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    4
  9555 ;; This function calls:
  9556 ;;		___ftpack
  9557 ;; This function is called by:
  9558 ;;		_SampleSingleChannel
  9559 ;;		_SampleVgMonChannel
  9560 ;;		_DacAnalogToDigitalSpi
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text38
  9565  00304C                     __ptext38:
  9566                           	opt stack 0
  9567  00304C                     ___lwtoft:
  9568                           	opt stack 22
  9569                           
  9570                           ;incstack = 0
  9571  00304C  C020  F018         	movff	___lwtoft@c,___ftpack@arg
  9572  003050  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
  9573  003054  6A1A               	clrf	___ftpack@arg+2,c
  9574  003056  0E8E               	movlw	142
  9575  003058  6E1B               	movwf	___ftpack@exp,c
  9576  00305A  0E00               	movlw	0
  9577  00305C  6E1C               	movwf	___ftpack@sign,c
  9578  00305E  ECEF  F010         	call	___ftpack	;wreg free
  9579  003062  C018  F020         	movff	?___ftpack,?___lwtoft
  9580  003066  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
  9581  00306A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
  9582  00306E  0012               	return	
  9583  003070                     __end_of___lwtoft:
  9584                           	opt stack 0
  9585                           tosu	equ	0xFFF
  9586                           tosh	equ	0xFFE
  9587                           tosl	equ	0xFFD
  9588                           pclath	equ	0xFFA
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           intcon2	equ	0xFF1
  9597                           postinc0	equ	0xFEE
  9598                           wreg	equ	0xFE8
  9599                           indf1	equ	0xFE7
  9600                           postdec1	equ	0xFE5
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8
  9609                           
  9610 ;; *************** function _UART_Write_Text *****************
  9611 ;; Defined at:
  9612 ;;		line 223 in file "EusartApp.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  text            2   24[COMRAM] PTR unsigned char 
  9615 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), STR_14(10), STR_13(10), 
  9616 ;;		 -> STR_12(10), readUartByte@dest(50), STR_10(9), SampleSingleChannel@dest(50), 
  9617 ;;		 -> STR_8(10), STR_7(34), STR_6(32), STR_5(10), 
  9618 ;;		 -> STR_4(29), STR_3(33), STR_2(10), STR_1(10), 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  i               2   28[COMRAM] int 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9630 ;;      Params:         2       0       0       0       0       0       0
  9631 ;;      Locals:         2       0       0       0       0       0       0
  9632 ;;      Temps:          2       0       0       0       0       0       0
  9633 ;;      Totals:         6       0       0       0       0       0       0
  9634 ;;Total ram usage:        6 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    4
  9637 ;; This function calls:
  9638 ;;		_EUSART1_Write
  9639 ;; This function is called by:
  9640 ;;		_AdcSingleSample
  9641 ;;		_SampleSingleChannel
  9642 ;;		_readUartByte
  9643 ;;		_SendUartSystemInitMessage
  9644 ;;		_PrintHelpScreen
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text39
  9649  0025F2                     __ptext39:
  9650                           	opt stack 0
  9651  0025F2                     _UART_Write_Text:
  9652                           	opt stack 25
  9653                           
  9654                           ;EusartApp.c: 225: for(int i =0;text[i]!='\0';i++)
  9655                           
  9656                           ;incstack = 0
  9657  0025F2  0E00               	movlw	0
  9658  0025F4  6E1E               	movwf	UART_Write_Text@i+1,c
  9659  0025F6  0E00               	movlw	0
  9660  0025F8  6E1D               	movwf	UART_Write_Text@i,c
  9661  0025FA  D01A               	goto	l273
  9662  0025FC                     
  9663                           ;EusartApp.c: 226: {
  9664                           ;EusartApp.c: 227: EUSART1_Write(text[i]);
  9665  0025FC  501D               	movf	UART_Write_Text@i,w,c
  9666  0025FE  2419               	addwf	UART_Write_Text@text,w,c
  9667  002600  6E1B               	movwf	??_UART_Write_Text& (0+255),c
  9668  002602  501E               	movf	UART_Write_Text@i+1,w,c
  9669  002604  201A               	addwfc	UART_Write_Text@text+1,w,c
  9670  002606  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
  9671  002608  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
  9672  00260C  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  9673  002610  6AF8               	clrf	tblptru,c
  9674  002612  0E05               	movlw	(high __ramtop+-1)
  9675  002614  64F7               	cpfsgt	tblptrh,c
  9676  002616  D003               	bra	u7757
  9677  002618  0008               	tblrd		*
  9678  00261A  50F5               	movf	tablat,w,c
  9679  00261C  D005               	bra	u7750
  9680  00261E                     u7757:
  9681  00261E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9682  002622  CFF7 FFEA          	movff	tblptrh,fsr0h
  9683  002626  50EF               	movf	indf0,w,c
  9684  002628                     u7750:
  9685  002628  EC65  F016         	call	_EUSART1_Write
  9686  00262C  4A1D               	infsnz	UART_Write_Text@i,f,c
  9687  00262E  2A1E               	incf	UART_Write_Text@i+1,f,c
  9688  002630                     l273:
  9689  002630  501D               	movf	UART_Write_Text@i,w,c
  9690  002632  2419               	addwf	UART_Write_Text@text,w,c
  9691  002634  6E1B               	movwf	??_UART_Write_Text& (0+255),c
  9692  002636  501E               	movf	UART_Write_Text@i+1,w,c
  9693  002638  201A               	addwfc	UART_Write_Text@text+1,w,c
  9694  00263A  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
  9695  00263C  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
  9696  002640  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  9697  002644  6AF8               	clrf	tblptru,c
  9698  002646  0E05               	movlw	(high __ramtop+-1)
  9699  002648  64F7               	cpfsgt	tblptrh,c
  9700  00264A  D003               	bra	u7767
  9701  00264C  0008               	tblrd		*
  9702  00264E  50F5               	movf	tablat,w,c
  9703  002650  D005               	bra	u7760
  9704  002652                     u7767:
  9705  002652  CFF6 FFE9          	movff	tblptrl,fsr0l
  9706  002656  CFF7 FFEA          	movff	tblptrh,fsr0h
  9707  00265A  50EF               	movf	indf0,w,c
  9708  00265C                     u7760:
  9709  00265C  0900               	iorlw	0
  9710  00265E  B4D8               	btfsc	status,2,c
  9711  002660  0012               	return	
  9712  002662  D7CC               	goto	l274
  9713  002664                     __end_of_UART_Write_Text:
  9714                           	opt stack 0
  9715                           tosu	equ	0xFFF
  9716                           tosh	equ	0xFFE
  9717                           tosl	equ	0xFFD
  9718                           pclath	equ	0xFFA
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           intcon2	equ	0xFF1
  9727                           indf0	equ	0xFEF
  9728                           postinc0	equ	0xFEE
  9729                           fsr0h	equ	0xFEA
  9730                           fsr0l	equ	0xFE9
  9731                           wreg	equ	0xFE8
  9732                           indf1	equ	0xFE7
  9733                           postdec1	equ	0xFE5
  9734                           fsr1h	equ	0xFE2
  9735                           fsr1l	equ	0xFE1
  9736                           indf2	equ	0xFDF
  9737                           postinc2	equ	0xFDE
  9738                           postdec2	equ	0xFDD
  9739                           fsr2h	equ	0xFDA
  9740                           fsr2l	equ	0xFD9
  9741                           status	equ	0xFD8
  9742                           
  9743 ;; *************** function _EUSART1_Write *****************
  9744 ;; Defined at:
  9745 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;  txData          1    wreg     unsigned char 
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;  txData          1   23[COMRAM] unsigned char 
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  1    wreg      void 
  9752 ;; Registers used:
  9753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9759 ;;      Params:         0       0       0       0       0       0       0
  9760 ;;      Locals:         1       0       0       0       0       0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0
  9762 ;;      Totals:         1       0       0       0       0       0       0
  9763 ;;Total ram usage:        1 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    3
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_UART_Write_Text
  9770 ;;		_WriteUartMessage
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           	psect	text40
  9775  002CCA                     __ptext40:
  9776                           	opt stack 0
  9777  002CCA                     _EUSART1_Write:
  9778                           	opt stack 25
  9779                           
  9780                           ;incstack = 0
  9781                           ;EUSART1_Write@txData stored from wreg
  9782  002CCA  6E18               	movwf	EUSART1_Write@txData,c
  9783  002CCC                     
  9784                           ;eusart1.c: 160: {
  9785                           
  9786                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9787  002CCC  0100               	movlb	0	; () banked
  9788  002CCE  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9789  002CD0  B4D8               	btfsc	status,2,c
  9790  002CD2  D7FC               	goto	l7261
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;eusart1.c: 161: }
  9794                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9795  002CD4  B89D               	btfsc	3997,4,c	;volatile
  9796  002CD6  D003               	goto	l862
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;eusart1.c: 164: {
  9800                           ;eusart1.c: 165: TXREG1 = txData;
  9801  002CD8  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9802                           
  9803                           ;eusart1.c: 166: }
  9804  002CDC  D012               	goto	l863
  9805  002CDE                     l862:
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;eusart1.c: 167: else
  9809                           ;eusart1.c: 168: {
  9810                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9811  002CDE  989D               	bcf	3997,4,c	;volatile
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9815  002CE0  503A               	movf	_eusart1TxHead,w,c	;volatile
  9816  002CE2  0D01               	mullw	1
  9817  002CE4  0E00               	movlw	low _eusart1TxBuffer
  9818  002CE6  24F3               	addwf	prodl,w,c
  9819  002CE8  6ED9               	movwf	fsr2l,c
  9820  002CEA  0E02               	movlw	high _eusart1TxBuffer
  9821  002CEC  20F4               	addwfc	prodh,w,c
  9822  002CEE  6EDA               	movwf	fsr2h,c
  9823  002CF0  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9824                           
  9825                           ; BSR set to: 0
  9826  002CF4  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9830  002CF6  0E45               	movlw	69
  9831  002CF8  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9832  002CFA  D002               	goto	l864
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;eusart1.c: 172: {
  9836                           ;eusart1.c: 173: eusart1TxHead = 0;
  9837  002CFC  0E00               	movlw	0
  9838  002CFE  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9839  002D00                     l864:
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;eusart1.c: 174: }
  9843                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9844                           
  9845                           ; BSR set to: 0
  9846  002D00  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9847  002D02                     l863:
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;eusart1.c: 176: }
  9851                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9852                           
  9853                           ; BSR set to: 0
  9854  002D02  889D               	bsf	3997,4,c	;volatile
  9855                           
  9856                           ; BSR set to: 0
  9857  002D04  0012               	return		;funcret
  9858  002D06                     __end_of_EUSART1_Write:
  9859                           	opt stack 0
  9860                           tosu	equ	0xFFF
  9861                           tosh	equ	0xFFE
  9862                           tosl	equ	0xFFD
  9863                           pclath	equ	0xFFA
  9864                           tblptru	equ	0xFF8
  9865                           tblptrh	equ	0xFF7
  9866                           tblptrl	equ	0xFF6
  9867                           tablat	equ	0xFF5
  9868                           prodh	equ	0xFF4
  9869                           prodl	equ	0xFF3
  9870                           intcon	equ	0xFF2
  9871                           intcon2	equ	0xFF1
  9872                           indf0	equ	0xFEF
  9873                           postinc0	equ	0xFEE
  9874                           fsr0h	equ	0xFEA
  9875                           fsr0l	equ	0xFE9
  9876                           wreg	equ	0xFE8
  9877                           indf1	equ	0xFE7
  9878                           postdec1	equ	0xFE5
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           fsr2h	equ	0xFDA
  9885                           fsr2l	equ	0xFD9
  9886                           status	equ	0xFD8
  9887                           
  9888 ;; *************** function _ADC_GetConversion *****************
  9889 ;; Defined at:
  9890 ;;		line 106 in file "mcc_generated_files/adc.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;  channel         1    wreg     enum E6975
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;  channel         1   27[COMRAM] enum E6975
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  2   23[COMRAM] unsigned int 
  9897 ;; Registers used:
  9898 ;;		wreg, status,2, status,0
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9904 ;;      Params:         2       0       0       0       0       0       0
  9905 ;;      Locals:         1       0       0       0       0       0       0
  9906 ;;      Temps:          2       0       0       0       0       0       0
  9907 ;;      Totals:         5       0       0       0       0       0       0
  9908 ;;Total ram usage:        5 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:    3
  9911 ;; This function calls:
  9912 ;;		Nothing
  9913 ;; This function is called by:
  9914 ;;		_SampleSingleChannel
  9915 ;;		_SampleVgMonChannel
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           	psect	text41
  9920  002F34                     __ptext41:
  9921                           	opt stack 0
  9922  002F34                     _ADC_GetConversion:
  9923                           	opt stack 26
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;incstack = 0
  9927                           ;ADC_GetConversion@channel stored from wreg
  9928  002F34  6E1C               	movwf	ADC_GetConversion@channel,c
  9929                           
  9930                           ;adc.c: 109: ADCON0bits.CHS = channel;
  9931  002F36  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9932  002F3A  461A               	rlncf	??_ADC_GetConversion,f,c
  9933  002F3C  461A               	rlncf	??_ADC_GetConversion,f,c
  9934  002F3E  50C2               	movf	4034,w,c	;volatile
  9935  002F40  181A               	xorwf	??_ADC_GetConversion,w,c
  9936  002F42  0B83               	andlw	-125
  9937  002F44  181A               	xorwf	??_ADC_GetConversion,w,c
  9938  002F46  6EC2               	movwf	4034,c	;volatile
  9939                           
  9940                           ;adc.c: 112: ADCON0bits.ADON = 1;
  9941  002F48  80C2               	bsf	4034,0,c	;volatile
  9942                           
  9943                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  9944  002F4A  82C2               	bsf	4034,1,c	;volatile
  9945  002F4C                     
  9946                           ;adc.c: 119: {
  9947  002F4C  B2C2               	btfsc	4034,1,c	;volatile
  9948  002F4E  D7FE               	goto	l1075
  9949                           
  9950                           ;adc.c: 120: }
  9951                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
  9952  002F50  50C4               	movf	4036,w,c	;volatile
  9953  002F52  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9954  002F54  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
  9955  002F56  50C3               	movf	4035,w,c	;volatile
  9956  002F58  241A               	addwf	??_ADC_GetConversion,w,c
  9957  002F5A  6E18               	movwf	?_ADC_GetConversion,c
  9958  002F5C  0E00               	movlw	0
  9959  002F5E  201B               	addwfc	??_ADC_GetConversion+1,w,c
  9960  002F60  6E19               	movwf	?_ADC_GetConversion+1,c
  9961  002F62  0012               	return	
  9962  002F64                     __end_of_ADC_GetConversion:
  9963                           	opt stack 0
  9964                           tosu	equ	0xFFF
  9965                           tosh	equ	0xFFE
  9966                           tosl	equ	0xFFD
  9967                           pclath	equ	0xFFA
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           intcon2	equ	0xFF1
  9976                           indf0	equ	0xFEF
  9977                           postinc0	equ	0xFEE
  9978                           fsr0h	equ	0xFEA
  9979                           fsr0l	equ	0xFE9
  9980                           wreg	equ	0xFE8
  9981                           indf1	equ	0xFE7
  9982                           postdec1	equ	0xFE5
  9983                           fsr1h	equ	0xFE2
  9984                           fsr1l	equ	0xFE1
  9985                           indf2	equ	0xFDF
  9986                           postinc2	equ	0xFDE
  9987                           postdec2	equ	0xFDD
  9988                           fsr2h	equ	0xFDA
  9989                           fsr2l	equ	0xFD9
  9990                           status	equ	0xFD8
  9991                           
  9992 ;; *************** function _InitSystemApplicationManagers *****************
  9993 ;; Defined at:
  9994 ;;		line 33 in file "SystemSettings.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10008 ;;      Params:         0       0       0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0
 10011 ;;      Totals:         0       0       0       0       0       0       0
 10012 ;;Total ram usage:        0 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:   10
 10015 ;; This function calls:
 10016 ;;		_ClearMcuRunTime
 10017 ;;		_DacInit
 10018 ;;		_InitAdcApplicationMgr
 10019 ;;		_PLLInitialize
 10020 ;;		_TMR0_StartTimer
 10021 ;; This function is called by:
 10022 ;;		_main
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           	psect	text42
 10027  003152                     __ptext42:
 10028                           	opt stack 0
 10029  003152                     _InitSystemApplicationManagers:
 10030                           	opt stack 20
 10031                           
 10032                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10033                           
 10034                           ;incstack = 0
 10035  003152  ECF5  F018         	call	_InitAdcApplicationMgr	;wreg free
 10036                           
 10037                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10038  003156  ECFE  F018         	call	_TMR0_StartTimer	;wreg free
 10039                           
 10040                           ;SystemSettings.c: 42: PLLInitialize();
 10041  00315A  EC86  F008         	call	_PLLInitialize	;wreg free
 10042                           
 10043                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10044  00315E  ECC8  F018         	call	_ClearMcuRunTime	;wreg free
 10045                           
 10046                           ;SystemSettings.c: 48: DacInit();
 10047  003162  ECB5  F00D         	call	_DacInit	;wreg free
 10048  003166  0012               	return		;funcret
 10049  003168                     __end_of_InitSystemApplicationManagers:
 10050                           	opt stack 0
 10051                           tosu	equ	0xFFF
 10052                           tosh	equ	0xFFE
 10053                           tosl	equ	0xFFD
 10054                           pclath	equ	0xFFA
 10055                           tblptru	equ	0xFF8
 10056                           tblptrh	equ	0xFF7
 10057                           tblptrl	equ	0xFF6
 10058                           tablat	equ	0xFF5
 10059                           prodh	equ	0xFF4
 10060                           prodl	equ	0xFF3
 10061                           intcon	equ	0xFF2
 10062                           intcon2	equ	0xFF1
 10063                           indf0	equ	0xFEF
 10064                           postinc0	equ	0xFEE
 10065                           fsr0h	equ	0xFEA
 10066                           fsr0l	equ	0xFE9
 10067                           wreg	equ	0xFE8
 10068                           indf1	equ	0xFE7
 10069                           postdec1	equ	0xFE5
 10070                           fsr1h	equ	0xFE2
 10071                           fsr1l	equ	0xFE1
 10072                           indf2	equ	0xFDF
 10073                           postinc2	equ	0xFDE
 10074                           postdec2	equ	0xFDD
 10075                           fsr2h	equ	0xFDA
 10076                           fsr2l	equ	0xFD9
 10077                           status	equ	0xFD8
 10078                           
 10079 ;; *************** function _TMR0_StartTimer *****************
 10080 ;; Defined at:
 10081 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;		None
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;		None
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  1    wreg      void 
 10088 ;; Registers used:
 10089 ;;		None
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10095 ;;      Params:         0       0       0       0       0       0       0
 10096 ;;      Locals:         0       0       0       0       0       0       0
 10097 ;;      Temps:          0       0       0       0       0       0       0
 10098 ;;      Totals:         0       0       0       0       0       0       0
 10099 ;;Total ram usage:        0 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    3
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_InitSystemApplicationManagers
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text43
 10110  0031FC                     __ptext43:
 10111                           	opt stack 0
 10112  0031FC                     _TMR0_StartTimer:
 10113                           	opt stack 26
 10114                           
 10115                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10116                           
 10117                           ;incstack = 0
 10118  0031FC  8ED5               	bsf	4053,7,c	;volatile
 10119  0031FE  0012               	return		;funcret
 10120  003200                     __end_of_TMR0_StartTimer:
 10121                           	opt stack 0
 10122                           tosu	equ	0xFFF
 10123                           tosh	equ	0xFFE
 10124                           tosl	equ	0xFFD
 10125                           pclath	equ	0xFFA
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon	equ	0xFF2
 10133                           intcon2	equ	0xFF1
 10134                           indf0	equ	0xFEF
 10135                           postinc0	equ	0xFEE
 10136                           fsr0h	equ	0xFEA
 10137                           fsr0l	equ	0xFE9
 10138                           wreg	equ	0xFE8
 10139                           indf1	equ	0xFE7
 10140                           postdec1	equ	0xFE5
 10141                           fsr1h	equ	0xFE2
 10142                           fsr1l	equ	0xFE1
 10143                           indf2	equ	0xFDF
 10144                           postinc2	equ	0xFDE
 10145                           postdec2	equ	0xFDD
 10146                           fsr2h	equ	0xFDA
 10147                           fsr2l	equ	0xFD9
 10148                           status	equ	0xFD8
 10149                           
 10150 ;; *************** function _PLLInitialize *****************
 10151 ;; Defined at:
 10152 ;;		line 14 in file "SyntApp.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  idx             2   42[BANK0 ] int 
 10157 ;;  idx             2   40[BANK0 ] int 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  1    wreg      void 
 10160 ;; Registers used:
 10161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       0       0       0       0       0       0
 10168 ;;      Locals:         0       4       0       0       0       0       0
 10169 ;;      Temps:          0       2       0       0       0       0       0
 10170 ;;      Totals:         0       6       0       0       0       0       0
 10171 ;;Total ram usage:        6 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    7
 10174 ;; This function calls:
 10175 ;;		_SWSPI_send_word
 10176 ;;		_SwSpi_Set_CE_Pin
 10177 ;; This function is called by:
 10178 ;;		_InitSystemApplicationManagers
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text44
 10183  00110C                     __ptext44:
 10184                           	opt stack 0
 10185  00110C                     _PLLInitialize:
 10186                           	opt stack 22
 10187                           
 10188                           ;SyntApp.c: 17: IOCB = 0b10000000;
 10189                           
 10190                           ;incstack = 0
 10191  00110C  0E80               	movlw	128
 10192  00110E  6E62               	movwf	3938,c	;volatile
 10193                           
 10194                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 10195  001110  0E01               	movlw	1
 10196  001112  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10197  001114  0E00               	movlw	0
 10198  001116  EC83  F016         	call	_SwSpi_Set_CE_Pin
 10199                           
 10200                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
 10201  00111A  0E00               	movlw	0
 10202  00111C  0100               	movlb	0	; () banked
 10203  00111E  6F89               	movwf	(PLLInitialize@idx+1)& (0+255),b
 10204  001120  0E00               	movlw	0
 10205  001122  6F88               	movwf	PLLInitialize@idx& (0+255),b
 10206  001124                     l7877:
 10207                           
 10208                           ; BSR set to: 0
 10209  001124  BF89               	btfsc	(PLLInitialize@idx+1)& (0+255),7,b
 10210  001126  D006               	goto	l511
 10211  001128  5189               	movf	(PLLInitialize@idx+1)& (0+255),w,b
 10212  00112A  E129               	bnz	l7887
 10213  00112C  0E0D               	movlw	13
 10214  00112E  5D88               	subwf	PLLInitialize@idx& (0+255),w,b
 10215  001130  B0D8               	btfsc	status,0,c
 10216  001132  D025               	goto	u8220
 10217  001134                     l511:
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;SyntApp.c: 25: {
 10221                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 10222                           
 10223                           ; BSR set to: 0
 10224  001134  C088  F086         	movff	PLLInitialize@idx,??_PLLInitialize
 10225  001138  C089  F087         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 10226  00113C  90D8               	bcf	status,0,c
 10227  00113E  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 10228  001140  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 10229  001142  90D8               	bcf	status,0,c
 10230  001144  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 10231  001146  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 10232  001148  0E83               	movlw	low _TEST_PLL_REGISTERS
 10233  00114A  2586               	addwf	??_PLLInitialize& (0+255),w,b
 10234  00114C  6EF6               	movwf	tblptrl,c
 10235  00114E  0E79               	movlw	high _TEST_PLL_REGISTERS
 10236  001150  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 10237  001152  6EF7               	movwf	tblptrh,c
 10238  001154                     	if	0	;There are less than 3 active tblptr bytes
 10239  001154                     	endif
 10240  001154  0009               	tblrd		*+
 10241  001156  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10242  00115A  0009               	tblrd		*+
 10243  00115C  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10244  001160  0009               	tblrd		*+
 10245  001162  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10246  001166  000A               	tblrd		*-
 10247  001168  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10248  00116C  0E03               	movlw	3
 10249  00116E  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10250  001170  0E00               	movlw	0
 10251  001172  EC95  F011         	call	_SWSPI_send_word
 10252  001176  0100               	movlb	0	; () banked
 10253  001178  4B88               	infsnz	PLLInitialize@idx& (0+255),f,b
 10254  00117A  2B89               	incf	(PLLInitialize@idx+1)& (0+255),f,b
 10255  00117C  D7D3               	goto	l7877
 10256  00117E                     u8220:
 10257  00117E                     l7887:
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;SyntApp.c: 27: }
 10261                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 10262  00117E  0E01               	movlw	1
 10263  001180  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10264  001182  0E01               	movlw	1
 10265  001184  EC83  F016         	call	_SwSpi_Set_CE_Pin
 10266                           
 10267                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
 10268  001188  0E00               	movlw	0
 10269  00118A  0100               	movlb	0	; () banked
 10270  00118C  6F8B               	movwf	(PLLInitialize@idx_670+1)& (0+255),b
 10271  00118E  0E00               	movlw	0
 10272  001190  6F8A               	movwf	PLLInitialize@idx_670& (0+255),b
 10273  001192                     l7891:
 10274                           
 10275                           ; BSR set to: 0
 10276  001192  BF8B               	btfsc	(PLLInitialize@idx_670+1)& (0+255),7,b
 10277  001194  D006               	goto	l513
 10278  001196  518B               	movf	(PLLInitialize@idx_670+1)& (0+255),w,b
 10279  001198  E129               	bnz	l7901
 10280  00119A  0E0D               	movlw	13
 10281  00119C  5D8A               	subwf	PLLInitialize@idx_670& (0+255),w,b
 10282  00119E  B0D8               	btfsc	status,0,c
 10283  0011A0  D025               	goto	u8240
 10284  0011A2                     l513:
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;SyntApp.c: 40: {
 10288                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 10289                           
 10290                           ; BSR set to: 0
 10291  0011A2  C08A  F086         	movff	PLLInitialize@idx_670,??_PLLInitialize
 10292  0011A6  C08B  F087         	movff	PLLInitialize@idx_670+1,??_PLLInitialize+1
 10293  0011AA  90D8               	bcf	status,0,c
 10294  0011AC  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 10295  0011AE  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 10296  0011B0  90D8               	bcf	status,0,c
 10297  0011B2  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 10298  0011B4  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 10299  0011B6  0EB7               	movlw	low _PLL_INIT_REGISTERS
 10300  0011B8  2586               	addwf	??_PLLInitialize& (0+255),w,b
 10301  0011BA  6EF6               	movwf	tblptrl,c
 10302  0011BC  0E79               	movlw	high _PLL_INIT_REGISTERS
 10303  0011BE  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 10304  0011C0  6EF7               	movwf	tblptrh,c
 10305  0011C2                     	if	0	;There are less than 3 active tblptr bytes
 10306  0011C2                     	endif
 10307  0011C2  0009               	tblrd		*+
 10308  0011C4  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10309  0011C8  0009               	tblrd		*+
 10310  0011CA  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10311  0011CE  0009               	tblrd		*+
 10312  0011D0  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10313  0011D4  000A               	tblrd		*-
 10314  0011D6  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10315  0011DA  0E03               	movlw	3
 10316  0011DC  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10317  0011DE  0E01               	movlw	1
 10318  0011E0  EC95  F011         	call	_SWSPI_send_word
 10319  0011E4  0100               	movlb	0	; () banked
 10320  0011E6  4B8A               	infsnz	PLLInitialize@idx_670& (0+255),f,b
 10321  0011E8  2B8B               	incf	(PLLInitialize@idx_670+1)& (0+255),f,b
 10322  0011EA  D7D3               	goto	l7891
 10323  0011EC                     u8240:
 10324  0011EC                     l7901:
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;SyntApp.c: 42: }
 10328                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 10329  0011EC  0EC7               	movlw	low (_PLL_INIT_REGISTERS+16)
 10330  0011EE  6EF6               	movwf	tblptrl,c
 10331  0011F0  0E79               	movlw	high (_PLL_INIT_REGISTERS+16)
 10332  0011F2  6EF7               	movwf	tblptrh,c
 10333  0011F4                     	if	0	;tblptru may be non-zero
 10334  0011F4                     	endif
 10335  0011F4                     	if	0	;tblptru may be non-zero
 10336  0011F4                     	endif
 10337  0011F4  0009               	tblrd		*+
 10338  0011F6  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10339  0011FA  0009               	tblrd		*+
 10340  0011FC  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10341  001200  0009               	tblrd		*+
 10342  001202  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10343  001206  000A               	tblrd		*-
 10344  001208  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10345  00120C  0E03               	movlw	3
 10346  00120E  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10347  001210  0E01               	movlw	1
 10348  001212  EC95  F011         	call	_SWSPI_send_word
 10349                           
 10350                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 10351  001216  0EBF               	movlw	low (_PLL_INIT_REGISTERS+8)
 10352  001218  6EF6               	movwf	tblptrl,c
 10353  00121A  0E79               	movlw	high (_PLL_INIT_REGISTERS+8)
 10354  00121C  6EF7               	movwf	tblptrh,c
 10355  00121E                     	if	0	;tblptru may be non-zero
 10356  00121E                     	endif
 10357  00121E                     	if	0	;tblptru may be non-zero
 10358  00121E                     	endif
 10359  00121E  0009               	tblrd		*+
 10360  001220  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10361  001224  0009               	tblrd		*+
 10362  001226  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10363  00122A  0009               	tblrd		*+
 10364  00122C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10365  001230  000A               	tblrd		*-
 10366  001232  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10367  001236  0E03               	movlw	3
 10368  001238  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10369  00123A  0E01               	movlw	1
 10370  00123C  EC95  F011         	call	_SWSPI_send_word
 10371                           
 10372                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 10373  001240  0EBB               	movlw	low (_PLL_INIT_REGISTERS+4)
 10374  001242  6EF6               	movwf	tblptrl,c
 10375  001244  0E79               	movlw	high (_PLL_INIT_REGISTERS+4)
 10376  001246  6EF7               	movwf	tblptrh,c
 10377  001248                     	if	0	;tblptru may be non-zero
 10378  001248                     	endif
 10379  001248                     	if	0	;tblptru may be non-zero
 10380  001248                     	endif
 10381  001248  0009               	tblrd		*+
 10382  00124A  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10383  00124E  0009               	tblrd		*+
 10384  001250  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10385  001254  0009               	tblrd		*+
 10386  001256  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10387  00125A  000A               	tblrd		*-
 10388  00125C  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10389  001260  0E03               	movlw	3
 10390  001262  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10391  001264  0E01               	movlw	1
 10392  001266  EC95  F011         	call	_SWSPI_send_word
 10393                           
 10394                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 10395  00126A  0EB7               	movlw	low _PLL_INIT_REGISTERS
 10396  00126C  6EF6               	movwf	tblptrl,c
 10397  00126E                     	if	1	;There is more than 1 active tblptr byte
 10398  00126E  0E79               	movlw	high _PLL_INIT_REGISTERS
 10399  001270  6EF7               	movwf	tblptrh,c
 10400  001272                     	endif
 10401  001272                     	if	0	;There are less than 3 active tblptr bytes
 10402  001272                     	endif
 10403  001272  0009               	tblrd		*+
 10404  001274  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 10405  001278  0009               	tblrd		*+
 10406  00127A  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 10407  00127E  0009               	tblrd		*+
 10408  001280  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 10409  001284  000A               	tblrd		*-
 10410  001286  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 10411  00128A  0E03               	movlw	3
 10412  00128C  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10413  00128E  0E01               	movlw	1
 10414  001290  EC95  F011         	call	_SWSPI_send_word
 10415  001294  0012               	return		;funcret
 10416  001296                     __end_of_PLLInitialize:
 10417                           	opt stack 0
 10418                           tosu	equ	0xFFF
 10419                           tosh	equ	0xFFE
 10420                           tosl	equ	0xFFD
 10421                           pclath	equ	0xFFA
 10422                           tblptru	equ	0xFF8
 10423                           tblptrh	equ	0xFF7
 10424                           tblptrl	equ	0xFF6
 10425                           tablat	equ	0xFF5
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           intcon	equ	0xFF2
 10429                           intcon2	equ	0xFF1
 10430                           indf0	equ	0xFEF
 10431                           postinc0	equ	0xFEE
 10432                           fsr0h	equ	0xFEA
 10433                           fsr0l	equ	0xFE9
 10434                           wreg	equ	0xFE8
 10435                           indf1	equ	0xFE7
 10436                           postdec1	equ	0xFE5
 10437                           fsr1h	equ	0xFE2
 10438                           fsr1l	equ	0xFE1
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446 ;; *************** function _SwSpi_Set_CE_Pin *****************
 10447 ;; Defined at:
 10448 ;;		line 201 in file "SwSpiApp.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  phrType         1    wreg     enum E181
 10451 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;  phrType         1   24[COMRAM] enum E181
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  1    wreg      void 
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10463 ;;      Params:         1       0       0       0       0       0       0
 10464 ;;      Locals:         1       0       0       0       0       0       0
 10465 ;;      Temps:          0       0       0       0       0       0       0
 10466 ;;      Totals:         2       0       0       0       0       0       0
 10467 ;;Total ram usage:        2 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; Hardware stack levels required when called:    3
 10470 ;; This function calls:
 10471 ;;		Nothing
 10472 ;; This function is called by:
 10473 ;;		_PLLInitialize
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text45
 10478  002D06                     __ptext45:
 10479                           	opt stack 0
 10480  002D06                     _SwSpi_Set_CE_Pin:
 10481                           	opt stack 25
 10482                           
 10483                           ;incstack = 0
 10484                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 10485  002D06  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 10486                           
 10487                           ;SwSpiApp.c: 203: switch(phrType)
 10488  002D08  D014               	goto	l677
 10489  002D0A                     
 10490                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 10491  002D0A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10492  002D0C  A4D8               	btfss	status,2,c
 10493  002D0E  D002               	goto	l679
 10494                           
 10495                           ;SwSpiApp.c: 207: {
 10496                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 10497  002D10  828B               	bsf	3979,1,c	;volatile
 10498                           
 10499                           ;SwSpiApp.c: 209: }
 10500  002D12  0012               	return	
 10501  002D14                     l679:
 10502                           
 10503                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10504  002D14  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10505  002D16  A4D8               	btfss	status,2,c
 10506  002D18  0012               	return	
 10507                           
 10508                           ;SwSpiApp.c: 211: {
 10509                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10510  002D1A  928B               	bcf	3979,1,c	;volatile
 10511                           
 10512                           ;SwSpiApp.c: 213: }
 10513                           ;SwSpiApp.c: 214: break;
 10514  002D1C  0012               	return	
 10515  002D1E                     
 10516                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10517  002D1E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10518  002D20  A4D8               	btfss	status,2,c
 10519  002D22  D002               	goto	l688
 10520                           
 10521                           ;SwSpiApp.c: 218: {
 10522                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10523  002D24  848C               	bsf	3980,2,c	;volatile
 10524                           
 10525                           ;SwSpiApp.c: 220: }
 10526  002D26  0012               	return	
 10527  002D28                     l688:
 10528                           
 10529                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10530  002D28  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10531  002D2A  A4D8               	btfss	status,2,c
 10532  002D2C  0012               	return	
 10533                           
 10534                           ;SwSpiApp.c: 222: {
 10535                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 10536  002D2E  948C               	bcf	3980,2,c	;volatile
 10537                           
 10538                           ;SwSpiApp.c: 226: }
 10539                           
 10540                           ;SwSpiApp.c: 224: }
 10541                           ;SwSpiApp.c: 225: break;
 10542  002D30  0012               	return	
 10543  002D32                     l677:
 10544  002D32  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10545                           
 10546                           ; Switch size 1, requested type "space"
 10547                           ; Number of cases is 2, Range of values is 0 to 1
 10548                           ; switch strategies available:
 10549                           ; Name         Instructions Cycles
 10550                           ; simple_byte            7     4 (average)
 10551                           ;	Chosen strategy is simple_byte
 10552  002D34  0A00               	xorlw	0	; case 0
 10553  002D36  B4D8               	btfsc	status,2,c
 10554  002D38  D7E8               	goto	l678
 10555  002D3A  0A01               	xorlw	1	; case 1
 10556  002D3C  A4D8               	btfss	status,2,c
 10557  002D3E  0012               	return	
 10558  002D40  D7EE               	goto	l687
 10559  002D42                     __end_of_SwSpi_Set_CE_Pin:
 10560                           	opt stack 0
 10561                           tosu	equ	0xFFF
 10562                           tosh	equ	0xFFE
 10563                           tosl	equ	0xFFD
 10564                           pclath	equ	0xFFA
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           intcon	equ	0xFF2
 10572                           intcon2	equ	0xFF1
 10573                           indf0	equ	0xFEF
 10574                           postinc0	equ	0xFEE
 10575                           fsr0h	equ	0xFEA
 10576                           fsr0l	equ	0xFE9
 10577                           wreg	equ	0xFE8
 10578                           indf1	equ	0xFE7
 10579                           postdec1	equ	0xFE5
 10580                           fsr1h	equ	0xFE2
 10581                           fsr1l	equ	0xFE1
 10582                           indf2	equ	0xFDF
 10583                           postinc2	equ	0xFDE
 10584                           postdec2	equ	0xFDD
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _InitAdcApplicationMgr *****************
 10590 ;; Defined at:
 10591 ;;		line 23 in file "AdcApp.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      void 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10605 ;;      Params:         0       0       0       0       0       0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    3
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_InitSystemApplicationManagers
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text46
 10620  0031EA                     __ptext46:
 10621                           	opt stack 0
 10622  0031EA                     _InitAdcApplicationMgr:
 10623                           	opt stack 26
 10624                           
 10625                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10626                           
 10627                           ;incstack = 0
 10628  0031EA  0E00               	movlw	0
 10629  0031EC  6E3D               	movwf	_adcSampleMode,c
 10630  0031EE  0012               	return		;funcret
 10631  0031F0                     __end_of_InitAdcApplicationMgr:
 10632                           	opt stack 0
 10633                           tosu	equ	0xFFF
 10634                           tosh	equ	0xFFE
 10635                           tosl	equ	0xFFD
 10636                           pclath	equ	0xFFA
 10637                           tblptru	equ	0xFF8
 10638                           tblptrh	equ	0xFF7
 10639                           tblptrl	equ	0xFF6
 10640                           tablat	equ	0xFF5
 10641                           prodh	equ	0xFF4
 10642                           prodl	equ	0xFF3
 10643                           intcon	equ	0xFF2
 10644                           intcon2	equ	0xFF1
 10645                           indf0	equ	0xFEF
 10646                           postinc0	equ	0xFEE
 10647                           fsr0h	equ	0xFEA
 10648                           fsr0l	equ	0xFE9
 10649                           wreg	equ	0xFE8
 10650                           indf1	equ	0xFE7
 10651                           postdec1	equ	0xFE5
 10652                           fsr1h	equ	0xFE2
 10653                           fsr1l	equ	0xFE1
 10654                           indf2	equ	0xFDF
 10655                           postinc2	equ	0xFDE
 10656                           postdec2	equ	0xFDD
 10657                           fsr2h	equ	0xFDA
 10658                           fsr2l	equ	0xFD9
 10659                           status	equ	0xFD8
 10660                           
 10661 ;; *************** function _DacInit *****************
 10662 ;; Defined at:
 10663 ;;		line 12 in file "DacApp.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;		None
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  dacInput        2  114[BANK0 ] unsigned int 
 10668 ;;  idx             1  116[BANK0 ] char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      void 
 10671 ;; Registers used:
 10672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10678 ;;      Params:         0       0       0       0       0       0       0
 10679 ;;      Locals:         0       3       0       0       0       0       0
 10680 ;;      Temps:          0       2       0       0       0       0       0
 10681 ;;      Totals:         0       5       0       0       0       0       0
 10682 ;;Total ram usage:        5 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    9
 10685 ;; This function calls:
 10686 ;;		_ReadIntFromEeprom
 10687 ;;		_SWSPI_send_word
 10688 ;;		_StoreIntInEeprom
 10689 ;; This function is called by:
 10690 ;;		_InitSystemApplicationManagers
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           	psect	text47
 10695  001B6A                     __ptext47:
 10696                           	opt stack 0
 10697  001B6A                     _DacInit:
 10698                           	opt stack 20
 10699                           
 10700                           ;DacApp.c: 14: for(int8_t idx = 0; idx < (4); idx++)
 10701                           
 10702                           ;incstack = 0
 10703  001B6A  0E00               	movlw	0
 10704  001B6C  0100               	movlb	0	; () banked
 10705  001B6E  6FD4               	movwf	DacInit@idx& (0+255),b
 10706  001B70                     l7853:
 10707                           
 10708                           ; BSR set to: 0
 10709  001B70  51D4               	movf	DacInit@idx& (0+255),w,b
 10710  001B72  0A80               	xorlw	128
 10711  001B74  0F7C               	addlw	-132
 10712  001B76  B0D8               	btfsc	status,0,c
 10713  001B78  0012               	return	
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;DacApp.c: 15: {
 10717                           ;DacApp.c: 16: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10718                           
 10719                           ; BSR set to: 0
 10720                           
 10721                           ; BSR set to: 0
 10722  001B7A  0E00               	movlw	0
 10723  001B7C  6FBA               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10724  001B7E  0E02               	movlw	2
 10725  001B80  6FB9               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10726  001B82  51D4               	movf	DacInit@idx& (0+255),w,b
 10727  001B84  0D01               	mullw	1
 10728  001B86  0EFD               	movlw	low _DAC_ADDRES
 10729  001B88  24F3               	addwf	prodl,w,c
 10730  001B8A  6EF6               	movwf	tblptrl,c
 10731  001B8C  0E79               	movlw	high _DAC_ADDRES
 10732  001B8E  20F4               	addwfc	prodh,w,c
 10733  001B90  6EF7               	movwf	tblptrh,c
 10734  001B92                     	if	0	;There are less than 3 active tblptr bytes
 10735  001B92                     	endif
 10736  001B92  0008               	tblrd		*
 10737  001B94  50F5               	movf	tablat,w,c
 10738  001B96  0940               	iorlw	64
 10739  001B98  EC09  F00A         	call	_ReadIntFromEeprom
 10740  001B9C  C0B9  F0D2         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10741  001BA0  C0BA  F0D3         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10742                           
 10743                           ;DacApp.c: 17: if(dacInput == 0xFFFF)
 10744  001BA4  0100               	movlb	0	; () banked
 10745  001BA6  29D2               	incf	DacInit@dacInput& (0+255),w,b
 10746  001BA8  E144               	bnz	l7865
 10747  001BAA  29D3               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10748  001BAC  A4D8               	btfss	status,2,c
 10749  001BAE  D041               	goto	l461
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;DacApp.c: 18: {
 10753                           ;DacApp.c: 19: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10754  001BB0  51D4               	movf	DacInit@idx& (0+255),w,b
 10755  001BB2  0D02               	mullw	2
 10756  001BB4  0EF5               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10757  001BB6  24F3               	addwf	prodl,w,c
 10758  001BB8  6EF6               	movwf	tblptrl,c
 10759  001BBA  0E79               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10760  001BBC  20F4               	addwfc	prodh,w,c
 10761  001BBE  6EF7               	movwf	tblptrh,c
 10762  001BC0                     	if	0	;There are less than 3 active tblptr bytes
 10763  001BC0                     	endif
 10764  001BC0  0009               	tblrd		*+
 10765  001BC2  CFF5 F0D0          	movff	tablat,??_DacInit
 10766  001BC6  0009               	tblrd		*+
 10767  001BC8  CFF5 F0D1          	movff	tablat,??_DacInit+1
 10768  001BCC  C0D0  F028         	movff	??_DacInit,SWSPI_send_word@data
 10769  001BD0  C0D1  F029         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10770  001BD4  6A2A               	clrf	SWSPI_send_word@data+2,c
 10771  001BD6  6A2B               	clrf	SWSPI_send_word@data+3,c
 10772  001BD8  0E01               	movlw	1
 10773  001BDA  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10774  001BDC  0E02               	movlw	2
 10775  001BDE  EC95  F011         	call	_SWSPI_send_word
 10776                           
 10777                           ;DacApp.c: 20: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 10778  001BE2  0100               	movlb	0	; () banked
 10779  001BE4  51D4               	movf	DacInit@idx& (0+255),w,b
 10780  001BE6  0D02               	mullw	2
 10781  001BE8  0EF5               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10782  001BEA  24F3               	addwf	prodl,w,c
 10783  001BEC  6EF6               	movwf	tblptrl,c
 10784  001BEE  0E79               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10785  001BF0  20F4               	addwfc	prodh,w,c
 10786  001BF2  6EF7               	movwf	tblptrh,c
 10787  001BF4                     	if	0	;There are less than 3 active tblptr bytes
 10788  001BF4                     	endif
 10789  001BF4  0009               	tblrd		*+
 10790  001BF6  CFF5 F0D0          	movff	tablat,??_DacInit
 10791  001BFA  0009               	tblrd		*+
 10792  001BFC  CFF5 F0D1          	movff	tablat,??_DacInit+1
 10793  001C00  C0D0  F021         	movff	??_DacInit,StoreIntInEeprom@data
 10794  001C04  C0D1  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 10795  001C08  6A23               	clrf	StoreIntInEeprom@data+2,c
 10796  001C0A  6A24               	clrf	StoreIntInEeprom@data+3,c
 10797  001C0C  51D4               	movf	DacInit@idx& (0+255),w,b
 10798  001C0E  0D01               	mullw	1
 10799  001C10  0EFD               	movlw	low _DAC_ADDRES
 10800  001C12  24F3               	addwf	prodl,w,c
 10801  001C14  6EF6               	movwf	tblptrl,c
 10802  001C16  0E79               	movlw	high _DAC_ADDRES
 10803  001C18  20F4               	addwfc	prodh,w,c
 10804  001C1A  6EF7               	movwf	tblptrh,c
 10805  001C1C                     	if	0	;There are less than 3 active tblptr bytes
 10806  001C1C                     	endif
 10807  001C1C  0008               	tblrd		*
 10808  001C1E  50F5               	movf	tablat,w,c
 10809  001C20  0940               	iorlw	64
 10810  001C22  6E25               	movwf	StoreIntInEeprom@address,c
 10811  001C24  0E00               	movlw	0
 10812  001C26  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10813  001C28  0E02               	movlw	2
 10814  001C2A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10815  001C2C  ECF8  F016         	call	_StoreIntInEeprom	;wreg free
 10816                           
 10817                           ;DacApp.c: 21: }
 10818  001C30  D00B               	goto	l462
 10819  001C32                     l461:
 10820  001C32                     l7865:
 10821                           
 10822                           ;DacApp.c: 22: else
 10823                           ;DacApp.c: 23: {
 10824                           ;DacApp.c: 24: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10825  001C32  C0D2  F028         	movff	DacInit@dacInput,SWSPI_send_word@data
 10826  001C36  C0D3  F029         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10827  001C3A  6A2A               	clrf	SWSPI_send_word@data+2,c
 10828  001C3C  6A2B               	clrf	SWSPI_send_word@data+3,c
 10829  001C3E  0E01               	movlw	1
 10830  001C40  6E2C               	movwf	SWSPI_send_word@dataSize,c
 10831  001C42  0E02               	movlw	2
 10832  001C44  EC95  F011         	call	_SWSPI_send_word
 10833  001C48                     l462:
 10834  001C48  0100               	movlb	0	; () banked
 10835  001C4A  2BD4               	incf	DacInit@idx& (0+255),f,b
 10836  001C4C  D791               	goto	l7853
 10837  001C4E                     __end_of_DacInit:
 10838                           	opt stack 0
 10839                           tosu	equ	0xFFF
 10840                           tosh	equ	0xFFE
 10841                           tosl	equ	0xFFD
 10842                           pclath	equ	0xFFA
 10843                           tblptru	equ	0xFF8
 10844                           tblptrh	equ	0xFF7
 10845                           tblptrl	equ	0xFF6
 10846                           tablat	equ	0xFF5
 10847                           prodh	equ	0xFF4
 10848                           prodl	equ	0xFF3
 10849                           intcon	equ	0xFF2
 10850                           intcon2	equ	0xFF1
 10851                           indf0	equ	0xFEF
 10852                           postinc0	equ	0xFEE
 10853                           fsr0h	equ	0xFEA
 10854                           fsr0l	equ	0xFE9
 10855                           wreg	equ	0xFE8
 10856                           indf1	equ	0xFE7
 10857                           postdec1	equ	0xFE5
 10858                           fsr1h	equ	0xFE2
 10859                           fsr1l	equ	0xFE1
 10860                           indf2	equ	0xFDF
 10861                           postinc2	equ	0xFDE
 10862                           postdec2	equ	0xFDD
 10863                           fsr2h	equ	0xFDA
 10864                           fsr2l	equ	0xFD9
 10865                           status	equ	0xFD8
 10866                           
 10867 ;; *************** function _StoreIntInEeprom *****************
 10868 ;; Defined at:
 10869 ;;		line 38 in file "SystemCommon.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;  data            4   32[COMRAM] unsigned long 
 10872 ;;  address         1   36[COMRAM] unsigned char 
 10873 ;;  numOfByes       2   37[COMRAM] int 
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  val             1   39[COMRAM] unsigned char 
 10876 ;;  idx             1   40[COMRAM] unsigned char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      void 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10886 ;;      Params:         7       0       0       0       0       0       0
 10887 ;;      Locals:         2       0       0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0
 10889 ;;      Totals:         9       0       0       0       0       0       0
 10890 ;;Total ram usage:        9 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    5
 10893 ;; This function calls:
 10894 ;;		_EepromWrite
 10895 ;;		_make8
 10896 ;; This function is called by:
 10897 ;;		_DacInit
 10898 ;;		_DacSetValue
 10899 ;; This function uses a non-reentrant model
 10900 ;;
 10901                           
 10902                           	psect	text48
 10903  002DF0                     __ptext48:
 10904                           	opt stack 0
 10905  002DF0                     _StoreIntInEeprom:
 10906                           	opt stack 22
 10907                           
 10908                           ;SystemCommon.c: 40: for(uint8_t idx = numOfByes; idx; idx--)
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;incstack = 0
 10912  002DF0  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 10913  002DF4  D015               	goto	l1252
 10914  002DF6                     
 10915                           ;SystemCommon.c: 41: {
 10916                           ;SystemCommon.c: 42: uint8_t val = make8(data, idx - 1);
 10917  002DF6  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 10918  002DFA  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 10919  002DFE  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 10920  002E02  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 10921  002E06  0429               	decf	StoreIntInEeprom@idx,w,c
 10922  002E08  6E1C               	movwf	make8@dataLocation,c
 10923  002E0A  ECF5  F013         	call	_make8	;wreg free
 10924  002E0E  6E28               	movwf	StoreIntInEeprom@val,c
 10925                           
 10926                           ;SystemCommon.c: 43: EepromWrite(address - idx, val);
 10927  002E10  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 10928  002E14  5029               	movf	StoreIntInEeprom@idx,w,c
 10929  002E16  0800               	sublw	0
 10930  002E18  2425               	addwf	StoreIntInEeprom@address,w,c
 10931  002E1A  ECD9  F018         	call	_EepromWrite
 10932  002E1E  0629               	decf	StoreIntInEeprom@idx,f,c
 10933  002E20                     l1252:
 10934  002E20  5029               	movf	StoreIntInEeprom@idx,w,c
 10935  002E22  B4D8               	btfsc	status,2,c
 10936  002E24  0012               	return	
 10937  002E26  D7E7               	goto	l1253
 10938  002E28                     __end_of_StoreIntInEeprom:
 10939                           	opt stack 0
 10940                           tosu	equ	0xFFF
 10941                           tosh	equ	0xFFE
 10942                           tosl	equ	0xFFD
 10943                           pclath	equ	0xFFA
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           intcon2	equ	0xFF1
 10952                           indf0	equ	0xFEF
 10953                           postinc0	equ	0xFEE
 10954                           fsr0h	equ	0xFEA
 10955                           fsr0l	equ	0xFE9
 10956                           wreg	equ	0xFE8
 10957                           indf1	equ	0xFE7
 10958                           postdec1	equ	0xFE5
 10959                           fsr1h	equ	0xFE2
 10960                           fsr1l	equ	0xFE1
 10961                           indf2	equ	0xFDF
 10962                           postinc2	equ	0xFDE
 10963                           postdec2	equ	0xFDD
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function _EepromWrite *****************
 10969 ;; Defined at:
 10970 ;;		line 220 in file "FlashApp.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  address         1    wreg     unsigned char 
 10973 ;;  data            1   26[COMRAM] unsigned char 
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;  address         1   27[COMRAM] unsigned char 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      void 
 10978 ;; Registers used:
 10979 ;;		wreg, status,2, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10985 ;;      Params:         1       0       0       0       0       0       0
 10986 ;;      Locals:         1       0       0       0       0       0       0
 10987 ;;      Temps:          0       0       0       0       0       0       0
 10988 ;;      Totals:         2       0       0       0       0       0       0
 10989 ;;Total ram usage:        2 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    4
 10992 ;; This function calls:
 10993 ;;		_DATAEE_WriteByte
 10994 ;; This function is called by:
 10995 ;;		_StoreIntInEeprom
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text49
 11000  0031B2                     __ptext49:
 11001                           	opt stack 0
 11002  0031B2                     _EepromWrite:
 11003                           	opt stack 22
 11004                           
 11005                           ;incstack = 0
 11006                           ;EepromWrite@address stored from wreg
 11007  0031B2  6E1C               	movwf	EepromWrite@address,c
 11008                           
 11009                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
 11010  0031B4  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11011  0031B8  501C               	movf	EepromWrite@address,w,c
 11012  0031BA  EC4C  F017         	call	_DATAEE_WriteByte
 11013  0031BE  0012               	return		;funcret
 11014  0031C0                     __end_of_EepromWrite:
 11015                           	opt stack 0
 11016                           tosu	equ	0xFFF
 11017                           tosh	equ	0xFFE
 11018                           tosl	equ	0xFFD
 11019                           pclath	equ	0xFFA
 11020                           tblptru	equ	0xFF8
 11021                           tblptrh	equ	0xFF7
 11022                           tblptrl	equ	0xFF6
 11023                           tablat	equ	0xFF5
 11024                           prodh	equ	0xFF4
 11025                           prodl	equ	0xFF3
 11026                           intcon	equ	0xFF2
 11027                           intcon2	equ	0xFF1
 11028                           indf0	equ	0xFEF
 11029                           postinc0	equ	0xFEE
 11030                           fsr0h	equ	0xFEA
 11031                           fsr0l	equ	0xFE9
 11032                           wreg	equ	0xFE8
 11033                           indf1	equ	0xFE7
 11034                           postdec1	equ	0xFE5
 11035                           fsr1h	equ	0xFE2
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           fsr2h	equ	0xFDA
 11041                           fsr2l	equ	0xFD9
 11042                           status	equ	0xFD8
 11043                           
 11044 ;; *************** function _DATAEE_WriteByte *****************
 11045 ;; Defined at:
 11046 ;;		line 167 in file "mcc_generated_files/memory.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;  bAdd            1    wreg     unsigned char 
 11049 ;;  bData           1   23[COMRAM] unsigned char 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  bAdd            1   24[COMRAM] unsigned char 
 11052 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      void 
 11055 ;; Registers used:
 11056 ;;		wreg, status,2
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11062 ;;      Params:         1       0       0       0       0       0       0
 11063 ;;      Locals:         2       0       0       0       0       0       0
 11064 ;;      Temps:          0       0       0       0       0       0       0
 11065 ;;      Totals:         3       0       0       0       0       0       0
 11066 ;;Total ram usage:        3 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    3
 11069 ;; This function calls:
 11070 ;;		Nothing
 11071 ;; This function is called by:
 11072 ;;		_EepromWrite
 11073 ;;		_EepromTest
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text50
 11078  002E98                     __ptext50:
 11079                           	opt stack 0
 11080  002E98                     _DATAEE_WriteByte:
 11081                           	opt stack 22
 11082                           
 11083                           ;incstack = 0
 11084                           ;DATAEE_WriteByte@bAdd stored from wreg
 11085  002E98  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11086                           
 11087                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11088  002E9A  0E00               	movlw	0
 11089  002E9C  BEF2               	btfsc	intcon,7,c	;volatile
 11090  002E9E  0E01               	movlw	1
 11091  002EA0  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11092                           
 11093                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11094  002EA2  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11095                           
 11096                           ;memory.c: 172: EEDATA = bData;
 11097  002EA6  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11098                           
 11099                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11100  002EAA  9EA6               	bcf	4006,7,c	;volsfr
 11101                           
 11102                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11103  002EAC  9CA6               	bcf	4006,6,c	;volsfr
 11104                           
 11105                           ;memory.c: 175: EECON1bits.WREN = 1;
 11106  002EAE  84A6               	bsf	4006,2,c	;volsfr
 11107                           
 11108                           ;memory.c: 176: INTCONbits.GIE = 0;
 11109  002EB0  9EF2               	bcf	intcon,7,c	;volatile
 11110                           
 11111                           ;memory.c: 177: EECON2 = 0x55;
 11112  002EB2  0E55               	movlw	85
 11113  002EB4  6EA7               	movwf	4007,c	;volsfr
 11114                           
 11115                           ;memory.c: 178: EECON2 = 0xAA;
 11116  002EB6  0EAA               	movlw	170
 11117  002EB8  6EA7               	movwf	4007,c	;volsfr
 11118                           
 11119                           ;memory.c: 179: EECON1bits.WR = 1;
 11120  002EBA  82A6               	bsf	4006,1,c	;volsfr
 11121  002EBC                     
 11122                           ;memory.c: 182: {
 11123  002EBC  B2A6               	btfsc	4006,1,c	;volsfr
 11124  002EBE  D7FE               	goto	l970
 11125                           
 11126                           ;memory.c: 183: }
 11127                           ;memory.c: 185: EECON1bits.WREN = 0;
 11128  002EC0  94A6               	bcf	4006,2,c	;volsfr
 11129                           
 11130                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11131  002EC2  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11132  002EC4  D002               	bra	u3895
 11133  002EC6  9EF2               	bcf	intcon,7,c	;volatile
 11134  002EC8  D001               	bra	u3896
 11135  002ECA                     u3895:
 11136  002ECA  8EF2               	bsf	intcon,7,c	;volatile
 11137  002ECC                     u3896:
 11138  002ECC  0012               	return		;funcret
 11139  002ECE                     __end_of_DATAEE_WriteByte:
 11140                           	opt stack 0
 11141                           tosu	equ	0xFFF
 11142                           tosh	equ	0xFFE
 11143                           tosl	equ	0xFFD
 11144                           pclath	equ	0xFFA
 11145                           tblptru	equ	0xFF8
 11146                           tblptrh	equ	0xFF7
 11147                           tblptrl	equ	0xFF6
 11148                           tablat	equ	0xFF5
 11149                           prodh	equ	0xFF4
 11150                           prodl	equ	0xFF3
 11151                           intcon	equ	0xFF2
 11152                           intcon2	equ	0xFF1
 11153                           indf0	equ	0xFEF
 11154                           postinc0	equ	0xFEE
 11155                           fsr0h	equ	0xFEA
 11156                           fsr0l	equ	0xFE9
 11157                           wreg	equ	0xFE8
 11158                           indf1	equ	0xFE7
 11159                           postdec1	equ	0xFE5
 11160                           fsr1h	equ	0xFE2
 11161                           fsr1l	equ	0xFE1
 11162                           indf2	equ	0xFDF
 11163                           postinc2	equ	0xFDE
 11164                           postdec2	equ	0xFDD
 11165                           fsr2h	equ	0xFDA
 11166                           fsr2l	equ	0xFD9
 11167                           status	equ	0xFD8
 11168                           
 11169 ;; *************** function _SWSPI_send_word *****************
 11170 ;; Defined at:
 11171 ;;		line 17 in file "SwSpiApp.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;  phrType         1    wreg     enum E181
 11174 ;;  data            4   39[COMRAM] unsigned long 
 11175 ;;  dataSize        1   43[COMRAM] unsigned char 
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;  phrType         1   47[COMRAM] enum E181
 11178 ;;  datac           1   44[COMRAM] unsigned char 
 11179 ;;  idx             2   45[COMRAM] int 
 11180 ;; Return value:  Size  Location     Type
 11181 ;;                  1    wreg      void 
 11182 ;; Registers used:
 11183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 0/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11189 ;;      Params:         5       0       0       0       0       0       0
 11190 ;;      Locals:         4       0       0       0       0       0       0
 11191 ;;      Temps:          0       0       0       0       0       0       0
 11192 ;;      Totals:         9       0       0       0       0       0       0
 11193 ;;Total ram usage:        9 bytes
 11194 ;; Hardware stack levels used:    1
 11195 ;; Hardware stack levels required when called:    6
 11196 ;; This function calls:
 11197 ;;		_SWSPI_DAC_send_bits
 11198 ;;		_SWSPI_Synth_send_bits
 11199 ;;		_SwSpi_Set_Dac_Sync_Pin
 11200 ;;		_SwSpi_Set_Synth_Le_Pin
 11201 ;;		_make8
 11202 ;; This function is called by:
 11203 ;;		_DacInit
 11204 ;;		_DacSetValue
 11205 ;;		_PLLInitialize
 11206 ;;		_UpdateTxFreq
 11207 ;;		_UpdateRxFreq
 11208 ;; This function uses a non-reentrant model
 11209 ;;
 11210                           
 11211                           	psect	text51
 11212  00232A                     __ptext51:
 11213                           	opt stack 0
 11214  00232A                     _SWSPI_send_word:
 11215                           	opt stack 21
 11216                           
 11217                           ;incstack = 0
 11218                           ;SWSPI_send_word@phrType stored from wreg
 11219  00232A  6E30               	movwf	SWSPI_send_word@phrType,c
 11220                           
 11221                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11222  00232C  9EF2               	bcf	intcon,7,c	;volatile
 11223                           
 11224                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11225  00232E  5030               	movf	SWSPI_send_word@phrType,w,c
 11226  002330  B4D8               	btfsc	status,2,c
 11227  002332  D003               	goto	u7920
 11228  002334  0430               	decf	SWSPI_send_word@phrType,w,c
 11229  002336  A4D8               	btfss	status,2,c
 11230  002338  D016               	goto	l586
 11231  00233A                     u7920:
 11232                           
 11233                           ;SwSpiApp.c: 24: {
 11234                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 11235  00233A  0E00               	movlw	0
 11236  00233C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11237  00233E  5030               	movf	SWSPI_send_word@phrType,w,c
 11238  002340  ECA1  F016         	call	_SwSpi_Set_Synth_Le_Pin
 11239                           
 11240                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 11241  002344  C028  F024         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 11242  002348  C029  F025         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 11243  00234C  C02A  F026         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 11244  002350  C02B  F027         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 11245  002354  5030               	movf	SWSPI_send_word@phrType,w,c
 11246  002356  ECD4  F00F         	call	_SWSPI_Synth_send_bits
 11247                           
 11248                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 11249  00235A  0E01               	movlw	1
 11250  00235C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11251  00235E  5030               	movf	SWSPI_send_word@phrType,w,c
 11252  002360  ECA1  F016         	call	_SwSpi_Set_Synth_Le_Pin
 11253                           
 11254                           ;SwSpiApp.c: 28: }
 11255  002364  D02D               	goto	l590
 11256  002366                     l586:
 11257                           
 11258                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 11259  002366  0E02               	movlw	2
 11260  002368  1830               	xorwf	SWSPI_send_word@phrType,w,c
 11261  00236A  A4D8               	btfss	status,2,c
 11262  00236C  D029               	goto	l590
 11263                           
 11264                           ;SwSpiApp.c: 30: {
 11265                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 11266  00236E  0E00               	movlw	0
 11267  002370  EC77  F018         	call	_SwSpi_Set_Dac_Sync_Pin
 11268                           
 11269                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 11270  002374  0E01               	movlw	1
 11271  002376  242C               	addwf	SWSPI_send_word@dataSize,w,c
 11272  002378  6E2E               	movwf	SWSPI_send_word@idx,c
 11273  00237A  6A2F               	clrf	SWSPI_send_word@idx+1,c
 11274  00237C  0E00               	movlw	0
 11275  00237E  222F               	addwfc	SWSPI_send_word@idx+1,f,c
 11276  002380                     l7625:
 11277  002380  BE2F               	btfsc	SWSPI_send_word@idx+1,7,c
 11278  002382  D01B               	goto	u7950
 11279  002384  502F               	movf	SWSPI_send_word@idx+1,w,c
 11280  002386  E103               	bnz	l7629
 11281  002388  042E               	decf	SWSPI_send_word@idx,w,c
 11282  00238A  A0D8               	btfss	status,0,c
 11283  00238C  D016               	goto	u7950
 11284  00238E                     l7629:
 11285                           
 11286                           ;SwSpiApp.c: 33: {
 11287                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 11288  00238E  C028  F018         	movff	SWSPI_send_word@data,make8@data
 11289  002392  C029  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 11290  002396  C02A  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 11291  00239A  C02B  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 11292  00239E  042E               	decf	SWSPI_send_word@idx,w,c
 11293  0023A0  6E1C               	movwf	make8@dataLocation,c
 11294  0023A2  ECF5  F013         	call	_make8	;wreg free
 11295  0023A6  6E2D               	movwf	SWSPI_send_word@datac,c
 11296                           
 11297                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 11298  0023A8  C02D  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 11299  0023AC  5030               	movf	SWSPI_send_word@phrType,w,c
 11300  0023AE  EC7D  F014         	call	_SWSPI_DAC_send_bits
 11301  0023B2  062E               	decf	SWSPI_send_word@idx,f,c
 11302  0023B4  A0D8               	btfss	status,0,c
 11303  0023B6  062F               	decf	SWSPI_send_word@idx+1,f,c
 11304  0023B8  D7E3               	goto	l7625
 11305  0023BA                     u7950:
 11306                           
 11307                           ;SwSpiApp.c: 36: }
 11308                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 11309  0023BA  0E01               	movlw	1
 11310  0023BC  EC77  F018         	call	_SwSpi_Set_Dac_Sync_Pin
 11311  0023C0                     l590:
 11312                           
 11313                           ;SwSpiApp.c: 38: }
 11314                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 11315  0023C0  8EF2               	bsf	intcon,7,c	;volatile
 11316  0023C2  0012               	return		;funcret
 11317  0023C4                     __end_of_SWSPI_send_word:
 11318                           	opt stack 0
 11319                           tosu	equ	0xFFF
 11320                           tosh	equ	0xFFE
 11321                           tosl	equ	0xFFD
 11322                           pclath	equ	0xFFA
 11323                           tblptru	equ	0xFF8
 11324                           tblptrh	equ	0xFF7
 11325                           tblptrl	equ	0xFF6
 11326                           tablat	equ	0xFF5
 11327                           prodh	equ	0xFF4
 11328                           prodl	equ	0xFF3
 11329                           intcon	equ	0xFF2
 11330                           intcon2	equ	0xFF1
 11331                           indf0	equ	0xFEF
 11332                           postinc0	equ	0xFEE
 11333                           fsr0h	equ	0xFEA
 11334                           fsr0l	equ	0xFE9
 11335                           wreg	equ	0xFE8
 11336                           indf1	equ	0xFE7
 11337                           postdec1	equ	0xFE5
 11338                           fsr1h	equ	0xFE2
 11339                           fsr1l	equ	0xFE1
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           fsr2h	equ	0xFDA
 11344                           fsr2l	equ	0xFD9
 11345                           status	equ	0xFD8
 11346                           
 11347 ;; *************** function _make8 *****************
 11348 ;; Defined at:
 11349 ;;		line 81 in file "SystemCommon.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  data            4   23[COMRAM] unsigned long 
 11352 ;;  dataLocation    1   27[COMRAM] unsigned char 
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;		None
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      unsigned char 
 11357 ;; Registers used:
 11358 ;;		wreg, status,2, status,0
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11364 ;;      Params:         5       0       0       0       0       0       0
 11365 ;;      Locals:         0       0       0       0       0       0       0
 11366 ;;      Temps:          4       0       0       0       0       0       0
 11367 ;;      Totals:         9       0       0       0       0       0       0
 11368 ;;Total ram usage:        9 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    3
 11371 ;; This function calls:
 11372 ;;		Nothing
 11373 ;; This function is called by:
 11374 ;;		_SWSPI_send_word
 11375 ;;		_StoreIntInEeprom
 11376 ;;		_FlashReadCondition
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           	psect	text52
 11381  0027EA                     __ptext52:
 11382                           	opt stack 0
 11383  0027EA                     _make8:
 11384                           	opt stack 23
 11385                           
 11386                           ;SystemCommon.c: 83: switch(dataLocation)
 11387                           
 11388                           ;incstack = 0
 11389  0027EA  D01F               	goto	l1271
 11390  0027EC                     
 11391                           ;SystemCommon.c: 86: return (data & 0x000000ff);
 11392  0027EC  5018               	movf	make8@data,w,c
 11393  0027EE  0012               	return	
 11394  0027F0                     
 11395                           ;SystemCommon.c: 89: return (data & 0x0000ff00) >> 8;
 11396  0027F0  5019               	movf	make8@data+1,w,c
 11397  0027F2  0012               	return	
 11398  0027F4                     
 11399                           ;SystemCommon.c: 92: return (data & 0x00ff0000) >> 16;
 11400  0027F4  501A               	movf	make8@data+2,w,c
 11401  0027F6  0012               	return	
 11402  0027F8                     
 11403                           ;SystemCommon.c: 95: return (data & 0xff000000) >> 24;
 11404  0027F8  0E00               	movlw	0
 11405  0027FA  1418               	andwf	make8@data,w,c
 11406  0027FC  6E1D               	movwf	??_make8& (0+255),c
 11407  0027FE  0E00               	movlw	0
 11408  002800  1419               	andwf	make8@data+1,w,c
 11409  002802  6E1E               	movwf	(??_make8+1)& (0+255),c
 11410  002804  0E00               	movlw	0
 11411  002806  141A               	andwf	make8@data+2,w,c
 11412  002808  6E1F               	movwf	(??_make8+2)& (0+255),c
 11413  00280A  0EFF               	movlw	255
 11414  00280C  141B               	andwf	make8@data+3,w,c
 11415  00280E  6E20               	movwf	(??_make8+3)& (0+255),c
 11416  002810  0E19               	movlw	25
 11417  002812  D005               	goto	u7440
 11418  002814                     u7445:
 11419  002814  90D8               	bcf	status,0,c
 11420  002816  3220               	rrcf	??_make8+3,f,c
 11421  002818  321F               	rrcf	??_make8+2,f,c
 11422  00281A  321E               	rrcf	??_make8+1,f,c
 11423  00281C  321D               	rrcf	??_make8,f,c
 11424  00281E                     u7440:
 11425  00281E  2EE8               	decfsz	wreg,f,c
 11426  002820  D7F9               	goto	u7445
 11427  002822  501D               	movf	??_make8,w,c
 11428  002824  0012               	return	
 11429  002826                     
 11430                           ;SystemCommon.c: 98: return (0);
 11431  002826  0E00               	movlw	0
 11432                           
 11433                           ;SystemCommon.c: 99: }
 11434  002828  0012               	return	
 11435  00282A                     l1271:
 11436  00282A  501C               	movf	make8@dataLocation,w,c
 11437                           
 11438                           ; Switch size 1, requested type "space"
 11439                           ; Number of cases is 4, Range of values is 0 to 3
 11440                           ; switch strategies available:
 11441                           ; Name         Instructions Cycles
 11442                           ; simple_byte           13     7 (average)
 11443                           ;	Chosen strategy is simple_byte
 11444  00282C  0A00               	xorlw	0	; case 0
 11445  00282E  B4D8               	btfsc	status,2,c
 11446  002830  D7DD               	goto	l1272
 11447  002832  0A01               	xorlw	1	; case 1
 11448  002834  B4D8               	btfsc	status,2,c
 11449  002836  D7DC               	goto	l1274
 11450  002838  0A03               	xorlw	3	; case 2
 11451  00283A  B4D8               	btfsc	status,2,c
 11452  00283C  D7DB               	goto	l1275
 11453  00283E  0A01               	xorlw	1	; case 3
 11454  002840  B4D8               	btfsc	status,2,c
 11455  002842  D7DA               	goto	l1276
 11456  002844  D7F0               	goto	l1277
 11457  002846                     __end_of_make8:
 11458                           	opt stack 0
 11459                           tosu	equ	0xFFF
 11460                           tosh	equ	0xFFE
 11461                           tosl	equ	0xFFD
 11462                           pclath	equ	0xFFA
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           intcon2	equ	0xFF1
 11471                           indf0	equ	0xFEF
 11472                           postinc0	equ	0xFEE
 11473                           fsr0h	equ	0xFEA
 11474                           fsr0l	equ	0xFE9
 11475                           wreg	equ	0xFE8
 11476                           indf1	equ	0xFE7
 11477                           postdec1	equ	0xFE5
 11478                           fsr1h	equ	0xFE2
 11479                           fsr1l	equ	0xFE1
 11480                           indf2	equ	0xFDF
 11481                           postinc2	equ	0xFDE
 11482                           postdec2	equ	0xFDD
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 11488 ;; Defined at:
 11489 ;;		line 232 in file "SwSpiApp.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;  phrType         1    wreg     enum E181
 11492 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  phrType         1   24[COMRAM] enum E181
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  1    wreg      void 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2, status,0
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11504 ;;      Params:         1       0       0       0       0       0       0
 11505 ;;      Locals:         1       0       0       0       0       0       0
 11506 ;;      Temps:          0       0       0       0       0       0       0
 11507 ;;      Totals:         2       0       0       0       0       0       0
 11508 ;;Total ram usage:        2 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    3
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_SWSPI_send_word
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text53
 11519  002D42                     __ptext53:
 11520                           	opt stack 0
 11521  002D42                     _SwSpi_Set_Synth_Le_Pin:
 11522                           	opt stack 23
 11523                           
 11524                           ;incstack = 0
 11525                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 11526  002D42  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 11527                           
 11528                           ;SwSpiApp.c: 234: switch(phrType)
 11529  002D44  D014               	goto	l698
 11530  002D46                     
 11531                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 11532  002D46  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11533  002D48  A4D8               	btfss	status,2,c
 11534  002D4A  D002               	goto	l700
 11535                           
 11536                           ;SwSpiApp.c: 238: {
 11537                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 11538  002D4C  848B               	bsf	3979,2,c	;volatile
 11539                           
 11540                           ;SwSpiApp.c: 240: }
 11541  002D4E  0012               	return	
 11542  002D50                     l700:
 11543                           
 11544                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 11545  002D50  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11546  002D52  A4D8               	btfss	status,2,c
 11547  002D54  0012               	return	
 11548                           
 11549                           ;SwSpiApp.c: 242: {
 11550                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 11551  002D56  948B               	bcf	3979,2,c	;volatile
 11552                           
 11553                           ;SwSpiApp.c: 244: }
 11554                           ;SwSpiApp.c: 245: break;
 11555  002D58  0012               	return	
 11556  002D5A                     
 11557                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 11558  002D5A  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11559  002D5C  A4D8               	btfss	status,2,c
 11560  002D5E  D002               	goto	l709
 11561                           
 11562                           ;SwSpiApp.c: 249: {
 11563                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 11564  002D60  868C               	bsf	3980,3,c	;volatile
 11565                           
 11566                           ;SwSpiApp.c: 251: }
 11567  002D62  0012               	return	
 11568  002D64                     l709:
 11569                           
 11570                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 11571  002D64  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 11572  002D66  A4D8               	btfss	status,2,c
 11573  002D68  0012               	return	
 11574                           
 11575                           ;SwSpiApp.c: 253: {
 11576                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 11577  002D6A  968C               	bcf	3980,3,c	;volatile
 11578                           
 11579                           ;SwSpiApp.c: 257: }
 11580                           
 11581                           ;SwSpiApp.c: 255: }
 11582                           ;SwSpiApp.c: 256: break;
 11583  002D6C  0012               	return	
 11584  002D6E                     l698:
 11585  002D6E  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 11586                           
 11587                           ; Switch size 1, requested type "space"
 11588                           ; Number of cases is 2, Range of values is 0 to 1
 11589                           ; switch strategies available:
 11590                           ; Name         Instructions Cycles
 11591                           ; simple_byte            7     4 (average)
 11592                           ;	Chosen strategy is simple_byte
 11593  002D70  0A00               	xorlw	0	; case 0
 11594  002D72  B4D8               	btfsc	status,2,c
 11595  002D74  D7E8               	goto	l699
 11596  002D76  0A01               	xorlw	1	; case 1
 11597  002D78  A4D8               	btfss	status,2,c
 11598  002D7A  0012               	return	
 11599  002D7C  D7EE               	goto	l708
 11600  002D7E                     __end_of_SwSpi_Set_Synth_Le_Pin:
 11601                           	opt stack 0
 11602                           tosu	equ	0xFFF
 11603                           tosh	equ	0xFFE
 11604                           tosl	equ	0xFFD
 11605                           pclath	equ	0xFFA
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           indf0	equ	0xFEF
 11615                           postinc0	equ	0xFEE
 11616                           fsr0h	equ	0xFEA
 11617                           fsr0l	equ	0xFE9
 11618                           wreg	equ	0xFE8
 11619                           indf1	equ	0xFE7
 11620                           postdec1	equ	0xFE5
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 11631 ;; Defined at:
 11632 ;;		line 260 in file "SwSpiApp.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  cPinMode        1    wreg     unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, status,0
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11646 ;;      Params:         0       0       0       0       0       0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0
 11649 ;;      Totals:         1       0       0       0       0       0       0
 11650 ;;Total ram usage:        1 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    3
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_SWSPI_send_word
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text54
 11661  0030EE                     __ptext54:
 11662                           	opt stack 0
 11663  0030EE                     _SwSpi_Set_Dac_Sync_Pin:
 11664                           	opt stack 23
 11665                           
 11666                           ;incstack = 0
 11667                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 11668  0030EE  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 11669                           
 11670                           ;SwSpiApp.c: 262: switch(cPinMode)
 11671  0030F0  D004               	goto	l719
 11672  0030F2                     
 11673                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 11674  0030F2  9489               	bcf	3977,2,c	;volatile
 11675                           
 11676                           ;SwSpiApp.c: 266: break;
 11677  0030F4  0012               	return	
 11678  0030F6                     
 11679                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 11680  0030F6  8489               	bsf	3977,2,c	;volatile
 11681                           
 11682                           ;SwSpiApp.c: 271: }
 11683                           
 11684                           ;SwSpiApp.c: 270: break;
 11685  0030F8  0012               	return	
 11686  0030FA                     l719:
 11687  0030FA  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 11688                           
 11689                           ; Switch size 1, requested type "space"
 11690                           ; Number of cases is 2, Range of values is 0 to 1
 11691                           ; switch strategies available:
 11692                           ; Name         Instructions Cycles
 11693                           ; simple_byte            7     4 (average)
 11694                           ;	Chosen strategy is simple_byte
 11695  0030FC  0A00               	xorlw	0	; case 0
 11696  0030FE  B4D8               	btfsc	status,2,c
 11697  003100  D7F8               	goto	l720
 11698  003102  0A01               	xorlw	1	; case 1
 11699  003104  A4D8               	btfss	status,2,c
 11700  003106  0012               	return	
 11701  003108  D7F6               	goto	l724
 11702  00310A                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 11703                           	opt stack 0
 11704                           tosu	equ	0xFFF
 11705                           tosh	equ	0xFFE
 11706                           tosl	equ	0xFFD
 11707                           pclath	equ	0xFFA
 11708                           tblptru	equ	0xFF8
 11709                           tblptrh	equ	0xFF7
 11710                           tblptrl	equ	0xFF6
 11711                           tablat	equ	0xFF5
 11712                           prodh	equ	0xFF4
 11713                           prodl	equ	0xFF3
 11714                           intcon	equ	0xFF2
 11715                           intcon2	equ	0xFF1
 11716                           indf0	equ	0xFEF
 11717                           postinc0	equ	0xFEE
 11718                           fsr0h	equ	0xFEA
 11719                           fsr0l	equ	0xFE9
 11720                           wreg	equ	0xFE8
 11721                           indf1	equ	0xFE7
 11722                           postdec1	equ	0xFE5
 11723                           fsr1h	equ	0xFE2
 11724                           fsr1l	equ	0xFE1
 11725                           indf2	equ	0xFDF
 11726                           postinc2	equ	0xFDE
 11727                           postdec2	equ	0xFDD
 11728                           fsr2h	equ	0xFDA
 11729                           fsr2l	equ	0xFD9
 11730                           status	equ	0xFD8
 11731                           
 11732 ;; *************** function _SWSPI_Synth_send_bits *****************
 11733 ;; Defined at:
 11734 ;;		line 67 in file "SwSpiApp.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;  phrType         1    wreg     enum E181
 11737 ;;  data            4   35[COMRAM] unsigned long 
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  phrType         1   37[BANK0 ] enum E181
 11740 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 11741 ;;  mask            4   32[BANK0 ] unsigned long 
 11742 ;;  count           1   36[BANK0 ] unsigned char 
 11743 ;; Return value:  Size  Location     Type
 11744 ;;                  1    wreg      void 
 11745 ;; Registers used:
 11746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11747 ;; Tracked objects:
 11748 ;;		On entry : 0/0
 11749 ;;		On exit  : 0/0
 11750 ;;		Unchanged: 0/0
 11751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11752 ;;      Params:         4       0       0       0       0       0       0
 11753 ;;      Locals:         0      38       0       0       0       0       0
 11754 ;;      Temps:          0       0       0       0       0       0       0
 11755 ;;      Totals:         4      38       0       0       0       0       0
 11756 ;;Total ram usage:       42 bytes
 11757 ;; Hardware stack levels used:    1
 11758 ;; Hardware stack levels required when called:    5
 11759 ;; This function calls:
 11760 ;;		_Make32bitsArray
 11761 ;;		_SwSpi_Clk_Pin
 11762 ;;		_SwSpi_Data_Pin
 11763 ;;		_ZeroArray
 11764 ;; This function is called by:
 11765 ;;		_SWSPI_send_word
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text55
 11770  001FA8                     __ptext55:
 11771                           	opt stack 0
 11772  001FA8                     _SWSPI_Synth_send_bits:
 11773                           	opt stack 21
 11774                           
 11775                           ;incstack = 0
 11776                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 11777  001FA8  0100               	movlb	0	; () banked
 11778  001FAA  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 11779                           
 11780                           ;SwSpiApp.c: 69: uint8_t count;
 11781                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 11782  001FAC  0E01               	movlw	1
 11783  001FAE  0100               	movlb	0	; () banked
 11784  001FB0  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 11785  001FB2  0E00               	movlw	0
 11786  001FB4  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 11787  001FB6  0E00               	movlw	0
 11788  001FB8  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 11789  001FBA  0E00               	movlw	0
 11790  001FBC  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;SwSpiApp.c: 72: bool bitArray[32];
 11794                           ;SwSpiApp.c: 73: ZeroArray(bitArray, sizeof(bitArray));
 11795  001FBE  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11796  001FC0  6E20               	movwf	ZeroArray@array,c
 11797  001FC2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11798  001FC4  6E21               	movwf	ZeroArray@array+1,c
 11799  001FC6  0E00               	movlw	0
 11800  001FC8  6E23               	movwf	ZeroArray@size+1,c
 11801  001FCA  0E20               	movlw	32
 11802  001FCC  6E22               	movwf	ZeroArray@size,c
 11803  001FCE  EC68  F018         	call	_ZeroArray	;wreg free
 11804                           
 11805                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 11806  001FD2  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11807  001FD4  6E18               	movwf	Make32bitsArray@array,c
 11808  001FD6  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11809  001FD8  6E19               	movwf	Make32bitsArray@array+1,c
 11810  001FDA  C024  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 11811  001FDE  C025  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 11812  001FE2  C026  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 11813  001FE6  C027  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 11814  001FEA  EC51  F014         	call	_Make32bitsArray	;wreg free
 11815                           
 11816                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 11817  001FEE  0E00               	movlw	0
 11818  001FF0  0100               	movlb	0	; () banked
 11819  001FF2  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 11820  001FF4                     l7327:
 11821                           
 11822                           ; BSR set to: 0
 11823  001FF4  0E1F               	movlw	31
 11824  001FF6  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 11825  001FF8  D001               	goto	l604
 11826  001FFA  D026               	goto	u7510
 11827  001FFC                     l604:
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;SwSpiApp.c: 78: {
 11831                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 11832                           
 11833                           ; BSR set to: 0
 11834  001FFC  0E00               	movlw	0
 11835  001FFE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11836  002000  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11837  002002  ECD4  F014         	call	_SwSpi_Clk_Pin
 11838                           
 11839                           ;SwSpiApp.c: 82: if (bitArray[count])
 11840  002006  0100               	movlb	0	; () banked
 11841  002008  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 11842  00200A  0D01               	mullw	1
 11843  00200C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11844  00200E  24F3               	addwf	prodl,w,c
 11845  002010  6ED9               	movwf	fsr2l,c
 11846  002012  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11847  002014  20F4               	addwfc	prodh,w,c
 11848  002016  6EDA               	movwf	fsr2h,c
 11849  002018  50DF               	movf	indf2,w,c
 11850  00201A  B4D8               	btfsc	status,2,c
 11851  00201C  D006               	goto	l606
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;SwSpiApp.c: 83: {
 11855                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 11856  00201E  0E01               	movlw	1
 11857  002020  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11858  002022  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11859  002024  ECA9  F014         	call	_SwSpi_Data_Pin
 11860                           
 11861                           ;SwSpiApp.c: 85: }
 11862  002028  D006               	goto	l607
 11863  00202A                     l606:
 11864                           
 11865                           ;SwSpiApp.c: 86: else
 11866                           ;SwSpiApp.c: 87: {
 11867                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 11868  00202A  0E00               	movlw	0
 11869  00202C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11870  00202E  0100               	movlb	0	; () banked
 11871  002030  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11872  002032  ECA9  F014         	call	_SwSpi_Data_Pin
 11873  002036                     l607:
 11874                           
 11875                           ;SwSpiApp.c: 89: }
 11876                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 11877  002036  0E01               	movlw	1
 11878  002038  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11879  00203A  0100               	movlb	0	; () banked
 11880  00203C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11881  00203E  ECD4  F014         	call	_SwSpi_Clk_Pin
 11882  002042  0100               	movlb	0	; () banked
 11883  002044  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 11884  002046  D7D6               	goto	l7327
 11885  002048                     u7510:
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;SwSpiApp.c: 92: }
 11889                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 11890                           
 11891                           ; BSR set to: 0
 11892  002048  0E21               	movlw	33
 11893  00204A                     u8837:
 11894  00204A  2EE8               	decfsz	wreg,f,c
 11895  00204C  D7FE               	bra	u8837
 11896  00204E  F000               	nop	
 11897                           
 11898                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 11899  002050  0E00               	movlw	0
 11900  002052  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11901  002054  0100               	movlb	0	; () banked
 11902  002056  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11903  002058  ECA9  F014         	call	_SwSpi_Data_Pin
 11904                           
 11905                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 11906  00205C  0E00               	movlw	0
 11907  00205E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11908  002060  0100               	movlb	0	; () banked
 11909  002062  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11910  002064  ECD4  F014         	call	_SwSpi_Clk_Pin
 11911  002068  0012               	return		;funcret
 11912  00206A                     __end_of_SWSPI_Synth_send_bits:
 11913                           	opt stack 0
 11914                           tosu	equ	0xFFF
 11915                           tosh	equ	0xFFE
 11916                           tosl	equ	0xFFD
 11917                           pclath	equ	0xFFA
 11918                           tblptru	equ	0xFF8
 11919                           tblptrh	equ	0xFF7
 11920                           tblptrl	equ	0xFF6
 11921                           tablat	equ	0xFF5
 11922                           prodh	equ	0xFF4
 11923                           prodl	equ	0xFF3
 11924                           intcon	equ	0xFF2
 11925                           intcon2	equ	0xFF1
 11926                           indf0	equ	0xFEF
 11927                           postinc0	equ	0xFEE
 11928                           fsr0h	equ	0xFEA
 11929                           fsr0l	equ	0xFE9
 11930                           wreg	equ	0xFE8
 11931                           indf1	equ	0xFE7
 11932                           postdec1	equ	0xFE5
 11933                           fsr1h	equ	0xFE2
 11934                           fsr1l	equ	0xFE1
 11935                           indf2	equ	0xFDF
 11936                           postinc2	equ	0xFDE
 11937                           postdec2	equ	0xFDD
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _ZeroArray *****************
 11943 ;; Defined at:
 11944 ;;		line 33 in file "SystemCommon.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  array           2   31[COMRAM] PTR unsigned char 
 11947 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 11948 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 11949 ;;  size            2   33[COMRAM] int 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;		None
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      void 
 11954 ;; Registers used:
 11955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11961 ;;      Params:         4       0       0       0       0       0       0
 11962 ;;      Locals:         0       0       0       0       0       0       0
 11963 ;;      Temps:          0       0       0       0       0       0       0
 11964 ;;      Totals:         4       0       0       0       0       0       0
 11965 ;;Total ram usage:        4 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    4
 11968 ;; This function calls:
 11969 ;;		_memset
 11970 ;; This function is called by:
 11971 ;;		_InitRxMessageParams
 11972 ;;		_SWSPI_Synth_send_bits
 11973 ;;		_GetIntFromUartData
 11974 ;;		_SendAckMessage
 11975 ;;		_FlashReadUart
 11976 ;;		_FlashEreaseMem
 11977 ;;		_FlashReadCondition
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           	psect	text56
 11982  0030D0                     __ptext56:
 11983                           	opt stack 0
 11984  0030D0                     _ZeroArray:
 11985                           	opt stack 24
 11986                           
 11987                           ;SystemCommon.c: 35: memset(array, 0x0, size);
 11988                           
 11989                           ;incstack = 0
 11990  0030D0  C020  F018         	movff	ZeroArray@array,memset@p1
 11991  0030D4  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 11992  0030D8  0E00               	movlw	0
 11993  0030DA  6E1B               	movwf	memset@c+1,c
 11994  0030DC  0E00               	movlw	0
 11995  0030DE  6E1A               	movwf	memset@c,c
 11996  0030E0  C022  F01C         	movff	ZeroArray@size,memset@n
 11997  0030E4  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 11998  0030E8  ECB2  F017         	call	_memset	;wreg free
 11999  0030EC  0012               	return		;funcret
 12000  0030EE                     __end_of_ZeroArray:
 12001                           	opt stack 0
 12002                           tosu	equ	0xFFF
 12003                           tosh	equ	0xFFE
 12004                           tosl	equ	0xFFD
 12005                           pclath	equ	0xFFA
 12006                           tblptru	equ	0xFF8
 12007                           tblptrh	equ	0xFF7
 12008                           tblptrl	equ	0xFF6
 12009                           tablat	equ	0xFF5
 12010                           prodh	equ	0xFF4
 12011                           prodl	equ	0xFF3
 12012                           intcon	equ	0xFF2
 12013                           intcon2	equ	0xFF1
 12014                           indf0	equ	0xFEF
 12015                           postinc0	equ	0xFEE
 12016                           fsr0h	equ	0xFEA
 12017                           fsr0l	equ	0xFE9
 12018                           wreg	equ	0xFE8
 12019                           indf1	equ	0xFE7
 12020                           postdec1	equ	0xFE5
 12021                           fsr1h	equ	0xFE2
 12022                           fsr1l	equ	0xFE1
 12023                           indf2	equ	0xFDF
 12024                           postinc2	equ	0xFDE
 12025                           postdec2	equ	0xFDD
 12026                           fsr2h	equ	0xFDA
 12027                           fsr2l	equ	0xFD9
 12028                           status	equ	0xFD8
 12029                           
 12030 ;; *************** function _memset *****************
 12031 ;; Defined at:
 12032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12033 ;; Parameters:    Size  Location     Type
 12034 ;;  p1              2   23[COMRAM] PTR void 
 12035 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 12036 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12037 ;;  c               2   25[COMRAM] int 
 12038 ;;  n               2   27[COMRAM] unsigned int 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  p               2   29[COMRAM] PTR unsigned char 
 12041 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 12042 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12043 ;; Return value:  Size  Location     Type
 12044 ;;                  2   23[COMRAM] PTR void 
 12045 ;; Registers used:
 12046 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12052 ;;      Params:         6       0       0       0       0       0       0
 12053 ;;      Locals:         2       0       0       0       0       0       0
 12054 ;;      Temps:          0       0       0       0       0       0       0
 12055 ;;      Totals:         8       0       0       0       0       0       0
 12056 ;;Total ram usage:        8 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    3
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_ZeroArray
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           	psect	text57
 12067  002F64                     __ptext57:
 12068                           	opt stack 0
 12069  002F64                     _memset:
 12070                           	opt stack 24
 12071                           
 12072                           ;incstack = 0
 12073  002F64  C018  F01E         	movff	memset@p1,memset@p
 12074  002F68  C019  F01F         	movff	memset@p1+1,memset@p+1
 12075  002F6C  D008               	goto	l1878
 12076  002F6E                     l6879:
 12077  002F6E  C01E  FFD9         	movff	memset@p,fsr2l
 12078  002F72  C01F  FFDA         	movff	memset@p+1,fsr2h
 12079  002F76  C01A  FFDF         	movff	memset@c,indf2
 12080  002F7A  4A1E               	infsnz	memset@p,f,c
 12081  002F7C  2A1F               	incf	memset@p+1,f,c
 12082  002F7E                     l1878:
 12083  002F7E  061C               	decf	memset@n,f,c
 12084  002F80  A0D8               	btfss	status,0,c
 12085  002F82  061D               	decf	memset@n+1,f,c
 12086  002F84  281C               	incf	memset@n,w,c
 12087  002F86  E1F3               	bnz	l6879
 12088  002F88  281D               	incf	memset@n+1,w,c
 12089  002F8A  B4D8               	btfsc	status,2,c
 12090  002F8C  0012               	return	
 12091  002F8E  D7EF               	goto	l1879
 12092  002F90                     __end_of_memset:
 12093                           	opt stack 0
 12094                           tosu	equ	0xFFF
 12095                           tosh	equ	0xFFE
 12096                           tosl	equ	0xFFD
 12097                           pclath	equ	0xFFA
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           intcon2	equ	0xFF1
 12106                           indf0	equ	0xFEF
 12107                           postinc0	equ	0xFEE
 12108                           fsr0h	equ	0xFEA
 12109                           fsr0l	equ	0xFE9
 12110                           wreg	equ	0xFE8
 12111                           indf1	equ	0xFE7
 12112                           postdec1	equ	0xFE5
 12113                           fsr1h	equ	0xFE2
 12114                           fsr1l	equ	0xFE1
 12115                           indf2	equ	0xFDF
 12116                           postinc2	equ	0xFDE
 12117                           postdec2	equ	0xFDD
 12118                           fsr2h	equ	0xFDA
 12119                           fsr2l	equ	0xFD9
 12120                           status	equ	0xFD8
 12121                           
 12122 ;; *************** function _Make32bitsArray *****************
 12123 ;; Defined at:
 12124 ;;		line 24 in file "SystemCommon.c"
 12125 ;; Parameters:    Size  Location     Type
 12126 ;;  array           2   23[COMRAM] PTR unsigned char 
 12127 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12128 ;;  data            4   25[COMRAM] unsigned long 
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;  idx             2   31[COMRAM] int 
 12131 ;; Return value:  Size  Location     Type
 12132 ;;                  1    wreg      void 
 12133 ;; Registers used:
 12134 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12140 ;;      Params:         6       0       0       0       0       0       0
 12141 ;;      Locals:         2       0       0       0       0       0       0
 12142 ;;      Temps:          2       0       0       0       0       0       0
 12143 ;;      Totals:        10       0       0       0       0       0       0
 12144 ;;Total ram usage:       10 bytes
 12145 ;; Hardware stack levels used:    1
 12146 ;; Hardware stack levels required when called:    3
 12147 ;; This function calls:
 12148 ;;		Nothing
 12149 ;; This function is called by:
 12150 ;;		_SWSPI_Synth_send_bits
 12151 ;; This function uses a non-reentrant model
 12152 ;;
 12153                           
 12154                           	psect	text58
 12155  0028A2                     __ptext58:
 12156                           	opt stack 0
 12157  0028A2                     _Make32bitsArray:
 12158                           	opt stack 22
 12159                           
 12160                           ;SystemCommon.c: 26: for(int idx = 0; idx <= 32; idx++)
 12161                           
 12162                           ;incstack = 0
 12163  0028A2  0E00               	movlw	0
 12164  0028A4  6E21               	movwf	Make32bitsArray@idx+1,c
 12165  0028A6  0E00               	movlw	0
 12166  0028A8  6E20               	movwf	Make32bitsArray@idx,c
 12167  0028AA                     l7083:
 12168  0028AA  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12169  0028AC  D006               	goto	l1244
 12170  0028AE  5021               	movf	Make32bitsArray@idx+1,w,c
 12171  0028B0  E123               	bnz	l1246
 12172  0028B2  0E21               	movlw	33
 12173  0028B4  5C20               	subwf	Make32bitsArray@idx,w,c
 12174  0028B6  B0D8               	btfsc	status,0,c
 12175  0028B8  0012               	return	
 12176  0028BA                     l1244:
 12177                           
 12178                           ;SystemCommon.c: 27: {
 12179                           ;SystemCommon.c: 28: array[32 - idx - 1] = data % 2;
 12180  0028BA  0E01               	movlw	1
 12181  0028BC  2420               	addwf	Make32bitsArray@idx,w,c
 12182  0028BE  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12183  0028C0  0E00               	movlw	0
 12184  0028C2  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12185  0028C4  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12186  0028C6  1E1E               	comf	??_Make32bitsArray,f,c
 12187  0028C8  1E1F               	comf	??_Make32bitsArray+1,f,c
 12188  0028CA  4A1E               	infsnz	??_Make32bitsArray,f,c
 12189  0028CC  2A1F               	incf	??_Make32bitsArray+1,f,c
 12190  0028CE  0E20               	movlw	32
 12191  0028D0  261E               	addwf	??_Make32bitsArray,f,c
 12192  0028D2  0E00               	movlw	0
 12193  0028D4  221F               	addwfc	??_Make32bitsArray+1,f,c
 12194  0028D6  501E               	movf	??_Make32bitsArray,w,c
 12195  0028D8  2418               	addwf	Make32bitsArray@array,w,c
 12196  0028DA  6ED9               	movwf	fsr2l,c
 12197  0028DC  501F               	movf	??_Make32bitsArray+1,w,c
 12198  0028DE  2019               	addwfc	Make32bitsArray@array+1,w,c
 12199  0028E0  6EDA               	movwf	fsr2h,c
 12200  0028E2  501A               	movf	Make32bitsArray@data,w,c
 12201  0028E4  0B01               	andlw	1
 12202  0028E6  6EDF               	movwf	indf2,c
 12203                           
 12204                           ;SystemCommon.c: 29: data /= 2;
 12205  0028E8  90D8               	bcf	status,0,c
 12206  0028EA  321D               	rrcf	Make32bitsArray@data+3,f,c
 12207  0028EC  321C               	rrcf	Make32bitsArray@data+2,f,c
 12208  0028EE  321B               	rrcf	Make32bitsArray@data+1,f,c
 12209  0028F0  321A               	rrcf	Make32bitsArray@data,f,c
 12210  0028F2  4A20               	infsnz	Make32bitsArray@idx,f,c
 12211  0028F4  2A21               	incf	Make32bitsArray@idx+1,f,c
 12212  0028F6  D7D9               	goto	l7083
 12213  0028F8                     l1246:
 12214  0028F8  0012               	return		;funcret
 12215  0028FA                     __end_of_Make32bitsArray:
 12216                           	opt stack 0
 12217                           tosu	equ	0xFFF
 12218                           tosh	equ	0xFFE
 12219                           tosl	equ	0xFFD
 12220                           pclath	equ	0xFFA
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           indf0	equ	0xFEF
 12230                           postinc0	equ	0xFEE
 12231                           fsr0h	equ	0xFEA
 12232                           fsr0l	equ	0xFE9
 12233                           wreg	equ	0xFE8
 12234                           indf1	equ	0xFE7
 12235                           postdec1	equ	0xFE5
 12236                           fsr1h	equ	0xFE2
 12237                           fsr1l	equ	0xFE1
 12238                           indf2	equ	0xFDF
 12239                           postinc2	equ	0xFDE
 12240                           postdec2	equ	0xFDD
 12241                           fsr2h	equ	0xFDA
 12242                           fsr2l	equ	0xFD9
 12243                           status	equ	0xFD8
 12244                           
 12245 ;; *************** function _SWSPI_DAC_send_bits *****************
 12246 ;; Defined at:
 12247 ;;		line 43 in file "SwSpiApp.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  phrType         1    wreg     enum E181
 12250 ;;  data            1   25[COMRAM] unsigned char 
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;  phrType         1   27[COMRAM] enum E181
 12253 ;;  count           1   26[COMRAM] unsigned char 
 12254 ;; Return value:  Size  Location     Type
 12255 ;;                  1    wreg      void 
 12256 ;; Registers used:
 12257 ;;		wreg, status,2, status,0, cstack
 12258 ;; Tracked objects:
 12259 ;;		On entry : 0/0
 12260 ;;		On exit  : 0/0
 12261 ;;		Unchanged: 0/0
 12262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12263 ;;      Params:         1       0       0       0       0       0       0
 12264 ;;      Locals:         2       0       0       0       0       0       0
 12265 ;;      Temps:          0       0       0       0       0       0       0
 12266 ;;      Totals:         3       0       0       0       0       0       0
 12267 ;;Total ram usage:        3 bytes
 12268 ;; Hardware stack levels used:    1
 12269 ;; Hardware stack levels required when called:    4
 12270 ;; This function calls:
 12271 ;;		_SwSpi_Clk_Pin
 12272 ;;		_SwSpi_Data_Pin
 12273 ;; This function is called by:
 12274 ;;		_SWSPI_send_word
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           	psect	text59
 12279  0028FA                     __ptext59:
 12280                           	opt stack 0
 12281  0028FA                     _SWSPI_DAC_send_bits:
 12282                           	opt stack 22
 12283                           
 12284                           ;incstack = 0
 12285                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 12286  0028FA  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 12287                           
 12288                           ;SwSpiApp.c: 45: uint8_t count;
 12289                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 12290  0028FC  0E08               	movlw	8
 12291  0028FE  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 12292  002900  D01A               	goto	l596
 12293  002902                     
 12294                           ;SwSpiApp.c: 47: {
 12295                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 12296  002902  0E01               	movlw	1
 12297  002904  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12298  002906  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12299  002908  ECD4  F014         	call	_SwSpi_Clk_Pin
 12300                           
 12301                           ;SwSpiApp.c: 50: if (data & 0X80)
 12302  00290C  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 12303  00290E  D006               	goto	l598
 12304                           
 12305                           ;SwSpiApp.c: 51: {
 12306                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 12307  002910  0E01               	movlw	1
 12308  002912  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12309  002914  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12310  002916  ECA9  F014         	call	_SwSpi_Data_Pin
 12311                           
 12312                           ;SwSpiApp.c: 54: }
 12313  00291A  D005               	goto	l599
 12314  00291C                     l598:
 12315                           
 12316                           ;SwSpiApp.c: 55: else
 12317                           ;SwSpiApp.c: 56: {
 12318                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 12319  00291C  0E00               	movlw	0
 12320  00291E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12321  002920  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12322  002922  ECA9  F014         	call	_SwSpi_Data_Pin
 12323  002926                     l599:
 12324                           
 12325                           ;SwSpiApp.c: 58: }
 12326                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 12327  002926  0E00               	movlw	0
 12328  002928  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12329  00292A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12330  00292C  ECD4  F014         	call	_SwSpi_Clk_Pin
 12331  002930  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 12332  002932  90D8               	bcf	status,0,c
 12333  002934  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 12334  002936                     l596:
 12335  002936  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 12336  002938  A4D8               	btfss	status,2,c
 12337  00293A  D7E3               	goto	l597
 12338                           
 12339                           ;SwSpiApp.c: 61: }
 12340                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 12341  00293C  0E00               	movlw	0
 12342  00293E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12343  002940  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12344  002942  ECA9  F014         	call	_SwSpi_Data_Pin
 12345                           
 12346                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 12347  002946  0E00               	movlw	0
 12348  002948  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12349  00294A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 12350  00294C  ECD4  F014         	call	_SwSpi_Clk_Pin
 12351  002950  0012               	return		;funcret
 12352  002952                     __end_of_SWSPI_DAC_send_bits:
 12353                           	opt stack 0
 12354                           tosu	equ	0xFFF
 12355                           tosh	equ	0xFFE
 12356                           tosl	equ	0xFFD
 12357                           pclath	equ	0xFFA
 12358                           tblptru	equ	0xFF8
 12359                           tblptrh	equ	0xFF7
 12360                           tblptrl	equ	0xFF6
 12361                           tablat	equ	0xFF5
 12362                           prodh	equ	0xFF4
 12363                           prodl	equ	0xFF3
 12364                           intcon	equ	0xFF2
 12365                           intcon2	equ	0xFF1
 12366                           indf0	equ	0xFEF
 12367                           postinc0	equ	0xFEE
 12368                           fsr0h	equ	0xFEA
 12369                           fsr0l	equ	0xFE9
 12370                           wreg	equ	0xFE8
 12371                           indf1	equ	0xFE7
 12372                           postdec1	equ	0xFE5
 12373                           fsr1h	equ	0xFE2
 12374                           fsr1l	equ	0xFE1
 12375                           indf2	equ	0xFDF
 12376                           postinc2	equ	0xFDE
 12377                           postdec2	equ	0xFDD
 12378                           fsr2h	equ	0xFDA
 12379                           fsr2l	equ	0xFD9
 12380                           status	equ	0xFD8
 12381                           
 12382 ;; *************** function _SwSpi_Data_Pin *****************
 12383 ;; Defined at:
 12384 ;;		line 103 in file "SwSpiApp.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;  phrType         1    wreg     enum E181
 12387 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;  phrType         1   24[COMRAM] enum E181
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      void 
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12399 ;;      Params:         1       0       0       0       0       0       0
 12400 ;;      Locals:         1       0       0       0       0       0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0
 12402 ;;      Totals:         2       0       0       0       0       0       0
 12403 ;;Total ram usage:        2 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    3
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_SWSPI_DAC_send_bits
 12410 ;;		_SWSPI_Synth_send_bits
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           	psect	text60
 12415  002952                     __ptext60:
 12416                           	opt stack 0
 12417  002952                     _SwSpi_Data_Pin:
 12418                           	opt stack 22
 12419                           
 12420                           ;incstack = 0
 12421                           ;SwSpi_Data_Pin@phrType stored from wreg
 12422  002952  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 12423                           
 12424                           ;SwSpiApp.c: 105: switch(phrType)
 12425  002954  D01E               	goto	l611
 12426  002956                     
 12427                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 12428  002956  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12429  002958  A4D8               	btfss	status,2,c
 12430  00295A  D002               	goto	l613
 12431                           
 12432                           ;SwSpiApp.c: 109: {
 12433                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 12434  00295C  808C               	bsf	3980,0,c	;volatile
 12435                           
 12436                           ;SwSpiApp.c: 111: }
 12437  00295E  0012               	return	
 12438  002960                     l613:
 12439                           
 12440                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 12441  002960  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12442  002962  A4D8               	btfss	status,2,c
 12443  002964  0012               	return	
 12444                           
 12445                           ;SwSpiApp.c: 113: {
 12446                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 12447  002966  908C               	bcf	3980,0,c	;volatile
 12448                           
 12449                           ;SwSpiApp.c: 115: }
 12450                           ;SwSpiApp.c: 116: break;
 12451  002968  0012               	return	
 12452  00296A                     
 12453                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 12454  00296A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12455  00296C  A4D8               	btfss	status,2,c
 12456  00296E  D002               	goto	l622
 12457                           
 12458                           ;SwSpiApp.c: 120: {
 12459                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 12460  002970  8A8B               	bsf	3979,5,c	;volatile
 12461                           
 12462                           ;SwSpiApp.c: 122: }
 12463  002972  0012               	return	
 12464  002974                     l622:
 12465                           
 12466                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 12467  002974  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12468  002976  A4D8               	btfss	status,2,c
 12469  002978  0012               	return	
 12470                           
 12471                           ;SwSpiApp.c: 124: {
 12472                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 12473  00297A  9A8B               	bcf	3979,5,c	;volatile
 12474                           
 12475                           ;SwSpiApp.c: 126: }
 12476                           ;SwSpiApp.c: 127: break;
 12477  00297C  0012               	return	
 12478  00297E                     
 12479                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 12480  00297E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 12481  002980  A4D8               	btfss	status,2,c
 12482  002982  D002               	goto	l630
 12483                           
 12484                           ;SwSpiApp.c: 131: {
 12485                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 12486  002984  8889               	bsf	3977,4,c	;volatile
 12487                           
 12488                           ;SwSpiApp.c: 133: }
 12489  002986  0012               	return	
 12490  002988                     l630:
 12491                           
 12492                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 12493  002988  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 12494  00298A  A4D8               	btfss	status,2,c
 12495  00298C  0012               	return	
 12496                           
 12497                           ;SwSpiApp.c: 135: {
 12498                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 12499  00298E  9889               	bcf	3977,4,c	;volatile
 12500                           
 12501                           ;SwSpiApp.c: 139: }
 12502                           
 12503                           ;SwSpiApp.c: 137: }
 12504                           ;SwSpiApp.c: 138: break;
 12505  002990  0012               	return	
 12506  002992                     l611:
 12507  002992  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 12508                           
 12509                           ; Switch size 1, requested type "space"
 12510                           ; Number of cases is 3, Range of values is 0 to 2
 12511                           ; switch strategies available:
 12512                           ; Name         Instructions Cycles
 12513                           ; simple_byte           10     6 (average)
 12514                           ;	Chosen strategy is simple_byte
 12515  002994  0A00               	xorlw	0	; case 0
 12516  002996  B4D8               	btfsc	status,2,c
 12517  002998  D7DE               	goto	l612
 12518  00299A  0A01               	xorlw	1	; case 1
 12519  00299C  B4D8               	btfsc	status,2,c
 12520  00299E  D7E5               	goto	l621
 12521  0029A0  0A03               	xorlw	3	; case 2
 12522  0029A2  A4D8               	btfss	status,2,c
 12523  0029A4  0012               	return	
 12524  0029A6  D7EB               	goto	l629
 12525  0029A8                     __end_of_SwSpi_Data_Pin:
 12526                           	opt stack 0
 12527                           tosu	equ	0xFFF
 12528                           tosh	equ	0xFFE
 12529                           tosl	equ	0xFFD
 12530                           pclath	equ	0xFFA
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           intcon2	equ	0xFF1
 12539                           indf0	equ	0xFEF
 12540                           postinc0	equ	0xFEE
 12541                           fsr0h	equ	0xFEA
 12542                           fsr0l	equ	0xFE9
 12543                           wreg	equ	0xFE8
 12544                           indf1	equ	0xFE7
 12545                           postdec1	equ	0xFE5
 12546                           fsr1h	equ	0xFE2
 12547                           fsr1l	equ	0xFE1
 12548                           indf2	equ	0xFDF
 12549                           postinc2	equ	0xFDE
 12550                           postdec2	equ	0xFDD
 12551                           fsr2h	equ	0xFDA
 12552                           fsr2l	equ	0xFD9
 12553                           status	equ	0xFD8
 12554                           
 12555 ;; *************** function _SwSpi_Clk_Pin *****************
 12556 ;; Defined at:
 12557 ;;		line 142 in file "SwSpiApp.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;  phrType         1    wreg     enum E181
 12560 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12561 ;; Auto vars:     Size  Location     Type
 12562 ;;  phrType         1   24[COMRAM] enum E181
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  1    wreg      void 
 12565 ;; Registers used:
 12566 ;;		wreg, status,2, status,0
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12572 ;;      Params:         1       0       0       0       0       0       0
 12573 ;;      Locals:         1       0       0       0       0       0       0
 12574 ;;      Temps:          0       0       0       0       0       0       0
 12575 ;;      Totals:         2       0       0       0       0       0       0
 12576 ;;Total ram usage:        2 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:    3
 12579 ;; This function calls:
 12580 ;;		Nothing
 12581 ;; This function is called by:
 12582 ;;		_SWSPI_DAC_send_bits
 12583 ;;		_SWSPI_Synth_send_bits
 12584 ;;		_SwSpi_Synth_Toggle_Clock
 12585 ;; This function uses a non-reentrant model
 12586 ;;
 12587                           
 12588                           	psect	text61
 12589  0029A8                     __ptext61:
 12590                           	opt stack 0
 12591  0029A8                     _SwSpi_Clk_Pin:
 12592                           	opt stack 22
 12593                           
 12594                           ;incstack = 0
 12595                           ;SwSpi_Clk_Pin@phrType stored from wreg
 12596  0029A8  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 12597                           
 12598                           ;SwSpiApp.c: 144: switch(phrType)
 12599  0029AA  D01E               	goto	l640
 12600  0029AC                     
 12601                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 12602  0029AC  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12603  0029AE  A4D8               	btfss	status,2,c
 12604  0029B0  D002               	goto	l642
 12605                           
 12606                           ;SwSpiApp.c: 148: {
 12607                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 12608  0029B2  868B               	bsf	3979,3,c	;volatile
 12609                           
 12610                           ;SwSpiApp.c: 150: }
 12611  0029B4  0012               	return	
 12612  0029B6                     l642:
 12613                           
 12614                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 12615  0029B6  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12616  0029B8  A4D8               	btfss	status,2,c
 12617  0029BA  0012               	return	
 12618                           
 12619                           ;SwSpiApp.c: 152: {
 12620                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 12621  0029BC  968B               	bcf	3979,3,c	;volatile
 12622                           
 12623                           ;SwSpiApp.c: 154: }
 12624                           ;SwSpiApp.c: 155: break;
 12625  0029BE  0012               	return	
 12626  0029C0                     
 12627                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 12628  0029C0  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12629  0029C2  A4D8               	btfss	status,2,c
 12630  0029C4  D002               	goto	l651
 12631                           
 12632                           ;SwSpiApp.c: 159: {
 12633                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 12634  0029C6  888B               	bsf	3979,4,c	;volatile
 12635                           
 12636                           ;SwSpiApp.c: 161: }
 12637  0029C8  0012               	return	
 12638  0029CA                     l651:
 12639                           
 12640                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 12641  0029CA  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12642  0029CC  A4D8               	btfss	status,2,c
 12643  0029CE  0012               	return	
 12644                           
 12645                           ;SwSpiApp.c: 163: {
 12646                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 12647  0029D0  988B               	bcf	3979,4,c	;volatile
 12648                           
 12649                           ;SwSpiApp.c: 165: }
 12650                           ;SwSpiApp.c: 167: break;
 12651  0029D2  0012               	return	
 12652  0029D4                     
 12653                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 12654  0029D4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 12655  0029D6  A4D8               	btfss	status,2,c
 12656  0029D8  D002               	goto	l659
 12657                           
 12658                           ;SwSpiApp.c: 171: {
 12659                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 12660  0029DA  8689               	bsf	3977,3,c	;volatile
 12661                           
 12662                           ;SwSpiApp.c: 173: }
 12663  0029DC  0012               	return	
 12664  0029DE                     l659:
 12665                           
 12666                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 12667  0029DE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 12668  0029E0  A4D8               	btfss	status,2,c
 12669  0029E2  0012               	return	
 12670                           
 12671                           ;SwSpiApp.c: 175: {
 12672                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 12673  0029E4  9689               	bcf	3977,3,c	;volatile
 12674                           
 12675                           ;SwSpiApp.c: 179: }
 12676                           
 12677                           ;SwSpiApp.c: 177: }
 12678                           ;SwSpiApp.c: 178: break;
 12679  0029E6  0012               	return	
 12680  0029E8                     l640:
 12681  0029E8  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 12682                           
 12683                           ; Switch size 1, requested type "space"
 12684                           ; Number of cases is 3, Range of values is 0 to 2
 12685                           ; switch strategies available:
 12686                           ; Name         Instructions Cycles
 12687                           ; simple_byte           10     6 (average)
 12688                           ;	Chosen strategy is simple_byte
 12689  0029EA  0A00               	xorlw	0	; case 0
 12690  0029EC  B4D8               	btfsc	status,2,c
 12691  0029EE  D7DE               	goto	l641
 12692  0029F0  0A01               	xorlw	1	; case 1
 12693  0029F2  B4D8               	btfsc	status,2,c
 12694  0029F4  D7E5               	goto	l650
 12695  0029F6  0A03               	xorlw	3	; case 2
 12696  0029F8  A4D8               	btfss	status,2,c
 12697  0029FA  0012               	return	
 12698  0029FC  D7EB               	goto	l658
 12699  0029FE                     __end_of_SwSpi_Clk_Pin:
 12700                           	opt stack 0
 12701                           tosu	equ	0xFFF
 12702                           tosh	equ	0xFFE
 12703                           tosl	equ	0xFFD
 12704                           pclath	equ	0xFFA
 12705                           tblptru	equ	0xFF8
 12706                           tblptrh	equ	0xFF7
 12707                           tblptrl	equ	0xFF6
 12708                           tablat	equ	0xFF5
 12709                           prodh	equ	0xFF4
 12710                           prodl	equ	0xFF3
 12711                           intcon	equ	0xFF2
 12712                           intcon2	equ	0xFF1
 12713                           indf0	equ	0xFEF
 12714                           postinc0	equ	0xFEE
 12715                           fsr0h	equ	0xFEA
 12716                           fsr0l	equ	0xFE9
 12717                           wreg	equ	0xFE8
 12718                           indf1	equ	0xFE7
 12719                           postdec1	equ	0xFE5
 12720                           fsr1h	equ	0xFE2
 12721                           fsr1l	equ	0xFE1
 12722                           indf2	equ	0xFDF
 12723                           postinc2	equ	0xFDE
 12724                           postdec2	equ	0xFDD
 12725                           fsr2h	equ	0xFDA
 12726                           fsr2l	equ	0xFD9
 12727                           status	equ	0xFD8
 12728                           
 12729 ;; *************** function _ReadIntFromEeprom *****************
 12730 ;; Defined at:
 12731 ;;		line 47 in file "SystemCommon.c"
 12732 ;; Parameters:    Size  Location     Type
 12733 ;;  address         1    wreg     unsigned char 
 12734 ;;  numOfByes       2   89[BANK0 ] int 
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;  address         1  106[BANK0 ] unsigned char 
 12737 ;;  base            4   96[BANK0 ] unsigned long 
 12738 ;;  idx             1  111[BANK0 ] unsigned char 
 12739 ;;  retVal          4  107[BANK0 ] unsigned long 
 12740 ;; Return value:  Size  Location     Type
 12741 ;;                  4   89[BANK0 ] unsigned long 
 12742 ;; Registers used:
 12743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12749 ;;      Params:         0       4       0       0       0       0       0
 12750 ;;      Locals:         0      16       0       0       0       0       0
 12751 ;;      Temps:          0       3       0       0       0       0       0
 12752 ;;      Totals:         0      23       0       0       0       0       0
 12753 ;;Total ram usage:       23 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    8
 12756 ;; This function calls:
 12757 ;;		_EepromRead
 12758 ;;		___awtoft
 12759 ;;		___fttol
 12760 ;;		___lmul
 12761 ;;		_pow
 12762 ;; This function is called by:
 12763 ;;		_DacInit
 12764 ;;		_DacReadValue
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text62
 12769  001412                     __ptext62:
 12770                           	opt stack 0
 12771  001412                     _ReadIntFromEeprom:
 12772                           	opt stack 20
 12773                           
 12774                           ;incstack = 0
 12775                           ;ReadIntFromEeprom@address stored from wreg
 12776  001412  0100               	movlb	0	; () banked
 12777  001414  6FCA               	movwf	ReadIntFromEeprom@address& (0+255),b
 12778                           
 12779                           ;SystemCommon.c: 49: uint32_t retVal = 0x00;
 12780  001416  0E00               	movlw	0
 12781  001418  0100               	movlb	0	; () banked
 12782  00141A  6FCB               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12783  00141C  0E00               	movlw	0
 12784  00141E  6FCC               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12785  001420  0E00               	movlw	0
 12786  001422  6FCD               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12787  001424  0E00               	movlw	0
 12788  001426  6FCE               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;SystemCommon.c: 50: address -= numOfByes;
 12792  001428  51B9               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12793  00142A  5FCA               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 12794                           
 12795                           ; BSR set to: 0
 12796                           ;SystemCommon.c: 52: for(uint8_t idx = 0; idx < numOfByes; idx++)
 12797  00142C  0E00               	movlw	0
 12798  00142E  6FCF               	movwf	ReadIntFromEeprom@idx& (0+255),b
 12799  001430  D06D               	goto	l1258
 12800  001432                     
 12801                           ; BSR set to: 0
 12802                           ;SystemCommon.c: 53: {
 12803                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12804                           
 12805                           ; BSR set to: 0
 12806  001432  51CF               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12807  001434  6FBD               	movwf	??_ReadIntFromEeprom& (0+255),b
 12808  001436  6BBE               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12809  001438  0E01               	movlw	1
 12810  00143A  27BD               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12811  00143C  0E00               	movlw	0
 12812  00143E  23BE               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12813  001440  1FBD               	comf	??_ReadIntFromEeprom& (0+255),f,b
 12814  001442  1FBE               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12815  001444  4BBD               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 12816  001446  2BBE               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12817  001448  51B9               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12818  00144A  27BD               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 12819  00144C  51BA               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12820  00144E  23BE               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12821  001450  90D8               	bcf	status,0,c
 12822  001452  37BD               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12823  001454  37BE               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12824  001456  90D8               	bcf	status,0,c
 12825  001458  37BD               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12826  00145A  37BE               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12827  00145C  90D8               	bcf	status,0,c
 12828  00145E  37BD               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 12829  001460  37BE               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 12830  001462  C0BD  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 12831  001466  C0BE  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 12832  00146A  EC14  F017         	call	___awtoft	;wreg free
 12833  00146E  C020  F0C4         	movff	?___awtoft,_ReadIntFromEeprom$3072
 12834  001472  C021  F0C5         	movff	?___awtoft+1,_ReadIntFromEeprom$3072+1
 12835  001476  C022  F0C6         	movff	?___awtoft+2,_ReadIntFromEeprom$3072+2
 12836                           
 12837                           ;SystemCommon.c: 53: {
 12838                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12839  00147A  C0C4  F0AB         	movff	_ReadIntFromEeprom$3072,pow@y
 12840  00147E  C0C5  F0AC         	movff	_ReadIntFromEeprom$3072+1,pow@y+1
 12841  001482  C0C6  F0AD         	movff	_ReadIntFromEeprom$3072+2,pow@y+2
 12842  001486  0E00               	movlw	0
 12843  001488  0100               	movlb	0	; () banked
 12844  00148A  6FA8               	movwf	pow@x& (0+255),b
 12845  00148C  0E00               	movlw	0
 12846  00148E  6FA9               	movwf	(pow@x+1)& (0+255),b
 12847  001490  0E40               	movlw	64
 12848  001492  6FAA               	movwf	(pow@x+2)& (0+255),b
 12849  001494  EC4B  F009         	call	_pow	;wreg free
 12850  001498  C0A8  F0C7         	movff	?_pow,_ReadIntFromEeprom$3073
 12851  00149C  C0A9  F0C8         	movff	?_pow+1,_ReadIntFromEeprom$3073+1
 12852  0014A0  C0AA  F0C9         	movff	?_pow+2,_ReadIntFromEeprom$3073+2
 12853                           
 12854                           ;SystemCommon.c: 53: {
 12855                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12856  0014A4  C0C7  F07E         	movff	_ReadIntFromEeprom$3073,___fttol@f1
 12857  0014A8  C0C8  F07F         	movff	_ReadIntFromEeprom$3073+1,___fttol@f1+1
 12858  0014AC  C0C9  F080         	movff	_ReadIntFromEeprom$3073+2,___fttol@f1+2
 12859  0014B0  EC4A  F00C         	call	___fttol	;wreg free
 12860  0014B4  C07E  F0C0         	movff	?___fttol,ReadIntFromEeprom@base
 12861  0014B8  C07F  F0C1         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 12862  0014BC  C080  F0C2         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 12863  0014C0  C081  F0C3         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 12864                           
 12865                           ;SystemCommon.c: 55: retVal = retVal | EepromRead(address + idx) * base;
 12866  0014C4  0100               	movlb	0	; () banked
 12867  0014C6  51CA               	movf	ReadIntFromEeprom@address& (0+255),w,b
 12868  0014C8  25CF               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 12869  0014CA  ECF0  F018         	call	_EepromRead
 12870  0014CE  0100               	movlb	0	; () banked
 12871  0014D0  6FBD               	movwf	??_ReadIntFromEeprom& (0+255),b
 12872  0014D2  51BD               	movf	??_ReadIntFromEeprom& (0+255),w,b
 12873  0014D4  6E1A               	movwf	___lmul@multiplier,c
 12874  0014D6  6A1B               	clrf	___lmul@multiplier+1,c
 12875  0014D8  6A1C               	clrf	___lmul@multiplier+2,c
 12876  0014DA  6A1D               	clrf	___lmul@multiplier+3,c
 12877  0014DC  C0C0  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 12878  0014E0  C0C1  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 12879  0014E4  C0C2  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 12880  0014E8  C0C3  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 12881  0014EC  ECFF  F014         	call	___lmul	;wreg free
 12882  0014F0  0100               	movlb	0	; () banked
 12883  0014F2  51CB               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 12884  0014F4  101A               	iorwf	?___lmul,w,c
 12885  0014F6  6FCB               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12886  0014F8  51CC               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 12887  0014FA  101B               	iorwf	?___lmul+1,w,c
 12888  0014FC  6FCC               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12889  0014FE  51CD               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 12890  001500  101C               	iorwf	?___lmul+2,w,c
 12891  001502  6FCD               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12892  001504  51CE               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 12893  001506  101D               	iorwf	?___lmul+3,w,c
 12894  001508  6FCE               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12895                           
 12896                           ; BSR set to: 0
 12897  00150A  2BCF               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 12898  00150C                     l1258:
 12899                           
 12900                           ; BSR set to: 0
 12901                           
 12902                           ; BSR set to: 0
 12903  00150C  51CF               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12904  00150E  6FBD               	movwf	??_ReadIntFromEeprom& (0+255),b
 12905  001510  6BBE               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12906  001512  51B9               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12907  001514  5DBD               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 12908  001516  51BE               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 12909  001518  0A80               	xorlw	128
 12910  00151A  6FBF               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 12911  00151C  51BA               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12912  00151E  0A80               	xorlw	128
 12913  001520  59BF               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 12914  001522  A0D8               	btfss	status,0,c
 12915  001524  D786               	goto	l1259
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;SystemCommon.c: 56: }
 12919                           ;SystemCommon.c: 57: return retVal;
 12920  001526  C0CB  F0B9         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 12921  00152A  C0CC  F0BA         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 12922  00152E  C0CD  F0BB         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 12923  001532  C0CE  F0BC         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 12924                           
 12925                           ; BSR set to: 0
 12926  001536  0012               	return		;funcret
 12927  001538                     __end_of_ReadIntFromEeprom:
 12928                           	opt stack 0
 12929                           tosu	equ	0xFFF
 12930                           tosh	equ	0xFFE
 12931                           tosl	equ	0xFFD
 12932                           pclath	equ	0xFFA
 12933                           tblptru	equ	0xFF8
 12934                           tblptrh	equ	0xFF7
 12935                           tblptrl	equ	0xFF6
 12936                           tablat	equ	0xFF5
 12937                           prodh	equ	0xFF4
 12938                           prodl	equ	0xFF3
 12939                           intcon	equ	0xFF2
 12940                           intcon2	equ	0xFF1
 12941                           indf0	equ	0xFEF
 12942                           postinc0	equ	0xFEE
 12943                           fsr0h	equ	0xFEA
 12944                           fsr0l	equ	0xFE9
 12945                           wreg	equ	0xFE8
 12946                           indf1	equ	0xFE7
 12947                           postdec1	equ	0xFE5
 12948                           fsr1h	equ	0xFE2
 12949                           fsr1l	equ	0xFE1
 12950                           indf2	equ	0xFDF
 12951                           postinc2	equ	0xFDE
 12952                           postdec2	equ	0xFDD
 12953                           fsr2h	equ	0xFDA
 12954                           fsr2l	equ	0xFD9
 12955                           status	equ	0xFD8
 12956                           
 12957 ;; *************** function _pow *****************
 12958 ;; Defined at:
 12959 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;  x               3   72[BANK0 ] unsigned long 
 12962 ;;  y               3   75[BANK0 ] unsigned long 
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;  yi              4   85[BANK0 ] unsigned long 
 12965 ;;  sign            1   84[BANK0 ] unsigned char 
 12966 ;; Return value:  Size  Location     Type
 12967 ;;                  3   72[BANK0 ] unsigned char 
 12968 ;; Registers used:
 12969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12970 ;; Tracked objects:
 12971 ;;		On entry : 0/0
 12972 ;;		On exit  : 0/0
 12973 ;;		Unchanged: 0/0
 12974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12975 ;;      Params:         0       6       0       0       0       0       0
 12976 ;;      Locals:         0      11       0       0       0       0       0
 12977 ;;      Temps:          0       0       0       0       0       0       0
 12978 ;;      Totals:         0      17       0       0       0       0       0
 12979 ;;Total ram usage:       17 bytes
 12980 ;; Hardware stack levels used:    1
 12981 ;; Hardware stack levels required when called:    7
 12982 ;; This function calls:
 12983 ;;		___ftge
 12984 ;;		___ftmul
 12985 ;;		___ftneg
 12986 ;;		___fttol
 12987 ;;		___lltoft
 12988 ;;		_exp
 12989 ;;		_log
 12990 ;; This function is called by:
 12991 ;;		_AdcSingleSample
 12992 ;;		_SampleSingleChannel
 12993 ;;		_SampleVgMonChannel
 12994 ;;		_DacSetValue
 12995 ;;		_DacAnalogToDigitalSpi
 12996 ;;		_ReadIntFromEeprom
 12997 ;; This function uses a non-reentrant model
 12998 ;;
 12999                           
 13000                           	psect	text63
 13001  001296                     __ptext63:
 13002                           	opt stack 0
 13003  001296                     _pow:
 13004                           	opt stack 20
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;incstack = 0
 13008  001296  0E00               	movlw	0
 13009  001298  0100               	movlb	0	; () banked
 13010  00129A  6FB4               	movwf	pow@sign& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013  00129C  51A8               	movf	pow@x& (0+255),w,b
 13014  00129E  11A9               	iorwf	(pow@x+1)& (0+255),w,b
 13015  0012A0  11AA               	iorwf	(pow@x+2)& (0+255),w,b
 13016  0012A2  A4D8               	btfss	status,2,c
 13017  0012A4  D01D               	goto	l1890
 13018                           
 13019                           ; BSR set to: 0
 13020  0012A6  0E00               	movlw	0
 13021  0012A8  6E18               	movwf	___ftge@ff1,c
 13022  0012AA  0E00               	movlw	0
 13023  0012AC  6E19               	movwf	___ftge@ff1+1,c
 13024  0012AE  0E00               	movlw	0
 13025  0012B0  6E1A               	movwf	___ftge@ff1+2,c
 13026  0012B2  C0AB  F01B         	movff	pow@y,___ftge@ff2
 13027  0012B6  C0AC  F01C         	movff	pow@y+1,___ftge@ff2+1
 13028  0012BA  C0AD  F01D         	movff	pow@y+2,___ftge@ff2+2
 13029  0012BE  EC74  F012         	call	___ftge	;wreg free
 13030  0012C2  A0D8               	btfss	status,0,c
 13031  0012C4  D005               	goto	l1891
 13032  0012C6  0E00               	movlw	0
 13033  0012C8  0100               	movlb	0	; () banked
 13034  0012CA  6FED               	movwf	(_errno+1)& (0+255),b
 13035  0012CC  0E21               	movlw	33
 13036  0012CE  6FEC               	movwf	_errno& (0+255),b
 13037  0012D0                     l1891:
 13038  0012D0  0E00               	movlw	0
 13039  0012D2  0100               	movlb	0	; () banked
 13040  0012D4  6FA8               	movwf	?_pow& (0+255),b
 13041  0012D6  0E00               	movlw	0
 13042  0012D8  6FA9               	movwf	(?_pow+1)& (0+255),b
 13043  0012DA  0E00               	movlw	0
 13044  0012DC  6FAA               	movwf	(?_pow+2)& (0+255),b
 13045                           
 13046                           ; BSR set to: 0
 13047  0012DE  0012               	return	
 13048  0012E0                     l1890:
 13049                           
 13050                           ; BSR set to: 0
 13051                           
 13052                           ; BSR set to: 0
 13053  0012E0  51AB               	movf	pow@y& (0+255),w,b
 13054  0012E2  11AC               	iorwf	(pow@y+1)& (0+255),w,b
 13055  0012E4  11AD               	iorwf	(pow@y+2)& (0+255),w,b
 13056  0012E6  A4D8               	btfss	status,2,c
 13057  0012E8  D007               	goto	l1893
 13058                           
 13059                           ; BSR set to: 0
 13060  0012EA  0E00               	movlw	0
 13061  0012EC  6FA8               	movwf	?_pow& (0+255),b
 13062  0012EE  0E80               	movlw	128
 13063  0012F0  6FA9               	movwf	(?_pow+1)& (0+255),b
 13064  0012F2  0E3F               	movlw	63
 13065  0012F4  6FAA               	movwf	(?_pow+2)& (0+255),b
 13066                           
 13067                           ; BSR set to: 0
 13068  0012F6  0012               	return	
 13069  0012F8                     l1893:
 13070                           
 13071                           ; BSR set to: 0
 13072                           
 13073                           ; BSR set to: 0
 13074  0012F8  AFAA               	btfss	(pow@x+2)& (0+255),7,b
 13075  0012FA  D041               	goto	l1894
 13076                           
 13077                           ; BSR set to: 0
 13078  0012FC  C0AB  F07E         	movff	pow@y,___fttol@f1
 13079  001300  C0AC  F07F         	movff	pow@y+1,___fttol@f1+1
 13080  001304  C0AD  F080         	movff	pow@y+2,___fttol@f1+2
 13081  001308  EC4A  F00C         	call	___fttol	;wreg free
 13082  00130C  C07E  F0B5         	movff	?___fttol,pow@yi
 13083  001310  C07F  F0B6         	movff	?___fttol+1,pow@yi+1
 13084  001314  C080  F0B7         	movff	?___fttol+2,pow@yi+2
 13085  001318  C081  F0B8         	movff	?___fttol+3,pow@yi+3
 13086  00131C  C0B5  F020         	movff	pow@yi,___lltoft@c
 13087  001320  C0B6  F021         	movff	pow@yi+1,___lltoft@c+1
 13088  001324  C0B7  F022         	movff	pow@yi+2,___lltoft@c+2
 13089  001328  C0B8  F023         	movff	pow@yi+3,___lltoft@c+3
 13090  00132C  EC23  F014         	call	___lltoft	;wreg free
 13091  001330  0100               	movlb	0	; () banked
 13092  001332  51AB               	movf	pow@y& (0+255),w,b
 13093  001334  1820               	xorwf	?___lltoft,w,c
 13094  001336  E107               	bnz	u7390
 13095  001338  51AC               	movf	(pow@y+1)& (0+255),w,b
 13096  00133A  1821               	xorwf	?___lltoft+1,w,c
 13097  00133C  E104               	bnz	u7390
 13098  00133E  51AD               	movf	(pow@y+2)& (0+255),w,b
 13099  001340  1822               	xorwf	?___lltoft+2,w,c
 13100  001342  B4D8               	btfsc	status,2,c
 13101  001344  D00B               	goto	l1895
 13102  001346                     u7390:
 13103                           
 13104                           ; BSR set to: 0
 13105  001346  0E00               	movlw	0
 13106  001348  6FED               	movwf	(_errno+1)& (0+255),b
 13107  00134A  0E21               	movlw	33
 13108  00134C  6FEC               	movwf	_errno& (0+255),b
 13109  00134E  0E00               	movlw	0
 13110  001350  6FA8               	movwf	?_pow& (0+255),b
 13111  001352  0E00               	movlw	0
 13112  001354  6FA9               	movwf	(?_pow+1)& (0+255),b
 13113  001356  0E00               	movlw	0
 13114  001358  6FAA               	movwf	(?_pow+2)& (0+255),b
 13115                           
 13116                           ; BSR set to: 0
 13117  00135A  0012               	return	
 13118  00135C                     l1895:
 13119                           
 13120                           ; BSR set to: 0
 13121                           
 13122                           ; BSR set to: 0
 13123  00135C  51B5               	movf	pow@yi& (0+255),w,b
 13124  00135E  0B01               	andlw	1
 13125  001360  6FB4               	movwf	pow@sign& (0+255),b
 13126                           
 13127                           ; BSR set to: 0
 13128  001362  C0A8  F018         	movff	pow@x,___ftneg@f1
 13129  001366  C0A9  F019         	movff	pow@x+1,___ftneg@f1+1
 13130  00136A  C0AA  F01A         	movff	pow@x+2,___ftneg@f1+2
 13131  00136E  EC38  F018         	call	___ftneg	;wreg free
 13132  001372  C018  F0A8         	movff	?___ftneg,pow@x
 13133  001376  C019  F0A9         	movff	?___ftneg+1,pow@x+1
 13134  00137A  C01A  F0AA         	movff	?___ftneg+2,pow@x+2
 13135  00137E                     l1894:
 13136  00137E  C0A8  F07B         	movff	pow@x,log@x
 13137  001382  C0A9  F07C         	movff	pow@x+1,log@x+1
 13138  001386  C0AA  F07D         	movff	pow@x+2,log@x+2
 13139  00138A  EC2E  F00B         	call	_log	;wreg free
 13140  00138E  C07B  F0AE         	movff	?_log,_pow$3074
 13141  001392  C07C  F0AF         	movff	?_log+1,_pow$3074+1
 13142  001396  C07D  F0B0         	movff	?_log+2,_pow$3074+2
 13143  00139A  C0AE  F060         	movff	_pow$3074,___ftmul@f1
 13144  00139E  C0AF  F061         	movff	_pow$3074+1,___ftmul@f1+1
 13145  0013A2  C0B0  F062         	movff	_pow$3074+2,___ftmul@f1+2
 13146  0013A6  C0AB  F063         	movff	pow@y,___ftmul@f2
 13147  0013AA  C0AC  F064         	movff	pow@y+1,___ftmul@f2+1
 13148  0013AE  C0AD  F065         	movff	pow@y+2,___ftmul@f2+2
 13149  0013B2  ECC6  F00C         	call	___ftmul	;wreg free
 13150  0013B6  C060  F0B1         	movff	?___ftmul,_pow$3075
 13151  0013BA  C061  F0B2         	movff	?___ftmul+1,_pow$3075+1
 13152  0013BE  C062  F0B3         	movff	?___ftmul+2,_pow$3075+2
 13153  0013C2  C0B1  F09F         	movff	_pow$3075,exp@x
 13154  0013C6  C0B2  F0A0         	movff	_pow$3075+1,exp@x+1
 13155  0013CA  C0B3  F0A1         	movff	_pow$3075+2,exp@x+2
 13156  0013CE  EC13  F003         	call	_exp	;wreg free
 13157  0013D2  C09F  F0A8         	movff	?_exp,pow@x
 13158  0013D6  C0A0  F0A9         	movff	?_exp+1,pow@x+1
 13159  0013DA  C0A1  F0AA         	movff	?_exp+2,pow@x+2
 13160  0013DE  0100               	movlb	0	; () banked
 13161  0013E0  51B4               	movf	pow@sign& (0+255),w,b
 13162  0013E2  B4D8               	btfsc	status,2,c
 13163  0013E4  D00F               	goto	l1896
 13164                           
 13165                           ; BSR set to: 0
 13166  0013E6  C0A8  F018         	movff	pow@x,___ftneg@f1
 13167  0013EA  C0A9  F019         	movff	pow@x+1,___ftneg@f1+1
 13168  0013EE  C0AA  F01A         	movff	pow@x+2,___ftneg@f1+2
 13169  0013F2  EC38  F018         	call	___ftneg	;wreg free
 13170  0013F6  C018  F0A8         	movff	?___ftneg,?_pow
 13171  0013FA  C019  F0A9         	movff	?___ftneg+1,?_pow+1
 13172  0013FE  C01A  F0AA         	movff	?___ftneg+2,?_pow+2
 13173  001402  0012               	return	
 13174  001404                     l1896:
 13175                           
 13176                           ; BSR set to: 0
 13177  001404  C0A8  F0A8         	movff	pow@x,?_pow
 13178  001408  C0A9  F0A9         	movff	pow@x+1,?_pow+1
 13179  00140C  C0AA  F0AA         	movff	pow@x+2,?_pow+2
 13180  001410  0012               	return		;funcret
 13181  001412                     __end_of_pow:
 13182                           	opt stack 0
 13183                           tosu	equ	0xFFF
 13184                           tosh	equ	0xFFE
 13185                           tosl	equ	0xFFD
 13186                           pclath	equ	0xFFA
 13187                           tblptru	equ	0xFF8
 13188                           tblptrh	equ	0xFF7
 13189                           tblptrl	equ	0xFF6
 13190                           tablat	equ	0xFF5
 13191                           prodh	equ	0xFF4
 13192                           prodl	equ	0xFF3
 13193                           intcon	equ	0xFF2
 13194                           intcon2	equ	0xFF1
 13195                           indf0	equ	0xFEF
 13196                           postinc0	equ	0xFEE
 13197                           fsr0h	equ	0xFEA
 13198                           fsr0l	equ	0xFE9
 13199                           wreg	equ	0xFE8
 13200                           indf1	equ	0xFE7
 13201                           postdec1	equ	0xFE5
 13202                           fsr1h	equ	0xFE2
 13203                           fsr1l	equ	0xFE1
 13204                           indf2	equ	0xFDF
 13205                           postinc2	equ	0xFDE
 13206                           postdec2	equ	0xFDD
 13207                           fsr2h	equ	0xFDA
 13208                           fsr2l	equ	0xFD9
 13209                           status	equ	0xFD8
 13210                           
 13211 ;; *************** function _log *****************
 13212 ;; Defined at:
 13213 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 13214 ;; Parameters:    Size  Location     Type
 13215 ;;  x               3   27[BANK0 ] unsigned char 
 13216 ;; Auto vars:     Size  Location     Type
 13217 ;;  exponent        2   30[BANK0 ] int 
 13218 ;; Return value:  Size  Location     Type
 13219 ;;                  3   27[BANK0 ] int 
 13220 ;; Registers used:
 13221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13222 ;; Tracked objects:
 13223 ;;		On entry : 0/0
 13224 ;;		On exit  : 0/0
 13225 ;;		Unchanged: 0/0
 13226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13227 ;;      Params:         0       3       0       0       0       0       0
 13228 ;;      Locals:         0       2       0       0       0       0       0
 13229 ;;      Temps:          0       0       0       0       0       0       0
 13230 ;;      Totals:         0       5       0       0       0       0       0
 13231 ;;Total ram usage:        5 bytes
 13232 ;; Hardware stack levels used:    1
 13233 ;; Hardware stack levels required when called:    6
 13234 ;; This function calls:
 13235 ;;		___awtoft
 13236 ;;		___ftadd
 13237 ;;		___ftmul
 13238 ;;		_eval_poly
 13239 ;;		_frexp
 13240 ;; This function is called by:
 13241 ;;		_pow
 13242 ;; This function uses a non-reentrant model
 13243 ;;
 13244                           
 13245                           	psect	text64
 13246  00165C                     __ptext64:
 13247                           	opt stack 0
 13248  00165C                     _log:
 13249                           	opt stack 20
 13250                           
 13251                           ;incstack = 0
 13252  00165C  0100               	movlb	0	; () banked
 13253  00165E  AF7D               	btfss	(log@x+2)& (0+255),7,b
 13254  001660  D00B               	goto	l2152
 13255                           
 13256                           ; BSR set to: 0
 13257  001662  0E00               	movlw	0
 13258  001664  6FED               	movwf	(_errno+1)& (0+255),b
 13259  001666  0E21               	movlw	33
 13260  001668  6FEC               	movwf	_errno& (0+255),b
 13261  00166A  0E00               	movlw	0
 13262  00166C  6F7B               	movwf	?_log& (0+255),b
 13263  00166E  0E00               	movlw	0
 13264  001670  6F7C               	movwf	(?_log+1)& (0+255),b
 13265  001672  0E00               	movlw	0
 13266  001674  6F7D               	movwf	(?_log+2)& (0+255),b
 13267                           
 13268                           ; BSR set to: 0
 13269  001676  0012               	return	
 13270  001678                     l2152:
 13271                           
 13272                           ; BSR set to: 0
 13273                           
 13274                           ; BSR set to: 0
 13275  001678  517B               	movf	log@x& (0+255),w,b
 13276  00167A  117C               	iorwf	(log@x+1)& (0+255),w,b
 13277  00167C  117D               	iorwf	(log@x+2)& (0+255),w,b
 13278  00167E  A4D8               	btfss	status,2,c
 13279  001680  D00B               	goto	l2154
 13280                           
 13281                           ; BSR set to: 0
 13282  001682  0E00               	movlw	0
 13283  001684  6FED               	movwf	(_errno+1)& (0+255),b
 13284  001686  0E22               	movlw	34
 13285  001688  6FEC               	movwf	_errno& (0+255),b
 13286  00168A  0E00               	movlw	0
 13287  00168C  6F7B               	movwf	?_log& (0+255),b
 13288  00168E  0E00               	movlw	0
 13289  001690  6F7C               	movwf	(?_log+1)& (0+255),b
 13290  001692  0E00               	movlw	0
 13291  001694  6F7D               	movwf	(?_log+2)& (0+255),b
 13292                           
 13293                           ; BSR set to: 0
 13294  001696  0012               	return	
 13295  001698                     l2154:
 13296                           
 13297                           ; BSR set to: 0
 13298                           
 13299                           ; BSR set to: 0
 13300  001698  0E00               	movlw	0
 13301  00169A  6F63               	movwf	___ftmul@f2& (0+255),b
 13302  00169C  0E00               	movlw	0
 13303  00169E  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
 13304  0016A0  0E40               	movlw	64
 13305  0016A2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
 13306  0016A4  0E7E               	movlw	low log@exponent
 13307  0016A6  6E1B               	movwf	frexp@eptr,c
 13308  0016A8  0E00               	movlw	high log@exponent
 13309  0016AA  6E1C               	movwf	frexp@eptr+1,c
 13310  0016AC  C07B  F018         	movff	log@x,frexp@value
 13311  0016B0  C07C  F019         	movff	log@x+1,frexp@value+1
 13312  0016B4  C07D  F01A         	movff	log@x+2,frexp@value+2
 13313  0016B8  EC2C  F012         	call	_frexp	;wreg free
 13314  0016BC  C018  F060         	movff	?_frexp,___ftmul@f1
 13315  0016C0  C019  F061         	movff	?_frexp+1,___ftmul@f1+1
 13316  0016C4  C01A  F062         	movff	?_frexp+2,___ftmul@f1+2
 13317  0016C8  ECC6  F00C         	call	___ftmul	;wreg free
 13318  0016CC  C060  F024         	movff	?___ftmul,___ftadd@f1
 13319  0016D0  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
 13320  0016D4  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
 13321  0016D8  0E00               	movlw	0
 13322  0016DA  6E27               	movwf	___ftadd@f2,c
 13323  0016DC  0E80               	movlw	128
 13324  0016DE  6E28               	movwf	___ftadd@f2+1,c
 13325  0016E0  0EBF               	movlw	191
 13326  0016E2  6E29               	movwf	___ftadd@f2+2,c
 13327  0016E4  ECB0  F007         	call	___ftadd	;wreg free
 13328  0016E8  C024  F07B         	movff	?___ftadd,log@x
 13329  0016EC  C025  F07C         	movff	?___ftadd+1,log@x+1
 13330  0016F0  C026  F07D         	movff	?___ftadd+2,log@x+2
 13331  0016F4  0100               	movlb	0	; () banked
 13332  0016F6  077E               	decf	log@exponent& (0+255),f,b
 13333  0016F8  A0D8               	btfss	status,0,c
 13334  0016FA  077F               	decf	(log@exponent+1)& (0+255),f,b
 13335                           
 13336                           ; BSR set to: 0
 13337  0016FC  C07B  F06F         	movff	log@x,eval_poly@x
 13338  001700  C07C  F070         	movff	log@x+1,eval_poly@x+1
 13339  001704  C07D  F071         	movff	log@x+2,eval_poly@x+2
 13340  001708  0E23               	movlw	low log@coeff
 13341  00170A  6F72               	movwf	eval_poly@d& (0+255),b
 13342  00170C  0E7A               	movlw	high log@coeff
 13343  00170E  6F73               	movwf	(eval_poly@d+1)& (0+255),b
 13344  001710  0E00               	movlw	0
 13345  001712  6F75               	movwf	(eval_poly@n+1)& (0+255),b
 13346  001714  0E08               	movlw	8
 13347  001716  6F74               	movwf	eval_poly@n& (0+255),b
 13348  001718  EC04  F00F         	call	_eval_poly	;wreg free
 13349  00171C  C06F  F07B         	movff	?_eval_poly,log@x
 13350  001720  C070  F07C         	movff	?_eval_poly+1,log@x+1
 13351  001724  C071  F07D         	movff	?_eval_poly+2,log@x+2
 13352  001728  0E72               	movlw	114
 13353  00172A  0100               	movlb	0	; () banked
 13354  00172C  6F63               	movwf	___ftmul@f2& (0+255),b
 13355  00172E  0E31               	movlw	49
 13356  001730  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
 13357  001732  0E3F               	movlw	63
 13358  001734  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
 13359  001736  C07E  F020         	movff	log@exponent,___awtoft@c
 13360  00173A  C07F  F021         	movff	log@exponent+1,___awtoft@c+1
 13361  00173E  EC14  F017         	call	___awtoft	;wreg free
 13362  001742  C020  F060         	movff	?___awtoft,___ftmul@f1
 13363  001746  C021  F061         	movff	?___awtoft+1,___ftmul@f1+1
 13364  00174A  C022  F062         	movff	?___awtoft+2,___ftmul@f1+2
 13365  00174E  ECC6  F00C         	call	___ftmul	;wreg free
 13366  001752  C060  F024         	movff	?___ftmul,___ftadd@f1
 13367  001756  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
 13368  00175A  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
 13369  00175E  C07B  F027         	movff	log@x,___ftadd@f2
 13370  001762  C07C  F028         	movff	log@x+1,___ftadd@f2+1
 13371  001766  C07D  F029         	movff	log@x+2,___ftadd@f2+2
 13372  00176A  ECB0  F007         	call	___ftadd	;wreg free
 13373  00176E  C024  F07B         	movff	?___ftadd,?_log
 13374  001772  C025  F07C         	movff	?___ftadd+1,?_log+1
 13375  001776  C026  F07D         	movff	?___ftadd+2,?_log+2
 13376  00177A  0012               	return	
 13377  00177C                     __end_of_log:
 13378                           	opt stack 0
 13379                           tosu	equ	0xFFF
 13380                           tosh	equ	0xFFE
 13381                           tosl	equ	0xFFD
 13382                           pclath	equ	0xFFA
 13383                           tblptru	equ	0xFF8
 13384                           tblptrh	equ	0xFF7
 13385                           tblptrl	equ	0xFF6
 13386                           tablat	equ	0xFF5
 13387                           prodh	equ	0xFF4
 13388                           prodl	equ	0xFF3
 13389                           intcon	equ	0xFF2
 13390                           intcon2	equ	0xFF1
 13391                           indf0	equ	0xFEF
 13392                           postinc0	equ	0xFEE
 13393                           fsr0h	equ	0xFEA
 13394                           fsr0l	equ	0xFE9
 13395                           wreg	equ	0xFE8
 13396                           indf1	equ	0xFE7
 13397                           postdec1	equ	0xFE5
 13398                           fsr1h	equ	0xFE2
 13399                           fsr1l	equ	0xFE1
 13400                           indf2	equ	0xFDF
 13401                           postinc2	equ	0xFDE
 13402                           postdec2	equ	0xFDD
 13403                           fsr2h	equ	0xFDA
 13404                           fsr2l	equ	0xFD9
 13405                           status	equ	0xFD8
 13406                           
 13407 ;; *************** function _exp *****************
 13408 ;; Defined at:
 13409 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 13410 ;; Parameters:    Size  Location     Type
 13411 ;;  x               3   63[BANK0 ] int 
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  exponent        2   69[BANK0 ] int 
 13414 ;;  sign            1   71[BANK0 ] unsigned char 
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  3   63[BANK0 ] unsigned char 
 13417 ;; Registers used:
 13418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/0
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13424 ;;      Params:         0       3       0       0       0       0       0
 13425 ;;      Locals:         0       6       0       0       0       0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0
 13427 ;;      Totals:         0       9       0       0       0       0       0
 13428 ;;Total ram usage:        9 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; Hardware stack levels required when called:    6
 13431 ;; This function calls:
 13432 ;;		___awtoft
 13433 ;;		___ftdiv
 13434 ;;		___ftge
 13435 ;;		___ftmul
 13436 ;;		___ftneg
 13437 ;;		___ftsub
 13438 ;;		___fttol
 13439 ;;		_eval_poly
 13440 ;;		_floor
 13441 ;;		_ldexp
 13442 ;; This function is called by:
 13443 ;;		_pow
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           	psect	text65
 13448  000626                     __ptext65:
 13449                           	opt stack 0
 13450  000626                     _exp:
 13451                           	opt stack 20
 13452                           
 13453                           ;incstack = 0
 13454  000626  0100               	movlb	0	; () banked
 13455  000628  519F               	movf	exp@x& (0+255),w,b
 13456  00062A  11A0               	iorwf	(exp@x+1)& (0+255),w,b
 13457  00062C  11A1               	iorwf	(exp@x+2)& (0+255),w,b
 13458  00062E  A4D8               	btfss	status,2,c
 13459  000630  D007               	goto	l2088
 13460                           
 13461                           ; BSR set to: 0
 13462  000632  0E00               	movlw	0
 13463  000634  6F9F               	movwf	?_exp& (0+255),b
 13464  000636  0E80               	movlw	128
 13465  000638  6FA0               	movwf	(?_exp+1)& (0+255),b
 13466  00063A  0E3F               	movlw	63
 13467  00063C  6FA1               	movwf	(?_exp+2)& (0+255),b
 13468                           
 13469                           ; BSR set to: 0
 13470  00063E  0012               	return	
 13471  000640                     l2088:
 13472                           
 13473                           ; BSR set to: 0
 13474                           
 13475                           ; BSR set to: 0
 13476  000640  0E72               	movlw	114
 13477  000642  6E18               	movwf	___ftge@ff1,c
 13478  000644  0E31               	movlw	49
 13479  000646  6E19               	movwf	___ftge@ff1+1,c
 13480  000648  0E44               	movlw	68
 13481  00064A  6E1A               	movwf	___ftge@ff1+2,c
 13482  00064C  C09F  F01B         	movff	exp@x,___ftge@ff2
 13483  000650  C0A0  F01C         	movff	exp@x+1,___ftge@ff2+1
 13484  000654  C0A1  F01D         	movff	exp@x+2,___ftge@ff2+2
 13485  000658  EC74  F012         	call	___ftge	;wreg free
 13486  00065C  B0D8               	btfsc	status,0,c
 13487  00065E  D00C               	goto	l2090
 13488  000660  0E00               	movlw	0
 13489  000662  0100               	movlb	0	; () banked
 13490  000664  6FED               	movwf	(_errno+1)& (0+255),b
 13491  000666  0E22               	movlw	34
 13492  000668  6FEC               	movwf	_errno& (0+255),b
 13493  00066A  0EFF               	movlw	255
 13494  00066C  6F9F               	movwf	?_exp& (0+255),b
 13495  00066E  0E7F               	movlw	127
 13496  000670  6FA0               	movwf	(?_exp+1)& (0+255),b
 13497  000672  0E7F               	movlw	127
 13498  000674  6FA1               	movwf	(?_exp+2)& (0+255),b
 13499                           
 13500                           ; BSR set to: 0
 13501  000676  0012               	return	
 13502  000678                     l2090:
 13503                           
 13504                           ; BSR set to: 0
 13505  000678  C09F  F018         	movff	exp@x,___ftge@ff1
 13506  00067C  C0A0  F019         	movff	exp@x+1,___ftge@ff1+1
 13507  000680  C0A1  F01A         	movff	exp@x+2,___ftge@ff1+2
 13508  000684  0E49               	movlw	73
 13509  000686  6E1B               	movwf	___ftge@ff2,c
 13510  000688  0E3A               	movlw	58
 13511  00068A  6E1C               	movwf	___ftge@ff2+1,c
 13512  00068C  0EC4               	movlw	196
 13513  00068E  6E1D               	movwf	___ftge@ff2+2,c
 13514  000690  EC74  F012         	call	___ftge	;wreg free
 13515  000694  B0D8               	btfsc	status,0,c
 13516  000696  D00C               	goto	l2091
 13517  000698  0E00               	movlw	0
 13518  00069A  0100               	movlb	0	; () banked
 13519  00069C  6FED               	movwf	(_errno+1)& (0+255),b
 13520  00069E  0E22               	movlw	34
 13521  0006A0  6FEC               	movwf	_errno& (0+255),b
 13522  0006A2  0E00               	movlw	0
 13523  0006A4  6F9F               	movwf	?_exp& (0+255),b
 13524  0006A6  0E00               	movlw	0
 13525  0006A8  6FA0               	movwf	(?_exp+1)& (0+255),b
 13526  0006AA  0E00               	movlw	0
 13527  0006AC  6FA1               	movwf	(?_exp+2)& (0+255),b
 13528                           
 13529                           ; BSR set to: 0
 13530  0006AE  0012               	return	
 13531  0006B0                     l2091:
 13532                           
 13533                           ; BSR set to: 0
 13534  0006B0  0100               	movlb	0	; () banked
 13535  0006B2  AFA1               	btfss	(exp@x+2)& (0+255),7,b
 13536  0006B4  D002               	goto	u7220
 13537  0006B6  0E01               	movlw	1
 13538  0006B8  D001               	goto	u7230
 13539  0006BA                     u7220:
 13540  0006BA  0E00               	movlw	0
 13541  0006BC                     u7230:
 13542  0006BC  6FA7               	movwf	exp@sign& (0+255),b
 13543                           
 13544                           ; BSR set to: 0
 13545  0006BE  51A7               	movf	exp@sign& (0+255),w,b
 13546  0006C0  B4D8               	btfsc	status,2,c
 13547  0006C2  D00E               	goto	l2092
 13548                           
 13549                           ; BSR set to: 0
 13550  0006C4  C09F  F018         	movff	exp@x,___ftneg@f1
 13551  0006C8  C0A0  F019         	movff	exp@x+1,___ftneg@f1+1
 13552  0006CC  C0A1  F01A         	movff	exp@x+2,___ftneg@f1+2
 13553  0006D0  EC38  F018         	call	___ftneg	;wreg free
 13554  0006D4  C018  F09F         	movff	?___ftneg,exp@x
 13555  0006D8  C019  F0A0         	movff	?___ftneg+1,exp@x+1
 13556  0006DC  C01A  F0A1         	movff	?___ftneg+2,exp@x+2
 13557  0006E0                     l2092:
 13558  0006E0  C09F  F060         	movff	exp@x,___ftmul@f1
 13559  0006E4  C0A0  F061         	movff	exp@x+1,___ftmul@f1+1
 13560  0006E8  C0A1  F062         	movff	exp@x+2,___ftmul@f1+2
 13561  0006EC  0EAA               	movlw	170
 13562  0006EE  0100               	movlb	0	; () banked
 13563  0006F0  6F63               	movwf	___ftmul@f2& (0+255),b
 13564  0006F2  0EB8               	movlw	184
 13565  0006F4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
 13566  0006F6  0E3F               	movlw	63
 13567  0006F8  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
 13568  0006FA  ECC6  F00C         	call	___ftmul	;wreg free
 13569  0006FE  C060  F09F         	movff	?___ftmul,exp@x
 13570  000702  C061  F0A0         	movff	?___ftmul+1,exp@x+1
 13571  000706  C062  F0A1         	movff	?___ftmul+2,exp@x+2
 13572  00070A  C09F  F097         	movff	exp@x,floor@x
 13573  00070E  C0A0  F098         	movff	exp@x+1,floor@x+1
 13574  000712  C0A1  F099         	movff	exp@x+2,floor@x+2
 13575  000716  EC27  F00E         	call	_floor	;wreg free
 13576  00071A  C097  F0A2         	movff	?_floor,_exp$3076
 13577  00071E  C098  F0A3         	movff	?_floor+1,_exp$3076+1
 13578  000722  C099  F0A4         	movff	?_floor+2,_exp$3076+2
 13579  000726  C0A2  F07E         	movff	_exp$3076,___fttol@f1
 13580  00072A  C0A3  F07F         	movff	_exp$3076+1,___fttol@f1+1
 13581  00072E  C0A4  F080         	movff	_exp$3076+2,___fttol@f1+2
 13582  000732  EC4A  F00C         	call	___fttol	;wreg free
 13583  000736  C07E  F0A5         	movff	?___fttol,exp@exponent
 13584  00073A  C07F  F0A6         	movff	?___fttol+1,exp@exponent+1
 13585  00073E  C09F  F060         	movff	exp@x,___ftsub@f1
 13586  000742  C0A0  F061         	movff	exp@x+1,___ftsub@f1+1
 13587  000746  C0A1  F062         	movff	exp@x+2,___ftsub@f1+2
 13588  00074A  C0A5  F020         	movff	exp@exponent,___awtoft@c
 13589  00074E  C0A6  F021         	movff	exp@exponent+1,___awtoft@c+1
 13590  000752  EC14  F017         	call	___awtoft	;wreg free
 13591  000756  C020  F063         	movff	?___awtoft,___ftsub@f2
 13592  00075A  C021  F064         	movff	?___awtoft+1,___ftsub@f2+1
 13593  00075E  C022  F065         	movff	?___awtoft+2,___ftsub@f2+2
 13594  000762  EC23  F016         	call	___ftsub	;wreg free
 13595  000766  C060  F09F         	movff	?___ftsub,exp@x
 13596  00076A  C061  F0A0         	movff	?___ftsub+1,exp@x+1
 13597  00076E  C062  F0A1         	movff	?___ftsub+2,exp@x+2
 13598  000772  C09F  F06F         	movff	exp@x,eval_poly@x
 13599  000776  C0A0  F070         	movff	exp@x+1,eval_poly@x+1
 13600  00077A  C0A1  F071         	movff	exp@x+2,eval_poly@x+2
 13601  00077E  0E05               	movlw	low exp@coeff
 13602  000780  0100               	movlb	0	; () banked
 13603  000782  6F72               	movwf	eval_poly@d& (0+255),b
 13604  000784  0E7A               	movlw	high exp@coeff
 13605  000786  6F73               	movwf	(eval_poly@d+1)& (0+255),b
 13606  000788  0E00               	movlw	0
 13607  00078A  6F75               	movwf	(eval_poly@n+1)& (0+255),b
 13608  00078C  0E09               	movlw	9
 13609  00078E  6F74               	movwf	eval_poly@n& (0+255),b
 13610  000790  EC04  F00F         	call	_eval_poly	;wreg free
 13611  000794  C06F  F07B         	movff	?_eval_poly,ldexp@value
 13612  000798  C070  F07C         	movff	?_eval_poly+1,ldexp@value+1
 13613  00079C  C071  F07D         	movff	?_eval_poly+2,ldexp@value+2
 13614  0007A0  C0A5  F07E         	movff	exp@exponent,ldexp@newexp
 13615  0007A4  C0A6  F07F         	movff	exp@exponent+1,ldexp@newexp+1
 13616  0007A8  EC71  F00F         	call	_ldexp	;wreg free
 13617  0007AC  C07B  F09F         	movff	?_ldexp,exp@x
 13618  0007B0  C07C  F0A0         	movff	?_ldexp+1,exp@x+1
 13619  0007B4  C07D  F0A1         	movff	?_ldexp+2,exp@x+2
 13620  0007B8  0100               	movlb	0	; () banked
 13621  0007BA  51A7               	movf	exp@sign& (0+255),w,b
 13622  0007BC  B4D8               	btfsc	status,2,c
 13623  0007BE  D025               	goto	l2093
 13624                           
 13625                           ; BSR set to: 0
 13626  0007C0  299F               	incf	exp@x& (0+255),w,b
 13627  0007C2  E10E               	bnz	l7177
 13628  0007C4  0E7F               	movlw	127
 13629  0007C6  19A0               	xorwf	(exp@x+1)& (0+255),w,b
 13630  0007C8  E10B               	bnz	l7177
 13631  0007CA  0E7F               	movlw	127
 13632  0007CC  19A1               	xorwf	(exp@x+2)& (0+255),w,b
 13633  0007CE  A4D8               	btfss	status,2,c
 13634  0007D0  D007               	goto	l2094
 13635                           
 13636                           ; BSR set to: 0
 13637  0007D2  0E00               	movlw	0
 13638  0007D4  6F9F               	movwf	?_exp& (0+255),b
 13639  0007D6  0E00               	movlw	0
 13640  0007D8  6FA0               	movwf	(?_exp+1)& (0+255),b
 13641  0007DA  0E00               	movlw	0
 13642  0007DC  6FA1               	movwf	(?_exp+2)& (0+255),b
 13643                           
 13644                           ; BSR set to: 0
 13645  0007DE  0012               	return	
 13646  0007E0                     l2094:
 13647  0007E0                     l7177:
 13648                           
 13649                           ; BSR set to: 0
 13650  0007E0  0E00               	movlw	0
 13651  0007E2  6F6F               	movwf	___ftdiv@f1& (0+255),b
 13652  0007E4  0E80               	movlw	128
 13653  0007E6  6F70               	movwf	(___ftdiv@f1+1)& (0+255),b
 13654  0007E8  0E3F               	movlw	63
 13655  0007EA  6F71               	movwf	(___ftdiv@f1+2)& (0+255),b
 13656  0007EC  C09F  F072         	movff	exp@x,___ftdiv@f2
 13657  0007F0  C0A0  F073         	movff	exp@x+1,___ftdiv@f2+1
 13658  0007F4  C0A1  F074         	movff	exp@x+2,___ftdiv@f2+2
 13659  0007F8  EC41  F00D         	call	___ftdiv	;wreg free
 13660  0007FC  C06F  F09F         	movff	?___ftdiv,?_exp
 13661  000800  C070  F0A0         	movff	?___ftdiv+1,?_exp+1
 13662  000804  C071  F0A1         	movff	?___ftdiv+2,?_exp+2
 13663  000808  0012               	return	
 13664  00080A                     l2093:
 13665                           
 13666                           ; BSR set to: 0
 13667  00080A  C09F  F09F         	movff	exp@x,?_exp
 13668  00080E  C0A0  F0A0         	movff	exp@x+1,?_exp+1
 13669  000812  C0A1  F0A1         	movff	exp@x+2,?_exp+2
 13670  000816  0012               	return		;funcret
 13671  000818                     __end_of_exp:
 13672                           	opt stack 0
 13673                           tosu	equ	0xFFF
 13674                           tosh	equ	0xFFE
 13675                           tosl	equ	0xFFD
 13676                           pclath	equ	0xFFA
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodh	equ	0xFF4
 13682                           prodl	equ	0xFF3
 13683                           intcon	equ	0xFF2
 13684                           intcon2	equ	0xFF1
 13685                           indf0	equ	0xFEF
 13686                           postinc0	equ	0xFEE
 13687                           fsr0h	equ	0xFEA
 13688                           fsr0l	equ	0xFE9
 13689                           wreg	equ	0xFE8
 13690                           indf1	equ	0xFE7
 13691                           postdec1	equ	0xFE5
 13692                           fsr1h	equ	0xFE2
 13693                           fsr1l	equ	0xFE1
 13694                           indf2	equ	0xFDF
 13695                           postinc2	equ	0xFDE
 13696                           postdec2	equ	0xFDD
 13697                           fsr2h	equ	0xFDA
 13698                           fsr2l	equ	0xFD9
 13699                           status	equ	0xFD8
 13700                           
 13701 ;; *************** function _ldexp *****************
 13702 ;; Defined at:
 13703 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;  value           3   27[BANK0 ] unsigned char 
 13706 ;;  newexp          2   30[BANK0 ] int 
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  3   27[BANK0 ] int 
 13711 ;; Registers used:
 13712 ;;		wreg, status,2, status,0
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13718 ;;      Params:         0       5       0       0       0       0       0
 13719 ;;      Locals:         0       0       0       0       0       0       0
 13720 ;;      Temps:          0       2       0       0       0       0       0
 13721 ;;      Totals:         0       7       0       0       0       0       0
 13722 ;;Total ram usage:        7 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    3
 13725 ;; This function calls:
 13726 ;;		Nothing
 13727 ;; This function is called by:
 13728 ;;		_exp
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           	psect	text66
 13733  001EE2                     __ptext66:
 13734                           	opt stack 0
 13735  001EE2                     _ldexp:
 13736                           	opt stack 22
 13737                           
 13738                           ;incstack = 0
 13739  001EE2  0100               	movlb	0	; () banked
 13740  001EE4  517B               	movf	ldexp@value& (0+255),w,b
 13741  001EE6  117C               	iorwf	(ldexp@value+1)& (0+255),w,b
 13742  001EE8  117D               	iorwf	(ldexp@value+2)& (0+255),w,b
 13743  001EEA  A4D8               	btfss	status,2,c
 13744  001EEC  D007               	goto	l2112
 13745                           
 13746                           ; BSR set to: 0
 13747  001EEE  0E00               	movlw	0
 13748  001EF0  6F7B               	movwf	?_ldexp& (0+255),b
 13749  001EF2  0E00               	movlw	0
 13750  001EF4  6F7C               	movwf	(?_ldexp+1)& (0+255),b
 13751  001EF6  0E00               	movlw	0
 13752  001EF8  6F7D               	movwf	(?_ldexp+2)& (0+255),b
 13753                           
 13754                           ; BSR set to: 0
 13755  001EFA  0012               	return	
 13756  001EFC                     l2112:
 13757                           
 13758                           ; BSR set to: 0
 13759                           
 13760                           ; BSR set to: 0
 13761  001EFC  517D               	movf	(ldexp@value+2)& (0+255),w,b
 13762  001EFE  0B7F               	andlw	127
 13763  001F00  6F80               	movwf	??_ldexp& (0+255),b
 13764  001F02  6B81               	clrf	(??_ldexp+1)& (0+255),b
 13765  001F04  90D8               	bcf	status,0,c
 13766  001F06  3780               	rlcf	??_ldexp& (0+255),f,b
 13767  001F08  3781               	rlcf	(??_ldexp+1)& (0+255),f,b
 13768  001F0A  5180               	movf	??_ldexp& (0+255),w,b
 13769  001F0C  277E               	addwf	ldexp@newexp& (0+255),f,b
 13770  001F0E  5181               	movf	(??_ldexp+1)& (0+255),w,b
 13771  001F10  237F               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13772  001F12  AF7C               	btfss	(ldexp@value+1)& (0+255),7,b
 13773  001F14  D003               	goto	u6920
 13774  001F16  6B80               	clrf	??_ldexp& (0+255),b
 13775  001F18  2B80               	incf	??_ldexp& (0+255),f,b
 13776  001F1A  D002               	goto	u6928
 13777  001F1C                     u6920:
 13778  001F1C  0100               	movlb	0	; () banked
 13779  001F1E  6B80               	clrf	??_ldexp& (0+255),b
 13780  001F20                     u6928:
 13781  001F20  5180               	movf	??_ldexp& (0+255),w,b
 13782  001F22  277E               	addwf	ldexp@newexp& (0+255),f,b
 13783  001F24  0E00               	movlw	0
 13784  001F26  237F               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13785  001F28  AF7F               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13786  001F2A  D00B               	goto	l2114
 13787                           
 13788                           ; BSR set to: 0
 13789  001F2C  0E00               	movlw	0
 13790  001F2E  6FED               	movwf	(_errno+1)& (0+255),b
 13791  001F30  0E22               	movlw	34
 13792  001F32  6FEC               	movwf	_errno& (0+255),b
 13793  001F34  0E00               	movlw	0
 13794  001F36  6F7B               	movwf	?_ldexp& (0+255),b
 13795  001F38  0E00               	movlw	0
 13796  001F3A  6F7C               	movwf	(?_ldexp+1)& (0+255),b
 13797  001F3C  0E00               	movlw	0
 13798  001F3E                     L1:
 13799  001F3E  6F7D               	movwf	(?_ldexp+2)& (0+255),b
 13800                           
 13801                           ; BSR set to: 0
 13802  001F40  0012               	return	
 13803  001F42                     l2114:
 13804                           
 13805                           ; BSR set to: 0
 13806                           
 13807                           ; BSR set to: 0
 13808  001F42  BF7F               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13809  001F44  D015               	goto	l2116
 13810  001F46  057F               	decf	(ldexp@newexp+1)& (0+255),w,b
 13811  001F48  A0D8               	btfss	status,0,c
 13812  001F4A  D012               	goto	l2116
 13813                           
 13814                           ; BSR set to: 0
 13815  001F4C  0E00               	movlw	0
 13816  001F4E  6FED               	movwf	(_errno+1)& (0+255),b
 13817  001F50  0E22               	movlw	34
 13818  001F52  6FEC               	movwf	_errno& (0+255),b
 13819                           
 13820                           ; BSR set to: 0
 13821  001F54  AF7D               	btfss	(ldexp@value+2)& (0+255),7,b
 13822  001F56  D006               	goto	l2117
 13823                           
 13824                           ; BSR set to: 0
 13825  001F58  0EFF               	movlw	255
 13826  001F5A  6F7B               	movwf	?_ldexp& (0+255),b
 13827  001F5C  0E7F               	movlw	127
 13828  001F5E  6F7C               	movwf	(?_ldexp+1)& (0+255),b
 13829  001F60  0EFF               	movlw	255
 13830  001F62  D7ED               	goto	L1
 13831  001F64                     l2117:
 13832                           
 13833                           ; BSR set to: 0
 13834                           
 13835                           ; BSR set to: 0
 13836  001F64  0EFF               	movlw	255
 13837  001F66  6F7B               	movwf	?_ldexp& (0+255),b
 13838  001F68  0E7F               	movlw	127
 13839  001F6A  6F7C               	movwf	(?_ldexp+1)& (0+255),b
 13840  001F6C  0E7F               	movlw	127
 13841  001F6E  D7E7               	goto	L1
 13842  001F70                     l2116:
 13843                           
 13844                           ; BSR set to: 0
 13845                           
 13846                           ; BSR set to: 0
 13847  001F70  357F               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13848  001F72  317F               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13849  001F74  6F81               	movwf	(??_ldexp+1)& (0+255),b
 13850  001F76  317E               	rrcf	ldexp@newexp& (0+255),w,b
 13851  001F78  6F80               	movwf	??_ldexp& (0+255),b
 13852  001F7A  517D               	movf	(ldexp@value+2)& (0+255),w,b
 13853  001F7C  1980               	xorwf	??_ldexp& (0+255),w,b
 13854  001F7E  0B80               	andlw	-128
 13855  001F80  1980               	xorwf	??_ldexp& (0+255),w,b
 13856  001F82  6F7D               	movwf	(ldexp@value+2)& (0+255),b
 13857  001F84  C07E  F080         	movff	ldexp@newexp,??_ldexp
 13858  001F88  0E01               	movlw	1
 13859  001F8A  1780               	andwf	??_ldexp& (0+255),f,b
 13860  001F8C  3380               	rrcf	??_ldexp& (0+255),f,b
 13861  001F8E  3380               	rrcf	??_ldexp& (0+255),f,b
 13862  001F90  517C               	movf	(ldexp@value+1)& (0+255),w,b
 13863  001F92  1980               	xorwf	??_ldexp& (0+255),w,b
 13864  001F94  0B7F               	andlw	-129
 13865  001F96  1980               	xorwf	??_ldexp& (0+255),w,b
 13866  001F98  6F7C               	movwf	(ldexp@value+1)& (0+255),b
 13867                           
 13868                           ; BSR set to: 0
 13869                           
 13870                           ; BSR set to: 0
 13871                           
 13872                           ; BSR set to: 0
 13873  001F9A  C07B  F07B         	movff	ldexp@value,?_ldexp
 13874  001F9E  C07C  F07C         	movff	ldexp@value+1,?_ldexp+1
 13875  001FA2  C07D  F07D         	movff	ldexp@value+2,?_ldexp+2
 13876  001FA6  0012               	return	
 13877  001FA8                     __end_of_ldexp:
 13878                           	opt stack 0
 13879                           tosu	equ	0xFFF
 13880                           tosh	equ	0xFFE
 13881                           tosl	equ	0xFFD
 13882                           pclath	equ	0xFFA
 13883                           tblptru	equ	0xFF8
 13884                           tblptrh	equ	0xFF7
 13885                           tblptrl	equ	0xFF6
 13886                           tablat	equ	0xFF5
 13887                           prodh	equ	0xFF4
 13888                           prodl	equ	0xFF3
 13889                           intcon	equ	0xFF2
 13890                           intcon2	equ	0xFF1
 13891                           indf0	equ	0xFEF
 13892                           postinc0	equ	0xFEE
 13893                           fsr0h	equ	0xFEA
 13894                           fsr0l	equ	0xFE9
 13895                           wreg	equ	0xFE8
 13896                           indf1	equ	0xFE7
 13897                           postdec1	equ	0xFE5
 13898                           fsr1h	equ	0xFE2
 13899                           fsr1l	equ	0xFE1
 13900                           indf2	equ	0xFDF
 13901                           postinc2	equ	0xFDE
 13902                           postdec2	equ	0xFDD
 13903                           fsr2h	equ	0xFDA
 13904                           fsr2l	equ	0xFD9
 13905                           status	equ	0xFD8
 13906                           
 13907 ;; *************** function _floor *****************
 13908 ;; Defined at:
 13909 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13910 ;; Parameters:    Size  Location     Type
 13911 ;;  x               3   55[BANK0 ] int 
 13912 ;; Auto vars:     Size  Location     Type
 13913 ;;  i               3   58[BANK0 ] int 
 13914 ;;  expon           2   61[BANK0 ] int 
 13915 ;; Return value:  Size  Location     Type
 13916 ;;                  3   55[BANK0 ] int 
 13917 ;; Registers used:
 13918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13919 ;; Tracked objects:
 13920 ;;		On entry : 0/0
 13921 ;;		On exit  : 0/0
 13922 ;;		Unchanged: 0/0
 13923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13924 ;;      Params:         0       3       0       0       0       0       0
 13925 ;;      Locals:         0       5       0       0       0       0       0
 13926 ;;      Temps:          0       0       0       0       0       0       0
 13927 ;;      Totals:         0       8       0       0       0       0       0
 13928 ;;Total ram usage:        8 bytes
 13929 ;; Hardware stack levels used:    1
 13930 ;; Hardware stack levels required when called:    5
 13931 ;; This function calls:
 13932 ;;		___altoft
 13933 ;;		___ftadd
 13934 ;;		___ftge
 13935 ;;		___fttol
 13936 ;;		_frexp
 13937 ;; This function is called by:
 13938 ;;		_exp
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text67
 13943  001C4E                     __ptext67:
 13944                           	opt stack 0
 13945  001C4E                     _floor:
 13946                           	opt stack 20
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;incstack = 0
 13950  001C4E  C097  F018         	movff	floor@x,frexp@value
 13951  001C52  C098  F019         	movff	floor@x+1,frexp@value+1
 13952  001C56  C099  F01A         	movff	floor@x+2,frexp@value+2
 13953  001C5A  0E9D               	movlw	low floor@expon
 13954  001C5C  6E1B               	movwf	frexp@eptr,c
 13955  001C5E  0E00               	movlw	high floor@expon
 13956  001C60  6E1C               	movwf	frexp@eptr+1,c
 13957  001C62  EC2C  F012         	call	_frexp	;wreg free
 13958  001C66  0100               	movlb	0	; () banked
 13959  001C68  AF9E               	btfss	(floor@expon+1)& (0+255),7,b
 13960  001C6A  D010               	goto	l2099
 13961                           
 13962                           ; BSR set to: 0
 13963  001C6C  AF99               	btfss	(floor@x+2)& (0+255),7,b
 13964  001C6E  D007               	goto	l2100
 13965                           
 13966                           ; BSR set to: 0
 13967  001C70  0E00               	movlw	0
 13968  001C72  6F97               	movwf	?_floor& (0+255),b
 13969  001C74  0E80               	movlw	128
 13970  001C76  6F98               	movwf	(?_floor+1)& (0+255),b
 13971  001C78  0EBF               	movlw	191
 13972  001C7A  6F99               	movwf	(?_floor+2)& (0+255),b
 13973                           
 13974                           ; BSR set to: 0
 13975  001C7C  0012               	return	
 13976  001C7E                     l2100:
 13977                           
 13978                           ; BSR set to: 0
 13979                           
 13980                           ; BSR set to: 0
 13981  001C7E  0E00               	movlw	0
 13982  001C80  6F97               	movwf	?_floor& (0+255),b
 13983  001C82  0E00               	movlw	0
 13984  001C84  6F98               	movwf	(?_floor+1)& (0+255),b
 13985  001C86  0E00               	movlw	0
 13986  001C88  6F99               	movwf	(?_floor+2)& (0+255),b
 13987                           
 13988                           ; BSR set to: 0
 13989  001C8A  0012               	return	
 13990  001C8C                     l2099:
 13991                           
 13992                           ; BSR set to: 0
 13993                           
 13994                           ; BSR set to: 0
 13995  001C8C  519E               	movf	(floor@expon+1)& (0+255),w,b
 13996  001C8E  E104               	bnz	u6880
 13997  001C90  0E15               	movlw	21
 13998  001C92  5D9D               	subwf	floor@expon& (0+255),w,b
 13999  001C94  A0D8               	btfss	status,0,c
 14000  001C96  D007               	goto	l2102
 14001  001C98                     u6880:
 14002                           
 14003                           ; BSR set to: 0
 14004  001C98  C097  F097         	movff	floor@x,?_floor
 14005  001C9C  C098  F098         	movff	floor@x+1,?_floor+1
 14006  001CA0  C099  F099         	movff	floor@x+2,?_floor+2
 14007  001CA4  0012               	return	
 14008  001CA6                     l2102:
 14009                           
 14010                           ; BSR set to: 0
 14011                           
 14012                           ; BSR set to: 0
 14013  001CA6  C097  F07E         	movff	floor@x,___fttol@f1
 14014  001CAA  C098  F07F         	movff	floor@x+1,___fttol@f1+1
 14015  001CAE  C099  F080         	movff	floor@x+2,___fttol@f1+2
 14016  001CB2  EC4A  F00C         	call	___fttol	;wreg free
 14017  001CB6  C07E  F08D         	movff	?___fttol,___altoft@c
 14018  001CBA  C07F  F08E         	movff	?___fttol+1,___altoft@c+1
 14019  001CBE  C080  F08F         	movff	?___fttol+2,___altoft@c+2
 14020  001CC2  C081  F090         	movff	?___fttol+3,___altoft@c+3
 14021  001CC6  ECBC  F012         	call	___altoft	;wreg free
 14022  001CCA  C08D  F09A         	movff	?___altoft,floor@i
 14023  001CCE  C08E  F09B         	movff	?___altoft+1,floor@i+1
 14024  001CD2  C08F  F09C         	movff	?___altoft+2,floor@i+2
 14025  001CD6  C097  F018         	movff	floor@x,___ftge@ff1
 14026  001CDA  C098  F019         	movff	floor@x+1,___ftge@ff1+1
 14027  001CDE  C099  F01A         	movff	floor@x+2,___ftge@ff1+2
 14028  001CE2  C09A  F01B         	movff	floor@i,___ftge@ff2
 14029  001CE6  C09B  F01C         	movff	floor@i+1,___ftge@ff2+1
 14030  001CEA  C09C  F01D         	movff	floor@i+2,___ftge@ff2+2
 14031  001CEE  EC74  F012         	call	___ftge	;wreg free
 14032  001CF2  B0D8               	btfsc	status,0,c
 14033  001CF4  D015               	goto	l2103
 14034  001CF6  C09A  F024         	movff	floor@i,___ftadd@f1
 14035  001CFA  C09B  F025         	movff	floor@i+1,___ftadd@f1+1
 14036  001CFE  C09C  F026         	movff	floor@i+2,___ftadd@f1+2
 14037  001D02  0E00               	movlw	0
 14038  001D04  6E27               	movwf	___ftadd@f2,c
 14039  001D06  0E80               	movlw	128
 14040  001D08  6E28               	movwf	___ftadd@f2+1,c
 14041  001D0A  0EBF               	movlw	191
 14042  001D0C  6E29               	movwf	___ftadd@f2+2,c
 14043  001D0E  ECB0  F007         	call	___ftadd	;wreg free
 14044  001D12  C024  F097         	movff	?___ftadd,?_floor
 14045  001D16  C025  F098         	movff	?___ftadd+1,?_floor+1
 14046  001D1A  C026  F099         	movff	?___ftadd+2,?_floor+2
 14047  001D1E  0012               	return	
 14048  001D20                     l2103:
 14049  001D20  C09A  F097         	movff	floor@i,?_floor
 14050  001D24  C09B  F098         	movff	floor@i+1,?_floor+1
 14051  001D28  C09C  F099         	movff	floor@i+2,?_floor+2
 14052  001D2C  0012               	return		;funcret
 14053  001D2E                     __end_of_floor:
 14054                           	opt stack 0
 14055                           tosu	equ	0xFFF
 14056                           tosh	equ	0xFFE
 14057                           tosl	equ	0xFFD
 14058                           pclath	equ	0xFFA
 14059                           tblptru	equ	0xFF8
 14060                           tblptrh	equ	0xFF7
 14061                           tblptrl	equ	0xFF6
 14062                           tablat	equ	0xFF5
 14063                           prodh	equ	0xFF4
 14064                           prodl	equ	0xFF3
 14065                           intcon	equ	0xFF2
 14066                           intcon2	equ	0xFF1
 14067                           indf0	equ	0xFEF
 14068                           postinc0	equ	0xFEE
 14069                           fsr0h	equ	0xFEA
 14070                           fsr0l	equ	0xFE9
 14071                           wreg	equ	0xFE8
 14072                           indf1	equ	0xFE7
 14073                           postdec1	equ	0xFE5
 14074                           fsr1h	equ	0xFE2
 14075                           fsr1l	equ	0xFE1
 14076                           indf2	equ	0xFDF
 14077                           postinc2	equ	0xFDE
 14078                           postdec2	equ	0xFDD
 14079                           fsr2h	equ	0xFDA
 14080                           fsr2l	equ	0xFD9
 14081                           status	equ	0xFD8
 14082                           
 14083 ;; *************** function _frexp *****************
 14084 ;; Defined at:
 14085 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14086 ;; Parameters:    Size  Location     Type
 14087 ;;  value           3   23[COMRAM] int 
 14088 ;;  eptr            2   26[COMRAM] PTR int 
 14089 ;;		 -> log@exponent(2), floor@expon(2), 
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  3   23[COMRAM] PTR int 
 14094 ;; Registers used:
 14095 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14101 ;;      Params:         5       0       0       0       0       0       0
 14102 ;;      Locals:         0       0       0       0       0       0       0
 14103 ;;      Temps:          2       0       0       0       0       0       0
 14104 ;;      Totals:         7       0       0       0       0       0       0
 14105 ;;Total ram usage:        7 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    3
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		_floor
 14112 ;;		_log
 14113 ;; This function uses a non-reentrant model
 14114 ;;
 14115                           
 14116                           	psect	text68
 14117  002458                     __ptext68:
 14118                           	opt stack 0
 14119  002458                     _frexp:
 14120                           	opt stack 22
 14121                           
 14122                           ;incstack = 0
 14123  002458  5018               	movf	frexp@value,w,c
 14124  00245A  1019               	iorwf	frexp@value+1,w,c
 14125  00245C  101A               	iorwf	frexp@value+2,w,c
 14126  00245E  A4D8               	btfss	status,2,c
 14127  002460  D00F               	goto	l2108
 14128  002462  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14129  002466  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14130  00246A  0E00               	movlw	0
 14131  00246C  6EDE               	movwf	postinc2,c
 14132  00246E  0E00               	movlw	0
 14133  002470  6EDD               	movwf	postdec2,c
 14134  002472  0E00               	movlw	0
 14135  002474  6E18               	movwf	?_frexp,c
 14136  002476  0E00               	movlw	0
 14137  002478  6E19               	movwf	?_frexp+1,c
 14138  00247A  0E00               	movlw	0
 14139  00247C  6E1A               	movwf	?_frexp+2,c
 14140  00247E  0012               	return	
 14141  002480                     l2108:
 14142  002480  501A               	movf	frexp@value+2,w,c
 14143  002482  0B7F               	andlw	127
 14144  002484  6E1D               	movwf	??_frexp& (0+255),c
 14145  002486  6A1E               	clrf	(??_frexp+1)& (0+255),c
 14146  002488  90D8               	bcf	status,0,c
 14147  00248A  361D               	rlcf	??_frexp,f,c
 14148  00248C  361E               	rlcf	??_frexp+1,f,c
 14149  00248E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14150  002492  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14151  002496  C01D  FFDE         	movff	??_frexp,postinc2
 14152  00249A  C01E  FFDD         	movff	??_frexp+1,postdec2
 14153  00249E  AE19               	btfss	frexp@value+1,7,c
 14154  0024A0  D003               	goto	u6760
 14155  0024A2  6A1D               	clrf	??_frexp& (0+255),c
 14156  0024A4  2A1D               	incf	??_frexp& (0+255),f,c
 14157  0024A6  D001               	goto	u6768
 14158  0024A8                     u6760:
 14159  0024A8  6A1D               	clrf	??_frexp& (0+255),c
 14160  0024AA                     u6768:
 14161  0024AA  501D               	movf	??_frexp,w,c
 14162  0024AC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14163  0024B0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14164  0024B4  12DE               	iorwf	postinc2,f,c
 14165  0024B6  0E00               	movlw	0
 14166  0024B8  12DD               	iorwf	postdec2,f,c
 14167  0024BA  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14168  0024BE  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14169  0024C2  0E82               	movlw	130
 14170  0024C4  26DE               	addwf	postinc2,f,c
 14171  0024C6  0EFF               	movlw	255
 14172  0024C8  22DD               	addwfc	postdec2,f,c
 14173  0024CA  801A               	bsf	frexp@value+2,0,c
 14174  0024CC  821A               	bsf	frexp@value+2,1,c
 14175  0024CE  841A               	bsf	frexp@value+2,2,c
 14176  0024D0  861A               	bsf	frexp@value+2,3,c
 14177  0024D2  881A               	bsf	frexp@value+2,4,c
 14178  0024D4  8A1A               	bsf	frexp@value+2,5,c
 14179  0024D6  9C1A               	bcf	frexp@value+2,6,c
 14180  0024D8  9E19               	bcf	frexp@value+1,7,c
 14181  0024DA  C018  F018         	movff	frexp@value,?_frexp
 14182  0024DE  C019  F019         	movff	frexp@value+1,?_frexp+1
 14183  0024E2  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 14184  0024E6  0012               	return	
 14185  0024E8                     __end_of_frexp:
 14186                           	opt stack 0
 14187                           tosu	equ	0xFFF
 14188                           tosh	equ	0xFFE
 14189                           tosl	equ	0xFFD
 14190                           pclath	equ	0xFFA
 14191                           tblptru	equ	0xFF8
 14192                           tblptrh	equ	0xFF7
 14193                           tblptrl	equ	0xFF6
 14194                           tablat	equ	0xFF5
 14195                           prodh	equ	0xFF4
 14196                           prodl	equ	0xFF3
 14197                           intcon	equ	0xFF2
 14198                           intcon2	equ	0xFF1
 14199                           indf0	equ	0xFEF
 14200                           postinc0	equ	0xFEE
 14201                           fsr0h	equ	0xFEA
 14202                           fsr0l	equ	0xFE9
 14203                           wreg	equ	0xFE8
 14204                           indf1	equ	0xFE7
 14205                           postdec1	equ	0xFE5
 14206                           fsr1h	equ	0xFE2
 14207                           fsr1l	equ	0xFE1
 14208                           indf2	equ	0xFDF
 14209                           postinc2	equ	0xFDE
 14210                           postdec2	equ	0xFDD
 14211                           fsr2h	equ	0xFDA
 14212                           fsr2l	equ	0xFD9
 14213                           status	equ	0xFD8
 14214                           
 14215 ;; *************** function ___fttol *****************
 14216 ;; Defined at:
 14217 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  f1              3   30[BANK0 ] float 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;  lval            4   40[BANK0 ] unsigned long 
 14222 ;;  exp1            1   44[BANK0 ] unsigned char 
 14223 ;;  sign1           1   39[BANK0 ] unsigned char 
 14224 ;; Return value:  Size  Location     Type
 14225 ;;                  4   30[BANK0 ] long 
 14226 ;; Registers used:
 14227 ;;		wreg, status,2, status,0
 14228 ;; Tracked objects:
 14229 ;;		On entry : 0/0
 14230 ;;		On exit  : 0/0
 14231 ;;		Unchanged: 0/0
 14232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14233 ;;      Params:         0       4       0       0       0       0       0
 14234 ;;      Locals:         0       6       0       0       0       0       0
 14235 ;;      Temps:          0       5       0       0       0       0       0
 14236 ;;      Totals:         0      15       0       0       0       0       0
 14237 ;;Total ram usage:       15 bytes
 14238 ;; Hardware stack levels used:    1
 14239 ;; Hardware stack levels required when called:    3
 14240 ;; This function calls:
 14241 ;;		Nothing
 14242 ;; This function is called by:
 14243 ;;		_AdcSingleSample
 14244 ;;		_SampleSingleChannel
 14245 ;;		_SampleVgMonChannel
 14246 ;;		_DacSetValue
 14247 ;;		_DacAnalogToDigitalSpi
 14248 ;;		_ReadIntFromEeprom
 14249 ;;		_pow
 14250 ;;		_exp
 14251 ;;		_floor
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           	psect	text69
 14256  001894                     __ptext69:
 14257                           	opt stack 0
 14258  001894                     ___fttol:
 14259                           	opt stack 21
 14260                           
 14261                           ;incstack = 0
 14262  001894  C080  F082         	movff	___fttol@f1+2,??___fttol
 14263  001898  0100               	movlb	0	; () banked
 14264  00189A  6B83               	clrf	(??___fttol+1)& (0+255),b
 14265  00189C  6B84               	clrf	(??___fttol+2)& (0+255),b
 14266  00189E  357F               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14267  0018A0  3782               	rlcf	??___fttol& (0+255),f,b
 14268  0018A2  E301               	bnc	u6671
 14269  0018A4  8183               	bsf	(??___fttol+1)& (0+255),0,b
 14270  0018A6                     u6671:
 14271  0018A6  5182               	movf	??___fttol& (0+255),w,b
 14272  0018A8  6F8C               	movwf	___fttol@exp1& (0+255),b
 14273  0018AA  518C               	movf	___fttol@exp1& (0+255),w,b
 14274  0018AC  A4D8               	btfss	status,2,c
 14275  0018AE  D009               	goto	l1765
 14276                           
 14277                           ; BSR set to: 0
 14278  0018B0  0E00               	movlw	0
 14279  0018B2  6F7E               	movwf	?___fttol& (0+255),b
 14280  0018B4  0E00               	movlw	0
 14281  0018B6  6F7F               	movwf	(?___fttol+1)& (0+255),b
 14282  0018B8  0E00               	movlw	0
 14283  0018BA  6F80               	movwf	(?___fttol+2)& (0+255),b
 14284  0018BC  0E00               	movlw	0
 14285  0018BE  6F81               	movwf	(?___fttol+3)& (0+255),b
 14286                           
 14287                           ; BSR set to: 0
 14288  0018C0  0012               	return	
 14289  0018C2                     l1765:
 14290                           
 14291                           ; BSR set to: 0
 14292                           
 14293                           ; BSR set to: 0
 14294  0018C2  0E17               	movlw	23
 14295  0018C4  6F82               	movwf	??___fttol& (0+255),b
 14296  0018C6  C07E  F083         	movff	___fttol@f1,??___fttol+1
 14297  0018CA  C07F  F084         	movff	___fttol@f1+1,??___fttol+2
 14298  0018CE  C080  F085         	movff	___fttol@f1+2,??___fttol+3
 14299  0018D2  2982               	incf	??___fttol& (0+255),w,b
 14300  0018D4  6F86               	movwf	(??___fttol+4)& (0+255),b
 14301  0018D6  D004               	goto	u6690
 14302  0018D8                     u6695:
 14303  0018D8  90D8               	bcf	status,0,c
 14304  0018DA  3385               	rrcf	(??___fttol+3)& (0+255),f,b
 14305  0018DC  3384               	rrcf	(??___fttol+2)& (0+255),f,b
 14306  0018DE  3383               	rrcf	(??___fttol+1)& (0+255),f,b
 14307  0018E0                     u6690:
 14308  0018E0  2F86               	decfsz	(??___fttol+4)& (0+255),f,b
 14309  0018E2  D7FA               	goto	u6695
 14310  0018E4  0100               	movlb	0	; () banked
 14311  0018E6  5183               	movf	(??___fttol+1)& (0+255),w,b
 14312  0018E8  6F87               	movwf	___fttol@sign1& (0+255),b
 14313                           
 14314                           ; BSR set to: 0
 14315  0018EA  8F7F               	bsf	(___fttol@f1+1)& (0+255),7,b
 14316                           
 14317                           ; BSR set to: 0
 14318  0018EC  0EFF               	movlw	255
 14319  0018EE  177E               	andwf	___fttol@f1& (0+255),f,b
 14320  0018F0  0EFF               	movlw	255
 14321  0018F2  177F               	andwf	(___fttol@f1+1)& (0+255),f,b
 14322  0018F4  0E00               	movlw	0
 14323  0018F6  1780               	andwf	(___fttol@f1+2)& (0+255),f,b
 14324                           
 14325                           ; BSR set to: 0
 14326  0018F8  517E               	movf	___fttol@f1& (0+255),w,b
 14327  0018FA  6F88               	movwf	___fttol@lval& (0+255),b
 14328  0018FC  517F               	movf	(___fttol@f1+1)& (0+255),w,b
 14329  0018FE  6F89               	movwf	(___fttol@lval+1)& (0+255),b
 14330  001900  5180               	movf	(___fttol@f1+2)& (0+255),w,b
 14331  001902  6F8A               	movwf	(___fttol@lval+2)& (0+255),b
 14332  001904  6B8B               	clrf	(___fttol@lval+3)& (0+255),b
 14333                           
 14334                           ; BSR set to: 0
 14335  001906  0E8E               	movlw	142
 14336  001908  5F8C               	subwf	___fttol@exp1& (0+255),f,b
 14337                           
 14338                           ; BSR set to: 0
 14339  00190A  AF8C               	btfss	___fttol@exp1& (0+255),7,b
 14340  00190C  D016               	goto	l1767
 14341                           
 14342                           ; BSR set to: 0
 14343  00190E  518C               	movf	___fttol@exp1& (0+255),w,b
 14344  001910  0A80               	xorlw	128
 14345  001912  0F8F               	addlw	143
 14346  001914  B0D8               	btfsc	status,0,c
 14347  001916  D009               	goto	l1768
 14348                           
 14349                           ; BSR set to: 0
 14350  001918  0E00               	movlw	0
 14351  00191A  6F7E               	movwf	?___fttol& (0+255),b
 14352  00191C  0E00               	movlw	0
 14353  00191E  6F7F               	movwf	(?___fttol+1)& (0+255),b
 14354  001920  0E00               	movlw	0
 14355  001922  6F80               	movwf	(?___fttol+2)& (0+255),b
 14356  001924  0E00               	movlw	0
 14357  001926  6F81               	movwf	(?___fttol+3)& (0+255),b
 14358                           
 14359                           ; BSR set to: 0
 14360  001928  0012               	return	
 14361  00192A                     l1768:
 14362                           
 14363                           ; BSR set to: 0
 14364                           
 14365                           ; BSR set to: 0
 14366                           
 14367                           ; BSR set to: 0
 14368  00192A  90D8               	bcf	status,0,c
 14369  00192C  338B               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14370  00192E  338A               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14371  001930  3389               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14372  001932  3388               	rrcf	___fttol@lval& (0+255),f,b
 14373                           
 14374                           ; BSR set to: 0
 14375  001934  3F8C               	incfsz	___fttol@exp1& (0+255),f,b
 14376  001936  D7F9               	goto	l1768
 14377                           
 14378                           ; BSR set to: 0
 14379  001938  D015               	goto	u6730
 14380  00193A                     l1767:
 14381                           
 14382                           ; BSR set to: 0
 14383                           
 14384                           ; BSR set to: 0
 14385  00193A  0E17               	movlw	23
 14386  00193C  658C               	cpfsgt	___fttol@exp1& (0+255),b
 14387  00193E  D00F               	goto	l1773
 14388                           
 14389                           ; BSR set to: 0
 14390  001940  0E00               	movlw	0
 14391  001942  6F7E               	movwf	?___fttol& (0+255),b
 14392  001944  0E00               	movlw	0
 14393  001946  6F7F               	movwf	(?___fttol+1)& (0+255),b
 14394  001948  0E00               	movlw	0
 14395  00194A  6F80               	movwf	(?___fttol+2)& (0+255),b
 14396  00194C  0E00               	movlw	0
 14397  00194E  6F81               	movwf	(?___fttol+3)& (0+255),b
 14398                           
 14399                           ; BSR set to: 0
 14400  001950  0012               	return	
 14401  001952                     
 14402                           ; BSR set to: 0
 14403                           
 14404                           ; BSR set to: 0
 14405  001952  90D8               	bcf	status,0,c
 14406  001954  3788               	rlcf	___fttol@lval& (0+255),f,b
 14407  001956  3789               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14408  001958  378A               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14409  00195A  378B               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14410  00195C  078C               	decf	___fttol@exp1& (0+255),f,b
 14411  00195E                     l1773:
 14412                           
 14413                           ; BSR set to: 0
 14414                           
 14415                           ; BSR set to: 0
 14416  00195E  518C               	movf	___fttol@exp1& (0+255),w,b
 14417  001960  A4D8               	btfss	status,2,c
 14418  001962  D7F7               	goto	l1774
 14419  001964                     u6730:
 14420                           
 14421                           ; BSR set to: 0
 14422                           
 14423                           ; BSR set to: 0
 14424                           
 14425                           ; BSR set to: 0
 14426  001964  5187               	movf	___fttol@sign1& (0+255),w,b
 14427  001966  B4D8               	btfsc	status,2,c
 14428  001968  D008               	goto	l1776
 14429                           
 14430                           ; BSR set to: 0
 14431  00196A  1F8B               	comf	(___fttol@lval+3)& (0+255),f,b
 14432  00196C  1F8A               	comf	(___fttol@lval+2)& (0+255),f,b
 14433  00196E  1F89               	comf	(___fttol@lval+1)& (0+255),f,b
 14434  001970  6D88               	negf	___fttol@lval& (0+255),b
 14435  001972  0E00               	movlw	0
 14436  001974  2389               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14437  001976  238A               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14438  001978  238B               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14439  00197A                     l1776:
 14440                           
 14441                           ; BSR set to: 0
 14442                           
 14443                           ; BSR set to: 0
 14444  00197A  C088  F07E         	movff	___fttol@lval,?___fttol
 14445  00197E  C089  F07F         	movff	___fttol@lval+1,?___fttol+1
 14446  001982  C08A  F080         	movff	___fttol@lval+2,?___fttol+2
 14447  001986  C08B  F081         	movff	___fttol@lval+3,?___fttol+3
 14448  00198A  0012               	return	
 14449  00198C                     __end_of___fttol:
 14450                           	opt stack 0
 14451                           tosu	equ	0xFFF
 14452                           tosh	equ	0xFFE
 14453                           tosl	equ	0xFFD
 14454                           pclath	equ	0xFFA
 14455                           tblptru	equ	0xFF8
 14456                           tblptrh	equ	0xFF7
 14457                           tblptrl	equ	0xFF6
 14458                           tablat	equ	0xFF5
 14459                           prodh	equ	0xFF4
 14460                           prodl	equ	0xFF3
 14461                           intcon	equ	0xFF2
 14462                           intcon2	equ	0xFF1
 14463                           indf0	equ	0xFEF
 14464                           postinc0	equ	0xFEE
 14465                           fsr0h	equ	0xFEA
 14466                           fsr0l	equ	0xFE9
 14467                           wreg	equ	0xFE8
 14468                           indf1	equ	0xFE7
 14469                           postdec1	equ	0xFE5
 14470                           fsr1h	equ	0xFE2
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           fsr2h	equ	0xFDA
 14476                           fsr2l	equ	0xFD9
 14477                           status	equ	0xFD8
 14478                           
 14479 ;; *************** function ___ftge *****************
 14480 ;; Defined at:
 14481 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  ff1             3   23[COMRAM] float 
 14484 ;;  ff2             3   26[COMRAM] float 
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;		None
 14487 ;; Return value:  Size  Location     Type
 14488 ;;		None               void
 14489 ;; Registers used:
 14490 ;;		wreg, status,2, status,0
 14491 ;; Tracked objects:
 14492 ;;		On entry : 0/0
 14493 ;;		On exit  : 0/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14496 ;;      Params:         6       0       0       0       0       0       0
 14497 ;;      Locals:         0       0       0       0       0       0       0
 14498 ;;      Temps:          3       0       0       0       0       0       0
 14499 ;;      Totals:         9       0       0       0       0       0       0
 14500 ;;Total ram usage:        9 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; Hardware stack levels required when called:    3
 14503 ;; This function calls:
 14504 ;;		Nothing
 14505 ;; This function is called by:
 14506 ;;		_pow
 14507 ;;		_exp
 14508 ;;		_floor
 14509 ;;		_CheckFlashPrecentage
 14510 ;; This function uses a non-reentrant model
 14511 ;;
 14512                           
 14513                           	psect	text70
 14514  0024E8                     __ptext70:
 14515                           	opt stack 0
 14516  0024E8                     ___ftge:
 14517                           	opt stack 21
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;incstack = 0
 14521  0024E8  AE1A               	btfss	___ftge@ff1+2,7,c
 14522  0024EA  D016               	goto	l1737
 14523  0024EC  C018  F01E         	movff	___ftge@ff1,??___ftge
 14524  0024F0  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 14525  0024F4  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 14526  0024F8  1E1E               	comf	??___ftge,f,c
 14527  0024FA  1E1F               	comf	??___ftge+1,f,c
 14528  0024FC  1E20               	comf	??___ftge+2,f,c
 14529  0024FE  2A1E               	incf	??___ftge,f,c
 14530  002500  0E00               	movlw	0
 14531  002502  221F               	addwfc	??___ftge+1,f,c
 14532  002504  2220               	addwfc	??___ftge+2,f,c
 14533  002506  0E00               	movlw	0
 14534  002508  241E               	addwf	??___ftge,w,c
 14535  00250A  6E18               	movwf	___ftge@ff1,c
 14536  00250C  0E00               	movlw	0
 14537  00250E  201F               	addwfc	??___ftge+1,w,c
 14538  002510  6E19               	movwf	___ftge@ff1+1,c
 14539  002512  0E80               	movlw	128
 14540  002514  2020               	addwfc	??___ftge+2,w,c
 14541  002516  6E1A               	movwf	___ftge@ff1+2,c
 14542  002518                     l1737:
 14543  002518  AE1D               	btfss	___ftge@ff2+2,7,c
 14544  00251A  D016               	goto	l1738
 14545  00251C  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14546  002520  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14547  002524  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14548  002528  1E1E               	comf	??___ftge,f,c
 14549  00252A  1E1F               	comf	??___ftge+1,f,c
 14550  00252C  1E20               	comf	??___ftge+2,f,c
 14551  00252E  2A1E               	incf	??___ftge,f,c
 14552  002530  0E00               	movlw	0
 14553  002532  221F               	addwfc	??___ftge+1,f,c
 14554  002534  2220               	addwfc	??___ftge+2,f,c
 14555  002536  0E00               	movlw	0
 14556  002538  241E               	addwf	??___ftge,w,c
 14557  00253A  6E1B               	movwf	___ftge@ff2,c
 14558  00253C  0E00               	movlw	0
 14559  00253E  201F               	addwfc	??___ftge+1,w,c
 14560  002540  6E1C               	movwf	___ftge@ff2+1,c
 14561  002542  0E80               	movlw	128
 14562  002544  2020               	addwfc	??___ftge+2,w,c
 14563  002546  6E1D               	movwf	___ftge@ff2+2,c
 14564  002548                     l1738:
 14565  002548  0E00               	movlw	0
 14566  00254A  1A18               	xorwf	___ftge@ff1,f,c
 14567  00254C  0E00               	movlw	0
 14568  00254E  1A19               	xorwf	___ftge@ff1+1,f,c
 14569  002550  0E80               	movlw	128
 14570  002552  1A1A               	xorwf	___ftge@ff1+2,f,c
 14571  002554  0E00               	movlw	0
 14572  002556  1A1B               	xorwf	___ftge@ff2,f,c
 14573  002558  0E00               	movlw	0
 14574  00255A  1A1C               	xorwf	___ftge@ff2+1,f,c
 14575  00255C  0E80               	movlw	128
 14576  00255E  1A1D               	xorwf	___ftge@ff2+2,f,c
 14577  002560  501B               	movf	___ftge@ff2,w,c
 14578  002562  5C18               	subwf	___ftge@ff1,w,c
 14579  002564  501C               	movf	___ftge@ff2+1,w,c
 14580  002566  5819               	subwfb	___ftge@ff1+1,w,c
 14581  002568  501D               	movf	___ftge@ff2+2,w,c
 14582  00256A  581A               	subwfb	___ftge@ff1+2,w,c
 14583  00256C  B0D8               	btfsc	status,0,c
 14584  00256E  D002               	goto	l6613
 14585  002570  90D8               	bcf	status,0,c
 14586  002572  0012               	return	
 14587  002574                     l6613:
 14588  002574  80D8               	bsf	status,0,c
 14589  002576  0012               	return	
 14590  002578                     __end_of___ftge:
 14591                           	opt stack 0
 14592                           tosu	equ	0xFFF
 14593                           tosh	equ	0xFFE
 14594                           tosl	equ	0xFFD
 14595                           pclath	equ	0xFFA
 14596                           tblptru	equ	0xFF8
 14597                           tblptrh	equ	0xFF7
 14598                           tblptrl	equ	0xFF6
 14599                           tablat	equ	0xFF5
 14600                           prodh	equ	0xFF4
 14601                           prodl	equ	0xFF3
 14602                           intcon	equ	0xFF2
 14603                           intcon2	equ	0xFF1
 14604                           indf0	equ	0xFEF
 14605                           postinc0	equ	0xFEE
 14606                           fsr0h	equ	0xFEA
 14607                           fsr0l	equ	0xFE9
 14608                           wreg	equ	0xFE8
 14609                           indf1	equ	0xFE7
 14610                           postdec1	equ	0xFE5
 14611                           fsr1h	equ	0xFE2
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function ___altoft *****************
 14621 ;; Defined at:
 14622 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;  c               4   45[BANK0 ] long 
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;  sign            1   54[BANK0 ] unsigned char 
 14627 ;;  exp             1   53[BANK0 ] unsigned char 
 14628 ;; Return value:  Size  Location     Type
 14629 ;;                  3   45[BANK0 ] float 
 14630 ;; Registers used:
 14631 ;;		wreg, status,2, status,0, cstack
 14632 ;; Tracked objects:
 14633 ;;		On entry : 0/0
 14634 ;;		On exit  : 0/0
 14635 ;;		Unchanged: 0/0
 14636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14637 ;;      Params:         0       4       0       0       0       0       0
 14638 ;;      Locals:         0       2       0       0       0       0       0
 14639 ;;      Temps:          0       4       0       0       0       0       0
 14640 ;;      Totals:         0      10       0       0       0       0       0
 14641 ;;Total ram usage:       10 bytes
 14642 ;; Hardware stack levels used:    1
 14643 ;; Hardware stack levels required when called:    4
 14644 ;; This function calls:
 14645 ;;		___ftpack
 14646 ;; This function is called by:
 14647 ;;		_floor
 14648 ;; This function uses a non-reentrant model
 14649 ;;
 14650                           
 14651                           	psect	text71
 14652  002578                     __ptext71:
 14653                           	opt stack 0
 14654  002578                     ___altoft:
 14655                           	opt stack 20
 14656                           
 14657                           ;incstack = 0
 14658  002578  0E00               	movlw	0
 14659  00257A  0100               	movlb	0	; () banked
 14660  00257C  6F96               	movwf	___altoft@sign& (0+255),b
 14661  00257E  0E8E               	movlw	142
 14662  002580  6F95               	movwf	___altoft@exp& (0+255),b
 14663                           
 14664                           ; BSR set to: 0
 14665  002582  AF90               	btfss	(___altoft@c+3)& (0+255),7,b
 14666  002584  D011               	goto	l1535
 14667                           
 14668                           ; BSR set to: 0
 14669  002586  1F90               	comf	(___altoft@c+3)& (0+255),f,b
 14670  002588  1F8F               	comf	(___altoft@c+2)& (0+255),f,b
 14671  00258A  1F8E               	comf	(___altoft@c+1)& (0+255),f,b
 14672  00258C  6D8D               	negf	___altoft@c& (0+255),b
 14673  00258E  0E00               	movlw	0
 14674  002590  238E               	addwfc	(___altoft@c+1)& (0+255),f,b
 14675  002592  238F               	addwfc	(___altoft@c+2)& (0+255),f,b
 14676  002594  2390               	addwfc	(___altoft@c+3)& (0+255),f,b
 14677                           
 14678                           ; BSR set to: 0
 14679  002596  0E01               	movlw	1
 14680  002598  6F96               	movwf	___altoft@sign& (0+255),b
 14681                           
 14682                           ; BSR set to: 0
 14683  00259A  D006               	goto	l1535
 14684  00259C                     
 14685                           ; BSR set to: 0
 14686                           
 14687                           ; BSR set to: 0
 14688  00259C  90D8               	bcf	status,0,c
 14689  00259E  3390               	rrcf	(___altoft@c+3)& (0+255),f,b
 14690  0025A0  338F               	rrcf	(___altoft@c+2)& (0+255),f,b
 14691  0025A2  338E               	rrcf	(___altoft@c+1)& (0+255),f,b
 14692  0025A4  338D               	rrcf	___altoft@c& (0+255),f,b
 14693  0025A6  2B95               	incf	___altoft@exp& (0+255),f,b
 14694  0025A8                     l1535:
 14695                           
 14696                           ; BSR set to: 0
 14697                           
 14698                           ; BSR set to: 0
 14699  0025A8  0E00               	movlw	0
 14700  0025AA  158D               	andwf	___altoft@c& (0+255),w,b
 14701  0025AC  6F91               	movwf	??___altoft& (0+255),b
 14702  0025AE  0E00               	movlw	0
 14703  0025B0  158E               	andwf	(___altoft@c+1)& (0+255),w,b
 14704  0025B2  6F92               	movwf	(??___altoft+1)& (0+255),b
 14705  0025B4  0E00               	movlw	0
 14706  0025B6  158F               	andwf	(___altoft@c+2)& (0+255),w,b
 14707  0025B8  6F93               	movwf	(??___altoft+2)& (0+255),b
 14708  0025BA  0EFF               	movlw	255
 14709  0025BC  1590               	andwf	(___altoft@c+3)& (0+255),w,b
 14710  0025BE  6F94               	movwf	(??___altoft+3)& (0+255),b
 14711  0025C0  5191               	movf	??___altoft& (0+255),w,b
 14712  0025C2  1192               	iorwf	(??___altoft+1)& (0+255),w,b
 14713  0025C4  1193               	iorwf	(??___altoft+2)& (0+255),w,b
 14714  0025C6  1194               	iorwf	(??___altoft+3)& (0+255),w,b
 14715  0025C8  A4D8               	btfss	status,2,c
 14716  0025CA  D7E8               	goto	l1536
 14717                           
 14718                           ; BSR set to: 0
 14719                           
 14720                           ; BSR set to: 0
 14721  0025CC  C08D  F018         	movff	___altoft@c,___ftpack@arg
 14722  0025D0  C08E  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14723  0025D4  C08F  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14724  0025D8  C095  F01B         	movff	___altoft@exp,___ftpack@exp
 14725  0025DC  C096  F01C         	movff	___altoft@sign,___ftpack@sign
 14726  0025E0  ECEF  F010         	call	___ftpack	;wreg free
 14727  0025E4  C018  F08D         	movff	?___ftpack,?___altoft
 14728  0025E8  C019  F08E         	movff	?___ftpack+1,?___altoft+1
 14729  0025EC  C01A  F08F         	movff	?___ftpack+2,?___altoft+2
 14730  0025F0  0012               	return	
 14731  0025F2                     __end_of___altoft:
 14732                           	opt stack 0
 14733                           tosu	equ	0xFFF
 14734                           tosh	equ	0xFFE
 14735                           tosl	equ	0xFFD
 14736                           pclath	equ	0xFFA
 14737                           tblptru	equ	0xFF8
 14738                           tblptrh	equ	0xFF7
 14739                           tblptrl	equ	0xFF6
 14740                           tablat	equ	0xFF5
 14741                           prodh	equ	0xFF4
 14742                           prodl	equ	0xFF3
 14743                           intcon	equ	0xFF2
 14744                           intcon2	equ	0xFF1
 14745                           indf0	equ	0xFEF
 14746                           postinc0	equ	0xFEE
 14747                           fsr0h	equ	0xFEA
 14748                           fsr0l	equ	0xFE9
 14749                           wreg	equ	0xFE8
 14750                           indf1	equ	0xFE7
 14751                           postdec1	equ	0xFE5
 14752                           fsr1h	equ	0xFE2
 14753                           fsr1l	equ	0xFE1
 14754                           indf2	equ	0xFDF
 14755                           postinc2	equ	0xFDE
 14756                           postdec2	equ	0xFDD
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function _eval_poly *****************
 14762 ;; Defined at:
 14763 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;  x               3   15[BANK0 ] float 
 14766 ;;  d               2   18[BANK0 ] PTR const 
 14767 ;;		 -> log@coeff(27), exp@coeff(30), 
 14768 ;;  n               2   20[BANK0 ] int 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  res             3   24[BANK0 ] int 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  3   15[BANK0 ] int 
 14773 ;; Registers used:
 14774 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14775 ;; Tracked objects:
 14776 ;;		On entry : 0/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14780 ;;      Params:         0       7       0       0       0       0       0
 14781 ;;      Locals:         0       3       0       0       0       0       0
 14782 ;;      Temps:          0       2       0       0       0       0       0
 14783 ;;      Totals:         0      12       0       0       0       0       0
 14784 ;;Total ram usage:       12 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    5
 14787 ;; This function calls:
 14788 ;;		___ftadd
 14789 ;;		___ftmul
 14790 ;;		___wmul
 14791 ;; This function is called by:
 14792 ;;		_exp
 14793 ;;		_log
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           	psect	text72
 14798  001E08                     __ptext72:
 14799                           	opt stack 0
 14800  001E08                     _eval_poly:
 14801                           	opt stack 20
 14802                           
 14803                           ;incstack = 0
 14804  001E08  C074  F018         	movff	eval_poly@n,___wmul@multiplier
 14805  001E0C  C075  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14806  001E10  0E00               	movlw	0
 14807  001E12  6E1B               	movwf	___wmul@multiplicand+1,c
 14808  001E14  0E03               	movlw	3
 14809  001E16  6E1A               	movwf	___wmul@multiplicand,c
 14810  001E18  ECEF  F017         	call	___wmul	;wreg free
 14811  001E1C  C072  F076         	movff	eval_poly@d,??_eval_poly
 14812  001E20  C073  F077         	movff	eval_poly@d+1,??_eval_poly+1
 14813  001E24  5018               	movf	?___wmul,w,c
 14814  001E26  0100               	movlb	0	; () banked
 14815  001E28  2776               	addwf	??_eval_poly& (0+255),f,b
 14816  001E2A  5019               	movf	?___wmul+1,w,c
 14817  001E2C  2377               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14818  001E2E  C076  FFF6         	movff	??_eval_poly,tblptrl
 14819  001E32  C077  FFF7         	movff	??_eval_poly+1,tblptrh
 14820  001E36                     	if	0	;tblptru may be non-zero
 14821  001E36                     	endif
 14822  001E36                     	if	0	;tblptru may be non-zero
 14823  001E36                     	endif
 14824  001E36  0009               	tblrd		*+
 14825  001E38  CFF5 F078          	movff	tablat,eval_poly@res
 14826  001E3C  0009               	tblrd		*+
 14827  001E3E  CFF5 F079          	movff	tablat,eval_poly@res+1
 14828  001E42  000A               	tblrd		*-
 14829  001E44  CFF5 F07A          	movff	tablat,eval_poly@res+2
 14830  001E48  D040               	goto	l2160
 14831  001E4A                     
 14832                           ; BSR set to: 0
 14833                           
 14834                           ; BSR set to: 0
 14835  001E4A  C078  F063         	movff	eval_poly@res,___ftmul@f2
 14836  001E4E  C079  F064         	movff	eval_poly@res+1,___ftmul@f2+1
 14837  001E52  C07A  F065         	movff	eval_poly@res+2,___ftmul@f2+2
 14838  001E56  C06F  F060         	movff	eval_poly@x,___ftmul@f1
 14839  001E5A  C070  F061         	movff	eval_poly@x+1,___ftmul@f1+1
 14840  001E5E  C071  F062         	movff	eval_poly@x+2,___ftmul@f1+2
 14841  001E62  ECC6  F00C         	call	___ftmul	;wreg free
 14842  001E66  C060  F024         	movff	?___ftmul,___ftadd@f1
 14843  001E6A  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
 14844  001E6E  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
 14845  001E72  0E00               	movlw	0
 14846  001E74  6E1B               	movwf	___wmul@multiplicand+1,c
 14847  001E76  0E03               	movlw	3
 14848  001E78  6E1A               	movwf	___wmul@multiplicand,c
 14849  001E7A  0100               	movlb	0	; () banked
 14850  001E7C  0774               	decf	eval_poly@n& (0+255),f,b
 14851  001E7E  A0D8               	btfss	status,0,c
 14852  001E80  0775               	decf	(eval_poly@n+1)& (0+255),f,b
 14853  001E82  C074  F018         	movff	eval_poly@n,___wmul@multiplier
 14854  001E86  C075  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14855  001E8A  ECEF  F017         	call	___wmul	;wreg free
 14856  001E8E  C072  F076         	movff	eval_poly@d,??_eval_poly
 14857  001E92  C073  F077         	movff	eval_poly@d+1,??_eval_poly+1
 14858  001E96  5018               	movf	?___wmul,w,c
 14859  001E98  0100               	movlb	0	; () banked
 14860  001E9A  2776               	addwf	??_eval_poly& (0+255),f,b
 14861  001E9C  5019               	movf	?___wmul+1,w,c
 14862  001E9E  2377               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14863  001EA0  C076  FFF6         	movff	??_eval_poly,tblptrl
 14864  001EA4  C077  FFF7         	movff	??_eval_poly+1,tblptrh
 14865  001EA8                     	if	0	;tblptru may be non-zero
 14866  001EA8                     	endif
 14867  001EA8                     	if	0	;tblptru may be non-zero
 14868  001EA8                     	endif
 14869  001EA8  0009               	tblrd		*+
 14870  001EAA  CFF5 F027          	movff	tablat,___ftadd@f2
 14871  001EAE  0009               	tblrd		*+
 14872  001EB0  CFF5 F028          	movff	tablat,___ftadd@f2+1
 14873  001EB4  000A               	tblrd		*-
 14874  001EB6  CFF5 F029          	movff	tablat,___ftadd@f2+2
 14875  001EBA  ECB0  F007         	call	___ftadd	;wreg free
 14876  001EBE  C024  F078         	movff	?___ftadd,eval_poly@res
 14877  001EC2  C025  F079         	movff	?___ftadd+1,eval_poly@res+1
 14878  001EC6  C026  F07A         	movff	?___ftadd+2,eval_poly@res+2
 14879  001ECA                     l2160:
 14880  001ECA  0100               	movlb	0	; () banked
 14881  001ECC  5174               	movf	eval_poly@n& (0+255),w,b
 14882  001ECE  1175               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14883  001ED0  A4D8               	btfss	status,2,c
 14884  001ED2  D7BB               	goto	l2161
 14885                           
 14886                           ; BSR set to: 0
 14887  001ED4  C078  F06F         	movff	eval_poly@res,?_eval_poly
 14888  001ED8  C079  F070         	movff	eval_poly@res+1,?_eval_poly+1
 14889  001EDC  C07A  F071         	movff	eval_poly@res+2,?_eval_poly+2
 14890                           
 14891                           ; BSR set to: 0
 14892  001EE0  0012               	return		;funcret
 14893  001EE2                     __end_of_eval_poly:
 14894                           	opt stack 0
 14895                           tosu	equ	0xFFF
 14896                           tosh	equ	0xFFE
 14897                           tosl	equ	0xFFD
 14898                           pclath	equ	0xFFA
 14899                           tblptru	equ	0xFF8
 14900                           tblptrh	equ	0xFF7
 14901                           tblptrl	equ	0xFF6
 14902                           tablat	equ	0xFF5
 14903                           prodh	equ	0xFF4
 14904                           prodl	equ	0xFF3
 14905                           intcon	equ	0xFF2
 14906                           intcon2	equ	0xFF1
 14907                           indf0	equ	0xFEF
 14908                           postinc0	equ	0xFEE
 14909                           fsr0h	equ	0xFEA
 14910                           fsr0l	equ	0xFE9
 14911                           wreg	equ	0xFE8
 14912                           indf1	equ	0xFE7
 14913                           postdec1	equ	0xFE5
 14914                           fsr1h	equ	0xFE2
 14915                           fsr1l	equ	0xFE1
 14916                           indf2	equ	0xFDF
 14917                           postinc2	equ	0xFDE
 14918                           postdec2	equ	0xFDD
 14919                           fsr2h	equ	0xFDA
 14920                           fsr2l	equ	0xFD9
 14921                           status	equ	0xFD8
 14922                           
 14923 ;; *************** function ___wmul *****************
 14924 ;; Defined at:
 14925 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14926 ;; Parameters:    Size  Location     Type
 14927 ;;  multiplier      2   23[COMRAM] unsigned int 
 14928 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;  product         2   27[COMRAM] unsigned int 
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  2   23[COMRAM] unsigned int 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2, status,0, prodl, prodh
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14940 ;;      Params:         4       0       0       0       0       0       0
 14941 ;;      Locals:         2       0       0       0       0       0       0
 14942 ;;      Temps:          0       0       0       0       0       0       0
 14943 ;;      Totals:         6       0       0       0       0       0       0
 14944 ;;Total ram usage:        6 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    3
 14947 ;; This function calls:
 14948 ;;		Nothing
 14949 ;; This function is called by:
 14950 ;;		_eval_poly
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           	psect	text73
 14955  002FDE                     __ptext73:
 14956                           	opt stack 0
 14957  002FDE                     ___wmul:
 14958                           	opt stack 21
 14959                           
 14960                           ; BSR set to: 0
 14961                           ;incstack = 0
 14962  002FDE  5018               	movf	___wmul@multiplier,w,c
 14963  002FE0  021A               	mulwf	___wmul@multiplicand,c
 14964  002FE2  CFF3 F01C          	movff	prodl,___wmul@product
 14965  002FE6  CFF4 F01D          	movff	prodh,___wmul@product+1
 14966  002FEA  5018               	movf	___wmul@multiplier,w,c
 14967  002FEC  021B               	mulwf	___wmul@multiplicand+1,c
 14968  002FEE  50F3               	movf	prodl,w,c
 14969  002FF0  261D               	addwf	___wmul@product+1,f,c
 14970  002FF2  5019               	movf	___wmul@multiplier+1,w,c
 14971  002FF4  021A               	mulwf	___wmul@multiplicand,c
 14972  002FF6  50F3               	movf	prodl,w,c
 14973  002FF8  261D               	addwf	___wmul@product+1,f,c
 14974  002FFA  C01C  F018         	movff	___wmul@product,?___wmul
 14975  002FFE  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14976  003002  0012               	return	
 14977  003004                     __end_of___wmul:
 14978                           	opt stack 0
 14979                           tosu	equ	0xFFF
 14980                           tosh	equ	0xFFE
 14981                           tosl	equ	0xFFD
 14982                           pclath	equ	0xFFA
 14983                           tblptru	equ	0xFF8
 14984                           tblptrh	equ	0xFF7
 14985                           tblptrl	equ	0xFF6
 14986                           tablat	equ	0xFF5
 14987                           prodh	equ	0xFF4
 14988                           prodl	equ	0xFF3
 14989                           intcon	equ	0xFF2
 14990                           intcon2	equ	0xFF1
 14991                           indf0	equ	0xFEF
 14992                           postinc0	equ	0xFEE
 14993                           fsr0h	equ	0xFEA
 14994                           fsr0l	equ	0xFE9
 14995                           wreg	equ	0xFE8
 14996                           indf1	equ	0xFE7
 14997                           postdec1	equ	0xFE5
 14998                           fsr1h	equ	0xFE2
 14999                           fsr1l	equ	0xFE1
 15000                           indf2	equ	0xFDF
 15001                           postinc2	equ	0xFDE
 15002                           postdec2	equ	0xFDD
 15003                           fsr2h	equ	0xFDA
 15004                           fsr2l	equ	0xFD9
 15005                           status	equ	0xFD8
 15006                           
 15007 ;; *************** function ___ftmul *****************
 15008 ;; Defined at:
 15009 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;  f1              3    0[BANK0 ] float 
 15012 ;;  f2              3    3[BANK0 ] float 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
 15015 ;;  sign            1   14[BANK0 ] unsigned char 
 15016 ;;  cntr            1   13[BANK0 ] unsigned char 
 15017 ;;  exp             1    9[BANK0 ] unsigned char 
 15018 ;; Return value:  Size  Location     Type
 15019 ;;                  3    0[BANK0 ] float 
 15020 ;; Registers used:
 15021 ;;		wreg, status,2, status,0, cstack
 15022 ;; Tracked objects:
 15023 ;;		On entry : 0/0
 15024 ;;		On exit  : 0/0
 15025 ;;		Unchanged: 0/0
 15026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15027 ;;      Params:         0       6       0       0       0       0       0
 15028 ;;      Locals:         0       6       0       0       0       0       0
 15029 ;;      Temps:          0       3       0       0       0       0       0
 15030 ;;      Totals:         0      15       0       0       0       0       0
 15031 ;;Total ram usage:       15 bytes
 15032 ;; Hardware stack levels used:    1
 15033 ;; Hardware stack levels required when called:    4
 15034 ;; This function calls:
 15035 ;;		___ftpack
 15036 ;; This function is called by:
 15037 ;;		_SampleSingleChannel
 15038 ;;		_SampleVgMonChannel
 15039 ;;		_DacAnalogToDigitalSpi
 15040 ;;		_pow
 15041 ;;		_exp
 15042 ;;		_log
 15043 ;;		_eval_poly
 15044 ;;		_CheckFlashPrecentage
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           	psect	text74
 15049  00198C                     __ptext74:
 15050                           	opt stack 0
 15051  00198C                     ___ftmul:
 15052                           	opt stack 20
 15053                           
 15054                           ;incstack = 0
 15055  00198C  C062  F066         	movff	___ftmul@f1+2,??___ftmul
 15056  001990  0100               	movlb	0	; () banked
 15057  001992  6B67               	clrf	(??___ftmul+1)& (0+255),b
 15058  001994  6B68               	clrf	(??___ftmul+2)& (0+255),b
 15059  001996  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15060  001998  3766               	rlcf	??___ftmul& (0+255),f,b
 15061  00199A  E301               	bnc	u6581
 15062  00199C  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 15063  00199E                     u6581:
 15064  00199E  5166               	movf	??___ftmul& (0+255),w,b
 15065  0019A0  6F69               	movwf	___ftmul@exp& (0+255),b
 15066  0019A2  5169               	movf	___ftmul@exp& (0+255),w,b
 15067  0019A4  A4D8               	btfss	status,2,c
 15068  0019A6  D007               	goto	l1744
 15069                           
 15070                           ; BSR set to: 0
 15071  0019A8  0E00               	movlw	0
 15072  0019AA  6F60               	movwf	?___ftmul& (0+255),b
 15073  0019AC  0E00               	movlw	0
 15074  0019AE  6F61               	movwf	(?___ftmul+1)& (0+255),b
 15075  0019B0  0E00               	movlw	0
 15076  0019B2  6F62               	movwf	(?___ftmul+2)& (0+255),b
 15077                           
 15078                           ; BSR set to: 0
 15079  0019B4  0012               	return	
 15080  0019B6                     l1744:
 15081                           
 15082                           ; BSR set to: 0
 15083                           
 15084                           ; BSR set to: 0
 15085  0019B6  C065  F066         	movff	___ftmul@f2+2,??___ftmul
 15086  0019BA  6B67               	clrf	(??___ftmul+1)& (0+255),b
 15087  0019BC  6B68               	clrf	(??___ftmul+2)& (0+255),b
 15088  0019BE  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15089  0019C0  3766               	rlcf	??___ftmul& (0+255),f,b
 15090  0019C2  E301               	bnc	u6601
 15091  0019C4  8167               	bsf	(??___ftmul+1)& (0+255),0,b
 15092  0019C6                     u6601:
 15093  0019C6  5166               	movf	??___ftmul& (0+255),w,b
 15094  0019C8  6F6E               	movwf	___ftmul@sign& (0+255),b
 15095  0019CA  516E               	movf	___ftmul@sign& (0+255),w,b
 15096  0019CC  A4D8               	btfss	status,2,c
 15097  0019CE  D007               	goto	l1746
 15098                           
 15099                           ; BSR set to: 0
 15100  0019D0  0E00               	movlw	0
 15101  0019D2  6F60               	movwf	?___ftmul& (0+255),b
 15102  0019D4  0E00               	movlw	0
 15103  0019D6  6F61               	movwf	(?___ftmul+1)& (0+255),b
 15104  0019D8  0E00               	movlw	0
 15105  0019DA  6F62               	movwf	(?___ftmul+2)& (0+255),b
 15106                           
 15107                           ; BSR set to: 0
 15108  0019DC  0012               	return	
 15109  0019DE                     l1746:
 15110                           
 15111                           ; BSR set to: 0
 15112                           
 15113                           ; BSR set to: 0
 15114  0019DE  516E               	movf	___ftmul@sign& (0+255),w,b
 15115  0019E0  0F7B               	addlw	123
 15116  0019E2  2769               	addwf	___ftmul@exp& (0+255),f,b
 15117                           
 15118                           ; BSR set to: 0
 15119  0019E4  C062  F06E         	movff	___ftmul@f1+2,___ftmul@sign
 15120  0019E8  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 15121  0019EA  1B6E               	xorwf	___ftmul@sign& (0+255),f,b
 15122  0019EC  0E80               	movlw	128
 15123  0019EE  176E               	andwf	___ftmul@sign& (0+255),f,b
 15124                           
 15125                           ; BSR set to: 0
 15126  0019F0  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15127                           
 15128                           ; BSR set to: 0
 15129  0019F2  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15130                           
 15131                           ; BSR set to: 0
 15132  0019F4  0EFF               	movlw	255
 15133  0019F6  1763               	andwf	___ftmul@f2& (0+255),f,b
 15134  0019F8  0EFF               	movlw	255
 15135  0019FA  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
 15136  0019FC  0E00               	movlw	0
 15137  0019FE  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
 15138                           
 15139                           ; BSR set to: 0
 15140  001A00  0E00               	movlw	0
 15141  001A02  6F6A               	movwf	___ftmul@f3_as_product& (0+255),b
 15142  001A04  0E00               	movlw	0
 15143  001A06  6F6B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 15144  001A08  0E00               	movlw	0
 15145  001A0A  6F6C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 15146                           
 15147                           ; BSR set to: 0
 15148  001A0C  0E07               	movlw	7
 15149  001A0E  6F6D               	movwf	___ftmul@cntr& (0+255),b
 15150  001A10                     
 15151                           ; BSR set to: 0
 15152                           
 15153                           ; BSR set to: 0
 15154  001A10  A160               	btfss	___ftmul@f1& (0+255),0,b
 15155  001A12  D006               	goto	l1748
 15156                           
 15157                           ; BSR set to: 0
 15158  001A14  5163               	movf	___ftmul@f2& (0+255),w,b
 15159  001A16  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15160  001A18  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 15161  001A1A  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15162  001A1C  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 15163  001A1E  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15164  001A20                     l1748:
 15165                           
 15166                           ; BSR set to: 0
 15167                           
 15168                           ; BSR set to: 0
 15169  001A20  90D8               	bcf	status,0,c
 15170  001A22  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15171  001A24  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15172  001A26  3360               	rrcf	___ftmul@f1& (0+255),f,b
 15173  001A28  90D8               	bcf	status,0,c
 15174  001A2A  3763               	rlcf	___ftmul@f2& (0+255),f,b
 15175  001A2C  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 15176  001A2E  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 15177                           
 15178                           ; BSR set to: 0
 15179  001A30  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 15180  001A32  D7EE               	goto	l1747
 15181                           
 15182                           ; BSR set to: 0
 15183                           
 15184                           ; BSR set to: 0
 15185  001A34  0E09               	movlw	9
 15186  001A36  6F6D               	movwf	___ftmul@cntr& (0+255),b
 15187  001A38                     
 15188                           ; BSR set to: 0
 15189                           
 15190                           ; BSR set to: 0
 15191  001A38  A160               	btfss	___ftmul@f1& (0+255),0,b
 15192  001A3A  D006               	goto	l1751
 15193                           
 15194                           ; BSR set to: 0
 15195  001A3C  5163               	movf	___ftmul@f2& (0+255),w,b
 15196  001A3E  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15197  001A40  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
 15198  001A42  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15199  001A44  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
 15200  001A46  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15201  001A48                     l1751:
 15202                           
 15203                           ; BSR set to: 0
 15204                           
 15205                           ; BSR set to: 0
 15206  001A48  90D8               	bcf	status,0,c
 15207  001A4A  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15208  001A4C  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15209  001A4E  3360               	rrcf	___ftmul@f1& (0+255),f,b
 15210  001A50  90D8               	bcf	status,0,c
 15211  001A52  336C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15212  001A54  336B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15213  001A56  336A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15214                           
 15215                           ; BSR set to: 0
 15216  001A58  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
 15217  001A5A  D7EE               	goto	l1750
 15218                           
 15219                           ; BSR set to: 0
 15220                           
 15221                           ; BSR set to: 0
 15222  001A5C  C06A  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 15223  001A60  C06B  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15224  001A64  C06C  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15225  001A68  C069  F01B         	movff	___ftmul@exp,___ftpack@exp
 15226  001A6C  C06E  F01C         	movff	___ftmul@sign,___ftpack@sign
 15227  001A70  ECEF  F010         	call	___ftpack	;wreg free
 15228  001A74  C018  F060         	movff	?___ftpack,?___ftmul
 15229  001A78  C019  F061         	movff	?___ftpack+1,?___ftmul+1
 15230  001A7C  C01A  F062         	movff	?___ftpack+2,?___ftmul+2
 15231  001A80  0012               	return	
 15232  001A82                     __end_of___ftmul:
 15233                           	opt stack 0
 15234                           tosu	equ	0xFFF
 15235                           tosh	equ	0xFFE
 15236                           tosl	equ	0xFFD
 15237                           pclath	equ	0xFFA
 15238                           tblptru	equ	0xFF8
 15239                           tblptrh	equ	0xFF7
 15240                           tblptrl	equ	0xFF6
 15241                           tablat	equ	0xFF5
 15242                           prodh	equ	0xFF4
 15243                           prodl	equ	0xFF3
 15244                           intcon	equ	0xFF2
 15245                           intcon2	equ	0xFF1
 15246                           indf0	equ	0xFEF
 15247                           postinc0	equ	0xFEE
 15248                           fsr0h	equ	0xFEA
 15249                           fsr0l	equ	0xFE9
 15250                           wreg	equ	0xFE8
 15251                           indf1	equ	0xFE7
 15252                           postdec1	equ	0xFE5
 15253                           fsr1h	equ	0xFE2
 15254                           fsr1l	equ	0xFE1
 15255                           indf2	equ	0xFDF
 15256                           postinc2	equ	0xFDE
 15257                           postdec2	equ	0xFDD
 15258                           fsr2h	equ	0xFDA
 15259                           fsr2l	equ	0xFD9
 15260                           status	equ	0xFD8
 15261                           
 15262 ;; *************** function ___ftsub *****************
 15263 ;; Defined at:
 15264 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;  f1              3    0[BANK0 ] float 
 15267 ;;  f2              3    3[BANK0 ] float 
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;		None
 15270 ;; Return value:  Size  Location     Type
 15271 ;;                  3    0[BANK0 ] float 
 15272 ;; Registers used:
 15273 ;;		wreg, status,2, status,0, cstack
 15274 ;; Tracked objects:
 15275 ;;		On entry : 0/0
 15276 ;;		On exit  : 0/0
 15277 ;;		Unchanged: 0/0
 15278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15279 ;;      Params:         0       6       0       0       0       0       0
 15280 ;;      Locals:         0       0       0       0       0       0       0
 15281 ;;      Temps:          0       0       0       0       0       0       0
 15282 ;;      Totals:         0       6       0       0       0       0       0
 15283 ;;Total ram usage:        6 bytes
 15284 ;; Hardware stack levels used:    1
 15285 ;; Hardware stack levels required when called:    5
 15286 ;; This function calls:
 15287 ;;		___ftadd
 15288 ;; This function is called by:
 15289 ;;		_exp
 15290 ;; This function uses a non-reentrant model
 15291 ;;
 15292                           
 15293                           	psect	text75
 15294  002C46                     __ptext75:
 15295                           	opt stack 0
 15296  002C46                     ___ftsub:
 15297                           	opt stack 20
 15298                           
 15299                           ;incstack = 0
 15300  002C46  0100               	movlb	0	; () banked
 15301  002C48  5163               	movf	___ftsub@f2& (0+255),w,b
 15302  002C4A  1164               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 15303  002C4C  1165               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 15304  002C4E  B4D8               	btfsc	status,2,c
 15305  002C50  D006               	goto	l1761
 15306                           
 15307                           ; BSR set to: 0
 15308  002C52  0E00               	movlw	0
 15309  002C54  1B63               	xorwf	___ftsub@f2& (0+255),f,b
 15310  002C56  0E00               	movlw	0
 15311  002C58  1B64               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 15312  002C5A  0E80               	movlw	128
 15313  002C5C  1B65               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 15314  002C5E                     l1761:
 15315                           
 15316                           ; BSR set to: 0
 15317                           
 15318                           ; BSR set to: 0
 15319  002C5E  C060  F024         	movff	___ftsub@f1,___ftadd@f1
 15320  002C62  C061  F025         	movff	___ftsub@f1+1,___ftadd@f1+1
 15321  002C66  C062  F026         	movff	___ftsub@f1+2,___ftadd@f1+2
 15322  002C6A  C063  F027         	movff	___ftsub@f2,___ftadd@f2
 15323  002C6E  C064  F028         	movff	___ftsub@f2+1,___ftadd@f2+1
 15324  002C72  C065  F029         	movff	___ftsub@f2+2,___ftadd@f2+2
 15325  002C76  ECB0  F007         	call	___ftadd	;wreg free
 15326  002C7A  C024  F060         	movff	?___ftadd,?___ftsub
 15327  002C7E  C025  F061         	movff	?___ftadd+1,?___ftsub+1
 15328  002C82  C026  F062         	movff	?___ftadd+2,?___ftsub+2
 15329  002C86  0012               	return	
 15330  002C88                     __end_of___ftsub:
 15331                           	opt stack 0
 15332                           tosu	equ	0xFFF
 15333                           tosh	equ	0xFFE
 15334                           tosl	equ	0xFFD
 15335                           pclath	equ	0xFFA
 15336                           tblptru	equ	0xFF8
 15337                           tblptrh	equ	0xFF7
 15338                           tblptrl	equ	0xFF6
 15339                           tablat	equ	0xFF5
 15340                           prodh	equ	0xFF4
 15341                           prodl	equ	0xFF3
 15342                           intcon	equ	0xFF2
 15343                           intcon2	equ	0xFF1
 15344                           indf0	equ	0xFEF
 15345                           postinc0	equ	0xFEE
 15346                           fsr0h	equ	0xFEA
 15347                           fsr0l	equ	0xFE9
 15348                           wreg	equ	0xFE8
 15349                           indf1	equ	0xFE7
 15350                           postdec1	equ	0xFE5
 15351                           fsr1h	equ	0xFE2
 15352                           fsr1l	equ	0xFE1
 15353                           indf2	equ	0xFDF
 15354                           postinc2	equ	0xFDE
 15355                           postdec2	equ	0xFDD
 15356                           fsr2h	equ	0xFDA
 15357                           fsr2l	equ	0xFD9
 15358                           status	equ	0xFD8
 15359                           
 15360 ;; *************** function ___ftadd *****************
 15361 ;; Defined at:
 15362 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;  f1              3   35[COMRAM] float 
 15365 ;;  f2              3   38[COMRAM] float 
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;  exp1            1   46[COMRAM] unsigned char 
 15368 ;;  exp2            1   45[COMRAM] unsigned char 
 15369 ;;  sign            1   44[COMRAM] unsigned char 
 15370 ;; Return value:  Size  Location     Type
 15371 ;;                  3   35[COMRAM] float 
 15372 ;; Registers used:
 15373 ;;		wreg, status,2, status,0, cstack
 15374 ;; Tracked objects:
 15375 ;;		On entry : 0/0
 15376 ;;		On exit  : 0/0
 15377 ;;		Unchanged: 0/0
 15378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15379 ;;      Params:         6       0       0       0       0       0       0
 15380 ;;      Locals:         3       0       0       0       0       0       0
 15381 ;;      Temps:          3       0       0       0       0       0       0
 15382 ;;      Totals:        12       0       0       0       0       0       0
 15383 ;;Total ram usage:       12 bytes
 15384 ;; Hardware stack levels used:    1
 15385 ;; Hardware stack levels required when called:    4
 15386 ;; This function calls:
 15387 ;;		___ftpack
 15388 ;; This function is called by:
 15389 ;;		_DacAnalogToDigitalSpi
 15390 ;;		___ftsub
 15391 ;;		_floor
 15392 ;;		_log
 15393 ;;		_eval_poly
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           	psect	text76
 15398  000F60                     __ptext76:
 15399                           	opt stack 0
 15400  000F60                     ___ftadd:
 15401                           	opt stack 20
 15402                           
 15403                           ;incstack = 0
 15404  000F60  C026  F02A         	movff	___ftadd@f1+2,??___ftadd
 15405  000F64  6A2B               	clrf	(??___ftadd+1)& (0+255),c
 15406  000F66  6A2C               	clrf	(??___ftadd+2)& (0+255),c
 15407  000F68  3425               	rlcf	___ftadd@f1+1,w,c
 15408  000F6A  362A               	rlcf	??___ftadd& (0+255),f,c
 15409  000F6C  E301               	bnc	u6371
 15410  000F6E  802B               	bsf	(??___ftadd+1)& (0+255),0,c
 15411  000F70                     u6371:
 15412  000F70  502A               	movf	??___ftadd,w,c
 15413  000F72  6E2F               	movwf	___ftadd@exp1,c
 15414  000F74  C029  F02A         	movff	___ftadd@f2+2,??___ftadd
 15415  000F78  6A2B               	clrf	(??___ftadd+1)& (0+255),c
 15416  000F7A  6A2C               	clrf	(??___ftadd+2)& (0+255),c
 15417  000F7C  3428               	rlcf	___ftadd@f2+1,w,c
 15418  000F7E  362A               	rlcf	??___ftadd& (0+255),f,c
 15419  000F80  E301               	bnc	u6381
 15420  000F82  802B               	bsf	(??___ftadd+1)& (0+255),0,c
 15421  000F84                     u6381:
 15422  000F84  502A               	movf	??___ftadd,w,c
 15423  000F86  6E2E               	movwf	___ftadd@exp2,c
 15424  000F88  502F               	movf	___ftadd@exp1,w,c
 15425  000F8A  B4D8               	btfsc	status,2,c
 15426  000F8C  D00B               	goto	u6410
 15427  000F8E  502E               	movf	___ftadd@exp2,w,c
 15428  000F90  5C2F               	subwf	___ftadd@exp1,w,c
 15429  000F92  B0D8               	btfsc	status,0,c
 15430  000F94  D00E               	goto	l1696
 15431  000F96  502F               	movf	___ftadd@exp1,w,c
 15432  000F98  0800               	sublw	0
 15433  000F9A  242E               	addwf	___ftadd@exp2,w,c
 15434  000F9C  6E2A               	movwf	??___ftadd& (0+255),c
 15435  000F9E  0E18               	movlw	24
 15436  000FA0  642A               	cpfsgt	??___ftadd,c
 15437  000FA2  D007               	goto	l1696
 15438  000FA4                     u6410:
 15439  000FA4  C027  F024         	movff	___ftadd@f2,?___ftadd
 15440  000FA8  C028  F025         	movff	___ftadd@f2+1,?___ftadd+1
 15441  000FAC  C029  F026         	movff	___ftadd@f2+2,?___ftadd+2
 15442  000FB0  0012               	return	
 15443  000FB2                     l1696:
 15444  000FB2  502E               	movf	___ftadd@exp2,w,c
 15445  000FB4  B4D8               	btfsc	status,2,c
 15446  000FB6  D00B               	goto	u6440
 15447  000FB8  502F               	movf	___ftadd@exp1,w,c
 15448  000FBA  5C2E               	subwf	___ftadd@exp2,w,c
 15449  000FBC  B0D8               	btfsc	status,0,c
 15450  000FBE  D00E               	goto	l1700
 15451  000FC0  502E               	movf	___ftadd@exp2,w,c
 15452  000FC2  0800               	sublw	0
 15453  000FC4  242F               	addwf	___ftadd@exp1,w,c
 15454  000FC6  6E2A               	movwf	??___ftadd& (0+255),c
 15455  000FC8  0E18               	movlw	24
 15456  000FCA  642A               	cpfsgt	??___ftadd,c
 15457  000FCC  D007               	goto	l1700
 15458  000FCE                     u6440:
 15459  000FCE  C024  F024         	movff	___ftadd@f1,?___ftadd
 15460  000FD2  C025  F025         	movff	___ftadd@f1+1,?___ftadd+1
 15461  000FD6  C026  F026         	movff	___ftadd@f1+2,?___ftadd+2
 15462  000FDA  0012               	return	
 15463  000FDC                     l1700:
 15464  000FDC  0E06               	movlw	6
 15465  000FDE  6E2D               	movwf	___ftadd@sign,c
 15466  000FE0  BE26               	btfsc	___ftadd@f1+2,7,c
 15467  000FE2  8E2D               	bsf	___ftadd@sign,7,c
 15468  000FE4  BE29               	btfsc	___ftadd@f2+2,7,c
 15469  000FE6  8C2D               	bsf	___ftadd@sign,6,c
 15470  000FE8  8E25               	bsf	___ftadd@f1+1,7,c
 15471  000FEA  0EFF               	movlw	255
 15472  000FEC  1624               	andwf	___ftadd@f1,f,c
 15473  000FEE  0EFF               	movlw	255
 15474  000FF0  1625               	andwf	___ftadd@f1+1,f,c
 15475  000FF2  0E00               	movlw	0
 15476  000FF4  1626               	andwf	___ftadd@f1+2,f,c
 15477  000FF6  8E28               	bsf	___ftadd@f2+1,7,c
 15478  000FF8  0EFF               	movlw	255
 15479  000FFA  1627               	andwf	___ftadd@f2,f,c
 15480  000FFC  0EFF               	movlw	255
 15481  000FFE  1628               	andwf	___ftadd@f2+1,f,c
 15482  001000  0E00               	movlw	0
 15483  001002  1629               	andwf	___ftadd@f2+2,f,c
 15484  001004  502E               	movf	___ftadd@exp2,w,c
 15485  001006  5C2F               	subwf	___ftadd@exp1,w,c
 15486  001008  B0D8               	btfsc	status,0,c
 15487  00100A  D01B               	goto	l1705
 15488  00100C                     u6470:
 15489  00100C  90D8               	bcf	status,0,c
 15490  00100E  3627               	rlcf	___ftadd@f2,f,c
 15491  001010  3628               	rlcf	___ftadd@f2+1,f,c
 15492  001012  3629               	rlcf	___ftadd@f2+2,f,c
 15493  001014  062E               	decf	___ftadd@exp2,f,c
 15494  001016  502F               	movf	___ftadd@exp1,w,c
 15495  001018  182E               	xorwf	___ftadd@exp2,w,c
 15496  00101A  B4D8               	btfsc	status,2,c
 15497  00101C  D00D               	goto	l1710
 15498  00101E  062D               	decf	___ftadd@sign,f,c
 15499  001020  C02D  F02A         	movff	___ftadd@sign,??___ftadd
 15500  001024  0E07               	movlw	7
 15501  001026  162A               	andwf	??___ftadd,f,c
 15502  001028  B4D8               	btfsc	status,2,c
 15503  00102A  D006               	goto	l1710
 15504  00102C  D7EF               	goto	u6470
 15505  00102E  90D8               	bcf	status,0,c
 15506  001030  3226               	rrcf	___ftadd@f1+2,f,c
 15507  001032  3225               	rrcf	___ftadd@f1+1,f,c
 15508  001034  3224               	rrcf	___ftadd@f1,f,c
 15509  001036  2A2F               	incf	___ftadd@exp1,f,c
 15510  001038                     l1710:
 15511  001038  502E               	movf	___ftadd@exp2,w,c
 15512  00103A  182F               	xorwf	___ftadd@exp1,w,c
 15513  00103C  B4D8               	btfsc	status,2,c
 15514  00103E  D01F               	goto	u6540
 15515  001040  D7F6               	goto	l1711
 15516  001042                     l1705:
 15517  001042  502F               	movf	___ftadd@exp1,w,c
 15518  001044  5C2E               	subwf	___ftadd@exp2,w,c
 15519  001046  B0D8               	btfsc	status,0,c
 15520  001048  D01A               	goto	u6540
 15521  00104A                     u6510:
 15522  00104A  90D8               	bcf	status,0,c
 15523  00104C  3624               	rlcf	___ftadd@f1,f,c
 15524  00104E  3625               	rlcf	___ftadd@f1+1,f,c
 15525  001050  3626               	rlcf	___ftadd@f1+2,f,c
 15526  001052  062F               	decf	___ftadd@exp1,f,c
 15527  001054  502F               	movf	___ftadd@exp1,w,c
 15528  001056  182E               	xorwf	___ftadd@exp2,w,c
 15529  001058  B4D8               	btfsc	status,2,c
 15530  00105A  D00D               	goto	l1719
 15531  00105C  062D               	decf	___ftadd@sign,f,c
 15532  00105E  C02D  F02A         	movff	___ftadd@sign,??___ftadd
 15533  001062  0E07               	movlw	7
 15534  001064  162A               	andwf	??___ftadd,f,c
 15535  001066  B4D8               	btfsc	status,2,c
 15536  001068  D006               	goto	l1719
 15537  00106A  D7EF               	goto	u6510
 15538  00106C  90D8               	bcf	status,0,c
 15539  00106E  3229               	rrcf	___ftadd@f2+2,f,c
 15540  001070  3228               	rrcf	___ftadd@f2+1,f,c
 15541  001072  3227               	rrcf	___ftadd@f2,f,c
 15542  001074  2A2E               	incf	___ftadd@exp2,f,c
 15543  001076                     l1719:
 15544  001076  502E               	movf	___ftadd@exp2,w,c
 15545  001078  182F               	xorwf	___ftadd@exp1,w,c
 15546  00107A  A4D8               	btfss	status,2,c
 15547  00107C  D7F7               	goto	l1720
 15548  00107E                     u6540:
 15549  00107E  AE2D               	btfss	___ftadd@sign,7,c
 15550  001080  D00C               	goto	l1722
 15551  001082  0EFF               	movlw	255
 15552  001084  1A24               	xorwf	___ftadd@f1,f,c
 15553  001086  0EFF               	movlw	255
 15554  001088  1A25               	xorwf	___ftadd@f1+1,f,c
 15555  00108A  0EFF               	movlw	255
 15556  00108C  1A26               	xorwf	___ftadd@f1+2,f,c
 15557  00108E  0E01               	movlw	1
 15558  001090  2624               	addwf	___ftadd@f1,f,c
 15559  001092  0E00               	movlw	0
 15560  001094  2225               	addwfc	___ftadd@f1+1,f,c
 15561  001096  0E00               	movlw	0
 15562  001098  2226               	addwfc	___ftadd@f1+2,f,c
 15563  00109A                     l1722:
 15564  00109A  AC2D               	btfss	___ftadd@sign,6,c
 15565  00109C  D00C               	goto	l1723
 15566  00109E  0EFF               	movlw	255
 15567  0010A0  1A27               	xorwf	___ftadd@f2,f,c
 15568  0010A2  0EFF               	movlw	255
 15569  0010A4  1A28               	xorwf	___ftadd@f2+1,f,c
 15570  0010A6  0EFF               	movlw	255
 15571  0010A8  1A29               	xorwf	___ftadd@f2+2,f,c
 15572  0010AA  0E01               	movlw	1
 15573  0010AC  2627               	addwf	___ftadd@f2,f,c
 15574  0010AE  0E00               	movlw	0
 15575  0010B0  2228               	addwfc	___ftadd@f2+1,f,c
 15576  0010B2  0E00               	movlw	0
 15577  0010B4  2229               	addwfc	___ftadd@f2+2,f,c
 15578  0010B6                     l1723:
 15579  0010B6  0E00               	movlw	0
 15580  0010B8  6E2D               	movwf	___ftadd@sign,c
 15581  0010BA  5024               	movf	___ftadd@f1,w,c
 15582  0010BC  2627               	addwf	___ftadd@f2,f,c
 15583  0010BE  5025               	movf	___ftadd@f1+1,w,c
 15584  0010C0  2228               	addwfc	___ftadd@f2+1,f,c
 15585  0010C2  5026               	movf	___ftadd@f1+2,w,c
 15586  0010C4  2229               	addwfc	___ftadd@f2+2,f,c
 15587  0010C6  AE29               	btfss	___ftadd@f2+2,7,c
 15588  0010C8  D00E               	goto	l1724
 15589  0010CA  0EFF               	movlw	255
 15590  0010CC  1A27               	xorwf	___ftadd@f2,f,c
 15591  0010CE  0EFF               	movlw	255
 15592  0010D0  1A28               	xorwf	___ftadd@f2+1,f,c
 15593  0010D2  0EFF               	movlw	255
 15594  0010D4  1A29               	xorwf	___ftadd@f2+2,f,c
 15595  0010D6  0E01               	movlw	1
 15596  0010D8  2627               	addwf	___ftadd@f2,f,c
 15597  0010DA  0E00               	movlw	0
 15598  0010DC  2228               	addwfc	___ftadd@f2+1,f,c
 15599  0010DE  0E00               	movlw	0
 15600  0010E0  2229               	addwfc	___ftadd@f2+2,f,c
 15601  0010E2  0E01               	movlw	1
 15602  0010E4  6E2D               	movwf	___ftadd@sign,c
 15603  0010E6                     l1724:
 15604  0010E6  C027  F018         	movff	___ftadd@f2,___ftpack@arg
 15605  0010EA  C028  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15606  0010EE  C029  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15607  0010F2  C02F  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15608  0010F6  C02D  F01C         	movff	___ftadd@sign,___ftpack@sign
 15609  0010FA  ECEF  F010         	call	___ftpack	;wreg free
 15610  0010FE  C018  F024         	movff	?___ftpack,?___ftadd
 15611  001102  C019  F025         	movff	?___ftpack+1,?___ftadd+1
 15612  001106  C01A  F026         	movff	?___ftpack+2,?___ftadd+2
 15613  00110A  0012               	return	
 15614  00110C                     __end_of___ftadd:
 15615                           	opt stack 0
 15616                           tosu	equ	0xFFF
 15617                           tosh	equ	0xFFE
 15618                           tosl	equ	0xFFD
 15619                           pclath	equ	0xFFA
 15620                           tblptru	equ	0xFF8
 15621                           tblptrh	equ	0xFF7
 15622                           tblptrl	equ	0xFF6
 15623                           tablat	equ	0xFF5
 15624                           prodh	equ	0xFF4
 15625                           prodl	equ	0xFF3
 15626                           intcon	equ	0xFF2
 15627                           intcon2	equ	0xFF1
 15628                           indf0	equ	0xFEF
 15629                           postinc0	equ	0xFEE
 15630                           fsr0h	equ	0xFEA
 15631                           fsr0l	equ	0xFE9
 15632                           wreg	equ	0xFE8
 15633                           indf1	equ	0xFE7
 15634                           postdec1	equ	0xFE5
 15635                           fsr1h	equ	0xFE2
 15636                           fsr1l	equ	0xFE1
 15637                           indf2	equ	0xFDF
 15638                           postinc2	equ	0xFDE
 15639                           postdec2	equ	0xFDD
 15640                           fsr2h	equ	0xFDA
 15641                           fsr2l	equ	0xFD9
 15642                           status	equ	0xFD8
 15643                           
 15644 ;; *************** function ___ftneg *****************
 15645 ;; Defined at:
 15646 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;  f1              3   23[COMRAM] float 
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;		None
 15651 ;; Return value:  Size  Location     Type
 15652 ;;                  3   23[COMRAM] float 
 15653 ;; Registers used:
 15654 ;;		wreg, status,2, status,0
 15655 ;; Tracked objects:
 15656 ;;		On entry : 0/0
 15657 ;;		On exit  : 0/0
 15658 ;;		Unchanged: 0/0
 15659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15660 ;;      Params:         3       0       0       0       0       0       0
 15661 ;;      Locals:         0       0       0       0       0       0       0
 15662 ;;      Temps:          0       0       0       0       0       0       0
 15663 ;;      Totals:         3       0       0       0       0       0       0
 15664 ;;Total ram usage:        3 bytes
 15665 ;; Hardware stack levels used:    1
 15666 ;; Hardware stack levels required when called:    3
 15667 ;; This function calls:
 15668 ;;		Nothing
 15669 ;; This function is called by:
 15670 ;;		_pow
 15671 ;;		_exp
 15672 ;; This function uses a non-reentrant model
 15673 ;;
 15674                           
 15675                           	psect	text77
 15676  003070                     __ptext77:
 15677                           	opt stack 0
 15678  003070                     ___ftneg:
 15679                           	opt stack 22
 15680                           
 15681                           ;incstack = 0
 15682  003070  5018               	movf	___ftneg@f1,w,c
 15683  003072  1019               	iorwf	___ftneg@f1+1,w,c
 15684  003074  101A               	iorwf	___ftneg@f1+2,w,c
 15685  003076  B4D8               	btfsc	status,2,c
 15686  003078  D006               	goto	l1755
 15687  00307A  0E00               	movlw	0
 15688  00307C  1A18               	xorwf	___ftneg@f1,f,c
 15689  00307E  0E00               	movlw	0
 15690  003080  1A19               	xorwf	___ftneg@f1+1,f,c
 15691  003082  0E80               	movlw	128
 15692  003084  1A1A               	xorwf	___ftneg@f1+2,f,c
 15693  003086                     l1755:
 15694  003086  C018  F018         	movff	___ftneg@f1,?___ftneg
 15695  00308A  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15696  00308E  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15697  003092  0012               	return		;funcret
 15698  003094                     __end_of___ftneg:
 15699                           	opt stack 0
 15700                           tosu	equ	0xFFF
 15701                           tosh	equ	0xFFE
 15702                           tosl	equ	0xFFD
 15703                           pclath	equ	0xFFA
 15704                           tblptru	equ	0xFF8
 15705                           tblptrh	equ	0xFF7
 15706                           tblptrl	equ	0xFF6
 15707                           tablat	equ	0xFF5
 15708                           prodh	equ	0xFF4
 15709                           prodl	equ	0xFF3
 15710                           intcon	equ	0xFF2
 15711                           intcon2	equ	0xFF1
 15712                           indf0	equ	0xFEF
 15713                           postinc0	equ	0xFEE
 15714                           fsr0h	equ	0xFEA
 15715                           fsr0l	equ	0xFE9
 15716                           wreg	equ	0xFE8
 15717                           indf1	equ	0xFE7
 15718                           postdec1	equ	0xFE5
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           fsr2h	equ	0xFDA
 15725                           fsr2l	equ	0xFD9
 15726                           status	equ	0xFD8
 15727                           
 15728 ;; *************** function ___ftdiv *****************
 15729 ;; Defined at:
 15730 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  f1              3   15[BANK0 ] float 
 15733 ;;  f2              3   18[BANK0 ] float 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  f3              3   25[BANK0 ] float 
 15736 ;;  sign            1   29[BANK0 ] unsigned char 
 15737 ;;  exp             1   28[BANK0 ] unsigned char 
 15738 ;;  cntr            1   24[BANK0 ] unsigned char 
 15739 ;; Return value:  Size  Location     Type
 15740 ;;                  3   15[BANK0 ] float 
 15741 ;; Registers used:
 15742 ;;		wreg, status,2, status,0, cstack
 15743 ;; Tracked objects:
 15744 ;;		On entry : 0/0
 15745 ;;		On exit  : 0/0
 15746 ;;		Unchanged: 0/0
 15747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15748 ;;      Params:         0       6       0       0       0       0       0
 15749 ;;      Locals:         0       6       0       0       0       0       0
 15750 ;;      Temps:          0       3       0       0       0       0       0
 15751 ;;      Totals:         0      15       0       0       0       0       0
 15752 ;;Total ram usage:       15 bytes
 15753 ;; Hardware stack levels used:    1
 15754 ;; Hardware stack levels required when called:    4
 15755 ;; This function calls:
 15756 ;;		___ftpack
 15757 ;; This function is called by:
 15758 ;;		_SampleSingleChannel
 15759 ;;		_SampleVgMonChannel
 15760 ;;		_DacAnalogToDigitalSpi
 15761 ;;		_exp
 15762 ;;		_CheckFlashPrecentage
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           	psect	text78
 15767  001A82                     __ptext78:
 15768                           	opt stack 0
 15769  001A82                     ___ftdiv:
 15770                           	opt stack 21
 15771                           
 15772                           ;incstack = 0
 15773  001A82  C071  F075         	movff	___ftdiv@f1+2,??___ftdiv
 15774  001A86  0100               	movlb	0	; () banked
 15775  001A88  6B76               	clrf	(??___ftdiv+1)& (0+255),b
 15776  001A8A  6B77               	clrf	(??___ftdiv+2)& (0+255),b
 15777  001A8C  3570               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 15778  001A8E  3775               	rlcf	??___ftdiv& (0+255),f,b
 15779  001A90  E301               	bnc	u6781
 15780  001A92  8176               	bsf	(??___ftdiv+1)& (0+255),0,b
 15781  001A94                     u6781:
 15782  001A94  5175               	movf	??___ftdiv& (0+255),w,b
 15783  001A96  6F7C               	movwf	___ftdiv@exp& (0+255),b
 15784  001A98  517C               	movf	___ftdiv@exp& (0+255),w,b
 15785  001A9A  A4D8               	btfss	status,2,c
 15786  001A9C  D007               	goto	l1729
 15787                           
 15788                           ; BSR set to: 0
 15789  001A9E  0E00               	movlw	0
 15790  001AA0  6F6F               	movwf	?___ftdiv& (0+255),b
 15791  001AA2  0E00               	movlw	0
 15792  001AA4  6F70               	movwf	(?___ftdiv+1)& (0+255),b
 15793  001AA6  0E00               	movlw	0
 15794  001AA8  6F71               	movwf	(?___ftdiv+2)& (0+255),b
 15795                           
 15796                           ; BSR set to: 0
 15797  001AAA  0012               	return	
 15798  001AAC                     l1729:
 15799                           
 15800                           ; BSR set to: 0
 15801                           
 15802                           ; BSR set to: 0
 15803  001AAC  C074  F075         	movff	___ftdiv@f2+2,??___ftdiv
 15804  001AB0  6B76               	clrf	(??___ftdiv+1)& (0+255),b
 15805  001AB2  6B77               	clrf	(??___ftdiv+2)& (0+255),b
 15806  001AB4  3573               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 15807  001AB6  3775               	rlcf	??___ftdiv& (0+255),f,b
 15808  001AB8  E301               	bnc	u6801
 15809  001ABA  8176               	bsf	(??___ftdiv+1)& (0+255),0,b
 15810  001ABC                     u6801:
 15811  001ABC  5175               	movf	??___ftdiv& (0+255),w,b
 15812  001ABE  6F7D               	movwf	___ftdiv@sign& (0+255),b
 15813  001AC0  517D               	movf	___ftdiv@sign& (0+255),w,b
 15814  001AC2  A4D8               	btfss	status,2,c
 15815  001AC4  D007               	goto	l1731
 15816                           
 15817                           ; BSR set to: 0
 15818  001AC6  0E00               	movlw	0
 15819  001AC8  6F6F               	movwf	?___ftdiv& (0+255),b
 15820  001ACA  0E00               	movlw	0
 15821  001ACC  6F70               	movwf	(?___ftdiv+1)& (0+255),b
 15822  001ACE  0E00               	movlw	0
 15823  001AD0  6F71               	movwf	(?___ftdiv+2)& (0+255),b
 15824                           
 15825                           ; BSR set to: 0
 15826  001AD2  0012               	return	
 15827  001AD4                     l1731:
 15828                           
 15829                           ; BSR set to: 0
 15830                           
 15831                           ; BSR set to: 0
 15832  001AD4  0E00               	movlw	0
 15833  001AD6  6F79               	movwf	___ftdiv@f3& (0+255),b
 15834  001AD8  0E00               	movlw	0
 15835  001ADA  6F7A               	movwf	(___ftdiv@f3+1)& (0+255),b
 15836  001ADC  0E00               	movlw	0
 15837  001ADE  6F7B               	movwf	(___ftdiv@f3+2)& (0+255),b
 15838                           
 15839                           ; BSR set to: 0
 15840  001AE0  517D               	movf	___ftdiv@sign& (0+255),w,b
 15841  001AE2  0F89               	addlw	137
 15842  001AE4  5F7C               	subwf	___ftdiv@exp& (0+255),f,b
 15843                           
 15844                           ; BSR set to: 0
 15845  001AE6  C071  F07D         	movff	___ftdiv@f1+2,___ftdiv@sign
 15846                           
 15847                           ; BSR set to: 0
 15848  001AEA  5174               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15849  001AEC  1B7D               	xorwf	___ftdiv@sign& (0+255),f,b
 15850                           
 15851                           ; BSR set to: 0
 15852  001AEE  0E80               	movlw	128
 15853  001AF0  177D               	andwf	___ftdiv@sign& (0+255),f,b
 15854                           
 15855                           ; BSR set to: 0
 15856  001AF2  8F70               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 15857                           
 15858                           ; BSR set to: 0
 15859  001AF4  0EFF               	movlw	255
 15860  001AF6  176F               	andwf	___ftdiv@f1& (0+255),f,b
 15861  001AF8  0EFF               	movlw	255
 15862  001AFA  1770               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 15863  001AFC  0E00               	movlw	0
 15864  001AFE  1771               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 15865                           
 15866                           ; BSR set to: 0
 15867  001B00  8F73               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 15868                           
 15869                           ; BSR set to: 0
 15870  001B02  0EFF               	movlw	255
 15871  001B04  1772               	andwf	___ftdiv@f2& (0+255),f,b
 15872  001B06  0EFF               	movlw	255
 15873  001B08  1773               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 15874  001B0A  0E00               	movlw	0
 15875  001B0C  1774               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 15876                           
 15877                           ; BSR set to: 0
 15878  001B0E  0E18               	movlw	24
 15879  001B10  6F78               	movwf	___ftdiv@cntr& (0+255),b
 15880  001B12                     
 15881                           ; BSR set to: 0
 15882                           
 15883                           ; BSR set to: 0
 15884  001B12  90D8               	bcf	status,0,c
 15885  001B14  3779               	rlcf	___ftdiv@f3& (0+255),f,b
 15886  001B16  377A               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15887  001B18  377B               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15888                           
 15889                           ; BSR set to: 0
 15890  001B1A  5172               	movf	___ftdiv@f2& (0+255),w,b
 15891  001B1C  5D6F               	subwf	___ftdiv@f1& (0+255),w,b
 15892  001B1E  5173               	movf	(___ftdiv@f2+1)& (0+255),w,b
 15893  001B20  5970               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 15894  001B22  5174               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15895  001B24  5971               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 15896  001B26  A0D8               	btfss	status,0,c
 15897  001B28  D007               	goto	l1733
 15898                           
 15899                           ; BSR set to: 0
 15900  001B2A  5172               	movf	___ftdiv@f2& (0+255),w,b
 15901  001B2C  5F6F               	subwf	___ftdiv@f1& (0+255),f,b
 15902  001B2E  5173               	movf	(___ftdiv@f2+1)& (0+255),w,b
 15903  001B30  5B70               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 15904  001B32  5174               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15905  001B34  5B71               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 15906                           
 15907                           ; BSR set to: 0
 15908  001B36  8179               	bsf	___ftdiv@f3& (0+255),0,b
 15909  001B38                     l1733:
 15910                           
 15911                           ; BSR set to: 0
 15912  001B38  90D8               	bcf	status,0,c
 15913  001B3A  376F               	rlcf	___ftdiv@f1& (0+255),f,b
 15914  001B3C  3770               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 15915  001B3E  3771               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 15916                           
 15917                           ; BSR set to: 0
 15918  001B40  2F78               	decfsz	___ftdiv@cntr& (0+255),f,b
 15919  001B42  D7E7               	goto	l1732
 15920                           
 15921                           ; BSR set to: 0
 15922                           
 15923                           ; BSR set to: 0
 15924  001B44  C079  F018         	movff	___ftdiv@f3,___ftpack@arg
 15925  001B48  C07A  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15926  001B4C  C07B  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15927  001B50  C07C  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15928  001B54  C07D  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15929  001B58  ECEF  F010         	call	___ftpack	;wreg free
 15930  001B5C  C018  F06F         	movff	?___ftpack,?___ftdiv
 15931  001B60  C019  F070         	movff	?___ftpack+1,?___ftdiv+1
 15932  001B64  C01A  F071         	movff	?___ftpack+2,?___ftdiv+2
 15933  001B68  0012               	return	
 15934  001B6A                     __end_of___ftdiv:
 15935                           	opt stack 0
 15936                           tosu	equ	0xFFF
 15937                           tosh	equ	0xFFE
 15938                           tosl	equ	0xFFD
 15939                           pclath	equ	0xFFA
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           intcon2	equ	0xFF1
 15948                           indf0	equ	0xFEF
 15949                           postinc0	equ	0xFEE
 15950                           fsr0h	equ	0xFEA
 15951                           fsr0l	equ	0xFE9
 15952                           wreg	equ	0xFE8
 15953                           indf1	equ	0xFE7
 15954                           postdec1	equ	0xFE5
 15955                           fsr1h	equ	0xFE2
 15956                           fsr1l	equ	0xFE1
 15957                           indf2	equ	0xFDF
 15958                           postinc2	equ	0xFDE
 15959                           postdec2	equ	0xFDD
 15960                           fsr2h	equ	0xFDA
 15961                           fsr2l	equ	0xFD9
 15962                           status	equ	0xFD8
 15963                           
 15964 ;; *************** function ___awtoft *****************
 15965 ;; Defined at:
 15966 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15967 ;; Parameters:    Size  Location     Type
 15968 ;;  c               2   31[COMRAM] int 
 15969 ;; Auto vars:     Size  Location     Type
 15970 ;;  sign            1   34[COMRAM] unsigned char 
 15971 ;; Return value:  Size  Location     Type
 15972 ;;                  3   31[COMRAM] float 
 15973 ;; Registers used:
 15974 ;;		wreg, status,2, status,0, cstack
 15975 ;; Tracked objects:
 15976 ;;		On entry : 0/0
 15977 ;;		On exit  : 0/0
 15978 ;;		Unchanged: 0/0
 15979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15980 ;;      Params:         3       0       0       0       0       0       0
 15981 ;;      Locals:         1       0       0       0       0       0       0
 15982 ;;      Temps:          0       0       0       0       0       0       0
 15983 ;;      Totals:         4       0       0       0       0       0       0
 15984 ;;Total ram usage:        4 bytes
 15985 ;; Hardware stack levels used:    1
 15986 ;; Hardware stack levels required when called:    4
 15987 ;; This function calls:
 15988 ;;		___ftpack
 15989 ;; This function is called by:
 15990 ;;		_AdcSingleSample
 15991 ;;		_DacSetValue
 15992 ;;		_ReadIntFromEeprom
 15993 ;;		_exp
 15994 ;;		_log
 15995 ;; This function uses a non-reentrant model
 15996 ;;
 15997                           
 15998                           	psect	text79
 15999  002E28                     __ptext79:
 16000                           	opt stack 0
 16001  002E28                     ___awtoft:
 16002                           	opt stack 21
 16003                           
 16004                           ;incstack = 0
 16005  002E28  0E00               	movlw	0
 16006  002E2A  6E23               	movwf	___awtoft@sign,c
 16007  002E2C  AE21               	btfss	___awtoft@c+1,7,c
 16008  002E2E  D006               	goto	l1646
 16009  002E30  6C20               	negf	___awtoft@c,c
 16010  002E32  1E21               	comf	___awtoft@c+1,f,c
 16011  002E34  B0D8               	btfsc	status,0,c
 16012  002E36  2A21               	incf	___awtoft@c+1,f,c
 16013  002E38  0E01               	movlw	1
 16014  002E3A  6E23               	movwf	___awtoft@sign,c
 16015  002E3C                     l1646:
 16016  002E3C  C020  F018         	movff	___awtoft@c,___ftpack@arg
 16017  002E40  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 16018  002E44  6A1A               	clrf	___ftpack@arg+2,c
 16019  002E46  0E8E               	movlw	142
 16020  002E48  6E1B               	movwf	___ftpack@exp,c
 16021  002E4A  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 16022  002E4E  ECEF  F010         	call	___ftpack	;wreg free
 16023  002E52  C018  F020         	movff	?___ftpack,?___awtoft
 16024  002E56  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 16025  002E5A  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 16026  002E5E  0012               	return	
 16027  002E60                     __end_of___awtoft:
 16028                           	opt stack 0
 16029                           tosu	equ	0xFFF
 16030                           tosh	equ	0xFFE
 16031                           tosl	equ	0xFFD
 16032                           pclath	equ	0xFFA
 16033                           tblptru	equ	0xFF8
 16034                           tblptrh	equ	0xFF7
 16035                           tblptrl	equ	0xFF6
 16036                           tablat	equ	0xFF5
 16037                           prodh	equ	0xFF4
 16038                           prodl	equ	0xFF3
 16039                           intcon	equ	0xFF2
 16040                           intcon2	equ	0xFF1
 16041                           indf0	equ	0xFEF
 16042                           postinc0	equ	0xFEE
 16043                           fsr0h	equ	0xFEA
 16044                           fsr0l	equ	0xFE9
 16045                           wreg	equ	0xFE8
 16046                           indf1	equ	0xFE7
 16047                           postdec1	equ	0xFE5
 16048                           fsr1h	equ	0xFE2
 16049                           fsr1l	equ	0xFE1
 16050                           indf2	equ	0xFDF
 16051                           postinc2	equ	0xFDE
 16052                           postdec2	equ	0xFDD
 16053                           fsr2h	equ	0xFDA
 16054                           fsr2l	equ	0xFD9
 16055                           status	equ	0xFD8
 16056                           
 16057 ;; *************** function ___lltoft *****************
 16058 ;; Defined at:
 16059 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;  c               4   31[COMRAM] unsigned long 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  exp             1   39[COMRAM] unsigned char 
 16064 ;; Return value:  Size  Location     Type
 16065 ;;                  3   31[COMRAM] float 
 16066 ;; Registers used:
 16067 ;;		wreg, status,2, status,0, cstack
 16068 ;; Tracked objects:
 16069 ;;		On entry : 0/0
 16070 ;;		On exit  : 0/0
 16071 ;;		Unchanged: 0/0
 16072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16073 ;;      Params:         4       0       0       0       0       0       0
 16074 ;;      Locals:         1       0       0       0       0       0       0
 16075 ;;      Temps:          4       0       0       0       0       0       0
 16076 ;;      Totals:         9       0       0       0       0       0       0
 16077 ;;Total ram usage:        9 bytes
 16078 ;; Hardware stack levels used:    1
 16079 ;; Hardware stack levels required when called:    4
 16080 ;; This function calls:
 16081 ;;		___ftpack
 16082 ;; This function is called by:
 16083 ;;		_pow
 16084 ;;		_CheckFlashPrecentage
 16085 ;; This function uses a non-reentrant model
 16086 ;;
 16087                           
 16088                           	psect	text80
 16089  002846                     __ptext80:
 16090                           	opt stack 0
 16091  002846                     ___lltoft:
 16092                           	opt stack 22
 16093                           
 16094                           ;incstack = 0
 16095  002846  0E8E               	movlw	142
 16096  002848  6E28               	movwf	___lltoft@exp,c
 16097  00284A  D006               	goto	l1822
 16098  00284C  90D8               	bcf	status,0,c
 16099  00284E  3223               	rrcf	___lltoft@c+3,f,c
 16100  002850  3222               	rrcf	___lltoft@c+2,f,c
 16101  002852  3221               	rrcf	___lltoft@c+1,f,c
 16102  002854  3220               	rrcf	___lltoft@c,f,c
 16103  002856  2A28               	incf	___lltoft@exp,f,c
 16104  002858                     l1822:
 16105  002858  0E00               	movlw	0
 16106  00285A  1420               	andwf	___lltoft@c,w,c
 16107  00285C  6E24               	movwf	??___lltoft& (0+255),c
 16108  00285E  0E00               	movlw	0
 16109  002860  1421               	andwf	___lltoft@c+1,w,c
 16110  002862  6E25               	movwf	(??___lltoft+1)& (0+255),c
 16111  002864  0E00               	movlw	0
 16112  002866  1422               	andwf	___lltoft@c+2,w,c
 16113  002868  6E26               	movwf	(??___lltoft+2)& (0+255),c
 16114  00286A  0EFF               	movlw	255
 16115  00286C  1423               	andwf	___lltoft@c+3,w,c
 16116  00286E  6E27               	movwf	(??___lltoft+3)& (0+255),c
 16117  002870  5024               	movf	??___lltoft,w,c
 16118  002872  1025               	iorwf	??___lltoft+1,w,c
 16119  002874  1026               	iorwf	??___lltoft+2,w,c
 16120  002876  1027               	iorwf	??___lltoft+3,w,c
 16121  002878  A4D8               	btfss	status,2,c
 16122  00287A  D7E8               	goto	l1823
 16123  00287C  C020  F018         	movff	___lltoft@c,___ftpack@arg
 16124  002880  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 16125  002884  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 16126  002888  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 16127  00288C  0E00               	movlw	0
 16128  00288E  6E1C               	movwf	___ftpack@sign,c
 16129  002890  ECEF  F010         	call	___ftpack	;wreg free
 16130  002894  C018  F020         	movff	?___ftpack,?___lltoft
 16131  002898  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 16132  00289C  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 16133  0028A0  0012               	return	
 16134  0028A2                     __end_of___lltoft:
 16135                           	opt stack 0
 16136                           tosu	equ	0xFFF
 16137                           tosh	equ	0xFFE
 16138                           tosl	equ	0xFFD
 16139                           pclath	equ	0xFFA
 16140                           tblptru	equ	0xFF8
 16141                           tblptrh	equ	0xFF7
 16142                           tblptrl	equ	0xFF6
 16143                           tablat	equ	0xFF5
 16144                           prodh	equ	0xFF4
 16145                           prodl	equ	0xFF3
 16146                           intcon	equ	0xFF2
 16147                           intcon2	equ	0xFF1
 16148                           indf0	equ	0xFEF
 16149                           postinc0	equ	0xFEE
 16150                           fsr0h	equ	0xFEA
 16151                           fsr0l	equ	0xFE9
 16152                           wreg	equ	0xFE8
 16153                           indf1	equ	0xFE7
 16154                           postdec1	equ	0xFE5
 16155                           fsr1h	equ	0xFE2
 16156                           fsr1l	equ	0xFE1
 16157                           indf2	equ	0xFDF
 16158                           postinc2	equ	0xFDE
 16159                           postdec2	equ	0xFDD
 16160                           fsr2h	equ	0xFDA
 16161                           fsr2l	equ	0xFD9
 16162                           status	equ	0xFD8
 16163                           
 16164 ;; *************** function ___ftpack *****************
 16165 ;; Defined at:
 16166 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 16167 ;; Parameters:    Size  Location     Type
 16168 ;;  arg             3   23[COMRAM] unsigned um
 16169 ;;  exp             1   26[COMRAM] unsigned char 
 16170 ;;  sign            1   27[COMRAM] unsigned char 
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;		None
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  3   23[COMRAM] float 
 16175 ;; Registers used:
 16176 ;;		wreg, status,2, status,0
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16182 ;;      Params:         5       0       0       0       0       0       0
 16183 ;;      Locals:         0       0       0       0       0       0       0
 16184 ;;      Temps:          3       0       0       0       0       0       0
 16185 ;;      Totals:         8       0       0       0       0       0       0
 16186 ;;Total ram usage:        8 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:    3
 16189 ;; This function calls:
 16190 ;;		Nothing
 16191 ;; This function is called by:
 16192 ;;		___altoft
 16193 ;;		___awtoft
 16194 ;;		___ftadd
 16195 ;;		___ftdiv
 16196 ;;		___ftmul
 16197 ;;		___lbtoft
 16198 ;;		___lltoft
 16199 ;;		___lwtoft
 16200 ;; This function uses a non-reentrant model
 16201 ;;
 16202                           
 16203                           	psect	text81
 16204  0021DE                     __ptext81:
 16205                           	opt stack 0
 16206  0021DE                     ___ftpack:
 16207                           	opt stack 20
 16208                           
 16209                           ;incstack = 0
 16210  0021DE  501B               	movf	___ftpack@exp,w,c
 16211  0021E0  B4D8               	btfsc	status,2,c
 16212  0021E2  D005               	goto	u6280
 16213  0021E4  5018               	movf	___ftpack@arg,w,c
 16214  0021E6  1019               	iorwf	___ftpack@arg+1,w,c
 16215  0021E8  101A               	iorwf	___ftpack@arg+2,w,c
 16216  0021EA  A4D8               	btfss	status,2,c
 16217  0021EC  D00C               	goto	l1665
 16218  0021EE                     u6280:
 16219  0021EE  0E00               	movlw	0
 16220  0021F0  6E18               	movwf	?___ftpack,c
 16221  0021F2  0E00               	movlw	0
 16222  0021F4  6E19               	movwf	?___ftpack+1,c
 16223  0021F6  0E00               	movlw	0
 16224  0021F8  6E1A               	movwf	?___ftpack+2,c
 16225  0021FA  0012               	return	
 16226  0021FC  2A1B               	incf	___ftpack@exp,f,c
 16227  0021FE  90D8               	bcf	status,0,c
 16228  002200  321A               	rrcf	___ftpack@arg+2,f,c
 16229  002202  3219               	rrcf	___ftpack@arg+1,f,c
 16230  002204  3218               	rrcf	___ftpack@arg,f,c
 16231  002206                     l1665:
 16232  002206  0E00               	movlw	0
 16233  002208  1418               	andwf	___ftpack@arg,w,c
 16234  00220A  6E1D               	movwf	??___ftpack& (0+255),c
 16235  00220C  0E00               	movlw	0
 16236  00220E  1419               	andwf	___ftpack@arg+1,w,c
 16237  002210  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16238  002212  0EFE               	movlw	254
 16239  002214  141A               	andwf	___ftpack@arg+2,w,c
 16240  002216  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16241  002218  501D               	movf	??___ftpack,w,c
 16242  00221A  101E               	iorwf	??___ftpack+1,w,c
 16243  00221C  101F               	iorwf	??___ftpack+2,w,c
 16244  00221E  B4D8               	btfsc	status,2,c
 16245  002220  D00C               	goto	l1668
 16246  002222  D7EC               	goto	l1666
 16247  002224  2A1B               	incf	___ftpack@exp,f,c
 16248  002226  0E01               	movlw	1
 16249  002228  2618               	addwf	___ftpack@arg,f,c
 16250  00222A  0E00               	movlw	0
 16251  00222C  2219               	addwfc	___ftpack@arg+1,f,c
 16252  00222E  0E00               	movlw	0
 16253  002230  221A               	addwfc	___ftpack@arg+2,f,c
 16254  002232  90D8               	bcf	status,0,c
 16255  002234  321A               	rrcf	___ftpack@arg+2,f,c
 16256  002236  3219               	rrcf	___ftpack@arg+1,f,c
 16257  002238  3218               	rrcf	___ftpack@arg,f,c
 16258  00223A                     l1668:
 16259  00223A  0E00               	movlw	0
 16260  00223C  1418               	andwf	___ftpack@arg,w,c
 16261  00223E  6E1D               	movwf	??___ftpack& (0+255),c
 16262  002240  0E00               	movlw	0
 16263  002242  1419               	andwf	___ftpack@arg+1,w,c
 16264  002244  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16265  002246  0EFF               	movlw	255
 16266  002248  141A               	andwf	___ftpack@arg+2,w,c
 16267  00224A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16268  00224C  501D               	movf	??___ftpack,w,c
 16269  00224E  101E               	iorwf	??___ftpack+1,w,c
 16270  002250  101F               	iorwf	??___ftpack+2,w,c
 16271  002252  B4D8               	btfsc	status,2,c
 16272  002254  D006               	goto	l1671
 16273  002256  D7E6               	goto	l1669
 16274  002258  061B               	decf	___ftpack@exp,f,c
 16275  00225A  90D8               	bcf	status,0,c
 16276  00225C  3618               	rlcf	___ftpack@arg,f,c
 16277  00225E  3619               	rlcf	___ftpack@arg+1,f,c
 16278  002260  361A               	rlcf	___ftpack@arg+2,f,c
 16279  002262                     l1671:
 16280  002262  BE19               	btfsc	___ftpack@arg+1,7,c
 16281  002264  D003               	goto	u6320
 16282  002266  0E02               	movlw	2
 16283  002268  601B               	cpfslt	___ftpack@exp,c
 16284  00226A  D7F6               	goto	l1672
 16285  00226C                     u6320:
 16286  00226C  A01B               	btfss	___ftpack@exp,0,c
 16287  00226E  9E19               	bcf	___ftpack@arg+1,7,c
 16288  002270  90D8               	bcf	status,0,c
 16289  002272  321B               	rrcf	___ftpack@exp,f,c
 16290  002274  501B               	movf	___ftpack@exp,w,c
 16291  002276  121A               	iorwf	___ftpack@arg+2,f,c
 16292  002278  501C               	movf	___ftpack@sign,w,c
 16293  00227A  A4D8               	btfss	status,2,c
 16294  00227C  8E1A               	bsf	___ftpack@arg+2,7,c
 16295  00227E  C018  F018         	movff	___ftpack@arg,?___ftpack
 16296  002282  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 16297  002286  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 16298  00228A  0012               	return	
 16299  00228C                     __end_of___ftpack:
 16300                           	opt stack 0
 16301                           tosu	equ	0xFFF
 16302                           tosh	equ	0xFFE
 16303                           tosl	equ	0xFFD
 16304                           pclath	equ	0xFFA
 16305                           tblptru	equ	0xFF8
 16306                           tblptrh	equ	0xFF7
 16307                           tblptrl	equ	0xFF6
 16308                           tablat	equ	0xFF5
 16309                           prodh	equ	0xFF4
 16310                           prodl	equ	0xFF3
 16311                           intcon	equ	0xFF2
 16312                           intcon2	equ	0xFF1
 16313                           indf0	equ	0xFEF
 16314                           postinc0	equ	0xFEE
 16315                           fsr0h	equ	0xFEA
 16316                           fsr0l	equ	0xFE9
 16317                           wreg	equ	0xFE8
 16318                           indf1	equ	0xFE7
 16319                           postdec1	equ	0xFE5
 16320                           fsr1h	equ	0xFE2
 16321                           fsr1l	equ	0xFE1
 16322                           indf2	equ	0xFDF
 16323                           postinc2	equ	0xFDE
 16324                           postdec2	equ	0xFDD
 16325                           fsr2h	equ	0xFDA
 16326                           fsr2l	equ	0xFD9
 16327                           status	equ	0xFD8
 16328                           
 16329 ;; *************** function ___lmul *****************
 16330 ;; Defined at:
 16331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  multiplier      4   25[COMRAM] unsigned long 
 16334 ;;  multiplicand    4   29[COMRAM] unsigned long 
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;  product         4   33[COMRAM] unsigned long 
 16337 ;; Return value:  Size  Location     Type
 16338 ;;                  4   25[COMRAM] unsigned long 
 16339 ;; Registers used:
 16340 ;;		wreg, status,2, status,0
 16341 ;; Tracked objects:
 16342 ;;		On entry : 0/0
 16343 ;;		On exit  : 0/0
 16344 ;;		Unchanged: 0/0
 16345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16346 ;;      Params:         8       0       0       0       0       0       0
 16347 ;;      Locals:         4       0       0       0       0       0       0
 16348 ;;      Temps:          0       0       0       0       0       0       0
 16349 ;;      Totals:        12       0       0       0       0       0       0
 16350 ;;Total ram usage:       12 bytes
 16351 ;; Hardware stack levels used:    1
 16352 ;; Hardware stack levels required when called:    3
 16353 ;; This function calls:
 16354 ;;		Nothing
 16355 ;; This function is called by:
 16356 ;;		_ReadIntFromEeprom
 16357 ;;		_strtol
 16358 ;; This function uses a non-reentrant model
 16359 ;;
 16360                           
 16361                           	psect	text82
 16362  0029FE                     __ptext82:
 16363                           	opt stack 0
 16364  0029FE                     ___lmul:
 16365                           	opt stack 22
 16366                           
 16367                           ;incstack = 0
 16368  0029FE  0E00               	movlw	0
 16369  002A00  6E22               	movwf	___lmul@product,c
 16370  002A02  0E00               	movlw	0
 16371  002A04  6E23               	movwf	___lmul@product+1,c
 16372  002A06  0E00               	movlw	0
 16373  002A08  6E24               	movwf	___lmul@product+2,c
 16374  002A0A  0E00               	movlw	0
 16375  002A0C  6E25               	movwf	___lmul@product+3,c
 16376  002A0E  A01A               	btfss	___lmul@multiplier,0,c
 16377  002A10  D008               	goto	l1459
 16378  002A12  501E               	movf	___lmul@multiplicand,w,c
 16379  002A14  2622               	addwf	___lmul@product,f,c
 16380  002A16  501F               	movf	___lmul@multiplicand+1,w,c
 16381  002A18  2223               	addwfc	___lmul@product+1,f,c
 16382  002A1A  5020               	movf	___lmul@multiplicand+2,w,c
 16383  002A1C  2224               	addwfc	___lmul@product+2,f,c
 16384  002A1E  5021               	movf	___lmul@multiplicand+3,w,c
 16385  002A20  2225               	addwfc	___lmul@product+3,f,c
 16386  002A22                     l1459:
 16387  002A22  90D8               	bcf	status,0,c
 16388  002A24  361E               	rlcf	___lmul@multiplicand,f,c
 16389  002A26  361F               	rlcf	___lmul@multiplicand+1,f,c
 16390  002A28  3620               	rlcf	___lmul@multiplicand+2,f,c
 16391  002A2A  3621               	rlcf	___lmul@multiplicand+3,f,c
 16392  002A2C  90D8               	bcf	status,0,c
 16393  002A2E  321D               	rrcf	___lmul@multiplier+3,f,c
 16394  002A30  321C               	rrcf	___lmul@multiplier+2,f,c
 16395  002A32  321B               	rrcf	___lmul@multiplier+1,f,c
 16396  002A34  321A               	rrcf	___lmul@multiplier,f,c
 16397  002A36  501A               	movf	___lmul@multiplier,w,c
 16398  002A38  101B               	iorwf	___lmul@multiplier+1,w,c
 16399  002A3A  101C               	iorwf	___lmul@multiplier+2,w,c
 16400  002A3C  101D               	iorwf	___lmul@multiplier+3,w,c
 16401  002A3E  A4D8               	btfss	status,2,c
 16402  002A40  D7E6               	goto	l1458
 16403  002A42  C022  F01A         	movff	___lmul@product,?___lmul
 16404  002A46  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 16405  002A4A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 16406  002A4E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 16407  002A52  0012               	return		;funcret
 16408  002A54                     __end_of___lmul:
 16409                           	opt stack 0
 16410                           tosu	equ	0xFFF
 16411                           tosh	equ	0xFFE
 16412                           tosl	equ	0xFFD
 16413                           pclath	equ	0xFFA
 16414                           tblptru	equ	0xFF8
 16415                           tblptrh	equ	0xFF7
 16416                           tblptrl	equ	0xFF6
 16417                           tablat	equ	0xFF5
 16418                           prodh	equ	0xFF4
 16419                           prodl	equ	0xFF3
 16420                           intcon	equ	0xFF2
 16421                           intcon2	equ	0xFF1
 16422                           indf0	equ	0xFEF
 16423                           postinc0	equ	0xFEE
 16424                           fsr0h	equ	0xFEA
 16425                           fsr0l	equ	0xFE9
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           fsr2h	equ	0xFDA
 16435                           fsr2l	equ	0xFD9
 16436                           status	equ	0xFD8
 16437                           
 16438 ;; *************** function _EepromRead *****************
 16439 ;; Defined at:
 16440 ;;		line 215 in file "FlashApp.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  address         1    wreg     unsigned char 
 16443 ;; Auto vars:     Size  Location     Type
 16444 ;;  address         1   24[COMRAM] unsigned char 
 16445 ;; Return value:  Size  Location     Type
 16446 ;;                  1    wreg      unsigned char 
 16447 ;; Registers used:
 16448 ;;		wreg, status,2, cstack
 16449 ;; Tracked objects:
 16450 ;;		On entry : 0/0
 16451 ;;		On exit  : 0/0
 16452 ;;		Unchanged: 0/0
 16453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16454 ;;      Params:         0       0       0       0       0       0       0
 16455 ;;      Locals:         1       0       0       0       0       0       0
 16456 ;;      Temps:          0       0       0       0       0       0       0
 16457 ;;      Totals:         1       0       0       0       0       0       0
 16458 ;;Total ram usage:        1 bytes
 16459 ;; Hardware stack levels used:    1
 16460 ;; Hardware stack levels required when called:    4
 16461 ;; This function calls:
 16462 ;;		_DATAEE_ReadByte
 16463 ;; This function is called by:
 16464 ;;		_ReadIntFromEeprom
 16465 ;; This function uses a non-reentrant model
 16466 ;;
 16467                           
 16468                           	psect	text83
 16469  0031E0                     __ptext83:
 16470                           	opt stack 0
 16471  0031E0                     _EepromRead:
 16472                           	opt stack 23
 16473                           
 16474                           ;incstack = 0
 16475                           ;EepromRead@address stored from wreg
 16476  0031E0  6E19               	movwf	EepromRead@address,c
 16477                           
 16478                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 16479  0031E2  5019               	movf	EepromRead@address,w,c
 16480  0031E4  ECBE  F018         	call	_DATAEE_ReadByte
 16481  0031E8  0012               	return	
 16482  0031EA                     __end_of_EepromRead:
 16483                           	opt stack 0
 16484                           tosu	equ	0xFFF
 16485                           tosh	equ	0xFFE
 16486                           tosl	equ	0xFFD
 16487                           pclath	equ	0xFFA
 16488                           tblptru	equ	0xFF8
 16489                           tblptrh	equ	0xFF7
 16490                           tblptrl	equ	0xFF6
 16491                           tablat	equ	0xFF5
 16492                           prodh	equ	0xFF4
 16493                           prodl	equ	0xFF3
 16494                           intcon	equ	0xFF2
 16495                           intcon2	equ	0xFF1
 16496                           indf0	equ	0xFEF
 16497                           postinc0	equ	0xFEE
 16498                           fsr0h	equ	0xFEA
 16499                           fsr0l	equ	0xFE9
 16500                           wreg	equ	0xFE8
 16501                           indf1	equ	0xFE7
 16502                           postdec1	equ	0xFE5
 16503                           fsr1h	equ	0xFE2
 16504                           fsr1l	equ	0xFE1
 16505                           indf2	equ	0xFDF
 16506                           postinc2	equ	0xFDE
 16507                           postdec2	equ	0xFDD
 16508                           fsr2h	equ	0xFDA
 16509                           fsr2l	equ	0xFD9
 16510                           status	equ	0xFD8
 16511                           
 16512 ;; *************** function _DATAEE_ReadByte *****************
 16513 ;; Defined at:
 16514 ;;		line 194 in file "mcc_generated_files/memory.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;  bAdd            1    wreg     unsigned char 
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;  bAdd            1   23[COMRAM] unsigned char 
 16519 ;; Return value:  Size  Location     Type
 16520 ;;                  1    wreg      unsigned char 
 16521 ;; Registers used:
 16522 ;;		wreg, status,2
 16523 ;; Tracked objects:
 16524 ;;		On entry : 0/0
 16525 ;;		On exit  : 0/0
 16526 ;;		Unchanged: 0/0
 16527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16528 ;;      Params:         0       0       0       0       0       0       0
 16529 ;;      Locals:         1       0       0       0       0       0       0
 16530 ;;      Temps:          0       0       0       0       0       0       0
 16531 ;;      Totals:         1       0       0       0       0       0       0
 16532 ;;Total ram usage:        1 bytes
 16533 ;; Hardware stack levels used:    1
 16534 ;; Hardware stack levels required when called:    3
 16535 ;; This function calls:
 16536 ;;		Nothing
 16537 ;; This function is called by:
 16538 ;;		_EepromRead
 16539 ;;		_EepromTest
 16540 ;; This function uses a non-reentrant model
 16541 ;;
 16542                           
 16543                           	psect	text84
 16544  00317C                     __ptext84:
 16545                           	opt stack 0
 16546  00317C                     _DATAEE_ReadByte:
 16547                           	opt stack 23
 16548                           
 16549                           ;incstack = 0
 16550                           ;DATAEE_ReadByte@bAdd stored from wreg
 16551  00317C  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 16552                           
 16553                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 16554  00317E  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 16555                           
 16556                           ;memory.c: 198: EECON1bits.CFGS = 0;
 16557  003182  9CA6               	bcf	4006,6,c	;volsfr
 16558                           
 16559                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 16560  003184  9EA6               	bcf	4006,7,c	;volsfr
 16561                           
 16562                           ;memory.c: 200: EECON1bits.RD = 1;
 16563  003186  80A6               	bsf	4006,0,c	;volsfr
 16564                           
 16565                           ;memory.c: 201: __nop();
 16566  003188  F000               	nop	
 16567                           
 16568                           ;memory.c: 202: __nop();
 16569  00318A  F000               	nop	
 16570                           
 16571                           ;memory.c: 204: return (EEDATA);
 16572  00318C  50A8               	movf	4008,w,c	;volatile
 16573  00318E  0012               	return	
 16574  003190                     __end_of_DATAEE_ReadByte:
 16575                           	opt stack 0
 16576                           tosu	equ	0xFFF
 16577                           tosh	equ	0xFFE
 16578                           tosl	equ	0xFFD
 16579                           pclath	equ	0xFFA
 16580                           tblptru	equ	0xFF8
 16581                           tblptrh	equ	0xFF7
 16582                           tblptrl	equ	0xFF6
 16583                           tablat	equ	0xFF5
 16584                           prodh	equ	0xFF4
 16585                           prodl	equ	0xFF3
 16586                           intcon	equ	0xFF2
 16587                           intcon2	equ	0xFF1
 16588                           indf0	equ	0xFEF
 16589                           postinc0	equ	0xFEE
 16590                           fsr0h	equ	0xFEA
 16591                           fsr0l	equ	0xFE9
 16592                           wreg	equ	0xFE8
 16593                           indf1	equ	0xFE7
 16594                           postdec1	equ	0xFE5
 16595                           fsr1h	equ	0xFE2
 16596                           fsr1l	equ	0xFE1
 16597                           indf2	equ	0xFDF
 16598                           postinc2	equ	0xFDE
 16599                           postdec2	equ	0xFDD
 16600                           fsr2h	equ	0xFDA
 16601                           fsr2l	equ	0xFD9
 16602                           status	equ	0xFD8
 16603                           
 16604 ;; *************** function _ClearMcuRunTime *****************
 16605 ;; Defined at:
 16606 ;;		line 51 in file "SystemStatus.c"
 16607 ;; Parameters:    Size  Location     Type
 16608 ;;		None
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;		None
 16611 ;; Return value:  Size  Location     Type
 16612 ;;                  1    wreg      void 
 16613 ;; Registers used:
 16614 ;;		wreg, status,2
 16615 ;; Tracked objects:
 16616 ;;		On entry : 0/0
 16617 ;;		On exit  : 0/0
 16618 ;;		Unchanged: 0/0
 16619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16620 ;;      Params:         0       0       0       0       0       0       0
 16621 ;;      Locals:         0       0       0       0       0       0       0
 16622 ;;      Temps:          0       0       0       0       0       0       0
 16623 ;;      Totals:         0       0       0       0       0       0       0
 16624 ;;Total ram usage:        0 bytes
 16625 ;; Hardware stack levels used:    1
 16626 ;; Hardware stack levels required when called:    3
 16627 ;; This function calls:
 16628 ;;		Nothing
 16629 ;; This function is called by:
 16630 ;;		_InitSystemApplicationManagers
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           	psect	text85
 16635  003190                     __ptext85:
 16636                           	opt stack 0
 16637  003190                     _ClearMcuRunTime:
 16638                           	opt stack 26
 16639                           
 16640                           ;SystemStatus.c: 53: mcuRunTimeIn5SecTicks = 0;
 16641                           
 16642                           ;incstack = 0
 16643  003190  0E00               	movlw	0
 16644  003192  0100               	movlb	0	; () banked
 16645  003194  6FE8               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 16646  003196  0E00               	movlw	0
 16647  003198  6FE9               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 16648  00319A  0E00               	movlw	0
 16649  00319C  6FEA               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 16650  00319E  0E00               	movlw	0
 16651  0031A0  6FEB               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 16652                           
 16653                           ; BSR set to: 0
 16654  0031A2  0012               	return		;funcret
 16655  0031A4                     __end_of_ClearMcuRunTime:
 16656                           	opt stack 0
 16657                           tosu	equ	0xFFF
 16658                           tosh	equ	0xFFE
 16659                           tosl	equ	0xFFD
 16660                           pclath	equ	0xFFA
 16661                           tblptru	equ	0xFF8
 16662                           tblptrh	equ	0xFF7
 16663                           tblptrl	equ	0xFF6
 16664                           tablat	equ	0xFF5
 16665                           prodh	equ	0xFF4
 16666                           prodl	equ	0xFF3
 16667                           intcon	equ	0xFF2
 16668                           intcon2	equ	0xFF1
 16669                           indf0	equ	0xFEF
 16670                           postinc0	equ	0xFEE
 16671                           fsr0h	equ	0xFEA
 16672                           fsr0l	equ	0xFE9
 16673                           wreg	equ	0xFE8
 16674                           indf1	equ	0xFE7
 16675                           postdec1	equ	0xFE5
 16676                           fsr1h	equ	0xFE2
 16677                           fsr1l	equ	0xFE1
 16678                           indf2	equ	0xFDF
 16679                           postinc2	equ	0xFDE
 16680                           postdec2	equ	0xFDD
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function _BlinkOkLeds *****************
 16686 ;; Defined at:
 16687 ;;		line 24 in file "LedsApp.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  state           1    wreg     enum E7622
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  state           1   26[COMRAM] enum E7622
 16692 ;;  idx             2   27[COMRAM] int 
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      void 
 16695 ;; Registers used:
 16696 ;;		wreg, status,2, status,0
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16702 ;;      Params:         0       0       0       0       0       0       0
 16703 ;;      Locals:         3       0       0       0       0       0       0
 16704 ;;      Temps:          3       0       0       0       0       0       0
 16705 ;;      Totals:         6       0       0       0       0       0       0
 16706 ;;Total ram usage:        6 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    3
 16709 ;; This function calls:
 16710 ;;		Nothing
 16711 ;; This function is called by:
 16712 ;;		_main
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text86
 16717  00278C                     __ptext86:
 16718                           	opt stack 0
 16719  00278C                     _BlinkOkLeds:
 16720                           	opt stack 27
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;incstack = 0
 16724                           ;BlinkOkLeds@state stored from wreg
 16725  00278C  6E1B               	movwf	BlinkOkLeds@state,c
 16726                           
 16727                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 16728  00278E  0E00               	movlw	0
 16729  002790  6E1D               	movwf	BlinkOkLeds@idx+1,c
 16730  002792  0E00               	movlw	0
 16731  002794  6E1C               	movwf	BlinkOkLeds@idx,c
 16732  002796                     l5907:
 16733  002796  501B               	movf	BlinkOkLeds@state,w,c
 16734  002798  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16735  00279A  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 16736  00279C  5018               	movf	??_BlinkOkLeds,w,c
 16737  00279E  5C1C               	subwf	BlinkOkLeds@idx,w,c
 16738  0027A0  501D               	movf	BlinkOkLeds@idx+1,w,c
 16739  0027A2  0A80               	xorlw	128
 16740  0027A4  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 16741  0027A6  5019               	movf	??_BlinkOkLeds+1,w,c
 16742  0027A8  0A80               	xorlw	128
 16743  0027AA  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 16744  0027AC  B0D8               	btfsc	status,0,c
 16745  0027AE  0012               	return	
 16746                           
 16747                           ;LedsApp.c: 27: {
 16748                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 16749  0027B0  908B               	bcf	3979,0,c	;volatile
 16750                           
 16751                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 16752  0027B2  0E02               	movlw	2
 16753  0027B4  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 16754  0027B6  0E04               	movlw	4
 16755  0027B8  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16756  0027BA  0EBA               	movlw	186
 16757  0027BC                     u8847:
 16758  0027BC  2EE8               	decfsz	wreg,f,c
 16759  0027BE  D7FE               	bra	u8847
 16760  0027C0  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 16761  0027C2  D7FC               	bra	u8847
 16762  0027C4  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 16763  0027C6  D7FA               	bra	u8847
 16764  0027C8  D000               	nop2	
 16765                           
 16766                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 16767  0027CA  808B               	bsf	3979,0,c	;volatile
 16768                           
 16769                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 16770  0027CC  0E02               	movlw	2
 16771  0027CE  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 16772  0027D0  0E04               	movlw	4
 16773  0027D2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 16774  0027D4  0EBA               	movlw	186
 16775  0027D6                     u8857:
 16776  0027D6  2EE8               	decfsz	wreg,f,c
 16777  0027D8  D7FE               	bra	u8857
 16778  0027DA  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 16779  0027DC  D7FC               	bra	u8857
 16780  0027DE  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 16781  0027E0  D7FA               	bra	u8857
 16782  0027E2  D000               	nop2	
 16783  0027E4  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 16784  0027E6  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 16785  0027E8  D7D6               	goto	l5907
 16786  0027EA                     __end_of_BlinkOkLeds:
 16787                           	opt stack 0
 16788                           tosu	equ	0xFFF
 16789                           tosh	equ	0xFFE
 16790                           tosl	equ	0xFFD
 16791                           pclath	equ	0xFFA
 16792                           tblptru	equ	0xFF8
 16793                           tblptrh	equ	0xFF7
 16794                           tblptrl	equ	0xFF6
 16795                           tablat	equ	0xFF5
 16796                           prodh	equ	0xFF4
 16797                           prodl	equ	0xFF3
 16798                           intcon	equ	0xFF2
 16799                           intcon2	equ	0xFF1
 16800                           indf0	equ	0xFEF
 16801                           postinc0	equ	0xFEE
 16802                           fsr0h	equ	0xFEA
 16803                           fsr0l	equ	0xFE9
 16804                           wreg	equ	0xFE8
 16805                           indf1	equ	0xFE7
 16806                           postdec1	equ	0xFE5
 16807                           fsr1h	equ	0xFE2
 16808                           fsr1l	equ	0xFE1
 16809                           indf2	equ	0xFDF
 16810                           postinc2	equ	0xFDE
 16811                           postdec2	equ	0xFDD
 16812                           fsr2h	equ	0xFDA
 16813                           fsr2l	equ	0xFD9
 16814                           status	equ	0xFD8
 16815                           
 16816 ;; *************** function _INTERRUPT_InterruptManager *****************
 16817 ;; Defined at:
 16818 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16819 ;; Parameters:    Size  Location     Type
 16820 ;;		None
 16821 ;; Auto vars:     Size  Location     Type
 16822 ;;		None
 16823 ;; Return value:  Size  Location     Type
 16824 ;;                  1    wreg      void 
 16825 ;; Registers used:
 16826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16832 ;;      Params:         0       0       0       0       0       0       0
 16833 ;;      Locals:         0       0       0       0       0       0       0
 16834 ;;      Temps:         18       0       0       0       0       0       0
 16835 ;;      Totals:        18       0       0       0       0       0       0
 16836 ;;Total ram usage:       18 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    2
 16839 ;; This function calls:
 16840 ;;		_EUSART1_Receive_ISR
 16841 ;;		_EUSART1_Transmit_ISR
 16842 ;;		_MEMORY_ISR
 16843 ;;		_PIN_MANAGER_IOC
 16844 ;;		_TMR0_ISR
 16845 ;; This function is called by:
 16846 ;;		Interrupt level 2
 16847 ;; This function uses a non-reentrant model
 16848 ;;
 16849                           
 16850                           	psect	intcode
 16851  000008                     __pintcode:
 16852                           	opt stack 0
 16853  000008                     _INTERRUPT_InterruptManager:
 16854                           	opt stack 19
 16855                           
 16856                           ;incstack = 0
 16857  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16858  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16859  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16860  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16861  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16862  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16863  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16864  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16865  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16866  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16867  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16868  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16869  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16870  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16871  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16872  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16873  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16874  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16875  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16876                           
 16877                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16878  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16879  000054  A0F2               	btfss	intcon,0,c	;volatile
 16880  000056  D003               	goto	i2l797
 16881                           
 16882                           ;interrupt_manager.c: 61: {
 16883                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16884  000058  EC00  F019         	call	_PIN_MANAGER_IOC	;wreg free
 16885                           
 16886                           ;interrupt_manager.c: 63: }
 16887  00005C  D019               	goto	i2l806
 16888  00005E                     i2l797:
 16889                           
 16890                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16891  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16892  000060  A4F2               	btfss	intcon,2,c	;volatile
 16893  000062  D003               	goto	i2l799
 16894                           
 16895                           ;interrupt_manager.c: 65: {
 16896                           ;interrupt_manager.c: 66: TMR0_ISR();
 16897  000064  EC95  F010         	call	_TMR0_ISR	;wreg free
 16898                           
 16899                           ;interrupt_manager.c: 67: }
 16900  000068  D013               	goto	i2l806
 16901  00006A                     i2l799:
 16902                           
 16903                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16904  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16905  00006C  D011               	goto	i2l806
 16906                           
 16907                           ;interrupt_manager.c: 69: {
 16908                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16909  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16910  000070  A8A1               	btfss	4001,4,c	;volatile
 16911  000072  D003               	goto	i2l802
 16912                           
 16913                           ;interrupt_manager.c: 71: {
 16914                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16915  000074  EC02  F019         	call	_MEMORY_ISR	;wreg free
 16916                           
 16917                           ;interrupt_manager.c: 73: }
 16918  000078  D00B               	goto	i2l806
 16919  00007A                     i2l802:
 16920                           
 16921                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16922  00007A  B89D               	btfsc	3997,4,c	;volatile
 16923  00007C  A89E               	btfss	3998,4,c	;volatile
 16924  00007E  D003               	goto	i2l804
 16925                           
 16926                           ;interrupt_manager.c: 75: {
 16927                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16928  000080  EC30  F017         	call	_EUSART1_Transmit_ISR	;wreg free
 16929                           
 16930                           ;interrupt_manager.c: 77: }
 16931  000084  D005               	goto	i2l806
 16932  000086                     i2l804:
 16933                           
 16934                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16935  000086  BA9D               	btfsc	3997,5,c	;volatile
 16936  000088  AA9E               	btfss	3998,5,c	;volatile
 16937  00008A  D002               	goto	i2l806
 16938                           
 16939                           ;interrupt_manager.c: 79: {
 16940                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16941  00008C  EC81  F017         	call	_EUSART1_Receive_ISR	;wreg free
 16942  000090                     i2l806:
 16943                           
 16944                           ;interrupt_manager.c: 87: else
 16945                           ;interrupt_manager.c: 88: {
 16946                           
 16947                           ;interrupt_manager.c: 85: }
 16948                           ;interrupt_manager.c: 86: }
 16949                           
 16950                           ;interrupt_manager.c: 82: else
 16951                           ;interrupt_manager.c: 83: {
 16952  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16953  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16954  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16955  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16956  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16957  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16958  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16959  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16960  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16961  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16962  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16963  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16964  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16965  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16966  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16967  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16968  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16969  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16970  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16971  0000DA  0011               	retfie		f
 16972  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16973                           	opt stack 0
 16974                           tosu	equ	0xFFF
 16975                           tosh	equ	0xFFE
 16976                           tosl	equ	0xFFD
 16977                           pclatu	equ	0xFFB
 16978                           pclath	equ	0xFFA
 16979                           tblptru	equ	0xFF8
 16980                           tblptrh	equ	0xFF7
 16981                           tblptrl	equ	0xFF6
 16982                           tablat	equ	0xFF5
 16983                           prodh	equ	0xFF4
 16984                           prodl	equ	0xFF3
 16985                           intcon	equ	0xFF2
 16986                           intcon2	equ	0xFF1
 16987                           indf0	equ	0xFEF
 16988                           postinc0	equ	0xFEE
 16989                           fsr0h	equ	0xFEA
 16990                           fsr0l	equ	0xFE9
 16991                           wreg	equ	0xFE8
 16992                           indf1	equ	0xFE7
 16993                           postdec1	equ	0xFE5
 16994                           fsr1h	equ	0xFE2
 16995                           fsr1l	equ	0xFE1
 16996                           indf2	equ	0xFDF
 16997                           postinc2	equ	0xFDE
 16998                           postdec2	equ	0xFDD
 16999                           fsr2h	equ	0xFDA
 17000                           fsr2l	equ	0xFD9
 17001                           status	equ	0xFD8
 17002                           
 17003 ;; *************** function _TMR0_ISR *****************
 17004 ;; Defined at:
 17005 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 17006 ;; Parameters:    Size  Location     Type
 17007 ;;		None
 17008 ;; Auto vars:     Size  Location     Type
 17009 ;;		None
 17010 ;; Return value:  Size  Location     Type
 17011 ;;                  1    wreg      void 
 17012 ;; Registers used:
 17013 ;;		wreg, status,2, status,0, cstack
 17014 ;; Tracked objects:
 17015 ;;		On entry : 0/0
 17016 ;;		On exit  : 0/0
 17017 ;;		Unchanged: 0/0
 17018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17019 ;;      Params:         0       0       0       0       0       0       0
 17020 ;;      Locals:         0       0       0       0       0       0       0
 17021 ;;      Temps:          0       0       0       0       0       0       0
 17022 ;;      Totals:         0       0       0       0       0       0       0
 17023 ;;Total ram usage:        0 bytes
 17024 ;; Hardware stack levels used:    1
 17025 ;; Hardware stack levels required when called:    1
 17026 ;; This function calls:
 17027 ;;		i2___lwmod
 17028 ;; This function is called by:
 17029 ;;		_INTERRUPT_InterruptManager
 17030 ;; This function uses a non-reentrant model
 17031 ;;
 17032                           
 17033                           	psect	text88
 17034  00212A                     __ptext88:
 17035                           	opt stack 0
 17036  00212A                     _TMR0_ISR:
 17037                           	opt stack 19
 17038                           
 17039                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 17040                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 17041                           
 17042                           ;incstack = 0
 17043  00212A  94F2               	bcf	intcon,2,c	;volatile
 17044                           
 17045                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 17046  00212C  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 17047  00212E  6ED7               	movwf	4055,c	;volatile
 17048                           
 17049                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 17050  002130  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17051                           
 17052                           ;tmr0.c: 146: CountCallBack ++;
 17053  002134  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 17054  002136  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 17055                           
 17056                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 17057  002138  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 17058  00213C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 17059  002140  0E00               	movlw	0
 17060  002142  6E04               	movwf	i2___lwmod@divisor+1,c
 17061  002144  0E14               	movlw	20
 17062  002146  6E03               	movwf	i2___lwmod@divisor,c
 17063  002148  EC44  F016         	call	i2___lwmod	;wreg free
 17064  00214C  5001               	movf	?i2___lwmod,w,c
 17065  00214E  1002               	iorwf	?i2___lwmod+1,w,c
 17066  002150  A4D8               	btfss	status,2,c
 17067  002152  D003               	goto	i2l1030
 17068                           
 17069                           ;tmr0.c: 148: {
 17070                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 17071  002154  0E01               	movlw	1
 17072  002156  0101               	movlb	1	; () banked
 17073  002158  6F32               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 17074  00215A                     i2l1030:
 17075                           
 17076                           ;tmr0.c: 150: }
 17077                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 17078                           
 17079                           ; BSR set to: 1
 17080  00215A  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 17081  00215E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 17082  002162  0E00               	movlw	0
 17083  002164  6E04               	movwf	i2___lwmod@divisor+1,c
 17084  002166  0E32               	movlw	50
 17085  002168  6E03               	movwf	i2___lwmod@divisor,c
 17086  00216A  EC44  F016         	call	i2___lwmod	;wreg free
 17087  00216E  5001               	movf	?i2___lwmod,w,c
 17088  002170  1002               	iorwf	?i2___lwmod+1,w,c
 17089  002172  A4D8               	btfss	status,2,c
 17090  002174  D003               	goto	i2l1031
 17091                           
 17092                           ;tmr0.c: 153: {
 17093                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 17094  002176  0E01               	movlw	1
 17095  002178  0101               	movlb	1	; () banked
 17096  00217A  6F31               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 17097  00217C                     i2l1031:
 17098                           
 17099                           ;tmr0.c: 155: }
 17100                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 17101                           
 17102                           ; BSR set to: 1
 17103  00217C  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 17104  002180  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 17105  002184  0E01               	movlw	1
 17106  002186  6E04               	movwf	i2___lwmod@divisor+1,c
 17107  002188  0E2C               	movlw	44
 17108  00218A  6E03               	movwf	i2___lwmod@divisor,c
 17109  00218C  EC44  F016         	call	i2___lwmod	;wreg free
 17110  002190  5001               	movf	?i2___lwmod,w,c
 17111  002192  1002               	iorwf	?i2___lwmod+1,w,c
 17112  002194  A4D8               	btfss	status,2,c
 17113  002196  D003               	goto	i2l1032
 17114                           
 17115                           ;tmr0.c: 157: {
 17116                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 17117  002198  0E01               	movlw	1
 17118  00219A  0101               	movlb	1	; () banked
 17119  00219C  6F30               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 17120  00219E                     i2l1032:
 17121                           
 17122                           ;tmr0.c: 159: }
 17123                           ;tmr0.c: 160: if ((CountCallBack % 200) == 0)
 17124                           
 17125                           ; BSR set to: 1
 17126  00219E  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 17127  0021A2  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 17128  0021A6  0E00               	movlw	0
 17129  0021A8  6E04               	movwf	i2___lwmod@divisor+1,c
 17130  0021AA  0EC8               	movlw	200
 17131  0021AC  6E03               	movwf	i2___lwmod@divisor,c
 17132  0021AE  EC44  F016         	call	i2___lwmod	;wreg free
 17133  0021B2  5001               	movf	?i2___lwmod,w,c
 17134  0021B4  1002               	iorwf	?i2___lwmod+1,w,c
 17135  0021B6  A4D8               	btfss	status,2,c
 17136  0021B8  D003               	goto	i2l1033
 17137                           
 17138                           ;tmr0.c: 161: {
 17139                           ;tmr0.c: 162: TimertenSecFlag = 1;
 17140  0021BA  0E01               	movlw	1
 17141  0021BC  0101               	movlb	1	; () banked
 17142  0021BE  6F2F               	movwf	_TimertenSecFlag& (0+255),b	;volatile
 17143  0021C0                     i2l1033:
 17144                           
 17145                           ;tmr0.c: 163: }
 17146                           ;tmr0.c: 165: CountCallBack %= 300;
 17147                           
 17148                           ; BSR set to: 1
 17149  0021C0  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 17150  0021C4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 17151  0021C8  0E01               	movlw	1
 17152  0021CA  6E04               	movwf	i2___lwmod@divisor+1,c
 17153  0021CC  0E2C               	movlw	44
 17154  0021CE  6E03               	movwf	i2___lwmod@divisor,c
 17155  0021D0  EC44  F016         	call	i2___lwmod	;wreg free
 17156  0021D4  C001  F035         	movff	?i2___lwmod,TMR0_ISR@CountCallBack	;volatile
 17157  0021D8  C002  F036         	movff	?i2___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 17158  0021DC  0012               	return		;funcret
 17159  0021DE                     __end_of_TMR0_ISR:
 17160                           	opt stack 0
 17161                           tosu	equ	0xFFF
 17162                           tosh	equ	0xFFE
 17163                           tosl	equ	0xFFD
 17164                           pclatu	equ	0xFFB
 17165                           pclath	equ	0xFFA
 17166                           tblptru	equ	0xFF8
 17167                           tblptrh	equ	0xFF7
 17168                           tblptrl	equ	0xFF6
 17169                           tablat	equ	0xFF5
 17170                           prodh	equ	0xFF4
 17171                           prodl	equ	0xFF3
 17172                           intcon	equ	0xFF2
 17173                           intcon2	equ	0xFF1
 17174                           indf0	equ	0xFEF
 17175                           postinc0	equ	0xFEE
 17176                           fsr0h	equ	0xFEA
 17177                           fsr0l	equ	0xFE9
 17178                           wreg	equ	0xFE8
 17179                           indf1	equ	0xFE7
 17180                           postdec1	equ	0xFE5
 17181                           fsr1h	equ	0xFE2
 17182                           fsr1l	equ	0xFE1
 17183                           indf2	equ	0xFDF
 17184                           postinc2	equ	0xFDE
 17185                           postdec2	equ	0xFDD
 17186                           fsr2h	equ	0xFDA
 17187                           fsr2l	equ	0xFD9
 17188                           status	equ	0xFD8
 17189                           
 17190 ;; *************** function i2___lwmod *****************
 17191 ;; Defined at:
 17192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17193 ;; Parameters:    Size  Location     Type
 17194 ;;  dividend        2    0[COMRAM] unsigned int 
 17195 ;;  divisor         2    2[COMRAM] unsigned int 
 17196 ;; Auto vars:     Size  Location     Type
 17197 ;;  __lwmod         1    4[COMRAM] unsigned char 
 17198 ;; Return value:  Size  Location     Type
 17199 ;;                  2    0[COMRAM] unsigned int 
 17200 ;; Registers used:
 17201 ;;		wreg, status,2, status,0
 17202 ;; Tracked objects:
 17203 ;;		On entry : 0/0
 17204 ;;		On exit  : 0/0
 17205 ;;		Unchanged: 0/0
 17206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17207 ;;      Params:         4       0       0       0       0       0       0
 17208 ;;      Locals:         1       0       0       0       0       0       0
 17209 ;;      Temps:          0       0       0       0       0       0       0
 17210 ;;      Totals:         5       0       0       0       0       0       0
 17211 ;;Total ram usage:        5 bytes
 17212 ;; Hardware stack levels used:    1
 17213 ;; This function calls:
 17214 ;;		Nothing
 17215 ;; This function is called by:
 17216 ;;		_TMR0_ISR
 17217 ;; This function uses a non-reentrant model
 17218 ;;
 17219                           
 17220                           	psect	text89
 17221  002C88                     __ptext89:
 17222                           	opt stack 0
 17223  002C88                     i2___lwmod:
 17224                           	opt stack 19
 17225                           
 17226                           ;incstack = 0
 17227  002C88  5003               	movf	i2___lwmod@divisor,w,c
 17228  002C8A  1004               	iorwf	i2___lwmod@divisor+1,w,c
 17229  002C8C  B4D8               	btfsc	status,2,c
 17230  002C8E  D018               	goto	i2l1869
 17231  002C90  0E01               	movlw	1
 17232  002C92  6E05               	movwf	i2___lwmod@counter,c
 17233  002C94  D004               	goto	i2l1864
 17234  002C96  90D8               	bcf	status,0,c
 17235  002C98  3603               	rlcf	i2___lwmod@divisor,f,c
 17236  002C9A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 17237  002C9C  2A05               	incf	i2___lwmod@counter,f,c
 17238  002C9E                     i2l1864:
 17239  002C9E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 17240  002CA0  D7FA               	goto	i2l1865
 17241  002CA2                     i2u520_40:
 17242  002CA2  5003               	movf	i2___lwmod@divisor,w,c
 17243  002CA4  5C01               	subwf	i2___lwmod@dividend,w,c
 17244  002CA6  5004               	movf	i2___lwmod@divisor+1,w,c
 17245  002CA8  5802               	subwfb	i2___lwmod@dividend+1,w,c
 17246  002CAA  A0D8               	btfss	status,0,c
 17247  002CAC  D004               	goto	i2l1868
 17248  002CAE  5003               	movf	i2___lwmod@divisor,w,c
 17249  002CB0  5E01               	subwf	i2___lwmod@dividend,f,c
 17250  002CB2  5004               	movf	i2___lwmod@divisor+1,w,c
 17251  002CB4  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 17252  002CB6                     i2l1868:
 17253  002CB6  90D8               	bcf	status,0,c
 17254  002CB8  3204               	rrcf	i2___lwmod@divisor+1,f,c
 17255  002CBA  3203               	rrcf	i2___lwmod@divisor,f,c
 17256  002CBC  2E05               	decfsz	i2___lwmod@counter,f,c
 17257  002CBE  D7F1               	goto	i2u520_40
 17258  002CC0                     i2l1869:
 17259  002CC0  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 17260  002CC4  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 17261  002CC8  0012               	return		;funcret
 17262  002CCA                     __end_ofi2___lwmod:
 17263                           	opt stack 0
 17264                           tosu	equ	0xFFF
 17265                           tosh	equ	0xFFE
 17266                           tosl	equ	0xFFD
 17267                           pclatu	equ	0xFFB
 17268                           pclath	equ	0xFFA
 17269                           tblptru	equ	0xFF8
 17270                           tblptrh	equ	0xFF7
 17271                           tblptrl	equ	0xFF6
 17272                           tablat	equ	0xFF5
 17273                           prodh	equ	0xFF4
 17274                           prodl	equ	0xFF3
 17275                           intcon	equ	0xFF2
 17276                           intcon2	equ	0xFF1
 17277                           indf0	equ	0xFEF
 17278                           postinc0	equ	0xFEE
 17279                           fsr0h	equ	0xFEA
 17280                           fsr0l	equ	0xFE9
 17281                           wreg	equ	0xFE8
 17282                           indf1	equ	0xFE7
 17283                           postdec1	equ	0xFE5
 17284                           fsr1h	equ	0xFE2
 17285                           fsr1l	equ	0xFE1
 17286                           indf2	equ	0xFDF
 17287                           postinc2	equ	0xFDE
 17288                           postdec2	equ	0xFDD
 17289                           fsr2h	equ	0xFDA
 17290                           fsr2l	equ	0xFD9
 17291                           status	equ	0xFD8
 17292                           
 17293 ;; *************** function _PIN_MANAGER_IOC *****************
 17294 ;; Defined at:
 17295 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17296 ;; Parameters:    Size  Location     Type
 17297 ;;		None
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;		None
 17300 ;; Return value:  Size  Location     Type
 17301 ;;                  1    wreg      void 
 17302 ;; Registers used:
 17303 ;;		None
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17309 ;;      Params:         0       0       0       0       0       0       0
 17310 ;;      Locals:         0       0       0       0       0       0       0
 17311 ;;      Temps:          0       0       0       0       0       0       0
 17312 ;;      Totals:         0       0       0       0       0       0       0
 17313 ;;Total ram usage:        0 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; This function calls:
 17316 ;;		Nothing
 17317 ;; This function is called by:
 17318 ;;		_INTERRUPT_InterruptManager
 17319 ;; This function uses a non-reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text90
 17323  003200                     __ptext90:
 17324                           	opt stack 0
 17325  003200                     _PIN_MANAGER_IOC:
 17326                           	opt stack 20
 17327                           
 17328                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17329                           
 17330                           ;incstack = 0
 17331  003200  90F2               	bcf	intcon,0,c	;volatile
 17332  003202  0012               	return		;funcret
 17333  003204                     __end_of_PIN_MANAGER_IOC:
 17334                           	opt stack 0
 17335                           tosu	equ	0xFFF
 17336                           tosh	equ	0xFFE
 17337                           tosl	equ	0xFFD
 17338                           pclatu	equ	0xFFB
 17339                           pclath	equ	0xFFA
 17340                           tblptru	equ	0xFF8
 17341                           tblptrh	equ	0xFF7
 17342                           tblptrl	equ	0xFF6
 17343                           tablat	equ	0xFF5
 17344                           prodh	equ	0xFF4
 17345                           prodl	equ	0xFF3
 17346                           intcon	equ	0xFF2
 17347                           intcon2	equ	0xFF1
 17348                           indf0	equ	0xFEF
 17349                           postinc0	equ	0xFEE
 17350                           fsr0h	equ	0xFEA
 17351                           fsr0l	equ	0xFE9
 17352                           wreg	equ	0xFE8
 17353                           indf1	equ	0xFE7
 17354                           postdec1	equ	0xFE5
 17355                           fsr1h	equ	0xFE2
 17356                           fsr1l	equ	0xFE1
 17357                           indf2	equ	0xFDF
 17358                           postinc2	equ	0xFDE
 17359                           postdec2	equ	0xFDD
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364 ;; *************** function _MEMORY_ISR *****************
 17365 ;; Defined at:
 17366 ;;		line 206 in file "mcc_generated_files/memory.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;		None
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;		None
 17371 ;; Return value:  Size  Location     Type
 17372 ;;                  1    wreg      void 
 17373 ;; Registers used:
 17374 ;;		None
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17380 ;;      Params:         0       0       0       0       0       0       0
 17381 ;;      Locals:         0       0       0       0       0       0       0
 17382 ;;      Temps:          0       0       0       0       0       0       0
 17383 ;;      Totals:         0       0       0       0       0       0       0
 17384 ;;Total ram usage:        0 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; This function calls:
 17387 ;;		Nothing
 17388 ;; This function is called by:
 17389 ;;		_INTERRUPT_InterruptManager
 17390 ;; This function uses a non-reentrant model
 17391 ;;
 17392                           
 17393                           	psect	text91
 17394  003204                     __ptext91:
 17395                           	opt stack 0
 17396  003204                     _MEMORY_ISR:
 17397                           	opt stack 20
 17398                           
 17399                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17400                           
 17401                           ;incstack = 0
 17402  003204  98A1               	bcf	4001,4,c	;volatile
 17403  003206  0012               	return		;funcret
 17404  003208                     __end_of_MEMORY_ISR:
 17405                           	opt stack 0
 17406                           tosu	equ	0xFFF
 17407                           tosh	equ	0xFFE
 17408                           tosl	equ	0xFFD
 17409                           pclatu	equ	0xFFB
 17410                           pclath	equ	0xFFA
 17411                           tblptru	equ	0xFF8
 17412                           tblptrh	equ	0xFF7
 17413                           tblptrl	equ	0xFF6
 17414                           tablat	equ	0xFF5
 17415                           prodh	equ	0xFF4
 17416                           prodl	equ	0xFF3
 17417                           intcon	equ	0xFF2
 17418                           intcon2	equ	0xFF1
 17419                           indf0	equ	0xFEF
 17420                           postinc0	equ	0xFEE
 17421                           fsr0h	equ	0xFEA
 17422                           fsr0l	equ	0xFE9
 17423                           wreg	equ	0xFE8
 17424                           indf1	equ	0xFE7
 17425                           postdec1	equ	0xFE5
 17426                           fsr1h	equ	0xFE2
 17427                           fsr1l	equ	0xFE1
 17428                           indf2	equ	0xFDF
 17429                           postinc2	equ	0xFDE
 17430                           postdec2	equ	0xFDD
 17431                           fsr2h	equ	0xFDA
 17432                           fsr2l	equ	0xFD9
 17433                           status	equ	0xFD8
 17434                           
 17435 ;; *************** function _EUSART1_Transmit_ISR *****************
 17436 ;; Defined at:
 17437 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17438 ;; Parameters:    Size  Location     Type
 17439 ;;		None
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;		None
 17442 ;; Return value:  Size  Location     Type
 17443 ;;                  1    wreg      void 
 17444 ;; Registers used:
 17445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17446 ;; Tracked objects:
 17447 ;;		On entry : 0/0
 17448 ;;		On exit  : 0/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17451 ;;      Params:         0       0       0       0       0       0       0
 17452 ;;      Locals:         0       0       0       0       0       0       0
 17453 ;;      Temps:          0       0       0       0       0       0       0
 17454 ;;      Totals:         0       0       0       0       0       0       0
 17455 ;;Total ram usage:        0 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; This function calls:
 17458 ;;		Nothing
 17459 ;; This function is called by:
 17460 ;;		_INTERRUPT_InterruptManager
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text92
 17465  002E60                     __ptext92:
 17466                           	opt stack 0
 17467  002E60                     _EUSART1_Transmit_ISR:
 17468                           	opt stack 20
 17469                           
 17470                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17471                           
 17472                           ;incstack = 0
 17473  002E60  0E46               	movlw	70
 17474  002E62  0100               	movlb	0	; () banked
 17475  002E64  61FE               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17476  002E66  D012               	goto	i2l868
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;eusart1.c: 186: {
 17480                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17481  002E68  5039               	movf	_eusart1TxTail,w,c	;volatile
 17482  002E6A  0D01               	mullw	1
 17483  002E6C  0E00               	movlw	low _eusart1TxBuffer
 17484  002E6E  24F3               	addwf	prodl,w,c
 17485  002E70  6ED9               	movwf	fsr2l,c
 17486  002E72  0E02               	movlw	high _eusart1TxBuffer
 17487  002E74  20F4               	addwfc	prodh,w,c
 17488  002E76  6EDA               	movwf	fsr2h,c
 17489  002E78  50DF               	movf	indf2,w,c
 17490  002E7A  6EAD               	movwf	4013,c	;volatile
 17491                           
 17492                           ; BSR set to: 0
 17493  002E7C  2A39               	incf	_eusart1TxTail,f,c	;volatile
 17494                           
 17495                           ; BSR set to: 0
 17496                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17497  002E7E  0E45               	movlw	69
 17498  002E80  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 17499  002E82  D002               	goto	i2l869
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;eusart1.c: 189: {
 17503                           ;eusart1.c: 190: eusart1TxTail = 0;
 17504  002E84  0E00               	movlw	0
 17505  002E86  6E39               	movwf	_eusart1TxTail,c	;volatile
 17506  002E88                     i2l869:
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;eusart1.c: 191: }
 17510                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17511                           
 17512                           ; BSR set to: 0
 17513  002E88  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17514                           
 17515                           ;eusart1.c: 193: }
 17516  002E8A  0012               	return	
 17517  002E8C                     i2l868:
 17518                           
 17519                           ; BSR set to: 0
 17520                           ;eusart1.c: 194: else
 17521                           ;eusart1.c: 195: {
 17522                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17523  002E8C  989D               	bcf	3997,4,c	;volatile
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;eusart1.c: 197: eusart1TxTail = 0;
 17527  002E8E  0E00               	movlw	0
 17528  002E90  6E39               	movwf	_eusart1TxTail,c	;volatile
 17529                           
 17530                           ;eusart1.c: 198: eusart1TxHead = 0;
 17531  002E92  0E00               	movlw	0
 17532  002E94  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17533  002E96  0012               	return	
 17534  002E98                     __end_of_EUSART1_Transmit_ISR:
 17535                           	opt stack 0
 17536                           tosu	equ	0xFFF
 17537                           tosh	equ	0xFFE
 17538                           tosl	equ	0xFFD
 17539                           pclatu	equ	0xFFB
 17540                           pclath	equ	0xFFA
 17541                           tblptru	equ	0xFF8
 17542                           tblptrh	equ	0xFF7
 17543                           tblptrl	equ	0xFF6
 17544                           tablat	equ	0xFF5
 17545                           prodh	equ	0xFF4
 17546                           prodl	equ	0xFF3
 17547                           intcon	equ	0xFF2
 17548                           intcon2	equ	0xFF1
 17549                           indf0	equ	0xFEF
 17550                           postinc0	equ	0xFEE
 17551                           fsr0h	equ	0xFEA
 17552                           fsr0l	equ	0xFE9
 17553                           wreg	equ	0xFE8
 17554                           indf1	equ	0xFE7
 17555                           postdec1	equ	0xFE5
 17556                           fsr1h	equ	0xFE2
 17557                           fsr1l	equ	0xFE1
 17558                           indf2	equ	0xFDF
 17559                           postinc2	equ	0xFDE
 17560                           postdec2	equ	0xFDD
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function _EUSART1_Receive_ISR *****************
 17566 ;; Defined at:
 17567 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;		None
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;		None
 17572 ;; Return value:  Size  Location     Type
 17573 ;;                  1    wreg      void 
 17574 ;; Registers used:
 17575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17576 ;; Tracked objects:
 17577 ;;		On entry : 0/0
 17578 ;;		On exit  : 0/0
 17579 ;;		Unchanged: 0/0
 17580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17581 ;;      Params:         0       0       0       0       0       0       0
 17582 ;;      Locals:         0       0       0       0       0       0       0
 17583 ;;      Temps:          0       0       0       0       0       0       0
 17584 ;;      Totals:         0       0       0       0       0       0       0
 17585 ;;Total ram usage:        0 bytes
 17586 ;; Hardware stack levels used:    1
 17587 ;; This function calls:
 17588 ;;		Nothing
 17589 ;; This function is called by:
 17590 ;;		_INTERRUPT_InterruptManager
 17591 ;; This function uses a non-reentrant model
 17592 ;;
 17593                           
 17594                           	psect	text93
 17595  002F02                     __ptext93:
 17596                           	opt stack 0
 17597  002F02                     _EUSART1_Receive_ISR:
 17598                           	opt stack 20
 17599                           
 17600                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;incstack = 0
 17604  002F02  A2AB               	btfss	4011,1,c	;volatile
 17605  002F04  D002               	goto	i2l874
 17606                           
 17607                           ;eusart1.c: 206: {
 17608                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17609  002F06  98AB               	bcf	4011,4,c	;volatile
 17610                           
 17611                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17612  002F08  88AB               	bsf	4011,4,c	;volatile
 17613  002F0A                     i2l874:
 17614                           
 17615                           ;eusart1.c: 210: }
 17616                           ;eusart1.c: 212: TXREG1 = RCREG1;
 17617  002F0A  CFAE FFAD          	movff	4014,4013	;volatile
 17618                           
 17619                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17620  002F0E  5038               	movf	_eusart1RxHead,w,c	;volatile
 17621  002F10  0D01               	mullw	1
 17622  002F12  0E00               	movlw	low _eusart1RxBuffer
 17623  002F14  24F3               	addwf	prodl,w,c
 17624  002F16  6ED9               	movwf	fsr2l,c
 17625  002F18  0E01               	movlw	high _eusart1RxBuffer
 17626  002F1A  20F4               	addwfc	prodh,w,c
 17627  002F1C  6EDA               	movwf	fsr2h,c
 17628  002F1E  CFAE FFDF          	movff	4014,indf2	;volatile
 17629  002F22  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17630                           
 17631                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17632  002F24  0E27               	movlw	39
 17633  002F26  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17634  002F28  D002               	goto	i2l875
 17635                           
 17636                           ;eusart1.c: 217: {
 17637                           ;eusart1.c: 218: eusart1RxHead = 0;
 17638  002F2A  0E00               	movlw	0
 17639  002F2C  6E38               	movwf	_eusart1RxHead,c	;volatile
 17640  002F2E                     i2l875:
 17641                           
 17642                           ;eusart1.c: 219: }
 17643                           ;eusart1.c: 220: eusart1RxCount++;
 17644  002F2E  0101               	movlb	1	; () banked
 17645  002F30  2B2D               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17646                           
 17647                           ; BSR set to: 1
 17648  002F32  0012               	return		;funcret
 17649  002F34                     __end_of_EUSART1_Receive_ISR:
 17650                           	opt stack 0
 17651                           tosu	equ	0xFFF
 17652                           tosh	equ	0xFFE
 17653                           tosl	equ	0xFFD
 17654                           pclatu	equ	0xFFB
 17655                           pclath	equ	0xFFA
 17656                           tblptru	equ	0xFF8
 17657                           tblptrh	equ	0xFF7
 17658                           tblptrl	equ	0xFF6
 17659                           tablat	equ	0xFF5
 17660                           prodh	equ	0xFF4
 17661                           prodl	equ	0xFF3
 17662                           intcon	equ	0xFF2
 17663                           intcon2	equ	0xFF1
 17664                           indf0	equ	0xFEF
 17665                           postinc0	equ	0xFEE
 17666                           fsr0h	equ	0xFEA
 17667                           fsr0l	equ	0xFE9
 17668                           wreg	equ	0xFE8
 17669                           indf1	equ	0xFE7
 17670                           postdec1	equ	0xFE5
 17671                           fsr1h	equ	0xFE2
 17672                           fsr1l	equ	0xFE1
 17673                           indf2	equ	0xFDF
 17674                           postinc2	equ	0xFDE
 17675                           postdec2	equ	0xFDD
 17676                           fsr2h	equ	0xFDA
 17677                           fsr2l	equ	0xFD9
 17678                           status	equ	0xFD8
 17679                           tosu	equ	0xFFF
 17680                           tosh	equ	0xFFE
 17681                           tosl	equ	0xFFD
 17682                           pclatu	equ	0xFFB
 17683                           pclath	equ	0xFFA
 17684                           tblptru	equ	0xFF8
 17685                           tblptrh	equ	0xFF7
 17686                           tblptrl	equ	0xFF6
 17687                           tablat	equ	0xFF5
 17688                           prodh	equ	0xFF4
 17689                           prodl	equ	0xFF3
 17690                           intcon	equ	0xFF2
 17691                           intcon2	equ	0xFF1
 17692                           indf0	equ	0xFEF
 17693                           postinc0	equ	0xFEE
 17694                           fsr0h	equ	0xFEA
 17695                           fsr0l	equ	0xFE9
 17696                           wreg	equ	0xFE8
 17697                           indf1	equ	0xFE7
 17698                           postdec1	equ	0xFE5
 17699                           fsr1h	equ	0xFE2
 17700                           fsr1l	equ	0xFE1
 17701                           indf2	equ	0xFDF
 17702                           postinc2	equ	0xFDE
 17703                           postdec2	equ	0xFDD
 17704                           fsr2h	equ	0xFDA
 17705                           fsr2l	equ	0xFD9
 17706                           status	equ	0xFD8
 17707                           
 17708                           	psect	text94
 17709  000000                     __ptext94:
 17710                           	opt stack 0
 17711                           tosu	equ	0xFFF
 17712                           tosh	equ	0xFFE
 17713                           tosl	equ	0xFFD
 17714                           pclatu	equ	0xFFB
 17715                           pclath	equ	0xFFA
 17716                           tblptru	equ	0xFF8
 17717                           tblptrh	equ	0xFF7
 17718                           tblptrl	equ	0xFF6
 17719                           tablat	equ	0xFF5
 17720                           prodh	equ	0xFF4
 17721                           prodl	equ	0xFF3
 17722                           intcon	equ	0xFF2
 17723                           intcon2	equ	0xFF1
 17724                           indf0	equ	0xFEF
 17725                           postinc0	equ	0xFEE
 17726                           fsr0h	equ	0xFEA
 17727                           fsr0l	equ	0xFE9
 17728                           wreg	equ	0xFE8
 17729                           indf1	equ	0xFE7
 17730                           postdec1	equ	0xFE5
 17731                           fsr1h	equ	0xFE2
 17732                           fsr1l	equ	0xFE1
 17733                           indf2	equ	0xFDF
 17734                           postinc2	equ	0xFDE
 17735                           postdec2	equ	0xFDD
 17736                           fsr2h	equ	0xFDA
 17737                           fsr2l	equ	0xFD9
 17738                           status	equ	0xFD8
 17739                           
 17740                           	psect	rparam
 17741  0000                     tosu	equ	0xFFF
 17742                           tosh	equ	0xFFE
 17743                           tosl	equ	0xFFD
 17744                           pclatu	equ	0xFFB
 17745                           pclath	equ	0xFFA
 17746                           tblptru	equ	0xFF8
 17747                           tblptrh	equ	0xFF7
 17748                           tblptrl	equ	0xFF6
 17749                           tablat	equ	0xFF5
 17750                           prodh	equ	0xFF4
 17751                           prodl	equ	0xFF3
 17752                           intcon	equ	0xFF2
 17753                           intcon2	equ	0xFF1
 17754                           indf0	equ	0xFEF
 17755                           postinc0	equ	0xFEE
 17756                           fsr0h	equ	0xFEA
 17757                           fsr0l	equ	0xFE9
 17758                           wreg	equ	0xFE8
 17759                           indf1	equ	0xFE7
 17760                           postdec1	equ	0xFE5
 17761                           fsr1h	equ	0xFE2
 17762                           fsr1l	equ	0xFE1
 17763                           indf2	equ	0xFDF
 17764                           postinc2	equ	0xFDE
 17765                           postdec2	equ	0xFDD
 17766                           fsr2h	equ	0xFDA
 17767                           fsr2l	equ	0xFD9
 17768                           status	equ	0xFD8
 17769                           
 17770                           	psect	temp
 17771  000048                     btemp:
 17772                           	opt stack 0
 17773  000048                     	ds	1
 17774  0000                     int$flags	set	btemp
 17775  0000                     wtemp6	set	btemp+1
 17776                           tosu	equ	0xFFF
 17777                           tosh	equ	0xFFE
 17778                           tosl	equ	0xFFD
 17779                           pclatu	equ	0xFFB
 17780                           pclath	equ	0xFFA
 17781                           tblptru	equ	0xFF8
 17782                           tblptrh	equ	0xFF7
 17783                           tblptrl	equ	0xFF6
 17784                           tablat	equ	0xFF5
 17785                           prodh	equ	0xFF4
 17786                           prodl	equ	0xFF3
 17787                           intcon	equ	0xFF2
 17788                           intcon2	equ	0xFF1
 17789                           indf0	equ	0xFEF
 17790                           postinc0	equ	0xFEE
 17791                           fsr0h	equ	0xFEA
 17792                           fsr0l	equ	0xFE9
 17793                           wreg	equ	0xFE8
 17794                           indf1	equ	0xFE7
 17795                           postdec1	equ	0xFE5
 17796                           fsr1h	equ	0xFE2
 17797                           fsr1l	equ	0xFE1
 17798                           indf2	equ	0xFDF
 17799                           postinc2	equ	0xFDE
 17800                           postdec2	equ	0xFDD
 17801                           fsr2h	equ	0xFDA
 17802                           fsr2l	equ	0xFD9
 17803                           status	equ	0xFD8


Data Sizes:
    Strings     1472
    Constant    187
    Data        20
    BSS         258
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    136     159
    BANK1           256     57     224
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$3078	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_43(CODE[73]), STR_42(CODE[37]), STR_41(CODE[38]), STR_40(CODE[86]), 
		 -> STR_39(CODE[53]), STR_38(CODE[46]), STR_37(CODE[29]), STR_36(CODE[101]), 
		 -> STR_35(CODE[86]), STR_34(CODE[61]), STR_33(CODE[62]), STR_32(CODE[45]), 
		 -> STR_31(CODE[74]), STR_30(CODE[25]), STR_29(CODE[79]), STR_28(CODE[75]), 
		 -> STR_27(CODE[46]), STR_26(CODE[61]), STR_25(CODE[66]), STR_24(CODE[23]), 
		 -> STR_23(CODE[31]), STR_21(CODE[20]), STR_19(CODE[20]), STR_17(CODE[18]), 
		 -> STR_16(CODE[20]), STR_15(CODE[31]), STR_11(CODE[11]), STR_9(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_44(CODE[7]), STR_22(CODE[9]), STR_20(CODE[12]), STR_18(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 0

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), STR_14(CODE[10]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), readUartByte@dest(BANK1[50]), STR_10(CODE[9]), SampleSingleChannel@dest(BANK1[50]), 
		 -> STR_8(CODE[10]), STR_7(CODE[34]), STR_6(CODE[32]), STR_5(CODE[10]), 
		 -> STR_4(CODE[29]), STR_3(CODE[33]), STR_2(CODE[10]), STR_1(CODE[10]), 

    AdcSingleSample@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _AdcSingleSample->___llmod
    _DacSetValue->_SWSPI_send_word
    _DacSetValue->___llmod
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _DacAnalogToDigitalSpi->___ftadd
    ___lbtoft->___ftpack
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    _UART_Write_Text->_EUSART1_Write
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_ZeroArray
    _ZeroArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _log->___ftadd
    _floor->___ftadd
    ___fttol->___ftadd
    _eval_poly->___ftadd
    ___ftmul->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___awtoft
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->i2___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _AdcSingleSample->___llmod
    _GroupRx->_DacSetValue
    _DacSetValue->_DacAnalogToDigitalSpi
    _GetIntFromUartData->_strtol
    _DacAnalogToDigitalSpi->_pow
    _PrintHelpScreen->_sprintf
    _SetMcuRunTime->___llmod
    ___llmod->_pow
    _SendUartSystemInitMessage->_sprintf
    _SampleVgMonChannel->_pow
    _SampleSingleChannel->_pow
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftdiv->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SampleSingleChannel

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  746375
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                _SampleSingleChannel
                 _SampleVgMonChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  375087
                                            133 BANK0      3     3      0
                                              0 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1909
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              3     1      2  109488
                                            130 BANK0      3     1      2
                    _AdcSingleSample
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                     14    12      2  109426
                                             97 BANK0     14    12      2
                 _GetIntFromUartData
                    _UART_Write_Text
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              3     1      2  239043
                                            130 BANK0      3     1      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         18    16      2  238981
                                            112 BANK0     18    16      2
              _DacAnalogToDigitalSpi
                 _GetIntFromUartData
                    _SWSPI_send_word
                   _StoreIntInEeprom
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  17    13      4    4981
                                              6 BANK0     17    13      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2453
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _DacAnalogToDigitalSpi                               23    20      3  119150
                                             89 BANK0     23    20      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) ___lbtoft                                             4     1      3    3164
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   12499
                                            130 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   12357
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     772
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     772
                                             47 COMRAM     1     1      0
                                             89 BANK0      8     0      8
                           ___awtoft (ARG)
                            ___fttol (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   11489
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleVgMonChannel                                   7     7      0  110098
                                             89 BANK0      7     7      0
                  _ADC_GetConversion
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  121277
                                             89 BANK0      2     2      0
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    7289
                                             35 COMRAM     7     1      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     962
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    3524
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    3792
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  127464
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0   12322
                                             38 BANK0      6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  115142
                                            112 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2340
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     339
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     219
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   11789
                                             39 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4464
                                             35 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1909
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   23    19      4  100756
                                             89 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   94333
                                             72 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   29582
                                             27 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   50254
                                             63 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     539
                                             27 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   12694
                                             55 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4    1451
                                             30 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3427
                                             45 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   13135
                                             15 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    6061
                                              0 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    5994
                                              0 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    5578
                                             35 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4593
                                             15 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3716
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    3415
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3133
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      44
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                         18    18      0     419
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0     419
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (12) i2___lwmod                                           5     1      4     419
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SampleVgMonChannel
     _ADC_GetConversion
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SetMcuRunTime
     ___llmod
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _testLeds
     _GroupRx *
       _DacSetValue
         _DacAnalogToDigitalSpi
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftadd (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___wmul (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lbtoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___llmod
           ___awtoft (ARG)
             ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _pow (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftadd (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___wmul (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lbtoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _GroupTx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___llmod
           ___awtoft (ARG)
             ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _pow (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftdiv (ARG)
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftadd (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                           ___wmul (ARG)
                           _frexp (ARG)
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___lbtoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___wmul (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      46      10       27.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100     39      E0       8       87.5%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     88      9F       6       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20C       3        0.0%
DATA                 0      0     20C       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 18:03:03 2018

                        _DacSetValue$3066 00D7                          _DacSetValue$3067 00DA  
              __end_of_keepAliveSignalLed 313C                              ___altoft@exp 0095  
                _eusart1TxBufferRemaining 00FE                             ___altoft@sign 0096  
                                      l50 2744                                        l52 278A  
                     __end_of_BlinkOkLeds 27EA                           _SWSPI_send_word 232A  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
             __size_of_SampleVgMonChannel 00C0                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 002F  
                            ___ftadd@exp2 002E                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 01D0                              ___ftadd@sign 002D  
                             ?_MEMORY_ISR 0001                                       l121 0D2C  
                                     l130 0DA0                                       l122 0D46  
                                     l114 0C10                                       l116 0CF8  
                                     l220 010A                                       l125 0D52  
                                     l142 2126                                       l230 019E  
                                     l127 0D70                                       l119 0D16  
                                     l215 0370                                       l231 0158  
                                     l216 00E8                                       l137 1880  
                                     l129 0D86                                       l233 0162  
                                     l225 012C                                       l250 027C  
                                     l234 016C                                       l218 00F4  
                                     l243 0210                                       l235 0176  
                                     l244 024C                                       l236 01B4  
                                     l261 0332                                       l237 0290  
                                     l229 014C                                       l254 02A6  
                                     l238 01C0                                       l511 1134  
                                     l255 02BC                                       l239 01FC  
                                     l513 11A2                                       l273 2630  
                                     l257 02C2                                       l249 0260  
                                     l274 25FC                                       l258 0302  
                                     l611 2992                                       l259 02CC  
                                     l612 2956                                       l604 1FFC  
                                     l700 2D50                                       l621 296A  
                                     l613 2960                                       l461 1C32  
                                     l630 2988                                       l622 2974  
                                     l606 202A                                       l462 1C48  
                                     l607 2036                                       l640 29E8  
                                     l720 30F2                                       l641 29AC  
                                     l650 29C0                                       l642 29B6  
                                     l651 29CA                                       l724 30F6  
                                     l708 2D5A                                       l629 297E  
                                     l709 2D64                                       l590 23C0  
                                     l719 30FA                                       l658 29D4  
                                     l586 2366                                       l659 29DE  
                                     l851 2BB6                                       l596 2936  
                                     l597 2902                                       l677 2D32  
                                     l598 291C                                       l678 2D0A  
                                     l862 2CDE                                       l599 2926  
                                     l687 2D1E                                       l679 2D14  
                                     l863 2D02                                       l688 2D28  
                                     l864 2D00                                       l849 2B90  
                                     l698 2D6E                                       l970 2EBC  
                                     l699 2D46                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                         ??_Make32bitsArray 001E  
                        PLLInitialize@idx 0088                                       _exp 0626  
                                     _log 165C                                       _pow 1296  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0078                              ___ftdiv@sign 007D  
                                    l2100 1C7E                                      l2102 1CA6  
                                    l2103 1D20                                      l2031 0A5E  
                                    l2112 1EFC                                      l2040 0AD2  
                                    l2033 0AB2                                      l2114 1F42  
                                    l2130 30AA                                      l2042 0AEC  
                                    l1402 26DE                                      l1075 2F4C  
                                    l1171 2D84                                      l1403 26F6  
                                    l2108 2480                                      l2116 1F70  
                                    l1244 28BA                                      l1252 2E20  
                                    l2140 30C8                                      l1164 2D92  
                                    l2117 1F64                                      l1253 2DF6  
                                    l2125 2FB0                                      l2053 3178  
                                    l2045 0AFE                                      l2029 0A46  
                                    l1405 2708                                      l1246 28F8  
                                    l1430 0E64                                      l2046 0B6A  
                                    l1190 3016                                      l1271 282A  
                                    l1431 0DDA                                      l1423 0DBA  
                                    l2135 2FD6                                      l2039 0AC2  
                                    l1191 300A                                      l1407 271A  
                                    l2160 1ECA                                      l2152 1678  
                                    l1272 27EC                                      l1424 0DD4  
                                    l2048 0B8E                                      l1264 23F2  
                                    l1176 2ABC                                      l2161 1E4A  
                                    l1441 0ED8                                      l1425 0E36  
                                    l1433 0E22                                      l2049 0BCA  
                                    l1185 2AAC                                      l1193 3010  
                                    l2090 0678                                      l2154 1698  
                                    l1258 150C                                      l1274 27F0  
                                    l1442 0F32                                      l1434 0E04  
                                    l2091 06B0                                      l1259 1432  
                                    l1275 27F4                                      l1443 0EDE  
                                    l1700 0FDC                                      l2092 06E0  
                                    l1276 27F8                                      l2093 080A  
                                    l1277 2826                                      l1437 0E8C  
                                    l1710 1038                                      l2094 07E0  
                                    l1711 102E                                      l1535 25A8  
                                    l1720 106C                                      l1536 259C  
                                    l2088 0640                                      l1705 1042  
                                    l1458 2A0E                                      l1722 109A  
                                    l1459 2A22                                      l1731 1AD4  
                                    l1723 10B6                                      l2099 1C8C  
                                    l1811 2684                                      l1732 1B12  
                                    l1724 10E6                                      l1812 2678  
                                    l1733 1B38                                      l1822 2858  
                                    l1646 2E3C                                      l1750 1A38  
                                    l1671 2262                                      l1823 284C  
                                    l1719 1076                                      l1751 1A48  
                                    l1815 26AC                                      l1672 2258  
                                    l1744 19B6                                      l1816 26BA  
                                    l1665 2206                                      l1729 1AAC  
                                    l1761 2C5E                                      l1737 2518  
                                    l1666 21FC                                      l1746 19DE  
                                    l1738 2548                                      l1755 3086  
                                    l1747 1A10                                      l1668 223A  
                                    l1748 1A20                                      l1669 2224  
                                    l1773 195E                                      l1765 18C2  
                                    l1774 1952                                      l1854 2A72  
                                    l1767 193A                                      l1855 2A6A  
                                    l1696 0FB2                                      l1776 197A  
                                    l1768 192A                                      l1864 2C1A  
                                    l1865 2C12                                      l1890 12E0  
                                    l1858 2A92                                      l1891 12D0  
                                    l1859 2A9C                                      l1868 2C32  
                                    l1893 12F8                                      l1869 2C3C  
                                    l1894 137E                                      l1878 2F7E  
                                    l1895 135C                                      l1879 2F6E  
                                    l1896 1404                                      l5551 2734  
                                    l7083 28AA                                      ?_exp 009F  
                                    l6613 2574                                      l7261 2CCC  
                                    ?_log 007B                                      l7327 1FF4  
                                    l7177 07E0                                      l5907 2796  
                                    l7509 23E2                                      l7527 242A  
                                    l7625 2380                                      l7629 238E  
                                    l7901 11EC                                      l7573 0E90  
                                    l7853 1B70                                      l6879 2F6E  
                                    l7865 1C32                                      l7891 1192  
                                    l7877 1124                                      ?_pow 00A8  
                                    l7887 117E                                      STR_1 7FD0  
                                    STR_2 7FD0                                      STR_3 7EA1  
                                    STR_4 7F1E                                      STR_5 7FD0  
                                    STR_6 7EC2                                      STR_7 7E7F  
                                    STR_8 7FD0                                      STR_9 7FF9  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u5240 312E  
                                    u6320 226C                                      u6410 0FA4  
                                    u5258 3130                                      u8010 0CEA  
                                    u7220 06BA                                      u6510 104A  
                                    u7230 06BC                                      u7310 2FA2  
                                    u8110 0D98                                      u6280 21EE  
                                    u6440 0FCE                                      u6601 19C6  
                                    u6371 0F70                                      u6540 107E  
                                    u8220 117E                                      u8060 0D3E  
                                    u6381 0F84                                      u6470 100C  
                                    u7510 2048                                      u3895 2ECA  
                                    u7440 281E                                      u3896 2ECC  
                                    u8240 11EC                                      u6801 1ABC  
                                    u6730 1964                                      u8250 1798  
                                    u7290 2FD2                                      u7610 0A98  
                                    u7700 2A76                                      u6581 199E  
                                    u7445 2814                                      u7390 1346  
                                    u8430 0240                                      u6671 18A6  
                                    u6760 24A8                                      u6920 1F1C  
                                    u7560 0A4E                                      u7800 242A  
                                    u6690 18E0                                      u7730 2C1E  
                                    u8450 0270                                      u8370 01F0  
                                    u7900 0F52                                      u6781 1A94  
                                    u7750 2628                                      u7590 0A88  
                                    u6695 18D8                                      u6768 24AA  
                                    u6880 1C98                                      u6928 1F20  
                                    u7920 233A                                      u7760 265C  
                                    u7757 261E                                      u7950 23BA  
                                    u7870 0EBC                                      u7767 2652  
                                    u8807 276C                                      u8488 0346  
                                    u8817 277C                                      u8489 0368  
                                    u7890 0F3A                                      u8827 1870  
                                    u7980 2688                                      u8837 204A  
                                    u8847 27BC                                      u8857 27D6  
                                    u8787 274C                                      u8797 275C  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 2CCA                   ??_InitAdcApplicationMgr 0018  
                                    _main 26CC                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 31FC                           __end_of_DacInit 1C4E  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 009F  
                                    log@x 007B                 SampleSingleChannel@adcRes 01D2  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A8  
                                    pow@y 00AB                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00DC  
                           __CFG_IESO$OFF 000000                       __end_of_EepromWrite 31C0  
                           _adcSampleMode 003D               __end_of_SampleSingleChannel 1894  
                         GroupCommon@data 00E2                              ___ftmul@cntr 006D  
                            ___param_bank 000000                              ___ftmul@sign 006E  
                 __end_of_UART_Write_Text 2664                           __end_of_GroupRx 2DB8  
                         __end_of_GroupTx 2AEE                              ___fttol@exp1 008C  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0030  
                                   ??_log 0030                              ___fttol@lval 0088  
                                   ??_pow 0030                   __end_of_TMR0_Initialize 2F02  
                  _ReadIntFromEeprom$3072 00C4                    _ReadIntFromEeprom$3073 00C7  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 31B2  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 110C  
                                   STR_10 7FE3                                     STR_11 7FC5  
                                   STR_12 7FD0                                     STR_20 7FB9  
                                   STR_13 7FD0                                     STR_21 7F7F  
                                   STR_14 7FD0                                     STR_22 7FDA  
                                   STR_30 7F3B                                     STR_23 7EE2  
                                   STR_15 7EE2                                     STR_31 7BE9  
                                   STR_16 7F6B                                     STR_24 7F54  
                                   STR_32 7E07                                     STR_40 7AF9  
                                   STR_17 7FA7                                     STR_41 7E34  
                                   STR_33 7CBE                                     STR_25 7C7C  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                     STR_18 7FF3  
                                   STR_42 7E5A                                     STR_34 7D39  
                                   STR_26 7CFC                                     STR_19 7F93  
                                   STR_27 7DD9                                     STR_43 7C33  
                                   STR_35 7AA3                                     STR_44 7FEC  
                                   STR_28 7B9E                                     STR_36 7A3E  
                                   STR_37 7F01                                     STR_29 7B4F  
                                   STR_38 7DAB                                     STR_39 7D76  
                         __end_of___ftdiv 1B6A                           __end_of___ftneg 3094  
                              _EepromRead 31E0                           __end_of___ftmul 1A82  
                                   _T0CON 000FD5                           __end_of___llmod 26CC  
                         __end_of___ftsub 2C88                           __end_of___fttol 198C  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwdiv 2AA6  
                         __end_of___lwmod 2C46                       StoreIntInEeprom@idx 0029  
                                   i2l802 007A                                     i2l804 0086  
                                   i2l806 0090                                     i2l874 2F0A  
                                   i2l875 2F2E                                     i2l868 2E8C  
                                   i2l869 2E88                                     i2l797 005E  
                                   i2l799 006A                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 28FA  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                        ?_PrintHelpScreen 0001                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 2458                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001E                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 2E60                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 21DE                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 00D0                           _DATAEE_ReadByte 317C  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 3204                                     _make8 27EA  
                         __end_of_dpowers 79F5            __size_of_SWSPI_Synth_send_bits 00C2  
                                   _count 00F4                                     _floor 1C4E  
                                   _ldexp 1EE2                                     _frexp 2458  
                                   _errno 00EC             __end_of_SWSPI_Synth_send_bits 206A  
                         __end_of_isalpha 2FB8                           __end_of_isdigit 30B2  
                                   _group 012B                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                             ??_GroupCommon 0031  
                         __end_of_isspace 2FDE                            ?_EUSART1_Write 0001  
                         __end_of_isupper 30D0                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00B5  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                           __end_of_sprintf 0F60  
                    ReadIntFromEeprom@idx 00CF                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 317C            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
                             exp@exponent 00A5                      ?_SWSPI_DAC_send_bits 001A  
                      __size_ofi2___lwmod 0042                               ldexp@newexp 007E  
                 __end_of_SWSPI_send_word 23C4                               _BlinkOkLeds 278C  
                         __initialization 228C                               log@exponent 007E  
              __end_of_EUSART1_Initialize 2DF0                              __end_of_main 272C  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0031  
                           ___fttol@sign1 0087                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 0130                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 3200                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0097  
            SampleVgMonChannel@_adcResult 00BC                                    ?_ldexp 007B  
                                  ?_frexp 0018                          __end_of___altoft 25F2  
                        ___llmod@dividend 00B9                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00D0                                    _EECON2 000FA7  
                           ?_readUartByte 0001                          __end_of___awtoft 2E60  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 228C  
                        __end_of___lbtoft 304C                          __end_of___lltoft 28A2  
                                  i2l1030 215A                                    i2l1031 217C  
                                  i2l1032 219E                                    i2l1033 21C0  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  i2l1864 2C9E                                    i2l1865 2C96  
                                  i2l1868 2CB6                                    i2l1869 2CC0  
                                  _TABLAT 000FF5                               _EepromWrite 31B2  
                                  _RCREG1 000FAE                          __end_of___lwtoft 3070  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 30EE                   __size_of_SwSpi_Data_Pin 0056  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                       __end_of_GroupCommon 3028  
                               ??_GroupRx 0031                                 ??_GroupTx 0031  
                          __CFG_XINST$OFF 000000                               GroupRx@data 00E2  
                             GroupTx@data 00E2                                    _cState 012C  
                                  ___ftge 24E8                                    ___lmul 29FE  
               SWSPI_Synth_send_bits@data 0024                                    ___wmul 2FDE  
                               ??___ftadd 002A                 SWSPI_Synth_send_bits@mask 0080  
                          __CFG_STVREN$ON 000000                          ?_UART_Write_Text 0019  
                               ??___ftdiv 0075                                 ??___ftneg 001B  
                               ??___ftmul 0066                     __end_of_PLLInitialize 1296  
                               ??___llmod 0030                                 ??___ftsub 0030  
                               ??___fttol 0082                                 ??___lwdiv 001C  
                               ??___lwmod 0023                   ??_DacAnalogToDigitalSpi 00BC  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                      AdcSingleSample@cType 00CE  
                        ?_TMR0_Initialize 0001                                    _memset 2F64  
                      __end_of_DAC_ADDRES 7A01                                    clear_0 22F2  
                                  clear_1 22FE                                    clear_2 230A  
                                  clear_3 2316                   __end_of_DATAEE_ReadByte 3190  
                             ?_EepromRead 0001                                    _strtol 0A06  
                                  floor@i 009A                     __end_of_SwSpi_Clk_Pin 29FE  
                                  floor@x 0097                     ___ftmul@f3_as_product 006A  
                SWSPI_DAC_send_bits@count 001B                              __pdataCOMRAM 0042  
                               ??_isalpha 001B                                 ??_isdigit 0018  
                        __end_of_testLeds 278C                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 1E08                              __mediumconst 7982  
                               ??_isspace 0018                         __end_ofi2___lwmod 2CCA  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                            ??_readUartByte 00E5  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0046                          ?_PIN_MANAGER_IOC 0001  
                               ??_sprintf 002A                     ReadIntFromEeprom@base 00C0  
                         _eusart1RxBuffer 0100                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0200                          __end_ofexp@coeff 7A23  
                       _SYSTEM_Initialize 310A                          __end_oflog@coeff 7A3E  
                              __accesstop 0060                   __end_of__initialization 231C  
                              ___altoft@c 008D                             ZeroArray@size 0022  
                              ___ftadd@f1 0024                                ___ftadd@f2 0027  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 0078  
                           ___rparam_used 000001                                ___ftdiv@f1 006F  
                              ___ftdiv@f2 0072                                ___ftdiv@f3 0079  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___lbtoft@c 0023                                ___ftmul@f1 0060  
                              ___ftmul@f2 0063                          ?_SWSPI_send_word 0028  
                            ?_DacSetValue 00D0                                ___ftsub@f1 0060  
                              ___ftsub@f2 0063                                ___fttol@f1 007E  
                      i2___lwmod@dividend 0001                           _Make32bitsArray 28A2  
                          __pcstackCOMRAM 0001                              __pidataBANK0 31F4  
                            __pidataBANK1 31C0                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2846                      DacSetValue@dacAnalog 00DD  
                        _DATAEE_WriteByte 2E98                             __end_of_floor 1D2E  
                           __end_of_ldexp 1FA8                             __end_of_frexp 24E8  
                  _SwSpi_Set_Synth_Le_Pin 2D42                                ___lwtoft@c 0020  
         __end_of_DAC_DEFAULT_INIT_VALUES 79FD                      __end_of_EUSART1_Read 2BC0  
                            ??_MEMORY_ISR 0001                   _SampleVgMonChannel$3065 00B9  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                      _keepAliveSignalLed 3124                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 2F34                      _AdcSingleSample$3062 00C4  
                    _AdcSingleSample$3063 00C7                  __size_of_AdcSingleSample 01D2  
                                 ??_make8 001D                                   ??_floor 0030  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0080  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 3124  
                           _eusart1RxHead 0038                       PrintHelpScreen@dest 0069  
                           _eusart1TxHead 003A                             _eusart1RxTail 0037  
                              __pbssBANK0 00E8                                __pbssBANK1 0100  
                              __pbssBANK2 0200                               _GroupCommon 3004  
                           _eusart1TxTail 0039                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00DA                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 7A01                                _channelNum 00F0  
                              __pnvCOMRAM 0046            __size_of_InitAdcApplicationMgr 0006  
           __end_of_InitAdcApplicationMgr 31F0                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 3208           ??_InitSystemApplicationManagers 0031  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
        __end_of_TMR0_SetInterruptHandler 31E0                                   ?___lmul 001A  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                __end_of_SampleVgMonChannel 212A  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 30EE  
                               ?___altoft 008D                                   ?_memset 0018  
                       _ReadIntFromEeprom 1412                            ___lmul@product 0022  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lbtoft 0020                                 ?___lltoft 0020  
         DacAnalogToDigitalSpi@dacDigital 00CC                   __size_of_ADC_Initialize 0016  
                               ?___lwtoft 0020                        ?_ReadIntFromEeprom 00B9  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
                SampleVgMonChannel@adcRes 00BE                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 01CD  
                 SampleSingleChannel@dest 019B                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 00BD  
      DacAnalogToDigitalSpi@AnalogValMili 00B9                                   _DacInit 1B6A  
                   GetIntFromUartData@idx 0075                            _SwSpi_Data_Pin 2952  
                    DATAEE_WriteByte@bAdd 0019                   __end_of_Make32bitsArray 28FA  
                           _SetMcuRunTime 2BC0                        _GetIntFromUartData 23C4  
                         __CFG_PWRTEN$OFF 000000                                   _GroupRx 2D7E  
                                 _GroupTx 2AA6                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                               ?_testLeds 0001                      PLLInitialize@idx_670 008A  
               __end_of_ReadIntFromEeprom 1538                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 0F60                                   ___ftdiv 1A82  
                    __end_of_readUartByte 03A4                                   ___ftneg 3070  
                         __size_of___wmul 0026                                   ___ftmul 198C  
                                 ___llmod 2664                                   ___ftsub 2C46  
                                 ___fttol 1894                                   ___lwdiv 2A54  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 2C04  
                       DacSetValue@dacNum 00E1                                ??___altoft 0091  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00E8  
                                 _crcCalc 00F7                                   _channel 003C  
                                 __pcinit 228C                                ??___awtoft 0023  
                              ??___ftpack 001D                                ??___lbtoft 0023  
                       __end_of_eval_poly 1EE2                           __size_of_memset 002C  
                                 __ramtop 0600              __size_of_SampleSingleChannel 0118  
                              ??___lltoft 0024                                   __ptext0 26CC  
                                 __ptext1 00E0                                   __ptext2 2B36  
                                 __ptext3 3004                                   __ptext4 2D7E  
                                 __ptext5 2AA6                                   __ptext6 0BDC  
                                 __ptext7 1538                                   __ptext8 23C4  
                                 __ptext9 0A06                         DacSetValue@retNum 00D3  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                         __size_of_strtol 01D6                                   _dpowers 79EB  
                   _OSCILLATOR_Initialize 31A4                                   _isalpha 2F90  
                            __size_of_exp 01F2                              __size_of_log 0120  
                                 _isdigit 3094                              __size_of_pow 017C  
             ??_SendUartSystemInitMessage 002B                        _EUSART1_Initialize 2DB8  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 2FB8  
               StoreIntInEeprom@numOfByes 0026                                   _isupper 30B2  
                   AdcSingleSample@retNum 00CA                                   _request 012A  
                    ??_GetIntFromUartData 006A                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 0DAE  
                  __end_of_SwSpi_Data_Pin 29A8                   StoreIntInEeprom@address 0025  
                                 _toupper 3168                      end_of_initialization 231C  
                                 exp@sign 00A7                       ?_EUSART1_Initialize 0001  
                            ?_EepromWrite 001B                     _SWSPI_Synth_send_bits 1FA8  
              __end_of_TEST_PLL_REGISTERS 79B7                  __size_of_PrintHelpScreen 0282  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7982  
                       ??_AdcSingleSample 00C3                                _numSamples 00F2  
                    __end_of_SetMcuSystem 31D6                                   pow@sign 00B4  
                       readUartByte@chRec 01CF                                ??_testLeds 0018  
                    SWSPI_send_word@datac 002D                                _rxMsgQueue 0187  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 79EB                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 2B36                               testLeds@idx 0019  
                    __size_of_DacSetValue 0124                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 3168    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 3152            __size_of_DacAnalogToDigitalSpi 01EE  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0026                  _TMR0_SetInterruptHandler 31D6  
           __end_of_DacAnalogToDigitalSpi 0A06                              ??_EepromRead 0019  
                        _StoreIntInEeprom 2DF0                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 310A                              strtol@endptr 0028  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                  __end_of_DATAEE_WriteByte 2ECE  
             __end_of_SWSPI_DAC_send_bits 2952                                 i2___lwmod 2C88  
           SendUartSystemInitMessage@dest 0069                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 007C                              _EUSART1_Read 2B7C  
               _SendUartSystemInitMessage 1D2E                        __end_of_EepromRead 31EA  
                             ___ftmul@exp 0069                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                            _needToSample 012E                __size_of_ReadIntFromEeprom 0126  
            __end_of_INTERRUPT_Initialize 31FC                            __end_of___ftge 2578  
                          __end_of___lmul 2A54                        GroupCommon@request 00E4  
                          __end_of___wmul 3004                             __pidataCOMRAM 31F0  
                       __size_of_TMR0_ISR 00B4                            _ADC_Initialize 313C  
                   DacSetValue@dacDigital 00DF                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 2F90                                floor@expon 009D  
                __size_of_UART_Write_Text 0072                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 0BDC                       start_initialization 228C  
                              eval_poly@d 0072                                eval_poly@n 0074  
                              eval_poly@x 006F                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 007B  
         __size_of_PIN_MANAGER_Initialize 0048                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0818                               __end_of_log 177C  
                             __end_of_pow 1412                    ?_SWSPI_Synth_send_bits 0024  
                              ?i2___lwmod 0001                           ??_SetMcuRunTime 0031  
                            ?_GroupCommon 00E2                     __end_of_EUSART1_Write 2D06  
                  __size_of_PLLInitialize 018A                                frexp@value 0018  
                         ___llmod@divisor 00BD                           ___llmod@counter 0030  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 02C4                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 2D7E                         ??_PrintHelpScreen 002B  
                                ??___ftge 001E                                  ??___lmul 0022  
                                ??___wmul 001C                       AdcSingleSample@data 00C1  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 3152  
                             __pdataBANK0 00F8                               __pdataBANK1 01D4  
                 SWSPI_DAC_send_bits@data 001A                            GroupRx@request 00E4  
                                ??_memset 001E                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002C                            _eusart1RxCount 012D  
                       __size_of___altoft 007A                                 _ZeroArray 30D0  
                         DacInit@dacInput 00D2                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lbtoft 0024  
                          GroupTx@request 00E4                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 019B                              _isalpha$2739 001C  
                      _SampleVgMonChannel 206A                         i2___lwmod@divisor 0003  
              _DacAnalogToDigitalSpi$3070 00C6                _DacAnalogToDigitalSpi$3071 00C9  
              _DacAnalogToDigitalSpi$3068 00C0                _DacAnalogToDigitalSpi$3069 00C3  
                       i2___lwmod@counter 0005                              _isdigit$2742 0019  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                            _readUartByte 00E0                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 2D06                       _SampleSingleChannel 177C  
            __size_of_EUSART1_Receive_ISR 0032                       ?_SampleVgMonChannel 0001  
           SWSPI_Synth_send_bits@bitArray 0060                               sprintf@flag 0060  
                             sprintf@prec 0061                   _DAC_DEFAULT_INIT_VALUES 79F5  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FC  
                               __pnvBANK0 00FC                  __size_of_TMR0_StartTimer 0004  
                                ?_GroupRx 00E2                                  ?_GroupTx 00E2  
                        ___lwdiv@dividend 0018                    _PIN_MANAGER_Initialize 2AEE  
                   _InitAdcApplicationMgr 31EA                                 __pintcode 0008  
                           __pmediumconst 7982                                  ?___ftadd 0024  
                                ?___ftdiv 006F                                  ?___ftneg 0018  
                                ?___ftmul 0060                                  ?___llmod 00B9  
                                ?___ftsub 0060                                  ?___fttol 007E  
                                ?___lwdiv 0018                                  ?___lwmod 001F  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 110C               __size_of_keepAliveSignalLed 0018  
                    ?_SampleSingleChannel 0001                      ??_SampleVgMonChannel 0030  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 29A8                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1E08  
                         _TimerOneSecFlag 0132                                  ?_isspace 0001  
                         _AdcSingleSample 0BDC                              _SetMcuSystem 31CC  
                                ?_isupper 0001                          ___lwdiv@quotient 001D  
                          __size_of_make8 005C                                  ?_sprintf 0024  
                          __size_of_floor 00E0                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                               ??i2___lwmod 0005  
                       ??_UART_Write_Text 001B                      _INTERRUPT_Initialize 31F8  
                       ??_TMR0_Initialize 001A                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 2E28                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                i2u520_40 2CA2                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                 _rxMsgData 0173  
                        readUartByte@dest 019B                       SWSPI_send_word@data 0028  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 212A  
                      _TEST_PLL_REGISTERS 7983                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                     ??_SampleSingleChannel 00B9  
      __size_of_SendUartSystemInitMessage 00DA                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002C                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7A05                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 006F                        _PLL_INIT_REGISTERS 79B7  
                   DATAEE_WriteByte@bData 0018                              _isspace$2745 0019  
                       ??_SWSPI_send_word 002D                                DacInit@idx 00D4  
                              _DAC_ADDRES 79FD               __size_of_GetIntFromUartData 0094  
                       ___lmul@multiplier 001A                               _INTCON2bits 000FF1  
                               copy_data0 22A0                                 copy_data1 22C0  
                               copy_data2 22E0                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 00E4                         ?_DATAEE_WriteByte 0018  
                _SampleSingleChannel$3064 01CD                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0024                        ??_DATAEE_WriteByte 0019  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                           ??_DacSetValue 00D2                          __size_of_GroupRx 003A  
                        __size_of_GroupTx 0048                               _readAddress 00F8  
                                __Lrparam 0000                         _ADC_GetConversion 2F34  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 3190  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AC                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                                ___altoft 2578                          __size_of___ftmul 00F6  
                        __size_of___llmod 0068                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0038  
                        __size_of___lwdiv 0052                   __end_of_AdcSingleSample 0DAE  
                        __size_of___lwmod 0042                                  ___awtoft 2E28  
                                ___ftpack 21DE                                  ___lbtoft 3028  
                        _numOfReadSamples 003E                                  ___lltoft 2846  
                                ___lwtoft 304C                               ??_ZeroArray 0024  
                     ??_ADC_GetConversion 001A                                  _exp$3076 00A2  
                            _isupper$2748 0019                                sprintf@val 0066  
                   _DacAnalogToDigitalSpi 0818                                  _dataSize 0129  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 00F6                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 0028                           ___lwdiv@divisor 001A  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                         ___lwdiv@counter 001C                                  __ptext10 3168  
                                __ptext11 2FB8                                  __ptext20 3124  
                                __ptext12 3094                                  __ptext21 31CC  
                                __ptext13 2F90                                  __ptext30 2BC0  
                                __ptext22 310A                                  __ptext14 30B2  
                                __ptext31 2664                                  __ptext23 2ECE  
                                __ptext15 0818                                  __ptext40 2CCA  
                                __ptext32 1D2E                                  __ptext24 31D6  
                                __ptext16 3028                                  __ptext41 2F34  
                                __ptext33 206A                                  __ptext25 2AEE  
                                __ptext17 272C                                  __ptext50 2E98  
                                __ptext42 3152                                  __ptext34 177C  
                                __ptext26 31A4                                  __ptext18 03A4  
                                __ptext51 232A                                  __ptext43 31FC  
                                __ptext35 0DAE                                  __ptext27 31F8  
                                __ptext19 2B7C                                  __ptext60 2952  
                                __ptext52 27EA                                  __ptext44 110C  
                                __ptext36 2C04                                  __ptext28 2DB8  
                                __ptext61 29A8                                  __ptext53 2D42  
                                __ptext45 2D06                                  __ptext37 2A54  
                                __ptext29 313C                                  __ptext70 24E8  
                                __ptext62 1412                                  __ptext54 30EE  
                                __ptext46 31EA                                  __ptext38 304C  
                                __ptext71 2578                                  __ptext63 1296  
                                __ptext55 1FA8                                  __ptext47 1B6A  
                                __ptext39 25F2                                  __ptext80 2846  
                                __ptext72 1E08                                  __ptext64 165C  
                                __ptext56 30D0                                  __ptext48 2DF0  
                                __ptext81 21DE                                  __ptext73 2FDE  
                                __ptext65 0626                                  __ptext57 2F64  
                                __ptext49 31B2                                  __ptext90 3200  
                                __ptext82 29FE                                  __ptext74 198C  
                                __ptext66 1EE2                                  __ptext58 28A2  
                                __ptext91 3204                                  __ptext83 31E0  
                                __ptext75 2C46                                  __ptext67 1C4E  
                                __ptext59 28FA                                  __ptext92 2E60  
                                __ptext84 317C                                  __ptext76 0F60  
                                __ptext68 2458                                  __ptext93 2F02  
                                __ptext85 3190                                  __ptext77 3070  
                                __ptext69 1894                                  __ptext94 0000  
                                __ptext86 278C                                  __ptext78 1A82  
                                __ptext79 2E28                                  __ptext88 212A  
                                __ptext89 2C88                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3074 00AE                                  _pow$3075 00B1  
                     GetIntFromUartData@c 0074                           _PrintHelpScreen 03A4  
                        __size_of_sprintf 01B2               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                       UART_Write_Text@text 0019  
                           __size_of_main 0060                                  _msgCount 0128  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 2F64               DacAnalogToDigitalSpi@dacNum 00BB  
            __size_of_SWSPI_DAC_send_bits 0058                       Make32bitsArray@data 001A  
                      SWSPI_send_word@idx 002E                               _groupsArray 01D4  
                         ??_PLLInitialize 0086                                  _testLeds 272C  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 002A                                strtol@sign 0060  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 165C                       _EUSART1_Receive_ISR 2F02  
                __end_of_SwSpi_Set_CE_Pin 2D42               __end_of_InitRxMessageParams 2B7C  
                                exp@coeff 7A05                                _MEMORY_ISR 3204  
                                log@coeff 7A23            DacAnalogToDigitalSpi@dacSpiVal 00CE  
                  SWSPI_send_word@phrType 0030                                _INTCONbits 000FF2  
                             ??_eval_poly 0076                               _sampleArray 0133  
                             _sampleCount 00EE                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                                  intlevel2 0000  
                               sprintf@ap 0062                                 sprintf@cp 0064  
                               sprintf@sp 0024                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 2C04                          ___lwmod@dividend 001F  
                                isspace@c 001A                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 31A4                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 00CA  
            __end_of_EUSART1_Transmit_ISR 2E98                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 0131                             _isReWriteDone 003B  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                          ?_AdcSingleSample 00C1  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                  ?_DacAnalogToDigitalSpi 00B9                           _UART_Write_Text 25F2  
                                sprintf@c 0068                                  sprintf@f 0026  
                       EepromRead@address 0019                           ___lwmod@divisor 0021  
                         _TMR0_Initialize 2ECE                   __end_of_PrintHelpScreen 0626  
                         ___lwmod@counter 0023                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 00B9                         __CFG_T3CMX$PORTC0 000000  
                 ReadIntFromEeprom@retVal 00CB                             ??_EepromWrite 001C  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2B36  
                        UART_Write_Text@i 001D              GetIntFromUartData@dataRegArr 006C  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 3200  
                         _TimertenSecFlag 012F                         ?_StoreIntInEeprom 0021  
              __size_of_ADC_GetConversion 0030                        ??_StoreIntInEeprom 0028  
                             _DacSetValue 1538  
