

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 28 13:04:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.45
   128                           ; Generated 16/11/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F45K22 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   163  0000                     
   164                           	psect	idataCOMRAM
   165  00458A                     __pidataCOMRAM:
   166                           	opt stack 0
   167                           
   168                           ;initializer for _writeAddress
   169  00458A  4000               	dw	16384
   170  00458C  0000               	dw	0
   171                           
   172                           	psect	idataBANK1
   173  00458E                     __pidataBANK1:
   174                           	opt stack 0
   175                           
   176                           ;initializer for _readAddress
   177  00458E  4000               	dw	16384
   178  004590  0000               	dw	0
   179                           
   180                           	psect	idataBANK2
   181  004558                     __pidataBANK2:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _groupsArray
   185  004558  94                 	db	low _GroupRx
   186  004559  29                 	db	high _GroupRx
   187  00455A  48                 	db	low _GroupTx
   188  00455B  27                 	db	high _GroupTx
   189  00455C  C0                 	db	low _GroupCommon
   190  00455D  43                 	db	high _GroupCommon
   191  00455E  00                 	db	0
   192  00455F  00                 	db	0
   193  004560  00                 	db	0
   194  004561  00                 	db	0
   195  004562  00                 	db	0
   196  004563  00                 	db	0
   197                           
   198                           	psect	mediumconst
   199  0077D2                     __pmediumconst:
   200                           	opt stack 0
   201  0077D2  00                 	db	0
   202  0077D3                     _TEST_PLL_REGISTERS:
   203                           	opt stack 0
   204  0077D3  041C               	dw	1052
   205  0077D5  0001               	dw	1
   206  0077D7  300B               	dw	12299
   207  0077D9  0061               	dw	97
   208  0077DB  26BA               	dw	9914
   209  0077DD  00C0               	dw	192
   210  0077DF  FCC9               	dw	64713
   211  0077E1  1A19               	dw	6681
   212  0077E3  0428               	dw	1064
   213  0077E5  102D               	dw	4141
   214  0077E7  00E7               	dw	231
   215  0077E9  1200               	dw	4608
   216  0077EB  6076               	dw	24694
   217  0077ED  3505               	dw	13573
   218  0077EF  0025               	dw	37
   219  0077F1  0080               	dw	128
   220  0077F3  8B84               	dw	35716
   221  0077F5  3200               	dw	12800
   222  0077F7  0003               	dw	3
   223  0077F9  0000               	dw	0
   224  0077FB  0032               	dw	50
   225  0077FD  0008               	dw	8
   226  0077FF  AAA1               	dw	43681
   227  007801  01AA               	dw	426
   228  007803  0EDA               	dw	3802
   229  007805  0003               	dw	3
   230  007807                     __end_of_TEST_PLL_REGISTERS:
   231                           	opt stack 0
   232  007807                     _PLL_INIT_REGISTERS:
   233                           	opt stack 0
   234  007807  041C               	dw	1052
   235  007809  0001               	dw	1
   236  00780B  300B               	dw	12299
   237  00780D  0061               	dw	97
   238  00780F  323A               	dw	12858
   239  007811  00C0               	dw	192
   240  007813  BCC9               	dw	48329
   241  007815  2221               	dw	8737
   242  007817  0428               	dw	1064
   243  007819  102D               	dw	4141
   244  00781B  00E7               	dw	231
   245  00781D  1200               	dw	4608
   246  00781F  2076               	dw	8310
   247  007821  3501               	dw	13569
   248  007823  0025               	dw	37
   249  007825  0080               	dw	128
   250  007827  9B84               	dw	39812
   251  007829  3400               	dw	13312
   252  00782B  0003               	dw	3
   253  00782D  0000               	dw	0
   254  00782F  0012               	dw	18
   255  007831  0000               	dw	0
   256  007833  0001               	dw	1
   257  007835  0600               	dw	1536
   258  007837  0340               	dw	832
   259  007839  0020               	dw	32
   260  00783B                     __end_of_PLL_INIT_REGISTERS:
   261                           	opt stack 0
   262  00783B                     _dpowers:
   263                           	opt stack 0
   264  00783B  0001               	dw	1
   265  00783D  0000               	dw	0
   266  00783F  000A               	dw	10
   267  007841  0000               	dw	0
   268  007843  0064               	dw	100
   269  007845  0000               	dw	0
   270  007847  03E8               	dw	1000
   271  007849  0000               	dw	0
   272  00784B  2710               	dw	10000
   273  00784D  0000               	dw	0
   274  00784F  86A0               	dw	34464
   275  007851  0001               	dw	1
   276  007853  4240               	dw	16960
   277  007855  000F               	dw	15
   278  007857  9680               	dw	38528
   279  007859  0098               	dw	152
   280  00785B  E100               	dw	57600
   281  00785D  05F5               	dw	1525
   282  00785F  CA00               	dw	51712
   283  007861  3B9A               	dw	15258
   284  007863                     __end_of_dpowers:
   285                           	opt stack 0
   286  007863                     __powers_:
   287                           	opt stack 0
   288  007863  00                 	db	0
   289  007864  80                 	db	128
   290  007865  3F                 	db	63
   291  007866  00                 	db	0
   292  007867  20                 	db	32
   293  007868  41                 	db	65
   294  007869  00                 	db	0
   295  00786A  C8                 	db	200
   296  00786B  42                 	db	66
   297  00786C  00                 	db	0
   298  00786D  7A                 	db	122
   299  00786E  44                 	db	68
   300  00786F  40                 	db	64
   301  007870  1C                 	db	28
   302  007871  46                 	db	70
   303  007872  50                 	db	80
   304  007873  C3                 	db	195
   305  007874  47                 	db	71
   306  007875  24                 	db	36
   307  007876  74                 	db	116
   308  007877  49                 	db	73
   309  007878  97                 	db	151
   310  007879  18                 	db	24
   311  00787A  4B                 	db	75
   312  00787B  BC                 	db	188
   313  00787C  BE                 	db	190
   314  00787D  4C                 	db	76
   315  00787E  6B                 	db	107
   316  00787F  6E                 	db	110
   317  007880  4E                 	db	78
   318  007881  03                 	db	3
   319  007882  15                 	db	21
   320  007883  50                 	db	80
   321  007884  79                 	db	121
   322  007885  AD                 	db	173
   323  007886  60                 	db	96
   324  007887  F3                 	db	243
   325  007888  49                 	db	73
   326  007889  71                 	db	113
   327  00788A                     __end_of__powers_:
   328                           	opt stack 0
   329  00788A                     __npowers_:
   330                           	opt stack 0
   331  00788A  00                 	db	0
   332  00788B  80                 	db	128
   333  00788C  3F                 	db	63
   334  00788D  CD                 	db	205
   335  00788E  CC                 	db	204
   336  00788F  3D                 	db	61
   337  007890  D7                 	db	215
   338  007891  23                 	db	35
   339  007892  3C                 	db	60
   340  007893  12                 	db	18
   341  007894  83                 	db	131
   342  007895  3A                 	db	58
   343  007896  B7                 	db	183
   344  007897  D1                 	db	209
   345  007898  38                 	db	56
   346  007899  C6                 	db	198
   347  00789A  27                 	db	39
   348  00789B  37                 	db	55
   349  00789C  38                 	db	56
   350  00789D  86                 	db	134
   351  00789E  35                 	db	53
   352  00789F  C0                 	db	192
   353  0078A0  D6                 	db	214
   354  0078A1  33                 	db	51
   355  0078A2  CC                 	db	204
   356  0078A3  2B                 	db	43
   357  0078A4  32                 	db	50
   358  0078A5  70                 	db	112
   359  0078A6  89                 	db	137
   360  0078A7  30                 	db	48
   361  0078A8  E7                 	db	231
   362  0078A9  DB                 	db	219
   363  0078AA  2E                 	db	46
   364  0078AB  E5                 	db	229
   365  0078AC  3C                 	db	60
   366  0078AD  1E                 	db	30
   367  0078AE  42                 	db	66
   368  0078AF  A2                 	db	162
   369  0078B0  0D                 	db	13
   370  0078B1                     __end_of__npowers_:
   371                           	opt stack 0
   372  0078B1                     _DAC_DEFAULT_INIT_VALUES:
   373                           	opt stack 0
   374  0078B1  2344               	dw	9028
   375  0078B3  6344               	dw	25412
   376  0078B5  A344               	dw	41796
   377  0078B7  E344               	dw	58180
   378  0078B9                     __end_of_DAC_DEFAULT_INIT_VALUES:
   379                           	opt stack 0
   380  0078B9                     _DAC_ADDRES:
   381                           	opt stack 0
   382  0078B9  02                 	db	2
   383  0078BA  04                 	db	4
   384  0078BB  06                 	db	6
   385  0078BC  08                 	db	8
   386  0078BD                     __end_of_DAC_ADDRES:
   387                           	opt stack 0
   388  0078BD                     _channelArr:
   389                           	opt stack 0
   390  0078BD  04                 	db	4
   391  0078BE  06                 	db	6
   392  0078BF  05                 	db	5
   393  0078C0  07                 	db	7
   394  0078C1                     __end_of_channelArr:
   395                           	opt stack 0
   396  0078C1                     exp@coeff:
   397                           	opt stack 0
   398  0078C1  00                 	db	0
   399  0078C2  80                 	db	128
   400  0078C3  3F                 	db	63
   401  0078C4  72                 	db	114
   402  0078C5  31                 	db	49
   403  0078C6  3F                 	db	63
   404  0078C7  FE                 	db	254
   405  0078C8  75                 	db	117
   406  0078C9  3E                 	db	62
   407  0078CA  58                 	db	88
   408  0078CB  63                 	db	99
   409  0078CC  3D                 	db	61
   410  0078CD  95                 	db	149
   411  0078CE  1D                 	db	29
   412  0078CF  3C                 	db	60
   413  0078D0  C5                 	db	197
   414  0078D1  AE                 	db	174
   415  0078D2  3A                 	db	58
   416  0078D3  79                 	db	121
   417  0078D4  21                 	db	33
   418  0078D5  39                 	db	57
   419  0078D6  94                 	db	148
   420  0078D7  80                 	db	128
   421  0078D8  37                 	db	55
   422  0078D9  93                 	db	147
   423  0078DA  A7                 	db	167
   424  0078DB  35                 	db	53
   425  0078DC  56                 	db	86
   426  0078DD  15                 	db	21
   427  0078DE  34                 	db	52
   428  0078DF                     __end_ofexp@coeff:
   429                           	opt stack 0
   430  0078DF                     log@coeff:
   431                           	opt stack 0
   432  0078DF  00                 	db	0
   433  0078E0  00                 	db	0
   434  0078E1  00                 	db	0
   435  0078E2  00                 	db	0
   436  0078E3  80                 	db	128
   437  0078E4  3F                 	db	63
   438  0078E5  F0                 	db	240
   439  0078E6  FF                 	db	255
   440  0078E7  BE                 	db	190
   441  0078E8  E2                 	db	226
   442  0078E9  A9                 	db	169
   443  0078EA  3E                 	db	62
   444  0078EB  83                 	db	131
   445  0078EC  76                 	db	118
   446  0078ED  BE                 	db	190
   447  0078EE  AE                 	db	174
   448  0078EF  2B                 	db	43
   449  0078F0  3E                 	db	62
   450  0078F1  3C                 	db	60
   451  0078F2  C3                 	db	195
   452  0078F3  BD                 	db	189
   453  0078F4  D2                 	db	210
   454  0078F5  13                 	db	19
   455  0078F6  3D                 	db	61
   456  0078F7  78                 	db	120
   457  0078F8  D3                 	db	211
   458  0078F9  BB                 	db	187
   459  0078FA                     __end_oflog@coeff:
   460                           	opt stack 0
   461  0078FA                     STR_35:
   462                           
   463                           ; BSR set to: 1
   464  0078FA  24                 	db	36
   465  0078FB  52                 	db	82	;'R'
   466  0078FC  43                 	db	67	;'C'
   467  0078FD  50                 	db	80	;'P'
   468  0078FE  20                 	db	32
   469  0078FF  3C                 	db	60	;'<'
   470  007900  58                 	db	88	;'X'
   471  007901  3E                 	db	62	;'>'
   472  007902  3C                 	db	60	;'<'
   473  007903  63                 	db	99	;'c'
   474  007904  72                 	db	114	;'r'
   475  007905  3E                 	db	62	;'>'
   476  007906  20                 	db	32
   477  007907  20                 	db	32
   478  007908  20                 	db	32
   479  007909  20                 	db	32
   480  00790A  20                 	db	32
   481  00790B  53                 	db	83	;'S'
   482  00790C  65                 	db	101	;'e'
   483  00790D  74                 	db	116	;'t'
   484  00790E  20                 	db	32
   485  00790F  43                 	db	67	;'C'
   486  007910  6F                 	db	111	;'o'
   487  007911  6D                 	db	109	;'m'
   488  007912  70                 	db	112	;'p'
   489  007913  72                 	db	114	;'r'
   490  007914  65                 	db	101	;'e'
   491  007915  73                 	db	115	;'s'
   492  007916  73                 	db	115	;'s'
   493  007917  69                 	db	105	;'i'
   494  007918  6F                 	db	111	;'o'
   495  007919  6E                 	db	110	;'n'
   496  00791A  20                 	db	32
   497  00791B  6F                 	db	111	;'o'
   498  00791C  70                 	db	112	;'p'
   499  00791D  65                 	db	101	;'e'
   500  00791E  72                 	db	114	;'r'
   501  00791F  61                 	db	97	;'a'
   502  007920  74                 	db	116	;'t'
   503  007921  69                 	db	105	;'i'
   504  007922  6F                 	db	111	;'o'
   505  007923  6E                 	db	110	;'n'
   506  007924  20                 	db	32
   507  007925  6D                 	db	109	;'m'
   508  007926  6F                 	db	111	;'o'
   509  007927  64                 	db	100	;'d'
   510  007928  65                 	db	101	;'e'
   511  007929  20                 	db	32
   512  00792A  61                 	db	97	;'a'
   513  00792B  74                 	db	116	;'t'
   514  00792C  20                 	db	32
   515  00792D  52                 	db	82	;'R'
   516  00792E  58                 	db	88	;'X'
   517  00792F  20                 	db	32
   518  007930  73                 	db	115	;'s'
   519  007931  79                 	db	121	;'y'
   520  007932  73                 	db	115	;'s'
   521  007933  74                 	db	116	;'t'
   522  007934  65                 	db	101	;'e'
   523  007935  6D                 	db	109	;'m'
   524  007936  3A                 	db	58	;':'
   525  007937  20                 	db	32
   526  007938  41                 	db	65	;'A'
   527  007939  75                 	db	117	;'u'
   528  00793A  74                 	db	116	;'t'
   529  00793B  6F                 	db	111	;'o'
   530  00793C  6D                 	db	109	;'m'
   531  00793D  61                 	db	97	;'a'
   532  00793E  74                 	db	116	;'t'
   533  00793F  69                 	db	105	;'i'
   534  007940  63                 	db	99	;'c'
   535  007941  5B                 	db	91	;'['
   536  007942  31                 	db	49	;'1'
   537  007943  5D                 	db	93	;']'
   538  007944  20                 	db	32
   539  007945  4D                 	db	77	;'M'
   540  007946  61                 	db	97	;'a'
   541  007947  6E                 	db	110	;'n'
   542  007948  75                 	db	117	;'u'
   543  007949  61                 	db	97	;'a'
   544  00794A  6C                 	db	108	;'l'
   545  00794B  5B                 	db	91	;'['
   546  00794C  30                 	db	48	;'0'
   547  00794D  5D                 	db	93	;']'
   548  00794E  20                 	db	32
   549  00794F  5B                 	db	91	;'['
   550  007950  44                 	db	68	;'D'
   551  007951  65                 	db	101	;'e'
   552  007952  66                 	db	102	;'f'
   553  007953  61                 	db	97	;'a'
   554  007954  75                 	db	117	;'u'
   555  007955  6C                 	db	108	;'l'
   556  007956  74                 	db	116	;'t'
   557  007957  20                 	db	32
   558  007958  3D                 	db	61	;'='
   559  007959  20                 	db	32
   560  00795A  30                 	db	48	;'0'
   561  00795B  5D                 	db	93	;']'
   562  00795C  0D                 	db	13
   563  00795D  0A                 	db	10
   564  00795E  00                 	db	0
   565  00795F                     STR_34:
   566                           
   567                           ; BSR set to: 1
   568  00795F  24                 	db	36
   569  007960  52                 	db	82	;'R'
   570  007961  43                 	db	67	;'C'
   571  007962  52                 	db	82	;'R'
   572  007963  20                 	db	32
   573  007964  3C                 	db	60	;'<'
   574  007965  58                 	db	88	;'X'
   575  007966  3E                 	db	62	;'>'
   576  007967  3C                 	db	60	;'<'
   577  007968  63                 	db	99	;'c'
   578  007969  72                 	db	114	;'r'
   579  00796A  3E                 	db	62	;'>'
   580  00796B  20                 	db	32
   581  00796C  20                 	db	32
   582  00796D  20                 	db	32
   583  00796E  20                 	db	32
   584  00796F  20                 	db	32
   585  007970  53                 	db	83	;'S'
   586  007971  65                 	db	101	;'e'
   587  007972  74                 	db	116	;'t'
   588  007973  20                 	db	32
   589  007974  43                 	db	67	;'C'
   590  007975  6F                 	db	111	;'o'
   591  007976  6D                 	db	109	;'m'
   592  007977  70                 	db	112	;'p'
   593  007978  72                 	db	114	;'r'
   594  007979  65                 	db	101	;'e'
   595  00797A  73                 	db	115	;'s'
   596  00797B  73                 	db	115	;'s'
   597  00797C  69                 	db	105	;'i'
   598  00797D  6F                 	db	111	;'o'
   599  00797E  6E                 	db	110	;'n'
   600  00797F  20                 	db	32
   601  007980  72                 	db	114	;'r'
   602  007981  61                 	db	97	;'a'
   603  007982  6E                 	db	110	;'n'
   604  007983  67                 	db	103	;'g'
   605  007984  65                 	db	101	;'e'
   606  007985  20                 	db	32
   607  007986  61                 	db	97	;'a'
   608  007987  74                 	db	116	;'t'
   609  007988  20                 	db	32
   610  007989  52                 	db	82	;'R'
   611  00798A  58                 	db	88	;'X'
   612  00798B  20                 	db	32
   613  00798C  73                 	db	115	;'s'
   614  00798D  79                 	db	121	;'y'
   615  00798E  73                 	db	115	;'s'
   616  00798F  74                 	db	116	;'t'
   617  007990  65                 	db	101	;'e'
   618  007991  6D                 	db	109	;'m'
   619  007992  2E                 	db	46
   620  007993  20                 	db	32
   621  007994  48                 	db	72	;'H'
   622  007995  69                 	db	105	;'i'
   623  007996  67                 	db	103	;'g'
   624  007997  68                 	db	104	;'h'
   625  007998  20                 	db	32
   626  007999  5B                 	db	91	;'['
   627  00799A  31                 	db	49	;'1'
   628  00799B  5D                 	db	93	;']'
   629  00799C  20                 	db	32
   630  00799D  4C                 	db	76	;'L'
   631  00799E  6F                 	db	111	;'o'
   632  00799F  77                 	db	119	;'w'
   633  0079A0  20                 	db	32
   634  0079A1  5B                 	db	91	;'['
   635  0079A2  30                 	db	48	;'0'
   636  0079A3  5D                 	db	93	;']'
   637  0079A4  20                 	db	32
   638  0079A5  5B                 	db	91	;'['
   639  0079A6  44                 	db	68	;'D'
   640  0079A7  65                 	db	101	;'e'
   641  0079A8  66                 	db	102	;'f'
   642  0079A9  61                 	db	97	;'a'
   643  0079AA  75                 	db	117	;'u'
   644  0079AB  6C                 	db	108	;'l'
   645  0079AC  74                 	db	116	;'t'
   646  0079AD  20                 	db	32
   647  0079AE  3D                 	db	61	;'='
   648  0079AF  20                 	db	32
   649  0079B0  30                 	db	48	;'0'
   650  0079B1  5D                 	db	93	;']'
   651  0079B2  0D                 	db	13
   652  0079B3  0A                 	db	10
   653  0079B4  00                 	db	0
   654  0079B5                     STR_39:
   655                           
   656                           ; BSR set to: 1
   657  0079B5  24                 	db	36
   658  0079B6  53                 	db	83	;'S'
   659  0079B7  42                 	db	66	;'B'
   660  0079B8  55                 	db	85	;'U'
   661  0079B9  20                 	db	32
   662  0079BA  3C                 	db	60	;'<'
   663  0079BB  58                 	db	88	;'X'
   664  0079BC  3E                 	db	62	;'>'
   665  0079BD  3C                 	db	60	;'<'
   666  0079BE  63                 	db	99	;'c'
   667  0079BF  72                 	db	114	;'r'
   668  0079C0  3E                 	db	62	;'>'
   669  0079C1  20                 	db	32
   670  0079C2  20                 	db	32
   671  0079C3  20                 	db	32
   672  0079C4  20                 	db	32
   673  0079C5  20                 	db	32
   674  0079C6  53                 	db	83	;'S'
   675  0079C7  65                 	db	101	;'e'
   676  0079C8  74                 	db	116	;'t'
   677  0079C9  20                 	db	32
   678  0079CA  55                 	db	85	;'U'
   679  0079CB  41                 	db	65	;'A'
   680  0079CC  52                 	db	82	;'R'
   681  0079CD  54                 	db	84	;'T'
   682  0079CE  20                 	db	32
   683  0079CF  61                 	db	97	;'a'
   684  0079D0  75                 	db	117	;'u'
   685  0079D1  74                 	db	116	;'t'
   686  0079D2  6F                 	db	111	;'o'
   687  0079D3  6D                 	db	109	;'m'
   688  0079D4  61                 	db	97	;'a'
   689  0079D5  74                 	db	116	;'t'
   690  0079D6  69                 	db	105	;'i'
   691  0079D7  63                 	db	99	;'c'
   692  0079D8  20                 	db	32
   693  0079D9  6F                 	db	111	;'o'
   694  0079DA  70                 	db	112	;'p'
   695  0079DB  65                 	db	101	;'e'
   696  0079DC  72                 	db	114	;'r'
   697  0079DD  61                 	db	97	;'a'
   698  0079DE  74                 	db	116	;'t'
   699  0079DF  69                 	db	105	;'i'
   700  0079E0  6F                 	db	111	;'o'
   701  0079E1  6E                 	db	110	;'n'
   702  0079E2  3A                 	db	58	;':'
   703  0079E3  20                 	db	32
   704  0079E4  41                 	db	65	;'A'
   705  0079E5  75                 	db	117	;'u'
   706  0079E6  74                 	db	116	;'t'
   707  0079E7  6F                 	db	111	;'o'
   708  0079E8  6D                 	db	109	;'m'
   709  0079E9  61                 	db	97	;'a'
   710  0079EA  74                 	db	116	;'t'
   711  0079EB  69                 	db	105	;'i'
   712  0079EC  63                 	db	99	;'c'
   713  0079ED  5B                 	db	91	;'['
   714  0079EE  31                 	db	49	;'1'
   715  0079EF  5D                 	db	93	;']'
   716  0079F0  20                 	db	32
   717  0079F1  4D                 	db	77	;'M'
   718  0079F2  61                 	db	97	;'a'
   719  0079F3  6E                 	db	110	;'n'
   720  0079F4  75                 	db	117	;'u'
   721  0079F5  61                 	db	97	;'a'
   722  0079F6  6C                 	db	108	;'l'
   723  0079F7  5B                 	db	91	;'['
   724  0079F8  30                 	db	48	;'0'
   725  0079F9  5D                 	db	93	;']'
   726  0079FA  20                 	db	32
   727  0079FB  5B                 	db	91	;'['
   728  0079FC  44                 	db	68	;'D'
   729  0079FD  65                 	db	101	;'e'
   730  0079FE  66                 	db	102	;'f'
   731  0079FF  61                 	db	97	;'a'
   732  007A00  75                 	db	117	;'u'
   733  007A01  6C                 	db	108	;'l'
   734  007A02  74                 	db	116	;'t'
   735  007A03  20                 	db	32
   736  007A04  3D                 	db	61	;'='
   737  007A05  20                 	db	32
   738  007A06  30                 	db	48	;'0'
   739  007A07  5D                 	db	93	;']'
   740  007A08  0D                 	db	13
   741  007A09  0A                 	db	10
   742  007A0A  00                 	db	0
   743  007A0B                     STR_28:
   744                           
   745                           ; BSR set to: 1
   746  007A0B  24                 	db	36
   747  007A0C  54                 	db	84	;'T'
   748  007A0D  58                 	db	88	;'X'
   749  007A0E  20                 	db	32
   750  007A0F  3C                 	db	60	;'<'
   751  007A10  58                 	db	88	;'X'
   752  007A11  3E                 	db	62	;'>'
   753  007A12  3C                 	db	60	;'<'
   754  007A13  63                 	db	99	;'c'
   755  007A14  72                 	db	114	;'r'
   756  007A15  3E                 	db	62	;'>'
   757  007A16  20                 	db	32
   758  007A17  20                 	db	32
   759  007A18  20                 	db	32
   760  007A19  20                 	db	32
   761  007A1A  20                 	db	32
   762  007A1B  20                 	db	32
   763  007A1C  54                 	db	84	;'T'
   764  007A1D  75                 	db	117	;'u'
   765  007A1E  72                 	db	114	;'r'
   766  007A1F  6E                 	db	110	;'n'
   767  007A20  20                 	db	32
   768  007A21  6F                 	db	111	;'o'
   769  007A22  6E                 	db	110	;'n'
   770  007A23  5B                 	db	91	;'['
   771  007A24  31                 	db	49	;'1'
   772  007A25  5D                 	db	93	;']'
   773  007A26  20                 	db	32
   774  007A27  2F                 	db	47
   775  007A28  20                 	db	32
   776  007A29  6F                 	db	111	;'o'
   777  007A2A  66                 	db	102	;'f'
   778  007A2B  66                 	db	102	;'f'
   779  007A2C  5B                 	db	91	;'['
   780  007A2D  30                 	db	48	;'0'
   781  007A2E  5D                 	db	93	;']'
   782  007A2F  20                 	db	32
   783  007A30  74                 	db	116	;'t'
   784  007A31  72                 	db	114	;'r'
   785  007A32  61                 	db	97	;'a'
   786  007A33  6E                 	db	110	;'n'
   787  007A34  73                 	db	115	;'s'
   788  007A35  6D                 	db	109	;'m'
   789  007A36  69                 	db	105	;'i'
   790  007A37  73                 	db	115	;'s'
   791  007A38  73                 	db	115	;'s'
   792  007A39  69                 	db	105	;'i'
   793  007A3A  6F                 	db	111	;'o'
   794  007A3B  6E                 	db	110	;'n'
   795  007A3C  20                 	db	32
   796  007A3D  61                 	db	97	;'a'
   797  007A3E  74                 	db	116	;'t'
   798  007A3F  20                 	db	32
   799  007A40  54                 	db	84	;'T'
   800  007A41  58                 	db	88	;'X'
   801  007A42  20                 	db	32
   802  007A43  73                 	db	115	;'s'
   803  007A44  79                 	db	121	;'y'
   804  007A45  73                 	db	115	;'s'
   805  007A46  74                 	db	116	;'t'
   806  007A47  65                 	db	101	;'e'
   807  007A48  6D                 	db	109	;'m'
   808  007A49  20                 	db	32
   809  007A4A  5B                 	db	91	;'['
   810  007A4B  44                 	db	68	;'D'
   811  007A4C  65                 	db	101	;'e'
   812  007A4D  66                 	db	102	;'f'
   813  007A4E  61                 	db	97	;'a'
   814  007A4F  75                 	db	117	;'u'
   815  007A50  6C                 	db	108	;'l'
   816  007A51  74                 	db	116	;'t'
   817  007A52  20                 	db	32
   818  007A53  3D                 	db	61	;'='
   819  007A54  20                 	db	32
   820  007A55  30                 	db	48	;'0'
   821  007A56  5D                 	db	93	;']'
   822  007A57  0D                 	db	13
   823  007A58  0A                 	db	10
   824  007A59  00                 	db	0
   825  007A5A                     STR_27:
   826                           
   827                           ; BSR set to: 1
   828  007A5A  24                 	db	36
   829  007A5B  54                 	db	84	;'T'
   830  007A5C  42                 	db	66	;'B'
   831  007A5D  20                 	db	32
   832  007A5E  3C                 	db	60	;'<'
   833  007A5F  58                 	db	88	;'X'
   834  007A60  3E                 	db	62	;'>'
   835  007A61  3C                 	db	60	;'<'
   836  007A62  63                 	db	99	;'c'
   837  007A63  72                 	db	114	;'r'
   838  007A64  3E                 	db	62	;'>'
   839  007A65  20                 	db	32
   840  007A66  20                 	db	32
   841  007A67  20                 	db	32
   842  007A68  20                 	db	32
   843  007A69  20                 	db	32
   844  007A6A  20                 	db	32
   845  007A6B  54                 	db	84	;'T'
   846  007A6C  75                 	db	117	;'u'
   847  007A6D  72                 	db	114	;'r'
   848  007A6E  6E                 	db	110	;'n'
   849  007A6F  20                 	db	32
   850  007A70  6F                 	db	111	;'o'
   851  007A71  6E                 	db	110	;'n'
   852  007A72  5B                 	db	91	;'['
   853  007A73  31                 	db	49	;'1'
   854  007A74  5D                 	db	93	;']'
   855  007A75  20                 	db	32
   856  007A76  2F                 	db	47
   857  007A77  20                 	db	32
   858  007A78  6F                 	db	111	;'o'
   859  007A79  66                 	db	102	;'f'
   860  007A7A  66                 	db	102	;'f'
   861  007A7B  5B                 	db	91	;'['
   862  007A7C  30                 	db	48	;'0'
   863  007A7D  5D                 	db	93	;']'
   864  007A7E  20                 	db	32
   865  007A7F  42                 	db	66	;'B'
   866  007A80  49                 	db	73	;'I'
   867  007A81  54                 	db	84	;'T'
   868  007A82  20                 	db	32
   869  007A83  6D                 	db	109	;'m'
   870  007A84  6F                 	db	111	;'o'
   871  007A85  64                 	db	100	;'d'
   872  007A86  65                 	db	101	;'e'
   873  007A87  20                 	db	32
   874  007A88  61                 	db	97	;'a'
   875  007A89  74                 	db	116	;'t'
   876  007A8A  20                 	db	32
   877  007A8B  54                 	db	84	;'T'
   878  007A8C  58                 	db	88	;'X'
   879  007A8D  20                 	db	32
   880  007A8E  73                 	db	115	;'s'
   881  007A8F  79                 	db	121	;'y'
   882  007A90  73                 	db	115	;'s'
   883  007A91  74                 	db	116	;'t'
   884  007A92  65                 	db	101	;'e'
   885  007A93  6D                 	db	109	;'m'
   886  007A94  20                 	db	32
   887  007A95  5B                 	db	91	;'['
   888  007A96  44                 	db	68	;'D'
   889  007A97  65                 	db	101	;'e'
   890  007A98  66                 	db	102	;'f'
   891  007A99  61                 	db	97	;'a'
   892  007A9A  75                 	db	117	;'u'
   893  007A9B  6C                 	db	108	;'l'
   894  007A9C  74                 	db	116	;'t'
   895  007A9D  20                 	db	32
   896  007A9E  3D                 	db	61	;'='
   897  007A9F  20                 	db	32
   898  007AA0  30                 	db	48	;'0'
   899  007AA1  5D                 	db	93	;']'
   900  007AA2  0D                 	db	13
   901  007AA3  0A                 	db	10
   902  007AA4  00                 	db	0
   903  007AA5                     STR_30:
   904                           
   905                           ; BSR set to: 1
   906  007AA5  24                 	db	36
   907  007AA6  52                 	db	82	;'R'
   908  007AA7  49                 	db	73	;'I'
   909  007AA8  20                 	db	32
   910  007AA9  3C                 	db	60	;'<'
   911  007AAA  58                 	db	88	;'X'
   912  007AAB  58                 	db	88	;'X'
   913  007AAC  58                 	db	88	;'X'
   914  007AAD  58                 	db	88	;'X'
   915  007AAE  3E                 	db	62	;'>'
   916  007AAF  3C                 	db	60	;'<'
   917  007AB0  63                 	db	99	;'c'
   918  007AB1  72                 	db	114	;'r'
   919  007AB2  3E                 	db	62	;'>'
   920  007AB3  20                 	db	32
   921  007AB4  20                 	db	32
   922  007AB5  20                 	db	32
   923  007AB6  49                 	db	73	;'I'
   924  007AB7  6E                 	db	110	;'n'
   925  007AB8  69                 	db	105	;'i'
   926  007AB9  74                 	db	116	;'t'
   927  007ABA  20                 	db	32
   928  007ABB  52                 	db	82	;'R'
   929  007ABC  58                 	db	88	;'X'
   930  007ABD  20                 	db	32
   931  007ABE  73                 	db	115	;'s'
   932  007ABF  79                 	db	121	;'y'
   933  007AC0  73                 	db	115	;'s'
   934  007AC1  74                 	db	116	;'t'
   935  007AC2  65                 	db	101	;'e'
   936  007AC3  6D                 	db	109	;'m'
   937  007AC4  20                 	db	32
   938  007AC5  61                 	db	97	;'a'
   939  007AC6  6E                 	db	110	;'n'
   940  007AC7  64                 	db	100	;'d'
   941  007AC8  20                 	db	32
   942  007AC9  73                 	db	115	;'s'
   943  007ACA  65                 	db	101	;'e'
   944  007ACB  74                 	db	116	;'t'
   945  007ACC  20                 	db	32
   946  007ACD  66                 	db	102	;'f'
   947  007ACE  72                 	db	114	;'r'
   948  007ACF  65                 	db	101	;'e'
   949  007AD0  71                 	db	113	;'q'
   950  007AD1  75                 	db	117	;'u'
   951  007AD2  65                 	db	101	;'e'
   952  007AD3  6E                 	db	110	;'n'
   953  007AD4  63                 	db	99	;'c'
   954  007AD5  79                 	db	121	;'y'
   955  007AD6  20                 	db	32
   956  007AD7  61                 	db	97	;'a'
   957  007AD8  74                 	db	116	;'t'
   958  007AD9  20                 	db	32
   959  007ADA  58                 	db	88	;'X'
   960  007ADB  58                 	db	88	;'X'
   961  007ADC  58                 	db	88	;'X'
   962  007ADD  58                 	db	88	;'X'
   963  007ADE  20                 	db	32
   964  007ADF  28                 	db	40
   965  007AE0  30                 	db	48	;'0'
   966  007AE1  2D                 	db	45
   967  007AE2  39                 	db	57	;'9'
   968  007AE3  39                 	db	57	;'9'
   969  007AE4  39                 	db	57	;'9'
   970  007AE5  39                 	db	57	;'9'
   971  007AE6  29                 	db	41
   972  007AE7  5B                 	db	91	;'['
   973  007AE8  4D                 	db	77	;'M'
   974  007AE9  48                 	db	72	;'H'
   975  007AEA  7A                 	db	122	;'z'
   976  007AEB  5D                 	db	93	;']'
   977  007AEC  0D                 	db	13
   978  007AED  0A                 	db	10
   979  007AEE  00                 	db	0
   980  007AEF                     STR_42:
   981                           
   982                           ; BSR set to: 1
   983  007AEF  24                 	db	36
   984  007AF0  54                 	db	84	;'T'
   985  007AF1  44                 	db	68	;'D'
   986  007AF2  20                 	db	32
   987  007AF3  3C                 	db	60	;'<'
   988  007AF4  44                 	db	68	;'D'
   989  007AF5  41                 	db	65	;'A'
   990  007AF6  43                 	db	67	;'C'
   991  007AF7  20                 	db	32
   992  007AF8  4E                 	db	78	;'N'
   993  007AF9  55                 	db	85	;'U'
   994  007AFA  4D                 	db	77	;'M'
   995  007AFB  3E                 	db	62	;'>'
   996  007AFC  3C                 	db	60	;'<'
   997  007AFD  44                 	db	68	;'D'
   998  007AFE  41                 	db	65	;'A'
   999  007AFF  43                 	db	67	;'C'
  1000  007B00  20                 	db	32
  1001  007B01  56                 	db	86	;'V'
  1002  007B02  41                 	db	65	;'A'
  1003  007B03  4C                 	db	76	;'L'
  1004  007B04  55                 	db	85	;'U'
  1005  007B05  45                 	db	69	;'E'
  1006  007B06  3E                 	db	62	;'>'
  1007  007B07  3C                 	db	60	;'<'
  1008  007B08  63                 	db	99	;'c'
  1009  007B09  72                 	db	114	;'r'
  1010  007B0A  3E                 	db	62	;'>'
  1011  007B0B  20                 	db	32
  1012  007B0C  20                 	db	32
  1013  007B0D  20                 	db	32
  1014  007B0E  20                 	db	32
  1015  007B0F  20                 	db	32
  1016  007B10  20                 	db	32
  1017  007B11  20                 	db	32
  1018  007B12  20                 	db	32
  1019  007B13  20                 	db	32
  1020  007B14  53                 	db	83	;'S'
  1021  007B15  65                 	db	101	;'e'
  1022  007B16  74                 	db	116	;'t'
  1023  007B17  20                 	db	32
  1024  007B18  54                 	db	84	;'T'
  1025  007B19  58                 	db	88	;'X'
  1026  007B1A  20                 	db	32
  1027  007B1B  44                 	db	68	;'D'
  1028  007B1C  41                 	db	65	;'A'
  1029  007B1D  43                 	db	67	;'C'
  1030  007B1E  20                 	db	32
  1031  007B1F  3C                 	db	60	;'<'
  1032  007B20  30                 	db	48	;'0'
  1033  007B21  2D                 	db	45
  1034  007B22  33                 	db	51	;'3'
  1035  007B23  3E                 	db	62	;'>'
  1036  007B24  20                 	db	32
  1037  007B25  3C                 	db	60	;'<'
  1038  007B26  30                 	db	48	;'0'
  1039  007B27  2D                 	db	45
  1040  007B28  56                 	db	86	;'V'
  1041  007B29  72                 	db	114	;'r'
  1042  007B2A  65                 	db	101	;'e'
  1043  007B2B  66                 	db	102	;'f'
  1044  007B2C  5B                 	db	91	;'['
  1045  007B2D  34                 	db	52	;'4'
  1046  007B2E  20                 	db	32
  1047  007B2F  64                 	db	100	;'d'
  1048  007B30  69                 	db	105	;'i'
  1049  007B31  67                 	db	103	;'g'
  1050  007B32  5D                 	db	93	;']'
  1051  007B33  3E                 	db	62	;'>'
  1052  007B34  20                 	db	32
  1053  007B35  0D                 	db	13
  1054  007B36  0A                 	db	10
  1055  007B37  00                 	db	0
  1056  007B38                     STR_24:
  1057                           
  1058                           ; BSR set to: 1
  1059  007B38  24                 	db	36
  1060  007B39  54                 	db	84	;'T'
  1061  007B3A  49                 	db	73	;'I'
  1062  007B3B  20                 	db	32
  1063  007B3C  3C                 	db	60	;'<'
  1064  007B3D  58                 	db	88	;'X'
  1065  007B3E  58                 	db	88	;'X'
  1066  007B3F  58                 	db	88	;'X'
  1067  007B40  58                 	db	88	;'X'
  1068  007B41  3E                 	db	62	;'>'
  1069  007B42  3C                 	db	60	;'<'
  1070  007B43  63                 	db	99	;'c'
  1071  007B44  72                 	db	114	;'r'
  1072  007B45  3E                 	db	62	;'>'
  1073  007B46  20                 	db	32
  1074  007B47  20                 	db	32
  1075  007B48  20                 	db	32
  1076  007B49  49                 	db	73	;'I'
  1077  007B4A  6E                 	db	110	;'n'
  1078  007B4B  69                 	db	105	;'i'
  1079  007B4C  74                 	db	116	;'t'
  1080  007B4D  20                 	db	32
  1081  007B4E  54                 	db	84	;'T'
  1082  007B4F  58                 	db	88	;'X'
  1083  007B50  20                 	db	32
  1084  007B51  73                 	db	115	;'s'
  1085  007B52  79                 	db	121	;'y'
  1086  007B53  73                 	db	115	;'s'
  1087  007B54  74                 	db	116	;'t'
  1088  007B55  65                 	db	101	;'e'
  1089  007B56  6D                 	db	109	;'m'
  1090  007B57  20                 	db	32
  1091  007B58  61                 	db	97	;'a'
  1092  007B59  6E                 	db	110	;'n'
  1093  007B5A  64                 	db	100	;'d'
  1094  007B5B  20                 	db	32
  1095  007B5C  73                 	db	115	;'s'
  1096  007B5D  65                 	db	101	;'e'
  1097  007B5E  74                 	db	116	;'t'
  1098  007B5F  20                 	db	32
  1099  007B60  66                 	db	102	;'f'
  1100  007B61  72                 	db	114	;'r'
  1101  007B62  65                 	db	101	;'e'
  1102  007B63  71                 	db	113	;'q'
  1103  007B64  75                 	db	117	;'u'
  1104  007B65  65                 	db	101	;'e'
  1105  007B66  6E                 	db	110	;'n'
  1106  007B67  63                 	db	99	;'c'
  1107  007B68  79                 	db	121	;'y'
  1108  007B69  20                 	db	32
  1109  007B6A  28                 	db	40
  1110  007B6B  30                 	db	48	;'0'
  1111  007B6C  2D                 	db	45
  1112  007B6D  39                 	db	57	;'9'
  1113  007B6E  39                 	db	57	;'9'
  1114  007B6F  39                 	db	57	;'9'
  1115  007B70  39                 	db	57	;'9'
  1116  007B71  29                 	db	41
  1117  007B72  5B                 	db	91	;'['
  1118  007B73  4D                 	db	77	;'M'
  1119  007B74  48                 	db	72	;'H'
  1120  007B75  7A                 	db	122	;'z'
  1121  007B76  5D                 	db	93	;']'
  1122  007B77  0D                 	db	13
  1123  007B78  0A                 	db	10
  1124  007B79  00                 	db	0
  1125  007B7A                     STR_32:
  1126                           
  1127                           ; BSR set to: 1
  1128  007B7A  24                 	db	36
  1129  007B7B  52                 	db	82	;'R'
  1130  007B7C  42                 	db	66	;'B'
  1131  007B7D  20                 	db	32
  1132  007B7E  3C                 	db	60	;'<'
  1133  007B7F  58                 	db	88	;'X'
  1134  007B80  3E                 	db	62	;'>'
  1135  007B81  3C                 	db	60	;'<'
  1136  007B82  63                 	db	99	;'c'
  1137  007B83  72                 	db	114	;'r'
  1138  007B84  3E                 	db	62	;'>'
  1139  007B85  20                 	db	32
  1140  007B86  20                 	db	32
  1141  007B87  20                 	db	32
  1142  007B88  20                 	db	32
  1143  007B89  20                 	db	32
  1144  007B8A  20                 	db	32
  1145  007B8B  54                 	db	84	;'T'
  1146  007B8C  75                 	db	117	;'u'
  1147  007B8D  72                 	db	114	;'r'
  1148  007B8E  6E                 	db	110	;'n'
  1149  007B8F  20                 	db	32
  1150  007B90  6F                 	db	111	;'o'
  1151  007B91  6E                 	db	110	;'n'
  1152  007B92  5B                 	db	91	;'['
  1153  007B93  31                 	db	49	;'1'
  1154  007B94  5D                 	db	93	;']'
  1155  007B95  20                 	db	32
  1156  007B96  2F                 	db	47
  1157  007B97  20                 	db	32
  1158  007B98  6F                 	db	111	;'o'
  1159  007B99  66                 	db	102	;'f'
  1160  007B9A  66                 	db	102	;'f'
  1161  007B9B  5B                 	db	91	;'['
  1162  007B9C  30                 	db	48	;'0'
  1163  007B9D  5D                 	db	93	;']'
  1164  007B9E  20                 	db	32
  1165  007B9F  42                 	db	66	;'B'
  1166  007BA0  49                 	db	73	;'I'
  1167  007BA1  54                 	db	84	;'T'
  1168  007BA2  20                 	db	32
  1169  007BA3  6D                 	db	109	;'m'
  1170  007BA4  6F                 	db	111	;'o'
  1171  007BA5  64                 	db	100	;'d'
  1172  007BA6  65                 	db	101	;'e'
  1173  007BA7  20                 	db	32
  1174  007BA8  61                 	db	97	;'a'
  1175  007BA9  74                 	db	116	;'t'
  1176  007BAA  20                 	db	32
  1177  007BAB  52                 	db	82	;'R'
  1178  007BAC  58                 	db	88	;'X'
  1179  007BAD  20                 	db	32
  1180  007BAE  73                 	db	115	;'s'
  1181  007BAF  79                 	db	121	;'y'
  1182  007BB0  73                 	db	115	;'s'
  1183  007BB1  74                 	db	116	;'t'
  1184  007BB2  65                 	db	101	;'e'
  1185  007BB3  6D                 	db	109	;'m'
  1186  007BB4  2E                 	db	46
  1187  007BB5  0D                 	db	13
  1188  007BB6  0A                 	db	10
  1189  007BB7  00                 	db	0
  1190  007BB8                     STR_25:
  1191                           
  1192                           ; BSR set to: 1
  1193  007BB8  24                 	db	36
  1194  007BB9  54                 	db	84	;'T'
  1195  007BBA  46                 	db	70	;'F'
  1196  007BBB  20                 	db	32
  1197  007BBC  3C                 	db	60	;'<'
  1198  007BBD  58                 	db	88	;'X'
  1199  007BBE  58                 	db	88	;'X'
  1200  007BBF  58                 	db	88	;'X'
  1201  007BC0  58                 	db	88	;'X'
  1202  007BC1  3E                 	db	62	;'>'
  1203  007BC2  3C                 	db	60	;'<'
  1204  007BC3  63                 	db	99	;'c'
  1205  007BC4  72                 	db	114	;'r'
  1206  007BC5  3E                 	db	62	;'>'
  1207  007BC6  20                 	db	32
  1208  007BC7  20                 	db	32
  1209  007BC8  20                 	db	32
  1210  007BC9  53                 	db	83	;'S'
  1211  007BCA  65                 	db	101	;'e'
  1212  007BCB  74                 	db	116	;'t'
  1213  007BCC  20                 	db	32
  1214  007BCD  54                 	db	84	;'T'
  1215  007BCE  58                 	db	88	;'X'
  1216  007BCF  20                 	db	32
  1217  007BD0  73                 	db	115	;'s'
  1218  007BD1  79                 	db	121	;'y'
  1219  007BD2  73                 	db	115	;'s'
  1220  007BD3  74                 	db	116	;'t'
  1221  007BD4  65                 	db	101	;'e'
  1222  007BD5  6D                 	db	109	;'m'
  1223  007BD6  20                 	db	32
  1224  007BD7  66                 	db	102	;'f'
  1225  007BD8  72                 	db	114	;'r'
  1226  007BD9  65                 	db	101	;'e'
  1227  007BDA  71                 	db	113	;'q'
  1228  007BDB  75                 	db	117	;'u'
  1229  007BDC  65                 	db	101	;'e'
  1230  007BDD  6E                 	db	110	;'n'
  1231  007BDE  63                 	db	99	;'c'
  1232  007BDF  79                 	db	121	;'y'
  1233  007BE0  20                 	db	32
  1234  007BE1  61                 	db	97	;'a'
  1235  007BE2  74                 	db	116	;'t'
  1236  007BE3  20                 	db	32
  1237  007BE4  28                 	db	40
  1238  007BE5  30                 	db	48	;'0'
  1239  007BE6  2D                 	db	45
  1240  007BE7  39                 	db	57	;'9'
  1241  007BE8  39                 	db	57	;'9'
  1242  007BE9  39                 	db	57	;'9'
  1243  007BEA  39                 	db	57	;'9'
  1244  007BEB  29                 	db	41
  1245  007BEC  5B                 	db	91	;'['
  1246  007BED  4D                 	db	77	;'M'
  1247  007BEE  48                 	db	72	;'H'
  1248  007BEF  7A                 	db	122	;'z'
  1249  007BF0  5D                 	db	93	;']'
  1250  007BF1  2E                 	db	46
  1251  007BF2  0D                 	db	13
  1252  007BF3  0A                 	db	10
  1253  007BF4  00                 	db	0
  1254  007BF5                     STR_33:
  1255                           
  1256                           ; BSR set to: 1
  1257  007BF5  24                 	db	36
  1258  007BF6  52                 	db	82	;'R'
  1259  007BF7  58                 	db	88	;'X'
  1260  007BF8  20                 	db	32
  1261  007BF9  3C                 	db	60	;'<'
  1262  007BFA  58                 	db	88	;'X'
  1263  007BFB  3E                 	db	62	;'>'
  1264  007BFC  3C                 	db	60	;'<'
  1265  007BFD  63                 	db	99	;'c'
  1266  007BFE  72                 	db	114	;'r'
  1267  007BFF  3E                 	db	62	;'>'
  1268  007C00  20                 	db	32
  1269  007C01  20                 	db	32
  1270  007C02  20                 	db	32
  1271  007C03  20                 	db	32
  1272  007C04  20                 	db	32
  1273  007C05  20                 	db	32
  1274  007C06  54                 	db	84	;'T'
  1275  007C07  75                 	db	117	;'u'
  1276  007C08  72                 	db	114	;'r'
  1277  007C09  6E                 	db	110	;'n'
  1278  007C0A  20                 	db	32
  1279  007C0B  6F                 	db	111	;'o'
  1280  007C0C  6E                 	db	110	;'n'
  1281  007C0D  5B                 	db	91	;'['
  1282  007C0E  31                 	db	49	;'1'
  1283  007C0F  5D                 	db	93	;']'
  1284  007C10  20                 	db	32
  1285  007C11  2F                 	db	47
  1286  007C12  20                 	db	32
  1287  007C13  6F                 	db	111	;'o'
  1288  007C14  66                 	db	102	;'f'
  1289  007C15  66                 	db	102	;'f'
  1290  007C16  5B                 	db	91	;'['
  1291  007C17  30                 	db	48	;'0'
  1292  007C18  5D                 	db	93	;']'
  1293  007C19  20                 	db	32
  1294  007C1A  72                 	db	114	;'r'
  1295  007C1B  65                 	db	101	;'e'
  1296  007C1C  63                 	db	99	;'c'
  1297  007C1D  65                 	db	101	;'e'
  1298  007C1E  69                 	db	105	;'i'
  1299  007C1F  76                 	db	118	;'v'
  1300  007C20  65                 	db	101	;'e'
  1301  007C21  20                 	db	32
  1302  007C22  61                 	db	97	;'a'
  1303  007C23  74                 	db	116	;'t'
  1304  007C24  20                 	db	32
  1305  007C25  52                 	db	82	;'R'
  1306  007C26  58                 	db	88	;'X'
  1307  007C27  20                 	db	32
  1308  007C28  73                 	db	115	;'s'
  1309  007C29  79                 	db	121	;'y'
  1310  007C2A  73                 	db	115	;'s'
  1311  007C2B  74                 	db	116	;'t'
  1312  007C2C  65                 	db	101	;'e'
  1313  007C2D  6D                 	db	109	;'m'
  1314  007C2E  2E                 	db	46
  1315  007C2F  0D                 	db	13
  1316  007C30  0A                 	db	10
  1317  007C31  00                 	db	0
  1318  007C32                     STR_47:
  1319                           
  1320                           ; BSR set to: 1
  1321  007C32  52                 	db	82	;'R'
  1322  007C33  58                 	db	88	;'X'
  1323  007C34  20                 	db	32
  1324  007C35  53                 	db	83	;'S'
  1325  007C36  59                 	db	89	;'Y'
  1326  007C37  4E                 	db	78	;'N'
  1327  007C38  54                 	db	84	;'T'
  1328  007C39  48                 	db	72	;'H'
  1329  007C3A  20                 	db	32
  1330  007C3B  28                 	db	40
  1331  007C3C  50                 	db	80	;'P'
  1332  007C3D  4C                 	db	76	;'L'
  1333  007C3E  4C                 	db	76	;'L'
  1334  007C3F  29                 	db	41
  1335  007C40  20                 	db	32
  1336  007C41  4C                 	db	76	;'L'
  1337  007C42  6F                 	db	111	;'o'
  1338  007C43  63                 	db	99	;'c'
  1339  007C44  6B                 	db	107	;'k'
  1340  007C45  20                 	db	32
  1341  007C46  69                 	db	105	;'i'
  1342  007C47  6E                 	db	110	;'n'
  1343  007C48  64                 	db	100	;'d'
  1344  007C49  69                 	db	105	;'i'
  1345  007C4A  63                 	db	99	;'c'
  1346  007C4B  61                 	db	97	;'a'
  1347  007C4C  74                 	db	116	;'t'
  1348  007C4D  69                 	db	105	;'i'
  1349  007C4E  6F                 	db	111	;'o'
  1350  007C4F  6E                 	db	110	;'n'
  1351  007C50  20                 	db	32
  1352  007C51  30                 	db	48	;'0'
  1353  007C52  3A                 	db	58	;':'
  1354  007C53  20                 	db	32
  1355  007C54  6E                 	db	110	;'n'
  1356  007C55  6F                 	db	111	;'o'
  1357  007C56  74                 	db	116	;'t'
  1358  007C57  20                 	db	32
  1359  007C58  6C                 	db	108	;'l'
  1360  007C59  6F                 	db	111	;'o'
  1361  007C5A  63                 	db	99	;'c'
  1362  007C5B  6B                 	db	107	;'k'
  1363  007C5C  65                 	db	101	;'e'
  1364  007C5D  64                 	db	100	;'d'
  1365  007C5E  20                 	db	32
  1366  007C5F  31                 	db	49	;'1'
  1367  007C60  3A                 	db	58	;':'
  1368  007C61  20                 	db	32
  1369  007C62  6C                 	db	108	;'l'
  1370  007C63  6F                 	db	111	;'o'
  1371  007C64  63                 	db	99	;'c'
  1372  007C65  6B                 	db	107	;'k'
  1373  007C66  65                 	db	101	;'e'
  1374  007C67  64                 	db	100	;'d'
  1375  007C68  25                 	db	37
  1376  007C69  64                 	db	100	;'d'
  1377  007C6A  0A                 	db	10
  1378  007C6B  0D                 	db	13
  1379  007C6C  00                 	db	0
  1380  007C6D                     STR_38:
  1381                           
  1382                           ; BSR set to: 1
  1383  007C6D  24                 	db	36
  1384  007C6E  53                 	db	83	;'S'
  1385  007C6F  42                 	db	66	;'B'
  1386  007C70  54                 	db	84	;'T'
  1387  007C71  20                 	db	32
  1388  007C72  3C                 	db	60	;'<'
  1389  007C73  58                 	db	88	;'X'
  1390  007C74  58                 	db	88	;'X'
  1391  007C75  3E                 	db	62	;'>'
  1392  007C76  3C                 	db	60	;'<'
  1393  007C77  63                 	db	99	;'c'
  1394  007C78  72                 	db	114	;'r'
  1395  007C79  3E                 	db	62	;'>'
  1396  007C7A  20                 	db	32
  1397  007C7B  20                 	db	32
  1398  007C7C  20                 	db	32
  1399  007C7D  20                 	db	32
  1400  007C7E  53                 	db	83	;'S'
  1401  007C7F  65                 	db	101	;'e'
  1402  007C80  74                 	db	116	;'t'
  1403  007C81  20                 	db	32
  1404  007C82  55                 	db	85	;'U'
  1405  007C83  41                 	db	65	;'A'
  1406  007C84  52                 	db	82	;'R'
  1407  007C85  54                 	db	84	;'T'
  1408  007C86  20                 	db	32
  1409  007C87  72                 	db	114	;'r'
  1410  007C88  65                 	db	101	;'e'
  1411  007C89  66                 	db	102	;'f'
  1412  007C8A  72                 	db	114	;'r'
  1413  007C8B  65                 	db	101	;'e'
  1414  007C8C  73                 	db	115	;'s'
  1415  007C8D  68                 	db	104	;'h'
  1416  007C8E  20                 	db	32
  1417  007C8F  72                 	db	114	;'r'
  1418  007C90  61                 	db	97	;'a'
  1419  007C91  74                 	db	116	;'t'
  1420  007C92  65                 	db	101	;'e'
  1421  007C93  20                 	db	32
  1422  007C94  28                 	db	40
  1423  007C95  31                 	db	49	;'1'
  1424  007C96  2D                 	db	45
  1425  007C97  32                 	db	50	;'2'
  1426  007C98  30                 	db	48	;'0'
  1427  007C99  29                 	db	41
  1428  007C9A  5B                 	db	91	;'['
  1429  007C9B  48                 	db	72	;'H'
  1430  007C9C  7A                 	db	122	;'z'
  1431  007C9D  5D                 	db	93	;']'
  1432  007C9E  2E                 	db	46
  1433  007C9F  0D                 	db	13
  1434  007CA0  0A                 	db	10
  1435  007CA1  00                 	db	0
  1436  007CA2                     STR_37:
  1437                           
  1438                           ; BSR set to: 1
  1439  007CA2  24                 	db	36
  1440  007CA3  53                 	db	83	;'S'
  1441  007CA4  48                 	db	72	;'H'
  1442  007CA5  20                 	db	32
  1443  007CA6  3C                 	db	60	;'<'
  1444  007CA7  63                 	db	99	;'c'
  1445  007CA8  72                 	db	114	;'r'
  1446  007CA9  3E                 	db	62	;'>'
  1447  007CAA  20                 	db	32
  1448  007CAB  20                 	db	32
  1449  007CAC  20                 	db	32
  1450  007CAD  20                 	db	32
  1451  007CAE  20                 	db	32
  1452  007CAF  20                 	db	32
  1453  007CB0  20                 	db	32
  1454  007CB1  20                 	db	32
  1455  007CB2  20                 	db	32
  1456  007CB3  50                 	db	80	;'P'
  1457  007CB4  72                 	db	114	;'r'
  1458  007CB5  69                 	db	105	;'i'
  1459  007CB6  6E                 	db	110	;'n'
  1460  007CB7  74                 	db	116	;'t'
  1461  007CB8  20                 	db	32
  1462  007CB9  73                 	db	115	;'s'
  1463  007CBA  79                 	db	121	;'y'
  1464  007CBB  73                 	db	115	;'s'
  1465  007CBC  74                 	db	116	;'t'
  1466  007CBD  65                 	db	101	;'e'
  1467  007CBE  6D                 	db	109	;'m'
  1468  007CBF  20                 	db	32
  1469  007CC0  68                 	db	104	;'h'
  1470  007CC1  65                 	db	101	;'e'
  1471  007CC2  6C                 	db	108	;'l'
  1472  007CC3  70                 	db	112	;'p'
  1473  007CC4  20                 	db	32
  1474  007CC5  6D                 	db	109	;'m'
  1475  007CC6  65                 	db	101	;'e'
  1476  007CC7  73                 	db	115	;'s'
  1477  007CC8  73                 	db	115	;'s'
  1478  007CC9  61                 	db	97	;'a'
  1479  007CCA  67                 	db	103	;'g'
  1480  007CCB  65                 	db	101	;'e'
  1481  007CCC  2E                 	db	46
  1482  007CCD  0D                 	db	13
  1483  007CCE  0A                 	db	10
  1484  007CCF  00                 	db	0
  1485  007CD0                     STR_26:
  1486                           
  1487                           ; BSR set to: 1
  1488  007CD0  24                 	db	36
  1489  007CD1  54                 	db	84	;'T'
  1490  007CD2  51                 	db	81	;'Q'
  1491  007CD3  20                 	db	32
  1492  007CD4  3C                 	db	60	;'<'
  1493  007CD5  63                 	db	99	;'c'
  1494  007CD6  72                 	db	114	;'r'
  1495  007CD7  3E                 	db	62	;'>'
  1496  007CD8  20                 	db	32
  1497  007CD9  20                 	db	32
  1498  007CDA  20                 	db	32
  1499  007CDB  20                 	db	32
  1500  007CDC  20                 	db	32
  1501  007CDD  20                 	db	32
  1502  007CDE  20                 	db	32
  1503  007CDF  20                 	db	32
  1504  007CE0  20                 	db	32
  1505  007CE1  47                 	db	71	;'G'
  1506  007CE2  65                 	db	101	;'e'
  1507  007CE3  74                 	db	116	;'t'
  1508  007CE4  20                 	db	32
  1509  007CE5  73                 	db	115	;'s'
  1510  007CE6  74                 	db	116	;'t'
  1511  007CE7  61                 	db	97	;'a'
  1512  007CE8  74                 	db	116	;'t'
  1513  007CE9  75                 	db	117	;'u'
  1514  007CEA  73                 	db	115	;'s'
  1515  007CEB  20                 	db	32
  1516  007CEC  66                 	db	102	;'f'
  1517  007CED  72                 	db	114	;'r'
  1518  007CEE  6F                 	db	111	;'o'
  1519  007CEF  6D                 	db	109	;'m'
  1520  007CF0  20                 	db	32
  1521  007CF1  54                 	db	84	;'T'
  1522  007CF2  58                 	db	88	;'X'
  1523  007CF3  20                 	db	32
  1524  007CF4  73                 	db	115	;'s'
  1525  007CF5  79                 	db	121	;'y'
  1526  007CF6  73                 	db	115	;'s'
  1527  007CF7  74                 	db	116	;'t'
  1528  007CF8  65                 	db	101	;'e'
  1529  007CF9  6D                 	db	109	;'m'
  1530  007CFA  2E                 	db	46
  1531  007CFB  0D                 	db	13
  1532  007CFC  0A                 	db	10
  1533  007CFD  00                 	db	0
  1534  007CFE                     STR_31:
  1535                           
  1536                           ; BSR set to: 1
  1537  007CFE  24                 	db	36
  1538  007CFF  52                 	db	82	;'R'
  1539  007D00  51                 	db	81	;'Q'
  1540  007D01  20                 	db	32
  1541  007D02  3C                 	db	60	;'<'
  1542  007D03  63                 	db	99	;'c'
  1543  007D04  72                 	db	114	;'r'
  1544  007D05  3E                 	db	62	;'>'
  1545  007D06  20                 	db	32
  1546  007D07  20                 	db	32
  1547  007D08  20                 	db	32
  1548  007D09  20                 	db	32
  1549  007D0A  20                 	db	32
  1550  007D0B  20                 	db	32
  1551  007D0C  20                 	db	32
  1552  007D0D  20                 	db	32
  1553  007D0E  20                 	db	32
  1554  007D0F  47                 	db	71	;'G'
  1555  007D10  65                 	db	101	;'e'
  1556  007D11  74                 	db	116	;'t'
  1557  007D12  20                 	db	32
  1558  007D13  73                 	db	115	;'s'
  1559  007D14  74                 	db	116	;'t'
  1560  007D15  61                 	db	97	;'a'
  1561  007D16  74                 	db	116	;'t'
  1562  007D17  75                 	db	117	;'u'
  1563  007D18  73                 	db	115	;'s'
  1564  007D19  20                 	db	32
  1565  007D1A  66                 	db	102	;'f'
  1566  007D1B  72                 	db	114	;'r'
  1567  007D1C  6F                 	db	111	;'o'
  1568  007D1D  6D                 	db	109	;'m'
  1569  007D1E  20                 	db	32
  1570  007D1F  52                 	db	82	;'R'
  1571  007D20  58                 	db	88	;'X'
  1572  007D21  20                 	db	32
  1573  007D22  73                 	db	115	;'s'
  1574  007D23  79                 	db	121	;'y'
  1575  007D24  73                 	db	115	;'s'
  1576  007D25  74                 	db	116	;'t'
  1577  007D26  65                 	db	101	;'e'
  1578  007D27  6D                 	db	109	;'m'
  1579  007D28  0D                 	db	13
  1580  007D29  0A                 	db	10
  1581  007D2A  00                 	db	0
  1582  007D2B                     STR_40:
  1583                           
  1584                           ; BSR set to: 1
  1585  007D2B  24                 	db	36
  1586  007D2C  53                 	db	83	;'S'
  1587  007D2D  51                 	db	81	;'Q'
  1588  007D2E  20                 	db	32
  1589  007D2F  3C                 	db	60	;'<'
  1590  007D30  58                 	db	88	;'X'
  1591  007D31  3E                 	db	62	;'>'
  1592  007D32  3C                 	db	60	;'<'
  1593  007D33  63                 	db	99	;'c'
  1594  007D34  72                 	db	114	;'r'
  1595  007D35  3E                 	db	62	;'>'
  1596  007D36  20                 	db	32
  1597  007D37  20                 	db	32
  1598  007D38  20                 	db	32
  1599  007D39  20                 	db	32
  1600  007D3A  20                 	db	32
  1601  007D3B  20                 	db	32
  1602  007D3C  47                 	db	71	;'G'
  1603  007D3D  65                 	db	101	;'e'
  1604  007D3E  74                 	db	116	;'t'
  1605  007D3F  20                 	db	32
  1606  007D40  73                 	db	115	;'s'
  1607  007D41  79                 	db	121	;'y'
  1608  007D42  73                 	db	115	;'s'
  1609  007D43  74                 	db	116	;'t'
  1610  007D44  65                 	db	101	;'e'
  1611  007D45  6D                 	db	109	;'m'
  1612  007D46  20                 	db	32
  1613  007D47  73                 	db	115	;'s'
  1614  007D48  74                 	db	116	;'t'
  1615  007D49  61                 	db	97	;'a'
  1616  007D4A  74                 	db	116	;'t'
  1617  007D4B  75                 	db	117	;'u'
  1618  007D4C  73                 	db	115	;'s'
  1619  007D4D  2E                 	db	46
  1620  007D4E  0D                 	db	13
  1621  007D4F  0A                 	db	10
  1622  007D50  00                 	db	0
  1623  007D51                     STR_41:
  1624                           
  1625                           ; BSR set to: 1
  1626  007D51  24                 	db	36
  1627  007D52  53                 	db	83	;'S'
  1628  007D53  4C                 	db	76	;'L'
  1629  007D54  20                 	db	32
  1630  007D55  3C                 	db	60	;'<'
  1631  007D56  63                 	db	99	;'c'
  1632  007D57  72                 	db	114	;'r'
  1633  007D58  3E                 	db	62	;'>'
  1634  007D59  20                 	db	32
  1635  007D5A  20                 	db	32
  1636  007D5B  20                 	db	32
  1637  007D5C  20                 	db	32
  1638  007D5D  20                 	db	32
  1639  007D5E  20                 	db	32
  1640  007D5F  20                 	db	32
  1641  007D60  20                 	db	32
  1642  007D61  20                 	db	32
  1643  007D62  54                 	db	84	;'T'
  1644  007D63  65                 	db	101	;'e'
  1645  007D64  73                 	db	115	;'s'
  1646  007D65  74                 	db	116	;'t'
  1647  007D66  20                 	db	32
  1648  007D67  73                 	db	115	;'s'
  1649  007D68  79                 	db	121	;'y'
  1650  007D69  73                 	db	115	;'s'
  1651  007D6A  74                 	db	116	;'t'
  1652  007D6B  65                 	db	101	;'e'
  1653  007D6C  6D                 	db	109	;'m'
  1654  007D6D  20                 	db	32
  1655  007D6E  4C                 	db	76	;'L'
  1656  007D6F  45                 	db	69	;'E'
  1657  007D70  44                 	db	68	;'D'
  1658  007D71  73                 	db	115	;'s'
  1659  007D72  2E                 	db	46
  1660  007D73  0D                 	db	13
  1661  007D74  0A                 	db	10
  1662  007D75  00                 	db	0
  1663  007D76                     STR_59:
  1664                           
  1665                           ; BSR set to: 1
  1666  007D76  54                 	db	84	;'T'
  1667  007D77  58                 	db	88	;'X'
  1668  007D78  20                 	db	32
  1669  007D79  53                 	db	83	;'S'
  1670  007D7A  59                 	db	89	;'Y'
  1671  007D7B  4E                 	db	78	;'N'
  1672  007D7C  54                 	db	84	;'T'
  1673  007D7D  48                 	db	72	;'H'
  1674  007D7E  20                 	db	32
  1675  007D7F  28                 	db	40
  1676  007D80  50                 	db	80	;'P'
  1677  007D81  4C                 	db	76	;'L'
  1678  007D82  4C                 	db	76	;'L'
  1679  007D83  29                 	db	41
  1680  007D84  20                 	db	32
  1681  007D85  4C                 	db	76	;'L'
  1682  007D86  6F                 	db	111	;'o'
  1683  007D87  63                 	db	99	;'c'
  1684  007D88  6B                 	db	107	;'k'
  1685  007D89  20                 	db	32
  1686  007D8A  69                 	db	105	;'i'
  1687  007D8B  6E                 	db	110	;'n'
  1688  007D8C  64                 	db	100	;'d'
  1689  007D8D  69                 	db	105	;'i'
  1690  007D8E  63                 	db	99	;'c'
  1691  007D8F  61                 	db	97	;'a'
  1692  007D90  74                 	db	116	;'t'
  1693  007D91  69                 	db	105	;'i'
  1694  007D92  6F                 	db	111	;'o'
  1695  007D93  6E                 	db	110	;'n'
  1696  007D94  20                 	db	32
  1697  007D95  25                 	db	37
  1698  007D96  64                 	db	100	;'d'
  1699  007D97  0A                 	db	10
  1700  007D98  0D                 	db	13
  1701  007D99  00                 	db	0
  1702  007D9A                     STR_49:
  1703                           
  1704                           ; BSR set to: 1
  1705  007D9A  49                 	db	73	;'I'
  1706  007D9B  6E                 	db	110	;'n'
  1707  007D9C  70                 	db	112	;'p'
  1708  007D9D  75                 	db	117	;'u'
  1709  007D9E  74                 	db	116	;'t'
  1710  007D9F  20                 	db	32
  1711  007DA0  70                 	db	112	;'p'
  1712  007DA1  6F                 	db	111	;'o'
  1713  007DA2  77                 	db	119	;'w'
  1714  007DA3  65                 	db	101	;'e'
  1715  007DA4  72                 	db	114	;'r'
  1716  007DA5  20                 	db	32
  1717  007DA6  73                 	db	115	;'s'
  1718  007DA7  74                 	db	116	;'t'
  1719  007DA8  61                 	db	97	;'a'
  1720  007DA9  74                 	db	116	;'t'
  1721  007DAA  75                 	db	117	;'u'
  1722  007DAB  73                 	db	115	;'s'
  1723  007DAC  20                 	db	32
  1724  007DAD  30                 	db	48	;'0'
  1725  007DAE  3A                 	db	58	;':'
  1726  007DAF  20                 	db	32
  1727  007DB0  4F                 	db	79	;'O'
  1728  007DB1  46                 	db	70	;'F'
  1729  007DB2  46                 	db	70	;'F'
  1730  007DB3  20                 	db	32
  1731  007DB4  31                 	db	49	;'1'
  1732  007DB5  3A                 	db	58	;':'
  1733  007DB6  20                 	db	32
  1734  007DB7  4F                 	db	79	;'O'
  1735  007DB8  4E                 	db	78	;'N'
  1736  007DB9  25                 	db	37
  1737  007DBA  64                 	db	100	;'d'
  1738  007DBB  0A                 	db	10
  1739  007DBC  0D                 	db	13
  1740  007DBD  00                 	db	0
  1741  007DBE                     STR_6:
  1742                           
  1743                           ; BSR set to: 1
  1744  007DBE  52                 	db	82	;'R'
  1745  007DBF  58                 	db	88	;'X'
  1746  007DC0  20                 	db	32
  1747  007DC1  53                 	db	83	;'S'
  1748  007DC2  41                 	db	65	;'A'
  1749  007DC3  4D                 	db	77	;'M'
  1750  007DC4  50                 	db	80	;'P'
  1751  007DC5  4C                 	db	76	;'L'
  1752  007DC6  45                 	db	69	;'E'
  1753  007DC7  20                 	db	32
  1754  007DC8  43                 	db	67	;'C'
  1755  007DC9  48                 	db	72	;'H'
  1756  007DCA  41                 	db	65	;'A'
  1757  007DCB  4E                 	db	78	;'N'
  1758  007DCC  4E                 	db	78	;'N'
  1759  007DCD  45                 	db	69	;'E'
  1760  007DCE  4C                 	db	76	;'L'
  1761  007DCF  20                 	db	32
  1762  007DD0  52                 	db	82	;'R'
  1763  007DD1  58                 	db	88	;'X'
  1764  007DD2  2D                 	db	45
  1765  007DD3  41                 	db	65	;'A'
  1766  007DD4  44                 	db	68	;'D'
  1767  007DD5  43                 	db	67	;'C'
  1768  007DD6  5F                 	db	95	;'_'
  1769  007DD7  56                 	db	86	;'V'
  1770  007DD8  47                 	db	71	;'G'
  1771  007DD9  5F                 	db	95	;'_'
  1772  007DDA  4D                 	db	77	;'M'
  1773  007DDB  4F                 	db	79	;'O'
  1774  007DDC  4E                 	db	78	;'N'
  1775  007DDD  0A                 	db	10
  1776  007DDE  0D                 	db	13
  1777  007DDF  00                 	db	0
  1778  007DE0                     STR_2:
  1779                           
  1780                           ; BSR set to: 1
  1781  007DE0  54                 	db	84	;'T'
  1782  007DE1  58                 	db	88	;'X'
  1783  007DE2  20                 	db	32
  1784  007DE3  53                 	db	83	;'S'
  1785  007DE4  41                 	db	65	;'A'
  1786  007DE5  4D                 	db	77	;'M'
  1787  007DE6  50                 	db	80	;'P'
  1788  007DE7  4C                 	db	76	;'L'
  1789  007DE8  45                 	db	69	;'E'
  1790  007DE9  20                 	db	32
  1791  007DEA  43                 	db	67	;'C'
  1792  007DEB  48                 	db	72	;'H'
  1793  007DEC  41                 	db	65	;'A'
  1794  007DED  4E                 	db	78	;'N'
  1795  007DEE  4E                 	db	78	;'N'
  1796  007DEF  45                 	db	69	;'E'
  1797  007DF0  4C                 	db	76	;'L'
  1798  007DF1  3A                 	db	58	;':'
  1799  007DF2  20                 	db	32
  1800  007DF3  54                 	db	84	;'T'
  1801  007DF4  58                 	db	88	;'X'
  1802  007DF5  2D                 	db	45
  1803  007DF6  41                 	db	65	;'A'
  1804  007DF7  44                 	db	68	;'D'
  1805  007DF8  43                 	db	67	;'C'
  1806  007DF9  5F                 	db	95	;'_'
  1807  007DFA  52                 	db	82	;'R'
  1808  007DFB  52                 	db	82	;'R'
  1809  007DFC  45                 	db	69	;'E'
  1810  007DFD  56                 	db	86	;'V'
  1811  007DFE  0A                 	db	10
  1812  007DFF  0D                 	db	13
  1813  007E00  00                 	db	0
  1814  007E01                     STR_5:
  1815                           
  1816                           ; BSR set to: 1
  1817  007E01  52                 	db	82	;'R'
  1818  007E02  58                 	db	88	;'X'
  1819  007E03  20                 	db	32
  1820  007E04  53                 	db	83	;'S'
  1821  007E05  41                 	db	65	;'A'
  1822  007E06  4D                 	db	77	;'M'
  1823  007E07  50                 	db	80	;'P'
  1824  007E08  4C                 	db	76	;'L'
  1825  007E09  45                 	db	69	;'E'
  1826  007E0A  20                 	db	32
  1827  007E0B  43                 	db	67	;'C'
  1828  007E0C  48                 	db	72	;'H'
  1829  007E0D  41                 	db	65	;'A'
  1830  007E0E  4E                 	db	78	;'N'
  1831  007E0F  4E                 	db	78	;'N'
  1832  007E10  45                 	db	69	;'E'
  1833  007E11  4C                 	db	76	;'L'
  1834  007E12  20                 	db	32
  1835  007E13  52                 	db	82	;'R'
  1836  007E14  58                 	db	88	;'X'
  1837  007E15  2D                 	db	45
  1838  007E16  41                 	db	65	;'A'
  1839  007E17  44                 	db	68	;'D'
  1840  007E18  43                 	db	67	;'C'
  1841  007E19  5F                 	db	95	;'_'
  1842  007E1A  46                 	db	70	;'F'
  1843  007E1B  46                 	db	70	;'F'
  1844  007E1C  57                 	db	87	;'W'
  1845  007E1D  52                 	db	82	;'R'
  1846  007E1E  0A                 	db	10
  1847  007E1F  0D                 	db	13
  1848  007E20  00                 	db	0
  1849  007E21                     STR_14:
  1850                           
  1851                           ; BSR set to: 1
  1852  007E21  2A                 	db	42
  1853  007E22  2A                 	db	42
  1854  007E23  2A                 	db	42
  1855  007E24  2A                 	db	42
  1856  007E25  2A                 	db	42
  1857  007E26  2A                 	db	42
  1858  007E27  2A                 	db	42
  1859  007E28  2A                 	db	42
  1860  007E29  2A                 	db	42
  1861  007E2A  2A                 	db	42
  1862  007E2B  2A                 	db	42
  1863  007E2C  2A                 	db	42
  1864  007E2D  2A                 	db	42
  1865  007E2E  2A                 	db	42
  1866  007E2F  2A                 	db	42
  1867  007E30  2A                 	db	42
  1868  007E31  2A                 	db	42
  1869  007E32  2A                 	db	42
  1870  007E33  2A                 	db	42
  1871  007E34  2A                 	db	42
  1872  007E35  2A                 	db	42
  1873  007E36  2A                 	db	42
  1874  007E37  2A                 	db	42
  1875  007E38  2A                 	db	42
  1876  007E39  2A                 	db	42
  1877  007E3A  2A                 	db	42
  1878  007E3B  2A                 	db	42
  1879  007E3C  20                 	db	32
  1880  007E3D  0A                 	db	10
  1881  007E3E  0D                 	db	13
  1882  007E3F  00                 	db	0
  1883  007E40                     STR_36:
  1884                           
  1885                           ; BSR set to: 1
  1886  007E40  0A                 	db	10
  1887  007E41  0D                 	db	13
  1888  007E42  3C                 	db	60	;'<'
  1889  007E43  43                 	db	67	;'C'
  1890  007E44  6F                 	db	111	;'o'
  1891  007E45  6D                 	db	109	;'m'
  1892  007E46  6D                 	db	109	;'m'
  1893  007E47  6F                 	db	111	;'o'
  1894  007E48  6E                 	db	110	;'n'
  1895  007E49  20                 	db	32
  1896  007E4A  73                 	db	115	;'s'
  1897  007E4B  79                 	db	121	;'y'
  1898  007E4C  73                 	db	115	;'s'
  1899  007E4D  74                 	db	116	;'t'
  1900  007E4E  65                 	db	101	;'e'
  1901  007E4F  6D                 	db	109	;'m'
  1902  007E50  20                 	db	32
  1903  007E51  63                 	db	99	;'c'
  1904  007E52  6F                 	db	111	;'o'
  1905  007E53  6D                 	db	109	;'m'
  1906  007E54  6D                 	db	109	;'m'
  1907  007E55  61                 	db	97	;'a'
  1908  007E56  6E                 	db	110	;'n'
  1909  007E57  64                 	db	100	;'d'
  1910  007E58  73                 	db	115	;'s'
  1911  007E59  3E                 	db	62	;'>'
  1912  007E5A  0A                 	db	10
  1913  007E5B  0D                 	db	13
  1914  007E5C  00                 	db	0
  1915  007E5D                     STR_3:
  1916                           
  1917                           ; BSR set to: 1
  1918  007E5D  54                 	db	84	;'T'
  1919  007E5E  58                 	db	88	;'X'
  1920  007E5F  20                 	db	32
  1921  007E60  53                 	db	83	;'S'
  1922  007E61  41                 	db	65	;'A'
  1923  007E62  4D                 	db	77	;'M'
  1924  007E63  50                 	db	80	;'P'
  1925  007E64  4C                 	db	76	;'L'
  1926  007E65  45                 	db	69	;'E'
  1927  007E66  20                 	db	32
  1928  007E67  43                 	db	67	;'C'
  1929  007E68  48                 	db	72	;'H'
  1930  007E69  41                 	db	65	;'A'
  1931  007E6A  4E                 	db	78	;'N'
  1932  007E6B  4E                 	db	78	;'N'
  1933  007E6C  45                 	db	69	;'E'
  1934  007E6D  4C                 	db	76	;'L'
  1935  007E6E  20                 	db	32
  1936  007E6F  41                 	db	65	;'A'
  1937  007E70  44                 	db	68	;'D'
  1938  007E71  43                 	db	67	;'C'
  1939  007E72  5F                 	db	95	;'_'
  1940  007E73  54                 	db	84	;'T'
  1941  007E74  45                 	db	69	;'E'
  1942  007E75  4D                 	db	77	;'M'
  1943  007E76  50                 	db	80	;'P'
  1944  007E77  0A                 	db	10
  1945  007E78  0D                 	db	13
  1946  007E79  00                 	db	0
  1947  007E7A                     STR_29:
  1948                           
  1949                           ; BSR set to: 1
  1950  007E7A  0A                 	db	10
  1951  007E7B  0D                 	db	13
  1952  007E7C  3C                 	db	60	;'<'
  1953  007E7D  52                 	db	82	;'R'
  1954  007E7E  58                 	db	88	;'X'
  1955  007E7F  20                 	db	32
  1956  007E80  73                 	db	115	;'s'
  1957  007E81  79                 	db	121	;'y'
  1958  007E82  73                 	db	115	;'s'
  1959  007E83  74                 	db	116	;'t'
  1960  007E84  65                 	db	101	;'e'
  1961  007E85  6D                 	db	109	;'m'
  1962  007E86  20                 	db	32
  1963  007E87  63                 	db	99	;'c'
  1964  007E88  6F                 	db	111	;'o'
  1965  007E89  6D                 	db	109	;'m'
  1966  007E8A  6D                 	db	109	;'m'
  1967  007E8B  61                 	db	97	;'a'
  1968  007E8C  6E                 	db	110	;'n'
  1969  007E8D  64                 	db	100	;'d'
  1970  007E8E  73                 	db	115	;'s'
  1971  007E8F  3E                 	db	62	;'>'
  1972  007E90  0A                 	db	10
  1973  007E91  0D                 	db	13
  1974  007E92  00                 	db	0
  1975  007E93                     STR_48:
  1976                           
  1977                           ; BSR set to: 1
  1978  007E93  44                 	db	68	;'D'
  1979  007E94  65                 	db	101	;'e'
  1980  007E95  76                 	db	118	;'v'
  1981  007E96  69                 	db	105	;'i'
  1982  007E97  63                 	db	99	;'c'
  1983  007E98  65                 	db	101	;'e'
  1984  007E99  20                 	db	32
  1985  007E9A  54                 	db	84	;'T'
  1986  007E9B  65                 	db	101	;'e'
  1987  007E9C  6D                 	db	109	;'m'
  1988  007E9D  70                 	db	112	;'p'
  1989  007E9E  65                 	db	101	;'e'
  1990  007E9F  72                 	db	114	;'r'
  1991  007EA0  61                 	db	97	;'a'
  1992  007EA1  74                 	db	116	;'t'
  1993  007EA2  75                 	db	117	;'u'
  1994  007EA3  72                 	db	114	;'r'
  1995  007EA4  65                 	db	101	;'e'
  1996  007EA5  20                 	db	32
  1997  007EA6  25                 	db	37
  1998  007EA7  66                 	db	102	;'f'
  1999  007EA8  0A                 	db	10
  2000  007EA9  0D                 	db	13
  2001  007EAA  00                 	db	0
  2002  007EAB                     STR_50:
  2003                           
  2004                           ; BSR set to: 1
  2005  007EAB  52                 	db	82	;'R'
  2006  007EAC  58                 	db	88	;'X'
  2007  007EAD  20                 	db	32
  2008  007EAE  46                 	db	70	;'F'
  2009  007EAF  72                 	db	114	;'r'
  2010  007EB0  65                 	db	101	;'e'
  2011  007EB1  71                 	db	113	;'q'
  2012  007EB2  75                 	db	117	;'u'
  2013  007EB3  65                 	db	101	;'e'
  2014  007EB4  6E                 	db	110	;'n'
  2015  007EB5  63                 	db	99	;'c'
  2016  007EB6  79                 	db	121	;'y'
  2017  007EB7  20                 	db	32
  2018  007EB8  69                 	db	105	;'i'
  2019  007EB9  6E                 	db	110	;'n'
  2020  007EBA  20                 	db	32
  2021  007EBB  4D                 	db	77	;'M'
  2022  007EBC  48                 	db	72	;'H'
  2023  007EBD  7A                 	db	122	;'z'
  2024  007EBE  25                 	db	37
  2025  007EBF  66                 	db	102	;'f'
  2026  007EC0  0A                 	db	10
  2027  007EC1  0D                 	db	13
  2028  007EC2  00                 	db	0
  2029  007EC3                     STR_62:
  2030                           
  2031                           ; BSR set to: 1
  2032  007EC3  54                 	db	84	;'T'
  2033  007EC4  58                 	db	88	;'X'
  2034  007EC5  20                 	db	32
  2035  007EC6  46                 	db	70	;'F'
  2036  007EC7  72                 	db	114	;'r'
  2037  007EC8  65                 	db	101	;'e'
  2038  007EC9  71                 	db	113	;'q'
  2039  007ECA  75                 	db	117	;'u'
  2040  007ECB  65                 	db	101	;'e'
  2041  007ECC  6E                 	db	110	;'n'
  2042  007ECD  63                 	db	99	;'c'
  2043  007ECE  79                 	db	121	;'y'
  2044  007ECF  20                 	db	32
  2045  007ED0  69                 	db	105	;'i'
  2046  007ED1  6E                 	db	110	;'n'
  2047  007ED2  20                 	db	32
  2048  007ED3  4D                 	db	77	;'M'
  2049  007ED4  48                 	db	72	;'H'
  2050  007ED5  7A                 	db	122	;'z'
  2051  007ED6  25                 	db	37
  2052  007ED7  66                 	db	102	;'f'
  2053  007ED8  0A                 	db	10
  2054  007ED9  0D                 	db	13
  2055  007EDA  00                 	db	0
  2056  007EDB                     STR_23:
  2057                           
  2058                           ; BSR set to: 1
  2059  007EDB  3C                 	db	60	;'<'
  2060  007EDC  54                 	db	84	;'T'
  2061  007EDD  58                 	db	88	;'X'
  2062  007EDE  20                 	db	32
  2063  007EDF  73                 	db	115	;'s'
  2064  007EE0  79                 	db	121	;'y'
  2065  007EE1  73                 	db	115	;'s'
  2066  007EE2  74                 	db	116	;'t'
  2067  007EE3  65                 	db	101	;'e'
  2068  007EE4  6D                 	db	109	;'m'
  2069  007EE5  20                 	db	32
  2070  007EE6  63                 	db	99	;'c'
  2071  007EE7  6F                 	db	111	;'o'
  2072  007EE8  6D                 	db	109	;'m'
  2073  007EE9  6D                 	db	109	;'m'
  2074  007EEA  61                 	db	97	;'a'
  2075  007EEB  6E                 	db	110	;'n'
  2076  007EEC  64                 	db	100	;'d'
  2077  007EED  73                 	db	115	;'s'
  2078  007EEE  3E                 	db	62	;'>'
  2079  007EEF  0A                 	db	10
  2080  007EF0  0D                 	db	13
  2081  007EF1  00                 	db	0
  2082  007EF2                     STR_52:
  2083                           
  2084                           ; BSR set to: 1
  2085  007EF2  4C                 	db	76	;'L'
  2086  007EF3  69                 	db	105	;'i'
  2087  007EF4  67                 	db	103	;'g'
  2088  007EF5  68                 	db	104	;'h'
  2089  007EF6  74                 	db	116	;'t'
  2090  007EF7  20                 	db	32
  2091  007EF8  30                 	db	48	;'0'
  2092  007EF9  3A                 	db	58	;':'
  2093  007EFA  20                 	db	32
  2094  007EFB  4F                 	db	79	;'O'
  2095  007EFC  46                 	db	70	;'F'
  2096  007EFD  46                 	db	70	;'F'
  2097  007EFE  20                 	db	32
  2098  007EFF  31                 	db	49	;'1'
  2099  007F00  3A                 	db	58	;':'
  2100  007F01  20                 	db	32
  2101  007F02  4F                 	db	79	;'O'
  2102  007F03  4E                 	db	78	;'N'
  2103  007F04  25                 	db	37
  2104  007F05  64                 	db	100	;'d'
  2105  007F06  0A                 	db	10
  2106  007F07  0D                 	db	13
  2107  007F08  00                 	db	0
  2108  007F09                     STR_46:
  2109                           
  2110                           ; BSR set to: 1
  2111  007F09  2A                 	db	42
  2112  007F0A  2A                 	db	42
  2113  007F0B  2A                 	db	42
  2114  007F0C  2A                 	db	42
  2115  007F0D  2A                 	db	42
  2116  007F0E  2A                 	db	42
  2117  007F0F  2A                 	db	42
  2118  007F10  2A                 	db	42
  2119  007F11  2A                 	db	42
  2120  007F12  2A                 	db	42
  2121  007F13  2A                 	db	42
  2122  007F14  2A                 	db	42
  2123  007F15  2A                 	db	42
  2124  007F16  2A                 	db	42
  2125  007F17  2A                 	db	42
  2126  007F18  2A                 	db	42
  2127  007F19  2A                 	db	42
  2128  007F1A  2A                 	db	42
  2129  007F1B  2A                 	db	42
  2130  007F1C  0A                 	db	10
  2131  007F1D  0D                 	db	13
  2132  007F1E  00                 	db	0
  2133  007F1F                     STR_55:
  2134                           
  2135                           ; BSR set to: 1
  2136  007F1F  53                 	db	83	;'S'
  2137  007F20  4F                 	db	79	;'O'
  2138  007F21  46                 	db	70	;'F'
  2139  007F22  54                 	db	84	;'T'
  2140  007F23  57                 	db	87	;'W'
  2141  007F24  41                 	db	65	;'A'
  2142  007F25  52                 	db	82	;'R'
  2143  007F26  45                 	db	69	;'E'
  2144  007F27  20                 	db	32
  2145  007F28  56                 	db	86	;'V'
  2146  007F29  45                 	db	69	;'E'
  2147  007F2A  52                 	db	82	;'R'
  2148  007F2B  53                 	db	83	;'S'
  2149  007F2C  49                 	db	73	;'I'
  2150  007F2D  4F                 	db	79	;'O'
  2151  007F2E  4E                 	db	78	;'N'
  2152  007F2F  20                 	db	32
  2153  007F30  25                 	db	37
  2154  007F31  73                 	db	115	;'s'
  2155  007F32  0A                 	db	10
  2156  007F33  0D                 	db	13
  2157  007F34  00                 	db	0
  2158  007F35                     STR_15:
  2159                           
  2160                           ; BSR set to: 1
  2161  007F35  46                 	db	70	;'F'
  2162  007F36  41                 	db	65	;'A'
  2163  007F37  53                 	db	83	;'S'
  2164  007F38  54                 	db	84	;'T'
  2165  007F39  20                 	db	32
  2166  007F3A  4C                 	db	76	;'L'
  2167  007F3B  49                 	db	73	;'I'
  2168  007F3C  4E                 	db	78	;'N'
  2169  007F3D  4B                 	db	75	;'K'
  2170  007F3E  20                 	db	32
  2171  007F3F  53                 	db	83	;'S'
  2172  007F40  59                 	db	89	;'Y'
  2173  007F41  53                 	db	83	;'S'
  2174  007F42  54                 	db	84	;'T'
  2175  007F43  45                 	db	69	;'E'
  2176  007F44  4D                 	db	77	;'M'
  2177  007F45  20                 	db	32
  2178  007F46  0A                 	db	10
  2179  007F47  0D                 	db	13
  2180  007F48  00                 	db	0
  2181  007F49                     STR_20:
  2182                           
  2183                           ; BSR set to: 1
  2184  007F49  43                 	db	67	;'C'
  2185  007F4A  6F                 	db	111	;'o'
  2186  007F4B  6D                 	db	109	;'m'
  2187  007F4C  70                 	db	112	;'p'
  2188  007F4D  69                 	db	105	;'i'
  2189  007F4E  6C                 	db	108	;'l'
  2190  007F4F  65                 	db	101	;'e'
  2191  007F50  20                 	db	32
  2192  007F51  74                 	db	116	;'t'
  2193  007F52  69                 	db	105	;'i'
  2194  007F53  6D                 	db	109	;'m'
  2195  007F54  65                 	db	101	;'e'
  2196  007F55  3A                 	db	58	;':'
  2197  007F56  20                 	db	32
  2198  007F57  25                 	db	37
  2199  007F58  73                 	db	115	;'s'
  2200  007F59  20                 	db	32
  2201  007F5A  0A                 	db	10
  2202  007F5B  0D                 	db	13
  2203  007F5C  00                 	db	0
  2204  007F5D                     STR_18:
  2205                           
  2206                           ; BSR set to: 1
  2207  007F5D  43                 	db	67	;'C'
  2208  007F5E  6F                 	db	111	;'o'
  2209  007F5F  6D                 	db	109	;'m'
  2210  007F60  70                 	db	112	;'p'
  2211  007F61  69                 	db	105	;'i'
  2212  007F62  6C                 	db	108	;'l'
  2213  007F63  65                 	db	101	;'e'
  2214  007F64  20                 	db	32
  2215  007F65  64                 	db	100	;'d'
  2216  007F66  61                 	db	97	;'a'
  2217  007F67  74                 	db	116	;'t'
  2218  007F68  65                 	db	101	;'e'
  2219  007F69  3A                 	db	58	;':'
  2220  007F6A  20                 	db	32
  2221  007F6B  25                 	db	37
  2222  007F6C  73                 	db	115	;'s'
  2223  007F6D  20                 	db	32
  2224  007F6E  0A                 	db	10
  2225  007F6F  0D                 	db	13
  2226  007F70  00                 	db	0
  2227  007F71                     STR_16:
  2228                           
  2229                           ; BSR set to: 1
  2230  007F71  53                 	db	83	;'S'
  2231  007F72  57                 	db	87	;'W'
  2232  007F73  20                 	db	32
  2233  007F74  56                 	db	86	;'V'
  2234  007F75  45                 	db	69	;'E'
  2235  007F76  53                 	db	83	;'S'
  2236  007F77  52                 	db	82	;'R'
  2237  007F78  49                 	db	73	;'I'
  2238  007F79  4F                 	db	79	;'O'
  2239  007F7A  4E                 	db	78	;'N'
  2240  007F7B  3A                 	db	58	;':'
  2241  007F7C  20                 	db	32
  2242  007F7D  25                 	db	37
  2243  007F7E  73                 	db	115	;'s'
  2244  007F7F  20                 	db	32
  2245  007F80  0A                 	db	10
  2246  007F81  0D                 	db	13
  2247  007F82  00                 	db	0
  2248  007F83                     STR_56:
  2249                           
  2250                           ; BSR set to: 1
  2251  007F83  55                 	db	85	;'U'
  2252  007F84  4E                 	db	78	;'N'
  2253  007F85  49                 	db	73	;'I'
  2254  007F86  54                 	db	84	;'T'
  2255  007F87  20                 	db	32
  2256  007F88  54                 	db	84	;'T'
  2257  007F89  59                 	db	89	;'Y'
  2258  007F8A  50                 	db	80	;'P'
  2259  007F8B  45                 	db	69	;'E'
  2260  007F8C  20                 	db	32
  2261  007F8D  25                 	db	37
  2262  007F8E  64                 	db	100	;'d'
  2263  007F8F  0A                 	db	10
  2264  007F90  0D                 	db	13
  2265  007F91  00                 	db	0
  2266  007F92                     STR_54:
  2267                           
  2268                           ; BSR set to: 1
  2269  007F92  55                 	db	85	;'U'
  2270  007F93  4E                 	db	78	;'N'
  2271  007F94  49                 	db	73	;'I'
  2272  007F95  54                 	db	84	;'T'
  2273  007F96  20                 	db	32
  2274  007F97  44                 	db	68	;'D'
  2275  007F98  43                 	db	67	;'C'
  2276  007F99  20                 	db	32
  2277  007F9A  25                 	db	37
  2278  007F9B  64                 	db	100	;'d'
  2279  007F9C  0A                 	db	10
  2280  007F9D  0D                 	db	13
  2281  007F9E  00                 	db	0
  2282  007F9F                     STR_53:
  2283                           
  2284                           ; BSR set to: 1
  2285  007F9F  55                 	db	85	;'U'
  2286  007FA0  4E                 	db	78	;'N'
  2287  007FA1  49                 	db	73	;'I'
  2288  007FA2  54                 	db	84	;'T'
  2289  007FA3  20                 	db	32
  2290  007FA4  49                 	db	73	;'I'
  2291  007FA5  44                 	db	68	;'D'
  2292  007FA6  20                 	db	32
  2293  007FA7  25                 	db	37
  2294  007FA8  64                 	db	100	;'d'
  2295  007FA9  0A                 	db	10
  2296  007FAA  0D                 	db	13
  2297  007FAB  00                 	db	0
  2298  007FAC                     STR_19:
  2299                           
  2300                           ; BSR set to: 1
  2301  007FAC  4D                 	db	77	;'M'
  2302  007FAD  61                 	db	97	;'a'
  2303  007FAE  72                 	db	114	;'r'
  2304  007FAF  20                 	db	32
  2305  007FB0  32                 	db	50	;'2'
  2306  007FB1  38                 	db	56	;'8'
  2307  007FB2  20                 	db	32
  2308  007FB3  32                 	db	50	;'2'
  2309  007FB4  30                 	db	48	;'0'
  2310  007FB5  31                 	db	49	;'1'
  2311  007FB6  38                 	db	56	;'8'
  2312  007FB7  00                 	db	0
  2313  007FB8                     STR_10:
  2314                           
  2315                           ; BSR set to: 1
  2316  007FB8  4E                 	db	78	;'N'
  2317  007FB9  4F                 	db	79	;'O'
  2318  007FBA  54                 	db	84	;'T'
  2319  007FBB  20                 	db	32
  2320  007FBC  4F                 	db	79	;'O'
  2321  007FBD  2E                 	db	46
  2322  007FBE  4B                 	db	75	;'K'
  2323  007FBF  20                 	db	32
  2324  007FC0  0A                 	db	10
  2325  007FC1  0D                 	db	13
  2326  007FC2  00                 	db	0
  2327  007FC3                     STR_51:
  2328                           
  2329                           ; BSR set to: 1
  2330  007FC3  52                 	db	82	;'R'
  2331  007FC4  53                 	db	83	;'S'
  2332  007FC5  53                 	db	83	;'S'
  2333  007FC6  49                 	db	73	;'I'
  2334  007FC7  20                 	db	32
  2335  007FC8  25                 	db	37
  2336  007FC9  64                 	db	100	;'d'
  2337  007FCA  0A                 	db	10
  2338  007FCB  0D                 	db	13
  2339  007FCC  00                 	db	0
  2340  007FCD                     STR_1:
  2341                           
  2342                           ; BSR set to: 1
  2343  007FCD  4E                 	db	78	;'N'
  2344  007FCE  4F                 	db	79	;'O'
  2345  007FCF  54                 	db	84	;'T'
  2346  007FD0  20                 	db	32
  2347  007FD1  4F                 	db	79	;'O'
  2348  007FD2  4B                 	db	75	;'K'
  2349  007FD3  20                 	db	32
  2350  007FD4  0A                 	db	10
  2351  007FD5  0D                 	db	13
  2352  007FD6  00                 	db	0
  2353  007FD7                     STR_21:
  2354                           
  2355                           ; BSR set to: 1
  2356  007FD7  31                 	db	49	;'1'
  2357  007FD8  33                 	db	51	;'3'
  2358  007FD9  3A                 	db	58	;':'
  2359  007FDA  30                 	db	48	;'0'
  2360  007FDB  34                 	db	52	;'4'
  2361  007FDC  3A                 	db	58	;':'
  2362  007FDD  31                 	db	49	;'1'
  2363  007FDE  37                 	db	55	;'7'
  2364  007FDF  00                 	db	0
  2365  007FE0                     STR_9:
  2366                           
  2367                           ; BSR set to: 1
  2368  007FE0  0A                 	db	10
  2369  007FE1  0D                 	db	13
  2370  007FE2  20                 	db	32
  2371  007FE3  4F                 	db	79	;'O'
  2372  007FE4  4B                 	db	75	;'K'
  2373  007FE5  20                 	db	32
  2374  007FE6  0A                 	db	10
  2375  007FE7  0D                 	db	13
  2376  007FE8  00                 	db	0
  2377  007FE9                     STR_70:
  2378                           
  2379                           ; BSR set to: 1
  2380  007FE9  28                 	db	40
  2381  007FEA  6E                 	db	110	;'n'
  2382  007FEB  75                 	db	117	;'u'
  2383  007FEC  6C                 	db	108	;'l'
  2384  007FED  6C                 	db	108	;'l'
  2385  007FEE  29                 	db	41
  2386  007FEF  00                 	db	0
  2387  007FF0                     STR_17:
  2388                           
  2389                           ; BSR set to: 1
  2390  007FF0  31                 	db	49	;'1'
  2391  007FF1  5F                 	db	95	;'_'
  2392  007FF2  30                 	db	48	;'0'
  2393  007FF3  30                 	db	48	;'0'
  2394  007FF4  32                 	db	50	;'2'
  2395  007FF5  00                 	db	0
  2396  007FF6                     STR_8:
  2397                           
  2398                           ; BSR set to: 1
  2399  007FF6  25                 	db	37
  2400  007FF7  64                 	db	100	;'d'
  2401  007FF8  20                 	db	32
  2402  007FF9  09                 	db	9
  2403  007FFA  00                 	db	0
  2404  007FFB                     
  2405                           ; BSR set to: 1
  2406  007FFB  25                 	db	37
  2407  007FFC  64                 	db	100	;'d'
  2408  007FFD  09                 	db	9
  2409  007FFE  00                 	db	0
  2410  0000                     
  2411                           ; #config settings
  2412  007FFF  00                 	db	0	; dummy byte at the end
  2413  0000                     
  2414                           	psect	nvCOMRAM
  2415  000046                     __pnvCOMRAM:
  2416                           	opt stack 0
  2417  000046                     _timer0ReloadVal:
  2418                           	opt stack 0
  2419  000046                     	ds	2
  2420                           
  2421                           	psect	nvBANK1
  2422  0001F3                     __pnvBANK1:
  2423                           	opt stack 0
  2424  0001F3                     _eusart1TxBufferRemaining:
  2425                           	opt stack 0
  2426  0001F3                     	ds	1
  2427                           
  2428                           	psect	nvBANK2
  2429  0002E2                     __pnvBANK2:
  2430                           	opt stack 0
  2431  0002E2                     _TMR0_InterruptHandler:
  2432                           	opt stack 0
  2433  0002E2                     	ds	2
  2434  0000                     _ANSELA	set	3896
  2435  0000                     _ANSELE	set	3900
  2436  0000                     _ANSELD	set	3899
  2437  0000                     _ANSELB	set	3897
  2438  0000                     _ANSELC	set	3898
  2439  0000                     _PORTBbits	set	3969
  2440  0000                     _PORTDbits	set	3971
  2441  0000                     _ADCON0bits	set	4034
  2442  0000                     _ADRESH	set	4036
  2443  0000                     _ADRESL	set	4035
  2444  0000                     _ADCON2	set	4032
  2445  0000                     _ADCON1	set	4033
  2446  0000                     _ADCON0	set	4034
  2447  0000                     _T0CONbits	set	4053
  2448  0000                     _T0CON	set	4053
  2449  0000                     _TMR0L	set	4054
  2450  0000                     _TMR0H	set	4055
  2451  0000                     _EEDATA	set	4008
  2452  0000                     _EEADR	set	4009
  2453  0000                     _EECON2	set	4007
  2454  0000                     _EECON1bits	set	4006
  2455  0000                     _TABLAT	set	4085
  2456  0000                     _TBLPTRL	set	4086
  2457  0000                     _TBLPTRH	set	4087
  2458  0000                     _TBLPTRU	set	4088
  2459  0000                     _INTCON2bits	set	4081
  2460  0000                     _WPUB	set	3937
  2461  0000                     _TRISD	set	3989
  2462  0000                     _TRISC	set	3988
  2463  0000                     _TRISB	set	3987
  2464  0000                     _TRISA	set	3986
  2465  0000                     _TRISE	set	3990
  2466  0000                     _LATC	set	3979
  2467  0000                     _LATB	set	3978
  2468  0000                     _LATA	set	3977
  2469  0000                     _LATD	set	3980
  2470  0000                     _LATE	set	3981
  2471  0000                     _RCREG1	set	4014
  2472  0000                     _RCSTA1bits	set	4011
  2473  0000                     _TXREG1	set	4013
  2474  0000                     _SPBRGH1	set	4016
  2475  0000                     _SPBRG1	set	4015
  2476  0000                     _TXSTA1	set	4012
  2477  0000                     _RCSTA1	set	4011
  2478  0000                     _BAUDCON1	set	4024
  2479  0000                     _PIR1bits	set	3998
  2480  0000                     _PIE1bits	set	3997
  2481  0000                     _PIR2bits	set	4001
  2482  0000                     _PIE2bits	set	4000
  2483  0000                     _RCONbits	set	4048
  2484  0000                     _OSCTUNE	set	3995
  2485  0000                     _OSCCON2	set	4050
  2486  0000                     _OSCCON	set	4051
  2487  0000                     _LATAbits	set	3977
  2488  0000                     _LATDbits	set	3980
  2489  0000                     _INTCONbits	set	4082
  2490  0000                     _IOCB	set	3938
  2491  0000                     _LATCbits	set	3979
  2492  0000                     _LATBbits	set	3978
  2493                           
  2494                           	psect	cinit
  2495  003640                     __pcinit:
  2496                           	opt stack 0
  2497  003640                     start_initialization:
  2498                           	opt stack 0
  2499  003640                     __initialization:
  2500                           	opt stack 0
  2501                           
  2502                           ; Initialize objects allocated to BANK2 (12 bytes)
  2503                           ; load TBLPTR registers with __pidataBANK2
  2504  003640  0E58               	movlw	low __pidataBANK2
  2505  003642  6EF6               	movwf	tblptrl,c
  2506  003644  0E45               	movlw	high __pidataBANK2
  2507  003646  6EF7               	movwf	tblptrh,c
  2508  003648  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2509  00364A  6EF8               	movwf	tblptru,c
  2510  00364C  EE02  F0D6         	lfsr	0,__pdataBANK2
  2511  003650  EE10 F00C          	lfsr	1,12
  2512  003654                     copy_data0:
  2513  003654  0009               	tblrd		*+
  2514  003656  CFF5 FFEE          	movff	tablat,postinc0
  2515  00365A  50E5               	movf	postdec1,w,c
  2516  00365C  50E1               	movf	fsr1l,w,c
  2517  00365E  E1FA               	bnz	copy_data0
  2518                           
  2519                           ; Initialize objects allocated to BANK1 (4 bytes)
  2520                           ; load TBLPTR registers with __pidataBANK1
  2521  003660  0E8E               	movlw	low __pidataBANK1
  2522  003662  6EF6               	movwf	tblptrl,c
  2523  003664  0E45               	movlw	high __pidataBANK1
  2524  003666  6EF7               	movwf	tblptrh,c
  2525  003668  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2526  00366A  6EF8               	movwf	tblptru,c
  2527  00366C  EE01  F0EF         	lfsr	0,__pdataBANK1
  2528  003670  EE10 F004          	lfsr	1,4
  2529  003674                     copy_data1:
  2530  003674  0009               	tblrd		*+
  2531  003676  CFF5 FFEE          	movff	tablat,postinc0
  2532  00367A  50E5               	movf	postdec1,w,c
  2533  00367C  50E1               	movf	fsr1l,w,c
  2534  00367E  E1FA               	bnz	copy_data1
  2535                           
  2536                           ; Initialize objects allocated to COMRAM (4 bytes)
  2537                           ; load TBLPTR registers with __pidataCOMRAM
  2538  003680  0E8A               	movlw	low __pidataCOMRAM
  2539  003682  6EF6               	movwf	tblptrl,c
  2540  003684  0E45               	movlw	high __pidataCOMRAM
  2541  003686  6EF7               	movwf	tblptrh,c
  2542  003688  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2543  00368A  6EF8               	movwf	tblptru,c
  2544  00368C  EE00  F042         	lfsr	0,__pdataCOMRAM
  2545  003690  EE10 F004          	lfsr	1,4
  2546  003694                     copy_data2:
  2547  003694  0009               	tblrd		*+
  2548  003696  CFF5 FFEE          	movff	tablat,postinc0
  2549  00369A  50E5               	movf	postdec1,w,c
  2550  00369C  50E1               	movf	fsr1l,w,c
  2551  00369E  E1FA               	bnz	copy_data2
  2552                           
  2553                           ; Clear objects allocated to BANK2 (214 bytes)
  2554  0036A0  EE02  F000         	lfsr	0,__pbssBANK2
  2555  0036A4  0ED6               	movlw	214
  2556  0036A6                     clear_0:
  2557  0036A6  6AEE               	clrf	postinc0,c
  2558  0036A8  06E8               	decf	wreg,f,c
  2559  0036AA  E1FD               	bnz	clear_0
  2560                           
  2561                           ; Clear objects allocated to BANK1 (106 bytes)
  2562  0036AC  EE01  F085         	lfsr	0,__pbssBANK1
  2563  0036B0  0E6A               	movlw	106
  2564  0036B2                     clear_1:
  2565  0036B2  6AEE               	clrf	postinc0,c
  2566  0036B4  06E8               	decf	wreg,f,c
  2567  0036B6  E1FD               	bnz	clear_1
  2568                           
  2569                           ; Clear objects allocated to COMRAM (17 bytes)
  2570  0036B8  EE00  F031         	lfsr	0,__pbssCOMRAM
  2571  0036BC  0E11               	movlw	17
  2572  0036BE                     clear_2:
  2573  0036BE  6AEE               	clrf	postinc0,c
  2574  0036C0  06E8               	decf	wreg,f,c
  2575  0036C2  E1FD               	bnz	clear_2
  2576  0036C4                     end_of_initialization:
  2577                           	opt stack 0
  2578  0036C4                     __end_of__initialization:
  2579                           	opt stack 0
  2580  0036C4  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2581  0036C6  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2582  0036C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2583  0036CA  6EF8               	movwf	tblptru,c
  2584  0036CC  0100               	movlb	0
  2585  0036CE  EFD0  F01D         	goto	_main	;jump to C main() function
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           postdec1	equ	0xFE5
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595                           	psect	bssCOMRAM
  2596  000031                     __pbssCOMRAM:
  2597                           	opt stack 0
  2598  000031                     _numOfValidateSamples:
  2599                           	opt stack 0
  2600  000031                     	ds	4
  2601  000035                     TMR0_ISR@CountCallBack:
  2602                           	opt stack 0
  2603  000035                     	ds	2
  2604  000037                     _channelNum:
  2605                           	opt stack 0
  2606  000037                     	ds	2
  2607  000039                     _eusart1RxTail:
  2608                           	opt stack 0
  2609  000039                     	ds	1
  2610  00003A                     _eusart1RxHead:
  2611                           	opt stack 0
  2612  00003A                     	ds	1
  2613  00003B                     _eusart1TxTail:
  2614                           	opt stack 0
  2615  00003B                     	ds	1
  2616  00003C                     _eusart1TxHead:
  2617                           	opt stack 0
  2618  00003C                     	ds	1
  2619  00003D                     _isReWriteDone:
  2620                           	opt stack 0
  2621  00003D                     	ds	1
  2622  00003E                     _numOfReadSamples:
  2623                           	opt stack 0
  2624  00003E                     	ds	4
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           
  2634                           	psect	dataCOMRAM
  2635  000042                     __pdataCOMRAM:
  2636                           	opt stack 0
  2637  000042                     _writeAddress:
  2638                           	opt stack 0
  2639  000042                     	ds	4
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           postdec1	equ	0xFE5
  2647                           fsr1l	equ	0xFE1
  2648                           
  2649                           	psect	bssBANK1
  2650  000185                     __pbssBANK1:
  2651                           	opt stack 0
  2652  000185                     _txStatistics:
  2653                           	opt stack 0
  2654  000185                     	ds	30
  2655  0001A3                     _rxStatistics:
  2656                           	opt stack 0
  2657  0001A3                     	ds	29
  2658  0001C0                     _mcuRunTimeIn5SecTicks:
  2659                           	opt stack 0
  2660  0001C0                     	ds	4
  2661  0001C4                     _retNum:
  2662                           	opt stack 0
  2663  0001C4                     	ds	4
  2664  0001C8                     _txFreq:
  2665                           	opt stack 0
  2666  0001C8                     	ds	4
  2667  0001CC                     _rxFreq:
  2668                           	opt stack 0
  2669  0001CC                     	ds	4
  2670  0001D0                     _errno:
  2671                           	opt stack 0
  2672  0001D0                     	ds	2
  2673  0001D2                     _sampleCount:
  2674                           	opt stack 0
  2675  0001D2                     	ds	2
  2676  0001D4                     _numSamples:
  2677                           	opt stack 0
  2678  0001D4                     	ds	2
  2679  0001D6                     _count:
  2680                           	opt stack 0
  2681  0001D6                     	ds	2
  2682  0001D8                     _lastAdcVgMon:
  2683                           	opt stack 0
  2684  0001D8                     	ds	2
  2685  0001DA                     _lastAdcRREV:
  2686                           	opt stack 0
  2687  0001DA                     	ds	2
  2688  0001DC                     _lastAdcFfwrRSSI:
  2689                           	opt stack 0
  2690  0001DC                     	ds	2
  2691  0001DE                     _lastAdcTemp:
  2692                           	opt stack 0
  2693  0001DE                     	ds	2
  2694  0001E0                     _msgCount:
  2695                           	opt stack 0
  2696  0001E0                     	ds	1
  2697  0001E1                     _crcGiven:
  2698                           	opt stack 0
  2699  0001E1                     	ds	1
  2700  0001E2                     _crcCalc:
  2701                           	opt stack 0
  2702  0001E2                     	ds	1
  2703  0001E3                     _dataSize:
  2704                           	opt stack 0
  2705  0001E3                     	ds	1
  2706  0001E4                     _request:
  2707                           	opt stack 0
  2708  0001E4                     	ds	1
  2709  0001E5                     _group:
  2710                           	opt stack 0
  2711  0001E5                     	ds	1
  2712  0001E6                     _cState:
  2713                           	opt stack 0
  2714  0001E6                     	ds	1
  2715  0001E7                     _eusart1RxCount:
  2716                           	opt stack 0
  2717  0001E7                     	ds	1
  2718  0001E8                     _channel:
  2719                           	opt stack 0
  2720  0001E8                     	ds	1
  2721  0001E9                     _adcSampleMode:
  2722                           	opt stack 0
  2723  0001E9                     	ds	1
  2724  0001EA                     _needToSample:
  2725                           	opt stack 0
  2726  0001EA                     	ds	1
  2727  0001EB                     _TimertenSecFlag:
  2728                           	opt stack 0
  2729  0001EB                     	ds	1
  2730  0001EC                     _TimerKeepAliveFlag:
  2731                           	opt stack 0
  2732  0001EC                     	ds	1
  2733  0001ED                     _TimerSamplingFlag:
  2734                           	opt stack 0
  2735  0001ED                     	ds	1
  2736  0001EE                     _TimerOneSecFlag:
  2737                           	opt stack 0
  2738  0001EE                     	ds	1
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1l	equ	0xFE1
  2747                           
  2748                           	psect	dataBANK1
  2749  0001EF                     __pdataBANK1:
  2750                           	opt stack 0
  2751  0001EF                     _readAddress:
  2752                           	opt stack 0
  2753  0001EF                     	ds	4
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           postinc0	equ	0xFEE
  2759                           wreg	equ	0xFE8
  2760                           postdec1	equ	0xFE5
  2761                           fsr1l	equ	0xFE1
  2762                           
  2763                           	psect	bssBANK2
  2764  000200                     __pbssBANK2:
  2765                           	opt stack 0
  2766  000200                     _eusart1TxBuffer:
  2767                           	opt stack 0
  2768  000200                     	ds	70
  2769  000246                     _eusart1RxBuffer:
  2770                           	opt stack 0
  2771  000246                     	ds	40
  2772  00026E                     _sampleArray:
  2773                           	opt stack 0
  2774  00026E                     	ds	64
  2775  0002AE                     _rxMsgData:
  2776                           	opt stack 0
  2777  0002AE                     	ds	20
  2778  0002C2                     _rxMsgQueue:
  2779                           	opt stack 0
  2780  0002C2                     	ds	20
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           
  2790                           	psect	dataBANK2
  2791  0002D6                     __pdataBANK2:
  2792                           	opt stack 0
  2793  0002D6                     _groupsArray:
  2794                           	opt stack 0
  2795  0002D6                     	ds	12
  2796                           tblptru	equ	0xFF8
  2797                           tblptrh	equ	0xFF7
  2798                           tblptrl	equ	0xFF6
  2799                           tablat	equ	0xFF5
  2800                           postinc0	equ	0xFEE
  2801                           wreg	equ	0xFE8
  2802                           postdec1	equ	0xFE5
  2803                           fsr1l	equ	0xFE1
  2804                           
  2805                           	psect	cstackBANK1
  2806  000100                     __pcstackBANK1:
  2807                           	opt stack 0
  2808  000100                     SampleSingleChannel@dest:
  2809                           	opt stack 0
  2810  000100                     SendUartSystemInitMessage@dest:
  2811                           	opt stack 0
  2812  000100                     PrintHelpScreen@dest:
  2813                           	opt stack 0
  2814  000100                     PrintRxStatus@dest:
  2815                           	opt stack 0
  2816  000100                     PrintTxStatus@dest:
  2817                           	opt stack 0
  2818                           
  2819                           ; 80 bytes @ 0x0
  2820  000100                     	ds	50
  2821  000132                     _SampleSingleChannel$3936:
  2822                           	opt stack 0
  2823                           
  2824                           ; 3 bytes @ 0x32
  2825  000132                     	ds	3
  2826  000135                     SampleSingleChannel@_adcResult:
  2827                           	opt stack 0
  2828                           
  2829                           ; 2 bytes @ 0x35
  2830  000135                     	ds	2
  2831  000137                     SampleSingleChannel@adcRes:
  2832                           	opt stack 0
  2833                           
  2834                           ; 2 bytes @ 0x37
  2835  000137                     	ds	25
  2836  000150                     readUartByte@dest:
  2837                           	opt stack 0
  2838                           
  2839                           ; 50 bytes @ 0x50
  2840  000150                     	ds	50
  2841  000182                     readUartByte@idx:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x82
  2845  000182                     	ds	2
  2846  000184                     readUartByte@chRec:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0x84
  2850  000184                     	ds	1
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           
  2860                           	psect	cstackBANK0
  2861  000060                     __pcstackBANK0:
  2862                           	opt stack 0
  2863  000060                     ___ftdiv@cntr:
  2864                           	opt stack 0
  2865  000060                     strtol@sign:
  2866                           	opt stack 0
  2867  000060                     SWSPI_Synth_send_bits@bitArray:
  2868                           	opt stack 0
  2869                           
  2870                           ; 32 bytes @ 0x0
  2871  000060                     	ds	1
  2872  000061                     ___ftdiv@f3:
  2873                           	opt stack 0
  2874  000061                     strtol@a:
  2875                           	opt stack 0
  2876                           
  2877                           ; 4 bytes @ 0x1
  2878  000061                     	ds	3
  2879  000064                     ___ftdiv@exp:
  2880                           	opt stack 0
  2881                           
  2882                           ; 1 bytes @ 0x4
  2883  000064                     	ds	1
  2884  000065                     ___ftdiv@sign:
  2885                           	opt stack 0
  2886  000065                     strtol@c:
  2887                           	opt stack 0
  2888                           
  2889                           ; 1 bytes @ 0x5
  2890  000065                     	ds	1
  2891  000066                     ?___ftmul:
  2892                           	opt stack 0
  2893  000066                     ?_GetIntFromUartData:
  2894                           	opt stack 0
  2895  000066                     GetIntFromUartData@data:
  2896                           	opt stack 0
  2897  000066                     ___ftmul@f1:
  2898                           	opt stack 0
  2899                           
  2900                           ; 3 bytes @ 0x6
  2901  000066                     	ds	3
  2902  000069                     ___ftmul@f2:
  2903                           	opt stack 0
  2904                           
  2905                           ; 3 bytes @ 0x9
  2906  000069                     	ds	1
  2907  00006A                     ??_GetIntFromUartData:
  2908                           
  2909                           ; 1 bytes @ 0xA
  2910  00006A                     	ds	2
  2911  00006C                     ___ftmul@exp:
  2912                           	opt stack 0
  2913  00006C                     GetIntFromUartData@dataRegArr:
  2914                           	opt stack 0
  2915                           
  2916                           ; 8 bytes @ 0xC
  2917  00006C                     	ds	1
  2918  00006D                     ___ftmul@f3_as_product:
  2919                           	opt stack 0
  2920                           
  2921                           ; 3 bytes @ 0xD
  2922  00006D                     	ds	3
  2923  000070                     ___ftmul@cntr:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x10
  2927  000070                     	ds	1
  2928  000071                     ___ftmul@sign:
  2929                           	opt stack 0
  2930                           
  2931                           ; 1 bytes @ 0x11
  2932  000071                     	ds	1
  2933  000072                     ?_fround:
  2934                           	opt stack 0
  2935  000072                     ?_scale:
  2936                           	opt stack 0
  2937                           
  2938                           ; 3 bytes @ 0x12
  2939  000072                     	ds	2
  2940  000074                     GetIntFromUartData@c:
  2941                           	opt stack 0
  2942                           
  2943                           ; 1 bytes @ 0x14
  2944  000074                     	ds	1
  2945  000075                     GetIntFromUartData@idx:
  2946                           	opt stack 0
  2947  000075                     _fround$3951:
  2948                           	opt stack 0
  2949  000075                     _scale$3952:
  2950                           	opt stack 0
  2951                           
  2952                           ; 3 bytes @ 0x15
  2953  000075                     	ds	3
  2954  000078                     scale@scl:
  2955                           	opt stack 0
  2956  000078                     _fround$3950:
  2957                           	opt stack 0
  2958                           
  2959                           ; 3 bytes @ 0x18
  2960  000078                     	ds	1
  2961  000079                     ?___fttol:
  2962                           	opt stack 0
  2963  000079                     ___fttol@f1:
  2964                           	opt stack 0
  2965                           
  2966                           ; 3 bytes @ 0x19
  2967  000079                     	ds	2
  2968  00007B                     fround@prec:
  2969                           	opt stack 0
  2970                           
  2971                           ; 1 bytes @ 0x1B
  2972  00007B                     	ds	1
  2973  00007C                     ?___ftadd:
  2974                           	opt stack 0
  2975  00007C                     ___ftadd@f1:
  2976                           	opt stack 0
  2977                           
  2978                           ; 3 bytes @ 0x1C
  2979  00007C                     	ds	1
  2980  00007D                     ??___fttol:
  2981                           
  2982                           ; 1 bytes @ 0x1D
  2983  00007D                     	ds	2
  2984  00007F                     ___ftadd@f2:
  2985                           	opt stack 0
  2986                           
  2987                           ; 3 bytes @ 0x1F
  2988  00007F                     	ds	1
  2989  000080                     SWSPI_Synth_send_bits@mask:
  2990                           	opt stack 0
  2991                           
  2992                           ; 4 bytes @ 0x20
  2993  000080                     	ds	2
  2994  000082                     ??___ftadd:
  2995  000082                     ___fttol@sign1:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x22
  2999  000082                     	ds	1
  3000  000083                     ___fttol@lval:
  3001                           	opt stack 0
  3002                           
  3003                           ; 4 bytes @ 0x23
  3004  000083                     	ds	1
  3005  000084                     SWSPI_Synth_send_bits@count:
  3006                           	opt stack 0
  3007                           
  3008                           ; 1 bytes @ 0x24
  3009  000084                     	ds	1
  3010  000085                     SWSPI_Synth_send_bits@phrType:
  3011                           	opt stack 0
  3012  000085                     ___ftadd@sign:
  3013                           	opt stack 0
  3014                           
  3015                           ; 1 bytes @ 0x25
  3016  000085                     	ds	1
  3017  000086                     ??_PLLInitialize:
  3018  000086                     ___ftadd@exp2:
  3019                           	opt stack 0
  3020                           
  3021                           ; 1 bytes @ 0x26
  3022  000086                     	ds	1
  3023  000087                     ___ftadd@exp1:
  3024                           	opt stack 0
  3025  000087                     ___fttol@exp1:
  3026                           	opt stack 0
  3027                           
  3028                           ; 1 bytes @ 0x27
  3029  000087                     	ds	1
  3030  000088                     ?___ftsub:
  3031                           	opt stack 0
  3032  000088                     ?_eval_poly:
  3033                           	opt stack 0
  3034  000088                     ?___altoft:
  3035                           	opt stack 0
  3036  000088                     PLLInitialize@idx:
  3037                           	opt stack 0
  3038  000088                     ___ftsub@f1:
  3039                           	opt stack 0
  3040  000088                     eval_poly@x:
  3041                           	opt stack 0
  3042  000088                     ___altoft@c:
  3043                           	opt stack 0
  3044                           
  3045                           ; 4 bytes @ 0x28
  3046  000088                     	ds	2
  3047  00008A                     PLLInitialize@idx_943:
  3048                           	opt stack 0
  3049                           
  3050                           ; 2 bytes @ 0x2A
  3051  00008A                     	ds	1
  3052  00008B                     eval_poly@d:
  3053                           	opt stack 0
  3054  00008B                     ___ftsub@f2:
  3055                           	opt stack 0
  3056                           
  3057                           ; 3 bytes @ 0x2B
  3058  00008B                     	ds	1
  3059  00008C                     ??___altoft:
  3060                           
  3061                           ; 1 bytes @ 0x2C
  3062  00008C                     	ds	1
  3063  00008D                     eval_poly@n:
  3064                           	opt stack 0
  3065                           
  3066                           ; 2 bytes @ 0x2D
  3067  00008D                     	ds	2
  3068  00008F                     eval_poly@res:
  3069                           	opt stack 0
  3070                           
  3071                           ; 3 bytes @ 0x2F
  3072  00008F                     	ds	1
  3073  000090                     ?_floor:
  3074                           	opt stack 0
  3075  000090                     floor@x:
  3076                           	opt stack 0
  3077                           
  3078                           ; 3 bytes @ 0x30
  3079  000090                     	ds	2
  3080  000092                     ?_log:
  3081                           	opt stack 0
  3082  000092                     ?_ldexp:
  3083                           	opt stack 0
  3084  000092                     ldexp@value:
  3085                           	opt stack 0
  3086  000092                     log@x:
  3087                           	opt stack 0
  3088                           
  3089                           ; 3 bytes @ 0x32
  3090  000092                     	ds	1
  3091  000093                     floor@i:
  3092                           	opt stack 0
  3093                           
  3094                           ; 3 bytes @ 0x33
  3095  000093                     	ds	2
  3096  000095                     ldexp@newexp:
  3097                           	opt stack 0
  3098  000095                     log@exponent:
  3099                           	opt stack 0
  3100                           
  3101                           ; 2 bytes @ 0x35
  3102  000095                     	ds	1
  3103  000096                     floor@expon:
  3104                           	opt stack 0
  3105                           
  3106                           ; 2 bytes @ 0x36
  3107  000096                     	ds	1
  3108  000097                     ??_ldexp:
  3109                           
  3110                           ; 1 bytes @ 0x37
  3111  000097                     	ds	2
  3112  000099                     ?_exp:
  3113                           	opt stack 0
  3114  000099                     exp@x:
  3115                           	opt stack 0
  3116                           
  3117                           ; 3 bytes @ 0x39
  3118  000099                     	ds	3
  3119  00009C                     _exp$3956:
  3120                           	opt stack 0
  3121                           
  3122                           ; 3 bytes @ 0x3C
  3123  00009C                     	ds	3
  3124  00009F                     exp@exponent:
  3125                           	opt stack 0
  3126                           
  3127                           ; 2 bytes @ 0x3F
  3128  00009F                     	ds	2
  3129  0000A1                     exp@sign:
  3130                           	opt stack 0
  3131                           
  3132                           ; 1 bytes @ 0x41
  3133  0000A1                     	ds	1
  3134  0000A2                     ?_pow:
  3135                           	opt stack 0
  3136  0000A2                     pow@x:
  3137                           	opt stack 0
  3138                           
  3139                           ; 3 bytes @ 0x42
  3140  0000A2                     	ds	3
  3141  0000A5                     pow@y:
  3142                           	opt stack 0
  3143                           
  3144                           ; 3 bytes @ 0x45
  3145  0000A5                     	ds	3
  3146  0000A8                     _pow$3954:
  3147                           	opt stack 0
  3148                           
  3149                           ; 3 bytes @ 0x48
  3150  0000A8                     	ds	3
  3151  0000AB                     _pow$3955:
  3152                           	opt stack 0
  3153                           
  3154                           ; 3 bytes @ 0x4B
  3155  0000AB                     	ds	3
  3156  0000AE                     pow@sign:
  3157                           	opt stack 0
  3158                           
  3159                           ; 1 bytes @ 0x4E
  3160  0000AE                     	ds	1
  3161  0000AF                     pow@yi:
  3162                           	opt stack 0
  3163                           
  3164                           ; 4 bytes @ 0x4F
  3165  0000AF                     	ds	4
  3166  0000B3                     ?_ReadIntFromEeprom:
  3167                           	opt stack 0
  3168  0000B3                     ?___llmod:
  3169                           	opt stack 0
  3170  0000B3                     ReadIntFromEeprom@numOfByes:
  3171                           	opt stack 0
  3172  0000B3                     _SampleAllChannels$3937:
  3173                           	opt stack 0
  3174  0000B3                     ___llmod@dividend:
  3175                           	opt stack 0
  3176                           
  3177                           ; 4 bytes @ 0x53
  3178  0000B3                     	ds	3
  3179  0000B6                     SampleAllChannels@_adcResult:
  3180                           	opt stack 0
  3181                           
  3182                           ; 2 bytes @ 0x56
  3183  0000B6                     	ds	1
  3184  0000B7                     ??_ReadIntFromEeprom:
  3185  0000B7                     ___llmod@divisor:
  3186                           	opt stack 0
  3187                           
  3188                           ; 4 bytes @ 0x57
  3189  0000B7                     	ds	1
  3190  0000B8                     SampleAllChannels@adcRes:
  3191                           	opt stack 0
  3192                           
  3193                           ; 2 bytes @ 0x58
  3194  0000B8                     	ds	2
  3195  0000BA                     SampleAllChannels@i:
  3196                           	opt stack 0
  3197  0000BA                     ReadIntFromEeprom@base:
  3198                           	opt stack 0
  3199                           
  3200                           ; 4 bytes @ 0x5A
  3201  0000BA                     	ds	1
  3202  0000BB                     ___llmod@counter:
  3203                           	opt stack 0
  3204                           
  3205                           ; 1 bytes @ 0x5B
  3206  0000BB                     	ds	1
  3207  0000BC                     ?_sprintf:
  3208                           	opt stack 0
  3209  0000BC                     sprintf@sp:
  3210                           	opt stack 0
  3211                           
  3212                           ; 2 bytes @ 0x5C
  3213  0000BC                     	ds	2
  3214  0000BE                     sprintf@f:
  3215                           	opt stack 0
  3216  0000BE                     _ReadIntFromEeprom$3948:
  3217                           	opt stack 0
  3218                           
  3219                           ; 3 bytes @ 0x5E
  3220  0000BE                     	ds	3
  3221  0000C1                     _ReadIntFromEeprom$3949:
  3222                           	opt stack 0
  3223                           
  3224                           ; 3 bytes @ 0x61
  3225  0000C1                     	ds	2
  3226  0000C3                     ??_sprintf:
  3227                           
  3228                           ; 1 bytes @ 0x63
  3229  0000C3                     	ds	1
  3230  0000C4                     ReadIntFromEeprom@address:
  3231                           	opt stack 0
  3232                           
  3233                           ; 1 bytes @ 0x64
  3234  0000C4                     	ds	1
  3235  0000C5                     ReadIntFromEeprom@retVal:
  3236                           	opt stack 0
  3237                           
  3238                           ; 4 bytes @ 0x65
  3239  0000C5                     	ds	4
  3240  0000C9                     ReadIntFromEeprom@idx:
  3241                           	opt stack 0
  3242  0000C9                     _sprintf$3953:
  3243                           	opt stack 0
  3244                           
  3245                           ; 3 bytes @ 0x69
  3246  0000C9                     	ds	1
  3247  0000CA                     ??_DacInit:
  3248                           
  3249                           ; 1 bytes @ 0x6A
  3250  0000CA                     	ds	2
  3251  0000CC                     DacInit@dacInput:
  3252                           	opt stack 0
  3253  0000CC                     sprintf@cp:
  3254                           	opt stack 0
  3255                           
  3256                           ; 2 bytes @ 0x6C
  3257  0000CC                     	ds	2
  3258  0000CE                     DacInit@idx:
  3259                           	opt stack 0
  3260  0000CE                     sprintf@ap:
  3261                           	opt stack 0
  3262                           
  3263                           ; 2 bytes @ 0x6E
  3264  0000CE                     	ds	2
  3265  0000D0                     sprintf@flag:
  3266                           	opt stack 0
  3267                           
  3268                           ; 2 bytes @ 0x70
  3269  0000D0                     	ds	2
  3270  0000D2                     sprintf@prec:
  3271                           	opt stack 0
  3272                           
  3273                           ; 2 bytes @ 0x72
  3274  0000D2                     	ds	2
  3275  0000D4                     sprintf@val:
  3276                           	opt stack 0
  3277                           
  3278                           ; 4 bytes @ 0x74
  3279  0000D4                     	ds	4
  3280  0000D8                     sprintf@exp:
  3281                           	opt stack 0
  3282                           
  3283                           ; 2 bytes @ 0x78
  3284  0000D8                     	ds	2
  3285  0000DA                     sprintf@tmpval:
  3286                           	opt stack 0
  3287                           
  3288                           ; 4 bytes @ 0x7A
  3289  0000DA                     	ds	4
  3290  0000DE                     sprintf@fval:
  3291                           	opt stack 0
  3292                           
  3293                           ; 3 bytes @ 0x7E
  3294  0000DE                     	ds	3
  3295  0000E1                     sprintf@c:
  3296                           	opt stack 0
  3297                           
  3298                           ; 1 bytes @ 0x81
  3299  0000E1                     	ds	1
  3300  0000E2                     GroupRx@data:
  3301                           	opt stack 0
  3302  0000E2                     GroupTx@data:
  3303                           	opt stack 0
  3304  0000E2                     GroupCommon@data:
  3305                           	opt stack 0
  3306                           
  3307                           ; 2 bytes @ 0x82
  3308  0000E2                     	ds	2
  3309  0000E4                     ??_GroupRx:
  3310  0000E4                     ??_GroupTx:
  3311  0000E4                     GroupCommon@request:
  3312                           	opt stack 0
  3313                           
  3314                           ; 1 bytes @ 0x84
  3315  0000E4                     	ds	1
  3316  0000E5                     _GroupRx$3944:
  3317                           	opt stack 0
  3318  0000E5                     _GroupTx$3946:
  3319                           	opt stack 0
  3320                           
  3321                           ; 3 bytes @ 0x85
  3322  0000E5                     	ds	3
  3323  0000E8                     _GroupRx$3945:
  3324                           	opt stack 0
  3325  0000E8                     _GroupTx$3947:
  3326                           	opt stack 0
  3327                           
  3328                           ; 3 bytes @ 0x88
  3329  0000E8                     	ds	3
  3330  0000EB                     GroupRx@request:
  3331                           	opt stack 0
  3332  0000EB                     GroupTx@request:
  3333                           	opt stack 0
  3334                           
  3335                           ; 1 bytes @ 0x8B
  3336  0000EB                     	ds	1
  3337  0000EC                     ??_readUartByte:
  3338                           
  3339                           ; 1 bytes @ 0x8C
  3340  0000EC                     	ds	3
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           fsr1l	equ	0xFE1
  3349                           
  3350                           	psect	cstackCOMRAM
  3351  000001                     __pcstackCOMRAM:
  3352                           	opt stack 0
  3353  000001                     ?___lwmod:
  3354                           	opt stack 0
  3355  000001                     ___lwmod@dividend:
  3356                           	opt stack 0
  3357                           
  3358                           ; 2 bytes @ 0x0
  3359  000001                     	ds	2
  3360  000003                     ___lwmod@divisor:
  3361                           	opt stack 0
  3362                           
  3363                           ; 2 bytes @ 0x2
  3364  000003                     	ds	2
  3365  000005                     ___lwmod@counter:
  3366                           	opt stack 0
  3367                           
  3368                           ; 1 bytes @ 0x4
  3369  000005                     	ds	1
  3370  000006                     ??_INTERRUPT_InterruptManager:
  3371                           
  3372                           ; 1 bytes @ 0x5
  3373  000006                     	ds	18
  3374  000018                     ??_EUSART1_Read:
  3375  000018                     ??_isspace:
  3376  000018                     ??_isdigit:
  3377  000018                     ??_isupper:
  3378  000018                     ??_BlinkOkLeds:
  3379  000018                     ??_keepAliveSignalLed:
  3380  000018                     ??_testLeds:
  3381  000018                     ?_ADC_GetConversion:
  3382                           	opt stack 0
  3383  000018                     ?___awmod:
  3384                           	opt stack 0
  3385  000018                     ?___ftpack:
  3386                           	opt stack 0
  3387  000018                     ?_frexp:
  3388                           	opt stack 0
  3389  000018                     ?___ftneg:
  3390                           	opt stack 0
  3391  000018                     ?__tdiv_to_l_:
  3392                           	opt stack 0
  3393  000018                     ?__div_to_l_:
  3394                           	opt stack 0
  3395  000018                     ?___lldiv:
  3396                           	opt stack 0
  3397  000018                     SwSpi_Data_Pin@cPinMode:
  3398                           	opt stack 0
  3399  000018                     SwSpi_Clk_Pin@cPinMode:
  3400                           	opt stack 0
  3401  000018                     SwSpi_Set_CE_Pin@cPinMode:
  3402                           	opt stack 0
  3403  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  3404                           	opt stack 0
  3405  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  3406                           	opt stack 0
  3407  000018                     EUSART1_Write@txData:
  3408                           	opt stack 0
  3409  000018                     DATAEE_WriteByte@bData:
  3410                           	opt stack 0
  3411  000018                     DATAEE_ReadByte@bAdd:
  3412                           	opt stack 0
  3413  000018                     toupper@c:
  3414                           	opt stack 0
  3415  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  3416                           	opt stack 0
  3417  000018                     Make32bitsArray@array:
  3418                           	opt stack 0
  3419  000018                     ___awmod@dividend:
  3420                           	opt stack 0
  3421  000018                     memset@p1:
  3422                           	opt stack 0
  3423  000018                     __div_to_l_@f1:
  3424                           	opt stack 0
  3425  000018                     ___ftpack@arg:
  3426                           	opt stack 0
  3427  000018                     __tdiv_to_l_@f1:
  3428                           	opt stack 0
  3429  000018                     ___ftge@ff1:
  3430                           	opt stack 0
  3431  000018                     ___ftneg@f1:
  3432                           	opt stack 0
  3433  000018                     frexp@value:
  3434                           	opt stack 0
  3435  000018                     make8@data:
  3436                           	opt stack 0
  3437  000018                     ___lldiv@dividend:
  3438                           	opt stack 0
  3439                           
  3440                           ; 4 bytes @ 0x17
  3441  000018                     	ds	1
  3442  000019                     EepromRead@address:
  3443                           	opt stack 0
  3444  000019                     SwSpi_Data_Pin@phrType:
  3445                           	opt stack 0
  3446  000019                     SwSpi_Clk_Pin@phrType:
  3447                           	opt stack 0
  3448  000019                     SwSpi_Set_CE_Pin@phrType:
  3449                           	opt stack 0
  3450  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  3451                           	opt stack 0
  3452  000019                     DATAEE_WriteByte@bAdd:
  3453                           	opt stack 0
  3454  000019                     _isdigit$3614:
  3455                           	opt stack 0
  3456  000019                     _isspace$3617:
  3457                           	opt stack 0
  3458  000019                     _isupper$3620:
  3459                           	opt stack 0
  3460  000019                     testLeds@idx:
  3461                           	opt stack 0
  3462  000019                     UART_Write_Text@text:
  3463                           	opt stack 0
  3464  000019                     EUSART1_Read@readValue:
  3465                           	opt stack 0
  3466                           
  3467                           ; 2 bytes @ 0x18
  3468  000019                     	ds	1
  3469  00001A                     ??_ADC_GetConversion:
  3470  00001A                     ??_TMR0_Initialize:
  3471  00001A                     ?___lmul:
  3472                           	opt stack 0
  3473  00001A                     SWSPI_DAC_send_bits@data:
  3474                           	opt stack 0
  3475  00001A                     DATAEE_WriteByte@GIEBitValue:
  3476                           	opt stack 0
  3477  00001A                     isdigit@c:
  3478                           	opt stack 0
  3479  00001A                     isspace@c:
  3480                           	opt stack 0
  3481  00001A                     isupper@c:
  3482                           	opt stack 0
  3483  00001A                     ___awmod@divisor:
  3484                           	opt stack 0
  3485  00001A                     memset@c:
  3486                           	opt stack 0
  3487  00001A                     Make32bitsArray@data:
  3488                           	opt stack 0
  3489  00001A                     ___lmul@multiplier:
  3490                           	opt stack 0
  3491                           
  3492                           ; 4 bytes @ 0x19
  3493  00001A                     	ds	1
  3494  00001B                     ??_UART_Write_Text:
  3495  00001B                     ??_isalpha:
  3496  00001B                     BlinkOkLeds@state:
  3497                           	opt stack 0
  3498  00001B                     EepromWrite@data:
  3499                           	opt stack 0
  3500  00001B                     SWSPI_DAC_send_bits@count:
  3501                           	opt stack 0
  3502  00001B                     ___ftpack@exp:
  3503                           	opt stack 0
  3504  00001B                     frexp@eptr:
  3505                           	opt stack 0
  3506  00001B                     __div_to_l_@f2:
  3507                           	opt stack 0
  3508  00001B                     __tdiv_to_l_@f2:
  3509                           	opt stack 0
  3510  00001B                     ___ftge@ff2:
  3511                           	opt stack 0
  3512                           
  3513                           ; 3 bytes @ 0x1A
  3514  00001B                     	ds	1
  3515  00001C                     EepromWrite@address:
  3516                           	opt stack 0
  3517  00001C                     SWSPI_DAC_send_bits@phrType:
  3518                           	opt stack 0
  3519  00001C                     ADC_GetConversion@channel:
  3520                           	opt stack 0
  3521  00001C                     make8@dataLocation:
  3522                           	opt stack 0
  3523  00001C                     ___awmod@counter:
  3524                           	opt stack 0
  3525  00001C                     ___ftpack@sign:
  3526                           	opt stack 0
  3527  00001C                     _isalpha$3611:
  3528                           	opt stack 0
  3529  00001C                     BlinkOkLeds@idx:
  3530                           	opt stack 0
  3531  00001C                     memset@n:
  3532                           	opt stack 0
  3533  00001C                     ___lldiv@divisor:
  3534                           	opt stack 0
  3535                           
  3536                           ; 4 bytes @ 0x1B
  3537  00001C                     	ds	1
  3538  00001D                     ??_make8:
  3539  00001D                     ??___ftpack:
  3540  00001D                     ??_frexp:
  3541  00001D                     ___awmod@sign:
  3542                           	opt stack 0
  3543  00001D                     isalpha@c:
  3544                           	opt stack 0
  3545  00001D                     UART_Write_Text@i:
  3546                           	opt stack 0
  3547                           
  3548                           ; 2 bytes @ 0x1C
  3549  00001D                     	ds	1
  3550  00001E                     ??_Make32bitsArray:
  3551  00001E                     ??__tdiv_to_l_:
  3552  00001E                     ??___ftge:
  3553  00001E                     ?___awdiv:
  3554                           	opt stack 0
  3555  00001E                     ___awdiv@dividend:
  3556                           	opt stack 0
  3557  00001E                     memset@p:
  3558                           	opt stack 0
  3559  00001E                     ___lmul@multiplicand:
  3560                           	opt stack 0
  3561  00001E                     __div_to_l_@quot:
  3562                           	opt stack 0
  3563                           
  3564                           ; 4 bytes @ 0x1D
  3565  00001E                     	ds	1
  3566  00001F                     AdcSingleSample@chType:
  3567                           	opt stack 0
  3568                           
  3569                           ; 1 bytes @ 0x1E
  3570  00001F                     	ds	1
  3571  000020                     ?___awtoft:
  3572                           	opt stack 0
  3573  000020                     ?___lltoft:
  3574                           	opt stack 0
  3575  000020                     ?___lwtoft:
  3576                           	opt stack 0
  3577  000020                     Make32bitsArray@idx:
  3578                           	opt stack 0
  3579  000020                     ZeroArray@array:
  3580                           	opt stack 0
  3581  000020                     ___awdiv@divisor:
  3582                           	opt stack 0
  3583  000020                     ___awtoft@c:
  3584                           	opt stack 0
  3585  000020                     ___lwtoft@c:
  3586                           	opt stack 0
  3587  000020                     AdcSingleSample@numSamples:
  3588                           	opt stack 0
  3589  000020                     ___lldiv@quotient:
  3590                           	opt stack 0
  3591  000020                     ___lltoft@c:
  3592                           	opt stack 0
  3593                           
  3594                           ; 4 bytes @ 0x1F
  3595  000020                     	ds	1
  3596  000021                     StoreIntInEeprom@data:
  3597                           	opt stack 0
  3598  000021                     __tdiv_to_l_@quot:
  3599                           	opt stack 0
  3600                           
  3601                           ; 4 bytes @ 0x20
  3602  000021                     	ds	1
  3603  000022                     ___awdiv@counter:
  3604                           	opt stack 0
  3605  000022                     __div_to_l_@cntr:
  3606                           	opt stack 0
  3607  000022                     ZeroArray@size:
  3608                           	opt stack 0
  3609  000022                     ___lmul@product:
  3610                           	opt stack 0
  3611                           
  3612                           ; 4 bytes @ 0x21
  3613  000022                     	ds	1
  3614  000023                     ?___ftdiv:
  3615                           	opt stack 0
  3616  000023                     ___awdiv@sign:
  3617                           	opt stack 0
  3618  000023                     ___awtoft@sign:
  3619                           	opt stack 0
  3620  000023                     __div_to_l_@exp1:
  3621                           	opt stack 0
  3622  000023                     ___ftdiv@f1:
  3623                           	opt stack 0
  3624                           
  3625                           ; 3 bytes @ 0x22
  3626  000023                     	ds	1
  3627  000024                     ??___lltoft:
  3628  000024                     ___lldiv@counter:
  3629                           	opt stack 0
  3630  000024                     ___awdiv@quotient:
  3631                           	opt stack 0
  3632  000024                     AdcSingleSample@retNum:
  3633                           	opt stack 0
  3634  000024                     SWSPI_Synth_send_bits@data:
  3635                           	opt stack 0
  3636                           
  3637                           ; 4 bytes @ 0x23
  3638  000024                     	ds	1
  3639  000025                     StoreIntInEeprom@address:
  3640                           	opt stack 0
  3641  000025                     __tdiv_to_l_@cntr:
  3642                           	opt stack 0
  3643                           
  3644                           ; 1 bytes @ 0x24
  3645  000025                     	ds	1
  3646  000026                     ?___wmul:
  3647                           	opt stack 0
  3648  000026                     ?_strtol:
  3649                           	opt stack 0
  3650  000026                     __tdiv_to_l_@exp1:
  3651                           	opt stack 0
  3652  000026                     StoreIntInEeprom@numOfByes:
  3653                           	opt stack 0
  3654  000026                     ___wmul@multiplier:
  3655                           	opt stack 0
  3656  000026                     strtol@s:
  3657                           	opt stack 0
  3658  000026                     ___ftdiv@f2:
  3659                           	opt stack 0
  3660                           
  3661                           ; 3 bytes @ 0x25
  3662  000026                     	ds	2
  3663  000028                     AdcSingleSample@cType:
  3664                           	opt stack 0
  3665  000028                     StoreIntInEeprom@val:
  3666                           	opt stack 0
  3667  000028                     ___lltoft@exp:
  3668                           	opt stack 0
  3669  000028                     ___wmul@multiplicand:
  3670                           	opt stack 0
  3671  000028                     strtol@endptr:
  3672                           	opt stack 0
  3673  000028                     SWSPI_send_word@data:
  3674                           	opt stack 0
  3675                           
  3676                           ; 4 bytes @ 0x27
  3677  000028                     	ds	1
  3678  000029                     ??___ftdiv:
  3679  000029                     StoreIntInEeprom@idx:
  3680                           	opt stack 0
  3681                           
  3682                           ; 1 bytes @ 0x28
  3683  000029                     	ds	1
  3684  00002A                     ___wmul@product:
  3685                           	opt stack 0
  3686  00002A                     strtol@base:
  3687                           	opt stack 0
  3688                           
  3689                           ; 2 bytes @ 0x29
  3690  00002A                     	ds	2
  3691  00002C                     ??_strtol:
  3692  00002C                     ??___ftmul:
  3693  00002C                     SWSPI_send_word@dataSize:
  3694                           	opt stack 0
  3695                           
  3696                           ; 1 bytes @ 0x2B
  3697  00002C                     	ds	1
  3698  00002D                     SWSPI_send_word@datac:
  3699                           	opt stack 0
  3700                           
  3701                           ; 1 bytes @ 0x2C
  3702  00002D                     	ds	1
  3703  00002E                     SWSPI_send_word@idx:
  3704                           	opt stack 0
  3705                           
  3706                           ; 2 bytes @ 0x2D
  3707  00002E                     	ds	1
  3708  00002F                     ??_eval_poly:
  3709  00002F                     ___altoft@exp:
  3710                           	opt stack 0
  3711                           
  3712                           ; 1 bytes @ 0x2E
  3713  00002F                     	ds	1
  3714  000030                     SWSPI_send_word@phrType:
  3715                           	opt stack 0
  3716  000030                     ___altoft@sign:
  3717                           	opt stack 0
  3718                           
  3719                           ; 1 bytes @ 0x2F
  3720  000030                     	ds	1
  3721  000031                     tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1l	equ	0xFE1
  3729                           
  3730                           ; 1 bytes @ 0x30
  3731 ;;
  3732 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3733 ;;
  3734 ;; *************** function _main *****************
  3735 ;; Defined at:
  3736 ;;		line 13 in file "main.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3750 ;;      Params:         0       0       0       0       0       0       0
  3751 ;;      Locals:         0       0       0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0       0       0
  3753 ;;      Totals:         0       0       0       0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels required when called:   11
  3756 ;; This function calls:
  3757 ;;		_BlinkOkLeds
  3758 ;;		_InitSystemApplicationManagers
  3759 ;;		_SampleAllChannels
  3760 ;;		_SampleSingleChannel
  3761 ;;		_SendUartSystemInitMessage
  3762 ;;		_SetMcuRunTime
  3763 ;;		_SetMcuSystem
  3764 ;;		_keepAliveSignalLed
  3765 ;;		_readUartByte
  3766 ;; This function is called by:
  3767 ;;		Startup code after reset
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text0
  3772  003BA0                     __ptext0:
  3773                           	opt stack 0
  3774  003BA0                     _main:
  3775                           	opt stack 20
  3776                           
  3777                           ;main.c: 16: SetMcuSystem();
  3778                           
  3779                           ;incstack = 0
  3780  003BA0  ECB2  F022         	call	_SetMcuSystem	;wreg free
  3781                           
  3782                           ;main.c: 19: InitSystemApplicationManagers();
  3783  003BA4  EC75  F022         	call	_InitSystemApplicationManagers	;wreg free
  3784                           
  3785                           ;main.c: 22: SendUartSystemInitMessage();
  3786  003BA8  EC4F  F017         	call	_SendUartSystemInitMessage	;wreg free
  3787                           
  3788                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  3789  003BAC  0E03               	movlw	3
  3790  003BAE  EC30  F01E         	call	_BlinkOkLeds
  3791  003BB2                     
  3792                           ;main.c: 29: {
  3793                           ;main.c: 30: readUartByte();
  3794  003BB2  EC61  F006         	call	_readUartByte	;wreg free
  3795                           
  3796                           ;main.c: 32: if (TimerOneSecFlag == 1)
  3797  003BB6  0101               	movlb	1	; () banked
  3798  003BB8  05EE               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  3799  003BBA  A4D8               	btfss	status,2,c
  3800  003BBC  D006               	goto	l1627
  3801                           
  3802                           ; BSR set to: 1
  3803                           ;main.c: 33: {
  3804                           ;main.c: 35: SetMcuRunTime();
  3805  003BBE  ECB8  F01F         	call	_SetMcuRunTime	;wreg free
  3806                           
  3807                           ;main.c: 36: TimerOneSecFlag = 0;
  3808  003BC2  0E00               	movlw	0
  3809  003BC4  0101               	movlb	1	; () banked
  3810  003BC6  6FEE               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  3811                           
  3812                           ;main.c: 37: }
  3813  003BC8  D7F4               	goto	l1626
  3814  003BCA                     l1627:
  3815                           
  3816                           ; BSR set to: 1
  3817                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  3818                           
  3819                           ; BSR set to: 1
  3820  003BCA  05EC               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  3821  003BCC  A4D8               	btfss	status,2,c
  3822  003BCE  D006               	goto	l1629
  3823                           
  3824                           ; BSR set to: 1
  3825                           ;main.c: 39: {
  3826                           ;main.c: 40: keepAliveSignalLed();
  3827  003BD0  EC5E  F022         	call	_keepAliveSignalLed	;wreg free
  3828                           
  3829                           ;main.c: 41: TimerKeepAliveFlag = 0;
  3830  003BD4  0E00               	movlw	0
  3831  003BD6  0101               	movlb	1	; () banked
  3832  003BD8  6FEC               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  3833                           
  3834                           ;main.c: 42: }
  3835  003BDA  D7EB               	goto	l1626
  3836  003BDC                     l1629:
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;main.c: 43: else if (TimertenSecFlag == 1)
  3840                           
  3841                           ; BSR set to: 1
  3842  003BDC  05EB               	decf	_TimertenSecFlag& (0+255),w,b	;volatile
  3843  003BDE  A4D8               	btfss	status,2,c
  3844  003BE0  D006               	goto	l1631
  3845                           
  3846                           ; BSR set to: 1
  3847                           ;main.c: 44: {
  3848                           ;main.c: 45: SampleAllChannels();
  3849  003BE2  EC3C  F011         	call	_SampleAllChannels	;wreg free
  3850                           
  3851                           ;main.c: 51: TimertenSecFlag = 0;
  3852  003BE6  0E00               	movlw	0
  3853  003BE8  0101               	movlb	1	; () banked
  3854  003BEA  6FEB               	movwf	_TimertenSecFlag& (0+255),b	;volatile
  3855                           
  3856                           ;main.c: 52: }
  3857  003BEC  D7E2               	goto	l1626
  3858  003BEE                     l1631:
  3859                           
  3860                           ; BSR set to: 1
  3861                           ;main.c: 53: else if (TimerSamplingFlag == 1)
  3862                           
  3863                           ; BSR set to: 1
  3864  003BEE  05ED               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  3865  003BF0  A4D8               	btfss	status,2,c
  3866  003BF2  D7DF               	goto	l1626
  3867                           
  3868                           ; BSR set to: 1
  3869                           ;main.c: 54: {
  3870                           ;main.c: 55: if(1 == needToSample)
  3871  003BF4  05EA               	decf	_needToSample& (0+255),w,b	;volatile
  3872  003BF6  A4D8               	btfss	status,2,c
  3873  003BF8  D7DC               	goto	l1626
  3874                           
  3875                           ; BSR set to: 1
  3876                           ;main.c: 56: {
  3877                           ;main.c: 57: SampleSingleChannel();
  3878  003BFA  EC82  F010         	call	_SampleSingleChannel	;wreg free
  3879  003BFE  D7D9               	goto	l1626
  3880  003C00                     __end_of_main:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           postinc0	equ	0xFEE
  3887                           wreg	equ	0xFE8
  3888                           postdec1	equ	0xFE5
  3889                           fsr1l	equ	0xFE1
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _readUartByte *****************
  3893 ;; Defined at:
  3894 ;;		line 28 in file "EusartApp.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  idx             2  130[BANK1 ] int 
  3899 ;;  dest           50   80[BANK1 ] unsigned char [50]
  3900 ;;  chRec           1  132[BANK1 ] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3910 ;;      Params:         0       0       0       0       0       0       0
  3911 ;;      Locals:         0       0      53       0       0       0       0
  3912 ;;      Temps:          0       3       0       0       0       0       0
  3913 ;;      Totals:         0       3      53       0       0       0       0
  3914 ;;Total ram usage:       56 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    9
  3917 ;; This function calls:
  3918 ;;		_EUSART1_Read
  3919 ;;		_GroupCommon
  3920 ;;		_GroupRx
  3921 ;;		_GroupTx
  3922 ;;		_InitRxMessageParams
  3923 ;;		_UART_Write_Text
  3924 ;;		_sprintf
  3925 ;;		_toupper
  3926 ;; This function is called by:
  3927 ;;		_main
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text1
  3932  000CC2                     __ptext1:
  3933                           	opt stack 0
  3934  000CC2                     _readUartByte:
  3935                           	opt stack 21
  3936                           
  3937                           ;EusartApp.c: 31: uint8_t chRec = (0);
  3938                           
  3939                           ;incstack = 0
  3940  000CC2  0E00               	movlw	0
  3941  000CC4  0101               	movlb	1	; () banked
  3942  000CC6  6F84               	movwf	readUartByte@chRec& (0+255),b
  3943                           
  3944                           ;EusartApp.c: 32: char dest[50];
  3945                           ;EusartApp.c: 34: switch(cState)
  3946  000CC8  D147               	goto	l263
  3947  000CCA                     
  3948                           ; BSR set to: 1
  3949                           ;EusartApp.c: 38: InitRxMessageParams();
  3950                           
  3951                           ; BSR set to: 1
  3952  000CCA  ECDB  F01F         	call	_InitRxMessageParams	;wreg free
  3953                           
  3954                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  3955  000CCE  0E01               	movlw	1
  3956  000CD0  0101               	movlb	1	; () banked
  3957  000CD2  6FE6               	movwf	_cState& (0+255),b
  3958                           
  3959                           ;EusartApp.c: 40: break;
  3960  000CD4  0012               	return	
  3961  000CD6                     
  3962                           ; BSR set to: 1
  3963                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  3964                           
  3965                           ; BSR set to: 1
  3966  000CD6  ECFD  F01F         	call	_EUSART1_Read	;wreg free
  3967  000CDA  0101               	movlb	1	; () banked
  3968  000CDC  6F84               	movwf	readUartByte@chRec& (0+255),b
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;EusartApp.c: 46: if(chRec == (0x24))
  3972  000CDE  0E24               	movlw	36
  3973  000CE0  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  3974  000CE2  A4D8               	btfss	status,2,c
  3975  000CE4  0012               	return	
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;EusartApp.c: 47: {
  3979                           ;EusartApp.c: 48: cState = READ_STREAM;
  3980  000CE6  0E02               	movlw	2
  3981  000CE8  6FE6               	movwf	_cState& (0+255),b
  3982                           
  3983                           ; BSR set to: 1
  3984                           ;EusartApp.c: 49: }
  3985                           ;EusartApp.c: 50: break;
  3986  000CEA  0012               	return	
  3987  000CEC                     
  3988                           ; BSR set to: 1
  3989                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  3990                           
  3991                           ; BSR set to: 1
  3992  000CEC  51E7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  3993  000CEE  B4D8               	btfsc	status,2,c
  3994  000CF0  0012               	return	
  3995                           
  3996                           ; BSR set to: 1
  3997                           ;EusartApp.c: 55: {
  3998                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  3999  000CF2  ECFD  F01F         	call	_EUSART1_Read	;wreg free
  4000  000CF6  0101               	movlb	1	; () banked
  4001  000CF8  6F84               	movwf	readUartByte@chRec& (0+255),b
  4002                           
  4003                           ; BSR set to: 1
  4004                           ;EusartApp.c: 57: if(chRec == (0))
  4005  000CFA  5184               	movf	readUartByte@chRec& (0+255),w,b
  4006  000CFC  B4D8               	btfsc	status,2,c
  4007  000CFE  0012               	return	
  4008                           
  4009                           ; BSR set to: 1
  4010                           ;EusartApp.c: 61: else if(chRec == (0xd))
  4011                           
  4012                           ; BSR set to: 1
  4013                           
  4014                           ; BSR set to: 1
  4015                           ;EusartApp.c: 60: }
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;EusartApp.c: 58: {
  4019                           ;EusartApp.c: 59: return;
  4020  000D00  0E0D               	movlw	13
  4021  000D02  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4022  000D04  A4D8               	btfss	status,2,c
  4023  000D06  D003               	goto	l273
  4024                           
  4025                           ; BSR set to: 1
  4026                           ;EusartApp.c: 62: {
  4027                           ;EusartApp.c: 63: cState = READ_GROUP;
  4028  000D08  0E03               	movlw	3
  4029  000D0A  6FE6               	movwf	_cState& (0+255),b
  4030                           
  4031                           ;EusartApp.c: 64: }
  4032  000D0C  0012               	return	
  4033  000D0E                     l273:
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;EusartApp.c: 65: else
  4037                           ;EusartApp.c: 66: {
  4038                           ;EusartApp.c: 67: if(chRec != ' ')
  4039                           
  4040                           ; BSR set to: 1
  4041  000D0E  0E20               	movlw	32
  4042  000D10  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4043  000D12  B4D8               	btfsc	status,2,c
  4044  000D14  0012               	return	
  4045                           
  4046                           ; BSR set to: 1
  4047                           ;EusartApp.c: 68: {
  4048                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  4049  000D16  51E0               	movf	_msgCount& (0+255),w,b
  4050  000D18  0D01               	mullw	1
  4051  000D1A  0EC2               	movlw	low _rxMsgQueue
  4052  000D1C  24F3               	addwf	prodl,w,c
  4053  000D1E  6ED9               	movwf	fsr2l,c
  4054  000D20  0E02               	movlw	high _rxMsgQueue
  4055  000D22  20F4               	addwfc	prodh,w,c
  4056  000D24  6EDA               	movwf	fsr2h,c
  4057  000D26  C184  FFDF         	movff	readUartByte@chRec,indf2
  4058                           
  4059                           ; BSR set to: 1
  4060  000D2A  2BE0               	incf	_msgCount& (0+255),f,b
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;EusartApp.c: 76: }
  4064                           ;EusartApp.c: 77: break;
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;EusartApp.c: 73: else
  4068                           ;EusartApp.c: 74: {
  4069                           ;EusartApp.c: 75: return;
  4070                           
  4071                           ; BSR set to: 1
  4072                           ;EusartApp.c: 70: }
  4073                           ;EusartApp.c: 71: }
  4074                           ;EusartApp.c: 72: }
  4075                           
  4076                           ; BSR set to: 1
  4077                           
  4078                           ; BSR set to: 1
  4079  000D2C  0012               	return	
  4080  000D2E                     
  4081                           ; BSR set to: 1
  4082                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  4083                           
  4084                           ; BSR set to: 1
  4085  000D2E  0102               	movlb	2	; () banked
  4086  000D30  51C2               	movf	_rxMsgQueue& (0+255),w,b
  4087  000D32  EC80  F022         	call	_toupper
  4088  000D36  0101               	movlb	1	; () banked
  4089  000D38  6F84               	movwf	readUartByte@chRec& (0+255),b
  4090                           
  4091                           ;EusartApp.c: 83: switch(chRec)
  4092  000D3A  D024               	goto	l278
  4093  000D3C                     
  4094                           ; BSR set to: 1
  4095                           ;EusartApp.c: 87: group = RX_GROUP;
  4096                           
  4097                           ; BSR set to: 1
  4098  000D3C  0E00               	movlw	0
  4099  000D3E  6FE5               	movwf	_group& (0+255),b
  4100                           
  4101                           ;EusartApp.c: 88: cState = READ_REQUEST;
  4102  000D40  0E04               	movlw	4
  4103  000D42  6FE6               	movwf	_cState& (0+255),b
  4104                           
  4105                           ;EusartApp.c: 89: break;
  4106  000D44  0012               	return	
  4107  000D46                     
  4108                           ; BSR set to: 1
  4109                           ;EusartApp.c: 93: group = TX_GROUP;
  4110                           
  4111                           ; BSR set to: 1
  4112  000D46  0E01               	movlw	1
  4113  000D48  6FE5               	movwf	_group& (0+255),b
  4114                           
  4115                           ;EusartApp.c: 94: cState = READ_REQUEST;
  4116  000D4A  0E04               	movlw	4
  4117  000D4C  6FE6               	movwf	_cState& (0+255),b
  4118                           
  4119                           ;EusartApp.c: 95: break;
  4120  000D4E  0012               	return	
  4121  000D50                     
  4122                           ; BSR set to: 1
  4123                           ;EusartApp.c: 99: group = COMMON_GROUP;
  4124                           
  4125                           ; BSR set to: 1
  4126  000D50  0E02               	movlw	2
  4127  000D52  6FE5               	movwf	_group& (0+255),b
  4128                           
  4129                           ;EusartApp.c: 100: cState = READ_REQUEST;
  4130  000D54  0E04               	movlw	4
  4131  000D56  6FE6               	movwf	_cState& (0+255),b
  4132                           
  4133                           ;EusartApp.c: 101: break;
  4134  000D58  0012               	return	
  4135  000D5A                     
  4136                           ; BSR set to: 1
  4137                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  4138                           
  4139                           ; BSR set to: 1
  4140  000D5A  0E50               	movlw	low readUartByte@dest
  4141  000D5C  0100               	movlb	0	; () banked
  4142  000D5E  6FBC               	movwf	sprintf@sp& (0+255),b
  4143  000D60  0E01               	movlw	high readUartByte@dest
  4144  000D62  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  4145  000D64  0EB8               	movlw	low STR_10
  4146  000D66  6FBE               	movwf	sprintf@f& (0+255),b
  4147  000D68  0E7F               	movlw	high STR_10
  4148  000D6A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  4149  000D6C  EC70  F000         	call	_sprintf	;wreg free
  4150                           
  4151                           ;EusartApp.c: 105: UART_Write_Text(dest);
  4152  000D70  0E50               	movlw	low readUartByte@dest
  4153  000D72  6E19               	movwf	UART_Write_Text@text,c
  4154  000D74  0E01               	movlw	high readUartByte@dest
  4155  000D76  6E1A               	movwf	UART_Write_Text@text+1,c
  4156  000D78  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  4157                           
  4158                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  4159  000D7C  0E00               	movlw	0
  4160  000D7E  0101               	movlb	1	; () banked
  4161  000D80  6FE6               	movwf	_cState& (0+255),b
  4162                           
  4163                           ; BSR set to: 1
  4164                           ;EusartApp.c: 108: }
  4165                           
  4166                           ;EusartApp.c: 107: break;
  4167  000D82  0012               	return	
  4168  000D84                     l278:
  4169                           
  4170                           ; BSR set to: 1
  4171                           
  4172                           ; BSR set to: 1
  4173  000D84  5184               	movf	readUartByte@chRec& (0+255),w,b
  4174                           
  4175                           ; Switch size 1, requested type "space"
  4176                           ; Number of cases is 3, Range of values is 82 to 84
  4177                           ; switch strategies available:
  4178                           ; Name         Instructions Cycles
  4179                           ; simple_byte           10     6 (average)
  4180                           ;	Chosen strategy is simple_byte
  4181  000D86  0A52               	xorlw	82	; case 82
  4182  000D88  B4D8               	btfsc	status,2,c
  4183  000D8A  D7D8               	goto	l279
  4184  000D8C  0A01               	xorlw	1	; case 83
  4185  000D8E  B4D8               	btfsc	status,2,c
  4186  000D90  D7DF               	goto	l282
  4187  000D92  0A07               	xorlw	7	; case 84
  4188  000D94  B4D8               	btfsc	status,2,c
  4189  000D96  D7D7               	goto	l281
  4190  000D98  D7E0               	goto	l283
  4191  000D9A                     
  4192                           ; BSR set to: 1
  4193                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  4194                           
  4195                           ; BSR set to: 1
  4196  000D9A  0102               	movlb	2	; () banked
  4197  000D9C  51C3               	movf	(_rxMsgQueue+1)& (0+255),w,b
  4198  000D9E  EC80  F022         	call	_toupper
  4199  000DA2  0101               	movlb	1	; () banked
  4200  000DA4  6F84               	movwf	readUartByte@chRec& (0+255),b
  4201                           
  4202                           ;EusartApp.c: 115: switch(group)
  4203  000DA6  D068               	goto	l285
  4204  000DA8                     
  4205                           ; BSR set to: 1
  4206                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  4207                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'S' || chRec == 'C')
  4208                           
  4209                           ; BSR set to: 1
  4210  000DA8  0E49               	movlw	73
  4211  000DAA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4212  000DAC  B4D8               	btfsc	status,2,c
  4213  000DAE  D014               	goto	u10400
  4214                           
  4215                           ; BSR set to: 1
  4216  000DB0  0E46               	movlw	70
  4217  000DB2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4218  000DB4  B4D8               	btfsc	status,2,c
  4219  000DB6  D010               	goto	u10400
  4220                           
  4221                           ; BSR set to: 1
  4222  000DB8  0E51               	movlw	81
  4223  000DBA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4224  000DBC  B4D8               	btfsc	status,2,c
  4225  000DBE  D00C               	goto	u10400
  4226                           
  4227                           ; BSR set to: 1
  4228  000DC0  0E58               	movlw	88
  4229  000DC2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4230  000DC4  B4D8               	btfsc	status,2,c
  4231  000DC6  D008               	goto	u10400
  4232                           
  4233                           ; BSR set to: 1
  4234  000DC8  0E53               	movlw	83
  4235  000DCA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4236  000DCC  B4D8               	btfsc	status,2,c
  4237  000DCE  D004               	goto	u10400
  4238                           
  4239                           ; BSR set to: 1
  4240  000DD0  0E43               	movlw	67
  4241  000DD2  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4242  000DD4  A4D8               	btfss	status,2,c
  4243  000DD6  D006               	goto	l287
  4244  000DD8                     u10400:
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;EusartApp.c: 121: {
  4248                           ;EusartApp.c: 123: request = chRec - '0';
  4249                           
  4250                           ; BSR set to: 1
  4251  000DD8  5184               	movf	readUartByte@chRec& (0+255),w,b
  4252  000DDA  0FD0               	addlw	208
  4253  000DDC  6FE4               	movwf	_request& (0+255),b
  4254                           
  4255                           ; BSR set to: 1
  4256                           ;EusartApp.c: 124: cState = READ_DATA_SIZE;
  4257  000DDE  0E05               	movlw	5
  4258  000DE0  6FE6               	movwf	_cState& (0+255),b
  4259                           
  4260                           ;EusartApp.c: 126: }
  4261  000DE2  0012               	return	
  4262  000DE4                     l287:
  4263                           
  4264                           ; BSR set to: 1
  4265                           ;EusartApp.c: 127: else
  4266                           ;EusartApp.c: 128: {
  4267                           ;EusartApp.c: 129: UART_Write_Text("NOT OK \n\r");
  4268                           
  4269                           ; BSR set to: 1
  4270  000DE4  0ECD               	movlw	low STR_1
  4271  000DE6  6E19               	movwf	UART_Write_Text@text,c
  4272  000DE8  0E7F               	movlw	high STR_1
  4273  000DEA  6E1A               	movwf	UART_Write_Text@text+1,c
  4274  000DEC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  4275                           
  4276                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  4277  000DF0  0E00               	movlw	0
  4278  000DF2  0101               	movlb	1	; () banked
  4279  000DF4  6FE6               	movwf	_cState& (0+255),b
  4280                           
  4281                           ; BSR set to: 1
  4282                           ;EusartApp.c: 131: }
  4283                           ;EusartApp.c: 132: return;
  4284                           
  4285                           ; BSR set to: 1
  4286  000DF6  0012               	return	
  4287  000DF8                     
  4288                           ; BSR set to: 1
  4289                           ;EusartApp.c: 136: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  4290                           
  4291                           ; BSR set to: 1
  4292  000DF8  0E49               	movlw	73
  4293  000DFA  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4294  000DFC  B4D8               	btfsc	status,2,c
  4295  000DFE  D014               	goto	u10460
  4296                           
  4297                           ; BSR set to: 1
  4298  000E00  0E46               	movlw	70
  4299  000E02  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4300  000E04  B4D8               	btfsc	status,2,c
  4301  000E06  D010               	goto	u10460
  4302                           
  4303                           ; BSR set to: 1
  4304  000E08  0E51               	movlw	81
  4305  000E0A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4306  000E0C  B4D8               	btfsc	status,2,c
  4307  000E0E  D00C               	goto	u10460
  4308                           
  4309                           ; BSR set to: 1
  4310  000E10  0E58               	movlw	88
  4311  000E12  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4312  000E14  B4D8               	btfsc	status,2,c
  4313  000E16  D008               	goto	u10460
  4314                           
  4315                           ; BSR set to: 1
  4316  000E18  0E42               	movlw	66
  4317  000E1A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4318  000E1C  B4D8               	btfsc	status,2,c
  4319  000E1E  D004               	goto	u10460
  4320                           
  4321                           ; BSR set to: 1
  4322  000E20  0E53               	movlw	83
  4323  000E22  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4324  000E24  A4D8               	btfss	status,2,c
  4325  000E26  D006               	goto	l292
  4326  000E28                     u10460:
  4327                           
  4328                           ; BSR set to: 1
  4329                           ;EusartApp.c: 137: {
  4330                           ;EusartApp.c: 138: request = (chRec - '0');
  4331                           
  4332                           ; BSR set to: 1
  4333  000E28  5184               	movf	readUartByte@chRec& (0+255),w,b
  4334  000E2A  0FD0               	addlw	208
  4335  000E2C  6FE4               	movwf	_request& (0+255),b
  4336                           
  4337                           ; BSR set to: 1
  4338                           ;EusartApp.c: 139: cState = READ_DATA_SIZE;
  4339  000E2E  0E05               	movlw	5
  4340  000E30  6FE6               	movwf	_cState& (0+255),b
  4341                           
  4342                           ; BSR set to: 1
  4343                           ;EusartApp.c: 141: }
  4344                           
  4345                           ; BSR set to: 1
  4346                           ;EusartApp.c: 140: return;
  4347  000E32  0012               	return	
  4348  000E34                     l292:
  4349                           
  4350                           ; BSR set to: 1
  4351                           ;EusartApp.c: 142: else
  4352                           ;EusartApp.c: 143: {
  4353                           ;EusartApp.c: 144: UART_Write_Text("NOT OK \n\r");
  4354                           
  4355                           ; BSR set to: 1
  4356  000E34  0ECD               	movlw	low STR_1
  4357  000E36  6E19               	movwf	UART_Write_Text@text,c
  4358  000E38  0E7F               	movlw	high STR_1
  4359  000E3A  6E1A               	movwf	UART_Write_Text@text+1,c
  4360  000E3C  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  4361                           
  4362                           ;EusartApp.c: 145: cState = START_RX_MESSAGE_READ;
  4363  000E40  0E00               	movlw	0
  4364  000E42  0101               	movlb	1	; () banked
  4365  000E44  6FE6               	movwf	_cState& (0+255),b
  4366                           
  4367                           ; BSR set to: 1
  4368                           ;EusartApp.c: 146: }
  4369                           ;EusartApp.c: 147: break;
  4370  000E46  0012               	return	
  4371  000E48                     
  4372                           ; BSR set to: 1
  4373                           ;EusartApp.c: 151: if(chRec == 'H' || chRec == 'L')
  4374                           
  4375                           ; BSR set to: 1
  4376  000E48  0E48               	movlw	72
  4377  000E4A  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4378  000E4C  B4D8               	btfsc	status,2,c
  4379  000E4E  D004               	goto	u10480
  4380                           
  4381                           ; BSR set to: 1
  4382  000E50  0E4C               	movlw	76
  4383  000E52  1984               	xorwf	readUartByte@chRec& (0+255),w,b
  4384  000E54  A4D8               	btfss	status,2,c
  4385  000E56  D006               	goto	l298
  4386  000E58                     u10480:
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;EusartApp.c: 152: {
  4390                           ;EusartApp.c: 153: request = (chRec - '0');
  4391                           
  4392                           ; BSR set to: 1
  4393  000E58  5184               	movf	readUartByte@chRec& (0+255),w,b
  4394  000E5A  0FD0               	addlw	208
  4395  000E5C  6FE4               	movwf	_request& (0+255),b
  4396                           
  4397                           ; BSR set to: 1
  4398                           ;EusartApp.c: 154: cState = READ_DATA_SIZE;
  4399  000E5E  0E05               	movlw	5
  4400  000E60  6FE6               	movwf	_cState& (0+255),b
  4401                           
  4402                           ;EusartApp.c: 155: }
  4403  000E62  0012               	return	
  4404  000E64                     l298:
  4405                           
  4406                           ; BSR set to: 1
  4407                           ;EusartApp.c: 156: else
  4408                           ;EusartApp.c: 157: {
  4409                           ;EusartApp.c: 158: UART_Write_Text("NOT OK \n\r");
  4410                           
  4411                           ; BSR set to: 1
  4412  000E64  0ECD               	movlw	low STR_1
  4413  000E66  6E19               	movwf	UART_Write_Text@text,c
  4414  000E68  0E7F               	movlw	high STR_1
  4415  000E6A  6E1A               	movwf	UART_Write_Text@text+1,c
  4416  000E6C  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  4417                           
  4418                           ;EusartApp.c: 159: cState = START_RX_MESSAGE_READ;
  4419  000E70  0E00               	movlw	0
  4420  000E72  0101               	movlb	1	; () banked
  4421  000E74  6FE6               	movwf	_cState& (0+255),b
  4422                           
  4423                           ; BSR set to: 1
  4424                           ;EusartApp.c: 160: }
  4425                           ;EusartApp.c: 161: }
  4426  000E76  0012               	return	
  4427  000E78                     l285:
  4428                           
  4429                           ; BSR set to: 1
  4430                           
  4431                           ; BSR set to: 1
  4432  000E78  51E5               	movf	_group& (0+255),w,b
  4433                           
  4434                           ; Switch size 1, requested type "space"
  4435                           ; Number of cases is 3, Range of values is 0 to 2
  4436                           ; switch strategies available:
  4437                           ; Name         Instructions Cycles
  4438                           ; simple_byte           10     6 (average)
  4439                           ;	Chosen strategy is simple_byte
  4440  000E7A  0A00               	xorlw	0	; case 0
  4441  000E7C  B4D8               	btfsc	status,2,c
  4442  000E7E  D794               	goto	l286
  4443  000E80  0A01               	xorlw	1	; case 1
  4444  000E82  B4D8               	btfsc	status,2,c
  4445  000E84  D7B9               	goto	l291
  4446  000E86  0A03               	xorlw	3	; case 2
  4447  000E88  A4D8               	btfss	status,2,c
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;EusartApp.c: 162: return;
  4451  000E8A  0012               	return	
  4452  000E8C  D7DD               	goto	l297
  4453  000E8E                     
  4454                           ; BSR set to: 1
  4455                           ;EusartApp.c: 166: dataSize = msgCount - 2;
  4456                           
  4457                           ; BSR set to: 1
  4458  000E8E  51E0               	movf	_msgCount& (0+255),w,b
  4459  000E90  0FFE               	addlw	254
  4460  000E92  6FE3               	movwf	_dataSize& (0+255),b
  4461                           
  4462                           ; BSR set to: 1
  4463                           ;EusartApp.c: 167: rxMsgData[(0x0)] = dataSize;
  4464  000E94  C1E3  F2AE         	movff	_dataSize,_rxMsgData
  4465                           
  4466                           ; BSR set to: 1
  4467                           ;EusartApp.c: 168: if(dataSize == 0)
  4468  000E98  51E3               	movf	_dataSize& (0+255),w,b
  4469  000E9A  A4D8               	btfss	status,2,c
  4470  000E9C  D003               	goto	l303
  4471                           
  4472                           ; BSR set to: 1
  4473                           ;EusartApp.c: 169: {
  4474                           ;EusartApp.c: 170: cState = JUMP_FUNCTION;
  4475  000E9E  0E08               	movlw	8
  4476  000EA0  6FE6               	movwf	_cState& (0+255),b
  4477                           
  4478                           ;EusartApp.c: 171: }
  4479  000EA2  0012               	return	
  4480  000EA4                     l303:
  4481                           
  4482                           ; BSR set to: 1
  4483                           ;EusartApp.c: 172: else
  4484                           ;EusartApp.c: 173: {
  4485                           ;EusartApp.c: 174: cState = READ_DATA;
  4486                           
  4487                           ; BSR set to: 1
  4488  000EA4  0E06               	movlw	6
  4489  000EA6  6FE6               	movwf	_cState& (0+255),b
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;EusartApp.c: 175: }
  4493                           ;EusartApp.c: 177: break;
  4494  000EA8  0012               	return	
  4495  000EAA                     
  4496                           ; BSR set to: 1
  4497                           ;EusartApp.c: 181: for(int idx = 1; idx < dataSize + 1; idx++)
  4498                           
  4499                           ; BSR set to: 1
  4500  000EAA  0E00               	movlw	0
  4501  000EAC  6F83               	movwf	(readUartByte@idx+1)& (0+255),b
  4502  000EAE  0E01               	movlw	1
  4503  000EB0  6F82               	movwf	readUartByte@idx& (0+255),b
  4504  000EB2  D01B               	goto	l306
  4505  000EB4                     
  4506                           ;EusartApp.c: 182: {
  4507                           ;EusartApp.c: 183: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  4508                           
  4509                           ; BSR set to: 1
  4510  000EB4  0E01               	movlw	1
  4511  000EB6  0101               	movlb	1	; () banked
  4512  000EB8  2582               	addwf	readUartByte@idx& (0+255),w,b
  4513  000EBA  0100               	movlb	0	; () banked
  4514  000EBC  6FEC               	movwf	??_readUartByte& (0+255),b
  4515  000EBE  0E00               	movlw	0
  4516  000EC0  0101               	movlb	1	; () banked
  4517  000EC2  2183               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4518  000EC4  0100               	movlb	0	; () banked
  4519  000EC6  6FED               	movwf	(??_readUartByte+1)& (0+255),b
  4520  000EC8  0EC2               	movlw	low _rxMsgQueue
  4521  000ECA  25EC               	addwf	??_readUartByte& (0+255),w,b
  4522  000ECC  6ED9               	movwf	fsr2l,c
  4523  000ECE  0E02               	movlw	high _rxMsgQueue
  4524  000ED0  21ED               	addwfc	(??_readUartByte+1)& (0+255),w,b
  4525  000ED2  6EDA               	movwf	fsr2h,c
  4526  000ED4  0EAE               	movlw	low _rxMsgData
  4527  000ED6  0101               	movlb	1	; () banked
  4528  000ED8  2582               	addwf	readUartByte@idx& (0+255),w,b
  4529  000EDA  6EE1               	movwf	fsr1l,c
  4530  000EDC  0E02               	movlw	high _rxMsgData
  4531  000EDE  2183               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  4532  000EE0  6EE2               	movwf	fsr1h,c
  4533  000EE2  CFDF FFE7          	movff	indf2,indf1
  4534                           
  4535                           ; BSR set to: 1
  4536  000EE6  4B82               	infsnz	readUartByte@idx& (0+255),f,b
  4537  000EE8  2B83               	incf	(readUartByte@idx+1)& (0+255),f,b
  4538  000EEA                     l306:
  4539                           
  4540                           ; BSR set to: 1
  4541                           
  4542                           ; BSR set to: 1
  4543  000EEA  51E3               	movf	_dataSize& (0+255),w,b
  4544  000EEC  0100               	movlb	0	; () banked
  4545  000EEE  6FEC               	movwf	??_readUartByte& (0+255),b
  4546  000EF0  6BED               	clrf	(??_readUartByte+1)& (0+255),b
  4547  000EF2  0E01               	movlw	1
  4548  000EF4  27EC               	addwf	??_readUartByte& (0+255),f,b
  4549  000EF6  0E00               	movlw	0
  4550  000EF8  23ED               	addwfc	(??_readUartByte+1)& (0+255),f,b
  4551  000EFA  51EC               	movf	??_readUartByte& (0+255),w,b
  4552  000EFC  0101               	movlb	1	; () banked
  4553  000EFE  5D82               	subwf	readUartByte@idx& (0+255),w,b
  4554  000F00  5183               	movf	(readUartByte@idx+1)& (0+255),w,b
  4555  000F02  0A80               	xorlw	128
  4556  000F04  0100               	movlb	0	; () banked
  4557  000F06  6FEE               	movwf	(??_readUartByte+2)& (0+255),b
  4558  000F08  51ED               	movf	(??_readUartByte+1)& (0+255),w,b
  4559  000F0A  0A80               	xorlw	128
  4560  000F0C  59EE               	subwfb	(??_readUartByte+2)& (0+255),w,b
  4561  000F0E  A0D8               	btfss	status,0,c
  4562  000F10  D7D1               	goto	l307
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;EusartApp.c: 184: }
  4566                           ;EusartApp.c: 186: cState = JUMP_FUNCTION;
  4567                           
  4568                           ; BSR set to: 0
  4569  000F12  0E08               	movlw	8
  4570  000F14  0101               	movlb	1	; () banked
  4571  000F16  6FE6               	movwf	_cState& (0+255),b
  4572                           
  4573                           ;EusartApp.c: 187: break;
  4574  000F18  0012               	return	
  4575  000F1A                     
  4576                           ; BSR set to: 1
  4577                           ;EusartApp.c: 191: groupsArray[group](request, rxMsgData);
  4578                           
  4579                           ; BSR set to: 1
  4580  000F1A  51E5               	movf	_group& (0+255),w,b
  4581  000F1C  0D02               	mullw	2
  4582  000F1E  0ED6               	movlw	low _groupsArray
  4583  000F20  24F3               	addwf	prodl,w,c
  4584  000F22  6ED9               	movwf	fsr2l,c
  4585  000F24  0E02               	movlw	high _groupsArray
  4586  000F26  20F4               	addwfc	prodh,w,c
  4587  000F28  6EDA               	movwf	fsr2h,c
  4588  000F2A  D801               	call	u10518
  4589  000F2C  D011               	goto	u10519
  4590  000F2E                     u10518:
  4591  000F2E  0005               	push	
  4592  000F30  6EFA               	movwf	pclath,c
  4593  000F32  50DE               	movf	postinc2,w,c
  4594  000F34  6EFD               	movwf	tosl,c
  4595  000F36  50DE               	movf	postinc2,w,c
  4596  000F38  6EFE               	movwf	tosh,c
  4597  000F3A  50F8               	movf	tblptru,w,c
  4598  000F3C  6EFF               	movwf	tosu,c
  4599  000F3E  50FA               	movf	pclath,w,c
  4600  000F40  0EAE               	movlw	low _rxMsgData
  4601  000F42  0100               	movlb	0	; () banked
  4602  000F44  6FE2               	movwf	GroupCommon@data& (0+255),b
  4603  000F46  0E02               	movlw	high _rxMsgData
  4604  000F48  6FE3               	movwf	(GroupCommon@data+1)& (0+255),b
  4605  000F4A  0101               	movlb	1	; () banked
  4606  000F4C  51E4               	movf	_request& (0+255),w,b
  4607  000F4E  0012               	return		;indir
  4608  000F50                     u10519:
  4609                           
  4610                           ;EusartApp.c: 192: cState = START_RX_MESSAGE_READ;
  4611  000F50  0E00               	movlw	0
  4612  000F52  0101               	movlb	1	; () banked
  4613  000F54  6FE6               	movwf	_cState& (0+255),b
  4614                           
  4615                           ; BSR set to: 1
  4616                           ;EusartApp.c: 194: }
  4617                           
  4618                           ;EusartApp.c: 193: break;
  4619  000F56  0012               	return	
  4620  000F58                     l263:
  4621                           
  4622                           ; BSR set to: 1
  4623                           
  4624                           ; BSR set to: 1
  4625  000F58  51E6               	movf	_cState& (0+255),w,b
  4626                           
  4627                           ; Switch size 1, requested type "space"
  4628                           ; Number of cases is 8, Range of values is 0 to 8
  4629                           ; switch strategies available:
  4630                           ; Name         Instructions Cycles
  4631                           ; simple_byte           25    13 (average)
  4632                           ;	Chosen strategy is simple_byte
  4633  000F5A  0A00               	xorlw	0	; case 0
  4634  000F5C  B4D8               	btfsc	status,2,c
  4635  000F5E  D6B5               	goto	l264
  4636  000F60  0A01               	xorlw	1	; case 1
  4637  000F62  B4D8               	btfsc	status,2,c
  4638  000F64  D6B8               	goto	l266
  4639  000F66  0A03               	xorlw	3	; case 2
  4640  000F68  B4D8               	btfsc	status,2,c
  4641  000F6A  D6C0               	goto	l268
  4642  000F6C  0A01               	xorlw	1	; case 3
  4643  000F6E  B4D8               	btfsc	status,2,c
  4644  000F70  D6DE               	goto	l277
  4645  000F72  0A07               	xorlw	7	; case 4
  4646  000F74  B4D8               	btfsc	status,2,c
  4647  000F76  D711               	goto	l284
  4648  000F78  0A01               	xorlw	1	; case 5
  4649  000F7A  B4D8               	btfsc	status,2,c
  4650  000F7C  D788               	goto	l302
  4651  000F7E  0A03               	xorlw	3	; case 6
  4652  000F80  B4D8               	btfsc	status,2,c
  4653  000F82  D793               	goto	l305
  4654  000F84  0A0E               	xorlw	14	; case 8
  4655  000F86  A4D8               	btfss	status,2,c
  4656  000F88  0012               	return	
  4657  000F8A  D7C7               	goto	l309
  4658  000F8C                     __end_of_readUartByte:
  4659                           	opt stack 0
  4660                           tosu	equ	0xFFF
  4661                           tosh	equ	0xFFE
  4662                           tosl	equ	0xFFD
  4663                           pclath	equ	0xFFA
  4664                           tblptru	equ	0xFF8
  4665                           tblptrh	equ	0xFF7
  4666                           tblptrl	equ	0xFF6
  4667                           tablat	equ	0xFF5
  4668                           prodh	equ	0xFF4
  4669                           prodl	equ	0xFF3
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           indf1	equ	0xFE7
  4673                           postdec1	equ	0xFE5
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           fsr2h	equ	0xFDA
  4679                           fsr2l	equ	0xFD9
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _InitRxMessageParams *****************
  4683 ;; Defined at:
  4684 ;;		line 197 in file "EusartApp.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      void 
  4691 ;; Registers used:
  4692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4698 ;;      Params:         0       0       0       0       0       0       0
  4699 ;;      Locals:         0       0       0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0
  4701 ;;      Totals:         0       0       0       0       0       0       0
  4702 ;;Total ram usage:        0 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    5
  4705 ;; This function calls:
  4706 ;;		_ZeroArray
  4707 ;; This function is called by:
  4708 ;;		_readUartByte
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text2
  4713  003FB6                     __ptext2:
  4714                           	opt stack 0
  4715  003FB6                     _InitRxMessageParams:
  4716                           	opt stack 24
  4717                           
  4718                           ;EusartApp.c: 199: group = 0;
  4719                           
  4720                           ; BSR set to: 1
  4721                           ;incstack = 0
  4722  003FB6  0E00               	movlw	0
  4723  003FB8  0101               	movlb	1	; () banked
  4724  003FBA  6FE5               	movwf	_group& (0+255),b
  4725                           
  4726                           ;EusartApp.c: 200: request = 0;
  4727  003FBC  0E00               	movlw	0
  4728  003FBE  6FE4               	movwf	_request& (0+255),b
  4729                           
  4730                           ;EusartApp.c: 201: msgCount = 0;
  4731  003FC0  0E00               	movlw	0
  4732  003FC2  6FE0               	movwf	_msgCount& (0+255),b
  4733                           
  4734                           ;EusartApp.c: 202: dataSize = 0;
  4735  003FC4  0E00               	movlw	0
  4736  003FC6  6FE3               	movwf	_dataSize& (0+255),b
  4737                           
  4738                           ;EusartApp.c: 203: crcCalc = 0;
  4739  003FC8  0E00               	movlw	0
  4740  003FCA  6FE2               	movwf	_crcCalc& (0+255),b
  4741                           
  4742                           ;EusartApp.c: 204: crcGiven = 0;
  4743  003FCC  0E00               	movlw	0
  4744  003FCE  6FE1               	movwf	_crcGiven& (0+255),b
  4745                           
  4746                           ; BSR set to: 1
  4747                           ;EusartApp.c: 205: ZeroArray(rxMsgQueue, (0x14));
  4748  003FD0  0EC2               	movlw	low _rxMsgQueue
  4749  003FD2  6E20               	movwf	ZeroArray@array,c
  4750  003FD4  0E02               	movlw	high _rxMsgQueue
  4751  003FD6  6E21               	movwf	ZeroArray@array+1,c
  4752  003FD8  0E00               	movlw	0
  4753  003FDA  6E23               	movwf	ZeroArray@size+1,c
  4754  003FDC  0E14               	movlw	20
  4755  003FDE  6E22               	movwf	ZeroArray@size,c
  4756  003FE0  EC34  F022         	call	_ZeroArray
  4757                           
  4758                           ;EusartApp.c: 206: ZeroArray(rxMsgData, (0x14));
  4759  003FE4  0EAE               	movlw	low _rxMsgData
  4760  003FE6  6E20               	movwf	ZeroArray@array,c
  4761  003FE8  0E02               	movlw	high _rxMsgData
  4762  003FEA  6E21               	movwf	ZeroArray@array+1,c
  4763  003FEC  0E00               	movlw	0
  4764  003FEE  6E23               	movwf	ZeroArray@size+1,c
  4765  003FF0  0E14               	movlw	20
  4766  003FF2  6E22               	movwf	ZeroArray@size,c
  4767  003FF4  EC34  F022         	call	_ZeroArray	;wreg free
  4768  003FF8  0012               	return		;funcret
  4769  003FFA                     __end_of_InitRxMessageParams:
  4770                           	opt stack 0
  4771                           tosu	equ	0xFFF
  4772                           tosh	equ	0xFFE
  4773                           tosl	equ	0xFFD
  4774                           pclath	equ	0xFFA
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           indf1	equ	0xFE7
  4784                           postdec1	equ	0xFE5
  4785                           fsr1h	equ	0xFE2
  4786                           fsr1l	equ	0xFE1
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _GroupCommon *****************
  4794 ;; Defined at:
  4795 ;;		line 96 in file "MessageFunctions.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  request         1    wreg     enum E6
  4798 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4799 ;;		 -> rxMsgData(20), 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  request         1  132[BANK0 ] enum E6
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         0       2       0       0       0       0       0
  4812 ;;      Locals:         0       1       0       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0
  4814 ;;      Totals:         0       3       0       0       0       0       0
  4815 ;;Total ram usage:        3 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    8
  4818 ;; This function calls:
  4819 ;;		_PrintHelpScreen
  4820 ;;		_testLeds
  4821 ;; This function is called by:
  4822 ;;		_readUartByte
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text3
  4827  0043C0                     __ptext3:
  4828                           	opt stack 0
  4829  0043C0                     _GroupCommon:
  4830                           	opt stack 21
  4831                           
  4832                           ;incstack = 0
  4833                           ;GroupCommon@request stored from wreg
  4834  0043C0  0100               	movlb	0	; () banked
  4835  0043C2  6FE4               	movwf	GroupCommon@request& (0+255),b
  4836                           
  4837                           ;MessageFunctions.c: 98: switch (request)
  4838  0043C4  D006               	goto	l1350
  4839  0043C6                     
  4840                           ;MessageFunctions.c: 101: PrintHelpScreen();
  4841  0043C6  ECC6  F007         	call	_PrintHelpScreen	;wreg free
  4842                           
  4843                           ;MessageFunctions.c: 102: break;
  4844  0043CA  0012               	return	
  4845  0043CC                     
  4846                           ;MessageFunctions.c: 105: testLeds();
  4847  0043CC  EC00  F01E         	call	_testLeds	;wreg free
  4848                           
  4849                           ;MessageFunctions.c: 112: }
  4850                           
  4851                           ;MessageFunctions.c: 111: break;
  4852                           
  4853                           ;MessageFunctions.c: 110: default:
  4854                           
  4855                           ;MessageFunctions.c: 106: break;
  4856  0043D0  0012               	return	
  4857  0043D2                     l1350:
  4858  0043D2  0100               	movlb	0	; () banked
  4859  0043D4  51E4               	movf	GroupCommon@request& (0+255),w,b
  4860                           
  4861                           ; Switch size 1, requested type "space"
  4862                           ; Number of cases is 2, Range of values is 24 to 28
  4863                           ; switch strategies available:
  4864                           ; Name         Instructions Cycles
  4865                           ; simple_byte            7     4 (average)
  4866                           ;	Chosen strategy is simple_byte
  4867  0043D6  0A18               	xorlw	24	; case 24
  4868  0043D8  B4D8               	btfsc	status,2,c
  4869  0043DA  D7F5               	goto	l1351
  4870  0043DC  0A04               	xorlw	4	; case 28
  4871  0043DE  A4D8               	btfss	status,2,c
  4872  0043E0  0012               	return	
  4873  0043E2  D7F4               	goto	l1353
  4874  0043E4                     __end_of_GroupCommon:
  4875                           	opt stack 0
  4876                           tosu	equ	0xFFF
  4877                           tosh	equ	0xFFE
  4878                           tosl	equ	0xFFD
  4879                           pclath	equ	0xFFA
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           postinc0	equ	0xFEE
  4887                           wreg	equ	0xFE8
  4888                           indf1	equ	0xFE7
  4889                           postdec1	equ	0xFE5
  4890                           fsr1h	equ	0xFE2
  4891                           fsr1l	equ	0xFE1
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _GroupRx *****************
  4899 ;; Defined at:
  4900 ;;		line 14 in file "MessageFunctions.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  request         1    wreg     enum E6
  4903 ;;  data            2  130[BANK0 ] PTR unsigned char 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  request         1  139[BANK0 ] enum E6
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4915 ;;      Params:         0       2       0       0       0       0       0
  4916 ;;      Locals:         0       7       0       0       0       0       0
  4917 ;;      Temps:          0       1       0       0       0       0       0
  4918 ;;      Totals:         0      10       0       0       0       0       0
  4919 ;;Total ram usage:       10 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    8
  4922 ;; This function calls:
  4923 ;;		_AdcSingleSample
  4924 ;;		_CollectRxStatusParams
  4925 ;;		_GetIntFromUartData
  4926 ;;		_PrintRxStatus
  4927 ;;		___awtoft
  4928 ;;		___fttol
  4929 ;;		___llmod
  4930 ;;		_pow
  4931 ;; This function is called by:
  4932 ;;		_readUartByte
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text4
  4937  002994                     __ptext4:
  4938                           	opt stack 0
  4939  002994                     _GroupRx:
  4940                           	opt stack 21
  4941                           
  4942                           ;incstack = 0
  4943                           ;GroupRx@request stored from wreg
  4944  002994  0100               	movlb	0	; () banked
  4945  002996  6FEB               	movwf	GroupRx@request& (0+255),b
  4946                           
  4947                           ;MessageFunctions.c: 16: switch (request)
  4948  002998  D077               	goto	l1324
  4949  00299A                     
  4950                           ;MessageFunctions.c: 28: CollectRxStatusParams();
  4951  00299A  EC65  F01D         	call	_CollectRxStatusParams	;wreg free
  4952                           
  4953                           ;MessageFunctions.c: 29: PrintRxStatus();
  4954  00299E  EC45  F00B         	call	_PrintRxStatus	;wreg free
  4955                           
  4956                           ;MessageFunctions.c: 36: break;
  4957                           
  4958                           ;MessageFunctions.c: 35: case TX_RX_SET_OPERATION_MODE:
  4959                           
  4960                           ;MessageFunctions.c: 33: break;
  4961                           
  4962                           ;MessageFunctions.c: 32: case TX_RX_SET_BIT_MODE:
  4963                           
  4964                           ;MessageFunctions.c: 30: break;
  4965  0029A2  0012               	return	
  4966  0029A4                     
  4967                           ;MessageFunctions.c: 39: retNum = GetIntFromUartData(data);
  4968  0029A4  C0E2  F066         	movff	GroupRx@data,GetIntFromUartData@data
  4969  0029A8  C0E3  F067         	movff	GroupRx@data+1,GetIntFromUartData@data+1
  4970  0029AC  ECD6  F01A         	call	_GetIntFromUartData	;wreg free
  4971  0029B0  C066  F1C4         	movff	?_GetIntFromUartData,_retNum
  4972  0029B4  C067  F1C5         	movff	?_GetIntFromUartData+1,_retNum+1
  4973  0029B8  C068  F1C6         	movff	?_GetIntFromUartData+2,_retNum+2
  4974  0029BC  C069  F1C7         	movff	?_GetIntFromUartData+3,_retNum+3
  4975                           
  4976                           ;MessageFunctions.c: 40: channelNum = data[1] - '0';
  4977  0029C0  0100               	movlb	0	; () banked
  4978  0029C2  EE20 F001          	lfsr	2,1
  4979  0029C6  51E2               	movf	GroupRx@data& (0+255),w,b
  4980  0029C8  26D9               	addwf	fsr2l,f,c
  4981  0029CA  51E3               	movf	(GroupRx@data+1)& (0+255),w,b
  4982  0029CC  22DA               	addwfc	fsr2h,f,c
  4983  0029CE  50DF               	movf	indf2,w,c
  4984  0029D0  6FE4               	movwf	??_GroupRx& (0+255),b
  4985  0029D2  0ED0               	movlw	208
  4986  0029D4  25E4               	addwf	??_GroupRx& (0+255),w,b
  4987  0029D6  6E37               	movwf	_channelNum,c
  4988  0029D8  6A38               	clrf	_channelNum+1,c
  4989  0029DA  0EFF               	movlw	255
  4990  0029DC  2238               	addwfc	_channelNum+1,f,c
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  4994  0029DE  C0E2  FFD9         	movff	GroupRx@data,fsr2l
  4995  0029E2  C0E3  FFDA         	movff	GroupRx@data+1,fsr2h
  4996  0029E6  50DF               	movf	indf2,w,c
  4997  0029E8  6FE4               	movwf	??_GroupRx& (0+255),b
  4998  0029EA  0EFF               	movlw	255
  4999  0029EC  25E4               	addwf	??_GroupRx& (0+255),w,b
  5000  0029EE  6E20               	movwf	___awtoft@c,c
  5001  0029F0  6A21               	clrf	___awtoft@c+1,c
  5002  0029F2  0EFF               	movlw	255
  5003  0029F4  2221               	addwfc	___awtoft@c+1,f,c
  5004  0029F6  ECD7  F020         	call	___awtoft	;wreg free
  5005  0029FA  C020  F0E5         	movff	?___awtoft,_GroupRx$3944
  5006  0029FE  C021  F0E6         	movff	?___awtoft+1,_GroupRx$3944+1
  5007  002A02  C022  F0E7         	movff	?___awtoft+2,_GroupRx$3944+2
  5008                           
  5009                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5010  002A06  C0E5  F0A5         	movff	_GroupRx$3944,pow@y
  5011  002A0A  C0E6  F0A6         	movff	_GroupRx$3944+1,pow@y+1
  5012  002A0E  C0E7  F0A7         	movff	_GroupRx$3944+2,pow@y+2
  5013  002A12  0E00               	movlw	0
  5014  002A14  0100               	movlb	0	; () banked
  5015  002A16  6FA2               	movwf	pow@x& (0+255),b
  5016  002A18  0E20               	movlw	32
  5017  002A1A  6FA3               	movwf	(pow@x+1)& (0+255),b
  5018  002A1C  0E41               	movlw	65
  5019  002A1E  6FA4               	movwf	(pow@x+2)& (0+255),b
  5020  002A20  ECC2  F00F         	call	_pow	;wreg free
  5021  002A24  C0A2  F0E8         	movff	?_pow,_GroupRx$3945
  5022  002A28  C0A3  F0E9         	movff	?_pow+1,_GroupRx$3945+1
  5023  002A2C  C0A4  F0EA         	movff	?_pow+2,_GroupRx$3945+2
  5024                           
  5025                           ;MessageFunctions.c: 41: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5026  002A30  C1C4  F0B3         	movff	_retNum,___llmod@dividend
  5027  002A34  C1C5  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5028  002A38  C1C6  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5029  002A3C  C1C7  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5030  002A40  C0E8  F079         	movff	_GroupRx$3945,___fttol@f1
  5031  002A44  C0E9  F07A         	movff	_GroupRx$3945+1,___fttol@f1+1
  5032  002A48  C0EA  F07B         	movff	_GroupRx$3945+2,___fttol@f1+2
  5033  002A4C  ECE4  F015         	call	___fttol	;wreg free
  5034  002A50  0100               	movlb	0	; () banked
  5035  002A52  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5036  002A56  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5037  002A5A  0E00               	movlw	0
  5038  002A5C  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5039  002A5E  0EFF               	movlw	-1
  5040  002A60  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5041  002A62  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5042  002A64  EC9C  F01D         	call	___llmod	;wreg free
  5043  002A68  C0B3  F1D4         	movff	?___llmod,_numSamples
  5044  002A6C  C0B4  F1D5         	movff	?___llmod+1,_numSamples+1
  5045                           
  5046                           ;MessageFunctions.c: 42: AdcSingleSample(RX_TYPE, channelNum, numSamples);
  5047  002A70  C037  F01F         	movff	_channelNum,AdcSingleSample@chType
  5048  002A74  C1D4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5049  002A78  C1D5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5050  002A7C  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5051  002A7E  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5052  002A80  0E01               	movlw	1
  5053  002A82  EC57  F015         	call	_AdcSingleSample
  5054                           
  5055                           ;MessageFunctions.c: 51: }
  5056                           
  5057                           ;MessageFunctions.c: 50: break;
  5058                           
  5059                           ;MessageFunctions.c: 49: default:
  5060                           
  5061                           ;MessageFunctions.c: 47: break;
  5062  002A86  0012               	return	
  5063  002A88                     l1324:
  5064  002A88  0100               	movlb	0	; () banked
  5065  002A8A  51EB               	movf	GroupRx@request& (0+255),w,b
  5066                           
  5067                           ; Switch size 1, requested type "space"
  5068                           ; Number of cases is 6, Range of values is 18 to 40
  5069                           ; switch strategies available:
  5070                           ; Name         Instructions Cycles
  5071                           ; simple_byte           19    10 (average)
  5072                           ;	Chosen strategy is simple_byte
  5073  002A8C  0A12               	xorlw	18	; case 18
  5074  002A8E  B4D8               	btfsc	status,2,c
  5075  002A90  0012               	return	
  5076  002A92  0A04               	xorlw	4	; case 22
  5077  002A94  B4D8               	btfsc	status,2,c
  5078  002A96  0012               	return	
  5079  002A98  0A0F               	xorlw	15	; case 25
  5080  002A9A  B4D8               	btfsc	status,2,c
  5081  002A9C  0012               	return	
  5082  002A9E  0A38               	xorlw	56	; case 33
  5083  002AA0  B4D8               	btfsc	status,2,c
  5084  002AA2  D77B               	goto	l1328
  5085  002AA4  0A02               	xorlw	2	; case 35
  5086  002AA6  B4D8               	btfsc	status,2,c
  5087  002AA8  D77D               	goto	l1331
  5088  002AAA  0A0B               	xorlw	11	; case 40
  5089  002AAC  0012               	return	
  5090  002AAE                     __end_of_GroupRx:
  5091                           	opt stack 0
  5092                           tosu	equ	0xFFF
  5093                           tosh	equ	0xFFE
  5094                           tosl	equ	0xFFD
  5095                           pclath	equ	0xFFA
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf1	equ	0xFE7
  5105                           postdec1	equ	0xFE5
  5106                           fsr1h	equ	0xFE2
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _GroupTx *****************
  5115 ;; Defined at:
  5116 ;;		line 54 in file "MessageFunctions.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  request         1    wreg     enum E6
  5119 ;;  data            2  130[BANK0 ] PTR unsigned char 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  request         1  139[BANK0 ] enum E6
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5131 ;;      Params:         0       2       0       0       0       0       0
  5132 ;;      Locals:         0       7       0       0       0       0       0
  5133 ;;      Temps:          0       1       0       0       0       0       0
  5134 ;;      Totals:         0      10       0       0       0       0       0
  5135 ;;Total ram usage:       10 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    8
  5138 ;; This function calls:
  5139 ;;		_AdcSingleSample
  5140 ;;		_CollectTxStatusParams
  5141 ;;		_GetIntFromUartData
  5142 ;;		_PrintTxStatus
  5143 ;;		___awtoft
  5144 ;;		___fttol
  5145 ;;		___llmod
  5146 ;;		_pow
  5147 ;; This function is called by:
  5148 ;;		_readUartByte
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text5
  5153  002748                     __ptext5:
  5154                           	opt stack 0
  5155  002748                     _GroupTx:
  5156                           	opt stack 21
  5157                           
  5158                           ;incstack = 0
  5159                           ;GroupTx@request stored from wreg
  5160  002748  0100               	movlb	0	; () banked
  5161  00274A  6FEB               	movwf	GroupTx@request& (0+255),b
  5162                           
  5163                           ;MessageFunctions.c: 56: switch (request)
  5164  00274C  D077               	goto	l1336
  5165  00274E                     
  5166                           ;MessageFunctions.c: 67: CollectTxStatusParams();
  5167  00274E  ECB9  F01C         	call	_CollectTxStatusParams	;wreg free
  5168                           
  5169                           ;MessageFunctions.c: 68: PrintTxStatus();
  5170  002752  EC4A  F00A         	call	_PrintTxStatus	;wreg free
  5171                           
  5172                           ;MessageFunctions.c: 81: break;
  5173                           
  5174                           ;MessageFunctions.c: 80: case RX_SET_COMRESSION_RANGE:
  5175                           
  5176                           ;MessageFunctions.c: 78: break;
  5177                           
  5178                           ;MessageFunctions.c: 77: case RX_SET_COMRESSION_MODE:
  5179                           
  5180                           ;MessageFunctions.c: 75: break;
  5181                           
  5182                           ;MessageFunctions.c: 74: case TX_RX_SET_OPERATION_MODE:
  5183                           
  5184                           ;MessageFunctions.c: 72: break;
  5185                           
  5186                           ;MessageFunctions.c: 71: case TX_RX_SET_BIT_MODE:
  5187                           
  5188                           ;MessageFunctions.c: 69: break;
  5189  002756  0012               	return	
  5190  002758                     
  5191                           ;MessageFunctions.c: 84: retNum = GetIntFromUartData(data);
  5192  002758  C0E2  F066         	movff	GroupTx@data,GetIntFromUartData@data
  5193  00275C  C0E3  F067         	movff	GroupTx@data+1,GetIntFromUartData@data+1
  5194  002760  ECD6  F01A         	call	_GetIntFromUartData	;wreg free
  5195  002764  C066  F1C4         	movff	?_GetIntFromUartData,_retNum
  5196  002768  C067  F1C5         	movff	?_GetIntFromUartData+1,_retNum+1
  5197  00276C  C068  F1C6         	movff	?_GetIntFromUartData+2,_retNum+2
  5198  002770  C069  F1C7         	movff	?_GetIntFromUartData+3,_retNum+3
  5199                           
  5200                           ;MessageFunctions.c: 85: channelNum = data[1] - '0';
  5201  002774  0100               	movlb	0	; () banked
  5202  002776  EE20 F001          	lfsr	2,1
  5203  00277A  51E2               	movf	GroupTx@data& (0+255),w,b
  5204  00277C  26D9               	addwf	fsr2l,f,c
  5205  00277E  51E3               	movf	(GroupTx@data+1)& (0+255),w,b
  5206  002780  22DA               	addwfc	fsr2h,f,c
  5207  002782  50DF               	movf	indf2,w,c
  5208  002784  6FE4               	movwf	??_GroupTx& (0+255),b
  5209  002786  0ED0               	movlw	208
  5210  002788  25E4               	addwf	??_GroupTx& (0+255),w,b
  5211  00278A  6E37               	movwf	_channelNum,c
  5212  00278C  6A38               	clrf	_channelNum+1,c
  5213  00278E  0EFF               	movlw	255
  5214  002790  2238               	addwfc	_channelNum+1,f,c
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5218  002792  C0E2  FFD9         	movff	GroupTx@data,fsr2l
  5219  002796  C0E3  FFDA         	movff	GroupTx@data+1,fsr2h
  5220  00279A  50DF               	movf	indf2,w,c
  5221  00279C  6FE4               	movwf	??_GroupTx& (0+255),b
  5222  00279E  0EFF               	movlw	255
  5223  0027A0  25E4               	addwf	??_GroupTx& (0+255),w,b
  5224  0027A2  6E20               	movwf	___awtoft@c,c
  5225  0027A4  6A21               	clrf	___awtoft@c+1,c
  5226  0027A6  0EFF               	movlw	255
  5227  0027A8  2221               	addwfc	___awtoft@c+1,f,c
  5228  0027AA  ECD7  F020         	call	___awtoft	;wreg free
  5229  0027AE  C020  F0E5         	movff	?___awtoft,_GroupTx$3946
  5230  0027B2  C021  F0E6         	movff	?___awtoft+1,_GroupTx$3946+1
  5231  0027B6  C022  F0E7         	movff	?___awtoft+2,_GroupTx$3946+2
  5232                           
  5233                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5234  0027BA  C0E5  F0A5         	movff	_GroupTx$3946,pow@y
  5235  0027BE  C0E6  F0A6         	movff	_GroupTx$3946+1,pow@y+1
  5236  0027C2  C0E7  F0A7         	movff	_GroupTx$3946+2,pow@y+2
  5237  0027C6  0E00               	movlw	0
  5238  0027C8  0100               	movlb	0	; () banked
  5239  0027CA  6FA2               	movwf	pow@x& (0+255),b
  5240  0027CC  0E20               	movlw	32
  5241  0027CE  6FA3               	movwf	(pow@x+1)& (0+255),b
  5242  0027D0  0E41               	movlw	65
  5243  0027D2  6FA4               	movwf	(pow@x+2)& (0+255),b
  5244  0027D4  ECC2  F00F         	call	_pow	;wreg free
  5245  0027D8  C0A2  F0E8         	movff	?_pow,_GroupTx$3947
  5246  0027DC  C0A3  F0E9         	movff	?_pow+1,_GroupTx$3947+1
  5247  0027E0  C0A4  F0EA         	movff	?_pow+2,_GroupTx$3947+2
  5248                           
  5249                           ;MessageFunctions.c: 86: numSamples = retNum % (int)(pow(10,data[0] - 1));
  5250  0027E4  C1C4  F0B3         	movff	_retNum,___llmod@dividend
  5251  0027E8  C1C5  F0B4         	movff	_retNum+1,___llmod@dividend+1
  5252  0027EC  C1C6  F0B5         	movff	_retNum+2,___llmod@dividend+2
  5253  0027F0  C1C7  F0B6         	movff	_retNum+3,___llmod@dividend+3
  5254  0027F4  C0E8  F079         	movff	_GroupTx$3947,___fttol@f1
  5255  0027F8  C0E9  F07A         	movff	_GroupTx$3947+1,___fttol@f1+1
  5256  0027FC  C0EA  F07B         	movff	_GroupTx$3947+2,___fttol@f1+2
  5257  002800  ECE4  F015         	call	___fttol	;wreg free
  5258  002804  0100               	movlb	0	; () banked
  5259  002806  C079  F0B7         	movff	?___fttol,___llmod@divisor
  5260  00280A  C07A  F0B8         	movff	?___fttol+1,___llmod@divisor+1
  5261  00280E  0E00               	movlw	0
  5262  002810  BFB8               	btfsc	(___llmod@divisor+1)& (0+255),7,b
  5263  002812  0EFF               	movlw	-1
  5264  002814  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  5265  002816  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  5266  002818  EC9C  F01D         	call	___llmod	;wreg free
  5267  00281C  C0B3  F1D4         	movff	?___llmod,_numSamples
  5268  002820  C0B4  F1D5         	movff	?___llmod+1,_numSamples+1
  5269                           
  5270                           ;MessageFunctions.c: 87: AdcSingleSample(TX_TYPE, channelNum, numSamples);
  5271  002824  C037  F01F         	movff	_channelNum,AdcSingleSample@chType
  5272  002828  C1D4  F020         	movff	_numSamples,AdcSingleSample@numSamples
  5273  00282C  C1D5  F021         	movff	_numSamples+1,AdcSingleSample@numSamples+1
  5274  002830  6A22               	clrf	AdcSingleSample@numSamples+2,c
  5275  002832  6A23               	clrf	AdcSingleSample@numSamples+3,c
  5276  002834  0E00               	movlw	0
  5277  002836  EC57  F015         	call	_AdcSingleSample
  5278                           
  5279                           ;MessageFunctions.c: 93: }
  5280                           
  5281                           ;MessageFunctions.c: 92: break;
  5282                           
  5283                           ;MessageFunctions.c: 91: default:
  5284                           
  5285                           ;MessageFunctions.c: 89: break;
  5286  00283A  0012               	return	
  5287  00283C                     l1336:
  5288  00283C  0100               	movlb	0	; () banked
  5289  00283E  51EB               	movf	GroupTx@request& (0+255),w,b
  5290                           
  5291                           ; Switch size 1, requested type "space"
  5292                           ; Number of cases is 8, Range of values is 18 to 101
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte           25    13 (average)
  5296                           ;	Chosen strategy is simple_byte
  5297  002840  0A12               	xorlw	18	; case 18
  5298  002842  B4D8               	btfsc	status,2,c
  5299  002844  0012               	return	
  5300  002846  0A04               	xorlw	4	; case 22
  5301  002848  B4D8               	btfsc	status,2,c
  5302  00284A  0012               	return	
  5303  00284C  0A0F               	xorlw	15	; case 25
  5304  00284E  B4D8               	btfsc	status,2,c
  5305  002850  0012               	return	
  5306  002852  0A38               	xorlw	56	; case 33
  5307  002854  B4D8               	btfsc	status,2,c
  5308  002856  D77B               	goto	l1340
  5309  002858  0A02               	xorlw	2	; case 35
  5310  00285A  B4D8               	btfsc	status,2,c
  5311  00285C  D77D               	goto	l1345
  5312  00285E  0A0B               	xorlw	11	; case 40
  5313  002860  B4D8               	btfsc	status,2,c
  5314  002862  0012               	return	
  5315  002864  0A4B               	xorlw	75	; case 99
  5316  002866  B4D8               	btfsc	status,2,c
  5317  002868  0012               	return	
  5318  00286A  0A06               	xorlw	6	; case 101
  5319  00286C  0012               	return	
  5320  00286E                     __end_of_GroupTx:
  5321                           	opt stack 0
  5322                           tosu	equ	0xFFF
  5323                           tosh	equ	0xFFE
  5324                           tosl	equ	0xFFD
  5325                           pclath	equ	0xFFA
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           indf1	equ	0xFE7
  5335                           postdec1	equ	0xFE5
  5336                           fsr1h	equ	0xFE2
  5337                           fsr1l	equ	0xFE1
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _PrintTxStatus *****************
  5345 ;; Defined at:
  5346 ;;		line 205 in file "SystemStatus.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;		None
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         0       0       0       0       0       0       0
  5361 ;;      Locals:         0       0      80       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0
  5363 ;;      Totals:         0       0      80       0       0       0       0
  5364 ;;Total ram usage:       80 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    7
  5367 ;; This function calls:
  5368 ;;		_UART_Write_Text
  5369 ;;		_sprintf
  5370 ;; This function is called by:
  5371 ;;		_GroupTx
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text6
  5376  001494                     __ptext6:
  5377                           	opt stack 0
  5378  001494                     _PrintTxStatus:
  5379                           	opt stack 21
  5380                           
  5381                           ;SystemStatus.c: 207: char dest[80];
  5382                           ;SystemStatus.c: 208: sprintf(dest, "*******************\n\r");
  5383                           
  5384                           ;incstack = 0
  5385  001494  0E00               	movlw	low PrintTxStatus@dest
  5386  001496  0100               	movlb	0	; () banked
  5387  001498  6FBC               	movwf	sprintf@sp& (0+255),b
  5388  00149A  0E01               	movlw	high PrintTxStatus@dest
  5389  00149C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5390  00149E  0E09               	movlw	low STR_46
  5391  0014A0  6FBE               	movwf	sprintf@f& (0+255),b
  5392  0014A2  0E7F               	movlw	high STR_46
  5393  0014A4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5394  0014A6  EC70  F000         	call	_sprintf	;wreg free
  5395                           
  5396                           ;SystemStatus.c: 209: UART_Write_Text(dest);
  5397  0014AA  0E00               	movlw	low PrintTxStatus@dest
  5398  0014AC  6E19               	movwf	UART_Write_Text@text,c
  5399  0014AE  0E01               	movlw	high PrintTxStatus@dest
  5400  0014B0  6E1A               	movwf	UART_Write_Text@text+1,c
  5401  0014B2  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5402                           
  5403                           ;SystemStatus.c: 210: sprintf(dest, "TX SYNTH (PLL) Lock indication %d\n\r",txStatistics
      +                          .Synt);
  5404  0014B6  0E00               	movlw	low PrintTxStatus@dest
  5405  0014B8  0100               	movlb	0	; () banked
  5406  0014BA  6FBC               	movwf	sprintf@sp& (0+255),b
  5407  0014BC  0E01               	movlw	high PrintTxStatus@dest
  5408  0014BE  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5409  0014C0  0E76               	movlw	low STR_59
  5410  0014C2  6FBE               	movwf	sprintf@f& (0+255),b
  5411  0014C4  0E7D               	movlw	high STR_59
  5412  0014C6  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5413  0014C8  C185  F0C0         	movff	_txStatistics,?_sprintf+4	;volatile
  5414  0014CC  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5415  0014CE  EC70  F000         	call	_sprintf	;wreg free
  5416                           
  5417                           ;SystemStatus.c: 211: UART_Write_Text(dest);
  5418  0014D2  0E00               	movlw	low PrintTxStatus@dest
  5419  0014D4  6E19               	movwf	UART_Write_Text@text,c
  5420  0014D6  0E01               	movlw	high PrintTxStatus@dest
  5421  0014D8  6E1A               	movwf	UART_Write_Text@text+1,c
  5422  0014DA  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5423                           
  5424                           ;SystemStatus.c: 212: sprintf(dest, "Device Temperature %f\n\r",txStatistics.DeviceTempe
      +                          rature);
  5425  0014DE  0E00               	movlw	low PrintTxStatus@dest
  5426  0014E0  0100               	movlb	0	; () banked
  5427  0014E2  6FBC               	movwf	sprintf@sp& (0+255),b
  5428  0014E4  0E01               	movlw	high PrintTxStatus@dest
  5429  0014E6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5430  0014E8  0E93               	movlw	low STR_48
  5431  0014EA  6FBE               	movwf	sprintf@f& (0+255),b
  5432  0014EC  0E7E               	movlw	high STR_48
  5433  0014EE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5434  0014F0  C18B  F0C0         	movff	_txStatistics+6,?_sprintf+4	;volatile
  5435  0014F4  C18C  F0C1         	movff	_txStatistics+7,?_sprintf+5	;volatile
  5436  0014F8  C18D  F0C2         	movff	_txStatistics+8,?_sprintf+6	;volatile
  5437  0014FC  EC70  F000         	call	_sprintf	;wreg free
  5438                           
  5439                           ;SystemStatus.c: 213: UART_Write_Text(dest);
  5440  001500  0E00               	movlw	low PrintTxStatus@dest
  5441  001502  6E19               	movwf	UART_Write_Text@text,c
  5442  001504  0E01               	movlw	high PrintTxStatus@dest
  5443  001506  6E1A               	movwf	UART_Write_Text@text+1,c
  5444  001508  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5445                           
  5446                           ;SystemStatus.c: 214: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",txStatistics
      +                          .InputPowerStatus);
  5447  00150C  0E00               	movlw	low PrintTxStatus@dest
  5448  00150E  0100               	movlb	0	; () banked
  5449  001510  6FBC               	movwf	sprintf@sp& (0+255),b
  5450  001512  0E01               	movlw	high PrintTxStatus@dest
  5451  001514  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5452  001516  0E9A               	movlw	low STR_49
  5453  001518  6FBE               	movwf	sprintf@f& (0+255),b
  5454  00151A  0E7D               	movlw	high STR_49
  5455  00151C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5456  00151E  C18E  F0C0         	movff	_txStatistics+9,?_sprintf+4	;volatile
  5457  001522  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5458  001524  EC70  F000         	call	_sprintf	;wreg free
  5459                           
  5460                           ;SystemStatus.c: 215: UART_Write_Text(dest);
  5461  001528  0E00               	movlw	low PrintTxStatus@dest
  5462  00152A  6E19               	movwf	UART_Write_Text@text,c
  5463  00152C  0E01               	movlw	high PrintTxStatus@dest
  5464  00152E  6E1A               	movwf	UART_Write_Text@text+1,c
  5465  001530  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5466                           
  5467                           ;SystemStatus.c: 216: sprintf(dest, "TX Frequency in MHz%f\n\r",txStatistics.Freq);
  5468  001534  0E00               	movlw	low PrintTxStatus@dest
  5469  001536  0100               	movlb	0	; () banked
  5470  001538  6FBC               	movwf	sprintf@sp& (0+255),b
  5471  00153A  0E01               	movlw	high PrintTxStatus@dest
  5472  00153C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5473  00153E  0EC3               	movlw	low STR_62
  5474  001540  6FBE               	movwf	sprintf@f& (0+255),b
  5475  001542  0E7E               	movlw	high STR_62
  5476  001544  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5477  001546  C18F  F0C0         	movff	_txStatistics+10,?_sprintf+4	;volatile
  5478  00154A  C190  F0C1         	movff	_txStatistics+11,?_sprintf+5	;volatile
  5479  00154E  C191  F0C2         	movff	_txStatistics+12,?_sprintf+6	;volatile
  5480  001552  EC70  F000         	call	_sprintf	;wreg free
  5481                           
  5482                           ;SystemStatus.c: 217: UART_Write_Text(dest);
  5483  001556  0E00               	movlw	low PrintTxStatus@dest
  5484  001558  6E19               	movwf	UART_Write_Text@text,c
  5485  00155A  0E01               	movlw	high PrintTxStatus@dest
  5486  00155C  6E1A               	movwf	UART_Write_Text@text+1,c
  5487  00155E  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5488                           
  5489                           ;SystemStatus.c: 218: sprintf(dest, "RSSI %d\n\r",txStatistics.RSSI);
  5490  001562  0E00               	movlw	low PrintTxStatus@dest
  5491  001564  0100               	movlb	0	; () banked
  5492  001566  6FBC               	movwf	sprintf@sp& (0+255),b
  5493  001568  0E01               	movlw	high PrintTxStatus@dest
  5494  00156A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5495  00156C  0EC3               	movlw	low STR_51
  5496  00156E  6FBE               	movwf	sprintf@f& (0+255),b
  5497  001570  0E7F               	movlw	high STR_51
  5498  001572  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5499  001574  0101               	movlb	1	; () banked
  5500  001576  5192               	movf	(_txStatistics+13)& (0+255),w,b	;volatile
  5501  001578  0100               	movlb	0	; () banked
  5502  00157A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5503  00157C  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5504  00157E  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5505  001580  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5506  001582  EC70  F000         	call	_sprintf	;wreg free
  5507                           
  5508                           ;SystemStatus.c: 219: UART_Write_Text(dest);
  5509  001586  0E00               	movlw	low PrintTxStatus@dest
  5510  001588  6E19               	movwf	UART_Write_Text@text,c
  5511  00158A  0E01               	movlw	high PrintTxStatus@dest
  5512  00158C  6E1A               	movwf	UART_Write_Text@text+1,c
  5513  00158E  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5514                           
  5515                           ;SystemStatus.c: 220: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",txStatistics.Light);
  5516  001592  0E00               	movlw	low PrintTxStatus@dest
  5517  001594  0100               	movlb	0	; () banked
  5518  001596  6FBC               	movwf	sprintf@sp& (0+255),b
  5519  001598  0E01               	movlw	high PrintTxStatus@dest
  5520  00159A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5521  00159C  0EF2               	movlw	low STR_52
  5522  00159E  6FBE               	movwf	sprintf@f& (0+255),b
  5523  0015A0  0E7E               	movlw	high STR_52
  5524  0015A2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5525  0015A4  C196  F0C0         	movff	_txStatistics+17,?_sprintf+4	;volatile
  5526  0015A8  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5527  0015AA  EC70  F000         	call	_sprintf	;wreg free
  5528                           
  5529                           ;SystemStatus.c: 221: UART_Write_Text(dest);
  5530  0015AE  0E00               	movlw	low PrintTxStatus@dest
  5531  0015B0  6E19               	movwf	UART_Write_Text@text,c
  5532  0015B2  0E01               	movlw	high PrintTxStatus@dest
  5533  0015B4  6E1A               	movwf	UART_Write_Text@text+1,c
  5534  0015B6  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5535                           
  5536                           ;SystemStatus.c: 222: sprintf(dest, "UNIT ID %d\n\r",txStatistics.UnitId);
  5537  0015BA  0E00               	movlw	low PrintTxStatus@dest
  5538  0015BC  0100               	movlb	0	; () banked
  5539  0015BE  6FBC               	movwf	sprintf@sp& (0+255),b
  5540  0015C0  0E01               	movlw	high PrintTxStatus@dest
  5541  0015C2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5542  0015C4  0E9F               	movlw	low STR_53
  5543  0015C6  6FBE               	movwf	sprintf@f& (0+255),b
  5544  0015C8  0E7F               	movlw	high STR_53
  5545  0015CA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5546  0015CC  0101               	movlb	1	; () banked
  5547  0015CE  5197               	movf	(_txStatistics+18)& (0+255),w,b	;volatile
  5548  0015D0  0100               	movlb	0	; () banked
  5549  0015D2  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5550  0015D4  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5551  0015D6  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5552  0015D8  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5553  0015DA  EC70  F000         	call	_sprintf	;wreg free
  5554                           
  5555                           ;SystemStatus.c: 223: UART_Write_Text(dest);
  5556  0015DE  0E00               	movlw	low PrintTxStatus@dest
  5557  0015E0  6E19               	movwf	UART_Write_Text@text,c
  5558  0015E2  0E01               	movlw	high PrintTxStatus@dest
  5559  0015E4  6E1A               	movwf	UART_Write_Text@text+1,c
  5560  0015E6  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5561                           
  5562                           ;SystemStatus.c: 224: sprintf(dest, "UNIT DC %d\n\r",txStatistics.UnitDc);
  5563  0015EA  0E00               	movlw	low PrintTxStatus@dest
  5564  0015EC  0100               	movlb	0	; () banked
  5565  0015EE  6FBC               	movwf	sprintf@sp& (0+255),b
  5566  0015F0  0E01               	movlw	high PrintTxStatus@dest
  5567  0015F2  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5568  0015F4  0E92               	movlw	low STR_54
  5569  0015F6  6FBE               	movwf	sprintf@f& (0+255),b
  5570  0015F8  0E7F               	movlw	high STR_54
  5571  0015FA  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5572  0015FC  C198  F0C0         	movff	_txStatistics+19,?_sprintf+4	;volatile
  5573  001600  C199  F0C1         	movff	_txStatistics+20,?_sprintf+5	;volatile
  5574  001604  EC70  F000         	call	_sprintf	;wreg free
  5575                           
  5576                           ;SystemStatus.c: 225: UART_Write_Text(dest);
  5577  001608  0E00               	movlw	low PrintTxStatus@dest
  5578  00160A  6E19               	movwf	UART_Write_Text@text,c
  5579  00160C  0E01               	movlw	high PrintTxStatus@dest
  5580  00160E  6E1A               	movwf	UART_Write_Text@text+1,c
  5581  001610  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5582                           
  5583                           ;SystemStatus.c: 226: sprintf(dest, "SOFTWARE VERSION %s\n\r",txStatistics.SwVersion);
  5584  001614  0E00               	movlw	low PrintTxStatus@dest
  5585  001616  0100               	movlb	0	; () banked
  5586  001618  6FBC               	movwf	sprintf@sp& (0+255),b
  5587  00161A  0E01               	movlw	high PrintTxStatus@dest
  5588  00161C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5589  00161E  0E1F               	movlw	low STR_55
  5590  001620  6FBE               	movwf	sprintf@f& (0+255),b
  5591  001622  0E7F               	movlw	high STR_55
  5592  001624  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5593  001626  C19A  F0C0         	movff	_txStatistics+21,?_sprintf+4	;volatile
  5594  00162A  C19B  F0C1         	movff	_txStatistics+22,?_sprintf+5	;volatile
  5595  00162E  EC70  F000         	call	_sprintf	;wreg free
  5596                           
  5597                           ;SystemStatus.c: 227: UART_Write_Text(dest);
  5598  001632  0E00               	movlw	low PrintTxStatus@dest
  5599  001634  6E19               	movwf	UART_Write_Text@text,c
  5600  001636  0E01               	movlw	high PrintTxStatus@dest
  5601  001638  6E1A               	movwf	UART_Write_Text@text+1,c
  5602  00163A  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5603                           
  5604                           ;SystemStatus.c: 228: sprintf(dest, "UNIT TYPE %d\n\r",txStatistics.UnitType);
  5605  00163E  0E00               	movlw	low PrintTxStatus@dest
  5606  001640  0100               	movlb	0	; () banked
  5607  001642  6FBC               	movwf	sprintf@sp& (0+255),b
  5608  001644  0E01               	movlw	high PrintTxStatus@dest
  5609  001646  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5610  001648  0E83               	movlw	low STR_56
  5611  00164A  6FBE               	movwf	sprintf@f& (0+255),b
  5612  00164C  0E7F               	movlw	high STR_56
  5613  00164E  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5614  001650  C19C  F0C0         	movff	_txStatistics+23,?_sprintf+4	;volatile
  5615  001654  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5616  001656  EC70  F000         	call	_sprintf	;wreg free
  5617                           
  5618                           ;SystemStatus.c: 229: UART_Write_Text(dest);
  5619  00165A  0E00               	movlw	low PrintTxStatus@dest
  5620  00165C  6E19               	movwf	UART_Write_Text@text,c
  5621  00165E  0E01               	movlw	high PrintTxStatus@dest
  5622  001660  6E1A               	movwf	UART_Write_Text@text+1,c
  5623  001662  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5624                           
  5625                           ;SystemStatus.c: 230: sprintf(dest, "*******************\n\r");
  5626  001666  0E00               	movlw	low PrintTxStatus@dest
  5627  001668  0100               	movlb	0	; () banked
  5628  00166A  6FBC               	movwf	sprintf@sp& (0+255),b
  5629  00166C  0E01               	movlw	high PrintTxStatus@dest
  5630  00166E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5631  001670  0E09               	movlw	low STR_46
  5632  001672  6FBE               	movwf	sprintf@f& (0+255),b
  5633  001674  0E7F               	movlw	high STR_46
  5634  001676  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5635  001678  EC70  F000         	call	_sprintf	;wreg free
  5636                           
  5637                           ;SystemStatus.c: 231: UART_Write_Text(dest);
  5638  00167C  0E00               	movlw	low PrintTxStatus@dest
  5639  00167E  6E19               	movwf	UART_Write_Text@text,c
  5640  001680  0E01               	movlw	high PrintTxStatus@dest
  5641  001682  6E1A               	movwf	UART_Write_Text@text+1,c
  5642  001684  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5643  001688  0012               	return		;funcret
  5644  00168A                     __end_of_PrintTxStatus:
  5645                           	opt stack 0
  5646                           tosu	equ	0xFFF
  5647                           tosh	equ	0xFFE
  5648                           tosl	equ	0xFFD
  5649                           pclath	equ	0xFFA
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           postinc0	equ	0xFEE
  5657                           wreg	equ	0xFE8
  5658                           indf1	equ	0xFE7
  5659                           postdec1	equ	0xFE5
  5660                           fsr1h	equ	0xFE2
  5661                           fsr1l	equ	0xFE1
  5662                           indf2	equ	0xFDF
  5663                           postinc2	equ	0xFDE
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function _CollectTxStatusParams *****************
  5669 ;; Defined at:
  5670 ;;		line 160 in file "SystemStatus.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5684 ;;      Params:         0       0       0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0
  5686 ;;      Temps:          0       0       0       0       0       0       0
  5687 ;;      Totals:         0       0       0       0       0       0       0
  5688 ;;Total ram usage:        0 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    5
  5691 ;; This function calls:
  5692 ;;		___lltoft
  5693 ;;		___lwtoft
  5694 ;; This function is called by:
  5695 ;;		_GroupTx
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           	psect	text7
  5700  003972                     __ptext7:
  5701                           	opt stack 0
  5702  003972                     _CollectTxStatusParams:
  5703                           	opt stack 23
  5704                           
  5705                           ;SystemStatus.c: 162: txStatistics.Synt = txFreq;
  5706                           
  5707                           ;incstack = 0
  5708  003972  C1C8  F185         	movff	_txFreq,_txStatistics	;volatile
  5709                           
  5710                           ;SystemStatus.c: 163: txStatistics.DeviceTemperature = lastAdcTemp;
  5711  003976  C1DE  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  5712  00397A  C1DF  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  5713  00397E  ECF2  F021         	call	___lwtoft	;wreg free
  5714  003982  C020  F18B         	movff	?___lwtoft,_txStatistics+6	;volatile
  5715  003986  C021  F18C         	movff	?___lwtoft+1,_txStatistics+7	;volatile
  5716  00398A  C022  F18D         	movff	?___lwtoft+2,_txStatistics+8	;volatile
  5717                           
  5718                           ;SystemStatus.c: 164: txStatistics.InputPowerStatus = PORTDbits.RD6;
  5719  00398E  0E00               	movlw	0
  5720  003990  BC83               	btfsc	3971,6,c	;volatile
  5721  003992  0E01               	movlw	1
  5722  003994  0101               	movlb	1	; () banked
  5723  003996  6F8E               	movwf	(_txStatistics+9)& (0+255),b	;volatile
  5724                           
  5725                           ; BSR set to: 1
  5726                           ;SystemStatus.c: 165: txStatistics.Freq = txFreq;
  5727  003998  C1C8  F020         	movff	_txFreq,___lltoft@c	;volatile
  5728  00399C  C1C9  F021         	movff	_txFreq+1,___lltoft@c+1	;volatile
  5729  0039A0  C1CA  F022         	movff	_txFreq+2,___lltoft@c+2	;volatile
  5730  0039A4  C1CB  F023         	movff	_txFreq+3,___lltoft@c+3	;volatile
  5731  0039A8  EC8D  F01E         	call	___lltoft	;wreg free
  5732  0039AC  C020  F18F         	movff	?___lltoft,_txStatistics+10	;volatile
  5733  0039B0  C021  F190         	movff	?___lltoft+1,_txStatistics+11	;volatile
  5734  0039B4  C022  F191         	movff	?___lltoft+2,_txStatistics+12	;volatile
  5735                           
  5736                           ;SystemStatus.c: 166: txStatistics.RSSI = lastAdcFfwrRSSI;
  5737  0039B8  C1DC  F192         	movff	_lastAdcFfwrRSSI,_txStatistics+13	;volatile
  5738                           
  5739                           ;SystemStatus.c: 167: txStatistics.Light = PORTBbits.RB3;
  5740  0039BC  0E00               	movlw	0
  5741  0039BE  B681               	btfsc	3969,3,c	;volatile
  5742  0039C0  0E01               	movlw	1
  5743  0039C2  0101               	movlb	1	; () banked
  5744  0039C4  6F96               	movwf	(_txStatistics+17)& (0+255),b	;volatile
  5745                           
  5746                           ; BSR set to: 1
  5747                           ;SystemStatus.c: 168: txStatistics.UnitId = 123;
  5748  0039C6  0E7B               	movlw	123
  5749  0039C8  6F97               	movwf	(_txStatistics+18)& (0+255),b	;volatile
  5750                           
  5751                           ; BSR set to: 1
  5752                           ;SystemStatus.c: 169: txStatistics.UnitDc = 1234;
  5753  0039CA  0E04               	movlw	4
  5754  0039CC  6F99               	movwf	(_txStatistics+20)& (0+255),b	;volatile
  5755  0039CE  0ED2               	movlw	210
  5756  0039D0  6F98               	movwf	(_txStatistics+19)& (0+255),b	;volatile
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;SystemStatus.c: 170: txStatistics.SwVersion = "1_002";
  5760  0039D2  0EF0               	movlw	low STR_17
  5761  0039D4  6F9A               	movwf	(_txStatistics+21)& (0+255),b	;volatile
  5762  0039D6  0E7F               	movlw	high STR_17
  5763  0039D8  6F9B               	movwf	(_txStatistics+22)& (0+255),b	;volatile
  5764                           
  5765                           ; BSR set to: 1
  5766                           ;SystemStatus.c: 171: txStatistics.UnitType = 1;
  5767  0039DA  0E01               	movlw	1
  5768  0039DC  6F9C               	movwf	(_txStatistics+23)& (0+255),b	;volatile
  5769                           
  5770                           ; BSR set to: 1
  5771                           ;SystemStatus.c: 173: txStatistics.AdcValues.ADC0 = 0x7;
  5772  0039DE  0E00               	movlw	0
  5773  0039E0  6F88               	movwf	(_txStatistics+3)& (0+255),b	;volatile
  5774  0039E2  0E07               	movlw	7
  5775  0039E4  6F87               	movwf	(_txStatistics+2)& (0+255),b	;volatile
  5776                           
  5777                           ; BSR set to: 1
  5778  0039E6  0012               	return		;funcret
  5779  0039E8                     __end_of_CollectTxStatusParams:
  5780                           	opt stack 0
  5781                           tosu	equ	0xFFF
  5782                           tosh	equ	0xFFE
  5783                           tosl	equ	0xFFD
  5784                           pclath	equ	0xFFA
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           postinc0	equ	0xFEE
  5792                           wreg	equ	0xFE8
  5793                           indf1	equ	0xFE7
  5794                           postdec1	equ	0xFE5
  5795                           fsr1h	equ	0xFE2
  5796                           fsr1l	equ	0xFE1
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function _PrintRxStatus *****************
  5804 ;; Defined at:
  5805 ;;		line 176 in file "SystemStatus.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  dest           80    0[BANK1 ] unsigned char [80]
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5819 ;;      Params:         0       0       0       0       0       0       0
  5820 ;;      Locals:         0       0      80       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0
  5822 ;;      Totals:         0       0      80       0       0       0       0
  5823 ;;Total ram usage:       80 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    7
  5826 ;; This function calls:
  5827 ;;		_UART_Write_Text
  5828 ;;		_sprintf
  5829 ;; This function is called by:
  5830 ;;		_GroupRx
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text8
  5835  00168A                     __ptext8:
  5836                           	opt stack 0
  5837  00168A                     _PrintRxStatus:
  5838                           	opt stack 21
  5839                           
  5840                           ;SystemStatus.c: 178: char dest[80];
  5841                           ;SystemStatus.c: 179: sprintf(dest, "*******************\n\r");
  5842                           
  5843                           ; BSR set to: 1
  5844                           ;incstack = 0
  5845  00168A  0E00               	movlw	low PrintRxStatus@dest
  5846  00168C  0100               	movlb	0	; () banked
  5847  00168E  6FBC               	movwf	sprintf@sp& (0+255),b
  5848  001690  0E01               	movlw	high PrintRxStatus@dest
  5849  001692  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5850  001694  0E09               	movlw	low STR_46
  5851  001696  6FBE               	movwf	sprintf@f& (0+255),b
  5852  001698  0E7F               	movlw	high STR_46
  5853  00169A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5854  00169C  EC70  F000         	call	_sprintf	;wreg free
  5855                           
  5856                           ;SystemStatus.c: 180: UART_Write_Text(dest);
  5857  0016A0  0E00               	movlw	low PrintRxStatus@dest
  5858  0016A2  6E19               	movwf	UART_Write_Text@text,c
  5859  0016A4  0E01               	movlw	high PrintRxStatus@dest
  5860  0016A6  6E1A               	movwf	UART_Write_Text@text+1,c
  5861  0016A8  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5862                           
  5863                           ;SystemStatus.c: 181: sprintf(dest, "RX SYNTH (PLL) Lock indication 0: not locked 1: loc
      +                          ked%d\n\r",rxStatistics.Synt);
  5864  0016AC  0E00               	movlw	low PrintRxStatus@dest
  5865  0016AE  0100               	movlb	0	; () banked
  5866  0016B0  6FBC               	movwf	sprintf@sp& (0+255),b
  5867  0016B2  0E01               	movlw	high PrintRxStatus@dest
  5868  0016B4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5869  0016B6  0E32               	movlw	low STR_47
  5870  0016B8  6FBE               	movwf	sprintf@f& (0+255),b
  5871  0016BA  0E7C               	movlw	high STR_47
  5872  0016BC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5873  0016BE  C1A3  F0C0         	movff	_rxStatistics,?_sprintf+4	;volatile
  5874  0016C2  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5875  0016C4  EC70  F000         	call	_sprintf	;wreg free
  5876                           
  5877                           ;SystemStatus.c: 182: UART_Write_Text(dest);
  5878  0016C8  0E00               	movlw	low PrintRxStatus@dest
  5879  0016CA  6E19               	movwf	UART_Write_Text@text,c
  5880  0016CC  0E01               	movlw	high PrintRxStatus@dest
  5881  0016CE  6E1A               	movwf	UART_Write_Text@text+1,c
  5882  0016D0  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5883                           
  5884                           ;SystemStatus.c: 183: sprintf(dest, "Device Temperature %f\n\r",rxStatistics.DeviceTempe
      +                          rature);
  5885  0016D4  0E00               	movlw	low PrintRxStatus@dest
  5886  0016D6  0100               	movlb	0	; () banked
  5887  0016D8  6FBC               	movwf	sprintf@sp& (0+255),b
  5888  0016DA  0E01               	movlw	high PrintRxStatus@dest
  5889  0016DC  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5890  0016DE  0E93               	movlw	low STR_48
  5891  0016E0  6FBE               	movwf	sprintf@f& (0+255),b
  5892  0016E2  0E7E               	movlw	high STR_48
  5893  0016E4  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5894  0016E6  C1A9  F0C0         	movff	_rxStatistics+6,?_sprintf+4	;volatile
  5895  0016EA  C1AA  F0C1         	movff	_rxStatistics+7,?_sprintf+5	;volatile
  5896  0016EE  C1AB  F0C2         	movff	_rxStatistics+8,?_sprintf+6	;volatile
  5897  0016F2  EC70  F000         	call	_sprintf	;wreg free
  5898                           
  5899                           ;SystemStatus.c: 184: UART_Write_Text(dest);
  5900  0016F6  0E00               	movlw	low PrintRxStatus@dest
  5901  0016F8  6E19               	movwf	UART_Write_Text@text,c
  5902  0016FA  0E01               	movlw	high PrintRxStatus@dest
  5903  0016FC  6E1A               	movwf	UART_Write_Text@text+1,c
  5904  0016FE  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5905                           
  5906                           ;SystemStatus.c: 185: sprintf(dest, "Input power status 0: OFF 1: ON%d\n\r",rxStatistics
      +                          .InputPowerStatus);
  5907  001702  0E00               	movlw	low PrintRxStatus@dest
  5908  001704  0100               	movlb	0	; () banked
  5909  001706  6FBC               	movwf	sprintf@sp& (0+255),b
  5910  001708  0E01               	movlw	high PrintRxStatus@dest
  5911  00170A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5912  00170C  0E9A               	movlw	low STR_49
  5913  00170E  6FBE               	movwf	sprintf@f& (0+255),b
  5914  001710  0E7D               	movlw	high STR_49
  5915  001712  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5916  001714  C1AC  F0C0         	movff	_rxStatistics+9,?_sprintf+4	;volatile
  5917  001718  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5918  00171A  EC70  F000         	call	_sprintf	;wreg free
  5919                           
  5920                           ;SystemStatus.c: 186: UART_Write_Text(dest);
  5921  00171E  0E00               	movlw	low PrintRxStatus@dest
  5922  001720  6E19               	movwf	UART_Write_Text@text,c
  5923  001722  0E01               	movlw	high PrintRxStatus@dest
  5924  001724  6E1A               	movwf	UART_Write_Text@text+1,c
  5925  001726  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5926                           
  5927                           ;SystemStatus.c: 187: sprintf(dest, "RX Frequency in MHz%f\n\r",rxStatistics.Freq);
  5928  00172A  0E00               	movlw	low PrintRxStatus@dest
  5929  00172C  0100               	movlb	0	; () banked
  5930  00172E  6FBC               	movwf	sprintf@sp& (0+255),b
  5931  001730  0E01               	movlw	high PrintRxStatus@dest
  5932  001732  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5933  001734  0EAB               	movlw	low STR_50
  5934  001736  6FBE               	movwf	sprintf@f& (0+255),b
  5935  001738  0E7E               	movlw	high STR_50
  5936  00173A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5937  00173C  C1AD  F0C0         	movff	_rxStatistics+10,?_sprintf+4	;volatile
  5938  001740  C1AE  F0C1         	movff	_rxStatistics+11,?_sprintf+5	;volatile
  5939  001744  C1AF  F0C2         	movff	_rxStatistics+12,?_sprintf+6	;volatile
  5940  001748  EC70  F000         	call	_sprintf	;wreg free
  5941                           
  5942                           ;SystemStatus.c: 188: UART_Write_Text(dest);
  5943  00174C  0E00               	movlw	low PrintRxStatus@dest
  5944  00174E  6E19               	movwf	UART_Write_Text@text,c
  5945  001750  0E01               	movlw	high PrintRxStatus@dest
  5946  001752  6E1A               	movwf	UART_Write_Text@text+1,c
  5947  001754  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5948                           
  5949                           ;SystemStatus.c: 189: sprintf(dest, "RSSI %d\n\r",rxStatistics.RSSI);
  5950  001758  0E00               	movlw	low PrintRxStatus@dest
  5951  00175A  0100               	movlb	0	; () banked
  5952  00175C  6FBC               	movwf	sprintf@sp& (0+255),b
  5953  00175E  0E01               	movlw	high PrintRxStatus@dest
  5954  001760  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5955  001762  0EC3               	movlw	low STR_51
  5956  001764  6FBE               	movwf	sprintf@f& (0+255),b
  5957  001766  0E7F               	movlw	high STR_51
  5958  001768  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5959  00176A  0101               	movlb	1	; () banked
  5960  00176C  51B0               	movf	(_rxStatistics+13)& (0+255),w,b	;volatile
  5961  00176E  0100               	movlb	0	; () banked
  5962  001770  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  5963  001772  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5964  001774  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  5965  001776  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  5966  001778  EC70  F000         	call	_sprintf	;wreg free
  5967                           
  5968                           ;SystemStatus.c: 190: UART_Write_Text(dest);
  5969  00177C  0E00               	movlw	low PrintRxStatus@dest
  5970  00177E  6E19               	movwf	UART_Write_Text@text,c
  5971  001780  0E01               	movlw	high PrintRxStatus@dest
  5972  001782  6E1A               	movwf	UART_Write_Text@text+1,c
  5973  001784  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5974                           
  5975                           ;SystemStatus.c: 191: sprintf(dest, "Light 0: OFF 1: ON%d\n\r",rxStatistics.Light);
  5976  001788  0E00               	movlw	low PrintRxStatus@dest
  5977  00178A  0100               	movlb	0	; () banked
  5978  00178C  6FBC               	movwf	sprintf@sp& (0+255),b
  5979  00178E  0E01               	movlw	high PrintRxStatus@dest
  5980  001790  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  5981  001792  0EF2               	movlw	low STR_52
  5982  001794  6FBE               	movwf	sprintf@f& (0+255),b
  5983  001796  0E7E               	movlw	high STR_52
  5984  001798  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  5985  00179A  C1B4  F0C0         	movff	_rxStatistics+17,?_sprintf+4	;volatile
  5986  00179E  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  5987  0017A0  EC70  F000         	call	_sprintf	;wreg free
  5988                           
  5989                           ;SystemStatus.c: 192: UART_Write_Text(dest);
  5990  0017A4  0E00               	movlw	low PrintRxStatus@dest
  5991  0017A6  6E19               	movwf	UART_Write_Text@text,c
  5992  0017A8  0E01               	movlw	high PrintRxStatus@dest
  5993  0017AA  6E1A               	movwf	UART_Write_Text@text+1,c
  5994  0017AC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  5995                           
  5996                           ;SystemStatus.c: 193: sprintf(dest, "UNIT ID %d\n\r",rxStatistics.UnitId);
  5997  0017B0  0E00               	movlw	low PrintRxStatus@dest
  5998  0017B2  0100               	movlb	0	; () banked
  5999  0017B4  6FBC               	movwf	sprintf@sp& (0+255),b
  6000  0017B6  0E01               	movlw	high PrintRxStatus@dest
  6001  0017B8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6002  0017BA  0E9F               	movlw	low STR_53
  6003  0017BC  6FBE               	movwf	sprintf@f& (0+255),b
  6004  0017BE  0E7F               	movlw	high STR_53
  6005  0017C0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6006  0017C2  0101               	movlb	1	; () banked
  6007  0017C4  51B5               	movf	(_rxStatistics+18)& (0+255),w,b	;volatile
  6008  0017C6  0100               	movlb	0	; () banked
  6009  0017C8  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  6010  0017CA  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6011  0017CC  BFC0               	btfsc	(?_sprintf+4)& (0+255),7,b
  6012  0017CE  07C1               	decf	(?_sprintf+5)& (0+255),f,b
  6013  0017D0  EC70  F000         	call	_sprintf	;wreg free
  6014                           
  6015                           ;SystemStatus.c: 194: UART_Write_Text(dest);
  6016  0017D4  0E00               	movlw	low PrintRxStatus@dest
  6017  0017D6  6E19               	movwf	UART_Write_Text@text,c
  6018  0017D8  0E01               	movlw	high PrintRxStatus@dest
  6019  0017DA  6E1A               	movwf	UART_Write_Text@text+1,c
  6020  0017DC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  6021                           
  6022                           ;SystemStatus.c: 195: sprintf(dest, "UNIT DC %d\n\r",rxStatistics.UnitDc);
  6023  0017E0  0E00               	movlw	low PrintRxStatus@dest
  6024  0017E2  0100               	movlb	0	; () banked
  6025  0017E4  6FBC               	movwf	sprintf@sp& (0+255),b
  6026  0017E6  0E01               	movlw	high PrintRxStatus@dest
  6027  0017E8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6028  0017EA  0E92               	movlw	low STR_54
  6029  0017EC  6FBE               	movwf	sprintf@f& (0+255),b
  6030  0017EE  0E7F               	movlw	high STR_54
  6031  0017F0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6032  0017F2  C1B6  F0C0         	movff	_rxStatistics+19,?_sprintf+4	;volatile
  6033  0017F6  C1B7  F0C1         	movff	_rxStatistics+20,?_sprintf+5	;volatile
  6034  0017FA  EC70  F000         	call	_sprintf	;wreg free
  6035                           
  6036                           ;SystemStatus.c: 196: UART_Write_Text(dest);
  6037  0017FE  0E00               	movlw	low PrintRxStatus@dest
  6038  001800  6E19               	movwf	UART_Write_Text@text,c
  6039  001802  0E01               	movlw	high PrintRxStatus@dest
  6040  001804  6E1A               	movwf	UART_Write_Text@text+1,c
  6041  001806  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  6042                           
  6043                           ;SystemStatus.c: 197: sprintf(dest, "SOFTWARE VERSION %s\n\r",rxStatistics.SwVersion);
  6044  00180A  0E00               	movlw	low PrintRxStatus@dest
  6045  00180C  0100               	movlb	0	; () banked
  6046  00180E  6FBC               	movwf	sprintf@sp& (0+255),b
  6047  001810  0E01               	movlw	high PrintRxStatus@dest
  6048  001812  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6049  001814  0E1F               	movlw	low STR_55
  6050  001816  6FBE               	movwf	sprintf@f& (0+255),b
  6051  001818  0E7F               	movlw	high STR_55
  6052  00181A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6053  00181C  C1B8  F0C0         	movff	_rxStatistics+21,?_sprintf+4	;volatile
  6054  001820  C1B9  F0C1         	movff	_rxStatistics+22,?_sprintf+5	;volatile
  6055  001824  EC70  F000         	call	_sprintf	;wreg free
  6056                           
  6057                           ;SystemStatus.c: 198: UART_Write_Text(dest);
  6058  001828  0E00               	movlw	low PrintRxStatus@dest
  6059  00182A  6E19               	movwf	UART_Write_Text@text,c
  6060  00182C  0E01               	movlw	high PrintRxStatus@dest
  6061  00182E  6E1A               	movwf	UART_Write_Text@text+1,c
  6062  001830  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  6063                           
  6064                           ;SystemStatus.c: 199: sprintf(dest, "UNIT TYPE %d\n\r",rxStatistics.UnitType);
  6065  001834  0E00               	movlw	low PrintRxStatus@dest
  6066  001836  0100               	movlb	0	; () banked
  6067  001838  6FBC               	movwf	sprintf@sp& (0+255),b
  6068  00183A  0E01               	movlw	high PrintRxStatus@dest
  6069  00183C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6070  00183E  0E83               	movlw	low STR_56
  6071  001840  6FBE               	movwf	sprintf@f& (0+255),b
  6072  001842  0E7F               	movlw	high STR_56
  6073  001844  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6074  001846  C1BA  F0C0         	movff	_rxStatistics+23,?_sprintf+4	;volatile
  6075  00184A  6BC1               	clrf	(?_sprintf+5)& (0+255),b
  6076  00184C  EC70  F000         	call	_sprintf	;wreg free
  6077                           
  6078                           ;SystemStatus.c: 200: UART_Write_Text(dest);
  6079  001850  0E00               	movlw	low PrintRxStatus@dest
  6080  001852  6E19               	movwf	UART_Write_Text@text,c
  6081  001854  0E01               	movlw	high PrintRxStatus@dest
  6082  001856  6E1A               	movwf	UART_Write_Text@text+1,c
  6083  001858  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  6084                           
  6085                           ;SystemStatus.c: 201: sprintf(dest, "*******************\n\r");
  6086  00185C  0E00               	movlw	low PrintRxStatus@dest
  6087  00185E  0100               	movlb	0	; () banked
  6088  001860  6FBC               	movwf	sprintf@sp& (0+255),b
  6089  001862  0E01               	movlw	high PrintRxStatus@dest
  6090  001864  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  6091  001866  0E09               	movlw	low STR_46
  6092  001868  6FBE               	movwf	sprintf@f& (0+255),b
  6093  00186A  0E7F               	movlw	high STR_46
  6094  00186C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  6095  00186E  EC70  F000         	call	_sprintf	;wreg free
  6096                           
  6097                           ;SystemStatus.c: 202: UART_Write_Text(dest);
  6098  001872  0E00               	movlw	low PrintRxStatus@dest
  6099  001874  6E19               	movwf	UART_Write_Text@text,c
  6100  001876  0E01               	movlw	high PrintRxStatus@dest
  6101  001878  6E1A               	movwf	UART_Write_Text@text+1,c
  6102  00187A  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  6103  00187E  0012               	return		;funcret
  6104  001880                     __end_of_PrintRxStatus:
  6105                           	opt stack 0
  6106                           tosu	equ	0xFFF
  6107                           tosh	equ	0xFFE
  6108                           tosl	equ	0xFFD
  6109                           pclath	equ	0xFFA
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           postinc0	equ	0xFEE
  6117                           wreg	equ	0xFE8
  6118                           indf1	equ	0xFE7
  6119                           postdec1	equ	0xFE5
  6120                           fsr1h	equ	0xFE2
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _GetIntFromUartData *****************
  6129 ;; Defined at:
  6130 ;;		line 60 in file "SystemCommon.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  c               1   20[BANK0 ] unsigned char 
  6135 ;;  idx             2   21[BANK0 ] int 
  6136 ;;  dataRegArr      8   12[BANK0 ] unsigned char [8]
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  4    6[BANK0 ] unsigned long 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6146 ;;      Params:         0       4       0       0       0       0       0
  6147 ;;      Locals:         0      11       0       0       0       0       0
  6148 ;;      Temps:          0       2       0       0       0       0       0
  6149 ;;      Totals:         0      17       0       0       0       0       0
  6150 ;;Total ram usage:       17 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    6
  6153 ;; This function calls:
  6154 ;;		_ZeroArray
  6155 ;;		_strtol
  6156 ;; This function is called by:
  6157 ;;		_GroupRx
  6158 ;;		_GroupTx
  6159 ;;		_DacSetValue
  6160 ;;		_UpdateTxFreq
  6161 ;;		_UpdateRxFreq
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text9
  6166  0035AC                     __ptext9:
  6167                           	opt stack 0
  6168  0035AC                     _GetIntFromUartData:
  6169                           	opt stack 22
  6170                           
  6171                           ;SystemCommon.c: 62: char dataRegArr[8];
  6172                           ;SystemCommon.c: 63: ZeroArray(dataRegArr, 8);
  6173                           
  6174                           ;incstack = 0
  6175  0035AC  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6176  0035AE  6E20               	movwf	ZeroArray@array,c
  6177  0035B0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6178  0035B2  6E21               	movwf	ZeroArray@array+1,c
  6179  0035B4  0E00               	movlw	0
  6180  0035B6  6E23               	movwf	ZeroArray@size+1,c
  6181  0035B8  0E08               	movlw	8
  6182  0035BA  6E22               	movwf	ZeroArray@size,c
  6183  0035BC  EC34  F022         	call	_ZeroArray	;wreg free
  6184                           
  6185                           ;SystemCommon.c: 65: for(int idx = 0; idx < 8; idx++)
  6186  0035C0  0E00               	movlw	0
  6187  0035C2  0100               	movlb	0	; () banked
  6188  0035C4  6F76               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  6189  0035C6  0E00               	movlw	0
  6190  0035C8  6F75               	movwf	GetIntFromUartData@idx& (0+255),b
  6191  0035CA                     l9549:
  6192                           
  6193                           ; BSR set to: 0
  6194  0035CA  BF76               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  6195  0035CC  D006               	goto	l1440
  6196  0035CE  5176               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  6197  0035D0  E120               	bnz	l9567
  6198  0035D2  0E08               	movlw	8
  6199  0035D4  5D75               	subwf	GetIntFromUartData@idx& (0+255),w,b
  6200  0035D6  B0D8               	btfsc	status,0,c
  6201  0035D8  D01C               	goto	u10070
  6202  0035DA                     l1440:
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;SystemCommon.c: 66: {
  6206                           ;SystemCommon.c: 67: char c = data[idx + 1];
  6207                           
  6208                           ; BSR set to: 0
  6209  0035DA  0E01               	movlw	1
  6210  0035DC  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6211  0035DE  6F6A               	movwf	??_GetIntFromUartData& (0+255),b
  6212  0035E0  0E00               	movlw	0
  6213  0035E2  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6214  0035E4  6F6B               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6215  0035E6  516A               	movf	??_GetIntFromUartData& (0+255),w,b
  6216  0035E8  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6217  0035EA  6ED9               	movwf	fsr2l,c
  6218  0035EC  516B               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6219  0035EE  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6220  0035F0  6EDA               	movwf	fsr2h,c
  6221  0035F2  50DF               	movf	indf2,w,c
  6222  0035F4  6F74               	movwf	GetIntFromUartData@c& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;SystemCommon.c: 68: if(c == (0))
  6226  0035F6  5174               	movf	GetIntFromUartData@c& (0+255),w,b
  6227  0035F8  B4D8               	btfsc	status,2,c
  6228  0035FA  D00B               	goto	u10070
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;SystemCommon.c: 72: else
  6232                           ;SystemCommon.c: 73: {
  6233                           ;SystemCommon.c: 74: dataRegArr[idx] = c;
  6234                           
  6235                           ; BSR set to: 0
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;SystemCommon.c: 71: }
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;SystemCommon.c: 69: {
  6242                           ;SystemCommon.c: 70: break;
  6243  0035FC  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6244  0035FE  2575               	addwf	GetIntFromUartData@idx& (0+255),w,b
  6245  003600  6ED9               	movwf	fsr2l,c
  6246  003602  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6247  003604  2176               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  6248  003606  6EDA               	movwf	fsr2h,c
  6249  003608  C074  FFDF         	movff	GetIntFromUartData@c,indf2
  6250                           
  6251                           ; BSR set to: 0
  6252                           
  6253                           ; BSR set to: 0
  6254  00360C  4B75               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  6255  00360E  2B76               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  6256  003610  D7DC               	goto	l9549
  6257  003612                     u10070:
  6258  003612                     l9567:
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;SystemCommon.c: 75: }
  6262                           ;SystemCommon.c: 76: }
  6263                           ;SystemCommon.c: 78: return strtol(dataRegArr, (0), 10);
  6264  003612  0E6C               	movlw	low GetIntFromUartData@dataRegArr
  6265  003614  6E26               	movwf	strtol@s,c
  6266  003616  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6267  003618  6E27               	movwf	strtol@s+1,c
  6268  00361A  0E00               	movlw	0
  6269  00361C  6E28               	movwf	strtol@endptr,c
  6270  00361E  0E00               	movlw	0
  6271  003620  6E29               	movwf	strtol@endptr+1,c
  6272  003622  0E00               	movlw	0
  6273  003624  6E2B               	movwf	strtol@base+1,c
  6274  003626  0E0A               	movlw	10
  6275  003628  6E2A               	movwf	strtol@base,c
  6276  00362A  EC3B  F00D         	call	_strtol	;wreg free
  6277  00362E  C026  F066         	movff	?_strtol,?_GetIntFromUartData
  6278  003632  C027  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  6279  003636  C028  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  6280  00363A  C029  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  6281  00363E  0012               	return	
  6282  003640                     __end_of_GetIntFromUartData:
  6283                           	opt stack 0
  6284                           tosu	equ	0xFFF
  6285                           tosh	equ	0xFFE
  6286                           tosl	equ	0xFFD
  6287                           pclath	equ	0xFFA
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           postinc0	equ	0xFEE
  6295                           wreg	equ	0xFE8
  6296                           indf1	equ	0xFE7
  6297                           postdec1	equ	0xFE5
  6298                           fsr1h	equ	0xFE2
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _strtol *****************
  6307 ;; Defined at:
  6308 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6311 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  6312 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6313 ;;		 -> NULL(0), 
  6314 ;;  base            2   41[COMRAM] int 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  a               4    1[BANK0 ] long 
  6317 ;;  c               1    5[BANK0 ] unsigned char 
  6318 ;;  sign            1    0[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  4   37[COMRAM] long 
  6321 ;; Registers used:
  6322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6328 ;;      Params:         6       0       0       0       0       0       0
  6329 ;;      Locals:         0       6       0       0       0       0       0
  6330 ;;      Temps:          4       0       0       0       0       0       0
  6331 ;;      Totals:        10       6       0       0       0       0       0
  6332 ;;Total ram usage:       16 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    5
  6335 ;; This function calls:
  6336 ;;		___lmul
  6337 ;;		_isalpha
  6338 ;;		_isdigit
  6339 ;;		_isspace
  6340 ;;		_toupper
  6341 ;; This function is called by:
  6342 ;;		_GetIntFromUartData
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text10
  6347  001A76                     __ptext10:
  6348                           	opt stack 0
  6349  001A76                     _strtol:
  6350                           	opt stack 22
  6351                           
  6352                           ;incstack = 0
  6353  001A76  C026  FFD9         	movff	strtol@s,fsr2l
  6354  001A7A  C027  FFDA         	movff	strtol@s+1,fsr2h
  6355  001A7E  50DF               	movf	indf2,w,c
  6356  001A80  0100               	movlb	0	; () banked
  6357  001A82  6F65               	movwf	strtol@c& (0+255),b
  6358                           
  6359                           ; BSR set to: 0
  6360  001A84  4A26               	infsnz	strtol@s,f,c
  6361  001A86  2A27               	incf	strtol@s+1,f,c
  6362                           
  6363                           ; BSR set to: 0
  6364  001A88  5165               	movf	strtol@c& (0+255),w,b
  6365  001A8A  ECBA  F021         	call	_isspace
  6366  001A8E  B0D8               	btfsc	status,0,c
  6367  001A90  D7F2               	goto	_strtol
  6368  001A92  0E00               	movlw	0
  6369  001A94  0100               	movlb	0	; () banked
  6370  001A96  6F61               	movwf	strtol@a& (0+255),b
  6371  001A98  0E00               	movlw	0
  6372  001A9A  6F62               	movwf	(strtol@a+1)& (0+255),b
  6373  001A9C  0E00               	movlw	0
  6374  001A9E  6F63               	movwf	(strtol@a+2)& (0+255),b
  6375  001AA0  0E00               	movlw	0
  6376  001AA2  6F64               	movwf	(strtol@a+3)& (0+255),b
  6377  001AA4  0E00               	movlw	0
  6378  001AA6  6F60               	movwf	strtol@sign& (0+255),b
  6379                           
  6380                           ; BSR set to: 0
  6381  001AA8  0E2D               	movlw	45
  6382  001AAA  1965               	xorwf	strtol@c& (0+255),w,b
  6383  001AAC  A4D8               	btfss	status,2,c
  6384  001AAE  D003               	goto	l2353
  6385                           
  6386                           ; BSR set to: 0
  6387  001AB0  0E01               	movlw	1
  6388  001AB2  6F60               	movwf	strtol@sign& (0+255),b
  6389  001AB4  D004               	goto	u9680
  6390  001AB6                     l2353:
  6391                           
  6392                           ; BSR set to: 0
  6393                           
  6394                           ; BSR set to: 0
  6395  001AB6  0E2B               	movlw	43
  6396  001AB8  1965               	xorwf	strtol@c& (0+255),w,b
  6397  001ABA  A4D8               	btfss	status,2,c
  6398  001ABC  D008               	goto	l2355
  6399  001ABE                     u9680:
  6400                           
  6401                           ; BSR set to: 0
  6402  001ABE  C026  FFD9         	movff	strtol@s,fsr2l
  6403  001AC2  C027  FFDA         	movff	strtol@s+1,fsr2h
  6404  001AC6  50DF               	movf	indf2,w,c
  6405  001AC8  6F65               	movwf	strtol@c& (0+255),b
  6406                           
  6407                           ; BSR set to: 0
  6408  001ACA  4A26               	infsnz	strtol@s,f,c
  6409  001ACC  2A27               	incf	strtol@s+1,f,c
  6410  001ACE                     l2355:
  6411                           
  6412                           ; BSR set to: 0
  6413                           
  6414                           ; BSR set to: 0
  6415                           
  6416                           ; BSR set to: 0
  6417  001ACE  0E30               	movlw	48
  6418  001AD0  1965               	xorwf	strtol@c& (0+255),w,b
  6419  001AD2  A4D8               	btfss	status,2,c
  6420  001AD4  D02E               	goto	l2363
  6421                           
  6422                           ; BSR set to: 0
  6423  001AD6  C026  FFD9         	movff	strtol@s,fsr2l
  6424  001ADA  C027  FFDA         	movff	strtol@s+1,fsr2h
  6425  001ADE  50DF               	movf	indf2,w,c
  6426  001AE0  6F65               	movwf	strtol@c& (0+255),b
  6427                           
  6428                           ; BSR set to: 0
  6429  001AE2  4A26               	infsnz	strtol@s,f,c
  6430  001AE4  2A27               	incf	strtol@s+1,f,c
  6431                           
  6432                           ; BSR set to: 0
  6433  001AE6  502A               	movf	strtol@base,w,c
  6434  001AE8  102B               	iorwf	strtol@base+1,w,c
  6435  001AEA  B4D8               	btfsc	status,2,c
  6436  001AEC  D005               	goto	u9710
  6437                           
  6438                           ; BSR set to: 0
  6439  001AEE  0E10               	movlw	16
  6440  001AF0  182A               	xorwf	strtol@base,w,c
  6441  001AF2  102B               	iorwf	strtol@base+1,w,c
  6442  001AF4  A4D8               	btfss	status,2,c
  6443  001AF6  D015               	goto	l2357
  6444  001AF8                     u9710:
  6445                           
  6446                           ; BSR set to: 0
  6447                           
  6448                           ; BSR set to: 0
  6449  001AF8  0E78               	movlw	120
  6450  001AFA  1965               	xorwf	strtol@c& (0+255),w,b
  6451  001AFC  B4D8               	btfsc	status,2,c
  6452  001AFE  D004               	goto	u9730
  6453                           
  6454                           ; BSR set to: 0
  6455  001B00  0E58               	movlw	88
  6456  001B02  1965               	xorwf	strtol@c& (0+255),w,b
  6457  001B04  A4D8               	btfss	status,2,c
  6458  001B06  D00D               	goto	l2357
  6459  001B08                     u9730:
  6460                           
  6461                           ; BSR set to: 0
  6462                           
  6463                           ; BSR set to: 0
  6464  001B08  0E00               	movlw	0
  6465  001B0A  6E2B               	movwf	strtol@base+1,c
  6466  001B0C  0E10               	movlw	16
  6467  001B0E  6E2A               	movwf	strtol@base,c
  6468                           
  6469                           ; BSR set to: 0
  6470  001B10  C026  FFD9         	movff	strtol@s,fsr2l
  6471  001B14  C027  FFDA         	movff	strtol@s+1,fsr2h
  6472  001B18  50DF               	movf	indf2,w,c
  6473  001B1A  6F65               	movwf	strtol@c& (0+255),b
  6474                           
  6475                           ; BSR set to: 0
  6476  001B1C  4A26               	infsnz	strtol@s,f,c
  6477  001B1E  2A27               	incf	strtol@s+1,f,c
  6478  001B20  D008               	goto	l2363
  6479  001B22                     l2357:
  6480                           
  6481                           ; BSR set to: 0
  6482                           
  6483                           ; BSR set to: 0
  6484  001B22  502A               	movf	strtol@base,w,c
  6485  001B24  102B               	iorwf	strtol@base+1,w,c
  6486  001B26  A4D8               	btfss	status,2,c
  6487  001B28  D004               	goto	l2363
  6488                           
  6489                           ; BSR set to: 0
  6490  001B2A  0E00               	movlw	0
  6491  001B2C  6E2B               	movwf	strtol@base+1,c
  6492  001B2E  0E08               	movlw	8
  6493  001B30  6E2A               	movwf	strtol@base,c
  6494  001B32                     l2363:
  6495                           
  6496                           ; BSR set to: 0
  6497                           
  6498                           ; BSR set to: 0
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503  001B32  502A               	movf	strtol@base,w,c
  6504  001B34  102B               	iorwf	strtol@base+1,w,c
  6505  001B36  A4D8               	btfss	status,2,c
  6506  001B38  D004               	goto	l2364
  6507                           
  6508                           ; BSR set to: 0
  6509  001B3A  0E00               	movlw	0
  6510  001B3C  6E2B               	movwf	strtol@base+1,c
  6511  001B3E  0E0A               	movlw	10
  6512  001B40  6E2A               	movwf	strtol@base,c
  6513  001B42                     l2364:
  6514                           
  6515                           ; BSR set to: 0
  6516                           
  6517                           ; BSR set to: 0
  6518                           
  6519                           ; BSR set to: 0
  6520  001B42  5165               	movf	strtol@c& (0+255),w,b
  6521  001B44  ECA6  F021         	call	_isalpha
  6522  001B48  A0D8               	btfss	status,0,c
  6523  001B4A  D008               	goto	l2366
  6524  001B4C  0100               	movlb	0	; () banked
  6525  001B4E  5165               	movf	strtol@c& (0+255),w,b
  6526  001B50  EC80  F022         	call	_toupper
  6527  001B54  0FC9               	addlw	201
  6528  001B56  0100               	movlb	0	; () banked
  6529  001B58  6F65               	movwf	strtol@c& (0+255),b
  6530  001B5A  D009               	goto	l2369
  6531  001B5C                     l2366:
  6532                           
  6533                           ; BSR set to: 0
  6534  001B5C  0100               	movlb	0	; () banked
  6535  001B5E  5165               	movf	strtol@c& (0+255),w,b
  6536  001B60  EC16  F022         	call	_isdigit
  6537  001B64  A0D8               	btfss	status,0,c
  6538  001B66  D039               	goto	l2370
  6539  001B68  0E30               	movlw	48
  6540  001B6A  0100               	movlb	0	; () banked
  6541  001B6C  5F65               	subwf	strtol@c& (0+255),f,b
  6542  001B6E                     l2369:
  6543                           
  6544                           ; BSR set to: 0
  6545                           
  6546                           ; BSR set to: 0
  6547                           
  6548                           ; BSR set to: 0
  6549  001B6E  5165               	movf	strtol@c& (0+255),w,b
  6550  001B70  6E2C               	movwf	??_strtol& (0+255),c
  6551  001B72  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6552  001B74  502A               	movf	strtol@base,w,c
  6553  001B76  5C2C               	subwf	??_strtol,w,c
  6554  001B78  502D               	movf	??_strtol+1,w,c
  6555  001B7A  0A80               	xorlw	128
  6556  001B7C  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6557  001B7E  502B               	movf	strtol@base+1,w,c
  6558  001B80  0A80               	xorlw	128
  6559  001B82  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6560  001B84  B0D8               	btfsc	status,0,c
  6561  001B86  D029               	goto	l2370
  6562                           
  6563                           ; BSR set to: 0
  6564                           
  6565                           ; BSR set to: 0
  6566                           
  6567                           ; BSR set to: 0
  6568  001B88  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6569  001B8C  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6570  001B90  0E00               	movlw	0
  6571  001B92  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6572  001B94  0EFF               	movlw	-1
  6573  001B96  6E1C               	movwf	___lmul@multiplier+2,c
  6574  001B98  6E1D               	movwf	___lmul@multiplier+3,c
  6575  001B9A  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6576  001B9E  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6577  001BA2  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6578  001BA6  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6579  001BAA  EC69  F01F         	call	___lmul	;wreg free
  6580  001BAE  0100               	movlb	0	; () banked
  6581  001BB0  5165               	movf	strtol@c& (0+255),w,b
  6582  001BB2  241A               	addwf	?___lmul,w,c
  6583  001BB4  6F61               	movwf	strtol@a& (0+255),b
  6584  001BB6  0E00               	movlw	0
  6585  001BB8  201B               	addwfc	?___lmul+1,w,c
  6586  001BBA  6F62               	movwf	(strtol@a+1)& (0+255),b
  6587  001BBC  0E00               	movlw	0
  6588  001BBE  201C               	addwfc	?___lmul+2,w,c
  6589  001BC0  6F63               	movwf	(strtol@a+2)& (0+255),b
  6590  001BC2  0E00               	movlw	0
  6591  001BC4  201D               	addwfc	?___lmul+3,w,c
  6592  001BC6  6F64               	movwf	(strtol@a+3)& (0+255),b
  6593                           
  6594                           ; BSR set to: 0
  6595  001BC8  C026  FFD9         	movff	strtol@s,fsr2l
  6596  001BCC  C027  FFDA         	movff	strtol@s+1,fsr2h
  6597  001BD0  50DF               	movf	indf2,w,c
  6598  001BD2  6F65               	movwf	strtol@c& (0+255),b
  6599                           
  6600                           ; BSR set to: 0
  6601  001BD4  4A26               	infsnz	strtol@s,f,c
  6602  001BD6  2A27               	incf	strtol@s+1,f,c
  6603  001BD8  D7B4               	goto	l2364
  6604  001BDA                     l2370:
  6605                           
  6606                           ; BSR set to: 0
  6607  001BDA  5028               	movf	strtol@endptr,w,c
  6608  001BDC  1029               	iorwf	strtol@endptr+1,w,c
  6609  001BDE  B4D8               	btfsc	status,2,c
  6610  001BE0  D00E               	goto	l2372
  6611  001BE2  0EFF               	movlw	255
  6612  001BE4  2426               	addwf	strtol@s,w,c
  6613  001BE6  6E2C               	movwf	??_strtol& (0+255),c
  6614  001BE8  0EFF               	movlw	255
  6615  001BEA  2027               	addwfc	strtol@s+1,w,c
  6616  001BEC  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6617  001BEE  C028  FFD9         	movff	strtol@endptr,fsr2l
  6618  001BF2  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6619  001BF6  C02C  FFDE         	movff	??_strtol,postinc2
  6620  001BFA  C02D  FFDD         	movff	??_strtol+1,postdec2
  6621  001BFE                     l2372:
  6622  001BFE  0100               	movlb	0	; () banked
  6623  001C00  5160               	movf	strtol@sign& (0+255),w,b
  6624  001C02  B4D8               	btfsc	status,2,c
  6625  001C04  D01A               	goto	l2373
  6626                           
  6627                           ; BSR set to: 0
  6628  001C06  C061  F02C         	movff	strtol@a,??_strtol
  6629  001C0A  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6630  001C0E  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6631  001C12  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6632  001C16  1E2C               	comf	??_strtol,f,c
  6633  001C18  1E2D               	comf	??_strtol+1,f,c
  6634  001C1A  1E2E               	comf	??_strtol+2,f,c
  6635  001C1C  1E2F               	comf	??_strtol+3,f,c
  6636  001C1E  2A2C               	incf	??_strtol,f,c
  6637  001C20  0E00               	movlw	0
  6638  001C22  222D               	addwfc	??_strtol+1,f,c
  6639  001C24  222E               	addwfc	??_strtol+2,f,c
  6640  001C26  222F               	addwfc	??_strtol+3,f,c
  6641  001C28  C02C  F026         	movff	??_strtol,?_strtol
  6642  001C2C  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6643  001C30  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6644  001C34  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6645                           
  6646                           ; BSR set to: 0
  6647  001C38  0012               	return	
  6648  001C3A                     l2373:
  6649                           
  6650                           ; BSR set to: 0
  6651  001C3A  C061  F026         	movff	strtol@a,?_strtol
  6652  001C3E  C062  F027         	movff	strtol@a+1,?_strtol+1
  6653  001C42  C063  F028         	movff	strtol@a+2,?_strtol+2
  6654  001C46  C064  F029         	movff	strtol@a+3,?_strtol+3
  6655                           
  6656                           ; BSR set to: 0
  6657  001C4A  0012               	return		;funcret
  6658  001C4C                     __end_of_strtol:
  6659                           	opt stack 0
  6660                           tosu	equ	0xFFF
  6661                           tosh	equ	0xFFE
  6662                           tosl	equ	0xFFD
  6663                           pclath	equ	0xFFA
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           indf1	equ	0xFE7
  6673                           postdec1	equ	0xFE5
  6674                           fsr1h	equ	0xFE2
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           postinc2	equ	0xFDE
  6678                           postdec2	equ	0xFDD
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _toupper *****************
  6684 ;; Defined at:
  6685 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  c               1    wreg     unsigned char 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  c               1   23[COMRAM] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  1    wreg      unsigned char 
  6692 ;; Registers used:
  6693 ;;		wreg, status,2, status,0
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6699 ;;      Params:         0       0       0       0       0       0       0
  6700 ;;      Locals:         1       0       0       0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0
  6702 ;;      Totals:         1       0       0       0       0       0       0
  6703 ;;Total ram usage:        1 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    3
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_readUartByte
  6710 ;;		_strtol
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text11
  6715  004500                     __ptext11:
  6716                           	opt stack 0
  6717  004500                     _toupper:
  6718                           	opt stack 26
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;incstack = 0
  6722                           ;toupper@c stored from wreg
  6723  004500  6E18               	movwf	toupper@c,c
  6724  004502  0E7B               	movlw	123
  6725  004504  6018               	cpfslt	toupper@c,c
  6726  004506  D004               	goto	l2377
  6727  004508  0E60               	movlw	96
  6728  00450A  6418               	cpfsgt	toupper@c,c
  6729  00450C  D001               	goto	l2377
  6730  00450E  9A18               	bcf	toupper@c,5,c
  6731  004510                     l2377:
  6732  004510  5018               	movf	toupper@c,w,c
  6733  004512  0012               	return	
  6734  004514                     __end_of_toupper:
  6735                           	opt stack 0
  6736                           tosu	equ	0xFFF
  6737                           tosh	equ	0xFFE
  6738                           tosl	equ	0xFFD
  6739                           pclath	equ	0xFFA
  6740                           tblptru	equ	0xFF8
  6741                           tblptrh	equ	0xFF7
  6742                           tblptrl	equ	0xFF6
  6743                           tablat	equ	0xFF5
  6744                           prodh	equ	0xFF4
  6745                           prodl	equ	0xFF3
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           indf1	equ	0xFE7
  6749                           postdec1	equ	0xFE5
  6750                           fsr1h	equ	0xFE2
  6751                           fsr1l	equ	0xFE1
  6752                           indf2	equ	0xFDF
  6753                           postinc2	equ	0xFDE
  6754                           postdec2	equ	0xFDD
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _isspace *****************
  6760 ;; Defined at:
  6761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  c               1    wreg     unsigned char 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  c               1   25[COMRAM] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;		None               void
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6775 ;;      Params:         0       0       0       0       0       0       0
  6776 ;;      Locals:         2       0       0       0       0       0       0
  6777 ;;      Temps:          1       0       0       0       0       0       0
  6778 ;;      Totals:         3       0       0       0       0       0       0
  6779 ;;Total ram usage:        3 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    3
  6782 ;; This function calls:
  6783 ;;		Nothing
  6784 ;; This function is called by:
  6785 ;;		_strtol
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text12
  6790  004374                     __ptext12:
  6791                           	opt stack 0
  6792  004374                     _isspace:
  6793                           	opt stack 23
  6794                           
  6795                           ;incstack = 0
  6796                           ;isspace@c stored from wreg
  6797  004374  6E1A               	movwf	isspace@c,c
  6798  004376  0E01               	movlw	1
  6799  004378  6E19               	movwf	_isspace$3617,c
  6800  00437A  0E20               	movlw	32
  6801  00437C  181A               	xorwf	isspace@c,w,c
  6802  00437E  B4D8               	btfsc	status,2,c
  6803  004380  D008               	goto	l2459
  6804  004382  0E0E               	movlw	14
  6805  004384  601A               	cpfslt	isspace@c,c
  6806  004386  D003               	goto	u9080
  6807  004388  0E09               	movlw	9
  6808  00438A  601A               	cpfslt	isspace@c,c
  6809  00438C  D002               	goto	l2459
  6810  00438E                     u9080:
  6811  00438E  0E00               	movlw	0
  6812  004390  6E19               	movwf	_isspace$3617,c
  6813  004392                     l2459:
  6814  004392  C019  F018         	movff	_isspace$3617,??_isspace
  6815  004396  3018               	rrcf	??_isspace,w,c
  6816  004398  0012               	return	
  6817  00439A                     __end_of_isspace:
  6818                           	opt stack 0
  6819                           tosu	equ	0xFFF
  6820                           tosh	equ	0xFFE
  6821                           tosl	equ	0xFFD
  6822                           pclath	equ	0xFFA
  6823                           tblptru	equ	0xFF8
  6824                           tblptrh	equ	0xFF7
  6825                           tblptrl	equ	0xFF6
  6826                           tablat	equ	0xFF5
  6827                           prodh	equ	0xFF4
  6828                           prodl	equ	0xFF3
  6829                           postinc0	equ	0xFEE
  6830                           wreg	equ	0xFE8
  6831                           indf1	equ	0xFE7
  6832                           postdec1	equ	0xFE5
  6833                           fsr1h	equ	0xFE2
  6834                           fsr1l	equ	0xFE1
  6835                           indf2	equ	0xFDF
  6836                           postinc2	equ	0xFDE
  6837                           postdec2	equ	0xFDD
  6838                           fsr2h	equ	0xFDA
  6839                           fsr2l	equ	0xFD9
  6840                           status	equ	0xFD8
  6841                           
  6842 ;; *************** function _isdigit *****************
  6843 ;; Defined at:
  6844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  c               1    wreg     unsigned char 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  c               1   25[COMRAM] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;		None               void
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6858 ;;      Params:         0       0       0       0       0       0       0
  6859 ;;      Locals:         2       0       0       0       0       0       0
  6860 ;;      Temps:          1       0       0       0       0       0       0
  6861 ;;      Totals:         3       0       0       0       0       0       0
  6862 ;;Total ram usage:        3 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    3
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_strtol
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text13
  6873  00442C                     __ptext13:
  6874                           	opt stack 0
  6875  00442C                     _isdigit:
  6876                           	opt stack 23
  6877                           
  6878                           ;incstack = 0
  6879                           ;isdigit@c stored from wreg
  6880  00442C  6E1A               	movwf	isdigit@c,c
  6881  00442E  0E00               	movlw	0
  6882  004430  6E19               	movwf	_isdigit$3614,c
  6883  004432  0E3A               	movlw	58
  6884  004434  601A               	cpfslt	isdigit@c,c
  6885  004436  D005               	goto	l2454
  6886  004438  0E2F               	movlw	47
  6887  00443A  641A               	cpfsgt	isdigit@c,c
  6888  00443C  D002               	goto	l2454
  6889  00443E  0E01               	movlw	1
  6890  004440  6E19               	movwf	_isdigit$3614,c
  6891  004442                     l2454:
  6892  004442  C019  F018         	movff	_isdigit$3614,??_isdigit
  6893  004446  3018               	rrcf	??_isdigit,w,c
  6894  004448  0012               	return	
  6895  00444A                     __end_of_isdigit:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclath	equ	0xFFA
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           postinc0	equ	0xFEE
  6908                           wreg	equ	0xFE8
  6909                           indf1	equ	0xFE7
  6910                           postdec1	equ	0xFE5
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _isalpha *****************
  6921 ;; Defined at:
  6922 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  c               1    wreg     unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  c               1   28[COMRAM] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6936 ;;      Params:         0       0       0       0       0       0       0
  6937 ;;      Locals:         2       0       0       0       0       0       0
  6938 ;;      Temps:          1       0       0       0       0       0       0
  6939 ;;      Totals:         3       0       0       0       0       0       0
  6940 ;;Total ram usage:        3 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    4
  6943 ;; This function calls:
  6944 ;;		_isupper
  6945 ;; This function is called by:
  6946 ;;		_strtol
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text14
  6951  00434C                     __ptext14:
  6952                           	opt stack 0
  6953  00434C                     _isalpha:
  6954                           	opt stack 22
  6955                           
  6956                           ;incstack = 0
  6957                           ;isalpha@c stored from wreg
  6958  00434C  6E1D               	movwf	isalpha@c,c
  6959  00434E  0E01               	movlw	1
  6960  004350  6E1C               	movwf	_isalpha$3611,c
  6961  004352  0E7B               	movlw	123
  6962  004354  601D               	cpfslt	isalpha@c,c
  6963  004356  D003               	goto	u9100
  6964  004358  0E61               	movlw	97
  6965  00435A  601D               	cpfslt	isalpha@c,c
  6966  00435C  D007               	goto	l2449
  6967  00435E                     u9100:
  6968  00435E  501D               	movf	isalpha@c,w,c
  6969  004360  EC25  F022         	call	_isupper
  6970  004364  B0D8               	btfsc	status,0,c
  6971  004366  D002               	goto	l2449
  6972  004368  0E00               	movlw	0
  6973  00436A  6E1C               	movwf	_isalpha$3611,c
  6974  00436C                     l2449:
  6975  00436C  C01C  F01B         	movff	_isalpha$3611,??_isalpha
  6976  004370  301B               	rrcf	??_isalpha,w,c
  6977  004372  0012               	return	
  6978  004374                     __end_of_isalpha:
  6979                           	opt stack 0
  6980                           tosu	equ	0xFFF
  6981                           tosh	equ	0xFFE
  6982                           tosl	equ	0xFFD
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           indf1	equ	0xFE7
  6993                           postdec1	equ	0xFE5
  6994                           fsr1h	equ	0xFE2
  6995                           fsr1l	equ	0xFE1
  6996                           indf2	equ	0xFDF
  6997                           postinc2	equ	0xFDE
  6998                           postdec2	equ	0xFDD
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _isupper *****************
  7004 ;; Defined at:
  7005 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  c               1    wreg     unsigned char 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  c               1   25[COMRAM] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;		None               void
  7012 ;; Registers used:
  7013 ;;		wreg, status,2, status,0
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7019 ;;      Params:         0       0       0       0       0       0       0
  7020 ;;      Locals:         2       0       0       0       0       0       0
  7021 ;;      Temps:          1       0       0       0       0       0       0
  7022 ;;      Totals:         3       0       0       0       0       0       0
  7023 ;;Total ram usage:        3 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    3
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		_isalpha
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text15
  7034  00444A                     __ptext15:
  7035                           	opt stack 0
  7036  00444A                     _isupper:
  7037                           	opt stack 22
  7038                           
  7039                           ;incstack = 0
  7040                           ;isupper@c stored from wreg
  7041  00444A  6E1A               	movwf	isupper@c,c
  7042  00444C  0E00               	movlw	0
  7043  00444E  6E19               	movwf	_isupper$3620,c
  7044  004450  0E5B               	movlw	91
  7045  004452  601A               	cpfslt	isupper@c,c
  7046  004454  D005               	goto	l2464
  7047  004456  0E40               	movlw	64
  7048  004458  641A               	cpfsgt	isupper@c,c
  7049  00445A  D002               	goto	l2464
  7050  00445C  0E01               	movlw	1
  7051  00445E  6E19               	movwf	_isupper$3620,c
  7052  004460                     l2464:
  7053  004460  C019  F018         	movff	_isupper$3620,??_isupper
  7054  004464  3018               	rrcf	??_isupper,w,c
  7055  004466  0012               	return	
  7056  004468                     __end_of_isupper:
  7057                           	opt stack 0
  7058                           tosu	equ	0xFFF
  7059                           tosh	equ	0xFFE
  7060                           tosl	equ	0xFFD
  7061                           pclath	equ	0xFFA
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           postinc0	equ	0xFEE
  7069                           wreg	equ	0xFE8
  7070                           indf1	equ	0xFE7
  7071                           postdec1	equ	0xFE5
  7072                           fsr1h	equ	0xFE2
  7073                           fsr1l	equ	0xFE1
  7074                           indf2	equ	0xFDF
  7075                           postinc2	equ	0xFDE
  7076                           postdec2	equ	0xFDD
  7077                           fsr2h	equ	0xFDA
  7078                           fsr2l	equ	0xFD9
  7079                           status	equ	0xFD8
  7080                           
  7081 ;; *************** function _CollectRxStatusParams *****************
  7082 ;; Defined at:
  7083 ;;		line 144 in file "SystemStatus.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;		None
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7097 ;;      Params:         0       0       0       0       0       0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0
  7100 ;;      Totals:         0       0       0       0       0       0       0
  7101 ;;Total ram usage:        0 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    5
  7104 ;; This function calls:
  7105 ;;		___lltoft
  7106 ;;		___lwtoft
  7107 ;; This function is called by:
  7108 ;;		_GroupRx
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text16
  7113  003ACA                     __ptext16:
  7114                           	opt stack 0
  7115  003ACA                     _CollectRxStatusParams:
  7116                           	opt stack 23
  7117                           
  7118                           ;SystemStatus.c: 146: rxStatistics.Synt = rxFreq;
  7119                           
  7120                           ;incstack = 0
  7121  003ACA  C1CC  F1A3         	movff	_rxFreq,_rxStatistics	;volatile
  7122                           
  7123                           ;SystemStatus.c: 147: rxStatistics.DeviceTemperature = lastAdcTemp;
  7124  003ACE  C1DE  F020         	movff	_lastAdcTemp,___lwtoft@c	;volatile
  7125  003AD2  C1DF  F021         	movff	_lastAdcTemp+1,___lwtoft@c+1	;volatile
  7126  003AD6  ECF2  F021         	call	___lwtoft	;wreg free
  7127  003ADA  C020  F1A9         	movff	?___lwtoft,_rxStatistics+6	;volatile
  7128  003ADE  C021  F1AA         	movff	?___lwtoft+1,_rxStatistics+7	;volatile
  7129  003AE2  C022  F1AB         	movff	?___lwtoft+2,_rxStatistics+8	;volatile
  7130                           
  7131                           ;SystemStatus.c: 148: rxStatistics.InputPowerStatus = PORTDbits.RD6;
  7132  003AE6  0E00               	movlw	0
  7133  003AE8  BC83               	btfsc	3971,6,c	;volatile
  7134  003AEA  0E01               	movlw	1
  7135  003AEC  0101               	movlb	1	; () banked
  7136  003AEE  6FAC               	movwf	(_rxStatistics+9)& (0+255),b	;volatile
  7137                           
  7138                           ; BSR set to: 1
  7139                           ;SystemStatus.c: 149: rxStatistics.Freq = rxFreq;
  7140  003AF0  C1CC  F020         	movff	_rxFreq,___lltoft@c	;volatile
  7141  003AF4  C1CD  F021         	movff	_rxFreq+1,___lltoft@c+1	;volatile
  7142  003AF8  C1CE  F022         	movff	_rxFreq+2,___lltoft@c+2	;volatile
  7143  003AFC  C1CF  F023         	movff	_rxFreq+3,___lltoft@c+3	;volatile
  7144  003B00  EC8D  F01E         	call	___lltoft	;wreg free
  7145  003B04  C020  F1AD         	movff	?___lltoft,_rxStatistics+10	;volatile
  7146  003B08  C021  F1AE         	movff	?___lltoft+1,_rxStatistics+11	;volatile
  7147  003B0C  C022  F1AF         	movff	?___lltoft+2,_rxStatistics+12	;volatile
  7148                           
  7149                           ;SystemStatus.c: 150: rxStatistics.RSSI = lastAdcFfwrRSSI;
  7150  003B10  C1DC  F1B0         	movff	_lastAdcFfwrRSSI,_rxStatistics+13	;volatile
  7151                           
  7152                           ;SystemStatus.c: 151: rxStatistics.Light = PORTBbits.RB3;
  7153  003B14  0E00               	movlw	0
  7154  003B16  B681               	btfsc	3969,3,c	;volatile
  7155  003B18  0E01               	movlw	1
  7156  003B1A  0101               	movlb	1	; () banked
  7157  003B1C  6FB4               	movwf	(_rxStatistics+17)& (0+255),b	;volatile
  7158                           
  7159                           ; BSR set to: 1
  7160                           ;SystemStatus.c: 152: rxStatistics.UnitId = 123;
  7161  003B1E  0E7B               	movlw	123
  7162  003B20  6FB5               	movwf	(_rxStatistics+18)& (0+255),b	;volatile
  7163                           
  7164                           ; BSR set to: 1
  7165                           ;SystemStatus.c: 153: rxStatistics.UnitDc = 1234;
  7166  003B22  0E04               	movlw	4
  7167  003B24  6FB7               	movwf	(_rxStatistics+20)& (0+255),b	;volatile
  7168  003B26  0ED2               	movlw	210
  7169  003B28  6FB6               	movwf	(_rxStatistics+19)& (0+255),b	;volatile
  7170                           
  7171                           ; BSR set to: 1
  7172                           ;SystemStatus.c: 154: rxStatistics.SwVersion = "1_002";
  7173  003B2A  0EF0               	movlw	low STR_17
  7174  003B2C  6FB8               	movwf	(_rxStatistics+21)& (0+255),b	;volatile
  7175  003B2E  0E7F               	movlw	high STR_17
  7176  003B30  6FB9               	movwf	(_rxStatistics+22)& (0+255),b	;volatile
  7177                           
  7178                           ; BSR set to: 1
  7179                           ;SystemStatus.c: 155: rxStatistics.UnitType = 0;
  7180  003B32  0E00               	movlw	0
  7181  003B34  6FBA               	movwf	(_rxStatistics+23)& (0+255),b	;volatile
  7182                           
  7183                           ; BSR set to: 1
  7184  003B36  0012               	return		;funcret
  7185  003B38                     __end_of_CollectRxStatusParams:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           postinc0	equ	0xFEE
  7198                           wreg	equ	0xFE8
  7199                           indf1	equ	0xFE7
  7200                           postdec1	equ	0xFE5
  7201                           fsr1h	equ	0xFE2
  7202                           fsr1l	equ	0xFE1
  7203                           indf2	equ	0xFDF
  7204                           postinc2	equ	0xFDE
  7205                           postdec2	equ	0xFDD
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _AdcSingleSample *****************
  7211 ;; Defined at:
  7212 ;;		line 32 in file "AdcApp.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  cType           1    wreg     enum E177
  7215 ;;  chType          1   30[COMRAM] enum E7691
  7216 ;;  numSamples      4   31[COMRAM] long 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  cType           1   39[COMRAM] enum E177
  7219 ;;  retNum          4   35[COMRAM] unsigned long 
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7229 ;;      Params:         5       0       0       0       0       0       0
  7230 ;;      Locals:         5       0       0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0
  7232 ;;      Totals:        10       0       0       0       0       0       0
  7233 ;;Total ram usage:       10 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    5
  7236 ;; This function calls:
  7237 ;;		_UART_Write_Text
  7238 ;; This function is called by:
  7239 ;;		_GroupRx
  7240 ;;		_GroupTx
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text17
  7245  002AAE                     __ptext17:
  7246                           	opt stack 0
  7247  002AAE                     _AdcSingleSample:
  7248                           	opt stack 23
  7249                           
  7250                           ; BSR set to: 1
  7251                           ;incstack = 0
  7252                           ;AdcSingleSample@cType stored from wreg
  7253  002AAE  6E28               	movwf	AdcSingleSample@cType,c
  7254                           
  7255                           ;AdcApp.c: 34: uint32_t retNum = 0x0;
  7256  002AB0  0E00               	movlw	0
  7257  002AB2  6E24               	movwf	AdcSingleSample@retNum,c
  7258  002AB4  0E00               	movlw	0
  7259  002AB6  6E25               	movwf	AdcSingleSample@retNum+1,c
  7260  002AB8  0E00               	movlw	0
  7261  002ABA  6E26               	movwf	AdcSingleSample@retNum+2,c
  7262  002ABC  0E00               	movlw	0
  7263  002ABE  6E27               	movwf	AdcSingleSample@retNum+3,c
  7264                           
  7265                           ;AdcApp.c: 36: if(chType == ADC_OFF)
  7266  002AC0  501F               	movf	AdcSingleSample@chType,w,c
  7267  002AC2  A4D8               	btfss	status,2,c
  7268  002AC4  D00B               	goto	l136
  7269                           
  7270                           ;AdcApp.c: 37: {
  7271                           ;AdcApp.c: 38: if(cType == TX_TYPE) txStatistics.AdcValues.OperState = 0;
  7272  002AC6  5028               	movf	AdcSingleSample@cType,w,c
  7273  002AC8  A4D8               	btfss	status,2,c
  7274  002ACA  D004               	goto	l137
  7275  002ACC  0E00               	movlw	0
  7276  002ACE  0101               	movlb	1	; () banked
  7277  002AD0  6F86               	movwf	(_txStatistics+1)& (0+255),b	;volatile
  7278  002AD2  0012               	return	
  7279  002AD4                     l137:
  7280                           
  7281                           ;AdcApp.c: 39: else rxStatistics.AdcValues.OperState = 0;
  7282                           
  7283                           ; BSR set to: 1
  7284  002AD4  0E00               	movlw	0
  7285  002AD6  0101               	movlb	1	; () banked
  7286  002AD8  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7287                           
  7288                           ; BSR set to: 1
  7289                           ;AdcApp.c: 40: }
  7290  002ADA  0012               	return	
  7291  002ADC                     l136:
  7292                           
  7293                           ;AdcApp.c: 41: else
  7294                           ;AdcApp.c: 42: {
  7295                           ;AdcApp.c: 44: if(channelNum > (0x04))
  7296                           
  7297                           ; BSR set to: 1
  7298  002ADC  5038               	movf	_channelNum+1,w,c
  7299  002ADE  E104               	bnz	u9850
  7300  002AE0  0E05               	movlw	5
  7301  002AE2  5C37               	subwf	_channelNum,w,c
  7302  002AE4  A0D8               	btfss	status,0,c
  7303  002AE6  D007               	goto	l140
  7304  002AE8                     u9850:
  7305                           
  7306                           ;AdcApp.c: 45: {
  7307                           ;AdcApp.c: 46: UART_Write_Text("NOT OK \n\r");
  7308  002AE8  0ECD               	movlw	low STR_1
  7309  002AEA  6E19               	movwf	UART_Write_Text@text,c
  7310  002AEC  0E7F               	movlw	high STR_1
  7311  002AEE  6E1A               	movwf	UART_Write_Text@text+1,c
  7312  002AF0  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7313                           
  7314                           ;AdcApp.c: 47: }
  7315  002AF4  0012               	return	
  7316  002AF6                     l140:
  7317                           
  7318                           ;AdcApp.c: 48: else
  7319                           ;AdcApp.c: 49: {
  7320                           ;AdcApp.c: 50: if(cType == TX_TYPE)
  7321  002AF6  5028               	movf	AdcSingleSample@cType,w,c
  7322  002AF8  A4D8               	btfss	status,2,c
  7323  002AFA  D031               	goto	l152
  7324                           
  7325                           ;AdcApp.c: 51: {
  7326                           ;AdcApp.c: 52: if(channelNum == 0)
  7327  002AFC  5037               	movf	_channelNum,w,c
  7328  002AFE  1038               	iorwf	_channelNum+1,w,c
  7329  002B00  A4D8               	btfss	status,2,c
  7330  002B02  D004               	goto	l143
  7331                           
  7332                           ;AdcApp.c: 53: {
  7333                           ;AdcApp.c: 54: rxStatistics.AdcValues.OperState = 0;
  7334  002B04  0E00               	movlw	0
  7335  002B06  0101               	movlb	1	; () banked
  7336  002B08  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7337                           
  7338                           ; BSR set to: 1
  7339                           ;AdcApp.c: 55: return;
  7340  002B0A  0012               	return	
  7341  002B0C                     l143:
  7342                           
  7343                           ;AdcApp.c: 57: else
  7344                           ;AdcApp.c: 58: {
  7345                           ;AdcApp.c: 59: if(channelNum == 1) UART_Write_Text("TX SAMPLE CHANNEL: TX-ADC_RREV\n\r")
      +                          ;
  7346                           
  7347                           ; BSR set to: 1
  7348  002B0C  0437               	decf	_channelNum,w,c
  7349  002B0E  1038               	iorwf	_channelNum+1,w,c
  7350  002B10  A4D8               	btfss	status,2,c
  7351  002B12  D007               	goto	l146
  7352  002B14  0EE0               	movlw	low STR_2
  7353  002B16  6E19               	movwf	UART_Write_Text@text,c
  7354  002B18  0E7D               	movlw	high STR_2
  7355  002B1A  6E1A               	movwf	UART_Write_Text@text+1,c
  7356  002B1C  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7357  002B20  D00B               	goto	l148
  7358  002B22                     l146:
  7359                           
  7360                           ;AdcApp.c: 60: else if(channelNum == 2) UART_Write_Text("TX SAMPLE CHANNEL ADC_TEMP\n\r"
      +                          );
  7361  002B22  0E02               	movlw	2
  7362  002B24  1837               	xorwf	_channelNum,w,c
  7363  002B26  1038               	iorwf	_channelNum+1,w,c
  7364  002B28  A4D8               	btfss	status,2,c
  7365  002B2A  D006               	goto	l148
  7366  002B2C  0E5D               	movlw	low STR_3
  7367  002B2E  6E19               	movwf	UART_Write_Text@text,c
  7368  002B30  0E7E               	movlw	high STR_3
  7369  002B32  6E1A               	movwf	UART_Write_Text@text+1,c
  7370  002B34  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7371  002B38                     l148:
  7372                           
  7373                           ;AdcApp.c: 61: if(channelNum == 0x1 || channelNum == 0x2)
  7374  002B38  0437               	decf	_channelNum,w,c
  7375  002B3A  1038               	iorwf	_channelNum+1,w,c
  7376  002B3C  B4D8               	btfsc	status,2,c
  7377  002B3E  D005               	goto	u9910
  7378  002B40  0E02               	movlw	2
  7379  002B42  1837               	xorwf	_channelNum,w,c
  7380  002B44  1038               	iorwf	_channelNum+1,w,c
  7381  002B46  A4D8               	btfss	status,2,c
  7382  002B48  D004               	goto	l149
  7383  002B4A                     u9910:
  7384                           
  7385                           ;AdcApp.c: 62: {
  7386                           ;AdcApp.c: 63: needToSample = 1;
  7387  002B4A  0E01               	movlw	1
  7388  002B4C  0101               	movlb	1	; () banked
  7389  002B4E  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  7390                           
  7391                           ;AdcApp.c: 64: }
  7392  002B50  D006               	goto	l152
  7393  002B52                     l149:
  7394                           
  7395                           ;AdcApp.c: 65: else
  7396                           ;AdcApp.c: 66: {
  7397                           ;AdcApp.c: 67: UART_Write_Text("NOT OK \n\r");
  7398                           
  7399                           ; BSR set to: 1
  7400  002B52  0ECD               	movlw	low STR_1
  7401  002B54  6E19               	movwf	UART_Write_Text@text,c
  7402  002B56  0E7F               	movlw	high STR_1
  7403  002B58  6E1A               	movwf	UART_Write_Text@text+1,c
  7404  002B5A  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7405  002B5E                     l152:
  7406                           
  7407                           ;AdcApp.c: 68: }
  7408                           ;AdcApp.c: 69: }
  7409                           ;AdcApp.c: 70: }
  7410                           ;AdcApp.c: 72: if(cType == RX_TYPE)
  7411  002B5E  0428               	decf	AdcSingleSample@cType,w,c
  7412  002B60  A4D8               	btfss	status,2,c
  7413  002B62  0012               	return	
  7414                           
  7415                           ;AdcApp.c: 73: {
  7416                           ;AdcApp.c: 74: if(channelNum == 0)
  7417  002B64  5037               	movf	_channelNum,w,c
  7418  002B66  1038               	iorwf	_channelNum+1,w,c
  7419  002B68  A4D8               	btfss	status,2,c
  7420  002B6A  D004               	goto	l154
  7421                           
  7422                           ;AdcApp.c: 75: {
  7423                           ;AdcApp.c: 76: rxStatistics.AdcValues.OperState = 0;
  7424  002B6C  0E00               	movlw	0
  7425  002B6E  0101               	movlb	1	; () banked
  7426  002B70  6FA4               	movwf	(_rxStatistics+1)& (0+255),b	;volatile
  7427                           
  7428                           ; BSR set to: 1
  7429                           ;AdcApp.c: 78: }
  7430                           
  7431                           ; BSR set to: 1
  7432                           ;AdcApp.c: 77: return;
  7433  002B72  0012               	return	
  7434  002B74                     l154:
  7435                           
  7436                           ;AdcApp.c: 79: else
  7437                           ;AdcApp.c: 80: {
  7438                           ;AdcApp.c: 81: if(channelNum == 1) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_FFWR\n\r");
  7439                           
  7440                           ; BSR set to: 1
  7441  002B74  0437               	decf	_channelNum,w,c
  7442  002B76  1038               	iorwf	_channelNum+1,w,c
  7443  002B78  A4D8               	btfss	status,2,c
  7444  002B7A  D007               	goto	l156
  7445  002B7C  0E01               	movlw	low STR_5
  7446  002B7E  6E19               	movwf	UART_Write_Text@text,c
  7447  002B80  0E7E               	movlw	high STR_5
  7448  002B82  6E1A               	movwf	UART_Write_Text@text+1,c
  7449  002B84  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7450  002B88  D00B               	goto	l158
  7451  002B8A                     l156:
  7452                           
  7453                           ;AdcApp.c: 82: else if(channelNum == 2) UART_Write_Text("RX SAMPLE CHANNEL RX-ADC_VG_MON
      +                          \n\r");
  7454  002B8A  0E02               	movlw	2
  7455  002B8C  1837               	xorwf	_channelNum,w,c
  7456  002B8E  1038               	iorwf	_channelNum+1,w,c
  7457  002B90  A4D8               	btfss	status,2,c
  7458  002B92  D006               	goto	l158
  7459  002B94  0EBE               	movlw	low STR_6
  7460  002B96  6E19               	movwf	UART_Write_Text@text,c
  7461  002B98  0E7D               	movlw	high STR_6
  7462  002B9A  6E1A               	movwf	UART_Write_Text@text+1,c
  7463  002B9C  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7464  002BA0                     l158:
  7465                           
  7466                           ;AdcApp.c: 83: if(channelNum == 0x1 || channelNum == 0x2)
  7467  002BA0  0437               	decf	_channelNum,w,c
  7468  002BA2  1038               	iorwf	_channelNum+1,w,c
  7469  002BA4  B4D8               	btfsc	status,2,c
  7470  002BA6  D005               	goto	u9970
  7471  002BA8  0E02               	movlw	2
  7472  002BAA  1837               	xorwf	_channelNum,w,c
  7473  002BAC  1038               	iorwf	_channelNum+1,w,c
  7474  002BAE  A4D8               	btfss	status,2,c
  7475  002BB0  D004               	goto	l159
  7476  002BB2                     u9970:
  7477                           
  7478                           ;AdcApp.c: 84: {
  7479                           ;AdcApp.c: 85: needToSample = 1;
  7480  002BB2  0E01               	movlw	1
  7481  002BB4  0101               	movlb	1	; () banked
  7482  002BB6  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  7483                           
  7484                           ;AdcApp.c: 86: }
  7485  002BB8  0012               	return	
  7486  002BBA                     l159:
  7487                           
  7488                           ;AdcApp.c: 87: else
  7489                           ;AdcApp.c: 88: {
  7490                           ;AdcApp.c: 89: UART_Write_Text("NOT OK \n\r");
  7491                           
  7492                           ; BSR set to: 1
  7493  002BBA  0ECD               	movlw	low STR_1
  7494  002BBC  6E19               	movwf	UART_Write_Text@text,c
  7495  002BBE  0E7F               	movlw	high STR_1
  7496  002BC0  6E1A               	movwf	UART_Write_Text@text+1,c
  7497  002BC2  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7498  002BC6  0012               	return	
  7499  002BC8                     __end_of_AdcSingleSample:
  7500                           	opt stack 0
  7501                           tosu	equ	0xFFF
  7502                           tosh	equ	0xFFE
  7503                           tosl	equ	0xFFD
  7504                           pclath	equ	0xFFA
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           indf1	equ	0xFE7
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _testLeds *****************
  7525 ;; Defined at:
  7526 ;;		line 43 in file "LedsApp.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;		None
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  idx             2   24[COMRAM] int 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      void 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7540 ;;      Params:         0       0       0       0       0       0       0
  7541 ;;      Locals:         2       0       0       0       0       0       0
  7542 ;;      Temps:          1       0       0       0       0       0       0
  7543 ;;      Totals:         3       0       0       0       0       0       0
  7544 ;;Total ram usage:        3 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    3
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_GroupCommon
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text18
  7555  003C00                     __ptext18:
  7556                           	opt stack 0
  7557  003C00                     _testLeds:
  7558                           	opt stack 25
  7559                           
  7560                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7561                           
  7562                           ;incstack = 0
  7563  003C00  0E00               	movlw	0
  7564  003C02  6E1A               	movwf	testLeds@idx+1,c
  7565  003C04  0E00               	movlw	0
  7566  003C06  6E19               	movwf	testLeds@idx,c
  7567  003C08                     l9407:
  7568  003C08  BE1A               	btfsc	testLeds@idx+1,7,c
  7569  003C0A  D006               	goto	l66
  7570  003C0C  501A               	movf	testLeds@idx+1,w,c
  7571  003C0E  E127               	bnz	l68
  7572  003C10  0E0A               	movlw	10
  7573  003C12  5C19               	subwf	testLeds@idx,w,c
  7574  003C14  B0D8               	btfsc	status,0,c
  7575  003C16  0012               	return	
  7576  003C18                     l66:
  7577                           
  7578                           ;LedsApp.c: 47: {
  7579                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7580  003C18  808B               	bsf	3979,0,c	;volatile
  7581                           
  7582                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7583  003C1A  0E82               	movlw	130
  7584  003C1C  6E18               	movwf	??_testLeds& (0+255),c
  7585  003C1E  0EDE               	movlw	222
  7586  003C20                     u10827:
  7587  003C20  2EE8               	decfsz	wreg,f,c
  7588  003C22  D7FE               	bra	u10827
  7589  003C24  2E18               	decfsz	??_testLeds& (0+255),f,c
  7590  003C26  D7FC               	bra	u10827
  7591                           
  7592                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7593  003C28  888A               	bsf	3978,4,c	;volatile
  7594                           
  7595                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7596  003C2A  0E82               	movlw	130
  7597  003C2C  6E18               	movwf	??_testLeds& (0+255),c
  7598  003C2E  0EDE               	movlw	222
  7599  003C30                     u10837:
  7600  003C30  2EE8               	decfsz	wreg,f,c
  7601  003C32  D7FE               	bra	u10837
  7602  003C34  2E18               	decfsz	??_testLeds& (0+255),f,c
  7603  003C36  D7FC               	bra	u10837
  7604                           
  7605                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7606  003C38  908B               	bcf	3979,0,c	;volatile
  7607                           
  7608                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7609  003C3A  0E82               	movlw	130
  7610  003C3C  6E18               	movwf	??_testLeds& (0+255),c
  7611  003C3E  0EDE               	movlw	222
  7612  003C40                     u10847:
  7613  003C40  2EE8               	decfsz	wreg,f,c
  7614  003C42  D7FE               	bra	u10847
  7615  003C44  2E18               	decfsz	??_testLeds& (0+255),f,c
  7616  003C46  D7FC               	bra	u10847
  7617                           
  7618                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7619  003C48  988A               	bcf	3978,4,c	;volatile
  7620                           
  7621                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7622  003C4A  0E82               	movlw	130
  7623  003C4C  6E18               	movwf	??_testLeds& (0+255),c
  7624  003C4E  0EDE               	movlw	222
  7625  003C50                     u10857:
  7626  003C50  2EE8               	decfsz	wreg,f,c
  7627  003C52  D7FE               	bra	u10857
  7628  003C54  2E18               	decfsz	??_testLeds& (0+255),f,c
  7629  003C56  D7FC               	bra	u10857
  7630  003C58  4A19               	infsnz	testLeds@idx,f,c
  7631  003C5A  2A1A               	incf	testLeds@idx+1,f,c
  7632  003C5C  D7D5               	goto	l9407
  7633  003C5E                     l68:
  7634  003C5E  0012               	return		;funcret
  7635  003C60                     __end_of_testLeds:
  7636                           	opt stack 0
  7637                           tosu	equ	0xFFF
  7638                           tosh	equ	0xFFE
  7639                           tosl	equ	0xFFD
  7640                           pclath	equ	0xFFA
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           indf1	equ	0xFE7
  7650                           postdec1	equ	0xFE5
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function _PrintHelpScreen *****************
  7661 ;; Defined at:
  7662 ;;		line 78 in file "SystemStatus.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  dest           50    0[BANK1 ] unsigned char [50]
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7676 ;;      Params:         0       0       0       0       0       0       0
  7677 ;;      Locals:         0       0      50       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0
  7679 ;;      Totals:         0       0      50       0       0       0       0
  7680 ;;Total ram usage:       50 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    7
  7683 ;; This function calls:
  7684 ;;		_UART_Write_Text
  7685 ;;		_sprintf
  7686 ;; This function is called by:
  7687 ;;		_GroupCommon
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text19
  7692  000F8C                     __ptext19:
  7693                           	opt stack 0
  7694  000F8C                     _PrintHelpScreen:
  7695                           	opt stack 21
  7696                           
  7697                           ;SystemStatus.c: 80: char dest[50];
  7698                           ;SystemStatus.c: 83: sprintf(dest, "<TX system commands>\n\r");
  7699                           
  7700                           ;incstack = 0
  7701  000F8C  0E00               	movlw	low PrintHelpScreen@dest
  7702  000F8E  0100               	movlb	0	; () banked
  7703  000F90  6FBC               	movwf	sprintf@sp& (0+255),b
  7704  000F92  0E01               	movlw	high PrintHelpScreen@dest
  7705  000F94  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7706  000F96  0EDB               	movlw	low STR_23
  7707  000F98  6FBE               	movwf	sprintf@f& (0+255),b
  7708  000F9A  0E7E               	movlw	high STR_23
  7709  000F9C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7710  000F9E  EC70  F000         	call	_sprintf	;wreg free
  7711                           
  7712                           ;SystemStatus.c: 84: UART_Write_Text(dest);
  7713  000FA2  0E00               	movlw	low PrintHelpScreen@dest
  7714  000FA4  6E19               	movwf	UART_Write_Text@text,c
  7715  000FA6  0E01               	movlw	high PrintHelpScreen@dest
  7716  000FA8  6E1A               	movwf	UART_Write_Text@text+1,c
  7717  000FAA  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7718                           
  7719                           ;SystemStatus.c: 86: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  7720  000FAE  0E00               	movlw	low PrintHelpScreen@dest
  7721  000FB0  0100               	movlb	0	; () banked
  7722  000FB2  6FBC               	movwf	sprintf@sp& (0+255),b
  7723  000FB4  0E01               	movlw	high PrintHelpScreen@dest
  7724  000FB6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7725  000FB8  0E38               	movlw	low STR_24
  7726  000FBA  6FBE               	movwf	sprintf@f& (0+255),b
  7727  000FBC  0E7B               	movlw	high STR_24
  7728  000FBE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7729  000FC0  EC70  F000         	call	_sprintf	;wreg free
  7730                           
  7731                           ;SystemStatus.c: 87: UART_Write_Text(dest);
  7732  000FC4  0E00               	movlw	low PrintHelpScreen@dest
  7733  000FC6  6E19               	movwf	UART_Write_Text@text,c
  7734  000FC8  0E01               	movlw	high PrintHelpScreen@dest
  7735  000FCA  6E1A               	movwf	UART_Write_Text@text+1,c
  7736  000FCC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7737                           
  7738                           ;SystemStatus.c: 88: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  7739  000FD0  0E00               	movlw	low PrintHelpScreen@dest
  7740  000FD2  0100               	movlb	0	; () banked
  7741  000FD4  6FBC               	movwf	sprintf@sp& (0+255),b
  7742  000FD6  0E01               	movlw	high PrintHelpScreen@dest
  7743  000FD8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7744  000FDA  0EB8               	movlw	low STR_25
  7745  000FDC  6FBE               	movwf	sprintf@f& (0+255),b
  7746  000FDE  0E7B               	movlw	high STR_25
  7747  000FE0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7748  000FE2  EC70  F000         	call	_sprintf	;wreg free
  7749                           
  7750                           ;SystemStatus.c: 89: UART_Write_Text(dest);
  7751  000FE6  0E00               	movlw	low PrintHelpScreen@dest
  7752  000FE8  6E19               	movwf	UART_Write_Text@text,c
  7753  000FEA  0E01               	movlw	high PrintHelpScreen@dest
  7754  000FEC  6E1A               	movwf	UART_Write_Text@text+1,c
  7755  000FEE  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7756                           
  7757                           ;SystemStatus.c: 90: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  7758  000FF2  0E00               	movlw	low PrintHelpScreen@dest
  7759  000FF4  0100               	movlb	0	; () banked
  7760  000FF6  6FBC               	movwf	sprintf@sp& (0+255),b
  7761  000FF8  0E01               	movlw	high PrintHelpScreen@dest
  7762  000FFA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7763  000FFC  0ED0               	movlw	low STR_26
  7764  000FFE  6FBE               	movwf	sprintf@f& (0+255),b
  7765  001000  0E7C               	movlw	high STR_26
  7766  001002  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7767  001004  EC70  F000         	call	_sprintf	;wreg free
  7768                           
  7769                           ;SystemStatus.c: 91: UART_Write_Text(dest);
  7770  001008  0E00               	movlw	low PrintHelpScreen@dest
  7771  00100A  6E19               	movwf	UART_Write_Text@text,c
  7772  00100C  0E01               	movlw	high PrintHelpScreen@dest
  7773  00100E  6E1A               	movwf	UART_Write_Text@text+1,c
  7774  001010  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7775                           
  7776                           ;SystemStatus.c: 92: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX 
      +                          system [Default = 0]\r\n");
  7777  001014  0E00               	movlw	low PrintHelpScreen@dest
  7778  001016  0100               	movlb	0	; () banked
  7779  001018  6FBC               	movwf	sprintf@sp& (0+255),b
  7780  00101A  0E01               	movlw	high PrintHelpScreen@dest
  7781  00101C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7782  00101E  0E5A               	movlw	low STR_27
  7783  001020  6FBE               	movwf	sprintf@f& (0+255),b
  7784  001022  0E7A               	movlw	high STR_27
  7785  001024  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7786  001026  EC70  F000         	call	_sprintf	;wreg free
  7787                           
  7788                           ;SystemStatus.c: 93: UART_Write_Text(dest);
  7789  00102A  0E00               	movlw	low PrintHelpScreen@dest
  7790  00102C  6E19               	movwf	UART_Write_Text@text,c
  7791  00102E  0E01               	movlw	high PrintHelpScreen@dest
  7792  001030  6E1A               	movwf	UART_Write_Text@text+1,c
  7793  001032  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7794                           
  7795                           ;SystemStatus.c: 94: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission at
      +                           TX system [Default = 0]\r\n");
  7796  001036  0E00               	movlw	low PrintHelpScreen@dest
  7797  001038  0100               	movlb	0	; () banked
  7798  00103A  6FBC               	movwf	sprintf@sp& (0+255),b
  7799  00103C  0E01               	movlw	high PrintHelpScreen@dest
  7800  00103E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7801  001040  0E0B               	movlw	low STR_28
  7802  001042  6FBE               	movwf	sprintf@f& (0+255),b
  7803  001044  0E7A               	movlw	high STR_28
  7804  001046  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7805  001048  EC70  F000         	call	_sprintf	;wreg free
  7806                           
  7807                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  7808  00104C  0E00               	movlw	low PrintHelpScreen@dest
  7809  00104E  6E19               	movwf	UART_Write_Text@text,c
  7810  001050  0E01               	movlw	high PrintHelpScreen@dest
  7811  001052  6E1A               	movwf	UART_Write_Text@text+1,c
  7812  001054  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7813                           
  7814                           ;SystemStatus.c: 98: sprintf(dest, "\n\r<RX system commands>\n\r");
  7815  001058  0E00               	movlw	low PrintHelpScreen@dest
  7816  00105A  0100               	movlb	0	; () banked
  7817  00105C  6FBC               	movwf	sprintf@sp& (0+255),b
  7818  00105E  0E01               	movlw	high PrintHelpScreen@dest
  7819  001060  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7820  001062  0E7A               	movlw	low STR_29
  7821  001064  6FBE               	movwf	sprintf@f& (0+255),b
  7822  001066  0E7E               	movlw	high STR_29
  7823  001068  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7824  00106A  EC70  F000         	call	_sprintf	;wreg free
  7825                           
  7826                           ;SystemStatus.c: 99: UART_Write_Text(dest);
  7827  00106E  0E00               	movlw	low PrintHelpScreen@dest
  7828  001070  6E19               	movwf	UART_Write_Text@text,c
  7829  001072  0E01               	movlw	high PrintHelpScreen@dest
  7830  001074  6E1A               	movwf	UART_Write_Text@text+1,c
  7831  001076  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7832                           
  7833                           ;SystemStatus.c: 100: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  7834  00107A  0E00               	movlw	low PrintHelpScreen@dest
  7835  00107C  0100               	movlb	0	; () banked
  7836  00107E  6FBC               	movwf	sprintf@sp& (0+255),b
  7837  001080  0E01               	movlw	high PrintHelpScreen@dest
  7838  001082  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7839  001084  0EA5               	movlw	low STR_30
  7840  001086  6FBE               	movwf	sprintf@f& (0+255),b
  7841  001088  0E7A               	movlw	high STR_30
  7842  00108A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7843  00108C  EC70  F000         	call	_sprintf	;wreg free
  7844                           
  7845                           ;SystemStatus.c: 101: UART_Write_Text(dest);
  7846  001090  0E00               	movlw	low PrintHelpScreen@dest
  7847  001092  6E19               	movwf	UART_Write_Text@text,c
  7848  001094  0E01               	movlw	high PrintHelpScreen@dest
  7849  001096  6E1A               	movwf	UART_Write_Text@text+1,c
  7850  001098  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7851                           
  7852                           ;SystemStatus.c: 102: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  7853  00109C  0E00               	movlw	low PrintHelpScreen@dest
  7854  00109E  0100               	movlb	0	; () banked
  7855  0010A0  6FBC               	movwf	sprintf@sp& (0+255),b
  7856  0010A2  0E01               	movlw	high PrintHelpScreen@dest
  7857  0010A4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7858  0010A6  0EFE               	movlw	low STR_31
  7859  0010A8  6FBE               	movwf	sprintf@f& (0+255),b
  7860  0010AA  0E7C               	movlw	high STR_31
  7861  0010AC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7862  0010AE  EC70  F000         	call	_sprintf	;wreg free
  7863                           
  7864                           ;SystemStatus.c: 103: UART_Write_Text(dest);
  7865  0010B2  0E00               	movlw	low PrintHelpScreen@dest
  7866  0010B4  6E19               	movwf	UART_Write_Text@text,c
  7867  0010B6  0E01               	movlw	high PrintHelpScreen@dest
  7868  0010B8  6E1A               	movwf	UART_Write_Text@text+1,c
  7869  0010BA  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7870                           
  7871                           ;SystemStatus.c: 104: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  7872  0010BE  0E00               	movlw	low PrintHelpScreen@dest
  7873  0010C0  0100               	movlb	0	; () banked
  7874  0010C2  6FBC               	movwf	sprintf@sp& (0+255),b
  7875  0010C4  0E01               	movlw	high PrintHelpScreen@dest
  7876  0010C6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7877  0010C8  0E7A               	movlw	low STR_32
  7878  0010CA  6FBE               	movwf	sprintf@f& (0+255),b
  7879  0010CC  0E7B               	movlw	high STR_32
  7880  0010CE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7881  0010D0  EC70  F000         	call	_sprintf	;wreg free
  7882                           
  7883                           ;SystemStatus.c: 105: UART_Write_Text(dest);
  7884  0010D4  0E00               	movlw	low PrintHelpScreen@dest
  7885  0010D6  6E19               	movwf	UART_Write_Text@text,c
  7886  0010D8  0E01               	movlw	high PrintHelpScreen@dest
  7887  0010DA  6E1A               	movwf	UART_Write_Text@text+1,c
  7888  0010DC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7889                           
  7890                           ;SystemStatus.c: 106: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  7891  0010E0  0E00               	movlw	low PrintHelpScreen@dest
  7892  0010E2  0100               	movlb	0	; () banked
  7893  0010E4  6FBC               	movwf	sprintf@sp& (0+255),b
  7894  0010E6  0E01               	movlw	high PrintHelpScreen@dest
  7895  0010E8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7896  0010EA  0EF5               	movlw	low STR_33
  7897  0010EC  6FBE               	movwf	sprintf@f& (0+255),b
  7898  0010EE  0E7B               	movlw	high STR_33
  7899  0010F0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7900  0010F2  EC70  F000         	call	_sprintf	;wreg free
  7901                           
  7902                           ;SystemStatus.c: 107: UART_Write_Text(dest);
  7903  0010F6  0E00               	movlw	low PrintHelpScreen@dest
  7904  0010F8  6E19               	movwf	UART_Write_Text@text,c
  7905  0010FA  0E01               	movlw	high PrintHelpScreen@dest
  7906  0010FC  6E1A               	movwf	UART_Write_Text@text+1,c
  7907  0010FE  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7908                           
  7909                           ;SystemStatus.c: 108: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  7910  001102  0E00               	movlw	low PrintHelpScreen@dest
  7911  001104  0100               	movlb	0	; () banked
  7912  001106  6FBC               	movwf	sprintf@sp& (0+255),b
  7913  001108  0E01               	movlw	high PrintHelpScreen@dest
  7914  00110A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7915  00110C  0E5F               	movlw	low STR_34
  7916  00110E  6FBE               	movwf	sprintf@f& (0+255),b
  7917  001110  0E79               	movlw	high STR_34
  7918  001112  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7919  001114  EC70  F000         	call	_sprintf	;wreg free
  7920                           
  7921                           ;SystemStatus.c: 109: UART_Write_Text(dest);
  7922  001118  0E00               	movlw	low PrintHelpScreen@dest
  7923  00111A  6E19               	movwf	UART_Write_Text@text,c
  7924  00111C  0E01               	movlw	high PrintHelpScreen@dest
  7925  00111E  6E1A               	movwf	UART_Write_Text@text+1,c
  7926  001120  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7927                           
  7928                           ;SystemStatus.c: 110: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  7929  001124  0E00               	movlw	low PrintHelpScreen@dest
  7930  001126  0100               	movlb	0	; () banked
  7931  001128  6FBC               	movwf	sprintf@sp& (0+255),b
  7932  00112A  0E01               	movlw	high PrintHelpScreen@dest
  7933  00112C  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7934  00112E  0EFA               	movlw	low STR_35
  7935  001130  6FBE               	movwf	sprintf@f& (0+255),b
  7936  001132  0E78               	movlw	high STR_35
  7937  001134  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7938  001136  EC70  F000         	call	_sprintf	;wreg free
  7939                           
  7940                           ;SystemStatus.c: 111: UART_Write_Text(dest);
  7941  00113A  0E00               	movlw	low PrintHelpScreen@dest
  7942  00113C  6E19               	movwf	UART_Write_Text@text,c
  7943  00113E  0E01               	movlw	high PrintHelpScreen@dest
  7944  001140  6E1A               	movwf	UART_Write_Text@text+1,c
  7945  001142  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7946                           
  7947                           ;SystemStatus.c: 114: sprintf(dest, "\n\r<Common system commands>\n\r");
  7948  001146  0E00               	movlw	low PrintHelpScreen@dest
  7949  001148  0100               	movlb	0	; () banked
  7950  00114A  6FBC               	movwf	sprintf@sp& (0+255),b
  7951  00114C  0E01               	movlw	high PrintHelpScreen@dest
  7952  00114E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7953  001150  0E40               	movlw	low STR_36
  7954  001152  6FBE               	movwf	sprintf@f& (0+255),b
  7955  001154  0E7E               	movlw	high STR_36
  7956  001156  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7957  001158  EC70  F000         	call	_sprintf	;wreg free
  7958                           
  7959                           ;SystemStatus.c: 115: UART_Write_Text(dest);
  7960  00115C  0E00               	movlw	low PrintHelpScreen@dest
  7961  00115E  6E19               	movwf	UART_Write_Text@text,c
  7962  001160  0E01               	movlw	high PrintHelpScreen@dest
  7963  001162  6E1A               	movwf	UART_Write_Text@text+1,c
  7964  001164  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7965                           
  7966                           ;SystemStatus.c: 116: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  7967  001168  0E00               	movlw	low PrintHelpScreen@dest
  7968  00116A  0100               	movlb	0	; () banked
  7969  00116C  6FBC               	movwf	sprintf@sp& (0+255),b
  7970  00116E  0E01               	movlw	high PrintHelpScreen@dest
  7971  001170  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7972  001172  0EA2               	movlw	low STR_37
  7973  001174  6FBE               	movwf	sprintf@f& (0+255),b
  7974  001176  0E7C               	movlw	high STR_37
  7975  001178  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7976  00117A  EC70  F000         	call	_sprintf	;wreg free
  7977                           
  7978                           ;SystemStatus.c: 117: UART_Write_Text(dest);
  7979  00117E  0E00               	movlw	low PrintHelpScreen@dest
  7980  001180  6E19               	movwf	UART_Write_Text@text,c
  7981  001182  0E01               	movlw	high PrintHelpScreen@dest
  7982  001184  6E1A               	movwf	UART_Write_Text@text+1,c
  7983  001186  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  7984                           
  7985                           ;SystemStatus.c: 118: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  7986  00118A  0E00               	movlw	low PrintHelpScreen@dest
  7987  00118C  0100               	movlb	0	; () banked
  7988  00118E  6FBC               	movwf	sprintf@sp& (0+255),b
  7989  001190  0E01               	movlw	high PrintHelpScreen@dest
  7990  001192  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  7991  001194  0E6D               	movlw	low STR_38
  7992  001196  6FBE               	movwf	sprintf@f& (0+255),b
  7993  001198  0E7C               	movlw	high STR_38
  7994  00119A  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  7995  00119C  EC70  F000         	call	_sprintf	;wreg free
  7996                           
  7997                           ;SystemStatus.c: 119: UART_Write_Text(dest);
  7998  0011A0  0E00               	movlw	low PrintHelpScreen@dest
  7999  0011A2  6E19               	movwf	UART_Write_Text@text,c
  8000  0011A4  0E01               	movlw	high PrintHelpScreen@dest
  8001  0011A6  6E1A               	movwf	UART_Write_Text@text+1,c
  8002  0011A8  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  8003                           
  8004                           ;SystemStatus.c: 120: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  8005  0011AC  0E00               	movlw	low PrintHelpScreen@dest
  8006  0011AE  0100               	movlb	0	; () banked
  8007  0011B0  6FBC               	movwf	sprintf@sp& (0+255),b
  8008  0011B2  0E01               	movlw	high PrintHelpScreen@dest
  8009  0011B4  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8010  0011B6  0EB5               	movlw	low STR_39
  8011  0011B8  6FBE               	movwf	sprintf@f& (0+255),b
  8012  0011BA  0E79               	movlw	high STR_39
  8013  0011BC  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8014  0011BE  EC70  F000         	call	_sprintf	;wreg free
  8015                           
  8016                           ;SystemStatus.c: 121: UART_Write_Text(dest);
  8017  0011C2  0E00               	movlw	low PrintHelpScreen@dest
  8018  0011C4  6E19               	movwf	UART_Write_Text@text,c
  8019  0011C6  0E01               	movlw	high PrintHelpScreen@dest
  8020  0011C8  6E1A               	movwf	UART_Write_Text@text+1,c
  8021  0011CA  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  8022                           
  8023                           ;SystemStatus.c: 122: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  8024  0011CE  0E00               	movlw	low PrintHelpScreen@dest
  8025  0011D0  0100               	movlb	0	; () banked
  8026  0011D2  6FBC               	movwf	sprintf@sp& (0+255),b
  8027  0011D4  0E01               	movlw	high PrintHelpScreen@dest
  8028  0011D6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8029  0011D8  0E2B               	movlw	low STR_40
  8030  0011DA  6FBE               	movwf	sprintf@f& (0+255),b
  8031  0011DC  0E7D               	movlw	high STR_40
  8032  0011DE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8033  0011E0  EC70  F000         	call	_sprintf	;wreg free
  8034                           
  8035                           ;SystemStatus.c: 123: UART_Write_Text(dest);
  8036  0011E4  0E00               	movlw	low PrintHelpScreen@dest
  8037  0011E6  6E19               	movwf	UART_Write_Text@text,c
  8038  0011E8  0E01               	movlw	high PrintHelpScreen@dest
  8039  0011EA  6E1A               	movwf	UART_Write_Text@text+1,c
  8040  0011EC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  8041                           
  8042                           ;SystemStatus.c: 124: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  8043  0011F0  0E00               	movlw	low PrintHelpScreen@dest
  8044  0011F2  0100               	movlb	0	; () banked
  8045  0011F4  6FBC               	movwf	sprintf@sp& (0+255),b
  8046  0011F6  0E01               	movlw	high PrintHelpScreen@dest
  8047  0011F8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8048  0011FA  0E51               	movlw	low STR_41
  8049  0011FC  6FBE               	movwf	sprintf@f& (0+255),b
  8050  0011FE  0E7D               	movlw	high STR_41
  8051  001200  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8052  001202  EC70  F000         	call	_sprintf	;wreg free
  8053                           
  8054                           ;SystemStatus.c: 125: UART_Write_Text(dest);
  8055  001206  0E00               	movlw	low PrintHelpScreen@dest
  8056  001208  6E19               	movwf	UART_Write_Text@text,c
  8057  00120A  0E01               	movlw	high PrintHelpScreen@dest
  8058  00120C  6E1A               	movwf	UART_Write_Text@text+1,c
  8059  00120E  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  8060                           
  8061                           ;SystemStatus.c: 126: sprintf(dest, "$TD <DAC NUM><DAC VALUE><cr>         Set TX DAC <0-
      +                          3> <0-Vref[4 dig]> \r\n");
  8062  001212  0E00               	movlw	low PrintHelpScreen@dest
  8063  001214  0100               	movlb	0	; () banked
  8064  001216  6FBC               	movwf	sprintf@sp& (0+255),b
  8065  001218  0E01               	movlw	high PrintHelpScreen@dest
  8066  00121A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  8067  00121C  0EEF               	movlw	low STR_42
  8068  00121E  6FBE               	movwf	sprintf@f& (0+255),b
  8069  001220  0E7A               	movlw	high STR_42
  8070  001222  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  8071  001224  EC70  F000         	call	_sprintf	;wreg free
  8072                           
  8073                           ;SystemStatus.c: 127: UART_Write_Text(dest);
  8074  001228  0E00               	movlw	low PrintHelpScreen@dest
  8075  00122A  6E19               	movwf	UART_Write_Text@text,c
  8076  00122C  0E01               	movlw	high PrintHelpScreen@dest
  8077  00122E  6E1A               	movwf	UART_Write_Text@text+1,c
  8078  001230  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  8079  001234  0012               	return		;funcret
  8080  001236                     __end_of_PrintHelpScreen:
  8081                           	opt stack 0
  8082                           tosu	equ	0xFFF
  8083                           tosh	equ	0xFFE
  8084                           tosl	equ	0xFFD
  8085                           pclath	equ	0xFFA
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           postdec1	equ	0xFE5
  8096                           fsr1h	equ	0xFE2
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           postdec2	equ	0xFDD
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _EUSART1_Read *****************
  8106 ;; Defined at:
  8107 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  readValue       2   24[COMRAM] unsigned int 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      unsigned char 
  8114 ;; Registers used:
  8115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8121 ;;      Params:         0       0       0       0       0       0       0
  8122 ;;      Locals:         2       0       0       0       0       0       0
  8123 ;;      Temps:          1       0       0       0       0       0       0
  8124 ;;      Totals:         3       0       0       0       0       0       0
  8125 ;;Total ram usage:        3 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    3
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_readUartByte
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text20
  8136  003FFA                     __ptext20:
  8137                           	opt stack 0
  8138  003FFA                     _EUSART1_Read:
  8139                           	opt stack 26
  8140                           
  8141                           ;eusart1.c: 112: uint16_t readValue = 0;
  8142                           
  8143                           ;incstack = 0
  8144  003FFA  0E00               	movlw	0
  8145  003FFC  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8146  003FFE  0E00               	movlw	0
  8147  004000  6E19               	movwf	EUSART1_Read@readValue,c
  8148                           
  8149                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8150  004002  0101               	movlb	1	; () banked
  8151  004004  51E7               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8152  004006  A4D8               	btfss	status,2,c
  8153  004008  D002               	goto	l961
  8154                           
  8155                           ; BSR set to: 1
  8156                           ;eusart1.c: 120: {
  8157                           ;eusart1.c: 121: return readValue;
  8158  00400A  5019               	movf	EUSART1_Read@readValue,w,c
  8159                           
  8160                           ; BSR set to: 1
  8161  00400C  0012               	return	
  8162  00400E                     l961:
  8163                           
  8164                           ; BSR set to: 1
  8165                           ;eusart1.c: 122: }
  8166                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8167                           
  8168                           ; BSR set to: 1
  8169  00400E  5039               	movf	_eusart1RxTail,w,c	;volatile
  8170  004010  0D01               	mullw	1
  8171  004012  0E46               	movlw	low _eusart1RxBuffer
  8172  004014  24F3               	addwf	prodl,w,c
  8173  004016  6ED9               	movwf	fsr2l,c
  8174  004018  0E02               	movlw	high _eusart1RxBuffer
  8175  00401A  20F4               	addwfc	prodh,w,c
  8176  00401C  6EDA               	movwf	fsr2h,c
  8177  00401E  50DF               	movf	indf2,w,c
  8178  004020  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8179  004022  5018               	movf	??_EUSART1_Read,w,c
  8180  004024  6E19               	movwf	EUSART1_Read@readValue,c
  8181  004026  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8182                           
  8183                           ; BSR set to: 1
  8184  004028  2A39               	incf	_eusart1RxTail,f,c	;volatile
  8185                           
  8186                           ; BSR set to: 1
  8187                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8188  00402A  0E27               	movlw	39
  8189  00402C  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  8190  00402E  D002               	goto	l963
  8191                           
  8192                           ; BSR set to: 1
  8193                           ;eusart1.c: 126: {
  8194                           ;eusart1.c: 127: eusart1RxTail = 0;
  8195  004030  0E00               	movlw	0
  8196  004032  6E39               	movwf	_eusart1RxTail,c	;volatile
  8197  004034                     l963:
  8198                           
  8199                           ; BSR set to: 1
  8200                           ;eusart1.c: 128: }
  8201                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8202                           
  8203                           ; BSR set to: 1
  8204  004034  9A9D               	bcf	3997,5,c	;volatile
  8205                           
  8206                           ; BSR set to: 1
  8207                           ;eusart1.c: 130: eusart1RxCount--;
  8208  004036  07E7               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8209                           
  8210                           ; BSR set to: 1
  8211                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8212  004038  8A9D               	bsf	3997,5,c	;volatile
  8213                           
  8214                           ; BSR set to: 1
  8215                           ;eusart1.c: 133: return readValue;
  8216  00403A  5019               	movf	EUSART1_Read@readValue,w,c
  8217  00403C  0012               	return	
  8218  00403E                     __end_of_EUSART1_Read:
  8219                           	opt stack 0
  8220                           tosu	equ	0xFFF
  8221                           tosh	equ	0xFFE
  8222                           tosl	equ	0xFFD
  8223                           pclath	equ	0xFFA
  8224                           tblptru	equ	0xFF8
  8225                           tblptrh	equ	0xFF7
  8226                           tblptrl	equ	0xFF6
  8227                           tablat	equ	0xFF5
  8228                           prodh	equ	0xFF4
  8229                           prodl	equ	0xFF3
  8230                           postinc0	equ	0xFEE
  8231                           wreg	equ	0xFE8
  8232                           indf1	equ	0xFE7
  8233                           postdec1	equ	0xFE5
  8234                           fsr1h	equ	0xFE2
  8235                           fsr1l	equ	0xFE1
  8236                           indf2	equ	0xFDF
  8237                           postinc2	equ	0xFDE
  8238                           postdec2	equ	0xFDD
  8239                           fsr2h	equ	0xFDA
  8240                           fsr2l	equ	0xFD9
  8241                           status	equ	0xFD8
  8242                           
  8243 ;; *************** function _keepAliveSignalLed *****************
  8244 ;; Defined at:
  8245 ;;		line 35 in file "LedsApp.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;		None
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;		None
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      void 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8259 ;;      Params:         0       0       0       0       0       0       0
  8260 ;;      Locals:         0       0       0       0       0       0       0
  8261 ;;      Temps:          1       0       0       0       0       0       0
  8262 ;;      Totals:         1       0       0       0       0       0       0
  8263 ;;Total ram usage:        1 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    3
  8266 ;; This function calls:
  8267 ;;		Nothing
  8268 ;; This function is called by:
  8269 ;;		_main
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text21
  8274  0044BC                     __ptext21:
  8275                           	opt stack 0
  8276  0044BC                     _keepAliveSignalLed:
  8277                           	opt stack 27
  8278                           
  8279                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8280                           
  8281                           ; BSR set to: 1
  8282                           ;incstack = 0
  8283  0044BC  B08B               	btfsc	3979,0,c	;volatile
  8284  0044BE  D003               	goto	u6490
  8285  0044C0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8286  0044C2  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8287  0044C4  D001               	goto	u6508
  8288  0044C6                     u6490:
  8289  0044C6  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8290  0044C8                     u6508:
  8291  0044C8  508B               	movf	3979,w,c	;volatile
  8292  0044CA  1818               	xorwf	??_keepAliveSignalLed,w,c
  8293  0044CC  0BFE               	andlw	-2
  8294  0044CE  1818               	xorwf	??_keepAliveSignalLed,w,c
  8295  0044D0  6E8B               	movwf	3979,c	;volatile
  8296  0044D2  0012               	return		;funcret
  8297  0044D4                     __end_of_keepAliveSignalLed:
  8298                           	opt stack 0
  8299                           tosu	equ	0xFFF
  8300                           tosh	equ	0xFFE
  8301                           tosl	equ	0xFFD
  8302                           pclath	equ	0xFFA
  8303                           tblptru	equ	0xFF8
  8304                           tblptrh	equ	0xFF7
  8305                           tblptrl	equ	0xFF6
  8306                           tablat	equ	0xFF5
  8307                           prodh	equ	0xFF4
  8308                           prodl	equ	0xFF3
  8309                           postinc0	equ	0xFEE
  8310                           wreg	equ	0xFE8
  8311                           indf1	equ	0xFE7
  8312                           postdec1	equ	0xFE5
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _SetMcuSystem *****************
  8323 ;; Defined at:
  8324 ;;		line 11 in file "SystemSettings.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      void 
  8331 ;; Registers used:
  8332 ;;		wreg, status,2, status,0, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8338 ;;      Params:         0       0       0       0       0       0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0
  8341 ;;      Totals:         0       0       0       0       0       0       0
  8342 ;;Total ram usage:        0 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    6
  8345 ;; This function calls:
  8346 ;;		_SYSTEM_Initialize
  8347 ;; This function is called by:
  8348 ;;		_main
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text22
  8353  004564                     __ptext22:
  8354                           	opt stack 0
  8355  004564                     _SetMcuSystem:
  8356                           	opt stack 24
  8357                           
  8358                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8359                           
  8360                           ;incstack = 0
  8361  004564  EC51  F022         	call	_SYSTEM_Initialize	;wreg free
  8362                           
  8363                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8364  004568  8EF2               	bsf	intcon,7,c	;volatile
  8365                           
  8366                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8367  00456A  8CF2               	bsf	intcon,6,c	;volatile
  8368  00456C  0012               	return		;funcret
  8369  00456E                     __end_of_SetMcuSystem:
  8370                           	opt stack 0
  8371                           tosu	equ	0xFFF
  8372                           tosh	equ	0xFFE
  8373                           tosl	equ	0xFFD
  8374                           pclath	equ	0xFFA
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           postinc0	equ	0xFEE
  8383                           wreg	equ	0xFE8
  8384                           indf1	equ	0xFE7
  8385                           postdec1	equ	0xFE5
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _SYSTEM_Initialize *****************
  8396 ;; Defined at:
  8397 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8411 ;;      Params:         0       0       0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0
  8414 ;;      Totals:         0       0       0       0       0       0       0
  8415 ;;Total ram usage:        0 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    5
  8418 ;; This function calls:
  8419 ;;		_ADC_Initialize
  8420 ;;		_EUSART1_Initialize
  8421 ;;		_INTERRUPT_Initialize
  8422 ;;		_OSCILLATOR_Initialize
  8423 ;;		_PIN_MANAGER_Initialize
  8424 ;;		_TMR0_Initialize
  8425 ;; This function is called by:
  8426 ;;		_SetMcuSystem
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text23
  8431  0044A2                     __ptext23:
  8432                           	opt stack 0
  8433  0044A2                     _SYSTEM_Initialize:
  8434                           	opt stack 24
  8435                           
  8436                           ;mcc.c: 114: INTERRUPT_Initialize();
  8437                           
  8438                           ;incstack = 0
  8439  0044A2  ECC9  F022         	call	_INTERRUPT_Initialize	;wreg free
  8440                           
  8441                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8442  0044A6  EC94  F01F         	call	_PIN_MANAGER_Initialize	;wreg free
  8443                           
  8444                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8445  0044AA  EC9E  F022         	call	_OSCILLATOR_Initialize	;wreg free
  8446                           
  8447                           ;mcc.c: 117: ADC_Initialize();
  8448  0044AE  EC6A  F022         	call	_ADC_Initialize	;wreg free
  8449                           
  8450                           ;mcc.c: 118: TMR0_Initialize();
  8451  0044B2  EC45  F021         	call	_TMR0_Initialize	;wreg free
  8452                           
  8453                           ;mcc.c: 119: EUSART1_Initialize();
  8454  0044B6  EC0F  F021         	call	_EUSART1_Initialize	;wreg free
  8455  0044BA  0012               	return		;funcret
  8456  0044BC                     __end_of_SYSTEM_Initialize:
  8457                           	opt stack 0
  8458                           tosu	equ	0xFFF
  8459                           tosh	equ	0xFFE
  8460                           tosl	equ	0xFFD
  8461                           pclath	equ	0xFFA
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           intcon	equ	0xFF2
  8469                           postinc0	equ	0xFEE
  8470                           wreg	equ	0xFE8
  8471                           indf1	equ	0xFE7
  8472                           postdec1	equ	0xFE5
  8473                           fsr1h	equ	0xFE2
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           postinc2	equ	0xFDE
  8477                           postdec2	equ	0xFDD
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _TMR0_Initialize *****************
  8483 ;; Defined at:
  8484 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;		None
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;		None
  8489 ;; Return value:  Size  Location     Type
  8490 ;;                  1    wreg      void 
  8491 ;; Registers used:
  8492 ;;		wreg, status,2, status,0, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8498 ;;      Params:         0       0       0       0       0       0       0
  8499 ;;      Locals:         0       0       0       0       0       0       0
  8500 ;;      Temps:          2       0       0       0       0       0       0
  8501 ;;      Totals:         2       0       0       0       0       0       0
  8502 ;;Total ram usage:        2 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    4
  8505 ;; This function calls:
  8506 ;;		_TMR0_SetInterruptHandler
  8507 ;; This function is called by:
  8508 ;;		_SYSTEM_Initialize
  8509 ;; This function uses a non-reentrant model
  8510 ;;
  8511                           
  8512                           	psect	text24
  8513  00428A                     __ptext24:
  8514                           	opt stack 0
  8515  00428A                     _TMR0_Initialize:
  8516                           	opt stack 24
  8517                           
  8518                           ;tmr0.c: 71: TMR0H = 0x3C;
  8519                           
  8520                           ;incstack = 0
  8521  00428A  0E3C               	movlw	60
  8522  00428C  6ED7               	movwf	4055,c	;volatile
  8523                           
  8524                           ;tmr0.c: 74: TMR0L = 0xAF;
  8525  00428E  0EAF               	movlw	175
  8526  004290  6ED6               	movwf	4054,c	;volatile
  8527                           
  8528                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8529  004292  50D6               	movf	4054,w,c	;volatile
  8530  004294  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8531  004298  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8532  00429A  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8533  00429E  6A1A               	clrf	??_TMR0_Initialize,c
  8534  0042A0  101A               	iorwf	??_TMR0_Initialize,w,c
  8535  0042A2  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8536  0042A4  501B               	movf	??_TMR0_Initialize+1,w,c
  8537  0042A6  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8538                           
  8539                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8540  0042A8  94F2               	bcf	intcon,2,c	;volatile
  8541                           
  8542                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8543  0042AA  8AF2               	bsf	intcon,5,c	;volatile
  8544                           
  8545                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8546  0042AC  0E00               	movlw	0
  8547  0042AE  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8548  0042B0  0E00               	movlw	0
  8549  0042B2  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8550  0042B4  ECB7  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  8551                           
  8552                           ;tmr0.c: 90: T0CON = 0x90;
  8553  0042B8  0E90               	movlw	144
  8554  0042BA  6ED5               	movwf	4053,c	;volatile
  8555  0042BC  0012               	return		;funcret
  8556  0042BE                     __end_of_TMR0_Initialize:
  8557                           	opt stack 0
  8558                           tosu	equ	0xFFF
  8559                           tosh	equ	0xFFE
  8560                           tosl	equ	0xFFD
  8561                           pclath	equ	0xFFA
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           wreg	equ	0xFE8
  8571                           indf1	equ	0xFE7
  8572                           postdec1	equ	0xFE5
  8573                           fsr1h	equ	0xFE2
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _TMR0_SetInterruptHandler *****************
  8583 ;; Defined at:
  8584 ;;		line 181 in file "mcc_generated_files/tmr0.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8587 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;		None
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  1    wreg      void 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8599 ;;      Params:         2       0       0       0       0       0       0
  8600 ;;      Locals:         0       0       0       0       0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0
  8602 ;;      Totals:         2       0       0       0       0       0       0
  8603 ;;Total ram usage:        2 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    3
  8606 ;; This function calls:
  8607 ;;		Nothing
  8608 ;; This function is called by:
  8609 ;;		_TMR0_Initialize
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text25
  8614  00456E                     __ptext25:
  8615                           	opt stack 0
  8616  00456E                     _TMR0_SetInterruptHandler:
  8617                           	opt stack 24
  8618                           
  8619                           ;tmr0.c: 182: TMR0_InterruptHandler = InterruptHandler;
  8620                           
  8621                           ;incstack = 0
  8622  00456E  C018  F2E2         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8623  004572  C019  F2E3         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8624  004576  0012               	return		;funcret
  8625  004578                     __end_of_TMR0_SetInterruptHandler:
  8626                           	opt stack 0
  8627                           tosu	equ	0xFFF
  8628                           tosh	equ	0xFFE
  8629                           tosl	equ	0xFFD
  8630                           pclath	equ	0xFFA
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           postinc0	equ	0xFEE
  8639                           wreg	equ	0xFE8
  8640                           indf1	equ	0xFE7
  8641                           postdec1	equ	0xFE5
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function _PIN_MANAGER_Initialize *****************
  8652 ;; Defined at:
  8653 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;		None
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, status,2
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8667 ;;      Params:         0       0       0       0       0       0       0
  8668 ;;      Locals:         0       0       0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0
  8670 ;;      Totals:         0       0       0       0       0       0       0
  8671 ;;Total ram usage:        0 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    3
  8674 ;; This function calls:
  8675 ;;		Nothing
  8676 ;; This function is called by:
  8677 ;;		_SYSTEM_Initialize
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text26
  8682  003F28                     __ptext26:
  8683                           	opt stack 0
  8684  003F28                     _PIN_MANAGER_Initialize:
  8685                           	opt stack 25
  8686                           
  8687                           ;pin_manager.c: 57: LATE = 0x00;
  8688                           
  8689                           ;incstack = 0
  8690  003F28  0E00               	movlw	0
  8691  003F2A  6E8D               	movwf	3981,c	;volatile
  8692                           
  8693                           ;pin_manager.c: 58: LATD = 0x40;
  8694  003F2C  0E40               	movlw	64
  8695  003F2E  6E8C               	movwf	3980,c	;volatile
  8696                           
  8697                           ;pin_manager.c: 59: LATA = 0x06;
  8698  003F30  0E06               	movlw	6
  8699  003F32  6E89               	movwf	3977,c	;volatile
  8700                           
  8701                           ;pin_manager.c: 60: LATB = 0x00;
  8702  003F34  0E00               	movlw	0
  8703  003F36  6E8A               	movwf	3978,c	;volatile
  8704                           
  8705                           ;pin_manager.c: 61: LATC = 0x00;
  8706  003F38  0E00               	movlw	0
  8707  003F3A  6E8B               	movwf	3979,c	;volatile
  8708                           
  8709                           ;pin_manager.c: 66: TRISE = 0x07;
  8710  003F3C  0E07               	movlw	7
  8711  003F3E  6E96               	movwf	3990,c	;volatile
  8712                           
  8713                           ;pin_manager.c: 67: TRISA = 0xE1;
  8714  003F40  0EE1               	movlw	225
  8715  003F42  6E92               	movwf	3986,c	;volatile
  8716                           
  8717                           ;pin_manager.c: 68: TRISB = 0xEE;
  8718  003F44  0EEE               	movlw	238
  8719  003F46  6E93               	movwf	3987,c	;volatile
  8720                           
  8721                           ;pin_manager.c: 69: TRISC = 0x80;
  8722  003F48  0E80               	movlw	128
  8723  003F4A  6E94               	movwf	3988,c	;volatile
  8724                           
  8725                           ;pin_manager.c: 70: TRISD = 0xB2;
  8726  003F4C  0EB2               	movlw	178
  8727  003F4E  6E95               	movwf	3989,c	;volatile
  8728                           
  8729                           ;pin_manager.c: 75: ANSELC = 0x30;
  8730  003F50  0E30               	movlw	48
  8731  003F52  010F               	movlb	15	; () banked
  8732  003F54  6F3A               	movwf	58,b	;volatile
  8733                           
  8734                           ;pin_manager.c: 76: ANSELB = 0x32;
  8735  003F56  0E32               	movlw	50
  8736  003F58  6F39               	movwf	57,b	;volatile
  8737                           
  8738                           ;pin_manager.c: 77: ANSELD = 0xA4;
  8739  003F5A  0EA4               	movlw	164
  8740  003F5C  6F3B               	movwf	59,b	;volatile
  8741                           
  8742                           ;pin_manager.c: 78: ANSELE = 0x07;
  8743  003F5E  0E07               	movlw	7
  8744  003F60  6F3C               	movwf	60,b	;volatile
  8745                           
  8746                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8747  003F62  0E2F               	movlw	47
  8748  003F64  6F38               	movwf	56,b	;volatile
  8749                           
  8750                           ;pin_manager.c: 84: WPUB = 0xC2;
  8751  003F66  0EC2               	movlw	194
  8752  003F68  6E61               	movwf	3937,c	;volatile
  8753                           
  8754                           ; BSR set to: 15
  8755                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  8756  003F6A  8EF1               	bsf	intcon2,7,c	;volatile
  8757                           
  8758                           ; BSR set to: 15
  8759                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8760  003F6C  86F2               	bsf	intcon,3,c	;volatile
  8761                           
  8762                           ; BSR set to: 15
  8763  003F6E  0012               	return		;funcret
  8764  003F70                     __end_of_PIN_MANAGER_Initialize:
  8765                           	opt stack 0
  8766                           tosu	equ	0xFFF
  8767                           tosh	equ	0xFFE
  8768                           tosl	equ	0xFFD
  8769                           pclath	equ	0xFFA
  8770                           tblptru	equ	0xFF8
  8771                           tblptrh	equ	0xFF7
  8772                           tblptrl	equ	0xFF6
  8773                           tablat	equ	0xFF5
  8774                           prodh	equ	0xFF4
  8775                           prodl	equ	0xFF3
  8776                           intcon	equ	0xFF2
  8777                           intcon2	equ	0xFF1
  8778                           postinc0	equ	0xFEE
  8779                           wreg	equ	0xFE8
  8780                           indf1	equ	0xFE7
  8781                           postdec1	equ	0xFE5
  8782                           fsr1h	equ	0xFE2
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _OSCILLATOR_Initialize *****************
  8792 ;; Defined at:
  8793 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8807 ;;      Params:         0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    3
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_SYSTEM_Initialize
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text27
  8822  00453C                     __ptext27:
  8823                           	opt stack 0
  8824  00453C                     _OSCILLATOR_Initialize:
  8825                           	opt stack 25
  8826                           
  8827                           ;mcc.c: 125: OSCCON = 0x60;
  8828                           
  8829                           ; BSR set to: 15
  8830                           ;incstack = 0
  8831  00453C  0E60               	movlw	96
  8832  00453E  6ED3               	movwf	4051,c	;volatile
  8833                           
  8834                           ;mcc.c: 127: OSCCON2 = 0x04;
  8835  004540  0E04               	movlw	4
  8836  004542  6ED2               	movwf	4050,c	;volatile
  8837                           
  8838                           ;mcc.c: 129: OSCTUNE = 0x00;
  8839  004544  0E00               	movlw	0
  8840  004546  6E9B               	movwf	3995,c	;volatile
  8841  004548  0012               	return		;funcret
  8842  00454A                     __end_of_OSCILLATOR_Initialize:
  8843                           	opt stack 0
  8844                           tosu	equ	0xFFF
  8845                           tosh	equ	0xFFE
  8846                           tosl	equ	0xFFD
  8847                           pclath	equ	0xFFA
  8848                           tblptru	equ	0xFF8
  8849                           tblptrh	equ	0xFF7
  8850                           tblptrl	equ	0xFF6
  8851                           tablat	equ	0xFF5
  8852                           prodh	equ	0xFF4
  8853                           prodl	equ	0xFF3
  8854                           intcon	equ	0xFF2
  8855                           intcon2	equ	0xFF1
  8856                           postinc0	equ	0xFEE
  8857                           wreg	equ	0xFE8
  8858                           indf1	equ	0xFE7
  8859                           postdec1	equ	0xFE5
  8860                           fsr1h	equ	0xFE2
  8861                           fsr1l	equ	0xFE1
  8862                           indf2	equ	0xFDF
  8863                           postinc2	equ	0xFDE
  8864                           postdec2	equ	0xFDD
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function _INTERRUPT_Initialize *****************
  8870 ;; Defined at:
  8871 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;		None
  8876 ;; Return value:  Size  Location     Type
  8877 ;;                  1    wreg      void 
  8878 ;; Registers used:
  8879 ;;		None
  8880 ;; Tracked objects:
  8881 ;;		On entry : 0/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8885 ;;      Params:         0       0       0       0       0       0       0
  8886 ;;      Locals:         0       0       0       0       0       0       0
  8887 ;;      Temps:          0       0       0       0       0       0       0
  8888 ;;      Totals:         0       0       0       0       0       0       0
  8889 ;;Total ram usage:        0 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:    3
  8892 ;; This function calls:
  8893 ;;		Nothing
  8894 ;; This function is called by:
  8895 ;;		_SYSTEM_Initialize
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           	psect	text28
  8900  004592                     __ptext28:
  8901                           	opt stack 0
  8902  004592                     _INTERRUPT_Initialize:
  8903                           	opt stack 25
  8904                           
  8905                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8906                           
  8907                           ;incstack = 0
  8908  004592  9ED0               	bcf	4048,7,c	;volatile
  8909  004594  0012               	return		;funcret
  8910  004596                     __end_of_INTERRUPT_Initialize:
  8911                           	opt stack 0
  8912                           tosu	equ	0xFFF
  8913                           tosh	equ	0xFFE
  8914                           tosl	equ	0xFFD
  8915                           pclath	equ	0xFFA
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodh	equ	0xFF4
  8921                           prodl	equ	0xFF3
  8922                           intcon	equ	0xFF2
  8923                           intcon2	equ	0xFF1
  8924                           postinc0	equ	0xFEE
  8925                           wreg	equ	0xFE8
  8926                           indf1	equ	0xFE7
  8927                           postdec1	equ	0xFE5
  8928                           fsr1h	equ	0xFE2
  8929                           fsr1l	equ	0xFE1
  8930                           indf2	equ	0xFDF
  8931                           postinc2	equ	0xFDE
  8932                           postdec2	equ	0xFDD
  8933                           fsr2h	equ	0xFDA
  8934                           fsr2l	equ	0xFD9
  8935                           status	equ	0xFD8
  8936                           
  8937 ;; *************** function _EUSART1_Initialize *****************
  8938 ;; Defined at:
  8939 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;		None
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;		None
  8944 ;; Return value:  Size  Location     Type
  8945 ;;                  1    wreg      void 
  8946 ;; Registers used:
  8947 ;;		wreg, status,2
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8953 ;;      Params:         0       0       0       0       0       0       0
  8954 ;;      Locals:         0       0       0       0       0       0       0
  8955 ;;      Temps:          0       0       0       0       0       0       0
  8956 ;;      Totals:         0       0       0       0       0       0       0
  8957 ;;Total ram usage:        0 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    3
  8960 ;; This function calls:
  8961 ;;		Nothing
  8962 ;; This function is called by:
  8963 ;;		_SYSTEM_Initialize
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           	psect	text29
  8968  00421E                     __ptext29:
  8969                           	opt stack 0
  8970  00421E                     _EUSART1_Initialize:
  8971                           	opt stack 25
  8972                           
  8973                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8974                           
  8975                           ;incstack = 0
  8976  00421E  9A9D               	bcf	3997,5,c	;volatile
  8977                           
  8978                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8979  004220  989D               	bcf	3997,4,c	;volatile
  8980                           
  8981                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8982  004222  0E08               	movlw	8
  8983  004224  6EB8               	movwf	4024,c	;volatile
  8984                           
  8985                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8986  004226  0E90               	movlw	144
  8987  004228  6EAB               	movwf	4011,c	;volatile
  8988                           
  8989                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8990  00422A  0E24               	movlw	36
  8991  00422C  6EAC               	movwf	4012,c	;volatile
  8992                           
  8993                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8994  00422E  0E10               	movlw	16
  8995  004230  6EAF               	movwf	4015,c	;volatile
  8996                           
  8997                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8998  004232  0E00               	movlw	0
  8999  004234  6EB0               	movwf	4016,c	;volatile
  9000                           
  9001                           ;eusart1.c: 98: eusart1TxHead = 0;
  9002  004236  0E00               	movlw	0
  9003  004238  6E3C               	movwf	_eusart1TxHead,c	;volatile
  9004                           
  9005                           ;eusart1.c: 99: eusart1TxTail = 0;
  9006  00423A  0E00               	movlw	0
  9007  00423C  6E3B               	movwf	_eusart1TxTail,c	;volatile
  9008                           
  9009                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9010  00423E  0E46               	movlw	70
  9011  004240  0101               	movlb	1	; () banked
  9012  004242  6FF3               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9013                           
  9014                           ;eusart1.c: 102: eusart1RxHead = 0;
  9015  004244  0E00               	movlw	0
  9016  004246  6E3A               	movwf	_eusart1RxHead,c	;volatile
  9017                           
  9018                           ;eusart1.c: 103: eusart1RxTail = 0;
  9019  004248  0E00               	movlw	0
  9020  00424A  6E39               	movwf	_eusart1RxTail,c	;volatile
  9021                           
  9022                           ;eusart1.c: 104: eusart1RxCount = 0;
  9023  00424C  0E00               	movlw	0
  9024  00424E  6FE7               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9025                           
  9026                           ; BSR set to: 1
  9027                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9028  004250  8A9D               	bsf	3997,5,c	;volatile
  9029                           
  9030                           ; BSR set to: 1
  9031  004252  0012               	return		;funcret
  9032  004254                     __end_of_EUSART1_Initialize:
  9033                           	opt stack 0
  9034                           tosu	equ	0xFFF
  9035                           tosh	equ	0xFFE
  9036                           tosl	equ	0xFFD
  9037                           pclath	equ	0xFFA
  9038                           tblptru	equ	0xFF8
  9039                           tblptrh	equ	0xFF7
  9040                           tblptrl	equ	0xFF6
  9041                           tablat	equ	0xFF5
  9042                           prodh	equ	0xFF4
  9043                           prodl	equ	0xFF3
  9044                           intcon	equ	0xFF2
  9045                           intcon2	equ	0xFF1
  9046                           postinc0	equ	0xFEE
  9047                           wreg	equ	0xFE8
  9048                           indf1	equ	0xFE7
  9049                           postdec1	equ	0xFE5
  9050                           fsr1h	equ	0xFE2
  9051                           fsr1l	equ	0xFE1
  9052                           indf2	equ	0xFDF
  9053                           postinc2	equ	0xFDE
  9054                           postdec2	equ	0xFDD
  9055                           fsr2h	equ	0xFDA
  9056                           fsr2l	equ	0xFD9
  9057                           status	equ	0xFD8
  9058                           
  9059 ;; *************** function _ADC_Initialize *****************
  9060 ;; Defined at:
  9061 ;;		line 58 in file "mcc_generated_files/adc.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;		None
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;		None
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  1    wreg      void 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9075 ;;      Params:         0       0       0       0       0       0       0
  9076 ;;      Locals:         0       0       0       0       0       0       0
  9077 ;;      Temps:          0       0       0       0       0       0       0
  9078 ;;      Totals:         0       0       0       0       0       0       0
  9079 ;;Total ram usage:        0 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    3
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_SYSTEM_Initialize
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           	psect	text30
  9090  0044D4                     __ptext30:
  9091                           	opt stack 0
  9092  0044D4                     _ADC_Initialize:
  9093                           	opt stack 25
  9094                           
  9095                           ;adc.c: 63: ADCON0 = 0x05;
  9096                           
  9097                           ; BSR set to: 1
  9098                           ;incstack = 0
  9099  0044D4  0E05               	movlw	5
  9100  0044D6  6EC2               	movwf	4034,c	;volatile
  9101                           
  9102                           ;adc.c: 66: ADCON1 = 0x00;
  9103  0044D8  0E00               	movlw	0
  9104  0044DA  6EC1               	movwf	4033,c	;volatile
  9105                           
  9106                           ;adc.c: 69: ADCON2 = 0x87;
  9107  0044DC  0E87               	movlw	135
  9108  0044DE  6EC0               	movwf	4032,c	;volatile
  9109                           
  9110                           ;adc.c: 72: ADRESL = 0x00;
  9111  0044E0  0E00               	movlw	0
  9112  0044E2  6EC3               	movwf	4035,c	;volatile
  9113                           
  9114                           ;adc.c: 75: ADRESH = 0x00;
  9115  0044E4  0E00               	movlw	0
  9116  0044E6  6EC4               	movwf	4036,c	;volatile
  9117  0044E8  0012               	return		;funcret
  9118  0044EA                     __end_of_ADC_Initialize:
  9119                           	opt stack 0
  9120                           tosu	equ	0xFFF
  9121                           tosh	equ	0xFFE
  9122                           tosl	equ	0xFFD
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           postinc0	equ	0xFEE
  9133                           wreg	equ	0xFE8
  9134                           indf1	equ	0xFE7
  9135                           postdec1	equ	0xFE5
  9136                           fsr1h	equ	0xFE2
  9137                           fsr1l	equ	0xFE1
  9138                           indf2	equ	0xFDF
  9139                           postinc2	equ	0xFDE
  9140                           postdec2	equ	0xFDD
  9141                           fsr2h	equ	0xFDA
  9142                           fsr2l	equ	0xFD9
  9143                           status	equ	0xFD8
  9144                           
  9145 ;; *************** function _SetMcuRunTime *****************
  9146 ;; Defined at:
  9147 ;;		line 34 in file "SystemStatus.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;		None
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;		None
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  1    wreg      void 
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9161 ;;      Params:         0       0       0       0       0       0       0
  9162 ;;      Locals:         0       0       0       0       0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0
  9164 ;;      Totals:         0       0       0       0       0       0       0
  9165 ;;Total ram usage:        0 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    4
  9168 ;; This function calls:
  9169 ;;		___llmod
  9170 ;; This function is called by:
  9171 ;;		_main
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text31
  9176  003F70                     __ptext31:
  9177                           	opt stack 0
  9178  003F70                     _SetMcuRunTime:
  9179                           	opt stack 26
  9180                           
  9181                           ;SystemStatus.c: 36: mcuRunTimeIn5SecTicks++;
  9182                           
  9183                           ;incstack = 0
  9184  003F70  0E01               	movlw	1
  9185  003F72  0101               	movlb	1	; () banked
  9186  003F74  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9187  003F76  0E00               	movlw	0
  9188  003F78  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9189  003F7A  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9190  003F7C  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9191                           
  9192                           ; BSR set to: 1
  9193                           ;SystemStatus.c: 37: mcuRunTimeIn5SecTicks %= (17280);
  9194  003F7E  C1C0  F0B3         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9195  003F82  C1C1  F0B4         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9196  003F86  C1C2  F0B5         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9197  003F8A  C1C3  F0B6         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9198  003F8E  0E80               	movlw	128
  9199  003F90  0100               	movlb	0	; () banked
  9200  003F92  6FB7               	movwf	___llmod@divisor& (0+255),b
  9201  003F94  0E43               	movlw	67
  9202  003F96  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
  9203  003F98  0E00               	movlw	0
  9204  003F9A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
  9205  003F9C  0E00               	movlw	0
  9206  003F9E  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
  9207  003FA0  EC9C  F01D         	call	___llmod	;wreg free
  9208  003FA4  C0B3  F1C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9209  003FA8  C0B4  F1C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9210  003FAC  C0B5  F1C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9211  003FB0  C0B6  F1C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9212  003FB4  0012               	return		;funcret
  9213  003FB6                     __end_of_SetMcuRunTime:
  9214                           	opt stack 0
  9215                           tosu	equ	0xFFF
  9216                           tosh	equ	0xFFE
  9217                           tosl	equ	0xFFD
  9218                           pclath	equ	0xFFA
  9219                           tblptru	equ	0xFF8
  9220                           tblptrh	equ	0xFF7
  9221                           tblptrl	equ	0xFF6
  9222                           tablat	equ	0xFF5
  9223                           prodh	equ	0xFF4
  9224                           prodl	equ	0xFF3
  9225                           intcon	equ	0xFF2
  9226                           intcon2	equ	0xFF1
  9227                           postinc0	equ	0xFEE
  9228                           wreg	equ	0xFE8
  9229                           indf1	equ	0xFE7
  9230                           postdec1	equ	0xFE5
  9231                           fsr1h	equ	0xFE2
  9232                           fsr1l	equ	0xFE1
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           fsr2h	equ	0xFDA
  9237                           fsr2l	equ	0xFD9
  9238                           status	equ	0xFD8
  9239                           
  9240 ;; *************** function _SendUartSystemInitMessage *****************
  9241 ;; Defined at:
  9242 ;;		line 55 in file "SystemStatus.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;  dest           50    0[BANK1 ] unsigned char [50]
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  1    wreg      void 
  9249 ;; Registers used:
  9250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9256 ;;      Params:         0       0       0       0       0       0       0
  9257 ;;      Locals:         0       0      50       0       0       0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0
  9259 ;;      Totals:         0       0      50       0       0       0       0
  9260 ;;Total ram usage:       50 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    7
  9263 ;; This function calls:
  9264 ;;		_UART_Write_Text
  9265 ;;		_sprintf
  9266 ;; This function is called by:
  9267 ;;		_main
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text32
  9272  002E9E                     __ptext32:
  9273                           	opt stack 0
  9274  002E9E                     _SendUartSystemInitMessage:
  9275                           	opt stack 23
  9276                           
  9277                           ;SystemStatus.c: 57: char dest[50];
  9278                           ;SystemStatus.c: 59: sprintf(dest, "*************************** \n\r");
  9279                           
  9280                           ;incstack = 0
  9281  002E9E  0E00               	movlw	low SendUartSystemInitMessage@dest
  9282  002EA0  0100               	movlb	0	; () banked
  9283  002EA2  6FBC               	movwf	sprintf@sp& (0+255),b
  9284  002EA4  0E01               	movlw	high SendUartSystemInitMessage@dest
  9285  002EA6  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9286  002EA8  0E21               	movlw	low STR_14
  9287  002EAA  6FBE               	movwf	sprintf@f& (0+255),b
  9288  002EAC  0E7E               	movlw	high STR_14
  9289  002EAE  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9290  002EB0  EC70  F000         	call	_sprintf	;wreg free
  9291                           
  9292                           ;SystemStatus.c: 60: UART_Write_Text(dest);
  9293  002EB4  0E00               	movlw	low SendUartSystemInitMessage@dest
  9294  002EB6  6E19               	movwf	UART_Write_Text@text,c
  9295  002EB8  0E01               	movlw	high SendUartSystemInitMessage@dest
  9296  002EBA  6E1A               	movwf	UART_Write_Text@text+1,c
  9297  002EBC  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9298                           
  9299                           ;SystemStatus.c: 62: sprintf(dest, "FAST LINK SYSTEM \n\r");
  9300  002EC0  0E00               	movlw	low SendUartSystemInitMessage@dest
  9301  002EC2  0100               	movlb	0	; () banked
  9302  002EC4  6FBC               	movwf	sprintf@sp& (0+255),b
  9303  002EC6  0E01               	movlw	high SendUartSystemInitMessage@dest
  9304  002EC8  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9305  002ECA  0E35               	movlw	low STR_15
  9306  002ECC  6FBE               	movwf	sprintf@f& (0+255),b
  9307  002ECE  0E7F               	movlw	high STR_15
  9308  002ED0  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9309  002ED2  EC70  F000         	call	_sprintf	;wreg free
  9310                           
  9311                           ;SystemStatus.c: 63: UART_Write_Text(dest);
  9312  002ED6  0E00               	movlw	low SendUartSystemInitMessage@dest
  9313  002ED8  6E19               	movwf	UART_Write_Text@text,c
  9314  002EDA  0E01               	movlw	high SendUartSystemInitMessage@dest
  9315  002EDC  6E1A               	movwf	UART_Write_Text@text+1,c
  9316  002EDE  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9317                           
  9318                           ;SystemStatus.c: 65: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  9319  002EE2  0E00               	movlw	low SendUartSystemInitMessage@dest
  9320  002EE4  0100               	movlb	0	; () banked
  9321  002EE6  6FBC               	movwf	sprintf@sp& (0+255),b
  9322  002EE8  0E01               	movlw	high SendUartSystemInitMessage@dest
  9323  002EEA  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9324  002EEC  0E71               	movlw	low STR_16
  9325  002EEE  6FBE               	movwf	sprintf@f& (0+255),b
  9326  002EF0  0E7F               	movlw	high STR_16
  9327  002EF2  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9328  002EF4  0EF0               	movlw	low STR_17
  9329  002EF6  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9330  002EF8  0E7F               	movlw	high STR_17
  9331  002EFA  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9332  002EFC  EC70  F000         	call	_sprintf	;wreg free
  9333                           
  9334                           ;SystemStatus.c: 66: UART_Write_Text(dest);
  9335  002F00  0E00               	movlw	low SendUartSystemInitMessage@dest
  9336  002F02  6E19               	movwf	UART_Write_Text@text,c
  9337  002F04  0E01               	movlw	high SendUartSystemInitMessage@dest
  9338  002F06  6E1A               	movwf	UART_Write_Text@text+1,c
  9339  002F08  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9340                           
  9341                           ;SystemStatus.c: 68: sprintf(dest, "Compile date: %s \n\r", "Mar 28 2018");
  9342  002F0C  0E00               	movlw	low SendUartSystemInitMessage@dest
  9343  002F0E  0100               	movlb	0	; () banked
  9344  002F10  6FBC               	movwf	sprintf@sp& (0+255),b
  9345  002F12  0E01               	movlw	high SendUartSystemInitMessage@dest
  9346  002F14  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9347  002F16  0E5D               	movlw	low STR_18
  9348  002F18  6FBE               	movwf	sprintf@f& (0+255),b
  9349  002F1A  0E7F               	movlw	high STR_18
  9350  002F1C  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9351  002F1E  0EAC               	movlw	low STR_19
  9352  002F20  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9353  002F22  0E7F               	movlw	high STR_19
  9354  002F24  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9355  002F26  EC70  F000         	call	_sprintf	;wreg free
  9356                           
  9357                           ;SystemStatus.c: 69: UART_Write_Text(dest);
  9358  002F2A  0E00               	movlw	low SendUartSystemInitMessage@dest
  9359  002F2C  6E19               	movwf	UART_Write_Text@text,c
  9360  002F2E  0E01               	movlw	high SendUartSystemInitMessage@dest
  9361  002F30  6E1A               	movwf	UART_Write_Text@text+1,c
  9362  002F32  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9363                           
  9364                           ;SystemStatus.c: 71: sprintf(dest, "Compile time: %s \n\r", "13:04:17");
  9365  002F36  0E00               	movlw	low SendUartSystemInitMessage@dest
  9366  002F38  0100               	movlb	0	; () banked
  9367  002F3A  6FBC               	movwf	sprintf@sp& (0+255),b
  9368  002F3C  0E01               	movlw	high SendUartSystemInitMessage@dest
  9369  002F3E  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9370  002F40  0E49               	movlw	low STR_20
  9371  002F42  6FBE               	movwf	sprintf@f& (0+255),b
  9372  002F44  0E7F               	movlw	high STR_20
  9373  002F46  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9374  002F48  0ED7               	movlw	low STR_21
  9375  002F4A  6FC0               	movwf	(?_sprintf+4)& (0+255),b
  9376  002F4C  0E7F               	movlw	high STR_21
  9377  002F4E  6FC1               	movwf	(?_sprintf+5)& (0+255),b
  9378  002F50  EC70  F000         	call	_sprintf	;wreg free
  9379                           
  9380                           ;SystemStatus.c: 72: UART_Write_Text(dest);
  9381  002F54  0E00               	movlw	low SendUartSystemInitMessage@dest
  9382  002F56  6E19               	movwf	UART_Write_Text@text,c
  9383  002F58  0E01               	movlw	high SendUartSystemInitMessage@dest
  9384  002F5A  6E1A               	movwf	UART_Write_Text@text+1,c
  9385  002F5C  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9386                           
  9387                           ;SystemStatus.c: 74: sprintf(dest, "*************************** \n\r");
  9388  002F60  0E00               	movlw	low SendUartSystemInitMessage@dest
  9389  002F62  0100               	movlb	0	; () banked
  9390  002F64  6FBC               	movwf	sprintf@sp& (0+255),b
  9391  002F66  0E01               	movlw	high SendUartSystemInitMessage@dest
  9392  002F68  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9393  002F6A  0E21               	movlw	low STR_14
  9394  002F6C  6FBE               	movwf	sprintf@f& (0+255),b
  9395  002F6E  0E7E               	movlw	high STR_14
  9396  002F70  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9397  002F72  EC70  F000         	call	_sprintf	;wreg free
  9398                           
  9399                           ;SystemStatus.c: 75: UART_Write_Text(dest);
  9400  002F76  0E00               	movlw	low SendUartSystemInitMessage@dest
  9401  002F78  6E19               	movwf	UART_Write_Text@text,c
  9402  002F7A  0E01               	movlw	high SendUartSystemInitMessage@dest
  9403  002F7C  6E1A               	movwf	UART_Write_Text@text+1,c
  9404  002F7E  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9405  002F82  0012               	return		;funcret
  9406  002F84                     __end_of_SendUartSystemInitMessage:
  9407                           	opt stack 0
  9408                           tosu	equ	0xFFF
  9409                           tosh	equ	0xFFE
  9410                           tosl	equ	0xFFD
  9411                           pclath	equ	0xFFA
  9412                           tblptru	equ	0xFF8
  9413                           tblptrh	equ	0xFF7
  9414                           tblptrl	equ	0xFF6
  9415                           tablat	equ	0xFF5
  9416                           prodh	equ	0xFF4
  9417                           prodl	equ	0xFF3
  9418                           intcon	equ	0xFF2
  9419                           intcon2	equ	0xFF1
  9420                           postinc0	equ	0xFEE
  9421                           wreg	equ	0xFE8
  9422                           indf1	equ	0xFE7
  9423                           postdec1	equ	0xFE5
  9424                           fsr1h	equ	0xFE2
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _SampleSingleChannel *****************
  9434 ;; Defined at:
  9435 ;;		line 98 in file "AdcApp.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  _adcResult      2   53[BANK1 ] unsigned int 
  9440 ;;  dest           50    0[BANK1 ] unsigned char [50]
  9441 ;;  adcRes          2   55[BANK1 ] unsigned int 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  1    wreg      unsigned char 
  9444 ;; Registers used:
  9445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9451 ;;      Params:         0       0       0       0       0       0       0
  9452 ;;      Locals:         0       0      57       0       0       0       0
  9453 ;;      Temps:          0       0       0       0       0       0       0
  9454 ;;      Totals:         0       0      57       0       0       0       0
  9455 ;;Total ram usage:       57 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    8
  9458 ;; This function calls:
  9459 ;;		_ADC_GetConversion
  9460 ;;		_UART_Write_Text
  9461 ;;		___ftdiv
  9462 ;;		___ftmul
  9463 ;;		___fttol
  9464 ;;		___lwtoft
  9465 ;;		_pow
  9466 ;;		_sprintf
  9467 ;; This function is called by:
  9468 ;;		_main
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text33
  9473  002104                     __ptext33:
  9474                           	opt stack 0
  9475  002104                     _SampleSingleChannel:
  9476                           	opt stack 22
  9477                           
  9478                           ;AdcApp.c: 100: char dest[50];
  9479                           ;AdcApp.c: 101: uint16_t adcRes = 0x0;
  9480                           
  9481                           ;incstack = 0
  9482  002104  0E00               	movlw	0
  9483  002106  0101               	movlb	1	; () banked
  9484  002108  6F38               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  9485  00210A  0E00               	movlw	0
  9486  00210C  6F37               	movwf	SampleSingleChannel@adcRes& (0+255),b
  9487                           
  9488                           ; BSR set to: 1
  9489                           ;AdcApp.c: 102: if(numSamples > 0)
  9490  00210E  51D4               	movf	_numSamples& (0+255),w,b
  9491  002110  11D5               	iorwf	(_numSamples+1)& (0+255),w,b
  9492  002112  B4D8               	btfsc	status,2,c
  9493  002114  D0A8               	goto	l165
  9494                           
  9495                           ; BSR set to: 1
  9496                           ;AdcApp.c: 103: {
  9497                           ;AdcApp.c: 104: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  9498  002116  0EBD               	movlw	low _channelArr
  9499  002118  2437               	addwf	_channelNum,w,c
  9500  00211A  6EF6               	movwf	tblptrl,c
  9501  00211C  0E78               	movlw	high _channelArr
  9502  00211E  2038               	addwfc	_channelNum+1,w,c
  9503  002120  6EF7               	movwf	tblptrh,c
  9504  002122                     	if	0	;There are less than 3 active tblptr bytes
  9505  002122                     	endif
  9506  002122  0008               	tblrd		*
  9507  002124  50F5               	movf	tablat,w,c
  9508  002126  EC78  F021         	call	_ADC_GetConversion
  9509  00212A  C018  F135         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  9510  00212E  C019  F136         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  9511                           
  9512                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9513  002132  0E00               	movlw	0
  9514  002134  0100               	movlb	0	; () banked
  9515  002136  6FA5               	movwf	pow@y& (0+255),b
  9516  002138  0E20               	movlw	32
  9517  00213A  6FA6               	movwf	(pow@y+1)& (0+255),b
  9518  00213C  0E41               	movlw	65
  9519  00213E  6FA7               	movwf	(pow@y+2)& (0+255),b
  9520  002140  0E00               	movlw	0
  9521  002142  6FA2               	movwf	pow@x& (0+255),b
  9522  002144  0E00               	movlw	0
  9523  002146  6FA3               	movwf	(pow@x+1)& (0+255),b
  9524  002148  0E40               	movlw	64
  9525  00214A  6FA4               	movwf	(pow@x+2)& (0+255),b
  9526  00214C  ECC2  F00F         	call	_pow	;wreg free
  9527  002150  C0A2  F132         	movff	?_pow,_SampleSingleChannel$3936
  9528  002154  C0A3  F133         	movff	?_pow+1,_SampleSingleChannel$3936+1
  9529  002158  C0A4  F134         	movff	?_pow+2,_SampleSingleChannel$3936+2
  9530                           
  9531                           ;AdcApp.c: 105: adcRes = (_adcResult/pow(2,(10)))*(3340);
  9532  00215C  0EC0               	movlw	192
  9533  00215E  0100               	movlb	0	; () banked
  9534  002160  6F69               	movwf	___ftmul@f2& (0+255),b
  9535  002162  0E50               	movlw	80
  9536  002164  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
  9537  002166  0E45               	movlw	69
  9538  002168  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
  9539  00216A  C132  F026         	movff	_SampleSingleChannel$3936,___ftdiv@f2
  9540  00216E  C133  F027         	movff	_SampleSingleChannel$3936+1,___ftdiv@f2+1
  9541  002172  C134  F028         	movff	_SampleSingleChannel$3936+2,___ftdiv@f2+2
  9542  002176  C135  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  9543  00217A  C136  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  9544  00217E  ECF2  F021         	call	___lwtoft	;wreg free
  9545  002182  C020  F023         	movff	?___lwtoft,___ftdiv@f1
  9546  002186  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
  9547  00218A  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
  9548  00218E  ECDB  F016         	call	___ftdiv	;wreg free
  9549  002192  C023  F066         	movff	?___ftdiv,___ftmul@f1
  9550  002196  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
  9551  00219A  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
  9552  00219E  EC60  F016         	call	___ftmul	;wreg free
  9553  0021A2  C066  F079         	movff	?___ftmul,___fttol@f1
  9554  0021A6  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
  9555  0021AA  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
  9556  0021AE  ECE4  F015         	call	___fttol	;wreg free
  9557  0021B2  C079  F137         	movff	?___fttol,SampleSingleChannel@adcRes
  9558  0021B6  C07A  F138         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  9559                           
  9560                           ;AdcApp.c: 106: if(channelArr[channelNum] == 0x6) lastAdcTemp = adcRes;
  9561  0021BA  0EBD               	movlw	low _channelArr
  9562  0021BC  2437               	addwf	_channelNum,w,c
  9563  0021BE  6EF6               	movwf	tblptrl,c
  9564  0021C0  0E78               	movlw	high _channelArr
  9565  0021C2  2038               	addwfc	_channelNum+1,w,c
  9566  0021C4  6EF7               	movwf	tblptrh,c
  9567  0021C6                     	if	0	;There are less than 3 active tblptr bytes
  9568  0021C6                     	endif
  9569  0021C6  0008               	tblrd		*
  9570  0021C8  50F5               	movf	tablat,w,c
  9571  0021CA  0A06               	xorlw	6
  9572  0021CC  A4D8               	btfss	status,2,c
  9573  0021CE  D004               	goto	l166
  9574  0021D0  C137  F1DE         	movff	SampleSingleChannel@adcRes,_lastAdcTemp	;volatile
  9575  0021D4  C138  F1DF         	movff	SampleSingleChannel@adcRes+1,_lastAdcTemp+1	;volatile
  9576  0021D8                     l166:
  9577                           
  9578                           ;AdcApp.c: 107: if(channelArr[channelNum] == 0x5) lastAdcFfwrRSSI = adcRes;
  9579  0021D8  0EBD               	movlw	low _channelArr
  9580  0021DA  2437               	addwf	_channelNum,w,c
  9581  0021DC  6EF6               	movwf	tblptrl,c
  9582  0021DE  0E78               	movlw	high _channelArr
  9583  0021E0  2038               	addwfc	_channelNum+1,w,c
  9584  0021E2  6EF7               	movwf	tblptrh,c
  9585  0021E4                     	if	0	;There are less than 3 active tblptr bytes
  9586  0021E4                     	endif
  9587  0021E4  0008               	tblrd		*
  9588  0021E6  50F5               	movf	tablat,w,c
  9589  0021E8  0A05               	xorlw	5
  9590  0021EA  A4D8               	btfss	status,2,c
  9591  0021EC  D004               	goto	l167
  9592  0021EE  C137  F1DC         	movff	SampleSingleChannel@adcRes,_lastAdcFfwrRSSI	;volatile
  9593  0021F2  C138  F1DD         	movff	SampleSingleChannel@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
  9594  0021F6                     l167:
  9595                           
  9596                           ;AdcApp.c: 108: if(channelArr[channelNum] == 0x4) lastAdcRREV = adcRes;
  9597  0021F6  0EBD               	movlw	low _channelArr
  9598  0021F8  2437               	addwf	_channelNum,w,c
  9599  0021FA  6EF6               	movwf	tblptrl,c
  9600  0021FC  0E78               	movlw	high _channelArr
  9601  0021FE  2038               	addwfc	_channelNum+1,w,c
  9602  002200  6EF7               	movwf	tblptrh,c
  9603  002202                     	if	0	;There are less than 3 active tblptr bytes
  9604  002202                     	endif
  9605  002202  0008               	tblrd		*
  9606  002204  50F5               	movf	tablat,w,c
  9607  002206  0A04               	xorlw	4
  9608  002208  A4D8               	btfss	status,2,c
  9609  00220A  D004               	goto	l168
  9610  00220C  C137  F1DA         	movff	SampleSingleChannel@adcRes,_lastAdcRREV	;volatile
  9611  002210  C138  F1DB         	movff	SampleSingleChannel@adcRes+1,_lastAdcRREV+1	;volatile
  9612  002214                     l168:
  9613                           
  9614                           ;AdcApp.c: 109: if(channelArr[channelNum] == 0x7) lastAdcVgMon = adcRes;
  9615  002214  0EBD               	movlw	low _channelArr
  9616  002216  2437               	addwf	_channelNum,w,c
  9617  002218  6EF6               	movwf	tblptrl,c
  9618  00221A  0E78               	movlw	high _channelArr
  9619  00221C  2038               	addwfc	_channelNum+1,w,c
  9620  00221E  6EF7               	movwf	tblptrh,c
  9621  002220                     	if	0	;There are less than 3 active tblptr bytes
  9622  002220                     	endif
  9623  002220  0008               	tblrd		*
  9624  002222  50F5               	movf	tablat,w,c
  9625  002224  0A07               	xorlw	7
  9626  002226  A4D8               	btfss	status,2,c
  9627  002228  D004               	goto	l169
  9628  00222A  C137  F1D8         	movff	SampleSingleChannel@adcRes,_lastAdcVgMon	;volatile
  9629  00222E  C138  F1D9         	movff	SampleSingleChannel@adcRes+1,_lastAdcVgMon+1	;volatile
  9630  002232                     l169:
  9631                           
  9632                           ;AdcApp.c: 110: sprintf(dest, "%d \t", adcRes);
  9633  002232  0E00               	movlw	low SampleSingleChannel@dest
  9634  002234  0100               	movlb	0	; () banked
  9635  002236  6FBC               	movwf	sprintf@sp& (0+255),b
  9636  002238  0E01               	movlw	high SampleSingleChannel@dest
  9637  00223A  6FBD               	movwf	(sprintf@sp+1)& (0+255),b
  9638  00223C  0EF6               	movlw	low STR_8
  9639  00223E  6FBE               	movwf	sprintf@f& (0+255),b
  9640  002240  0E7F               	movlw	high STR_8
  9641  002242  6FBF               	movwf	(sprintf@f+1)& (0+255),b
  9642  002244  C137  F0C0         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  9643  002248  C138  F0C1         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  9644  00224C  EC70  F000         	call	_sprintf	;wreg free
  9645                           
  9646                           ;AdcApp.c: 111: UART_Write_Text(dest);
  9647  002250  0E00               	movlw	low SampleSingleChannel@dest
  9648  002252  6E19               	movwf	UART_Write_Text@text,c
  9649  002254  0E01               	movlw	high SampleSingleChannel@dest
  9650  002256  6E1A               	movwf	UART_Write_Text@text+1,c
  9651  002258  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9652                           
  9653                           ;AdcApp.c: 113: numSamples--;
  9654  00225C  0101               	movlb	1	; () banked
  9655  00225E  07D4               	decf	_numSamples& (0+255),f,b
  9656  002260  A0D8               	btfss	status,0,c
  9657  002262  07D5               	decf	(_numSamples+1)& (0+255),f,b
  9658                           
  9659                           ;AdcApp.c: 114: }
  9660  002264  0012               	return	
  9661  002266                     l165:
  9662                           
  9663                           ; BSR set to: 1
  9664                           ;AdcApp.c: 115: else
  9665                           ;AdcApp.c: 116: {
  9666                           ;AdcApp.c: 117: needToSample = 0;
  9667                           
  9668                           ; BSR set to: 1
  9669  002266  0E00               	movlw	0
  9670  002268  6FEA               	movwf	_needToSample& (0+255),b	;volatile
  9671                           
  9672                           ; BSR set to: 1
  9673                           ;AdcApp.c: 118: UART_Write_Text("\n\r OK \n\r");
  9674  00226A  0EE0               	movlw	low STR_9
  9675  00226C  6E19               	movwf	UART_Write_Text@text,c
  9676  00226E  0E7F               	movlw	high STR_9
  9677  002270  6E1A               	movwf	UART_Write_Text@text+1,c
  9678  002272  ECF4  F01C         	call	_UART_Write_Text	;wreg free
  9679  002276  0012               	return	
  9680  002278                     __end_of_SampleSingleChannel:
  9681                           	opt stack 0
  9682                           tosu	equ	0xFFF
  9683                           tosh	equ	0xFFE
  9684                           tosl	equ	0xFFD
  9685                           pclath	equ	0xFFA
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           intcon	equ	0xFF2
  9693                           intcon2	equ	0xFF1
  9694                           postinc0	equ	0xFEE
  9695                           wreg	equ	0xFE8
  9696                           indf1	equ	0xFE7
  9697                           postdec1	equ	0xFE5
  9698                           fsr1h	equ	0xFE2
  9699                           fsr1l	equ	0xFE1
  9700                           indf2	equ	0xFDF
  9701                           postinc2	equ	0xFDE
  9702                           postdec2	equ	0xFDD
  9703                           fsr2h	equ	0xFDA
  9704                           fsr2l	equ	0xFD9
  9705                           status	equ	0xFD8
  9706                           
  9707 ;; *************** function _sprintf *****************
  9708 ;; Defined at:
  9709 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;  sp              2   92[BANK0 ] PTR unsigned char 
  9712 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintSystemStatus@dest(50), PrintHelpScreen@dest(50), 
  9713 ;;		 -> SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50), 
  9714 ;;  f               2   94[BANK0 ] PTR const unsigned char 
  9715 ;;		 -> STR_69(22), STR_68(15), STR_67(22), STR_66(13), 
  9716 ;;		 -> STR_65(13), STR_64(23), STR_63(10), STR_62(24), 
  9717 ;;		 -> STR_61(36), STR_60(24), STR_59(36), STR_58(22), 
  9718 ;;		 -> STR_57(22), STR_56(15), STR_55(22), STR_54(13), 
  9719 ;;		 -> STR_53(13), STR_52(23), STR_51(10), STR_50(24), 
  9720 ;;		 -> STR_49(36), STR_48(24), STR_47(59), STR_46(22), 
  9721 ;;		 -> STR_43(4), STR_42(73), STR_41(37), STR_40(38), 
  9722 ;;		 -> STR_39(86), STR_38(53), STR_37(46), STR_36(29), 
  9723 ;;		 -> STR_35(101), STR_34(86), STR_33(61), STR_32(62), 
  9724 ;;		 -> STR_31(45), STR_30(74), STR_29(25), STR_28(79), 
  9725 ;;		 -> STR_27(75), STR_26(46), STR_25(61), STR_24(66), 
  9726 ;;		 -> STR_23(23), STR_22(31), STR_20(20), STR_18(20), 
  9727 ;;		 -> STR_16(18), STR_15(20), STR_14(31), STR_10(11), 
  9728 ;;		 -> STR_8(5), 
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;  tmpval          4  122[BANK0 ] struct .
  9731 ;;  val             4  116[BANK0 ] unsigned long 
  9732 ;;  fval            3  126[BANK0 ] unsigned long 
  9733 ;;  exp             2  120[BANK0 ] int 
  9734 ;;  prec            2  114[BANK0 ] int 
  9735 ;;  flag            2  112[BANK0 ] unsigned short 
  9736 ;;  ap              2  110[BANK0 ] PTR void [1]
  9737 ;;		 -> ?_sprintf(2), 
  9738 ;;  cp              2  108[BANK0 ] PTR const unsigned char 
  9739 ;;		 -> STR_70(7), STR_45(6), STR_44(6), STR_21(9), 
  9740 ;;		 -> STR_19(12), STR_17(6), 
  9741 ;;  len             2    0        unsigned int 
  9742 ;;  width           2    0        int 
  9743 ;;  c               1  129[BANK0 ] char 
  9744 ;;  d               1    0        unsigned char 
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  2   92[BANK0 ] int 
  9747 ;; Registers used:
  9748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9754 ;;      Params:         0       7       0       0       0       0       0
  9755 ;;      Locals:         0      25       0       0       0       0       0
  9756 ;;      Temps:          0       6       0       0       0       0       0
  9757 ;;      Totals:         0      38       0       0       0       0       0
  9758 ;;Total ram usage:       38 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    6
  9761 ;; This function calls:
  9762 ;;		___awdiv
  9763 ;;		___ftadd
  9764 ;;		___ftge
  9765 ;;		___ftmul
  9766 ;;		___ftneg
  9767 ;;		___ftsub
  9768 ;;		___fttol
  9769 ;;		___lldiv
  9770 ;;		___llmod
  9771 ;;		___lltoft
  9772 ;;		___wmul
  9773 ;;		__div_to_l_
  9774 ;;		__tdiv_to_l_
  9775 ;;		_fround
  9776 ;;		_scale
  9777 ;; This function is called by:
  9778 ;;		_SampleSingleChannel
  9779 ;;		_readUartByte
  9780 ;;		_SendUartSystemInitMessage
  9781 ;;		_PrintHelpScreen
  9782 ;;		_PrintRxStatus
  9783 ;;		_PrintTxStatus
  9784 ;;		_PrintSystemStatus
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           	psect	text34
  9789  0000E0                     __ptext34:
  9790                           	opt stack 0
  9791  0000E0                     _sprintf:
  9792                           	opt stack 23
  9793                           
  9794                           ;doprnt.c: 494: va_list ap;
  9795                           ;doprnt.c: 499: signed char c;
  9796                           ;doprnt.c: 501: int width;
  9797                           ;doprnt.c: 504: int prec;
  9798                           ;doprnt.c: 508: unsigned short flag;
  9799                           ;doprnt.c: 515: char d;
  9800                           ;doprnt.c: 516: double fval;
  9801                           ;doprnt.c: 517: int exp;
  9802                           ;doprnt.c: 523: union {
  9803                           ;doprnt.c: 524: unsigned long vd;
  9804                           ;doprnt.c: 525: double integ;
  9805                           ;doprnt.c: 526: } tmpval;
  9806                           ;doprnt.c: 528: unsigned long val;
  9807                           ;doprnt.c: 529: unsigned len;
  9808                           ;doprnt.c: 530: const char * cp;
  9809                           ;doprnt.c: 533: *ap = __va_start();
  9810                           
  9811                           ;incstack = 0
  9812  0000E0  0EC0               	movlw	low (?_sprintf+4)
  9813  0000E2  0100               	movlb	0	; () banked
  9814  0000E4  6FCE               	movwf	sprintf@ap& (0+255),b
  9815  0000E6  0E00               	movlw	high (?_sprintf+4)
  9816  0000E8  6FCF               	movwf	(sprintf@ap+1)& (0+255),b
  9817                           
  9818                           ;doprnt.c: 536: while(c = *f++) {
  9819  0000EA  D3C8               	goto	u9540
  9820  0000EC                     
  9821                           ; BSR set to: 0
  9822                           ;doprnt.c: 538: if(c != '%')
  9823                           
  9824                           ; BSR set to: 0
  9825  0000EC  0E25               	movlw	37
  9826  0000EE  19E1               	xorwf	sprintf@c& (0+255),w,b
  9827  0000F0  B4D8               	btfsc	status,2,c
  9828  0000F2  D009               	goto	l1672
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;doprnt.c: 540: {
  9832                           ;doprnt.c: 541: ((*sp++ = (c)));
  9833  0000F4  C0BC  FFD9         	movff	sprintf@sp,fsr2l
  9834  0000F8  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
  9835  0000FC  C0E1  FFDF         	movff	sprintf@c,indf2
  9836                           
  9837                           ; BSR set to: 0
  9838  000100  4BBC               	infsnz	sprintf@sp& (0+255),f,b
  9839  000102  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
  9840                           
  9841                           ;doprnt.c: 542: continue;
  9842  000104  D3BB               	goto	u9540
  9843  000106                     l1672:
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;doprnt.c: 543: }
  9847                           ;doprnt.c: 548: flag = 0;
  9848                           
  9849                           ; BSR set to: 0
  9850  000106  0E00               	movlw	0
  9851  000108  6FD1               	movwf	(sprintf@flag+1)& (0+255),b
  9852  00010A  0E00               	movlw	0
  9853  00010C  6FD0               	movwf	sprintf@flag& (0+255),b
  9854                           
  9855                           ;doprnt.c: 635: switch(c = *f++) {
  9856  00010E  D030               	goto	l1673
  9857  000110                     
  9858                           ; BSR set to: 0
  9859                           ;doprnt.c: 663: flag |= 0x400;
  9860                           
  9861                           ; BSR set to: 0
  9862  000110  85D1               	bsf	(sprintf@flag+1)& (0+255),2,b
  9863                           
  9864                           ; BSR set to: 0
  9865                           ;doprnt.c: 698: case 'i':
  9866                           ;doprnt.c: 699: break;
  9867                           
  9868                           ; BSR set to: 0
  9869                           
  9870                           ;doprnt.c: 697: case 'd':
  9871                           
  9872                           ;doprnt.c: 664: break;
  9873  000112  D048               	goto	l1677
  9874  000114                     
  9875                           ; BSR set to: 0
  9876                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9877                           
  9878                           ; BSR set to: 0
  9879  000114  C0CE  FFD9         	movff	sprintf@ap,fsr2l
  9880  000118  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
  9881  00011C  CFDE F0CC          	movff	postinc2,sprintf@cp
  9882  000120  CFDD F0CD          	movff	postdec2,sprintf@cp+1
  9883                           
  9884                           ; BSR set to: 0
  9885  000124  0E02               	movlw	2
  9886  000126  27CE               	addwf	sprintf@ap& (0+255),f,b
  9887  000128  0E00               	movlw	0
  9888  00012A  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;doprnt.c: 740: if(!cp)
  9892  00012C  51CC               	movf	sprintf@cp& (0+255),w,b
  9893  00012E  11CD               	iorwf	(sprintf@cp+1)& (0+255),w,b
  9894  000130  A4D8               	btfss	status,2,c
  9895  000132  D014               	goto	l1682
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;doprnt.c: 741: cp = "(null)";
  9899  000134  0EE9               	movlw	low STR_70
  9900  000136  6FCC               	movwf	sprintf@cp& (0+255),b
  9901  000138  0E7F               	movlw	high STR_70
  9902  00013A  6FCD               	movwf	(sprintf@cp+1)& (0+255),b
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;doprnt.c: 777: while(*cp)
  9906  00013C  D00F               	goto	l1682
  9907  00013E                     
  9908                           ; BSR set to: 0
  9909                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  9910                           
  9911                           ; BSR set to: 0
  9912  00013E  C0CC  FFF6         	movff	sprintf@cp,tblptrl
  9913  000142  C0CD  FFF7         	movff	sprintf@cp+1,tblptrh
  9914  000146                     	if	0	;tblptru may be non-zero
  9915  000146                     	endif
  9916  000146                     	if	0	;tblptru may be non-zero
  9917  000146                     	endif
  9918  000146  C0BC  FFD9         	movff	sprintf@sp,fsr2l
  9919  00014A  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
  9920  00014E  0008               	tblrd		*
  9921  000150  CFF5 FFDF          	movff	tablat,indf2
  9922                           
  9923                           ; BSR set to: 0
  9924  000154  4BCC               	infsnz	sprintf@cp& (0+255),f,b
  9925  000156  2BCD               	incf	(sprintf@cp+1)& (0+255),f,b
  9926                           
  9927                           ; BSR set to: 0
  9928  000158  4BBC               	infsnz	sprintf@sp& (0+255),f,b
  9929  00015A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
  9930  00015C                     l1682:
  9931                           
  9932                           ; BSR set to: 0
  9933                           
  9934                           ; BSR set to: 0
  9935  00015C  C0CC  FFF6         	movff	sprintf@cp,tblptrl
  9936  000160  C0CD  FFF7         	movff	sprintf@cp+1,tblptrh
  9937  000164                     	if	0	;tblptru may be non-zero
  9938  000164                     	endif
  9939  000164                     	if	0	;tblptru may be non-zero
  9940  000164                     	endif
  9941  000164  0008               	tblrd		*
  9942  000166  50F5               	movf	tablat,w,c
  9943  000168  0900               	iorlw	0
  9944  00016A  B4D8               	btfsc	status,2,c
  9945  00016C  D387               	goto	u9540
  9946  00016E  D7E7               	goto	l1683
  9947  000170                     l1673:
  9948                           
  9949                           ; BSR set to: 0
  9950                           
  9951                           ; BSR set to: 0
  9952  000170  C0BE  FFF6         	movff	sprintf@f,tblptrl
  9953  000174  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
  9954  000178  4BBE               	infsnz	sprintf@f& (0+255),f,b
  9955  00017A  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
  9956  00017C                     	if	0	;tblptru may be non-zero
  9957  00017C                     	endif
  9958  00017C                     	if	0	;tblptru may be non-zero
  9959  00017C                     	endif
  9960  00017C  0008               	tblrd		*
  9961  00017E  CFF5 F0E1          	movff	tablat,sprintf@c
  9962  000182  51E1               	movf	sprintf@c& (0+255),w,b
  9963                           
  9964                           ; Switch size 1, requested type "space"
  9965                           ; Number of cases is 5, Range of values is 0 to 115
  9966                           ; switch strategies available:
  9967                           ; Name         Instructions Cycles
  9968                           ; simple_byte           16     9 (average)
  9969                           ;	Chosen strategy is simple_byte
  9970  000184  0A00               	xorlw	0	; case 0
  9971  000186  B4D8               	btfsc	status,2,c
  9972  000188  D385               	goto	u9550
  9973  00018A  0A64               	xorlw	100	; case 100
  9974  00018C  B4D8               	btfsc	status,2,c
  9975  00018E  D00A               	goto	l1677
  9976  000190  0A02               	xorlw	2	; case 102
  9977  000192  B4D8               	btfsc	status,2,c
  9978  000194  D7BD               	goto	l1676
  9979  000196  0A0F               	xorlw	15	; case 105
  9980  000198  B4D8               	btfsc	status,2,c
  9981  00019A  D004               	goto	l1677
  9982  00019C  0A1A               	xorlw	26	; case 115
  9983  00019E  B4D8               	btfsc	status,2,c
  9984  0001A0  D7B9               	goto	l1680
  9985  0001A2  D36C               	goto	u9540
  9986  0001A4                     l1677:
  9987                           
  9988                           ; BSR set to: 0
  9989                           ;doprnt.c: 825: if(flag & (0x700)) {
  9990                           
  9991                           ; BSR set to: 0
  9992  0001A4  0E07               	movlw	7
  9993  0001A6  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
  9994  0001A8  B4D8               	btfsc	status,2,c
  9995  0001AA  D2C8               	goto	l1686
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;doprnt.c: 829: prec = 6;
  9999  0001AC  0E00               	movlw	0
 10000  0001AE  6FD3               	movwf	(sprintf@prec+1)& (0+255),b
 10001  0001B0  0E06               	movlw	6
 10002  0001B2  6FD2               	movwf	sprintf@prec& (0+255),b
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10006  0001B4  C0CE  FFD9         	movff	sprintf@ap,fsr2l
 10007  0001B8  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
 10008  0001BC  CFDE F0DE          	movff	postinc2,sprintf@fval
 10009  0001C0  CFDE F0DF          	movff	postinc2,sprintf@fval+1
 10010  0001C4  CFDD F0E0          	movff	postdec2,sprintf@fval+2
 10011                           
 10012                           ; BSR set to: 0
 10013  0001C8  0E03               	movlw	3
 10014  0001CA  27CE               	addwf	sprintf@ap& (0+255),f,b
 10015  0001CC  0E00               	movlw	0
 10016  0001CE  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;doprnt.c: 831: if(fval < 0.0) {
 10020  0001D0  AFE0               	btfss	(sprintf@fval+2)& (0+255),7,b
 10021  0001D2  D011               	goto	l1687
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;doprnt.c: 832: fval = -fval;
 10025  0001D4  C0DE  F018         	movff	sprintf@fval,___ftneg@f1
 10026  0001D8  C0DF  F019         	movff	sprintf@fval+1,___ftneg@f1+1
 10027  0001DC  C0E0  F01A         	movff	sprintf@fval+2,___ftneg@f1+2
 10028  0001E0  EC04  F022         	call	___ftneg	;wreg free
 10029  0001E4  C018  F0DE         	movff	?___ftneg,sprintf@fval
 10030  0001E8  C019  F0DF         	movff	?___ftneg+1,sprintf@fval+1
 10031  0001EC  C01A  F0E0         	movff	?___ftneg+2,sprintf@fval+2
 10032                           
 10033                           ;doprnt.c: 833: flag |= 0x03;
 10034  0001F0  0E03               	movlw	3
 10035  0001F2  0100               	movlb	0	; () banked
 10036  0001F4  13D0               	iorwf	sprintf@flag& (0+255),f,b
 10037  0001F6                     l1687:
 10038                           
 10039                           ; BSR set to: 0
 10040                           ;doprnt.c: 834: }
 10041                           ;doprnt.c: 835: exp = 0;
 10042                           
 10043                           ; BSR set to: 0
 10044  0001F6  0E00               	movlw	0
 10045  0001F8  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10046  0001FA  0E00               	movlw	0
 10047  0001FC  6FD8               	movwf	sprintf@exp& (0+255),b
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;doprnt.c: 836: if( fval!=0) {
 10051  0001FE  51DE               	movf	sprintf@fval& (0+255),w,b
 10052  000200  11DF               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10053  000202  11E0               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10054  000204  B4D8               	btfsc	status,2,c
 10055  000206  D086               	goto	l1692
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10059  000208  0E82               	movlw	130
 10060  00020A  6FC3               	movwf	??_sprintf& (0+255),b
 10061  00020C  0EFF               	movlw	255
 10062  00020E  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10063  000210  C0DE  F0C5         	movff	sprintf@fval,??_sprintf+2
 10064  000214  C0DF  F0C6         	movff	sprintf@fval+1,??_sprintf+3
 10065  000218  C0E0  F0C7         	movff	sprintf@fval+2,??_sprintf+4
 10066  00021C  C0E1  F0C8         	movff	sprintf@fval+3,??_sprintf+5
 10067  000220  0E10               	movlw	16
 10068  000222  D005               	goto	u9290
 10069  000224                     u9295:
 10070  000224  90D8               	bcf	status,0,c
 10071  000226  33C8               	rrcf	(??_sprintf+5)& (0+255),f,b
 10072  000228  33C7               	rrcf	(??_sprintf+4)& (0+255),f,b
 10073  00022A  33C6               	rrcf	(??_sprintf+3)& (0+255),f,b
 10074  00022C  33C5               	rrcf	(??_sprintf+2)& (0+255),f,b
 10075  00022E                     u9290:
 10076  00022E  2EE8               	decfsz	wreg,f,c
 10077  000230  D7F9               	goto	u9295
 10078  000232  51C5               	movf	(??_sprintf+2)& (0+255),w,b
 10079  000234  25C3               	addwf	??_sprintf& (0+255),w,b
 10080  000236  6FD8               	movwf	sprintf@exp& (0+255),b
 10081  000238  0E00               	movlw	0
 10082  00023A  21C4               	addwfc	(??_sprintf+1)& (0+255),w,b
 10083  00023C  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;doprnt.c: 838: exp--;
 10087  00023E  07D8               	decf	sprintf@exp& (0+255),f,b
 10088  000240  A0D8               	btfss	status,0,c
 10089  000242  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;doprnt.c: 839: exp *= 3;
 10093  000244  C0D8  F026         	movff	sprintf@exp,___wmul@multiplier
 10094  000248  C0D9  F027         	movff	sprintf@exp+1,___wmul@multiplier+1
 10095  00024C  0E00               	movlw	0
 10096  00024E  6E29               	movwf	___wmul@multiplicand+1,c
 10097  000250  0E03               	movlw	3
 10098  000252  6E28               	movwf	___wmul@multiplicand,c
 10099  000254  ECCD  F021         	call	___wmul	;wreg free
 10100  000258  C026  F0D8         	movff	?___wmul,sprintf@exp
 10101  00025C  C027  F0D9         	movff	?___wmul+1,sprintf@exp+1
 10102                           
 10103                           ;doprnt.c: 840: exp /= 10;
 10104  000260  C0D8  F01E         	movff	sprintf@exp,___awdiv@dividend
 10105  000264  C0D9  F01F         	movff	sprintf@exp+1,___awdiv@dividend+1
 10106  000268  0E00               	movlw	0
 10107  00026A  6E21               	movwf	___awdiv@divisor+1,c
 10108  00026C  0E0A               	movlw	10
 10109  00026E  6E20               	movwf	___awdiv@divisor,c
 10110  000270  ECF9  F01B         	call	___awdiv	;wreg free
 10111  000274  C01E  F0D8         	movff	?___awdiv,sprintf@exp
 10112  000278  C01F  F0D9         	movff	?___awdiv+1,sprintf@exp+1
 10113                           
 10114                           ;doprnt.c: 841: if(exp < 0)
 10115  00027C  0100               	movlb	0	; () banked
 10116  00027E  AFD9               	btfss	(sprintf@exp+1)& (0+255),7,b
 10117  000280  D003               	goto	l1689
 10118                           
 10119                           ; BSR set to: 0
 10120                           ;doprnt.c: 842: exp--;
 10121  000282  07D8               	decf	sprintf@exp& (0+255),f,b
 10122  000284  A0D8               	btfss	status,0,c
 10123  000286  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10124  000288                     l1689:
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10128                           
 10129                           ; BSR set to: 0
 10130  000288  51D8               	movf	sprintf@exp& (0+255),w,b
 10131  00028A  0800               	sublw	0
 10132  00028C  EC51  F004         	call	_scale
 10133  000290  C072  F0DA         	movff	?_scale,sprintf@tmpval
 10134  000294  C073  F0DB         	movff	?_scale+1,sprintf@tmpval+1
 10135  000298  C074  F0DC         	movff	?_scale+2,sprintf@tmpval+2
 10136                           
 10137                           ;doprnt.c: 847: tmpval.integ *= fval;
 10138  00029C  C0DA  F066         	movff	sprintf@tmpval,___ftmul@f1
 10139  0002A0  C0DB  F067         	movff	sprintf@tmpval+1,___ftmul@f1+1
 10140  0002A4  C0DC  F068         	movff	sprintf@tmpval+2,___ftmul@f1+2
 10141  0002A8  C0DE  F069         	movff	sprintf@fval,___ftmul@f2
 10142  0002AC  C0DF  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10143  0002B0  C0E0  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10144  0002B4  EC60  F016         	call	___ftmul	;wreg free
 10145  0002B8  C066  F0DA         	movff	?___ftmul,sprintf@tmpval
 10146  0002BC  C067  F0DB         	movff	?___ftmul+1,sprintf@tmpval+1
 10147  0002C0  C068  F0DC         	movff	?___ftmul+2,sprintf@tmpval+2
 10148                           
 10149                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10150  0002C4  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10151  0002C8  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10152  0002CC  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10153  0002D0  0E00               	movlw	0
 10154  0002D2  6E1B               	movwf	___ftge@ff2,c
 10155  0002D4  0E80               	movlw	128
 10156  0002D6  6E1C               	movwf	___ftge@ff2+1,c
 10157  0002D8  0E3F               	movlw	63
 10158  0002DA  6E1D               	movwf	___ftge@ff2+2,c
 10159  0002DC  ECB1  F01B         	call	___ftge	;wreg free
 10160  0002E0  B0D8               	btfsc	status,0,c
 10161  0002E2  D005               	goto	l1690
 10162                           
 10163                           ;doprnt.c: 849: exp--;
 10164  0002E4  0100               	movlb	0	; () banked
 10165  0002E6  07D8               	decf	sprintf@exp& (0+255),f,b
 10166  0002E8  A0D8               	btfss	status,0,c
 10167  0002EA  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10168  0002EC  D013               	goto	l1692
 10169  0002EE                     l1690:
 10170                           
 10171                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10172                           
 10173                           ; BSR set to: 0
 10174  0002EE  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10175  0002F2  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10176  0002F6  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10177  0002FA  0E00               	movlw	0
 10178  0002FC  6E1B               	movwf	___ftge@ff2,c
 10179  0002FE  0E20               	movlw	32
 10180  000300  6E1C               	movwf	___ftge@ff2+1,c
 10181  000302  0E41               	movlw	65
 10182  000304  6E1D               	movwf	___ftge@ff2+2,c
 10183  000306  ECB1  F01B         	call	___ftge	;wreg free
 10184  00030A  A0D8               	btfss	status,0,c
 10185  00030C  D003               	goto	l1692
 10186                           
 10187                           ;doprnt.c: 851: exp++;
 10188  00030E  0100               	movlb	0	; () banked
 10189  000310  4BD8               	infsnz	sprintf@exp& (0+255),f,b
 10190  000312  2BD9               	incf	(sprintf@exp+1)& (0+255),f,b
 10191  000314                     l1692:
 10192                           
 10193                           ;doprnt.c: 852: }
 10194                           ;doprnt.c: 1112: if(prec <= 12)
 10195                           
 10196                           ; BSR set to: 0
 10197                           
 10198                           ; BSR set to: 0
 10199                           
 10200                           ; BSR set to: 0
 10201  000314  0100               	movlb	0	; () banked
 10202  000316  BFD3               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10203  000318  D006               	goto	u9330
 10204  00031A  51D3               	movf	(sprintf@prec+1)& (0+255),w,b
 10205  00031C  E11B               	bnz	l9083
 10206  00031E  0E0D               	movlw	13
 10207  000320  5DD2               	subwf	sprintf@prec& (0+255),w,b
 10208  000322  B0D8               	btfsc	status,0,c
 10209  000324  D017               	goto	l1693
 10210  000326                     u9330:
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;doprnt.c: 1113: fval += fround(prec);
 10214  000326  C0DE  F07C         	movff	sprintf@fval,___ftadd@f1
 10215  00032A  C0DF  F07D         	movff	sprintf@fval+1,___ftadd@f1+1
 10216  00032E  C0E0  F07E         	movff	sprintf@fval+2,___ftadd@f1+2
 10217  000332  51D2               	movf	sprintf@prec& (0+255),w,b
 10218  000334  EC1B  F009         	call	_fround
 10219  000338  C072  F07F         	movff	?_fround,___ftadd@f2
 10220  00033C  C073  F080         	movff	?_fround+1,___ftadd@f2+1
 10221  000340  C074  F081         	movff	?_fround+2,___ftadd@f2+2
 10222  000344  EC26  F00E         	call	___ftadd	;wreg free
 10223  000348  C07C  F0DE         	movff	?___ftadd,sprintf@fval
 10224  00034C  C07D  F0DF         	movff	?___ftadd+1,sprintf@fval+1
 10225  000350  C07E  F0E0         	movff	?___ftadd+2,sprintf@fval+2
 10226  000354                     l1693:
 10227  000354                     l9083:
 10228                           
 10229                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 10230  000354  0100               	movlb	0	; () banked
 10231  000356  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10232  000358  D006               	goto	u9340
 10233  00035A  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10234  00035C  E11F               	bnz	l9091
 10235  00035E  0E0A               	movlw	10
 10236  000360  5DD8               	subwf	sprintf@exp& (0+255),w,b
 10237  000362  B0D8               	btfsc	status,0,c
 10238  000364  D01B               	goto	u9370
 10239  000366                     u9340:
 10240                           
 10241                           ; BSR set to: 0
 10242  000366  51DE               	movf	sprintf@fval& (0+255),w,b
 10243  000368  11DF               	iorwf	(sprintf@fval+1)& (0+255),w,b
 10244  00036A  11E0               	iorwf	(sprintf@fval+2)& (0+255),w,b
 10245  00036C  B4D8               	btfsc	status,2,c
 10246  00036E  D055               	goto	l1694
 10247                           
 10248                           ; BSR set to: 0
 10249  000370  C0DE  F079         	movff	sprintf@fval,___fttol@f1
 10250  000374  C0DF  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 10251  000378  C0E0  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 10252  00037C  ECE4  F015         	call	___fttol	;wreg free
 10253  000380  0100               	movlb	0	; () banked
 10254  000382  5179               	movf	?___fttol& (0+255),w,b
 10255  000384  117A               	iorwf	(?___fttol+1)& (0+255),w,b
 10256  000386  117B               	iorwf	(?___fttol+2)& (0+255),w,b
 10257  000388  117C               	iorwf	(?___fttol+3)& (0+255),w,b
 10258  00038A  B4D8               	btfsc	status,2,c
 10259                           
 10260                           ; BSR set to: 0
 10261  00038C  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10262  00038E  D045               	goto	l1694
 10263  000390  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10264  000392  E104               	bnz	l9091
 10265  000394  0E02               	movlw	2
 10266  000396  5DD8               	subwf	sprintf@exp& (0+255),w,b
 10267  000398  A0D8               	btfss	status,0,c
 10268  00039A  D03F               	goto	l1694
 10269  00039C                     u9370:
 10270  00039C                     l9091:
 10271                           
 10272                           ; BSR set to: 0
 10273                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 10274  00039C  C0DA  F018         	movff	sprintf@tmpval,___ftge@ff1
 10275  0003A0  C0DB  F019         	movff	sprintf@tmpval+1,___ftge@ff1+1
 10276  0003A4  C0DC  F01A         	movff	sprintf@tmpval+2,___ftge@ff1+2
 10277  0003A8  0E70               	movlw	112
 10278  0003AA  6E1B               	movwf	___ftge@ff2,c
 10279  0003AC  0E89               	movlw	137
 10280  0003AE  6E1C               	movwf	___ftge@ff2+1,c
 10281  0003B0  0E40               	movlw	64
 10282  0003B2  6E1D               	movwf	___ftge@ff2+2,c
 10283  0003B4  ECB1  F01B         	call	___ftge	;wreg free
 10284  0003B8  B0D8               	btfsc	status,0,c
 10285  0003BA  D003               	goto	l1697
 10286                           
 10287                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 10288  0003BC  0100               	movlb	0	; () banked
 10289  0003BE  0EF7               	movlw	247
 10290  0003C0  D002               	goto	L1
 10291  0003C2                     l1697:
 10292                           
 10293                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 10294                           
 10295                           ; BSR set to: 0
 10296  0003C2  0100               	movlb	0	; () banked
 10297  0003C4  0EF8               	movlw	248
 10298  0003C6                     L1:
 10299  0003C6  27D8               	addwf	sprintf@exp& (0+255),f,b
 10300  0003C8  0EFF               	movlw	255
 10301  0003CA  23D9               	addwfc	(sprintf@exp+1)& (0+255),f,b
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;doprnt.c: 1124: }
 10305                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 10306                           
 10307                           ; BSR set to: 0
 10308  0003CC  51D8               	movf	sprintf@exp& (0+255),w,b
 10309  0003CE  EC51  F004         	call	_scale
 10310  0003D2  C072  F0DA         	movff	?_scale,sprintf@tmpval
 10311  0003D6  C073  F0DB         	movff	?_scale+1,sprintf@tmpval+1
 10312  0003DA  C074  F0DC         	movff	?_scale+2,sprintf@tmpval+2
 10313                           
 10314                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 10315  0003DE  C0DE  F018         	movff	sprintf@fval,__tdiv_to_l_@f1
 10316  0003E2  C0DF  F019         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
 10317  0003E6  C0E0  F01A         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
 10318  0003EA  C0DA  F01B         	movff	sprintf@tmpval,__tdiv_to_l_@f2
 10319  0003EE  C0DB  F01C         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
 10320  0003F2  C0DC  F01D         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
 10321  0003F6  ECE2  F011         	call	__tdiv_to_l_	;wreg free
 10322  0003FA  C018  F0D4         	movff	?__tdiv_to_l_,sprintf@val
 10323  0003FE  C019  F0D5         	movff	?__tdiv_to_l_+1,sprintf@val+1
 10324  000402  C01A  F0D6         	movff	?__tdiv_to_l_+2,sprintf@val+2
 10325  000406  C01B  F0D7         	movff	?__tdiv_to_l_+3,sprintf@val+3
 10326                           
 10327                           ;doprnt.c: 1129: fval = 0.0;
 10328  00040A  0E00               	movlw	0
 10329  00040C  0100               	movlb	0	; () banked
 10330  00040E  6FDE               	movwf	sprintf@fval& (0+255),b
 10331  000410  0E00               	movlw	0
 10332  000412  6FDF               	movwf	(sprintf@fval+1)& (0+255),b
 10333  000414  0E00               	movlw	0
 10334  000416  6FE0               	movwf	(sprintf@fval+2)& (0+255),b
 10335                           
 10336                           ;doprnt.c: 1130: } else {
 10337  000418  D033               	goto	l1703
 10338  00041A                     l1694:
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;doprnt.c: 1131: val = (unsigned long)fval;
 10342                           
 10343                           ; BSR set to: 0
 10344  00041A  C0DE  F079         	movff	sprintf@fval,___fttol@f1
 10345  00041E  C0DF  F07A         	movff	sprintf@fval+1,___fttol@f1+1
 10346  000422  C0E0  F07B         	movff	sprintf@fval+2,___fttol@f1+2
 10347  000426  ECE4  F015         	call	___fttol	;wreg free
 10348  00042A  C079  F0D4         	movff	?___fttol,sprintf@val
 10349  00042E  C07A  F0D5         	movff	?___fttol+1,sprintf@val+1
 10350  000432  C07B  F0D6         	movff	?___fttol+2,sprintf@val+2
 10351  000436  C07C  F0D7         	movff	?___fttol+3,sprintf@val+3
 10352                           
 10353                           ;doprnt.c: 1132: fval -= (double)val;
 10354  00043A  C0DE  F088         	movff	sprintf@fval,___ftsub@f1
 10355  00043E  C0DF  F089         	movff	sprintf@fval+1,___ftsub@f1+1
 10356  000442  C0E0  F08A         	movff	sprintf@fval+2,___ftsub@f1+2
 10357  000446  C0D4  F020         	movff	sprintf@val,___lltoft@c
 10358  00044A  C0D5  F021         	movff	sprintf@val+1,___lltoft@c+1
 10359  00044E  C0D6  F022         	movff	sprintf@val+2,___lltoft@c+2
 10360  000452  C0D7  F023         	movff	sprintf@val+3,___lltoft@c+3
 10361  000456  EC8D  F01E         	call	___lltoft	;wreg free
 10362  00045A  C020  F08B         	movff	?___lltoft,___ftsub@f2
 10363  00045E  C021  F08C         	movff	?___lltoft+1,___ftsub@f2+1
 10364  000462  C022  F08D         	movff	?___lltoft+2,___ftsub@f2+2
 10365  000466  EC1F  F020         	call	___ftsub	;wreg free
 10366  00046A  C088  F0DE         	movff	?___ftsub,sprintf@fval
 10367  00046E  C089  F0DF         	movff	?___ftsub+1,sprintf@fval+1
 10368  000472  C08A  F0E0         	movff	?___ftsub+2,sprintf@fval+2
 10369                           
 10370                           ;doprnt.c: 1133: exp = 0;
 10371  000476  0E00               	movlw	0
 10372  000478  0100               	movlb	0	; () banked
 10373  00047A  6FD9               	movwf	(sprintf@exp+1)& (0+255),b
 10374  00047C  0E00               	movlw	0
 10375  00047E  6FD8               	movwf	sprintf@exp& (0+255),b
 10376  000480                     l1703:
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;doprnt.c: 1134: }
 10380                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 10381                           
 10382                           ; BSR set to: 0
 10383  000480  0E01               	movlw	1
 10384  000482  6FE1               	movwf	sprintf@c& (0+255),b
 10385  000484                     l9111:
 10386                           
 10387                           ; BSR set to: 0
 10388  000484  0E0A               	movlw	10
 10389  000486  19E1               	xorwf	sprintf@c& (0+255),w,b
 10390  000488  B4D8               	btfsc	status,2,c
 10391  00048A  D018               	goto	u9410
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;doprnt.c: 1137: if(val < dpowers[c])
 10395                           
 10396                           ; BSR set to: 0
 10397                           
 10398                           ; BSR set to: 0
 10399  00048C  51E1               	movf	sprintf@c& (0+255),w,b
 10400  00048E  0D04               	mullw	4
 10401  000490  0E3B               	movlw	low _dpowers
 10402  000492  24F3               	addwf	prodl,w,c
 10403  000494  6EF6               	movwf	tblptrl,c
 10404  000496  0E78               	movlw	high _dpowers
 10405  000498  20F4               	addwfc	prodh,w,c
 10406  00049A  6EF7               	movwf	tblptrh,c
 10407  00049C                     	if	0	;There are less than 3 active tblptr bytes
 10408  00049C                     	endif
 10409  00049C  0009               	tblrd		*+
 10410  00049E  50F5               	movf	tablat,w,c
 10411  0004A0  5DD4               	subwf	sprintf@val& (0+255),w,b
 10412  0004A2  0009               	tblrd		*+
 10413  0004A4  50F5               	movf	tablat,w,c
 10414  0004A6  59D5               	subwfb	(sprintf@val+1)& (0+255),w,b
 10415  0004A8  0009               	tblrd		*+
 10416  0004AA  50F5               	movf	tablat,w,c
 10417  0004AC  59D6               	subwfb	(sprintf@val+2)& (0+255),w,b
 10418  0004AE  0009               	tblrd		*+
 10419  0004B0  50F5               	movf	tablat,w,c
 10420  0004B2  59D7               	subwfb	(sprintf@val+3)& (0+255),w,b
 10421  0004B4  A0D8               	btfss	status,0,c
 10422  0004B6  D002               	goto	u9410
 10423                           
 10424                           ; BSR set to: 0
 10425                           
 10426                           ; BSR set to: 0
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;doprnt.c: 1138: break;
 10430  0004B8  2BE1               	incf	sprintf@c& (0+255),f,b
 10431  0004BA  D7E4               	goto	l9111
 10432  0004BC                     u9410:
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;doprnt.c: 1175: {
 10436                           ;doprnt.c: 1188: if(flag & 0x03)
 10437                           
 10438                           ; BSR set to: 0
 10439  0004BC  0E03               	movlw	3
 10440  0004BE  15D0               	andwf	sprintf@flag& (0+255),w,b
 10441  0004C0  6FC3               	movwf	??_sprintf& (0+255),b
 10442  0004C2  0E00               	movlw	0
 10443  0004C4  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
 10444  0004C6  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10445  0004C8  51C3               	movf	??_sprintf& (0+255),w,b
 10446  0004CA  11C4               	iorwf	(??_sprintf+1)& (0+255),w,b
 10447  0004CC  B4D8               	btfsc	status,2,c
 10448  0004CE  D051               	goto	l1708
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 10452  0004D0  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10453  0004D4  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10454  0004D8  0E2D               	movlw	45
 10455  0004DA  D048               	goto	L2
 10456  0004DC                     
 10457                           ; BSR set to: 0
 10458                           ;doprnt.c: 1200: {
 10459                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 10460                           
 10461                           ; BSR set to: 0
 10462  0004DC  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10463  0004E0  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10464  0004E4  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10465  0004E8  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10466  0004EC  51E1               	movf	sprintf@c& (0+255),w,b
 10467  0004EE  0D04               	mullw	4
 10468  0004F0  0E3B               	movlw	low _dpowers
 10469  0004F2  24F3               	addwf	prodl,w,c
 10470  0004F4  6EF6               	movwf	tblptrl,c
 10471  0004F6  0E78               	movlw	high _dpowers
 10472  0004F8  20F4               	addwfc	prodh,w,c
 10473  0004FA  6EF7               	movwf	tblptrh,c
 10474  0004FC                     	if	0	;There are less than 3 active tblptr bytes
 10475  0004FC                     	endif
 10476  0004FC  0009               	tblrd		*+
 10477  0004FE  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10478  000502  0009               	tblrd		*+
 10479  000504  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10480  000508  0009               	tblrd		*+
 10481  00050A  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10482  00050E  000A               	tblrd		*-
 10483  000510  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10484  000514  EC3B  F01C         	call	___lldiv	;wreg free
 10485  000518  C018  F0DA         	movff	?___lldiv,sprintf@tmpval
 10486  00051C  C019  F0DB         	movff	?___lldiv+1,sprintf@tmpval+1
 10487  000520  C01A  F0DC         	movff	?___lldiv+2,sprintf@tmpval+2
 10488  000524  C01B  F0DD         	movff	?___lldiv+3,sprintf@tmpval+3
 10489                           
 10490                           ;doprnt.c: 1202: tmpval.vd %= 10;
 10491  000528  C0DA  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 10492  00052C  C0DB  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 10493  000530  C0DC  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 10494  000534  C0DD  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 10495  000538  0E0A               	movlw	10
 10496  00053A  0100               	movlb	0	; () banked
 10497  00053C  6FB7               	movwf	___llmod@divisor& (0+255),b
 10498  00053E  0E00               	movlw	0
 10499  000540  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10500  000542  0E00               	movlw	0
 10501  000544  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10502  000546  0E00               	movlw	0
 10503  000548  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10504  00054A  EC9C  F01D         	call	___llmod	;wreg free
 10505  00054E  C0B3  F0DA         	movff	?___llmod,sprintf@tmpval
 10506  000552  C0B4  F0DB         	movff	?___llmod+1,sprintf@tmpval+1
 10507  000556  C0B5  F0DC         	movff	?___llmod+2,sprintf@tmpval+2
 10508  00055A  C0B6  F0DD         	movff	?___llmod+3,sprintf@tmpval+3
 10509                           
 10510                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 10511  00055E  0100               	movlb	0	; () banked
 10512  000560  51DA               	movf	sprintf@tmpval& (0+255),w,b
 10513  000562  0F30               	addlw	48
 10514  000564  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10515  000568  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10516  00056C                     L2:
 10517  00056C  6EDF               	movwf	indf2,c
 10518                           
 10519                           ; BSR set to: 0
 10520  00056E  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10521  000570  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10522  000572                     l1708:
 10523                           
 10524                           ; BSR set to: 0
 10525                           
 10526                           ; BSR set to: 0
 10527  000572  07E1               	decf	sprintf@c& (0+255),f,b
 10528  000574  29E1               	incf	sprintf@c& (0+255),w,b
 10529  000576  B4D8               	btfsc	status,2,c
 10530  000578  D00C               	goto	l1711
 10531  00057A  D7B0               	goto	l1709
 10532  00057C                     l9139:
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 10536  00057C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10537  000580  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10538  000584  0E30               	movlw	48
 10539  000586  6EDF               	movwf	indf2,c
 10540                           
 10541                           ; BSR set to: 0
 10542  000588  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10543  00058A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;doprnt.c: 1209: exp--;
 10547  00058C  07D8               	decf	sprintf@exp& (0+255),f,b
 10548  00058E  A0D8               	btfss	status,0,c
 10549  000590  07D9               	decf	(sprintf@exp+1)& (0+255),f,b
 10550  000592                     l1711:
 10551                           
 10552                           ; BSR set to: 0
 10553                           
 10554                           ; BSR set to: 0
 10555  000592  BFD9               	btfsc	(sprintf@exp+1)& (0+255),7,b
 10556  000594  D005               	goto	u9440
 10557  000596  51D9               	movf	(sprintf@exp+1)& (0+255),w,b
 10558  000598  E1F1               	bnz	l9139
 10559  00059A  05D8               	decf	sprintf@exp& (0+255),w,b
 10560  00059C  B0D8               	btfsc	status,0,c
 10561  00059E  D7EE               	goto	l1712
 10562  0005A0                     u9440:
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;doprnt.c: 1210: }
 10566                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10567                           
 10568                           ; BSR set to: 0
 10569  0005A0  BFD3               	btfsc	(sprintf@prec+1)& (0+255),7,b
 10570  0005A2  D009               	goto	l1714
 10571  0005A4  51D3               	movf	(sprintf@prec+1)& (0+255),w,b
 10572  0005A6  E104               	bnz	u9450
 10573  0005A8  0E09               	movlw	9
 10574  0005AA  5DD2               	subwf	sprintf@prec& (0+255),w,b
 10575  0005AC  A0D8               	btfss	status,0,c
 10576  0005AE  D003               	goto	l1714
 10577  0005B0                     u9450:
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 10581  0005B0  0E08               	movlw	8
 10582  0005B2  6FE1               	movwf	sprintf@c& (0+255),b
 10583  0005B4  D002               	goto	l1715
 10584  0005B6                     l1714:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;doprnt.c: 1213: else
 10588                           ;doprnt.c: 1214: c = prec;
 10589  0005B6  C0D2  F0E1         	movff	sprintf@prec,sprintf@c
 10590  0005BA                     l1715:
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;doprnt.c: 1215: prec -= c;
 10594                           
 10595                           ; BSR set to: 0
 10596  0005BA  51E1               	movf	sprintf@c& (0+255),w,b
 10597  0005BC  5FD2               	subwf	sprintf@prec& (0+255),f,b
 10598  0005BE  0E00               	movlw	0
 10599  0005C0  BFE1               	btfsc	sprintf@c& (0+255),7,b
 10600  0005C2  0EFF               	movlw	255
 10601  0005C4  5BD3               	subwfb	(sprintf@prec+1)& (0+255),f,b
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;doprnt.c: 1219: if(c)
 10605  0005C6  51E1               	movf	sprintf@c& (0+255),w,b
 10606  0005C8  B4D8               	btfsc	status,2,c
 10607  0005CA  D008               	goto	l1716
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 10611  0005CC  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10612  0005D0  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10613  0005D4  0E2E               	movlw	46
 10614  0005D6  6EDF               	movwf	indf2,c
 10615                           
 10616                           ; BSR set to: 0
 10617  0005D8  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10618  0005DA  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10619  0005DC                     l1716:
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10623                           
 10624                           ; BSR set to: 0
 10625  0005DC  51E1               	movf	sprintf@c& (0+255),w,b
 10626  0005DE  EC51  F004         	call	_scale
 10627  0005E2  C072  F0C9         	movff	?_scale,_sprintf$3953
 10628  0005E6  C073  F0CA         	movff	?_scale+1,_sprintf$3953+1
 10629  0005EA  C074  F0CB         	movff	?_scale+2,_sprintf$3953+2
 10630                           
 10631                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10632  0005EE  C0DE  F069         	movff	sprintf@fval,___ftmul@f2
 10633  0005F2  C0DF  F06A         	movff	sprintf@fval+1,___ftmul@f2+1
 10634  0005F6  C0E0  F06B         	movff	sprintf@fval+2,___ftmul@f2+2
 10635  0005FA  C0C9  F066         	movff	_sprintf$3953,___ftmul@f1
 10636  0005FE  C0CA  F067         	movff	_sprintf$3953+1,___ftmul@f1+1
 10637  000602  C0CB  F068         	movff	_sprintf$3953+2,___ftmul@f1+2
 10638  000606  EC60  F016         	call	___ftmul	;wreg free
 10639  00060A  C066  F079         	movff	?___ftmul,___fttol@f1
 10640  00060E  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 10641  000612  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 10642  000616  ECE4  F015         	call	___fttol	;wreg free
 10643  00061A  C079  F0D4         	movff	?___fttol,sprintf@val
 10644  00061E  C07A  F0D5         	movff	?___fttol+1,sprintf@val+1
 10645  000622  C07B  F0D6         	movff	?___fttol+2,sprintf@val+2
 10646  000626  C07C  F0D7         	movff	?___fttol+3,sprintf@val+3
 10647                           
 10648                           ;doprnt.c: 1228: while(c--) {
 10649  00062A  D072               	goto	l1717
 10650  00062C                     
 10651                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 10652  00062C  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10653  000630  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10654  000634  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10655  000638  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10656  00063C  0100               	movlb	0	; () banked
 10657  00063E  51E1               	movf	sprintf@c& (0+255),w,b
 10658  000640  0D04               	mullw	4
 10659  000642  0E3B               	movlw	low _dpowers
 10660  000644  24F3               	addwf	prodl,w,c
 10661  000646  6EF6               	movwf	tblptrl,c
 10662  000648  0E78               	movlw	high _dpowers
 10663  00064A  20F4               	addwfc	prodh,w,c
 10664  00064C  6EF7               	movwf	tblptrh,c
 10665  00064E                     	if	0	;There are less than 3 active tblptr bytes
 10666  00064E                     	endif
 10667  00064E  0009               	tblrd		*+
 10668  000650  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10669  000654  0009               	tblrd		*+
 10670  000656  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10671  00065A  0009               	tblrd		*+
 10672  00065C  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10673  000660  000A               	tblrd		*-
 10674  000662  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10675  000666  EC3B  F01C         	call	___lldiv	;wreg free
 10676  00066A  C018  F0DA         	movff	?___lldiv,sprintf@tmpval
 10677  00066E  C019  F0DB         	movff	?___lldiv+1,sprintf@tmpval+1
 10678  000672  C01A  F0DC         	movff	?___lldiv+2,sprintf@tmpval+2
 10679  000676  C01B  F0DD         	movff	?___lldiv+3,sprintf@tmpval+3
 10680                           
 10681                           ;doprnt.c: 1230: tmpval.vd %= 10;
 10682  00067A  C0DA  F0B3         	movff	sprintf@tmpval,___llmod@dividend
 10683  00067E  C0DB  F0B4         	movff	sprintf@tmpval+1,___llmod@dividend+1
 10684  000682  C0DC  F0B5         	movff	sprintf@tmpval+2,___llmod@dividend+2
 10685  000686  C0DD  F0B6         	movff	sprintf@tmpval+3,___llmod@dividend+3
 10686  00068A  0E0A               	movlw	10
 10687  00068C  0100               	movlb	0	; () banked
 10688  00068E  6FB7               	movwf	___llmod@divisor& (0+255),b
 10689  000690  0E00               	movlw	0
 10690  000692  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10691  000694  0E00               	movlw	0
 10692  000696  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10693  000698  0E00               	movlw	0
 10694  00069A  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10695  00069C  EC9C  F01D         	call	___llmod	;wreg free
 10696  0006A0  C0B3  F0DA         	movff	?___llmod,sprintf@tmpval
 10697  0006A4  C0B4  F0DB         	movff	?___llmod+1,sprintf@tmpval+1
 10698  0006A8  C0B5  F0DC         	movff	?___llmod+2,sprintf@tmpval+2
 10699  0006AC  C0B6  F0DD         	movff	?___llmod+3,sprintf@tmpval+3
 10700                           
 10701                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 10702  0006B0  0100               	movlb	0	; () banked
 10703  0006B2  51DA               	movf	sprintf@tmpval& (0+255),w,b
 10704  0006B4  0F30               	addlw	48
 10705  0006B6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10706  0006BA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10707  0006BE  6EDF               	movwf	indf2,c
 10708                           
 10709                           ; BSR set to: 0
 10710  0006C0  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10711  0006C2  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10712                           
 10713                           ; BSR set to: 0
 10714                           ;doprnt.c: 1232: val %= dpowers[c];
 10715  0006C4  C0D4  F0B3         	movff	sprintf@val,___llmod@dividend
 10716  0006C8  C0D5  F0B4         	movff	sprintf@val+1,___llmod@dividend+1
 10717  0006CC  C0D6  F0B5         	movff	sprintf@val+2,___llmod@dividend+2
 10718  0006D0  C0D7  F0B6         	movff	sprintf@val+3,___llmod@dividend+3
 10719  0006D4  51E1               	movf	sprintf@c& (0+255),w,b
 10720  0006D6  0D04               	mullw	4
 10721  0006D8  0E3B               	movlw	low _dpowers
 10722  0006DA  24F3               	addwf	prodl,w,c
 10723  0006DC  6EF6               	movwf	tblptrl,c
 10724  0006DE  0E78               	movlw	high _dpowers
 10725  0006E0  20F4               	addwfc	prodh,w,c
 10726  0006E2  6EF7               	movwf	tblptrh,c
 10727  0006E4                     	if	0	;There are less than 3 active tblptr bytes
 10728  0006E4                     	endif
 10729  0006E4  0009               	tblrd		*+
 10730  0006E6  CFF5 F0B7          	movff	tablat,___llmod@divisor
 10731  0006EA  0009               	tblrd		*+
 10732  0006EC  CFF5 F0B8          	movff	tablat,___llmod@divisor+1
 10733  0006F0  0009               	tblrd		*+
 10734  0006F2  CFF5 F0B9          	movff	tablat,___llmod@divisor+2
 10735  0006F6  000A               	tblrd		*-
 10736  0006F8  CFF5 F0BA          	movff	tablat,___llmod@divisor+3
 10737  0006FC  EC9C  F01D         	call	___llmod	;wreg free
 10738  000700  C0B3  F0D4         	movff	?___llmod,sprintf@val
 10739  000704  C0B4  F0D5         	movff	?___llmod+1,sprintf@val+1
 10740  000708  C0B5  F0D6         	movff	?___llmod+2,sprintf@val+2
 10741  00070C  C0B6  F0D7         	movff	?___llmod+3,sprintf@val+3
 10742  000710                     l1717:
 10743  000710  0100               	movlb	0	; () banked
 10744  000712  07E1               	decf	sprintf@c& (0+255),f,b
 10745  000714  29E1               	incf	sprintf@c& (0+255),w,b
 10746  000716  B4D8               	btfsc	status,2,c
 10747  000718  D00C               	goto	l1720
 10748  00071A  D788               	goto	l1718
 10749  00071C                     
 10750                           ; BSR set to: 0
 10751                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 10752                           
 10753                           ; BSR set to: 0
 10754  00071C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10755  000720  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10756  000724  0E30               	movlw	48
 10757  000726  6EDF               	movwf	indf2,c
 10758                           
 10759                           ; BSR set to: 0
 10760  000728  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10761  00072A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;doprnt.c: 1237: prec--;
 10765  00072C  07D2               	decf	sprintf@prec& (0+255),f,b
 10766  00072E  A0D8               	btfss	status,0,c
 10767  000730  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 10768  000732                     l1720:
 10769                           
 10770                           ; BSR set to: 0
 10771                           
 10772                           ; BSR set to: 0
 10773  000732  51D2               	movf	sprintf@prec& (0+255),w,b
 10774  000734  11D3               	iorwf	(sprintf@prec+1)& (0+255),w,b
 10775  000736  B4D8               	btfsc	status,2,c
 10776  000738  D0A1               	goto	u9540
 10777  00073A  D7F0               	goto	l1721
 10778  00073C                     l1686:
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;doprnt.c: 1246: }
 10782                           ;doprnt.c: 1253: {
 10783                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10784                           
 10785                           ; BSR set to: 0
 10786  00073C  C0CE  FFD9         	movff	sprintf@ap,fsr2l
 10787  000740  C0CF  FFDA         	movff	sprintf@ap+1,fsr2h
 10788  000744  CFDE F0D4          	movff	postinc2,sprintf@val
 10789  000748  CFDD F0D5          	movff	postdec2,sprintf@val+1
 10790  00074C  0E00               	movlw	0
 10791  00074E  BFD5               	btfsc	(sprintf@val+1)& (0+255),7,b
 10792  000750  0EFF               	movlw	-1
 10793  000752  6FD6               	movwf	(sprintf@val+2)& (0+255),b
 10794  000754  6FD7               	movwf	(sprintf@val+3)& (0+255),b
 10795                           
 10796                           ; BSR set to: 0
 10797  000756  0E02               	movlw	2
 10798  000758  27CE               	addwf	sprintf@ap& (0+255),f,b
 10799  00075A  0E00               	movlw	0
 10800  00075C  23CF               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;doprnt.c: 1261: if((long)val < 0) {
 10804  00075E  AFD7               	btfss	(sprintf@val+3)& (0+255),7,b
 10805  000760  D00A               	goto	l1723
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;doprnt.c: 1262: flag |= 0x03;
 10809  000762  0E03               	movlw	3
 10810  000764  13D0               	iorwf	sprintf@flag& (0+255),f,b
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;doprnt.c: 1263: val = -val;
 10814  000766  1FD7               	comf	(sprintf@val+3)& (0+255),f,b
 10815  000768  1FD6               	comf	(sprintf@val+2)& (0+255),f,b
 10816  00076A  1FD5               	comf	(sprintf@val+1)& (0+255),f,b
 10817  00076C  6DD4               	negf	sprintf@val& (0+255),b
 10818  00076E  0E00               	movlw	0
 10819  000770  23D5               	addwfc	(sprintf@val+1)& (0+255),f,b
 10820  000772  23D6               	addwfc	(sprintf@val+2)& (0+255),f,b
 10821  000774  23D7               	addwfc	(sprintf@val+3)& (0+255),f,b
 10822  000776                     l1723:
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;doprnt.c: 1264: }
 10826                           ;doprnt.c: 1266: }
 10827                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10828                           
 10829                           ; BSR set to: 0
 10830  000776  0E01               	movlw	1
 10831  000778  6FE1               	movwf	sprintf@c& (0+255),b
 10832  00077A                     l9195:
 10833                           
 10834                           ; BSR set to: 0
 10835  00077A  0E0A               	movlw	10
 10836  00077C  19E1               	xorwf	sprintf@c& (0+255),w,b
 10837  00077E  B4D8               	btfsc	status,2,c
 10838  000780  D018               	goto	u9520
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;doprnt.c: 1306: if(val < dpowers[c])
 10842                           
 10843                           ; BSR set to: 0
 10844                           
 10845                           ; BSR set to: 0
 10846  000782  51E1               	movf	sprintf@c& (0+255),w,b
 10847  000784  0D04               	mullw	4
 10848  000786  0E3B               	movlw	low _dpowers
 10849  000788  24F3               	addwf	prodl,w,c
 10850  00078A  6EF6               	movwf	tblptrl,c
 10851  00078C  0E78               	movlw	high _dpowers
 10852  00078E  20F4               	addwfc	prodh,w,c
 10853  000790  6EF7               	movwf	tblptrh,c
 10854  000792                     	if	0	;There are less than 3 active tblptr bytes
 10855  000792                     	endif
 10856  000792  0009               	tblrd		*+
 10857  000794  50F5               	movf	tablat,w,c
 10858  000796  5DD4               	subwf	sprintf@val& (0+255),w,b
 10859  000798  0009               	tblrd		*+
 10860  00079A  50F5               	movf	tablat,w,c
 10861  00079C  59D5               	subwfb	(sprintf@val+1)& (0+255),w,b
 10862  00079E  0009               	tblrd		*+
 10863  0007A0  50F5               	movf	tablat,w,c
 10864  0007A2  59D6               	subwfb	(sprintf@val+2)& (0+255),w,b
 10865  0007A4  0009               	tblrd		*+
 10866  0007A6  50F5               	movf	tablat,w,c
 10867  0007A8  59D7               	subwfb	(sprintf@val+3)& (0+255),w,b
 10868  0007AA  A0D8               	btfss	status,0,c
 10869  0007AC  D002               	goto	u9520
 10870                           
 10871                           ; BSR set to: 0
 10872                           
 10873                           ; BSR set to: 0
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;doprnt.c: 1307: break;
 10877  0007AE  2BE1               	incf	sprintf@c& (0+255),f,b
 10878  0007B0  D7E4               	goto	l9195
 10879  0007B2                     u9520:
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;doprnt.c: 1422: {
 10883                           ;doprnt.c: 1438: if(flag & 0x03)
 10884                           
 10885                           ; BSR set to: 0
 10886  0007B2  0E03               	movlw	3
 10887  0007B4  15D0               	andwf	sprintf@flag& (0+255),w,b
 10888  0007B6  6FC3               	movwf	??_sprintf& (0+255),b
 10889  0007B8  0E00               	movlw	0
 10890  0007BA  15D1               	andwf	(sprintf@flag+1)& (0+255),w,b
 10891  0007BC  6FC4               	movwf	(??_sprintf+1)& (0+255),b
 10892  0007BE  51C3               	movf	??_sprintf& (0+255),w,b
 10893  0007C0  11C4               	iorwf	(??_sprintf+1)& (0+255),w,b
 10894  0007C2  B4D8               	btfsc	status,2,c
 10895  0007C4  D008               	goto	l1727
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10899  0007C6  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10900  0007CA  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10901  0007CE  0E2D               	movlw	45
 10902  0007D0  6EDF               	movwf	indf2,c
 10903                           
 10904                           ; BSR set to: 0
 10905  0007D2  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10906  0007D4  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10907  0007D6                     l1727:
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;doprnt.c: 1469: }
 10911                           ;doprnt.c: 1472: prec = c;
 10912                           
 10913                           ; BSR set to: 0
 10914  0007D6  51E1               	movf	sprintf@c& (0+255),w,b
 10915  0007D8  6FD2               	movwf	sprintf@prec& (0+255),b
 10916  0007DA  6BD3               	clrf	(sprintf@prec+1)& (0+255),b
 10917  0007DC  BFD2               	btfsc	sprintf@prec& (0+255),7,b
 10918  0007DE  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 10919                           
 10920                           ;doprnt.c: 1474: while(prec--) {
 10921  0007E0  D045               	goto	l1728
 10922  0007E2                     l9215:
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;doprnt.c: 1478: {
 10926                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10927  0007E2  C0D2  F0C3         	movff	sprintf@prec,??_sprintf
 10928  0007E6  C0D3  F0C4         	movff	sprintf@prec+1,??_sprintf+1
 10929  0007EA  90D8               	bcf	status,0,c
 10930  0007EC  37C3               	rlcf	??_sprintf& (0+255),f,b
 10931  0007EE  37C4               	rlcf	(??_sprintf+1)& (0+255),f,b
 10932  0007F0  90D8               	bcf	status,0,c
 10933  0007F2  37C3               	rlcf	??_sprintf& (0+255),f,b
 10934  0007F4  37C4               	rlcf	(??_sprintf+1)& (0+255),f,b
 10935  0007F6  0E3B               	movlw	low _dpowers
 10936  0007F8  25C3               	addwf	??_sprintf& (0+255),w,b
 10937  0007FA  6EF6               	movwf	tblptrl,c
 10938  0007FC  0E78               	movlw	high _dpowers
 10939  0007FE  21C4               	addwfc	(??_sprintf+1)& (0+255),w,b
 10940  000800  6EF7               	movwf	tblptrh,c
 10941  000802                     	if	0	;There are less than 3 active tblptr bytes
 10942  000802                     	endif
 10943  000802  0009               	tblrd		*+
 10944  000804  CFF5 F01C          	movff	tablat,___lldiv@divisor
 10945  000808  0009               	tblrd		*+
 10946  00080A  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
 10947  00080E  0009               	tblrd		*+
 10948  000810  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
 10949  000814  000A               	tblrd		*-
 10950  000816  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
 10951  00081A  C0D4  F018         	movff	sprintf@val,___lldiv@dividend
 10952  00081E  C0D5  F019         	movff	sprintf@val+1,___lldiv@dividend+1
 10953  000822  C0D6  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
 10954  000826  C0D7  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
 10955  00082A  EC3B  F01C         	call	___lldiv	;wreg free
 10956  00082E  C018  F0B3         	movff	?___lldiv,___llmod@dividend
 10957  000832  C019  F0B4         	movff	?___lldiv+1,___llmod@dividend+1
 10958  000836  C01A  F0B5         	movff	?___lldiv+2,___llmod@dividend+2
 10959  00083A  C01B  F0B6         	movff	?___lldiv+3,___llmod@dividend+3
 10960  00083E  0E0A               	movlw	10
 10961  000840  0100               	movlb	0	; () banked
 10962  000842  6FB7               	movwf	___llmod@divisor& (0+255),b
 10963  000844  0E00               	movlw	0
 10964  000846  6FB8               	movwf	(___llmod@divisor+1)& (0+255),b
 10965  000848  0E00               	movlw	0
 10966  00084A  6FB9               	movwf	(___llmod@divisor+2)& (0+255),b
 10967  00084C  0E00               	movlw	0
 10968  00084E  6FBA               	movwf	(___llmod@divisor+3)& (0+255),b
 10969  000850  EC9C  F01D         	call	___llmod	;wreg free
 10970  000854  0100               	movlb	0	; () banked
 10971  000856  51B3               	movf	?___llmod& (0+255),w,b
 10972  000858  0F30               	addlw	48
 10973  00085A  6FE1               	movwf	sprintf@c& (0+255),b
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;doprnt.c: 1523: }
 10977                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10978  00085C  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 10979  000860  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 10980  000864  C0E1  FFDF         	movff	sprintf@c,indf2
 10981                           
 10982                           ; BSR set to: 0
 10983  000868  4BBC               	infsnz	sprintf@sp& (0+255),f,b
 10984  00086A  2BBD               	incf	(sprintf@sp+1)& (0+255),f,b
 10985  00086C                     l1728:
 10986                           
 10987                           ; BSR set to: 0
 10988                           
 10989                           ; BSR set to: 0
 10990  00086C  07D2               	decf	sprintf@prec& (0+255),f,b
 10991  00086E  A0D8               	btfss	status,0,c
 10992  000870  07D3               	decf	(sprintf@prec+1)& (0+255),f,b
 10993  000872  29D2               	incf	sprintf@prec& (0+255),w,b
 10994  000874  E1B6               	bnz	l9215
 10995  000876  29D3               	incf	(sprintf@prec+1)& (0+255),w,b
 10996  000878  A4D8               	btfss	status,2,c
 10997  00087A  D7B3               	goto	l1729
 10998  00087C                     u9540:
 10999                           
 11000                           ; BSR set to: 0
 11001                           
 11002                           ; BSR set to: 0
 11003                           
 11004                           ; BSR set to: 0
 11005  00087C  C0BE  FFF6         	movff	sprintf@f,tblptrl
 11006  000880  C0BF  FFF7         	movff	sprintf@f+1,tblptrh
 11007  000884  4BBE               	infsnz	sprintf@f& (0+255),f,b
 11008  000886  2BBF               	incf	(sprintf@f+1)& (0+255),f,b
 11009  000888                     	if	0	;tblptru may be non-zero
 11010  000888                     	endif
 11011  000888                     	if	0	;tblptru may be non-zero
 11012  000888                     	endif
 11013  000888  0008               	tblrd		*
 11014  00088A  CFF5 F0E1          	movff	tablat,sprintf@c
 11015  00088E  51E1               	movf	sprintf@c& (0+255),w,b
 11016  000890  A4D8               	btfss	status,2,c
 11017  000892  D42C               	goto	l1671
 11018  000894                     u9550:
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;doprnt.c: 1538: *sp = 0;
 11022                           
 11023                           ; BSR set to: 0
 11024                           
 11025                           ;doprnt.c: 1525: }
 11026                           ;doprnt.c: 1533: }
 11027                           ;doprnt.c: 1535: alldone:
 11028                           
 11029                           ; BSR set to: 0
 11030  000894  C0BC  FFD9         	movff	sprintf@sp,fsr2l
 11031  000898  C0BD  FFDA         	movff	sprintf@sp+1,fsr2h
 11032  00089C  0E00               	movlw	0
 11033  00089E  6EDF               	movwf	indf2,c
 11034  0008A0  0012               	return	
 11035  0008A2                     __end_of_sprintf:
 11036                           	opt stack 0
 11037                           tosu	equ	0xFFF
 11038                           tosh	equ	0xFFE
 11039                           tosl	equ	0xFFD
 11040                           pclath	equ	0xFFA
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           postinc0	equ	0xFEE
 11050                           wreg	equ	0xFE8
 11051                           indf1	equ	0xFE7
 11052                           postdec1	equ	0xFE5
 11053                           fsr1h	equ	0xFE2
 11054                           fsr1l	equ	0xFE1
 11055                           indf2	equ	0xFDF
 11056                           postinc2	equ	0xFDE
 11057                           postdec2	equ	0xFDD
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _scale *****************
 11063 ;; Defined at:
 11064 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  scl             1    wreg     char 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  scl             1   24[BANK0 ] char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  3   18[BANK0 ] char 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11078 ;;      Params:         0       3       0       0       0       0       0
 11079 ;;      Locals:         0       4       0       0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0
 11081 ;;      Totals:         0       7       0       0       0       0       0
 11082 ;;Total ram usage:        7 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    5
 11085 ;; This function calls:
 11086 ;;		___awdiv
 11087 ;;		___awmod
 11088 ;;		___ftmul
 11089 ;;		___wmul
 11090 ;; This function is called by:
 11091 ;;		_sprintf
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           	psect	text35
 11096  0008A2                     __ptext35:
 11097                           	opt stack 0
 11098  0008A2                     _scale:
 11099                           	opt stack 23
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;incstack = 0
 11103                           ;scale@scl stored from wreg
 11104  0008A2  0100               	movlb	0	; () banked
 11105  0008A4  6F78               	movwf	scale@scl& (0+255),b
 11106                           
 11107                           ;doprnt.c: 428: if(scl < 0) {
 11108  0008A6  0100               	movlb	0	; () banked
 11109  0008A8  AF78               	btfss	scale@scl& (0+255),7,b
 11110  0008AA  D106               	goto	l1660
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;doprnt.c: 429: scl = -scl;
 11114  0008AC  6D78               	negf	scale@scl& (0+255),b
 11115                           
 11116                           ;doprnt.c: 430: if(scl>=110)
 11117  0008AE  5178               	movf	scale@scl& (0+255),w,b
 11118  0008B0  0A80               	xorlw	128
 11119  0008B2  0F12               	addlw	-238
 11120  0008B4  A0D8               	btfss	status,0,c
 11121  0008B6  D093               	goto	l1661
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11125  0008B8  0E00               	movlw	0
 11126  0008BA  6E29               	movwf	___wmul@multiplicand+1,c
 11127  0008BC  0E03               	movlw	3
 11128  0008BE  6E28               	movwf	___wmul@multiplicand,c
 11129  0008C0  0E00               	movlw	0
 11130  0008C2  6E21               	movwf	___awdiv@divisor+1,c
 11131  0008C4  0E0A               	movlw	10
 11132  0008C6  6E20               	movwf	___awdiv@divisor,c
 11133  0008C8  0E00               	movlw	0
 11134  0008CA  6E1B               	movwf	___awmod@divisor+1,c
 11135  0008CC  0E64               	movlw	100
 11136  0008CE  6E1A               	movwf	___awmod@divisor,c
 11137  0008D0  5178               	movf	scale@scl& (0+255),w,b
 11138  0008D2  6E18               	movwf	___awmod@dividend,c
 11139  0008D4  6A19               	clrf	___awmod@dividend+1,c
 11140  0008D6  BE18               	btfsc	___awmod@dividend,7,c
 11141  0008D8  0619               	decf	___awmod@dividend+1,f,c
 11142  0008DA  EC2D  F01D         	call	___awmod	;wreg free
 11143  0008DE  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11144  0008E2  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11145  0008E6  ECF9  F01B         	call	___awdiv	;wreg free
 11146  0008EA  0E09               	movlw	9
 11147  0008EC  241E               	addwf	?___awdiv,w,c
 11148  0008EE  6E26               	movwf	___wmul@multiplier,c
 11149  0008F0  0E00               	movlw	0
 11150  0008F2  201F               	addwfc	?___awdiv+1,w,c
 11151  0008F4  6E27               	movwf	___wmul@multiplier+1,c
 11152  0008F6  ECCD  F021         	call	___wmul	;wreg free
 11153  0008FA  0E8A               	movlw	low __npowers_
 11154  0008FC  2426               	addwf	?___wmul,w,c
 11155  0008FE  6EF6               	movwf	tblptrl,c
 11156  000900  0E78               	movlw	high __npowers_
 11157  000902  2027               	addwfc	?___wmul+1,w,c
 11158  000904  6EF7               	movwf	tblptrh,c
 11159  000906                     	if	0	;There are less than 3 active tblptr bytes
 11160  000906                     	endif
 11161  000906  0009               	tblrd		*+
 11162  000908  CFF5 F069          	movff	tablat,___ftmul@f2
 11163  00090C  0009               	tblrd		*+
 11164  00090E  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11165  000912  000A               	tblrd		*-
 11166  000914  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11167  000918  0E00               	movlw	0
 11168  00091A  6E21               	movwf	___awdiv@divisor+1,c
 11169  00091C  0E64               	movlw	100
 11170  00091E  6E20               	movwf	___awdiv@divisor,c
 11171  000920  0100               	movlb	0	; () banked
 11172  000922  5178               	movf	scale@scl& (0+255),w,b
 11173  000924  6E1E               	movwf	___awdiv@dividend,c
 11174  000926  6A1F               	clrf	___awdiv@dividend+1,c
 11175  000928  BE1E               	btfsc	___awdiv@dividend,7,c
 11176  00092A  061F               	decf	___awdiv@dividend+1,f,c
 11177  00092C  ECF9  F01B         	call	___awdiv	;wreg free
 11178  000930  0E12               	movlw	18
 11179  000932  241E               	addwf	?___awdiv,w,c
 11180  000934  6E26               	movwf	___wmul@multiplier,c
 11181  000936  0E00               	movlw	0
 11182  000938  201F               	addwfc	?___awdiv+1,w,c
 11183  00093A  6E27               	movwf	___wmul@multiplier+1,c
 11184  00093C  0E00               	movlw	0
 11185  00093E  6E29               	movwf	___wmul@multiplicand+1,c
 11186  000940  0E03               	movlw	3
 11187  000942  6E28               	movwf	___wmul@multiplicand,c
 11188  000944  ECCD  F021         	call	___wmul	;wreg free
 11189  000948  0E8A               	movlw	low __npowers_
 11190  00094A  2426               	addwf	?___wmul,w,c
 11191  00094C  6EF6               	movwf	tblptrl,c
 11192  00094E  0E78               	movlw	high __npowers_
 11193  000950  2027               	addwfc	?___wmul+1,w,c
 11194  000952  6EF7               	movwf	tblptrh,c
 11195  000954                     	if	0	;There are less than 3 active tblptr bytes
 11196  000954                     	endif
 11197  000954  0009               	tblrd		*+
 11198  000956  CFF5 F066          	movff	tablat,___ftmul@f1
 11199  00095A  0009               	tblrd		*+
 11200  00095C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11201  000960  000A               	tblrd		*-
 11202  000962  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11203  000966  EC60  F016         	call	___ftmul	;wreg free
 11204  00096A  C066  F075         	movff	?___ftmul,_scale$3952
 11205  00096E  C067  F076         	movff	?___ftmul+1,_scale$3952+1
 11206  000972  C068  F077         	movff	?___ftmul+2,_scale$3952+2
 11207                           
 11208                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11209  000976  C075  F066         	movff	_scale$3952,___ftmul@f1
 11210  00097A  C076  F067         	movff	_scale$3952+1,___ftmul@f1+1
 11211  00097E  C077  F068         	movff	_scale$3952+2,___ftmul@f1+2
 11212  000982  0E00               	movlw	0
 11213  000984  6E29               	movwf	___wmul@multiplicand+1,c
 11214  000986  0E03               	movlw	3
 11215  000988  6E28               	movwf	___wmul@multiplicand,c
 11216  00098A  0E00               	movlw	0
 11217  00098C  6E1B               	movwf	___awmod@divisor+1,c
 11218  00098E  0E0A               	movlw	10
 11219  000990  6E1A               	movwf	___awmod@divisor,c
 11220  000992  0100               	movlb	0	; () banked
 11221  000994  5178               	movf	scale@scl& (0+255),w,b
 11222  000996  6E18               	movwf	___awmod@dividend,c
 11223  000998  6A19               	clrf	___awmod@dividend+1,c
 11224  00099A  BE18               	btfsc	___awmod@dividend,7,c
 11225  00099C  0619               	decf	___awmod@dividend+1,f,c
 11226  00099E  EC2D  F01D         	call	___awmod	;wreg free
 11227  0009A2  C018  F026         	movff	?___awmod,___wmul@multiplier
 11228  0009A6  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11229  0009AA  ECCD  F021         	call	___wmul	;wreg free
 11230  0009AE  0E8A               	movlw	low __npowers_
 11231  0009B0  2426               	addwf	?___wmul,w,c
 11232  0009B2  6EF6               	movwf	tblptrl,c
 11233  0009B4  0E78               	movlw	high __npowers_
 11234  0009B6  2027               	addwfc	?___wmul+1,w,c
 11235  0009B8  6EF7               	movwf	tblptrh,c
 11236  0009BA                     	if	0	;There are less than 3 active tblptr bytes
 11237  0009BA                     	endif
 11238  0009BA  0009               	tblrd		*+
 11239  0009BC  CFF5 F069          	movff	tablat,___ftmul@f2
 11240  0009C0  0009               	tblrd		*+
 11241  0009C2  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11242  0009C6  000A               	tblrd		*-
 11243  0009C8  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11244  0009CC  EC60  F016         	call	___ftmul	;wreg free
 11245  0009D0  C066  F072         	movff	?___ftmul,?_scale
 11246  0009D4  C067  F073         	movff	?___ftmul+1,?_scale+1
 11247  0009D8  C068  F074         	movff	?___ftmul+2,?_scale+2
 11248  0009DC  0012               	return	
 11249  0009DE                     l1661:
 11250                           
 11251                           ;doprnt.c: 432: else if(scl > 10)
 11252  0009DE  0100               	movlb	0	; () banked
 11253  0009E0  5178               	movf	scale@scl& (0+255),w,b
 11254  0009E2  0A80               	xorlw	128
 11255  0009E4  0F75               	addlw	-139
 11256  0009E6  A0D8               	btfss	status,0,c
 11257  0009E8  D054               	goto	l1664
 11258                           
 11259                           ; BSR set to: 0
 11260                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 11261  0009EA  0E00               	movlw	0
 11262  0009EC  6E21               	movwf	___awdiv@divisor+1,c
 11263  0009EE  0E0A               	movlw	10
 11264  0009F0  6E20               	movwf	___awdiv@divisor,c
 11265  0009F2  5178               	movf	scale@scl& (0+255),w,b
 11266  0009F4  6E1E               	movwf	___awdiv@dividend,c
 11267  0009F6  6A1F               	clrf	___awdiv@dividend+1,c
 11268  0009F8  BE1E               	btfsc	___awdiv@dividend,7,c
 11269  0009FA  061F               	decf	___awdiv@dividend+1,f,c
 11270  0009FC  ECF9  F01B         	call	___awdiv	;wreg free
 11271  000A00  0E09               	movlw	9
 11272  000A02  241E               	addwf	?___awdiv,w,c
 11273  000A04  6E26               	movwf	___wmul@multiplier,c
 11274  000A06  0E00               	movlw	0
 11275  000A08  201F               	addwfc	?___awdiv+1,w,c
 11276  000A0A  6E27               	movwf	___wmul@multiplier+1,c
 11277  000A0C  0E00               	movlw	0
 11278  000A0E  6E29               	movwf	___wmul@multiplicand+1,c
 11279  000A10  0E03               	movlw	3
 11280  000A12  6E28               	movwf	___wmul@multiplicand,c
 11281  000A14  ECCD  F021         	call	___wmul	;wreg free
 11282  000A18  0E8A               	movlw	low __npowers_
 11283  000A1A  2426               	addwf	?___wmul,w,c
 11284  000A1C  6EF6               	movwf	tblptrl,c
 11285  000A1E  0E78               	movlw	high __npowers_
 11286  000A20  2027               	addwfc	?___wmul+1,w,c
 11287  000A22  6EF7               	movwf	tblptrh,c
 11288  000A24                     	if	0	;There are less than 3 active tblptr bytes
 11289  000A24                     	endif
 11290  000A24  0009               	tblrd		*+
 11291  000A26  CFF5 F066          	movff	tablat,___ftmul@f1
 11292  000A2A  0009               	tblrd		*+
 11293  000A2C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11294  000A30  000A               	tblrd		*-
 11295  000A32  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11296  000A36  0E00               	movlw	0
 11297  000A38  6E29               	movwf	___wmul@multiplicand+1,c
 11298  000A3A  0E03               	movlw	3
 11299  000A3C  6E28               	movwf	___wmul@multiplicand,c
 11300  000A3E  0E00               	movlw	0
 11301  000A40  6E1B               	movwf	___awmod@divisor+1,c
 11302  000A42  0E0A               	movlw	10
 11303  000A44  6E1A               	movwf	___awmod@divisor,c
 11304  000A46  0100               	movlb	0	; () banked
 11305  000A48  5178               	movf	scale@scl& (0+255),w,b
 11306  000A4A  6E18               	movwf	___awmod@dividend,c
 11307  000A4C  6A19               	clrf	___awmod@dividend+1,c
 11308  000A4E  BE18               	btfsc	___awmod@dividend,7,c
 11309  000A50  0619               	decf	___awmod@dividend+1,f,c
 11310  000A52  EC2D  F01D         	call	___awmod	;wreg free
 11311  000A56  C018  F026         	movff	?___awmod,___wmul@multiplier
 11312  000A5A  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11313  000A5E  ECCD  F021         	call	___wmul	;wreg free
 11314  000A62  0E8A               	movlw	low __npowers_
 11315  000A64  2426               	addwf	?___wmul,w,c
 11316  000A66  6EF6               	movwf	tblptrl,c
 11317  000A68  0E78               	movlw	high __npowers_
 11318  000A6A  2027               	addwfc	?___wmul+1,w,c
 11319  000A6C  6EF7               	movwf	tblptrh,c
 11320  000A6E                     	if	0	;There are less than 3 active tblptr bytes
 11321  000A6E                     	endif
 11322  000A6E  0009               	tblrd		*+
 11323  000A70  CFF5 F069          	movff	tablat,___ftmul@f2
 11324  000A74  0009               	tblrd		*+
 11325  000A76  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11326  000A7A  000A               	tblrd		*-
 11327  000A7C  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11328  000A80  EC60  F016         	call	___ftmul	;wreg free
 11329  000A84  C066  F072         	movff	?___ftmul,?_scale
 11330  000A88  C067  F073         	movff	?___ftmul+1,?_scale+1
 11331  000A8C  C068  F074         	movff	?___ftmul+2,?_scale+2
 11332  000A90  0012               	return	
 11333  000A92                     l1664:
 11334                           
 11335                           ;doprnt.c: 434: return _npowers_[scl];
 11336  000A92  0100               	movlb	0	; () banked
 11337  000A94  5178               	movf	scale@scl& (0+255),w,b
 11338  000A96  0D03               	mullw	3
 11339  000A98  0E8A               	movlw	low __npowers_
 11340  000A9A  24F3               	addwf	prodl,w,c
 11341  000A9C  6EF6               	movwf	tblptrl,c
 11342  000A9E  0E78               	movlw	high __npowers_
 11343  000AA0  20F4               	addwfc	prodh,w,c
 11344  000AA2  6EF7               	movwf	tblptrh,c
 11345  000AA4                     	if	0	;There are less than 3 active tblptr bytes
 11346  000AA4                     	endif
 11347  000AA4  0009               	tblrd		*+
 11348  000AA6  CFF5 F072          	movff	tablat,?_scale
 11349  000AAA  0009               	tblrd		*+
 11350  000AAC  CFF5 F073          	movff	tablat,?_scale+1
 11351  000AB0  000A               	tblrd		*-
 11352  000AB2  CFF5 F074          	movff	tablat,?_scale+2
 11353                           
 11354                           ; BSR set to: 0
 11355  000AB6  0012               	return	
 11356  000AB8                     l1660:
 11357                           
 11358                           ; BSR set to: 0
 11359                           ;doprnt.c: 435: }
 11360                           ;doprnt.c: 436: if(scl>=110)
 11361                           
 11362                           ; BSR set to: 0
 11363  000AB8  5178               	movf	scale@scl& (0+255),w,b
 11364  000ABA  0A80               	xorlw	128
 11365  000ABC  0F12               	addlw	-238
 11366  000ABE  A0D8               	btfss	status,0,c
 11367  000AC0  D093               	goto	l1665
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11371  000AC2  0E00               	movlw	0
 11372  000AC4  6E29               	movwf	___wmul@multiplicand+1,c
 11373  000AC6  0E03               	movlw	3
 11374  000AC8  6E28               	movwf	___wmul@multiplicand,c
 11375  000ACA  0E00               	movlw	0
 11376  000ACC  6E21               	movwf	___awdiv@divisor+1,c
 11377  000ACE  0E0A               	movlw	10
 11378  000AD0  6E20               	movwf	___awdiv@divisor,c
 11379  000AD2  0E00               	movlw	0
 11380  000AD4  6E1B               	movwf	___awmod@divisor+1,c
 11381  000AD6  0E64               	movlw	100
 11382  000AD8  6E1A               	movwf	___awmod@divisor,c
 11383  000ADA  5178               	movf	scale@scl& (0+255),w,b
 11384  000ADC  6E18               	movwf	___awmod@dividend,c
 11385  000ADE  6A19               	clrf	___awmod@dividend+1,c
 11386  000AE0  BE18               	btfsc	___awmod@dividend,7,c
 11387  000AE2  0619               	decf	___awmod@dividend+1,f,c
 11388  000AE4  EC2D  F01D         	call	___awmod	;wreg free
 11389  000AE8  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11390  000AEC  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11391  000AF0  ECF9  F01B         	call	___awdiv	;wreg free
 11392  000AF4  0E09               	movlw	9
 11393  000AF6  241E               	addwf	?___awdiv,w,c
 11394  000AF8  6E26               	movwf	___wmul@multiplier,c
 11395  000AFA  0E00               	movlw	0
 11396  000AFC  201F               	addwfc	?___awdiv+1,w,c
 11397  000AFE  6E27               	movwf	___wmul@multiplier+1,c
 11398  000B00  ECCD  F021         	call	___wmul	;wreg free
 11399  000B04  0E63               	movlw	low __powers_
 11400  000B06  2426               	addwf	?___wmul,w,c
 11401  000B08  6EF6               	movwf	tblptrl,c
 11402  000B0A  0E78               	movlw	high __powers_
 11403  000B0C  2027               	addwfc	?___wmul+1,w,c
 11404  000B0E  6EF7               	movwf	tblptrh,c
 11405  000B10                     	if	0	;There are less than 3 active tblptr bytes
 11406  000B10                     	endif
 11407  000B10  0009               	tblrd		*+
 11408  000B12  CFF5 F069          	movff	tablat,___ftmul@f2
 11409  000B16  0009               	tblrd		*+
 11410  000B18  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11411  000B1C  000A               	tblrd		*-
 11412  000B1E  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11413  000B22  0E00               	movlw	0
 11414  000B24  6E21               	movwf	___awdiv@divisor+1,c
 11415  000B26  0E64               	movlw	100
 11416  000B28  6E20               	movwf	___awdiv@divisor,c
 11417  000B2A  0100               	movlb	0	; () banked
 11418  000B2C  5178               	movf	scale@scl& (0+255),w,b
 11419  000B2E  6E1E               	movwf	___awdiv@dividend,c
 11420  000B30  6A1F               	clrf	___awdiv@dividend+1,c
 11421  000B32  BE1E               	btfsc	___awdiv@dividend,7,c
 11422  000B34  061F               	decf	___awdiv@dividend+1,f,c
 11423  000B36  ECF9  F01B         	call	___awdiv	;wreg free
 11424  000B3A  0E12               	movlw	18
 11425  000B3C  241E               	addwf	?___awdiv,w,c
 11426  000B3E  6E26               	movwf	___wmul@multiplier,c
 11427  000B40  0E00               	movlw	0
 11428  000B42  201F               	addwfc	?___awdiv+1,w,c
 11429  000B44  6E27               	movwf	___wmul@multiplier+1,c
 11430  000B46  0E00               	movlw	0
 11431  000B48  6E29               	movwf	___wmul@multiplicand+1,c
 11432  000B4A  0E03               	movlw	3
 11433  000B4C  6E28               	movwf	___wmul@multiplicand,c
 11434  000B4E  ECCD  F021         	call	___wmul	;wreg free
 11435  000B52  0E63               	movlw	low __powers_
 11436  000B54  2426               	addwf	?___wmul,w,c
 11437  000B56  6EF6               	movwf	tblptrl,c
 11438  000B58  0E78               	movlw	high __powers_
 11439  000B5A  2027               	addwfc	?___wmul+1,w,c
 11440  000B5C  6EF7               	movwf	tblptrh,c
 11441  000B5E                     	if	0	;There are less than 3 active tblptr bytes
 11442  000B5E                     	endif
 11443  000B5E  0009               	tblrd		*+
 11444  000B60  CFF5 F066          	movff	tablat,___ftmul@f1
 11445  000B64  0009               	tblrd		*+
 11446  000B66  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11447  000B6A  000A               	tblrd		*-
 11448  000B6C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11449  000B70  EC60  F016         	call	___ftmul	;wreg free
 11450  000B74  C066  F075         	movff	?___ftmul,_scale$3952
 11451  000B78  C067  F076         	movff	?___ftmul+1,_scale$3952+1
 11452  000B7C  C068  F077         	movff	?___ftmul+2,_scale$3952+2
 11453                           
 11454                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11455  000B80  C075  F066         	movff	_scale$3952,___ftmul@f1
 11456  000B84  C076  F067         	movff	_scale$3952+1,___ftmul@f1+1
 11457  000B88  C077  F068         	movff	_scale$3952+2,___ftmul@f1+2
 11458  000B8C  0E00               	movlw	0
 11459  000B8E  6E29               	movwf	___wmul@multiplicand+1,c
 11460  000B90  0E03               	movlw	3
 11461  000B92  6E28               	movwf	___wmul@multiplicand,c
 11462  000B94  0E00               	movlw	0
 11463  000B96  6E1B               	movwf	___awmod@divisor+1,c
 11464  000B98  0E0A               	movlw	10
 11465  000B9A  6E1A               	movwf	___awmod@divisor,c
 11466  000B9C  0100               	movlb	0	; () banked
 11467  000B9E  5178               	movf	scale@scl& (0+255),w,b
 11468  000BA0  6E18               	movwf	___awmod@dividend,c
 11469  000BA2  6A19               	clrf	___awmod@dividend+1,c
 11470  000BA4  BE18               	btfsc	___awmod@dividend,7,c
 11471  000BA6  0619               	decf	___awmod@dividend+1,f,c
 11472  000BA8  EC2D  F01D         	call	___awmod	;wreg free
 11473  000BAC  C018  F026         	movff	?___awmod,___wmul@multiplier
 11474  000BB0  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11475  000BB4  ECCD  F021         	call	___wmul	;wreg free
 11476  000BB8  0E63               	movlw	low __powers_
 11477  000BBA  2426               	addwf	?___wmul,w,c
 11478  000BBC  6EF6               	movwf	tblptrl,c
 11479  000BBE  0E78               	movlw	high __powers_
 11480  000BC0  2027               	addwfc	?___wmul+1,w,c
 11481  000BC2  6EF7               	movwf	tblptrh,c
 11482  000BC4                     	if	0	;There are less than 3 active tblptr bytes
 11483  000BC4                     	endif
 11484  000BC4  0009               	tblrd		*+
 11485  000BC6  CFF5 F069          	movff	tablat,___ftmul@f2
 11486  000BCA  0009               	tblrd		*+
 11487  000BCC  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11488  000BD0  000A               	tblrd		*-
 11489  000BD2  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11490  000BD6  EC60  F016         	call	___ftmul	;wreg free
 11491  000BDA  C066  F072         	movff	?___ftmul,?_scale
 11492  000BDE  C067  F073         	movff	?___ftmul+1,?_scale+1
 11493  000BE2  C068  F074         	movff	?___ftmul+2,?_scale+2
 11494  000BE6  0012               	return	
 11495  000BE8                     l1665:
 11496                           
 11497                           ;doprnt.c: 438: else if(scl > 10)
 11498  000BE8  0100               	movlb	0	; () banked
 11499  000BEA  5178               	movf	scale@scl& (0+255),w,b
 11500  000BEC  0A80               	xorlw	128
 11501  000BEE  0F75               	addlw	-139
 11502  000BF0  A0D8               	btfss	status,0,c
 11503  000BF2  D054               	goto	l1667
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 11507  000BF4  0E00               	movlw	0
 11508  000BF6  6E21               	movwf	___awdiv@divisor+1,c
 11509  000BF8  0E0A               	movlw	10
 11510  000BFA  6E20               	movwf	___awdiv@divisor,c
 11511  000BFC  5178               	movf	scale@scl& (0+255),w,b
 11512  000BFE  6E1E               	movwf	___awdiv@dividend,c
 11513  000C00  6A1F               	clrf	___awdiv@dividend+1,c
 11514  000C02  BE1E               	btfsc	___awdiv@dividend,7,c
 11515  000C04  061F               	decf	___awdiv@dividend+1,f,c
 11516  000C06  ECF9  F01B         	call	___awdiv	;wreg free
 11517  000C0A  0E09               	movlw	9
 11518  000C0C  241E               	addwf	?___awdiv,w,c
 11519  000C0E  6E26               	movwf	___wmul@multiplier,c
 11520  000C10  0E00               	movlw	0
 11521  000C12  201F               	addwfc	?___awdiv+1,w,c
 11522  000C14  6E27               	movwf	___wmul@multiplier+1,c
 11523  000C16  0E00               	movlw	0
 11524  000C18  6E29               	movwf	___wmul@multiplicand+1,c
 11525  000C1A  0E03               	movlw	3
 11526  000C1C  6E28               	movwf	___wmul@multiplicand,c
 11527  000C1E  ECCD  F021         	call	___wmul	;wreg free
 11528  000C22  0E63               	movlw	low __powers_
 11529  000C24  2426               	addwf	?___wmul,w,c
 11530  000C26  6EF6               	movwf	tblptrl,c
 11531  000C28  0E78               	movlw	high __powers_
 11532  000C2A  2027               	addwfc	?___wmul+1,w,c
 11533  000C2C  6EF7               	movwf	tblptrh,c
 11534  000C2E                     	if	0	;There are less than 3 active tblptr bytes
 11535  000C2E                     	endif
 11536  000C2E  0009               	tblrd		*+
 11537  000C30  CFF5 F066          	movff	tablat,___ftmul@f1
 11538  000C34  0009               	tblrd		*+
 11539  000C36  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11540  000C3A  000A               	tblrd		*-
 11541  000C3C  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11542  000C40  0E00               	movlw	0
 11543  000C42  6E29               	movwf	___wmul@multiplicand+1,c
 11544  000C44  0E03               	movlw	3
 11545  000C46  6E28               	movwf	___wmul@multiplicand,c
 11546  000C48  0E00               	movlw	0
 11547  000C4A  6E1B               	movwf	___awmod@divisor+1,c
 11548  000C4C  0E0A               	movlw	10
 11549  000C4E  6E1A               	movwf	___awmod@divisor,c
 11550  000C50  0100               	movlb	0	; () banked
 11551  000C52  5178               	movf	scale@scl& (0+255),w,b
 11552  000C54  6E18               	movwf	___awmod@dividend,c
 11553  000C56  6A19               	clrf	___awmod@dividend+1,c
 11554  000C58  BE18               	btfsc	___awmod@dividend,7,c
 11555  000C5A  0619               	decf	___awmod@dividend+1,f,c
 11556  000C5C  EC2D  F01D         	call	___awmod	;wreg free
 11557  000C60  C018  F026         	movff	?___awmod,___wmul@multiplier
 11558  000C64  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11559  000C68  ECCD  F021         	call	___wmul	;wreg free
 11560  000C6C  0E63               	movlw	low __powers_
 11561  000C6E  2426               	addwf	?___wmul,w,c
 11562  000C70  6EF6               	movwf	tblptrl,c
 11563  000C72  0E78               	movlw	high __powers_
 11564  000C74  2027               	addwfc	?___wmul+1,w,c
 11565  000C76  6EF7               	movwf	tblptrh,c
 11566  000C78                     	if	0	;There are less than 3 active tblptr bytes
 11567  000C78                     	endif
 11568  000C78  0009               	tblrd		*+
 11569  000C7A  CFF5 F069          	movff	tablat,___ftmul@f2
 11570  000C7E  0009               	tblrd		*+
 11571  000C80  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11572  000C84  000A               	tblrd		*-
 11573  000C86  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11574  000C8A  EC60  F016         	call	___ftmul	;wreg free
 11575  000C8E  C066  F072         	movff	?___ftmul,?_scale
 11576  000C92  C067  F073         	movff	?___ftmul+1,?_scale+1
 11577  000C96  C068  F074         	movff	?___ftmul+2,?_scale+2
 11578  000C9A  0012               	return	
 11579  000C9C                     l1667:
 11580                           
 11581                           ;doprnt.c: 440: return _powers_[scl];
 11582  000C9C  0100               	movlb	0	; () banked
 11583  000C9E  5178               	movf	scale@scl& (0+255),w,b
 11584  000CA0  0D03               	mullw	3
 11585  000CA2  0E63               	movlw	low __powers_
 11586  000CA4  24F3               	addwf	prodl,w,c
 11587  000CA6  6EF6               	movwf	tblptrl,c
 11588  000CA8  0E78               	movlw	high __powers_
 11589  000CAA  20F4               	addwfc	prodh,w,c
 11590  000CAC  6EF7               	movwf	tblptrh,c
 11591  000CAE                     	if	0	;There are less than 3 active tblptr bytes
 11592  000CAE                     	endif
 11593  000CAE  0009               	tblrd		*+
 11594  000CB0  CFF5 F072          	movff	tablat,?_scale
 11595  000CB4  0009               	tblrd		*+
 11596  000CB6  CFF5 F073          	movff	tablat,?_scale+1
 11597  000CBA  000A               	tblrd		*-
 11598  000CBC  CFF5 F074          	movff	tablat,?_scale+2
 11599  000CC0  0012               	return	
 11600  000CC2                     __end_of_scale:
 11601                           	opt stack 0
 11602                           tosu	equ	0xFFF
 11603                           tosh	equ	0xFFE
 11604                           tosl	equ	0xFFD
 11605                           pclath	equ	0xFFA
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           indf1	equ	0xFE7
 11617                           postdec1	equ	0xFE5
 11618                           fsr1h	equ	0xFE2
 11619                           fsr1l	equ	0xFE1
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           fsr2h	equ	0xFDA
 11624                           fsr2l	equ	0xFD9
 11625                           status	equ	0xFD8
 11626                           
 11627 ;; *************** function _fround *****************
 11628 ;; Defined at:
 11629 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;  prec            1    wreg     unsigned char 
 11632 ;; Auto vars:     Size  Location     Type
 11633 ;;  prec            1   27[BANK0 ] unsigned char 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  3   18[BANK0 ] unsigned char 
 11636 ;; Registers used:
 11637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11643 ;;      Params:         0       3       0       0       0       0       0
 11644 ;;      Locals:         0       7       0       0       0       0       0
 11645 ;;      Temps:          0       0       0       0       0       0       0
 11646 ;;      Totals:         0      10       0       0       0       0       0
 11647 ;;Total ram usage:       10 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    5
 11650 ;; This function calls:
 11651 ;;		___awdiv
 11652 ;;		___awmod
 11653 ;;		___ftmul
 11654 ;;		___wmul
 11655 ;; This function is called by:
 11656 ;;		_sprintf
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text36
 11661  001236                     __ptext36:
 11662                           	opt stack 0
 11663  001236                     _fround:
 11664                           	opt stack 23
 11665                           
 11666                           ;incstack = 0
 11667                           ;fround@prec stored from wreg
 11668  001236  0100               	movlb	0	; () banked
 11669  001238  6F7B               	movwf	fround@prec& (0+255),b
 11670                           
 11671                           ;doprnt.c: 413: if(prec>=110)
 11672  00123A  0E6D               	movlw	109
 11673  00123C  0100               	movlb	0	; () banked
 11674  00123E  657B               	cpfsgt	fround@prec& (0+255),b
 11675  001240  D0A0               	goto	l1654
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11679  001242  0E00               	movlw	0
 11680  001244  6E29               	movwf	___wmul@multiplicand+1,c
 11681  001246  0E03               	movlw	3
 11682  001248  6E28               	movwf	___wmul@multiplicand,c
 11683  00124A  0E00               	movlw	0
 11684  00124C  6E21               	movwf	___awdiv@divisor+1,c
 11685  00124E  0E0A               	movlw	10
 11686  001250  6E20               	movwf	___awdiv@divisor,c
 11687  001252  0E00               	movlw	0
 11688  001254  6E1B               	movwf	___awmod@divisor+1,c
 11689  001256  0E64               	movlw	100
 11690  001258  6E1A               	movwf	___awmod@divisor,c
 11691  00125A  C07B  F018         	movff	fround@prec,___awmod@dividend
 11692  00125E  6A19               	clrf	___awmod@dividend+1,c
 11693  001260  EC2D  F01D         	call	___awmod	;wreg free
 11694  001264  C018  F01E         	movff	?___awmod,___awdiv@dividend
 11695  001268  C019  F01F         	movff	?___awmod+1,___awdiv@dividend+1
 11696  00126C  ECF9  F01B         	call	___awdiv	;wreg free
 11697  001270  0E09               	movlw	9
 11698  001272  241E               	addwf	?___awdiv,w,c
 11699  001274  6E26               	movwf	___wmul@multiplier,c
 11700  001276  0E00               	movlw	0
 11701  001278  201F               	addwfc	?___awdiv+1,w,c
 11702  00127A  6E27               	movwf	___wmul@multiplier+1,c
 11703  00127C  ECCD  F021         	call	___wmul	;wreg free
 11704  001280  0E8A               	movlw	low __npowers_
 11705  001282  2426               	addwf	?___wmul,w,c
 11706  001284  6EF6               	movwf	tblptrl,c
 11707  001286  0E78               	movlw	high __npowers_
 11708  001288  2027               	addwfc	?___wmul+1,w,c
 11709  00128A  6EF7               	movwf	tblptrh,c
 11710  00128C                     	if	0	;There are less than 3 active tblptr bytes
 11711  00128C                     	endif
 11712  00128C  0009               	tblrd		*+
 11713  00128E  CFF5 F069          	movff	tablat,___ftmul@f2
 11714  001292  0009               	tblrd		*+
 11715  001294  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11716  001298  000A               	tblrd		*-
 11717  00129A  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11718  00129E  0E00               	movlw	0
 11719  0012A0  6E21               	movwf	___awdiv@divisor+1,c
 11720  0012A2  0E64               	movlw	100
 11721  0012A4  6E20               	movwf	___awdiv@divisor,c
 11722  0012A6  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 11723  0012AA  6A1F               	clrf	___awdiv@dividend+1,c
 11724  0012AC  ECF9  F01B         	call	___awdiv	;wreg free
 11725  0012B0  0E12               	movlw	18
 11726  0012B2  241E               	addwf	?___awdiv,w,c
 11727  0012B4  6E26               	movwf	___wmul@multiplier,c
 11728  0012B6  0E00               	movlw	0
 11729  0012B8  201F               	addwfc	?___awdiv+1,w,c
 11730  0012BA  6E27               	movwf	___wmul@multiplier+1,c
 11731  0012BC  0E00               	movlw	0
 11732  0012BE  6E29               	movwf	___wmul@multiplicand+1,c
 11733  0012C0  0E03               	movlw	3
 11734  0012C2  6E28               	movwf	___wmul@multiplicand,c
 11735  0012C4  ECCD  F021         	call	___wmul	;wreg free
 11736  0012C8  0E8A               	movlw	low __npowers_
 11737  0012CA  2426               	addwf	?___wmul,w,c
 11738  0012CC  6EF6               	movwf	tblptrl,c
 11739  0012CE  0E78               	movlw	high __npowers_
 11740  0012D0  2027               	addwfc	?___wmul+1,w,c
 11741  0012D2  6EF7               	movwf	tblptrh,c
 11742  0012D4                     	if	0	;There are less than 3 active tblptr bytes
 11743  0012D4                     	endif
 11744  0012D4  0009               	tblrd		*+
 11745  0012D6  CFF5 F066          	movff	tablat,___ftmul@f1
 11746  0012DA  0009               	tblrd		*+
 11747  0012DC  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11748  0012E0  000A               	tblrd		*-
 11749  0012E2  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11750  0012E6  EC60  F016         	call	___ftmul	;wreg free
 11751  0012EA  C066  F078         	movff	?___ftmul,_fround$3950
 11752  0012EE  C067  F079         	movff	?___ftmul+1,_fround$3950+1
 11753  0012F2  C068  F07A         	movff	?___ftmul+2,_fround$3950+2
 11754                           
 11755                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11756  0012F6  0E00               	movlw	0
 11757  0012F8  6E29               	movwf	___wmul@multiplicand+1,c
 11758  0012FA  0E03               	movlw	3
 11759  0012FC  6E28               	movwf	___wmul@multiplicand,c
 11760  0012FE  0E00               	movlw	0
 11761  001300  6E1B               	movwf	___awmod@divisor+1,c
 11762  001302  0E0A               	movlw	10
 11763  001304  6E1A               	movwf	___awmod@divisor,c
 11764  001306  C07B  F018         	movff	fround@prec,___awmod@dividend
 11765  00130A  6A19               	clrf	___awmod@dividend+1,c
 11766  00130C  EC2D  F01D         	call	___awmod	;wreg free
 11767  001310  C018  F026         	movff	?___awmod,___wmul@multiplier
 11768  001314  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11769  001318  ECCD  F021         	call	___wmul	;wreg free
 11770  00131C  0E8A               	movlw	low __npowers_
 11771  00131E  2426               	addwf	?___wmul,w,c
 11772  001320  6EF6               	movwf	tblptrl,c
 11773  001322  0E78               	movlw	high __npowers_
 11774  001324  2027               	addwfc	?___wmul+1,w,c
 11775  001326  6EF7               	movwf	tblptrh,c
 11776  001328                     	if	0	;There are less than 3 active tblptr bytes
 11777  001328                     	endif
 11778  001328  0009               	tblrd		*+
 11779  00132A  CFF5 F069          	movff	tablat,___ftmul@f2
 11780  00132E  0009               	tblrd		*+
 11781  001330  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11782  001334  000A               	tblrd		*-
 11783  001336  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11784  00133A  C078  F066         	movff	_fround$3950,___ftmul@f1
 11785  00133E  C079  F067         	movff	_fround$3950+1,___ftmul@f1+1
 11786  001342  C07A  F068         	movff	_fround$3950+2,___ftmul@f1+2
 11787  001346  EC60  F016         	call	___ftmul	;wreg free
 11788  00134A  C066  F075         	movff	?___ftmul,_fround$3951
 11789  00134E  C067  F076         	movff	?___ftmul+1,_fround$3951+1
 11790  001352  C068  F077         	movff	?___ftmul+2,_fround$3951+2
 11791                           
 11792                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11793  001356  C075  F066         	movff	_fround$3951,___ftmul@f1
 11794  00135A  C076  F067         	movff	_fround$3951+1,___ftmul@f1+1
 11795  00135E  C077  F068         	movff	_fround$3951+2,___ftmul@f1+2
 11796  001362  0E00               	movlw	0
 11797  001364  0100               	movlb	0	; () banked
 11798  001366  6F69               	movwf	___ftmul@f2& (0+255),b
 11799  001368  0E00               	movlw	0
 11800  00136A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11801  00136C  0E3F               	movlw	63
 11802  00136E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11803  001370  EC60  F016         	call	___ftmul	;wreg free
 11804  001374  C066  F072         	movff	?___ftmul,?_fround
 11805  001378  C067  F073         	movff	?___ftmul+1,?_fround+1
 11806  00137C  C068  F074         	movff	?___ftmul+2,?_fround+2
 11807  001380  0012               	return	
 11808  001382                     l1654:
 11809                           
 11810                           ;doprnt.c: 415: else if(prec > 10)
 11811  001382  0E0A               	movlw	10
 11812  001384  0100               	movlb	0	; () banked
 11813  001386  657B               	cpfsgt	fround@prec& (0+255),b
 11814  001388  D064               	goto	l1657
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11818  00138A  0E00               	movlw	0
 11819  00138C  6E29               	movwf	___wmul@multiplicand+1,c
 11820  00138E  0E03               	movlw	3
 11821  001390  6E28               	movwf	___wmul@multiplicand,c
 11822  001392  0E00               	movlw	0
 11823  001394  6E1B               	movwf	___awmod@divisor+1,c
 11824  001396  0E0A               	movlw	10
 11825  001398  6E1A               	movwf	___awmod@divisor,c
 11826  00139A  C07B  F018         	movff	fround@prec,___awmod@dividend
 11827  00139E  6A19               	clrf	___awmod@dividend+1,c
 11828  0013A0  EC2D  F01D         	call	___awmod	;wreg free
 11829  0013A4  C018  F026         	movff	?___awmod,___wmul@multiplier
 11830  0013A8  C019  F027         	movff	?___awmod+1,___wmul@multiplier+1
 11831  0013AC  ECCD  F021         	call	___wmul	;wreg free
 11832  0013B0  0E8A               	movlw	low __npowers_
 11833  0013B2  2426               	addwf	?___wmul,w,c
 11834  0013B4  6EF6               	movwf	tblptrl,c
 11835  0013B6  0E78               	movlw	high __npowers_
 11836  0013B8  2027               	addwfc	?___wmul+1,w,c
 11837  0013BA  6EF7               	movwf	tblptrh,c
 11838  0013BC                     	if	0	;There are less than 3 active tblptr bytes
 11839  0013BC                     	endif
 11840  0013BC  0009               	tblrd		*+
 11841  0013BE  CFF5 F069          	movff	tablat,___ftmul@f2
 11842  0013C2  0009               	tblrd		*+
 11843  0013C4  CFF5 F06A          	movff	tablat,___ftmul@f2+1
 11844  0013C8  000A               	tblrd		*-
 11845  0013CA  CFF5 F06B          	movff	tablat,___ftmul@f2+2
 11846  0013CE  0E00               	movlw	0
 11847  0013D0  6E21               	movwf	___awdiv@divisor+1,c
 11848  0013D2  0E0A               	movlw	10
 11849  0013D4  6E20               	movwf	___awdiv@divisor,c
 11850  0013D6  C07B  F01E         	movff	fround@prec,___awdiv@dividend
 11851  0013DA  6A1F               	clrf	___awdiv@dividend+1,c
 11852  0013DC  ECF9  F01B         	call	___awdiv	;wreg free
 11853  0013E0  0E09               	movlw	9
 11854  0013E2  241E               	addwf	?___awdiv,w,c
 11855  0013E4  6E26               	movwf	___wmul@multiplier,c
 11856  0013E6  0E00               	movlw	0
 11857  0013E8  201F               	addwfc	?___awdiv+1,w,c
 11858  0013EA  6E27               	movwf	___wmul@multiplier+1,c
 11859  0013EC  0E00               	movlw	0
 11860  0013EE  6E29               	movwf	___wmul@multiplicand+1,c
 11861  0013F0  0E03               	movlw	3
 11862  0013F2  6E28               	movwf	___wmul@multiplicand,c
 11863  0013F4  ECCD  F021         	call	___wmul	;wreg free
 11864  0013F8  0E8A               	movlw	low __npowers_
 11865  0013FA  2426               	addwf	?___wmul,w,c
 11866  0013FC  6EF6               	movwf	tblptrl,c
 11867  0013FE  0E78               	movlw	high __npowers_
 11868  001400  2027               	addwfc	?___wmul+1,w,c
 11869  001402  6EF7               	movwf	tblptrh,c
 11870  001404                     	if	0	;There are less than 3 active tblptr bytes
 11871  001404                     	endif
 11872  001404  0009               	tblrd		*+
 11873  001406  CFF5 F066          	movff	tablat,___ftmul@f1
 11874  00140A  0009               	tblrd		*+
 11875  00140C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11876  001410  000A               	tblrd		*-
 11877  001412  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11878  001416  EC60  F016         	call	___ftmul	;wreg free
 11879  00141A  C066  F078         	movff	?___ftmul,_fround$3950
 11880  00141E  C067  F079         	movff	?___ftmul+1,_fround$3950+1
 11881  001422  C068  F07A         	movff	?___ftmul+2,_fround$3950+2
 11882                           
 11883                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11884  001426  C078  F066         	movff	_fround$3950,___ftmul@f1
 11885  00142A  C079  F067         	movff	_fround$3950+1,___ftmul@f1+1
 11886  00142E  C07A  F068         	movff	_fround$3950+2,___ftmul@f1+2
 11887  001432  0E00               	movlw	0
 11888  001434  0100               	movlb	0	; () banked
 11889  001436  6F69               	movwf	___ftmul@f2& (0+255),b
 11890  001438  0E00               	movlw	0
 11891  00143A  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11892  00143C  0E3F               	movlw	63
 11893  00143E  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11894  001440  EC60  F016         	call	___ftmul	;wreg free
 11895  001444  C066  F072         	movff	?___ftmul,?_fround
 11896  001448  C067  F073         	movff	?___ftmul+1,?_fround+1
 11897  00144C  C068  F074         	movff	?___ftmul+2,?_fround+2
 11898  001450  0012               	return	
 11899  001452                     l1657:
 11900                           
 11901                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 11902  001452  0100               	movlb	0	; () banked
 11903  001454  517B               	movf	fround@prec& (0+255),w,b
 11904  001456  0D03               	mullw	3
 11905  001458  0E8A               	movlw	low __npowers_
 11906  00145A  24F3               	addwf	prodl,w,c
 11907  00145C  6EF6               	movwf	tblptrl,c
 11908  00145E  0E78               	movlw	high __npowers_
 11909  001460  20F4               	addwfc	prodh,w,c
 11910  001462  6EF7               	movwf	tblptrh,c
 11911  001464                     	if	0	;There are less than 3 active tblptr bytes
 11912  001464                     	endif
 11913  001464  0009               	tblrd		*+
 11914  001466  CFF5 F066          	movff	tablat,___ftmul@f1
 11915  00146A  0009               	tblrd		*+
 11916  00146C  CFF5 F067          	movff	tablat,___ftmul@f1+1
 11917  001470  000A               	tblrd		*-
 11918  001472  CFF5 F068          	movff	tablat,___ftmul@f1+2
 11919  001476  0E00               	movlw	0
 11920  001478  6F69               	movwf	___ftmul@f2& (0+255),b
 11921  00147A  0E00               	movlw	0
 11922  00147C  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 11923  00147E  0E3F               	movlw	63
 11924  001480  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 11925  001482  EC60  F016         	call	___ftmul	;wreg free
 11926  001486  C066  F072         	movff	?___ftmul,?_fround
 11927  00148A  C067  F073         	movff	?___ftmul+1,?_fround+1
 11928  00148E  C068  F074         	movff	?___ftmul+2,?_fround+2
 11929  001492  0012               	return	
 11930  001494                     __end_of_fround:
 11931                           	opt stack 0
 11932                           tosu	equ	0xFFF
 11933                           tosh	equ	0xFFE
 11934                           tosl	equ	0xFFD
 11935                           pclath	equ	0xFFA
 11936                           tblptru	equ	0xFF8
 11937                           tblptrh	equ	0xFF7
 11938                           tblptrl	equ	0xFF6
 11939                           tablat	equ	0xFF5
 11940                           prodh	equ	0xFF4
 11941                           prodl	equ	0xFF3
 11942                           intcon	equ	0xFF2
 11943                           intcon2	equ	0xFF1
 11944                           postinc0	equ	0xFEE
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           postdec1	equ	0xFE5
 11948                           fsr1h	equ	0xFE2
 11949                           fsr1l	equ	0xFE1
 11950                           indf2	equ	0xFDF
 11951                           postinc2	equ	0xFDE
 11952                           postdec2	equ	0xFDD
 11953                           fsr2h	equ	0xFDA
 11954                           fsr2l	equ	0xFD9
 11955                           status	equ	0xFD8
 11956                           
 11957 ;; *************** function ___awmod *****************
 11958 ;; Defined at:
 11959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  dividend        2   23[COMRAM] int 
 11962 ;;  divisor         2   25[COMRAM] int 
 11963 ;; Auto vars:     Size  Location     Type
 11964 ;;  sign            1   28[COMRAM] unsigned char 
 11965 ;;  counter         1   27[COMRAM] unsigned char 
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  2   23[COMRAM] int 
 11968 ;; Registers used:
 11969 ;;		wreg, status,2, status,0
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11975 ;;      Params:         4       0       0       0       0       0       0
 11976 ;;      Locals:         2       0       0       0       0       0       0
 11977 ;;      Temps:          0       0       0       0       0       0       0
 11978 ;;      Totals:         6       0       0       0       0       0       0
 11979 ;;Total ram usage:        6 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    3
 11982 ;; This function calls:
 11983 ;;		Nothing
 11984 ;; This function is called by:
 11985 ;;		_fround
 11986 ;;		_scale
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text37
 11991  003A5A                     __ptext37:
 11992                           	opt stack 0
 11993  003A5A                     ___awmod:
 11994                           	opt stack 24
 11995                           
 11996                           ;incstack = 0
 11997  003A5A  0E00               	movlw	0
 11998  003A5C  6E1D               	movwf	___awmod@sign,c
 11999  003A5E  AE19               	btfss	___awmod@dividend+1,7,c
 12000  003A60  D006               	goto	l1917
 12001  003A62  6C18               	negf	___awmod@dividend,c
 12002  003A64  1E19               	comf	___awmod@dividend+1,f,c
 12003  003A66  B0D8               	btfsc	status,0,c
 12004  003A68  2A19               	incf	___awmod@dividend+1,f,c
 12005  003A6A  0E01               	movlw	1
 12006  003A6C  6E1D               	movwf	___awmod@sign,c
 12007  003A6E                     l1917:
 12008  003A6E  AE1B               	btfss	___awmod@divisor+1,7,c
 12009  003A70  D004               	goto	l1918
 12010  003A72  6C1A               	negf	___awmod@divisor,c
 12011  003A74  1E1B               	comf	___awmod@divisor+1,f,c
 12012  003A76  B0D8               	btfsc	status,0,c
 12013  003A78  2A1B               	incf	___awmod@divisor+1,f,c
 12014  003A7A                     l1918:
 12015  003A7A  501A               	movf	___awmod@divisor,w,c
 12016  003A7C  101B               	iorwf	___awmod@divisor+1,w,c
 12017  003A7E  B4D8               	btfsc	status,2,c
 12018  003A80  D018               	goto	l1925
 12019  003A82  0E01               	movlw	1
 12020  003A84  6E1C               	movwf	___awmod@counter,c
 12021  003A86  D004               	goto	l1920
 12022  003A88  90D8               	bcf	status,0,c
 12023  003A8A  361A               	rlcf	___awmod@divisor,f,c
 12024  003A8C  361B               	rlcf	___awmod@divisor+1,f,c
 12025  003A8E  2A1C               	incf	___awmod@counter,f,c
 12026  003A90                     l1920:
 12027  003A90  AE1B               	btfss	___awmod@divisor+1,7,c
 12028  003A92  D7FA               	goto	l1921
 12029  003A94                     u8280:
 12030  003A94  501A               	movf	___awmod@divisor,w,c
 12031  003A96  5C18               	subwf	___awmod@dividend,w,c
 12032  003A98  501B               	movf	___awmod@divisor+1,w,c
 12033  003A9A  5819               	subwfb	___awmod@dividend+1,w,c
 12034  003A9C  A0D8               	btfss	status,0,c
 12035  003A9E  D004               	goto	l1924
 12036  003AA0  501A               	movf	___awmod@divisor,w,c
 12037  003AA2  5E18               	subwf	___awmod@dividend,f,c
 12038  003AA4  501B               	movf	___awmod@divisor+1,w,c
 12039  003AA6  5A19               	subwfb	___awmod@dividend+1,f,c
 12040  003AA8                     l1924:
 12041  003AA8  90D8               	bcf	status,0,c
 12042  003AAA  321B               	rrcf	___awmod@divisor+1,f,c
 12043  003AAC  321A               	rrcf	___awmod@divisor,f,c
 12044  003AAE  2E1C               	decfsz	___awmod@counter,f,c
 12045  003AB0  D7F1               	goto	u8280
 12046  003AB2                     l1925:
 12047  003AB2  501D               	movf	___awmod@sign,w,c
 12048  003AB4  B4D8               	btfsc	status,2,c
 12049  003AB6  D004               	goto	l1926
 12050  003AB8  6C18               	negf	___awmod@dividend,c
 12051  003ABA  1E19               	comf	___awmod@dividend+1,f,c
 12052  003ABC  B0D8               	btfsc	status,0,c
 12053  003ABE  2A19               	incf	___awmod@dividend+1,f,c
 12054  003AC0                     l1926:
 12055  003AC0  C018  F018         	movff	___awmod@dividend,?___awmod
 12056  003AC4  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
 12057  003AC8  0012               	return	
 12058  003ACA                     __end_of___awmod:
 12059                           	opt stack 0
 12060                           tosu	equ	0xFFF
 12061                           tosh	equ	0xFFE
 12062                           tosl	equ	0xFFD
 12063                           pclath	equ	0xFFA
 12064                           tblptru	equ	0xFF8
 12065                           tblptrh	equ	0xFF7
 12066                           tblptrl	equ	0xFF6
 12067                           tablat	equ	0xFF5
 12068                           prodh	equ	0xFF4
 12069                           prodl	equ	0xFF3
 12070                           intcon	equ	0xFF2
 12071                           intcon2	equ	0xFF1
 12072                           postinc0	equ	0xFEE
 12073                           wreg	equ	0xFE8
 12074                           indf1	equ	0xFE7
 12075                           postdec1	equ	0xFE5
 12076                           fsr1h	equ	0xFE2
 12077                           fsr1l	equ	0xFE1
 12078                           indf2	equ	0xFDF
 12079                           postinc2	equ	0xFDE
 12080                           postdec2	equ	0xFDD
 12081                           fsr2h	equ	0xFDA
 12082                           fsr2l	equ	0xFD9
 12083                           status	equ	0xFD8
 12084                           
 12085 ;; *************** function ___awdiv *****************
 12086 ;; Defined at:
 12087 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;  dividend        2   29[COMRAM] int 
 12090 ;;  divisor         2   31[COMRAM] int 
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;  quotient        2   35[COMRAM] int 
 12093 ;;  sign            1   34[COMRAM] unsigned char 
 12094 ;;  counter         1   33[COMRAM] unsigned char 
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  2   29[COMRAM] int 
 12097 ;; Registers used:
 12098 ;;		wreg, status,2, status,0
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12104 ;;      Params:         4       0       0       0       0       0       0
 12105 ;;      Locals:         4       0       0       0       0       0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0
 12107 ;;      Totals:         8       0       0       0       0       0       0
 12108 ;;Total ram usage:        8 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    3
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		_fround
 12115 ;;		_scale
 12116 ;;		_sprintf
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           	psect	text38
 12121  0037F2                     __ptext38:
 12122                           	opt stack 0
 12123  0037F2                     ___awdiv:
 12124                           	opt stack 24
 12125                           
 12126                           ;incstack = 0
 12127  0037F2  0E00               	movlw	0
 12128  0037F4  6E23               	movwf	___awdiv@sign,c
 12129  0037F6  AE21               	btfss	___awdiv@divisor+1,7,c
 12130  0037F8  D006               	goto	l1904
 12131  0037FA  6C20               	negf	___awdiv@divisor,c
 12132  0037FC  1E21               	comf	___awdiv@divisor+1,f,c
 12133  0037FE  B0D8               	btfsc	status,0,c
 12134  003800  2A21               	incf	___awdiv@divisor+1,f,c
 12135  003802  0E01               	movlw	1
 12136  003804  6E23               	movwf	___awdiv@sign,c
 12137  003806                     l1904:
 12138  003806  AE1F               	btfss	___awdiv@dividend+1,7,c
 12139  003808  D006               	goto	l1905
 12140  00380A  6C1E               	negf	___awdiv@dividend,c
 12141  00380C  1E1F               	comf	___awdiv@dividend+1,f,c
 12142  00380E  B0D8               	btfsc	status,0,c
 12143  003810  2A1F               	incf	___awdiv@dividend+1,f,c
 12144  003812  0E01               	movlw	1
 12145  003814  1A23               	xorwf	___awdiv@sign,f,c
 12146  003816                     l1905:
 12147  003816  0E00               	movlw	0
 12148  003818  6E25               	movwf	___awdiv@quotient+1,c
 12149  00381A  0E00               	movlw	0
 12150  00381C  6E24               	movwf	___awdiv@quotient,c
 12151  00381E  5020               	movf	___awdiv@divisor,w,c
 12152  003820  1021               	iorwf	___awdiv@divisor+1,w,c
 12153  003822  B4D8               	btfsc	status,2,c
 12154  003824  D01C               	goto	l1912
 12155  003826  0E01               	movlw	1
 12156  003828  6E22               	movwf	___awdiv@counter,c
 12157  00382A  D004               	goto	l1907
 12158  00382C  90D8               	bcf	status,0,c
 12159  00382E  3620               	rlcf	___awdiv@divisor,f,c
 12160  003830  3621               	rlcf	___awdiv@divisor+1,f,c
 12161  003832  2A22               	incf	___awdiv@counter,f,c
 12162  003834                     l1907:
 12163  003834  AE21               	btfss	___awdiv@divisor+1,7,c
 12164  003836  D7FA               	goto	l1908
 12165  003838                     u8220:
 12166  003838  90D8               	bcf	status,0,c
 12167  00383A  3624               	rlcf	___awdiv@quotient,f,c
 12168  00383C  3625               	rlcf	___awdiv@quotient+1,f,c
 12169  00383E  5020               	movf	___awdiv@divisor,w,c
 12170  003840  5C1E               	subwf	___awdiv@dividend,w,c
 12171  003842  5021               	movf	___awdiv@divisor+1,w,c
 12172  003844  581F               	subwfb	___awdiv@dividend+1,w,c
 12173  003846  A0D8               	btfss	status,0,c
 12174  003848  D005               	goto	l1911
 12175  00384A  5020               	movf	___awdiv@divisor,w,c
 12176  00384C  5E1E               	subwf	___awdiv@dividend,f,c
 12177  00384E  5021               	movf	___awdiv@divisor+1,w,c
 12178  003850  5A1F               	subwfb	___awdiv@dividend+1,f,c
 12179  003852  8024               	bsf	___awdiv@quotient,0,c
 12180  003854                     l1911:
 12181  003854  90D8               	bcf	status,0,c
 12182  003856  3221               	rrcf	___awdiv@divisor+1,f,c
 12183  003858  3220               	rrcf	___awdiv@divisor,f,c
 12184  00385A  2E22               	decfsz	___awdiv@counter,f,c
 12185  00385C  D7ED               	goto	u8220
 12186  00385E                     l1912:
 12187  00385E  5023               	movf	___awdiv@sign,w,c
 12188  003860  B4D8               	btfsc	status,2,c
 12189  003862  D004               	goto	l1913
 12190  003864  6C24               	negf	___awdiv@quotient,c
 12191  003866  1E25               	comf	___awdiv@quotient+1,f,c
 12192  003868  B0D8               	btfsc	status,0,c
 12193  00386A  2A25               	incf	___awdiv@quotient+1,f,c
 12194  00386C                     l1913:
 12195  00386C  C024  F01E         	movff	___awdiv@quotient,?___awdiv
 12196  003870  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
 12197  003874  0012               	return	
 12198  003876                     __end_of___awdiv:
 12199                           	opt stack 0
 12200                           tosu	equ	0xFFF
 12201                           tosh	equ	0xFFE
 12202                           tosl	equ	0xFFD
 12203                           pclath	equ	0xFFA
 12204                           tblptru	equ	0xFF8
 12205                           tblptrh	equ	0xFF7
 12206                           tblptrl	equ	0xFF6
 12207                           tablat	equ	0xFF5
 12208                           prodh	equ	0xFF4
 12209                           prodl	equ	0xFF3
 12210                           intcon	equ	0xFF2
 12211                           intcon2	equ	0xFF1
 12212                           postinc0	equ	0xFEE
 12213                           wreg	equ	0xFE8
 12214                           indf1	equ	0xFE7
 12215                           postdec1	equ	0xFE5
 12216                           fsr1h	equ	0xFE2
 12217                           fsr1l	equ	0xFE1
 12218                           indf2	equ	0xFDF
 12219                           postinc2	equ	0xFDE
 12220                           postdec2	equ	0xFDD
 12221                           fsr2h	equ	0xFDA
 12222                           fsr2l	equ	0xFD9
 12223                           status	equ	0xFD8
 12224                           
 12225 ;; *************** function __tdiv_to_l_ *****************
 12226 ;; Defined at:
 12227 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;  f1              3   23[COMRAM] float 
 12230 ;;  f2              3   26[COMRAM] float 
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;  quot            4   32[COMRAM] unsigned long 
 12233 ;;  exp1            1   37[COMRAM] unsigned char 
 12234 ;;  cntr            1   36[COMRAM] unsigned char 
 12235 ;; Return value:  Size  Location     Type
 12236 ;;                  4   23[COMRAM] unsigned long 
 12237 ;; Registers used:
 12238 ;;		wreg, status,2, status,0
 12239 ;; Tracked objects:
 12240 ;;		On entry : 0/0
 12241 ;;		On exit  : 0/0
 12242 ;;		Unchanged: 0/0
 12243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12244 ;;      Params:         6       0       0       0       0       0       0
 12245 ;;      Locals:         6       0       0       0       0       0       0
 12246 ;;      Temps:          3       0       0       0       0       0       0
 12247 ;;      Totals:        15       0       0       0       0       0       0
 12248 ;;Total ram usage:       15 bytes
 12249 ;; Hardware stack levels used:    1
 12250 ;; Hardware stack levels required when called:    3
 12251 ;; This function calls:
 12252 ;;		Nothing
 12253 ;; This function is called by:
 12254 ;;		_sprintf
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           	psect	text39
 12259  0023C4                     __ptext39:
 12260                           	opt stack 0
 12261  0023C4                     __tdiv_to_l_:
 12262                           	opt stack 25
 12263                           
 12264                           ;incstack = 0
 12265  0023C4  C01A  F01E         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 12266  0023C8  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12267  0023CA  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12268  0023CC  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
 12269  0023CE  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12270  0023D0  E301               	bnc	u8711
 12271  0023D2  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12272  0023D4                     u8711:
 12273  0023D4  501E               	movf	??__tdiv_to_l_,w,c
 12274  0023D6  6E26               	movwf	__tdiv_to_l_@exp1,c
 12275  0023D8  5026               	movf	__tdiv_to_l_@exp1,w,c
 12276  0023DA  A4D8               	btfss	status,2,c
 12277  0023DC  D009               	goto	l2040
 12278  0023DE  0E00               	movlw	0
 12279  0023E0  6E18               	movwf	?__tdiv_to_l_,c
 12280  0023E2  0E00               	movlw	0
 12281  0023E4  6E19               	movwf	?__tdiv_to_l_+1,c
 12282  0023E6  0E00               	movlw	0
 12283  0023E8  6E1A               	movwf	?__tdiv_to_l_+2,c
 12284  0023EA  0E00               	movlw	0
 12285  0023EC  6E1B               	movwf	?__tdiv_to_l_+3,c
 12286  0023EE  0012               	return	
 12287  0023F0                     l2040:
 12288  0023F0  C01D  F01E         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 12289  0023F4  6A1F               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12290  0023F6  6A20               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12291  0023F8  341C               	rlcf	__tdiv_to_l_@f2+1,w,c
 12292  0023FA  361E               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12293  0023FC  E301               	bnc	u8731
 12294  0023FE  801F               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12295  002400                     u8731:
 12296  002400  501E               	movf	??__tdiv_to_l_,w,c
 12297  002402  6E25               	movwf	__tdiv_to_l_@cntr,c
 12298  002404  5025               	movf	__tdiv_to_l_@cntr,w,c
 12299  002406  A4D8               	btfss	status,2,c
 12300  002408  D009               	goto	l2042
 12301  00240A  0E00               	movlw	0
 12302  00240C  6E18               	movwf	?__tdiv_to_l_,c
 12303  00240E  0E00               	movlw	0
 12304  002410  6E19               	movwf	?__tdiv_to_l_+1,c
 12305  002412  0E00               	movlw	0
 12306  002414  6E1A               	movwf	?__tdiv_to_l_+2,c
 12307  002416  0E00               	movlw	0
 12308  002418  6E1B               	movwf	?__tdiv_to_l_+3,c
 12309  00241A  0012               	return	
 12310  00241C                     l2042:
 12311  00241C  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
 12312  00241E  0EFF               	movlw	255
 12313  002420  1618               	andwf	__tdiv_to_l_@f1,f,c
 12314  002422  0EFF               	movlw	255
 12315  002424  1619               	andwf	__tdiv_to_l_@f1+1,f,c
 12316  002426  0E00               	movlw	0
 12317  002428  161A               	andwf	__tdiv_to_l_@f1+2,f,c
 12318  00242A  8E1C               	bsf	__tdiv_to_l_@f2+1,7,c
 12319  00242C  0EFF               	movlw	255
 12320  00242E  161B               	andwf	__tdiv_to_l_@f2,f,c
 12321  002430  0EFF               	movlw	255
 12322  002432  161C               	andwf	__tdiv_to_l_@f2+1,f,c
 12323  002434  0E00               	movlw	0
 12324  002436  161D               	andwf	__tdiv_to_l_@f2+2,f,c
 12325  002438  0E00               	movlw	0
 12326  00243A  6E21               	movwf	__tdiv_to_l_@quot,c
 12327  00243C  0E00               	movlw	0
 12328  00243E  6E22               	movwf	__tdiv_to_l_@quot+1,c
 12329  002440  0E00               	movlw	0
 12330  002442  6E23               	movwf	__tdiv_to_l_@quot+2,c
 12331  002444  0E00               	movlw	0
 12332  002446  6E24               	movwf	__tdiv_to_l_@quot+3,c
 12333  002448  0E7F               	movlw	127
 12334  00244A  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 12335  00244C  5025               	movf	__tdiv_to_l_@cntr,w,c
 12336  00244E  0F98               	addlw	152
 12337  002450  5E26               	subwf	__tdiv_to_l_@exp1,f,c
 12338  002452  0E18               	movlw	24
 12339  002454  6E25               	movwf	__tdiv_to_l_@cntr,c
 12340  002456                     l2043:
 12341  002456  90D8               	bcf	status,0,c
 12342  002458  3621               	rlcf	__tdiv_to_l_@quot,f,c
 12343  00245A  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 12344  00245C  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 12345  00245E  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 12346  002460  501B               	movf	__tdiv_to_l_@f2,w,c
 12347  002462  5C18               	subwf	__tdiv_to_l_@f1,w,c
 12348  002464  501C               	movf	__tdiv_to_l_@f2+1,w,c
 12349  002466  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
 12350  002468  501D               	movf	__tdiv_to_l_@f2+2,w,c
 12351  00246A  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
 12352  00246C  A0D8               	btfss	status,0,c
 12353  00246E  D007               	goto	l2044
 12354  002470  501B               	movf	__tdiv_to_l_@f2,w,c
 12355  002472  5E18               	subwf	__tdiv_to_l_@f1,f,c
 12356  002474  501C               	movf	__tdiv_to_l_@f2+1,w,c
 12357  002476  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
 12358  002478  501D               	movf	__tdiv_to_l_@f2+2,w,c
 12359  00247A  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
 12360  00247C  8021               	bsf	__tdiv_to_l_@quot,0,c
 12361  00247E                     l2044:
 12362  00247E  90D8               	bcf	status,0,c
 12363  002480  3618               	rlcf	__tdiv_to_l_@f1,f,c
 12364  002482  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
 12365  002484  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
 12366  002486  2E25               	decfsz	__tdiv_to_l_@cntr,f,c
 12367  002488  D7E6               	goto	l2043
 12368  00248A  AE26               	btfss	__tdiv_to_l_@exp1,7,c
 12369  00248C  D016               	goto	l2046
 12370  00248E  5026               	movf	__tdiv_to_l_@exp1,w,c
 12371  002490  0A80               	xorlw	128
 12372  002492  0F97               	addlw	151
 12373  002494  B0D8               	btfsc	status,0,c
 12374  002496  D009               	goto	l2047
 12375  002498  0E00               	movlw	0
 12376  00249A  6E18               	movwf	?__tdiv_to_l_,c
 12377  00249C  0E00               	movlw	0
 12378  00249E  6E19               	movwf	?__tdiv_to_l_+1,c
 12379  0024A0  0E00               	movlw	0
 12380  0024A2  6E1A               	movwf	?__tdiv_to_l_+2,c
 12381  0024A4  0E00               	movlw	0
 12382  0024A6  6E1B               	movwf	?__tdiv_to_l_+3,c
 12383  0024A8  0012               	return	
 12384  0024AA                     l2047:
 12385  0024AA  90D8               	bcf	status,0,c
 12386  0024AC  3224               	rrcf	__tdiv_to_l_@quot+3,f,c
 12387  0024AE  3223               	rrcf	__tdiv_to_l_@quot+2,f,c
 12388  0024B0  3222               	rrcf	__tdiv_to_l_@quot+1,f,c
 12389  0024B2  3221               	rrcf	__tdiv_to_l_@quot,f,c
 12390  0024B4  3E26               	incfsz	__tdiv_to_l_@exp1,f,c
 12391  0024B6  D7F9               	goto	l2047
 12392  0024B8  D015               	goto	u8790
 12393  0024BA                     l2046:
 12394  0024BA  0E17               	movlw	23
 12395  0024BC  6426               	cpfsgt	__tdiv_to_l_@exp1,c
 12396  0024BE  D00F               	goto	l2052
 12397  0024C0  0E00               	movlw	0
 12398  0024C2  6E18               	movwf	?__tdiv_to_l_,c
 12399  0024C4  0E00               	movlw	0
 12400  0024C6  6E19               	movwf	?__tdiv_to_l_+1,c
 12401  0024C8  0E00               	movlw	0
 12402  0024CA  6E1A               	movwf	?__tdiv_to_l_+2,c
 12403  0024CC  0E00               	movlw	0
 12404  0024CE  6E1B               	movwf	?__tdiv_to_l_+3,c
 12405  0024D0  0012               	return	
 12406  0024D2  90D8               	bcf	status,0,c
 12407  0024D4  3621               	rlcf	__tdiv_to_l_@quot,f,c
 12408  0024D6  3622               	rlcf	__tdiv_to_l_@quot+1,f,c
 12409  0024D8  3623               	rlcf	__tdiv_to_l_@quot+2,f,c
 12410  0024DA  3624               	rlcf	__tdiv_to_l_@quot+3,f,c
 12411  0024DC  0626               	decf	__tdiv_to_l_@exp1,f,c
 12412  0024DE                     l2052:
 12413  0024DE  5026               	movf	__tdiv_to_l_@exp1,w,c
 12414  0024E0  A4D8               	btfss	status,2,c
 12415  0024E2  D7F7               	goto	l2053
 12416  0024E4                     u8790:
 12417  0024E4  C021  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 12418  0024E8  C022  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 12419  0024EC  C023  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 12420  0024F0  C024  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 12421  0024F4  0012               	return		;funcret
 12422  0024F6                     __end_of__tdiv_to_l_:
 12423                           	opt stack 0
 12424                           tosu	equ	0xFFF
 12425                           tosh	equ	0xFFE
 12426                           tosl	equ	0xFFD
 12427                           pclath	equ	0xFFA
 12428                           tblptru	equ	0xFF8
 12429                           tblptrh	equ	0xFF7
 12430                           tblptrl	equ	0xFF6
 12431                           tablat	equ	0xFF5
 12432                           prodh	equ	0xFF4
 12433                           prodl	equ	0xFF3
 12434                           intcon	equ	0xFF2
 12435                           intcon2	equ	0xFF1
 12436                           postinc0	equ	0xFEE
 12437                           wreg	equ	0xFE8
 12438                           indf1	equ	0xFE7
 12439                           postdec1	equ	0xFE5
 12440                           fsr1h	equ	0xFE2
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           fsr2h	equ	0xFDA
 12446                           fsr2l	equ	0xFD9
 12447                           status	equ	0xFD8
 12448                           
 12449 ;; *************** function __div_to_l_ *****************
 12450 ;; Defined at:
 12451 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
 12452 ;; Parameters:    Size  Location     Type
 12453 ;;  f1              3   23[COMRAM] unsigned long 
 12454 ;;  f2              3   26[COMRAM] unsigned long 
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;  quot            4   29[COMRAM] unsigned long 
 12457 ;;  exp1            1   34[COMRAM] unsigned char 
 12458 ;;  cntr            1   33[COMRAM] unsigned char 
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  4   23[COMRAM] unsigned long 
 12461 ;; Registers used:
 12462 ;;		wreg, status,2, status,0
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12468 ;;      Params:         6       0       0       0       0       0       0
 12469 ;;      Locals:         6       0       0       0       0       0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0
 12471 ;;      Totals:        12       0       0       0       0       0       0
 12472 ;;Total ram usage:       12 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    3
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_sprintf
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           	psect	text40
 12483  002620                     __ptext40:
 12484                           	opt stack 0
 12485  002620                     __div_to_l_:
 12486                           	opt stack 25
 12487                           
 12488                           ;incstack = 0
 12489  002620  341A               	rlcf	__div_to_l_@f1+2,w,c
 12490  002622  341B               	rlcf	__div_to_l_@f1+3,w,c
 12491  002624  6E23               	movwf	__div_to_l_@exp1,c
 12492  002626  5023               	movf	__div_to_l_@exp1,w,c
 12493  002628  A4D8               	btfss	status,2,c
 12494  00262A  D009               	goto	l1936
 12495  00262C  0E00               	movlw	0
 12496  00262E  6E18               	movwf	?__div_to_l_,c
 12497  002630  0E00               	movlw	0
 12498  002632  6E19               	movwf	?__div_to_l_+1,c
 12499  002634  0E00               	movlw	0
 12500  002636  6E1A               	movwf	?__div_to_l_+2,c
 12501  002638  0E00               	movlw	0
 12502  00263A  6E1B               	movwf	?__div_to_l_+3,c
 12503  00263C  0012               	return	
 12504  00263E                     l1936:
 12505  00263E  341D               	rlcf	__div_to_l_@f2+2,w,c
 12506  002640  341E               	rlcf	__div_to_l_@f2+3,w,c
 12507  002642  6E22               	movwf	__div_to_l_@cntr,c
 12508  002644  5022               	movf	__div_to_l_@cntr,w,c
 12509  002646  A4D8               	btfss	status,2,c
 12510  002648  D009               	goto	l1938
 12511  00264A  0E00               	movlw	0
 12512  00264C  6E18               	movwf	?__div_to_l_,c
 12513  00264E  0E00               	movlw	0
 12514  002650  6E19               	movwf	?__div_to_l_+1,c
 12515  002652  0E00               	movlw	0
 12516  002654  6E1A               	movwf	?__div_to_l_+2,c
 12517  002656  0E00               	movlw	0
 12518  002658  6E1B               	movwf	?__div_to_l_+3,c
 12519  00265A  0012               	return	
 12520  00265C                     l1938:
 12521  00265C  8E1A               	bsf	__div_to_l_@f1+2,7,c
 12522  00265E  0EFF               	movlw	255
 12523  002660  1618               	andwf	__div_to_l_@f1,f,c
 12524  002662  0EFF               	movlw	255
 12525  002664  1619               	andwf	__div_to_l_@f1+1,f,c
 12526  002666  0EFF               	movlw	255
 12527  002668  161A               	andwf	__div_to_l_@f1+2,f,c
 12528  00266A  0E00               	movlw	0
 12529  00266C  161B               	andwf	__div_to_l_@f1+3,f,c
 12530  00266E  8E1D               	bsf	__div_to_l_@f2+2,7,c
 12531  002670  0EFF               	movlw	255
 12532  002672  161B               	andwf	__div_to_l_@f2,f,c
 12533  002674  0EFF               	movlw	255
 12534  002676  161C               	andwf	__div_to_l_@f2+1,f,c
 12535  002678  0EFF               	movlw	255
 12536  00267A  161D               	andwf	__div_to_l_@f2+2,f,c
 12537  00267C  0E00               	movlw	0
 12538  00267E  161E               	andwf	__div_to_l_@f2+3,f,c
 12539  002680  0E00               	movlw	0
 12540  002682  6E1E               	movwf	__div_to_l_@quot,c
 12541  002684  0E00               	movlw	0
 12542  002686  6E1F               	movwf	__div_to_l_@quot+1,c
 12543  002688  0E00               	movlw	0
 12544  00268A  6E20               	movwf	__div_to_l_@quot+2,c
 12545  00268C  0E00               	movlw	0
 12546  00268E  6E21               	movwf	__div_to_l_@quot+3,c
 12547  002690  0E7F               	movlw	127
 12548  002692  5E23               	subwf	__div_to_l_@exp1,f,c
 12549  002694  5022               	movf	__div_to_l_@cntr,w,c
 12550  002696  0FA0               	addlw	160
 12551  002698  5E23               	subwf	__div_to_l_@exp1,f,c
 12552  00269A  0E20               	movlw	32
 12553  00269C  6E22               	movwf	__div_to_l_@cntr,c
 12554  00269E  90D8               	bcf	status,0,c
 12555  0026A0  361E               	rlcf	__div_to_l_@quot,f,c
 12556  0026A2  361F               	rlcf	__div_to_l_@quot+1,f,c
 12557  0026A4  3620               	rlcf	__div_to_l_@quot+2,f,c
 12558  0026A6  3621               	rlcf	__div_to_l_@quot+3,f,c
 12559  0026A8  501B               	movf	__div_to_l_@f2,w,c
 12560  0026AA  5C18               	subwf	__div_to_l_@f1,w,c
 12561  0026AC  501C               	movf	__div_to_l_@f2+1,w,c
 12562  0026AE  5819               	subwfb	__div_to_l_@f1+1,w,c
 12563  0026B0  501D               	movf	__div_to_l_@f2+2,w,c
 12564  0026B2  581A               	subwfb	__div_to_l_@f1+2,w,c
 12565  0026B4  501E               	movf	__div_to_l_@f2+3,w,c
 12566  0026B6  581B               	subwfb	__div_to_l_@f1+3,w,c
 12567  0026B8  A0D8               	btfss	status,0,c
 12568  0026BA  D009               	goto	l1940
 12569  0026BC  501B               	movf	__div_to_l_@f2,w,c
 12570  0026BE  5E18               	subwf	__div_to_l_@f1,f,c
 12571  0026C0  501C               	movf	__div_to_l_@f2+1,w,c
 12572  0026C2  5A19               	subwfb	__div_to_l_@f1+1,f,c
 12573  0026C4  501D               	movf	__div_to_l_@f2+2,w,c
 12574  0026C6  5A1A               	subwfb	__div_to_l_@f1+2,f,c
 12575  0026C8  501E               	movf	__div_to_l_@f2+3,w,c
 12576  0026CA  5A1B               	subwfb	__div_to_l_@f1+3,f,c
 12577  0026CC  801E               	bsf	__div_to_l_@quot,0,c
 12578  0026CE                     l1940:
 12579  0026CE  90D8               	bcf	status,0,c
 12580  0026D0  3618               	rlcf	__div_to_l_@f1,f,c
 12581  0026D2  3619               	rlcf	__div_to_l_@f1+1,f,c
 12582  0026D4  361A               	rlcf	__div_to_l_@f1+2,f,c
 12583  0026D6  361B               	rlcf	__div_to_l_@f1+3,f,c
 12584  0026D8  2E22               	decfsz	__div_to_l_@cntr,f,c
 12585  0026DA  D7E1               	goto	l1939
 12586  0026DC  AE23               	btfss	__div_to_l_@exp1,7,c
 12587  0026DE  D016               	goto	l1942
 12588  0026E0  5023               	movf	__div_to_l_@exp1,w,c
 12589  0026E2  0A80               	xorlw	128
 12590  0026E4  0F9F               	addlw	159
 12591  0026E6  B0D8               	btfsc	status,0,c
 12592  0026E8  D009               	goto	l1943
 12593  0026EA  0E00               	movlw	0
 12594  0026EC  6E18               	movwf	?__div_to_l_,c
 12595  0026EE  0E00               	movlw	0
 12596  0026F0  6E19               	movwf	?__div_to_l_+1,c
 12597  0026F2  0E00               	movlw	0
 12598  0026F4  6E1A               	movwf	?__div_to_l_+2,c
 12599  0026F6  0E00               	movlw	0
 12600  0026F8  6E1B               	movwf	?__div_to_l_+3,c
 12601  0026FA  0012               	return	
 12602  0026FC                     l1943:
 12603  0026FC  90D8               	bcf	status,0,c
 12604  0026FE  3221               	rrcf	__div_to_l_@quot+3,f,c
 12605  002700  3220               	rrcf	__div_to_l_@quot+2,f,c
 12606  002702  321F               	rrcf	__div_to_l_@quot+1,f,c
 12607  002704  321E               	rrcf	__div_to_l_@quot,f,c
 12608  002706  3E23               	incfsz	__div_to_l_@exp1,f,c
 12609  002708  D7F9               	goto	l1943
 12610  00270A  D015               	goto	u8860
 12611  00270C                     l1942:
 12612  00270C  0E1F               	movlw	31
 12613  00270E  6423               	cpfsgt	__div_to_l_@exp1,c
 12614  002710  D00F               	goto	l1948
 12615  002712  0E00               	movlw	0
 12616  002714  6E18               	movwf	?__div_to_l_,c
 12617  002716  0E00               	movlw	0
 12618  002718  6E19               	movwf	?__div_to_l_+1,c
 12619  00271A  0E00               	movlw	0
 12620  00271C  6E1A               	movwf	?__div_to_l_+2,c
 12621  00271E  0E00               	movlw	0
 12622  002720  6E1B               	movwf	?__div_to_l_+3,c
 12623  002722  0012               	return	
 12624  002724  90D8               	bcf	status,0,c
 12625  002726  361E               	rlcf	__div_to_l_@quot,f,c
 12626  002728  361F               	rlcf	__div_to_l_@quot+1,f,c
 12627  00272A  3620               	rlcf	__div_to_l_@quot+2,f,c
 12628  00272C  3621               	rlcf	__div_to_l_@quot+3,f,c
 12629  00272E  0623               	decf	__div_to_l_@exp1,f,c
 12630  002730                     l1948:
 12631  002730  5023               	movf	__div_to_l_@exp1,w,c
 12632  002732  A4D8               	btfss	status,2,c
 12633  002734  D7F7               	goto	l1949
 12634  002736                     u8860:
 12635  002736  C01E  F018         	movff	__div_to_l_@quot,?__div_to_l_
 12636  00273A  C01F  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 12637  00273E  C020  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 12638  002742  C021  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 12639  002746  0012               	return		;funcret
 12640  002748                     __end_of__div_to_l_:
 12641                           	opt stack 0
 12642                           tosu	equ	0xFFF
 12643                           tosh	equ	0xFFE
 12644                           tosl	equ	0xFFD
 12645                           pclath	equ	0xFFA
 12646                           tblptru	equ	0xFF8
 12647                           tblptrh	equ	0xFF7
 12648                           tblptrl	equ	0xFF6
 12649                           tablat	equ	0xFF5
 12650                           prodh	equ	0xFF4
 12651                           prodl	equ	0xFF3
 12652                           intcon	equ	0xFF2
 12653                           intcon2	equ	0xFF1
 12654                           postinc0	equ	0xFEE
 12655                           wreg	equ	0xFE8
 12656                           indf1	equ	0xFE7
 12657                           postdec1	equ	0xFE5
 12658                           fsr1h	equ	0xFE2
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           postdec2	equ	0xFDD
 12663                           fsr2h	equ	0xFDA
 12664                           fsr2l	equ	0xFD9
 12665                           status	equ	0xFD8
 12666                           
 12667 ;; *************** function ___llmod *****************
 12668 ;; Defined at:
 12669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12670 ;; Parameters:    Size  Location     Type
 12671 ;;  dividend        4   83[BANK0 ] unsigned long 
 12672 ;;  divisor         4   87[BANK0 ] unsigned long 
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;  counter         1   91[BANK0 ] unsigned char 
 12675 ;; Return value:  Size  Location     Type
 12676 ;;                  4   83[BANK0 ] unsigned long 
 12677 ;; Registers used:
 12678 ;;		wreg, status,2, status,0
 12679 ;; Tracked objects:
 12680 ;;		On entry : 0/0
 12681 ;;		On exit  : 0/0
 12682 ;;		Unchanged: 0/0
 12683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12684 ;;      Params:         0       8       0       0       0       0       0
 12685 ;;      Locals:         0       1       0       0       0       0       0
 12686 ;;      Temps:          0       0       0       0       0       0       0
 12687 ;;      Totals:         0       9       0       0       0       0       0
 12688 ;;Total ram usage:        9 bytes
 12689 ;; Hardware stack levels used:    1
 12690 ;; Hardware stack levels required when called:    3
 12691 ;; This function calls:
 12692 ;;		Nothing
 12693 ;; This function is called by:
 12694 ;;		_GroupRx
 12695 ;;		_GroupTx
 12696 ;;		_SetMcuRunTime
 12697 ;;		_sprintf
 12698 ;;		_DacSetValue
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           	psect	text41
 12703  003B38                     __ptext41:
 12704                           	opt stack 0
 12705  003B38                     ___llmod:
 12706                           	opt stack 25
 12707                           
 12708                           ;incstack = 0
 12709  003B38  0100               	movlb	0	; () banked
 12710  003B3A  51B7               	movf	___llmod@divisor& (0+255),w,b
 12711  003B3C  11B8               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12712  003B3E  11B9               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12713  003B40  11BA               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12714  003B42  B4D8               	btfsc	status,2,c
 12715  003B44  D024               	goto	l2136
 12716                           
 12717                           ; BSR set to: 0
 12718  003B46  0E01               	movlw	1
 12719  003B48  6FBB               	movwf	___llmod@counter& (0+255),b
 12720  003B4A  D006               	goto	l2131
 12721  003B4C                     
 12722                           ; BSR set to: 0
 12723                           
 12724                           ; BSR set to: 0
 12725  003B4C  90D8               	bcf	status,0,c
 12726  003B4E  37B7               	rlcf	___llmod@divisor& (0+255),f,b
 12727  003B50  37B8               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12728  003B52  37B9               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12729  003B54  37BA               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12730  003B56  2BBB               	incf	___llmod@counter& (0+255),f,b
 12731  003B58                     l2131:
 12732                           
 12733                           ; BSR set to: 0
 12734                           
 12735                           ; BSR set to: 0
 12736  003B58  AFBA               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12737  003B5A  D7F8               	goto	l2132
 12738  003B5C                     u8930:
 12739                           
 12740                           ; BSR set to: 0
 12741                           
 12742                           ; BSR set to: 0
 12743                           
 12744                           ; BSR set to: 0
 12745  003B5C  51B7               	movf	___llmod@divisor& (0+255),w,b
 12746  003B5E  5DB3               	subwf	___llmod@dividend& (0+255),w,b
 12747  003B60  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 12748  003B62  59B4               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12749  003B64  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 12750  003B66  59B5               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12751  003B68  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 12752  003B6A  59B6               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12753  003B6C  A0D8               	btfss	status,0,c
 12754  003B6E  D008               	goto	l2135
 12755                           
 12756                           ; BSR set to: 0
 12757  003B70  51B7               	movf	___llmod@divisor& (0+255),w,b
 12758  003B72  5FB3               	subwf	___llmod@dividend& (0+255),f,b
 12759  003B74  51B8               	movf	(___llmod@divisor+1)& (0+255),w,b
 12760  003B76  5BB4               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12761  003B78  51B9               	movf	(___llmod@divisor+2)& (0+255),w,b
 12762  003B7A  5BB5               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12763  003B7C  51BA               	movf	(___llmod@divisor+3)& (0+255),w,b
 12764  003B7E  5BB6               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12765  003B80                     l2135:
 12766                           
 12767                           ; BSR set to: 0
 12768                           
 12769                           ; BSR set to: 0
 12770  003B80  90D8               	bcf	status,0,c
 12771  003B82  33BA               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12772  003B84  33B9               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12773  003B86  33B8               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12774  003B88  33B7               	rrcf	___llmod@divisor& (0+255),f,b
 12775                           
 12776                           ; BSR set to: 0
 12777  003B8A  2FBB               	decfsz	___llmod@counter& (0+255),f,b
 12778  003B8C  D7E7               	goto	u8930
 12779  003B8E                     l2136:
 12780                           
 12781                           ; BSR set to: 0
 12782                           
 12783                           ; BSR set to: 0
 12784  003B8E  C0B3  F0B3         	movff	___llmod@dividend,?___llmod
 12785  003B92  C0B4  F0B4         	movff	___llmod@dividend+1,?___llmod+1
 12786  003B96  C0B5  F0B5         	movff	___llmod@dividend+2,?___llmod+2
 12787  003B9A  C0B6  F0B6         	movff	___llmod@dividend+3,?___llmod+3
 12788                           
 12789                           ; BSR set to: 0
 12790  003B9E  0012               	return		;funcret
 12791  003BA0                     __end_of___llmod:
 12792                           	opt stack 0
 12793                           tosu	equ	0xFFF
 12794                           tosh	equ	0xFFE
 12795                           tosl	equ	0xFFD
 12796                           pclath	equ	0xFFA
 12797                           tblptru	equ	0xFF8
 12798                           tblptrh	equ	0xFF7
 12799                           tblptrl	equ	0xFF6
 12800                           tablat	equ	0xFF5
 12801                           prodh	equ	0xFF4
 12802                           prodl	equ	0xFF3
 12803                           intcon	equ	0xFF2
 12804                           intcon2	equ	0xFF1
 12805                           postinc0	equ	0xFEE
 12806                           wreg	equ	0xFE8
 12807                           indf1	equ	0xFE7
 12808                           postdec1	equ	0xFE5
 12809                           fsr1h	equ	0xFE2
 12810                           fsr1l	equ	0xFE1
 12811                           indf2	equ	0xFDF
 12812                           postinc2	equ	0xFDE
 12813                           postdec2	equ	0xFDD
 12814                           fsr2h	equ	0xFDA
 12815                           fsr2l	equ	0xFD9
 12816                           status	equ	0xFD8
 12817                           
 12818 ;; *************** function ___lldiv *****************
 12819 ;; Defined at:
 12820 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  dividend        4   23[COMRAM] unsigned long 
 12823 ;;  divisor         4   27[COMRAM] unsigned long 
 12824 ;; Auto vars:     Size  Location     Type
 12825 ;;  quotient        4   31[COMRAM] unsigned long 
 12826 ;;  counter         1   35[COMRAM] unsigned char 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  4   23[COMRAM] unsigned long 
 12829 ;; Registers used:
 12830 ;;		wreg, status,2, status,0
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12836 ;;      Params:         8       0       0       0       0       0       0
 12837 ;;      Locals:         5       0       0       0       0       0       0
 12838 ;;      Temps:          0       0       0       0       0       0       0
 12839 ;;      Totals:        13       0       0       0       0       0       0
 12840 ;;Total ram usage:       13 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    3
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_sprintf
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           	psect	text42
 12851  003876                     __ptext42:
 12852                           	opt stack 0
 12853  003876                     ___lldiv:
 12854                           	opt stack 25
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;incstack = 0
 12858  003876  0E00               	movlw	0
 12859  003878  6E20               	movwf	___lldiv@quotient,c
 12860  00387A  0E00               	movlw	0
 12861  00387C  6E21               	movwf	___lldiv@quotient+1,c
 12862  00387E  0E00               	movlw	0
 12863  003880  6E22               	movwf	___lldiv@quotient+2,c
 12864  003882  0E00               	movlw	0
 12865  003884  6E23               	movwf	___lldiv@quotient+3,c
 12866  003886  501C               	movf	___lldiv@divisor,w,c
 12867  003888  101D               	iorwf	___lldiv@divisor+1,w,c
 12868  00388A  101E               	iorwf	___lldiv@divisor+2,w,c
 12869  00388C  101F               	iorwf	___lldiv@divisor+3,w,c
 12870  00388E  B4D8               	btfsc	status,2,c
 12871  003890  D02A               	goto	l2126
 12872  003892  0E01               	movlw	1
 12873  003894  6E24               	movwf	___lldiv@counter,c
 12874  003896  D006               	goto	l2121
 12875  003898  90D8               	bcf	status,0,c
 12876  00389A  361C               	rlcf	___lldiv@divisor,f,c
 12877  00389C  361D               	rlcf	___lldiv@divisor+1,f,c
 12878  00389E  361E               	rlcf	___lldiv@divisor+2,f,c
 12879  0038A0  361F               	rlcf	___lldiv@divisor+3,f,c
 12880  0038A2  2A24               	incf	___lldiv@counter,f,c
 12881  0038A4                     l2121:
 12882  0038A4  AE1F               	btfss	___lldiv@divisor+3,7,c
 12883  0038A6  D7F8               	goto	l2122
 12884  0038A8                     u8900:
 12885  0038A8  90D8               	bcf	status,0,c
 12886  0038AA  3620               	rlcf	___lldiv@quotient,f,c
 12887  0038AC  3621               	rlcf	___lldiv@quotient+1,f,c
 12888  0038AE  3622               	rlcf	___lldiv@quotient+2,f,c
 12889  0038B0  3623               	rlcf	___lldiv@quotient+3,f,c
 12890  0038B2  501C               	movf	___lldiv@divisor,w,c
 12891  0038B4  5C18               	subwf	___lldiv@dividend,w,c
 12892  0038B6  501D               	movf	___lldiv@divisor+1,w,c
 12893  0038B8  5819               	subwfb	___lldiv@dividend+1,w,c
 12894  0038BA  501E               	movf	___lldiv@divisor+2,w,c
 12895  0038BC  581A               	subwfb	___lldiv@dividend+2,w,c
 12896  0038BE  501F               	movf	___lldiv@divisor+3,w,c
 12897  0038C0  581B               	subwfb	___lldiv@dividend+3,w,c
 12898  0038C2  A0D8               	btfss	status,0,c
 12899  0038C4  D009               	goto	l2125
 12900  0038C6  501C               	movf	___lldiv@divisor,w,c
 12901  0038C8  5E18               	subwf	___lldiv@dividend,f,c
 12902  0038CA  501D               	movf	___lldiv@divisor+1,w,c
 12903  0038CC  5A19               	subwfb	___lldiv@dividend+1,f,c
 12904  0038CE  501E               	movf	___lldiv@divisor+2,w,c
 12905  0038D0  5A1A               	subwfb	___lldiv@dividend+2,f,c
 12906  0038D2  501F               	movf	___lldiv@divisor+3,w,c
 12907  0038D4  5A1B               	subwfb	___lldiv@dividend+3,f,c
 12908  0038D6  8020               	bsf	___lldiv@quotient,0,c
 12909  0038D8                     l2125:
 12910  0038D8  90D8               	bcf	status,0,c
 12911  0038DA  321F               	rrcf	___lldiv@divisor+3,f,c
 12912  0038DC  321E               	rrcf	___lldiv@divisor+2,f,c
 12913  0038DE  321D               	rrcf	___lldiv@divisor+1,f,c
 12914  0038E0  321C               	rrcf	___lldiv@divisor,f,c
 12915  0038E2  2E24               	decfsz	___lldiv@counter,f,c
 12916  0038E4  D7E1               	goto	u8900
 12917  0038E6                     l2126:
 12918  0038E6  C020  F018         	movff	___lldiv@quotient,?___lldiv
 12919  0038EA  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
 12920  0038EE  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
 12921  0038F2  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
 12922  0038F6  0012               	return		;funcret
 12923  0038F8                     __end_of___lldiv:
 12924                           	opt stack 0
 12925                           tosu	equ	0xFFF
 12926                           tosh	equ	0xFFE
 12927                           tosl	equ	0xFFD
 12928                           pclath	equ	0xFFA
 12929                           tblptru	equ	0xFF8
 12930                           tblptrh	equ	0xFF7
 12931                           tblptrl	equ	0xFF6
 12932                           tablat	equ	0xFF5
 12933                           prodh	equ	0xFF4
 12934                           prodl	equ	0xFF3
 12935                           intcon	equ	0xFF2
 12936                           intcon2	equ	0xFF1
 12937                           postinc0	equ	0xFEE
 12938                           wreg	equ	0xFE8
 12939                           indf1	equ	0xFE7
 12940                           postdec1	equ	0xFE5
 12941                           fsr1h	equ	0xFE2
 12942                           fsr1l	equ	0xFE1
 12943                           indf2	equ	0xFDF
 12944                           postinc2	equ	0xFDE
 12945                           postdec2	equ	0xFDD
 12946                           fsr2h	equ	0xFDA
 12947                           fsr2l	equ	0xFD9
 12948                           status	equ	0xFD8
 12949                           
 12950 ;; *************** function _UART_Write_Text *****************
 12951 ;; Defined at:
 12952 ;;		line 223 in file "EusartApp.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  text            2   24[COMRAM] PTR unsigned char 
 12955 ;;		 -> PrintTxStatus@dest(80), PrintRxStatus@dest(80), PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), 
 12956 ;;		 -> STR_13(10), STR_12(10), STR_11(10), readUartByte@dest(50), 
 12957 ;;		 -> STR_9(9), SampleSingleChannel@dest(50), STR_7(10), STR_6(34), 
 12958 ;;		 -> STR_5(32), STR_4(10), STR_3(29), STR_2(33), 
 12959 ;;		 -> STR_1(10), 
 12960 ;; Auto vars:     Size  Location     Type
 12961 ;;  i               2   28[COMRAM] int 
 12962 ;; Return value:  Size  Location     Type
 12963 ;;                  1    wreg      void 
 12964 ;; Registers used:
 12965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : 0/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12971 ;;      Params:         2       0       0       0       0       0       0
 12972 ;;      Locals:         2       0       0       0       0       0       0
 12973 ;;      Temps:          2       0       0       0       0       0       0
 12974 ;;      Totals:         6       0       0       0       0       0       0
 12975 ;;Total ram usage:        6 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:    4
 12978 ;; This function calls:
 12979 ;;		_EUSART1_Write
 12980 ;; This function is called by:
 12981 ;;		_AdcSingleSample
 12982 ;;		_SampleSingleChannel
 12983 ;;		_readUartByte
 12984 ;;		_SendUartSystemInitMessage
 12985 ;;		_PrintHelpScreen
 12986 ;;		_PrintRxStatus
 12987 ;;		_PrintTxStatus
 12988 ;; This function uses a non-reentrant model
 12989 ;;
 12990                           
 12991                           	psect	text43
 12992  0039E8                     __ptext43:
 12993                           	opt stack 0
 12994  0039E8                     _UART_Write_Text:
 12995                           	opt stack 25
 12996                           
 12997                           ;EusartApp.c: 225: for(int i =0;text[i]!='\0';i++)
 12998                           
 12999                           ;incstack = 0
 13000  0039E8  0E00               	movlw	0
 13001  0039EA  6E1E               	movwf	UART_Write_Text@i+1,c
 13002  0039EC  0E00               	movlw	0
 13003  0039EE  6E1D               	movwf	UART_Write_Text@i,c
 13004  0039F0  D01A               	goto	l321
 13005  0039F2                     
 13006                           ;EusartApp.c: 226: {
 13007                           ;EusartApp.c: 227: EUSART1_Write(text[i]);
 13008  0039F2  501D               	movf	UART_Write_Text@i,w,c
 13009  0039F4  2419               	addwf	UART_Write_Text@text,w,c
 13010  0039F6  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13011  0039F8  501E               	movf	UART_Write_Text@i+1,w,c
 13012  0039FA  201A               	addwfc	UART_Write_Text@text+1,w,c
 13013  0039FC  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13014  0039FE  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13015  003A02  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13016  003A06  6AF8               	clrf	tblptru,c
 13017  003A08  0E05               	movlw	(high __ramtop+-1)
 13018  003A0A  64F7               	cpfsgt	tblptrh,c
 13019  003A0C  D003               	bra	u9147
 13020  003A0E  0008               	tblrd		*
 13021  003A10  50F5               	movf	tablat,w,c
 13022  003A12  D005               	bra	u9140
 13023  003A14                     u9147:
 13024  003A14  CFF6 FFE9          	movff	tblptrl,fsr0l
 13025  003A18  CFF7 FFEA          	movff	tblptrh,fsr0h
 13026  003A1C  50EF               	movf	indf0,w,c
 13027  003A1E                     u9140:
 13028  003A1E  EC61  F020         	call	_EUSART1_Write
 13029  003A22  4A1D               	infsnz	UART_Write_Text@i,f,c
 13030  003A24  2A1E               	incf	UART_Write_Text@i+1,f,c
 13031  003A26                     l321:
 13032  003A26  501D               	movf	UART_Write_Text@i,w,c
 13033  003A28  2419               	addwf	UART_Write_Text@text,w,c
 13034  003A2A  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 13035  003A2C  501E               	movf	UART_Write_Text@i+1,w,c
 13036  003A2E  201A               	addwfc	UART_Write_Text@text+1,w,c
 13037  003A30  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 13038  003A32  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 13039  003A36  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 13040  003A3A  6AF8               	clrf	tblptru,c
 13041  003A3C  0E05               	movlw	(high __ramtop+-1)
 13042  003A3E  64F7               	cpfsgt	tblptrh,c
 13043  003A40  D003               	bra	u9157
 13044  003A42  0008               	tblrd		*
 13045  003A44  50F5               	movf	tablat,w,c
 13046  003A46  D005               	bra	u9150
 13047  003A48                     u9157:
 13048  003A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 13049  003A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13050  003A50  50EF               	movf	indf0,w,c
 13051  003A52                     u9150:
 13052  003A52  0900               	iorlw	0
 13053  003A54  B4D8               	btfsc	status,2,c
 13054  003A56  0012               	return	
 13055  003A58  D7CC               	goto	l322
 13056  003A5A                     __end_of_UART_Write_Text:
 13057                           	opt stack 0
 13058                           tosu	equ	0xFFF
 13059                           tosh	equ	0xFFE
 13060                           tosl	equ	0xFFD
 13061                           pclath	equ	0xFFA
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon2	equ	0xFF1
 13070                           indf0	equ	0xFEF
 13071                           postinc0	equ	0xFEE
 13072                           fsr0h	equ	0xFEA
 13073                           fsr0l	equ	0xFE9
 13074                           wreg	equ	0xFE8
 13075                           indf1	equ	0xFE7
 13076                           postdec1	equ	0xFE5
 13077                           fsr1h	equ	0xFE2
 13078                           fsr1l	equ	0xFE1
 13079                           indf2	equ	0xFDF
 13080                           postinc2	equ	0xFDE
 13081                           postdec2	equ	0xFDD
 13082                           fsr2h	equ	0xFDA
 13083                           fsr2l	equ	0xFD9
 13084                           status	equ	0xFD8
 13085                           
 13086 ;; *************** function _EUSART1_Write *****************
 13087 ;; Defined at:
 13088 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 13089 ;; Parameters:    Size  Location     Type
 13090 ;;  txData          1    wreg     unsigned char 
 13091 ;; Auto vars:     Size  Location     Type
 13092 ;;  txData          1   23[COMRAM] unsigned char 
 13093 ;; Return value:  Size  Location     Type
 13094 ;;                  1    wreg      void 
 13095 ;; Registers used:
 13096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13097 ;; Tracked objects:
 13098 ;;		On entry : 0/0
 13099 ;;		On exit  : 0/0
 13100 ;;		Unchanged: 0/0
 13101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13102 ;;      Params:         0       0       0       0       0       0       0
 13103 ;;      Locals:         1       0       0       0       0       0       0
 13104 ;;      Temps:          0       0       0       0       0       0       0
 13105 ;;      Totals:         1       0       0       0       0       0       0
 13106 ;;Total ram usage:        1 bytes
 13107 ;; Hardware stack levels used:    1
 13108 ;; Hardware stack levels required when called:    3
 13109 ;; This function calls:
 13110 ;;		Nothing
 13111 ;; This function is called by:
 13112 ;;		_UART_Write_Text
 13113 ;;		_WriteUartMessage
 13114 ;; This function uses a non-reentrant model
 13115 ;;
 13116                           
 13117                           	psect	text44
 13118  0040C2                     __ptext44:
 13119                           	opt stack 0
 13120  0040C2                     _EUSART1_Write:
 13121                           	opt stack 25
 13122                           
 13123                           ;incstack = 0
 13124                           ;EUSART1_Write@txData stored from wreg
 13125  0040C2  6E18               	movwf	EUSART1_Write@txData,c
 13126  0040C4                     
 13127                           ;eusart1.c: 160: {
 13128                           
 13129                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 13130  0040C4  0101               	movlb	1	; () banked
 13131  0040C6  51F3               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 13132  0040C8  B4D8               	btfsc	status,2,c
 13133  0040CA  D7FC               	goto	l8549
 13134                           
 13135                           ; BSR set to: 1
 13136                           ;eusart1.c: 161: }
 13137                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 13138  0040CC  B89D               	btfsc	3997,4,c	;volatile
 13139  0040CE  D003               	goto	l974
 13140                           
 13141                           ; BSR set to: 1
 13142                           ;eusart1.c: 164: {
 13143                           ;eusart1.c: 165: TXREG1 = txData;
 13144  0040D0  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 13145                           
 13146                           ;eusart1.c: 166: }
 13147  0040D4  D012               	goto	l975
 13148  0040D6                     l974:
 13149                           
 13150                           ; BSR set to: 1
 13151                           ;eusart1.c: 167: else
 13152                           ;eusart1.c: 168: {
 13153                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 13154  0040D6  989D               	bcf	3997,4,c	;volatile
 13155                           
 13156                           ; BSR set to: 1
 13157                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 13158  0040D8  503C               	movf	_eusart1TxHead,w,c	;volatile
 13159  0040DA  0D01               	mullw	1
 13160  0040DC  0E00               	movlw	low _eusart1TxBuffer
 13161  0040DE  24F3               	addwf	prodl,w,c
 13162  0040E0  6ED9               	movwf	fsr2l,c
 13163  0040E2  0E02               	movlw	high _eusart1TxBuffer
 13164  0040E4  20F4               	addwfc	prodh,w,c
 13165  0040E6  6EDA               	movwf	fsr2h,c
 13166  0040E8  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 13167                           
 13168                           ; BSR set to: 1
 13169  0040EC  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 13170                           
 13171                           ; BSR set to: 1
 13172                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 13173  0040EE  0E45               	movlw	69
 13174  0040F0  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 13175  0040F2  D002               	goto	l976
 13176                           
 13177                           ; BSR set to: 1
 13178                           ;eusart1.c: 172: {
 13179                           ;eusart1.c: 173: eusart1TxHead = 0;
 13180  0040F4  0E00               	movlw	0
 13181  0040F6  6E3C               	movwf	_eusart1TxHead,c	;volatile
 13182  0040F8                     l976:
 13183                           
 13184                           ; BSR set to: 1
 13185                           ;eusart1.c: 174: }
 13186                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 13187                           
 13188                           ; BSR set to: 1
 13189  0040F8  07F3               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 13190  0040FA                     l975:
 13191                           
 13192                           ; BSR set to: 1
 13193                           ;eusart1.c: 176: }
 13194                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 13195                           
 13196                           ; BSR set to: 1
 13197  0040FA  889D               	bsf	3997,4,c	;volatile
 13198                           
 13199                           ; BSR set to: 1
 13200  0040FC  0012               	return		;funcret
 13201  0040FE                     __end_of_EUSART1_Write:
 13202                           	opt stack 0
 13203                           tosu	equ	0xFFF
 13204                           tosh	equ	0xFFE
 13205                           tosl	equ	0xFFD
 13206                           pclath	equ	0xFFA
 13207                           tblptru	equ	0xFF8
 13208                           tblptrh	equ	0xFF7
 13209                           tblptrl	equ	0xFF6
 13210                           tablat	equ	0xFF5
 13211                           prodh	equ	0xFF4
 13212                           prodl	equ	0xFF3
 13213                           intcon	equ	0xFF2
 13214                           intcon2	equ	0xFF1
 13215                           indf0	equ	0xFEF
 13216                           postinc0	equ	0xFEE
 13217                           fsr0h	equ	0xFEA
 13218                           fsr0l	equ	0xFE9
 13219                           wreg	equ	0xFE8
 13220                           indf1	equ	0xFE7
 13221                           postdec1	equ	0xFE5
 13222                           fsr1h	equ	0xFE2
 13223                           fsr1l	equ	0xFE1
 13224                           indf2	equ	0xFDF
 13225                           postinc2	equ	0xFDE
 13226                           postdec2	equ	0xFDD
 13227                           fsr2h	equ	0xFDA
 13228                           fsr2l	equ	0xFD9
 13229                           status	equ	0xFD8
 13230                           
 13231 ;; *************** function _SampleAllChannels *****************
 13232 ;; Defined at:
 13233 ;;		line 122 in file "AdcApp.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;		None
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  _adcResult      2   86[BANK0 ] unsigned int 
 13238 ;;  adcRes          2   88[BANK0 ] unsigned int 
 13239 ;;  i               1   90[BANK0 ] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13249 ;;      Params:         0       0       0       0       0       0       0
 13250 ;;      Locals:         0       8       0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0
 13252 ;;      Totals:         0       8       0       0       0       0       0
 13253 ;;Total ram usage:        8 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    8
 13256 ;; This function calls:
 13257 ;;		_ADC_GetConversion
 13258 ;;		___ftdiv
 13259 ;;		___ftmul
 13260 ;;		___fttol
 13261 ;;		___lwtoft
 13262 ;;		_pow
 13263 ;; This function is called by:
 13264 ;;		_main
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           	psect	text45
 13269  002278                     __ptext45:
 13270                           	opt stack 0
 13271  002278                     _SampleAllChannels:
 13272                           	opt stack 22
 13273                           
 13274                           ;AdcApp.c: 124: uint16_t adcRes = 0x0;
 13275                           
 13276                           ; BSR set to: 1
 13277                           ;incstack = 0
 13278  002278  0E00               	movlw	0
 13279  00227A  0100               	movlb	0	; () banked
 13280  00227C  6FB9               	movwf	(SampleAllChannels@adcRes+1)& (0+255),b
 13281  00227E  0E00               	movlw	0
 13282  002280  6FB8               	movwf	SampleAllChannels@adcRes& (0+255),b
 13283                           
 13284                           ;AdcApp.c: 125: uint8_t i;
 13285                           ;AdcApp.c: 126: for (i=1;i<=4;i++)
 13286  002282  0E01               	movlw	1
 13287  002284  6FBA               	movwf	SampleAllChannels@i& (0+255),b
 13288  002286                     l9895:
 13289                           
 13290                           ; BSR set to: 0
 13291  002286  0E04               	movlw	4
 13292  002288  65BA               	cpfsgt	SampleAllChannels@i& (0+255),b
 13293  00228A  D001               	goto	l174
 13294  00228C  0012               	return	
 13295  00228E                     l174:
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;AdcApp.c: 127: {
 13299                           ;AdcApp.c: 128: adc_result_t _adcResult = ADC_GetConversion(channelArr[i]);
 13300                           
 13301                           ; BSR set to: 0
 13302  00228E  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13303  002290  0D01               	mullw	1
 13304  002292  0EBD               	movlw	low _channelArr
 13305  002294  24F3               	addwf	prodl,w,c
 13306  002296  6EF6               	movwf	tblptrl,c
 13307  002298  0E78               	movlw	high _channelArr
 13308  00229A  20F4               	addwfc	prodh,w,c
 13309  00229C  6EF7               	movwf	tblptrh,c
 13310  00229E                     	if	0	;There are less than 3 active tblptr bytes
 13311  00229E                     	endif
 13312  00229E  0008               	tblrd		*
 13313  0022A0  50F5               	movf	tablat,w,c
 13314  0022A2  EC78  F021         	call	_ADC_GetConversion
 13315  0022A6  C018  F0B6         	movff	?_ADC_GetConversion,SampleAllChannels@_adcResult
 13316  0022AA  C019  F0B7         	movff	?_ADC_GetConversion+1,SampleAllChannels@_adcResult+1
 13317                           
 13318                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13319  0022AE  0E00               	movlw	0
 13320  0022B0  0100               	movlb	0	; () banked
 13321  0022B2  6FA5               	movwf	pow@y& (0+255),b
 13322  0022B4  0E20               	movlw	32
 13323  0022B6  6FA6               	movwf	(pow@y+1)& (0+255),b
 13324  0022B8  0E41               	movlw	65
 13325  0022BA  6FA7               	movwf	(pow@y+2)& (0+255),b
 13326  0022BC  0E00               	movlw	0
 13327  0022BE  6FA2               	movwf	pow@x& (0+255),b
 13328  0022C0  0E00               	movlw	0
 13329  0022C2  6FA3               	movwf	(pow@x+1)& (0+255),b
 13330  0022C4  0E40               	movlw	64
 13331  0022C6  6FA4               	movwf	(pow@x+2)& (0+255),b
 13332  0022C8  ECC2  F00F         	call	_pow	;wreg free
 13333  0022CC  C0A2  F0B3         	movff	?_pow,_SampleAllChannels$3937
 13334  0022D0  C0A3  F0B4         	movff	?_pow+1,_SampleAllChannels$3937+1
 13335  0022D4  C0A4  F0B5         	movff	?_pow+2,_SampleAllChannels$3937+2
 13336                           
 13337                           ;AdcApp.c: 129: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13338  0022D8  0EC0               	movlw	192
 13339  0022DA  0100               	movlb	0	; () banked
 13340  0022DC  6F69               	movwf	___ftmul@f2& (0+255),b
 13341  0022DE  0E50               	movlw	80
 13342  0022E0  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 13343  0022E2  0E45               	movlw	69
 13344  0022E4  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 13345  0022E6  C0B3  F026         	movff	_SampleAllChannels$3937,___ftdiv@f2
 13346  0022EA  C0B4  F027         	movff	_SampleAllChannels$3937+1,___ftdiv@f2+1
 13347  0022EE  C0B5  F028         	movff	_SampleAllChannels$3937+2,___ftdiv@f2+2
 13348  0022F2  C0B6  F020         	movff	SampleAllChannels@_adcResult,___lwtoft@c
 13349  0022F6  C0B7  F021         	movff	SampleAllChannels@_adcResult+1,___lwtoft@c+1
 13350  0022FA  ECF2  F021         	call	___lwtoft	;wreg free
 13351  0022FE  C020  F023         	movff	?___lwtoft,___ftdiv@f1
 13352  002302  C021  F024         	movff	?___lwtoft+1,___ftdiv@f1+1
 13353  002306  C022  F025         	movff	?___lwtoft+2,___ftdiv@f1+2
 13354  00230A  ECDB  F016         	call	___ftdiv	;wreg free
 13355  00230E  C023  F066         	movff	?___ftdiv,___ftmul@f1
 13356  002312  C024  F067         	movff	?___ftdiv+1,___ftmul@f1+1
 13357  002316  C025  F068         	movff	?___ftdiv+2,___ftmul@f1+2
 13358  00231A  EC60  F016         	call	___ftmul	;wreg free
 13359  00231E  C066  F079         	movff	?___ftmul,___fttol@f1
 13360  002322  C067  F07A         	movff	?___ftmul+1,___fttol@f1+1
 13361  002326  C068  F07B         	movff	?___ftmul+2,___fttol@f1+2
 13362  00232A  ECE4  F015         	call	___fttol	;wreg free
 13363  00232E  C079  F0B8         	movff	?___fttol,SampleAllChannels@adcRes
 13364  002332  C07A  F0B9         	movff	?___fttol+1,SampleAllChannels@adcRes+1
 13365                           
 13366                           ;AdcApp.c: 130: if(channelArr[i] == 0x6) lastAdcTemp = adcRes;
 13367  002336  0100               	movlb	0	; () banked
 13368  002338  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13369  00233A  0D01               	mullw	1
 13370  00233C  0EBD               	movlw	low _channelArr
 13371  00233E  24F3               	addwf	prodl,w,c
 13372  002340  6EF6               	movwf	tblptrl,c
 13373  002342  0E78               	movlw	high _channelArr
 13374  002344  20F4               	addwfc	prodh,w,c
 13375  002346  6EF7               	movwf	tblptrh,c
 13376  002348                     	if	0	;There are less than 3 active tblptr bytes
 13377  002348                     	endif
 13378  002348  0008               	tblrd		*
 13379  00234A  50F5               	movf	tablat,w,c
 13380  00234C  0A06               	xorlw	6
 13381  00234E  A4D8               	btfss	status,2,c
 13382  002350  D004               	goto	l176
 13383                           
 13384                           ; BSR set to: 0
 13385  002352  C0B8  F1DE         	movff	SampleAllChannels@adcRes,_lastAdcTemp	;volatile
 13386  002356  C0B9  F1DF         	movff	SampleAllChannels@adcRes+1,_lastAdcTemp+1	;volatile
 13387  00235A                     l176:
 13388                           
 13389                           ; BSR set to: 0
 13390                           ;AdcApp.c: 131: if(channelArr[i] == 0x5) lastAdcFfwrRSSI = adcRes;
 13391                           
 13392                           ; BSR set to: 0
 13393  00235A  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13394  00235C  0D01               	mullw	1
 13395  00235E  0EBD               	movlw	low _channelArr
 13396  002360  24F3               	addwf	prodl,w,c
 13397  002362  6EF6               	movwf	tblptrl,c
 13398  002364  0E78               	movlw	high _channelArr
 13399  002366  20F4               	addwfc	prodh,w,c
 13400  002368  6EF7               	movwf	tblptrh,c
 13401  00236A                     	if	0	;There are less than 3 active tblptr bytes
 13402  00236A                     	endif
 13403  00236A  0008               	tblrd		*
 13404  00236C  50F5               	movf	tablat,w,c
 13405  00236E  0A05               	xorlw	5
 13406  002370  A4D8               	btfss	status,2,c
 13407  002372  D004               	goto	l177
 13408                           
 13409                           ; BSR set to: 0
 13410  002374  C0B8  F1DC         	movff	SampleAllChannels@adcRes,_lastAdcFfwrRSSI	;volatile
 13411  002378  C0B9  F1DD         	movff	SampleAllChannels@adcRes+1,_lastAdcFfwrRSSI+1	;volatile
 13412  00237C                     l177:
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;AdcApp.c: 132: if(channelArr[i] == 0x4) lastAdcRREV = adcRes;
 13416                           
 13417                           ; BSR set to: 0
 13418  00237C  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13419  00237E  0D01               	mullw	1
 13420  002380  0EBD               	movlw	low _channelArr
 13421  002382  24F3               	addwf	prodl,w,c
 13422  002384  6EF6               	movwf	tblptrl,c
 13423  002386  0E78               	movlw	high _channelArr
 13424  002388  20F4               	addwfc	prodh,w,c
 13425  00238A  6EF7               	movwf	tblptrh,c
 13426  00238C                     	if	0	;There are less than 3 active tblptr bytes
 13427  00238C                     	endif
 13428  00238C  0008               	tblrd		*
 13429  00238E  50F5               	movf	tablat,w,c
 13430  002390  0A04               	xorlw	4
 13431  002392  A4D8               	btfss	status,2,c
 13432  002394  D004               	goto	l178
 13433                           
 13434                           ; BSR set to: 0
 13435  002396  C0B8  F1DA         	movff	SampleAllChannels@adcRes,_lastAdcRREV	;volatile
 13436  00239A  C0B9  F1DB         	movff	SampleAllChannels@adcRes+1,_lastAdcRREV+1	;volatile
 13437  00239E                     l178:
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;AdcApp.c: 133: if(channelArr[i] == 0x7) lastAdcVgMon = adcRes;
 13441                           
 13442                           ; BSR set to: 0
 13443  00239E  51BA               	movf	SampleAllChannels@i& (0+255),w,b
 13444  0023A0  0D01               	mullw	1
 13445  0023A2  0EBD               	movlw	low _channelArr
 13446  0023A4  24F3               	addwf	prodl,w,c
 13447  0023A6  6EF6               	movwf	tblptrl,c
 13448  0023A8  0E78               	movlw	high _channelArr
 13449  0023AA  20F4               	addwfc	prodh,w,c
 13450  0023AC  6EF7               	movwf	tblptrh,c
 13451  0023AE                     	if	0	;There are less than 3 active tblptr bytes
 13452  0023AE                     	endif
 13453  0023AE  0008               	tblrd		*
 13454  0023B0  50F5               	movf	tablat,w,c
 13455  0023B2  0A07               	xorlw	7
 13456  0023B4  A4D8               	btfss	status,2,c
 13457  0023B6  D004               	goto	l179
 13458                           
 13459                           ; BSR set to: 0
 13460  0023B8  C0B8  F1D8         	movff	SampleAllChannels@adcRes,_lastAdcVgMon	;volatile
 13461  0023BC  C0B9  F1D9         	movff	SampleAllChannels@adcRes+1,_lastAdcVgMon+1	;volatile
 13462  0023C0                     l179:
 13463                           
 13464                           ; BSR set to: 0
 13465                           
 13466                           ; BSR set to: 0
 13467  0023C0  2BBA               	incf	SampleAllChannels@i& (0+255),f,b
 13468  0023C2  D761               	goto	l9895
 13469  0023C4                     __end_of_SampleAllChannels:
 13470                           	opt stack 0
 13471                           tosu	equ	0xFFF
 13472                           tosh	equ	0xFFE
 13473                           tosl	equ	0xFFD
 13474                           pclath	equ	0xFFA
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           intcon	equ	0xFF2
 13482                           intcon2	equ	0xFF1
 13483                           indf0	equ	0xFEF
 13484                           postinc0	equ	0xFEE
 13485                           fsr0h	equ	0xFEA
 13486                           fsr0l	equ	0xFE9
 13487                           wreg	equ	0xFE8
 13488                           indf1	equ	0xFE7
 13489                           postdec1	equ	0xFE5
 13490                           fsr1h	equ	0xFE2
 13491                           fsr1l	equ	0xFE1
 13492                           indf2	equ	0xFDF
 13493                           postinc2	equ	0xFDE
 13494                           postdec2	equ	0xFDD
 13495                           fsr2h	equ	0xFDA
 13496                           fsr2l	equ	0xFD9
 13497                           status	equ	0xFD8
 13498                           
 13499 ;; *************** function ___lwtoft *****************
 13500 ;; Defined at:
 13501 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13502 ;; Parameters:    Size  Location     Type
 13503 ;;  c               2   31[COMRAM] unsigned int 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;		None
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  3   31[COMRAM] float 
 13508 ;; Registers used:
 13509 ;;		wreg, status,2, status,0, cstack
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13515 ;;      Params:         3       0       0       0       0       0       0
 13516 ;;      Locals:         0       0       0       0       0       0       0
 13517 ;;      Temps:          0       0       0       0       0       0       0
 13518 ;;      Totals:         3       0       0       0       0       0       0
 13519 ;;Total ram usage:        3 bytes
 13520 ;; Hardware stack levels used:    1
 13521 ;; Hardware stack levels required when called:    4
 13522 ;; This function calls:
 13523 ;;		___ftpack
 13524 ;; This function is called by:
 13525 ;;		_SampleSingleChannel
 13526 ;;		_SampleAllChannels
 13527 ;;		_CollectRxStatusParams
 13528 ;;		_CollectTxStatusParams
 13529 ;;		_DacAnalogToDigitalSpi
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text46
 13534  0043E4                     __ptext46:
 13535                           	opt stack 0
 13536  0043E4                     ___lwtoft:
 13537                           	opt stack 23
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;incstack = 0
 13541  0043E4  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 13542  0043E8  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 13543  0043EC  6A1A               	clrf	___ftpack@arg+2,c
 13544  0043EE  0E8E               	movlw	142
 13545  0043F0  6E1B               	movwf	___ftpack@exp,c
 13546  0043F2  0E00               	movlw	0
 13547  0043F4  6E1C               	movwf	___ftpack@sign,c
 13548  0043F6  EC32  F01A         	call	___ftpack	;wreg free
 13549  0043FA  C018  F020         	movff	?___ftpack,?___lwtoft
 13550  0043FE  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 13551  004402  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 13552  004406  0012               	return	
 13553  004408                     __end_of___lwtoft:
 13554                           	opt stack 0
 13555                           tosu	equ	0xFFF
 13556                           tosh	equ	0xFFE
 13557                           tosl	equ	0xFFD
 13558                           pclath	equ	0xFFA
 13559                           tblptru	equ	0xFF8
 13560                           tblptrh	equ	0xFF7
 13561                           tblptrl	equ	0xFF6
 13562                           tablat	equ	0xFF5
 13563                           prodh	equ	0xFF4
 13564                           prodl	equ	0xFF3
 13565                           intcon	equ	0xFF2
 13566                           intcon2	equ	0xFF1
 13567                           indf0	equ	0xFEF
 13568                           postinc0	equ	0xFEE
 13569                           fsr0h	equ	0xFEA
 13570                           fsr0l	equ	0xFE9
 13571                           wreg	equ	0xFE8
 13572                           indf1	equ	0xFE7
 13573                           postdec1	equ	0xFE5
 13574                           fsr1h	equ	0xFE2
 13575                           fsr1l	equ	0xFE1
 13576                           indf2	equ	0xFDF
 13577                           postinc2	equ	0xFDE
 13578                           postdec2	equ	0xFDD
 13579                           fsr2h	equ	0xFDA
 13580                           fsr2l	equ	0xFD9
 13581                           status	equ	0xFD8
 13582                           
 13583 ;; *************** function _ADC_GetConversion *****************
 13584 ;; Defined at:
 13585 ;;		line 106 in file "mcc_generated_files/adc.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;  channel         1    wreg     enum E6975
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  channel         1   27[COMRAM] enum E6975
 13590 ;; Return value:  Size  Location     Type
 13591 ;;                  2   23[COMRAM] unsigned int 
 13592 ;; Registers used:
 13593 ;;		wreg, status,2, status,0
 13594 ;; Tracked objects:
 13595 ;;		On entry : 0/0
 13596 ;;		On exit  : 0/0
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13599 ;;      Params:         2       0       0       0       0       0       0
 13600 ;;      Locals:         1       0       0       0       0       0       0
 13601 ;;      Temps:          2       0       0       0       0       0       0
 13602 ;;      Totals:         5       0       0       0       0       0       0
 13603 ;;Total ram usage:        5 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    3
 13606 ;; This function calls:
 13607 ;;		Nothing
 13608 ;; This function is called by:
 13609 ;;		_SampleSingleChannel
 13610 ;;		_SampleAllChannels
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           	psect	text47
 13615  0042F0                     __ptext47:
 13616                           	opt stack 0
 13617  0042F0                     _ADC_GetConversion:
 13618                           	opt stack 26
 13619                           
 13620                           ;incstack = 0
 13621                           ;ADC_GetConversion@channel stored from wreg
 13622  0042F0  6E1C               	movwf	ADC_GetConversion@channel,c
 13623                           
 13624                           ;adc.c: 109: ADCON0bits.CHS = channel;
 13625  0042F2  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 13626  0042F6  461A               	rlncf	??_ADC_GetConversion,f,c
 13627  0042F8  461A               	rlncf	??_ADC_GetConversion,f,c
 13628  0042FA  50C2               	movf	4034,w,c	;volatile
 13629  0042FC  181A               	xorwf	??_ADC_GetConversion,w,c
 13630  0042FE  0B83               	andlw	-125
 13631  004300  181A               	xorwf	??_ADC_GetConversion,w,c
 13632  004302  6EC2               	movwf	4034,c	;volatile
 13633                           
 13634                           ;adc.c: 112: ADCON0bits.ADON = 1;
 13635  004304  80C2               	bsf	4034,0,c	;volatile
 13636                           
 13637                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 13638  004306  82C2               	bsf	4034,1,c	;volatile
 13639  004308                     
 13640                           ;adc.c: 119: {
 13641  004308  B2C2               	btfsc	4034,1,c	;volatile
 13642  00430A  D7FE               	goto	l1187
 13643                           
 13644                           ;adc.c: 120: }
 13645                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 13646  00430C  50C4               	movf	4036,w,c	;volatile
 13647  00430E  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 13648  004310  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 13649  004312  50C3               	movf	4035,w,c	;volatile
 13650  004314  241A               	addwf	??_ADC_GetConversion,w,c
 13651  004316  6E18               	movwf	?_ADC_GetConversion,c
 13652  004318  0E00               	movlw	0
 13653  00431A  201B               	addwfc	??_ADC_GetConversion+1,w,c
 13654  00431C  6E19               	movwf	?_ADC_GetConversion+1,c
 13655  00431E  0012               	return	
 13656  004320                     __end_of_ADC_GetConversion:
 13657                           	opt stack 0
 13658                           tosu	equ	0xFFF
 13659                           tosh	equ	0xFFE
 13660                           tosl	equ	0xFFD
 13661                           pclath	equ	0xFFA
 13662                           tblptru	equ	0xFF8
 13663                           tblptrh	equ	0xFF7
 13664                           tblptrl	equ	0xFF6
 13665                           tablat	equ	0xFF5
 13666                           prodh	equ	0xFF4
 13667                           prodl	equ	0xFF3
 13668                           intcon	equ	0xFF2
 13669                           intcon2	equ	0xFF1
 13670                           indf0	equ	0xFEF
 13671                           postinc0	equ	0xFEE
 13672                           fsr0h	equ	0xFEA
 13673                           fsr0l	equ	0xFE9
 13674                           wreg	equ	0xFE8
 13675                           indf1	equ	0xFE7
 13676                           postdec1	equ	0xFE5
 13677                           fsr1h	equ	0xFE2
 13678                           fsr1l	equ	0xFE1
 13679                           indf2	equ	0xFDF
 13680                           postinc2	equ	0xFDE
 13681                           postdec2	equ	0xFDD
 13682                           fsr2h	equ	0xFDA
 13683                           fsr2l	equ	0xFD9
 13684                           status	equ	0xFD8
 13685                           
 13686 ;; *************** function _InitSystemApplicationManagers *****************
 13687 ;; Defined at:
 13688 ;;		line 33 in file "SystemSettings.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;		None
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;		None
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      void 
 13695 ;; Registers used:
 13696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13702 ;;      Params:         0       0       0       0       0       0       0
 13703 ;;      Locals:         0       0       0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0
 13705 ;;      Totals:         0       0       0       0       0       0       0
 13706 ;;Total ram usage:        0 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:   10
 13709 ;; This function calls:
 13710 ;;		_ClearMcuRunTime
 13711 ;;		_DacInit
 13712 ;;		_InitAdcApplicationMgr
 13713 ;;		_PLLInitialize
 13714 ;;		_TMR0_StartTimer
 13715 ;; This function is called by:
 13716 ;;		_main
 13717 ;; This function uses a non-reentrant model
 13718 ;;
 13719                           
 13720                           	psect	text48
 13721  0044EA                     __ptext48:
 13722                           	opt stack 0
 13723  0044EA                     _InitSystemApplicationManagers:
 13724                           	opt stack 20
 13725                           
 13726                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 13727                           
 13728                           ;incstack = 0
 13729  0044EA  ECC1  F022         	call	_InitAdcApplicationMgr	;wreg free
 13730                           
 13731                           ;SystemSettings.c: 39: TMR0_StartTimer();
 13732  0044EE  ECCB  F022         	call	_TMR0_StartTimer	;wreg free
 13733                           
 13734                           ;SystemSettings.c: 42: PLLInitialize();
 13735  0044F2  ECFD  F00E         	call	_PLLInitialize	;wreg free
 13736                           
 13737                           ;SystemSettings.c: 45: ClearMcuRunTime();
 13738  0044F6  EC94  F022         	call	_ClearMcuRunTime	;wreg free
 13739                           
 13740                           ;SystemSettings.c: 48: DacInit();
 13741  0044FA  ECC2  F017         	call	_DacInit	;wreg free
 13742  0044FE  0012               	return		;funcret
 13743  004500                     __end_of_InitSystemApplicationManagers:
 13744                           	opt stack 0
 13745                           tosu	equ	0xFFF
 13746                           tosh	equ	0xFFE
 13747                           tosl	equ	0xFFD
 13748                           pclath	equ	0xFFA
 13749                           tblptru	equ	0xFF8
 13750                           tblptrh	equ	0xFF7
 13751                           tblptrl	equ	0xFF6
 13752                           tablat	equ	0xFF5
 13753                           prodh	equ	0xFF4
 13754                           prodl	equ	0xFF3
 13755                           intcon	equ	0xFF2
 13756                           intcon2	equ	0xFF1
 13757                           indf0	equ	0xFEF
 13758                           postinc0	equ	0xFEE
 13759                           fsr0h	equ	0xFEA
 13760                           fsr0l	equ	0xFE9
 13761                           wreg	equ	0xFE8
 13762                           indf1	equ	0xFE7
 13763                           postdec1	equ	0xFE5
 13764                           fsr1h	equ	0xFE2
 13765                           fsr1l	equ	0xFE1
 13766                           indf2	equ	0xFDF
 13767                           postinc2	equ	0xFDE
 13768                           postdec2	equ	0xFDD
 13769                           fsr2h	equ	0xFDA
 13770                           fsr2l	equ	0xFD9
 13771                           status	equ	0xFD8
 13772                           
 13773 ;; *************** function _TMR0_StartTimer *****************
 13774 ;; Defined at:
 13775 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;		None
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;		None
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  1    wreg      void 
 13782 ;; Registers used:
 13783 ;;		None
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13789 ;;      Params:         0       0       0       0       0       0       0
 13790 ;;      Locals:         0       0       0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0
 13792 ;;      Totals:         0       0       0       0       0       0       0
 13793 ;;Total ram usage:        0 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    3
 13796 ;; This function calls:
 13797 ;;		Nothing
 13798 ;; This function is called by:
 13799 ;;		_InitSystemApplicationManagers
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           	psect	text49
 13804  004596                     __ptext49:
 13805                           	opt stack 0
 13806  004596                     _TMR0_StartTimer:
 13807                           	opt stack 26
 13808                           
 13809                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 13810                           
 13811                           ;incstack = 0
 13812  004596  8ED5               	bsf	4053,7,c	;volatile
 13813  004598  0012               	return		;funcret
 13814  00459A                     __end_of_TMR0_StartTimer:
 13815                           	opt stack 0
 13816                           tosu	equ	0xFFF
 13817                           tosh	equ	0xFFE
 13818                           tosl	equ	0xFFD
 13819                           pclath	equ	0xFFA
 13820                           tblptru	equ	0xFF8
 13821                           tblptrh	equ	0xFF7
 13822                           tblptrl	equ	0xFF6
 13823                           tablat	equ	0xFF5
 13824                           prodh	equ	0xFF4
 13825                           prodl	equ	0xFF3
 13826                           intcon	equ	0xFF2
 13827                           intcon2	equ	0xFF1
 13828                           indf0	equ	0xFEF
 13829                           postinc0	equ	0xFEE
 13830                           fsr0h	equ	0xFEA
 13831                           fsr0l	equ	0xFE9
 13832                           wreg	equ	0xFE8
 13833                           indf1	equ	0xFE7
 13834                           postdec1	equ	0xFE5
 13835                           fsr1h	equ	0xFE2
 13836                           fsr1l	equ	0xFE1
 13837                           indf2	equ	0xFDF
 13838                           postinc2	equ	0xFDE
 13839                           postdec2	equ	0xFDD
 13840                           fsr2h	equ	0xFDA
 13841                           fsr2l	equ	0xFD9
 13842                           status	equ	0xFD8
 13843                           
 13844 ;; *************** function _PLLInitialize *****************
 13845 ;; Defined at:
 13846 ;;		line 19 in file "SyntApp.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;		None
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  idx             2   42[BANK0 ] int 
 13851 ;;  idx             2   40[BANK0 ] int 
 13852 ;; Return value:  Size  Location     Type
 13853 ;;                  1    wreg      void 
 13854 ;; Registers used:
 13855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13861 ;;      Params:         0       0       0       0       0       0       0
 13862 ;;      Locals:         0       4       0       0       0       0       0
 13863 ;;      Temps:          0       2       0       0       0       0       0
 13864 ;;      Totals:         0       6       0       0       0       0       0
 13865 ;;Total ram usage:        6 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    7
 13868 ;; This function calls:
 13869 ;;		_SWSPI_send_word
 13870 ;;		_SwSpi_Set_CE_Pin
 13871 ;; This function is called by:
 13872 ;;		_InitSystemApplicationManagers
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text50
 13877  001DFA                     __ptext50:
 13878                           	opt stack 0
 13879  001DFA                     _PLLInitialize:
 13880                           	opt stack 22
 13881                           
 13882                           ;SyntApp.c: 22: IOCB = 0b10000000;
 13883                           
 13884                           ;incstack = 0
 13885  001DFA  0E80               	movlw	128
 13886  001DFC  6E62               	movwf	3938,c	;volatile
 13887                           
 13888                           ;SyntApp.c: 25: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
 13889  001DFE  0E01               	movlw	1
 13890  001E00  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 13891  001E02  0E00               	movlw	0
 13892  001E04  EC7F  F020         	call	_SwSpi_Set_CE_Pin
 13893                           
 13894                           ;SyntApp.c: 29: for(int idx = 0; idx < 13; idx++)
 13895  001E08  0E00               	movlw	0
 13896  001E0A  0100               	movlb	0	; () banked
 13897  001E0C  6F89               	movwf	(PLLInitialize@idx+1)& (0+255),b
 13898  001E0E  0E00               	movlw	0
 13899  001E10  6F88               	movwf	PLLInitialize@idx& (0+255),b
 13900  001E12                     l9777:
 13901                           
 13902                           ; BSR set to: 0
 13903  001E12  BF89               	btfsc	(PLLInitialize@idx+1)& (0+255),7,b
 13904  001E14  D006               	goto	l607
 13905  001E16  5189               	movf	(PLLInitialize@idx+1)& (0+255),w,b
 13906  001E18  E129               	bnz	l9787
 13907  001E1A  0E0D               	movlw	13
 13908  001E1C  5D88               	subwf	PLLInitialize@idx& (0+255),w,b
 13909  001E1E  B0D8               	btfsc	status,0,c
 13910  001E20  D025               	goto	u10160
 13911  001E22                     l607:
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;SyntApp.c: 30: {
 13915                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, TEST_PLL_REGISTERS[idx], 3);
 13916                           
 13917                           ; BSR set to: 0
 13918  001E22  C088  F086         	movff	PLLInitialize@idx,??_PLLInitialize
 13919  001E26  C089  F087         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
 13920  001E2A  90D8               	bcf	status,0,c
 13921  001E2C  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13922  001E2E  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13923  001E30  90D8               	bcf	status,0,c
 13924  001E32  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13925  001E34  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13926  001E36  0ED3               	movlw	low _TEST_PLL_REGISTERS
 13927  001E38  2586               	addwf	??_PLLInitialize& (0+255),w,b
 13928  001E3A  6EF6               	movwf	tblptrl,c
 13929  001E3C  0E77               	movlw	high _TEST_PLL_REGISTERS
 13930  001E3E  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 13931  001E40  6EF7               	movwf	tblptrh,c
 13932  001E42                     	if	0	;There are less than 3 active tblptr bytes
 13933  001E42                     	endif
 13934  001E42  0009               	tblrd		*+
 13935  001E44  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 13936  001E48  0009               	tblrd		*+
 13937  001E4A  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 13938  001E4E  0009               	tblrd		*+
 13939  001E50  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 13940  001E54  000A               	tblrd		*-
 13941  001E56  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 13942  001E5A  0E03               	movlw	3
 13943  001E5C  6E2C               	movwf	SWSPI_send_word@dataSize,c
 13944  001E5E  0E00               	movlw	0
 13945  001E60  EC89  F01A         	call	_SWSPI_send_word
 13946  001E64  0100               	movlb	0	; () banked
 13947  001E66  4B88               	infsnz	PLLInitialize@idx& (0+255),f,b
 13948  001E68  2B89               	incf	(PLLInitialize@idx+1)& (0+255),f,b
 13949  001E6A  D7D3               	goto	l9777
 13950  001E6C                     u10160:
 13951  001E6C                     l9787:
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;SyntApp.c: 32: }
 13955                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
 13956  001E6C  0E01               	movlw	1
 13957  001E6E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 13958  001E70  0E01               	movlw	1
 13959  001E72  EC7F  F020         	call	_SwSpi_Set_CE_Pin
 13960                           
 13961                           ;SyntApp.c: 44: for(int idx = 0; idx < 13; idx++)
 13962  001E76  0E00               	movlw	0
 13963  001E78  0100               	movlb	0	; () banked
 13964  001E7A  6F8B               	movwf	(PLLInitialize@idx_943+1)& (0+255),b
 13965  001E7C  0E00               	movlw	0
 13966  001E7E  6F8A               	movwf	PLLInitialize@idx_943& (0+255),b
 13967  001E80                     l9791:
 13968                           
 13969                           ; BSR set to: 0
 13970  001E80  BF8B               	btfsc	(PLLInitialize@idx_943+1)& (0+255),7,b
 13971  001E82  D006               	goto	l609
 13972  001E84  518B               	movf	(PLLInitialize@idx_943+1)& (0+255),w,b
 13973  001E86  E129               	bnz	l9801
 13974  001E88  0E0D               	movlw	13
 13975  001E8A  5D8A               	subwf	PLLInitialize@idx_943& (0+255),w,b
 13976  001E8C  B0D8               	btfsc	status,0,c
 13977  001E8E  D025               	goto	u10180
 13978  001E90                     l609:
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;SyntApp.c: 45: {
 13982                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
 13983                           
 13984                           ; BSR set to: 0
 13985  001E90  C08A  F086         	movff	PLLInitialize@idx_943,??_PLLInitialize
 13986  001E94  C08B  F087         	movff	PLLInitialize@idx_943+1,??_PLLInitialize+1
 13987  001E98  90D8               	bcf	status,0,c
 13988  001E9A  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13989  001E9C  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13990  001E9E  90D8               	bcf	status,0,c
 13991  001EA0  3786               	rlcf	??_PLLInitialize& (0+255),f,b
 13992  001EA2  3787               	rlcf	(??_PLLInitialize+1)& (0+255),f,b
 13993  001EA4  0E07               	movlw	low _PLL_INIT_REGISTERS
 13994  001EA6  2586               	addwf	??_PLLInitialize& (0+255),w,b
 13995  001EA8  6EF6               	movwf	tblptrl,c
 13996  001EAA  0E78               	movlw	high _PLL_INIT_REGISTERS
 13997  001EAC  2187               	addwfc	(??_PLLInitialize+1)& (0+255),w,b
 13998  001EAE  6EF7               	movwf	tblptrh,c
 13999  001EB0                     	if	0	;There are less than 3 active tblptr bytes
 14000  001EB0                     	endif
 14001  001EB0  0009               	tblrd		*+
 14002  001EB2  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14003  001EB6  0009               	tblrd		*+
 14004  001EB8  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14005  001EBC  0009               	tblrd		*+
 14006  001EBE  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14007  001EC2  000A               	tblrd		*-
 14008  001EC4  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14009  001EC8  0E03               	movlw	3
 14010  001ECA  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14011  001ECC  0E01               	movlw	1
 14012  001ECE  EC89  F01A         	call	_SWSPI_send_word
 14013  001ED2  0100               	movlb	0	; () banked
 14014  001ED4  4B8A               	infsnz	PLLInitialize@idx_943& (0+255),f,b
 14015  001ED6  2B8B               	incf	(PLLInitialize@idx_943+1)& (0+255),f,b
 14016  001ED8  D7D3               	goto	l9791
 14017  001EDA                     u10180:
 14018  001EDA                     l9801:
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;SyntApp.c: 47: }
 14022                           ;SyntApp.c: 50: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
 14023  001EDA  0E17               	movlw	low (_PLL_INIT_REGISTERS+16)
 14024  001EDC  6EF6               	movwf	tblptrl,c
 14025  001EDE  0E78               	movlw	high (_PLL_INIT_REGISTERS+16)
 14026  001EE0  6EF7               	movwf	tblptrh,c
 14027  001EE2                     	if	0	;tblptru may be non-zero
 14028  001EE2                     	endif
 14029  001EE2                     	if	0	;tblptru may be non-zero
 14030  001EE2                     	endif
 14031  001EE2  0009               	tblrd		*+
 14032  001EE4  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14033  001EE8  0009               	tblrd		*+
 14034  001EEA  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14035  001EEE  0009               	tblrd		*+
 14036  001EF0  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14037  001EF4  000A               	tblrd		*-
 14038  001EF6  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14039  001EFA  0E03               	movlw	3
 14040  001EFC  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14041  001EFE  0E01               	movlw	1
 14042  001F00  EC89  F01A         	call	_SWSPI_send_word
 14043                           
 14044                           ;SyntApp.c: 51: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
 14045  001F04  0E0F               	movlw	low (_PLL_INIT_REGISTERS+8)
 14046  001F06  6EF6               	movwf	tblptrl,c
 14047  001F08  0E78               	movlw	high (_PLL_INIT_REGISTERS+8)
 14048  001F0A  6EF7               	movwf	tblptrh,c
 14049  001F0C                     	if	0	;tblptru may be non-zero
 14050  001F0C                     	endif
 14051  001F0C                     	if	0	;tblptru may be non-zero
 14052  001F0C                     	endif
 14053  001F0C  0009               	tblrd		*+
 14054  001F0E  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14055  001F12  0009               	tblrd		*+
 14056  001F14  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14057  001F18  0009               	tblrd		*+
 14058  001F1A  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14059  001F1E  000A               	tblrd		*-
 14060  001F20  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14061  001F24  0E03               	movlw	3
 14062  001F26  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14063  001F28  0E01               	movlw	1
 14064  001F2A  EC89  F01A         	call	_SWSPI_send_word
 14065                           
 14066                           ;SyntApp.c: 52: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
 14067  001F2E  0E0B               	movlw	low (_PLL_INIT_REGISTERS+4)
 14068  001F30  6EF6               	movwf	tblptrl,c
 14069  001F32  0E78               	movlw	high (_PLL_INIT_REGISTERS+4)
 14070  001F34  6EF7               	movwf	tblptrh,c
 14071  001F36                     	if	0	;tblptru may be non-zero
 14072  001F36                     	endif
 14073  001F36                     	if	0	;tblptru may be non-zero
 14074  001F36                     	endif
 14075  001F36  0009               	tblrd		*+
 14076  001F38  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14077  001F3C  0009               	tblrd		*+
 14078  001F3E  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14079  001F42  0009               	tblrd		*+
 14080  001F44  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14081  001F48  000A               	tblrd		*-
 14082  001F4A  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14083  001F4E  0E03               	movlw	3
 14084  001F50  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14085  001F52  0E01               	movlw	1
 14086  001F54  EC89  F01A         	call	_SWSPI_send_word
 14087                           
 14088                           ;SyntApp.c: 53: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
 14089  001F58  0E07               	movlw	low _PLL_INIT_REGISTERS
 14090  001F5A  6EF6               	movwf	tblptrl,c
 14091  001F5C                     	if	1	;There is more than 1 active tblptr byte
 14092  001F5C  0E78               	movlw	high _PLL_INIT_REGISTERS
 14093  001F5E  6EF7               	movwf	tblptrh,c
 14094  001F60                     	endif
 14095  001F60                     	if	0	;There are less than 3 active tblptr bytes
 14096  001F60                     	endif
 14097  001F60  0009               	tblrd		*+
 14098  001F62  CFF5 F028          	movff	tablat,SWSPI_send_word@data
 14099  001F66  0009               	tblrd		*+
 14100  001F68  CFF5 F029          	movff	tablat,SWSPI_send_word@data+1
 14101  001F6C  0009               	tblrd		*+
 14102  001F6E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+2
 14103  001F72  000A               	tblrd		*-
 14104  001F74  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+3
 14105  001F78  0E03               	movlw	3
 14106  001F7A  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14107  001F7C  0E01               	movlw	1
 14108  001F7E  EC89  F01A         	call	_SWSPI_send_word
 14109  001F82  0012               	return		;funcret
 14110  001F84                     __end_of_PLLInitialize:
 14111                           	opt stack 0
 14112                           tosu	equ	0xFFF
 14113                           tosh	equ	0xFFE
 14114                           tosl	equ	0xFFD
 14115                           pclath	equ	0xFFA
 14116                           tblptru	equ	0xFF8
 14117                           tblptrh	equ	0xFF7
 14118                           tblptrl	equ	0xFF6
 14119                           tablat	equ	0xFF5
 14120                           prodh	equ	0xFF4
 14121                           prodl	equ	0xFF3
 14122                           intcon	equ	0xFF2
 14123                           intcon2	equ	0xFF1
 14124                           indf0	equ	0xFEF
 14125                           postinc0	equ	0xFEE
 14126                           fsr0h	equ	0xFEA
 14127                           fsr0l	equ	0xFE9
 14128                           wreg	equ	0xFE8
 14129                           indf1	equ	0xFE7
 14130                           postdec1	equ	0xFE5
 14131                           fsr1h	equ	0xFE2
 14132                           fsr1l	equ	0xFE1
 14133                           indf2	equ	0xFDF
 14134                           postinc2	equ	0xFDE
 14135                           postdec2	equ	0xFDD
 14136                           fsr2h	equ	0xFDA
 14137                           fsr2l	equ	0xFD9
 14138                           status	equ	0xFD8
 14139                           
 14140 ;; *************** function _SwSpi_Set_CE_Pin *****************
 14141 ;; Defined at:
 14142 ;;		line 201 in file "SwSpiApp.c"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;  phrType         1    wreg     enum E181
 14145 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;  phrType         1   24[COMRAM] enum E181
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  1    wreg      void 
 14150 ;; Registers used:
 14151 ;;		wreg, status,2, status,0
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14157 ;;      Params:         1       0       0       0       0       0       0
 14158 ;;      Locals:         1       0       0       0       0       0       0
 14159 ;;      Temps:          0       0       0       0       0       0       0
 14160 ;;      Totals:         2       0       0       0       0       0       0
 14161 ;;Total ram usage:        2 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    3
 14164 ;; This function calls:
 14165 ;;		Nothing
 14166 ;; This function is called by:
 14167 ;;		_PLLInitialize
 14168 ;; This function uses a non-reentrant model
 14169 ;;
 14170                           
 14171                           	psect	text51
 14172  0040FE                     __ptext51:
 14173                           	opt stack 0
 14174  0040FE                     _SwSpi_Set_CE_Pin:
 14175                           	opt stack 25
 14176                           
 14177                           ;incstack = 0
 14178                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 14179  0040FE  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 14180                           
 14181                           ;SwSpiApp.c: 203: switch(phrType)
 14182  004100  D014               	goto	l789
 14183  004102                     
 14184                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 14185  004102  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14186  004104  A4D8               	btfss	status,2,c
 14187  004106  D002               	goto	l791
 14188                           
 14189                           ;SwSpiApp.c: 207: {
 14190                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 14191  004108  828B               	bsf	3979,1,c	;volatile
 14192                           
 14193                           ;SwSpiApp.c: 209: }
 14194  00410A  0012               	return	
 14195  00410C                     l791:
 14196                           
 14197                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 14198  00410C  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14199  00410E  A4D8               	btfss	status,2,c
 14200  004110  0012               	return	
 14201                           
 14202                           ;SwSpiApp.c: 211: {
 14203                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 14204  004112  928B               	bcf	3979,1,c	;volatile
 14205                           
 14206                           ;SwSpiApp.c: 213: }
 14207                           ;SwSpiApp.c: 214: break;
 14208  004114  0012               	return	
 14209  004116                     
 14210                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 14211  004116  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14212  004118  A4D8               	btfss	status,2,c
 14213  00411A  D002               	goto	l800
 14214                           
 14215                           ;SwSpiApp.c: 218: {
 14216                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 14217  00411C  848C               	bsf	3980,2,c	;volatile
 14218                           
 14219                           ;SwSpiApp.c: 220: }
 14220  00411E  0012               	return	
 14221  004120                     l800:
 14222                           
 14223                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 14224  004120  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 14225  004122  A4D8               	btfss	status,2,c
 14226  004124  0012               	return	
 14227                           
 14228                           ;SwSpiApp.c: 222: {
 14229                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 14230  004126  948C               	bcf	3980,2,c	;volatile
 14231                           
 14232                           ;SwSpiApp.c: 226: }
 14233                           
 14234                           ;SwSpiApp.c: 224: }
 14235                           ;SwSpiApp.c: 225: break;
 14236  004128  0012               	return	
 14237  00412A                     l789:
 14238  00412A  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 14239                           
 14240                           ; Switch size 1, requested type "space"
 14241                           ; Number of cases is 2, Range of values is 0 to 1
 14242                           ; switch strategies available:
 14243                           ; Name         Instructions Cycles
 14244                           ; simple_byte            7     4 (average)
 14245                           ;	Chosen strategy is simple_byte
 14246  00412C  0A00               	xorlw	0	; case 0
 14247  00412E  B4D8               	btfsc	status,2,c
 14248  004130  D7E8               	goto	l790
 14249  004132  0A01               	xorlw	1	; case 1
 14250  004134  A4D8               	btfss	status,2,c
 14251  004136  0012               	return	
 14252  004138  D7EE               	goto	l799
 14253  00413A                     __end_of_SwSpi_Set_CE_Pin:
 14254                           	opt stack 0
 14255                           tosu	equ	0xFFF
 14256                           tosh	equ	0xFFE
 14257                           tosl	equ	0xFFD
 14258                           pclath	equ	0xFFA
 14259                           tblptru	equ	0xFF8
 14260                           tblptrh	equ	0xFF7
 14261                           tblptrl	equ	0xFF6
 14262                           tablat	equ	0xFF5
 14263                           prodh	equ	0xFF4
 14264                           prodl	equ	0xFF3
 14265                           intcon	equ	0xFF2
 14266                           intcon2	equ	0xFF1
 14267                           indf0	equ	0xFEF
 14268                           postinc0	equ	0xFEE
 14269                           fsr0h	equ	0xFEA
 14270                           fsr0l	equ	0xFE9
 14271                           wreg	equ	0xFE8
 14272                           indf1	equ	0xFE7
 14273                           postdec1	equ	0xFE5
 14274                           fsr1h	equ	0xFE2
 14275                           fsr1l	equ	0xFE1
 14276                           indf2	equ	0xFDF
 14277                           postinc2	equ	0xFDE
 14278                           postdec2	equ	0xFDD
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _InitAdcApplicationMgr *****************
 14284 ;; Defined at:
 14285 ;;		line 23 in file "AdcApp.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;		None
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;		None
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      void 
 14292 ;; Registers used:
 14293 ;;		wreg, status,2
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14299 ;;      Params:         0       0       0       0       0       0       0
 14300 ;;      Locals:         0       0       0       0       0       0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0
 14302 ;;      Totals:         0       0       0       0       0       0       0
 14303 ;;Total ram usage:        0 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    3
 14306 ;; This function calls:
 14307 ;;		Nothing
 14308 ;; This function is called by:
 14309 ;;		_InitSystemApplicationManagers
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           	psect	text52
 14314  004582                     __ptext52:
 14315                           	opt stack 0
 14316  004582                     _InitAdcApplicationMgr:
 14317                           	opt stack 26
 14318                           
 14319                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 14320                           
 14321                           ;incstack = 0
 14322  004582  0E00               	movlw	0
 14323  004584  0101               	movlb	1	; () banked
 14324  004586  6FE9               	movwf	_adcSampleMode& (0+255),b
 14325                           
 14326                           ; BSR set to: 1
 14327  004588  0012               	return		;funcret
 14328  00458A                     __end_of_InitAdcApplicationMgr:
 14329                           	opt stack 0
 14330                           tosu	equ	0xFFF
 14331                           tosh	equ	0xFFE
 14332                           tosl	equ	0xFFD
 14333                           pclath	equ	0xFFA
 14334                           tblptru	equ	0xFF8
 14335                           tblptrh	equ	0xFF7
 14336                           tblptrl	equ	0xFF6
 14337                           tablat	equ	0xFF5
 14338                           prodh	equ	0xFF4
 14339                           prodl	equ	0xFF3
 14340                           intcon	equ	0xFF2
 14341                           intcon2	equ	0xFF1
 14342                           indf0	equ	0xFEF
 14343                           postinc0	equ	0xFEE
 14344                           fsr0h	equ	0xFEA
 14345                           fsr0l	equ	0xFE9
 14346                           wreg	equ	0xFE8
 14347                           indf1	equ	0xFE7
 14348                           postdec1	equ	0xFE5
 14349                           fsr1h	equ	0xFE2
 14350                           fsr1l	equ	0xFE1
 14351                           indf2	equ	0xFDF
 14352                           postinc2	equ	0xFDE
 14353                           postdec2	equ	0xFDD
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _DacInit *****************
 14359 ;; Defined at:
 14360 ;;		line 12 in file "DacApp.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;		None
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;  dacInput        2  108[BANK0 ] unsigned int 
 14365 ;;  idx             1  110[BANK0 ] char 
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      void 
 14368 ;; Registers used:
 14369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14375 ;;      Params:         0       0       0       0       0       0       0
 14376 ;;      Locals:         0       3       0       0       0       0       0
 14377 ;;      Temps:          0       2       0       0       0       0       0
 14378 ;;      Totals:         0       5       0       0       0       0       0
 14379 ;;Total ram usage:        5 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    9
 14382 ;; This function calls:
 14383 ;;		_ReadIntFromEeprom
 14384 ;;		_SWSPI_send_word
 14385 ;;		_StoreIntInEeprom
 14386 ;; This function is called by:
 14387 ;;		_InitSystemApplicationManagers
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text53
 14392  002F84                     __ptext53:
 14393                           	opt stack 0
 14394  002F84                     _DacInit:
 14395                           	opt stack 20
 14396                           
 14397                           ;DacApp.c: 14: for(int8_t idx = 0; idx < (4); idx++)
 14398                           
 14399                           ; BSR set to: 1
 14400                           ;incstack = 0
 14401  002F84  0E00               	movlw	0
 14402  002F86  0100               	movlb	0	; () banked
 14403  002F88  6FCE               	movwf	DacInit@idx& (0+255),b
 14404  002F8A                     l9753:
 14405                           
 14406                           ; BSR set to: 0
 14407  002F8A  51CE               	movf	DacInit@idx& (0+255),w,b
 14408  002F8C  0A80               	xorlw	128
 14409  002F8E  0F7C               	addlw	-132
 14410  002F90  B0D8               	btfsc	status,0,c
 14411  002F92  0012               	return	
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;DacApp.c: 15: {
 14415                           ;DacApp.c: 16: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 14416                           
 14417                           ; BSR set to: 0
 14418                           
 14419                           ; BSR set to: 0
 14420  002F94  0E00               	movlw	0
 14421  002F96  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 14422  002F98  0E02               	movlw	2
 14423  002F9A  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 14424  002F9C  51CE               	movf	DacInit@idx& (0+255),w,b
 14425  002F9E  0D01               	mullw	1
 14426  002FA0  0EB9               	movlw	low _DAC_ADDRES
 14427  002FA2  24F3               	addwf	prodl,w,c
 14428  002FA4  6EF6               	movwf	tblptrl,c
 14429  002FA6  0E78               	movlw	high _DAC_ADDRES
 14430  002FA8  20F4               	addwfc	prodh,w,c
 14431  002FAA  6EF7               	movwf	tblptrh,c
 14432  002FAC                     	if	0	;There are less than 3 active tblptr bytes
 14433  002FAC                     	endif
 14434  002FAC  0008               	tblrd		*
 14435  002FAE  50F5               	movf	tablat,w,c
 14436  002FB0  0940               	iorlw	64
 14437  002FB2  EC37  F014         	call	_ReadIntFromEeprom
 14438  002FB6  C0B3  F0CC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 14439  002FBA  C0B4  F0CD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 14440                           
 14441                           ;DacApp.c: 17: if(dacInput == 0xFFFF)
 14442  002FBE  0100               	movlb	0	; () banked
 14443  002FC0  29CC               	incf	DacInit@dacInput& (0+255),w,b
 14444  002FC2  E144               	bnz	l9765
 14445  002FC4  29CD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 14446  002FC6  A4D8               	btfss	status,2,c
 14447  002FC8  D041               	goto	l541
 14448                           
 14449                           ; BSR set to: 0
 14450                           ;DacApp.c: 18: {
 14451                           ;DacApp.c: 19: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 14452  002FCA  51CE               	movf	DacInit@idx& (0+255),w,b
 14453  002FCC  0D02               	mullw	2
 14454  002FCE  0EB1               	movlw	low _DAC_DEFAULT_INIT_VALUES
 14455  002FD0  24F3               	addwf	prodl,w,c
 14456  002FD2  6EF6               	movwf	tblptrl,c
 14457  002FD4  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 14458  002FD6  20F4               	addwfc	prodh,w,c
 14459  002FD8  6EF7               	movwf	tblptrh,c
 14460  002FDA                     	if	0	;There are less than 3 active tblptr bytes
 14461  002FDA                     	endif
 14462  002FDA  0009               	tblrd		*+
 14463  002FDC  CFF5 F0CA          	movff	tablat,??_DacInit
 14464  002FE0  0009               	tblrd		*+
 14465  002FE2  CFF5 F0CB          	movff	tablat,??_DacInit+1
 14466  002FE6  C0CA  F028         	movff	??_DacInit,SWSPI_send_word@data
 14467  002FEA  C0CB  F029         	movff	??_DacInit+1,SWSPI_send_word@data+1
 14468  002FEE  6A2A               	clrf	SWSPI_send_word@data+2,c
 14469  002FF0  6A2B               	clrf	SWSPI_send_word@data+3,c
 14470  002FF2  0E01               	movlw	1
 14471  002FF4  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14472  002FF6  0E02               	movlw	2
 14473  002FF8  EC89  F01A         	call	_SWSPI_send_word
 14474                           
 14475                           ;DacApp.c: 20: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 14476  002FFC  0100               	movlb	0	; () banked
 14477  002FFE  51CE               	movf	DacInit@idx& (0+255),w,b
 14478  003000  0D02               	mullw	2
 14479  003002  0EB1               	movlw	low _DAC_DEFAULT_INIT_VALUES
 14480  003004  24F3               	addwf	prodl,w,c
 14481  003006  6EF6               	movwf	tblptrl,c
 14482  003008  0E78               	movlw	high _DAC_DEFAULT_INIT_VALUES
 14483  00300A  20F4               	addwfc	prodh,w,c
 14484  00300C  6EF7               	movwf	tblptrh,c
 14485  00300E                     	if	0	;There are less than 3 active tblptr bytes
 14486  00300E                     	endif
 14487  00300E  0009               	tblrd		*+
 14488  003010  CFF5 F0CA          	movff	tablat,??_DacInit
 14489  003014  0009               	tblrd		*+
 14490  003016  CFF5 F0CB          	movff	tablat,??_DacInit+1
 14491  00301A  C0CA  F021         	movff	??_DacInit,StoreIntInEeprom@data
 14492  00301E  C0CB  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 14493  003022  6A23               	clrf	StoreIntInEeprom@data+2,c
 14494  003024  6A24               	clrf	StoreIntInEeprom@data+3,c
 14495  003026  51CE               	movf	DacInit@idx& (0+255),w,b
 14496  003028  0D01               	mullw	1
 14497  00302A  0EB9               	movlw	low _DAC_ADDRES
 14498  00302C  24F3               	addwf	prodl,w,c
 14499  00302E  6EF6               	movwf	tblptrl,c
 14500  003030  0E78               	movlw	high _DAC_ADDRES
 14501  003032  20F4               	addwfc	prodh,w,c
 14502  003034  6EF7               	movwf	tblptrh,c
 14503  003036                     	if	0	;There are less than 3 active tblptr bytes
 14504  003036                     	endif
 14505  003036  0008               	tblrd		*
 14506  003038  50F5               	movf	tablat,w,c
 14507  00303A  0940               	iorlw	64
 14508  00303C  6E25               	movwf	StoreIntInEeprom@address,c
 14509  00303E  0E00               	movlw	0
 14510  003040  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 14511  003042  0E02               	movlw	2
 14512  003044  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 14513  003046  ECBB  F020         	call	_StoreIntInEeprom	;wreg free
 14514                           
 14515                           ;DacApp.c: 21: }
 14516  00304A  D00B               	goto	l542
 14517  00304C                     l541:
 14518  00304C                     l9765:
 14519                           
 14520                           ;DacApp.c: 22: else
 14521                           ;DacApp.c: 23: {
 14522                           ;DacApp.c: 24: SWSPI_send_word(EXT_DAC, dacInput, 1);
 14523  00304C  C0CC  F028         	movff	DacInit@dacInput,SWSPI_send_word@data
 14524  003050  C0CD  F029         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 14525  003054  6A2A               	clrf	SWSPI_send_word@data+2,c
 14526  003056  6A2B               	clrf	SWSPI_send_word@data+3,c
 14527  003058  0E01               	movlw	1
 14528  00305A  6E2C               	movwf	SWSPI_send_word@dataSize,c
 14529  00305C  0E02               	movlw	2
 14530  00305E  EC89  F01A         	call	_SWSPI_send_word
 14531  003062                     l542:
 14532  003062  0100               	movlb	0	; () banked
 14533  003064  2BCE               	incf	DacInit@idx& (0+255),f,b
 14534  003066  D791               	goto	l9753
 14535  003068                     __end_of_DacInit:
 14536                           	opt stack 0
 14537                           tosu	equ	0xFFF
 14538                           tosh	equ	0xFFE
 14539                           tosl	equ	0xFFD
 14540                           pclath	equ	0xFFA
 14541                           tblptru	equ	0xFF8
 14542                           tblptrh	equ	0xFF7
 14543                           tblptrl	equ	0xFF6
 14544                           tablat	equ	0xFF5
 14545                           prodh	equ	0xFF4
 14546                           prodl	equ	0xFF3
 14547                           intcon	equ	0xFF2
 14548                           intcon2	equ	0xFF1
 14549                           indf0	equ	0xFEF
 14550                           postinc0	equ	0xFEE
 14551                           fsr0h	equ	0xFEA
 14552                           fsr0l	equ	0xFE9
 14553                           wreg	equ	0xFE8
 14554                           indf1	equ	0xFE7
 14555                           postdec1	equ	0xFE5
 14556                           fsr1h	equ	0xFE2
 14557                           fsr1l	equ	0xFE1
 14558                           indf2	equ	0xFDF
 14559                           postinc2	equ	0xFDE
 14560                           postdec2	equ	0xFDD
 14561                           fsr2h	equ	0xFDA
 14562                           fsr2l	equ	0xFD9
 14563                           status	equ	0xFD8
 14564                           
 14565 ;; *************** function _StoreIntInEeprom *****************
 14566 ;; Defined at:
 14567 ;;		line 38 in file "SystemCommon.c"
 14568 ;; Parameters:    Size  Location     Type
 14569 ;;  data            4   32[COMRAM] unsigned long 
 14570 ;;  address         1   36[COMRAM] unsigned char 
 14571 ;;  numOfByes       2   37[COMRAM] int 
 14572 ;; Auto vars:     Size  Location     Type
 14573 ;;  val             1   39[COMRAM] unsigned char 
 14574 ;;  idx             1   40[COMRAM] unsigned char 
 14575 ;; Return value:  Size  Location     Type
 14576 ;;                  1    wreg      void 
 14577 ;; Registers used:
 14578 ;;		wreg, status,2, status,0, cstack
 14579 ;; Tracked objects:
 14580 ;;		On entry : 0/0
 14581 ;;		On exit  : 0/0
 14582 ;;		Unchanged: 0/0
 14583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14584 ;;      Params:         7       0       0       0       0       0       0
 14585 ;;      Locals:         2       0       0       0       0       0       0
 14586 ;;      Temps:          0       0       0       0       0       0       0
 14587 ;;      Totals:         9       0       0       0       0       0       0
 14588 ;;Total ram usage:        9 bytes
 14589 ;; Hardware stack levels used:    1
 14590 ;; Hardware stack levels required when called:    5
 14591 ;; This function calls:
 14592 ;;		_EepromWrite
 14593 ;;		_make8
 14594 ;; This function is called by:
 14595 ;;		_DacInit
 14596 ;;		_DacSetValue
 14597 ;; This function uses a non-reentrant model
 14598 ;;
 14599                           
 14600                           	psect	text54
 14601  004176                     __ptext54:
 14602                           	opt stack 0
 14603  004176                     _StoreIntInEeprom:
 14604                           	opt stack 23
 14605                           
 14606                           ;SystemCommon.c: 40: for(uint8_t idx = numOfByes; idx; idx--)
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;incstack = 0
 14610  004176  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 14611  00417A  D015               	goto	l1428
 14612  00417C                     
 14613                           ;SystemCommon.c: 41: {
 14614                           ;SystemCommon.c: 42: uint8_t val = make8(data, idx - 1);
 14615  00417C  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 14616  004180  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 14617  004184  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 14618  004188  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 14619  00418C  0429               	decf	StoreIntInEeprom@idx,w,c
 14620  00418E  6E1C               	movwf	make8@dataLocation,c
 14621  004190  EC5F  F01E         	call	_make8	;wreg free
 14622  004194  6E28               	movwf	StoreIntInEeprom@val,c
 14623                           
 14624                           ;SystemCommon.c: 43: EepromWrite(address - idx, val);
 14625  004196  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 14626  00419A  5029               	movf	StoreIntInEeprom@idx,w,c
 14627  00419C  0800               	sublw	0
 14628  00419E  2425               	addwf	StoreIntInEeprom@address,w,c
 14629  0041A0  ECA5  F022         	call	_EepromWrite
 14630  0041A4  0629               	decf	StoreIntInEeprom@idx,f,c
 14631  0041A6                     l1428:
 14632  0041A6  5029               	movf	StoreIntInEeprom@idx,w,c
 14633  0041A8  B4D8               	btfsc	status,2,c
 14634  0041AA  0012               	return	
 14635  0041AC  D7E7               	goto	l1429
 14636  0041AE                     __end_of_StoreIntInEeprom:
 14637                           	opt stack 0
 14638                           tosu	equ	0xFFF
 14639                           tosh	equ	0xFFE
 14640                           tosl	equ	0xFFD
 14641                           pclath	equ	0xFFA
 14642                           tblptru	equ	0xFF8
 14643                           tblptrh	equ	0xFF7
 14644                           tblptrl	equ	0xFF6
 14645                           tablat	equ	0xFF5
 14646                           prodh	equ	0xFF4
 14647                           prodl	equ	0xFF3
 14648                           intcon	equ	0xFF2
 14649                           intcon2	equ	0xFF1
 14650                           indf0	equ	0xFEF
 14651                           postinc0	equ	0xFEE
 14652                           fsr0h	equ	0xFEA
 14653                           fsr0l	equ	0xFE9
 14654                           wreg	equ	0xFE8
 14655                           indf1	equ	0xFE7
 14656                           postdec1	equ	0xFE5
 14657                           fsr1h	equ	0xFE2
 14658                           fsr1l	equ	0xFE1
 14659                           indf2	equ	0xFDF
 14660                           postinc2	equ	0xFDE
 14661                           postdec2	equ	0xFDD
 14662                           fsr2h	equ	0xFDA
 14663                           fsr2l	equ	0xFD9
 14664                           status	equ	0xFD8
 14665                           
 14666 ;; *************** function _EepromWrite *****************
 14667 ;; Defined at:
 14668 ;;		line 220 in file "FlashApp.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;  address         1    wreg     unsigned char 
 14671 ;;  data            1   26[COMRAM] unsigned char 
 14672 ;; Auto vars:     Size  Location     Type
 14673 ;;  address         1   27[COMRAM] unsigned char 
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  1    wreg      void 
 14676 ;; Registers used:
 14677 ;;		wreg, status,2, cstack
 14678 ;; Tracked objects:
 14679 ;;		On entry : 0/0
 14680 ;;		On exit  : 0/0
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14683 ;;      Params:         1       0       0       0       0       0       0
 14684 ;;      Locals:         1       0       0       0       0       0       0
 14685 ;;      Temps:          0       0       0       0       0       0       0
 14686 ;;      Totals:         2       0       0       0       0       0       0
 14687 ;;Total ram usage:        2 bytes
 14688 ;; Hardware stack levels used:    1
 14689 ;; Hardware stack levels required when called:    4
 14690 ;; This function calls:
 14691 ;;		_DATAEE_WriteByte
 14692 ;; This function is called by:
 14693 ;;		_StoreIntInEeprom
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           	psect	text55
 14698  00454A                     __ptext55:
 14699                           	opt stack 0
 14700  00454A                     _EepromWrite:
 14701                           	opt stack 23
 14702                           
 14703                           ;incstack = 0
 14704                           ;EepromWrite@address stored from wreg
 14705  00454A  6E1C               	movwf	EepromWrite@address,c
 14706                           
 14707                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
 14708  00454C  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 14709  004550  501C               	movf	EepromWrite@address,w,c
 14710  004552  EC2A  F021         	call	_DATAEE_WriteByte
 14711  004556  0012               	return		;funcret
 14712  004558                     __end_of_EepromWrite:
 14713                           	opt stack 0
 14714                           tosu	equ	0xFFF
 14715                           tosh	equ	0xFFE
 14716                           tosl	equ	0xFFD
 14717                           pclath	equ	0xFFA
 14718                           tblptru	equ	0xFF8
 14719                           tblptrh	equ	0xFF7
 14720                           tblptrl	equ	0xFF6
 14721                           tablat	equ	0xFF5
 14722                           prodh	equ	0xFF4
 14723                           prodl	equ	0xFF3
 14724                           intcon	equ	0xFF2
 14725                           intcon2	equ	0xFF1
 14726                           indf0	equ	0xFEF
 14727                           postinc0	equ	0xFEE
 14728                           fsr0h	equ	0xFEA
 14729                           fsr0l	equ	0xFE9
 14730                           wreg	equ	0xFE8
 14731                           indf1	equ	0xFE7
 14732                           postdec1	equ	0xFE5
 14733                           fsr1h	equ	0xFE2
 14734                           fsr1l	equ	0xFE1
 14735                           indf2	equ	0xFDF
 14736                           postinc2	equ	0xFDE
 14737                           postdec2	equ	0xFDD
 14738                           fsr2h	equ	0xFDA
 14739                           fsr2l	equ	0xFD9
 14740                           status	equ	0xFD8
 14741                           
 14742 ;; *************** function _DATAEE_WriteByte *****************
 14743 ;; Defined at:
 14744 ;;		line 167 in file "mcc_generated_files/memory.c"
 14745 ;; Parameters:    Size  Location     Type
 14746 ;;  bAdd            1    wreg     unsigned char 
 14747 ;;  bData           1   23[COMRAM] unsigned char 
 14748 ;; Auto vars:     Size  Location     Type
 14749 ;;  bAdd            1   24[COMRAM] unsigned char 
 14750 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 14751 ;; Return value:  Size  Location     Type
 14752 ;;                  1    wreg      void 
 14753 ;; Registers used:
 14754 ;;		wreg, status,2
 14755 ;; Tracked objects:
 14756 ;;		On entry : 0/0
 14757 ;;		On exit  : 0/0
 14758 ;;		Unchanged: 0/0
 14759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14760 ;;      Params:         1       0       0       0       0       0       0
 14761 ;;      Locals:         2       0       0       0       0       0       0
 14762 ;;      Temps:          0       0       0       0       0       0       0
 14763 ;;      Totals:         3       0       0       0       0       0       0
 14764 ;;Total ram usage:        3 bytes
 14765 ;; Hardware stack levels used:    1
 14766 ;; Hardware stack levels required when called:    3
 14767 ;; This function calls:
 14768 ;;		Nothing
 14769 ;; This function is called by:
 14770 ;;		_EepromWrite
 14771 ;;		_EepromTest
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           	psect	text56
 14776  004254                     __ptext56:
 14777                           	opt stack 0
 14778  004254                     _DATAEE_WriteByte:
 14779                           	opt stack 23
 14780                           
 14781                           ;incstack = 0
 14782                           ;DATAEE_WriteByte@bAdd stored from wreg
 14783  004254  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 14784                           
 14785                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 14786  004256  0E00               	movlw	0
 14787  004258  BEF2               	btfsc	intcon,7,c	;volatile
 14788  00425A  0E01               	movlw	1
 14789  00425C  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 14790                           
 14791                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 14792  00425E  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 14793                           
 14794                           ;memory.c: 172: EEDATA = bData;
 14795  004262  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 14796                           
 14797                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 14798  004266  9EA6               	bcf	4006,7,c	;volsfr
 14799                           
 14800                           ;memory.c: 174: EECON1bits.CFGS = 0;
 14801  004268  9CA6               	bcf	4006,6,c	;volsfr
 14802                           
 14803                           ;memory.c: 175: EECON1bits.WREN = 1;
 14804  00426A  84A6               	bsf	4006,2,c	;volsfr
 14805                           
 14806                           ;memory.c: 176: INTCONbits.GIE = 0;
 14807  00426C  9EF2               	bcf	intcon,7,c	;volatile
 14808                           
 14809                           ;memory.c: 177: EECON2 = 0x55;
 14810  00426E  0E55               	movlw	85
 14811  004270  6EA7               	movwf	4007,c	;volsfr
 14812                           
 14813                           ;memory.c: 178: EECON2 = 0xAA;
 14814  004272  0EAA               	movlw	170
 14815  004274  6EA7               	movwf	4007,c	;volsfr
 14816                           
 14817                           ;memory.c: 179: EECON1bits.WR = 1;
 14818  004276  82A6               	bsf	4006,1,c	;volsfr
 14819  004278                     
 14820                           ;memory.c: 182: {
 14821  004278  B2A6               	btfsc	4006,1,c	;volsfr
 14822  00427A  D7FE               	goto	l1082
 14823                           
 14824                           ;memory.c: 183: }
 14825                           ;memory.c: 185: EECON1bits.WREN = 0;
 14826  00427C  94A6               	bcf	4006,2,c	;volsfr
 14827                           
 14828                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 14829  00427E  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 14830  004280  D002               	bra	u4715
 14831  004282  9EF2               	bcf	intcon,7,c	;volatile
 14832  004284  D001               	bra	u4716
 14833  004286                     u4715:
 14834  004286  8EF2               	bsf	intcon,7,c	;volatile
 14835  004288                     u4716:
 14836  004288  0012               	return		;funcret
 14837  00428A                     __end_of_DATAEE_WriteByte:
 14838                           	opt stack 0
 14839                           tosu	equ	0xFFF
 14840                           tosh	equ	0xFFE
 14841                           tosl	equ	0xFFD
 14842                           pclath	equ	0xFFA
 14843                           tblptru	equ	0xFF8
 14844                           tblptrh	equ	0xFF7
 14845                           tblptrl	equ	0xFF6
 14846                           tablat	equ	0xFF5
 14847                           prodh	equ	0xFF4
 14848                           prodl	equ	0xFF3
 14849                           intcon	equ	0xFF2
 14850                           intcon2	equ	0xFF1
 14851                           indf0	equ	0xFEF
 14852                           postinc0	equ	0xFEE
 14853                           fsr0h	equ	0xFEA
 14854                           fsr0l	equ	0xFE9
 14855                           wreg	equ	0xFE8
 14856                           indf1	equ	0xFE7
 14857                           postdec1	equ	0xFE5
 14858                           fsr1h	equ	0xFE2
 14859                           fsr1l	equ	0xFE1
 14860                           indf2	equ	0xFDF
 14861                           postinc2	equ	0xFDE
 14862                           postdec2	equ	0xFDD
 14863                           fsr2h	equ	0xFDA
 14864                           fsr2l	equ	0xFD9
 14865                           status	equ	0xFD8
 14866                           
 14867 ;; *************** function _SWSPI_send_word *****************
 14868 ;; Defined at:
 14869 ;;		line 17 in file "SwSpiApp.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;  phrType         1    wreg     enum E181
 14872 ;;  data            4   39[COMRAM] unsigned long 
 14873 ;;  dataSize        1   43[COMRAM] unsigned char 
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;  phrType         1   47[COMRAM] enum E181
 14876 ;;  datac           1   44[COMRAM] unsigned char 
 14877 ;;  idx             2   45[COMRAM] int 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14887 ;;      Params:         5       0       0       0       0       0       0
 14888 ;;      Locals:         4       0       0       0       0       0       0
 14889 ;;      Temps:          0       0       0       0       0       0       0
 14890 ;;      Totals:         9       0       0       0       0       0       0
 14891 ;;Total ram usage:        9 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    6
 14894 ;; This function calls:
 14895 ;;		_SWSPI_DAC_send_bits
 14896 ;;		_SWSPI_Synth_send_bits
 14897 ;;		_SwSpi_Set_Dac_Sync_Pin
 14898 ;;		_SwSpi_Set_Synth_Le_Pin
 14899 ;;		_make8
 14900 ;; This function is called by:
 14901 ;;		_DacInit
 14902 ;;		_PLLInitialize
 14903 ;;		_DacSetValue
 14904 ;;		_UpdateTxFreq
 14905 ;;		_UpdateRxFreq
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           	psect	text57
 14910  003512                     __ptext57:
 14911                           	opt stack 0
 14912  003512                     _SWSPI_send_word:
 14913                           	opt stack 22
 14914                           
 14915                           ;incstack = 0
 14916                           ;SWSPI_send_word@phrType stored from wreg
 14917  003512  6E30               	movwf	SWSPI_send_word@phrType,c
 14918                           
 14919                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 14920  003514  9EF2               	bcf	intcon,7,c	;volatile
 14921                           
 14922                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 14923  003516  5030               	movf	SWSPI_send_word@phrType,w,c
 14924  003518  B4D8               	btfsc	status,2,c
 14925  00351A  D003               	goto	u10000
 14926  00351C  0430               	decf	SWSPI_send_word@phrType,w,c
 14927  00351E  A4D8               	btfss	status,2,c
 14928  003520  D016               	goto	l698
 14929  003522                     u10000:
 14930                           
 14931                           ;SwSpiApp.c: 24: {
 14932                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 14933  003522  0E00               	movlw	0
 14934  003524  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14935  003526  5030               	movf	SWSPI_send_word@phrType,w,c
 14936  003528  EC9D  F020         	call	_SwSpi_Set_Synth_Le_Pin
 14937                           
 14938                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 14939  00352C  C028  F024         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 14940  003530  C029  F025         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 14941  003534  C02A  F026         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 14942  003538  C02B  F027         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 14943  00353C  5030               	movf	SWSPI_send_word@phrType,w,c
 14944  00353E  EC77  F019         	call	_SWSPI_Synth_send_bits
 14945                           
 14946                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 14947  003542  0E01               	movlw	1
 14948  003544  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 14949  003546  5030               	movf	SWSPI_send_word@phrType,w,c
 14950  003548  EC9D  F020         	call	_SwSpi_Set_Synth_Le_Pin
 14951                           
 14952                           ;SwSpiApp.c: 28: }
 14953  00354C  D02D               	goto	l702
 14954  00354E                     l698:
 14955                           
 14956                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 14957  00354E  0E02               	movlw	2
 14958  003550  1830               	xorwf	SWSPI_send_word@phrType,w,c
 14959  003552  A4D8               	btfss	status,2,c
 14960  003554  D029               	goto	l702
 14961                           
 14962                           ;SwSpiApp.c: 30: {
 14963                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 14964  003556  0E00               	movlw	0
 14965  003558  EC43  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 14966                           
 14967                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 14968  00355C  0E01               	movlw	1
 14969  00355E  242C               	addwf	SWSPI_send_word@dataSize,w,c
 14970  003560  6E2E               	movwf	SWSPI_send_word@idx,c
 14971  003562  6A2F               	clrf	SWSPI_send_word@idx+1,c
 14972  003564  0E00               	movlw	0
 14973  003566  222F               	addwfc	SWSPI_send_word@idx+1,f,c
 14974  003568                     l9523:
 14975  003568  BE2F               	btfsc	SWSPI_send_word@idx+1,7,c
 14976  00356A  D01B               	goto	u10030
 14977  00356C  502F               	movf	SWSPI_send_word@idx+1,w,c
 14978  00356E  E103               	bnz	l9527
 14979  003570  042E               	decf	SWSPI_send_word@idx,w,c
 14980  003572  A0D8               	btfss	status,0,c
 14981  003574  D016               	goto	u10030
 14982  003576                     l9527:
 14983                           
 14984                           ;SwSpiApp.c: 33: {
 14985                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 14986  003576  C028  F018         	movff	SWSPI_send_word@data,make8@data
 14987  00357A  C029  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 14988  00357E  C02A  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 14989  003582  C02B  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 14990  003586  042E               	decf	SWSPI_send_word@idx,w,c
 14991  003588  6E1C               	movwf	make8@dataLocation,c
 14992  00358A  EC5F  F01E         	call	_make8	;wreg free
 14993  00358E  6E2D               	movwf	SWSPI_send_word@datac,c
 14994                           
 14995                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 14996  003590  C02D  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 14997  003594  5030               	movf	SWSPI_send_word@phrType,w,c
 14998  003596  ECE7  F01E         	call	_SWSPI_DAC_send_bits
 14999  00359A  062E               	decf	SWSPI_send_word@idx,f,c
 15000  00359C  A0D8               	btfss	status,0,c
 15001  00359E  062F               	decf	SWSPI_send_word@idx+1,f,c
 15002  0035A0  D7E3               	goto	l9523
 15003  0035A2                     u10030:
 15004                           
 15005                           ;SwSpiApp.c: 36: }
 15006                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 15007  0035A2  0E01               	movlw	1
 15008  0035A4  EC43  F022         	call	_SwSpi_Set_Dac_Sync_Pin
 15009  0035A8                     l702:
 15010                           
 15011                           ;SwSpiApp.c: 38: }
 15012                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 15013  0035A8  8EF2               	bsf	intcon,7,c	;volatile
 15014  0035AA  0012               	return		;funcret
 15015  0035AC                     __end_of_SWSPI_send_word:
 15016                           	opt stack 0
 15017                           tosu	equ	0xFFF
 15018                           tosh	equ	0xFFE
 15019                           tosl	equ	0xFFD
 15020                           pclath	equ	0xFFA
 15021                           tblptru	equ	0xFF8
 15022                           tblptrh	equ	0xFF7
 15023                           tblptrl	equ	0xFF6
 15024                           tablat	equ	0xFF5
 15025                           prodh	equ	0xFF4
 15026                           prodl	equ	0xFF3
 15027                           intcon	equ	0xFF2
 15028                           intcon2	equ	0xFF1
 15029                           indf0	equ	0xFEF
 15030                           postinc0	equ	0xFEE
 15031                           fsr0h	equ	0xFEA
 15032                           fsr0l	equ	0xFE9
 15033                           wreg	equ	0xFE8
 15034                           indf1	equ	0xFE7
 15035                           postdec1	equ	0xFE5
 15036                           fsr1h	equ	0xFE2
 15037                           fsr1l	equ	0xFE1
 15038                           indf2	equ	0xFDF
 15039                           postinc2	equ	0xFDE
 15040                           postdec2	equ	0xFDD
 15041                           fsr2h	equ	0xFDA
 15042                           fsr2l	equ	0xFD9
 15043                           status	equ	0xFD8
 15044                           
 15045 ;; *************** function _make8 *****************
 15046 ;; Defined at:
 15047 ;;		line 81 in file "SystemCommon.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;  data            4   23[COMRAM] unsigned long 
 15050 ;;  dataLocation    1   27[COMRAM] unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;		None
 15053 ;; Return value:  Size  Location     Type
 15054 ;;                  1    wreg      unsigned char 
 15055 ;; Registers used:
 15056 ;;		wreg, status,2, status,0
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15062 ;;      Params:         5       0       0       0       0       0       0
 15063 ;;      Locals:         0       0       0       0       0       0       0
 15064 ;;      Temps:          4       0       0       0       0       0       0
 15065 ;;      Totals:         9       0       0       0       0       0       0
 15066 ;;Total ram usage:        9 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    3
 15069 ;; This function calls:
 15070 ;;		Nothing
 15071 ;; This function is called by:
 15072 ;;		_SWSPI_send_word
 15073 ;;		_StoreIntInEeprom
 15074 ;;		_FlashReadCondition
 15075 ;; This function uses a non-reentrant model
 15076 ;;
 15077                           
 15078                           	psect	text58
 15079  003CBE                     __ptext58:
 15080                           	opt stack 0
 15081  003CBE                     _make8:
 15082                           	opt stack 24
 15083                           
 15084                           ;SystemCommon.c: 83: switch(dataLocation)
 15085                           
 15086                           ;incstack = 0
 15087  003CBE  D01F               	goto	l1447
 15088  003CC0                     
 15089                           ;SystemCommon.c: 86: return (data & 0x000000ff);
 15090  003CC0  5018               	movf	make8@data,w,c
 15091  003CC2  0012               	return	
 15092  003CC4                     
 15093                           ;SystemCommon.c: 89: return (data & 0x0000ff00) >> 8;
 15094  003CC4  5019               	movf	make8@data+1,w,c
 15095  003CC6  0012               	return	
 15096  003CC8                     
 15097                           ;SystemCommon.c: 92: return (data & 0x00ff0000) >> 16;
 15098  003CC8  501A               	movf	make8@data+2,w,c
 15099  003CCA  0012               	return	
 15100  003CCC                     
 15101                           ;SystemCommon.c: 95: return (data & 0xff000000) >> 24;
 15102  003CCC  0E00               	movlw	0
 15103  003CCE  1418               	andwf	make8@data,w,c
 15104  003CD0  6E1D               	movwf	??_make8& (0+255),c
 15105  003CD2  0E00               	movlw	0
 15106  003CD4  1419               	andwf	make8@data+1,w,c
 15107  003CD6  6E1E               	movwf	(??_make8+1)& (0+255),c
 15108  003CD8  0E00               	movlw	0
 15109  003CDA  141A               	andwf	make8@data+2,w,c
 15110  003CDC  6E1F               	movwf	(??_make8+2)& (0+255),c
 15111  003CDE  0EFF               	movlw	255
 15112  003CE0  141B               	andwf	make8@data+3,w,c
 15113  003CE2  6E20               	movwf	(??_make8+3)& (0+255),c
 15114  003CE4  0E19               	movlw	25
 15115  003CE6  D005               	goto	u9560
 15116  003CE8                     u9565:
 15117  003CE8  90D8               	bcf	status,0,c
 15118  003CEA  3220               	rrcf	??_make8+3,f,c
 15119  003CEC  321F               	rrcf	??_make8+2,f,c
 15120  003CEE  321E               	rrcf	??_make8+1,f,c
 15121  003CF0  321D               	rrcf	??_make8,f,c
 15122  003CF2                     u9560:
 15123  003CF2  2EE8               	decfsz	wreg,f,c
 15124  003CF4  D7F9               	goto	u9565
 15125  003CF6  501D               	movf	??_make8,w,c
 15126  003CF8  0012               	return	
 15127  003CFA                     
 15128                           ;SystemCommon.c: 98: return (0);
 15129  003CFA  0E00               	movlw	0
 15130                           
 15131                           ;SystemCommon.c: 99: }
 15132  003CFC  0012               	return	
 15133  003CFE                     l1447:
 15134  003CFE  501C               	movf	make8@dataLocation,w,c
 15135                           
 15136                           ; Switch size 1, requested type "space"
 15137                           ; Number of cases is 4, Range of values is 0 to 3
 15138                           ; switch strategies available:
 15139                           ; Name         Instructions Cycles
 15140                           ; simple_byte           13     7 (average)
 15141                           ;	Chosen strategy is simple_byte
 15142  003D00  0A00               	xorlw	0	; case 0
 15143  003D02  B4D8               	btfsc	status,2,c
 15144  003D04  D7DD               	goto	l1448
 15145  003D06  0A01               	xorlw	1	; case 1
 15146  003D08  B4D8               	btfsc	status,2,c
 15147  003D0A  D7DC               	goto	l1450
 15148  003D0C  0A03               	xorlw	3	; case 2
 15149  003D0E  B4D8               	btfsc	status,2,c
 15150  003D10  D7DB               	goto	l1451
 15151  003D12  0A01               	xorlw	1	; case 3
 15152  003D14  B4D8               	btfsc	status,2,c
 15153  003D16  D7DA               	goto	l1452
 15154  003D18  D7F0               	goto	l1453
 15155  003D1A                     __end_of_make8:
 15156                           	opt stack 0
 15157                           tosu	equ	0xFFF
 15158                           tosh	equ	0xFFE
 15159                           tosl	equ	0xFFD
 15160                           pclath	equ	0xFFA
 15161                           tblptru	equ	0xFF8
 15162                           tblptrh	equ	0xFF7
 15163                           tblptrl	equ	0xFF6
 15164                           tablat	equ	0xFF5
 15165                           prodh	equ	0xFF4
 15166                           prodl	equ	0xFF3
 15167                           intcon	equ	0xFF2
 15168                           intcon2	equ	0xFF1
 15169                           indf0	equ	0xFEF
 15170                           postinc0	equ	0xFEE
 15171                           fsr0h	equ	0xFEA
 15172                           fsr0l	equ	0xFE9
 15173                           wreg	equ	0xFE8
 15174                           indf1	equ	0xFE7
 15175                           postdec1	equ	0xFE5
 15176                           fsr1h	equ	0xFE2
 15177                           fsr1l	equ	0xFE1
 15178                           indf2	equ	0xFDF
 15179                           postinc2	equ	0xFDE
 15180                           postdec2	equ	0xFDD
 15181                           fsr2h	equ	0xFDA
 15182                           fsr2l	equ	0xFD9
 15183                           status	equ	0xFD8
 15184                           
 15185 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 15186 ;; Defined at:
 15187 ;;		line 232 in file "SwSpiApp.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;  phrType         1    wreg     enum E181
 15190 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;  phrType         1   24[COMRAM] enum E181
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  1    wreg      void 
 15195 ;; Registers used:
 15196 ;;		wreg, status,2, status,0
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15202 ;;      Params:         1       0       0       0       0       0       0
 15203 ;;      Locals:         1       0       0       0       0       0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0
 15205 ;;      Totals:         2       0       0       0       0       0       0
 15206 ;;Total ram usage:        2 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    3
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_SWSPI_send_word
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           	psect	text59
 15217  00413A                     __ptext59:
 15218                           	opt stack 0
 15219  00413A                     _SwSpi_Set_Synth_Le_Pin:
 15220                           	opt stack 24
 15221                           
 15222                           ;incstack = 0
 15223                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 15224  00413A  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 15225                           
 15226                           ;SwSpiApp.c: 234: switch(phrType)
 15227  00413C  D014               	goto	l810
 15228  00413E                     
 15229                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 15230  00413E  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15231  004140  A4D8               	btfss	status,2,c
 15232  004142  D002               	goto	l812
 15233                           
 15234                           ;SwSpiApp.c: 238: {
 15235                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 15236  004144  848B               	bsf	3979,2,c	;volatile
 15237                           
 15238                           ;SwSpiApp.c: 240: }
 15239  004146  0012               	return	
 15240  004148                     l812:
 15241                           
 15242                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 15243  004148  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15244  00414A  A4D8               	btfss	status,2,c
 15245  00414C  0012               	return	
 15246                           
 15247                           ;SwSpiApp.c: 242: {
 15248                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 15249  00414E  948B               	bcf	3979,2,c	;volatile
 15250                           
 15251                           ;SwSpiApp.c: 244: }
 15252                           ;SwSpiApp.c: 245: break;
 15253  004150  0012               	return	
 15254  004152                     
 15255                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 15256  004152  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15257  004154  A4D8               	btfss	status,2,c
 15258  004156  D002               	goto	l821
 15259                           
 15260                           ;SwSpiApp.c: 249: {
 15261                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 15262  004158  868C               	bsf	3980,3,c	;volatile
 15263                           
 15264                           ;SwSpiApp.c: 251: }
 15265  00415A  0012               	return	
 15266  00415C                     l821:
 15267                           
 15268                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 15269  00415C  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 15270  00415E  A4D8               	btfss	status,2,c
 15271  004160  0012               	return	
 15272                           
 15273                           ;SwSpiApp.c: 253: {
 15274                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 15275  004162  968C               	bcf	3980,3,c	;volatile
 15276                           
 15277                           ;SwSpiApp.c: 257: }
 15278                           
 15279                           ;SwSpiApp.c: 255: }
 15280                           ;SwSpiApp.c: 256: break;
 15281  004164  0012               	return	
 15282  004166                     l810:
 15283  004166  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 15284                           
 15285                           ; Switch size 1, requested type "space"
 15286                           ; Number of cases is 2, Range of values is 0 to 1
 15287                           ; switch strategies available:
 15288                           ; Name         Instructions Cycles
 15289                           ; simple_byte            7     4 (average)
 15290                           ;	Chosen strategy is simple_byte
 15291  004168  0A00               	xorlw	0	; case 0
 15292  00416A  B4D8               	btfsc	status,2,c
 15293  00416C  D7E8               	goto	l811
 15294  00416E  0A01               	xorlw	1	; case 1
 15295  004170  A4D8               	btfss	status,2,c
 15296  004172  0012               	return	
 15297  004174  D7EE               	goto	l820
 15298  004176                     __end_of_SwSpi_Set_Synth_Le_Pin:
 15299                           	opt stack 0
 15300                           tosu	equ	0xFFF
 15301                           tosh	equ	0xFFE
 15302                           tosl	equ	0xFFD
 15303                           pclath	equ	0xFFA
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           intcon2	equ	0xFF1
 15312                           indf0	equ	0xFEF
 15313                           postinc0	equ	0xFEE
 15314                           fsr0h	equ	0xFEA
 15315                           fsr0l	equ	0xFE9
 15316                           wreg	equ	0xFE8
 15317                           indf1	equ	0xFE7
 15318                           postdec1	equ	0xFE5
 15319                           fsr1h	equ	0xFE2
 15320                           fsr1l	equ	0xFE1
 15321                           indf2	equ	0xFDF
 15322                           postinc2	equ	0xFDE
 15323                           postdec2	equ	0xFDD
 15324                           fsr2h	equ	0xFDA
 15325                           fsr2l	equ	0xFD9
 15326                           status	equ	0xFD8
 15327                           
 15328 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 15329 ;; Defined at:
 15330 ;;		line 260 in file "SwSpiApp.c"
 15331 ;; Parameters:    Size  Location     Type
 15332 ;;  cPinMode        1    wreg     unsigned char 
 15333 ;; Auto vars:     Size  Location     Type
 15334 ;;  cPinMode        1   23[COMRAM] unsigned char 
 15335 ;; Return value:  Size  Location     Type
 15336 ;;                  1    wreg      void 
 15337 ;; Registers used:
 15338 ;;		wreg, status,2, status,0
 15339 ;; Tracked objects:
 15340 ;;		On entry : 0/0
 15341 ;;		On exit  : 0/0
 15342 ;;		Unchanged: 0/0
 15343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15344 ;;      Params:         0       0       0       0       0       0       0
 15345 ;;      Locals:         1       0       0       0       0       0       0
 15346 ;;      Temps:          0       0       0       0       0       0       0
 15347 ;;      Totals:         1       0       0       0       0       0       0
 15348 ;;Total ram usage:        1 bytes
 15349 ;; Hardware stack levels used:    1
 15350 ;; Hardware stack levels required when called:    3
 15351 ;; This function calls:
 15352 ;;		Nothing
 15353 ;; This function is called by:
 15354 ;;		_SWSPI_send_word
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           	psect	text60
 15359  004486                     __ptext60:
 15360                           	opt stack 0
 15361  004486                     _SwSpi_Set_Dac_Sync_Pin:
 15362                           	opt stack 24
 15363                           
 15364                           ;incstack = 0
 15365                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 15366  004486  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 15367                           
 15368                           ;SwSpiApp.c: 262: switch(cPinMode)
 15369  004488  D004               	goto	l831
 15370  00448A                     
 15371                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 15372  00448A  9489               	bcf	3977,2,c	;volatile
 15373                           
 15374                           ;SwSpiApp.c: 266: break;
 15375  00448C  0012               	return	
 15376  00448E                     
 15377                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 15378  00448E  8489               	bsf	3977,2,c	;volatile
 15379                           
 15380                           ;SwSpiApp.c: 271: }
 15381                           
 15382                           ;SwSpiApp.c: 270: break;
 15383  004490  0012               	return	
 15384  004492                     l831:
 15385  004492  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 15386                           
 15387                           ; Switch size 1, requested type "space"
 15388                           ; Number of cases is 2, Range of values is 0 to 1
 15389                           ; switch strategies available:
 15390                           ; Name         Instructions Cycles
 15391                           ; simple_byte            7     4 (average)
 15392                           ;	Chosen strategy is simple_byte
 15393  004494  0A00               	xorlw	0	; case 0
 15394  004496  B4D8               	btfsc	status,2,c
 15395  004498  D7F8               	goto	l832
 15396  00449A  0A01               	xorlw	1	; case 1
 15397  00449C  A4D8               	btfss	status,2,c
 15398  00449E  0012               	return	
 15399  0044A0  D7F6               	goto	l836
 15400  0044A2                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 15401                           	opt stack 0
 15402                           tosu	equ	0xFFF
 15403                           tosh	equ	0xFFE
 15404                           tosl	equ	0xFFD
 15405                           pclath	equ	0xFFA
 15406                           tblptru	equ	0xFF8
 15407                           tblptrh	equ	0xFF7
 15408                           tblptrl	equ	0xFF6
 15409                           tablat	equ	0xFF5
 15410                           prodh	equ	0xFF4
 15411                           prodl	equ	0xFF3
 15412                           intcon	equ	0xFF2
 15413                           intcon2	equ	0xFF1
 15414                           indf0	equ	0xFEF
 15415                           postinc0	equ	0xFEE
 15416                           fsr0h	equ	0xFEA
 15417                           fsr0l	equ	0xFE9
 15418                           wreg	equ	0xFE8
 15419                           indf1	equ	0xFE7
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           fsr2h	equ	0xFDA
 15427                           fsr2l	equ	0xFD9
 15428                           status	equ	0xFD8
 15429                           
 15430 ;; *************** function _SWSPI_Synth_send_bits *****************
 15431 ;; Defined at:
 15432 ;;		line 67 in file "SwSpiApp.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;  phrType         1    wreg     enum E181
 15435 ;;  data            4   35[COMRAM] unsigned long 
 15436 ;; Auto vars:     Size  Location     Type
 15437 ;;  phrType         1   37[BANK0 ] enum E181
 15438 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 15439 ;;  mask            4   32[BANK0 ] unsigned long 
 15440 ;;  count           1   36[BANK0 ] unsigned char 
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  1    wreg      void 
 15443 ;; Registers used:
 15444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15450 ;;      Params:         4       0       0       0       0       0       0
 15451 ;;      Locals:         0      38       0       0       0       0       0
 15452 ;;      Temps:          0       0       0       0       0       0       0
 15453 ;;      Totals:         4      38       0       0       0       0       0
 15454 ;;Total ram usage:       42 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    5
 15457 ;; This function calls:
 15458 ;;		_Make32bitsArray
 15459 ;;		_SwSpi_Clk_Pin
 15460 ;;		_SwSpi_Data_Pin
 15461 ;;		_ZeroArray
 15462 ;; This function is called by:
 15463 ;;		_SWSPI_send_word
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           	psect	text61
 15468  0032EE                     __ptext61:
 15469                           	opt stack 0
 15470  0032EE                     _SWSPI_Synth_send_bits:
 15471                           	opt stack 22
 15472                           
 15473                           ;incstack = 0
 15474                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 15475  0032EE  0100               	movlb	0	; () banked
 15476  0032F0  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 15477                           
 15478                           ;SwSpiApp.c: 69: uint8_t count;
 15479                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 15480  0032F2  0E01               	movlw	1
 15481  0032F4  0100               	movlb	0	; () banked
 15482  0032F6  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 15483  0032F8  0E00               	movlw	0
 15484  0032FA  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 15485  0032FC  0E00               	movlw	0
 15486  0032FE  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 15487  003300  0E00               	movlw	0
 15488  003302  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;SwSpiApp.c: 72: bool bitArray[32];
 15492                           ;SwSpiApp.c: 73: ZeroArray(bitArray, sizeof(bitArray));
 15493  003304  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15494  003306  6E20               	movwf	ZeroArray@array,c
 15495  003308  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15496  00330A  6E21               	movwf	ZeroArray@array+1,c
 15497  00330C  0E00               	movlw	0
 15498  00330E  6E23               	movwf	ZeroArray@size+1,c
 15499  003310  0E20               	movlw	32
 15500  003312  6E22               	movwf	ZeroArray@size,c
 15501  003314  EC34  F022         	call	_ZeroArray	;wreg free
 15502                           
 15503                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 15504  003318  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15505  00331A  6E18               	movwf	Make32bitsArray@array,c
 15506  00331C  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15507  00331E  6E19               	movwf	Make32bitsArray@array+1,c
 15508  003320  C024  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 15509  003324  C025  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 15510  003328  C026  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 15511  00332C  C027  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 15512  003330  ECBB  F01E         	call	_Make32bitsArray	;wreg free
 15513                           
 15514                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 15515  003334  0E00               	movlw	0
 15516  003336  0100               	movlb	0	; () banked
 15517  003338  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 15518  00333A                     l9277:
 15519                           
 15520                           ; BSR set to: 0
 15521  00333A  0E1F               	movlw	31
 15522  00333C  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 15523  00333E  D001               	goto	l716
 15524  003340  D026               	goto	u9630
 15525  003342                     l716:
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;SwSpiApp.c: 78: {
 15529                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 15530                           
 15531                           ; BSR set to: 0
 15532  003342  0E00               	movlw	0
 15533  003344  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15534  003346  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15535  003348  EC3E  F01F         	call	_SwSpi_Clk_Pin
 15536                           
 15537                           ;SwSpiApp.c: 82: if (bitArray[count])
 15538  00334C  0100               	movlb	0	; () banked
 15539  00334E  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 15540  003350  0D01               	mullw	1
 15541  003352  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 15542  003354  24F3               	addwf	prodl,w,c
 15543  003356  6ED9               	movwf	fsr2l,c
 15544  003358  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 15545  00335A  20F4               	addwfc	prodh,w,c
 15546  00335C  6EDA               	movwf	fsr2h,c
 15547  00335E  50DF               	movf	indf2,w,c
 15548  003360  B4D8               	btfsc	status,2,c
 15549  003362  D006               	goto	l718
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;SwSpiApp.c: 83: {
 15553                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 15554  003364  0E01               	movlw	1
 15555  003366  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15556  003368  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15557  00336A  EC13  F01F         	call	_SwSpi_Data_Pin
 15558                           
 15559                           ;SwSpiApp.c: 85: }
 15560  00336E  D006               	goto	l719
 15561  003370                     l718:
 15562                           
 15563                           ;SwSpiApp.c: 86: else
 15564                           ;SwSpiApp.c: 87: {
 15565                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 15566  003370  0E00               	movlw	0
 15567  003372  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15568  003374  0100               	movlb	0	; () banked
 15569  003376  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15570  003378  EC13  F01F         	call	_SwSpi_Data_Pin
 15571  00337C                     l719:
 15572                           
 15573                           ;SwSpiApp.c: 89: }
 15574                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 15575  00337C  0E01               	movlw	1
 15576  00337E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15577  003380  0100               	movlb	0	; () banked
 15578  003382  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15579  003384  EC3E  F01F         	call	_SwSpi_Clk_Pin
 15580  003388  0100               	movlb	0	; () banked
 15581  00338A  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 15582  00338C  D7D6               	goto	l9277
 15583  00338E                     u9630:
 15584                           
 15585                           ; BSR set to: 0
 15586                           ;SwSpiApp.c: 92: }
 15587                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 15588                           
 15589                           ; BSR set to: 0
 15590  00338E  0E21               	movlw	33
 15591  003390                     u10867:
 15592  003390  2EE8               	decfsz	wreg,f,c
 15593  003392  D7FE               	bra	u10867
 15594  003394  F000               	nop	
 15595                           
 15596                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 15597  003396  0E00               	movlw	0
 15598  003398  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 15599  00339A  0100               	movlb	0	; () banked
 15600  00339C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15601  00339E  EC13  F01F         	call	_SwSpi_Data_Pin
 15602                           
 15603                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 15604  0033A2  0E00               	movlw	0
 15605  0033A4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15606  0033A6  0100               	movlb	0	; () banked
 15607  0033A8  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 15608  0033AA  EC3E  F01F         	call	_SwSpi_Clk_Pin
 15609  0033AE  0012               	return		;funcret
 15610  0033B0                     __end_of_SWSPI_Synth_send_bits:
 15611                           	opt stack 0
 15612                           tosu	equ	0xFFF
 15613                           tosh	equ	0xFFE
 15614                           tosl	equ	0xFFD
 15615                           pclath	equ	0xFFA
 15616                           tblptru	equ	0xFF8
 15617                           tblptrh	equ	0xFF7
 15618                           tblptrl	equ	0xFF6
 15619                           tablat	equ	0xFF5
 15620                           prodh	equ	0xFF4
 15621                           prodl	equ	0xFF3
 15622                           intcon	equ	0xFF2
 15623                           intcon2	equ	0xFF1
 15624                           indf0	equ	0xFEF
 15625                           postinc0	equ	0xFEE
 15626                           fsr0h	equ	0xFEA
 15627                           fsr0l	equ	0xFE9
 15628                           wreg	equ	0xFE8
 15629                           indf1	equ	0xFE7
 15630                           postdec1	equ	0xFE5
 15631                           fsr1h	equ	0xFE2
 15632                           fsr1l	equ	0xFE1
 15633                           indf2	equ	0xFDF
 15634                           postinc2	equ	0xFDE
 15635                           postdec2	equ	0xFDD
 15636                           fsr2h	equ	0xFDA
 15637                           fsr2l	equ	0xFD9
 15638                           status	equ	0xFD8
 15639                           
 15640 ;; *************** function _ZeroArray *****************
 15641 ;; Defined at:
 15642 ;;		line 33 in file "SystemCommon.c"
 15643 ;; Parameters:    Size  Location     Type
 15644 ;;  array           2   31[COMRAM] PTR unsigned char 
 15645 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15646 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15647 ;;  size            2   33[COMRAM] int 
 15648 ;; Auto vars:     Size  Location     Type
 15649 ;;		None
 15650 ;; Return value:  Size  Location     Type
 15651 ;;                  1    wreg      void 
 15652 ;; Registers used:
 15653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15654 ;; Tracked objects:
 15655 ;;		On entry : 0/0
 15656 ;;		On exit  : 0/0
 15657 ;;		Unchanged: 0/0
 15658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15659 ;;      Params:         4       0       0       0       0       0       0
 15660 ;;      Locals:         0       0       0       0       0       0       0
 15661 ;;      Temps:          0       0       0       0       0       0       0
 15662 ;;      Totals:         4       0       0       0       0       0       0
 15663 ;;Total ram usage:        4 bytes
 15664 ;; Hardware stack levels used:    1
 15665 ;; Hardware stack levels required when called:    4
 15666 ;; This function calls:
 15667 ;;		_memset
 15668 ;; This function is called by:
 15669 ;;		_InitRxMessageParams
 15670 ;;		_SWSPI_Synth_send_bits
 15671 ;;		_GetIntFromUartData
 15672 ;;		_SendAckMessage
 15673 ;;		_FlashReadUart
 15674 ;;		_FlashEreaseMem
 15675 ;;		_FlashReadCondition
 15676 ;; This function uses a non-reentrant model
 15677 ;;
 15678                           
 15679                           	psect	text62
 15680  004468                     __ptext62:
 15681                           	opt stack 0
 15682  004468                     _ZeroArray:
 15683                           	opt stack 24
 15684                           
 15685                           ;SystemCommon.c: 35: memset(array, 0x0, size);
 15686                           
 15687                           ;incstack = 0
 15688  004468  C020  F018         	movff	ZeroArray@array,memset@p1
 15689  00446C  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 15690  004470  0E00               	movlw	0
 15691  004472  6E1B               	movwf	memset@c+1,c
 15692  004474  0E00               	movlw	0
 15693  004476  6E1A               	movwf	memset@c,c
 15694  004478  C022  F01C         	movff	ZeroArray@size,memset@n
 15695  00447C  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 15696  004480  EC90  F021         	call	_memset	;wreg free
 15697  004484  0012               	return		;funcret
 15698  004486                     __end_of_ZeroArray:
 15699                           	opt stack 0
 15700                           tosu	equ	0xFFF
 15701                           tosh	equ	0xFFE
 15702                           tosl	equ	0xFFD
 15703                           pclath	equ	0xFFA
 15704                           tblptru	equ	0xFF8
 15705                           tblptrh	equ	0xFF7
 15706                           tblptrl	equ	0xFF6
 15707                           tablat	equ	0xFF5
 15708                           prodh	equ	0xFF4
 15709                           prodl	equ	0xFF3
 15710                           intcon	equ	0xFF2
 15711                           intcon2	equ	0xFF1
 15712                           indf0	equ	0xFEF
 15713                           postinc0	equ	0xFEE
 15714                           fsr0h	equ	0xFEA
 15715                           fsr0l	equ	0xFE9
 15716                           wreg	equ	0xFE8
 15717                           indf1	equ	0xFE7
 15718                           postdec1	equ	0xFE5
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           fsr2h	equ	0xFDA
 15725                           fsr2l	equ	0xFD9
 15726                           status	equ	0xFD8
 15727                           
 15728 ;; *************** function _memset *****************
 15729 ;; Defined at:
 15730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  p1              2   23[COMRAM] PTR void 
 15733 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15734 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15735 ;;  c               2   25[COMRAM] int 
 15736 ;;  n               2   27[COMRAM] unsigned int 
 15737 ;; Auto vars:     Size  Location     Type
 15738 ;;  p               2   29[COMRAM] PTR unsigned char 
 15739 ;;		 -> GetIntFromUartData@dataRegArr(8), SWSPI_Synth_send_bits@bitArray(32), FlashReadCondition@TxMsg(7), FlashReadUart
      +@TxMsg(67), 
 15740 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 15741 ;; Return value:  Size  Location     Type
 15742 ;;                  2   23[COMRAM] PTR void 
 15743 ;; Registers used:
 15744 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15745 ;; Tracked objects:
 15746 ;;		On entry : 0/0
 15747 ;;		On exit  : 0/0
 15748 ;;		Unchanged: 0/0
 15749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15750 ;;      Params:         6       0       0       0       0       0       0
 15751 ;;      Locals:         2       0       0       0       0       0       0
 15752 ;;      Temps:          0       0       0       0       0       0       0
 15753 ;;      Totals:         8       0       0       0       0       0       0
 15754 ;;Total ram usage:        8 bytes
 15755 ;; Hardware stack levels used:    1
 15756 ;; Hardware stack levels required when called:    3
 15757 ;; This function calls:
 15758 ;;		Nothing
 15759 ;; This function is called by:
 15760 ;;		_ZeroArray
 15761 ;; This function uses a non-reentrant model
 15762 ;;
 15763                           
 15764                           	psect	text63
 15765  004320                     __ptext63:
 15766                           	opt stack 0
 15767  004320                     _memset:
 15768                           	opt stack 24
 15769                           
 15770                           ;incstack = 0
 15771  004320  C018  F01E         	movff	memset@p1,memset@p
 15772  004324  C019  F01F         	movff	memset@p1+1,memset@p+1
 15773  004328  D008               	goto	l2198
 15774  00432A                     l8303:
 15775  00432A  C01E  FFD9         	movff	memset@p,fsr2l
 15776  00432E  C01F  FFDA         	movff	memset@p+1,fsr2h
 15777  004332  C01A  FFDF         	movff	memset@c,indf2
 15778  004336  4A1E               	infsnz	memset@p,f,c
 15779  004338  2A1F               	incf	memset@p+1,f,c
 15780  00433A                     l2198:
 15781  00433A  061C               	decf	memset@n,f,c
 15782  00433C  A0D8               	btfss	status,0,c
 15783  00433E  061D               	decf	memset@n+1,f,c
 15784  004340  281C               	incf	memset@n,w,c
 15785  004342  E1F3               	bnz	l8303
 15786  004344  281D               	incf	memset@n+1,w,c
 15787  004346  B4D8               	btfsc	status,2,c
 15788  004348  0012               	return	
 15789  00434A  D7EF               	goto	l2199
 15790  00434C                     __end_of_memset:
 15791                           	opt stack 0
 15792                           tosu	equ	0xFFF
 15793                           tosh	equ	0xFFE
 15794                           tosl	equ	0xFFD
 15795                           pclath	equ	0xFFA
 15796                           tblptru	equ	0xFF8
 15797                           tblptrh	equ	0xFF7
 15798                           tblptrl	equ	0xFF6
 15799                           tablat	equ	0xFF5
 15800                           prodh	equ	0xFF4
 15801                           prodl	equ	0xFF3
 15802                           intcon	equ	0xFF2
 15803                           intcon2	equ	0xFF1
 15804                           indf0	equ	0xFEF
 15805                           postinc0	equ	0xFEE
 15806                           fsr0h	equ	0xFEA
 15807                           fsr0l	equ	0xFE9
 15808                           wreg	equ	0xFE8
 15809                           indf1	equ	0xFE7
 15810                           postdec1	equ	0xFE5
 15811                           fsr1h	equ	0xFE2
 15812                           fsr1l	equ	0xFE1
 15813                           indf2	equ	0xFDF
 15814                           postinc2	equ	0xFDE
 15815                           postdec2	equ	0xFDD
 15816                           fsr2h	equ	0xFDA
 15817                           fsr2l	equ	0xFD9
 15818                           status	equ	0xFD8
 15819                           
 15820 ;; *************** function _Make32bitsArray *****************
 15821 ;; Defined at:
 15822 ;;		line 24 in file "SystemCommon.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;  array           2   23[COMRAM] PTR unsigned char 
 15825 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 15826 ;;  data            4   25[COMRAM] unsigned long 
 15827 ;; Auto vars:     Size  Location     Type
 15828 ;;  idx             2   31[COMRAM] int 
 15829 ;; Return value:  Size  Location     Type
 15830 ;;                  1    wreg      void 
 15831 ;; Registers used:
 15832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15838 ;;      Params:         6       0       0       0       0       0       0
 15839 ;;      Locals:         2       0       0       0       0       0       0
 15840 ;;      Temps:          2       0       0       0       0       0       0
 15841 ;;      Totals:        10       0       0       0       0       0       0
 15842 ;;Total ram usage:       10 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:    3
 15845 ;; This function calls:
 15846 ;;		Nothing
 15847 ;; This function is called by:
 15848 ;;		_SWSPI_Synth_send_bits
 15849 ;; This function uses a non-reentrant model
 15850 ;;
 15851                           
 15852                           	psect	text64
 15853  003D76                     __ptext64:
 15854                           	opt stack 0
 15855  003D76                     _Make32bitsArray:
 15856                           	opt stack 23
 15857                           
 15858                           ;SystemCommon.c: 26: for(int idx = 0; idx <= 32; idx++)
 15859                           
 15860                           ;incstack = 0
 15861  003D76  0E00               	movlw	0
 15862  003D78  6E21               	movwf	Make32bitsArray@idx+1,c
 15863  003D7A  0E00               	movlw	0
 15864  003D7C  6E20               	movwf	Make32bitsArray@idx,c
 15865  003D7E                     l8605:
 15866  003D7E  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 15867  003D80  D006               	goto	l1420
 15868  003D82  5021               	movf	Make32bitsArray@idx+1,w,c
 15869  003D84  E123               	bnz	l1422
 15870  003D86  0E21               	movlw	33
 15871  003D88  5C20               	subwf	Make32bitsArray@idx,w,c
 15872  003D8A  B0D8               	btfsc	status,0,c
 15873  003D8C  0012               	return	
 15874  003D8E                     l1420:
 15875                           
 15876                           ;SystemCommon.c: 27: {
 15877                           ;SystemCommon.c: 28: array[32 - idx - 1] = data % 2;
 15878  003D8E  0E01               	movlw	1
 15879  003D90  2420               	addwf	Make32bitsArray@idx,w,c
 15880  003D92  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 15881  003D94  0E00               	movlw	0
 15882  003D96  2021               	addwfc	Make32bitsArray@idx+1,w,c
 15883  003D98  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 15884  003D9A  1E1E               	comf	??_Make32bitsArray,f,c
 15885  003D9C  1E1F               	comf	??_Make32bitsArray+1,f,c
 15886  003D9E  4A1E               	infsnz	??_Make32bitsArray,f,c
 15887  003DA0  2A1F               	incf	??_Make32bitsArray+1,f,c
 15888  003DA2  0E20               	movlw	32
 15889  003DA4  261E               	addwf	??_Make32bitsArray,f,c
 15890  003DA6  0E00               	movlw	0
 15891  003DA8  221F               	addwfc	??_Make32bitsArray+1,f,c
 15892  003DAA  501E               	movf	??_Make32bitsArray,w,c
 15893  003DAC  2418               	addwf	Make32bitsArray@array,w,c
 15894  003DAE  6ED9               	movwf	fsr2l,c
 15895  003DB0  501F               	movf	??_Make32bitsArray+1,w,c
 15896  003DB2  2019               	addwfc	Make32bitsArray@array+1,w,c
 15897  003DB4  6EDA               	movwf	fsr2h,c
 15898  003DB6  501A               	movf	Make32bitsArray@data,w,c
 15899  003DB8  0B01               	andlw	1
 15900  003DBA  6EDF               	movwf	indf2,c
 15901                           
 15902                           ;SystemCommon.c: 29: data /= 2;
 15903  003DBC  90D8               	bcf	status,0,c
 15904  003DBE  321D               	rrcf	Make32bitsArray@data+3,f,c
 15905  003DC0  321C               	rrcf	Make32bitsArray@data+2,f,c
 15906  003DC2  321B               	rrcf	Make32bitsArray@data+1,f,c
 15907  003DC4  321A               	rrcf	Make32bitsArray@data,f,c
 15908  003DC6  4A20               	infsnz	Make32bitsArray@idx,f,c
 15909  003DC8  2A21               	incf	Make32bitsArray@idx+1,f,c
 15910  003DCA  D7D9               	goto	l8605
 15911  003DCC                     l1422:
 15912  003DCC  0012               	return		;funcret
 15913  003DCE                     __end_of_Make32bitsArray:
 15914                           	opt stack 0
 15915                           tosu	equ	0xFFF
 15916                           tosh	equ	0xFFE
 15917                           tosl	equ	0xFFD
 15918                           pclath	equ	0xFFA
 15919                           tblptru	equ	0xFF8
 15920                           tblptrh	equ	0xFF7
 15921                           tblptrl	equ	0xFF6
 15922                           tablat	equ	0xFF5
 15923                           prodh	equ	0xFF4
 15924                           prodl	equ	0xFF3
 15925                           intcon	equ	0xFF2
 15926                           intcon2	equ	0xFF1
 15927                           indf0	equ	0xFEF
 15928                           postinc0	equ	0xFEE
 15929                           fsr0h	equ	0xFEA
 15930                           fsr0l	equ	0xFE9
 15931                           wreg	equ	0xFE8
 15932                           indf1	equ	0xFE7
 15933                           postdec1	equ	0xFE5
 15934                           fsr1h	equ	0xFE2
 15935                           fsr1l	equ	0xFE1
 15936                           indf2	equ	0xFDF
 15937                           postinc2	equ	0xFDE
 15938                           postdec2	equ	0xFDD
 15939                           fsr2h	equ	0xFDA
 15940                           fsr2l	equ	0xFD9
 15941                           status	equ	0xFD8
 15942                           
 15943 ;; *************** function _SWSPI_DAC_send_bits *****************
 15944 ;; Defined at:
 15945 ;;		line 43 in file "SwSpiApp.c"
 15946 ;; Parameters:    Size  Location     Type
 15947 ;;  phrType         1    wreg     enum E181
 15948 ;;  data            1   25[COMRAM] unsigned char 
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;  phrType         1   27[COMRAM] enum E181
 15951 ;;  count           1   26[COMRAM] unsigned char 
 15952 ;; Return value:  Size  Location     Type
 15953 ;;                  1    wreg      void 
 15954 ;; Registers used:
 15955 ;;		wreg, status,2, status,0, cstack
 15956 ;; Tracked objects:
 15957 ;;		On entry : 0/0
 15958 ;;		On exit  : 0/0
 15959 ;;		Unchanged: 0/0
 15960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15961 ;;      Params:         1       0       0       0       0       0       0
 15962 ;;      Locals:         2       0       0       0       0       0       0
 15963 ;;      Temps:          0       0       0       0       0       0       0
 15964 ;;      Totals:         3       0       0       0       0       0       0
 15965 ;;Total ram usage:        3 bytes
 15966 ;; Hardware stack levels used:    1
 15967 ;; Hardware stack levels required when called:    4
 15968 ;; This function calls:
 15969 ;;		_SwSpi_Clk_Pin
 15970 ;;		_SwSpi_Data_Pin
 15971 ;; This function is called by:
 15972 ;;		_SWSPI_send_word
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           	psect	text65
 15977  003DCE                     __ptext65:
 15978                           	opt stack 0
 15979  003DCE                     _SWSPI_DAC_send_bits:
 15980                           	opt stack 23
 15981                           
 15982                           ;incstack = 0
 15983                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 15984  003DCE  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 15985                           
 15986                           ;SwSpiApp.c: 45: uint8_t count;
 15987                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 15988  003DD0  0E08               	movlw	8
 15989  003DD2  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 15990  003DD4  D01A               	goto	l708
 15991  003DD6                     
 15992                           ;SwSpiApp.c: 47: {
 15993                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 15994  003DD6  0E01               	movlw	1
 15995  003DD8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 15996  003DDA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 15997  003DDC  EC3E  F01F         	call	_SwSpi_Clk_Pin
 15998                           
 15999                           ;SwSpiApp.c: 50: if (data & 0X80)
 16000  003DE0  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 16001  003DE2  D006               	goto	l710
 16002                           
 16003                           ;SwSpiApp.c: 51: {
 16004                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 16005  003DE4  0E01               	movlw	1
 16006  003DE6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16007  003DE8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16008  003DEA  EC13  F01F         	call	_SwSpi_Data_Pin
 16009                           
 16010                           ;SwSpiApp.c: 54: }
 16011  003DEE  D005               	goto	l711
 16012  003DF0                     l710:
 16013                           
 16014                           ;SwSpiApp.c: 55: else
 16015                           ;SwSpiApp.c: 56: {
 16016                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 16017  003DF0  0E00               	movlw	0
 16018  003DF2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16019  003DF4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16020  003DF6  EC13  F01F         	call	_SwSpi_Data_Pin
 16021  003DFA                     l711:
 16022                           
 16023                           ;SwSpiApp.c: 58: }
 16024                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 16025  003DFA  0E00               	movlw	0
 16026  003DFC  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16027  003DFE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16028  003E00  EC3E  F01F         	call	_SwSpi_Clk_Pin
 16029  003E04  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 16030  003E06  90D8               	bcf	status,0,c
 16031  003E08  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 16032  003E0A                     l708:
 16033  003E0A  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 16034  003E0C  A4D8               	btfss	status,2,c
 16035  003E0E  D7E3               	goto	l709
 16036                           
 16037                           ;SwSpiApp.c: 61: }
 16038                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 16039  003E10  0E00               	movlw	0
 16040  003E12  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 16041  003E14  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16042  003E16  EC13  F01F         	call	_SwSpi_Data_Pin
 16043                           
 16044                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 16045  003E1A  0E00               	movlw	0
 16046  003E1C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 16047  003E1E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 16048  003E20  EC3E  F01F         	call	_SwSpi_Clk_Pin
 16049  003E24  0012               	return		;funcret
 16050  003E26                     __end_of_SWSPI_DAC_send_bits:
 16051                           	opt stack 0
 16052                           tosu	equ	0xFFF
 16053                           tosh	equ	0xFFE
 16054                           tosl	equ	0xFFD
 16055                           pclath	equ	0xFFA
 16056                           tblptru	equ	0xFF8
 16057                           tblptrh	equ	0xFF7
 16058                           tblptrl	equ	0xFF6
 16059                           tablat	equ	0xFF5
 16060                           prodh	equ	0xFF4
 16061                           prodl	equ	0xFF3
 16062                           intcon	equ	0xFF2
 16063                           intcon2	equ	0xFF1
 16064                           indf0	equ	0xFEF
 16065                           postinc0	equ	0xFEE
 16066                           fsr0h	equ	0xFEA
 16067                           fsr0l	equ	0xFE9
 16068                           wreg	equ	0xFE8
 16069                           indf1	equ	0xFE7
 16070                           postdec1	equ	0xFE5
 16071                           fsr1h	equ	0xFE2
 16072                           fsr1l	equ	0xFE1
 16073                           indf2	equ	0xFDF
 16074                           postinc2	equ	0xFDE
 16075                           postdec2	equ	0xFDD
 16076                           fsr2h	equ	0xFDA
 16077                           fsr2l	equ	0xFD9
 16078                           status	equ	0xFD8
 16079                           
 16080 ;; *************** function _SwSpi_Data_Pin *****************
 16081 ;; Defined at:
 16082 ;;		line 103 in file "SwSpiApp.c"
 16083 ;; Parameters:    Size  Location     Type
 16084 ;;  phrType         1    wreg     enum E181
 16085 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16086 ;; Auto vars:     Size  Location     Type
 16087 ;;  phrType         1   24[COMRAM] enum E181
 16088 ;; Return value:  Size  Location     Type
 16089 ;;                  1    wreg      void 
 16090 ;; Registers used:
 16091 ;;		wreg, status,2, status,0
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 0/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16097 ;;      Params:         1       0       0       0       0       0       0
 16098 ;;      Locals:         1       0       0       0       0       0       0
 16099 ;;      Temps:          0       0       0       0       0       0       0
 16100 ;;      Totals:         2       0       0       0       0       0       0
 16101 ;;Total ram usage:        2 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; Hardware stack levels required when called:    3
 16104 ;; This function calls:
 16105 ;;		Nothing
 16106 ;; This function is called by:
 16107 ;;		_SWSPI_DAC_send_bits
 16108 ;;		_SWSPI_Synth_send_bits
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           	psect	text66
 16113  003E26                     __ptext66:
 16114                           	opt stack 0
 16115  003E26                     _SwSpi_Data_Pin:
 16116                           	opt stack 23
 16117                           
 16118                           ;incstack = 0
 16119                           ;SwSpi_Data_Pin@phrType stored from wreg
 16120  003E26  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 16121                           
 16122                           ;SwSpiApp.c: 105: switch(phrType)
 16123  003E28  D01E               	goto	l723
 16124  003E2A                     
 16125                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 16126  003E2A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16127  003E2C  A4D8               	btfss	status,2,c
 16128  003E2E  D002               	goto	l725
 16129                           
 16130                           ;SwSpiApp.c: 109: {
 16131                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 16132  003E30  808C               	bsf	3980,0,c	;volatile
 16133                           
 16134                           ;SwSpiApp.c: 111: }
 16135  003E32  0012               	return	
 16136  003E34                     l725:
 16137                           
 16138                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 16139  003E34  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16140  003E36  A4D8               	btfss	status,2,c
 16141  003E38  0012               	return	
 16142                           
 16143                           ;SwSpiApp.c: 113: {
 16144                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 16145  003E3A  908C               	bcf	3980,0,c	;volatile
 16146                           
 16147                           ;SwSpiApp.c: 115: }
 16148                           ;SwSpiApp.c: 116: break;
 16149  003E3C  0012               	return	
 16150  003E3E                     
 16151                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 16152  003E3E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16153  003E40  A4D8               	btfss	status,2,c
 16154  003E42  D002               	goto	l734
 16155                           
 16156                           ;SwSpiApp.c: 120: {
 16157                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 16158  003E44  8A8B               	bsf	3979,5,c	;volatile
 16159                           
 16160                           ;SwSpiApp.c: 122: }
 16161  003E46  0012               	return	
 16162  003E48                     l734:
 16163                           
 16164                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 16165  003E48  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16166  003E4A  A4D8               	btfss	status,2,c
 16167  003E4C  0012               	return	
 16168                           
 16169                           ;SwSpiApp.c: 124: {
 16170                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 16171  003E4E  9A8B               	bcf	3979,5,c	;volatile
 16172                           
 16173                           ;SwSpiApp.c: 126: }
 16174                           ;SwSpiApp.c: 127: break;
 16175  003E50  0012               	return	
 16176  003E52                     
 16177                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 16178  003E52  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 16179  003E54  A4D8               	btfss	status,2,c
 16180  003E56  D002               	goto	l742
 16181                           
 16182                           ;SwSpiApp.c: 131: {
 16183                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 16184  003E58  8889               	bsf	3977,4,c	;volatile
 16185                           
 16186                           ;SwSpiApp.c: 133: }
 16187  003E5A  0012               	return	
 16188  003E5C                     l742:
 16189                           
 16190                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 16191  003E5C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 16192  003E5E  A4D8               	btfss	status,2,c
 16193  003E60  0012               	return	
 16194                           
 16195                           ;SwSpiApp.c: 135: {
 16196                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 16197  003E62  9889               	bcf	3977,4,c	;volatile
 16198                           
 16199                           ;SwSpiApp.c: 139: }
 16200                           
 16201                           ;SwSpiApp.c: 137: }
 16202                           ;SwSpiApp.c: 138: break;
 16203  003E64  0012               	return	
 16204  003E66                     l723:
 16205  003E66  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 16206                           
 16207                           ; Switch size 1, requested type "space"
 16208                           ; Number of cases is 3, Range of values is 0 to 2
 16209                           ; switch strategies available:
 16210                           ; Name         Instructions Cycles
 16211                           ; simple_byte           10     6 (average)
 16212                           ;	Chosen strategy is simple_byte
 16213  003E68  0A00               	xorlw	0	; case 0
 16214  003E6A  B4D8               	btfsc	status,2,c
 16215  003E6C  D7DE               	goto	l724
 16216  003E6E  0A01               	xorlw	1	; case 1
 16217  003E70  B4D8               	btfsc	status,2,c
 16218  003E72  D7E5               	goto	l733
 16219  003E74  0A03               	xorlw	3	; case 2
 16220  003E76  A4D8               	btfss	status,2,c
 16221  003E78  0012               	return	
 16222  003E7A  D7EB               	goto	l741
 16223  003E7C                     __end_of_SwSpi_Data_Pin:
 16224                           	opt stack 0
 16225                           tosu	equ	0xFFF
 16226                           tosh	equ	0xFFE
 16227                           tosl	equ	0xFFD
 16228                           pclath	equ	0xFFA
 16229                           tblptru	equ	0xFF8
 16230                           tblptrh	equ	0xFF7
 16231                           tblptrl	equ	0xFF6
 16232                           tablat	equ	0xFF5
 16233                           prodh	equ	0xFF4
 16234                           prodl	equ	0xFF3
 16235                           intcon	equ	0xFF2
 16236                           intcon2	equ	0xFF1
 16237                           indf0	equ	0xFEF
 16238                           postinc0	equ	0xFEE
 16239                           fsr0h	equ	0xFEA
 16240                           fsr0l	equ	0xFE9
 16241                           wreg	equ	0xFE8
 16242                           indf1	equ	0xFE7
 16243                           postdec1	equ	0xFE5
 16244                           fsr1h	equ	0xFE2
 16245                           fsr1l	equ	0xFE1
 16246                           indf2	equ	0xFDF
 16247                           postinc2	equ	0xFDE
 16248                           postdec2	equ	0xFDD
 16249                           fsr2h	equ	0xFDA
 16250                           fsr2l	equ	0xFD9
 16251                           status	equ	0xFD8
 16252                           
 16253 ;; *************** function _SwSpi_Clk_Pin *****************
 16254 ;; Defined at:
 16255 ;;		line 142 in file "SwSpiApp.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  phrType         1    wreg     enum E181
 16258 ;;  cPinMode        1   23[COMRAM] unsigned char 
 16259 ;; Auto vars:     Size  Location     Type
 16260 ;;  phrType         1   24[COMRAM] enum E181
 16261 ;; Return value:  Size  Location     Type
 16262 ;;                  1    wreg      void 
 16263 ;; Registers used:
 16264 ;;		wreg, status,2, status,0
 16265 ;; Tracked objects:
 16266 ;;		On entry : 0/0
 16267 ;;		On exit  : 0/0
 16268 ;;		Unchanged: 0/0
 16269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16270 ;;      Params:         1       0       0       0       0       0       0
 16271 ;;      Locals:         1       0       0       0       0       0       0
 16272 ;;      Temps:          0       0       0       0       0       0       0
 16273 ;;      Totals:         2       0       0       0       0       0       0
 16274 ;;Total ram usage:        2 bytes
 16275 ;; Hardware stack levels used:    1
 16276 ;; Hardware stack levels required when called:    3
 16277 ;; This function calls:
 16278 ;;		Nothing
 16279 ;; This function is called by:
 16280 ;;		_SWSPI_DAC_send_bits
 16281 ;;		_SWSPI_Synth_send_bits
 16282 ;;		_SwSpi_Synth_Toggle_Clock
 16283 ;; This function uses a non-reentrant model
 16284 ;;
 16285                           
 16286                           	psect	text67
 16287  003E7C                     __ptext67:
 16288                           	opt stack 0
 16289  003E7C                     _SwSpi_Clk_Pin:
 16290                           	opt stack 23
 16291                           
 16292                           ;incstack = 0
 16293                           ;SwSpi_Clk_Pin@phrType stored from wreg
 16294  003E7C  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 16295                           
 16296                           ;SwSpiApp.c: 144: switch(phrType)
 16297  003E7E  D01E               	goto	l752
 16298  003E80                     
 16299                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 16300  003E80  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16301  003E82  A4D8               	btfss	status,2,c
 16302  003E84  D002               	goto	l754
 16303                           
 16304                           ;SwSpiApp.c: 148: {
 16305                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 16306  003E86  868B               	bsf	3979,3,c	;volatile
 16307                           
 16308                           ;SwSpiApp.c: 150: }
 16309  003E88  0012               	return	
 16310  003E8A                     l754:
 16311                           
 16312                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 16313  003E8A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16314  003E8C  A4D8               	btfss	status,2,c
 16315  003E8E  0012               	return	
 16316                           
 16317                           ;SwSpiApp.c: 152: {
 16318                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 16319  003E90  968B               	bcf	3979,3,c	;volatile
 16320                           
 16321                           ;SwSpiApp.c: 154: }
 16322                           ;SwSpiApp.c: 155: break;
 16323  003E92  0012               	return	
 16324  003E94                     
 16325                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 16326  003E94  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16327  003E96  A4D8               	btfss	status,2,c
 16328  003E98  D002               	goto	l763
 16329                           
 16330                           ;SwSpiApp.c: 159: {
 16331                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 16332  003E9A  888B               	bsf	3979,4,c	;volatile
 16333                           
 16334                           ;SwSpiApp.c: 161: }
 16335  003E9C  0012               	return	
 16336  003E9E                     l763:
 16337                           
 16338                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 16339  003E9E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16340  003EA0  A4D8               	btfss	status,2,c
 16341  003EA2  0012               	return	
 16342                           
 16343                           ;SwSpiApp.c: 163: {
 16344                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 16345  003EA4  988B               	bcf	3979,4,c	;volatile
 16346                           
 16347                           ;SwSpiApp.c: 165: }
 16348                           ;SwSpiApp.c: 167: break;
 16349  003EA6  0012               	return	
 16350  003EA8                     
 16351                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 16352  003EA8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 16353  003EAA  A4D8               	btfss	status,2,c
 16354  003EAC  D002               	goto	l771
 16355                           
 16356                           ;SwSpiApp.c: 171: {
 16357                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 16358  003EAE  8689               	bsf	3977,3,c	;volatile
 16359                           
 16360                           ;SwSpiApp.c: 173: }
 16361  003EB0  0012               	return	
 16362  003EB2                     l771:
 16363                           
 16364                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 16365  003EB2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 16366  003EB4  A4D8               	btfss	status,2,c
 16367  003EB6  0012               	return	
 16368                           
 16369                           ;SwSpiApp.c: 175: {
 16370                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 16371  003EB8  9689               	bcf	3977,3,c	;volatile
 16372                           
 16373                           ;SwSpiApp.c: 179: }
 16374                           
 16375                           ;SwSpiApp.c: 177: }
 16376                           ;SwSpiApp.c: 178: break;
 16377  003EBA  0012               	return	
 16378  003EBC                     l752:
 16379  003EBC  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 16380                           
 16381                           ; Switch size 1, requested type "space"
 16382                           ; Number of cases is 3, Range of values is 0 to 2
 16383                           ; switch strategies available:
 16384                           ; Name         Instructions Cycles
 16385                           ; simple_byte           10     6 (average)
 16386                           ;	Chosen strategy is simple_byte
 16387  003EBE  0A00               	xorlw	0	; case 0
 16388  003EC0  B4D8               	btfsc	status,2,c
 16389  003EC2  D7DE               	goto	l753
 16390  003EC4  0A01               	xorlw	1	; case 1
 16391  003EC6  B4D8               	btfsc	status,2,c
 16392  003EC8  D7E5               	goto	l762
 16393  003ECA  0A03               	xorlw	3	; case 2
 16394  003ECC  A4D8               	btfss	status,2,c
 16395  003ECE  0012               	return	
 16396  003ED0  D7EB               	goto	l770
 16397  003ED2                     __end_of_SwSpi_Clk_Pin:
 16398                           	opt stack 0
 16399                           tosu	equ	0xFFF
 16400                           tosh	equ	0xFFE
 16401                           tosl	equ	0xFFD
 16402                           pclath	equ	0xFFA
 16403                           tblptru	equ	0xFF8
 16404                           tblptrh	equ	0xFF7
 16405                           tblptrl	equ	0xFF6
 16406                           tablat	equ	0xFF5
 16407                           prodh	equ	0xFF4
 16408                           prodl	equ	0xFF3
 16409                           intcon	equ	0xFF2
 16410                           intcon2	equ	0xFF1
 16411                           indf0	equ	0xFEF
 16412                           postinc0	equ	0xFEE
 16413                           fsr0h	equ	0xFEA
 16414                           fsr0l	equ	0xFE9
 16415                           wreg	equ	0xFE8
 16416                           indf1	equ	0xFE7
 16417                           postdec1	equ	0xFE5
 16418                           fsr1h	equ	0xFE2
 16419                           fsr1l	equ	0xFE1
 16420                           indf2	equ	0xFDF
 16421                           postinc2	equ	0xFDE
 16422                           postdec2	equ	0xFDD
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function _ReadIntFromEeprom *****************
 16428 ;; Defined at:
 16429 ;;		line 47 in file "SystemCommon.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  address         1    wreg     unsigned char 
 16432 ;;  numOfByes       2   83[BANK0 ] int 
 16433 ;; Auto vars:     Size  Location     Type
 16434 ;;  address         1  100[BANK0 ] unsigned char 
 16435 ;;  base            4   90[BANK0 ] unsigned long 
 16436 ;;  idx             1  105[BANK0 ] unsigned char 
 16437 ;;  retVal          4  101[BANK0 ] unsigned long 
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  4   83[BANK0 ] unsigned long 
 16440 ;; Registers used:
 16441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16447 ;;      Params:         0       4       0       0       0       0       0
 16448 ;;      Locals:         0      16       0       0       0       0       0
 16449 ;;      Temps:          0       3       0       0       0       0       0
 16450 ;;      Totals:         0      23       0       0       0       0       0
 16451 ;;Total ram usage:       23 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    8
 16454 ;; This function calls:
 16455 ;;		_EepromRead
 16456 ;;		___awtoft
 16457 ;;		___fttol
 16458 ;;		___lmul
 16459 ;;		_pow
 16460 ;; This function is called by:
 16461 ;;		_DacInit
 16462 ;;		_DacReadValue
 16463 ;; This function uses a non-reentrant model
 16464 ;;
 16465                           
 16466                           	psect	text68
 16467  00286E                     __ptext68:
 16468                           	opt stack 0
 16469  00286E                     _ReadIntFromEeprom:
 16470                           	opt stack 20
 16471                           
 16472                           ;incstack = 0
 16473                           ;ReadIntFromEeprom@address stored from wreg
 16474  00286E  0100               	movlb	0	; () banked
 16475  002870  6FC4               	movwf	ReadIntFromEeprom@address& (0+255),b
 16476                           
 16477                           ;SystemCommon.c: 49: uint32_t retVal = 0x00;
 16478  002872  0E00               	movlw	0
 16479  002874  0100               	movlb	0	; () banked
 16480  002876  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 16481  002878  0E00               	movlw	0
 16482  00287A  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 16483  00287C  0E00               	movlw	0
 16484  00287E  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 16485  002880  0E00               	movlw	0
 16486  002882  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 16487                           
 16488                           ; BSR set to: 0
 16489                           ;SystemCommon.c: 50: address -= numOfByes;
 16490  002884  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16491  002886  5FC4               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;SystemCommon.c: 52: for(uint8_t idx = 0; idx < numOfByes; idx++)
 16495  002888  0E00               	movlw	0
 16496  00288A  6FC9               	movwf	ReadIntFromEeprom@idx& (0+255),b
 16497  00288C  D06D               	goto	l1434
 16498  00288E                     
 16499                           ; BSR set to: 0
 16500                           ;SystemCommon.c: 53: {
 16501                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16502                           
 16503                           ; BSR set to: 0
 16504  00288E  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 16505  002890  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16506  002892  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 16507  002894  0E01               	movlw	1
 16508  002896  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 16509  002898  0E00               	movlw	0
 16510  00289A  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16511  00289C  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 16512  00289E  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16513  0028A0  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 16514  0028A2  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16515  0028A4  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16516  0028A6  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 16517  0028A8  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 16518  0028AA  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16519  0028AC  90D8               	bcf	status,0,c
 16520  0028AE  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16521  0028B0  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16522  0028B2  90D8               	bcf	status,0,c
 16523  0028B4  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16524  0028B6  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16525  0028B8  90D8               	bcf	status,0,c
 16526  0028BA  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 16527  0028BC  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 16528  0028BE  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 16529  0028C2  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 16530  0028C6  ECD7  F020         	call	___awtoft	;wreg free
 16531  0028CA  C020  F0BE         	movff	?___awtoft,_ReadIntFromEeprom$3948
 16532  0028CE  C021  F0BF         	movff	?___awtoft+1,_ReadIntFromEeprom$3948+1
 16533  0028D2  C022  F0C0         	movff	?___awtoft+2,_ReadIntFromEeprom$3948+2
 16534                           
 16535                           ;SystemCommon.c: 53: {
 16536                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16537  0028D6  C0BE  F0A5         	movff	_ReadIntFromEeprom$3948,pow@y
 16538  0028DA  C0BF  F0A6         	movff	_ReadIntFromEeprom$3948+1,pow@y+1
 16539  0028DE  C0C0  F0A7         	movff	_ReadIntFromEeprom$3948+2,pow@y+2
 16540  0028E2  0E00               	movlw	0
 16541  0028E4  0100               	movlb	0	; () banked
 16542  0028E6  6FA2               	movwf	pow@x& (0+255),b
 16543  0028E8  0E00               	movlw	0
 16544  0028EA  6FA3               	movwf	(pow@x+1)& (0+255),b
 16545  0028EC  0E40               	movlw	64
 16546  0028EE  6FA4               	movwf	(pow@x+2)& (0+255),b
 16547  0028F0  ECC2  F00F         	call	_pow	;wreg free
 16548  0028F4  C0A2  F0C1         	movff	?_pow,_ReadIntFromEeprom$3949
 16549  0028F8  C0A3  F0C2         	movff	?_pow+1,_ReadIntFromEeprom$3949+1
 16550  0028FC  C0A4  F0C3         	movff	?_pow+2,_ReadIntFromEeprom$3949+2
 16551                           
 16552                           ;SystemCommon.c: 53: {
 16553                           ;SystemCommon.c: 54: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 16554  002900  C0C1  F079         	movff	_ReadIntFromEeprom$3949,___fttol@f1
 16555  002904  C0C2  F07A         	movff	_ReadIntFromEeprom$3949+1,___fttol@f1+1
 16556  002908  C0C3  F07B         	movff	_ReadIntFromEeprom$3949+2,___fttol@f1+2
 16557  00290C  ECE4  F015         	call	___fttol	;wreg free
 16558  002910  C079  F0BA         	movff	?___fttol,ReadIntFromEeprom@base
 16559  002914  C07A  F0BB         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 16560  002918  C07B  F0BC         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 16561  00291C  C07C  F0BD         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 16562                           
 16563                           ;SystemCommon.c: 55: retVal = retVal | EepromRead(address + idx) * base;
 16564  002920  0100               	movlb	0	; () banked
 16565  002922  51C4               	movf	ReadIntFromEeprom@address& (0+255),w,b
 16566  002924  25C9               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 16567  002926  ECBC  F022         	call	_EepromRead
 16568  00292A  0100               	movlb	0	; () banked
 16569  00292C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16570  00292E  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 16571  002930  6E1A               	movwf	___lmul@multiplier,c
 16572  002932  6A1B               	clrf	___lmul@multiplier+1,c
 16573  002934  6A1C               	clrf	___lmul@multiplier+2,c
 16574  002936  6A1D               	clrf	___lmul@multiplier+3,c
 16575  002938  C0BA  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 16576  00293C  C0BB  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 16577  002940  C0BC  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 16578  002944  C0BD  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 16579  002948  EC69  F01F         	call	___lmul	;wreg free
 16580  00294C  0100               	movlb	0	; () banked
 16581  00294E  51C5               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 16582  002950  101A               	iorwf	?___lmul,w,c
 16583  002952  6FC5               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 16584  002954  51C6               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 16585  002956  101B               	iorwf	?___lmul+1,w,c
 16586  002958  6FC6               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 16587  00295A  51C7               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 16588  00295C  101C               	iorwf	?___lmul+2,w,c
 16589  00295E  6FC7               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 16590  002960  51C8               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 16591  002962  101D               	iorwf	?___lmul+3,w,c
 16592  002964  6FC8               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 16593                           
 16594                           ; BSR set to: 0
 16595  002966  2BC9               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 16596  002968                     l1434:
 16597                           
 16598                           ; BSR set to: 0
 16599                           
 16600                           ; BSR set to: 0
 16601  002968  51C9               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 16602  00296A  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 16603  00296C  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 16604  00296E  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 16605  002970  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 16606  002972  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 16607  002974  0A80               	xorlw	128
 16608  002976  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 16609  002978  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 16610  00297A  0A80               	xorlw	128
 16611  00297C  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 16612  00297E  A0D8               	btfss	status,0,c
 16613  002980  D786               	goto	l1435
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;SystemCommon.c: 56: }
 16617                           ;SystemCommon.c: 57: return retVal;
 16618  002982  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 16619  002986  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 16620  00298A  C0C7  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 16621  00298E  C0C8  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 16622                           
 16623                           ; BSR set to: 0
 16624  002992  0012               	return		;funcret
 16625  002994                     __end_of_ReadIntFromEeprom:
 16626                           	opt stack 0
 16627                           tosu	equ	0xFFF
 16628                           tosh	equ	0xFFE
 16629                           tosl	equ	0xFFD
 16630                           pclath	equ	0xFFA
 16631                           tblptru	equ	0xFF8
 16632                           tblptrh	equ	0xFF7
 16633                           tblptrl	equ	0xFF6
 16634                           tablat	equ	0xFF5
 16635                           prodh	equ	0xFF4
 16636                           prodl	equ	0xFF3
 16637                           intcon	equ	0xFF2
 16638                           intcon2	equ	0xFF1
 16639                           indf0	equ	0xFEF
 16640                           postinc0	equ	0xFEE
 16641                           fsr0h	equ	0xFEA
 16642                           fsr0l	equ	0xFE9
 16643                           wreg	equ	0xFE8
 16644                           indf1	equ	0xFE7
 16645                           postdec1	equ	0xFE5
 16646                           fsr1h	equ	0xFE2
 16647                           fsr1l	equ	0xFE1
 16648                           indf2	equ	0xFDF
 16649                           postinc2	equ	0xFDE
 16650                           postdec2	equ	0xFDD
 16651                           fsr2h	equ	0xFDA
 16652                           fsr2l	equ	0xFD9
 16653                           status	equ	0xFD8
 16654                           
 16655 ;; *************** function _pow *****************
 16656 ;; Defined at:
 16657 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 16658 ;; Parameters:    Size  Location     Type
 16659 ;;  x               3   66[BANK0 ] unsigned long 
 16660 ;;  y               3   69[BANK0 ] unsigned long 
 16661 ;; Auto vars:     Size  Location     Type
 16662 ;;  yi              4   79[BANK0 ] unsigned long 
 16663 ;;  sign            1   78[BANK0 ] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;                  3   66[BANK0 ] unsigned char 
 16666 ;; Registers used:
 16667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16668 ;; Tracked objects:
 16669 ;;		On entry : 0/0
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16673 ;;      Params:         0       6       0       0       0       0       0
 16674 ;;      Locals:         0      11       0       0       0       0       0
 16675 ;;      Temps:          0       0       0       0       0       0       0
 16676 ;;      Totals:         0      17       0       0       0       0       0
 16677 ;;Total ram usage:       17 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    7
 16680 ;; This function calls:
 16681 ;;		___ftge
 16682 ;;		___ftmul
 16683 ;;		___ftneg
 16684 ;;		___fttol
 16685 ;;		___lltoft
 16686 ;;		_exp
 16687 ;;		_log
 16688 ;; This function is called by:
 16689 ;;		_SampleSingleChannel
 16690 ;;		_SampleAllChannels
 16691 ;;		_GroupRx
 16692 ;;		_GroupTx
 16693 ;;		_ReadIntFromEeprom
 16694 ;;		_DacSetValue
 16695 ;;		_DacAnalogToDigitalSpi
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           	psect	text69
 16700  001F84                     __ptext69:
 16701                           	opt stack 0
 16702  001F84                     _pow:
 16703                           	opt stack 21
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;incstack = 0
 16707  001F84  0E00               	movlw	0
 16708  001F86  0100               	movlb	0	; () banked
 16709  001F88  6FAE               	movwf	pow@sign& (0+255),b
 16710                           
 16711                           ; BSR set to: 0
 16712  001F8A  51A2               	movf	pow@x& (0+255),w,b
 16713  001F8C  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 16714  001F8E  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 16715  001F90  A4D8               	btfss	status,2,c
 16716  001F92  D01D               	goto	l2210
 16717                           
 16718                           ; BSR set to: 0
 16719  001F94  0E00               	movlw	0
 16720  001F96  6E18               	movwf	___ftge@ff1,c
 16721  001F98  0E00               	movlw	0
 16722  001F9A  6E19               	movwf	___ftge@ff1+1,c
 16723  001F9C  0E00               	movlw	0
 16724  001F9E  6E1A               	movwf	___ftge@ff1+2,c
 16725  001FA0  C0A5  F01B         	movff	pow@y,___ftge@ff2
 16726  001FA4  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 16727  001FA8  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 16728  001FAC  ECB1  F01B         	call	___ftge	;wreg free
 16729  001FB0  A0D8               	btfss	status,0,c
 16730  001FB2  D005               	goto	l2211
 16731  001FB4  0E00               	movlw	0
 16732  001FB6  0101               	movlb	1	; () banked
 16733  001FB8  6FD1               	movwf	(_errno+1)& (0+255),b
 16734  001FBA  0E21               	movlw	33
 16735  001FBC  6FD0               	movwf	_errno& (0+255),b
 16736  001FBE                     l2211:
 16737  001FBE  0E00               	movlw	0
 16738  001FC0  0100               	movlb	0	; () banked
 16739  001FC2  6FA2               	movwf	?_pow& (0+255),b
 16740  001FC4  0E00               	movlw	0
 16741  001FC6  6FA3               	movwf	(?_pow+1)& (0+255),b
 16742  001FC8  0E00               	movlw	0
 16743  001FCA  6FA4               	movwf	(?_pow+2)& (0+255),b
 16744                           
 16745                           ; BSR set to: 0
 16746  001FCC  0012               	return	
 16747  001FCE                     l2210:
 16748                           
 16749                           ; BSR set to: 0
 16750                           
 16751                           ; BSR set to: 0
 16752  001FCE  51A5               	movf	pow@y& (0+255),w,b
 16753  001FD0  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 16754  001FD2  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 16755  001FD4  A4D8               	btfss	status,2,c
 16756  001FD6  D007               	goto	l2213
 16757                           
 16758                           ; BSR set to: 0
 16759  001FD8  0E00               	movlw	0
 16760  001FDA  6FA2               	movwf	?_pow& (0+255),b
 16761  001FDC  0E80               	movlw	128
 16762  001FDE  6FA3               	movwf	(?_pow+1)& (0+255),b
 16763  001FE0  0E3F               	movlw	63
 16764  001FE2  6FA4               	movwf	(?_pow+2)& (0+255),b
 16765                           
 16766                           ; BSR set to: 0
 16767  001FE4  0012               	return	
 16768  001FE6                     l2213:
 16769                           
 16770                           ; BSR set to: 0
 16771                           
 16772                           ; BSR set to: 0
 16773  001FE6  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 16774  001FE8  D043               	goto	l2214
 16775                           
 16776                           ; BSR set to: 0
 16777  001FEA  C0A5  F079         	movff	pow@y,___fttol@f1
 16778  001FEE  C0A6  F07A         	movff	pow@y+1,___fttol@f1+1
 16779  001FF2  C0A7  F07B         	movff	pow@y+2,___fttol@f1+2
 16780  001FF6  ECE4  F015         	call	___fttol	;wreg free
 16781  001FFA  C079  F0AF         	movff	?___fttol,pow@yi
 16782  001FFE  C07A  F0B0         	movff	?___fttol+1,pow@yi+1
 16783  002002  C07B  F0B1         	movff	?___fttol+2,pow@yi+2
 16784  002006  C07C  F0B2         	movff	?___fttol+3,pow@yi+3
 16785  00200A  C0AF  F020         	movff	pow@yi,___lltoft@c
 16786  00200E  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 16787  002012  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 16788  002016  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 16789  00201A  EC8D  F01E         	call	___lltoft	;wreg free
 16790  00201E  0100               	movlb	0	; () banked
 16791  002020  51A5               	movf	pow@y& (0+255),w,b
 16792  002022  1820               	xorwf	?___lltoft,w,c
 16793  002024  E107               	bnz	u9210
 16794  002026  51A6               	movf	(pow@y+1)& (0+255),w,b
 16795  002028  1821               	xorwf	?___lltoft+1,w,c
 16796  00202A  E104               	bnz	u9210
 16797  00202C  51A7               	movf	(pow@y+2)& (0+255),w,b
 16798  00202E  1822               	xorwf	?___lltoft+2,w,c
 16799  002030  B4D8               	btfsc	status,2,c
 16800  002032  D00D               	goto	l2215
 16801  002034                     u9210:
 16802                           
 16803                           ; BSR set to: 0
 16804  002034  0E00               	movlw	0
 16805  002036  0101               	movlb	1	; () banked
 16806  002038  6FD1               	movwf	(_errno+1)& (0+255),b
 16807  00203A  0E21               	movlw	33
 16808  00203C  6FD0               	movwf	_errno& (0+255),b
 16809  00203E  0E00               	movlw	0
 16810  002040  0100               	movlb	0	; () banked
 16811  002042  6FA2               	movwf	?_pow& (0+255),b
 16812  002044  0E00               	movlw	0
 16813  002046  6FA3               	movwf	(?_pow+1)& (0+255),b
 16814  002048  0E00               	movlw	0
 16815  00204A  6FA4               	movwf	(?_pow+2)& (0+255),b
 16816                           
 16817                           ; BSR set to: 0
 16818  00204C  0012               	return	
 16819  00204E                     l2215:
 16820                           
 16821                           ; BSR set to: 0
 16822                           
 16823                           ; BSR set to: 0
 16824  00204E  51AF               	movf	pow@yi& (0+255),w,b
 16825  002050  0B01               	andlw	1
 16826  002052  6FAE               	movwf	pow@sign& (0+255),b
 16827                           
 16828                           ; BSR set to: 0
 16829  002054  C0A2  F018         	movff	pow@x,___ftneg@f1
 16830  002058  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 16831  00205C  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 16832  002060  EC04  F022         	call	___ftneg	;wreg free
 16833  002064  C018  F0A2         	movff	?___ftneg,pow@x
 16834  002068  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 16835  00206C  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 16836  002070                     l2214:
 16837  002070  C0A2  F092         	movff	pow@x,log@x
 16838  002074  C0A3  F093         	movff	pow@x+1,log@x+1
 16839  002078  C0A4  F094         	movff	pow@x+2,log@x+2
 16840  00207C  EC7B  F012         	call	_log	;wreg free
 16841  002080  C092  F0A8         	movff	?_log,_pow$3954
 16842  002084  C093  F0A9         	movff	?_log+1,_pow$3954+1
 16843  002088  C094  F0AA         	movff	?_log+2,_pow$3954+2
 16844  00208C  C0A8  F066         	movff	_pow$3954,___ftmul@f1
 16845  002090  C0A9  F067         	movff	_pow$3954+1,___ftmul@f1+1
 16846  002094  C0AA  F068         	movff	_pow$3954+2,___ftmul@f1+2
 16847  002098  C0A5  F069         	movff	pow@y,___ftmul@f2
 16848  00209C  C0A6  F06A         	movff	pow@y+1,___ftmul@f2+1
 16849  0020A0  C0A7  F06B         	movff	pow@y+2,___ftmul@f2+2
 16850  0020A4  EC60  F016         	call	___ftmul	;wreg free
 16851  0020A8  C066  F0AB         	movff	?___ftmul,_pow$3955
 16852  0020AC  C067  F0AC         	movff	?___ftmul+1,_pow$3955+1
 16853  0020B0  C068  F0AD         	movff	?___ftmul+2,_pow$3955+2
 16854  0020B4  C0AB  F099         	movff	_pow$3955,exp@x
 16855  0020B8  C0AC  F09A         	movff	_pow$3955+1,exp@x+1
 16856  0020BC  C0AD  F09B         	movff	_pow$3955+2,exp@x+2
 16857  0020C0  EC40  F00C         	call	_exp	;wreg free
 16858  0020C4  C099  F0A2         	movff	?_exp,pow@x
 16859  0020C8  C09A  F0A3         	movff	?_exp+1,pow@x+1
 16860  0020CC  C09B  F0A4         	movff	?_exp+2,pow@x+2
 16861  0020D0  0100               	movlb	0	; () banked
 16862  0020D2  51AE               	movf	pow@sign& (0+255),w,b
 16863  0020D4  B4D8               	btfsc	status,2,c
 16864  0020D6  D00F               	goto	l2216
 16865                           
 16866                           ; BSR set to: 0
 16867  0020D8  C0A2  F018         	movff	pow@x,___ftneg@f1
 16868  0020DC  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 16869  0020E0  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 16870  0020E4  EC04  F022         	call	___ftneg	;wreg free
 16871  0020E8  C018  F0A2         	movff	?___ftneg,?_pow
 16872  0020EC  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 16873  0020F0  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 16874  0020F4  0012               	return	
 16875  0020F6                     l2216:
 16876                           
 16877                           ; BSR set to: 0
 16878  0020F6  C0A2  F0A2         	movff	pow@x,?_pow
 16879  0020FA  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 16880  0020FE  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 16881  002102  0012               	return		;funcret
 16882  002104                     __end_of_pow:
 16883                           	opt stack 0
 16884                           tosu	equ	0xFFF
 16885                           tosh	equ	0xFFE
 16886                           tosl	equ	0xFFD
 16887                           pclath	equ	0xFFA
 16888                           tblptru	equ	0xFF8
 16889                           tblptrh	equ	0xFF7
 16890                           tblptrl	equ	0xFF6
 16891                           tablat	equ	0xFF5
 16892                           prodh	equ	0xFF4
 16893                           prodl	equ	0xFF3
 16894                           intcon	equ	0xFF2
 16895                           intcon2	equ	0xFF1
 16896                           indf0	equ	0xFEF
 16897                           postinc0	equ	0xFEE
 16898                           fsr0h	equ	0xFEA
 16899                           fsr0l	equ	0xFE9
 16900                           wreg	equ	0xFE8
 16901                           indf1	equ	0xFE7
 16902                           postdec1	equ	0xFE5
 16903                           fsr1h	equ	0xFE2
 16904                           fsr1l	equ	0xFE1
 16905                           indf2	equ	0xFDF
 16906                           postinc2	equ	0xFDE
 16907                           postdec2	equ	0xFDD
 16908                           fsr2h	equ	0xFDA
 16909                           fsr2l	equ	0xFD9
 16910                           status	equ	0xFD8
 16911                           
 16912 ;; *************** function _log *****************
 16913 ;; Defined at:
 16914 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;  x               3   50[BANK0 ] unsigned char 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  exponent        2   53[BANK0 ] int 
 16919 ;; Return value:  Size  Location     Type
 16920 ;;                  3   50[BANK0 ] int 
 16921 ;; Registers used:
 16922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16928 ;;      Params:         0       3       0       0       0       0       0
 16929 ;;      Locals:         0       2       0       0       0       0       0
 16930 ;;      Temps:          0       0       0       0       0       0       0
 16931 ;;      Totals:         0       5       0       0       0       0       0
 16932 ;;Total ram usage:        5 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    6
 16935 ;; This function calls:
 16936 ;;		___awtoft
 16937 ;;		___ftadd
 16938 ;;		___ftmul
 16939 ;;		_eval_poly
 16940 ;;		_frexp
 16941 ;; This function is called by:
 16942 ;;		_pow
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           	psect	text70
 16947  0024F6                     __ptext70:
 16948                           	opt stack 0
 16949  0024F6                     _log:
 16950                           	opt stack 21
 16951                           
 16952                           ;incstack = 0
 16953  0024F6  0100               	movlb	0	; () banked
 16954  0024F8  AF94               	btfss	(log@x+2)& (0+255),7,b
 16955  0024FA  D00D               	goto	l2476
 16956                           
 16957                           ; BSR set to: 0
 16958  0024FC  0E00               	movlw	0
 16959  0024FE  0101               	movlb	1	; () banked
 16960  002500  6FD1               	movwf	(_errno+1)& (0+255),b
 16961  002502  0E21               	movlw	33
 16962  002504  6FD0               	movwf	_errno& (0+255),b
 16963  002506  0E00               	movlw	0
 16964  002508  0100               	movlb	0	; () banked
 16965  00250A  6F92               	movwf	?_log& (0+255),b
 16966  00250C  0E00               	movlw	0
 16967  00250E  6F93               	movwf	(?_log+1)& (0+255),b
 16968  002510  0E00               	movlw	0
 16969  002512  6F94               	movwf	(?_log+2)& (0+255),b
 16970                           
 16971                           ; BSR set to: 0
 16972  002514  0012               	return	
 16973  002516                     l2476:
 16974                           
 16975                           ; BSR set to: 0
 16976                           
 16977                           ; BSR set to: 0
 16978  002516  5192               	movf	log@x& (0+255),w,b
 16979  002518  1193               	iorwf	(log@x+1)& (0+255),w,b
 16980  00251A  1194               	iorwf	(log@x+2)& (0+255),w,b
 16981  00251C  A4D8               	btfss	status,2,c
 16982  00251E  D00D               	goto	l2478
 16983                           
 16984                           ; BSR set to: 0
 16985  002520  0E00               	movlw	0
 16986  002522  0101               	movlb	1	; () banked
 16987  002524  6FD1               	movwf	(_errno+1)& (0+255),b
 16988  002526  0E22               	movlw	34
 16989  002528  6FD0               	movwf	_errno& (0+255),b
 16990  00252A  0E00               	movlw	0
 16991  00252C  0100               	movlb	0	; () banked
 16992  00252E  6F92               	movwf	?_log& (0+255),b
 16993  002530  0E00               	movlw	0
 16994  002532  6F93               	movwf	(?_log+1)& (0+255),b
 16995  002534  0E00               	movlw	0
 16996  002536  6F94               	movwf	(?_log+2)& (0+255),b
 16997                           
 16998                           ; BSR set to: 0
 16999  002538  0012               	return	
 17000  00253A                     l2478:
 17001                           
 17002                           ; BSR set to: 0
 17003                           
 17004                           ; BSR set to: 0
 17005  00253A  0E00               	movlw	0
 17006  00253C  6F69               	movwf	___ftmul@f2& (0+255),b
 17007  00253E  0E00               	movlw	0
 17008  002540  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17009  002542  0E40               	movlw	64
 17010  002544  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17011  002546  0E95               	movlw	low log@exponent
 17012  002548  6E1B               	movwf	frexp@eptr,c
 17013  00254A  0E00               	movlw	high log@exponent
 17014  00254C  6E1C               	movwf	frexp@eptr+1,c
 17015  00254E  C092  F018         	movff	log@x,frexp@value
 17016  002552  C093  F019         	movff	log@x+1,frexp@value+1
 17017  002556  C094  F01A         	movff	log@x+2,frexp@value+2
 17018  00255A  EC69  F01B         	call	_frexp	;wreg free
 17019  00255E  C018  F066         	movff	?_frexp,___ftmul@f1
 17020  002562  C019  F067         	movff	?_frexp+1,___ftmul@f1+1
 17021  002566  C01A  F068         	movff	?_frexp+2,___ftmul@f1+2
 17022  00256A  EC60  F016         	call	___ftmul	;wreg free
 17023  00256E  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17024  002572  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17025  002576  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17026  00257A  0E00               	movlw	0
 17027  00257C  0100               	movlb	0	; () banked
 17028  00257E  6F7F               	movwf	___ftadd@f2& (0+255),b
 17029  002580  0E80               	movlw	128
 17030  002582  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17031  002584  0EBF               	movlw	191
 17032  002586  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17033  002588  EC26  F00E         	call	___ftadd	;wreg free
 17034  00258C  C07C  F092         	movff	?___ftadd,log@x
 17035  002590  C07D  F093         	movff	?___ftadd+1,log@x+1
 17036  002594  C07E  F094         	movff	?___ftadd+2,log@x+2
 17037  002598  0100               	movlb	0	; () banked
 17038  00259A  0795               	decf	log@exponent& (0+255),f,b
 17039  00259C  A0D8               	btfss	status,0,c
 17040  00259E  0796               	decf	(log@exponent+1)& (0+255),f,b
 17041                           
 17042                           ; BSR set to: 0
 17043  0025A0  C092  F088         	movff	log@x,eval_poly@x
 17044  0025A4  C093  F089         	movff	log@x+1,eval_poly@x+1
 17045  0025A8  C094  F08A         	movff	log@x+2,eval_poly@x+2
 17046  0025AC  0EDF               	movlw	low log@coeff
 17047  0025AE  6F8B               	movwf	eval_poly@d& (0+255),b
 17048  0025B0  0E78               	movlw	high log@coeff
 17049  0025B2  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17050  0025B4  0E00               	movlw	0
 17051  0025B6  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17052  0025B8  0E08               	movlw	8
 17053  0025BA  6F8D               	movwf	eval_poly@n& (0+255),b
 17054  0025BC  ECA5  F018         	call	_eval_poly	;wreg free
 17055  0025C0  C088  F092         	movff	?_eval_poly,log@x
 17056  0025C4  C089  F093         	movff	?_eval_poly+1,log@x+1
 17057  0025C8  C08A  F094         	movff	?_eval_poly+2,log@x+2
 17058  0025CC  0E72               	movlw	114
 17059  0025CE  0100               	movlb	0	; () banked
 17060  0025D0  6F69               	movwf	___ftmul@f2& (0+255),b
 17061  0025D2  0E31               	movlw	49
 17062  0025D4  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17063  0025D6  0E3F               	movlw	63
 17064  0025D8  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17065  0025DA  C095  F020         	movff	log@exponent,___awtoft@c
 17066  0025DE  C096  F021         	movff	log@exponent+1,___awtoft@c+1
 17067  0025E2  ECD7  F020         	call	___awtoft	;wreg free
 17068  0025E6  C020  F066         	movff	?___awtoft,___ftmul@f1
 17069  0025EA  C021  F067         	movff	?___awtoft+1,___ftmul@f1+1
 17070  0025EE  C022  F068         	movff	?___awtoft+2,___ftmul@f1+2
 17071  0025F2  EC60  F016         	call	___ftmul	;wreg free
 17072  0025F6  C066  F07C         	movff	?___ftmul,___ftadd@f1
 17073  0025FA  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 17074  0025FE  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 17075  002602  C092  F07F         	movff	log@x,___ftadd@f2
 17076  002606  C093  F080         	movff	log@x+1,___ftadd@f2+1
 17077  00260A  C094  F081         	movff	log@x+2,___ftadd@f2+2
 17078  00260E  EC26  F00E         	call	___ftadd	;wreg free
 17079  002612  C07C  F092         	movff	?___ftadd,?_log
 17080  002616  C07D  F093         	movff	?___ftadd+1,?_log+1
 17081  00261A  C07E  F094         	movff	?___ftadd+2,?_log+2
 17082  00261E  0012               	return	
 17083  002620                     __end_of_log:
 17084                           	opt stack 0
 17085                           tosu	equ	0xFFF
 17086                           tosh	equ	0xFFE
 17087                           tosl	equ	0xFFD
 17088                           pclath	equ	0xFFA
 17089                           tblptru	equ	0xFF8
 17090                           tblptrh	equ	0xFF7
 17091                           tblptrl	equ	0xFF6
 17092                           tablat	equ	0xFF5
 17093                           prodh	equ	0xFF4
 17094                           prodl	equ	0xFF3
 17095                           intcon	equ	0xFF2
 17096                           intcon2	equ	0xFF1
 17097                           indf0	equ	0xFEF
 17098                           postinc0	equ	0xFEE
 17099                           fsr0h	equ	0xFEA
 17100                           fsr0l	equ	0xFE9
 17101                           wreg	equ	0xFE8
 17102                           indf1	equ	0xFE7
 17103                           postdec1	equ	0xFE5
 17104                           fsr1h	equ	0xFE2
 17105                           fsr1l	equ	0xFE1
 17106                           indf2	equ	0xFDF
 17107                           postinc2	equ	0xFDE
 17108                           postdec2	equ	0xFDD
 17109                           fsr2h	equ	0xFDA
 17110                           fsr2l	equ	0xFD9
 17111                           status	equ	0xFD8
 17112                           
 17113 ;; *************** function _exp *****************
 17114 ;; Defined at:
 17115 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 17116 ;; Parameters:    Size  Location     Type
 17117 ;;  x               3   57[BANK0 ] int 
 17118 ;; Auto vars:     Size  Location     Type
 17119 ;;  exponent        2   63[BANK0 ] int 
 17120 ;;  sign            1   65[BANK0 ] unsigned char 
 17121 ;; Return value:  Size  Location     Type
 17122 ;;                  3   57[BANK0 ] unsigned char 
 17123 ;; Registers used:
 17124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17125 ;; Tracked objects:
 17126 ;;		On entry : 0/0
 17127 ;;		On exit  : 0/0
 17128 ;;		Unchanged: 0/0
 17129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17130 ;;      Params:         0       3       0       0       0       0       0
 17131 ;;      Locals:         0       6       0       0       0       0       0
 17132 ;;      Temps:          0       0       0       0       0       0       0
 17133 ;;      Totals:         0       9       0       0       0       0       0
 17134 ;;Total ram usage:        9 bytes
 17135 ;; Hardware stack levels used:    1
 17136 ;; Hardware stack levels required when called:    6
 17137 ;; This function calls:
 17138 ;;		___awtoft
 17139 ;;		___ftdiv
 17140 ;;		___ftge
 17141 ;;		___ftmul
 17142 ;;		___ftneg
 17143 ;;		___ftsub
 17144 ;;		___fttol
 17145 ;;		_eval_poly
 17146 ;;		_floor
 17147 ;;		_ldexp
 17148 ;; This function is called by:
 17149 ;;		_pow
 17150 ;; This function uses a non-reentrant model
 17151 ;;
 17152                           
 17153                           	psect	text71
 17154  001880                     __ptext71:
 17155                           	opt stack 0
 17156  001880                     _exp:
 17157                           	opt stack 21
 17158                           
 17159                           ;incstack = 0
 17160  001880  0100               	movlb	0	; () banked
 17161  001882  5199               	movf	exp@x& (0+255),w,b
 17162  001884  119A               	iorwf	(exp@x+1)& (0+255),w,b
 17163  001886  119B               	iorwf	(exp@x+2)& (0+255),w,b
 17164  001888  A4D8               	btfss	status,2,c
 17165  00188A  D007               	goto	l2412
 17166                           
 17167                           ; BSR set to: 0
 17168  00188C  0E00               	movlw	0
 17169  00188E  6F99               	movwf	?_exp& (0+255),b
 17170  001890  0E80               	movlw	128
 17171  001892  6F9A               	movwf	(?_exp+1)& (0+255),b
 17172  001894  0E3F               	movlw	63
 17173  001896  6F9B               	movwf	(?_exp+2)& (0+255),b
 17174                           
 17175                           ; BSR set to: 0
 17176  001898  0012               	return	
 17177  00189A                     l2412:
 17178                           
 17179                           ; BSR set to: 0
 17180                           
 17181                           ; BSR set to: 0
 17182  00189A  0E72               	movlw	114
 17183  00189C  6E18               	movwf	___ftge@ff1,c
 17184  00189E  0E31               	movlw	49
 17185  0018A0  6E19               	movwf	___ftge@ff1+1,c
 17186  0018A2  0E44               	movlw	68
 17187  0018A4  6E1A               	movwf	___ftge@ff1+2,c
 17188  0018A6  C099  F01B         	movff	exp@x,___ftge@ff2
 17189  0018AA  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 17190  0018AE  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 17191  0018B2  ECB1  F01B         	call	___ftge	;wreg free
 17192  0018B6  B0D8               	btfsc	status,0,c
 17193  0018B8  D00D               	goto	l2414
 17194  0018BA  0E00               	movlw	0
 17195  0018BC  0101               	movlb	1	; () banked
 17196  0018BE  6FD1               	movwf	(_errno+1)& (0+255),b
 17197  0018C0  0E22               	movlw	34
 17198  0018C2  6FD0               	movwf	_errno& (0+255),b
 17199  0018C4  0EFF               	movlw	255
 17200  0018C6  0100               	movlb	0	; () banked
 17201  0018C8  6F99               	movwf	?_exp& (0+255),b
 17202  0018CA  0E7F               	movlw	127
 17203  0018CC  6F9A               	movwf	(?_exp+1)& (0+255),b
 17204  0018CE  0E7F               	movlw	127
 17205  0018D0  6F9B               	movwf	(?_exp+2)& (0+255),b
 17206                           
 17207                           ; BSR set to: 0
 17208  0018D2  0012               	return	
 17209  0018D4                     l2414:
 17210                           
 17211                           ; BSR set to: 0
 17212  0018D4  C099  F018         	movff	exp@x,___ftge@ff1
 17213  0018D8  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 17214  0018DC  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 17215  0018E0  0E49               	movlw	73
 17216  0018E2  6E1B               	movwf	___ftge@ff2,c
 17217  0018E4  0E3A               	movlw	58
 17218  0018E6  6E1C               	movwf	___ftge@ff2+1,c
 17219  0018E8  0EC4               	movlw	196
 17220  0018EA  6E1D               	movwf	___ftge@ff2+2,c
 17221  0018EC  ECB1  F01B         	call	___ftge	;wreg free
 17222  0018F0  B0D8               	btfsc	status,0,c
 17223  0018F2  D00D               	goto	l2415
 17224  0018F4  0E00               	movlw	0
 17225  0018F6  0101               	movlb	1	; () banked
 17226  0018F8  6FD1               	movwf	(_errno+1)& (0+255),b
 17227  0018FA  0E22               	movlw	34
 17228  0018FC  6FD0               	movwf	_errno& (0+255),b
 17229  0018FE  0E00               	movlw	0
 17230  001900  0100               	movlb	0	; () banked
 17231  001902  6F99               	movwf	?_exp& (0+255),b
 17232  001904  0E00               	movlw	0
 17233  001906  6F9A               	movwf	(?_exp+1)& (0+255),b
 17234  001908  0E00               	movlw	0
 17235  00190A  6F9B               	movwf	(?_exp+2)& (0+255),b
 17236                           
 17237                           ; BSR set to: 0
 17238  00190C  0012               	return	
 17239  00190E                     l2415:
 17240                           
 17241                           ; BSR set to: 0
 17242  00190E  0100               	movlb	0	; () banked
 17243  001910  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 17244  001912  D002               	goto	u9010
 17245  001914  0E01               	movlw	1
 17246  001916  D001               	goto	u9020
 17247  001918                     u9010:
 17248  001918  0E00               	movlw	0
 17249  00191A                     u9020:
 17250  00191A  6FA1               	movwf	exp@sign& (0+255),b
 17251                           
 17252                           ; BSR set to: 0
 17253  00191C  51A1               	movf	exp@sign& (0+255),w,b
 17254  00191E  B4D8               	btfsc	status,2,c
 17255  001920  D00E               	goto	l2416
 17256                           
 17257                           ; BSR set to: 0
 17258  001922  C099  F018         	movff	exp@x,___ftneg@f1
 17259  001926  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 17260  00192A  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 17261  00192E  EC04  F022         	call	___ftneg	;wreg free
 17262  001932  C018  F099         	movff	?___ftneg,exp@x
 17263  001936  C019  F09A         	movff	?___ftneg+1,exp@x+1
 17264  00193A  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 17265  00193E                     l2416:
 17266  00193E  C099  F066         	movff	exp@x,___ftmul@f1
 17267  001942  C09A  F067         	movff	exp@x+1,___ftmul@f1+1
 17268  001946  C09B  F068         	movff	exp@x+2,___ftmul@f1+2
 17269  00194A  0EAA               	movlw	170
 17270  00194C  0100               	movlb	0	; () banked
 17271  00194E  6F69               	movwf	___ftmul@f2& (0+255),b
 17272  001950  0EB8               	movlw	184
 17273  001952  6F6A               	movwf	(___ftmul@f2+1)& (0+255),b
 17274  001954  0E3F               	movlw	63
 17275  001956  6F6B               	movwf	(___ftmul@f2+2)& (0+255),b
 17276  001958  EC60  F016         	call	___ftmul	;wreg free
 17277  00195C  C066  F099         	movff	?___ftmul,exp@x
 17278  001960  C067  F09A         	movff	?___ftmul+1,exp@x+1
 17279  001964  C068  F09B         	movff	?___ftmul+2,exp@x+2
 17280  001968  C099  F090         	movff	exp@x,floor@x
 17281  00196C  C09A  F091         	movff	exp@x+1,floor@x+1
 17282  001970  C09B  F092         	movff	exp@x+2,floor@x+2
 17283  001974  EC34  F018         	call	_floor	;wreg free
 17284  001978  C090  F09C         	movff	?_floor,_exp$3956
 17285  00197C  C091  F09D         	movff	?_floor+1,_exp$3956+1
 17286  001980  C092  F09E         	movff	?_floor+2,_exp$3956+2
 17287  001984  C09C  F079         	movff	_exp$3956,___fttol@f1
 17288  001988  C09D  F07A         	movff	_exp$3956+1,___fttol@f1+1
 17289  00198C  C09E  F07B         	movff	_exp$3956+2,___fttol@f1+2
 17290  001990  ECE4  F015         	call	___fttol	;wreg free
 17291  001994  C079  F09F         	movff	?___fttol,exp@exponent
 17292  001998  C07A  F0A0         	movff	?___fttol+1,exp@exponent+1
 17293  00199C  C099  F088         	movff	exp@x,___ftsub@f1
 17294  0019A0  C09A  F089         	movff	exp@x+1,___ftsub@f1+1
 17295  0019A4  C09B  F08A         	movff	exp@x+2,___ftsub@f1+2
 17296  0019A8  C09F  F020         	movff	exp@exponent,___awtoft@c
 17297  0019AC  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 17298  0019B0  ECD7  F020         	call	___awtoft	;wreg free
 17299  0019B4  C020  F08B         	movff	?___awtoft,___ftsub@f2
 17300  0019B8  C021  F08C         	movff	?___awtoft+1,___ftsub@f2+1
 17301  0019BC  C022  F08D         	movff	?___awtoft+2,___ftsub@f2+2
 17302  0019C0  EC1F  F020         	call	___ftsub	;wreg free
 17303  0019C4  C088  F099         	movff	?___ftsub,exp@x
 17304  0019C8  C089  F09A         	movff	?___ftsub+1,exp@x+1
 17305  0019CC  C08A  F09B         	movff	?___ftsub+2,exp@x+2
 17306  0019D0  C099  F088         	movff	exp@x,eval_poly@x
 17307  0019D4  C09A  F089         	movff	exp@x+1,eval_poly@x+1
 17308  0019D8  C09B  F08A         	movff	exp@x+2,eval_poly@x+2
 17309  0019DC  0EC1               	movlw	low exp@coeff
 17310  0019DE  0100               	movlb	0	; () banked
 17311  0019E0  6F8B               	movwf	eval_poly@d& (0+255),b
 17312  0019E2  0E78               	movlw	high exp@coeff
 17313  0019E4  6F8C               	movwf	(eval_poly@d+1)& (0+255),b
 17314  0019E6  0E00               	movlw	0
 17315  0019E8  6F8E               	movwf	(eval_poly@n+1)& (0+255),b
 17316  0019EA  0E09               	movlw	9
 17317  0019EC  6F8D               	movwf	eval_poly@n& (0+255),b
 17318  0019EE  ECA5  F018         	call	_eval_poly	;wreg free
 17319  0019F2  C088  F092         	movff	?_eval_poly,ldexp@value
 17320  0019F6  C089  F093         	movff	?_eval_poly+1,ldexp@value+1
 17321  0019FA  C08A  F094         	movff	?_eval_poly+2,ldexp@value+2
 17322  0019FE  C09F  F095         	movff	exp@exponent,ldexp@newexp
 17323  001A02  C0A0  F096         	movff	exp@exponent+1,ldexp@newexp+1
 17324  001A06  EC10  F019         	call	_ldexp	;wreg free
 17325  001A0A  C092  F099         	movff	?_ldexp,exp@x
 17326  001A0E  C093  F09A         	movff	?_ldexp+1,exp@x+1
 17327  001A12  C094  F09B         	movff	?_ldexp+2,exp@x+2
 17328  001A16  0100               	movlb	0	; () banked
 17329  001A18  51A1               	movf	exp@sign& (0+255),w,b
 17330  001A1A  B4D8               	btfsc	status,2,c
 17331  001A1C  D025               	goto	l2417
 17332                           
 17333                           ; BSR set to: 0
 17334  001A1E  2999               	incf	exp@x& (0+255),w,b
 17335  001A20  E10E               	bnz	l8913
 17336  001A22  0E7F               	movlw	127
 17337  001A24  199A               	xorwf	(exp@x+1)& (0+255),w,b
 17338  001A26  E10B               	bnz	l8913
 17339  001A28  0E7F               	movlw	127
 17340  001A2A  199B               	xorwf	(exp@x+2)& (0+255),w,b
 17341  001A2C  A4D8               	btfss	status,2,c
 17342  001A2E  D007               	goto	l2418
 17343                           
 17344                           ; BSR set to: 0
 17345  001A30  0E00               	movlw	0
 17346  001A32  6F99               	movwf	?_exp& (0+255),b
 17347  001A34  0E00               	movlw	0
 17348  001A36  6F9A               	movwf	(?_exp+1)& (0+255),b
 17349  001A38  0E00               	movlw	0
 17350  001A3A  6F9B               	movwf	(?_exp+2)& (0+255),b
 17351                           
 17352                           ; BSR set to: 0
 17353  001A3C  0012               	return	
 17354  001A3E                     l2418:
 17355  001A3E                     l8913:
 17356                           
 17357                           ; BSR set to: 0
 17358  001A3E  0E00               	movlw	0
 17359  001A40  6E23               	movwf	___ftdiv@f1,c
 17360  001A42  0E80               	movlw	128
 17361  001A44  6E24               	movwf	___ftdiv@f1+1,c
 17362  001A46  0E3F               	movlw	63
 17363  001A48  6E25               	movwf	___ftdiv@f1+2,c
 17364  001A4A  C099  F026         	movff	exp@x,___ftdiv@f2
 17365  001A4E  C09A  F027         	movff	exp@x+1,___ftdiv@f2+1
 17366  001A52  C09B  F028         	movff	exp@x+2,___ftdiv@f2+2
 17367  001A56  ECDB  F016         	call	___ftdiv	;wreg free
 17368  001A5A  C023  F099         	movff	?___ftdiv,?_exp
 17369  001A5E  C024  F09A         	movff	?___ftdiv+1,?_exp+1
 17370  001A62  C025  F09B         	movff	?___ftdiv+2,?_exp+2
 17371  001A66  0012               	return	
 17372  001A68                     l2417:
 17373                           
 17374                           ; BSR set to: 0
 17375  001A68  C099  F099         	movff	exp@x,?_exp
 17376  001A6C  C09A  F09A         	movff	exp@x+1,?_exp+1
 17377  001A70  C09B  F09B         	movff	exp@x+2,?_exp+2
 17378  001A74  0012               	return		;funcret
 17379  001A76                     __end_of_exp:
 17380                           	opt stack 0
 17381                           tosu	equ	0xFFF
 17382                           tosh	equ	0xFFE
 17383                           tosl	equ	0xFFD
 17384                           pclath	equ	0xFFA
 17385                           tblptru	equ	0xFF8
 17386                           tblptrh	equ	0xFF7
 17387                           tblptrl	equ	0xFF6
 17388                           tablat	equ	0xFF5
 17389                           prodh	equ	0xFF4
 17390                           prodl	equ	0xFF3
 17391                           intcon	equ	0xFF2
 17392                           intcon2	equ	0xFF1
 17393                           indf0	equ	0xFEF
 17394                           postinc0	equ	0xFEE
 17395                           fsr0h	equ	0xFEA
 17396                           fsr0l	equ	0xFE9
 17397                           wreg	equ	0xFE8
 17398                           indf1	equ	0xFE7
 17399                           postdec1	equ	0xFE5
 17400                           fsr1h	equ	0xFE2
 17401                           fsr1l	equ	0xFE1
 17402                           indf2	equ	0xFDF
 17403                           postinc2	equ	0xFDE
 17404                           postdec2	equ	0xFDD
 17405                           fsr2h	equ	0xFDA
 17406                           fsr2l	equ	0xFD9
 17407                           status	equ	0xFD8
 17408                           
 17409 ;; *************** function _ldexp *****************
 17410 ;; Defined at:
 17411 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 17412 ;; Parameters:    Size  Location     Type
 17413 ;;  value           3   50[BANK0 ] unsigned char 
 17414 ;;  newexp          2   53[BANK0 ] int 
 17415 ;; Auto vars:     Size  Location     Type
 17416 ;;		None
 17417 ;; Return value:  Size  Location     Type
 17418 ;;                  3   50[BANK0 ] int 
 17419 ;; Registers used:
 17420 ;;		wreg, status,2, status,0
 17421 ;; Tracked objects:
 17422 ;;		On entry : 0/0
 17423 ;;		On exit  : 0/0
 17424 ;;		Unchanged: 0/0
 17425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17426 ;;      Params:         0       5       0       0       0       0       0
 17427 ;;      Locals:         0       0       0       0       0       0       0
 17428 ;;      Temps:          0       2       0       0       0       0       0
 17429 ;;      Totals:         0       7       0       0       0       0       0
 17430 ;;Total ram usage:        7 bytes
 17431 ;; Hardware stack levels used:    1
 17432 ;; Hardware stack levels required when called:    3
 17433 ;; This function calls:
 17434 ;;		Nothing
 17435 ;; This function is called by:
 17436 ;;		_exp
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text72
 17441  003220                     __ptext72:
 17442                           	opt stack 0
 17443  003220                     _ldexp:
 17444                           	opt stack 23
 17445                           
 17446                           ;incstack = 0
 17447  003220  0100               	movlb	0	; () banked
 17448  003222  5192               	movf	ldexp@value& (0+255),w,b
 17449  003224  1193               	iorwf	(ldexp@value+1)& (0+255),w,b
 17450  003226  1194               	iorwf	(ldexp@value+2)& (0+255),w,b
 17451  003228  A4D8               	btfss	status,2,c
 17452  00322A  D007               	goto	l2436
 17453                           
 17454                           ; BSR set to: 0
 17455  00322C  0E00               	movlw	0
 17456  00322E  6F92               	movwf	?_ldexp& (0+255),b
 17457  003230  0E00               	movlw	0
 17458  003232  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17459  003234  0E00               	movlw	0
 17460  003236  6F94               	movwf	(?_ldexp+2)& (0+255),b
 17461                           
 17462                           ; BSR set to: 0
 17463  003238  0012               	return	
 17464  00323A                     l2436:
 17465                           
 17466                           ; BSR set to: 0
 17467                           
 17468                           ; BSR set to: 0
 17469  00323A  5194               	movf	(ldexp@value+2)& (0+255),w,b
 17470  00323C  0B7F               	andlw	127
 17471  00323E  6F97               	movwf	??_ldexp& (0+255),b
 17472  003240  6B98               	clrf	(??_ldexp+1)& (0+255),b
 17473  003242  90D8               	bcf	status,0,c
 17474  003244  3797               	rlcf	??_ldexp& (0+255),f,b
 17475  003246  3798               	rlcf	(??_ldexp+1)& (0+255),f,b
 17476  003248  5197               	movf	??_ldexp& (0+255),w,b
 17477  00324A  2795               	addwf	ldexp@newexp& (0+255),f,b
 17478  00324C  5198               	movf	(??_ldexp+1)& (0+255),w,b
 17479  00324E  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 17480  003250  AF93               	btfss	(ldexp@value+1)& (0+255),7,b
 17481  003252  D003               	goto	u8390
 17482  003254  6B97               	clrf	??_ldexp& (0+255),b
 17483  003256  2B97               	incf	??_ldexp& (0+255),f,b
 17484  003258  D002               	goto	u8398
 17485  00325A                     u8390:
 17486  00325A  0100               	movlb	0	; () banked
 17487  00325C  6B97               	clrf	??_ldexp& (0+255),b
 17488  00325E                     u8398:
 17489  00325E  5197               	movf	??_ldexp& (0+255),w,b
 17490  003260  2795               	addwf	ldexp@newexp& (0+255),f,b
 17491  003262  0E00               	movlw	0
 17492  003264  2396               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 17493  003266  AF96               	btfss	(ldexp@newexp+1)& (0+255),7,b
 17494  003268  D00D               	goto	l2438
 17495                           
 17496                           ; BSR set to: 0
 17497  00326A  0E00               	movlw	0
 17498  00326C  0101               	movlb	1	; () banked
 17499  00326E  6FD1               	movwf	(_errno+1)& (0+255),b
 17500  003270  0E22               	movlw	34
 17501  003272  6FD0               	movwf	_errno& (0+255),b
 17502  003274  0E00               	movlw	0
 17503  003276  0100               	movlb	0	; () banked
 17504  003278  6F92               	movwf	?_ldexp& (0+255),b
 17505  00327A  0E00               	movlw	0
 17506  00327C  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17507  00327E  0E00               	movlw	0
 17508  003280                     L3:
 17509  003280  6F94               	movwf	(?_ldexp+2)& (0+255),b
 17510                           
 17511                           ; BSR set to: 0
 17512  003282  0012               	return	
 17513  003284                     l2438:
 17514                           
 17515                           ; BSR set to: 0
 17516                           
 17517                           ; BSR set to: 0
 17518  003284  BF96               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 17519  003286  D017               	goto	l2440
 17520  003288  0596               	decf	(ldexp@newexp+1)& (0+255),w,b
 17521  00328A  A0D8               	btfss	status,0,c
 17522  00328C  D014               	goto	l2440
 17523                           
 17524                           ; BSR set to: 0
 17525  00328E  0E00               	movlw	0
 17526  003290  0101               	movlb	1	; () banked
 17527  003292  6FD1               	movwf	(_errno+1)& (0+255),b
 17528  003294  0E22               	movlw	34
 17529  003296  6FD0               	movwf	_errno& (0+255),b
 17530                           
 17531                           ; BSR set to: 1
 17532  003298  0100               	movlb	0	; () banked
 17533  00329A  AF94               	btfss	(ldexp@value+2)& (0+255),7,b
 17534  00329C  D006               	goto	l2441
 17535                           
 17536                           ; BSR set to: 0
 17537  00329E  0EFF               	movlw	255
 17538  0032A0  6F92               	movwf	?_ldexp& (0+255),b
 17539  0032A2  0E7F               	movlw	127
 17540  0032A4  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17541  0032A6  0EFF               	movlw	255
 17542  0032A8  D7EB               	goto	L3
 17543  0032AA                     l2441:
 17544                           
 17545                           ; BSR set to: 0
 17546                           
 17547                           ; BSR set to: 0
 17548  0032AA  0EFF               	movlw	255
 17549  0032AC  6F92               	movwf	?_ldexp& (0+255),b
 17550  0032AE  0E7F               	movlw	127
 17551  0032B0  6F93               	movwf	(?_ldexp+1)& (0+255),b
 17552  0032B2  0E7F               	movlw	127
 17553  0032B4  D7E5               	goto	L3
 17554  0032B6                     l2440:
 17555                           
 17556                           ; BSR set to: 0
 17557                           
 17558                           ; BSR set to: 0
 17559  0032B6  3596               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 17560  0032B8  3196               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 17561  0032BA  6F98               	movwf	(??_ldexp+1)& (0+255),b
 17562  0032BC  3195               	rrcf	ldexp@newexp& (0+255),w,b
 17563  0032BE  6F97               	movwf	??_ldexp& (0+255),b
 17564  0032C0  5194               	movf	(ldexp@value+2)& (0+255),w,b
 17565  0032C2  1997               	xorwf	??_ldexp& (0+255),w,b
 17566  0032C4  0B80               	andlw	-128
 17567  0032C6  1997               	xorwf	??_ldexp& (0+255),w,b
 17568  0032C8  6F94               	movwf	(ldexp@value+2)& (0+255),b
 17569  0032CA  C095  F097         	movff	ldexp@newexp,??_ldexp
 17570  0032CE  0E01               	movlw	1
 17571  0032D0  1797               	andwf	??_ldexp& (0+255),f,b
 17572  0032D2  3397               	rrcf	??_ldexp& (0+255),f,b
 17573  0032D4  3397               	rrcf	??_ldexp& (0+255),f,b
 17574  0032D6  5193               	movf	(ldexp@value+1)& (0+255),w,b
 17575  0032D8  1997               	xorwf	??_ldexp& (0+255),w,b
 17576  0032DA  0B7F               	andlw	-129
 17577  0032DC  1997               	xorwf	??_ldexp& (0+255),w,b
 17578  0032DE  6F93               	movwf	(ldexp@value+1)& (0+255),b
 17579                           
 17580                           ; BSR set to: 0
 17581                           
 17582                           ; BSR set to: 0
 17583                           
 17584                           ; BSR set to: 0
 17585  0032E0  C092  F092         	movff	ldexp@value,?_ldexp
 17586  0032E4  C093  F093         	movff	ldexp@value+1,?_ldexp+1
 17587  0032E8  C094  F094         	movff	ldexp@value+2,?_ldexp+2
 17588  0032EC  0012               	return	
 17589  0032EE                     __end_of_ldexp:
 17590                           	opt stack 0
 17591                           tosu	equ	0xFFF
 17592                           tosh	equ	0xFFE
 17593                           tosl	equ	0xFFD
 17594                           pclath	equ	0xFFA
 17595                           tblptru	equ	0xFF8
 17596                           tblptrh	equ	0xFF7
 17597                           tblptrl	equ	0xFF6
 17598                           tablat	equ	0xFF5
 17599                           prodh	equ	0xFF4
 17600                           prodl	equ	0xFF3
 17601                           intcon	equ	0xFF2
 17602                           intcon2	equ	0xFF1
 17603                           indf0	equ	0xFEF
 17604                           postinc0	equ	0xFEE
 17605                           fsr0h	equ	0xFEA
 17606                           fsr0l	equ	0xFE9
 17607                           wreg	equ	0xFE8
 17608                           indf1	equ	0xFE7
 17609                           postdec1	equ	0xFE5
 17610                           fsr1h	equ	0xFE2
 17611                           fsr1l	equ	0xFE1
 17612                           indf2	equ	0xFDF
 17613                           postinc2	equ	0xFDE
 17614                           postdec2	equ	0xFDD
 17615                           fsr2h	equ	0xFDA
 17616                           fsr2l	equ	0xFD9
 17617                           status	equ	0xFD8
 17618                           
 17619 ;; *************** function _floor *****************
 17620 ;; Defined at:
 17621 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;  x               3   48[BANK0 ] int 
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;  i               3   51[BANK0 ] int 
 17626 ;;  expon           2   54[BANK0 ] int 
 17627 ;; Return value:  Size  Location     Type
 17628 ;;                  3   48[BANK0 ] int 
 17629 ;; Registers used:
 17630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : 0/0
 17633 ;;		On exit  : 0/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17636 ;;      Params:         0       3       0       0       0       0       0
 17637 ;;      Locals:         0       5       0       0       0       0       0
 17638 ;;      Temps:          0       0       0       0       0       0       0
 17639 ;;      Totals:         0       8       0       0       0       0       0
 17640 ;;Total ram usage:        8 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    5
 17643 ;; This function calls:
 17644 ;;		___altoft
 17645 ;;		___ftadd
 17646 ;;		___ftge
 17647 ;;		___fttol
 17648 ;;		_frexp
 17649 ;; This function is called by:
 17650 ;;		_exp
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           	psect	text73
 17655  003068                     __ptext73:
 17656                           	opt stack 0
 17657  003068                     _floor:
 17658                           	opt stack 21
 17659                           
 17660                           ; BSR set to: 0
 17661                           ;incstack = 0
 17662  003068  C090  F018         	movff	floor@x,frexp@value
 17663  00306C  C091  F019         	movff	floor@x+1,frexp@value+1
 17664  003070  C092  F01A         	movff	floor@x+2,frexp@value+2
 17665  003074  0E96               	movlw	low floor@expon
 17666  003076  6E1B               	movwf	frexp@eptr,c
 17667  003078  0E00               	movlw	high floor@expon
 17668  00307A  6E1C               	movwf	frexp@eptr+1,c
 17669  00307C  EC69  F01B         	call	_frexp	;wreg free
 17670  003080  0100               	movlb	0	; () banked
 17671  003082  AF97               	btfss	(floor@expon+1)& (0+255),7,b
 17672  003084  D010               	goto	l2423
 17673                           
 17674                           ; BSR set to: 0
 17675  003086  AF92               	btfss	(floor@x+2)& (0+255),7,b
 17676  003088  D007               	goto	l2424
 17677                           
 17678                           ; BSR set to: 0
 17679  00308A  0E00               	movlw	0
 17680  00308C  6F90               	movwf	?_floor& (0+255),b
 17681  00308E  0E80               	movlw	128
 17682  003090  6F91               	movwf	(?_floor+1)& (0+255),b
 17683  003092  0EBF               	movlw	191
 17684  003094  6F92               	movwf	(?_floor+2)& (0+255),b
 17685                           
 17686                           ; BSR set to: 0
 17687  003096  0012               	return	
 17688  003098                     l2424:
 17689                           
 17690                           ; BSR set to: 0
 17691                           
 17692                           ; BSR set to: 0
 17693  003098  0E00               	movlw	0
 17694  00309A  6F90               	movwf	?_floor& (0+255),b
 17695  00309C  0E00               	movlw	0
 17696  00309E  6F91               	movwf	(?_floor+1)& (0+255),b
 17697  0030A0  0E00               	movlw	0
 17698  0030A2  6F92               	movwf	(?_floor+2)& (0+255),b
 17699                           
 17700                           ; BSR set to: 0
 17701  0030A4  0012               	return	
 17702  0030A6                     l2423:
 17703                           
 17704                           ; BSR set to: 0
 17705                           
 17706                           ; BSR set to: 0
 17707  0030A6  5197               	movf	(floor@expon+1)& (0+255),w,b
 17708  0030A8  E104               	bnz	u8350
 17709  0030AA  0E15               	movlw	21
 17710  0030AC  5D96               	subwf	floor@expon& (0+255),w,b
 17711  0030AE  A0D8               	btfss	status,0,c
 17712  0030B0  D007               	goto	l2426
 17713  0030B2                     u8350:
 17714                           
 17715                           ; BSR set to: 0
 17716  0030B2  C090  F090         	movff	floor@x,?_floor
 17717  0030B6  C091  F091         	movff	floor@x+1,?_floor+1
 17718  0030BA  C092  F092         	movff	floor@x+2,?_floor+2
 17719  0030BE  0012               	return	
 17720  0030C0                     l2426:
 17721                           
 17722                           ; BSR set to: 0
 17723                           
 17724                           ; BSR set to: 0
 17725  0030C0  C090  F079         	movff	floor@x,___fttol@f1
 17726  0030C4  C091  F07A         	movff	floor@x+1,___fttol@f1+1
 17727  0030C8  C092  F07B         	movff	floor@x+2,___fttol@f1+2
 17728  0030CC  ECE4  F015         	call	___fttol	;wreg free
 17729  0030D0  C079  F088         	movff	?___fttol,___altoft@c
 17730  0030D4  C07A  F089         	movff	?___fttol+1,___altoft@c+1
 17731  0030D8  C07B  F08A         	movff	?___fttol+2,___altoft@c+2
 17732  0030DC  C07C  F08B         	movff	?___fttol+3,___altoft@c+3
 17733  0030E0  EC7C  F01C         	call	___altoft	;wreg free
 17734  0030E4  C088  F093         	movff	?___altoft,floor@i
 17735  0030E8  C089  F094         	movff	?___altoft+1,floor@i+1
 17736  0030EC  C08A  F095         	movff	?___altoft+2,floor@i+2
 17737  0030F0  C090  F018         	movff	floor@x,___ftge@ff1
 17738  0030F4  C091  F019         	movff	floor@x+1,___ftge@ff1+1
 17739  0030F8  C092  F01A         	movff	floor@x+2,___ftge@ff1+2
 17740  0030FC  C093  F01B         	movff	floor@i,___ftge@ff2
 17741  003100  C094  F01C         	movff	floor@i+1,___ftge@ff2+1
 17742  003104  C095  F01D         	movff	floor@i+2,___ftge@ff2+2
 17743  003108  ECB1  F01B         	call	___ftge	;wreg free
 17744  00310C  B0D8               	btfsc	status,0,c
 17745  00310E  D016               	goto	l2427
 17746  003110  C093  F07C         	movff	floor@i,___ftadd@f1
 17747  003114  C094  F07D         	movff	floor@i+1,___ftadd@f1+1
 17748  003118  C095  F07E         	movff	floor@i+2,___ftadd@f1+2
 17749  00311C  0E00               	movlw	0
 17750  00311E  0100               	movlb	0	; () banked
 17751  003120  6F7F               	movwf	___ftadd@f2& (0+255),b
 17752  003122  0E80               	movlw	128
 17753  003124  6F80               	movwf	(___ftadd@f2+1)& (0+255),b
 17754  003126  0EBF               	movlw	191
 17755  003128  6F81               	movwf	(___ftadd@f2+2)& (0+255),b
 17756  00312A  EC26  F00E         	call	___ftadd	;wreg free
 17757  00312E  C07C  F090         	movff	?___ftadd,?_floor
 17758  003132  C07D  F091         	movff	?___ftadd+1,?_floor+1
 17759  003136  C07E  F092         	movff	?___ftadd+2,?_floor+2
 17760  00313A  0012               	return	
 17761  00313C                     l2427:
 17762  00313C  C093  F090         	movff	floor@i,?_floor
 17763  003140  C094  F091         	movff	floor@i+1,?_floor+1
 17764  003144  C095  F092         	movff	floor@i+2,?_floor+2
 17765  003148  0012               	return		;funcret
 17766  00314A                     __end_of_floor:
 17767                           	opt stack 0
 17768                           tosu	equ	0xFFF
 17769                           tosh	equ	0xFFE
 17770                           tosl	equ	0xFFD
 17771                           pclath	equ	0xFFA
 17772                           tblptru	equ	0xFF8
 17773                           tblptrh	equ	0xFF7
 17774                           tblptrl	equ	0xFF6
 17775                           tablat	equ	0xFF5
 17776                           prodh	equ	0xFF4
 17777                           prodl	equ	0xFF3
 17778                           intcon	equ	0xFF2
 17779                           intcon2	equ	0xFF1
 17780                           indf0	equ	0xFEF
 17781                           postinc0	equ	0xFEE
 17782                           fsr0h	equ	0xFEA
 17783                           fsr0l	equ	0xFE9
 17784                           wreg	equ	0xFE8
 17785                           indf1	equ	0xFE7
 17786                           postdec1	equ	0xFE5
 17787                           fsr1h	equ	0xFE2
 17788                           fsr1l	equ	0xFE1
 17789                           indf2	equ	0xFDF
 17790                           postinc2	equ	0xFDE
 17791                           postdec2	equ	0xFDD
 17792                           fsr2h	equ	0xFDA
 17793                           fsr2l	equ	0xFD9
 17794                           status	equ	0xFD8
 17795                           
 17796 ;; *************** function _frexp *****************
 17797 ;; Defined at:
 17798 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 17799 ;; Parameters:    Size  Location     Type
 17800 ;;  value           3   23[COMRAM] int 
 17801 ;;  eptr            2   26[COMRAM] PTR int 
 17802 ;;		 -> log@exponent(2), floor@expon(2), 
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;		None
 17805 ;; Return value:  Size  Location     Type
 17806 ;;                  3   23[COMRAM] PTR int 
 17807 ;; Registers used:
 17808 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17814 ;;      Params:         5       0       0       0       0       0       0
 17815 ;;      Locals:         0       0       0       0       0       0       0
 17816 ;;      Temps:          2       0       0       0       0       0       0
 17817 ;;      Totals:         7       0       0       0       0       0       0
 17818 ;;Total ram usage:        7 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; Hardware stack levels required when called:    3
 17821 ;; This function calls:
 17822 ;;		Nothing
 17823 ;; This function is called by:
 17824 ;;		_floor
 17825 ;;		_log
 17826 ;; This function uses a non-reentrant model
 17827 ;;
 17828                           
 17829                           	psect	text74
 17830  0036D2                     __ptext74:
 17831                           	opt stack 0
 17832  0036D2                     _frexp:
 17833                           	opt stack 23
 17834                           
 17835                           ;incstack = 0
 17836  0036D2  5018               	movf	frexp@value,w,c
 17837  0036D4  1019               	iorwf	frexp@value+1,w,c
 17838  0036D6  101A               	iorwf	frexp@value+2,w,c
 17839  0036D8  A4D8               	btfss	status,2,c
 17840  0036DA  D00F               	goto	l2432
 17841  0036DC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17842  0036E0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17843  0036E4  0E00               	movlw	0
 17844  0036E6  6EDE               	movwf	postinc2,c
 17845  0036E8  0E00               	movlw	0
 17846  0036EA  6EDD               	movwf	postdec2,c
 17847  0036EC  0E00               	movlw	0
 17848  0036EE  6E18               	movwf	?_frexp,c
 17849  0036F0  0E00               	movlw	0
 17850  0036F2  6E19               	movwf	?_frexp+1,c
 17851  0036F4  0E00               	movlw	0
 17852  0036F6  6E1A               	movwf	?_frexp+2,c
 17853  0036F8  0012               	return	
 17854  0036FA                     l2432:
 17855  0036FA  501A               	movf	frexp@value+2,w,c
 17856  0036FC  0B7F               	andlw	127
 17857  0036FE  6E1D               	movwf	??_frexp& (0+255),c
 17858  003700  6A1E               	clrf	(??_frexp+1)& (0+255),c
 17859  003702  90D8               	bcf	status,0,c
 17860  003704  361D               	rlcf	??_frexp,f,c
 17861  003706  361E               	rlcf	??_frexp+1,f,c
 17862  003708  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17863  00370C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17864  003710  C01D  FFDE         	movff	??_frexp,postinc2
 17865  003714  C01E  FFDD         	movff	??_frexp+1,postdec2
 17866  003718  AE19               	btfss	frexp@value+1,7,c
 17867  00371A  D003               	goto	u8110
 17868  00371C  6A1D               	clrf	??_frexp& (0+255),c
 17869  00371E  2A1D               	incf	??_frexp& (0+255),f,c
 17870  003720  D001               	goto	u8118
 17871  003722                     u8110:
 17872  003722  6A1D               	clrf	??_frexp& (0+255),c
 17873  003724                     u8118:
 17874  003724  501D               	movf	??_frexp,w,c
 17875  003726  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17876  00372A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17877  00372E  12DE               	iorwf	postinc2,f,c
 17878  003730  0E00               	movlw	0
 17879  003732  12DD               	iorwf	postdec2,f,c
 17880  003734  C01B  FFD9         	movff	frexp@eptr,fsr2l
 17881  003738  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 17882  00373C  0E82               	movlw	130
 17883  00373E  26DE               	addwf	postinc2,f,c
 17884  003740  0EFF               	movlw	255
 17885  003742  22DD               	addwfc	postdec2,f,c
 17886  003744  801A               	bsf	frexp@value+2,0,c
 17887  003746  821A               	bsf	frexp@value+2,1,c
 17888  003748  841A               	bsf	frexp@value+2,2,c
 17889  00374A  861A               	bsf	frexp@value+2,3,c
 17890  00374C  881A               	bsf	frexp@value+2,4,c
 17891  00374E  8A1A               	bsf	frexp@value+2,5,c
 17892  003750  9C1A               	bcf	frexp@value+2,6,c
 17893  003752  9E19               	bcf	frexp@value+1,7,c
 17894  003754  C018  F018         	movff	frexp@value,?_frexp
 17895  003758  C019  F019         	movff	frexp@value+1,?_frexp+1
 17896  00375C  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 17897  003760  0012               	return	
 17898  003762                     __end_of_frexp:
 17899                           	opt stack 0
 17900                           tosu	equ	0xFFF
 17901                           tosh	equ	0xFFE
 17902                           tosl	equ	0xFFD
 17903                           pclath	equ	0xFFA
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon2	equ	0xFF1
 17912                           indf0	equ	0xFEF
 17913                           postinc0	equ	0xFEE
 17914                           fsr0h	equ	0xFEA
 17915                           fsr0l	equ	0xFE9
 17916                           wreg	equ	0xFE8
 17917                           indf1	equ	0xFE7
 17918                           postdec1	equ	0xFE5
 17919                           fsr1h	equ	0xFE2
 17920                           fsr1l	equ	0xFE1
 17921                           indf2	equ	0xFDF
 17922                           postinc2	equ	0xFDE
 17923                           postdec2	equ	0xFDD
 17924                           fsr2h	equ	0xFDA
 17925                           fsr2l	equ	0xFD9
 17926                           status	equ	0xFD8
 17927                           
 17928 ;; *************** function ___fttol *****************
 17929 ;; Defined at:
 17930 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 17931 ;; Parameters:    Size  Location     Type
 17932 ;;  f1              3   25[BANK0 ] float 
 17933 ;; Auto vars:     Size  Location     Type
 17934 ;;  lval            4   35[BANK0 ] unsigned long 
 17935 ;;  exp1            1   39[BANK0 ] unsigned char 
 17936 ;;  sign1           1   34[BANK0 ] unsigned char 
 17937 ;; Return value:  Size  Location     Type
 17938 ;;                  4   25[BANK0 ] long 
 17939 ;; Registers used:
 17940 ;;		wreg, status,2, status,0
 17941 ;; Tracked objects:
 17942 ;;		On entry : 0/0
 17943 ;;		On exit  : 0/0
 17944 ;;		Unchanged: 0/0
 17945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17946 ;;      Params:         0       4       0       0       0       0       0
 17947 ;;      Locals:         0       6       0       0       0       0       0
 17948 ;;      Temps:          0       5       0       0       0       0       0
 17949 ;;      Totals:         0      15       0       0       0       0       0
 17950 ;;Total ram usage:       15 bytes
 17951 ;; Hardware stack levels used:    1
 17952 ;; Hardware stack levels required when called:    3
 17953 ;; This function calls:
 17954 ;;		Nothing
 17955 ;; This function is called by:
 17956 ;;		_SampleSingleChannel
 17957 ;;		_SampleAllChannels
 17958 ;;		_GroupRx
 17959 ;;		_GroupTx
 17960 ;;		_ReadIntFromEeprom
 17961 ;;		_sprintf
 17962 ;;		_pow
 17963 ;;		_exp
 17964 ;;		_floor
 17965 ;;		_DacSetValue
 17966 ;;		_DacAnalogToDigitalSpi
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           	psect	text75
 17971  002BC8                     __ptext75:
 17972                           	opt stack 0
 17973  002BC8                     ___fttol:
 17974                           	opt stack 25
 17975                           
 17976                           ;incstack = 0
 17977  002BC8  C07B  F07D         	movff	___fttol@f1+2,??___fttol
 17978  002BCC  0100               	movlb	0	; () banked
 17979  002BCE  6B7E               	clrf	(??___fttol+1)& (0+255),b
 17980  002BD0  6B7F               	clrf	(??___fttol+2)& (0+255),b
 17981  002BD2  357A               	rlcf	(___fttol@f1+1)& (0+255),w,b
 17982  002BD4  377D               	rlcf	??___fttol& (0+255),f,b
 17983  002BD6  E301               	bnc	u8021
 17984  002BD8  817E               	bsf	(??___fttol+1)& (0+255),0,b
 17985  002BDA                     u8021:
 17986  002BDA  517D               	movf	??___fttol& (0+255),w,b
 17987  002BDC  6F87               	movwf	___fttol@exp1& (0+255),b
 17988  002BDE  5187               	movf	___fttol@exp1& (0+255),w,b
 17989  002BE0  A4D8               	btfss	status,2,c
 17990  002BE2  D009               	goto	l2085
 17991                           
 17992                           ; BSR set to: 0
 17993  002BE4  0E00               	movlw	0
 17994  002BE6  6F79               	movwf	?___fttol& (0+255),b
 17995  002BE8  0E00               	movlw	0
 17996  002BEA  6F7A               	movwf	(?___fttol+1)& (0+255),b
 17997  002BEC  0E00               	movlw	0
 17998  002BEE  6F7B               	movwf	(?___fttol+2)& (0+255),b
 17999  002BF0  0E00               	movlw	0
 18000  002BF2  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18001                           
 18002                           ; BSR set to: 0
 18003  002BF4  0012               	return	
 18004  002BF6                     l2085:
 18005                           
 18006                           ; BSR set to: 0
 18007                           
 18008                           ; BSR set to: 0
 18009  002BF6  0E17               	movlw	23
 18010  002BF8  6F7D               	movwf	??___fttol& (0+255),b
 18011  002BFA  C079  F07E         	movff	___fttol@f1,??___fttol+1
 18012  002BFE  C07A  F07F         	movff	___fttol@f1+1,??___fttol+2
 18013  002C02  C07B  F080         	movff	___fttol@f1+2,??___fttol+3
 18014  002C06  297D               	incf	??___fttol& (0+255),w,b
 18015  002C08  6F81               	movwf	(??___fttol+4)& (0+255),b
 18016  002C0A  D004               	goto	u8040
 18017  002C0C                     u8045:
 18018  002C0C  90D8               	bcf	status,0,c
 18019  002C0E  3380               	rrcf	(??___fttol+3)& (0+255),f,b
 18020  002C10  337F               	rrcf	(??___fttol+2)& (0+255),f,b
 18021  002C12  337E               	rrcf	(??___fttol+1)& (0+255),f,b
 18022  002C14                     u8040:
 18023  002C14  2F81               	decfsz	(??___fttol+4)& (0+255),f,b
 18024  002C16  D7FA               	goto	u8045
 18025  002C18  0100               	movlb	0	; () banked
 18026  002C1A  517E               	movf	(??___fttol+1)& (0+255),w,b
 18027  002C1C  6F82               	movwf	___fttol@sign1& (0+255),b
 18028                           
 18029                           ; BSR set to: 0
 18030  002C1E  8F7A               	bsf	(___fttol@f1+1)& (0+255),7,b
 18031                           
 18032                           ; BSR set to: 0
 18033  002C20  0EFF               	movlw	255
 18034  002C22  1779               	andwf	___fttol@f1& (0+255),f,b
 18035  002C24  0EFF               	movlw	255
 18036  002C26  177A               	andwf	(___fttol@f1+1)& (0+255),f,b
 18037  002C28  0E00               	movlw	0
 18038  002C2A  177B               	andwf	(___fttol@f1+2)& (0+255),f,b
 18039                           
 18040                           ; BSR set to: 0
 18041  002C2C  5179               	movf	___fttol@f1& (0+255),w,b
 18042  002C2E  6F83               	movwf	___fttol@lval& (0+255),b
 18043  002C30  517A               	movf	(___fttol@f1+1)& (0+255),w,b
 18044  002C32  6F84               	movwf	(___fttol@lval+1)& (0+255),b
 18045  002C34  517B               	movf	(___fttol@f1+2)& (0+255),w,b
 18046  002C36  6F85               	movwf	(___fttol@lval+2)& (0+255),b
 18047  002C38  6B86               	clrf	(___fttol@lval+3)& (0+255),b
 18048                           
 18049                           ; BSR set to: 0
 18050  002C3A  0E8E               	movlw	142
 18051  002C3C  5F87               	subwf	___fttol@exp1& (0+255),f,b
 18052                           
 18053                           ; BSR set to: 0
 18054  002C3E  AF87               	btfss	___fttol@exp1& (0+255),7,b
 18055  002C40  D016               	goto	l2087
 18056                           
 18057                           ; BSR set to: 0
 18058  002C42  5187               	movf	___fttol@exp1& (0+255),w,b
 18059  002C44  0A80               	xorlw	128
 18060  002C46  0F8F               	addlw	143
 18061  002C48  B0D8               	btfsc	status,0,c
 18062  002C4A  D009               	goto	l2088
 18063                           
 18064                           ; BSR set to: 0
 18065  002C4C  0E00               	movlw	0
 18066  002C4E  6F79               	movwf	?___fttol& (0+255),b
 18067  002C50  0E00               	movlw	0
 18068  002C52  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18069  002C54  0E00               	movlw	0
 18070  002C56  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18071  002C58  0E00               	movlw	0
 18072  002C5A  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18073                           
 18074                           ; BSR set to: 0
 18075  002C5C  0012               	return	
 18076  002C5E                     l2088:
 18077                           
 18078                           ; BSR set to: 0
 18079                           
 18080                           ; BSR set to: 0
 18081                           
 18082                           ; BSR set to: 0
 18083  002C5E  90D8               	bcf	status,0,c
 18084  002C60  3386               	rrcf	(___fttol@lval+3)& (0+255),f,b
 18085  002C62  3385               	rrcf	(___fttol@lval+2)& (0+255),f,b
 18086  002C64  3384               	rrcf	(___fttol@lval+1)& (0+255),f,b
 18087  002C66  3383               	rrcf	___fttol@lval& (0+255),f,b
 18088                           
 18089                           ; BSR set to: 0
 18090  002C68  3F87               	incfsz	___fttol@exp1& (0+255),f,b
 18091  002C6A  D7F9               	goto	l2088
 18092                           
 18093                           ; BSR set to: 0
 18094  002C6C  D015               	goto	u8080
 18095  002C6E                     l2087:
 18096                           
 18097                           ; BSR set to: 0
 18098                           
 18099                           ; BSR set to: 0
 18100  002C6E  0E17               	movlw	23
 18101  002C70  6587               	cpfsgt	___fttol@exp1& (0+255),b
 18102  002C72  D00F               	goto	l2093
 18103                           
 18104                           ; BSR set to: 0
 18105  002C74  0E00               	movlw	0
 18106  002C76  6F79               	movwf	?___fttol& (0+255),b
 18107  002C78  0E00               	movlw	0
 18108  002C7A  6F7A               	movwf	(?___fttol+1)& (0+255),b
 18109  002C7C  0E00               	movlw	0
 18110  002C7E  6F7B               	movwf	(?___fttol+2)& (0+255),b
 18111  002C80  0E00               	movlw	0
 18112  002C82  6F7C               	movwf	(?___fttol+3)& (0+255),b
 18113                           
 18114                           ; BSR set to: 0
 18115  002C84  0012               	return	
 18116  002C86                     
 18117                           ; BSR set to: 0
 18118                           
 18119                           ; BSR set to: 0
 18120  002C86  90D8               	bcf	status,0,c
 18121  002C88  3783               	rlcf	___fttol@lval& (0+255),f,b
 18122  002C8A  3784               	rlcf	(___fttol@lval+1)& (0+255),f,b
 18123  002C8C  3785               	rlcf	(___fttol@lval+2)& (0+255),f,b
 18124  002C8E  3786               	rlcf	(___fttol@lval+3)& (0+255),f,b
 18125  002C90  0787               	decf	___fttol@exp1& (0+255),f,b
 18126  002C92                     l2093:
 18127                           
 18128                           ; BSR set to: 0
 18129                           
 18130                           ; BSR set to: 0
 18131  002C92  5187               	movf	___fttol@exp1& (0+255),w,b
 18132  002C94  A4D8               	btfss	status,2,c
 18133  002C96  D7F7               	goto	l2094
 18134  002C98                     u8080:
 18135                           
 18136                           ; BSR set to: 0
 18137                           
 18138                           ; BSR set to: 0
 18139                           
 18140                           ; BSR set to: 0
 18141  002C98  5182               	movf	___fttol@sign1& (0+255),w,b
 18142  002C9A  B4D8               	btfsc	status,2,c
 18143  002C9C  D008               	goto	l2096
 18144                           
 18145                           ; BSR set to: 0
 18146  002C9E  1F86               	comf	(___fttol@lval+3)& (0+255),f,b
 18147  002CA0  1F85               	comf	(___fttol@lval+2)& (0+255),f,b
 18148  002CA2  1F84               	comf	(___fttol@lval+1)& (0+255),f,b
 18149  002CA4  6D83               	negf	___fttol@lval& (0+255),b
 18150  002CA6  0E00               	movlw	0
 18151  002CA8  2384               	addwfc	(___fttol@lval+1)& (0+255),f,b
 18152  002CAA  2385               	addwfc	(___fttol@lval+2)& (0+255),f,b
 18153  002CAC  2386               	addwfc	(___fttol@lval+3)& (0+255),f,b
 18154  002CAE                     l2096:
 18155                           
 18156                           ; BSR set to: 0
 18157                           
 18158                           ; BSR set to: 0
 18159  002CAE  C083  F079         	movff	___fttol@lval,?___fttol
 18160  002CB2  C084  F07A         	movff	___fttol@lval+1,?___fttol+1
 18161  002CB6  C085  F07B         	movff	___fttol@lval+2,?___fttol+2
 18162  002CBA  C086  F07C         	movff	___fttol@lval+3,?___fttol+3
 18163  002CBE  0012               	return	
 18164  002CC0                     __end_of___fttol:
 18165                           	opt stack 0
 18166                           tosu	equ	0xFFF
 18167                           tosh	equ	0xFFE
 18168                           tosl	equ	0xFFD
 18169                           pclath	equ	0xFFA
 18170                           tblptru	equ	0xFF8
 18171                           tblptrh	equ	0xFF7
 18172                           tblptrl	equ	0xFF6
 18173                           tablat	equ	0xFF5
 18174                           prodh	equ	0xFF4
 18175                           prodl	equ	0xFF3
 18176                           intcon	equ	0xFF2
 18177                           intcon2	equ	0xFF1
 18178                           indf0	equ	0xFEF
 18179                           postinc0	equ	0xFEE
 18180                           fsr0h	equ	0xFEA
 18181                           fsr0l	equ	0xFE9
 18182                           wreg	equ	0xFE8
 18183                           indf1	equ	0xFE7
 18184                           postdec1	equ	0xFE5
 18185                           fsr1h	equ	0xFE2
 18186                           fsr1l	equ	0xFE1
 18187                           indf2	equ	0xFDF
 18188                           postinc2	equ	0xFDE
 18189                           postdec2	equ	0xFDD
 18190                           fsr2h	equ	0xFDA
 18191                           fsr2l	equ	0xFD9
 18192                           status	equ	0xFD8
 18193                           
 18194 ;; *************** function ___ftge *****************
 18195 ;; Defined at:
 18196 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;  ff1             3   23[COMRAM] float 
 18199 ;;  ff2             3   26[COMRAM] float 
 18200 ;; Auto vars:     Size  Location     Type
 18201 ;;		None
 18202 ;; Return value:  Size  Location     Type
 18203 ;;		None               void
 18204 ;; Registers used:
 18205 ;;		wreg, status,2, status,0
 18206 ;; Tracked objects:
 18207 ;;		On entry : 0/0
 18208 ;;		On exit  : 0/0
 18209 ;;		Unchanged: 0/0
 18210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18211 ;;      Params:         6       0       0       0       0       0       0
 18212 ;;      Locals:         0       0       0       0       0       0       0
 18213 ;;      Temps:          3       0       0       0       0       0       0
 18214 ;;      Totals:         9       0       0       0       0       0       0
 18215 ;;Total ram usage:        9 bytes
 18216 ;; Hardware stack levels used:    1
 18217 ;; Hardware stack levels required when called:    3
 18218 ;; This function calls:
 18219 ;;		Nothing
 18220 ;; This function is called by:
 18221 ;;		_sprintf
 18222 ;;		_pow
 18223 ;;		_exp
 18224 ;;		_floor
 18225 ;;		_CheckFlashPrecentage
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text76
 18230  003762                     __ptext76:
 18231                           	opt stack 0
 18232  003762                     ___ftge:
 18233                           	opt stack 25
 18234                           
 18235                           ; BSR set to: 0
 18236                           ;incstack = 0
 18237  003762  AE1A               	btfss	___ftge@ff1+2,7,c
 18238  003764  D016               	goto	l2057
 18239  003766  C018  F01E         	movff	___ftge@ff1,??___ftge
 18240  00376A  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 18241  00376E  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 18242  003772  1E1E               	comf	??___ftge,f,c
 18243  003774  1E1F               	comf	??___ftge+1,f,c
 18244  003776  1E20               	comf	??___ftge+2,f,c
 18245  003778  2A1E               	incf	??___ftge,f,c
 18246  00377A  0E00               	movlw	0
 18247  00377C  221F               	addwfc	??___ftge+1,f,c
 18248  00377E  2220               	addwfc	??___ftge+2,f,c
 18249  003780  0E00               	movlw	0
 18250  003782  241E               	addwf	??___ftge,w,c
 18251  003784  6E18               	movwf	___ftge@ff1,c
 18252  003786  0E00               	movlw	0
 18253  003788  201F               	addwfc	??___ftge+1,w,c
 18254  00378A  6E19               	movwf	___ftge@ff1+1,c
 18255  00378C  0E80               	movlw	128
 18256  00378E  2020               	addwfc	??___ftge+2,w,c
 18257  003790  6E1A               	movwf	___ftge@ff1+2,c
 18258  003792                     l2057:
 18259  003792  AE1D               	btfss	___ftge@ff2+2,7,c
 18260  003794  D016               	goto	l2058
 18261  003796  C01B  F01E         	movff	___ftge@ff2,??___ftge
 18262  00379A  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 18263  00379E  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 18264  0037A2  1E1E               	comf	??___ftge,f,c
 18265  0037A4  1E1F               	comf	??___ftge+1,f,c
 18266  0037A6  1E20               	comf	??___ftge+2,f,c
 18267  0037A8  2A1E               	incf	??___ftge,f,c
 18268  0037AA  0E00               	movlw	0
 18269  0037AC  221F               	addwfc	??___ftge+1,f,c
 18270  0037AE  2220               	addwfc	??___ftge+2,f,c
 18271  0037B0  0E00               	movlw	0
 18272  0037B2  241E               	addwf	??___ftge,w,c
 18273  0037B4  6E1B               	movwf	___ftge@ff2,c
 18274  0037B6  0E00               	movlw	0
 18275  0037B8  201F               	addwfc	??___ftge+1,w,c
 18276  0037BA  6E1C               	movwf	___ftge@ff2+1,c
 18277  0037BC  0E80               	movlw	128
 18278  0037BE  2020               	addwfc	??___ftge+2,w,c
 18279  0037C0  6E1D               	movwf	___ftge@ff2+2,c
 18280  0037C2                     l2058:
 18281  0037C2  0E00               	movlw	0
 18282  0037C4  1A18               	xorwf	___ftge@ff1,f,c
 18283  0037C6  0E00               	movlw	0
 18284  0037C8  1A19               	xorwf	___ftge@ff1+1,f,c
 18285  0037CA  0E80               	movlw	128
 18286  0037CC  1A1A               	xorwf	___ftge@ff1+2,f,c
 18287  0037CE  0E00               	movlw	0
 18288  0037D0  1A1B               	xorwf	___ftge@ff2,f,c
 18289  0037D2  0E00               	movlw	0
 18290  0037D4  1A1C               	xorwf	___ftge@ff2+1,f,c
 18291  0037D6  0E80               	movlw	128
 18292  0037D8  1A1D               	xorwf	___ftge@ff2+2,f,c
 18293  0037DA  501B               	movf	___ftge@ff2,w,c
 18294  0037DC  5C18               	subwf	___ftge@ff1,w,c
 18295  0037DE  501C               	movf	___ftge@ff2+1,w,c
 18296  0037E0  5819               	subwfb	___ftge@ff1+1,w,c
 18297  0037E2  501D               	movf	___ftge@ff2+2,w,c
 18298  0037E4  581A               	subwfb	___ftge@ff1+2,w,c
 18299  0037E6  B0D8               	btfsc	status,0,c
 18300  0037E8  D002               	goto	l8037
 18301  0037EA  90D8               	bcf	status,0,c
 18302  0037EC  0012               	return	
 18303  0037EE                     l8037:
 18304  0037EE  80D8               	bsf	status,0,c
 18305  0037F0  0012               	return	
 18306  0037F2                     __end_of___ftge:
 18307                           	opt stack 0
 18308                           tosu	equ	0xFFF
 18309                           tosh	equ	0xFFE
 18310                           tosl	equ	0xFFD
 18311                           pclath	equ	0xFFA
 18312                           tblptru	equ	0xFF8
 18313                           tblptrh	equ	0xFF7
 18314                           tblptrl	equ	0xFF6
 18315                           tablat	equ	0xFF5
 18316                           prodh	equ	0xFF4
 18317                           prodl	equ	0xFF3
 18318                           intcon	equ	0xFF2
 18319                           intcon2	equ	0xFF1
 18320                           indf0	equ	0xFEF
 18321                           postinc0	equ	0xFEE
 18322                           fsr0h	equ	0xFEA
 18323                           fsr0l	equ	0xFE9
 18324                           wreg	equ	0xFE8
 18325                           indf1	equ	0xFE7
 18326                           postdec1	equ	0xFE5
 18327                           fsr1h	equ	0xFE2
 18328                           fsr1l	equ	0xFE1
 18329                           indf2	equ	0xFDF
 18330                           postinc2	equ	0xFDE
 18331                           postdec2	equ	0xFDD
 18332                           fsr2h	equ	0xFDA
 18333                           fsr2l	equ	0xFD9
 18334                           status	equ	0xFD8
 18335                           
 18336 ;; *************** function ___altoft *****************
 18337 ;; Defined at:
 18338 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 18339 ;; Parameters:    Size  Location     Type
 18340 ;;  c               4   40[BANK0 ] long 
 18341 ;; Auto vars:     Size  Location     Type
 18342 ;;  sign            1   47[COMRAM] unsigned char 
 18343 ;;  exp             1   46[COMRAM] unsigned char 
 18344 ;; Return value:  Size  Location     Type
 18345 ;;                  3   40[BANK0 ] float 
 18346 ;; Registers used:
 18347 ;;		wreg, status,2, status,0, cstack
 18348 ;; Tracked objects:
 18349 ;;		On entry : 0/0
 18350 ;;		On exit  : 0/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18353 ;;      Params:         0       4       0       0       0       0       0
 18354 ;;      Locals:         2       0       0       0       0       0       0
 18355 ;;      Temps:          0       4       0       0       0       0       0
 18356 ;;      Totals:         2       8       0       0       0       0       0
 18357 ;;Total ram usage:       10 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; Hardware stack levels required when called:    4
 18360 ;; This function calls:
 18361 ;;		___ftpack
 18362 ;; This function is called by:
 18363 ;;		_floor
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           	psect	text77
 18368  0038F8                     __ptext77:
 18369                           	opt stack 0
 18370  0038F8                     ___altoft:
 18371                           	opt stack 21
 18372                           
 18373                           ;incstack = 0
 18374  0038F8  0E00               	movlw	0
 18375  0038FA  6E30               	movwf	___altoft@sign,c
 18376  0038FC  0E8E               	movlw	142
 18377  0038FE  6E2F               	movwf	___altoft@exp,c
 18378  003900  0100               	movlb	0	; () banked
 18379  003902  AF8B               	btfss	(___altoft@c+3)& (0+255),7,b
 18380  003904  D011               	goto	l1821
 18381                           
 18382                           ; BSR set to: 0
 18383  003906  1F8B               	comf	(___altoft@c+3)& (0+255),f,b
 18384  003908  1F8A               	comf	(___altoft@c+2)& (0+255),f,b
 18385  00390A  1F89               	comf	(___altoft@c+1)& (0+255),f,b
 18386  00390C  6D88               	negf	___altoft@c& (0+255),b
 18387  00390E  0E00               	movlw	0
 18388  003910  2389               	addwfc	(___altoft@c+1)& (0+255),f,b
 18389  003912  238A               	addwfc	(___altoft@c+2)& (0+255),f,b
 18390  003914  238B               	addwfc	(___altoft@c+3)& (0+255),f,b
 18391                           
 18392                           ; BSR set to: 0
 18393  003916  0E01               	movlw	1
 18394  003918  6E30               	movwf	___altoft@sign,c
 18395                           
 18396                           ; BSR set to: 0
 18397  00391A  D006               	goto	l1821
 18398  00391C                     
 18399                           ; BSR set to: 0
 18400                           
 18401                           ; BSR set to: 0
 18402  00391C  90D8               	bcf	status,0,c
 18403  00391E  338B               	rrcf	(___altoft@c+3)& (0+255),f,b
 18404  003920  338A               	rrcf	(___altoft@c+2)& (0+255),f,b
 18405  003922  3389               	rrcf	(___altoft@c+1)& (0+255),f,b
 18406  003924  3388               	rrcf	___altoft@c& (0+255),f,b
 18407  003926  2A2F               	incf	___altoft@exp,f,c
 18408  003928                     l1821:
 18409                           
 18410                           ; BSR set to: 0
 18411                           
 18412                           ; BSR set to: 0
 18413  003928  0E00               	movlw	0
 18414  00392A  1588               	andwf	___altoft@c& (0+255),w,b
 18415  00392C  6F8C               	movwf	??___altoft& (0+255),b
 18416  00392E  0E00               	movlw	0
 18417  003930  1589               	andwf	(___altoft@c+1)& (0+255),w,b
 18418  003932  6F8D               	movwf	(??___altoft+1)& (0+255),b
 18419  003934  0E00               	movlw	0
 18420  003936  158A               	andwf	(___altoft@c+2)& (0+255),w,b
 18421  003938  6F8E               	movwf	(??___altoft+2)& (0+255),b
 18422  00393A  0EFF               	movlw	255
 18423  00393C  158B               	andwf	(___altoft@c+3)& (0+255),w,b
 18424  00393E  6F8F               	movwf	(??___altoft+3)& (0+255),b
 18425  003940  518C               	movf	??___altoft& (0+255),w,b
 18426  003942  118D               	iorwf	(??___altoft+1)& (0+255),w,b
 18427  003944  118E               	iorwf	(??___altoft+2)& (0+255),w,b
 18428  003946  118F               	iorwf	(??___altoft+3)& (0+255),w,b
 18429  003948  A4D8               	btfss	status,2,c
 18430  00394A  D7E8               	goto	l1822
 18431                           
 18432                           ; BSR set to: 0
 18433                           
 18434                           ; BSR set to: 0
 18435  00394C  C088  F018         	movff	___altoft@c,___ftpack@arg
 18436  003950  C089  F019         	movff	___altoft@c+1,___ftpack@arg+1
 18437  003954  C08A  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 18438  003958  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 18439  00395C  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 18440  003960  EC32  F01A         	call	___ftpack	;wreg free
 18441  003964  C018  F088         	movff	?___ftpack,?___altoft
 18442  003968  C019  F089         	movff	?___ftpack+1,?___altoft+1
 18443  00396C  C01A  F08A         	movff	?___ftpack+2,?___altoft+2
 18444  003970  0012               	return	
 18445  003972                     __end_of___altoft:
 18446                           	opt stack 0
 18447                           tosu	equ	0xFFF
 18448                           tosh	equ	0xFFE
 18449                           tosl	equ	0xFFD
 18450                           pclath	equ	0xFFA
 18451                           tblptru	equ	0xFF8
 18452                           tblptrh	equ	0xFF7
 18453                           tblptrl	equ	0xFF6
 18454                           tablat	equ	0xFF5
 18455                           prodh	equ	0xFF4
 18456                           prodl	equ	0xFF3
 18457                           intcon	equ	0xFF2
 18458                           intcon2	equ	0xFF1
 18459                           indf0	equ	0xFEF
 18460                           postinc0	equ	0xFEE
 18461                           fsr0h	equ	0xFEA
 18462                           fsr0l	equ	0xFE9
 18463                           wreg	equ	0xFE8
 18464                           indf1	equ	0xFE7
 18465                           postdec1	equ	0xFE5
 18466                           fsr1h	equ	0xFE2
 18467                           fsr1l	equ	0xFE1
 18468                           indf2	equ	0xFDF
 18469                           postinc2	equ	0xFDE
 18470                           postdec2	equ	0xFDD
 18471                           fsr2h	equ	0xFDA
 18472                           fsr2l	equ	0xFD9
 18473                           status	equ	0xFD8
 18474                           
 18475 ;; *************** function _eval_poly *****************
 18476 ;; Defined at:
 18477 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 18478 ;; Parameters:    Size  Location     Type
 18479 ;;  x               3   40[BANK0 ] float 
 18480 ;;  d               2   43[BANK0 ] PTR const 
 18481 ;;		 -> log@coeff(27), exp@coeff(30), 
 18482 ;;  n               2   45[BANK0 ] int 
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;  res             3   47[BANK0 ] int 
 18485 ;; Return value:  Size  Location     Type
 18486 ;;                  3   40[BANK0 ] int 
 18487 ;; Registers used:
 18488 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18489 ;; Tracked objects:
 18490 ;;		On entry : 0/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18494 ;;      Params:         0       7       0       0       0       0       0
 18495 ;;      Locals:         0       3       0       0       0       0       0
 18496 ;;      Temps:          2       0       0       0       0       0       0
 18497 ;;      Totals:         2      10       0       0       0       0       0
 18498 ;;Total ram usage:       12 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; Hardware stack levels required when called:    5
 18501 ;; This function calls:
 18502 ;;		___ftadd
 18503 ;;		___ftmul
 18504 ;;		___wmul
 18505 ;; This function is called by:
 18506 ;;		_exp
 18507 ;;		_log
 18508 ;; This function uses a non-reentrant model
 18509 ;;
 18510                           
 18511                           	psect	text78
 18512  00314A                     __ptext78:
 18513                           	opt stack 0
 18514  00314A                     _eval_poly:
 18515                           	opt stack 21
 18516                           
 18517                           ;incstack = 0
 18518  00314A  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 18519  00314E  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 18520  003152  0E00               	movlw	0
 18521  003154  6E29               	movwf	___wmul@multiplicand+1,c
 18522  003156  0E03               	movlw	3
 18523  003158  6E28               	movwf	___wmul@multiplicand,c
 18524  00315A  ECCD  F021         	call	___wmul	;wreg free
 18525  00315E  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 18526  003162  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 18527  003166  5026               	movf	?___wmul,w,c
 18528  003168  262F               	addwf	??_eval_poly,f,c
 18529  00316A  5027               	movf	?___wmul+1,w,c
 18530  00316C  2230               	addwfc	??_eval_poly+1,f,c
 18531  00316E  C02F  FFF6         	movff	??_eval_poly,tblptrl
 18532  003172  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 18533  003176                     	if	0	;tblptru may be non-zero
 18534  003176                     	endif
 18535  003176                     	if	0	;tblptru may be non-zero
 18536  003176                     	endif
 18537  003176  0009               	tblrd		*+
 18538  003178  CFF5 F08F          	movff	tablat,eval_poly@res
 18539  00317C  0009               	tblrd		*+
 18540  00317E  CFF5 F090          	movff	tablat,eval_poly@res+1
 18541  003182  000A               	tblrd		*-
 18542  003184  CFF5 F091          	movff	tablat,eval_poly@res+2
 18543  003188  D03F               	goto	l2484
 18544  00318A  C08F  F069         	movff	eval_poly@res,___ftmul@f2
 18545  00318E  C090  F06A         	movff	eval_poly@res+1,___ftmul@f2+1
 18546  003192  C091  F06B         	movff	eval_poly@res+2,___ftmul@f2+2
 18547  003196  C088  F066         	movff	eval_poly@x,___ftmul@f1
 18548  00319A  C089  F067         	movff	eval_poly@x+1,___ftmul@f1+1
 18549  00319E  C08A  F068         	movff	eval_poly@x+2,___ftmul@f1+2
 18550  0031A2  EC60  F016         	call	___ftmul	;wreg free
 18551  0031A6  C066  F07C         	movff	?___ftmul,___ftadd@f1
 18552  0031AA  C067  F07D         	movff	?___ftmul+1,___ftadd@f1+1
 18553  0031AE  C068  F07E         	movff	?___ftmul+2,___ftadd@f1+2
 18554  0031B2  0E00               	movlw	0
 18555  0031B4  6E29               	movwf	___wmul@multiplicand+1,c
 18556  0031B6  0E03               	movlw	3
 18557  0031B8  6E28               	movwf	___wmul@multiplicand,c
 18558  0031BA  0100               	movlb	0	; () banked
 18559  0031BC  078D               	decf	eval_poly@n& (0+255),f,b
 18560  0031BE  A0D8               	btfss	status,0,c
 18561  0031C0  078E               	decf	(eval_poly@n+1)& (0+255),f,b
 18562  0031C2  C08D  F026         	movff	eval_poly@n,___wmul@multiplier
 18563  0031C6  C08E  F027         	movff	eval_poly@n+1,___wmul@multiplier+1
 18564  0031CA  ECCD  F021         	call	___wmul	;wreg free
 18565  0031CE  C08B  F02F         	movff	eval_poly@d,??_eval_poly
 18566  0031D2  C08C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 18567  0031D6  5026               	movf	?___wmul,w,c
 18568  0031D8  262F               	addwf	??_eval_poly,f,c
 18569  0031DA  5027               	movf	?___wmul+1,w,c
 18570  0031DC  2230               	addwfc	??_eval_poly+1,f,c
 18571  0031DE  C02F  FFF6         	movff	??_eval_poly,tblptrl
 18572  0031E2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 18573  0031E6                     	if	0	;tblptru may be non-zero
 18574  0031E6                     	endif
 18575  0031E6                     	if	0	;tblptru may be non-zero
 18576  0031E6                     	endif
 18577  0031E6  0009               	tblrd		*+
 18578  0031E8  CFF5 F07F          	movff	tablat,___ftadd@f2
 18579  0031EC  0009               	tblrd		*+
 18580  0031EE  CFF5 F080          	movff	tablat,___ftadd@f2+1
 18581  0031F2  000A               	tblrd		*-
 18582  0031F4  CFF5 F081          	movff	tablat,___ftadd@f2+2
 18583  0031F8  EC26  F00E         	call	___ftadd	;wreg free
 18584  0031FC  C07C  F08F         	movff	?___ftadd,eval_poly@res
 18585  003200  C07D  F090         	movff	?___ftadd+1,eval_poly@res+1
 18586  003204  C07E  F091         	movff	?___ftadd+2,eval_poly@res+2
 18587  003208                     l2484:
 18588  003208  0100               	movlb	0	; () banked
 18589  00320A  518D               	movf	eval_poly@n& (0+255),w,b
 18590  00320C  118E               	iorwf	(eval_poly@n+1)& (0+255),w,b
 18591  00320E  A4D8               	btfss	status,2,c
 18592  003210  D7BC               	goto	l2485
 18593                           
 18594                           ; BSR set to: 0
 18595  003212  C08F  F088         	movff	eval_poly@res,?_eval_poly
 18596  003216  C090  F089         	movff	eval_poly@res+1,?_eval_poly+1
 18597  00321A  C091  F08A         	movff	eval_poly@res+2,?_eval_poly+2
 18598                           
 18599                           ; BSR set to: 0
 18600  00321E  0012               	return		;funcret
 18601  003220                     __end_of_eval_poly:
 18602                           	opt stack 0
 18603                           tosu	equ	0xFFF
 18604                           tosh	equ	0xFFE
 18605                           tosl	equ	0xFFD
 18606                           pclath	equ	0xFFA
 18607                           tblptru	equ	0xFF8
 18608                           tblptrh	equ	0xFF7
 18609                           tblptrl	equ	0xFF6
 18610                           tablat	equ	0xFF5
 18611                           prodh	equ	0xFF4
 18612                           prodl	equ	0xFF3
 18613                           intcon	equ	0xFF2
 18614                           intcon2	equ	0xFF1
 18615                           indf0	equ	0xFEF
 18616                           postinc0	equ	0xFEE
 18617                           fsr0h	equ	0xFEA
 18618                           fsr0l	equ	0xFE9
 18619                           wreg	equ	0xFE8
 18620                           indf1	equ	0xFE7
 18621                           postdec1	equ	0xFE5
 18622                           fsr1h	equ	0xFE2
 18623                           fsr1l	equ	0xFE1
 18624                           indf2	equ	0xFDF
 18625                           postinc2	equ	0xFDE
 18626                           postdec2	equ	0xFDD
 18627                           fsr2h	equ	0xFDA
 18628                           fsr2l	equ	0xFD9
 18629                           status	equ	0xFD8
 18630                           
 18631 ;; *************** function ___wmul *****************
 18632 ;; Defined at:
 18633 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;  multiplier      2   37[COMRAM] unsigned int 
 18636 ;;  multiplicand    2   39[COMRAM] unsigned int 
 18637 ;; Auto vars:     Size  Location     Type
 18638 ;;  product         2   41[COMRAM] unsigned int 
 18639 ;; Return value:  Size  Location     Type
 18640 ;;                  2   37[COMRAM] unsigned int 
 18641 ;; Registers used:
 18642 ;;		wreg, status,2, status,0, prodl, prodh
 18643 ;; Tracked objects:
 18644 ;;		On entry : 0/0
 18645 ;;		On exit  : 0/0
 18646 ;;		Unchanged: 0/0
 18647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18648 ;;      Params:         4       0       0       0       0       0       0
 18649 ;;      Locals:         2       0       0       0       0       0       0
 18650 ;;      Temps:          0       0       0       0       0       0       0
 18651 ;;      Totals:         6       0       0       0       0       0       0
 18652 ;;Total ram usage:        6 bytes
 18653 ;; Hardware stack levels used:    1
 18654 ;; Hardware stack levels required when called:    3
 18655 ;; This function calls:
 18656 ;;		Nothing
 18657 ;; This function is called by:
 18658 ;;		_fround
 18659 ;;		_scale
 18660 ;;		_sprintf
 18661 ;;		_eval_poly
 18662 ;; This function uses a non-reentrant model
 18663 ;;
 18664                           
 18665                           	psect	text79
 18666  00439A                     __ptext79:
 18667                           	opt stack 0
 18668  00439A                     ___wmul:
 18669                           	opt stack 24
 18670                           
 18671                           ; BSR set to: 0
 18672                           ;incstack = 0
 18673  00439A  5026               	movf	___wmul@multiplier,w,c
 18674  00439C  0228               	mulwf	___wmul@multiplicand,c
 18675  00439E  CFF3 F02A          	movff	prodl,___wmul@product
 18676  0043A2  CFF4 F02B          	movff	prodh,___wmul@product+1
 18677  0043A6  5026               	movf	___wmul@multiplier,w,c
 18678  0043A8  0229               	mulwf	___wmul@multiplicand+1,c
 18679  0043AA  50F3               	movf	prodl,w,c
 18680  0043AC  262B               	addwf	___wmul@product+1,f,c
 18681  0043AE  5027               	movf	___wmul@multiplier+1,w,c
 18682  0043B0  0228               	mulwf	___wmul@multiplicand,c
 18683  0043B2  50F3               	movf	prodl,w,c
 18684  0043B4  262B               	addwf	___wmul@product+1,f,c
 18685  0043B6  C02A  F026         	movff	___wmul@product,?___wmul
 18686  0043BA  C02B  F027         	movff	___wmul@product+1,?___wmul+1
 18687  0043BE  0012               	return	
 18688  0043C0                     __end_of___wmul:
 18689                           	opt stack 0
 18690                           tosu	equ	0xFFF
 18691                           tosh	equ	0xFFE
 18692                           tosl	equ	0xFFD
 18693                           pclath	equ	0xFFA
 18694                           tblptru	equ	0xFF8
 18695                           tblptrh	equ	0xFF7
 18696                           tblptrl	equ	0xFF6
 18697                           tablat	equ	0xFF5
 18698                           prodh	equ	0xFF4
 18699                           prodl	equ	0xFF3
 18700                           intcon	equ	0xFF2
 18701                           intcon2	equ	0xFF1
 18702                           indf0	equ	0xFEF
 18703                           postinc0	equ	0xFEE
 18704                           fsr0h	equ	0xFEA
 18705                           fsr0l	equ	0xFE9
 18706                           wreg	equ	0xFE8
 18707                           indf1	equ	0xFE7
 18708                           postdec1	equ	0xFE5
 18709                           fsr1h	equ	0xFE2
 18710                           fsr1l	equ	0xFE1
 18711                           indf2	equ	0xFDF
 18712                           postinc2	equ	0xFDE
 18713                           postdec2	equ	0xFDD
 18714                           fsr2h	equ	0xFDA
 18715                           fsr2l	equ	0xFD9
 18716                           status	equ	0xFD8
 18717                           
 18718 ;; *************** function ___ftmul *****************
 18719 ;; Defined at:
 18720 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 18721 ;; Parameters:    Size  Location     Type
 18722 ;;  f1              3    6[BANK0 ] float 
 18723 ;;  f2              3    9[BANK0 ] float 
 18724 ;; Auto vars:     Size  Location     Type
 18725 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
 18726 ;;  sign            1   17[BANK0 ] unsigned char 
 18727 ;;  cntr            1   16[BANK0 ] unsigned char 
 18728 ;;  exp             1   12[BANK0 ] unsigned char 
 18729 ;; Return value:  Size  Location     Type
 18730 ;;                  3    6[BANK0 ] float 
 18731 ;; Registers used:
 18732 ;;		wreg, status,2, status,0, cstack
 18733 ;; Tracked objects:
 18734 ;;		On entry : 0/0
 18735 ;;		On exit  : 0/0
 18736 ;;		Unchanged: 0/0
 18737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18738 ;;      Params:         0       6       0       0       0       0       0
 18739 ;;      Locals:         0       6       0       0       0       0       0
 18740 ;;      Temps:          3       0       0       0       0       0       0
 18741 ;;      Totals:         3      12       0       0       0       0       0
 18742 ;;Total ram usage:       15 bytes
 18743 ;; Hardware stack levels used:    1
 18744 ;; Hardware stack levels required when called:    4
 18745 ;; This function calls:
 18746 ;;		___ftpack
 18747 ;; This function is called by:
 18748 ;;		_SampleSingleChannel
 18749 ;;		_SampleAllChannels
 18750 ;;		_fround
 18751 ;;		_scale
 18752 ;;		_sprintf
 18753 ;;		_pow
 18754 ;;		_exp
 18755 ;;		_log
 18756 ;;		_eval_poly
 18757 ;;		_CheckFlashPrecentage
 18758 ;;		_DacAnalogToDigitalSpi
 18759 ;; This function uses a non-reentrant model
 18760 ;;
 18761                           
 18762                           	psect	text80
 18763  002CC0                     __ptext80:
 18764                           	opt stack 0
 18765  002CC0                     ___ftmul:
 18766                           	opt stack 23
 18767                           
 18768                           ;incstack = 0
 18769  002CC0  C068  F02C         	movff	___ftmul@f1+2,??___ftmul
 18770  002CC4  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 18771  002CC6  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 18772  002CC8  0100               	movlb	0	; () banked
 18773  002CCA  3567               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 18774  002CCC  362C               	rlcf	??___ftmul& (0+255),f,c
 18775  002CCE  E301               	bnc	u7931
 18776  002CD0  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 18777  002CD2                     u7931:
 18778  002CD2  502C               	movf	??___ftmul,w,c
 18779  002CD4  6F6C               	movwf	___ftmul@exp& (0+255),b
 18780  002CD6  516C               	movf	___ftmul@exp& (0+255),w,b
 18781  002CD8  A4D8               	btfss	status,2,c
 18782  002CDA  D007               	goto	l2064
 18783                           
 18784                           ; BSR set to: 0
 18785  002CDC  0E00               	movlw	0
 18786  002CDE  6F66               	movwf	?___ftmul& (0+255),b
 18787  002CE0  0E00               	movlw	0
 18788  002CE2  6F67               	movwf	(?___ftmul+1)& (0+255),b
 18789  002CE4  0E00               	movlw	0
 18790  002CE6  6F68               	movwf	(?___ftmul+2)& (0+255),b
 18791                           
 18792                           ; BSR set to: 0
 18793  002CE8  0012               	return	
 18794  002CEA                     l2064:
 18795                           
 18796                           ; BSR set to: 0
 18797                           
 18798                           ; BSR set to: 0
 18799  002CEA  C06B  F02C         	movff	___ftmul@f2+2,??___ftmul
 18800  002CEE  6A2D               	clrf	(??___ftmul+1)& (0+255),c
 18801  002CF0  6A2E               	clrf	(??___ftmul+2)& (0+255),c
 18802  002CF2  356A               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 18803  002CF4  362C               	rlcf	??___ftmul& (0+255),f,c
 18804  002CF6  E301               	bnc	u7951
 18805  002CF8  802D               	bsf	(??___ftmul+1)& (0+255),0,c
 18806  002CFA                     u7951:
 18807  002CFA  502C               	movf	??___ftmul,w,c
 18808  002CFC  6F71               	movwf	___ftmul@sign& (0+255),b
 18809  002CFE  5171               	movf	___ftmul@sign& (0+255),w,b
 18810  002D00  A4D8               	btfss	status,2,c
 18811  002D02  D007               	goto	l2066
 18812                           
 18813                           ; BSR set to: 0
 18814  002D04  0E00               	movlw	0
 18815  002D06  6F66               	movwf	?___ftmul& (0+255),b
 18816  002D08  0E00               	movlw	0
 18817  002D0A  6F67               	movwf	(?___ftmul+1)& (0+255),b
 18818  002D0C  0E00               	movlw	0
 18819  002D0E  6F68               	movwf	(?___ftmul+2)& (0+255),b
 18820                           
 18821                           ; BSR set to: 0
 18822  002D10  0012               	return	
 18823  002D12                     l2066:
 18824                           
 18825                           ; BSR set to: 0
 18826                           
 18827                           ; BSR set to: 0
 18828  002D12  5171               	movf	___ftmul@sign& (0+255),w,b
 18829  002D14  0F7B               	addlw	123
 18830  002D16  276C               	addwf	___ftmul@exp& (0+255),f,b
 18831                           
 18832                           ; BSR set to: 0
 18833  002D18  C068  F071         	movff	___ftmul@f1+2,___ftmul@sign
 18834  002D1C  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18835  002D1E  1B71               	xorwf	___ftmul@sign& (0+255),f,b
 18836  002D20  0E80               	movlw	128
 18837  002D22  1771               	andwf	___ftmul@sign& (0+255),f,b
 18838                           
 18839                           ; BSR set to: 0
 18840  002D24  8F67               	bsf	(___ftmul@f1+1)& (0+255),7,b
 18841                           
 18842                           ; BSR set to: 0
 18843  002D26  8F6A               	bsf	(___ftmul@f2+1)& (0+255),7,b
 18844                           
 18845                           ; BSR set to: 0
 18846  002D28  0EFF               	movlw	255
 18847  002D2A  1769               	andwf	___ftmul@f2& (0+255),f,b
 18848  002D2C  0EFF               	movlw	255
 18849  002D2E  176A               	andwf	(___ftmul@f2+1)& (0+255),f,b
 18850  002D30  0E00               	movlw	0
 18851  002D32  176B               	andwf	(___ftmul@f2+2)& (0+255),f,b
 18852                           
 18853                           ; BSR set to: 0
 18854  002D34  0E00               	movlw	0
 18855  002D36  6F6D               	movwf	___ftmul@f3_as_product& (0+255),b
 18856  002D38  0E00               	movlw	0
 18857  002D3A  6F6E               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 18858  002D3C  0E00               	movlw	0
 18859  002D3E  6F6F               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 18860                           
 18861                           ; BSR set to: 0
 18862  002D40  0E07               	movlw	7
 18863  002D42  6F70               	movwf	___ftmul@cntr& (0+255),b
 18864  002D44                     
 18865                           ; BSR set to: 0
 18866                           
 18867                           ; BSR set to: 0
 18868  002D44  A166               	btfss	___ftmul@f1& (0+255),0,b
 18869  002D46  D006               	goto	l2068
 18870                           
 18871                           ; BSR set to: 0
 18872  002D48  5169               	movf	___ftmul@f2& (0+255),w,b
 18873  002D4A  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18874  002D4C  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 18875  002D4E  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18876  002D50  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18877  002D52  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18878  002D54                     l2068:
 18879                           
 18880                           ; BSR set to: 0
 18881                           
 18882                           ; BSR set to: 0
 18883  002D54  90D8               	bcf	status,0,c
 18884  002D56  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18885  002D58  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18886  002D5A  3366               	rrcf	___ftmul@f1& (0+255),f,b
 18887  002D5C  90D8               	bcf	status,0,c
 18888  002D5E  3769               	rlcf	___ftmul@f2& (0+255),f,b
 18889  002D60  376A               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 18890  002D62  376B               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 18891                           
 18892                           ; BSR set to: 0
 18893  002D64  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 18894  002D66  D7EE               	goto	l2067
 18895                           
 18896                           ; BSR set to: 0
 18897                           
 18898                           ; BSR set to: 0
 18899  002D68  0E09               	movlw	9
 18900  002D6A  6F70               	movwf	___ftmul@cntr& (0+255),b
 18901  002D6C                     
 18902                           ; BSR set to: 0
 18903                           
 18904                           ; BSR set to: 0
 18905  002D6C  A166               	btfss	___ftmul@f1& (0+255),0,b
 18906  002D6E  D006               	goto	l2071
 18907                           
 18908                           ; BSR set to: 0
 18909  002D70  5169               	movf	___ftmul@f2& (0+255),w,b
 18910  002D72  276D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18911  002D74  516A               	movf	(___ftmul@f2+1)& (0+255),w,b
 18912  002D76  236E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18913  002D78  516B               	movf	(___ftmul@f2+2)& (0+255),w,b
 18914  002D7A  236F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18915  002D7C                     l2071:
 18916                           
 18917                           ; BSR set to: 0
 18918                           
 18919                           ; BSR set to: 0
 18920  002D7C  90D8               	bcf	status,0,c
 18921  002D7E  3368               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18922  002D80  3367               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18923  002D82  3366               	rrcf	___ftmul@f1& (0+255),f,b
 18924  002D84  90D8               	bcf	status,0,c
 18925  002D86  336F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 18926  002D88  336E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 18927  002D8A  336D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 18928                           
 18929                           ; BSR set to: 0
 18930  002D8C  2F70               	decfsz	___ftmul@cntr& (0+255),f,b
 18931  002D8E  D7EE               	goto	l2070
 18932                           
 18933                           ; BSR set to: 0
 18934                           
 18935                           ; BSR set to: 0
 18936  002D90  C06D  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 18937  002D94  C06E  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 18938  002D98  C06F  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 18939  002D9C  C06C  F01B         	movff	___ftmul@exp,___ftpack@exp
 18940  002DA0  C071  F01C         	movff	___ftmul@sign,___ftpack@sign
 18941  002DA4  EC32  F01A         	call	___ftpack	;wreg free
 18942  002DA8  C018  F066         	movff	?___ftpack,?___ftmul
 18943  002DAC  C019  F067         	movff	?___ftpack+1,?___ftmul+1
 18944  002DB0  C01A  F068         	movff	?___ftpack+2,?___ftmul+2
 18945  002DB4  0012               	return	
 18946  002DB6                     __end_of___ftmul:
 18947                           	opt stack 0
 18948                           tosu	equ	0xFFF
 18949                           tosh	equ	0xFFE
 18950                           tosl	equ	0xFFD
 18951                           pclath	equ	0xFFA
 18952                           tblptru	equ	0xFF8
 18953                           tblptrh	equ	0xFF7
 18954                           tblptrl	equ	0xFF6
 18955                           tablat	equ	0xFF5
 18956                           prodh	equ	0xFF4
 18957                           prodl	equ	0xFF3
 18958                           intcon	equ	0xFF2
 18959                           intcon2	equ	0xFF1
 18960                           indf0	equ	0xFEF
 18961                           postinc0	equ	0xFEE
 18962                           fsr0h	equ	0xFEA
 18963                           fsr0l	equ	0xFE9
 18964                           wreg	equ	0xFE8
 18965                           indf1	equ	0xFE7
 18966                           postdec1	equ	0xFE5
 18967                           fsr1h	equ	0xFE2
 18968                           fsr1l	equ	0xFE1
 18969                           indf2	equ	0xFDF
 18970                           postinc2	equ	0xFDE
 18971                           postdec2	equ	0xFDD
 18972                           fsr2h	equ	0xFDA
 18973                           fsr2l	equ	0xFD9
 18974                           status	equ	0xFD8
 18975                           
 18976 ;; *************** function ___ftsub *****************
 18977 ;; Defined at:
 18978 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 18979 ;; Parameters:    Size  Location     Type
 18980 ;;  f1              3   40[BANK0 ] float 
 18981 ;;  f2              3   43[BANK0 ] float 
 18982 ;; Auto vars:     Size  Location     Type
 18983 ;;		None
 18984 ;; Return value:  Size  Location     Type
 18985 ;;                  3   40[BANK0 ] float 
 18986 ;; Registers used:
 18987 ;;		wreg, status,2, status,0, cstack
 18988 ;; Tracked objects:
 18989 ;;		On entry : 0/0
 18990 ;;		On exit  : 0/0
 18991 ;;		Unchanged: 0/0
 18992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18993 ;;      Params:         0       6       0       0       0       0       0
 18994 ;;      Locals:         0       0       0       0       0       0       0
 18995 ;;      Temps:          0       0       0       0       0       0       0
 18996 ;;      Totals:         0       6       0       0       0       0       0
 18997 ;;Total ram usage:        6 bytes
 18998 ;; Hardware stack levels used:    1
 18999 ;; Hardware stack levels required when called:    5
 19000 ;; This function calls:
 19001 ;;		___ftadd
 19002 ;; This function is called by:
 19003 ;;		_sprintf
 19004 ;;		_exp
 19005 ;; This function uses a non-reentrant model
 19006 ;;
 19007                           
 19008                           	psect	text81
 19009  00403E                     __ptext81:
 19010                           	opt stack 0
 19011  00403E                     ___ftsub:
 19012                           	opt stack 23
 19013                           
 19014                           ;incstack = 0
 19015  00403E  0100               	movlb	0	; () banked
 19016  004040  518B               	movf	___ftsub@f2& (0+255),w,b
 19017  004042  118C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 19018  004044  118D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 19019  004046  B4D8               	btfsc	status,2,c
 19020  004048  D006               	goto	l2081
 19021                           
 19022                           ; BSR set to: 0
 19023  00404A  0E00               	movlw	0
 19024  00404C  1B8B               	xorwf	___ftsub@f2& (0+255),f,b
 19025  00404E  0E00               	movlw	0
 19026  004050  1B8C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 19027  004052  0E80               	movlw	128
 19028  004054  1B8D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 19029  004056                     l2081:
 19030                           
 19031                           ; BSR set to: 0
 19032                           
 19033                           ; BSR set to: 0
 19034  004056  C088  F07C         	movff	___ftsub@f1,___ftadd@f1
 19035  00405A  C089  F07D         	movff	___ftsub@f1+1,___ftadd@f1+1
 19036  00405E  C08A  F07E         	movff	___ftsub@f1+2,___ftadd@f1+2
 19037  004062  C08B  F07F         	movff	___ftsub@f2,___ftadd@f2
 19038  004066  C08C  F080         	movff	___ftsub@f2+1,___ftadd@f2+1
 19039  00406A  C08D  F081         	movff	___ftsub@f2+2,___ftadd@f2+2
 19040  00406E  EC26  F00E         	call	___ftadd	;wreg free
 19041  004072  C07C  F088         	movff	?___ftadd,?___ftsub
 19042  004076  C07D  F089         	movff	?___ftadd+1,?___ftsub+1
 19043  00407A  C07E  F08A         	movff	?___ftadd+2,?___ftsub+2
 19044  00407E  0012               	return	
 19045  004080                     __end_of___ftsub:
 19046                           	opt stack 0
 19047                           tosu	equ	0xFFF
 19048                           tosh	equ	0xFFE
 19049                           tosl	equ	0xFFD
 19050                           pclath	equ	0xFFA
 19051                           tblptru	equ	0xFF8
 19052                           tblptrh	equ	0xFF7
 19053                           tblptrl	equ	0xFF6
 19054                           tablat	equ	0xFF5
 19055                           prodh	equ	0xFF4
 19056                           prodl	equ	0xFF3
 19057                           intcon	equ	0xFF2
 19058                           intcon2	equ	0xFF1
 19059                           indf0	equ	0xFEF
 19060                           postinc0	equ	0xFEE
 19061                           fsr0h	equ	0xFEA
 19062                           fsr0l	equ	0xFE9
 19063                           wreg	equ	0xFE8
 19064                           indf1	equ	0xFE7
 19065                           postdec1	equ	0xFE5
 19066                           fsr1h	equ	0xFE2
 19067                           fsr1l	equ	0xFE1
 19068                           indf2	equ	0xFDF
 19069                           postinc2	equ	0xFDE
 19070                           postdec2	equ	0xFDD
 19071                           fsr2h	equ	0xFDA
 19072                           fsr2l	equ	0xFD9
 19073                           status	equ	0xFD8
 19074                           
 19075 ;; *************** function ___ftadd *****************
 19076 ;; Defined at:
 19077 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 19078 ;; Parameters:    Size  Location     Type
 19079 ;;  f1              3   28[BANK0 ] float 
 19080 ;;  f2              3   31[BANK0 ] float 
 19081 ;; Auto vars:     Size  Location     Type
 19082 ;;  exp1            1   39[BANK0 ] unsigned char 
 19083 ;;  exp2            1   38[BANK0 ] unsigned char 
 19084 ;;  sign            1   37[BANK0 ] unsigned char 
 19085 ;; Return value:  Size  Location     Type
 19086 ;;                  3   28[BANK0 ] float 
 19087 ;; Registers used:
 19088 ;;		wreg, status,2, status,0, cstack
 19089 ;; Tracked objects:
 19090 ;;		On entry : 0/0
 19091 ;;		On exit  : 0/0
 19092 ;;		Unchanged: 0/0
 19093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19094 ;;      Params:         0       6       0       0       0       0       0
 19095 ;;      Locals:         0       3       0       0       0       0       0
 19096 ;;      Temps:          0       3       0       0       0       0       0
 19097 ;;      Totals:         0      12       0       0       0       0       0
 19098 ;;Total ram usage:       12 bytes
 19099 ;; Hardware stack levels used:    1
 19100 ;; Hardware stack levels required when called:    4
 19101 ;; This function calls:
 19102 ;;		___ftpack
 19103 ;; This function is called by:
 19104 ;;		_sprintf
 19105 ;;		___ftsub
 19106 ;;		_floor
 19107 ;;		_log
 19108 ;;		_eval_poly
 19109 ;;		_DacAnalogToDigitalSpi
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           	psect	text82
 19114  001C4C                     __ptext82:
 19115                           	opt stack 0
 19116  001C4C                     ___ftadd:
 19117                           	opt stack 23
 19118                           
 19119                           ;incstack = 0
 19120  001C4C  C07E  F082         	movff	___ftadd@f1+2,??___ftadd
 19121  001C50  0100               	movlb	0	; () banked
 19122  001C52  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19123  001C54  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19124  001C56  357D               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 19125  001C58  3782               	rlcf	??___ftadd& (0+255),f,b
 19126  001C5A  E301               	bnc	u7721
 19127  001C5C  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19128  001C5E                     u7721:
 19129  001C5E  5182               	movf	??___ftadd& (0+255),w,b
 19130  001C60  6F87               	movwf	___ftadd@exp1& (0+255),b
 19131  001C62  C081  F082         	movff	___ftadd@f2+2,??___ftadd
 19132  001C66  6B83               	clrf	(??___ftadd+1)& (0+255),b
 19133  001C68  6B84               	clrf	(??___ftadd+2)& (0+255),b
 19134  001C6A  3580               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 19135  001C6C  3782               	rlcf	??___ftadd& (0+255),f,b
 19136  001C6E  E301               	bnc	u7731
 19137  001C70  8183               	bsf	(??___ftadd+1)& (0+255),0,b
 19138  001C72                     u7731:
 19139  001C72  5182               	movf	??___ftadd& (0+255),w,b
 19140  001C74  6F86               	movwf	___ftadd@exp2& (0+255),b
 19141                           
 19142                           ; BSR set to: 0
 19143  001C76  5187               	movf	___ftadd@exp1& (0+255),w,b
 19144  001C78  B4D8               	btfsc	status,2,c
 19145  001C7A  D00B               	goto	u7760
 19146                           
 19147                           ; BSR set to: 0
 19148  001C7C  5186               	movf	___ftadd@exp2& (0+255),w,b
 19149  001C7E  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19150  001C80  B0D8               	btfsc	status,0,c
 19151  001C82  D00E               	goto	l1999
 19152                           
 19153                           ; BSR set to: 0
 19154  001C84  5187               	movf	___ftadd@exp1& (0+255),w,b
 19155  001C86  0800               	sublw	0
 19156  001C88  2586               	addwf	___ftadd@exp2& (0+255),w,b
 19157  001C8A  6F82               	movwf	??___ftadd& (0+255),b
 19158  001C8C  0E18               	movlw	24
 19159  001C8E  6582               	cpfsgt	??___ftadd& (0+255),b
 19160  001C90  D007               	goto	l1999
 19161  001C92                     u7760:
 19162                           
 19163                           ; BSR set to: 0
 19164  001C92  C07F  F07C         	movff	___ftadd@f2,?___ftadd
 19165  001C96  C080  F07D         	movff	___ftadd@f2+1,?___ftadd+1
 19166  001C9A  C081  F07E         	movff	___ftadd@f2+2,?___ftadd+2
 19167  001C9E  0012               	return	
 19168  001CA0                     l1999:
 19169                           
 19170                           ; BSR set to: 0
 19171                           
 19172                           ; BSR set to: 0
 19173  001CA0  5186               	movf	___ftadd@exp2& (0+255),w,b
 19174  001CA2  B4D8               	btfsc	status,2,c
 19175  001CA4  D00B               	goto	u7790
 19176                           
 19177                           ; BSR set to: 0
 19178  001CA6  5187               	movf	___ftadd@exp1& (0+255),w,b
 19179  001CA8  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19180  001CAA  B0D8               	btfsc	status,0,c
 19181  001CAC  D00E               	goto	l2003
 19182                           
 19183                           ; BSR set to: 0
 19184  001CAE  5186               	movf	___ftadd@exp2& (0+255),w,b
 19185  001CB0  0800               	sublw	0
 19186  001CB2  2587               	addwf	___ftadd@exp1& (0+255),w,b
 19187  001CB4  6F82               	movwf	??___ftadd& (0+255),b
 19188  001CB6  0E18               	movlw	24
 19189  001CB8  6582               	cpfsgt	??___ftadd& (0+255),b
 19190  001CBA  D007               	goto	l2003
 19191  001CBC                     u7790:
 19192                           
 19193                           ; BSR set to: 0
 19194  001CBC  C07C  F07C         	movff	___ftadd@f1,?___ftadd
 19195  001CC0  C07D  F07D         	movff	___ftadd@f1+1,?___ftadd+1
 19196  001CC4  C07E  F07E         	movff	___ftadd@f1+2,?___ftadd+2
 19197  001CC8  0012               	return	
 19198  001CCA                     l2003:
 19199                           
 19200                           ; BSR set to: 0
 19201                           
 19202                           ; BSR set to: 0
 19203  001CCA  0E06               	movlw	6
 19204  001CCC  6F85               	movwf	___ftadd@sign& (0+255),b
 19205                           
 19206                           ; BSR set to: 0
 19207  001CCE  BF7E               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 19208                           
 19209                           ; BSR set to: 0
 19210  001CD0  8F85               	bsf	___ftadd@sign& (0+255),7,b
 19211                           
 19212                           ; BSR set to: 0
 19213                           
 19214                           ; BSR set to: 0
 19215  001CD2  BF81               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 19216                           
 19217                           ; BSR set to: 0
 19218  001CD4  8D85               	bsf	___ftadd@sign& (0+255),6,b
 19219                           
 19220                           ; BSR set to: 0
 19221  001CD6  8F7D               	bsf	(___ftadd@f1+1)& (0+255),7,b
 19222                           
 19223                           ; BSR set to: 0
 19224  001CD8  0EFF               	movlw	255
 19225  001CDA  177C               	andwf	___ftadd@f1& (0+255),f,b
 19226  001CDC  0EFF               	movlw	255
 19227  001CDE  177D               	andwf	(___ftadd@f1+1)& (0+255),f,b
 19228  001CE0  0E00               	movlw	0
 19229  001CE2  177E               	andwf	(___ftadd@f1+2)& (0+255),f,b
 19230  001CE4  8F80               	bsf	(___ftadd@f2+1)& (0+255),7,b
 19231                           
 19232                           ; BSR set to: 0
 19233  001CE6  0EFF               	movlw	255
 19234  001CE8  177F               	andwf	___ftadd@f2& (0+255),f,b
 19235  001CEA  0EFF               	movlw	255
 19236  001CEC  1780               	andwf	(___ftadd@f2+1)& (0+255),f,b
 19237  001CEE  0E00               	movlw	0
 19238  001CF0  1781               	andwf	(___ftadd@f2+2)& (0+255),f,b
 19239                           
 19240                           ; BSR set to: 0
 19241  001CF2  5186               	movf	___ftadd@exp2& (0+255),w,b
 19242  001CF4  5D87               	subwf	___ftadd@exp1& (0+255),w,b
 19243  001CF6  B0D8               	btfsc	status,0,c
 19244  001CF8  D01B               	goto	l2008
 19245  001CFA                     u7820:
 19246                           
 19247                           ; BSR set to: 0
 19248                           
 19249                           ; BSR set to: 0
 19250  001CFA  90D8               	bcf	status,0,c
 19251  001CFC  377F               	rlcf	___ftadd@f2& (0+255),f,b
 19252  001CFE  3780               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 19253  001D00  3781               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 19254  001D02  0786               	decf	___ftadd@exp2& (0+255),f,b
 19255                           
 19256                           ; BSR set to: 0
 19257  001D04  5187               	movf	___ftadd@exp1& (0+255),w,b
 19258  001D06  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19259  001D08  B4D8               	btfsc	status,2,c
 19260  001D0A  D00D               	goto	l2013
 19261                           
 19262                           ; BSR set to: 0
 19263  001D0C  0785               	decf	___ftadd@sign& (0+255),f,b
 19264  001D0E  C085  F082         	movff	___ftadd@sign,??___ftadd
 19265  001D12  0E07               	movlw	7
 19266  001D14  1782               	andwf	??___ftadd& (0+255),f,b
 19267  001D16  B4D8               	btfsc	status,2,c
 19268  001D18  D006               	goto	l2013
 19269  001D1A  D7EF               	goto	u7820
 19270  001D1C                     
 19271                           ; BSR set to: 0
 19272                           
 19273                           ; BSR set to: 0
 19274  001D1C  90D8               	bcf	status,0,c
 19275  001D1E  337E               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 19276  001D20  337D               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 19277  001D22  337C               	rrcf	___ftadd@f1& (0+255),f,b
 19278  001D24  2B87               	incf	___ftadd@exp1& (0+255),f,b
 19279  001D26                     l2013:
 19280                           
 19281                           ; BSR set to: 0
 19282                           
 19283                           ; BSR set to: 0
 19284  001D26  5186               	movf	___ftadd@exp2& (0+255),w,b
 19285  001D28  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19286  001D2A  B4D8               	btfsc	status,2,c
 19287  001D2C  D01F               	goto	u7890
 19288  001D2E  D7F6               	goto	l2014
 19289  001D30                     l2008:
 19290                           
 19291                           ; BSR set to: 0
 19292                           
 19293                           ; BSR set to: 0
 19294  001D30  5187               	movf	___ftadd@exp1& (0+255),w,b
 19295  001D32  5D86               	subwf	___ftadd@exp2& (0+255),w,b
 19296  001D34  B0D8               	btfsc	status,0,c
 19297  001D36  D01A               	goto	u7890
 19298  001D38                     u7860:
 19299                           
 19300                           ; BSR set to: 0
 19301                           
 19302                           ; BSR set to: 0
 19303  001D38  90D8               	bcf	status,0,c
 19304  001D3A  377C               	rlcf	___ftadd@f1& (0+255),f,b
 19305  001D3C  377D               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 19306  001D3E  377E               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 19307  001D40  0787               	decf	___ftadd@exp1& (0+255),f,b
 19308                           
 19309                           ; BSR set to: 0
 19310  001D42  5187               	movf	___ftadd@exp1& (0+255),w,b
 19311  001D44  1986               	xorwf	___ftadd@exp2& (0+255),w,b
 19312  001D46  B4D8               	btfsc	status,2,c
 19313  001D48  D00D               	goto	l2022
 19314                           
 19315                           ; BSR set to: 0
 19316  001D4A  0785               	decf	___ftadd@sign& (0+255),f,b
 19317  001D4C  C085  F082         	movff	___ftadd@sign,??___ftadd
 19318  001D50  0E07               	movlw	7
 19319  001D52  1782               	andwf	??___ftadd& (0+255),f,b
 19320  001D54  B4D8               	btfsc	status,2,c
 19321  001D56  D006               	goto	l2022
 19322  001D58  D7EF               	goto	u7860
 19323  001D5A                     
 19324                           ; BSR set to: 0
 19325                           
 19326                           ; BSR set to: 0
 19327  001D5A  90D8               	bcf	status,0,c
 19328  001D5C  3381               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 19329  001D5E  3380               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 19330  001D60  337F               	rrcf	___ftadd@f2& (0+255),f,b
 19331  001D62  2B86               	incf	___ftadd@exp2& (0+255),f,b
 19332  001D64                     l2022:
 19333                           
 19334                           ; BSR set to: 0
 19335                           
 19336                           ; BSR set to: 0
 19337  001D64  5186               	movf	___ftadd@exp2& (0+255),w,b
 19338  001D66  1987               	xorwf	___ftadd@exp1& (0+255),w,b
 19339  001D68  A4D8               	btfss	status,2,c
 19340  001D6A  D7F7               	goto	l2023
 19341  001D6C                     u7890:
 19342                           
 19343                           ; BSR set to: 0
 19344                           
 19345                           ; BSR set to: 0
 19346                           
 19347                           ; BSR set to: 0
 19348  001D6C  AF85               	btfss	___ftadd@sign& (0+255),7,b
 19349  001D6E  D00C               	goto	l2025
 19350                           
 19351                           ; BSR set to: 0
 19352  001D70  0EFF               	movlw	255
 19353  001D72  1B7C               	xorwf	___ftadd@f1& (0+255),f,b
 19354  001D74  0EFF               	movlw	255
 19355  001D76  1B7D               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 19356  001D78  0EFF               	movlw	255
 19357  001D7A  1B7E               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 19358  001D7C  0E01               	movlw	1
 19359  001D7E  277C               	addwf	___ftadd@f1& (0+255),f,b
 19360  001D80  0E00               	movlw	0
 19361  001D82  237D               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 19362  001D84  0E00               	movlw	0
 19363  001D86  237E               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 19364  001D88                     l2025:
 19365                           
 19366                           ; BSR set to: 0
 19367  001D88  AD85               	btfss	___ftadd@sign& (0+255),6,b
 19368  001D8A  D00C               	goto	l2026
 19369                           
 19370                           ; BSR set to: 0
 19371  001D8C  0EFF               	movlw	255
 19372  001D8E  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19373  001D90  0EFF               	movlw	255
 19374  001D92  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19375  001D94  0EFF               	movlw	255
 19376  001D96  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19377  001D98  0E01               	movlw	1
 19378  001D9A  277F               	addwf	___ftadd@f2& (0+255),f,b
 19379  001D9C  0E00               	movlw	0
 19380  001D9E  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19381  001DA0  0E00               	movlw	0
 19382  001DA2  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19383  001DA4                     l2026:
 19384                           
 19385                           ; BSR set to: 0
 19386                           
 19387                           ; BSR set to: 0
 19388  001DA4  0E00               	movlw	0
 19389  001DA6  6F85               	movwf	___ftadd@sign& (0+255),b
 19390                           
 19391                           ; BSR set to: 0
 19392  001DA8  517C               	movf	___ftadd@f1& (0+255),w,b
 19393  001DAA  277F               	addwf	___ftadd@f2& (0+255),f,b
 19394  001DAC  517D               	movf	(___ftadd@f1+1)& (0+255),w,b
 19395  001DAE  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19396  001DB0  517E               	movf	(___ftadd@f1+2)& (0+255),w,b
 19397  001DB2  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19398                           
 19399                           ; BSR set to: 0
 19400  001DB4  AF81               	btfss	(___ftadd@f2+2)& (0+255),7,b
 19401  001DB6  D00E               	goto	l2027
 19402                           
 19403                           ; BSR set to: 0
 19404  001DB8  0EFF               	movlw	255
 19405  001DBA  1B7F               	xorwf	___ftadd@f2& (0+255),f,b
 19406  001DBC  0EFF               	movlw	255
 19407  001DBE  1B80               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19408  001DC0  0EFF               	movlw	255
 19409  001DC2  1B81               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19410  001DC4  0E01               	movlw	1
 19411  001DC6  277F               	addwf	___ftadd@f2& (0+255),f,b
 19412  001DC8  0E00               	movlw	0
 19413  001DCA  2380               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19414  001DCC  0E00               	movlw	0
 19415  001DCE  2381               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19416                           
 19417                           ; BSR set to: 0
 19418  001DD0  0E01               	movlw	1
 19419  001DD2  6F85               	movwf	___ftadd@sign& (0+255),b
 19420  001DD4                     l2027:
 19421                           
 19422                           ; BSR set to: 0
 19423                           
 19424                           ; BSR set to: 0
 19425  001DD4  C07F  F018         	movff	___ftadd@f2,___ftpack@arg
 19426  001DD8  C080  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 19427  001DDC  C081  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 19428  001DE0  C087  F01B         	movff	___ftadd@exp1,___ftpack@exp
 19429  001DE4  C085  F01C         	movff	___ftadd@sign,___ftpack@sign
 19430  001DE8  EC32  F01A         	call	___ftpack	;wreg free
 19431  001DEC  C018  F07C         	movff	?___ftpack,?___ftadd
 19432  001DF0  C019  F07D         	movff	?___ftpack+1,?___ftadd+1
 19433  001DF4  C01A  F07E         	movff	?___ftpack+2,?___ftadd+2
 19434  001DF8  0012               	return	
 19435  001DFA                     __end_of___ftadd:
 19436                           	opt stack 0
 19437                           tosu	equ	0xFFF
 19438                           tosh	equ	0xFFE
 19439                           tosl	equ	0xFFD
 19440                           pclath	equ	0xFFA
 19441                           tblptru	equ	0xFF8
 19442                           tblptrh	equ	0xFF7
 19443                           tblptrl	equ	0xFF6
 19444                           tablat	equ	0xFF5
 19445                           prodh	equ	0xFF4
 19446                           prodl	equ	0xFF3
 19447                           intcon	equ	0xFF2
 19448                           intcon2	equ	0xFF1
 19449                           indf0	equ	0xFEF
 19450                           postinc0	equ	0xFEE
 19451                           fsr0h	equ	0xFEA
 19452                           fsr0l	equ	0xFE9
 19453                           wreg	equ	0xFE8
 19454                           indf1	equ	0xFE7
 19455                           postdec1	equ	0xFE5
 19456                           fsr1h	equ	0xFE2
 19457                           fsr1l	equ	0xFE1
 19458                           indf2	equ	0xFDF
 19459                           postinc2	equ	0xFDE
 19460                           postdec2	equ	0xFDD
 19461                           fsr2h	equ	0xFDA
 19462                           fsr2l	equ	0xFD9
 19463                           status	equ	0xFD8
 19464                           
 19465 ;; *************** function ___ftneg *****************
 19466 ;; Defined at:
 19467 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;  f1              3   23[COMRAM] float 
 19470 ;; Auto vars:     Size  Location     Type
 19471 ;;		None
 19472 ;; Return value:  Size  Location     Type
 19473 ;;                  3   23[COMRAM] float 
 19474 ;; Registers used:
 19475 ;;		wreg, status,2, status,0
 19476 ;; Tracked objects:
 19477 ;;		On entry : 0/0
 19478 ;;		On exit  : 0/0
 19479 ;;		Unchanged: 0/0
 19480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19481 ;;      Params:         3       0       0       0       0       0       0
 19482 ;;      Locals:         0       0       0       0       0       0       0
 19483 ;;      Temps:          0       0       0       0       0       0       0
 19484 ;;      Totals:         3       0       0       0       0       0       0
 19485 ;;Total ram usage:        3 bytes
 19486 ;; Hardware stack levels used:    1
 19487 ;; Hardware stack levels required when called:    3
 19488 ;; This function calls:
 19489 ;;		Nothing
 19490 ;; This function is called by:
 19491 ;;		_sprintf
 19492 ;;		_pow
 19493 ;;		_exp
 19494 ;; This function uses a non-reentrant model
 19495 ;;
 19496                           
 19497                           	psect	text83
 19498  004408                     __ptext83:
 19499                           	opt stack 0
 19500  004408                     ___ftneg:
 19501                           	opt stack 25
 19502                           
 19503                           ;incstack = 0
 19504  004408  5018               	movf	___ftneg@f1,w,c
 19505  00440A  1019               	iorwf	___ftneg@f1+1,w,c
 19506  00440C  101A               	iorwf	___ftneg@f1+2,w,c
 19507  00440E  B4D8               	btfsc	status,2,c
 19508  004410  D006               	goto	l2075
 19509  004412  0E00               	movlw	0
 19510  004414  1A18               	xorwf	___ftneg@f1,f,c
 19511  004416  0E00               	movlw	0
 19512  004418  1A19               	xorwf	___ftneg@f1+1,f,c
 19513  00441A  0E80               	movlw	128
 19514  00441C  1A1A               	xorwf	___ftneg@f1+2,f,c
 19515  00441E                     l2075:
 19516  00441E  C018  F018         	movff	___ftneg@f1,?___ftneg
 19517  004422  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 19518  004426  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 19519  00442A  0012               	return		;funcret
 19520  00442C                     __end_of___ftneg:
 19521                           	opt stack 0
 19522                           tosu	equ	0xFFF
 19523                           tosh	equ	0xFFE
 19524                           tosl	equ	0xFFD
 19525                           pclath	equ	0xFFA
 19526                           tblptru	equ	0xFF8
 19527                           tblptrh	equ	0xFF7
 19528                           tblptrl	equ	0xFF6
 19529                           tablat	equ	0xFF5
 19530                           prodh	equ	0xFF4
 19531                           prodl	equ	0xFF3
 19532                           intcon	equ	0xFF2
 19533                           intcon2	equ	0xFF1
 19534                           indf0	equ	0xFEF
 19535                           postinc0	equ	0xFEE
 19536                           fsr0h	equ	0xFEA
 19537                           fsr0l	equ	0xFE9
 19538                           wreg	equ	0xFE8
 19539                           indf1	equ	0xFE7
 19540                           postdec1	equ	0xFE5
 19541                           fsr1h	equ	0xFE2
 19542                           fsr1l	equ	0xFE1
 19543                           indf2	equ	0xFDF
 19544                           postinc2	equ	0xFDE
 19545                           postdec2	equ	0xFDD
 19546                           fsr2h	equ	0xFDA
 19547                           fsr2l	equ	0xFD9
 19548                           status	equ	0xFD8
 19549                           
 19550 ;; *************** function ___ftdiv *****************
 19551 ;; Defined at:
 19552 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 19553 ;; Parameters:    Size  Location     Type
 19554 ;;  f1              3   34[COMRAM] float 
 19555 ;;  f2              3   37[COMRAM] float 
 19556 ;; Auto vars:     Size  Location     Type
 19557 ;;  f3              3    1[BANK0 ] float 
 19558 ;;  sign            1    5[BANK0 ] unsigned char 
 19559 ;;  exp             1    4[BANK0 ] unsigned char 
 19560 ;;  cntr            1    0[BANK0 ] unsigned char 
 19561 ;; Return value:  Size  Location     Type
 19562 ;;                  3   34[COMRAM] float 
 19563 ;; Registers used:
 19564 ;;		wreg, status,2, status,0, cstack
 19565 ;; Tracked objects:
 19566 ;;		On entry : 0/0
 19567 ;;		On exit  : 0/0
 19568 ;;		Unchanged: 0/0
 19569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19570 ;;      Params:         6       0       0       0       0       0       0
 19571 ;;      Locals:         0       6       0       0       0       0       0
 19572 ;;      Temps:          3       0       0       0       0       0       0
 19573 ;;      Totals:         9       6       0       0       0       0       0
 19574 ;;Total ram usage:       15 bytes
 19575 ;; Hardware stack levels used:    1
 19576 ;; Hardware stack levels required when called:    4
 19577 ;; This function calls:
 19578 ;;		___ftpack
 19579 ;; This function is called by:
 19580 ;;		_SampleSingleChannel
 19581 ;;		_SampleAllChannels
 19582 ;;		_exp
 19583 ;;		_CheckFlashPrecentage
 19584 ;;		_DacAnalogToDigitalSpi
 19585 ;; This function uses a non-reentrant model
 19586 ;;
 19587                           
 19588                           	psect	text84
 19589  002DB6                     __ptext84:
 19590                           	opt stack 0
 19591  002DB6                     ___ftdiv:
 19592                           	opt stack 22
 19593                           
 19594                           ;incstack = 0
 19595  002DB6  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 19596  002DBA  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 19597  002DBC  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 19598  002DBE  3424               	rlcf	___ftdiv@f1+1,w,c
 19599  002DC0  3629               	rlcf	??___ftdiv& (0+255),f,c
 19600  002DC2  E301               	bnc	u8131
 19601  002DC4  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 19602  002DC6                     u8131:
 19603  002DC6  5029               	movf	??___ftdiv,w,c
 19604  002DC8  0100               	movlb	0	; () banked
 19605  002DCA  6F64               	movwf	___ftdiv@exp& (0+255),b
 19606  002DCC  5164               	movf	___ftdiv@exp& (0+255),w,b
 19607  002DCE  A4D8               	btfss	status,2,c
 19608  002DD0  D007               	goto	l2032
 19609                           
 19610                           ; BSR set to: 0
 19611  002DD2  0E00               	movlw	0
 19612  002DD4  6E23               	movwf	?___ftdiv,c
 19613  002DD6  0E00               	movlw	0
 19614  002DD8  6E24               	movwf	?___ftdiv+1,c
 19615  002DDA  0E00               	movlw	0
 19616  002DDC  6E25               	movwf	?___ftdiv+2,c
 19617                           
 19618                           ; BSR set to: 0
 19619  002DDE  0012               	return	
 19620  002DE0                     l2032:
 19621                           
 19622                           ; BSR set to: 0
 19623                           
 19624                           ; BSR set to: 0
 19625  002DE0  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 19626  002DE4  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 19627  002DE6  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 19628  002DE8  3427               	rlcf	___ftdiv@f2+1,w,c
 19629  002DEA  3629               	rlcf	??___ftdiv& (0+255),f,c
 19630  002DEC  E301               	bnc	u8151
 19631  002DEE  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 19632  002DF0                     u8151:
 19633  002DF0  5029               	movf	??___ftdiv,w,c
 19634  002DF2  6F65               	movwf	___ftdiv@sign& (0+255),b
 19635  002DF4  5165               	movf	___ftdiv@sign& (0+255),w,b
 19636  002DF6  A4D8               	btfss	status,2,c
 19637  002DF8  D007               	goto	l2034
 19638                           
 19639                           ; BSR set to: 0
 19640  002DFA  0E00               	movlw	0
 19641  002DFC  6E23               	movwf	?___ftdiv,c
 19642  002DFE  0E00               	movlw	0
 19643  002E00  6E24               	movwf	?___ftdiv+1,c
 19644  002E02  0E00               	movlw	0
 19645  002E04  6E25               	movwf	?___ftdiv+2,c
 19646                           
 19647                           ; BSR set to: 0
 19648  002E06  0012               	return	
 19649  002E08                     l2034:
 19650                           
 19651                           ; BSR set to: 0
 19652                           
 19653                           ; BSR set to: 0
 19654  002E08  0E00               	movlw	0
 19655  002E0A  6F61               	movwf	___ftdiv@f3& (0+255),b
 19656  002E0C  0E00               	movlw	0
 19657  002E0E  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 19658  002E10  0E00               	movlw	0
 19659  002E12  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 19660                           
 19661                           ; BSR set to: 0
 19662  002E14  5165               	movf	___ftdiv@sign& (0+255),w,b
 19663  002E16  0F89               	addlw	137
 19664  002E18  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 19665                           
 19666                           ; BSR set to: 0
 19667  002E1A  C025  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 19668                           
 19669                           ; BSR set to: 0
 19670  002E1E  5028               	movf	___ftdiv@f2+2,w,c
 19671  002E20  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 19672                           
 19673                           ; BSR set to: 0
 19674  002E22  0E80               	movlw	128
 19675  002E24  1765               	andwf	___ftdiv@sign& (0+255),f,b
 19676                           
 19677                           ; BSR set to: 0
 19678  002E26  8E24               	bsf	___ftdiv@f1+1,7,c
 19679                           
 19680                           ; BSR set to: 0
 19681  002E28  0EFF               	movlw	255
 19682  002E2A  1623               	andwf	___ftdiv@f1,f,c
 19683  002E2C  0EFF               	movlw	255
 19684  002E2E  1624               	andwf	___ftdiv@f1+1,f,c
 19685  002E30  0E00               	movlw	0
 19686  002E32  1625               	andwf	___ftdiv@f1+2,f,c
 19687                           
 19688                           ; BSR set to: 0
 19689  002E34  8E27               	bsf	___ftdiv@f2+1,7,c
 19690                           
 19691                           ; BSR set to: 0
 19692  002E36  0EFF               	movlw	255
 19693  002E38  1626               	andwf	___ftdiv@f2,f,c
 19694  002E3A  0EFF               	movlw	255
 19695  002E3C  1627               	andwf	___ftdiv@f2+1,f,c
 19696  002E3E  0E00               	movlw	0
 19697  002E40  1628               	andwf	___ftdiv@f2+2,f,c
 19698                           
 19699                           ; BSR set to: 0
 19700  002E42  0E18               	movlw	24
 19701  002E44  6F60               	movwf	___ftdiv@cntr& (0+255),b
 19702  002E46                     
 19703                           ; BSR set to: 0
 19704                           
 19705                           ; BSR set to: 0
 19706  002E46  90D8               	bcf	status,0,c
 19707  002E48  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 19708  002E4A  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 19709  002E4C  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 19710                           
 19711                           ; BSR set to: 0
 19712  002E4E  5026               	movf	___ftdiv@f2,w,c
 19713  002E50  5C23               	subwf	___ftdiv@f1,w,c
 19714  002E52  5027               	movf	___ftdiv@f2+1,w,c
 19715  002E54  5824               	subwfb	___ftdiv@f1+1,w,c
 19716  002E56  5028               	movf	___ftdiv@f2+2,w,c
 19717  002E58  5825               	subwfb	___ftdiv@f1+2,w,c
 19718  002E5A  A0D8               	btfss	status,0,c
 19719  002E5C  D007               	goto	l2036
 19720                           
 19721                           ; BSR set to: 0
 19722  002E5E  5026               	movf	___ftdiv@f2,w,c
 19723  002E60  5E23               	subwf	___ftdiv@f1,f,c
 19724  002E62  5027               	movf	___ftdiv@f2+1,w,c
 19725  002E64  5A24               	subwfb	___ftdiv@f1+1,f,c
 19726  002E66  5028               	movf	___ftdiv@f2+2,w,c
 19727  002E68  5A25               	subwfb	___ftdiv@f1+2,f,c
 19728                           
 19729                           ; BSR set to: 0
 19730  002E6A  8161               	bsf	___ftdiv@f3& (0+255),0,b
 19731  002E6C                     l2036:
 19732                           
 19733                           ; BSR set to: 0
 19734  002E6C  90D8               	bcf	status,0,c
 19735  002E6E  3623               	rlcf	___ftdiv@f1,f,c
 19736  002E70  3624               	rlcf	___ftdiv@f1+1,f,c
 19737  002E72  3625               	rlcf	___ftdiv@f1+2,f,c
 19738                           
 19739                           ; BSR set to: 0
 19740  002E74  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 19741  002E76  D7E7               	goto	l2035
 19742                           
 19743                           ; BSR set to: 0
 19744                           
 19745                           ; BSR set to: 0
 19746  002E78  C061  F018         	movff	___ftdiv@f3,___ftpack@arg
 19747  002E7C  C062  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 19748  002E80  C063  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 19749  002E84  C064  F01B         	movff	___ftdiv@exp,___ftpack@exp
 19750  002E88  C065  F01C         	movff	___ftdiv@sign,___ftpack@sign
 19751  002E8C  EC32  F01A         	call	___ftpack	;wreg free
 19752  002E90  C018  F023         	movff	?___ftpack,?___ftdiv
 19753  002E94  C019  F024         	movff	?___ftpack+1,?___ftdiv+1
 19754  002E98  C01A  F025         	movff	?___ftpack+2,?___ftdiv+2
 19755  002E9C  0012               	return	
 19756  002E9E                     __end_of___ftdiv:
 19757                           	opt stack 0
 19758                           tosu	equ	0xFFF
 19759                           tosh	equ	0xFFE
 19760                           tosl	equ	0xFFD
 19761                           pclath	equ	0xFFA
 19762                           tblptru	equ	0xFF8
 19763                           tblptrh	equ	0xFF7
 19764                           tblptrl	equ	0xFF6
 19765                           tablat	equ	0xFF5
 19766                           prodh	equ	0xFF4
 19767                           prodl	equ	0xFF3
 19768                           intcon	equ	0xFF2
 19769                           intcon2	equ	0xFF1
 19770                           indf0	equ	0xFEF
 19771                           postinc0	equ	0xFEE
 19772                           fsr0h	equ	0xFEA
 19773                           fsr0l	equ	0xFE9
 19774                           wreg	equ	0xFE8
 19775                           indf1	equ	0xFE7
 19776                           postdec1	equ	0xFE5
 19777                           fsr1h	equ	0xFE2
 19778                           fsr1l	equ	0xFE1
 19779                           indf2	equ	0xFDF
 19780                           postinc2	equ	0xFDE
 19781                           postdec2	equ	0xFDD
 19782                           fsr2h	equ	0xFDA
 19783                           fsr2l	equ	0xFD9
 19784                           status	equ	0xFD8
 19785                           
 19786 ;; *************** function ___awtoft *****************
 19787 ;; Defined at:
 19788 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 19789 ;; Parameters:    Size  Location     Type
 19790 ;;  c               2   31[COMRAM] int 
 19791 ;; Auto vars:     Size  Location     Type
 19792 ;;  sign            1   34[COMRAM] unsigned char 
 19793 ;; Return value:  Size  Location     Type
 19794 ;;                  3   31[COMRAM] float 
 19795 ;; Registers used:
 19796 ;;		wreg, status,2, status,0, cstack
 19797 ;; Tracked objects:
 19798 ;;		On entry : 0/0
 19799 ;;		On exit  : 0/0
 19800 ;;		Unchanged: 0/0
 19801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19802 ;;      Params:         3       0       0       0       0       0       0
 19803 ;;      Locals:         1       0       0       0       0       0       0
 19804 ;;      Temps:          0       0       0       0       0       0       0
 19805 ;;      Totals:         4       0       0       0       0       0       0
 19806 ;;Total ram usage:        4 bytes
 19807 ;; Hardware stack levels used:    1
 19808 ;; Hardware stack levels required when called:    4
 19809 ;; This function calls:
 19810 ;;		___ftpack
 19811 ;; This function is called by:
 19812 ;;		_GroupRx
 19813 ;;		_GroupTx
 19814 ;;		_ReadIntFromEeprom
 19815 ;;		_exp
 19816 ;;		_log
 19817 ;;		_DacSetValue
 19818 ;; This function uses a non-reentrant model
 19819 ;;
 19820                           
 19821                           	psect	text85
 19822  0041AE                     __ptext85:
 19823                           	opt stack 0
 19824  0041AE                     ___awtoft:
 19825                           	opt stack 22
 19826                           
 19827                           ;incstack = 0
 19828  0041AE  0E00               	movlw	0
 19829  0041B0  6E23               	movwf	___awtoft@sign,c
 19830  0041B2  AE21               	btfss	___awtoft@c+1,7,c
 19831  0041B4  D006               	goto	l1932
 19832  0041B6  6C20               	negf	___awtoft@c,c
 19833  0041B8  1E21               	comf	___awtoft@c+1,f,c
 19834  0041BA  B0D8               	btfsc	status,0,c
 19835  0041BC  2A21               	incf	___awtoft@c+1,f,c
 19836  0041BE  0E01               	movlw	1
 19837  0041C0  6E23               	movwf	___awtoft@sign,c
 19838  0041C2                     l1932:
 19839  0041C2  C020  F018         	movff	___awtoft@c,___ftpack@arg
 19840  0041C6  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 19841  0041CA  6A1A               	clrf	___ftpack@arg+2,c
 19842  0041CC  0E8E               	movlw	142
 19843  0041CE  6E1B               	movwf	___ftpack@exp,c
 19844  0041D0  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 19845  0041D4  EC32  F01A         	call	___ftpack	;wreg free
 19846  0041D8  C018  F020         	movff	?___ftpack,?___awtoft
 19847  0041DC  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 19848  0041E0  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 19849  0041E4  0012               	return	
 19850  0041E6                     __end_of___awtoft:
 19851                           	opt stack 0
 19852                           tosu	equ	0xFFF
 19853                           tosh	equ	0xFFE
 19854                           tosl	equ	0xFFD
 19855                           pclath	equ	0xFFA
 19856                           tblptru	equ	0xFF8
 19857                           tblptrh	equ	0xFF7
 19858                           tblptrl	equ	0xFF6
 19859                           tablat	equ	0xFF5
 19860                           prodh	equ	0xFF4
 19861                           prodl	equ	0xFF3
 19862                           intcon	equ	0xFF2
 19863                           intcon2	equ	0xFF1
 19864                           indf0	equ	0xFEF
 19865                           postinc0	equ	0xFEE
 19866                           fsr0h	equ	0xFEA
 19867                           fsr0l	equ	0xFE9
 19868                           wreg	equ	0xFE8
 19869                           indf1	equ	0xFE7
 19870                           postdec1	equ	0xFE5
 19871                           fsr1h	equ	0xFE2
 19872                           fsr1l	equ	0xFE1
 19873                           indf2	equ	0xFDF
 19874                           postinc2	equ	0xFDE
 19875                           postdec2	equ	0xFDD
 19876                           fsr2h	equ	0xFDA
 19877                           fsr2l	equ	0xFD9
 19878                           status	equ	0xFD8
 19879                           
 19880 ;; *************** function ___lltoft *****************
 19881 ;; Defined at:
 19882 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 19883 ;; Parameters:    Size  Location     Type
 19884 ;;  c               4   31[COMRAM] unsigned long 
 19885 ;; Auto vars:     Size  Location     Type
 19886 ;;  exp             1   39[COMRAM] unsigned char 
 19887 ;; Return value:  Size  Location     Type
 19888 ;;                  3   31[COMRAM] float 
 19889 ;; Registers used:
 19890 ;;		wreg, status,2, status,0, cstack
 19891 ;; Tracked objects:
 19892 ;;		On entry : 0/0
 19893 ;;		On exit  : 0/0
 19894 ;;		Unchanged: 0/0
 19895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19896 ;;      Params:         4       0       0       0       0       0       0
 19897 ;;      Locals:         1       0       0       0       0       0       0
 19898 ;;      Temps:          4       0       0       0       0       0       0
 19899 ;;      Totals:         9       0       0       0       0       0       0
 19900 ;;Total ram usage:        9 bytes
 19901 ;; Hardware stack levels used:    1
 19902 ;; Hardware stack levels required when called:    4
 19903 ;; This function calls:
 19904 ;;		___ftpack
 19905 ;; This function is called by:
 19906 ;;		_CollectRxStatusParams
 19907 ;;		_CollectTxStatusParams
 19908 ;;		_sprintf
 19909 ;;		_pow
 19910 ;;		_CheckFlashPrecentage
 19911 ;; This function uses a non-reentrant model
 19912 ;;
 19913                           
 19914                           	psect	text86
 19915  003D1A                     __ptext86:
 19916                           	opt stack 0
 19917  003D1A                     ___lltoft:
 19918                           	opt stack 24
 19919                           
 19920                           ;incstack = 0
 19921  003D1A  0E8E               	movlw	142
 19922  003D1C  6E28               	movwf	___lltoft@exp,c
 19923  003D1E  D006               	goto	l2142
 19924  003D20  90D8               	bcf	status,0,c
 19925  003D22  3223               	rrcf	___lltoft@c+3,f,c
 19926  003D24  3222               	rrcf	___lltoft@c+2,f,c
 19927  003D26  3221               	rrcf	___lltoft@c+1,f,c
 19928  003D28  3220               	rrcf	___lltoft@c,f,c
 19929  003D2A  2A28               	incf	___lltoft@exp,f,c
 19930  003D2C                     l2142:
 19931  003D2C  0E00               	movlw	0
 19932  003D2E  1420               	andwf	___lltoft@c,w,c
 19933  003D30  6E24               	movwf	??___lltoft& (0+255),c
 19934  003D32  0E00               	movlw	0
 19935  003D34  1421               	andwf	___lltoft@c+1,w,c
 19936  003D36  6E25               	movwf	(??___lltoft+1)& (0+255),c
 19937  003D38  0E00               	movlw	0
 19938  003D3A  1422               	andwf	___lltoft@c+2,w,c
 19939  003D3C  6E26               	movwf	(??___lltoft+2)& (0+255),c
 19940  003D3E  0EFF               	movlw	255
 19941  003D40  1423               	andwf	___lltoft@c+3,w,c
 19942  003D42  6E27               	movwf	(??___lltoft+3)& (0+255),c
 19943  003D44  5024               	movf	??___lltoft,w,c
 19944  003D46  1025               	iorwf	??___lltoft+1,w,c
 19945  003D48  1026               	iorwf	??___lltoft+2,w,c
 19946  003D4A  1027               	iorwf	??___lltoft+3,w,c
 19947  003D4C  A4D8               	btfss	status,2,c
 19948  003D4E  D7E8               	goto	l2143
 19949  003D50  C020  F018         	movff	___lltoft@c,___ftpack@arg
 19950  003D54  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 19951  003D58  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 19952  003D5C  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 19953  003D60  0E00               	movlw	0
 19954  003D62  6E1C               	movwf	___ftpack@sign,c
 19955  003D64  EC32  F01A         	call	___ftpack	;wreg free
 19956  003D68  C018  F020         	movff	?___ftpack,?___lltoft
 19957  003D6C  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 19958  003D70  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 19959  003D74  0012               	return	
 19960  003D76                     __end_of___lltoft:
 19961                           	opt stack 0
 19962                           tosu	equ	0xFFF
 19963                           tosh	equ	0xFFE
 19964                           tosl	equ	0xFFD
 19965                           pclath	equ	0xFFA
 19966                           tblptru	equ	0xFF8
 19967                           tblptrh	equ	0xFF7
 19968                           tblptrl	equ	0xFF6
 19969                           tablat	equ	0xFF5
 19970                           prodh	equ	0xFF4
 19971                           prodl	equ	0xFF3
 19972                           intcon	equ	0xFF2
 19973                           intcon2	equ	0xFF1
 19974                           indf0	equ	0xFEF
 19975                           postinc0	equ	0xFEE
 19976                           fsr0h	equ	0xFEA
 19977                           fsr0l	equ	0xFE9
 19978                           wreg	equ	0xFE8
 19979                           indf1	equ	0xFE7
 19980                           postdec1	equ	0xFE5
 19981                           fsr1h	equ	0xFE2
 19982                           fsr1l	equ	0xFE1
 19983                           indf2	equ	0xFDF
 19984                           postinc2	equ	0xFDE
 19985                           postdec2	equ	0xFDD
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function ___ftpack *****************
 19991 ;; Defined at:
 19992 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;  arg             3   23[COMRAM] unsigned um
 19995 ;;  exp             1   26[COMRAM] unsigned char 
 19996 ;;  sign            1   27[COMRAM] unsigned char 
 19997 ;; Auto vars:     Size  Location     Type
 19998 ;;		None
 19999 ;; Return value:  Size  Location     Type
 20000 ;;                  3   23[COMRAM] float 
 20001 ;; Registers used:
 20002 ;;		wreg, status,2, status,0
 20003 ;; Tracked objects:
 20004 ;;		On entry : 0/0
 20005 ;;		On exit  : 0/0
 20006 ;;		Unchanged: 0/0
 20007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20008 ;;      Params:         5       0       0       0       0       0       0
 20009 ;;      Locals:         0       0       0       0       0       0       0
 20010 ;;      Temps:          3       0       0       0       0       0       0
 20011 ;;      Totals:         8       0       0       0       0       0       0
 20012 ;;Total ram usage:        8 bytes
 20013 ;; Hardware stack levels used:    1
 20014 ;; Hardware stack levels required when called:    3
 20015 ;; This function calls:
 20016 ;;		Nothing
 20017 ;; This function is called by:
 20018 ;;		___altoft
 20019 ;;		___awtoft
 20020 ;;		___ftadd
 20021 ;;		___ftdiv
 20022 ;;		___ftmul
 20023 ;;		___lltoft
 20024 ;;		___lwtoft
 20025 ;; This function uses a non-reentrant model
 20026 ;;
 20027                           
 20028                           	psect	text87
 20029  003464                     __ptext87:
 20030                           	opt stack 0
 20031  003464                     ___ftpack:
 20032                           	opt stack 23
 20033                           
 20034                           ;incstack = 0
 20035  003464  501B               	movf	___ftpack@exp,w,c
 20036  003466  B4D8               	btfsc	status,2,c
 20037  003468  D005               	goto	u7630
 20038  00346A  5018               	movf	___ftpack@arg,w,c
 20039  00346C  1019               	iorwf	___ftpack@arg+1,w,c
 20040  00346E  101A               	iorwf	___ftpack@arg+2,w,c
 20041  003470  A4D8               	btfss	status,2,c
 20042  003472  D00C               	goto	l1968
 20043  003474                     u7630:
 20044  003474  0E00               	movlw	0
 20045  003476  6E18               	movwf	?___ftpack,c
 20046  003478  0E00               	movlw	0
 20047  00347A  6E19               	movwf	?___ftpack+1,c
 20048  00347C  0E00               	movlw	0
 20049  00347E  6E1A               	movwf	?___ftpack+2,c
 20050  003480  0012               	return	
 20051  003482  2A1B               	incf	___ftpack@exp,f,c
 20052  003484  90D8               	bcf	status,0,c
 20053  003486  321A               	rrcf	___ftpack@arg+2,f,c
 20054  003488  3219               	rrcf	___ftpack@arg+1,f,c
 20055  00348A  3218               	rrcf	___ftpack@arg,f,c
 20056  00348C                     l1968:
 20057  00348C  0E00               	movlw	0
 20058  00348E  1418               	andwf	___ftpack@arg,w,c
 20059  003490  6E1D               	movwf	??___ftpack& (0+255),c
 20060  003492  0E00               	movlw	0
 20061  003494  1419               	andwf	___ftpack@arg+1,w,c
 20062  003496  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20063  003498  0EFE               	movlw	254
 20064  00349A  141A               	andwf	___ftpack@arg+2,w,c
 20065  00349C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20066  00349E  501D               	movf	??___ftpack,w,c
 20067  0034A0  101E               	iorwf	??___ftpack+1,w,c
 20068  0034A2  101F               	iorwf	??___ftpack+2,w,c
 20069  0034A4  B4D8               	btfsc	status,2,c
 20070  0034A6  D00C               	goto	l1971
 20071  0034A8  D7EC               	goto	l1969
 20072  0034AA  2A1B               	incf	___ftpack@exp,f,c
 20073  0034AC  0E01               	movlw	1
 20074  0034AE  2618               	addwf	___ftpack@arg,f,c
 20075  0034B0  0E00               	movlw	0
 20076  0034B2  2219               	addwfc	___ftpack@arg+1,f,c
 20077  0034B4  0E00               	movlw	0
 20078  0034B6  221A               	addwfc	___ftpack@arg+2,f,c
 20079  0034B8  90D8               	bcf	status,0,c
 20080  0034BA  321A               	rrcf	___ftpack@arg+2,f,c
 20081  0034BC  3219               	rrcf	___ftpack@arg+1,f,c
 20082  0034BE  3218               	rrcf	___ftpack@arg,f,c
 20083  0034C0                     l1971:
 20084  0034C0  0E00               	movlw	0
 20085  0034C2  1418               	andwf	___ftpack@arg,w,c
 20086  0034C4  6E1D               	movwf	??___ftpack& (0+255),c
 20087  0034C6  0E00               	movlw	0
 20088  0034C8  1419               	andwf	___ftpack@arg+1,w,c
 20089  0034CA  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 20090  0034CC  0EFF               	movlw	255
 20091  0034CE  141A               	andwf	___ftpack@arg+2,w,c
 20092  0034D0  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 20093  0034D2  501D               	movf	??___ftpack,w,c
 20094  0034D4  101E               	iorwf	??___ftpack+1,w,c
 20095  0034D6  101F               	iorwf	??___ftpack+2,w,c
 20096  0034D8  B4D8               	btfsc	status,2,c
 20097  0034DA  D006               	goto	l1974
 20098  0034DC  D7E6               	goto	l1972
 20099  0034DE  061B               	decf	___ftpack@exp,f,c
 20100  0034E0  90D8               	bcf	status,0,c
 20101  0034E2  3618               	rlcf	___ftpack@arg,f,c
 20102  0034E4  3619               	rlcf	___ftpack@arg+1,f,c
 20103  0034E6  361A               	rlcf	___ftpack@arg+2,f,c
 20104  0034E8                     l1974:
 20105  0034E8  BE19               	btfsc	___ftpack@arg+1,7,c
 20106  0034EA  D003               	goto	u7670
 20107  0034EC  0E02               	movlw	2
 20108  0034EE  601B               	cpfslt	___ftpack@exp,c
 20109  0034F0  D7F6               	goto	l1975
 20110  0034F2                     u7670:
 20111  0034F2  A01B               	btfss	___ftpack@exp,0,c
 20112  0034F4  9E19               	bcf	___ftpack@arg+1,7,c
 20113  0034F6  90D8               	bcf	status,0,c
 20114  0034F8  321B               	rrcf	___ftpack@exp,f,c
 20115  0034FA  501B               	movf	___ftpack@exp,w,c
 20116  0034FC  121A               	iorwf	___ftpack@arg+2,f,c
 20117  0034FE  501C               	movf	___ftpack@sign,w,c
 20118  003500  A4D8               	btfss	status,2,c
 20119  003502  8E1A               	bsf	___ftpack@arg+2,7,c
 20120  003504  C018  F018         	movff	___ftpack@arg,?___ftpack
 20121  003508  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 20122  00350C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 20123  003510  0012               	return	
 20124  003512                     __end_of___ftpack:
 20125                           	opt stack 0
 20126                           tosu	equ	0xFFF
 20127                           tosh	equ	0xFFE
 20128                           tosl	equ	0xFFD
 20129                           pclath	equ	0xFFA
 20130                           tblptru	equ	0xFF8
 20131                           tblptrh	equ	0xFF7
 20132                           tblptrl	equ	0xFF6
 20133                           tablat	equ	0xFF5
 20134                           prodh	equ	0xFF4
 20135                           prodl	equ	0xFF3
 20136                           intcon	equ	0xFF2
 20137                           intcon2	equ	0xFF1
 20138                           indf0	equ	0xFEF
 20139                           postinc0	equ	0xFEE
 20140                           fsr0h	equ	0xFEA
 20141                           fsr0l	equ	0xFE9
 20142                           wreg	equ	0xFE8
 20143                           indf1	equ	0xFE7
 20144                           postdec1	equ	0xFE5
 20145                           fsr1h	equ	0xFE2
 20146                           fsr1l	equ	0xFE1
 20147                           indf2	equ	0xFDF
 20148                           postinc2	equ	0xFDE
 20149                           postdec2	equ	0xFDD
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function ___lmul *****************
 20155 ;; Defined at:
 20156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;  multiplier      4   25[COMRAM] unsigned long 
 20159 ;;  multiplicand    4   29[COMRAM] unsigned long 
 20160 ;; Auto vars:     Size  Location     Type
 20161 ;;  product         4   33[COMRAM] unsigned long 
 20162 ;; Return value:  Size  Location     Type
 20163 ;;                  4   25[COMRAM] unsigned long 
 20164 ;; Registers used:
 20165 ;;		wreg, status,2, status,0
 20166 ;; Tracked objects:
 20167 ;;		On entry : 0/0
 20168 ;;		On exit  : 0/0
 20169 ;;		Unchanged: 0/0
 20170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20171 ;;      Params:         8       0       0       0       0       0       0
 20172 ;;      Locals:         4       0       0       0       0       0       0
 20173 ;;      Temps:          0       0       0       0       0       0       0
 20174 ;;      Totals:        12       0       0       0       0       0       0
 20175 ;;Total ram usage:       12 bytes
 20176 ;; Hardware stack levels used:    1
 20177 ;; Hardware stack levels required when called:    3
 20178 ;; This function calls:
 20179 ;;		Nothing
 20180 ;; This function is called by:
 20181 ;;		_ReadIntFromEeprom
 20182 ;;		_strtol
 20183 ;; This function uses a non-reentrant model
 20184 ;;
 20185                           
 20186                           	psect	text88
 20187  003ED2                     __ptext88:
 20188                           	opt stack 0
 20189  003ED2                     ___lmul:
 20190                           	opt stack 23
 20191                           
 20192                           ;incstack = 0
 20193  003ED2  0E00               	movlw	0
 20194  003ED4  6E22               	movwf	___lmul@product,c
 20195  003ED6  0E00               	movlw	0
 20196  003ED8  6E23               	movwf	___lmul@product+1,c
 20197  003EDA  0E00               	movlw	0
 20198  003EDC  6E24               	movwf	___lmul@product+2,c
 20199  003EDE  0E00               	movlw	0
 20200  003EE0  6E25               	movwf	___lmul@product+3,c
 20201  003EE2  A01A               	btfss	___lmul@multiplier,0,c
 20202  003EE4  D008               	goto	l1745
 20203  003EE6  501E               	movf	___lmul@multiplicand,w,c
 20204  003EE8  2622               	addwf	___lmul@product,f,c
 20205  003EEA  501F               	movf	___lmul@multiplicand+1,w,c
 20206  003EEC  2223               	addwfc	___lmul@product+1,f,c
 20207  003EEE  5020               	movf	___lmul@multiplicand+2,w,c
 20208  003EF0  2224               	addwfc	___lmul@product+2,f,c
 20209  003EF2  5021               	movf	___lmul@multiplicand+3,w,c
 20210  003EF4  2225               	addwfc	___lmul@product+3,f,c
 20211  003EF6                     l1745:
 20212  003EF6  90D8               	bcf	status,0,c
 20213  003EF8  361E               	rlcf	___lmul@multiplicand,f,c
 20214  003EFA  361F               	rlcf	___lmul@multiplicand+1,f,c
 20215  003EFC  3620               	rlcf	___lmul@multiplicand+2,f,c
 20216  003EFE  3621               	rlcf	___lmul@multiplicand+3,f,c
 20217  003F00  90D8               	bcf	status,0,c
 20218  003F02  321D               	rrcf	___lmul@multiplier+3,f,c
 20219  003F04  321C               	rrcf	___lmul@multiplier+2,f,c
 20220  003F06  321B               	rrcf	___lmul@multiplier+1,f,c
 20221  003F08  321A               	rrcf	___lmul@multiplier,f,c
 20222  003F0A  501A               	movf	___lmul@multiplier,w,c
 20223  003F0C  101B               	iorwf	___lmul@multiplier+1,w,c
 20224  003F0E  101C               	iorwf	___lmul@multiplier+2,w,c
 20225  003F10  101D               	iorwf	___lmul@multiplier+3,w,c
 20226  003F12  A4D8               	btfss	status,2,c
 20227  003F14  D7E6               	goto	l1744
 20228  003F16  C022  F01A         	movff	___lmul@product,?___lmul
 20229  003F1A  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 20230  003F1E  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 20231  003F22  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 20232  003F26  0012               	return		;funcret
 20233  003F28                     __end_of___lmul:
 20234                           	opt stack 0
 20235                           tosu	equ	0xFFF
 20236                           tosh	equ	0xFFE
 20237                           tosl	equ	0xFFD
 20238                           pclath	equ	0xFFA
 20239                           tblptru	equ	0xFF8
 20240                           tblptrh	equ	0xFF7
 20241                           tblptrl	equ	0xFF6
 20242                           tablat	equ	0xFF5
 20243                           prodh	equ	0xFF4
 20244                           prodl	equ	0xFF3
 20245                           intcon	equ	0xFF2
 20246                           intcon2	equ	0xFF1
 20247                           indf0	equ	0xFEF
 20248                           postinc0	equ	0xFEE
 20249                           fsr0h	equ	0xFEA
 20250                           fsr0l	equ	0xFE9
 20251                           wreg	equ	0xFE8
 20252                           indf1	equ	0xFE7
 20253                           postdec1	equ	0xFE5
 20254                           fsr1h	equ	0xFE2
 20255                           fsr1l	equ	0xFE1
 20256                           indf2	equ	0xFDF
 20257                           postinc2	equ	0xFDE
 20258                           postdec2	equ	0xFDD
 20259                           fsr2h	equ	0xFDA
 20260                           fsr2l	equ	0xFD9
 20261                           status	equ	0xFD8
 20262                           
 20263 ;; *************** function _EepromRead *****************
 20264 ;; Defined at:
 20265 ;;		line 215 in file "FlashApp.c"
 20266 ;; Parameters:    Size  Location     Type
 20267 ;;  address         1    wreg     unsigned char 
 20268 ;; Auto vars:     Size  Location     Type
 20269 ;;  address         1   24[COMRAM] unsigned char 
 20270 ;; Return value:  Size  Location     Type
 20271 ;;                  1    wreg      unsigned char 
 20272 ;; Registers used:
 20273 ;;		wreg, status,2, cstack
 20274 ;; Tracked objects:
 20275 ;;		On entry : 0/0
 20276 ;;		On exit  : 0/0
 20277 ;;		Unchanged: 0/0
 20278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20279 ;;      Params:         0       0       0       0       0       0       0
 20280 ;;      Locals:         1       0       0       0       0       0       0
 20281 ;;      Temps:          0       0       0       0       0       0       0
 20282 ;;      Totals:         1       0       0       0       0       0       0
 20283 ;;Total ram usage:        1 bytes
 20284 ;; Hardware stack levels used:    1
 20285 ;; Hardware stack levels required when called:    4
 20286 ;; This function calls:
 20287 ;;		_DATAEE_ReadByte
 20288 ;; This function is called by:
 20289 ;;		_ReadIntFromEeprom
 20290 ;; This function uses a non-reentrant model
 20291 ;;
 20292                           
 20293                           	psect	text89
 20294  004578                     __ptext89:
 20295                           	opt stack 0
 20296  004578                     _EepromRead:
 20297                           	opt stack 23
 20298                           
 20299                           ;incstack = 0
 20300                           ;EepromRead@address stored from wreg
 20301  004578  6E19               	movwf	EepromRead@address,c
 20302                           
 20303                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 20304  00457A  5019               	movf	EepromRead@address,w,c
 20305  00457C  EC8A  F022         	call	_DATAEE_ReadByte
 20306  004580  0012               	return	
 20307  004582                     __end_of_EepromRead:
 20308                           	opt stack 0
 20309                           tosu	equ	0xFFF
 20310                           tosh	equ	0xFFE
 20311                           tosl	equ	0xFFD
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           intcon2	equ	0xFF1
 20321                           indf0	equ	0xFEF
 20322                           postinc0	equ	0xFEE
 20323                           fsr0h	equ	0xFEA
 20324                           fsr0l	equ	0xFE9
 20325                           wreg	equ	0xFE8
 20326                           indf1	equ	0xFE7
 20327                           postdec1	equ	0xFE5
 20328                           fsr1h	equ	0xFE2
 20329                           fsr1l	equ	0xFE1
 20330                           indf2	equ	0xFDF
 20331                           postinc2	equ	0xFDE
 20332                           postdec2	equ	0xFDD
 20333                           fsr2h	equ	0xFDA
 20334                           fsr2l	equ	0xFD9
 20335                           status	equ	0xFD8
 20336                           
 20337 ;; *************** function _DATAEE_ReadByte *****************
 20338 ;; Defined at:
 20339 ;;		line 194 in file "mcc_generated_files/memory.c"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;  bAdd            1    wreg     unsigned char 
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;  bAdd            1   23[COMRAM] unsigned char 
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      unsigned char 
 20346 ;; Registers used:
 20347 ;;		wreg, status,2
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20353 ;;      Params:         0       0       0       0       0       0       0
 20354 ;;      Locals:         1       0       0       0       0       0       0
 20355 ;;      Temps:          0       0       0       0       0       0       0
 20356 ;;      Totals:         1       0       0       0       0       0       0
 20357 ;;Total ram usage:        1 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    3
 20360 ;; This function calls:
 20361 ;;		Nothing
 20362 ;; This function is called by:
 20363 ;;		_EepromRead
 20364 ;;		_EepromTest
 20365 ;; This function uses a non-reentrant model
 20366 ;;
 20367                           
 20368                           	psect	text90
 20369  004514                     __ptext90:
 20370                           	opt stack 0
 20371  004514                     _DATAEE_ReadByte:
 20372                           	opt stack 23
 20373                           
 20374                           ;incstack = 0
 20375                           ;DATAEE_ReadByte@bAdd stored from wreg
 20376  004514  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 20377                           
 20378                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 20379  004516  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 20380                           
 20381                           ;memory.c: 198: EECON1bits.CFGS = 0;
 20382  00451A  9CA6               	bcf	4006,6,c	;volsfr
 20383                           
 20384                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 20385  00451C  9EA6               	bcf	4006,7,c	;volsfr
 20386                           
 20387                           ;memory.c: 200: EECON1bits.RD = 1;
 20388  00451E  80A6               	bsf	4006,0,c	;volsfr
 20389                           
 20390                           ;memory.c: 201: __nop();
 20391  004520  F000               	nop	
 20392                           
 20393                           ;memory.c: 202: __nop();
 20394  004522  F000               	nop	
 20395                           
 20396                           ;memory.c: 204: return (EEDATA);
 20397  004524  50A8               	movf	4008,w,c	;volatile
 20398  004526  0012               	return	
 20399  004528                     __end_of_DATAEE_ReadByte:
 20400                           	opt stack 0
 20401                           tosu	equ	0xFFF
 20402                           tosh	equ	0xFFE
 20403                           tosl	equ	0xFFD
 20404                           pclath	equ	0xFFA
 20405                           tblptru	equ	0xFF8
 20406                           tblptrh	equ	0xFF7
 20407                           tblptrl	equ	0xFF6
 20408                           tablat	equ	0xFF5
 20409                           prodh	equ	0xFF4
 20410                           prodl	equ	0xFF3
 20411                           intcon	equ	0xFF2
 20412                           intcon2	equ	0xFF1
 20413                           indf0	equ	0xFEF
 20414                           postinc0	equ	0xFEE
 20415                           fsr0h	equ	0xFEA
 20416                           fsr0l	equ	0xFE9
 20417                           wreg	equ	0xFE8
 20418                           indf1	equ	0xFE7
 20419                           postdec1	equ	0xFE5
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           indf2	equ	0xFDF
 20423                           postinc2	equ	0xFDE
 20424                           postdec2	equ	0xFDD
 20425                           fsr2h	equ	0xFDA
 20426                           fsr2l	equ	0xFD9
 20427                           status	equ	0xFD8
 20428                           
 20429 ;; *************** function _ClearMcuRunTime *****************
 20430 ;; Defined at:
 20431 ;;		line 40 in file "SystemStatus.c"
 20432 ;; Parameters:    Size  Location     Type
 20433 ;;		None
 20434 ;; Auto vars:     Size  Location     Type
 20435 ;;		None
 20436 ;; Return value:  Size  Location     Type
 20437 ;;                  1    wreg      void 
 20438 ;; Registers used:
 20439 ;;		wreg, status,2
 20440 ;; Tracked objects:
 20441 ;;		On entry : 0/0
 20442 ;;		On exit  : 0/0
 20443 ;;		Unchanged: 0/0
 20444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20445 ;;      Params:         0       0       0       0       0       0       0
 20446 ;;      Locals:         0       0       0       0       0       0       0
 20447 ;;      Temps:          0       0       0       0       0       0       0
 20448 ;;      Totals:         0       0       0       0       0       0       0
 20449 ;;Total ram usage:        0 bytes
 20450 ;; Hardware stack levels used:    1
 20451 ;; Hardware stack levels required when called:    3
 20452 ;; This function calls:
 20453 ;;		Nothing
 20454 ;; This function is called by:
 20455 ;;		_InitSystemApplicationManagers
 20456 ;; This function uses a non-reentrant model
 20457 ;;
 20458                           
 20459                           	psect	text91
 20460  004528                     __ptext91:
 20461                           	opt stack 0
 20462  004528                     _ClearMcuRunTime:
 20463                           	opt stack 26
 20464                           
 20465                           ;SystemStatus.c: 42: mcuRunTimeIn5SecTicks = 0;
 20466                           
 20467                           ;incstack = 0
 20468  004528  0E00               	movlw	0
 20469  00452A  0101               	movlb	1	; () banked
 20470  00452C  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 20471  00452E  0E00               	movlw	0
 20472  004530  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 20473  004532  0E00               	movlw	0
 20474  004534  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 20475  004536  0E00               	movlw	0
 20476  004538  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 20477                           
 20478                           ; BSR set to: 1
 20479  00453A  0012               	return		;funcret
 20480  00453C                     __end_of_ClearMcuRunTime:
 20481                           	opt stack 0
 20482                           tosu	equ	0xFFF
 20483                           tosh	equ	0xFFE
 20484                           tosl	equ	0xFFD
 20485                           pclath	equ	0xFFA
 20486                           tblptru	equ	0xFF8
 20487                           tblptrh	equ	0xFF7
 20488                           tblptrl	equ	0xFF6
 20489                           tablat	equ	0xFF5
 20490                           prodh	equ	0xFF4
 20491                           prodl	equ	0xFF3
 20492                           intcon	equ	0xFF2
 20493                           intcon2	equ	0xFF1
 20494                           indf0	equ	0xFEF
 20495                           postinc0	equ	0xFEE
 20496                           fsr0h	equ	0xFEA
 20497                           fsr0l	equ	0xFE9
 20498                           wreg	equ	0xFE8
 20499                           indf1	equ	0xFE7
 20500                           postdec1	equ	0xFE5
 20501                           fsr1h	equ	0xFE2
 20502                           fsr1l	equ	0xFE1
 20503                           indf2	equ	0xFDF
 20504                           postinc2	equ	0xFDE
 20505                           postdec2	equ	0xFDD
 20506                           fsr2h	equ	0xFDA
 20507                           fsr2l	equ	0xFD9
 20508                           status	equ	0xFD8
 20509                           
 20510 ;; *************** function _BlinkOkLeds *****************
 20511 ;; Defined at:
 20512 ;;		line 24 in file "LedsApp.c"
 20513 ;; Parameters:    Size  Location     Type
 20514 ;;  state           1    wreg     enum E7699
 20515 ;; Auto vars:     Size  Location     Type
 20516 ;;  state           1   26[COMRAM] enum E7699
 20517 ;;  idx             2   27[COMRAM] int 
 20518 ;; Return value:  Size  Location     Type
 20519 ;;                  1    wreg      void 
 20520 ;; Registers used:
 20521 ;;		wreg, status,2, status,0
 20522 ;; Tracked objects:
 20523 ;;		On entry : 0/0
 20524 ;;		On exit  : 0/0
 20525 ;;		Unchanged: 0/0
 20526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20527 ;;      Params:         0       0       0       0       0       0       0
 20528 ;;      Locals:         3       0       0       0       0       0       0
 20529 ;;      Temps:          3       0       0       0       0       0       0
 20530 ;;      Totals:         6       0       0       0       0       0       0
 20531 ;;Total ram usage:        6 bytes
 20532 ;; Hardware stack levels used:    1
 20533 ;; Hardware stack levels required when called:    3
 20534 ;; This function calls:
 20535 ;;		Nothing
 20536 ;; This function is called by:
 20537 ;;		_main
 20538 ;; This function uses a non-reentrant model
 20539 ;;
 20540                           
 20541                           	psect	text92
 20542  003C60                     __ptext92:
 20543                           	opt stack 0
 20544  003C60                     _BlinkOkLeds:
 20545                           	opt stack 27
 20546                           
 20547                           ; BSR set to: 1
 20548                           ;incstack = 0
 20549                           ;BlinkOkLeds@state stored from wreg
 20550  003C60  6E1B               	movwf	BlinkOkLeds@state,c
 20551                           
 20552                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 20553  003C62  0E00               	movlw	0
 20554  003C64  6E1D               	movwf	BlinkOkLeds@idx+1,c
 20555  003C66  0E00               	movlw	0
 20556  003C68  6E1C               	movwf	BlinkOkLeds@idx,c
 20557  003C6A                     l7243:
 20558  003C6A  501B               	movf	BlinkOkLeds@state,w,c
 20559  003C6C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20560  003C6E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 20561  003C70  5018               	movf	??_BlinkOkLeds,w,c
 20562  003C72  5C1C               	subwf	BlinkOkLeds@idx,w,c
 20563  003C74  501D               	movf	BlinkOkLeds@idx+1,w,c
 20564  003C76  0A80               	xorlw	128
 20565  003C78  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 20566  003C7A  5019               	movf	??_BlinkOkLeds+1,w,c
 20567  003C7C  0A80               	xorlw	128
 20568  003C7E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 20569  003C80  B0D8               	btfsc	status,0,c
 20570  003C82  0012               	return	
 20571                           
 20572                           ;LedsApp.c: 27: {
 20573                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 20574  003C84  908B               	bcf	3979,0,c	;volatile
 20575                           
 20576                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 20577  003C86  0E02               	movlw	2
 20578  003C88  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 20579  003C8A  0E04               	movlw	4
 20580  003C8C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20581  003C8E  0EBA               	movlw	186
 20582  003C90                     u10877:
 20583  003C90  2EE8               	decfsz	wreg,f,c
 20584  003C92  D7FE               	bra	u10877
 20585  003C94  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 20586  003C96  D7FC               	bra	u10877
 20587  003C98  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 20588  003C9A  D7FA               	bra	u10877
 20589  003C9C  D000               	nop2	
 20590                           
 20591                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 20592  003C9E  808B               	bsf	3979,0,c	;volatile
 20593                           
 20594                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 20595  003CA0  0E02               	movlw	2
 20596  003CA2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 20597  003CA4  0E04               	movlw	4
 20598  003CA6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 20599  003CA8  0EBA               	movlw	186
 20600  003CAA                     u10887:
 20601  003CAA  2EE8               	decfsz	wreg,f,c
 20602  003CAC  D7FE               	bra	u10887
 20603  003CAE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 20604  003CB0  D7FC               	bra	u10887
 20605  003CB2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 20606  003CB4  D7FA               	bra	u10887
 20607  003CB6  D000               	nop2	
 20608  003CB8  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 20609  003CBA  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 20610  003CBC  D7D6               	goto	l7243
 20611  003CBE                     __end_of_BlinkOkLeds:
 20612                           	opt stack 0
 20613                           tosu	equ	0xFFF
 20614                           tosh	equ	0xFFE
 20615                           tosl	equ	0xFFD
 20616                           pclath	equ	0xFFA
 20617                           tblptru	equ	0xFF8
 20618                           tblptrh	equ	0xFF7
 20619                           tblptrl	equ	0xFF6
 20620                           tablat	equ	0xFF5
 20621                           prodh	equ	0xFF4
 20622                           prodl	equ	0xFF3
 20623                           intcon	equ	0xFF2
 20624                           intcon2	equ	0xFF1
 20625                           indf0	equ	0xFEF
 20626                           postinc0	equ	0xFEE
 20627                           fsr0h	equ	0xFEA
 20628                           fsr0l	equ	0xFE9
 20629                           wreg	equ	0xFE8
 20630                           indf1	equ	0xFE7
 20631                           postdec1	equ	0xFE5
 20632                           fsr1h	equ	0xFE2
 20633                           fsr1l	equ	0xFE1
 20634                           indf2	equ	0xFDF
 20635                           postinc2	equ	0xFDE
 20636                           postdec2	equ	0xFDD
 20637                           fsr2h	equ	0xFDA
 20638                           fsr2l	equ	0xFD9
 20639                           status	equ	0xFD8
 20640                           
 20641 ;; *************** function _INTERRUPT_InterruptManager *****************
 20642 ;; Defined at:
 20643 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 20644 ;; Parameters:    Size  Location     Type
 20645 ;;		None
 20646 ;; Auto vars:     Size  Location     Type
 20647 ;;		None
 20648 ;; Return value:  Size  Location     Type
 20649 ;;                  1    wreg      void 
 20650 ;; Registers used:
 20651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20652 ;; Tracked objects:
 20653 ;;		On entry : 0/0
 20654 ;;		On exit  : 0/0
 20655 ;;		Unchanged: 0/0
 20656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20657 ;;      Params:         0       0       0       0       0       0       0
 20658 ;;      Locals:         0       0       0       0       0       0       0
 20659 ;;      Temps:         18       0       0       0       0       0       0
 20660 ;;      Totals:        18       0       0       0       0       0       0
 20661 ;;Total ram usage:       18 bytes
 20662 ;; Hardware stack levels used:    1
 20663 ;; Hardware stack levels required when called:    2
 20664 ;; This function calls:
 20665 ;;		_EUSART1_Receive_ISR
 20666 ;;		_EUSART1_Transmit_ISR
 20667 ;;		_MEMORY_ISR
 20668 ;;		_PIN_MANAGER_IOC
 20669 ;;		_TMR0_ISR
 20670 ;; This function is called by:
 20671 ;;		Interrupt level 2
 20672 ;; This function uses a non-reentrant model
 20673 ;;
 20674                           
 20675                           	psect	intcode
 20676  000008                     __pintcode:
 20677                           	opt stack 0
 20678  000008                     _INTERRUPT_InterruptManager:
 20679                           	opt stack 20
 20680                           
 20681                           ;incstack = 0
 20682  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20683  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 20684  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 20685  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 20686  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 20687  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 20688  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 20689  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 20690  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 20691  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 20692  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 20693  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 20694  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 20695  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 20696  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 20697  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 20698  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 20699  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 20700  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 20701                           
 20702                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 20703  000052  B6F2               	btfsc	intcon,3,c	;volatile
 20704  000054  A0F2               	btfss	intcon,0,c	;volatile
 20705  000056  D003               	goto	i2l909
 20706                           
 20707                           ;interrupt_manager.c: 61: {
 20708                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 20709  000058  ECCD  F022         	call	_PIN_MANAGER_IOC	;wreg free
 20710                           
 20711                           ;interrupt_manager.c: 63: }
 20712  00005C  D019               	goto	i2l918
 20713  00005E                     i2l909:
 20714                           
 20715                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 20716  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 20717  000060  A4F2               	btfss	intcon,2,c	;volatile
 20718  000062  D003               	goto	i2l911
 20719                           
 20720                           ;interrupt_manager.c: 65: {
 20721                           ;interrupt_manager.c: 66: TMR0_ISR();
 20722  000064  ECD8  F019         	call	_TMR0_ISR	;wreg free
 20723                           
 20724                           ;interrupt_manager.c: 67: }
 20725  000068  D013               	goto	i2l918
 20726  00006A                     i2l911:
 20727                           
 20728                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 20729  00006A  ACF2               	btfss	intcon,6,c	;volatile
 20730  00006C  D011               	goto	i2l918
 20731                           
 20732                           ;interrupt_manager.c: 69: {
 20733                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 20734  00006E  B8A0               	btfsc	4000,4,c	;volatile
 20735  000070  A8A1               	btfss	4001,4,c	;volatile
 20736  000072  D003               	goto	i2l914
 20737                           
 20738                           ;interrupt_manager.c: 71: {
 20739                           ;interrupt_manager.c: 72: MEMORY_ISR();
 20740  000074  ECCF  F022         	call	_MEMORY_ISR	;wreg free
 20741                           
 20742                           ;interrupt_manager.c: 73: }
 20743  000078  D00B               	goto	i2l918
 20744  00007A                     i2l914:
 20745                           
 20746                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 20747  00007A  B89D               	btfsc	3997,4,c	;volatile
 20748  00007C  A89E               	btfss	3998,4,c	;volatile
 20749  00007E  D003               	goto	i2l916
 20750                           
 20751                           ;interrupt_manager.c: 75: {
 20752                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 20753  000080  ECF3  F020         	call	_EUSART1_Transmit_ISR	;wreg free
 20754                           
 20755                           ;interrupt_manager.c: 77: }
 20756  000084  D005               	goto	i2l918
 20757  000086                     i2l916:
 20758                           
 20759                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 20760  000086  BA9D               	btfsc	3997,5,c	;volatile
 20761  000088  AA9E               	btfss	3998,5,c	;volatile
 20762  00008A  D002               	goto	i2l918
 20763                           
 20764                           ;interrupt_manager.c: 79: {
 20765                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 20766  00008C  EC5F  F021         	call	_EUSART1_Receive_ISR	;wreg free
 20767  000090                     i2l918:
 20768                           
 20769                           ;interrupt_manager.c: 87: else
 20770                           ;interrupt_manager.c: 88: {
 20771                           
 20772                           ;interrupt_manager.c: 85: }
 20773                           ;interrupt_manager.c: 86: }
 20774                           
 20775                           ;interrupt_manager.c: 82: else
 20776                           ;interrupt_manager.c: 83: {
 20777  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 20778  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 20779  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 20780  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 20781  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 20782  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 20783  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 20784  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 20785  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 20786  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 20787  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 20788  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 20789  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 20790  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 20791  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 20792  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 20793  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 20794  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 20795  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20796  0000DA  0011               	retfie		f
 20797  0000DC                     __end_of_INTERRUPT_InterruptManager:
 20798                           	opt stack 0
 20799                           tosu	equ	0xFFF
 20800                           tosh	equ	0xFFE
 20801                           tosl	equ	0xFFD
 20802                           pclatu	equ	0xFFB
 20803                           pclath	equ	0xFFA
 20804                           tblptru	equ	0xFF8
 20805                           tblptrh	equ	0xFF7
 20806                           tblptrl	equ	0xFF6
 20807                           tablat	equ	0xFF5
 20808                           prodh	equ	0xFF4
 20809                           prodl	equ	0xFF3
 20810                           intcon	equ	0xFF2
 20811                           intcon2	equ	0xFF1
 20812                           indf0	equ	0xFEF
 20813                           postinc0	equ	0xFEE
 20814                           fsr0h	equ	0xFEA
 20815                           fsr0l	equ	0xFE9
 20816                           wreg	equ	0xFE8
 20817                           indf1	equ	0xFE7
 20818                           postdec1	equ	0xFE5
 20819                           fsr1h	equ	0xFE2
 20820                           fsr1l	equ	0xFE1
 20821                           indf2	equ	0xFDF
 20822                           postinc2	equ	0xFDE
 20823                           postdec2	equ	0xFDD
 20824                           fsr2h	equ	0xFDA
 20825                           fsr2l	equ	0xFD9
 20826                           status	equ	0xFD8
 20827                           
 20828 ;; *************** function _TMR0_ISR *****************
 20829 ;; Defined at:
 20830 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 20831 ;; Parameters:    Size  Location     Type
 20832 ;;		None
 20833 ;; Auto vars:     Size  Location     Type
 20834 ;;		None
 20835 ;; Return value:  Size  Location     Type
 20836 ;;                  1    wreg      void 
 20837 ;; Registers used:
 20838 ;;		wreg, status,2, status,0, cstack
 20839 ;; Tracked objects:
 20840 ;;		On entry : 0/0
 20841 ;;		On exit  : 0/0
 20842 ;;		Unchanged: 0/0
 20843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20844 ;;      Params:         0       0       0       0       0       0       0
 20845 ;;      Locals:         0       0       0       0       0       0       0
 20846 ;;      Temps:          0       0       0       0       0       0       0
 20847 ;;      Totals:         0       0       0       0       0       0       0
 20848 ;;Total ram usage:        0 bytes
 20849 ;; Hardware stack levels used:    1
 20850 ;; Hardware stack levels required when called:    1
 20851 ;; This function calls:
 20852 ;;		___lwmod
 20853 ;; This function is called by:
 20854 ;;		_INTERRUPT_InterruptManager
 20855 ;; This function uses a non-reentrant model
 20856 ;;
 20857                           
 20858                           	psect	text94
 20859  0033B0                     __ptext94:
 20860                           	opt stack 0
 20861  0033B0                     _TMR0_ISR:
 20862                           	opt stack 20
 20863                           
 20864                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 20865                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 20866                           
 20867                           ;incstack = 0
 20868  0033B0  94F2               	bcf	intcon,2,c	;volatile
 20869                           
 20870                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 20871  0033B2  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 20872  0033B4  6ED7               	movwf	4055,c	;volatile
 20873                           
 20874                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 20875  0033B6  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 20876                           
 20877                           ;tmr0.c: 146: CountCallBack ++;
 20878  0033BA  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 20879  0033BC  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 20880                           
 20881                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 20882  0033BE  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20883  0033C2  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20884  0033C6  0E00               	movlw	0
 20885  0033C8  6E04               	movwf	___lwmod@divisor+1,c
 20886  0033CA  0E14               	movlw	20
 20887  0033CC  6E03               	movwf	___lwmod@divisor,c
 20888  0033CE  EC40  F020         	call	___lwmod	;wreg free
 20889  0033D2  5001               	movf	?___lwmod,w,c
 20890  0033D4  1002               	iorwf	?___lwmod+1,w,c
 20891  0033D6  A4D8               	btfss	status,2,c
 20892  0033D8  D003               	goto	i2l1142
 20893                           
 20894                           ;tmr0.c: 148: {
 20895                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 20896  0033DA  0E01               	movlw	1
 20897  0033DC  0101               	movlb	1	; () banked
 20898  0033DE  6FEE               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 20899  0033E0                     i2l1142:
 20900                           
 20901                           ;tmr0.c: 150: }
 20902                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 20903                           
 20904                           ; BSR set to: 1
 20905  0033E0  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20906  0033E4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20907  0033E8  0E00               	movlw	0
 20908  0033EA  6E04               	movwf	___lwmod@divisor+1,c
 20909  0033EC  0E32               	movlw	50
 20910  0033EE  6E03               	movwf	___lwmod@divisor,c
 20911  0033F0  EC40  F020         	call	___lwmod	;wreg free
 20912  0033F4  5001               	movf	?___lwmod,w,c
 20913  0033F6  1002               	iorwf	?___lwmod+1,w,c
 20914  0033F8  A4D8               	btfss	status,2,c
 20915  0033FA  D003               	goto	i2l1143
 20916                           
 20917                           ;tmr0.c: 153: {
 20918                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 20919  0033FC  0E01               	movlw	1
 20920  0033FE  0101               	movlb	1	; () banked
 20921  003400  6FED               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 20922  003402                     i2l1143:
 20923                           
 20924                           ;tmr0.c: 155: }
 20925                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 20926                           
 20927                           ; BSR set to: 1
 20928  003402  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20929  003406  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20930  00340A  0E01               	movlw	1
 20931  00340C  6E04               	movwf	___lwmod@divisor+1,c
 20932  00340E  0E2C               	movlw	44
 20933  003410  6E03               	movwf	___lwmod@divisor,c
 20934  003412  EC40  F020         	call	___lwmod	;wreg free
 20935  003416  5001               	movf	?___lwmod,w,c
 20936  003418  1002               	iorwf	?___lwmod+1,w,c
 20937  00341A  A4D8               	btfss	status,2,c
 20938  00341C  D003               	goto	i2l1144
 20939                           
 20940                           ;tmr0.c: 157: {
 20941                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 20942  00341E  0E01               	movlw	1
 20943  003420  0101               	movlb	1	; () banked
 20944  003422  6FEC               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 20945  003424                     i2l1144:
 20946                           
 20947                           ;tmr0.c: 159: }
 20948                           ;tmr0.c: 160: if ((CountCallBack % 200) == 0)
 20949                           
 20950                           ; BSR set to: 1
 20951  003424  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20952  003428  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20953  00342C  0E00               	movlw	0
 20954  00342E  6E04               	movwf	___lwmod@divisor+1,c
 20955  003430  0EC8               	movlw	200
 20956  003432  6E03               	movwf	___lwmod@divisor,c
 20957  003434  EC40  F020         	call	___lwmod	;wreg free
 20958  003438  5001               	movf	?___lwmod,w,c
 20959  00343A  1002               	iorwf	?___lwmod+1,w,c
 20960  00343C  A4D8               	btfss	status,2,c
 20961  00343E  D003               	goto	i2l1145
 20962                           
 20963                           ;tmr0.c: 161: {
 20964                           ;tmr0.c: 162: TimertenSecFlag = 1;
 20965  003440  0E01               	movlw	1
 20966  003442  0101               	movlb	1	; () banked
 20967  003444  6FEB               	movwf	_TimertenSecFlag& (0+255),b	;volatile
 20968  003446                     i2l1145:
 20969                           
 20970                           ;tmr0.c: 163: }
 20971                           ;tmr0.c: 165: CountCallBack %= 300;
 20972                           
 20973                           ; BSR set to: 1
 20974  003446  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 20975  00344A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 20976  00344E  0E01               	movlw	1
 20977  003450  6E04               	movwf	___lwmod@divisor+1,c
 20978  003452  0E2C               	movlw	44
 20979  003454  6E03               	movwf	___lwmod@divisor,c
 20980  003456  EC40  F020         	call	___lwmod	;wreg free
 20981  00345A  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 20982  00345E  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 20983  003462  0012               	return		;funcret
 20984  003464                     __end_of_TMR0_ISR:
 20985                           	opt stack 0
 20986                           tosu	equ	0xFFF
 20987                           tosh	equ	0xFFE
 20988                           tosl	equ	0xFFD
 20989                           pclatu	equ	0xFFB
 20990                           pclath	equ	0xFFA
 20991                           tblptru	equ	0xFF8
 20992                           tblptrh	equ	0xFF7
 20993                           tblptrl	equ	0xFF6
 20994                           tablat	equ	0xFF5
 20995                           prodh	equ	0xFF4
 20996                           prodl	equ	0xFF3
 20997                           intcon	equ	0xFF2
 20998                           intcon2	equ	0xFF1
 20999                           indf0	equ	0xFEF
 21000                           postinc0	equ	0xFEE
 21001                           fsr0h	equ	0xFEA
 21002                           fsr0l	equ	0xFE9
 21003                           wreg	equ	0xFE8
 21004                           indf1	equ	0xFE7
 21005                           postdec1	equ	0xFE5
 21006                           fsr1h	equ	0xFE2
 21007                           fsr1l	equ	0xFE1
 21008                           indf2	equ	0xFDF
 21009                           postinc2	equ	0xFDE
 21010                           postdec2	equ	0xFDD
 21011                           fsr2h	equ	0xFDA
 21012                           fsr2l	equ	0xFD9
 21013                           status	equ	0xFD8
 21014                           
 21015 ;; *************** function ___lwmod *****************
 21016 ;; Defined at:
 21017 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21018 ;; Parameters:    Size  Location     Type
 21019 ;;  dividend        2    0[COMRAM] unsigned int 
 21020 ;;  divisor         2    2[COMRAM] unsigned int 
 21021 ;; Auto vars:     Size  Location     Type
 21022 ;;  counter         1    4[COMRAM] unsigned char 
 21023 ;; Return value:  Size  Location     Type
 21024 ;;                  2    0[COMRAM] unsigned int 
 21025 ;; Registers used:
 21026 ;;		wreg, status,2, status,0
 21027 ;; Tracked objects:
 21028 ;;		On entry : 0/0
 21029 ;;		On exit  : 0/0
 21030 ;;		Unchanged: 0/0
 21031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21032 ;;      Params:         4       0       0       0       0       0       0
 21033 ;;      Locals:         1       0       0       0       0       0       0
 21034 ;;      Temps:          0       0       0       0       0       0       0
 21035 ;;      Totals:         5       0       0       0       0       0       0
 21036 ;;Total ram usage:        5 bytes
 21037 ;; Hardware stack levels used:    1
 21038 ;; This function calls:
 21039 ;;		Nothing
 21040 ;; This function is called by:
 21041 ;;		_TMR0_ISR
 21042 ;; This function uses a non-reentrant model
 21043 ;;
 21044                           
 21045                           	psect	text95
 21046  004080                     __ptext95:
 21047                           	opt stack 0
 21048  004080                     ___lwmod:
 21049                           	opt stack 20
 21050                           
 21051                           ;incstack = 0
 21052  004080  5003               	movf	___lwmod@divisor,w,c
 21053  004082  1004               	iorwf	___lwmod@divisor+1,w,c
 21054  004084  B4D8               	btfsc	status,2,c
 21055  004086  D018               	goto	i2l2189
 21056  004088  0E01               	movlw	1
 21057  00408A  6E05               	movwf	___lwmod@counter,c
 21058  00408C  D004               	goto	i2l2184
 21059  00408E  90D8               	bcf	status,0,c
 21060  004090  3603               	rlcf	___lwmod@divisor,f,c
 21061  004092  3604               	rlcf	___lwmod@divisor+1,f,c
 21062  004094  2A05               	incf	___lwmod@counter,f,c
 21063  004096                     i2l2184:
 21064  004096  AE04               	btfss	___lwmod@divisor+1,7,c
 21065  004098  D7FA               	goto	i2l2185
 21066  00409A                     i2u645_40:
 21067  00409A  5003               	movf	___lwmod@divisor,w,c
 21068  00409C  5C01               	subwf	___lwmod@dividend,w,c
 21069  00409E  5004               	movf	___lwmod@divisor+1,w,c
 21070  0040A0  5802               	subwfb	___lwmod@dividend+1,w,c
 21071  0040A2  A0D8               	btfss	status,0,c
 21072  0040A4  D004               	goto	i2l2188
 21073  0040A6  5003               	movf	___lwmod@divisor,w,c
 21074  0040A8  5E01               	subwf	___lwmod@dividend,f,c
 21075  0040AA  5004               	movf	___lwmod@divisor+1,w,c
 21076  0040AC  5A02               	subwfb	___lwmod@dividend+1,f,c
 21077  0040AE                     i2l2188:
 21078  0040AE  90D8               	bcf	status,0,c
 21079  0040B0  3204               	rrcf	___lwmod@divisor+1,f,c
 21080  0040B2  3203               	rrcf	___lwmod@divisor,f,c
 21081  0040B4  2E05               	decfsz	___lwmod@counter,f,c
 21082  0040B6  D7F1               	goto	i2u645_40
 21083  0040B8                     i2l2189:
 21084  0040B8  C001  F001         	movff	___lwmod@dividend,?___lwmod
 21085  0040BC  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 21086  0040C0  0012               	return		;funcret
 21087  0040C2                     __end_of___lwmod:
 21088                           	opt stack 0
 21089                           tosu	equ	0xFFF
 21090                           tosh	equ	0xFFE
 21091                           tosl	equ	0xFFD
 21092                           pclatu	equ	0xFFB
 21093                           pclath	equ	0xFFA
 21094                           tblptru	equ	0xFF8
 21095                           tblptrh	equ	0xFF7
 21096                           tblptrl	equ	0xFF6
 21097                           tablat	equ	0xFF5
 21098                           prodh	equ	0xFF4
 21099                           prodl	equ	0xFF3
 21100                           intcon	equ	0xFF2
 21101                           intcon2	equ	0xFF1
 21102                           indf0	equ	0xFEF
 21103                           postinc0	equ	0xFEE
 21104                           fsr0h	equ	0xFEA
 21105                           fsr0l	equ	0xFE9
 21106                           wreg	equ	0xFE8
 21107                           indf1	equ	0xFE7
 21108                           postdec1	equ	0xFE5
 21109                           fsr1h	equ	0xFE2
 21110                           fsr1l	equ	0xFE1
 21111                           indf2	equ	0xFDF
 21112                           postinc2	equ	0xFDE
 21113                           postdec2	equ	0xFDD
 21114                           fsr2h	equ	0xFDA
 21115                           fsr2l	equ	0xFD9
 21116                           status	equ	0xFD8
 21117                           
 21118 ;; *************** function _PIN_MANAGER_IOC *****************
 21119 ;; Defined at:
 21120 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 21121 ;; Parameters:    Size  Location     Type
 21122 ;;		None
 21123 ;; Auto vars:     Size  Location     Type
 21124 ;;		None
 21125 ;; Return value:  Size  Location     Type
 21126 ;;                  1    wreg      void 
 21127 ;; Registers used:
 21128 ;;		None
 21129 ;; Tracked objects:
 21130 ;;		On entry : 0/0
 21131 ;;		On exit  : 0/0
 21132 ;;		Unchanged: 0/0
 21133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21134 ;;      Params:         0       0       0       0       0       0       0
 21135 ;;      Locals:         0       0       0       0       0       0       0
 21136 ;;      Temps:          0       0       0       0       0       0       0
 21137 ;;      Totals:         0       0       0       0       0       0       0
 21138 ;;Total ram usage:        0 bytes
 21139 ;; Hardware stack levels used:    1
 21140 ;; This function calls:
 21141 ;;		Nothing
 21142 ;; This function is called by:
 21143 ;;		_INTERRUPT_InterruptManager
 21144 ;; This function uses a non-reentrant model
 21145 ;;
 21146                           
 21147                           	psect	text96
 21148  00459A                     __ptext96:
 21149                           	opt stack 0
 21150  00459A                     _PIN_MANAGER_IOC:
 21151                           	opt stack 21
 21152                           
 21153                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 21154                           
 21155                           ;incstack = 0
 21156  00459A  90F2               	bcf	intcon,0,c	;volatile
 21157  00459C  0012               	return		;funcret
 21158  00459E                     __end_of_PIN_MANAGER_IOC:
 21159                           	opt stack 0
 21160                           tosu	equ	0xFFF
 21161                           tosh	equ	0xFFE
 21162                           tosl	equ	0xFFD
 21163                           pclatu	equ	0xFFB
 21164                           pclath	equ	0xFFA
 21165                           tblptru	equ	0xFF8
 21166                           tblptrh	equ	0xFF7
 21167                           tblptrl	equ	0xFF6
 21168                           tablat	equ	0xFF5
 21169                           prodh	equ	0xFF4
 21170                           prodl	equ	0xFF3
 21171                           intcon	equ	0xFF2
 21172                           intcon2	equ	0xFF1
 21173                           indf0	equ	0xFEF
 21174                           postinc0	equ	0xFEE
 21175                           fsr0h	equ	0xFEA
 21176                           fsr0l	equ	0xFE9
 21177                           wreg	equ	0xFE8
 21178                           indf1	equ	0xFE7
 21179                           postdec1	equ	0xFE5
 21180                           fsr1h	equ	0xFE2
 21181                           fsr1l	equ	0xFE1
 21182                           indf2	equ	0xFDF
 21183                           postinc2	equ	0xFDE
 21184                           postdec2	equ	0xFDD
 21185                           fsr2h	equ	0xFDA
 21186                           fsr2l	equ	0xFD9
 21187                           status	equ	0xFD8
 21188                           
 21189 ;; *************** function _MEMORY_ISR *****************
 21190 ;; Defined at:
 21191 ;;		line 206 in file "mcc_generated_files/memory.c"
 21192 ;; Parameters:    Size  Location     Type
 21193 ;;		None
 21194 ;; Auto vars:     Size  Location     Type
 21195 ;;		None
 21196 ;; Return value:  Size  Location     Type
 21197 ;;                  1    wreg      void 
 21198 ;; Registers used:
 21199 ;;		None
 21200 ;; Tracked objects:
 21201 ;;		On entry : 0/0
 21202 ;;		On exit  : 0/0
 21203 ;;		Unchanged: 0/0
 21204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21205 ;;      Params:         0       0       0       0       0       0       0
 21206 ;;      Locals:         0       0       0       0       0       0       0
 21207 ;;      Temps:          0       0       0       0       0       0       0
 21208 ;;      Totals:         0       0       0       0       0       0       0
 21209 ;;Total ram usage:        0 bytes
 21210 ;; Hardware stack levels used:    1
 21211 ;; This function calls:
 21212 ;;		Nothing
 21213 ;; This function is called by:
 21214 ;;		_INTERRUPT_InterruptManager
 21215 ;; This function uses a non-reentrant model
 21216 ;;
 21217                           
 21218                           	psect	text97
 21219  00459E                     __ptext97:
 21220                           	opt stack 0
 21221  00459E                     _MEMORY_ISR:
 21222                           	opt stack 21
 21223                           
 21224                           ;memory.c: 209: PIR2bits.EEIF = 0;
 21225                           
 21226                           ;incstack = 0
 21227  00459E  98A1               	bcf	4001,4,c	;volatile
 21228  0045A0  0012               	return		;funcret
 21229  0045A2                     __end_of_MEMORY_ISR:
 21230                           	opt stack 0
 21231                           tosu	equ	0xFFF
 21232                           tosh	equ	0xFFE
 21233                           tosl	equ	0xFFD
 21234                           pclatu	equ	0xFFB
 21235                           pclath	equ	0xFFA
 21236                           tblptru	equ	0xFF8
 21237                           tblptrh	equ	0xFF7
 21238                           tblptrl	equ	0xFF6
 21239                           tablat	equ	0xFF5
 21240                           prodh	equ	0xFF4
 21241                           prodl	equ	0xFF3
 21242                           intcon	equ	0xFF2
 21243                           intcon2	equ	0xFF1
 21244                           indf0	equ	0xFEF
 21245                           postinc0	equ	0xFEE
 21246                           fsr0h	equ	0xFEA
 21247                           fsr0l	equ	0xFE9
 21248                           wreg	equ	0xFE8
 21249                           indf1	equ	0xFE7
 21250                           postdec1	equ	0xFE5
 21251                           fsr1h	equ	0xFE2
 21252                           fsr1l	equ	0xFE1
 21253                           indf2	equ	0xFDF
 21254                           postinc2	equ	0xFDE
 21255                           postdec2	equ	0xFDD
 21256                           fsr2h	equ	0xFDA
 21257                           fsr2l	equ	0xFD9
 21258                           status	equ	0xFD8
 21259                           
 21260 ;; *************** function _EUSART1_Transmit_ISR *****************
 21261 ;; Defined at:
 21262 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 21263 ;; Parameters:    Size  Location     Type
 21264 ;;		None
 21265 ;; Auto vars:     Size  Location     Type
 21266 ;;		None
 21267 ;; Return value:  Size  Location     Type
 21268 ;;                  1    wreg      void 
 21269 ;; Registers used:
 21270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21271 ;; Tracked objects:
 21272 ;;		On entry : 0/0
 21273 ;;		On exit  : 0/0
 21274 ;;		Unchanged: 0/0
 21275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21276 ;;      Params:         0       0       0       0       0       0       0
 21277 ;;      Locals:         0       0       0       0       0       0       0
 21278 ;;      Temps:          0       0       0       0       0       0       0
 21279 ;;      Totals:         0       0       0       0       0       0       0
 21280 ;;Total ram usage:        0 bytes
 21281 ;; Hardware stack levels used:    1
 21282 ;; This function calls:
 21283 ;;		Nothing
 21284 ;; This function is called by:
 21285 ;;		_INTERRUPT_InterruptManager
 21286 ;; This function uses a non-reentrant model
 21287 ;;
 21288                           
 21289                           	psect	text98
 21290  0041E6                     __ptext98:
 21291                           	opt stack 0
 21292  0041E6                     _EUSART1_Transmit_ISR:
 21293                           	opt stack 21
 21294                           
 21295                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 21296                           
 21297                           ;incstack = 0
 21298  0041E6  0E46               	movlw	70
 21299  0041E8  0101               	movlb	1	; () banked
 21300  0041EA  61F3               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 21301  0041EC  D012               	goto	i2l980
 21302                           
 21303                           ; BSR set to: 1
 21304                           ;eusart1.c: 186: {
 21305                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 21306  0041EE  503B               	movf	_eusart1TxTail,w,c	;volatile
 21307  0041F0  0D01               	mullw	1
 21308  0041F2  0E00               	movlw	low _eusart1TxBuffer
 21309  0041F4  24F3               	addwf	prodl,w,c
 21310  0041F6  6ED9               	movwf	fsr2l,c
 21311  0041F8  0E02               	movlw	high _eusart1TxBuffer
 21312  0041FA  20F4               	addwfc	prodh,w,c
 21313  0041FC  6EDA               	movwf	fsr2h,c
 21314  0041FE  50DF               	movf	indf2,w,c
 21315  004200  6EAD               	movwf	4013,c	;volatile
 21316                           
 21317                           ; BSR set to: 1
 21318  004202  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 21319                           
 21320                           ; BSR set to: 1
 21321                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 21322  004204  0E45               	movlw	69
 21323  004206  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 21324  004208  D002               	goto	i2l981
 21325                           
 21326                           ; BSR set to: 1
 21327                           ;eusart1.c: 189: {
 21328                           ;eusart1.c: 190: eusart1TxTail = 0;
 21329  00420A  0E00               	movlw	0
 21330  00420C  6E3B               	movwf	_eusart1TxTail,c	;volatile
 21331  00420E                     i2l981:
 21332                           
 21333                           ; BSR set to: 1
 21334                           ;eusart1.c: 191: }
 21335                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 21336                           
 21337                           ; BSR set to: 1
 21338  00420E  2BF3               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 21339                           
 21340                           ;eusart1.c: 193: }
 21341  004210  0012               	return	
 21342  004212                     i2l980:
 21343                           
 21344                           ; BSR set to: 1
 21345                           ;eusart1.c: 194: else
 21346                           ;eusart1.c: 195: {
 21347                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 21348  004212  989D               	bcf	3997,4,c	;volatile
 21349                           
 21350                           ; BSR set to: 1
 21351                           ;eusart1.c: 197: eusart1TxTail = 0;
 21352  004214  0E00               	movlw	0
 21353  004216  6E3B               	movwf	_eusart1TxTail,c	;volatile
 21354                           
 21355                           ;eusart1.c: 198: eusart1TxHead = 0;
 21356  004218  0E00               	movlw	0
 21357  00421A  6E3C               	movwf	_eusart1TxHead,c	;volatile
 21358  00421C  0012               	return	
 21359  00421E                     __end_of_EUSART1_Transmit_ISR:
 21360                           	opt stack 0
 21361                           tosu	equ	0xFFF
 21362                           tosh	equ	0xFFE
 21363                           tosl	equ	0xFFD
 21364                           pclatu	equ	0xFFB
 21365                           pclath	equ	0xFFA
 21366                           tblptru	equ	0xFF8
 21367                           tblptrh	equ	0xFF7
 21368                           tblptrl	equ	0xFF6
 21369                           tablat	equ	0xFF5
 21370                           prodh	equ	0xFF4
 21371                           prodl	equ	0xFF3
 21372                           intcon	equ	0xFF2
 21373                           intcon2	equ	0xFF1
 21374                           indf0	equ	0xFEF
 21375                           postinc0	equ	0xFEE
 21376                           fsr0h	equ	0xFEA
 21377                           fsr0l	equ	0xFE9
 21378                           wreg	equ	0xFE8
 21379                           indf1	equ	0xFE7
 21380                           postdec1	equ	0xFE5
 21381                           fsr1h	equ	0xFE2
 21382                           fsr1l	equ	0xFE1
 21383                           indf2	equ	0xFDF
 21384                           postinc2	equ	0xFDE
 21385                           postdec2	equ	0xFDD
 21386                           fsr2h	equ	0xFDA
 21387                           fsr2l	equ	0xFD9
 21388                           status	equ	0xFD8
 21389                           
 21390 ;; *************** function _EUSART1_Receive_ISR *****************
 21391 ;; Defined at:
 21392 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 21393 ;; Parameters:    Size  Location     Type
 21394 ;;		None
 21395 ;; Auto vars:     Size  Location     Type
 21396 ;;		None
 21397 ;; Return value:  Size  Location     Type
 21398 ;;                  1    wreg      void 
 21399 ;; Registers used:
 21400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21401 ;; Tracked objects:
 21402 ;;		On entry : 0/0
 21403 ;;		On exit  : 0/0
 21404 ;;		Unchanged: 0/0
 21405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21406 ;;      Params:         0       0       0       0       0       0       0
 21407 ;;      Locals:         0       0       0       0       0       0       0
 21408 ;;      Temps:          0       0       0       0       0       0       0
 21409 ;;      Totals:         0       0       0       0       0       0       0
 21410 ;;Total ram usage:        0 bytes
 21411 ;; Hardware stack levels used:    1
 21412 ;; This function calls:
 21413 ;;		Nothing
 21414 ;; This function is called by:
 21415 ;;		_INTERRUPT_InterruptManager
 21416 ;; This function uses a non-reentrant model
 21417 ;;
 21418                           
 21419                           	psect	text99
 21420  0042BE                     __ptext99:
 21421                           	opt stack 0
 21422  0042BE                     _EUSART1_Receive_ISR:
 21423                           	opt stack 21
 21424                           
 21425                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 21426                           
 21427                           ; BSR set to: 1
 21428                           ;incstack = 0
 21429  0042BE  A2AB               	btfss	4011,1,c	;volatile
 21430  0042C0  D002               	goto	i2l986
 21431                           
 21432                           ;eusart1.c: 206: {
 21433                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 21434  0042C2  98AB               	bcf	4011,4,c	;volatile
 21435                           
 21436                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 21437  0042C4  88AB               	bsf	4011,4,c	;volatile
 21438  0042C6                     i2l986:
 21439                           
 21440                           ;eusart1.c: 210: }
 21441                           ;eusart1.c: 212: TXREG1 = RCREG1;
 21442  0042C6  CFAE FFAD          	movff	4014,4013	;volatile
 21443                           
 21444                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 21445  0042CA  503A               	movf	_eusart1RxHead,w,c	;volatile
 21446  0042CC  0D01               	mullw	1
 21447  0042CE  0E46               	movlw	low _eusart1RxBuffer
 21448  0042D0  24F3               	addwf	prodl,w,c
 21449  0042D2  6ED9               	movwf	fsr2l,c
 21450  0042D4  0E02               	movlw	high _eusart1RxBuffer
 21451  0042D6  20F4               	addwfc	prodh,w,c
 21452  0042D8  6EDA               	movwf	fsr2h,c
 21453  0042DA  CFAE FFDF          	movff	4014,indf2	;volatile
 21454  0042DE  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 21455                           
 21456                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 21457  0042E0  0E27               	movlw	39
 21458  0042E2  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 21459  0042E4  D002               	goto	i2l987
 21460                           
 21461                           ;eusart1.c: 217: {
 21462                           ;eusart1.c: 218: eusart1RxHead = 0;
 21463  0042E6  0E00               	movlw	0
 21464  0042E8  6E3A               	movwf	_eusart1RxHead,c	;volatile
 21465  0042EA                     i2l987:
 21466                           
 21467                           ;eusart1.c: 219: }
 21468                           ;eusart1.c: 220: eusart1RxCount++;
 21469  0042EA  0101               	movlb	1	; () banked
 21470  0042EC  2BE7               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 21471                           
 21472                           ; BSR set to: 1
 21473  0042EE  0012               	return		;funcret
 21474  0042F0                     __end_of_EUSART1_Receive_ISR:
 21475                           	opt stack 0
 21476                           tosu	equ	0xFFF
 21477                           tosh	equ	0xFFE
 21478                           tosl	equ	0xFFD
 21479                           pclatu	equ	0xFFB
 21480                           pclath	equ	0xFFA
 21481                           tblptru	equ	0xFF8
 21482                           tblptrh	equ	0xFF7
 21483                           tblptrl	equ	0xFF6
 21484                           tablat	equ	0xFF5
 21485                           prodh	equ	0xFF4
 21486                           prodl	equ	0xFF3
 21487                           intcon	equ	0xFF2
 21488                           intcon2	equ	0xFF1
 21489                           indf0	equ	0xFEF
 21490                           postinc0	equ	0xFEE
 21491                           fsr0h	equ	0xFEA
 21492                           fsr0l	equ	0xFE9
 21493                           wreg	equ	0xFE8
 21494                           indf1	equ	0xFE7
 21495                           postdec1	equ	0xFE5
 21496                           fsr1h	equ	0xFE2
 21497                           fsr1l	equ	0xFE1
 21498                           indf2	equ	0xFDF
 21499                           postinc2	equ	0xFDE
 21500                           postdec2	equ	0xFDD
 21501                           fsr2h	equ	0xFDA
 21502                           fsr2l	equ	0xFD9
 21503                           status	equ	0xFD8
 21504                           tosu	equ	0xFFF
 21505                           tosh	equ	0xFFE
 21506                           tosl	equ	0xFFD
 21507                           pclatu	equ	0xFFB
 21508                           pclath	equ	0xFFA
 21509                           tblptru	equ	0xFF8
 21510                           tblptrh	equ	0xFF7
 21511                           tblptrl	equ	0xFF6
 21512                           tablat	equ	0xFF5
 21513                           prodh	equ	0xFF4
 21514                           prodl	equ	0xFF3
 21515                           intcon	equ	0xFF2
 21516                           intcon2	equ	0xFF1
 21517                           indf0	equ	0xFEF
 21518                           postinc0	equ	0xFEE
 21519                           fsr0h	equ	0xFEA
 21520                           fsr0l	equ	0xFE9
 21521                           wreg	equ	0xFE8
 21522                           indf1	equ	0xFE7
 21523                           postdec1	equ	0xFE5
 21524                           fsr1h	equ	0xFE2
 21525                           fsr1l	equ	0xFE1
 21526                           indf2	equ	0xFDF
 21527                           postinc2	equ	0xFDE
 21528                           postdec2	equ	0xFDD
 21529                           fsr2h	equ	0xFDA
 21530                           fsr2l	equ	0xFD9
 21531                           status	equ	0xFD8
 21532                           
 21533                           	psect	text100
 21534  000000                     __ptext100:
 21535                           	opt stack 0
 21536                           tosu	equ	0xFFF
 21537                           tosh	equ	0xFFE
 21538                           tosl	equ	0xFFD
 21539                           pclatu	equ	0xFFB
 21540                           pclath	equ	0xFFA
 21541                           tblptru	equ	0xFF8
 21542                           tblptrh	equ	0xFF7
 21543                           tblptrl	equ	0xFF6
 21544                           tablat	equ	0xFF5
 21545                           prodh	equ	0xFF4
 21546                           prodl	equ	0xFF3
 21547                           intcon	equ	0xFF2
 21548                           intcon2	equ	0xFF1
 21549                           indf0	equ	0xFEF
 21550                           postinc0	equ	0xFEE
 21551                           fsr0h	equ	0xFEA
 21552                           fsr0l	equ	0xFE9
 21553                           wreg	equ	0xFE8
 21554                           indf1	equ	0xFE7
 21555                           postdec1	equ	0xFE5
 21556                           fsr1h	equ	0xFE2
 21557                           fsr1l	equ	0xFE1
 21558                           indf2	equ	0xFDF
 21559                           postinc2	equ	0xFDE
 21560                           postdec2	equ	0xFDD
 21561                           fsr2h	equ	0xFDA
 21562                           fsr2l	equ	0xFD9
 21563                           status	equ	0xFD8
 21564                           
 21565                           	psect	rparam
 21566  0000                     tosu	equ	0xFFF
 21567                           tosh	equ	0xFFE
 21568                           tosl	equ	0xFFD
 21569                           pclatu	equ	0xFFB
 21570                           pclath	equ	0xFFA
 21571                           tblptru	equ	0xFF8
 21572                           tblptrh	equ	0xFF7
 21573                           tblptrl	equ	0xFF6
 21574                           tablat	equ	0xFF5
 21575                           prodh	equ	0xFF4
 21576                           prodl	equ	0xFF3
 21577                           intcon	equ	0xFF2
 21578                           intcon2	equ	0xFF1
 21579                           indf0	equ	0xFEF
 21580                           postinc0	equ	0xFEE
 21581                           fsr0h	equ	0xFEA
 21582                           fsr0l	equ	0xFE9
 21583                           wreg	equ	0xFE8
 21584                           indf1	equ	0xFE7
 21585                           postdec1	equ	0xFE5
 21586                           fsr1h	equ	0xFE2
 21587                           fsr1l	equ	0xFE1
 21588                           indf2	equ	0xFDF
 21589                           postinc2	equ	0xFDE
 21590                           postdec2	equ	0xFDD
 21591                           fsr2h	equ	0xFDA
 21592                           fsr2l	equ	0xFD9
 21593                           status	equ	0xFD8
 21594                           
 21595                           	psect	temp
 21596  000048                     btemp:
 21597                           	opt stack 0
 21598  000048                     	ds	1
 21599  0000                     int$flags	set	btemp
 21600  0000                     wtemp6	set	btemp+1
 21601                           tosu	equ	0xFFF
 21602                           tosh	equ	0xFFE
 21603                           tosl	equ	0xFFD
 21604                           pclatu	equ	0xFFB
 21605                           pclath	equ	0xFFA
 21606                           tblptru	equ	0xFF8
 21607                           tblptrh	equ	0xFF7
 21608                           tblptrl	equ	0xFF6
 21609                           tablat	equ	0xFF5
 21610                           prodh	equ	0xFF4
 21611                           prodl	equ	0xFF3
 21612                           intcon	equ	0xFF2
 21613                           intcon2	equ	0xFF1
 21614                           indf0	equ	0xFEF
 21615                           postinc0	equ	0xFEE
 21616                           fsr0h	equ	0xFEA
 21617                           fsr0l	equ	0xFE9
 21618                           wreg	equ	0xFE8
 21619                           indf1	equ	0xFE7
 21620                           postdec1	equ	0xFE5
 21621                           fsr1h	equ	0xFE2
 21622                           fsr1l	equ	0xFE1
 21623                           indf2	equ	0xFDF
 21624                           postinc2	equ	0xFDE
 21625                           postdec2	equ	0xFDD
 21626                           fsr2h	equ	0xFDA
 21627                           fsr2l	equ	0xFD9
 21628                           status	equ	0xFD8


Data Sizes:
    Strings     1797
    Constant    295
    Data        20
    BSS         337
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    143     143
    BANK1           256    133     244
    BANK2           256      0     228
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartByte$3958	PTR FTN()void  size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK2[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_69(CODE[22]), STR_68(CODE[15]), STR_67(CODE[22]), STR_66(CODE[13]), 
		 -> STR_65(CODE[13]), STR_64(CODE[23]), STR_63(CODE[10]), STR_62(CODE[24]), 
		 -> STR_61(CODE[36]), STR_60(CODE[24]), STR_59(CODE[36]), STR_58(CODE[22]), 
		 -> STR_57(CODE[22]), STR_56(CODE[15]), STR_55(CODE[22]), STR_54(CODE[13]), 
		 -> STR_53(CODE[13]), STR_52(CODE[23]), STR_51(CODE[10]), STR_50(CODE[24]), 
		 -> STR_49(CODE[36]), STR_48(CODE[24]), STR_47(CODE[59]), STR_46(CODE[22]), 
		 -> STR_43(CODE[4]), STR_42(CODE[73]), STR_41(CODE[37]), STR_40(CODE[38]), 
		 -> STR_39(CODE[86]), STR_38(CODE[53]), STR_37(CODE[46]), STR_36(CODE[29]), 
		 -> STR_35(CODE[101]), STR_34(CODE[86]), STR_33(CODE[61]), STR_32(CODE[62]), 
		 -> STR_31(CODE[45]), STR_30(CODE[74]), STR_29(CODE[25]), STR_28(CODE[79]), 
		 -> STR_27(CODE[75]), STR_26(CODE[46]), STR_25(CODE[61]), STR_24(CODE[66]), 
		 -> STR_23(CODE[23]), STR_22(CODE[31]), STR_20(CODE[20]), STR_18(CODE[20]), 
		 -> STR_16(CODE[18]), STR_15(CODE[20]), STR_14(CODE[31]), STR_10(CODE[11]), 
		 -> STR_8(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_70(CODE[7]), STR_45(CODE[6]), STR_44(CODE[6]), STR_21(CODE[9]), 
		 -> STR_19(CODE[12]), STR_17(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintSystemStatus@dest(COMRAM[50]), PrintHelpScreen@dest(BANK1[50]), 
		 -> SendUartSystemInitMessage@dest(BANK1[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK1[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK2[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK2[20]), rxMsgQueue(BANK2[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 80
		 -> PrintTxStatus@dest(BANK1[80]), PrintRxStatus@dest(BANK1[80]), PrintHelpScreen@dest(BANK1[50]), SendUartSystemInitMessage@dest(BANK1[50]), 
		 -> STR_13(CODE[10]), STR_12(CODE[10]), STR_11(CODE[10]), readUartByte@dest(BANK1[50]), 
		 -> STR_9(CODE[9]), SampleSingleChannel@dest(BANK1[50]), STR_7(CODE[10]), STR_6(CODE[34]), 
		 -> STR_5(CODE[32]), STR_4(CODE[10]), STR_3(CODE[29]), STR_2(CODE[33]), 
		 -> STR_1(CODE[10]), 

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 

    S40$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_45(CODE[6]), 

    txStatistics.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_45(CODE[6]), 

    S25$SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_44(CODE[6]), 

    rxStatistics.SwVersion	PTR unsigned char  size(2) Largest target is 6
		 -> STR_44(CODE[6]), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _CollectTxStatusParams->___lltoft
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _CollectRxStatusParams->___lltoft
    _AdcSingleSample->_UART_Write_Text
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    _UART_Write_Text->_EUSART1_Write
    ___lwtoft->___ftpack
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_ZeroArray
    _ZeroArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftmul->___wmul
    ___ftadd->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartByte
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _PrintTxStatus->_sprintf
    _PrintRxStatus->_sprintf
    _GetIntFromUartData->_strtol
    _PrintHelpScreen->_sprintf
    _SetMcuRunTime->___llmod
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_sprintf
    _sprintf->___llmod
    _scale->___ftmul
    _fround->___ftmul
    ___llmod->_pow
    _SampleAllChannels->_pow
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte
    _GroupTx->_PrintTxStatus
    _GroupRx->_PrintRxStatus

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1253452
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                  _SampleAllChannels
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  650850
                                            140 BANK0      3     3      0
                                             80 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1909
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                             10     8      2  233290
                                            130 BANK0     10     8      2
                    _AdcSingleSample
              _CollectTxStatusParams
                 _GetIntFromUartData
                      _PrintTxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintTxStatus                                       80    80      0   90707
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _CollectTxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                             10     8      2  233290
                                            130 BANK0     10     8      2
                    _AdcSingleSample
              _CollectRxStatusParams
                 _GetIntFromUartData
                      _PrintRxStatus
                           ___awtoft
                            ___fttol
                            ___llmod
                                _pow
 ---------------------------------------------------------------------------------
 (3) _PrintRxStatus                                       80    80      0   90707
                                              0 BANK1     80    80      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _GetIntFromUartData                                  17    13      4    5161
                                              6 BANK0     17    13      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (4) _strtol                                              16    10      6    2453
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (6) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _CollectRxStatusParams                                0     0      0    7269
                           ___lltoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                     10     5      5    6349
                                             30 COMRAM    10     5      5
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   91367
                                            130 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   91203
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0    1672
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   90335
                                              0 BANK1     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 57    57      0  225168
                                              0 BANK1     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             43    36      7   84029
                                             92 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   17030
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   16751
                                             18 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2053
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             29 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             23 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             23 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1672
                                             83 BANK0      9     1      8
                           ___awtoft (ARG)
                            ___fttol (ARG)
                            ___lldiv (ARG)
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    5862
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SampleAllChannels                                    8     8      0  135335
                                             83 BANK0      8     8      0
                  _ADC_GetConversion
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    3644
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  149904
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0   12322
                                             38 BANK0      6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  137582
                                            106 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _StoreIntInEeprom                                     9     2      7    2340
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     339
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     219
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5   11789
                                             39 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                               42    38      4    4464
                                             35 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1909
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   23    19      4  123196
                                             83 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6  116383
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   37652
                                             50 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   60394
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     539
                                             50 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   13654
                                             48 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    1811
                                             25 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1638
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             40 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   18595
                                             46 COMRAM     2     2      0
                                             40 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3582
                                             37 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    8521
                                             43 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6294
                                             40 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5698
                                             28 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     425
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4533
                                             34 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3746
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3625
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      44
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SampleAllChannels
     _ADC_GetConversion
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _frexp
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SetMcuRunTime
     ___llmod
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       _pow (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectRxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintRxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _GroupTx *
       _AdcSingleSample
         _UART_Write_Text
           _EUSART1_Write
       _CollectTxStatusParams
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
       _GetIntFromUartData
         _ZeroArray
           _memset
         _strtol
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _isalpha
             _isupper
           _isdigit
           _isspace
           _toupper
       _PrintTxStatus
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___awtoft (ARG)
               ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv (ARG)
             _pow (ARG)
               ___ftge
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _scale (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _scale (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                       _fround (ARG)
                         ___awdiv
                           ___awmod (ARG)
                         ___awmod
                         ___ftmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___ftpack
                             ___lwtoft (ARG)
                               ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___ftpack
                           ___wmul (ARG)
                             ___awdiv (ARG)
                               ___awmod (ARG)
                             ___awmod (ARG)
                           _frexp (ARG)
                         ___wmul
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                     _fround (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awmod
                       ___ftmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                         _frexp (ARG)
                       ___wmul
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _frexp
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       _pow
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___awtoft (ARG)
           ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         _pow (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _frexp
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      E4      10       89.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100     85      F4       8       95.3%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     8F      8F       6       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2AE       3        0.0%
DATA                 0      0     2AE       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 28 13:04:23 2018

              __end_of_keepAliveSignalLed 44D4                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 01F3                             ___altoft@sign 0030  
                                      l66 3C18                                        l68 3C5E  
                            ___awdiv@sign 0023                       __end_of_BlinkOkLeds 3CBE  
                         _SWSPI_send_word 3512                       ___wmul@multiplicand 0028  
                         _timer0ReloadVal 0046            __size_of_CollectTxStatusParams 0076  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
           __end_of_CollectTxStatusParams 39E8                              ___ftadd@exp1 0087  
                            ___ftadd@exp2 0086                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 0135                              ___ftadd@sign 0085  
                             ?_MEMORY_ISR 0001                                       l140 2AF6  
                                     l302 0E8E                                       l143 2B0C  
                                     l303 0EA4                                       l152 2B5E  
                                     l136 2ADC                                       l321 3A26  
                                     l137 2AD4                                       l305 0EAA  
                                     l322 39F2                                       l154 2B74  
                                     l146 2B22                                       l306 0EEA  
                                     l307 0EB4                                       l156 2B8A  
                                     l148 2B38                                       l165 2266  
                                     l149 2B52                                       l309 0F1A  
                                     l174 228E                                       l166 21D8  
                                     l158 2BA0                                       l167 21F6  
                                     l159 2BBA                                       l263 0F58  
                                     l176 235A                                       l168 2214  
                                     l264 0CCA                                       l177 237C  
                                     l169 2232                                       l281 0D46  
                                     l273 0D0E                                       l178 239E  
                                     l282 0D50                                       l266 0CD6  
                                     l179 23C0                                       l291 0DF8  
                                     l283 0D5A                                       l292 0E34  
                                     l284 0D9A                                       l268 0CEC  
                                     l541 304C                                       l285 0E78  
                                     l277 0D2E                                       l710 3DF0  
                                     l702 35A8                                       l542 3062  
                                     l286 0DA8                                       l278 0D84  
                                     l711 3DFA                                       l607 1E22  
                                     l287 0DE4                                       l279 0D3C  
                                     l800 4120                                       l609 1E90  
                                     l297 0E48                                       l810 4166  
                                     l298 0E64                                       l723 3E66  
                                     l811 413E                                       l724 3E2A  
                                     l708 3E0A                                       l716 3342  
                                     l820 4152                                       l812 4148  
                                     l741 3E52                                       l733 3E3E  
                                     l725 3E34                                       l709 3DD6  
                                     l821 415C                                       l742 3E5C  
                                     l734 3E48                                       l718 3370  
                                     l719 337C                                       l831 4492  
                                     l752 3EBC                                       l832 448A  
                                     l753 3E80                                       l770 3EA8  
                                     l762 3E94                                       l754 3E8A  
                                     l771 3EB2                                       l763 3E9E  
                                     l836 448E                                       l790 4102  
                                     l791 410C                                       l961 400E  
                                     l698 354E                                       l963 4034  
                                     l789 412A                                       l974 40D6  
                                     l799 4116                                       l975 40FA  
                                     l976 40F8                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                         ??_Make32bitsArray 001E  
                        PLLInitialize@idx 0088                                       _exp 1880  
                                     _log 24F6                                       _pow 1F84  
                            _txStatistics 0185                              ___awmod@sign 001D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8            ?_InitSystemApplicationManagers 0001  
                            ___ftdiv@cntr 0060                              ___ftdiv@sign 0065  
                                    l2003 1CCA                                      l2013 1D26  
                                    l2022 1D64                                      l2014 1D1C  
                                    l2023 1D5A                                      l2032 2DE0  
                                    l2008 1D30                                      l2040 23F0  
                                    l2025 1D88                                      l2121 38A4  
                                    l2034 2E08                                      l2026 1DA4  
                                    l2210 1FCE                                      l1082 4278  
                                    l2122 3898                                      l2042 241C  
                                    l2035 2E46                                      l2027 1DD4  
                                    l2211 1FBE                                      l2131 3B58  
                                    l2043 2456                                      l1331 29A4  
                                    l2036 2E6C                                      l1420 3D8E  
                                    l2132 3B4C                                      l2052 24DE  
                                    l2044 247E                                      l1340 274E  
                                    l1324 2A88                                      l2213 1FE6  
                                    l2125 38D8                                      l2053 24D2  
                                    l2142 3D2C                                      l2070 2D6C  
                                    l2214 2070                                      l1422 3DCC  
                                    l2126 38E6                                      l2046 24BA  
                                    l1350 43D2                                      l2143 3D20  
                                    l2071 2D7C                                      l2215 204E  
                                    l2135 3B80                                      l2047 24AA  
                                    l1351 43C6                                      l2064 2CEA  
                                    l2216 20F6                                      l2136 3B8E  
                                    l1440 35DA                                      l1336 283C  
                                    l1328 299A                                      l2081 4056  
                                    l2057 3792                                      l1345 2758  
                                    l1353 43CC                                      l2066 2D12  
                                    l2058 37C2                                      l1434 2968  
                                    l1450 3CC4                                      l2075 441E  
                                    l2067 2D44                                      l1435 288E  
                                    l1451 3CC8                                      l1187 4308  
                                    l2068 2D54                                      l2412 189A  
                                    l1452 3CCC                                      l1428 41A6  
                                    l2093 2C92                                      l2085 2BF6  
                                    l1453 3CFA                                      l1429 417C  
                                    l2094 2C86                                      l2414 18D4  
                                    l2087 2C6E                                      l2423 30A6  
                                    l2415 190E                                      l1447 3CFE  
                                    l1711 0592                                      l1703 0480  
                                    l1631 3BEE                                      l2096 2CAE  
                                    l2088 2C5E                                      l2432 36FA  
                                    l2424 3098                                      l2440 32B6  
                                    l2416 193E                                      l1448 3CC0  
                                    l1720 0732                                      l1712 057C  
                                    l2441 32AA                                      l2417 1A68  
                                    l1721 071C                                      l2353 1AB6  
                                    l2426 30C0                                      l2418 1A3E  
                                    l1714 05B6                                      l2370 1BDA  
                                    l1626 3BB2                                      l2427 313C  
                                    l1723 0776                                      l1715 05BA  
                                    l2363 1B32                                      l2355 1ACE  
                                    l1627 3BCA                                      l2436 323A  
                                    l1660 0AB8                                      l1716 05DC  
                                    l1708 0572                                      l2372 1BFE  
                                    l2364 1B42                                      l1821 3928  
                                    l1661 09DE                                      l1717 0710  
                                    l1709 04DC                                      l2373 1C3A  
                                    l2357 1B22                                      l1629 3BDC  
                                    l1822 391C                                      l2438 3284  
                                    l2198 433A                                      l1654 1382  
                                    l1718 062C                                      l2454 4442  
                                    l2366 1B5C                                      l2199 432A  
                                    l1911 3854                                      l1727 07D6  
                                    l1671 00EC                                      l1744 3EE2  
                                    l1912 385E                                      l1904 3806  
                                    l1920 3A90                                      l1664 0A92  
                                    l1728 086C                                      l1680 0114  
                                    l1672 0106                                      l2464 4460  
                                    l1745 3EF6                                      l1913 386C  
                                    l1905 3816                                      l1921 3A88  
                                    l1657 1452                                      l1665 0BE8  
                                    l1729 07E2                                      l1673 0170  
                                    l2449 436C                                      l2377 4510  
                                    l2369 1B6E                                      l1690 02EE  
                                    l1682 015C                                      l1907 3834  
                                    l1667 0C9C                                      l1683 013E  
                                    l2459 4392                                      l1932 41C2  
                                    l2484 3208                                      l2476 2516  
                                    l1940 26CE                                      l1908 382C  
                                    l1924 3AA8                                      l1692 0314  
                                    l1676 0110                                      l2485 318A  
                                    l1925 3AB2                                      l1917 3A6E  
                                    l1693 0354                                      l1677 01A4  
                                    l2478 253A                                      l1942 270C  
                                    l1926 3AC0                                      l1918 3A7A  
                                    l1686 073C                                      l1694 041A  
                                    l1943 26FC                                      l1687 01F6  
                                    l1936 263E                                      l1697 03C2  
                                    l1689 0288                                      l1938 265C  
                                    l1971 34C0                                      l1939 269E  
                                    l1972 34AA                                      l1948 2730  
                                    l1949 2724                                      l1974 34E8  
                                    l1975 34DE                                      l1968 348C  
                                    l1969 3482                                      l1999 1CA0  
                                    l7243 3C6A                                      ?_exp 0099  
                                    l8037 37EE                                      ?_log 0092  
                                    l8303 432A                                      l9111 0484  
                                    l9215 07E2                                      l9139 057C  
                                    l9091 039C                                      l9083 0354  
                                    l8605 3D7E                                      l9407 3C08  
                                    l9523 3568                                      l9195 077A  
                                    l9277 333A                                      l8549 40C4  
                                    l9527 3576                                      l8913 1A3E  
                                    l9801 1EDA                                      l9549 35CA  
                                    ?_pow 00A2                                      l9567 3612  
                                    l9753 2F8A                                      l9765 304C  
                                    l9791 1E80                                      STR_1 7FCD  
                                    STR_2 7DE0                                      l9777 1E12  
                                    STR_3 7E5D                                      STR_4 7FCD  
                                    l9787 1E6C                                      STR_5 7E01  
                                    STR_6 7DBE                                      STR_7 7FCD  
                                    STR_8 7FF6                                      l9895 2286  
                                    STR_9 7FE0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u4715 4286                                      u4716 4288  
                                    u8021 2BDA                                      u8110 3722  
                                    u8040 2C14                                      u9010 1918  
                                    u8131 2DC6                                      u9020 191A  
                                    u8220 3838                                      u6508 44C8  
                                    u9100 435E                                      u8045 2C0C  
                                    u8118 3724                                      u8151 2DF0  
                                    u8080 2C98                                      u9210 2034  
                                    u6490 44C6                                      u9140 3A1E  
                                    u7630 3474                                      u8350 30B2  
                                    u9150 3A52                                      u8280 3A94  
                                    u9080 438E                                      u7721 1C5E  
                                    u9410 04BC                                      u9330 0326  
                                    u7731 1C72                                      u9147 3A14  
                                    u7820 1CFA                                      u9340 0366  
                                    u9157 3A48                                      u7670 34F2  
                                    u8390 325A                                      u8711 23D4  
                                    u7760 1C92                                      u9520 07B2  
                                    u9440 05A0                                      u9450 05B0  
                                    u9370 039C                                      u9290 022E  
                                    u7931 2CD2                                      u8731 2400  
                                    u7860 1D38                                      u8900 38A8  
                                    u9540 087C                                      u7790 1CBC  
                                    u8398 325E                                      u9630 338E  
                                    u9550 0894                                      u9710 1AF8  
                                    u7951 2CFA                                      u9295 0224  
                                    u9560 3CF2                                      u7890 1D6C  
                                    u8930 3B5C                                      u9730 1B08  
                                    u8860 2736                                      u9565 3CE8  
                                    u8790 24E4                                      u9910 2B4A  
                                    u9680 1ABE                                      u9850 2AE8  
                                    u9970 2BB2                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 40C2  
                 ??_InitAdcApplicationMgr 0018                                      _main 3BA0  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 4596  
                         __end_of_DacInit 3068                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0092  
               SampleSingleChannel@adcRes 0137                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 4558                             _adcSampleMode 01E9  
                            _sprintf$3953 00C9               __end_of_SampleSingleChannel 2278  
                         GroupCommon@data 00E2                              ___ftmul@cntr 0070  
                            ___param_bank 000000                              ___ftmul@sign 0071  
                 __end_of_UART_Write_Text 3A5A                           __end_of_GroupRx 2AAE  
                         __end_of_GroupTx 286E                              ___fttol@exp1 0087  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0083  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 42BE  
                  _ReadIntFromEeprom$3948 00BE                    _ReadIntFromEeprom$3949 00C1  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 454A  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                         __end_of___awdiv 3876                                     _EEADR 000FA9  
                         __end_of___ftadd 1DFA                                     STR_10 7FB8  
                                   STR_11 7FCD                                     STR_12 7FCD  
                                   STR_20 7F49                                     STR_13 7FCD  
                                   STR_21 7FD7                                     STR_22 7E21  
                                   STR_14 7E21                                     STR_30 7AA5  
                                   STR_15 7F35                                     STR_23 7EDB  
                                   STR_31 7CFE                                     STR_16 7F71  
                                   STR_40 7D2B                                     STR_32 7B7A  
                                   STR_24 7B38                                     STR_17 7FF0  
                                   STR_41 7D51                                     STR_33 7BF5  
                                   STR_25 7BB8           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7F5D                                     STR_50 7EAB  
                                   STR_26 7CD0                                     STR_42 7AEF  
                                   STR_34 795F                                     STR_43 7FFB  
                                   STR_51 7FC3                                     STR_19 7FAC  
                                   STR_27 7A5A                                     STR_35 78FA  
                                   STR_60 7E93                                     STR_44 7FF0  
                                   STR_52 7EF2                                     STR_36 7E40  
                                   STR_28 7A0B                           __end_of___awmod 3ACA  
                                   STR_61 7D9A                                     STR_45 7FF0  
                                   STR_53 7F9F                                     STR_29 7E7A  
                                   STR_37 7CA2                                     STR_70 7FE9  
                                   STR_54 7F92                                     STR_46 7F09  
                                   STR_62 7EC3                                     STR_38 7C6D  
                                   STR_63 7FC3                                     STR_55 7F1F  
                                   STR_47 7C32                                     STR_39 79B5  
                                   STR_64 7EF2                                     STR_56 7F83  
                                   STR_48 7E93                                     STR_57 7F09  
                                   STR_65 7F9F                                     STR_49 7D9A  
                                   STR_58 7F09                                     STR_66 7F92  
                                   STR_67 7F1F                                     STR_59 7D76  
                                   STR_68 7F83                                     STR_69 7F09  
                         __end_of___ftdiv 2E9E                           __end_of___ftneg 442C  
                                   u10000 3522                           __end_of___lldiv 38F8  
                                   u10030 35A2                                     u10070 3612  
                                   u10160 1E6C                                     u10400 0DD8  
                              _EepromRead 4578                                     u10180 1EDA  
                         __end_of___ftmul 2DB6                                     _T0CON 000FD5  
                                   u10460 0E28                           ___awdiv@divisor 0020  
                                   u10518 0F2E                                     u10519 0F50  
                                   u10480 0E58                           __end_of___llmod 3BA0  
                         __end_of___ftsub 4080                           __end_of___fttol 2CC0  
                                   u10827 3C20                                     u10837 3C30  
                                   u10847 3C40                                     u10857 3C50  
                                   u10867 3390                                     u10877 3C90  
                                   u10887 3CAA                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 40C2                     _CollectRxStatusParams 3ACA  
                     StoreIntInEeprom@idx 0029                                     i2l911 006A  
                                   i2l914 007A                                     i2l916 0086  
                                   i2l909 005E                                     i2l918 0090  
                                   i2l980 4212                           ___awdiv@counter 0022  
                                   i2l981 420E                                     i2l986 42C6  
                                   i2l987 42EA                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 3DCE  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                        ?_PrintHelpScreen 0001                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 3640                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001E                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 41E6                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 3464                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         _DATAEE_ReadByte 4514                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 459E  
                                   _make8 3CBE                           __end_of_dpowers 7863  
          __size_of_SWSPI_Synth_send_bits 00C2                                     _count 01D6  
                                   _floor 3068                                     _ldexp 3220  
                       PrintRxStatus@dest 0100                                     _frexp 36D2  
                                   _errno 01D0             __end_of_SWSPI_Synth_send_bits 33B0  
                                   _scale 08A2                           __end_of_isalpha 4374  
                         __end_of_isdigit 444A                                     _group 01E5  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                           ??_GroupCommon 0031                           __end_of_isspace 439A  
                          ?_EUSART1_Write 0001                           __end_of_isupper 4468  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AF                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                         __end_of_sprintf 08A2                      ReadIntFromEeprom@idx 00C9  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 4514  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000                               exp@exponent 009F  
                    ?_SWSPI_DAC_send_bits 001A                               ldexp@newexp 0095  
                 __end_of_SWSPI_send_word 35AC                               _BlinkOkLeds 3C60  
                         __initialization 3640                               log@exponent 0095  
              __end_of_EUSART1_Initialize 4254                              __end_of_main 3C00  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0031  
                           ___fttol@sign1 0082                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 01EC                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                      __size_of__tdiv_to_l_ 0132  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 459A  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0090                                    ?_ldexp 0092  
                                  ?_frexp 0018                          __end_of___altoft 3972  
                        ___llmod@dividend 00B3                                    ?_scale 0072  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 00CA  
                                  _EECON2 000FA7                             ?_readUartByte 0001  
                        ___awdiv@dividend 001E                          __end_of___awtoft 41E6  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 3512  
                        __end_of___lltoft 3D76                                    i2l1142 33E0  
                                  i2l1143 3402                                    i2l1144 3424  
                                  i2l1145 3446                                    i2l2184 4096  
                                  i2l2185 408E                                    i2l2188 40AE  
                                  i2l2189 40B8                            __CFG_WDTEN$OFF 000000  
                    StoreIntInEeprom@data 0021                                    _TABLAT 000FF5  
                             _EepromWrite 454A                                    _RCREG1 000FAE  
                        __end_of___lwtoft 4408                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 4486  
                 __size_of_SwSpi_Data_Pin 0056                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                     __end_of_GroupCommon 43E4                                 ??_GroupRx 00E4  
                               ??_GroupTx 00E4                            __CFG_XINST$OFF 000000  
                             GroupRx@data 00E2                          __end_of__powers_ 788A  
                             GroupTx@data 00E2                                    _cState 01E6  
                                  ___ftge 3762                                    ___lmul 3ED2  
               SWSPI_Synth_send_bits@data 0024                                    ___wmul 439A  
                               ??___awdiv 0022                                 ??___ftadd 0082  
               SWSPI_Synth_send_bits@mask 0080                            __CFG_STVREN$ON 000000  
                               ??___awmod 001C                          ?_UART_Write_Text 0019  
                               ??___ftdiv 0029                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 002C  
                   __end_of_PLLInitialize 1F84                                 ??___llmod 0031  
                               ??___ftsub 002F                                 ??___fttol 007D  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                    AdcSingleSample@cType 0028                          ?_TMR0_Initialize 0001  
                                  _memset 4320                                    _fround 1236  
                      __end_of_DAC_ADDRES 78BD                                    clear_0 36A6  
                                  clear_1 36B2                                    clear_2 36BE  
                        ___awdiv@quotient 0024                                    _retNum 01C4  
                         ___awmod@divisor 001A                                    _rxFreq 01CC  
                                  _txFreq 01C8                           ___awmod@counter 001C  
                  ?_CollectRxStatusParams 0001                   __end_of_DATAEE_ReadByte 4528  
                             ?_EepromRead 0001                                    _strtol 1A76  
                                  floor@i 0093                     __end_of_SwSpi_Clk_Pin 3ED2  
                                  floor@x 0090                     ___ftmul@f3_as_product 006D  
                SWSPI_DAC_send_bits@count 001B                              __pdataCOMRAM 0042  
                               ??_isalpha 001B                                 ??_isdigit 0018  
                        __end_of_testLeds 3C60                             ?_SetMcuSystem 0001  
       __end_of_SendUartSystemInitMessage 2F84                              __mediumconst 77D2  
                               ??_isspace 0018                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 00EC                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0044  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 00C3  
                   ReadIntFromEeprom@base 00BA                         PrintTxStatus@dest 0100  
                         _eusart1RxBuffer 0246                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0200                          __end_ofexp@coeff 78DF  
                       _SYSTEM_Initialize 44A2                          __end_oflog@coeff 78FA  
                              __accesstop 0060                   __end_of__initialization 36C4  
                              ___altoft@c 0088                             ZeroArray@size 0022  
                              ___ftadd@f1 007C                                ___ftadd@f2 007F  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008F  
                           ___rparam_used 000001                                ___ftdiv@f1 0023  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0061  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                              ___ftmul@f1 0066                                ___ftmul@f2 0069  
                        ?_SWSPI_send_word 0028                                ___ftsub@f1 0088  
                              ___ftsub@f2 008B                                ___fttol@f1 0079  
                         _Make32bitsArray 3D76                            __pcstackCOMRAM 0001  
                            __pidataBANK1 458E                              __pidataBANK2 4558  
                     ??_SYSTEM_Initialize 001C                     __end_of_PrintRxStatus 1880  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 3D1A                          _DATAEE_WriteByte 4254  
                           __end_of_floor 314A                             __end_of_ldexp 32EE  
                           __end_of_frexp 3762                     __end_of_PrintTxStatus 168A  
                           __end_of_scale 0CC2                    _SwSpi_Set_Synth_Le_Pin 413A  
                              ___lwtoft@c 0020           __end_of_DAC_DEFAULT_INIT_VALUES 78B9  
                    __end_of_EUSART1_Read 403E                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0046  
                  ??_EUSART1_Transmit_ISR 0001                                __div_to_l_ 2620  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0035  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                           _lastAdcFfwrRSSI 01DC  
                      _keepAliveSignalLed 44BC                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 42F0                  __size_of_AdcSingleSample 011A  
                                 ??_make8 001D                           __div_to_l_@exp1 0023  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0097                           __div_to_l_@cntr 0022  
                                 ??_frexp 001D                                   ??_scale 002F  
               __end_of_SYSTEM_Initialize 44BC                           __div_to_l_@quot 001E  
                           _eusart1RxHead 003A                       PrintHelpScreen@dest 0100  
                           _eusart1TxHead 003C                             _eusart1RxTail 0039  
                              __pbssBANK1 0185                                __pbssBANK2 0200  
                             _GroupCommon 43C0                             _eusart1TxTail 003B  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 78BD  
                              _channelNum 0037                                __pnvCOMRAM 0046  
          __size_of_InitAdcApplicationMgr 0008                             __div_to_l_@f1 0018  
                           __div_to_l_@f2 001B             __end_of_InitAdcApplicationMgr 458A  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 45A2  
         ??_InitSystemApplicationManagers 0031                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018          __end_of_TMR0_SetInterruptHandler 4578  
                                 ?___lmul 001A                                   ?___wmul 0026  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 4486  
                               ?___altoft 0088                                   ?_memset 0018  
                       _ReadIntFromEeprom 286E                                   ?_fround 0072  
                          ___lmul@product 0022                                 ?___awtoft 0020  
                               ?___ftpack 0018                                 ?___lltoft 0020  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0020  
                      ?_ReadIntFromEeprom 00B3                                   ?_strtol 0026  
                        ?_DATAEE_ReadByte 0001                     _CollectTxStatusParams 3972  
             SampleAllChannels@_adcResult 00B6                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 0182  
                 SampleSingleChannel@dest 0100                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                       ??_ReadIntFromEeprom 00B7  
                                 _DacInit 2F84                     GetIntFromUartData@idx 0075  
                          _SwSpi_Data_Pin 3E26                      DATAEE_WriteByte@bAdd 0019  
                 __end_of_Make32bitsArray 3DCE                             _SetMcuRunTime 3F70  
                      _GetIntFromUartData 35AC                           __CFG_PWRTEN$OFF 000000  
                                 _GroupRx 2994                                   _GroupTx 2748  
                       __end_of__npowers_ 78B1                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                _scale$3952 0075  
                                 __Lparam 0000                                 ?_testLeds 0001  
                    PLLInitialize@idx_943 008A                 __end_of_ReadIntFromEeprom 2994  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                                 ___awdiv 37F2                           __size_of___lmul 0056  
                                 ___ftadd 1C4C                                   ___awmod 3A5A  
                                 ___ftdiv 2DB6                      __end_of_readUartByte 0F8C  
                                 ___ftneg 4408                                   ___lldiv 3876  
                         __size_of___wmul 0026                                   ___ftmul 2CC0  
                                 ___llmod 3B38                                   ___ftsub 403E  
                                 ___fttol 2BC8                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 4080                                ??___altoft 008C  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 01C0  
                                 _crcCalc 01E2                                   _channel 01E8  
                                 __pcinit 3640                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 3220  
                         __size_of_memset 002C                           __size_of_fround 025E  
                                 __ramtop 0600              __size_of_SampleSingleChannel 0174  
                              ??___lltoft 0024                                   __ptext0 3BA0  
                                 __ptext1 0CC2                                   __ptext2 3FB6  
                                 __ptext3 43C0                                   __ptext4 2994  
                                 __ptext5 2748                                   __ptext6 1494  
                                 __ptext7 3972                                   __ptext8 168A  
                                 __ptext9 35AC                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                               ?__div_to_l_ 0018  
                         __size_of_strtol 01D6                                   _dpowers 783B  
                   AdcSingleSample@chType 001F                     _OSCILLATOR_Initialize 453C  
                                 _isalpha 434C                              __size_of_exp 01F6  
                            __size_of_log 012A                                   _isdigit 442C  
                            __size_of_pow 0180               ??_SendUartSystemInitMessage 0031  
                        ___awmod@dividend 0018                        _EUSART1_Initialize 421E  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 4374  
               StoreIntInEeprom@numOfByes 0026                                   _isupper 444A  
                   AdcSingleSample@retNum 0024                                   _request 01E4  
                    ??_GetIntFromUartData 006A                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 00E0  
                  __end_of_SwSpi_Data_Pin 3E7C                   StoreIntInEeprom@address 0025  
                                 _toupper 4500                      end_of_initialization 36C4  
                                 exp@sign 00A1                       ?_EUSART1_Initialize 0001  
                            ?_EepromWrite 001B                     _SWSPI_Synth_send_bits 32EE  
              __end_of_TEST_PLL_REGISTERS 7807                  __size_of_PrintHelpScreen 02AA  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 77D2  
                       ??_AdcSingleSample 0024                           ___lldiv@divisor 001C  
                              _numSamples 01D4                      __end_of_SetMcuSystem 456E  
                                 pow@sign 00AE                           ___lldiv@counter 0024  
                       readUartByte@chRec 0184                                ??_testLeds 0018  
                    SWSPI_send_word@datac 002D                                _rxMsgQueue 02C2  
                                 postdec1 000FE5                                   postdec2 000FDD  
              __end_of_PLL_INIT_REGISTERS 783B                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 3FB6                   ??_CollectRxStatusParams 0029  
                             testLeds@idx 0019                            __tdiv_to_l_@f1 0018  
                          __tdiv_to_l_@f2 001B                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 4500    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 44EA                             ??__tdiv_to_l_ 001E  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0026                  _TMR0_SetInterruptHandler 456E  
                               _PORTBbits 000F81                                 _PORTDbits 000F83  
                            ??_EepromRead 0019                          _StoreIntInEeprom 4176  
                  ?_CollectTxStatusParams 0001                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 44A2                              strtol@endptr 0028  
                    ?_InitRxMessageParams 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                  __end_of_DATAEE_WriteByte 428A  
             __end_of_SWSPI_DAC_send_bits 3E26             SendUartSystemInitMessage@dest 0100  
                        ?_Make32bitsArray 0018                               ___ftdiv@exp 0064  
                            _EUSART1_Read 3FFA                 _SendUartSystemInitMessage 2E9E  
                 SampleAllChannels@adcRes 00B8                       __size_of__div_to_l_ 0128  
                      __end_of_EepromRead 4582                               ___ftmul@exp 006C  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                              _needToSample 01EA  
              __size_of_ReadIntFromEeprom 0126                              _lastAdcVgMon 01D8  
            __end_of_INTERRUPT_Initialize 4596                            __end_of___ftge 37F2  
                          __end_of___lmul 3F28                        GroupCommon@request 00E4  
                          __end_of___wmul 43C0                             __pidataCOMRAM 458A  
                       __size_of_TMR0_ISR 00B4                            _ADC_Initialize 44D4  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 434C  
                          __end_of_fround 1494                 AdcSingleSample@numSamples 0020  
                       _SampleAllChannels 2278                                floor@expon 0096  
                __size_of_UART_Write_Text 0072                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 1C4C                        ?_SampleAllChannels 0001  
                     start_initialization 3640                                eval_poly@d 008B  
                              eval_poly@n 008D                                eval_poly@x 0088  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 0092           __size_of_PIN_MANAGER_Initialize 0048  
                     __end_of__tdiv_to_l_ 24F6                     ??_InitRxMessageParams 0024  
                             __end_of_exp 1A76                               __end_of_log 2620  
                             __end_of_pow 2104                    ?_SWSPI_Synth_send_bits 0024  
                         ??_SetMcuRunTime 0031                              ?_GroupCommon 00E2  
                   __end_of_EUSART1_Write 40FE                       ??_SampleAllChannels 0031  
                  __size_of_PLLInitialize 018A                                frexp@value 0018  
                         ___llmod@divisor 00B7                           ___llmod@counter 00BB  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 02CA                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 4176                         ??_PrintHelpScreen 0031  
                                ??___ftge 001E                                  ??___lmul 0022  
                                ??___wmul 002A                      __size_of_BlinkOkLeds 005E  
                  __end_of_ADC_Initialize 44EA                               __pdataBANK1 01EF  
                             __pdataBANK2 02D6                   SWSPI_DAC_send_bits@data 001A  
                          GroupRx@request 00EB                              _GroupRx$3944 00E5  
                            _GroupRx$3945 00E8                 __end_of_SampleAllChannels 23C4  
                                ??_memset 001E                                  ??_fround 002F  
                            _GroupTx$3946 00E5                              _GroupTx$3947 00E8  
                           sprintf@tmpval 00DA                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002C                            _eusart1RxCount 01E7  
                       __size_of___altoft 007A                                fround@prec 007B  
                               _ZeroArray 4468                           DacInit@dacInput 00CC  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                          GroupTx@request 00EB                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 0100                              _isalpha$3611 001C  
                            _isdigit$3614 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 0CC2  
                  __size_of_PrintRxStatus 01F6                    __size_of_PrintTxStatus 01F6  
                   __size_of_SetMcuSystem 000A                          _SwSpi_Set_CE_Pin 40FE  
                     _SampleSingleChannel 2104              __size_of_EUSART1_Receive_ISR 0032  
           SWSPI_Synth_send_bits@bitArray 0060                               sprintf@flag 00D0  
                             sprintf@fval 00DE                               sprintf@prec 00D2  
                 _DAC_DEFAULT_INIT_VALUES 78B1                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 02E2                                 __pnvBANK1 01F3  
                               __pnvBANK2 02E2                  __size_of_TMR0_StartTimer 0004  
                                ?_GroupRx 00E2                                  ?_GroupTx 00E2  
                  _PIN_MANAGER_Initialize 3F28                     _InitAdcApplicationMgr 4582  
                               __pintcode 0008                             __pmediumconst 77D2  
                                ?___awdiv 001E                                 __ptext100 0000  
                                ?___ftadd 007C                                  ?___awmod 0018  
                                ?___ftdiv 0023                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0066  
                                ?___llmod 00B3                                  ?___ftsub 0088  
                               __npowers_ 788A                                  ?___fttol 0079  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                       __size_of_testLeds 0060                             _PLLInitialize 1DFA  
             __size_of_keepAliveSignalLed 0018                      ?_SampleSingleChannel 0001  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                             __tdiv_to_l_ 23C4                              ??__div_to_l_ 001E  
                              ?_ZeroArray 0020                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 3E7C                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 314A  
                         _TimerOneSecFlag 01EE                                  ?_isspace 0001  
                         _AdcSingleSample 2AAE                              _SetMcuSystem 4564  
                                ?_isupper 0001                            __size_of_make8 005C  
                                ?_sprintf 00BC                            __size_of_floor 00E2  
                          __size_of_ldexp 00CE                            __size_of_frexp 0090  
                          __size_of_scale 0420                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                         ??_UART_Write_Text 001B  
                    _INTERRUPT_Initialize 4592                         ??_TMR0_Initialize 001A  
                          ___wmul@product 002A                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                  __end_of_StoreIntInEeprom 41AE  
                  _SampleAllChannels$3937 00B3                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                _PIR1bits 000F9E                        __end_of__div_to_l_ 2748  
                                _PIR2bits 000FA1                                 _rxMsgData 02AE  
                                i2u645_40 409A                          readUartByte@dest 0150  
                     SWSPI_send_word@data 0028                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 33B0                        _TEST_PLL_REGISTERS 77D3  
                          ?_PLLInitialize 0001                             _PrintRxStatus 168A  
                       ??_PIN_MANAGER_IOC 0001                   ??_CollectTxStatusParams 0029  
                   ??_SampleSingleChannel 0031                __size_of_SampleAllChannels 014C  
          __size_of_CollectRxStatusParams 006E        __size_of_SendUartSystemInitMessage 00E6  
                           _PrintTxStatus 1494             __end_of_CollectRxStatusParams 3B38  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 002C  
                              _ADCON0bits 000FC2                         ___wmul@multiplier 0026  
                          ?_SwSpi_Clk_Pin 0018                        __end_of_channelArr 78C1  
                        ??_SwSpi_Data_Pin 0019                                ?_eval_poly 0088  
                      _PLL_INIT_REGISTERS 7807                               _lastAdcRREV 01DA  
                   DATAEE_WriteByte@bData 0018                              _isspace$3617 0019  
                             _lastAdcTemp 01DE                         ??_SWSPI_send_word 002D  
                              DacInit@idx 00CE                                _DAC_ADDRES 78B9  
             __size_of_GetIntFromUartData 0094                         ___lmul@multiplier 001A  
                             _INTCON2bits 000FF1                                 copy_data0 3654  
                               copy_data1 3674                                 copy_data2 3694  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 00E4  
                       ?_DATAEE_WriteByte 0018                  _SampleSingleChannel$3936 0132  
                   EUSART1_Read@readValue 0019                      __size_of_GroupCommon 0024  
                      ??_DATAEE_WriteByte 0019                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                          __size_of_GroupRx 011A  
                        __size_of_GroupTx 0126                               _readAddress 01EF  
                                __Lrparam 0000                         _ADC_GetConversion 42F0  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 4528  
                       __CFG_P2BMX$PORTD2 000000                            ?_PrintRxStatus 0001  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                            ?_PrintTxStatus 0001  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AE  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 38F8  
                        __size_of___ftmul 00F6                          __size_of___llmod 0068  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                   __end_of_AdcSingleSample 2BC8  
                        __size_of___lwmod 0042                                  ___awtoft 41AE  
                                ___ftpack 3464                          _numOfReadSamples 003E  
                             _fround$3950 0078                               _fround$3951 0075  
                                ___lltoft 3D1A                                  ___lwtoft 43E4  
                             ??_ZeroArray 0024                       ??_ADC_GetConversion 001A  
                            _isupper$3620 0019                                  _exp$3956 009C  
                              sprintf@exp 00D8                                sprintf@val 00D4  
                                _dataSize 01E3                     SwSpi_Clk_Pin@cPinMode 0018  
                        __size_of_isalpha 0028                                  _crcGiven 01E1  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0028  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                                __ptext10 1A76                                  __ptext11 4500  
                                __ptext20 3FFA                                  __ptext12 4374  
                                __ptext21 44BC                                  __ptext13 442C  
                                __ptext30 44D4                                  __ptext22 4564  
                                __ptext14 434C                                  __ptext31 3F70  
                                __ptext23 44A2                                  __ptext15 444A  
                                __ptext40 2620                                  __ptext32 2E9E  
                                __ptext24 428A                                  __ptext16 3ACA  
                                __ptext41 3B38                                  __ptext33 2104  
                                __ptext25 456E                                  __ptext17 2AAE  
                                __ptext50 1DFA                                  __ptext42 3876  
                                __ptext34 00E0                                  __ptext26 3F28  
                                __ptext18 3C00                                  __ptext51 40FE  
                                __ptext43 39E8                                  __ptext35 08A2  
                                __ptext27 453C                                  __ptext19 0F8C  
                                __ptext60 4486                                  __ptext52 4582  
                                __ptext44 40C2                                  __ptext36 1236  
                                __ptext28 4592                                  __ptext61 32EE  
                                __ptext53 2F84                                  __ptext45 2278  
                                __ptext37 3A5A                                  __ptext29 421E  
                                __ptext70 24F6                                  __ptext62 4468  
                                __ptext54 4176                                  __ptext46 43E4  
                                __ptext38 37F2                                  __ptext71 1880  
                                __ptext63 4320                                  __ptext55 454A  
                                __ptext47 42F0                                  __ptext39 23C4  
                                __ptext80 2CC0                                  __ptext72 3220  
                                __ptext64 3D76                                  __ptext56 4254  
                                __ptext48 44EA                                  __ptext81 403E  
                                __ptext73 3068                                  __ptext65 3DCE  
                                __ptext57 3512                                  __ptext49 4596  
                                __ptext90 4514                                  __ptext82 1C4C  
                                __ptext74 36D2                                  __ptext66 3E26  
                                __ptext58 3CBE                                  __ptext91 4528  
                                __ptext83 4408                                  __ptext75 2BC8  
                                __ptext67 3E7C                                  __ptext59 413A  
                                __ptext92 3C60                                  __ptext84 2DB6  
                                __ptext76 3762                                  __ptext68 286E  
                                __ptext85 41AE                                  __ptext77 38F8  
                                __ptext69 1F84                                  __ptext94 33B0  
                                __ptext86 3D1A                                  __ptext78 314A  
                                __ptext95 4080                                  __ptext87 3464  
                                __ptext79 439A                                  __ptext96 459A  
                                __ptext88 3ED2                                  __ptext97 459E  
                                __ptext89 4578                                  __ptext98 41E6  
                                __ptext99 42BE                          __size_of_isupper 001E  
                                __powers_ 7863              SWSPI_Synth_send_bits@phrType 0085  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3954 00A8  
                                _pow$3955 00AB                       GetIntFromUartData@c 0074  
                         _PrintHelpScreen 0F8C                          __size_of_sprintf 07C2  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 0060  
                                _msgCount 01E0              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 4320  
                      SampleAllChannels@i 00BA              __size_of_SWSPI_DAC_send_bits 0058  
                     Make32bitsArray@data 001A                        SWSPI_send_word@idx 002E  
                             _groupsArray 02D6                           ??_PLLInitialize 0086  
                                _testLeds 3C00                                  int$flags 0048  
                __size_of_Make32bitsArray 0058                                strtol@base 002A  
                              strtol@sign 0060        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           EepromWrite@data 001B  
                         ??_SwSpi_Clk_Pin 0019                       _EUSART1_Receive_ISR 42BE  
                __end_of_SwSpi_Set_CE_Pin 413A               __end_of_InitRxMessageParams 3FFA  
                                exp@coeff 78C1                                _MEMORY_ISR 459E  
                                log@coeff 78DF                    SWSPI_send_word@phrType 0030  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                             _sampleArray 026E                               _sampleCount 01D2  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                                scale@scl 0078                                  intlevel2 0000  
                               sprintf@ap 00CE                                 sprintf@cp 00CC  
                        __tdiv_to_l_@exp1 0026                          __tdiv_to_l_@cntr 0025  
                               sprintf@sp 00BC                          __tdiv_to_l_@quot 0021  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 3FB6  
                        ___lwmod@dividend 0001                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 453C                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 00C4  
            __end_of_EUSART1_Transmit_ISR 421E                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                           ??_PrintRxStatus 0031  
                      Make32bitsArray@idx 0020                         _TimerSamplingFlag 01ED  
                         ??_PrintTxStatus 0031                             _isReWriteDone 003D  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                          ?_AdcSingleSample 001F  
                  __size_of_EUSART1_Write 003C                              ?__tdiv_to_l_ 0018  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 39E8  
                                sprintf@c 00E1                                  sprintf@f 00BE  
                       EepromRead@address 0019                              _rxStatistics 01A3  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 428A                   __end_of_PrintHelpScreen 1236  
                         ___lwmod@counter 0005                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 00B3                         __CFG_T3CMX$PORTC0 000000  
                 ReadIntFromEeprom@retVal 00C5                             ??_EepromWrite 001C  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 3F70  
                        UART_Write_Text@i 001D              GetIntFromUartData@dataRegArr 006C  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 459A  
                         _TimertenSecFlag 01EB                         ?_StoreIntInEeprom 0021  
              __size_of_ADC_GetConversion 0030                        ??_StoreIntInEeprom 0028  
