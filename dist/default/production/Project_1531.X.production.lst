

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 20 12:29:11 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   127                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   128  0000                     
   129                           ; Version 1.45
   130                           ; Generated 16/11/2017 GMT
   131                           ; 
   132                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   133                           ; All rights reserved.
   134                           ; 
   135                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   136                           ; 
   137                           ; Redistribution and use in source and binary forms, with or without modification, are
   138                           ; permitted provided that the following conditions are met:
   139                           ; 
   140                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   141                           ;        conditions and the following disclaimer.
   142                           ; 
   143                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   144                           ;        of conditions and the following disclaimer in the documentation and/or other
   145                           ;        materials provided with the distribution.
   146                           ; 
   147                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   148                           ;        software without specific prior written permission.
   149                           ; 
   150                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   151                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   152                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   153                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   154                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   155                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   156                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   157                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   158                           ; 
   159                           ; 
   160                           ; Code-generator required, PIC18F45K22 Definitions
   161                           ; 
   162                           ; SFR Addresses
   163  0000                     
   164 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   165  0000                     
   166                           	psect	idataCOMRAM
   167  003276                     __pidataCOMRAM:
   168                           	opt stack 0
   169                           
   170                           ;initializer for _writeAddress
   171  003276  4000               	dw	16384
   172  003278  0000               	dw	0
   173                           
   174                           	psect	idataBANK0
   175  0031C0                     __pidataBANK0:
   176                           	opt stack 0
   177                           
   178                           ;initializer for _groupsArray
   179  0031C0  04                 	db	low _GroupControlMcu
   180  0031C1  2C                 	db	high _GroupControlMcu
   181  0031C2  BC                 	db	low _GroupStatusAndVersion
   182  0031C3  27                 	db	high _GroupStatusAndVersion
   183  0031C4  A0                 	db	low _GroupAdc
   184  0031C5  29                 	db	high _GroupAdc
   185  0031C6  C4                 	db	low _GroupSynthesizers
   186  0031C7  2D                 	db	high _GroupSynthesizers
   187  0031C8  30                 	db	low _GroupFlashMemory
   188  0031C9  2A                 	db	high _GroupFlashMemory
   189  0031CA  54                 	db	low _GroupDAC
   190  0031CB  30                 	db	high _GroupDAC
   191                           
   192                           ;initializer for _readAddress
   193  0031CC  4000               	dw	16384
   194  0031CE  0000               	dw	0
   195                           
   196                           	psect	smallconst
   197  000600                     __psmallconst:
   198                           	opt stack 0
   199  000600  00                 	db	0
   200  000601                     _PLL_REGISTERS:
   201                           	opt stack 0
   202  000601  6002               	dw	24578
   203  000603  000B               	dw	11
   204  000605  0000               	dw	0
   205  000607  0000               	dw	0
   206  000609  0021               	dw	33
   207  00060B  0000               	dw	0
   208  00060D  0003               	dw	3
   209  00060F  0000               	dw	0
   210  000611  0023               	dw	35
   211  000613  48B8               	dw	18616
   212  000615  0008               	dw	8
   213  000617  0052               	dw	82
   214  000619  1053               	dw	4179
   215  00061B  6702               	dw	26370
   216  00061D  2345               	dw	9029
   217  00061F  0001               	dw	1
   218  000621  2345               	dw	9029
   219  000623  0001               	dw	1
   220  000625  2345               	dw	9029
   221  000627  0001               	dw	1
   222  000629  2345               	dw	9029
   223  00062B  0001               	dw	1
   224  00062D  2345               	dw	9029
   225  00062F  0001               	dw	1
   226  000631                     __end_of_PLL_REGISTERS:
   227                           	opt stack 0
   228  000631                     _channelArr:
   229                           	opt stack 0
   230  000631  07                 	db	7
   231  000632  06                 	db	6
   232  000633  05                 	db	5
   233  000634  04                 	db	4
   234  000635  19                 	db	25
   235  000636  0A                 	db	10
   236  000637  0D                 	db	13
   237  000638                     __end_of_channelArr:
   238                           	opt stack 0
   239  000638                     exp@coeff:
   240                           	opt stack 0
   241  000638  00                 	db	0
   242  000639  80                 	db	128
   243  00063A  3F                 	db	63
   244  00063B  72                 	db	114
   245  00063C  31                 	db	49
   246  00063D  3F                 	db	63
   247  00063E  FE                 	db	254
   248  00063F  75                 	db	117
   249  000640  3E                 	db	62
   250  000641  58                 	db	88
   251  000642  63                 	db	99
   252  000643  3D                 	db	61
   253  000644  95                 	db	149
   254  000645  1D                 	db	29
   255  000646  3C                 	db	60
   256  000647  C5                 	db	197
   257  000648  AE                 	db	174
   258  000649  3A                 	db	58
   259  00064A  79                 	db	121
   260  00064B  21                 	db	33
   261  00064C  39                 	db	57
   262  00064D  94                 	db	148
   263  00064E  80                 	db	128
   264  00064F  37                 	db	55
   265  000650  93                 	db	147
   266  000651  A7                 	db	167
   267  000652  35                 	db	53
   268  000653  56                 	db	86
   269  000654  15                 	db	21
   270  000655  34                 	db	52
   271  000656                     __end_ofexp@coeff:
   272                           	opt stack 0
   273  000656                     log@coeff:
   274                           	opt stack 0
   275  000656  00                 	db	0
   276  000657  00                 	db	0
   277  000658  00                 	db	0
   278  000659  00                 	db	0
   279  00065A  80                 	db	128
   280  00065B  3F                 	db	63
   281  00065C  F0                 	db	240
   282  00065D  FF                 	db	255
   283  00065E  BE                 	db	190
   284  00065F  E2                 	db	226
   285  000660  A9                 	db	169
   286  000661  3E                 	db	62
   287  000662  83                 	db	131
   288  000663  76                 	db	118
   289  000664  BE                 	db	190
   290  000665  AE                 	db	174
   291  000666  2B                 	db	43
   292  000667  3E                 	db	62
   293  000668  3C                 	db	60
   294  000669  C3                 	db	195
   295  00066A  BD                 	db	189
   296  00066B  D2                 	db	210
   297  00066C  13                 	db	19
   298  00066D  3D                 	db	61
   299  00066E  78                 	db	120
   300  00066F  D3                 	db	211
   301  000670  BB                 	db	187
   302  000671                     __end_oflog@coeff:
   303                           	opt stack 0
   304  000671  00                 	db	0	; dummy byte at the end
   305  0000                     
   306                           	psect	nvCOMRAM
   307  000046                     __pnvCOMRAM:
   308                           	opt stack 0
   309  000046                     _timer0ReloadVal:
   310                           	opt stack 0
   311  000046                     	ds	2
   312                           
   313                           	psect	nvBANK0
   314  0000FA                     __pnvBANK0:
   315                           	opt stack 0
   316  0000FA                     _TMR0_InterruptHandler:
   317                           	opt stack 0
   318  0000FA                     	ds	2
   319  0000FC                     _cnt:
   320                           	opt stack 0
   321  0000FC                     	ds	2
   322  0000FE                     _eusart1TxBufferRemaining:
   323                           	opt stack 0
   324  0000FE                     	ds	1
   325  0000                     _ANSELE	set	3900
   326  0000                     _ANSELB	set	3897
   327  0000                     _ANSELC	set	3898
   328  0000                     _ANSELD	set	3899
   329  0000                     _ANSELA	set	3896
   330  0000                     _ADCON0bits	set	4034
   331  0000                     _ADRESH	set	4036
   332  0000                     _ADRESL	set	4035
   333  0000                     _ADCON2	set	4032
   334  0000                     _ADCON1	set	4033
   335  0000                     _ADCON0	set	4034
   336  0000                     _T0CONbits	set	4053
   337  0000                     _T0CON	set	4053
   338  0000                     _TMR0L	set	4054
   339  0000                     _TMR0H	set	4055
   340  0000                     _EEDATA	set	4008
   341  0000                     _EEADR	set	4009
   342  0000                     _EECON2	set	4007
   343  0000                     _EECON1bits	set	4006
   344  0000                     _TABLAT	set	4085
   345  0000                     _TBLPTRL	set	4086
   346  0000                     _TBLPTRH	set	4087
   347  0000                     _TBLPTRU	set	4088
   348  0000                     _INTCON2bits	set	4081
   349  0000                     _WPUB	set	3937
   350  0000                     _TRISC	set	3988
   351  0000                     _TRISB	set	3987
   352  0000                     _TRISE	set	3990
   353  0000                     _LATC	set	3979
   354  0000                     _LATB	set	3978
   355  0000                     _LATE	set	3981
   356  0000                     _RCREG1	set	4014
   357  0000                     _RCSTA1bits	set	4011
   358  0000                     _TXREG1	set	4013
   359  0000                     _SPBRGH1	set	4016
   360  0000                     _SPBRG1	set	4015
   361  0000                     _TXSTA1	set	4012
   362  0000                     _RCSTA1	set	4011
   363  0000                     _BAUDCON1	set	4024
   364  0000                     _PIR1bits	set	3998
   365  0000                     _PIE1bits	set	3997
   366  0000                     _PIR2bits	set	4001
   367  0000                     _PIE2bits	set	4000
   368  0000                     _RCONbits	set	4048
   369  0000                     _OSCTUNE	set	3995
   370  0000                     _OSCCON2	set	4050
   371  0000                     _OSCCON	set	4051
   372  0000                     _LATDbits	set	3980
   373  0000                     _INTCONbits	set	4082
   374  0000                     _IOCB	set	3938
   375  0000                     _PORTD	set	3971
   376  0000                     _LATD	set	3980
   377  0000                     _TRISD	set	3989
   378  0000                     _LATA	set	3977
   379  0000                     _TRISA	set	3986
   380  0000                     _LATCbits	set	3979
   381  0000                     _LATBbits	set	3978
   382                           
   383                           ; #config settings
   384  0000                     
   385                           	psect	cinit
   386  002500                     __pcinit:
   387                           	opt stack 0
   388  002500                     start_initialization:
   389                           	opt stack 0
   390  002500                     __initialization:
   391                           	opt stack 0
   392                           
   393                           ; Initialize objects allocated to BANK0 (16 bytes)
   394                           ; load TBLPTR registers with __pidataBANK0
   395  002500  0EC0               	movlw	low __pidataBANK0
   396  002502  6EF6               	movwf	tblptrl,c
   397  002504  0E31               	movlw	high __pidataBANK0
   398  002506  6EF7               	movwf	tblptrh,c
   399  002508  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   400  00250A  6EF8               	movwf	tblptru,c
   401  00250C  EE00  F0EA         	lfsr	0,__pdataBANK0
   402  002510  EE10 F010          	lfsr	1,16
   403  002514                     copy_data0:
   404  002514  0009               	tblrd		*+
   405  002516  CFF5 FFEE          	movff	tablat,postinc0
   406  00251A  50E5               	movf	postdec1,w,c
   407  00251C  50E1               	movf	fsr1l,w,c
   408  00251E  E1FA               	bnz	copy_data0
   409                           
   410                           ; Initialize objects allocated to COMRAM (4 bytes)
   411                           ; load TBLPTR registers with __pidataCOMRAM
   412  002520  0E76               	movlw	low __pidataCOMRAM
   413  002522  6EF6               	movwf	tblptrl,c
   414  002524  0E32               	movlw	high __pidataCOMRAM
   415  002526  6EF7               	movwf	tblptrh,c
   416  002528  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   417  00252A  6EF8               	movwf	tblptru,c
   418  00252C  EE00  F042         	lfsr	0,__pdataCOMRAM
   419  002530  EE10 F004          	lfsr	1,4
   420  002534                     copy_data1:
   421  002534  0009               	tblrd		*+
   422  002536  CFF5 FFEE          	movff	tablat,postinc0
   423  00253A  50E5               	movf	postdec1,w,c
   424  00253C  50E1               	movf	fsr1l,w,c
   425  00253E  E1FA               	bnz	copy_data1
   426                           
   427                           ; Clear objects allocated to BANK1 (214 bytes)
   428  002540  EE01  F000         	lfsr	0,__pbssBANK1
   429  002544  0ED6               	movlw	214
   430  002546                     clear_0:
   431  002546  6AEE               	clrf	postinc0,c
   432  002548  06E8               	decf	wreg,f,c
   433  00254A  E1FD               	bnz	clear_0
   434                           
   435                           ; Clear objects allocated to BANK0 (23 bytes)
   436  00254C  EE00  F0D3         	lfsr	0,__pbssBANK0
   437  002550  0E17               	movlw	23
   438  002552                     clear_1:
   439  002552  6AEE               	clrf	postinc0,c
   440  002554  06E8               	decf	wreg,f,c
   441  002556  E1FD               	bnz	clear_1
   442                           
   443                           ; Clear objects allocated to COMRAM (17 bytes)
   444  002558  EE00  F031         	lfsr	0,__pbssCOMRAM
   445  00255C  0E11               	movlw	17
   446  00255E                     clear_2:
   447  00255E  6AEE               	clrf	postinc0,c
   448  002560  06E8               	decf	wreg,f,c
   449  002562  E1FD               	bnz	clear_2
   450  002564                     end_of_initialization:
   451                           	opt stack 0
   452  002564                     __end_of__initialization:
   453                           	opt stack 0
   454  002564  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   455  002566  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   456  002568  0E00               	movlw	low (__Lmediumconst shr (0+16))
   457  00256A  6EF8               	movwf	tblptru,c
   458  00256C  0100               	movlb	0
   459  00256E  EF21  F013         	goto	_main	;jump to C main() function
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           
   469                           	psect	bssCOMRAM
   470  000031                     __pbssCOMRAM:
   471                           	opt stack 0
   472  000031                     _numOfValidateSamples:
   473                           	opt stack 0
   474  000031                     	ds	4
   475  000035                     TMR0_ISR@CountCallBack:
   476                           	opt stack 0
   477  000035                     	ds	2
   478  000037                     _eusart1RxTail:
   479                           	opt stack 0
   480  000037                     	ds	1
   481  000038                     _eusart1RxHead:
   482                           	opt stack 0
   483  000038                     	ds	1
   484  000039                     _eusart1TxTail:
   485                           	opt stack 0
   486  000039                     	ds	1
   487  00003A                     _eusart1TxHead:
   488                           	opt stack 0
   489  00003A                     	ds	1
   490  00003B                     _isReWriteDone:
   491                           	opt stack 0
   492  00003B                     	ds	1
   493  00003C                     _adcSampleMode:
   494                           	opt stack 0
   495  00003C                     	ds	1
   496  00003D                     _conversionFormat:
   497                           	opt stack 0
   498  00003D                     	ds	1
   499  00003E                     _numOfReadSamples:
   500                           	opt stack 0
   501  00003E                     	ds	4
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	dataCOMRAM
   512  000042                     __pdataCOMRAM:
   513                           	opt stack 0
   514  000042                     _writeAddress:
   515                           	opt stack 0
   516  000042                     	ds	4
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	bssBANK0
   527  0000D3                     __pbssBANK0:
   528                           	opt stack 0
   529  0000D3                     _mcuRunTimeIn5SecTicks:
   530                           	opt stack 0
   531  0000D3                     	ds	4
   532  0000D7                     _errno:
   533                           	opt stack 0
   534  0000D7                     	ds	2
   535  0000D9                     _sampleCount:
   536                           	opt stack 0
   537  0000D9                     	ds	2
   538  0000DB                     _count:
   539                           	opt stack 0
   540  0000DB                     	ds	2
   541  0000DD                     _msgCount:
   542                           	opt stack 0
   543  0000DD                     	ds	1
   544  0000DE                     _crcGiven:
   545                           	opt stack 0
   546  0000DE                     	ds	1
   547  0000DF                     _crcCalc:
   548                           	opt stack 0
   549  0000DF                     	ds	1
   550  0000E0                     _data:
   551                           	opt stack 0
   552  0000E0                     	ds	1
   553  0000E1                     _dataSize:
   554                           	opt stack 0
   555  0000E1                     	ds	1
   556  0000E2                     _request:
   557                           	opt stack 0
   558  0000E2                     	ds	1
   559  0000E3                     _group:
   560                           	opt stack 0
   561  0000E3                     	ds	1
   562  0000E4                     _cState:
   563                           	opt stack 0
   564  0000E4                     	ds	1
   565  0000E5                     _eusart1RxCount:
   566                           	opt stack 0
   567  0000E5                     	ds	1
   568  0000E6                     _channel:
   569                           	opt stack 0
   570  0000E6                     	ds	1
   571  0000E7                     _TimerKeepAliveFlag:
   572                           	opt stack 0
   573  0000E7                     	ds	1
   574  0000E8                     _TimerSamplingFlag:
   575                           	opt stack 0
   576  0000E8                     	ds	1
   577  0000E9                     _TimerOneSecFlag:
   578                           	opt stack 0
   579  0000E9                     	ds	1
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           postdec1	equ	0xFE5
   587                           fsr1l	equ	0xFE1
   588                           
   589                           	psect	dataBANK0
   590  0000EA                     __pdataBANK0:
   591                           	opt stack 0
   592  0000EA                     _groupsArray:
   593                           	opt stack 0
   594  0000EA                     	ds	12
   595  0000F6                     _readAddress:
   596                           	opt stack 0
   597  0000F6                     	ds	4
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	bssBANK1
   608  000100                     __pbssBANK1:
   609                           	opt stack 0
   610  000100                     _eusart1TxBuffer:
   611                           	opt stack 0
   612  000100                     	ds	70
   613  000146                     _eusart1RxBuffer:
   614                           	opt stack 0
   615  000146                     	ds	40
   616  00016E                     _sampleArray:
   617                           	opt stack 0
   618  00016E                     	ds	64
   619  0001AE                     _rxMsgData:
   620                           	opt stack 0
   621  0001AE                     	ds	20
   622  0001C2                     _rxMsgQueue:
   623                           	opt stack 0
   624  0001C2                     	ds	20
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	cstackBANK1
   635  0001D6                     __pcstackBANK1:
   636                           	opt stack 0
   637  0001D6                     ??_readUartMessage:
   638                           
   639                           ; 1 bytes @ 0x0
   640  0001D6                     	ds	4
   641  0001DA                     readUartMessage@idx:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x4
   645  0001DA                     	ds	2
   646  0001DC                     readUartMessage@chRec:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x6
   650  0001DC                     	ds	1
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	cstackBANK0
   661  000060                     __pcstackBANK0:
   662                           	opt stack 0
   663  000060                     ??_FlashSampleWrite:
   664  000060                     ??___ftmul:
   665  000060                     ??_FlashReadUart:
   666  000060                     UpdateRxFreq@send:
   667                           	opt stack 0
   668  000060                     GetMcuRunTime@TxMsg:
   669                           	opt stack 0
   670                           
   671                           ; 9 bytes @ 0x0
   672  000060                     	ds	2
   673  000062                     FlashSampleWrite@rotateLeft:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2
   677  000062                     	ds	1
   678  000063                     ___ftmul@exp:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x3
   682  000063                     	ds	1
   683  000064                     ___ftmul@f3_as_product:
   684                           	opt stack 0
   685                           
   686                           ; 3 bytes @ 0x4
   687  000064                     	ds	3
   688  000067                     ___ftmul@cntr:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x7
   692  000067                     	ds	1
   693  000068                     ___ftmul@sign:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x8
   697  000068                     	ds	1
   698  000069                     ?___ftadd:
   699                           	opt stack 0
   700  000069                     ?___ftdiv:
   701                           	opt stack 0
   702  000069                     ___ftadd@f1:
   703                           	opt stack 0
   704  000069                     ___ftdiv@f1:
   705                           	opt stack 0
   706  000069                     GetMcuRunTime@tempRunTime:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x9
   710  000069                     	ds	3
   711  00006C                     ___ftadd@f2:
   712                           	opt stack 0
   713  00006C                     ___ftdiv@f2:
   714                           	opt stack 0
   715  00006C                     FlashReadUart@TxMsg:
   716                           	opt stack 0
   717                           
   718                           ; 69 bytes @ 0xC
   719  00006C                     	ds	1
   720  00006D                     GetMcuRunTime@idx:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0xD
   724  00006D                     	ds	2
   725  00006F                     ??___ftadd:
   726  00006F                     ??___ftdiv:
   727                           
   728                           ; 1 bytes @ 0xF
   729  00006F                     	ds	3
   730  000072                     ___ftadd@sign:
   731                           	opt stack 0
   732  000072                     ___ftdiv@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x12
   736  000072                     	ds	1
   737  000073                     ___ftadd@exp2:
   738                           	opt stack 0
   739  000073                     ___ftdiv@f3:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x13
   743  000073                     	ds	1
   744  000074                     ___ftadd@exp1:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x14
   748  000074                     	ds	1
   749  000075                     ?___ftsub:
   750                           	opt stack 0
   751  000075                     ?_eval_poly:
   752                           	opt stack 0
   753  000075                     ___ftsub@f1:
   754                           	opt stack 0
   755  000075                     eval_poly@x:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x15
   759  000075                     	ds	1
   760  000076                     ___ftdiv@exp:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x16
   764  000076                     	ds	1
   765  000077                     ___ftdiv@sign:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x17
   769  000077                     	ds	1
   770  000078                     ??_CheckFlashPrecentage:
   771  000078                     ?___fttol:
   772                           	opt stack 0
   773  000078                     eval_poly@d:
   774                           	opt stack 0
   775  000078                     ___ftsub@f2:
   776                           	opt stack 0
   777  000078                     ___fttol@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x18
   781  000078                     	ds	2
   782  00007A                     eval_poly@n:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x1A
   786  00007A                     	ds	2
   787  00007C                     ??___fttol:
   788  00007C                     CheckFlashPrecentage@precentage:
   789                           	opt stack 0
   790  00007C                     eval_poly@res:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x1C
   794  00007C                     	ds	3
   795  00007F                     ?_log:
   796                           	opt stack 0
   797  00007F                     ?_ldexp:
   798                           	opt stack 0
   799  00007F                     ldexp@value:
   800                           	opt stack 0
   801  00007F                     log@x:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x1F
   805  00007F                     	ds	2
   806  000081                     ___fttol@sign1:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x21
   810  000081                     	ds	1
   811  000082                     ldexp@newexp:
   812                           	opt stack 0
   813  000082                     log@exponent:
   814                           	opt stack 0
   815  000082                     ___fttol@lval:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x22
   819  000082                     	ds	2
   820  000084                     ??_ldexp:
   821                           
   822                           ; 1 bytes @ 0x24
   823  000084                     	ds	2
   824  000086                     ___fttol@exp1:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x26
   828  000086                     	ds	1
   829  000087                     ?___altoft:
   830                           	opt stack 0
   831  000087                     ___altoft@c:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x27
   835  000087                     	ds	4
   836  00008B                     ??___altoft:
   837                           
   838                           ; 1 bytes @ 0x2B
   839  00008B                     	ds	4
   840  00008F                     ?_floor:
   841                           	opt stack 0
   842  00008F                     floor@x:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x2F
   846  00008F                     	ds	3
   847  000092                     floor@i:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0x32
   851  000092                     	ds	3
   852  000095                     floor@expon:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x35
   856  000095                     	ds	2
   857  000097                     ?_exp:
   858                           	opt stack 0
   859  000097                     exp@x:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x37
   863  000097                     	ds	3
   864  00009A                     _exp$3078:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x3A
   868  00009A                     	ds	3
   869  00009D                     exp@exponent:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x3D
   873  00009D                     	ds	2
   874  00009F                     exp@sign:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x3F
   878  00009F                     	ds	1
   879  0000A0                     ?_pow:
   880                           	opt stack 0
   881  0000A0                     pow@x:
   882                           	opt stack 0
   883                           
   884                           ; 3 bytes @ 0x40
   885  0000A0                     	ds	3
   886  0000A3                     pow@y:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0x43
   890  0000A3                     	ds	3
   891  0000A6                     _pow$3076:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x46
   895  0000A6                     	ds	3
   896  0000A9                     _pow$3077:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x49
   900  0000A9                     	ds	3
   901  0000AC                     pow@sign:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x4C
   905  0000AC                     	ds	1
   906  0000AD                     pow@yi:
   907                           	opt stack 0
   908                           
   909                           ; 4 bytes @ 0x4D
   910  0000AD                     	ds	4
   911  0000B1                     ??_AdcConvert:
   912  0000B1                     DacSetValue@data:
   913                           	opt stack 0
   914  0000B1                     UpdateTxFreq@data:
   915                           	opt stack 0
   916  0000B1                     _FlashReadUart$549:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x51
   920  0000B1                     	ds	2
   921  0000B3                     ??_DacSetValue:
   922  0000B3                     ??_UpdateTxFreq:
   923  0000B3                     AdcConvert@_adcResult:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x53
   927  0000B3                     	ds	2
   928  0000B5                     AdcConvert@_adcResult_324:
   929                           	opt stack 0
   930  0000B5                     _UpdateTxFreq$3074:
   931                           	opt stack 0
   932  0000B5                     _FlashReadUart$550:
   933                           	opt stack 0
   934  0000B5                     DacSetValue@tempArr:
   935                           	opt stack 0
   936                           
   937                           ; 5 bytes @ 0x55
   938  0000B5                     	ds	2
   939  0000B7                     _AdcConvert$3070:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x57
   943  0000B7                     	ds	1
   944  0000B8                     _UpdateTxFreq$3075:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x58
   948  0000B8                     	ds	1
   949  0000B9                     FlashReadUart@j:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x59
   953  0000B9                     	ds	1
   954  0000BA                     DacSetValue@vout:
   955                           	opt stack 0
   956  0000BA                     AdcConvert@adcRes:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x5A
   960  0000BA                     	ds	1
   961  0000BB                     FlashReadUart@idx:
   962                           	opt stack 0
   963  0000BB                     _DacSetValue$3071:
   964                           	opt stack 0
   965  0000BB                     UpdateTxFreq@freqVal:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x5B
   969  0000BB                     	ds	1
   970  0000BC                     AdcConvert@idx:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x5C
   974  0000BC                     	ds	1
   975  0000BD                     FlashReadUart@offset:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x5D
   979  0000BD                     	ds	1
   980  0000BE                     _DacSetValue$3072:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x5E
   984  0000BE                     	ds	1
   985  0000BF                     UpdateTxFreq@idx:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x5F
   989  0000BF                     	ds	2
   990  0000C1                     _DacSetValue$3073:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x61
   994  0000C1                     	ds	3
   995  0000C4                     DacSetValue@dVout:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x64
   999  0000C4                     	ds	3
  1000  0000C7                     DacSetValue@dataCnt:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x67
  1004  0000C7                     	ds	2
  1005  0000C9                     DacSetValue@digitalVal:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x69
  1009  0000C9                     	ds	2
  1010  0000CB                     DacSetValue@idx:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x6B
  1014  0000CB                     	ds	2
  1015  0000CD                     DacSetValue@idx_643:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x6D
  1019  0000CD                     	ds	2
  1020  0000CF                     GroupStatusAndVersion@data:
  1021                           	opt stack 0
  1022  0000CF                     GroupAdc@data:
  1023                           	opt stack 0
  1024  0000CF                     GroupSynthesizers@data:
  1025                           	opt stack 0
  1026  0000CF                     GroupFlashMemory@data:
  1027                           	opt stack 0
  1028  0000CF                     GroupDAC@data:
  1029                           	opt stack 0
  1030  0000CF                     
  1031                           ; 3 bytes @ 0x6F
  1032  0000CF                     	ds	2
  1033  0000D1                     ??_GroupFlashMemory:
  1034  0000D1                     GroupStatusAndVersion@request:
  1035                           	opt stack 0
  1036  0000D1                     GroupAdc@request:
  1037                           	opt stack 0
  1038  0000D1                     GroupSynthesizers@request:
  1039                           	opt stack 0
  1040  0000D1                     GroupDAC@request:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x71
  1044  0000D1                     	ds	1
  1045  0000D2                     GroupControlMcu@request:
  1046                           	opt stack 0
  1047  0000D2                     GroupFlashMemory@request:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x72
  1051  0000D2                     	ds	1
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           
  1061                           	psect	cstackCOMRAM
  1062  000001                     __pcstackCOMRAM:
  1063                           	opt stack 0
  1064  000001                     ?___lwmod:
  1065                           	opt stack 0
  1066  000001                     ___lwmod@dividend:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x0
  1070  000001                     	ds	2
  1071  000003                     ___lwmod@divisor:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075  000003                     	ds	2
  1076  000005                     ___lwmod@counter:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x4
  1080  000005                     	ds	1
  1081  000006                     ??_INTERRUPT_InterruptManager:
  1082                           
  1083                           ; 1 bytes @ 0x5
  1084  000006                     	ds	18
  1085  000018                     ??_EUSART1_Read:
  1086  000018                     ??_BlinkErrorLeds:
  1087  000018                     ??_BlinkOkLeds:
  1088  000018                     ??_keepAliveSignalLed:
  1089  000018                     ?_ADC_GetConversion:
  1090                           	opt stack 0
  1091  000018                     ?_abs:
  1092                           	opt stack 0
  1093  000018                     ?___wmul:
  1094                           	opt stack 0
  1095  000018                     ?___ftpack:
  1096                           	opt stack 0
  1097  000018                     ?_frexp:
  1098                           	opt stack 0
  1099  000018                     ?___ftneg:
  1100                           	opt stack 0
  1101  000018                     ?___lldiv:
  1102                           	opt stack 0
  1103  000018                     ?___llmod:
  1104                           	opt stack 0
  1105  000018                     InitAdcApplicationMgr@channel:
  1106                           	opt stack 0
  1107  000018                     SwSpiDataHigh@phrType:
  1108                           	opt stack 0
  1109  000018                     SwSpiDataLow@phrType:
  1110                           	opt stack 0
  1111  000018                     SwSpiClkHigh@phrType:
  1112                           	opt stack 0
  1113  000018                     SwSpiClkLow@phrType:
  1114                           	opt stack 0
  1115  000018                     EUSART1_Write@txData:
  1116                           	opt stack 0
  1117  000018                     DATAEE_WriteByte@bData:
  1118                           	opt stack 0
  1119  000018                     DATAEE_ReadByte@bAdd:
  1120                           	opt stack 0
  1121  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1122                           	opt stack 0
  1123  000018                     crc8@dataArray:
  1124                           	opt stack 0
  1125  000018                     make8@data:
  1126                           	opt stack 0
  1127  000018                     ___wmul@multiplier:
  1128                           	opt stack 0
  1129  000018                     abs@a:
  1130                           	opt stack 0
  1131  000018                     memset@p1:
  1132                           	opt stack 0
  1133  000018                     ___ftpack@arg:
  1134                           	opt stack 0
  1135  000018                     ___ftge@ff1:
  1136                           	opt stack 0
  1137  000018                     ___ftneg@f1:
  1138                           	opt stack 0
  1139  000018                     frexp@value:
  1140                           	opt stack 0
  1141  000018                     FLASH_ReadByte@flashAddr:
  1142                           	opt stack 0
  1143  000018                     FLASH_EraseBlock@baseAddr:
  1144                           	opt stack 0
  1145  000018                     ___lldiv@dividend:
  1146                           	opt stack 0
  1147  000018                     ___llmod@dividend:
  1148                           	opt stack 0
  1149                           
  1150                           ; 4 bytes @ 0x17
  1151  000018                     	ds	1
  1152  000019                     EepromRead@address:
  1153                           	opt stack 0
  1154  000019                     SwSpiSetClock@phrType:
  1155                           	opt stack 0
  1156  000019                     DATAEE_WriteByte@bAdd:
  1157                           	opt stack 0
  1158  000019                     WriteUartMessage@dataBuf:
  1159                           	opt stack 0
  1160  000019                     EUSART1_Read@readValue:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x18
  1164  000019                     	ds	1
  1165  00001A                     ??_ADC_GetConversion:
  1166  00001A                     ??_abs:
  1167  00001A                     ??_TMR0_Initialize:
  1168  00001A                     DATAEE_WriteByte@GIEBitValue:
  1169                           	opt stack 0
  1170  00001A                     make8@dataLocation:
  1171                           	opt stack 0
  1172  00001A                     crc8@dataSize:
  1173                           	opt stack 0
  1174  00001A                     ___wmul@multiplicand:
  1175                           	opt stack 0
  1176  00001A                     memset@c:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x19
  1180  00001A                     	ds	1
  1181  00001B                     BlinkErrorLeds@state:
  1182                           	opt stack 0
  1183  00001B                     BlinkOkLeds@state:
  1184                           	opt stack 0
  1185  00001B                     EepromWrite@data:
  1186                           	opt stack 0
  1187  00001B                     SWSPI_send_bits@data:
  1188                           	opt stack 0
  1189  00001B                     ___ftpack@exp:
  1190                           	opt stack 0
  1191  00001B                     WriteUartMessage@dataSize:
  1192                           	opt stack 0
  1193  00001B                     frexp@eptr:
  1194                           	opt stack 0
  1195  00001B                     ___ftge@ff2:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x1A
  1199  00001B                     	ds	1
  1200  00001C                     ??_crc8:
  1201  00001C                     EepromWrite@address:
  1202                           	opt stack 0
  1203  00001C                     SWSPI_send_bits@count:
  1204                           	opt stack 0
  1205  00001C                     FLASH_EraseBlock@GIEBitValue:
  1206                           	opt stack 0
  1207  00001C                     ADC_GetConversion@channel:
  1208                           	opt stack 0
  1209  00001C                     ___ftpack@sign:
  1210                           	opt stack 0
  1211  00001C                     BlinkErrorLeds@idx:
  1212                           	opt stack 0
  1213  00001C                     BlinkOkLeds@idx:
  1214                           	opt stack 0
  1215  00001C                     ___wmul@product:
  1216                           	opt stack 0
  1217  00001C                     memset@n:
  1218                           	opt stack 0
  1219  00001C                     ___lldiv@divisor:
  1220                           	opt stack 0
  1221  00001C                     ___llmod@divisor:
  1222                           	opt stack 0
  1223                           
  1224                           ; 4 bytes @ 0x1B
  1225  00001C                     	ds	1
  1226  00001D                     ??___ftpack:
  1227  00001D                     ??_frexp:
  1228  00001D                     ??_WriteUartMessage:
  1229  00001D                     SWSPI_send_bits@phrType:
  1230                           	opt stack 0
  1231  00001D                     crc8@crc:
  1232                           	opt stack 0
  1233  00001D                     FLASH_WriteBlock@writeAddr:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x1C
  1237  00001D                     	ds	1
  1238  00001E                     ??___ftge:
  1239  00001E                     WriteUartMessage@idx:
  1240                           	opt stack 0
  1241  00001E                     memset@p:
  1242                           	opt stack 0
  1243  00001E                     SWSPI_send_word@data:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0x1D
  1247  00001E                     	ds	1
  1248  00001F                     crc8@i:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x1E
  1252  00001F                     	ds	1
  1253  000020                     ?___awtoft:
  1254                           	opt stack 0
  1255  000020                     ?___lbtoft:
  1256                           	opt stack 0
  1257  000020                     ?___lltoft:
  1258                           	opt stack 0
  1259  000020                     ?___lwtoft:
  1260                           	opt stack 0
  1261  000020                     ___llmod@counter:
  1262                           	opt stack 0
  1263  000020                     ZeroArray@array:
  1264                           	opt stack 0
  1265  000020                     ___awtoft@c:
  1266                           	opt stack 0
  1267  000020                     ___lwtoft@c:
  1268                           	opt stack 0
  1269  000020                     ___lldiv@quotient:
  1270                           	opt stack 0
  1271  000020                     ___lltoft@c:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0x1F
  1275  000020                     	ds	1
  1276  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x20
  1280  000021                     	ds	1
  1281  000022                     SWSPI_send_word@dataSize:
  1282                           	opt stack 0
  1283  000022                     ZeroArray@size:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x21
  1287  000022                     	ds	1
  1288  000023                     ??_FLASH_WriteBlock:
  1289  000023                     SWSPI_send_word@phrType:
  1290                           	opt stack 0
  1291  000023                     ___awtoft@sign:
  1292                           	opt stack 0
  1293  000023                     ___lbtoft@c:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x22
  1297  000023                     	ds	1
  1298  000024                     ??_GetMcuFwVersion:
  1299  000024                     ??_GetCpldFwVersion:
  1300  000024                     ??_FlashReadCondition:
  1301  000024                     ??___lltoft:
  1302  000024                     SendAckMessage@inRequest:
  1303                           	opt stack 0
  1304  000024                     ___lldiv@counter:
  1305                           	opt stack 0
  1306  000024                     FlashReadUart@numOfSampleToRead:
  1307                           	opt stack 0
  1308  000024                     SWSPI_send_word@idx:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x23
  1312  000024                     	ds	1
  1313  000025                     ??_GetMcuRunTime:
  1314  000025                     SendAckMessage@inGroup:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x24
  1318  000025                     	ds	1
  1319  000026                     SendAckMessage@TxMsg:
  1320                           	opt stack 0
  1321  000026                     FlashReadCondition@TxMsg:
  1322                           	opt stack 0
  1323  000026                     GetMcuFwVersion@TxMsg:
  1324                           	opt stack 0
  1325  000026                     GetCpldFwVersion@TxMsg:
  1326                           	opt stack 0
  1327                           
  1328                           ; 9 bytes @ 0x25
  1329  000026                     	ds	1
  1330  000027                     FLASH_WriteBlock@blockStartAddr:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0x26
  1334  000027                     	ds	1
  1335  000028                     ___lltoft@exp:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x27
  1339  000028                     	ds	1
  1340  000029                     ?___ftmul:
  1341                           	opt stack 0
  1342  000029                     ___ftmul@f1:
  1343                           	opt stack 0
  1344                           
  1345                           ; 3 bytes @ 0x28
  1346  000029                     	ds	2
  1347  00002B                     FLASH_WriteBlock@GIEBitValue:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x2A
  1351  00002B                     	ds	1
  1352  00002C                     ??_testLeds:
  1353  00002C                     FLASH_WriteBlock@i:
  1354                           	opt stack 0
  1355  00002C                     SetAdcOperationMode@data:
  1356                           	opt stack 0
  1357  00002C                     SetConversionResultFormat@data:
  1358                           	opt stack 0
  1359  00002C                     SetChannelMode@data:
  1360                           	opt stack 0
  1361  00002C                     UpdateRxFreq@data:
  1362                           	opt stack 0
  1363  00002C                     SetMcuFwVersion@data:
  1364                           	opt stack 0
  1365  00002C                     SetCpldFwVersion@data:
  1366                           	opt stack 0
  1367  00002C                     ___ftmul@f2:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x2B
  1371  00002C                     	ds	1
  1372  00002D                     testLeds@idx:
  1373                           	opt stack 0
  1374  00002D                     FlashSampleWrite@sampleData:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x2C
  1378  00002D                     	ds	1
  1379  00002E                     SetMcuFwVersion@idx:
  1380                           	opt stack 0
  1381  00002E                     SetCpldFwVersion@idx:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x2D
  1385  00002E                     	ds	1
  1386  00002F                     ??_eval_poly:
  1387  00002F                     FlashSampleWrite@channelNum:
  1388                           	opt stack 0
  1389  00002F                     GetMcuFwVersion@idx:
  1390                           	opt stack 0
  1391  00002F                     ___altoft@exp:
  1392                           	opt stack 0
  1393  00002F                     GetCpldFwVersion@idx:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x2E
  1397  00002F                     	ds	1
  1398  000030                     ___altoft@sign:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x2F
  1402  000030                     	ds	1
  1403  000031                     tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1l	equ	0xFE1
  1411                           
  1412                           ; 1 bytes @ 0x30
  1413 ;;
  1414 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1415 ;;
  1416 ;; *************** function _main *****************
  1417 ;; Defined at:
  1418 ;;		line 13 in file "main.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;		None
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1432 ;;      Params:         0       0       0       0       0       0       0
  1433 ;;      Locals:         0       0       0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0
  1435 ;;      Totals:         0       0       0       0       0       0       0
  1436 ;;Total ram usage:        0 bytes
  1437 ;; Hardware stack levels required when called:   11
  1438 ;; This function calls:
  1439 ;;		_AdcConvert
  1440 ;;		_BlinkErrorLeds
  1441 ;;		_BlinkOkLeds
  1442 ;;		_CheckFlashPrecentage
  1443 ;;		_InitSystemApplicationManagers
  1444 ;;		_SendSystemStartAck
  1445 ;;		_SetMcuRunTime
  1446 ;;		_SetMcuSystem
  1447 ;;		_keepAliveSignalLed
  1448 ;;		_keepAliveSignalUart
  1449 ;;		_readUartMessage
  1450 ;; This function is called by:
  1451 ;;		Startup code after reset
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text0
  1456  002642                     __ptext0:
  1457                           	opt stack 0
  1458  002642                     _main:
  1459                           	opt stack 20
  1460                           
  1461                           ;main.c: 16: SetMcuSystem();
  1462                           
  1463                           ;incstack = 0
  1464  002642  EC2E  F019         	call	_SetMcuSystem	;wreg free
  1465                           
  1466                           ;main.c: 19: InitSystemApplicationManagers();
  1467  002646  ECB8  F018         	call	_InitSystemApplicationManagers	;wreg free
  1468                           
  1469                           ;main.c: 22: SendSystemStartAck();
  1470  00264A  EC23  F019         	call	_SendSystemStartAck	;wreg free
  1471                           
  1472                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1473  00264E  0E03               	movlw	3
  1474  002650  EC52  F013         	call	_BlinkOkLeds
  1475  002654                     
  1476                           ;main.c: 28: {
  1477                           ;main.c: 29: readUartMessage();
  1478  002654  EC13  F006         	call	_readUartMessage	;wreg free
  1479                           
  1480                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1481  002658  0100               	movlb	0	; () banked
  1482  00265A  05E9               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1483  00265C  A4D8               	btfss	status,2,c
  1484  00265E  D006               	goto	l1289
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;main.c: 32: {
  1488                           ;main.c: 34: SetMcuRunTime();
  1489  002660  EC5C  F015         	call	_SetMcuRunTime	;wreg free
  1490                           
  1491                           ;main.c: 35: TimerOneSecFlag = 0;
  1492  002664  0E00               	movlw	0
  1493  002666  0100               	movlb	0	; () banked
  1494  002668  6FE9               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1495                           
  1496                           ;main.c: 36: }
  1497  00266A  D7F4               	goto	l1288
  1498  00266C                     l1289:
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1502                           
  1503                           ; BSR set to: 0
  1504  00266C  05E8               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1505  00266E  A4D8               	btfss	status,2,c
  1506  002670  D010               	goto	l1291
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 38: {
  1510                           ;main.c: 39: keepAliveSignalLed();
  1511  002672  ECA1  F018         	call	_keepAliveSignalLed	;wreg free
  1512                           
  1513                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1514  002676  EC4A  F010         	call	_CheckFlashPrecentage	;wreg free
  1515  00267A  06E8               	decf	wreg,f,c
  1516  00267C  A4D8               	btfss	status,2,c
  1517  00267E  D003               	goto	l1292
  1518                           
  1519                           ;main.c: 42: {
  1520                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1521  002680  0E04               	movlw	4
  1522  002682  EC81  F013         	call	_BlinkErrorLeds
  1523  002686                     l1292:
  1524                           
  1525                           ;main.c: 44: }
  1526                           ;main.c: 47: AdcConvert();
  1527  002686  EC09  F008         	call	_AdcConvert	;wreg free
  1528                           
  1529                           ;main.c: 49: TimerSamplingFlag = 0;
  1530  00268A  0E00               	movlw	0
  1531  00268C  0100               	movlb	0	; () banked
  1532  00268E  6FE8               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1533                           
  1534                           ;main.c: 50: }
  1535  002690  D7E1               	goto	l1288
  1536  002692                     l1291:
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1540                           
  1541                           ; BSR set to: 0
  1542  002692  05E7               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1543  002694  A4D8               	btfss	status,2,c
  1544  002696  D7DE               	goto	l1288
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 52: {
  1548                           ;main.c: 53: keepAliveSignalUart();
  1549  002698  EC1D  F019         	call	_keepAliveSignalUart	;wreg free
  1550                           
  1551                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1552  00269C  0E00               	movlw	0
  1553  00269E  0100               	movlb	0	; () banked
  1554  0026A0  6FE7               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1555                           
  1556                           ; BSR set to: 0
  1557                           
  1558                           ; BSR set to: 0
  1559                           
  1560                           ; BSR set to: 0
  1561                           
  1562                           ; BSR set to: 0
  1563  0026A2  D7D8               	goto	l1288
  1564  0026A4                     __end_of_main:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1l	equ	0xFE1
  1574                           status	equ	0xFD8
  1575                           
  1576 ;; *************** function _readUartMessage *****************
  1577 ;; Defined at:
  1578 ;;		line 28 in file "EusartApp.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  idx             2    4[BANK1 ] int 
  1583 ;;  chRec           1    6[BANK1 ] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1593 ;;      Params:         0       0       0       0       0       0       0
  1594 ;;      Locals:         0       0       3       0       0       0       0
  1595 ;;      Temps:          0       0       4       0       0       0       0
  1596 ;;      Totals:         0       0       7       0       0       0       0
  1597 ;;Total ram usage:        7 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:   10
  1600 ;; This function calls:
  1601 ;;		_EUSART1_Read
  1602 ;;		_GroupAdc
  1603 ;;		_GroupControlMcu
  1604 ;;		_GroupDAC
  1605 ;;		_GroupFlashMemory
  1606 ;;		_GroupStatusAndVersion
  1607 ;;		_GroupSynthesizers
  1608 ;;		_InitRxMessageParams
  1609 ;;		_ZeroArray
  1610 ;;		_crc8
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text1
  1617  000C26                     __ptext1:
  1618                           	opt stack 0
  1619  000C26                     _readUartMessage:
  1620                           	opt stack 20
  1621                           
  1622                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;incstack = 0
  1626  000C26  0E00               	movlw	0
  1627  000C28  0101               	movlb	1	; () banked
  1628  000C2A  6FDC               	movwf	readUartMessage@chRec& (0+255),b
  1629                           
  1630                           ;EusartApp.c: 32: switch(cState)
  1631  000C2C  D0DF               	goto	l172
  1632  000C2E                     
  1633                           ;EusartApp.c: 38: if(eusart1RxCount > (4))
  1634                           
  1635                           ; BSR set to: 1
  1636  000C2E  0E04               	movlw	4
  1637  000C30  0100               	movlb	0	; () banked
  1638  000C32  65E5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1639  000C34  0012               	return	
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;EusartApp.c: 39: {
  1643                           ;EusartApp.c: 40: cState = FIND_MAGIC;
  1644  000C36  0E01               	movlw	1
  1645  000C38  6FE4               	movwf	_cState& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;EusartApp.c: 41: }
  1649                           ;EusartApp.c: 42: return;
  1650                           
  1651                           ; BSR set to: 0
  1652  000C3A  0012               	return	
  1653  000C3C                     
  1654                           ; BSR set to: 0
  1655                           ;EusartApp.c: 46: InitRxMessageParams();
  1656                           
  1657                           ; BSR set to: 0
  1658  000C3C  ECA6  F017         	call	_InitRxMessageParams	;wreg free
  1659                           
  1660                           ;EusartApp.c: 47: msgCount = 0;
  1661  000C40  0E00               	movlw	0
  1662  000C42  0100               	movlb	0	; () banked
  1663  000C44  6FDD               	movwf	_msgCount& (0+255),b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;EusartApp.c: 48: if(eusart1RxCount > 1)
  1667  000C46  0E01               	movlw	1
  1668  000C48  65E5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1669  000C4A  D00E               	goto	l177
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;EusartApp.c: 49: {
  1673                           ;EusartApp.c: 50: chRec = EUSART1_Read();
  1674  000C4C  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1675  000C50  0101               	movlb	1	; () banked
  1676  000C52  6FDC               	movwf	readUartMessage@chRec& (0+255),b
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;EusartApp.c: 51: rxMsgQueue[(0)] = chRec;
  1680  000C54  C1DC  F1C2         	movff	readUartMessage@chRec,_rxMsgQueue
  1681                           
  1682                           ; BSR set to: 1
  1683                           ;EusartApp.c: 52: if(chRec == (0x24))
  1684  000C58  0E24               	movlw	36
  1685  000C5A  19DC               	xorwf	readUartMessage@chRec& (0+255),w,b
  1686  000C5C  A4D8               	btfss	status,2,c
  1687  000C5E  0012               	return	
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;EusartApp.c: 53: {
  1691                           ;EusartApp.c: 54: cState = READ_GROUP;
  1692  000C60  0E02               	movlw	2
  1693  000C62  0100               	movlb	0	; () banked
  1694  000C64  6FE4               	movwf	_cState& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;EusartApp.c: 55: }
  1698                           ;EusartApp.c: 56: }
  1699  000C66  0012               	return	
  1700  000C68                     l177:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;EusartApp.c: 57: else
  1704                           ;EusartApp.c: 58: {
  1705                           ;EusartApp.c: 59: cState = START_RX_MESSAGE_READ;
  1706                           
  1707                           ; BSR set to: 0
  1708  000C68  0E00               	movlw	0
  1709  000C6A  6FE4               	movwf	_cState& (0+255),b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;EusartApp.c: 60: }
  1713                           ;EusartApp.c: 62: break;
  1714  000C6C  0012               	return	
  1715  000C6E                     
  1716                           ; BSR set to: 0
  1717                           ;EusartApp.c: 66: if(eusart1RxCount > 1)
  1718                           
  1719                           ; BSR set to: 0
  1720  000C6E  0E01               	movlw	1
  1721  000C70  65E5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1722  000C72  0012               	return	
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;EusartApp.c: 67: {
  1726                           ;EusartApp.c: 68: group = EUSART1_Read();
  1727  000C74  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1728  000C78  0100               	movlb	0	; () banked
  1729  000C7A  6FE3               	movwf	_group& (0+255),b
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;EusartApp.c: 69: rxMsgQueue[(1)] = group;
  1733  000C7C  C0E3  F1C3         	movff	_group,_rxMsgQueue+1
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;EusartApp.c: 70: cState = READ_REQUEST;
  1737  000C80  0E03               	movlw	3
  1738  000C82  6FE4               	movwf	_cState& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;EusartApp.c: 71: }
  1742                           ;EusartApp.c: 72: break;
  1743  000C84  0012               	return	
  1744  000C86                     
  1745                           ; BSR set to: 0
  1746                           ;EusartApp.c: 76: if(eusart1RxCount > 1)
  1747                           
  1748                           ; BSR set to: 0
  1749  000C86  0E01               	movlw	1
  1750  000C88  65E5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1751  000C8A  0012               	return	
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;EusartApp.c: 77: {
  1755                           ;EusartApp.c: 78: request = EUSART1_Read();
  1756  000C8C  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1757  000C90  0100               	movlb	0	; () banked
  1758  000C92  6FE2               	movwf	_request& (0+255),b
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;EusartApp.c: 79: rxMsgQueue[(2)] = request;
  1762  000C94  C0E2  F1C4         	movff	_request,_rxMsgQueue+2
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;EusartApp.c: 80: cState = READ_DATA_SIZE;
  1766  000C98  0E04               	movlw	4
  1767  000C9A  6FE4               	movwf	_cState& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;EusartApp.c: 81: }
  1771                           ;EusartApp.c: 82: break;
  1772  000C9C  0012               	return	
  1773  000C9E                     
  1774                           ; BSR set to: 0
  1775                           ;EusartApp.c: 85: if(eusart1RxCount > 1)
  1776                           
  1777                           ; BSR set to: 0
  1778  000C9E  0E01               	movlw	1
  1779  000CA0  65E5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1780  000CA2  0012               	return	
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;EusartApp.c: 86: {
  1784                           ;EusartApp.c: 87: dataSize = EUSART1_Read();
  1785  000CA4  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1786  000CA8  0100               	movlb	0	; () banked
  1787  000CAA  6FE1               	movwf	_dataSize& (0+255),b
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;EusartApp.c: 88: rxMsgQueue[(3)] = dataSize;
  1791  000CAC  C0E1  F1C5         	movff	_dataSize,_rxMsgQueue+3
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;EusartApp.c: 89: if(dataSize == 0)
  1795  000CB0  51E1               	movf	_dataSize& (0+255),w,b
  1796  000CB2  A4D8               	btfss	status,2,c
  1797  000CB4  D003               	goto	l187
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;EusartApp.c: 90: {
  1801                           ;EusartApp.c: 91: cState = CHECK_CRC;
  1802  000CB6  0E06               	movlw	6
  1803  000CB8  6FE4               	movwf	_cState& (0+255),b
  1804                           
  1805                           ;EusartApp.c: 92: }
  1806  000CBA  0012               	return	
  1807  000CBC                     l187:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;EusartApp.c: 93: else
  1811                           ;EusartApp.c: 94: {
  1812                           ;EusartApp.c: 95: cState = READ_DATA;
  1813                           
  1814                           ; BSR set to: 0
  1815  000CBC  0E05               	movlw	5
  1816  000CBE  6FE4               	movwf	_cState& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;EusartApp.c: 96: }
  1820                           ;EusartApp.c: 98: }
  1821                           ;EusartApp.c: 100: break;
  1822                           
  1823                           ; BSR set to: 0
  1824  000CC0  0012               	return	
  1825  000CC2                     
  1826                           ; BSR set to: 0
  1827                           ;EusartApp.c: 104: if(eusart1RxCount >= dataSize)
  1828                           
  1829                           ; BSR set to: 0
  1830  000CC2  51E1               	movf	_dataSize& (0+255),w,b
  1831  000CC4  5DE5               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1832  000CC6  A0D8               	btfss	status,0,c
  1833  000CC8  0012               	return	
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;EusartApp.c: 105: {
  1837                           ;EusartApp.c: 106: ZeroArray(rxMsgData, (0x14));
  1838  000CCA  0EAE               	movlw	low _rxMsgData
  1839  000CCC  6E20               	movwf	ZeroArray@array,c
  1840  000CCE  0E01               	movlw	high _rxMsgData
  1841  000CD0  6E21               	movwf	ZeroArray@array+1,c
  1842  000CD2  0E00               	movlw	0
  1843  000CD4  6E23               	movwf	ZeroArray@size+1,c
  1844  000CD6  0E14               	movlw	20
  1845  000CD8  6E22               	movwf	ZeroArray@size,c
  1846  000CDA  EC85  F018         	call	_ZeroArray	;wreg free
  1847                           
  1848                           ;EusartApp.c: 108: for(int idx = 0; idx < dataSize; idx++)
  1849  000CDE  0E00               	movlw	0
  1850  000CE0  0101               	movlb	1	; () banked
  1851  000CE2  6FDB               	movwf	(readUartMessage@idx+1)& (0+255),b
  1852  000CE4  0E00               	movlw	0
  1853  000CE6  6FDA               	movwf	readUartMessage@idx& (0+255),b
  1854  000CE8  D022               	goto	l191
  1855  000CEA                     
  1856                           ; BSR set to: 1
  1857                           ;EusartApp.c: 109: {
  1858                           ;EusartApp.c: 110: chRec = EUSART1_Read();
  1859                           
  1860                           ; BSR set to: 1
  1861  000CEA  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1862  000CEE  0101               	movlb	1	; () banked
  1863  000CF0  6FDC               	movwf	readUartMessage@chRec& (0+255),b
  1864                           
  1865                           ; BSR set to: 1
  1866                           ;EusartApp.c: 111: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1867  000CF2  0100               	movlb	0	; () banked
  1868  000CF4  51DD               	movf	_msgCount& (0+255),w,b
  1869  000CF6  0101               	movlb	1	; () banked
  1870  000CF8  6FD6               	movwf	??_readUartMessage& (0+255),b
  1871  000CFA  6BD7               	clrf	(??_readUartMessage+1)& (0+255),b
  1872  000CFC  0E04               	movlw	4
  1873  000CFE  27D6               	addwf	??_readUartMessage& (0+255),f,b
  1874  000D00  0E00               	movlw	0
  1875  000D02  23D7               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1876  000D04  0EC2               	movlw	low _rxMsgQueue
  1877  000D06  25D6               	addwf	??_readUartMessage& (0+255),w,b
  1878  000D08  6ED9               	movwf	fsr2l,c
  1879  000D0A  0E01               	movlw	high _rxMsgQueue
  1880  000D0C  21D7               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1881  000D0E  6EDA               	movwf	fsr2h,c
  1882  000D10  C1DC  FFDF         	movff	readUartMessage@chRec,indf2
  1883                           
  1884                           ; BSR set to: 1
  1885  000D14  0100               	movlb	0	; () banked
  1886  000D16  2BDD               	incf	_msgCount& (0+255),f,b
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;EusartApp.c: 112: rxMsgData[idx] = chRec;
  1890  000D18  0EAE               	movlw	low _rxMsgData
  1891  000D1A  0101               	movlb	1	; () banked
  1892  000D1C  25DA               	addwf	readUartMessage@idx& (0+255),w,b
  1893  000D1E  6ED9               	movwf	fsr2l,c
  1894  000D20  0E01               	movlw	high _rxMsgData
  1895  000D22  21DB               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  1896  000D24  6EDA               	movwf	fsr2h,c
  1897  000D26  C1DC  FFDF         	movff	readUartMessage@chRec,indf2
  1898                           
  1899                           ; BSR set to: 1
  1900  000D2A  4BDA               	infsnz	readUartMessage@idx& (0+255),f,b
  1901  000D2C  2BDB               	incf	(readUartMessage@idx+1)& (0+255),f,b
  1902  000D2E                     l191:
  1903                           
  1904                           ; BSR set to: 1
  1905                           
  1906                           ; BSR set to: 1
  1907  000D2E  0100               	movlb	0	; () banked
  1908  000D30  51E1               	movf	_dataSize& (0+255),w,b
  1909  000D32  0101               	movlb	1	; () banked
  1910  000D34  6FD6               	movwf	??_readUartMessage& (0+255),b
  1911  000D36  6BD7               	clrf	(??_readUartMessage+1)& (0+255),b
  1912  000D38  51D6               	movf	??_readUartMessage& (0+255),w,b
  1913  000D3A  5DDA               	subwf	readUartMessage@idx& (0+255),w,b
  1914  000D3C  51DB               	movf	(readUartMessage@idx+1)& (0+255),w,b
  1915  000D3E  0A80               	xorlw	128
  1916  000D40  6FD8               	movwf	(??_readUartMessage+2)& (0+255),b
  1917  000D42  51D7               	movf	(??_readUartMessage+1)& (0+255),w,b
  1918  000D44  0A80               	xorlw	128
  1919  000D46  59D8               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  1920  000D48  A0D8               	btfss	status,0,c
  1921  000D4A  D7CF               	goto	l192
  1922                           
  1923                           ; BSR set to: 1
  1924                           ;EusartApp.c: 113: }
  1925                           ;EusartApp.c: 115: cState = CHECK_CRC;
  1926                           
  1927                           ; BSR set to: 1
  1928  000D4C  0E06               	movlw	6
  1929  000D4E  0100               	movlb	0	; () banked
  1930  000D50  6FE4               	movwf	_cState& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;EusartApp.c: 116: }
  1934                           ;EusartApp.c: 117: break;
  1935  000D52  0012               	return	
  1936  000D54                     
  1937                           ; BSR set to: 0
  1938                           ;EusartApp.c: 120: if(eusart1RxCount >= 1)
  1939                           
  1940                           ; BSR set to: 0
  1941  000D54  51E5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  1942  000D56  B4D8               	btfsc	status,2,c
  1943  000D58  0012               	return	
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;EusartApp.c: 121: {
  1947                           ;EusartApp.c: 122: crcGiven = EUSART1_Read();
  1948  000D5A  EC3A  F015         	call	_EUSART1_Read	;wreg free
  1949  000D5E  0100               	movlb	0	; () banked
  1950  000D60  6FDE               	movwf	_crcGiven& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;EusartApp.c: 123: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  1954  000D62  0EC2               	movlw	low _rxMsgQueue
  1955  000D64  6E18               	movwf	crc8@dataArray,c
  1956  000D66  0E01               	movlw	high _rxMsgQueue
  1957  000D68  6E19               	movwf	crc8@dataArray+1,c
  1958  000D6A  0E04               	movlw	4
  1959  000D6C  25DD               	addwf	_msgCount& (0+255),w,b
  1960  000D6E  6E1A               	movwf	crc8@dataSize,c
  1961  000D70  6A1B               	clrf	crc8@dataSize+1,c
  1962  000D72  0E00               	movlw	0
  1963  000D74  221B               	addwfc	crc8@dataSize+1,f,c
  1964  000D76  EC84  F014         	call	_crc8	;wreg free
  1965  000D7A  0100               	movlb	0	; () banked
  1966  000D7C  6FDF               	movwf	_crcCalc& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;EusartApp.c: 125: if(crcGiven == crcCalc)
  1970  000D7E  51DF               	movf	_crcCalc& (0+255),w,b
  1971  000D80  19DE               	xorwf	_crcGiven& (0+255),w,b
  1972  000D82  A4D8               	btfss	status,2,c
  1973  000D84  D003               	goto	l196
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;EusartApp.c: 126: {
  1977                           ;EusartApp.c: 127: cState = JUMP_FUNCTION;
  1978  000D86  0E07               	movlw	7
  1979  000D88  6FE4               	movwf	_cState& (0+255),b
  1980                           
  1981                           ;EusartApp.c: 128: }
  1982  000D8A  0012               	return	
  1983  000D8C                     l196:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;EusartApp.c: 129: else
  1987                           ;EusartApp.c: 130: {
  1988                           ;EusartApp.c: 131: cState = START_RX_MESSAGE_READ;
  1989                           
  1990                           ; BSR set to: 0
  1991  000D8C  0E00               	movlw	0
  1992  000D8E  6FE4               	movwf	_cState& (0+255),b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;EusartApp.c: 132: }
  1996                           ;EusartApp.c: 133: }
  1997                           ;EusartApp.c: 134: break;
  1998                           
  1999                           ; BSR set to: 0
  2000  000D90  0012               	return	
  2001  000D92                     
  2002                           ; BSR set to: 0
  2003                           ;EusartApp.c: 137: groupsArray[group - 1](request, rxMsgData);
  2004                           
  2005                           ; BSR set to: 0
  2006  000D92  0EFE               	movlw	254
  2007  000D94  0101               	movlb	1	; () banked
  2008  000D96  6FD6               	movwf	??_readUartMessage& (0+255),b
  2009  000D98  0EFF               	movlw	255
  2010  000D9A  6FD7               	movwf	(??_readUartMessage+1)& (0+255),b
  2011  000D9C  0100               	movlb	0	; () banked
  2012  000D9E  51E3               	movf	_group& (0+255),w,b
  2013  000DA0  0101               	movlb	1	; () banked
  2014  000DA2  6FD8               	movwf	(??_readUartMessage+2)& (0+255),b
  2015  000DA4  6BD9               	clrf	(??_readUartMessage+3)& (0+255),b
  2016  000DA6  90D8               	bcf	status,0,c
  2017  000DA8  37D8               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2018  000DAA  37D9               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2019  000DAC  51D6               	movf	??_readUartMessage& (0+255),w,b
  2020  000DAE  27D8               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2021  000DB0  51D7               	movf	(??_readUartMessage+1)& (0+255),w,b
  2022  000DB2  23D9               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2023  000DB4  0EEA               	movlw	low _groupsArray
  2024  000DB6  25D8               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2025  000DB8  6ED9               	movwf	fsr2l,c
  2026  000DBA  0E00               	movlw	high _groupsArray
  2027  000DBC  21D9               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2028  000DBE  6EDA               	movwf	fsr2h,c
  2029  000DC0  D801               	call	u6338
  2030  000DC2  D010               	goto	u6339
  2031  000DC4                     u6338:
  2032  000DC4  0005               	push	
  2033  000DC6  6EFA               	movwf	pclath,c
  2034  000DC8  50DE               	movf	postinc2,w,c
  2035  000DCA  6EFD               	movwf	tosl,c
  2036  000DCC  50DE               	movf	postinc2,w,c
  2037  000DCE  6EFE               	movwf	tosh,c
  2038  000DD0  50F8               	movf	tblptru,w,c
  2039  000DD2  6EFF               	movwf	tosu,c
  2040  000DD4  50FA               	movf	pclath,w,c
  2041  000DD6  0EAE               	movlw	low _rxMsgData
  2042  000DD8  0100               	movlb	0	; () banked
  2043  000DDA  6FCF               	movwf	GroupDAC@data& (0+255),b
  2044  000DDC  0E01               	movlw	high _rxMsgData
  2045  000DDE  6FD0               	movwf	(GroupDAC@data+1)& (0+255),b
  2046  000DE0  51E2               	movf	_request& (0+255),w,b
  2047  000DE2  0012               	return		;indir
  2048  000DE4                     u6339:
  2049                           
  2050                           ;EusartApp.c: 138: cState = START_RX_MESSAGE_READ;
  2051  000DE4  0E00               	movlw	0
  2052  000DE6  0100               	movlb	0	; () banked
  2053  000DE8  6FE4               	movwf	_cState& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;EusartApp.c: 140: }
  2057                           
  2058                           ;EusartApp.c: 139: break;
  2059  000DEA  0012               	return	
  2060  000DEC                     l172:
  2061                           
  2062                           ; BSR set to: 0
  2063  000DEC  0100               	movlb	0	; () banked
  2064  000DEE  51E4               	movf	_cState& (0+255),w,b
  2065                           
  2066                           ; Switch size 1, requested type "space"
  2067                           ; Number of cases is 8, Range of values is 0 to 7
  2068                           ; switch strategies available:
  2069                           ; Name         Instructions Cycles
  2070                           ; simple_byte           25    13 (average)
  2071                           ;	Chosen strategy is simple_byte
  2072  000DF0  0A00               	xorlw	0	; case 0
  2073  000DF2  B4D8               	btfsc	status,2,c
  2074  000DF4  D71C               	goto	l173
  2075  000DF6  0A01               	xorlw	1	; case 1
  2076  000DF8  B4D8               	btfsc	status,2,c
  2077  000DFA  D720               	goto	l176
  2078  000DFC  0A03               	xorlw	3	; case 2
  2079  000DFE  B4D8               	btfsc	status,2,c
  2080  000E00  D736               	goto	l181
  2081  000E02  0A01               	xorlw	1	; case 3
  2082  000E04  B4D8               	btfsc	status,2,c
  2083  000E06  D73F               	goto	l183
  2084  000E08  0A07               	xorlw	7	; case 4
  2085  000E0A  B4D8               	btfsc	status,2,c
  2086  000E0C  D748               	goto	l185
  2087  000E0E  0A01               	xorlw	1	; case 5
  2088  000E10  B4D8               	btfsc	status,2,c
  2089  000E12  D757               	goto	l189
  2090  000E14  0A03               	xorlw	3	; case 6
  2091  000E16  B4D8               	btfsc	status,2,c
  2092  000E18  D79D               	goto	l194
  2093  000E1A  0A01               	xorlw	1	; case 7
  2094  000E1C  A4D8               	btfss	status,2,c
  2095  000E1E  0012               	return	
  2096  000E20  D7B8               	goto	l198
  2097  000E22                     __end_of_readUartMessage:
  2098                           	opt stack 0
  2099                           tosu	equ	0xFFF
  2100                           tosh	equ	0xFFE
  2101                           tosl	equ	0xFFD
  2102                           pclath	equ	0xFFA
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           indf2	equ	0xFDF
  2112                           postinc2	equ	0xFDE
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _InitRxMessageParams *****************
  2118 ;; Defined at:
  2119 ;;		line 143 in file "EusartApp.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2133 ;;      Params:         0       0       0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0
  2136 ;;      Totals:         0       0       0       0       0       0       0
  2137 ;;Total ram usage:        0 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    5
  2140 ;; This function calls:
  2141 ;;		_ZeroArray
  2142 ;; This function is called by:
  2143 ;;		_readUartMessage
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text2
  2148  002F4C                     __ptext2:
  2149                           	opt stack 0
  2150  002F4C                     _InitRxMessageParams:
  2151                           	opt stack 24
  2152                           
  2153                           ;EusartApp.c: 147: dataSize = 0;
  2154                           
  2155                           ;incstack = 0
  2156  002F4C  0E00               	movlw	0
  2157  002F4E  0100               	movlb	0	; () banked
  2158  002F50  6FE1               	movwf	_dataSize& (0+255),b
  2159                           
  2160                           ;EusartApp.c: 148: crcCalc = 0;
  2161  002F52  0E00               	movlw	0
  2162  002F54  6FDF               	movwf	_crcCalc& (0+255),b
  2163                           
  2164                           ;EusartApp.c: 149: crcGiven = 0;
  2165  002F56  0E00               	movlw	0
  2166  002F58  6FDE               	movwf	_crcGiven& (0+255),b
  2167                           
  2168                           ;EusartApp.c: 150: msgCount = 0;
  2169  002F5A  0E00               	movlw	0
  2170  002F5C  6FDD               	movwf	_msgCount& (0+255),b
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;EusartApp.c: 151: ZeroArray(rxMsgQueue, (0x14));
  2174  002F5E  0EC2               	movlw	low _rxMsgQueue
  2175  002F60  6E20               	movwf	ZeroArray@array,c
  2176  002F62  0E01               	movlw	high _rxMsgQueue
  2177  002F64  6E21               	movwf	ZeroArray@array+1,c
  2178  002F66  0E00               	movlw	0
  2179  002F68  6E23               	movwf	ZeroArray@size+1,c
  2180  002F6A  0E14               	movlw	20
  2181  002F6C  6E22               	movwf	ZeroArray@size,c
  2182  002F6E  EC85  F018         	call	_ZeroArray
  2183  002F72  0012               	return		;funcret
  2184  002F74                     __end_of_InitRxMessageParams:
  2185                           	opt stack 0
  2186                           tosu	equ	0xFFF
  2187                           tosh	equ	0xFFE
  2188                           tosl	equ	0xFFD
  2189                           pclath	equ	0xFFA
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           postdec1	equ	0xFE5
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _GroupDAC *****************
  2205 ;; Defined at:
  2206 ;;		line 125 in file "MessageFunctions.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  request         1    wreg     enum E12
  2209 ;;  data            2  111[BANK0 ] PTR unsigned char 
  2210 ;;		 -> rxMsgData(20), 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  request         1  113[BANK0 ] enum E12
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2222 ;;      Params:         0       2       0       0       0       0       0
  2223 ;;      Locals:         0       1       0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0
  2225 ;;      Totals:         0       3       0       0       0       0       0
  2226 ;;Total ram usage:        3 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    9
  2229 ;; This function calls:
  2230 ;;		_DacSetValue
  2231 ;; This function is called by:
  2232 ;;		_readUartMessage
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text3
  2237  003054                     __ptext3:
  2238                           	opt stack 0
  2239  003054                     _GroupDAC:
  2240                           	opt stack 20
  2241                           
  2242                           ;incstack = 0
  2243                           ;GroupDAC@request stored from wreg
  2244  003054  0100               	movlb	0	; () banked
  2245  003056  6FD1               	movwf	GroupDAC@request& (0+255),b
  2246                           
  2247                           ;MessageFunctions.c: 127: switch (request)
  2248  003058  D007               	goto	l1105
  2249  00305A                     
  2250                           ;MessageFunctions.c: 130: DacSetValue(data);
  2251  00305A  C0CF  F0B1         	movff	GroupDAC@data,DacSetValue@data
  2252  00305E  C0D0  F0B2         	movff	GroupDAC@data+1,DacSetValue@data+1
  2253  003062  EC14  F005         	call	_DacSetValue	;wreg free
  2254                           
  2255                           ;MessageFunctions.c: 135: }
  2256                           
  2257                           ;MessageFunctions.c: 134: break;
  2258                           
  2259                           ;MessageFunctions.c: 133: default:
  2260                           
  2261                           ;MessageFunctions.c: 131: break;
  2262  003066  0012               	return	
  2263  003068                     l1105:
  2264  003068  0100               	movlb	0	; () banked
  2265  00306A  51D1               	movf	GroupDAC@request& (0+255),w,b
  2266                           
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 1, Range of values is 97 to 97
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte            4     3 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  00306C  0A61               	xorlw	97	; case 97
  2274  00306E  A4D8               	btfss	status,2,c
  2275  003070  0012               	return	
  2276  003072  D7F3               	goto	l1106
  2277  003074                     __end_of_GroupDAC:
  2278                           	opt stack 0
  2279                           tosu	equ	0xFFF
  2280                           tosh	equ	0xFFE
  2281                           tosl	equ	0xFFD
  2282                           pclath	equ	0xFFA
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           postinc0	equ	0xFEE
  2288                           wreg	equ	0xFE8
  2289                           postdec1	equ	0xFE5
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           fsr2h	equ	0xFDA
  2294                           fsr2l	equ	0xFD9
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _GroupFlashMemory *****************
  2298 ;; Defined at:
  2299 ;;		line 104 in file "MessageFunctions.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  request         1    wreg     enum E12
  2302 ;;  data            2  111[BANK0 ] PTR unsigned char 
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;  request         1  114[BANK0 ] enum E12
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2314 ;;      Params:         0       2       0       0       0       0       0
  2315 ;;      Locals:         0       1       0       0       0       0       0
  2316 ;;      Temps:          0       1       0       0       0       0       0
  2317 ;;      Totals:         0       4       0       0       0       0       0
  2318 ;;Total ram usage:        4 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    7
  2321 ;; This function calls:
  2322 ;;		_FlashEreaseMem
  2323 ;;		_FlashReadCondition
  2324 ;;		_FlashReadUart
  2325 ;; This function is called by:
  2326 ;;		_readUartMessage
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text4
  2331  002A30                     __ptext4:
  2332                           	opt stack 0
  2333  002A30                     _GroupFlashMemory:
  2334                           	opt stack 22
  2335                           
  2336                           ;incstack = 0
  2337                           ;GroupFlashMemory@request stored from wreg
  2338  002A30  0100               	movlb	0	; () banked
  2339  002A32  6FD2               	movwf	GroupFlashMemory@request& (0+255),b
  2340                           
  2341                           ;MessageFunctions.c: 106: switch (request)
  2342  002A34  D013               	goto	l1096
  2343  002A36                     
  2344                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2345  002A36  EC0A  F014         	call	_FlashEreaseMem	;wreg free
  2346                           
  2347                           ;MessageFunctions.c: 110: break;
  2348  002A3A  0012               	return	
  2349  002A3C                     
  2350                           ;MessageFunctions.c: 113: FlashReadCondition();
  2351  002A3C  EC35  F00F         	call	_FlashReadCondition	;wreg free
  2352                           
  2353                           ;MessageFunctions.c: 114: break;
  2354  002A40  0012               	return	
  2355  002A42                     
  2356                           ;MessageFunctions.c: 117: FlashReadUart((int)data[0]);
  2357  002A42  C0CF  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2358  002A46  C0D0  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2359  002A4A  50DF               	movf	indf2,w,c
  2360  002A4C  0100               	movlb	0	; () banked
  2361  002A4E  6FD1               	movwf	??_GroupFlashMemory& (0+255),b
  2362  002A50  51D1               	movf	??_GroupFlashMemory& (0+255),w,b
  2363  002A52  6E24               	movwf	FlashReadUart@numOfSampleToRead,c
  2364  002A54  6A25               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2365  002A56  EC39  F003         	call	_FlashReadUart	;wreg free
  2366                           
  2367                           ;MessageFunctions.c: 122: }
  2368                           
  2369                           ;MessageFunctions.c: 121: break;
  2370                           
  2371                           ;MessageFunctions.c: 120: default:
  2372                           
  2373                           ;MessageFunctions.c: 118: break;
  2374  002A5A  0012               	return	
  2375  002A5C                     l1096:
  2376  002A5C  0100               	movlb	0	; () banked
  2377  002A5E  51D2               	movf	GroupFlashMemory@request& (0+255),w,b
  2378                           
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 3, Range of values is 81 to 83
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           10     6 (average)
  2384                           ;	Chosen strategy is simple_byte
  2385  002A60  0A51               	xorlw	81	; case 81
  2386  002A62  B4D8               	btfsc	status,2,c
  2387  002A64  D7E8               	goto	l1097
  2388  002A66  0A03               	xorlw	3	; case 82
  2389  002A68  B4D8               	btfsc	status,2,c
  2390  002A6A  D7E8               	goto	l1099
  2391  002A6C  0A01               	xorlw	1	; case 83
  2392  002A6E  A4D8               	btfss	status,2,c
  2393  002A70  0012               	return	
  2394  002A72  D7E7               	goto	l1100
  2395  002A74                     __end_of_GroupFlashMemory:
  2396                           	opt stack 0
  2397                           tosu	equ	0xFFF
  2398                           tosh	equ	0xFFE
  2399                           tosl	equ	0xFFD
  2400                           pclath	equ	0xFFA
  2401                           tblptru	equ	0xFF8
  2402                           tblptrh	equ	0xFF7
  2403                           tblptrl	equ	0xFF6
  2404                           tablat	equ	0xFF5
  2405                           postinc0	equ	0xFEE
  2406                           wreg	equ	0xFE8
  2407                           postdec1	equ	0xFE5
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _GroupAdc *****************
  2416 ;; Defined at:
  2417 ;;		line 67 in file "MessageFunctions.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  request         1    wreg     enum E12
  2420 ;;  data            2  111[BANK0 ] PTR unsigned char 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  request         1  113[BANK0 ] enum E12
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2432 ;;      Params:         0       2       0       0       0       0       0
  2433 ;;      Locals:         0       1       0       0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0
  2435 ;;      Totals:         0       3       0       0       0       0       0
  2436 ;;Total ram usage:        3 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    7
  2439 ;; This function calls:
  2440 ;;		_SetAdcOperationMode
  2441 ;;		_SetChannelMode
  2442 ;;		_SetConversionResultFormat
  2443 ;; This function is called by:
  2444 ;;		_readUartMessage
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text5
  2449  0029A0                     __ptext5:
  2450                           	opt stack 0
  2451  0029A0                     _GroupAdc:
  2452                           	opt stack 22
  2453                           
  2454                           ;incstack = 0
  2455                           ;GroupAdc@request stored from wreg
  2456  0029A0  0100               	movlb	0	; () banked
  2457  0029A2  6FD1               	movwf	GroupAdc@request& (0+255),b
  2458                           
  2459                           ;MessageFunctions.c: 69: switch (request)
  2460  0029A4  D015               	goto	l1079
  2461  0029A6                     
  2462                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2463  0029A6  C0CF  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2464  0029AA  C0D0  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2465  0029AE  EC17  F019         	call	_SetAdcOperationMode	;wreg free
  2466                           
  2467                           ;MessageFunctions.c: 73: break;
  2468  0029B2  0012               	return	
  2469  0029B4                     
  2470                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2471  0029B4  C0CF  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2472  0029B8  C0D0  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2473  0029BC  EC49  F017         	call	_SetChannelMode	;wreg free
  2474                           
  2475                           ;MessageFunctions.c: 77: break;
  2476  0029C0  0012               	return	
  2477  0029C2                     
  2478                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2479  0029C2  C0CF  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2480  0029C6  C0D0  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2481  0029CA  EC11  F019         	call	_SetConversionResultFormat	;wreg free
  2482                           
  2483                           ;MessageFunctions.c: 85: }
  2484                           
  2485                           ;MessageFunctions.c: 84: break;
  2486                           
  2487                           ;MessageFunctions.c: 83: default:
  2488                           
  2489                           ;MessageFunctions.c: 81: break;
  2490  0029CE  0012               	return	
  2491  0029D0                     l1079:
  2492  0029D0  0100               	movlb	0	; () banked
  2493  0029D2  51D1               	movf	GroupAdc@request& (0+255),w,b
  2494                           
  2495                           ; Switch size 1, requested type "space"
  2496                           ; Number of cases is 3, Range of values is 49 to 51
  2497                           ; switch strategies available:
  2498                           ; Name         Instructions Cycles
  2499                           ; simple_byte           10     6 (average)
  2500                           ;	Chosen strategy is simple_byte
  2501  0029D4  0A31               	xorlw	49	; case 49
  2502  0029D6  B4D8               	btfsc	status,2,c
  2503  0029D8  D7E6               	goto	l1080
  2504  0029DA  0A03               	xorlw	3	; case 50
  2505  0029DC  B4D8               	btfsc	status,2,c
  2506  0029DE  D7EA               	goto	l1082
  2507  0029E0  0A01               	xorlw	1	; case 51
  2508  0029E2  A4D8               	btfss	status,2,c
  2509  0029E4  0012               	return	
  2510  0029E6  D7ED               	goto	l1083
  2511  0029E8                     __end_of_GroupAdc:
  2512                           	opt stack 0
  2513                           tosu	equ	0xFFF
  2514                           tosh	equ	0xFFE
  2515                           tosl	equ	0xFFD
  2516                           pclath	equ	0xFFA
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           postdec1	equ	0xFE5
  2524                           fsr1l	equ	0xFE1
  2525                           indf2	equ	0xFDF
  2526                           postinc2	equ	0xFDE
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531 ;; *************** function _GroupStatusAndVersion *****************
  2532 ;; Defined at:
  2533 ;;		line 38 in file "MessageFunctions.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  request         1    wreg     enum E12
  2536 ;;  data            2  111[BANK0 ] PTR unsigned char 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  request         1  113[BANK0 ] enum E12
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2548 ;;      Params:         0       2       0       0       0       0       0
  2549 ;;      Locals:         0       1       0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0       0       0
  2551 ;;      Totals:         0       3       0       0       0       0       0
  2552 ;;Total ram usage:        3 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    7
  2555 ;; This function calls:
  2556 ;;		_GetCpldFwVersion
  2557 ;;		_GetMcuFwVersion
  2558 ;;		_GetMcuRunTime
  2559 ;;		_SetCpldFwVersion
  2560 ;;		_SetMcuFwVersion
  2561 ;; This function is called by:
  2562 ;;		_readUartMessage
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text6
  2567  0027BC                     __ptext6:
  2568                           	opt stack 0
  2569  0027BC                     _GroupStatusAndVersion:
  2570                           	opt stack 22
  2571                           
  2572                           ;incstack = 0
  2573                           ;GroupStatusAndVersion@request stored from wreg
  2574  0027BC  0100               	movlb	0	; () banked
  2575  0027BE  6FD1               	movwf	GroupStatusAndVersion@request& (0+255),b
  2576                           
  2577                           ;MessageFunctions.c: 40: switch (request)
  2578  0027C0  D017               	goto	l1068
  2579  0027C2                     
  2580                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2581  0027C2  EC02  F012         	call	_GetMcuFwVersion	;wreg free
  2582                           
  2583                           ;MessageFunctions.c: 44: break;
  2584  0027C6  0012               	return	
  2585  0027C8                     
  2586                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2587  0027C8  C0CF  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2588  0027CC  C0D0  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2589  0027D0  EC76  F016         	call	_SetMcuFwVersion	;wreg free
  2590                           
  2591                           ;MessageFunctions.c: 48: break;
  2592  0027D4  0012               	return	
  2593  0027D6                     
  2594                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2595  0027D6  ECE9  F010         	call	_GetCpldFwVersion	;wreg free
  2596                           
  2597                           ;MessageFunctions.c: 52: break;
  2598  0027DA  0012               	return	
  2599  0027DC                     
  2600                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2601  0027DC  C0CF  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2602  0027E0  C0D0  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2603  0027E4  EC9F  F015         	call	_SetCpldFwVersion	;wreg free
  2604                           
  2605                           ;MessageFunctions.c: 56: break;
  2606  0027E8  0012               	return	
  2607  0027EA                     
  2608                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2609  0027EA  EC84  F00D         	call	_GetMcuRunTime	;wreg free
  2610                           
  2611                           ;MessageFunctions.c: 64: }
  2612                           
  2613                           ;MessageFunctions.c: 63: break;
  2614                           
  2615                           ;MessageFunctions.c: 62: default:
  2616                           
  2617                           ;MessageFunctions.c: 60: break;
  2618  0027EE  0012               	return	
  2619  0027F0                     l1068:
  2620  0027F0  0100               	movlb	0	; () banked
  2621  0027F2  51D1               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2622                           
  2623                           ; Switch size 1, requested type "space"
  2624                           ; Number of cases is 5, Range of values is 33 to 37
  2625                           ; switch strategies available:
  2626                           ; Name         Instructions Cycles
  2627                           ; simple_byte           16     9 (average)
  2628                           ;	Chosen strategy is simple_byte
  2629  0027F4  0A21               	xorlw	33	; case 33
  2630  0027F6  B4D8               	btfsc	status,2,c
  2631  0027F8  D7F8               	goto	l1074
  2632  0027FA  0A03               	xorlw	3	; case 34
  2633  0027FC  B4D8               	btfsc	status,2,c
  2634  0027FE  D7E1               	goto	l1069
  2635  002800  0A01               	xorlw	1	; case 35
  2636  002802  B4D8               	btfsc	status,2,c
  2637  002804  D7E8               	goto	l1072
  2638  002806  0A07               	xorlw	7	; case 36
  2639  002808  B4D8               	btfsc	status,2,c
  2640  00280A  D7DE               	goto	l1071
  2641  00280C  0A01               	xorlw	1	; case 37
  2642  00280E  A4D8               	btfss	status,2,c
  2643  002810  0012               	return	
  2644  002812  D7E4               	goto	l1073
  2645  002814                     __end_of_GroupStatusAndVersion:
  2646                           	opt stack 0
  2647                           tosu	equ	0xFFF
  2648                           tosh	equ	0xFFE
  2649                           tosl	equ	0xFFD
  2650                           pclath	equ	0xFFA
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           postinc0	equ	0xFEE
  2656                           wreg	equ	0xFE8
  2657                           postdec1	equ	0xFE5
  2658                           fsr1l	equ	0xFE1
  2659                           indf2	equ	0xFDF
  2660                           postinc2	equ	0xFDE
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _GroupControlMcu *****************
  2666 ;; Defined at:
  2667 ;;		line 11 in file "MessageFunctions.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  request         1    wreg     enum E12
  2670 ;;  data            3  111[BANK0 ] PTR unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  request         1  114[BANK0 ] enum E12
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2682 ;;      Params:         0       2       0       0       0       0       0
  2683 ;;      Locals:         0       1       0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0
  2685 ;;      Totals:         0       3       0       0       0       0       0
  2686 ;;Total ram usage:        3 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    7
  2689 ;; This function calls:
  2690 ;;		_ResetCpld
  2691 ;;		_ResetMcu
  2692 ;;		_testLeds
  2693 ;; This function is called by:
  2694 ;;		_readUartMessage
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text7
  2699  002C04                     __ptext7:
  2700                           	opt stack 0
  2701  002C04                     _GroupControlMcu:
  2702                           	opt stack 22
  2703                           
  2704                           ;incstack = 0
  2705                           ;GroupControlMcu@request stored from wreg
  2706  002C04  0100               	movlb	0	; () banked
  2707  002C06  6FD2               	movwf	GroupControlMcu@request& (0+255),b
  2708                           
  2709                           ;MessageFunctions.c: 13: switch (request)
  2710  002C08  D009               	goto	l1057
  2711  002C0A                     
  2712                           ;MessageFunctions.c: 16: testLeds();
  2713  002C0A  ECB9  F012         	call	_testLeds	;wreg free
  2714                           
  2715                           ;MessageFunctions.c: 17: break;
  2716  002C0E  0012               	return	
  2717  002C10                     
  2718                           ;MessageFunctions.c: 20: ResetMcu();
  2719  002C10  ECEF  F018         	call	_ResetMcu	;wreg free
  2720                           
  2721                           ;MessageFunctions.c: 21: break;
  2722  002C14  0012               	return	
  2723  002C16                     
  2724                           ;MessageFunctions.c: 24: ResetCpld();
  2725  002C16  EC0B  F019         	call	_ResetCpld	;wreg free
  2726                           
  2727                           ;MessageFunctions.c: 35: }
  2728                           
  2729                           ;MessageFunctions.c: 34: break;
  2730                           
  2731                           ;MessageFunctions.c: 33: default:
  2732                           
  2733                           ;MessageFunctions.c: 31: break;
  2734                           
  2735                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2736                           
  2737                           ;MessageFunctions.c: 28: break;
  2738                           
  2739                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2740                           
  2741                           ;MessageFunctions.c: 25: break;
  2742  002C1A  0012               	return	
  2743  002C1C                     l1057:
  2744  002C1C  0100               	movlb	0	; () banked
  2745  002C1E  51D2               	movf	GroupControlMcu@request& (0+255),w,b
  2746                           
  2747                           ; Switch size 1, requested type "space"
  2748                           ; Number of cases is 5, Range of values is 17 to 21
  2749                           ; switch strategies available:
  2750                           ; Name         Instructions Cycles
  2751                           ; simple_byte           16     9 (average)
  2752                           ;	Chosen strategy is simple_byte
  2753  002C20  0A11               	xorlw	17	; case 17
  2754  002C22  B4D8               	btfsc	status,2,c
  2755  002C24  D7F5               	goto	l1060
  2756  002C26  0A03               	xorlw	3	; case 18
  2757  002C28  B4D8               	btfsc	status,2,c
  2758  002C2A  D7F5               	goto	l1061
  2759  002C2C  0A01               	xorlw	1	; case 19
  2760  002C2E  B4D8               	btfsc	status,2,c
  2761  002C30  0012               	return	
  2762  002C32  0A07               	xorlw	7	; case 20
  2763  002C34  B4D8               	btfsc	status,2,c
  2764  002C36  0012               	return	
  2765  002C38  0A01               	xorlw	1	; case 21
  2766  002C3A  A4D8               	btfss	status,2,c
  2767  002C3C  0012               	return	
  2768  002C3E  D7E5               	goto	l1058
  2769  002C40                     __end_of_GroupControlMcu:
  2770                           	opt stack 0
  2771                           tosu	equ	0xFFF
  2772                           tosh	equ	0xFFE
  2773                           tosl	equ	0xFFD
  2774                           pclath	equ	0xFFA
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           postdec1	equ	0xFE5
  2782                           fsr1l	equ	0xFE1
  2783                           indf2	equ	0xFDF
  2784                           postinc2	equ	0xFDE
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _GroupSynthesizers *****************
  2790 ;; Defined at:
  2791 ;;		line 87 in file "MessageFunctions.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  request         1    wreg     enum E12
  2794 ;;  data            2  111[BANK0 ] PTR unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  request         1  113[BANK0 ] enum E12
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       2       0       0       0       0       0
  2807 ;;      Locals:         0       1       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         0       3       0       0       0       0       0
  2810 ;;Total ram usage:        3 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    9
  2813 ;; This function calls:
  2814 ;;		_UpdateRxFreq
  2815 ;;		_UpdateTxFreq
  2816 ;; This function is called by:
  2817 ;;		_readUartMessage
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text8
  2822  002DC4                     __ptext8:
  2823                           	opt stack 0
  2824  002DC4                     _GroupSynthesizers:
  2825                           	opt stack 20
  2826                           
  2827                           ;incstack = 0
  2828                           ;GroupSynthesizers@request stored from wreg
  2829  002DC4  0100               	movlb	0	; () banked
  2830  002DC6  6FD1               	movwf	GroupSynthesizers@request& (0+255),b
  2831                           
  2832                           ;MessageFunctions.c: 89: switch (request)
  2833  002DC8  D00E               	goto	l1088
  2834  002DCA                     
  2835                           ;MessageFunctions.c: 92: UpdateTxFreq(data);
  2836  002DCA  C0CF  F0B1         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2837  002DCE  C0D0  F0B2         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2838  002DD2  EC77  F00A         	call	_UpdateTxFreq	;wreg free
  2839                           
  2840                           ;MessageFunctions.c: 93: break;
  2841  002DD6  0012               	return	
  2842  002DD8                     
  2843                           ;MessageFunctions.c: 96: UpdateRxFreq(data);
  2844  002DD8  C0CF  F02C         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2845  002DDC  C0D0  F02D         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2846  002DE0  EC76  F018         	call	_UpdateRxFreq	;wreg free
  2847                           
  2848                           ;MessageFunctions.c: 101: }
  2849                           
  2850                           ;MessageFunctions.c: 100: break;
  2851                           
  2852                           ;MessageFunctions.c: 99: default:
  2853                           
  2854                           ;MessageFunctions.c: 97: break;
  2855  002DE4  0012               	return	
  2856  002DE6                     l1088:
  2857  002DE6  0100               	movlb	0	; () banked
  2858  002DE8  51D1               	movf	GroupSynthesizers@request& (0+255),w,b
  2859                           
  2860                           ; Switch size 1, requested type "space"
  2861                           ; Number of cases is 2, Range of values is 65 to 66
  2862                           ; switch strategies available:
  2863                           ; Name         Instructions Cycles
  2864                           ; simple_byte            7     4 (average)
  2865                           ;	Chosen strategy is simple_byte
  2866  002DEA  0A41               	xorlw	65	; case 65
  2867  002DEC  B4D8               	btfsc	status,2,c
  2868  002DEE  D7ED               	goto	l1089
  2869  002DF0  0A03               	xorlw	3	; case 66
  2870  002DF2  A4D8               	btfss	status,2,c
  2871  002DF4  0012               	return	
  2872  002DF6  D7F0               	goto	l1091
  2873  002DF8                     __end_of_GroupSynthesizers:
  2874                           	opt stack 0
  2875                           tosu	equ	0xFFF
  2876                           tosh	equ	0xFFE
  2877                           tosl	equ	0xFFD
  2878                           pclath	equ	0xFFA
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postdec1	equ	0xFE5
  2886                           fsr1l	equ	0xFE1
  2887                           indf2	equ	0xFDF
  2888                           postinc2	equ	0xFDE
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _UpdateTxFreq *****************
  2894 ;; Defined at:
  2895 ;;		line 45 in file "SyntApp.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  data            2   81[BANK0 ] PTR unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  idx             1   95[BANK0 ] unsigned char 
  2900 ;;  freqVal         4   91[BANK0 ] unsigned long 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       2       0       0       0       0       0
  2911 ;;      Locals:         0      11       0       0       0       0       0
  2912 ;;      Temps:          0       2       0       0       0       0       0
  2913 ;;      Totals:         0      15       0       0       0       0       0
  2914 ;;Total ram usage:       15 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    8
  2917 ;; This function calls:
  2918 ;;		_SWSPI_send_word
  2919 ;;		_SendAckMessage
  2920 ;;		___awtoft
  2921 ;;		___ftadd
  2922 ;;		___ftmul
  2923 ;;		___fttol
  2924 ;;		___lbtoft
  2925 ;;		___lltoft
  2926 ;;		_pow
  2927 ;; This function is called by:
  2928 ;;		_GroupSynthesizers
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text9
  2933  0014EE                     __ptext9:
  2934                           	opt stack 0
  2935  0014EE                     _UpdateTxFreq:
  2936                           	opt stack 20
  2937                           
  2938                           ;SyntApp.c: 49: uint32_t freqVal = 0;
  2939                           
  2940                           ;incstack = 0
  2941  0014EE  0E00               	movlw	0
  2942  0014F0  0100               	movlb	0	; () banked
  2943  0014F2  6FBB               	movwf	UpdateTxFreq@freqVal& (0+255),b
  2944  0014F4  0E00               	movlw	0
  2945  0014F6  6FBC               	movwf	(UpdateTxFreq@freqVal+1)& (0+255),b
  2946  0014F8  0E00               	movlw	0
  2947  0014FA  6FBD               	movwf	(UpdateTxFreq@freqVal+2)& (0+255),b
  2948  0014FC  0E00               	movlw	0
  2949  0014FE  6FBE               	movwf	(UpdateTxFreq@freqVal+3)& (0+255),b
  2950                           
  2951                           ;SyntApp.c: 51: for(uint8_t idx = 0; idx < 4; idx++)
  2952  001500  0E00               	movlw	0
  2953  001502  6FBF               	movwf	UpdateTxFreq@idx& (0+255),b
  2954  001504                     l6688:
  2955                           
  2956                           ; BSR set to: 0
  2957  001504  0E03               	movlw	3
  2958  001506  65BF               	cpfsgt	UpdateTxFreq@idx& (0+255),b
  2959  001508  D001               	goto	l487
  2960  00150A  D073               	goto	u5990
  2961  00150C                     l487:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;SyntApp.c: 52: {
  2965                           ;SyntApp.c: 53: freqVal += data[idx]*pow(10,4 - idx - 1);
  2966                           
  2967                           ; BSR set to: 0
  2968  00150C  51BF               	movf	UpdateTxFreq@idx& (0+255),w,b
  2969  00150E  6FB3               	movwf	??_UpdateTxFreq& (0+255),b
  2970  001510  6BB4               	clrf	(??_UpdateTxFreq+1)& (0+255),b
  2971  001512  0E01               	movlw	1
  2972  001514  27B3               	addwf	??_UpdateTxFreq& (0+255),f,b
  2973  001516  0E00               	movlw	0
  2974  001518  23B4               	addwfc	(??_UpdateTxFreq+1)& (0+255),f,b
  2975  00151A  1FB3               	comf	??_UpdateTxFreq& (0+255),f,b
  2976  00151C  1FB4               	comf	(??_UpdateTxFreq+1)& (0+255),f,b
  2977  00151E  4BB3               	infsnz	??_UpdateTxFreq& (0+255),f,b
  2978  001520  2BB4               	incf	(??_UpdateTxFreq+1)& (0+255),f,b
  2979  001522  0E04               	movlw	4
  2980  001524  25B3               	addwf	??_UpdateTxFreq& (0+255),w,b
  2981  001526  6E20               	movwf	___awtoft@c,c
  2982  001528  0E00               	movlw	0
  2983  00152A  21B4               	addwfc	(??_UpdateTxFreq+1)& (0+255),w,b
  2984  00152C  6E21               	movwf	___awtoft@c+1,c
  2985  00152E  EC3E  F016         	call	___awtoft	;wreg free
  2986  001532  C020  F0B5         	movff	?___awtoft,_UpdateTxFreq$3074
  2987  001536  C021  F0B6         	movff	?___awtoft+1,_UpdateTxFreq$3074+1
  2988  00153A  C022  F0B7         	movff	?___awtoft+2,_UpdateTxFreq$3074+2
  2989                           
  2990                           ;SyntApp.c: 52: {
  2991                           ;SyntApp.c: 53: freqVal += data[idx]*pow(10,4 - idx - 1);
  2992  00153E  C0B5  F0A3         	movff	_UpdateTxFreq$3074,pow@y
  2993  001542  C0B6  F0A4         	movff	_UpdateTxFreq$3074+1,pow@y+1
  2994  001546  C0B7  F0A5         	movff	_UpdateTxFreq$3074+2,pow@y+2
  2995  00154A  0E00               	movlw	0
  2996  00154C  0100               	movlb	0	; () banked
  2997  00154E  6FA0               	movwf	pow@x& (0+255),b
  2998  001550  0E20               	movlw	32
  2999  001552  6FA1               	movwf	(pow@x+1)& (0+255),b
  3000  001554  0E41               	movlw	65
  3001  001556  6FA2               	movwf	(pow@x+2)& (0+255),b
  3002  001558  ECB9  F009         	call	_pow	;wreg free
  3003  00155C  C0A0  F0B8         	movff	?_pow,_UpdateTxFreq$3075
  3004  001560  C0A1  F0B9         	movff	?_pow+1,_UpdateTxFreq$3075+1
  3005  001564  C0A2  F0BA         	movff	?_pow+2,_UpdateTxFreq$3075+2
  3006                           
  3007                           ;SyntApp.c: 52: {
  3008                           ;SyntApp.c: 53: freqVal += data[idx]*pow(10,4 - idx - 1);
  3009  001568  C0B8  F02C         	movff	_UpdateTxFreq$3075,___ftmul@f2
  3010  00156C  C0B9  F02D         	movff	_UpdateTxFreq$3075+1,___ftmul@f2+1
  3011  001570  C0BA  F02E         	movff	_UpdateTxFreq$3075+2,___ftmul@f2+2
  3012  001574  0100               	movlb	0	; () banked
  3013  001576  51BF               	movf	UpdateTxFreq@idx& (0+255),w,b
  3014  001578  0D01               	mullw	1
  3015  00157A  50F3               	movf	prodl,w,c
  3016  00157C  25B1               	addwf	UpdateTxFreq@data& (0+255),w,b
  3017  00157E  6ED9               	movwf	fsr2l,c
  3018  001580  50F4               	movf	prodh,w,c
  3019  001582  21B2               	addwfc	(UpdateTxFreq@data+1)& (0+255),w,b
  3020  001584  6EDA               	movwf	fsr2h,c
  3021  001586  50DF               	movf	indf2,w,c
  3022  001588  ECF4  F017         	call	___lbtoft
  3023  00158C  C020  F029         	movff	?___lbtoft,___ftmul@f1
  3024  001590  C021  F02A         	movff	?___lbtoft+1,___ftmul@f1+1
  3025  001594  C022  F02B         	movff	?___lbtoft+2,___ftmul@f1+2
  3026  001598  EC95  F00C         	call	___ftmul	;wreg free
  3027  00159C  C029  F06C         	movff	?___ftmul,___ftadd@f2
  3028  0015A0  C02A  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  3029  0015A4  C02B  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  3030  0015A8  C0BB  F020         	movff	UpdateTxFreq@freqVal,___lltoft@c
  3031  0015AC  C0BC  F021         	movff	UpdateTxFreq@freqVal+1,___lltoft@c+1
  3032  0015B0  C0BD  F022         	movff	UpdateTxFreq@freqVal+2,___lltoft@c+2
  3033  0015B4  C0BE  F023         	movff	UpdateTxFreq@freqVal+3,___lltoft@c+3
  3034  0015B8  ECB0  F013         	call	___lltoft	;wreg free
  3035  0015BC  C020  F069         	movff	?___lltoft,___ftadd@f1
  3036  0015C0  C021  F06A         	movff	?___lltoft+1,___ftadd@f1+1
  3037  0015C4  C022  F06B         	movff	?___lltoft+2,___ftadd@f1+2
  3038  0015C8  ECE2  F008         	call	___ftadd	;wreg free
  3039  0015CC  C069  F078         	movff	?___ftadd,___fttol@f1
  3040  0015D0  C06A  F079         	movff	?___ftadd+1,___fttol@f1+1
  3041  0015D4  C06B  F07A         	movff	?___ftadd+2,___fttol@f1+2
  3042  0015D8  EC19  F00C         	call	___fttol	;wreg free
  3043  0015DC  C078  F0BB         	movff	?___fttol,UpdateTxFreq@freqVal
  3044  0015E0  C079  F0BC         	movff	?___fttol+1,UpdateTxFreq@freqVal+1
  3045  0015E4  C07A  F0BD         	movff	?___fttol+2,UpdateTxFreq@freqVal+2
  3046  0015E8  C07B  F0BE         	movff	?___fttol+3,UpdateTxFreq@freqVal+3
  3047  0015EC  0100               	movlb	0	; () banked
  3048  0015EE  2BBF               	incf	UpdateTxFreq@idx& (0+255),f,b
  3049  0015F0  D789               	goto	l6688
  3050  0015F2                     u5990:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;SyntApp.c: 54: }
  3054                           ;SyntApp.c: 62: SWSPI_send_word(SYNTH_TX, 0x78, 0);
  3055                           
  3056                           ; BSR set to: 0
  3057  0015F2  0E78               	movlw	120
  3058  0015F4  6E1E               	movwf	SWSPI_send_word@data,c
  3059  0015F6  0E00               	movlw	0
  3060  0015F8  6E1F               	movwf	SWSPI_send_word@data+1,c
  3061  0015FA  0E00               	movlw	0
  3062  0015FC  6E20               	movwf	SWSPI_send_word@data+2,c
  3063  0015FE  0E00               	movlw	0
  3064  001600  6E21               	movwf	SWSPI_send_word@data+3,c
  3065  001602  0E00               	movlw	0
  3066  001604  6E22               	movwf	SWSPI_send_word@dataSize,c
  3067  001606  0E00               	movlw	0
  3068  001608  EC7E  F015         	call	_SWSPI_send_word
  3069                           
  3070                           ;SyntApp.c: 72: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3071  00160C  0E41               	movlw	65
  3072  00160E  6E24               	movwf	SendAckMessage@inRequest,c
  3073  001610  0E04               	movlw	4
  3074  001612  EC33  F014         	call	_SendAckMessage
  3075  001616  0012               	return		;funcret
  3076  001618                     __end_of_UpdateTxFreq:
  3077                           	opt stack 0
  3078                           tosu	equ	0xFFF
  3079                           tosh	equ	0xFFE
  3080                           tosl	equ	0xFFD
  3081                           pclath	equ	0xFFA
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           fsr2h	equ	0xFDA
  3095                           fsr2l	equ	0xFD9
  3096                           status	equ	0xFD8
  3097                           
  3098 ;; *************** function _SWSPI_send_word *****************
  3099 ;; Defined at:
  3100 ;;		line 17 in file "SwSpiApp.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  phrType         1    wreg     enum E7525
  3103 ;;  data            4   29[COMRAM] unsigned long 
  3104 ;;  dataSize        1   33[COMRAM] unsigned char 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  phrType         1   34[COMRAM] enum E7525
  3107 ;;  idx             2   35[COMRAM] int 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         5       0       0       0       0       0       0
  3118 ;;      Locals:         3       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0
  3120 ;;      Totals:         8       0       0       0       0       0       0
  3121 ;;Total ram usage:        8 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    6
  3124 ;; This function calls:
  3125 ;;		_SWSPI_send_bits
  3126 ;;		_make8
  3127 ;; This function is called by:
  3128 ;;		_UpdateTxFreq
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text10
  3133  002AFC                     __ptext10:
  3134                           	opt stack 0
  3135  002AFC                     _SWSPI_send_word:
  3136                           	opt stack 21
  3137                           
  3138                           ;incstack = 0
  3139                           ;SWSPI_send_word@phrType stored from wreg
  3140  002AFC  6E23               	movwf	SWSPI_send_word@phrType,c
  3141                           
  3142                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  3143  002AFE  9EF2               	bcf	intcon,7,c	;volatile
  3144                           
  3145                           ;SwSpiApp.c: 21: for(int idx = dataSize + 1; idx > 0; idx--)
  3146  002B00  0E01               	movlw	1
  3147  002B02  2422               	addwf	SWSPI_send_word@dataSize,w,c
  3148  002B04  6E24               	movwf	SWSPI_send_word@idx,c
  3149  002B06  6A25               	clrf	SWSPI_send_word@idx+1,c
  3150  002B08  0E00               	movlw	0
  3151  002B0A  2225               	addwfc	SWSPI_send_word@idx+1,f,c
  3152  002B0C  D00F               	goto	l6392
  3153  002B0E                     l6388:
  3154                           
  3155                           ;SwSpiApp.c: 22: {
  3156                           ;SwSpiApp.c: 23: SWSPI_send_bits(phrType, make8(data, idx - 1));
  3157  002B0E  C01E  F018         	movff	SWSPI_send_word@data,make8@data
  3158  002B12  C01F  F019         	movff	SWSPI_send_word@data+1,make8@data+1
  3159  002B16  0424               	decf	SWSPI_send_word@idx,w,c
  3160  002B18  6E1A               	movwf	make8@dataLocation,c
  3161  002B1A  EC30  F017         	call	_make8	;wreg free
  3162  002B1E  6E1B               	movwf	SWSPI_send_bits@data,c
  3163  002B20  5023               	movf	SWSPI_send_word@phrType,w,c
  3164  002B22  ECAB  F014         	call	_SWSPI_send_bits
  3165  002B26  0624               	decf	SWSPI_send_word@idx,f,c
  3166  002B28  A0D8               	btfss	status,0,c
  3167  002B2A  0625               	decf	SWSPI_send_word@idx+1,f,c
  3168  002B2C                     l6392:
  3169  002B2C  BE25               	btfsc	SWSPI_send_word@idx+1,7,c
  3170  002B2E  D005               	goto	u5540
  3171  002B30  5025               	movf	SWSPI_send_word@idx+1,w,c
  3172  002B32  E1ED               	bnz	l6388
  3173  002B34  0424               	decf	SWSPI_send_word@idx,w,c
  3174  002B36  B0D8               	btfsc	status,0,c
  3175  002B38  D7EA               	goto	l542
  3176  002B3A                     u5540:
  3177                           
  3178                           ;SwSpiApp.c: 24: }
  3179                           ;SwSpiApp.c: 25: (INTCONbits.GIE = 1);
  3180  002B3A  8EF2               	bsf	intcon,7,c	;volatile
  3181  002B3C  0012               	return		;funcret
  3182  002B3E                     __end_of_SWSPI_send_word:
  3183                           	opt stack 0
  3184                           tosu	equ	0xFFF
  3185                           tosh	equ	0xFFE
  3186                           tosl	equ	0xFFD
  3187                           pclath	equ	0xFFA
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           intcon	equ	0xFF2
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           postdec1	equ	0xFE5
  3198                           fsr1l	equ	0xFE1
  3199                           indf2	equ	0xFDF
  3200                           postinc2	equ	0xFDE
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _SWSPI_send_bits *****************
  3206 ;; Defined at:
  3207 ;;		line 28 in file "SwSpiApp.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  phrType         1    wreg     enum E7525
  3210 ;;  data            1   26[COMRAM] unsigned char 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  phrType         1   28[COMRAM] enum E7525
  3213 ;;  count           1   27[COMRAM] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3223 ;;      Params:         1       0       0       0       0       0       0
  3224 ;;      Locals:         2       0       0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0
  3226 ;;      Totals:         3       0       0       0       0       0       0
  3227 ;;Total ram usage:        3 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    5
  3230 ;; This function calls:
  3231 ;;		_SwSpiClkLow
  3232 ;;		_SwSpiDataHigh
  3233 ;;		_SwSpiDataLow
  3234 ;;		_SwSpiSetClock
  3235 ;; This function is called by:
  3236 ;;		_SWSPI_send_word
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text11
  3241  002956                     __ptext11:
  3242                           	opt stack 0
  3243  002956                     _SWSPI_send_bits:
  3244                           	opt stack 21
  3245                           
  3246                           ;incstack = 0
  3247                           ;SWSPI_send_bits@phrType stored from wreg
  3248  002956  6E1D               	movwf	SWSPI_send_bits@phrType,c
  3249                           
  3250                           ;SwSpiApp.c: 30: uint8_t count;
  3251                           ;SwSpiApp.c: 31: for (count = 8; count ; count--, data <<= 1)
  3252  002958  0E08               	movlw	8
  3253  00295A  6E1C               	movwf	SWSPI_send_bits@count,c
  3254  00295C  D017               	goto	l547
  3255  00295E                     l548:
  3256                           
  3257                           ;SwSpiApp.c: 32: {
  3258                           ;SwSpiApp.c: 33: if (data & 0X80)
  3259  00295E  AE1B               	btfss	SWSPI_send_bits@data,7,c
  3260  002960  D004               	goto	l549
  3261                           
  3262                           ;SwSpiApp.c: 34: {
  3263                           ;SwSpiApp.c: 35: SwSpiDataHigh(phrType);
  3264  002962  501D               	movf	SWSPI_send_bits@phrType,w,c
  3265  002964  EC67  F018         	call	_SwSpiDataHigh
  3266                           
  3267                           ;SwSpiApp.c: 36: }
  3268  002968  D003               	goto	l550
  3269  00296A                     l549:
  3270                           
  3271                           ;SwSpiApp.c: 37: else
  3272                           ;SwSpiApp.c: 38: {
  3273                           ;SwSpiApp.c: 39: SwSpiDataLow(phrType);
  3274  00296A  501D               	movf	SWSPI_send_bits@phrType,w,c
  3275  00296C  EC58  F018         	call	_SwSpiDataLow
  3276  002970                     l550:
  3277                           
  3278                           ;SwSpiApp.c: 40: }
  3279                           ;SwSpiApp.c: 42: _delay((unsigned long)((10)*(8000000/4000000.0)));
  3280  002970  0E06               	movlw	6
  3281  002972                     u6497:
  3282  002972  2EE8               	decfsz	wreg,f,c
  3283  002974  D7FE               	bra	u6497
  3284  002976  D000               	nop2	
  3285                           
  3286                           ;SwSpiApp.c: 43: SwSpiSetClock(phrType);
  3287  002978  501D               	movf	SWSPI_send_bits@phrType,w,c
  3288  00297A  EC5C  F014         	call	_SwSpiSetClock
  3289                           
  3290                           ;SwSpiApp.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3291  00297E  0E10               	movlw	16
  3292  002980                     u6507:
  3293  002980  2EE8               	decfsz	wreg,f,c
  3294  002982  D7FE               	bra	u6507
  3295  002984  D000               	nop2	
  3296  002986  061C               	decf	SWSPI_send_bits@count,f,c
  3297  002988  90D8               	bcf	status,0,c
  3298  00298A  361B               	rlcf	SWSPI_send_bits@data,f,c
  3299  00298C                     l547:
  3300  00298C  501C               	movf	SWSPI_send_bits@count,w,c
  3301  00298E  A4D8               	btfss	status,2,c
  3302  002990  D7E6               	goto	l548
  3303                           
  3304                           ;SwSpiApp.c: 45: }
  3305                           ;SwSpiApp.c: 46: SwSpiDataLow(phrType);
  3306  002992  501D               	movf	SWSPI_send_bits@phrType,w,c
  3307  002994  EC58  F018         	call	_SwSpiDataLow
  3308                           
  3309                           ;SwSpiApp.c: 47: SwSpiClkLow(phrType);
  3310  002998  501D               	movf	SWSPI_send_bits@phrType,w,c
  3311  00299A  EC3A  F018         	call	_SwSpiClkLow
  3312  00299E  0012               	return		;funcret
  3313  0029A0                     __end_of_SWSPI_send_bits:
  3314                           	opt stack 0
  3315                           tosu	equ	0xFFF
  3316                           tosh	equ	0xFFE
  3317                           tosl	equ	0xFFD
  3318                           pclath	equ	0xFFA
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           prodh	equ	0xFF4
  3324                           prodl	equ	0xFF3
  3325                           intcon	equ	0xFF2
  3326                           postinc0	equ	0xFEE
  3327                           wreg	equ	0xFE8
  3328                           postdec1	equ	0xFE5
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           postinc2	equ	0xFDE
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _SwSpiSetClock *****************
  3337 ;; Defined at:
  3338 ;;		line 123 in file "SwSpiApp.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  phrType         1    wreg     enum E7525
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  phrType         1   24[COMRAM] enum E7525
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3352 ;;      Params:         0       0       0       0       0       0       0
  3353 ;;      Locals:         1       0       0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0
  3355 ;;      Totals:         1       0       0       0       0       0       0
  3356 ;;Total ram usage:        1 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    4
  3359 ;; This function calls:
  3360 ;;		_SwSpiClkHigh
  3361 ;;		_SwSpiClkLow
  3362 ;; This function is called by:
  3363 ;;		_SWSPI_send_bits
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text12
  3368  0028B8                     __ptext12:
  3369                           	opt stack 0
  3370  0028B8                     _SwSpiSetClock:
  3371                           	opt stack 21
  3372                           
  3373                           ;incstack = 0
  3374                           ;SwSpiSetClock@phrType stored from wreg
  3375  0028B8  6E19               	movwf	SwSpiSetClock@phrType,c
  3376                           
  3377                           ;SwSpiApp.c: 125: SwSpiClkHigh(phrType);
  3378  0028BA  5019               	movf	SwSpiSetClock@phrType,w,c
  3379  0028BC  EC49  F018         	call	_SwSpiClkHigh
  3380                           
  3381                           ;SwSpiApp.c: 127: switch(phrType)
  3382  0028C0  D014               	goto	l603
  3383  0028C2                     
  3384                           ;SwSpiApp.c: 130: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3385  0028C2  0EC8               	movlw	200
  3386  0028C4                     u6517:
  3387  0028C4  D000               	nop2	
  3388  0028C6  2EE8               	decfsz	wreg,f,c
  3389  0028C8  D7FD               	bra	u6517
  3390                           
  3391                           ;SwSpiApp.c: 131: break;
  3392  0028CA  D01A               	goto	l605
  3393  0028CC                     
  3394                           ;SwSpiApp.c: 133: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3395  0028CC  0EC8               	movlw	200
  3396  0028CE                     u6527:
  3397  0028CE  D000               	nop2	
  3398  0028D0  2EE8               	decfsz	wreg,f,c
  3399  0028D2  D7FD               	bra	u6527
  3400                           
  3401                           ;SwSpiApp.c: 134: break;
  3402  0028D4  D015               	goto	l605
  3403  0028D6                     
  3404                           ;SwSpiApp.c: 136: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3405  0028D6  0EC8               	movlw	200
  3406  0028D8                     u6537:
  3407  0028D8  D000               	nop2	
  3408  0028DA  2EE8               	decfsz	wreg,f,c
  3409  0028DC  D7FD               	bra	u6537
  3410                           
  3411                           ;SwSpiApp.c: 137: break;
  3412  0028DE  D010               	goto	l605
  3413  0028E0                     
  3414                           ;SwSpiApp.c: 139: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3415  0028E0  0EC8               	movlw	200
  3416  0028E2                     u6547:
  3417  0028E2  D000               	nop2	
  3418  0028E4  2EE8               	decfsz	wreg,f,c
  3419  0028E6  D7FD               	bra	u6547
  3420                           
  3421                           ;SwSpiApp.c: 140: }
  3422  0028E8  D00B               	goto	l605
  3423  0028EA                     l603:
  3424  0028EA  5019               	movf	SwSpiSetClock@phrType,w,c
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 3, Range of values is 0 to 2
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte           10     6 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  0028EC  0A00               	xorlw	0	; case 0
  3433  0028EE  B4D8               	btfsc	status,2,c
  3434  0028F0  D7E8               	goto	l604
  3435  0028F2  0A01               	xorlw	1	; case 1
  3436  0028F4  B4D8               	btfsc	status,2,c
  3437  0028F6  D7EA               	goto	l606
  3438  0028F8  0A03               	xorlw	3	; case 2
  3439  0028FA  B4D8               	btfsc	status,2,c
  3440  0028FC  D7EC               	goto	l607
  3441  0028FE  D7F0               	goto	l608
  3442  002900                     l605:
  3443                           
  3444                           ;SwSpiApp.c: 141: SwSpiClkLow(phrType);
  3445  002900  5019               	movf	SwSpiSetClock@phrType,w,c
  3446  002902  EC3A  F018         	call	_SwSpiClkLow
  3447  002906  0012               	return		;funcret
  3448  002908                     __end_of_SwSpiSetClock:
  3449                           	opt stack 0
  3450                           tosu	equ	0xFFF
  3451                           tosh	equ	0xFFE
  3452                           tosl	equ	0xFFD
  3453                           pclath	equ	0xFFA
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _SwSpiClkLow *****************
  3472 ;; Defined at:
  3473 ;;		line 105 in file "SwSpiApp.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  phrType         1    wreg     enum E7525
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  phrType         1   23[COMRAM] enum E7525
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3487 ;;      Params:         0       0       0       0       0       0       0
  3488 ;;      Locals:         1       0       0       0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0
  3490 ;;      Totals:         1       0       0       0       0       0       0
  3491 ;;Total ram usage:        1 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    3
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_SWSPI_send_bits
  3498 ;;		_SwSpiSetClock
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text13
  3503  003074                     __ptext13:
  3504                           	opt stack 0
  3505  003074                     _SwSpiClkLow:
  3506                           	opt stack 21
  3507                           
  3508                           ;incstack = 0
  3509                           ;SwSpiClkLow@phrType stored from wreg
  3510  003074  6E18               	movwf	SwSpiClkLow@phrType,c
  3511                           
  3512                           ;SwSpiApp.c: 107: switch(phrType)
  3513  003076  D004               	goto	l591
  3514  003078                     
  3515                           ;SwSpiApp.c: 110: do { LATCbits.LATC3 = 0; } while(0);
  3516  003078  968B               	bcf	3979,3,c	;volatile
  3517                           
  3518                           ;SwSpiApp.c: 111: break;
  3519  00307A  0012               	return	
  3520  00307C                     
  3521                           ;SwSpiApp.c: 114: do { LATCbits.LATC4 = 0; } while(0);
  3522  00307C  988B               	bcf	3979,4,c	;volatile
  3523                           
  3524                           ;SwSpiApp.c: 119: }
  3525                           
  3526                           ;SwSpiApp.c: 118: break;
  3527                           
  3528                           ;SwSpiApp.c: 117: case EXT_DAC:
  3529                           
  3530                           ;SwSpiApp.c: 115: break;
  3531  00307E  0012               	return	
  3532  003080                     l591:
  3533  003080  5018               	movf	SwSpiClkLow@phrType,w,c
  3534                           
  3535                           ; Switch size 1, requested type "space"
  3536                           ; Number of cases is 3, Range of values is 0 to 2
  3537                           ; switch strategies available:
  3538                           ; Name         Instructions Cycles
  3539                           ; simple_byte           10     6 (average)
  3540                           ;	Chosen strategy is simple_byte
  3541  003082  0A00               	xorlw	0	; case 0
  3542  003084  B4D8               	btfsc	status,2,c
  3543  003086  D7F8               	goto	l592
  3544  003088  0A01               	xorlw	1	; case 1
  3545  00308A  B4D8               	btfsc	status,2,c
  3546  00308C  D7F7               	goto	l596
  3547  00308E  0A03               	xorlw	3	; case 2
  3548  003090  0012               	return	
  3549  003092                     __end_of_SwSpiClkLow:
  3550                           	opt stack 0
  3551                           tosu	equ	0xFFF
  3552                           tosh	equ	0xFFE
  3553                           tosl	equ	0xFFD
  3554                           pclath	equ	0xFFA
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           intcon	equ	0xFF2
  3562                           postinc0	equ	0xFEE
  3563                           wreg	equ	0xFE8
  3564                           postdec1	equ	0xFE5
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _SwSpiClkHigh *****************
  3573 ;; Defined at:
  3574 ;;		line 87 in file "SwSpiApp.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  phrType         1    wreg     enum E7525
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  phrType         1   23[COMRAM] enum E7525
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3588 ;;      Params:         0       0       0       0       0       0       0
  3589 ;;      Locals:         1       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0
  3591 ;;      Totals:         1       0       0       0       0       0       0
  3592 ;;Total ram usage:        1 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    3
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_SwSpiSetClock
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text14
  3603  003092                     __ptext14:
  3604                           	opt stack 0
  3605  003092                     _SwSpiClkHigh:
  3606                           	opt stack 21
  3607                           
  3608                           ;incstack = 0
  3609                           ;SwSpiClkHigh@phrType stored from wreg
  3610  003092  6E18               	movwf	SwSpiClkHigh@phrType,c
  3611                           
  3612                           ;SwSpiApp.c: 89: switch(phrType)
  3613  003094  D004               	goto	l579
  3614  003096                     
  3615                           ;SwSpiApp.c: 92: do { LATCbits.LATC3 = 1; } while(0);
  3616  003096  868B               	bsf	3979,3,c	;volatile
  3617                           
  3618                           ;SwSpiApp.c: 93: break;
  3619  003098  0012               	return	
  3620  00309A                     
  3621                           ;SwSpiApp.c: 96: do { LATCbits.LATC4 = 1; } while(0);
  3622  00309A  888B               	bsf	3979,4,c	;volatile
  3623                           
  3624                           ;SwSpiApp.c: 101: }
  3625                           
  3626                           ;SwSpiApp.c: 100: break;
  3627                           
  3628                           ;SwSpiApp.c: 99: case EXT_DAC:
  3629                           
  3630                           ;SwSpiApp.c: 97: break;
  3631  00309C  0012               	return	
  3632  00309E                     l579:
  3633  00309E  5018               	movf	SwSpiClkHigh@phrType,w,c
  3634                           
  3635                           ; Switch size 1, requested type "space"
  3636                           ; Number of cases is 3, Range of values is 0 to 2
  3637                           ; switch strategies available:
  3638                           ; Name         Instructions Cycles
  3639                           ; simple_byte           10     6 (average)
  3640                           ;	Chosen strategy is simple_byte
  3641  0030A0  0A00               	xorlw	0	; case 0
  3642  0030A2  B4D8               	btfsc	status,2,c
  3643  0030A4  D7F8               	goto	l580
  3644  0030A6  0A01               	xorlw	1	; case 1
  3645  0030A8  B4D8               	btfsc	status,2,c
  3646  0030AA  D7F7               	goto	l584
  3647  0030AC  0A03               	xorlw	3	; case 2
  3648  0030AE  0012               	return	
  3649  0030B0                     __end_of_SwSpiClkHigh:
  3650                           	opt stack 0
  3651                           tosu	equ	0xFFF
  3652                           tosh	equ	0xFFE
  3653                           tosl	equ	0xFFD
  3654                           pclath	equ	0xFFA
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postdec1	equ	0xFE5
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _SwSpiDataLow *****************
  3673 ;; Defined at:
  3674 ;;		line 70 in file "SwSpiApp.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  phrType         1    wreg     enum E7525
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  phrType         1   23[COMRAM] enum E7525
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      void 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3688 ;;      Params:         0       0       0       0       0       0       0
  3689 ;;      Locals:         1       0       0       0       0       0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0
  3691 ;;      Totals:         1       0       0       0       0       0       0
  3692 ;;Total ram usage:        1 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    3
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_SWSPI_send_bits
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text15
  3703  0030B0                     __ptext15:
  3704                           	opt stack 0
  3705  0030B0                     _SwSpiDataLow:
  3706                           	opt stack 22
  3707                           
  3708                           ;incstack = 0
  3709                           ;SwSpiDataLow@phrType stored from wreg
  3710  0030B0  6E18               	movwf	SwSpiDataLow@phrType,c
  3711                           
  3712                           ;SwSpiApp.c: 72: switch(phrType)
  3713  0030B2  D004               	goto	l567
  3714  0030B4                     
  3715                           ;SwSpiApp.c: 75: do { LATDbits.LATD0 = 0; } while(0);
  3716  0030B4  908C               	bcf	3980,0,c	;volatile
  3717                           
  3718                           ;SwSpiApp.c: 76: break;
  3719  0030B6  0012               	return	
  3720  0030B8                     
  3721                           ;SwSpiApp.c: 79: do { LATCbits.LATC5 = 0; } while(0);
  3722  0030B8  9A8B               	bcf	3979,5,c	;volatile
  3723                           
  3724                           ;SwSpiApp.c: 84: }
  3725                           
  3726                           ;SwSpiApp.c: 83: break;
  3727                           
  3728                           ;SwSpiApp.c: 82: case EXT_DAC:
  3729                           
  3730                           ;SwSpiApp.c: 80: break;
  3731  0030BA  0012               	return	
  3732  0030BC                     l567:
  3733  0030BC  5018               	movf	SwSpiDataLow@phrType,w,c
  3734                           
  3735                           ; Switch size 1, requested type "space"
  3736                           ; Number of cases is 3, Range of values is 0 to 2
  3737                           ; switch strategies available:
  3738                           ; Name         Instructions Cycles
  3739                           ; simple_byte           10     6 (average)
  3740                           ;	Chosen strategy is simple_byte
  3741  0030BE  0A00               	xorlw	0	; case 0
  3742  0030C0  B4D8               	btfsc	status,2,c
  3743  0030C2  D7F8               	goto	l568
  3744  0030C4  0A01               	xorlw	1	; case 1
  3745  0030C6  B4D8               	btfsc	status,2,c
  3746  0030C8  D7F7               	goto	l572
  3747  0030CA  0A03               	xorlw	3	; case 2
  3748  0030CC  0012               	return	
  3749  0030CE                     __end_of_SwSpiDataLow:
  3750                           	opt stack 0
  3751                           tosu	equ	0xFFF
  3752                           tosh	equ	0xFFE
  3753                           tosl	equ	0xFFD
  3754                           pclath	equ	0xFFA
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           postdec1	equ	0xFE5
  3765                           fsr1l	equ	0xFE1
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _SwSpiDataHigh *****************
  3773 ;; Defined at:
  3774 ;;		line 53 in file "SwSpiApp.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  phrType         1    wreg     enum E7525
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  phrType         1   23[COMRAM] enum E7525
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3788 ;;      Params:         0       0       0       0       0       0       0
  3789 ;;      Locals:         1       0       0       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0
  3791 ;;      Totals:         1       0       0       0       0       0       0
  3792 ;;Total ram usage:        1 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    3
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_SWSPI_send_bits
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text16
  3803  0030CE                     __ptext16:
  3804                           	opt stack 0
  3805  0030CE                     _SwSpiDataHigh:
  3806                           	opt stack 22
  3807                           
  3808                           ;incstack = 0
  3809                           ;SwSpiDataHigh@phrType stored from wreg
  3810  0030CE  6E18               	movwf	SwSpiDataHigh@phrType,c
  3811                           
  3812                           ;SwSpiApp.c: 55: switch(phrType)
  3813  0030D0  D004               	goto	l555
  3814  0030D2                     
  3815                           ;SwSpiApp.c: 58: do { LATDbits.LATD0 = 1; } while(0);
  3816  0030D2  808C               	bsf	3980,0,c	;volatile
  3817                           
  3818                           ;SwSpiApp.c: 59: break;
  3819  0030D4  0012               	return	
  3820  0030D6                     
  3821                           ;SwSpiApp.c: 62: do { LATCbits.LATC5 = 1; } while(0);
  3822  0030D6  8A8B               	bsf	3979,5,c	;volatile
  3823                           
  3824                           ;SwSpiApp.c: 67: }
  3825                           
  3826                           ;SwSpiApp.c: 66: break;
  3827                           
  3828                           ;SwSpiApp.c: 65: case EXT_DAC:
  3829                           
  3830                           ;SwSpiApp.c: 63: break;
  3831  0030D8  0012               	return	
  3832  0030DA                     l555:
  3833  0030DA  5018               	movf	SwSpiDataHigh@phrType,w,c
  3834                           
  3835                           ; Switch size 1, requested type "space"
  3836                           ; Number of cases is 3, Range of values is 0 to 2
  3837                           ; switch strategies available:
  3838                           ; Name         Instructions Cycles
  3839                           ; simple_byte           10     6 (average)
  3840                           ;	Chosen strategy is simple_byte
  3841  0030DC  0A00               	xorlw	0	; case 0
  3842  0030DE  B4D8               	btfsc	status,2,c
  3843  0030E0  D7F8               	goto	l556
  3844  0030E2  0A01               	xorlw	1	; case 1
  3845  0030E4  B4D8               	btfsc	status,2,c
  3846  0030E6  D7F7               	goto	l560
  3847  0030E8  0A03               	xorlw	3	; case 2
  3848  0030EA  0012               	return	
  3849  0030EC                     __end_of_SwSpiDataHigh:
  3850                           	opt stack 0
  3851                           tosu	equ	0xFFF
  3852                           tosh	equ	0xFFE
  3853                           tosl	equ	0xFFD
  3854                           pclath	equ	0xFFA
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           intcon	equ	0xFF2
  3862                           postinc0	equ	0xFEE
  3863                           wreg	equ	0xFE8
  3864                           postdec1	equ	0xFE5
  3865                           fsr1l	equ	0xFE1
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _UpdateRxFreq *****************
  3873 ;; Defined at:
  3874 ;;		line 80 in file "SyntApp.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  data            2   43[COMRAM] PTR unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  send            4    0[BANK0 ] unsigned long 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3888 ;;      Params:         2       0       0       0       0       0       0
  3889 ;;      Locals:         0       4       0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0
  3891 ;;      Totals:         2       4       0       0       0       0       0
  3892 ;;Total ram usage:        6 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    6
  3895 ;; This function calls:
  3896 ;;		_SendAckMessage
  3897 ;; This function is called by:
  3898 ;;		_GroupSynthesizers
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text17
  3903  0030EC                     __ptext17:
  3904                           	opt stack 0
  3905  0030EC                     _UpdateRxFreq:
  3906                           	opt stack 22
  3907                           
  3908                           ;SyntApp.c: 82: uint32_t send = 0x87654321;
  3909                           
  3910                           ;incstack = 0
  3911  0030EC  0E21               	movlw	33
  3912  0030EE  0100               	movlb	0	; () banked
  3913  0030F0  6F60               	movwf	UpdateRxFreq@send& (0+255),b
  3914  0030F2  0E43               	movlw	67
  3915  0030F4  6F61               	movwf	(UpdateRxFreq@send+1)& (0+255),b
  3916  0030F6  0E65               	movlw	101
  3917  0030F8  6F62               	movwf	(UpdateRxFreq@send+2)& (0+255),b
  3918  0030FA  0E87               	movlw	135
  3919  0030FC  6F63               	movwf	(UpdateRxFreq@send+3)& (0+255),b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;SyntApp.c: 85: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3923  0030FE  0E42               	movlw	66
  3924  003100  6E24               	movwf	SendAckMessage@inRequest,c
  3925  003102  0E04               	movlw	4
  3926  003104  EC33  F014         	call	_SendAckMessage
  3927  003108  0012               	return		;funcret
  3928  00310A                     __end_of_UpdateRxFreq:
  3929                           	opt stack 0
  3930                           tosu	equ	0xFFF
  3931                           tosh	equ	0xFFE
  3932                           tosl	equ	0xFFD
  3933                           pclath	equ	0xFFA
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1l	equ	0xFE1
  3945                           indf2	equ	0xFDF
  3946                           postinc2	equ	0xFDE
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _SetMcuFwVersion *****************
  3952 ;; Defined at:
  3953 ;;		line 15 in file "SystemStatus.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  data            2   43[COMRAM] PTR unsigned char 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  idx             1   45[COMRAM] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3967 ;;      Params:         2       0       0       0       0       0       0
  3968 ;;      Locals:         1       0       0       0       0       0       0
  3969 ;;      Temps:          0       0       0       0       0       0       0
  3970 ;;      Totals:         3       0       0       0       0       0       0
  3971 ;;Total ram usage:        3 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    6
  3974 ;; This function calls:
  3975 ;;		_EepromWrite
  3976 ;;		_SendAckMessage
  3977 ;; This function is called by:
  3978 ;;		_GroupStatusAndVersion
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text18
  3983  002CEC                     __ptext18:
  3984                           	opt stack 0
  3985  002CEC                     _SetMcuFwVersion:
  3986                           	opt stack 22
  3987                           
  3988                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3989                           
  3990                           ;incstack = 0
  3991  002CEC  0E00               	movlw	0
  3992  002CEE  6E2E               	movwf	SetMcuFwVersion@idx,c
  3993  002CF0                     l6742:
  3994  002CF0  0E03               	movlw	3
  3995  002CF2  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3996  002CF4  D001               	goto	l1206
  3997  002CF6  D00F               	goto	u6030
  3998  002CF8                     l1206:
  3999                           
  4000                           ;SystemStatus.c: 18: {
  4001                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  4002  002CF8  502E               	movf	SetMcuFwVersion@idx,w,c
  4003  002CFA  0D01               	mullw	1
  4004  002CFC  50F3               	movf	prodl,w,c
  4005  002CFE  242C               	addwf	SetMcuFwVersion@data,w,c
  4006  002D00  6ED9               	movwf	fsr2l,c
  4007  002D02  50F4               	movf	prodh,w,c
  4008  002D04  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  4009  002D06  6EDA               	movwf	fsr2h,c
  4010  002D08  50DF               	movf	indf2,w,c
  4011  002D0A  6E1B               	movwf	EepromWrite@data,c
  4012  002D0C  502E               	movf	SetMcuFwVersion@idx,w,c
  4013  002D0E  ECE8  F018         	call	_EepromWrite
  4014  002D12  2A2E               	incf	SetMcuFwVersion@idx,f,c
  4015  002D14  D7ED               	goto	l6742
  4016  002D16                     u6030:
  4017                           
  4018                           ;SystemStatus.c: 20: }
  4019                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  4020  002D16  0E24               	movlw	36
  4021  002D18  6E24               	movwf	SendAckMessage@inRequest,c
  4022  002D1A  0E02               	movlw	2
  4023  002D1C  EC33  F014         	call	_SendAckMessage
  4024  002D20  0012               	return		;funcret
  4025  002D22                     __end_of_SetMcuFwVersion:
  4026                           	opt stack 0
  4027                           tosu	equ	0xFFF
  4028                           tosh	equ	0xFFE
  4029                           tosl	equ	0xFFD
  4030                           pclath	equ	0xFFA
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodh	equ	0xFF4
  4036                           prodl	equ	0xFF3
  4037                           intcon	equ	0xFF2
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           postdec1	equ	0xFE5
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           fsr2h	equ	0xFDA
  4045                           fsr2l	equ	0xFD9
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function _SetCpldFwVersion *****************
  4049 ;; Defined at:
  4050 ;;		line 49 in file "SystemStatus.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  data            2   43[COMRAM] PTR unsigned char 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  idx             2   45[COMRAM] int 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4064 ;;      Params:         2       0       0       0       0       0       0
  4065 ;;      Locals:         2       0       0       0       0       0       0
  4066 ;;      Temps:          0       0       0       0       0       0       0
  4067 ;;      Totals:         4       0       0       0       0       0       0
  4068 ;;Total ram usage:        4 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    6
  4071 ;; This function calls:
  4072 ;;		_EepromWrite
  4073 ;;		_SendAckMessage
  4074 ;; This function is called by:
  4075 ;;		_GroupStatusAndVersion
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text19
  4080  002B3E                     __ptext19:
  4081                           	opt stack 0
  4082  002B3E                     _SetCpldFwVersion:
  4083                           	opt stack 22
  4084                           
  4085                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  4086                           
  4087                           ;incstack = 0
  4088  002B3E  0E00               	movlw	0
  4089  002B40  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  4090  002B42  0E00               	movlw	0
  4091  002B44  6E2E               	movwf	SetCpldFwVersion@idx,c
  4092  002B46                     l6782:
  4093  002B46  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  4094  002B48  D006               	goto	l1216
  4095  002B4A  502F               	movf	SetCpldFwVersion@idx+1,w,c
  4096  002B4C  E113               	bnz	l6792
  4097  002B4E  0E04               	movlw	4
  4098  002B50  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  4099  002B52  B0D8               	btfsc	status,0,c
  4100  002B54  D00F               	goto	u6070
  4101  002B56                     l1216:
  4102                           
  4103                           ;SystemStatus.c: 52: {
  4104                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  4105  002B56  502E               	movf	SetCpldFwVersion@idx,w,c
  4106  002B58  242C               	addwf	SetCpldFwVersion@data,w,c
  4107  002B5A  6ED9               	movwf	fsr2l,c
  4108  002B5C  502F               	movf	SetCpldFwVersion@idx+1,w,c
  4109  002B5E  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  4110  002B60  6EDA               	movwf	fsr2h,c
  4111  002B62  50DF               	movf	indf2,w,c
  4112  002B64  6E1B               	movwf	EepromWrite@data,c
  4113  002B66  502E               	movf	SetCpldFwVersion@idx,w,c
  4114  002B68  0F04               	addlw	4
  4115  002B6A  ECE8  F018         	call	_EepromWrite
  4116  002B6E  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  4117  002B70  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  4118  002B72  D7E9               	goto	l6782
  4119  002B74                     u6070:
  4120  002B74                     l6792:
  4121                           
  4122                           ;SystemStatus.c: 54: }
  4123                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  4124  002B74  0E25               	movlw	37
  4125  002B76  6E24               	movwf	SendAckMessage@inRequest,c
  4126  002B78  0E02               	movlw	2
  4127  002B7A  EC33  F014         	call	_SendAckMessage
  4128  002B7E  0012               	return		;funcret
  4129  002B80                     __end_of_SetCpldFwVersion:
  4130                           	opt stack 0
  4131                           tosu	equ	0xFFF
  4132                           tosh	equ	0xFFE
  4133                           tosl	equ	0xFFD
  4134                           pclath	equ	0xFFA
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           prodh	equ	0xFF4
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function _EepromWrite *****************
  4153 ;; Defined at:
  4154 ;;		line 216 in file "FlashApp.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  address         1    wreg     unsigned char 
  4157 ;;  data            1   26[COMRAM] unsigned char 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  address         1   27[COMRAM] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4169 ;;      Params:         1       0       0       0       0       0       0
  4170 ;;      Locals:         1       0       0       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0
  4172 ;;      Totals:         2       0       0       0       0       0       0
  4173 ;;Total ram usage:        2 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    4
  4176 ;; This function calls:
  4177 ;;		_DATAEE_WriteByte
  4178 ;; This function is called by:
  4179 ;;		_SetMcuFwVersion
  4180 ;;		_SetCpldFwVersion
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text20
  4185  0031D0                     __ptext20:
  4186                           	opt stack 0
  4187  0031D0                     _EepromWrite:
  4188                           	opt stack 23
  4189                           
  4190                           ;incstack = 0
  4191                           ;EepromWrite@address stored from wreg
  4192  0031D0  6E1C               	movwf	EepromWrite@address,c
  4193                           
  4194                           ;FlashApp.c: 218: DATAEE_WriteByte(address, data);
  4195  0031D2  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  4196  0031D6  501C               	movf	EepromWrite@address,w,c
  4197  0031D8  EC91  F016         	call	_DATAEE_WriteByte
  4198  0031DC  0012               	return		;funcret
  4199  0031DE                     __end_of_EepromWrite:
  4200                           	opt stack 0
  4201                           tosu	equ	0xFFF
  4202                           tosh	equ	0xFFE
  4203                           tosl	equ	0xFFD
  4204                           pclath	equ	0xFFA
  4205                           tblptru	equ	0xFF8
  4206                           tblptrh	equ	0xFF7
  4207                           tblptrl	equ	0xFF6
  4208                           tablat	equ	0xFF5
  4209                           prodh	equ	0xFF4
  4210                           prodl	equ	0xFF3
  4211                           intcon	equ	0xFF2
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           fsr2h	equ	0xFDA
  4219                           fsr2l	equ	0xFD9
  4220                           status	equ	0xFD8
  4221                           
  4222 ;; *************** function _DATAEE_WriteByte *****************
  4223 ;; Defined at:
  4224 ;;		line 167 in file "mcc_generated_files/memory.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  bAdd            1    wreg     unsigned char 
  4227 ;;  bData           1   23[COMRAM] unsigned char 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  bAdd            1   24[COMRAM] unsigned char 
  4230 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4240 ;;      Params:         1       0       0       0       0       0       0
  4241 ;;      Locals:         2       0       0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0
  4243 ;;      Totals:         3       0       0       0       0       0       0
  4244 ;;Total ram usage:        3 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    3
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_EepromWrite
  4251 ;;		_EepromTest
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text21
  4256  002D22                     __ptext21:
  4257                           	opt stack 0
  4258  002D22                     _DATAEE_WriteByte:
  4259                           	opt stack 23
  4260                           
  4261                           ;incstack = 0
  4262                           ;DATAEE_WriteByte@bAdd stored from wreg
  4263  002D22  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  4264                           
  4265                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  4266  002D24  0E00               	movlw	0
  4267  002D26  BEF2               	btfsc	intcon,7,c	;volatile
  4268  002D28  0E01               	movlw	1
  4269  002D2A  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  4270                           
  4271                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  4272  002D2C  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  4273                           
  4274                           ;memory.c: 172: EEDATA = bData;
  4275  002D30  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  4276                           
  4277                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  4278  002D34  9EA6               	bcf	4006,7,c	;volsfr
  4279                           
  4280                           ;memory.c: 174: EECON1bits.CFGS = 0;
  4281  002D36  9CA6               	bcf	4006,6,c	;volsfr
  4282                           
  4283                           ;memory.c: 175: EECON1bits.WREN = 1;
  4284  002D38  84A6               	bsf	4006,2,c	;volsfr
  4285                           
  4286                           ;memory.c: 176: INTCONbits.GIE = 0;
  4287  002D3A  9EF2               	bcf	intcon,7,c	;volatile
  4288                           
  4289                           ;memory.c: 177: EECON2 = 0x55;
  4290  002D3C  0E55               	movlw	85
  4291  002D3E  6EA7               	movwf	4007,c	;volsfr
  4292                           
  4293                           ;memory.c: 178: EECON2 = 0xAA;
  4294  002D40  0EAA               	movlw	170
  4295  002D42  6EA7               	movwf	4007,c	;volsfr
  4296                           
  4297                           ;memory.c: 179: EECON1bits.WR = 1;
  4298  002D44  82A6               	bsf	4006,1,c	;volsfr
  4299  002D46                     
  4300                           ;memory.c: 182: {
  4301  002D46  B2A6               	btfsc	4006,1,c	;volsfr
  4302  002D48  D7FE               	goto	l848
  4303                           
  4304                           ;memory.c: 183: }
  4305                           ;memory.c: 185: EECON1bits.WREN = 0;
  4306  002D4A  94A6               	bcf	4006,2,c	;volsfr
  4307                           
  4308                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  4309  002D4C  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  4310  002D4E  D002               	bra	u5305
  4311  002D50  9EF2               	bcf	intcon,7,c	;volatile
  4312  002D52  D001               	bra	u5306
  4313  002D54                     u5305:
  4314  002D54  8EF2               	bsf	intcon,7,c	;volatile
  4315  002D56                     u5306:
  4316  002D56  0012               	return		;funcret
  4317  002D58                     __end_of_DATAEE_WriteByte:
  4318                           	opt stack 0
  4319                           tosu	equ	0xFFF
  4320                           tosh	equ	0xFFE
  4321                           tosl	equ	0xFFD
  4322                           pclath	equ	0xFFA
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           intcon	equ	0xFF2
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postdec1	equ	0xFE5
  4333                           fsr1l	equ	0xFE1
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _GetMcuRunTime *****************
  4341 ;; Defined at:
  4342 ;;		line 92 in file "SystemStatus.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  idx             2   13[BANK0 ] int 
  4347 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4348 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4358 ;;      Params:         0       0       0       0       0       0       0
  4359 ;;      Locals:         0      15       0       0       0       0       0
  4360 ;;      Temps:          2       0       0       0       0       0       0
  4361 ;;      Totals:         2      15       0       0       0       0       0
  4362 ;;Total ram usage:       17 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    5
  4365 ;; This function calls:
  4366 ;;		_WriteUartMessage
  4367 ;;		___lldiv
  4368 ;;		___llmod
  4369 ;;		_crc8
  4370 ;; This function is called by:
  4371 ;;		_GroupStatusAndVersion
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text22
  4376  001B08                     __ptext22:
  4377                           	opt stack 0
  4378  001B08                     _GetMcuRunTime:
  4379                           	opt stack 23
  4380                           
  4381                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  4382                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  4383                           
  4384                           ;incstack = 0
  4385  001B08  0E24               	movlw	36
  4386  001B0A  0100               	movlb	0	; () banked
  4387  001B0C  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4388                           
  4389                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4390  001B0E  0E02               	movlw	2
  4391  001B10  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4392                           
  4393                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4394  001B12  0E21               	movlw	33
  4395  001B14  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4396                           
  4397                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  4398  001B16  0E04               	movlw	4
  4399  001B18  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4403  001B1A  C0D3  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4404  001B1E  C0D4  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4405  001B22  C0D5  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4406  001B26  C0D6  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4407                           
  4408                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  4409  001B2A  0E00               	movlw	0
  4410  001B2C  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4411  001B2E  0E00               	movlw	0
  4412  001B30  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4413  001B32                     l6798:
  4414                           
  4415                           ; BSR set to: 0
  4416  001B32  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4417  001B34  D006               	goto	l1232
  4418  001B36  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4419  001B38  E142               	bnz	l6810
  4420  001B3A  0E04               	movlw	4
  4421  001B3C  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4422  001B3E  B0D8               	btfsc	status,0,c
  4423  001B40  D03E               	goto	u6090
  4424  001B42                     l1232:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;SystemStatus.c: 107: {
  4428                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4429                           
  4430                           ; BSR set to: 0
  4431  001B42  0E04               	movlw	4
  4432  001B44  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4433  001B46  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4434  001B48  0E00               	movlw	0
  4435  001B4A  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4436  001B4C  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4437  001B4E  0E60               	movlw	low GetMcuRunTime@TxMsg
  4438  001B50  2425               	addwf	??_GetMcuRunTime,w,c
  4439  001B52  6ED9               	movwf	fsr2l,c
  4440  001B54  0E00               	movlw	high GetMcuRunTime@TxMsg
  4441  001B56  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4442  001B58  6EDA               	movwf	fsr2h,c
  4443  001B5A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4444  001B5E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4445  001B62  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4446  001B66  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4447  001B6A  0E0A               	movlw	10
  4448  001B6C  6E1C               	movwf	___llmod@divisor,c
  4449  001B6E  0E00               	movlw	0
  4450  001B70  6E1D               	movwf	___llmod@divisor+1,c
  4451  001B72  0E00               	movlw	0
  4452  001B74  6E1E               	movwf	___llmod@divisor+2,c
  4453  001B76  0E00               	movlw	0
  4454  001B78  6E1F               	movwf	___llmod@divisor+3,c
  4455  001B7A  ECEE  F012         	call	___llmod	;wreg free
  4456  001B7E  5018               	movf	?___llmod,w,c
  4457  001B80  6EDF               	movwf	indf2,c
  4458                           
  4459                           ;SystemStatus.c: 109: tempRunTime /= 10;
  4460  001B82  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4461  001B86  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4462  001B8A  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4463  001B8E  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4464  001B92  0E0A               	movlw	10
  4465  001B94  6E1C               	movwf	___lldiv@divisor,c
  4466  001B96  0E00               	movlw	0
  4467  001B98  6E1D               	movwf	___lldiv@divisor+1,c
  4468  001B9A  0E00               	movlw	0
  4469  001B9C  6E1E               	movwf	___lldiv@divisor+2,c
  4470  001B9E  0E00               	movlw	0
  4471  001BA0  6E1F               	movwf	___lldiv@divisor+3,c
  4472  001BA2  ECC1  F011         	call	___lldiv	;wreg free
  4473  001BA6  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4474  001BAA  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4475  001BAE  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4476  001BB2  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4477  001BB6  0100               	movlb	0	; () banked
  4478  001BB8  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4479  001BBA  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4480  001BBC  D7BA               	goto	l6798
  4481  001BBE                     u6090:
  4482  001BBE                     l6810:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;SystemStatus.c: 110: }
  4486                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4487  001BBE  0E60               	movlw	low GetMcuRunTime@TxMsg
  4488  001BC0  6E18               	movwf	crc8@dataArray,c
  4489  001BC2  0E00               	movlw	high GetMcuRunTime@TxMsg
  4490  001BC4  6E19               	movwf	crc8@dataArray+1,c
  4491  001BC6  0E00               	movlw	0
  4492  001BC8  6E1B               	movwf	crc8@dataSize+1,c
  4493  001BCA  0E08               	movlw	8
  4494  001BCC  6E1A               	movwf	crc8@dataSize,c
  4495  001BCE  EC84  F014         	call	_crc8	;wreg free
  4496  001BD2  0100               	movlb	0	; () banked
  4497  001BD4  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4501  001BD6  0E60               	movlw	low GetMcuRunTime@TxMsg
  4502  001BD8  6E19               	movwf	WriteUartMessage@dataBuf,c
  4503  001BDA  0E00               	movlw	high GetMcuRunTime@TxMsg
  4504  001BDC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4505  001BDE  0E00               	movlw	0
  4506  001BE0  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4507  001BE2  0E09               	movlw	9
  4508  001BE4  6E1B               	movwf	WriteUartMessage@dataSize,c
  4509  001BE6  ECC7  F016         	call	_WriteUartMessage	;wreg free
  4510  001BEA  0012               	return		;funcret
  4511  001BEC                     __end_of_GetMcuRunTime:
  4512                           	opt stack 0
  4513                           tosu	equ	0xFFF
  4514                           tosh	equ	0xFFE
  4515                           tosl	equ	0xFFD
  4516                           pclath	equ	0xFFA
  4517                           tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           prodh	equ	0xFF4
  4522                           prodl	equ	0xFF3
  4523                           intcon	equ	0xFF2
  4524                           postinc0	equ	0xFEE
  4525                           wreg	equ	0xFE8
  4526                           postdec1	equ	0xFE5
  4527                           fsr1l	equ	0xFE1
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function ___lldiv *****************
  4535 ;; Defined at:
  4536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  dividend        4   23[COMRAM] unsigned long 
  4539 ;;  divisor         4   27[COMRAM] unsigned long 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  quotient        4   31[COMRAM] unsigned long 
  4542 ;;  counter         1   35[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  4   23[COMRAM] unsigned long 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4552 ;;      Params:         8       0       0       0       0       0       0
  4553 ;;      Locals:         5       0       0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0
  4555 ;;      Totals:        13       0       0       0       0       0       0
  4556 ;;Total ram usage:       13 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    3
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_GetMcuRunTime
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text23
  4567  002382                     __ptext23:
  4568                           	opt stack 0
  4569  002382                     ___lldiv:
  4570                           	opt stack 24
  4571                           
  4572                           ;incstack = 0
  4573  002382  0E00               	movlw	0
  4574  002384  6E20               	movwf	___lldiv@quotient,c
  4575  002386  0E00               	movlw	0
  4576  002388  6E21               	movwf	___lldiv@quotient+1,c
  4577  00238A  0E00               	movlw	0
  4578  00238C  6E22               	movwf	___lldiv@quotient+2,c
  4579  00238E  0E00               	movlw	0
  4580  002390  6E23               	movwf	___lldiv@quotient+3,c
  4581  002392  501C               	movf	___lldiv@divisor,w,c
  4582  002394  101D               	iorwf	___lldiv@divisor+1,w,c
  4583  002396  101E               	iorwf	___lldiv@divisor+2,w,c
  4584  002398  101F               	iorwf	___lldiv@divisor+3,w,c
  4585  00239A  B4D8               	btfsc	status,2,c
  4586  00239C  D02A               	goto	l1657
  4587  00239E  0E01               	movlw	1
  4588  0023A0  6E24               	movwf	___lldiv@counter,c
  4589  0023A2  D006               	goto	l1652
  4590  0023A4  90D8               	bcf	status,0,c
  4591  0023A6  361C               	rlcf	___lldiv@divisor,f,c
  4592  0023A8  361D               	rlcf	___lldiv@divisor+1,f,c
  4593  0023AA  361E               	rlcf	___lldiv@divisor+2,f,c
  4594  0023AC  361F               	rlcf	___lldiv@divisor+3,f,c
  4595  0023AE  2A24               	incf	___lldiv@counter,f,c
  4596  0023B0                     l1652:
  4597  0023B0  AE1F               	btfss	___lldiv@divisor+3,7,c
  4598  0023B2  D7F8               	goto	l1653
  4599  0023B4                     u5570:
  4600  0023B4  90D8               	bcf	status,0,c
  4601  0023B6  3620               	rlcf	___lldiv@quotient,f,c
  4602  0023B8  3621               	rlcf	___lldiv@quotient+1,f,c
  4603  0023BA  3622               	rlcf	___lldiv@quotient+2,f,c
  4604  0023BC  3623               	rlcf	___lldiv@quotient+3,f,c
  4605  0023BE  501C               	movf	___lldiv@divisor,w,c
  4606  0023C0  5C18               	subwf	___lldiv@dividend,w,c
  4607  0023C2  501D               	movf	___lldiv@divisor+1,w,c
  4608  0023C4  5819               	subwfb	___lldiv@dividend+1,w,c
  4609  0023C6  501E               	movf	___lldiv@divisor+2,w,c
  4610  0023C8  581A               	subwfb	___lldiv@dividend+2,w,c
  4611  0023CA  501F               	movf	___lldiv@divisor+3,w,c
  4612  0023CC  581B               	subwfb	___lldiv@dividend+3,w,c
  4613  0023CE  A0D8               	btfss	status,0,c
  4614  0023D0  D009               	goto	l1656
  4615  0023D2  501C               	movf	___lldiv@divisor,w,c
  4616  0023D4  5E18               	subwf	___lldiv@dividend,f,c
  4617  0023D6  501D               	movf	___lldiv@divisor+1,w,c
  4618  0023D8  5A19               	subwfb	___lldiv@dividend+1,f,c
  4619  0023DA  501E               	movf	___lldiv@divisor+2,w,c
  4620  0023DC  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4621  0023DE  501F               	movf	___lldiv@divisor+3,w,c
  4622  0023E0  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4623  0023E2  8020               	bsf	___lldiv@quotient,0,c
  4624  0023E4                     l1656:
  4625  0023E4  90D8               	bcf	status,0,c
  4626  0023E6  321F               	rrcf	___lldiv@divisor+3,f,c
  4627  0023E8  321E               	rrcf	___lldiv@divisor+2,f,c
  4628  0023EA  321D               	rrcf	___lldiv@divisor+1,f,c
  4629  0023EC  321C               	rrcf	___lldiv@divisor,f,c
  4630  0023EE  2E24               	decfsz	___lldiv@counter,f,c
  4631  0023F0  D7E1               	goto	u5570
  4632  0023F2                     l1657:
  4633  0023F2  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4634  0023F6  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4635  0023FA  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4636  0023FE  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4637  002402  0012               	return		;funcret
  4638  002404                     __end_of___lldiv:
  4639                           	opt stack 0
  4640                           tosu	equ	0xFFF
  4641                           tosh	equ	0xFFE
  4642                           tosl	equ	0xFFD
  4643                           pclath	equ	0xFFA
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           postdec1	equ	0xFE5
  4654                           fsr1l	equ	0xFE1
  4655                           indf2	equ	0xFDF
  4656                           postinc2	equ	0xFDE
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function _GetMcuFwVersion *****************
  4662 ;; Defined at:
  4663 ;;		line 26 in file "SystemStatus.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  idx             1   46[COMRAM] unsigned char 
  4668 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4678 ;;      Params:         0       0       0       0       0       0       0
  4679 ;;      Locals:        10       0       0       0       0       0       0
  4680 ;;      Temps:          2       0       0       0       0       0       0
  4681 ;;      Totals:        12       0       0       0       0       0       0
  4682 ;;Total ram usage:       12 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    5
  4685 ;; This function calls:
  4686 ;;		_EepromRead
  4687 ;;		_WriteUartMessage
  4688 ;;		_ZeroArray
  4689 ;;		_crc8
  4690 ;; This function is called by:
  4691 ;;		_GroupStatusAndVersion
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text24
  4696  002404                     __ptext24:
  4697                           	opt stack 0
  4698  002404                     _GetMcuFwVersion:
  4699                           	opt stack 23
  4700                           
  4701                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  4702                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4703                           
  4704                           ;incstack = 0
  4705  002404  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4706  002406  6E20               	movwf	ZeroArray@array,c
  4707  002408  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4708  00240A  6E21               	movwf	ZeroArray@array+1,c
  4709  00240C  0E00               	movlw	0
  4710  00240E  6E23               	movwf	ZeroArray@size+1,c
  4711  002410  0E09               	movlw	9
  4712  002412  6E22               	movwf	ZeroArray@size,c
  4713  002414  EC85  F018         	call	_ZeroArray	;wreg free
  4714                           
  4715                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  4716  002418  0E24               	movlw	36
  4717  00241A  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  4718                           
  4719                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4720  00241C  0E02               	movlw	2
  4721  00241E  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  4722                           
  4723                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4724  002420  0E22               	movlw	34
  4725  002422  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  4726                           
  4727                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  4728  002424  0E04               	movlw	4
  4729  002426  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  4730                           
  4731                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  4732  002428  0E00               	movlw	0
  4733  00242A  6E2F               	movwf	GetMcuFwVersion@idx,c
  4734  00242C                     l6726:
  4735  00242C  0E03               	movlw	3
  4736  00242E  642F               	cpfsgt	GetMcuFwVersion@idx,c
  4737  002430  D001               	goto	l1211
  4738  002432  D013               	goto	u6010
  4739  002434                     l1211:
  4740                           
  4741                           ;SystemStatus.c: 40: {
  4742                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  4743  002434  502F               	movf	GetMcuFwVersion@idx,w,c
  4744  002436  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4745  002438  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  4746  00243A  0E04               	movlw	4
  4747  00243C  2624               	addwf	??_GetMcuFwVersion,f,c
  4748  00243E  0E00               	movlw	0
  4749  002440  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  4750  002442  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4751  002444  2424               	addwf	??_GetMcuFwVersion,w,c
  4752  002446  6ED9               	movwf	fsr2l,c
  4753  002448  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4754  00244A  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  4755  00244C  6EDA               	movwf	fsr2h,c
  4756  00244E  502F               	movf	GetMcuFwVersion@idx,w,c
  4757  002450  EC29  F019         	call	_EepromRead
  4758  002454  6EDF               	movwf	indf2,c
  4759  002456  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4760  002458  D7E9               	goto	l6726
  4761  00245A                     u6010:
  4762                           
  4763                           ;SystemStatus.c: 42: }
  4764                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4765  00245A  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4766  00245C  6E18               	movwf	crc8@dataArray,c
  4767  00245E  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4768  002460  6E19               	movwf	crc8@dataArray+1,c
  4769  002462  0E00               	movlw	0
  4770  002464  6E1B               	movwf	crc8@dataSize+1,c
  4771  002466  0E08               	movlw	8
  4772  002468  6E1A               	movwf	crc8@dataSize,c
  4773  00246A  EC84  F014         	call	_crc8	;wreg free
  4774  00246E  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4775                           
  4776                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4777  002470  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4778  002472  6E19               	movwf	WriteUartMessage@dataBuf,c
  4779  002474  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4780  002476  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4781  002478  0E00               	movlw	0
  4782  00247A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4783  00247C  0E09               	movlw	9
  4784  00247E  6E1B               	movwf	WriteUartMessage@dataSize,c
  4785  002480  ECC7  F016         	call	_WriteUartMessage	;wreg free
  4786  002484  0012               	return		;funcret
  4787  002486                     __end_of_GetMcuFwVersion:
  4788                           	opt stack 0
  4789                           tosu	equ	0xFFF
  4790                           tosh	equ	0xFFE
  4791                           tosl	equ	0xFFD
  4792                           pclath	equ	0xFFA
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postdec1	equ	0xFE5
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _GetCpldFwVersion *****************
  4811 ;; Defined at:
  4812 ;;		line 58 in file "SystemStatus.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  idx             2   46[COMRAM] int 
  4817 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4827 ;;      Params:         0       0       0       0       0       0       0
  4828 ;;      Locals:        11       0       0       0       0       0       0
  4829 ;;      Temps:          2       0       0       0       0       0       0
  4830 ;;      Totals:        13       0       0       0       0       0       0
  4831 ;;Total ram usage:       13 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    5
  4834 ;; This function calls:
  4835 ;;		_EepromRead
  4836 ;;		_WriteUartMessage
  4837 ;;		_ZeroArray
  4838 ;;		_crc8
  4839 ;; This function is called by:
  4840 ;;		_GroupStatusAndVersion
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text25
  4845  0021D2                     __ptext25:
  4846                           	opt stack 0
  4847  0021D2                     _GetCpldFwVersion:
  4848                           	opt stack 23
  4849                           
  4850                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4851                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4852                           
  4853                           ;incstack = 0
  4854  0021D2  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4855  0021D4  6E20               	movwf	ZeroArray@array,c
  4856  0021D6  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4857  0021D8  6E21               	movwf	ZeroArray@array+1,c
  4858  0021DA  0E00               	movlw	0
  4859  0021DC  6E23               	movwf	ZeroArray@size+1,c
  4860  0021DE  0E09               	movlw	9
  4861  0021E0  6E22               	movwf	ZeroArray@size,c
  4862  0021E2  EC85  F018         	call	_ZeroArray	;wreg free
  4863                           
  4864                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4865  0021E6  0E24               	movlw	36
  4866  0021E8  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4867                           
  4868                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4869  0021EA  0E02               	movlw	2
  4870  0021EC  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4871                           
  4872                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4873  0021EE  0E23               	movlw	35
  4874  0021F0  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4875                           
  4876                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4877  0021F2  0E04               	movlw	4
  4878  0021F4  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4879                           
  4880                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4881  0021F6  0E00               	movlw	0
  4882  0021F8  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4883  0021FA  0E00               	movlw	0
  4884  0021FC  6E2F               	movwf	GetCpldFwVersion@idx,c
  4885  0021FE                     l6766:
  4886  0021FE  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4887  002200  D006               	goto	l1221
  4888  002202  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4889  002204  E118               	bnz	l6776
  4890  002206  0E04               	movlw	4
  4891  002208  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4892  00220A  B0D8               	btfsc	status,0,c
  4893  00220C  D014               	goto	u6050
  4894  00220E                     l1221:
  4895                           
  4896                           ;SystemStatus.c: 72: {
  4897                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4898  00220E  0E04               	movlw	4
  4899  002210  242F               	addwf	GetCpldFwVersion@idx,w,c
  4900  002212  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4901  002214  0E00               	movlw	0
  4902  002216  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4903  002218  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4904  00221A  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4905  00221C  2424               	addwf	??_GetCpldFwVersion,w,c
  4906  00221E  6ED9               	movwf	fsr2l,c
  4907  002220  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4908  002222  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4909  002224  6EDA               	movwf	fsr2h,c
  4910  002226  502F               	movf	GetCpldFwVersion@idx,w,c
  4911  002228  0F04               	addlw	4
  4912  00222A  EC29  F019         	call	_EepromRead
  4913  00222E  6EDF               	movwf	indf2,c
  4914  002230  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4915  002232  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4916  002234  D7E4               	goto	l6766
  4917  002236                     u6050:
  4918  002236                     l6776:
  4919                           
  4920                           ;SystemStatus.c: 74: }
  4921                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4922  002236  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4923  002238  6E18               	movwf	crc8@dataArray,c
  4924  00223A  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4925  00223C  6E19               	movwf	crc8@dataArray+1,c
  4926  00223E  0E00               	movlw	0
  4927  002240  6E1B               	movwf	crc8@dataSize+1,c
  4928  002242  0E08               	movlw	8
  4929  002244  6E1A               	movwf	crc8@dataSize,c
  4930  002246  EC84  F014         	call	_crc8	;wreg free
  4931  00224A  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4932                           
  4933                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4934  00224C  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4935  00224E  6E19               	movwf	WriteUartMessage@dataBuf,c
  4936  002250  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4937  002252  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4938  002254  0E00               	movlw	0
  4939  002256  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4940  002258  0E09               	movlw	9
  4941  00225A  6E1B               	movwf	WriteUartMessage@dataSize,c
  4942  00225C  ECC7  F016         	call	_WriteUartMessage	;wreg free
  4943  002260  0012               	return		;funcret
  4944  002262                     __end_of_GetCpldFwVersion:
  4945                           	opt stack 0
  4946                           tosu	equ	0xFFF
  4947                           tosh	equ	0xFFE
  4948                           tosl	equ	0xFFD
  4949                           pclath	equ	0xFFA
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postdec1	equ	0xFE5
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _EepromRead *****************
  4968 ;; Defined at:
  4969 ;;		line 211 in file "FlashApp.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  address         1    wreg     unsigned char 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  address         1   24[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      unsigned char 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4983 ;;      Params:         0       0       0       0       0       0       0
  4984 ;;      Locals:         1       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0
  4986 ;;      Totals:         1       0       0       0       0       0       0
  4987 ;;Total ram usage:        1 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    4
  4990 ;; This function calls:
  4991 ;;		_DATAEE_ReadByte
  4992 ;; This function is called by:
  4993 ;;		_GetMcuFwVersion
  4994 ;;		_GetCpldFwVersion
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text26
  4999  003252                     __ptext26:
  5000                           	opt stack 0
  5001  003252                     _EepromRead:
  5002                           	opt stack 23
  5003                           
  5004                           ;incstack = 0
  5005                           ;EepromRead@address stored from wreg
  5006  003252  6E19               	movwf	EepromRead@address,c
  5007                           
  5008                           ;FlashApp.c: 213: return DATAEE_ReadByte(address);
  5009  003254  5019               	movf	EepromRead@address,w,c
  5010  003256  ECC3  F018         	call	_DATAEE_ReadByte
  5011  00325A  0012               	return	
  5012  00325C                     __end_of_EepromRead:
  5013                           	opt stack 0
  5014                           tosu	equ	0xFFF
  5015                           tosh	equ	0xFFE
  5016                           tosl	equ	0xFFD
  5017                           pclath	equ	0xFFA
  5018                           tblptru	equ	0xFF8
  5019                           tblptrh	equ	0xFF7
  5020                           tblptrl	equ	0xFF6
  5021                           tablat	equ	0xFF5
  5022                           prodh	equ	0xFF4
  5023                           prodl	equ	0xFF3
  5024                           intcon	equ	0xFF2
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           postdec1	equ	0xFE5
  5028                           fsr1l	equ	0xFE1
  5029                           indf2	equ	0xFDF
  5030                           postinc2	equ	0xFDE
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _DATAEE_ReadByte *****************
  5036 ;; Defined at:
  5037 ;;		line 194 in file "mcc_generated_files/memory.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;  bAdd            1    wreg     unsigned char 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;  bAdd            1   23[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      unsigned char 
  5044 ;; Registers used:
  5045 ;;		wreg, status,2
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5051 ;;      Params:         0       0       0       0       0       0       0
  5052 ;;      Locals:         1       0       0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0
  5054 ;;      Totals:         1       0       0       0       0       0       0
  5055 ;;Total ram usage:        1 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    3
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_EepromRead
  5062 ;;		_EepromTest
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text27
  5067  003186                     __ptext27:
  5068                           	opt stack 0
  5069  003186                     _DATAEE_ReadByte:
  5070                           	opt stack 23
  5071                           
  5072                           ;incstack = 0
  5073                           ;DATAEE_ReadByte@bAdd stored from wreg
  5074  003186  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  5075                           
  5076                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  5077  003188  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  5078                           
  5079                           ;memory.c: 198: EECON1bits.CFGS = 0;
  5080  00318C  9CA6               	bcf	4006,6,c	;volsfr
  5081                           
  5082                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  5083  00318E  9EA6               	bcf	4006,7,c	;volsfr
  5084                           
  5085                           ;memory.c: 200: EECON1bits.RD = 1;
  5086  003190  80A6               	bsf	4006,0,c	;volsfr
  5087                           
  5088                           ;memory.c: 201: __nop();
  5089  003192  F000               	nop	
  5090                           
  5091                           ;memory.c: 202: __nop();
  5092  003194  F000               	nop	
  5093                           
  5094                           ;memory.c: 204: return (EEDATA);
  5095  003196  50A8               	movf	4008,w,c	;volatile
  5096  003198  0012               	return	
  5097  00319A                     __end_of_DATAEE_ReadByte:
  5098                           	opt stack 0
  5099                           tosu	equ	0xFFF
  5100                           tosh	equ	0xFFE
  5101                           tosl	equ	0xFFD
  5102                           pclath	equ	0xFFA
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _FlashReadUart *****************
  5121 ;; Defined at:
  5122 ;;		line 62 in file "FlashApp.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  numOfSampleT    2   35[COMRAM] int 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  idx             2   91[BANK0 ] int 
  5127 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  5128 ;;  offset          2   93[BANK0 ] int 
  5129 ;;  j               2   89[BANK0 ] int 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5139 ;;      Params:         2       0       0       0       0       0       0
  5140 ;;      Locals:         0      83       0       0       0       0       0
  5141 ;;      Temps:          0      12       0       0       0       0       0
  5142 ;;      Totals:         2      95       0       0       0       0       0
  5143 ;;Total ram usage:       97 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    5
  5146 ;; This function calls:
  5147 ;;		_FLASH_IsWriteDone
  5148 ;;		_FLASH_ReadByte
  5149 ;;		_WriteUartMessage
  5150 ;;		_ZeroArray
  5151 ;;		_abs
  5152 ;;		_crc8
  5153 ;; This function is called by:
  5154 ;;		_GroupFlashMemory
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text28
  5159  000672                     __ptext28:
  5160                           	opt stack 0
  5161  000672                     _FlashReadUart:
  5162                           	opt stack 23
  5163                           
  5164                           ;FlashApp.c: 65: int j=0;
  5165                           
  5166                           ;incstack = 0
  5167  000672  0E00               	movlw	0
  5168  000674  0100               	movlb	0	; () banked
  5169  000676  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5170  000678  0E00               	movlw	0
  5171  00067A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5172                           
  5173                           ;FlashApp.c: 66: int offset = 0;
  5174  00067C  0E00               	movlw	0
  5175  00067E  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5176  000680  0E00               	movlw	0
  5177  000682  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  5181                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5182  000684  0E6C               	movlw	low FlashReadUart@TxMsg
  5183  000686  6E20               	movwf	ZeroArray@array,c
  5184  000688  0E00               	movlw	high FlashReadUart@TxMsg
  5185  00068A  6E21               	movwf	ZeroArray@array+1,c
  5186  00068C  0E00               	movlw	0
  5187  00068E  6E23               	movwf	ZeroArray@size+1,c
  5188  000690  0E45               	movlw	69
  5189  000692  6E22               	movwf	ZeroArray@size,c
  5190  000694  EC85  F018         	call	_ZeroArray	;wreg free
  5191                           
  5192                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  5193  000698  EC04  F019         	call	_FLASH_IsWriteDone	;wreg free
  5194  00069C  0900               	iorlw	0
  5195  00069E  B4D8               	btfsc	status,2,c
  5196  0006A0  0012               	return	
  5197                           
  5198                           ;FlashApp.c: 74: }
  5199                           ;FlashApp.c: 76: if (numOfReadSamples)
  5200                           
  5201                           ;FlashApp.c: 72: {
  5202                           ;FlashApp.c: 73: return;
  5203  0006A2  503E               	movf	_numOfReadSamples,w,c
  5204  0006A4  103F               	iorwf	_numOfReadSamples+1,w,c
  5205  0006A6  1040               	iorwf	_numOfReadSamples+2,w,c
  5206  0006A8  1041               	iorwf	_numOfReadSamples+3,w,c
  5207  0006AA  B4D8               	btfsc	status,2,c
  5208  0006AC  D0EE               	goto	l282
  5209                           
  5210                           ;FlashApp.c: 77: {
  5211                           ;FlashApp.c: 78: if (numOfValidateSamples)
  5212  0006AE  5031               	movf	_numOfValidateSamples,w,c
  5213  0006B0  1032               	iorwf	_numOfValidateSamples+1,w,c
  5214  0006B2  1033               	iorwf	_numOfValidateSamples+2,w,c
  5215  0006B4  1034               	iorwf	_numOfValidateSamples+3,w,c
  5216  0006B6  B4D8               	btfsc	status,2,c
  5217  0006B8  D09A               	goto	l283
  5218                           
  5219                           ;FlashApp.c: 79: {
  5220                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5221  0006BA  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5222  0006BE  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5223  0006C2  0E00               	movlw	0
  5224  0006C4  0100               	movlb	0	; () banked
  5225  0006C6  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5226  0006C8  0EFF               	movlw	255
  5227  0006CA  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5228  0006CC  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5229  0006CE  5031               	movf	_numOfValidateSamples,w,c
  5230  0006D0  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5231  0006D2  5032               	movf	_numOfValidateSamples+1,w,c
  5232  0006D4  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5233  0006D6  5033               	movf	_numOfValidateSamples+2,w,c
  5234  0006D8  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5235  0006DA  5034               	movf	_numOfValidateSamples+3,w,c
  5236  0006DC  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5237  0006DE  B0D8               	btfsc	status,0,c
  5238  0006E0  D002               	goto	u5730
  5239  0006E2  0E01               	movlw	1
  5240  0006E4  D001               	goto	u5740
  5241  0006E6                     u5730:
  5242  0006E6  0E00               	movlw	0
  5243  0006E8                     u5740:
  5244  0006E8  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5245  0006EA  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  5246  0006EC  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  5247  0006EE  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  5248  0006F0  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5249  0006F2  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5250  0006F4  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5251  0006F6  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5252  0006F8  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5253  0006FA  0E00               	movlw	0
  5254  0006FC  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5255  0006FE  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5256  000700  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5257  000702  5031               	movf	_numOfValidateSamples,w,c
  5258  000704  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5259  000706  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  5260  000708  5032               	movf	_numOfValidateSamples+1,w,c
  5261  00070A  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5262  00070C  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  5263  00070E  5033               	movf	_numOfValidateSamples+2,w,c
  5264  000710  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5265  000712  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  5266  000714  5034               	movf	_numOfValidateSamples+3,w,c
  5267  000716  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5268  000718  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  5269  00071A  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5270  00071C  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5271  00071E  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5272  000720  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5273  000722  A4D8               	btfss	status,2,c
  5274  000724  D00A               	goto	l285
  5275                           
  5276                           ; BSR set to: 0
  5277  000726  C024  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$549
  5278  00072A  C025  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$549+1
  5279  00072E  0E00               	movlw	0
  5280  000730  BFB2               	btfsc	(_FlashReadUart$549+1)& (0+255),7,b
  5281  000732  0EFF               	movlw	-1
  5282  000734  6FB3               	movwf	(_FlashReadUart$549+2)& (0+255),b
  5283  000736  6FB4               	movwf	(_FlashReadUart$549+3)& (0+255),b
  5284  000738  D008               	goto	l287
  5285  00073A                     l285:
  5286                           
  5287                           ; BSR set to: 0
  5288  00073A  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$549
  5289  00073E  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$549+1
  5290  000742  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$549+2
  5291  000746  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$549+3
  5292  00074A                     l287:
  5293                           
  5294                           ; BSR set to: 0
  5295  00074A  C0B1  F0BD         	movff	_FlashReadUart$549,FlashReadUart@offset
  5296  00074E  C0B2  F0BE         	movff	_FlashReadUart$549+1,FlashReadUart@offset+1
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;FlashApp.c: 81: if(offset < 0)
  5300  000752  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5301  000754  D091               	goto	l290
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;FlashApp.c: 82: {
  5305                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  5306  000756  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  5307  00075A  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5308  00075E  ECBA  F017         	call	_abs	;wreg free
  5309  000762  C018  F060         	movff	?_abs,??_FlashReadUart
  5310  000766  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  5311  00076A  0E00               	movlw	0
  5312  00076C  0100               	movlb	0	; () banked
  5313  00076E  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5314  000770  0EFF               	movlw	255
  5315  000772  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5316  000774  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5317  000776  5160               	movf	??_FlashReadUart& (0+255),w,b
  5318  000778  5C3E               	subwf	_numOfReadSamples,w,c
  5319  00077A  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5320  00077C  583F               	subwfb	_numOfReadSamples+1,w,c
  5321  00077E  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5322  000780  5840               	subwfb	_numOfReadSamples+2,w,c
  5323  000782  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5324  000784  5841               	subwfb	_numOfReadSamples+3,w,c
  5325  000786  B0D8               	btfsc	status,0,c
  5326  000788  D016               	goto	l289
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;FlashApp.c: 84: {
  5330                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  5331  00078A  503E               	movf	_numOfReadSamples,w,c
  5332  00078C  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  5333  00078E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5334  000790  503F               	movf	_numOfReadSamples+1,w,c
  5335  000792  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5336  000794  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5337  000796  5160               	movf	??_FlashReadUart& (0+255),w,b
  5338  000798  2624               	addwf	FlashReadUart@numOfSampleToRead,f,c
  5339  00079A  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5340  00079C  2225               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  5344  00079E  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  5345  0007A2  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5346  0007A6  1F60               	comf	??_FlashReadUart& (0+255),f,b
  5347  0007A8  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5348  0007AA  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  5349  0007AC  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5350  0007AE  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  5351  0007B2  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5352  0007B6                     l289:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;FlashApp.c: 88: }
  5356                           ;FlashApp.c: 90: readAddress += offset * (64);
  5357  0007B6  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  5358  0007BA  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5359  0007BE  0E06               	movlw	6
  5360  0007C0                     u5785:
  5361  0007C0  90D8               	bcf	status,0,c
  5362  0007C2  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5363  0007C4  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5364  0007C6  2EE8               	decfsz	wreg,f,c
  5365  0007C8  D7FB               	goto	u5785
  5366  0007CA  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5367  0007CE  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5368  0007D2  0E00               	movlw	0
  5369  0007D4  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5370  0007D6  0EFF               	movlw	255
  5371  0007D8  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5372  0007DA  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5373  0007DC  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5374  0007DE  27F6               	addwf	_readAddress& (0+255),f,b
  5375  0007E0  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5376  0007E2  23F7               	addwfc	(_readAddress+1)& (0+255),f,b
  5377  0007E4  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5378  0007E6  23F8               	addwfc	(_readAddress+2)& (0+255),f,b
  5379  0007E8  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5380  0007EA  23F9               	addwfc	(_readAddress+3)& (0+255),f,b
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;FlashApp.c: 91: }
  5384                           ;FlashApp.c: 92: }
  5385  0007EC  D045               	goto	l290
  5386  0007EE                     l283:
  5387                           
  5388                           ;FlashApp.c: 93: else
  5389                           ;FlashApp.c: 94: {
  5390                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5391                           
  5392                           ; BSR set to: 0
  5393  0007EE  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5394  0007F2  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5395  0007F6  0E00               	movlw	0
  5396  0007F8  0100               	movlb	0	; () banked
  5397  0007FA  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5398  0007FC  0EFF               	movlw	255
  5399  0007FE  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5400  000800  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5401  000802  503E               	movf	_numOfReadSamples,w,c
  5402  000804  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5403  000806  503F               	movf	_numOfReadSamples+1,w,c
  5404  000808  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5405  00080A  5040               	movf	_numOfReadSamples+2,w,c
  5406  00080C  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5407  00080E  5041               	movf	_numOfReadSamples+3,w,c
  5408  000810  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5409  000812  A0D8               	btfss	status,0,c
  5410  000814  D009               	goto	l292
  5411                           
  5412                           ; BSR set to: 0
  5413  000816  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$550
  5414  00081A  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$550+1
  5415  00081E  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$550+2
  5416  000822  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$550+3
  5417  000826  D009               	goto	l294
  5418  000828                     l292:
  5419                           
  5420                           ; BSR set to: 0
  5421                           
  5422                           ; BSR set to: 0
  5423  000828  C024  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$550
  5424  00082C  C025  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$550+1
  5425  000830  0E00               	movlw	0
  5426  000832  BFB6               	btfsc	(_FlashReadUart$550+1)& (0+255),7,b
  5427  000834  0EFF               	movlw	-1
  5428  000836  6FB7               	movwf	(_FlashReadUart$550+2)& (0+255),b
  5429  000838  6FB8               	movwf	(_FlashReadUart$550+3)& (0+255),b
  5430  00083A                     l294:
  5431                           
  5432                           ; BSR set to: 0
  5433                           
  5434                           ; BSR set to: 0
  5435  00083A  C0B5  F024         	movff	_FlashReadUart$550,FlashReadUart@numOfSampleToRead
  5436  00083E  C0B6  F025         	movff	_FlashReadUart$550+1,FlashReadUart@numOfSampleToRead+1
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  5440  000842  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5441  000846  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5442  00084A  0E06               	movlw	6
  5443  00084C                     u5805:
  5444  00084C  90D8               	bcf	status,0,c
  5445  00084E  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5446  000850  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5447  000852  2EE8               	decfsz	wreg,f,c
  5448  000854  D7FB               	goto	u5805
  5449  000856  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5450  00085A  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5451  00085E  0E00               	movlw	0
  5452  000860  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5453  000862  0EFF               	movlw	255
  5454  000864  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5455  000866  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5456  000868  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5457  00086A  5FF6               	subwf	_readAddress& (0+255),f,b
  5458  00086C  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5459  00086E  5BF7               	subwfb	(_readAddress+1)& (0+255),f,b
  5460  000870  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5461  000872  5BF8               	subwfb	(_readAddress+2)& (0+255),f,b
  5462  000874  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5463  000876  5BF9               	subwfb	(_readAddress+3)& (0+255),f,b
  5464  000878                     l290:
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;FlashApp.c: 97: }
  5468                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  5469                           
  5470                           ; BSR set to: 0
  5471  000878  51F9               	movf	(_readAddress+3)& (0+255),w,b
  5472  00087A  11F8               	iorwf	(_readAddress+2)& (0+255),w,b
  5473  00087C  E138               	bnz	l6586
  5474  00087E  05F6               	decf	_readAddress& (0+255),w,b
  5475  000880  0E40               	movlw	64
  5476  000882  59F7               	subwfb	(_readAddress+1)& (0+255),w,b
  5477  000884  B0D8               	btfsc	status,0,c
  5478  000886  D033               	goto	l300
  5479  000888  D023               	goto	u5840
  5480  00088A                     l282:
  5481                           
  5482                           ;FlashApp.c: 104: else
  5483                           ;FlashApp.c: 105: {
  5484                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  5485                           
  5486                           ; BSR set to: 0
  5487  00088A  503B               	movf	_isReWriteDone,w,c
  5488  00088C  B4D8               	btfsc	status,2,c
  5489  00088E  D029               	goto	l297
  5490  000890  0100               	movlb	0	; () banked
  5491  000892  51F6               	movf	_readAddress& (0+255),w,b
  5492  000894  5C42               	subwf	_writeAddress,w,c
  5493  000896  51F7               	movf	(_readAddress+1)& (0+255),w,b
  5494  000898  5843               	subwfb	_writeAddress+1,w,c
  5495  00089A  51F8               	movf	(_readAddress+2)& (0+255),w,b
  5496  00089C  5844               	subwfb	_writeAddress+2,w,c
  5497  00089E  51F9               	movf	(_readAddress+3)& (0+255),w,b
  5498  0008A0  5845               	subwfb	_writeAddress+3,w,c
  5499  0008A2  A0D8               	btfss	status,0,c
  5500  0008A4  D01E               	goto	l297
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;FlashApp.c: 107: {
  5504                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  5505  0008A6  0E40               	movlw	64
  5506  0008A8  2442               	addwf	_writeAddress,w,c
  5507  0008AA  6FF6               	movwf	_readAddress& (0+255),b
  5508  0008AC  0E00               	movlw	0
  5509  0008AE  2043               	addwfc	_writeAddress+1,w,c
  5510  0008B0  6FF7               	movwf	(_readAddress+1)& (0+255),b
  5511  0008B2  0E00               	movlw	0
  5512  0008B4  2044               	addwfc	_writeAddress+2,w,c
  5513  0008B6  6FF8               	movwf	(_readAddress+2)& (0+255),b
  5514  0008B8  0E00               	movlw	0
  5515  0008BA  2045               	addwfc	_writeAddress+3,w,c
  5516  0008BC  6FF9               	movwf	(_readAddress+3)& (0+255),b
  5517                           
  5518                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  5519  0008BE  51F9               	movf	(_readAddress+3)& (0+255),w,b
  5520  0008C0  11F8               	iorwf	(_readAddress+2)& (0+255),w,b
  5521  0008C2  E106               	bnz	u5840
  5522  0008C4  0EF0               	movlw	240
  5523  0008C6  5DF6               	subwf	_readAddress& (0+255),w,b
  5524  0008C8  0E7F               	movlw	127
  5525  0008CA  59F7               	subwfb	(_readAddress+1)& (0+255),w,b
  5526  0008CC  A0D8               	btfss	status,0,c
  5527  0008CE  D00F               	goto	l300
  5528  0008D0                     u5840:
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;FlashApp.c: 110: {
  5532                           ;FlashApp.c: 111: readAddress = 0x4000;
  5533  0008D0  0E00               	movlw	0
  5534  0008D2  6FF6               	movwf	_readAddress& (0+255),b
  5535  0008D4  0E40               	movlw	64
  5536  0008D6  6FF7               	movwf	(_readAddress+1)& (0+255),b
  5537  0008D8  0E00               	movlw	0
  5538  0008DA  6FF8               	movwf	(_readAddress+2)& (0+255),b
  5539  0008DC  0E00               	movlw	0
  5540  0008DE  6FF9               	movwf	(_readAddress+3)& (0+255),b
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;FlashApp.c: 112: }
  5544                           ;FlashApp.c: 114: }
  5545  0008E0  D006               	goto	l300
  5546  0008E2                     l297:
  5547                           
  5548                           ;FlashApp.c: 115: else
  5549                           ;FlashApp.c: 116: {
  5550                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  5551                           
  5552                           ; BSR set to: 0
  5553  0008E2  5031               	movf	_numOfValidateSamples,w,c
  5554  0008E4  1032               	iorwf	_numOfValidateSamples+1,w,c
  5555  0008E6  1033               	iorwf	_numOfValidateSamples+2,w,c
  5556  0008E8  1034               	iorwf	_numOfValidateSamples+3,w,c
  5557  0008EA  B4D8               	btfsc	status,2,c
  5558  0008EC  0012               	return	
  5559  0008EE                     l300:
  5560  0008EE                     l6586:
  5561                           
  5562                           ;FlashApp.c: 119: }
  5563                           ;FlashApp.c: 120: }
  5564                           ;FlashApp.c: 123: TxMsg[(0)] = (0x24);
  5565  0008EE  0E24               	movlw	36
  5566  0008F0  0100               	movlb	0	; () banked
  5567  0008F2  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  5568                           
  5569                           ;FlashApp.c: 124: TxMsg[(1)] = FLASH_MSG;
  5570  0008F4  0E05               	movlw	5
  5571  0008F6  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5572                           
  5573                           ;FlashApp.c: 125: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5574  0008F8  0E54               	movlw	84
  5575  0008FA  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5576                           
  5577                           ;FlashApp.c: 126: TxMsg[(3)] = (64);
  5578  0008FC  0E40               	movlw	64
  5579  0008FE  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5580                           
  5581                           ;FlashApp.c: 128: for (j=0; j<numOfSampleToRead; j++)
  5582  000900  0E00               	movlw	0
  5583  000902  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5584  000904  0E00               	movlw	0
  5585  000906  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5586  000908  D084               	goto	l301
  5587  00090A                     
  5588                           ; BSR set to: 0
  5589                           ;FlashApp.c: 129: {
  5590                           ;FlashApp.c: 131: for(int idx = 0; idx < (64); idx++)
  5591                           
  5592                           ; BSR set to: 0
  5593  00090A  0E00               	movlw	0
  5594  00090C  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5595  00090E  0E00               	movlw	0
  5596  000910  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  5597  000912                     l6590:
  5598                           
  5599                           ; BSR set to: 0
  5600  000912  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5601  000914  D006               	goto	l303
  5602  000916  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5603  000918  E12C               	bnz	l6600
  5604  00091A  0E40               	movlw	64
  5605  00091C  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  5606  00091E  B0D8               	btfsc	status,0,c
  5607  000920  D028               	goto	u5870
  5608  000922                     l303:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;FlashApp.c: 132: {
  5612                           ;FlashApp.c: 133: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5613                           
  5614                           ; BSR set to: 0
  5615  000922  0E04               	movlw	4
  5616  000924  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  5617  000926  6F60               	movwf	??_FlashReadUart& (0+255),b
  5618  000928  0E00               	movlw	0
  5619  00092A  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5620  00092C  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5621  00092E  0E6C               	movlw	low FlashReadUart@TxMsg
  5622  000930  2560               	addwf	??_FlashReadUart& (0+255),w,b
  5623  000932  6ED9               	movwf	fsr2l,c
  5624  000934  0E00               	movlw	high FlashReadUart@TxMsg
  5625  000936  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5626  000938  6EDA               	movwf	fsr2h,c
  5627  00093A  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5628  00093E  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5629  000942  0E00               	movlw	0
  5630  000944  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5631  000946  0EFF               	movlw	255
  5632  000948  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5633  00094A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5634  00094C  51F6               	movf	_readAddress& (0+255),w,b
  5635  00094E  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5636  000950  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5637  000952  51F7               	movf	(_readAddress+1)& (0+255),w,b
  5638  000954  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5639  000956  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5640  000958  51F8               	movf	(_readAddress+2)& (0+255),w,b
  5641  00095A  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5642  00095C  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5643  00095E  51F9               	movf	(_readAddress+3)& (0+255),w,b
  5644  000960  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5645  000962  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5646  000964  ECD7  F018         	call	_FLASH_ReadByte	;wreg free
  5647  000968  6EDF               	movwf	indf2,c
  5648  00096A  0100               	movlb	0	; () banked
  5649  00096C  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  5650  00096E  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5651  000970  D7D0               	goto	l6590
  5652  000972                     u5870:
  5653  000972                     l6600:
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;FlashApp.c: 134: }
  5657                           ;FlashApp.c: 136: readAddress += (64);
  5658  000972  0E40               	movlw	64
  5659  000974  27F6               	addwf	_readAddress& (0+255),f,b
  5660  000976  0E00               	movlw	0
  5661  000978  23F7               	addwfc	(_readAddress+1)& (0+255),f,b
  5662  00097A  23F8               	addwfc	(_readAddress+2)& (0+255),f,b
  5663  00097C  23F9               	addwfc	(_readAddress+3)& (0+255),f,b
  5664                           
  5665                           ;FlashApp.c: 137: if (readAddress >= 0x7FF0)
  5666  00097E  51F9               	movf	(_readAddress+3)& (0+255),w,b
  5667  000980  11F8               	iorwf	(_readAddress+2)& (0+255),w,b
  5668  000982  E106               	bnz	u5880
  5669  000984  0EF0               	movlw	240
  5670  000986  5DF6               	subwf	_readAddress& (0+255),w,b
  5671  000988  0E7F               	movlw	127
  5672  00098A  59F7               	subwfb	(_readAddress+1)& (0+255),w,b
  5673  00098C  A0D8               	btfss	status,0,c
  5674  00098E  D008               	goto	l305
  5675  000990                     u5880:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;FlashApp.c: 138: {
  5679                           ;FlashApp.c: 139: readAddress = 0x4000;
  5680  000990  0E00               	movlw	0
  5681  000992  6FF6               	movwf	_readAddress& (0+255),b
  5682  000994  0E40               	movlw	64
  5683  000996  6FF7               	movwf	(_readAddress+1)& (0+255),b
  5684  000998  0E00               	movlw	0
  5685  00099A  6FF8               	movwf	(_readAddress+2)& (0+255),b
  5686  00099C  0E00               	movlw	0
  5687  00099E  6FF9               	movwf	(_readAddress+3)& (0+255),b
  5688  0009A0                     l305:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;FlashApp.c: 140: }
  5692                           ;FlashApp.c: 141: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5693                           
  5694                           ; BSR set to: 0
  5695  0009A0  0E6C               	movlw	low FlashReadUart@TxMsg
  5696  0009A2  6E18               	movwf	crc8@dataArray,c
  5697  0009A4  0E00               	movlw	high FlashReadUart@TxMsg
  5698  0009A6  6E19               	movwf	crc8@dataArray+1,c
  5699  0009A8  0E00               	movlw	0
  5700  0009AA  6E1B               	movwf	crc8@dataSize+1,c
  5701  0009AC  0E44               	movlw	68
  5702  0009AE  6E1A               	movwf	crc8@dataSize,c
  5703  0009B0  EC84  F014         	call	_crc8	;wreg free
  5704  0009B4  0100               	movlb	0	; () banked
  5705  0009B6  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;FlashApp.c: 143: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5709  0009B8  0E6C               	movlw	low FlashReadUart@TxMsg
  5710  0009BA  6E19               	movwf	WriteUartMessage@dataBuf,c
  5711  0009BC  0E00               	movlw	high FlashReadUart@TxMsg
  5712  0009BE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5713  0009C0  0E00               	movlw	0
  5714  0009C2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5715  0009C4  0E45               	movlw	69
  5716  0009C6  6E1B               	movwf	WriteUartMessage@dataSize,c
  5717  0009C8  ECC7  F016         	call	_WriteUartMessage	;wreg free
  5718                           
  5719                           ;FlashApp.c: 145: if(numOfValidateSamples)
  5720  0009CC  5031               	movf	_numOfValidateSamples,w,c
  5721  0009CE  1032               	iorwf	_numOfValidateSamples+1,w,c
  5722  0009D0  1033               	iorwf	_numOfValidateSamples+2,w,c
  5723  0009D2  1034               	iorwf	_numOfValidateSamples+3,w,c
  5724  0009D4  B4D8               	btfsc	status,2,c
  5725  0009D6  D01A               	goto	l308
  5726                           
  5727                           ;FlashApp.c: 146: {
  5728                           ;FlashApp.c: 147: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  5729  0009D8  043E               	decf	_numOfReadSamples,w,c
  5730  0009DA  0EFF               	movlw	255
  5731  0009DC  583F               	subwfb	_numOfReadSamples+1,w,c
  5732  0009DE  0EFF               	movlw	255
  5733  0009E0  5840               	subwfb	_numOfReadSamples+2,w,c
  5734  0009E2  0EFF               	movlw	255
  5735  0009E4  5841               	subwfb	_numOfReadSamples+3,w,c
  5736  0009E6  B0D8               	btfsc	status,0,c
  5737  0009E8  D006               	goto	l307
  5738                           
  5739                           ;FlashApp.c: 148: {
  5740                           ;FlashApp.c: 149: numOfReadSamples++;
  5741  0009EA  0E01               	movlw	1
  5742  0009EC  263E               	addwf	_numOfReadSamples,f,c
  5743  0009EE  0E00               	movlw	0
  5744  0009F0  223F               	addwfc	_numOfReadSamples+1,f,c
  5745  0009F2  2240               	addwfc	_numOfReadSamples+2,f,c
  5746  0009F4  2241               	addwfc	_numOfReadSamples+3,f,c
  5747  0009F6                     l307:
  5748                           
  5749                           ;FlashApp.c: 150: }
  5750                           ;FlashApp.c: 151: if (numOfValidateSamples > 0)
  5751  0009F6  5031               	movf	_numOfValidateSamples,w,c
  5752  0009F8  1032               	iorwf	_numOfValidateSamples+1,w,c
  5753  0009FA  1033               	iorwf	_numOfValidateSamples+2,w,c
  5754  0009FC  1034               	iorwf	_numOfValidateSamples+3,w,c
  5755  0009FE  B4D8               	btfsc	status,2,c
  5756  000A00  D005               	goto	l308
  5757                           
  5758                           ;FlashApp.c: 152: {
  5759                           ;FlashApp.c: 153: numOfValidateSamples--;
  5760  000A02  0631               	decf	_numOfValidateSamples,f,c
  5761  000A04  0E00               	movlw	0
  5762  000A06  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5763  000A08  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5764  000A0A  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5765  000A0C                     l308:
  5766  000A0C  0100               	movlb	0	; () banked
  5767  000A0E  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5768  000A10  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5769  000A12                     l301:
  5770                           
  5771                           ; BSR set to: 0
  5772                           
  5773                           ; BSR set to: 0
  5774  000A12  5024               	movf	FlashReadUart@numOfSampleToRead,w,c
  5775  000A14  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5776  000A16  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5777  000A18  0A80               	xorlw	128
  5778  000A1A  6F60               	movwf	??_FlashReadUart& (0+255),b
  5779  000A1C  5025               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5780  000A1E  0A80               	xorlw	128
  5781  000A20  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5782  000A22  B0D8               	btfsc	status,0,c
  5783  000A24  0012               	return	
  5784  000A26  D771               	goto	l302
  5785  000A28                     __end_of_FlashReadUart:
  5786                           	opt stack 0
  5787                           tosu	equ	0xFFF
  5788                           tosh	equ	0xFFE
  5789                           tosl	equ	0xFFD
  5790                           pclath	equ	0xFFA
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           fsr1l	equ	0xFE1
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _abs *****************
  5809 ;; Defined at:
  5810 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  a               2   23[COMRAM] int 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  2   23[COMRAM] int 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5824 ;;      Params:         2       0       0       0       0       0       0
  5825 ;;      Locals:         0       0       0       0       0       0       0
  5826 ;;      Temps:          2       0       0       0       0       0       0
  5827 ;;      Totals:         4       0       0       0       0       0       0
  5828 ;;Total ram usage:        4 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    3
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_FlashReadUart
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           	psect	text29
  5839  002F74                     __ptext29:
  5840                           	opt stack 0
  5841  002F74                     _abs:
  5842                           	opt stack 24
  5843                           
  5844                           ;incstack = 0
  5845  002F74  AE19               	btfss	abs@a+1,7,c
  5846  002F76  D00D               	goto	l1347
  5847  002F78  C018  F01A         	movff	abs@a,??_abs
  5848  002F7C  C019  F01B         	movff	abs@a+1,??_abs+1
  5849  002F80  1E1A               	comf	??_abs,f,c
  5850  002F82  1E1B               	comf	??_abs+1,f,c
  5851  002F84  4A1A               	infsnz	??_abs,f,c
  5852  002F86  2A1B               	incf	??_abs+1,f,c
  5853  002F88  C01A  F018         	movff	??_abs,?_abs
  5854  002F8C  C01B  F019         	movff	??_abs+1,?_abs+1
  5855  002F90  0012               	return	
  5856  002F92                     l1347:
  5857  002F92  C018  F018         	movff	abs@a,?_abs
  5858  002F96  C019  F019         	movff	abs@a+1,?_abs+1
  5859  002F9A  0012               	return		;funcret
  5860  002F9C                     __end_of_abs:
  5861                           	opt stack 0
  5862                           tosu	equ	0xFFF
  5863                           tosh	equ	0xFFE
  5864                           tosl	equ	0xFFD
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _FLASH_ReadByte *****************
  5884 ;; Defined at:
  5885 ;;		line 58 in file "mcc_generated_files/memory.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      unsigned char 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         4       0       0       0       0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         4       0       0       0       0       0       0
  5903 ;;Total ram usage:        4 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    3
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_FlashReadUart
  5910 ;;		_FlashTest
  5911 ;;		_FLASH_ReadWord
  5912 ;;		_FLASH_WriteByte
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text30
  5917  0031AE                     __ptext30:
  5918                           	opt stack 0
  5919  0031AE                     _FLASH_ReadByte:
  5920                           	opt stack 24
  5921                           
  5922                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5923                           
  5924                           ;incstack = 0
  5925  0031AE  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5926                           
  5927                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5928  0031B2  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5929                           
  5930                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5931  0031B6  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5932  0031BA  0008               	tblrd		*	;# 
  5933                           
  5934                           ;memory.c: 66: return (TABLAT);
  5935  0031BC  50F5               	movf	tablat,w,c	;volatile
  5936  0031BE  0012               	return	
  5937  0031C0                     __end_of_FLASH_ReadByte:
  5938                           	opt stack 0
  5939                           tosu	equ	0xFFF
  5940                           tosh	equ	0xFFE
  5941                           tosl	equ	0xFFD
  5942                           pclath	equ	0xFFA
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _FlashReadCondition *****************
  5961 ;; Defined at:
  5962 ;;		line 174 in file "FlashApp.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;		None
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5976 ;;      Params:         0       0       0       0       0       0       0
  5977 ;;      Locals:         9       0       0       0       0       0       0
  5978 ;;      Temps:          2       0       0       0       0       0       0
  5979 ;;      Totals:        11       0       0       0       0       0       0
  5980 ;;Total ram usage:       11 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    5
  5983 ;; This function calls:
  5984 ;;		_WriteUartMessage
  5985 ;;		_ZeroArray
  5986 ;;		_crc8
  5987 ;;		_make8
  5988 ;; This function is called by:
  5989 ;;		_GroupFlashMemory
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text31
  5994  001E6A                     __ptext31:
  5995                           	opt stack 0
  5996  001E6A                     _FlashReadCondition:
  5997                           	opt stack 23
  5998                           
  5999                           ;FlashApp.c: 177: char TxMsg[4 + (0x4) + 1];
  6000                           ;FlashApp.c: 178: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6001                           
  6002                           ;incstack = 0
  6003  001E6A  0E26               	movlw	low FlashReadCondition@TxMsg
  6004  001E6C  6E20               	movwf	ZeroArray@array,c
  6005  001E6E  0E00               	movlw	high FlashReadCondition@TxMsg
  6006  001E70  6E21               	movwf	ZeroArray@array+1,c
  6007  001E72  0E00               	movlw	0
  6008  001E74  6E23               	movwf	ZeroArray@size+1,c
  6009  001E76  0E09               	movlw	9
  6010  001E78  6E22               	movwf	ZeroArray@size,c
  6011  001E7A  EC85  F018         	call	_ZeroArray	;wreg free
  6012                           
  6013                           ;FlashApp.c: 181: TxMsg[(0)] = (0x24);
  6014  001E7E  0E24               	movlw	36
  6015  001E80  6E26               	movwf	FlashReadCondition@TxMsg,c
  6016                           
  6017                           ;FlashApp.c: 182: TxMsg[(1)] = FLASH_MSG;
  6018  001E82  0E05               	movlw	5
  6019  001E84  6E27               	movwf	FlashReadCondition@TxMsg+1,c
  6020                           
  6021                           ;FlashApp.c: 183: TxMsg[(2)] = FLASH_READ_CONDITION;
  6022  001E86  0E52               	movlw	82
  6023  001E88  6E28               	movwf	FlashReadCondition@TxMsg+2,c
  6024                           
  6025                           ;FlashApp.c: 184: TxMsg[(3)] = 4;
  6026  001E8A  0E04               	movlw	4
  6027  001E8C  6E29               	movwf	FlashReadCondition@TxMsg+3,c
  6028                           
  6029                           ;FlashApp.c: 189: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  6030  001E8E  0E3F               	movlw	63
  6031  001E90  6E19               	movwf	make8@data+1,c
  6032  001E92  0EF0               	movlw	240
  6033  001E94  6E18               	movwf	make8@data,c
  6034  001E96  0E01               	movlw	1
  6035  001E98  6E1A               	movwf	make8@dataLocation,c
  6036  001E9A  EC30  F017         	call	_make8	;wreg free
  6037  001E9E  6E2A               	movwf	FlashReadCondition@TxMsg+4,c
  6038                           
  6039                           ;FlashApp.c: 190: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  6040  001EA0  0E3F               	movlw	63
  6041  001EA2  6E19               	movwf	make8@data+1,c
  6042  001EA4  0EF0               	movlw	240
  6043  001EA6  6E18               	movwf	make8@data,c
  6044  001EA8  0E00               	movlw	0
  6045  001EAA  6E1A               	movwf	make8@dataLocation,c
  6046  001EAC  EC30  F017         	call	_make8	;wreg free
  6047  001EB0  6E2B               	movwf	FlashReadCondition@TxMsg+5,c
  6048                           
  6049                           ;FlashApp.c: 193: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6050  001EB2  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  6051  001EB6  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6052  001EBA  1E24               	comf	??_FlashReadCondition,f,c
  6053  001EBC  1E25               	comf	??_FlashReadCondition+1,f,c
  6054  001EBE  4A24               	infsnz	??_FlashReadCondition,f,c
  6055  001EC0  2A25               	incf	??_FlashReadCondition+1,f,c
  6056  001EC2  0EF0               	movlw	240
  6057  001EC4  2424               	addwf	??_FlashReadCondition,w,c
  6058  001EC6  6E18               	movwf	make8@data,c
  6059  001EC8  0E7F               	movlw	127
  6060  001ECA  2025               	addwfc	??_FlashReadCondition+1,w,c
  6061  001ECC  6E19               	movwf	make8@data+1,c
  6062  001ECE  0E01               	movlw	1
  6063  001ED0  6E1A               	movwf	make8@dataLocation,c
  6064  001ED2  EC30  F017         	call	_make8	;wreg free
  6065  001ED6  6E2C               	movwf	FlashReadCondition@TxMsg+6,c
  6066                           
  6067                           ;FlashApp.c: 194: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6068  001ED8  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  6069  001EDC  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6070  001EE0  1E24               	comf	??_FlashReadCondition,f,c
  6071  001EE2  1E25               	comf	??_FlashReadCondition+1,f,c
  6072  001EE4  4A24               	infsnz	??_FlashReadCondition,f,c
  6073  001EE6  2A25               	incf	??_FlashReadCondition+1,f,c
  6074  001EE8  0EF0               	movlw	240
  6075  001EEA  2424               	addwf	??_FlashReadCondition,w,c
  6076  001EEC  6E18               	movwf	make8@data,c
  6077  001EEE  0E7F               	movlw	127
  6078  001EF0  2025               	addwfc	??_FlashReadCondition+1,w,c
  6079  001EF2  6E19               	movwf	make8@data+1,c
  6080  001EF4  0E00               	movlw	0
  6081  001EF6  6E1A               	movwf	make8@dataLocation,c
  6082  001EF8  EC30  F017         	call	_make8	;wreg free
  6083  001EFC  6E2D               	movwf	FlashReadCondition@TxMsg+7,c
  6084                           
  6085                           ;FlashApp.c: 196: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6086  001EFE  0E26               	movlw	low FlashReadCondition@TxMsg
  6087  001F00  6E18               	movwf	crc8@dataArray,c
  6088  001F02  0E00               	movlw	high FlashReadCondition@TxMsg
  6089  001F04  6E19               	movwf	crc8@dataArray+1,c
  6090  001F06  0E00               	movlw	0
  6091  001F08  6E1B               	movwf	crc8@dataSize+1,c
  6092  001F0A  0E08               	movlw	8
  6093  001F0C  6E1A               	movwf	crc8@dataSize,c
  6094  001F0E  EC84  F014         	call	_crc8	;wreg free
  6095  001F12  6E2E               	movwf	FlashReadCondition@TxMsg+8,c
  6096                           
  6097                           ;FlashApp.c: 198: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6098  001F14  0E26               	movlw	low FlashReadCondition@TxMsg
  6099  001F16  6E19               	movwf	WriteUartMessage@dataBuf,c
  6100  001F18  0E00               	movlw	high FlashReadCondition@TxMsg
  6101  001F1A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6102  001F1C  0E00               	movlw	0
  6103  001F1E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6104  001F20  0E09               	movlw	9
  6105  001F22  6E1B               	movwf	WriteUartMessage@dataSize,c
  6106  001F24  ECC7  F016         	call	_WriteUartMessage	;wreg free
  6107  001F28  0012               	return		;funcret
  6108  001F2A                     __end_of_FlashReadCondition:
  6109                           	opt stack 0
  6110                           tosu	equ	0xFFF
  6111                           tosh	equ	0xFFE
  6112                           tosl	equ	0xFFD
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           postinc0	equ	0xFEE
  6122                           wreg	equ	0xFE8
  6123                           postdec1	equ	0xFE5
  6124                           fsr1l	equ	0xFE1
  6125                           indf2	equ	0xFDF
  6126                           postinc2	equ	0xFDE
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function _make8 *****************
  6132 ;; Defined at:
  6133 ;;		line 29 in file "SystemCommon.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  data            2   23[COMRAM] unsigned int 
  6136 ;;  dataLocation    1   25[COMRAM] unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      unsigned char 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6148 ;;      Params:         3       0       0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0
  6151 ;;      Totals:         3       0       0       0       0       0       0
  6152 ;;Total ram usage:        3 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    3
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_FlashReadCondition
  6159 ;;		_SWSPI_send_word
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text32
  6164  002E60                     __ptext32:
  6165                           	opt stack 0
  6166  002E60                     _make8:
  6167                           	opt stack 23
  6168                           
  6169                           ;SystemCommon.c: 31: switch(dataLocation)
  6170                           
  6171                           ;incstack = 0
  6172  002E60  D00A               	goto	l1149
  6173  002E62                     
  6174                           ;SystemCommon.c: 34: return (data & 0x000000ff);
  6175  002E62  5018               	movf	make8@data,w,c
  6176  002E64  0012               	return	
  6177  002E66                     
  6178                           ;SystemCommon.c: 37: return (data & 0x0000ff00) >> 8;
  6179  002E66  5019               	movf	make8@data+1,w,c
  6180  002E68  0012               	return	
  6181  002E6A                     
  6182                           ;SystemCommon.c: 40: return (data & 0x00ff0000) >> 16;
  6183  002E6A  0E00               	movlw	0
  6184  002E6C  0012               	return	
  6185  002E6E                     
  6186                           ;SystemCommon.c: 43: return (data & 0xff000000) >> 24;
  6187  002E6E  0E00               	movlw	0
  6188  002E70  0012               	return	
  6189  002E72                     
  6190                           ;SystemCommon.c: 46: return (0);
  6191  002E72  0E00               	movlw	0
  6192                           
  6193                           ;SystemCommon.c: 47: }
  6194  002E74  0012               	return	
  6195  002E76                     l1149:
  6196  002E76  501A               	movf	make8@dataLocation,w,c
  6197                           
  6198                           ; Switch size 1, requested type "space"
  6199                           ; Number of cases is 4, Range of values is 0 to 3
  6200                           ; switch strategies available:
  6201                           ; Name         Instructions Cycles
  6202                           ; simple_byte           13     7 (average)
  6203                           ;	Chosen strategy is simple_byte
  6204  002E78  0A00               	xorlw	0	; case 0
  6205  002E7A  B4D8               	btfsc	status,2,c
  6206  002E7C  D7F2               	goto	l1150
  6207  002E7E  0A01               	xorlw	1	; case 1
  6208  002E80  B4D8               	btfsc	status,2,c
  6209  002E82  D7F1               	goto	l1152
  6210  002E84  0A03               	xorlw	3	; case 2
  6211  002E86  B4D8               	btfsc	status,2,c
  6212  002E88  D7F0               	goto	l1153
  6213  002E8A  0A01               	xorlw	1	; case 3
  6214  002E8C  B4D8               	btfsc	status,2,c
  6215  002E8E  D7EF               	goto	l1154
  6216  002E90  D7F0               	goto	l1155
  6217  002E92                     __end_of_make8:
  6218                           	opt stack 0
  6219                           tosu	equ	0xFFF
  6220                           tosh	equ	0xFFE
  6221                           tosl	equ	0xFFD
  6222                           pclath	equ	0xFFA
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           postdec1	equ	0xFE5
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function _FlashEreaseMem *****************
  6241 ;; Defined at:
  6242 ;;		line 164 in file "FlashApp.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;		None
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;		None
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      void 
  6249 ;; Registers used:
  6250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6256 ;;      Params:         0       0       0       0       0       0       0
  6257 ;;      Locals:         0       0       0       0       0       0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0
  6259 ;;      Totals:         0       0       0       0       0       0       0
  6260 ;;Total ram usage:        0 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    6
  6263 ;; This function calls:
  6264 ;;		_SendAckMessage
  6265 ;;		_ZeroArray
  6266 ;; This function is called by:
  6267 ;;		_GroupFlashMemory
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text33
  6272  002814                     __ptext33:
  6273                           	opt stack 0
  6274  002814                     _FlashEreaseMem:
  6275                           	opt stack 22
  6276                           
  6277                           ;FlashApp.c: 166: writeAddress = 0x4000;
  6278                           
  6279                           ;incstack = 0
  6280  002814  0E00               	movlw	0
  6281  002816  6E42               	movwf	_writeAddress,c
  6282  002818  0E40               	movlw	64
  6283  00281A  6E43               	movwf	_writeAddress+1,c
  6284  00281C  0E00               	movlw	0
  6285  00281E  6E44               	movwf	_writeAddress+2,c
  6286  002820  0E00               	movlw	0
  6287  002822  6E45               	movwf	_writeAddress+3,c
  6288                           
  6289                           ;FlashApp.c: 167: readAddress = 0x4000;
  6290  002824  0E00               	movlw	0
  6291  002826  0100               	movlb	0	; () banked
  6292  002828  6FF6               	movwf	_readAddress& (0+255),b
  6293  00282A  0E40               	movlw	64
  6294  00282C  6FF7               	movwf	(_readAddress+1)& (0+255),b
  6295  00282E  0E00               	movlw	0
  6296  002830  6FF8               	movwf	(_readAddress+2)& (0+255),b
  6297  002832  0E00               	movlw	0
  6298  002834  6FF9               	movwf	(_readAddress+3)& (0+255),b
  6299                           
  6300                           ;FlashApp.c: 168: numOfValidateSamples = 0;
  6301  002836  0E00               	movlw	0
  6302  002838  6E31               	movwf	_numOfValidateSamples,c
  6303  00283A  0E00               	movlw	0
  6304  00283C  6E32               	movwf	_numOfValidateSamples+1,c
  6305  00283E  0E00               	movlw	0
  6306  002840  6E33               	movwf	_numOfValidateSamples+2,c
  6307  002842  0E00               	movlw	0
  6308  002844  6E34               	movwf	_numOfValidateSamples+3,c
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;FlashApp.c: 169: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6312  002846  0E6E               	movlw	low _sampleArray
  6313  002848  6E20               	movwf	ZeroArray@array,c
  6314  00284A  0E01               	movlw	high _sampleArray
  6315  00284C  6E21               	movwf	ZeroArray@array+1,c
  6316  00284E  0E00               	movlw	0
  6317  002850  6E23               	movwf	ZeroArray@size+1,c
  6318  002852  0E20               	movlw	32
  6319  002854  6E22               	movwf	ZeroArray@size,c
  6320  002856  EC85  F018         	call	_ZeroArray	;wreg free
  6321                           
  6322                           ;FlashApp.c: 170: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6323  00285A  0E51               	movlw	81
  6324  00285C  6E24               	movwf	SendAckMessage@inRequest,c
  6325  00285E  0E05               	movlw	5
  6326  002860  EC33  F014         	call	_SendAckMessage
  6327  002864  0012               	return		;funcret
  6328  002866                     __end_of_FlashEreaseMem:
  6329                           	opt stack 0
  6330                           tosu	equ	0xFFF
  6331                           tosh	equ	0xFFE
  6332                           tosl	equ	0xFFD
  6333                           pclath	equ	0xFFA
  6334                           tblptru	equ	0xFF8
  6335                           tblptrh	equ	0xFF7
  6336                           tblptrl	equ	0xFF6
  6337                           tablat	equ	0xFF5
  6338                           prodh	equ	0xFF4
  6339                           prodl	equ	0xFF3
  6340                           intcon	equ	0xFF2
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           postdec1	equ	0xFE5
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           fsr2h	equ	0xFDA
  6348                           fsr2l	equ	0xFD9
  6349                           status	equ	0xFD8
  6350                           
  6351 ;; *************** function _DacSetValue *****************
  6352 ;; Defined at:
  6353 ;;		line 26 in file "DacApp.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  data            2   81[BANK0 ] PTR unsigned char 
  6356 ;;		 -> rxMsgData(20), 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  idx             2  109[BANK0 ] int 
  6359 ;;  idx             2  107[BANK0 ] int 
  6360 ;;  tempArr         5   85[BANK0 ] unsigned char [5]
  6361 ;;  dVout           3  100[BANK0 ] unsigned char [5]
  6362 ;;  digitalVal      2  105[BANK0 ] int 
  6363 ;;  dataCnt         2  103[BANK0 ] int 
  6364 ;;  vout            1   90[BANK0 ] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6374 ;;      Params:         0       2       0       0       0       0       0
  6375 ;;      Locals:         0      26       0       0       0       0       0
  6376 ;;      Temps:          0       2       0       0       0       0       0
  6377 ;;      Totals:         0      30       0       0       0       0       0
  6378 ;;Total ram usage:       30 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    8
  6381 ;; This function calls:
  6382 ;;		_SendAckMessage
  6383 ;;		___awtoft
  6384 ;;		___ftadd
  6385 ;;		___ftdiv
  6386 ;;		___ftmul
  6387 ;;		___fttol
  6388 ;;		___lbtoft
  6389 ;;		_pow
  6390 ;; This function is called by:
  6391 ;;		_GroupDAC
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text34
  6396  000A28                     __ptext34:
  6397                           	opt stack 0
  6398  000A28                     _DacSetValue:
  6399                           	opt stack 20
  6400                           
  6401                           ;DacApp.c: 28: int digitalVal = 0, dataCnt = 0;
  6402                           
  6403                           ;incstack = 0
  6404  000A28  0E00               	movlw	0
  6405  000A2A  0100               	movlb	0	; () banked
  6406  000A2C  6FCA               	movwf	(DacSetValue@digitalVal+1)& (0+255),b
  6407  000A2E  0E00               	movlw	0
  6408  000A30  6FC9               	movwf	DacSetValue@digitalVal& (0+255),b
  6409  000A32  0E00               	movlw	0
  6410  000A34  6FC8               	movwf	(DacSetValue@dataCnt+1)& (0+255),b
  6411  000A36  0E00               	movlw	0
  6412  000A38  6FC7               	movwf	DacSetValue@dataCnt& (0+255),b
  6413                           
  6414                           ;DacApp.c: 29: uint8_t vout = 0;
  6415  000A3A  0E00               	movlw	0
  6416  000A3C  6FBA               	movwf	DacSetValue@vout& (0+255),b
  6417                           
  6418                           ;DacApp.c: 31: double dVout = 0;
  6419  000A3E  0E00               	movlw	0
  6420  000A40  6FC4               	movwf	DacSetValue@dVout& (0+255),b
  6421  000A42  0E00               	movlw	0
  6422  000A44  6FC5               	movwf	(DacSetValue@dVout+1)& (0+255),b
  6423  000A46  0E00               	movlw	0
  6424  000A48  6FC6               	movwf	(DacSetValue@dVout+2)& (0+255),b
  6425                           
  6426                           ;DacApp.c: 32: char tempArr[5];
  6427                           ;DacApp.c: 33: for(int idx = 0; idx < 5; idx++)
  6428  000A4A  0E00               	movlw	0
  6429  000A4C  6FCC               	movwf	(DacSetValue@idx+1)& (0+255),b
  6430  000A4E  0E00               	movlw	0
  6431  000A50  6FCB               	movwf	DacSetValue@idx& (0+255),b
  6432  000A52                     l6648:
  6433                           
  6434                           ; BSR set to: 0
  6435  000A52  BFCC               	btfsc	(DacSetValue@idx+1)& (0+255),7,b
  6436  000A54  D006               	goto	l383
  6437  000A56  51CC               	movf	(DacSetValue@idx+1)& (0+255),w,b
  6438  000A58  E121               	bnz	l6662
  6439  000A5A  0E05               	movlw	5
  6440  000A5C  5DCB               	subwf	DacSetValue@idx& (0+255),w,b
  6441  000A5E  B0D8               	btfsc	status,0,c
  6442  000A60  D01D               	goto	u5950
  6443  000A62                     l383:
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;DacApp.c: 34: {
  6447                           ;DacApp.c: 35: if(data[idx] != 0x2e)
  6448                           
  6449                           ; BSR set to: 0
  6450  000A62  51CB               	movf	DacSetValue@idx& (0+255),w,b
  6451  000A64  25B1               	addwf	DacSetValue@data& (0+255),w,b
  6452  000A66  6ED9               	movwf	fsr2l,c
  6453  000A68  51CC               	movf	(DacSetValue@idx+1)& (0+255),w,b
  6454  000A6A  21B2               	addwfc	(DacSetValue@data+1)& (0+255),w,b
  6455  000A6C  6EDA               	movwf	fsr2h,c
  6456  000A6E  0E2E               	movlw	46
  6457  000A70  18DE               	xorwf	postinc2,w,c
  6458  000A72  B4D8               	btfsc	status,2,c
  6459  000A74  D010               	goto	l385
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;DacApp.c: 36: {
  6463                           ;DacApp.c: 37: tempArr[dataCnt++] = data[idx];
  6464  000A76  51CB               	movf	DacSetValue@idx& (0+255),w,b
  6465  000A78  25B1               	addwf	DacSetValue@data& (0+255),w,b
  6466  000A7A  6ED9               	movwf	fsr2l,c
  6467  000A7C  51CC               	movf	(DacSetValue@idx+1)& (0+255),w,b
  6468  000A7E  21B2               	addwfc	(DacSetValue@data+1)& (0+255),w,b
  6469  000A80  6EDA               	movwf	fsr2h,c
  6470  000A82  0EB5               	movlw	low DacSetValue@tempArr
  6471  000A84  25C7               	addwf	DacSetValue@dataCnt& (0+255),w,b
  6472  000A86  6EE1               	movwf	fsr1l,c
  6473  000A88  0E00               	movlw	high DacSetValue@tempArr
  6474  000A8A  21C8               	addwfc	(DacSetValue@dataCnt+1)& (0+255),w,b
  6475  000A8C  6EE2               	movwf	fsr1h,c
  6476  000A8E  CFDF FFE7          	movff	indf2,indf1
  6477                           
  6478                           ; BSR set to: 0
  6479  000A92  4BC7               	infsnz	DacSetValue@dataCnt& (0+255),f,b
  6480  000A94  2BC8               	incf	(DacSetValue@dataCnt+1)& (0+255),f,b
  6481  000A96                     l385:
  6482                           
  6483                           ; BSR set to: 0
  6484                           
  6485                           ; BSR set to: 0
  6486  000A96  4BCB               	infsnz	DacSetValue@idx& (0+255),f,b
  6487  000A98  2BCC               	incf	(DacSetValue@idx+1)& (0+255),f,b
  6488  000A9A  D7DB               	goto	l6648
  6489  000A9C                     u5950:
  6490  000A9C                     l6662:
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;DacApp.c: 38: }
  6494                           ;DacApp.c: 39: }
  6495                           ;DacApp.c: 41: for(int idx = 0; idx < 5 - 1; idx++)
  6496  000A9C  0E00               	movlw	0
  6497  000A9E  6FCE               	movwf	(DacSetValue@idx_643+1)& (0+255),b
  6498  000AA0  0E00               	movlw	0
  6499  000AA2  6FCD               	movwf	DacSetValue@idx_643& (0+255),b
  6500  000AA4                     l6664:
  6501                           
  6502                           ; BSR set to: 0
  6503  000AA4  BFCE               	btfsc	(DacSetValue@idx_643+1)& (0+255),7,b
  6504  000AA6  D006               	goto	l386
  6505  000AA8  51CE               	movf	(DacSetValue@idx_643+1)& (0+255),w,b
  6506  000AAA  E16F               	bnz	l6678
  6507  000AAC  0E04               	movlw	4
  6508  000AAE  5DCD               	subwf	DacSetValue@idx_643& (0+255),w,b
  6509  000AB0  B0D8               	btfsc	status,0,c
  6510  000AB2  D06B               	goto	u5970
  6511  000AB4                     l386:
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;DacApp.c: 42: {
  6515                           ;DacApp.c: 43: digitalVal += tempArr[5 - 2 - idx]*pow(10,idx);
  6516                           
  6517                           ; BSR set to: 0
  6518  000AB4  C0CD  F020         	movff	DacSetValue@idx_643,___awtoft@c
  6519  000AB8  C0CE  F021         	movff	DacSetValue@idx_643+1,___awtoft@c+1
  6520  000ABC  EC3E  F016         	call	___awtoft	;wreg free
  6521  000AC0  C020  F0BB         	movff	?___awtoft,_DacSetValue$3071
  6522  000AC4  C021  F0BC         	movff	?___awtoft+1,_DacSetValue$3071+1
  6523  000AC8  C022  F0BD         	movff	?___awtoft+2,_DacSetValue$3071+2
  6524                           
  6525                           ;DacApp.c: 42: {
  6526                           ;DacApp.c: 43: digitalVal += tempArr[5 - 2 - idx]*pow(10,idx);
  6527  000ACC  C0BB  F0A3         	movff	_DacSetValue$3071,pow@y
  6528  000AD0  C0BC  F0A4         	movff	_DacSetValue$3071+1,pow@y+1
  6529  000AD4  C0BD  F0A5         	movff	_DacSetValue$3071+2,pow@y+2
  6530  000AD8  0E00               	movlw	0
  6531  000ADA  0100               	movlb	0	; () banked
  6532  000ADC  6FA0               	movwf	pow@x& (0+255),b
  6533  000ADE  0E20               	movlw	32
  6534  000AE0  6FA1               	movwf	(pow@x+1)& (0+255),b
  6535  000AE2  0E41               	movlw	65
  6536  000AE4  6FA2               	movwf	(pow@x+2)& (0+255),b
  6537  000AE6  ECB9  F009         	call	_pow	;wreg free
  6538  000AEA  C0A0  F0BE         	movff	?_pow,_DacSetValue$3072
  6539  000AEE  C0A1  F0BF         	movff	?_pow+1,_DacSetValue$3072+1
  6540  000AF2  C0A2  F0C0         	movff	?_pow+2,_DacSetValue$3072+2
  6541                           
  6542                           ;DacApp.c: 42: {
  6543                           ;DacApp.c: 43: digitalVal += tempArr[5 - 2 - idx]*pow(10,idx);
  6544  000AF6  C0BE  F02C         	movff	_DacSetValue$3072,___ftmul@f2
  6545  000AFA  C0BF  F02D         	movff	_DacSetValue$3072+1,___ftmul@f2+1
  6546  000AFE  C0C0  F02E         	movff	_DacSetValue$3072+2,___ftmul@f2+2
  6547  000B02  0E02               	movlw	2
  6548  000B04  0100               	movlb	0	; () banked
  6549  000B06  25CD               	addwf	DacSetValue@idx_643& (0+255),w,b
  6550  000B08  6FB3               	movwf	??_DacSetValue& (0+255),b
  6551  000B0A  0E00               	movlw	0
  6552  000B0C  21CE               	addwfc	(DacSetValue@idx_643+1)& (0+255),w,b
  6553  000B0E  6FB4               	movwf	(??_DacSetValue+1)& (0+255),b
  6554  000B10  1FB3               	comf	??_DacSetValue& (0+255),f,b
  6555  000B12  1FB4               	comf	(??_DacSetValue+1)& (0+255),f,b
  6556  000B14  4BB3               	infsnz	??_DacSetValue& (0+255),f,b
  6557  000B16  2BB4               	incf	(??_DacSetValue+1)& (0+255),f,b
  6558  000B18  0E05               	movlw	5
  6559  000B1A  27B3               	addwf	??_DacSetValue& (0+255),f,b
  6560  000B1C  0E00               	movlw	0
  6561  000B1E  23B4               	addwfc	(??_DacSetValue+1)& (0+255),f,b
  6562  000B20  0EB5               	movlw	low DacSetValue@tempArr
  6563  000B22  25B3               	addwf	??_DacSetValue& (0+255),w,b
  6564  000B24  6ED9               	movwf	fsr2l,c
  6565  000B26  0E00               	movlw	high DacSetValue@tempArr
  6566  000B28  21B4               	addwfc	(??_DacSetValue+1)& (0+255),w,b
  6567  000B2A  6EDA               	movwf	fsr2h,c
  6568  000B2C  50DF               	movf	indf2,w,c
  6569  000B2E  ECF4  F017         	call	___lbtoft
  6570  000B32  C020  F029         	movff	?___lbtoft,___ftmul@f1
  6571  000B36  C021  F02A         	movff	?___lbtoft+1,___ftmul@f1+1
  6572  000B3A  C022  F02B         	movff	?___lbtoft+2,___ftmul@f1+2
  6573  000B3E  EC95  F00C         	call	___ftmul	;wreg free
  6574  000B42  C029  F06C         	movff	?___ftmul,___ftadd@f2
  6575  000B46  C02A  F06D         	movff	?___ftmul+1,___ftadd@f2+1
  6576  000B4A  C02B  F06E         	movff	?___ftmul+2,___ftadd@f2+2
  6577  000B4E  C0C9  F020         	movff	DacSetValue@digitalVal,___awtoft@c
  6578  000B52  C0CA  F021         	movff	DacSetValue@digitalVal+1,___awtoft@c+1
  6579  000B56  EC3E  F016         	call	___awtoft	;wreg free
  6580  000B5A  C020  F069         	movff	?___awtoft,___ftadd@f1
  6581  000B5E  C021  F06A         	movff	?___awtoft+1,___ftadd@f1+1
  6582  000B62  C022  F06B         	movff	?___awtoft+2,___ftadd@f1+2
  6583  000B66  ECE2  F008         	call	___ftadd	;wreg free
  6584  000B6A  C069  F078         	movff	?___ftadd,___fttol@f1
  6585  000B6E  C06A  F079         	movff	?___ftadd+1,___fttol@f1+1
  6586  000B72  C06B  F07A         	movff	?___ftadd+2,___fttol@f1+2
  6587  000B76  EC19  F00C         	call	___fttol	;wreg free
  6588  000B7A  C078  F0C9         	movff	?___fttol,DacSetValue@digitalVal
  6589  000B7E  C079  F0CA         	movff	?___fttol+1,DacSetValue@digitalVal+1
  6590  000B82  0100               	movlb	0	; () banked
  6591  000B84  4BCD               	infsnz	DacSetValue@idx_643& (0+255),f,b
  6592  000B86  2BCE               	incf	(DacSetValue@idx_643+1)& (0+255),f,b
  6593  000B88  D78D               	goto	l6664
  6594  000B8A                     u5970:
  6595  000B8A                     l6678:
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;DacApp.c: 44: }
  6599                           ;DacApp.c: 46: dVout = (digitalVal - 0) * pow(2,10) / (5500 - 0);
  6600  000B8A  0E00               	movlw	0
  6601  000B8C  6FA3               	movwf	pow@y& (0+255),b
  6602  000B8E  0E20               	movlw	32
  6603  000B90  6FA4               	movwf	(pow@y+1)& (0+255),b
  6604  000B92  0E41               	movlw	65
  6605  000B94  6FA5               	movwf	(pow@y+2)& (0+255),b
  6606  000B96  0E00               	movlw	0
  6607  000B98  6FA0               	movwf	pow@x& (0+255),b
  6608  000B9A  0E00               	movlw	0
  6609  000B9C  6FA1               	movwf	(pow@x+1)& (0+255),b
  6610  000B9E  0E40               	movlw	64
  6611  000BA0  6FA2               	movwf	(pow@x+2)& (0+255),b
  6612  000BA2  ECB9  F009         	call	_pow	;wreg free
  6613  000BA6  C0A0  F0C1         	movff	?_pow,_DacSetValue$3073
  6614  000BAA  C0A1  F0C2         	movff	?_pow+1,_DacSetValue$3073+1
  6615  000BAE  C0A2  F0C3         	movff	?_pow+2,_DacSetValue$3073+2
  6616                           
  6617                           ;DacApp.c: 44: }
  6618                           ;DacApp.c: 46: dVout = (digitalVal - 0) * pow(2,10) / (5500 - 0);
  6619  000BB2  C0C1  F02C         	movff	_DacSetValue$3073,___ftmul@f2
  6620  000BB6  C0C2  F02D         	movff	_DacSetValue$3073+1,___ftmul@f2+1
  6621  000BBA  C0C3  F02E         	movff	_DacSetValue$3073+2,___ftmul@f2+2
  6622  000BBE  C0C9  F020         	movff	DacSetValue@digitalVal,___awtoft@c
  6623  000BC2  C0CA  F021         	movff	DacSetValue@digitalVal+1,___awtoft@c+1
  6624  000BC6  EC3E  F016         	call	___awtoft	;wreg free
  6625  000BCA  C020  F029         	movff	?___awtoft,___ftmul@f1
  6626  000BCE  C021  F02A         	movff	?___awtoft+1,___ftmul@f1+1
  6627  000BD2  C022  F02B         	movff	?___awtoft+2,___ftmul@f1+2
  6628  000BD6  EC95  F00C         	call	___ftmul	;wreg free
  6629  000BDA  C029  F069         	movff	?___ftmul,___ftdiv@f1
  6630  000BDE  C02A  F06A         	movff	?___ftmul+1,___ftdiv@f1+1
  6631  000BE2  C02B  F06B         	movff	?___ftmul+2,___ftdiv@f1+2
  6632  000BE6  0EE0               	movlw	224
  6633  000BE8  0100               	movlb	0	; () banked
  6634  000BEA  6F6C               	movwf	___ftdiv@f2& (0+255),b
  6635  000BEC  0EAB               	movlw	171
  6636  000BEE  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
  6637  000BF0  0E45               	movlw	69
  6638  000BF2  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
  6639  000BF4  EC10  F00D         	call	___ftdiv	;wreg free
  6640  000BF8  C069  F0C4         	movff	?___ftdiv,DacSetValue@dVout
  6641  000BFC  C06A  F0C5         	movff	?___ftdiv+1,DacSetValue@dVout+1
  6642  000C00  C06B  F0C6         	movff	?___ftdiv+2,DacSetValue@dVout+2
  6643                           
  6644                           ;DacApp.c: 47: vout = (uint8_t)dVout;
  6645  000C04  C0C4  F078         	movff	DacSetValue@dVout,___fttol@f1
  6646  000C08  C0C5  F079         	movff	DacSetValue@dVout+1,___fttol@f1+1
  6647  000C0C  C0C6  F07A         	movff	DacSetValue@dVout+2,___fttol@f1+2
  6648  000C10  EC19  F00C         	call	___fttol	;wreg free
  6649  000C14  0100               	movlb	0	; () banked
  6650  000C16  5178               	movf	?___fttol& (0+255),w,b
  6651  000C18  6FBA               	movwf	DacSetValue@vout& (0+255),b
  6652                           
  6653                           ; BSR set to: 0
  6654                           ;DacApp.c: 53: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6655  000C1A  0E61               	movlw	97
  6656  000C1C  6E24               	movwf	SendAckMessage@inRequest,c
  6657  000C1E  0E06               	movlw	6
  6658  000C20  EC33  F014         	call	_SendAckMessage
  6659  000C24  0012               	return		;funcret
  6660  000C26                     __end_of_DacSetValue:
  6661                           	opt stack 0
  6662                           tosu	equ	0xFFF
  6663                           tosh	equ	0xFFE
  6664                           tosl	equ	0xFFD
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           indf1	equ	0xFE7
  6676                           postdec1	equ	0xFE5
  6677                           fsr1h	equ	0xFE2
  6678                           fsr1l	equ	0xFE1
  6679                           indf2	equ	0xFDF
  6680                           postinc2	equ	0xFDE
  6681                           fsr2h	equ	0xFDA
  6682                           fsr2l	equ	0xFD9
  6683                           status	equ	0xFD8
  6684                           
  6685 ;; *************** function ___lbtoft *****************
  6686 ;; Defined at:
  6687 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;  c               1    wreg     unsigned char 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;  c               1   34[COMRAM] unsigned char 
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  3   31[COMRAM] float 
  6694 ;; Registers used:
  6695 ;;		wreg, status,2, status,0, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6701 ;;      Params:         3       0       0       0       0       0       0
  6702 ;;      Locals:         1       0       0       0       0       0       0
  6703 ;;      Temps:          0       0       0       0       0       0       0
  6704 ;;      Totals:         4       0       0       0       0       0       0
  6705 ;;Total ram usage:        4 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:    4
  6708 ;; This function calls:
  6709 ;;		___ftpack
  6710 ;; This function is called by:
  6711 ;;		_DacSetValue
  6712 ;;		_UpdateTxFreq
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text35
  6717  002FE8                     __ptext35:
  6718                           	opt stack 0
  6719  002FE8                     ___lbtoft:
  6720                           	opt stack 23
  6721                           
  6722                           ;incstack = 0
  6723                           ;___lbtoft@c stored from wreg
  6724  002FE8  6E23               	movwf	___lbtoft@c,c
  6725  002FEA  5023               	movf	___lbtoft@c,w,c
  6726  002FEC  6E18               	movwf	___ftpack@arg,c
  6727  002FEE  6A19               	clrf	___ftpack@arg+1,c
  6728  002FF0  6A1A               	clrf	___ftpack@arg+2,c
  6729  002FF2  0E8E               	movlw	142
  6730  002FF4  6E1B               	movwf	___ftpack@exp,c
  6731  002FF6  0E00               	movlw	0
  6732  002FF8  6E1C               	movwf	___ftpack@sign,c
  6733  002FFA  ECF3  F00F         	call	___ftpack	;wreg free
  6734  002FFE  C018  F020         	movff	?___ftpack,?___lbtoft
  6735  003002  C019  F021         	movff	?___ftpack+1,?___lbtoft+1
  6736  003006  C01A  F022         	movff	?___ftpack+2,?___lbtoft+2
  6737  00300A  0012               	return	
  6738  00300C                     __end_of___lbtoft:
  6739                           	opt stack 0
  6740                           tosu	equ	0xFFF
  6741                           tosh	equ	0xFFE
  6742                           tosl	equ	0xFFD
  6743                           pclath	equ	0xFFA
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           indf1	equ	0xFE7
  6754                           postdec1	equ	0xFE5
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _testLeds *****************
  6764 ;; Defined at:
  6765 ;;		line 43 in file "LedsApp.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  idx             2   44[COMRAM] int 
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6779 ;;      Params:         0       0       0       0       0       0       0
  6780 ;;      Locals:         2       0       0       0       0       0       0
  6781 ;;      Temps:          1       0       0       0       0       0       0
  6782 ;;      Totals:         3       0       0       0       0       0       0
  6783 ;;Total ram usage:        3 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    6
  6786 ;; This function calls:
  6787 ;;		_SendAckMessage
  6788 ;; This function is called by:
  6789 ;;		_GroupControlMcu
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text36
  6794  002572                     __ptext36:
  6795                           	opt stack 0
  6796  002572                     _testLeds:
  6797                           	opt stack 22
  6798                           
  6799                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6800                           
  6801                           ;incstack = 0
  6802  002572  0E00               	movlw	0
  6803  002574  6E2E               	movwf	testLeds@idx+1,c
  6804  002576  0E00               	movlw	0
  6805  002578  6E2D               	movwf	testLeds@idx,c
  6806  00257A                     l6464:
  6807  00257A  BE2E               	btfsc	testLeds@idx+1,7,c
  6808  00257C  D006               	goto	l48
  6809  00257E  502E               	movf	testLeds@idx+1,w,c
  6810  002580  E127               	bnz	l6478
  6811  002582  0E0A               	movlw	10
  6812  002584  5C2D               	subwf	testLeds@idx,w,c
  6813  002586  B0D8               	btfsc	status,0,c
  6814  002588  D023               	goto	u5630
  6815  00258A                     l48:
  6816                           
  6817                           ;LedsApp.c: 47: {
  6818                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6819  00258A  808B               	bsf	3979,0,c	;volatile
  6820                           
  6821                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6822  00258C  0E82               	movlw	130
  6823  00258E  6E2C               	movwf	??_testLeds& (0+255),c
  6824  002590  0EDE               	movlw	222
  6825  002592                     u6557:
  6826  002592  2EE8               	decfsz	wreg,f,c
  6827  002594  D7FE               	bra	u6557
  6828  002596  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6829  002598  D7FC               	bra	u6557
  6830                           
  6831                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6832  00259A  888A               	bsf	3978,4,c	;volatile
  6833                           
  6834                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6835  00259C  0E82               	movlw	130
  6836  00259E  6E2C               	movwf	??_testLeds& (0+255),c
  6837  0025A0  0EDE               	movlw	222
  6838  0025A2                     u6567:
  6839  0025A2  2EE8               	decfsz	wreg,f,c
  6840  0025A4  D7FE               	bra	u6567
  6841  0025A6  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6842  0025A8  D7FC               	bra	u6567
  6843                           
  6844                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6845  0025AA  908B               	bcf	3979,0,c	;volatile
  6846                           
  6847                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6848  0025AC  0E82               	movlw	130
  6849  0025AE  6E2C               	movwf	??_testLeds& (0+255),c
  6850  0025B0  0EDE               	movlw	222
  6851  0025B2                     u6577:
  6852  0025B2  2EE8               	decfsz	wreg,f,c
  6853  0025B4  D7FE               	bra	u6577
  6854  0025B6  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6855  0025B8  D7FC               	bra	u6577
  6856                           
  6857                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6858  0025BA  988A               	bcf	3978,4,c	;volatile
  6859                           
  6860                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6861  0025BC  0E82               	movlw	130
  6862  0025BE  6E2C               	movwf	??_testLeds& (0+255),c
  6863  0025C0  0EDE               	movlw	222
  6864  0025C2                     u6587:
  6865  0025C2  2EE8               	decfsz	wreg,f,c
  6866  0025C4  D7FE               	bra	u6587
  6867  0025C6  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6868  0025C8  D7FC               	bra	u6587
  6869  0025CA  4A2D               	infsnz	testLeds@idx,f,c
  6870  0025CC  2A2E               	incf	testLeds@idx+1,f,c
  6871  0025CE  D7D5               	goto	l6464
  6872  0025D0                     u5630:
  6873  0025D0                     l6478:
  6874                           
  6875                           ;LedsApp.c: 57: }
  6876                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6877  0025D0  0E15               	movlw	21
  6878  0025D2  6E24               	movwf	SendAckMessage@inRequest,c
  6879  0025D4  0E01               	movlw	1
  6880  0025D6  EC33  F014         	call	_SendAckMessage
  6881  0025DA  0012               	return	
  6882  0025DC                     __end_of_testLeds:
  6883                           	opt stack 0
  6884                           tosu	equ	0xFFF
  6885                           tosh	equ	0xFFE
  6886                           tosl	equ	0xFFD
  6887                           pclath	equ	0xFFA
  6888                           tblptru	equ	0xFF8
  6889                           tblptrh	equ	0xFF7
  6890                           tblptrl	equ	0xFF6
  6891                           tablat	equ	0xFF5
  6892                           prodh	equ	0xFF4
  6893                           prodl	equ	0xFF3
  6894                           intcon	equ	0xFF2
  6895                           postinc0	equ	0xFEE
  6896                           wreg	equ	0xFE8
  6897                           indf1	equ	0xFE7
  6898                           postdec1	equ	0xFE5
  6899                           fsr1h	equ	0xFE2
  6900                           fsr1l	equ	0xFE1
  6901                           indf2	equ	0xFDF
  6902                           postinc2	equ	0xFDE
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function _ResetMcu *****************
  6908 ;; Defined at:
  6909 ;;		line 52 in file "SystemCommon.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;		None
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      void 
  6916 ;; Registers used:
  6917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6923 ;;      Params:         0       0       0       0       0       0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0
  6925 ;;      Temps:          0       0       0       0       0       0       0
  6926 ;;      Totals:         0       0       0       0       0       0       0
  6927 ;;Total ram usage:        0 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    6
  6930 ;; This function calls:
  6931 ;;		_SendAckMessage
  6932 ;; This function is called by:
  6933 ;;		_GroupControlMcu
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           	psect	text37
  6938  0031DE                     __ptext37:
  6939                           	opt stack 0
  6940  0031DE                     _ResetMcu:
  6941                           	opt stack 22
  6942                           
  6943                           ;SystemCommon.c: 55: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          MCU);
  6944                           
  6945                           ;incstack = 0
  6946  0031DE  0E11               	movlw	17
  6947  0031E0  6E24               	movwf	SendAckMessage@inRequest,c
  6948  0031E2  0E01               	movlw	1
  6949  0031E4  EC33  F014         	call	_SendAckMessage
  6950  0031E8  00FF               	reset		;# 
  6951  0031EA  0012               	return		;funcret
  6952  0031EC                     __end_of_ResetMcu:
  6953                           	opt stack 0
  6954                           tosu	equ	0xFFF
  6955                           tosh	equ	0xFFE
  6956                           tosl	equ	0xFFD
  6957                           pclath	equ	0xFFA
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           intcon	equ	0xFF2
  6965                           postinc0	equ	0xFEE
  6966                           wreg	equ	0xFE8
  6967                           indf1	equ	0xFE7
  6968                           postdec1	equ	0xFE5
  6969                           fsr1h	equ	0xFE2
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _ResetCpld *****************
  6978 ;; Defined at:
  6979 ;;		line 61 in file "SystemCommon.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6993 ;;      Params:         0       0       0       0       0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0
  6996 ;;      Totals:         0       0       0       0       0       0       0
  6997 ;;Total ram usage:        0 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    6
  7000 ;; This function calls:
  7001 ;;		_SendAckMessage
  7002 ;; This function is called by:
  7003 ;;		_GroupControlMcu
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text38
  7008  003216                     __ptext38:
  7009                           	opt stack 0
  7010  003216                     _ResetCpld:
  7011                           	opt stack 22
  7012                           
  7013                           ;SystemCommon.c: 64: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          CPLD);
  7014                           
  7015                           ;incstack = 0
  7016  003216  0E12               	movlw	18
  7017  003218  6E24               	movwf	SendAckMessage@inRequest,c
  7018  00321A  0E01               	movlw	1
  7019  00321C  EC33  F014         	call	_SendAckMessage
  7020  003220  0012               	return		;funcret
  7021  003222                     __end_of_ResetCpld:
  7022                           	opt stack 0
  7023                           tosu	equ	0xFFF
  7024                           tosh	equ	0xFFE
  7025                           tosl	equ	0xFFD
  7026                           pclath	equ	0xFFA
  7027                           tblptru	equ	0xFF8
  7028                           tblptrh	equ	0xFF7
  7029                           tblptrl	equ	0xFF6
  7030                           tablat	equ	0xFF5
  7031                           prodh	equ	0xFF4
  7032                           prodl	equ	0xFF3
  7033                           intcon	equ	0xFF2
  7034                           postinc0	equ	0xFEE
  7035                           wreg	equ	0xFE8
  7036                           indf1	equ	0xFE7
  7037                           postdec1	equ	0xFE5
  7038                           fsr1h	equ	0xFE2
  7039                           fsr1l	equ	0xFE1
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _SetConversionResultFormat *****************
  7047 ;; Defined at:
  7048 ;;		line 38 in file "AdcApp.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  data            2   43[COMRAM] PTR unsigned char 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7062 ;;      Params:         2       0       0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0
  7065 ;;      Totals:         2       0       0       0       0       0       0
  7066 ;;Total ram usage:        2 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    6
  7069 ;; This function calls:
  7070 ;;		_SendAckMessage
  7071 ;; This function is called by:
  7072 ;;		_GroupAdc
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text39
  7077  003222                     __ptext39:
  7078                           	opt stack 0
  7079  003222                     _SetConversionResultFormat:
  7080                           	opt stack 22
  7081                           
  7082                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7083                           
  7084                           ;incstack = 0
  7085  003222  0E33               	movlw	51
  7086  003224  6E24               	movwf	SendAckMessage@inRequest,c
  7087  003226  0E03               	movlw	3
  7088  003228  EC33  F014         	call	_SendAckMessage
  7089  00322C  0012               	return		;funcret
  7090  00322E                     __end_of_SetConversionResultFormat:
  7091                           	opt stack 0
  7092                           tosu	equ	0xFFF
  7093                           tosh	equ	0xFFE
  7094                           tosl	equ	0xFFD
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           indf1	equ	0xFE7
  7106                           postdec1	equ	0xFE5
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _SetChannelMode *****************
  7116 ;; Defined at:
  7117 ;;		line 43 in file "AdcApp.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  data            2   43[COMRAM] PTR unsigned char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7131 ;;      Params:         2       0       0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0
  7134 ;;      Totals:         2       0       0       0       0       0       0
  7135 ;;Total ram usage:        2 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    6
  7138 ;; This function calls:
  7139 ;;		_SendAckMessage
  7140 ;; This function is called by:
  7141 ;;		_GroupAdc
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text40
  7146  002E92                     __ptext40:
  7147                           	opt stack 0
  7148  002E92                     _SetChannelMode:
  7149                           	opt stack 22
  7150                           
  7151                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7152                           
  7153                           ;incstack = 0
  7154  002E92  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7155  002E96  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7156  002E9A  50DF               	movf	indf2,w,c
  7157  002E9C  6E3C               	movwf	_adcSampleMode,c
  7158                           
  7159                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7160  002E9E  043C               	decf	_adcSampleMode,w,c
  7161  002EA0  A4D8               	btfss	status,2,c
  7162  002EA2  D009               	goto	l104
  7163                           
  7164                           ;AdcApp.c: 47: {
  7165                           ;AdcApp.c: 48: channel = data[1];
  7166  002EA4  EE20 F001          	lfsr	2,1
  7167  002EA8  502C               	movf	SetChannelMode@data,w,c
  7168  002EAA  26D9               	addwf	fsr2l,f,c
  7169  002EAC  502D               	movf	SetChannelMode@data+1,w,c
  7170  002EAE  22DA               	addwfc	fsr2h,f,c
  7171  002EB0  50DF               	movf	indf2,w,c
  7172  002EB2  0100               	movlb	0	; () banked
  7173  002EB4  6FE6               	movwf	_channel& (0+255),b
  7174  002EB6                     l104:
  7175                           
  7176                           ;AdcApp.c: 49: }
  7177                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7178                           
  7179                           ; BSR set to: 0
  7180  002EB6  0E32               	movlw	50
  7181  002EB8  6E24               	movwf	SendAckMessage@inRequest,c
  7182  002EBA  0E03               	movlw	3
  7183  002EBC  EC33  F014         	call	_SendAckMessage
  7184  002EC0  0012               	return		;funcret
  7185  002EC2                     __end_of_SetChannelMode:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postdec1	equ	0xFE5
  7202                           fsr1h	equ	0xFE2
  7203                           fsr1l	equ	0xFE1
  7204                           indf2	equ	0xFDF
  7205                           postinc2	equ	0xFDE
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _SetAdcOperationMode *****************
  7211 ;; Defined at:
  7212 ;;		line 33 in file "AdcApp.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  data            2   43[COMRAM] PTR unsigned char 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7226 ;;      Params:         2       0       0       0       0       0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0
  7229 ;;      Totals:         2       0       0       0       0       0       0
  7230 ;;Total ram usage:        2 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    6
  7233 ;; This function calls:
  7234 ;;		_SendAckMessage
  7235 ;; This function is called by:
  7236 ;;		_GroupAdc
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           	psect	text41
  7241  00322E                     __ptext41:
  7242                           	opt stack 0
  7243  00322E                     _SetAdcOperationMode:
  7244                           	opt stack 22
  7245                           
  7246                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7247                           
  7248                           ;incstack = 0
  7249  00322E  0E31               	movlw	49
  7250  003230  6E24               	movwf	SendAckMessage@inRequest,c
  7251  003232  0E03               	movlw	3
  7252  003234  EC33  F014         	call	_SendAckMessage
  7253  003238  0012               	return		;funcret
  7254  00323A                     __end_of_SetAdcOperationMode:
  7255                           	opt stack 0
  7256                           tosu	equ	0xFFF
  7257                           tosh	equ	0xFFE
  7258                           tosl	equ	0xFFD
  7259                           pclath	equ	0xFFA
  7260                           tblptru	equ	0xFF8
  7261                           tblptrh	equ	0xFF7
  7262                           tblptrl	equ	0xFF6
  7263                           tablat	equ	0xFF5
  7264                           prodh	equ	0xFF4
  7265                           prodl	equ	0xFF3
  7266                           intcon	equ	0xFF2
  7267                           postinc0	equ	0xFEE
  7268                           wreg	equ	0xFE8
  7269                           indf1	equ	0xFE7
  7270                           postdec1	equ	0xFE5
  7271                           fsr1h	equ	0xFE2
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _EUSART1_Read *****************
  7280 ;; Defined at:
  7281 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  readValue       2   24[COMRAM] unsigned int 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      unsigned char 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         0       0       0       0       0       0       0
  7296 ;;      Locals:         2       0       0       0       0       0       0
  7297 ;;      Temps:          1       0       0       0       0       0       0
  7298 ;;      Totals:         3       0       0       0       0       0       0
  7299 ;;Total ram usage:        3 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    3
  7302 ;; This function calls:
  7303 ;;		Nothing
  7304 ;; This function is called by:
  7305 ;;		_readUartMessage
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text42
  7310  002A74                     __ptext42:
  7311                           	opt stack 0
  7312  002A74                     _EUSART1_Read:
  7313                           	opt stack 26
  7314                           
  7315                           ;eusart1.c: 112: uint16_t readValue = 0;
  7316                           
  7317                           ;incstack = 0
  7318  002A74  0E00               	movlw	0
  7319  002A76  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7320  002A78  0E00               	movlw	0
  7321  002A7A  6E19               	movwf	EUSART1_Read@readValue,c
  7322                           
  7323                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7324  002A7C  0100               	movlb	0	; () banked
  7325  002A7E  51E5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7326  002A80  A4D8               	btfss	status,2,c
  7327  002A82  D002               	goto	l727
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;eusart1.c: 120: {
  7331                           ;eusart1.c: 121: return readValue;
  7332  002A84  5019               	movf	EUSART1_Read@readValue,w,c
  7333                           
  7334                           ; BSR set to: 0
  7335  002A86  0012               	return	
  7336  002A88                     l727:
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;eusart1.c: 122: }
  7340                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7341                           
  7342                           ; BSR set to: 0
  7343  002A88  5037               	movf	_eusart1RxTail,w,c	;volatile
  7344  002A8A  0D01               	mullw	1
  7345  002A8C  0E46               	movlw	low _eusart1RxBuffer
  7346  002A8E  24F3               	addwf	prodl,w,c
  7347  002A90  6ED9               	movwf	fsr2l,c
  7348  002A92  0E01               	movlw	high _eusart1RxBuffer
  7349  002A94  20F4               	addwfc	prodh,w,c
  7350  002A96  6EDA               	movwf	fsr2h,c
  7351  002A98  50DF               	movf	indf2,w,c
  7352  002A9A  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7353  002A9C  5018               	movf	??_EUSART1_Read,w,c
  7354  002A9E  6E19               	movwf	EUSART1_Read@readValue,c
  7355  002AA0  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7356                           
  7357                           ; BSR set to: 0
  7358  002AA2  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7362  002AA4  0E27               	movlw	39
  7363  002AA6  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7364  002AA8  D002               	goto	l729
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;eusart1.c: 126: {
  7368                           ;eusart1.c: 127: eusart1RxTail = 0;
  7369  002AAA  0E00               	movlw	0
  7370  002AAC  6E37               	movwf	_eusart1RxTail,c	;volatile
  7371  002AAE                     l729:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;eusart1.c: 128: }
  7375                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7376                           
  7377                           ; BSR set to: 0
  7378  002AAE  9A9D               	bcf	3997,5,c	;volatile
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;eusart1.c: 130: eusart1RxCount--;
  7382  002AB0  07E5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7386  002AB2  8A9D               	bsf	3997,5,c	;volatile
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;eusart1.c: 133: return readValue;
  7390  002AB4  5019               	movf	EUSART1_Read@readValue,w,c
  7391  002AB6  0012               	return	
  7392  002AB8                     __end_of_EUSART1_Read:
  7393                           	opt stack 0
  7394                           tosu	equ	0xFFF
  7395                           tosh	equ	0xFFE
  7396                           tosl	equ	0xFFD
  7397                           pclath	equ	0xFFA
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           indf1	equ	0xFE7
  7408                           postdec1	equ	0xFE5
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           fsr2h	equ	0xFDA
  7414                           fsr2l	equ	0xFD9
  7415                           status	equ	0xFD8
  7416                           
  7417 ;; *************** function _keepAliveSignalUart *****************
  7418 ;; Defined at:
  7419 ;;		line 117 in file "SystemStatus.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7433 ;;      Params:         0       0       0       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0       0       0
  7435 ;;      Temps:          0       0       0       0       0       0       0
  7436 ;;      Totals:         0       0       0       0       0       0       0
  7437 ;;Total ram usage:        0 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    6
  7440 ;; This function calls:
  7441 ;;		_SendAckMessage
  7442 ;; This function is called by:
  7443 ;;		_main
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text43
  7448  00323A                     __ptext43:
  7449                           	opt stack 0
  7450  00323A                     _keepAliveSignalUart:
  7451                           	opt stack 24
  7452                           
  7453                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;incstack = 0
  7457  00323A  0E16               	movlw	22
  7458  00323C  6E24               	movwf	SendAckMessage@inRequest,c
  7459  00323E  0E01               	movlw	1
  7460  003240  EC33  F014         	call	_SendAckMessage
  7461  003244  0012               	return		;funcret
  7462  003246                     __end_of_keepAliveSignalUart:
  7463                           	opt stack 0
  7464                           tosu	equ	0xFFF
  7465                           tosh	equ	0xFFE
  7466                           tosl	equ	0xFFD
  7467                           pclath	equ	0xFFA
  7468                           tblptru	equ	0xFF8
  7469                           tblptrh	equ	0xFF7
  7470                           tblptrl	equ	0xFF6
  7471                           tablat	equ	0xFF5
  7472                           prodh	equ	0xFF4
  7473                           prodl	equ	0xFF3
  7474                           intcon	equ	0xFF2
  7475                           postinc0	equ	0xFEE
  7476                           wreg	equ	0xFE8
  7477                           indf1	equ	0xFE7
  7478                           postdec1	equ	0xFE5
  7479                           fsr1h	equ	0xFE2
  7480                           fsr1l	equ	0xFE1
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           fsr2h	equ	0xFDA
  7484                           fsr2l	equ	0xFD9
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function _keepAliveSignalLed *****************
  7488 ;; Defined at:
  7489 ;;		line 35 in file "LedsApp.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7503 ;;      Params:         0       0       0       0       0       0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0
  7505 ;;      Temps:          1       0       0       0       0       0       0
  7506 ;;      Totals:         1       0       0       0       0       0       0
  7507 ;;Total ram usage:        1 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    3
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_main
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text44
  7518  003142                     __ptext44:
  7519                           	opt stack 0
  7520  003142                     _keepAliveSignalLed:
  7521                           	opt stack 27
  7522                           
  7523                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7524                           
  7525                           ;incstack = 0
  7526  003142  B08B               	btfsc	3979,0,c	;volatile
  7527  003144  D003               	goto	u4000
  7528  003146  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7529  003148  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7530  00314A  D001               	goto	u4018
  7531  00314C                     u4000:
  7532  00314C  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7533  00314E                     u4018:
  7534  00314E  508B               	movf	3979,w,c	;volatile
  7535  003150  1818               	xorwf	??_keepAliveSignalLed,w,c
  7536  003152  0BFE               	andlw	-2
  7537  003154  1818               	xorwf	??_keepAliveSignalLed,w,c
  7538  003156  6E8B               	movwf	3979,c	;volatile
  7539  003158  0012               	return		;funcret
  7540  00315A                     __end_of_keepAliveSignalLed:
  7541                           	opt stack 0
  7542                           tosu	equ	0xFFF
  7543                           tosh	equ	0xFFE
  7544                           tosl	equ	0xFFD
  7545                           pclath	equ	0xFFA
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           indf1	equ	0xFE7
  7556                           postdec1	equ	0xFE5
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _SetMcuSystem *****************
  7566 ;; Defined at:
  7567 ;;		line 11 in file "SystemSettings.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         0       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0
  7584 ;;      Totals:         0       0       0       0       0       0       0
  7585 ;;Total ram usage:        0 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    6
  7588 ;; This function calls:
  7589 ;;		_SYSTEM_Initialize
  7590 ;; This function is called by:
  7591 ;;		_main
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text45
  7596  00325C                     __ptext45:
  7597                           	opt stack 0
  7598  00325C                     _SetMcuSystem:
  7599                           	opt stack 24
  7600                           
  7601                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7602                           
  7603                           ;incstack = 0
  7604  00325C  EC94  F018         	call	_SYSTEM_Initialize	;wreg free
  7605                           
  7606                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7607  003260  8EF2               	bsf	intcon,7,c	;volatile
  7608                           
  7609                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7610  003262  8CF2               	bsf	intcon,6,c	;volatile
  7611  003264  0012               	return		;funcret
  7612  003266                     __end_of_SetMcuSystem:
  7613                           	opt stack 0
  7614                           tosu	equ	0xFFF
  7615                           tosh	equ	0xFFE
  7616                           tosl	equ	0xFFD
  7617                           pclath	equ	0xFFA
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           prodh	equ	0xFF4
  7623                           prodl	equ	0xFF3
  7624                           intcon	equ	0xFF2
  7625                           postinc0	equ	0xFEE
  7626                           wreg	equ	0xFE8
  7627                           indf1	equ	0xFE7
  7628                           postdec1	equ	0xFE5
  7629                           fsr1h	equ	0xFE2
  7630                           fsr1l	equ	0xFE1
  7631                           indf2	equ	0xFDF
  7632                           postinc2	equ	0xFDE
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _SYSTEM_Initialize *****************
  7638 ;; Defined at:
  7639 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7653 ;;      Params:         0       0       0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0
  7656 ;;      Totals:         0       0       0       0       0       0       0
  7657 ;;Total ram usage:        0 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_ADC_Initialize
  7662 ;;		_EUSART1_Initialize
  7663 ;;		_INTERRUPT_Initialize
  7664 ;;		_OSCILLATOR_Initialize
  7665 ;;		_PIN_MANAGER_Initialize
  7666 ;;		_TMR0_Initialize
  7667 ;; This function is called by:
  7668 ;;		_SetMcuSystem
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text46
  7673  003128                     __ptext46:
  7674                           	opt stack 0
  7675  003128                     _SYSTEM_Initialize:
  7676                           	opt stack 24
  7677                           
  7678                           ;mcc.c: 114: INTERRUPT_Initialize();
  7679                           
  7680                           ;incstack = 0
  7681  003128  EC3D  F019         	call	_INTERRUPT_Initialize	;wreg free
  7682                           
  7683                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7684  00312C  ECF4  F014         	call	_PIN_MANAGER_Initialize	;wreg free
  7685                           
  7686                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7687  003130  ECF6  F018         	call	_OSCILLATOR_Initialize	;wreg free
  7688                           
  7689                           ;mcc.c: 117: ADC_Initialize();
  7690  003134  ECAD  F018         	call	_ADC_Initialize	;wreg free
  7691                           
  7692                           ;mcc.c: 118: TMR0_Initialize();
  7693  003138  ECFC  F016         	call	_TMR0_Initialize	;wreg free
  7694                           
  7695                           ;mcc.c: 119: EUSART1_Initialize();
  7696  00313C  ECAC  F016         	call	_EUSART1_Initialize	;wreg free
  7697  003140  0012               	return		;funcret
  7698  003142                     __end_of_SYSTEM_Initialize:
  7699                           	opt stack 0
  7700                           tosu	equ	0xFFF
  7701                           tosh	equ	0xFFE
  7702                           tosl	equ	0xFFD
  7703                           pclath	equ	0xFFA
  7704                           tblptru	equ	0xFF8
  7705                           tblptrh	equ	0xFF7
  7706                           tblptrl	equ	0xFF6
  7707                           tablat	equ	0xFF5
  7708                           prodh	equ	0xFF4
  7709                           prodl	equ	0xFF3
  7710                           intcon	equ	0xFF2
  7711                           postinc0	equ	0xFEE
  7712                           wreg	equ	0xFE8
  7713                           indf1	equ	0xFE7
  7714                           postdec1	equ	0xFE5
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _TMR0_Initialize *****************
  7724 ;; Defined at:
  7725 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2, status,0, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0
  7741 ;;      Temps:          2       0       0       0       0       0       0
  7742 ;;      Totals:         2       0       0       0       0       0       0
  7743 ;;Total ram usage:        2 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    4
  7746 ;; This function calls:
  7747 ;;		_TMR0_SetInterruptHandler
  7748 ;; This function is called by:
  7749 ;;		_SYSTEM_Initialize
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text47
  7754  002DF8                     __ptext47:
  7755                           	opt stack 0
  7756  002DF8                     _TMR0_Initialize:
  7757                           	opt stack 24
  7758                           
  7759                           ;tmr0.c: 71: TMR0H = 0x3C;
  7760                           
  7761                           ;incstack = 0
  7762  002DF8  0E3C               	movlw	60
  7763  002DFA  6ED7               	movwf	4055,c	;volatile
  7764                           
  7765                           ;tmr0.c: 74: TMR0L = 0xAF;
  7766  002DFC  0EAF               	movlw	175
  7767  002DFE  6ED6               	movwf	4054,c	;volatile
  7768                           
  7769                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7770  002E00  50D6               	movf	4054,w,c	;volatile
  7771  002E02  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7772  002E06  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7773  002E08  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7774  002E0C  6A1A               	clrf	??_TMR0_Initialize,c
  7775  002E0E  101A               	iorwf	??_TMR0_Initialize,w,c
  7776  002E10  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7777  002E12  501B               	movf	??_TMR0_Initialize+1,w,c
  7778  002E14  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7779                           
  7780                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7781  002E16  94F2               	bcf	intcon,2,c	;volatile
  7782                           
  7783                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7784  002E18  8AF2               	bsf	intcon,5,c	;volatile
  7785                           
  7786                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7787  002E1A  0E00               	movlw	0
  7788  002E1C  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7789  002E1E  0E00               	movlw	0
  7790  002E20  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7791  002E22  EC33  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  7792                           
  7793                           ;tmr0.c: 90: T0CON = 0x90;
  7794  002E26  0E90               	movlw	144
  7795  002E28  6ED5               	movwf	4053,c	;volatile
  7796  002E2A  0012               	return		;funcret
  7797  002E2C                     __end_of_TMR0_Initialize:
  7798                           	opt stack 0
  7799                           tosu	equ	0xFFF
  7800                           tosh	equ	0xFFE
  7801                           tosl	equ	0xFFD
  7802                           pclath	equ	0xFFA
  7803                           tblptru	equ	0xFF8
  7804                           tblptrh	equ	0xFF7
  7805                           tblptrl	equ	0xFF6
  7806                           tablat	equ	0xFF5
  7807                           prodh	equ	0xFF4
  7808                           prodl	equ	0xFF3
  7809                           intcon	equ	0xFF2
  7810                           postinc0	equ	0xFEE
  7811                           wreg	equ	0xFE8
  7812                           indf1	equ	0xFE7
  7813                           postdec1	equ	0xFE5
  7814                           fsr1h	equ	0xFE2
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           postinc2	equ	0xFDE
  7818                           fsr2h	equ	0xFDA
  7819                           fsr2l	equ	0xFD9
  7820                           status	equ	0xFD8
  7821                           
  7822 ;; *************** function _TMR0_SetInterruptHandler *****************
  7823 ;; Defined at:
  7824 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7827 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      void 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7839 ;;      Params:         2       0       0       0       0       0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0
  7842 ;;      Totals:         2       0       0       0       0       0       0
  7843 ;;Total ram usage:        2 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    3
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_TMR0_Initialize
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text48
  7854  003266                     __ptext48:
  7855                           	opt stack 0
  7856  003266                     _TMR0_SetInterruptHandler:
  7857                           	opt stack 24
  7858                           
  7859                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7860                           
  7861                           ;incstack = 0
  7862  003266  C018  F0FA         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7863  00326A  C019  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7864  00326E  0012               	return		;funcret
  7865  003270                     __end_of_TMR0_SetInterruptHandler:
  7866                           	opt stack 0
  7867                           tosu	equ	0xFFF
  7868                           tosh	equ	0xFFE
  7869                           tosl	equ	0xFFD
  7870                           pclath	equ	0xFFA
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           intcon	equ	0xFF2
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           indf1	equ	0xFE7
  7881                           postdec1	equ	0xFE5
  7882                           fsr1h	equ	0xFE2
  7883                           fsr1l	equ	0xFE1
  7884                           indf2	equ	0xFDF
  7885                           postinc2	equ	0xFDE
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _PIN_MANAGER_Initialize *****************
  7891 ;; Defined at:
  7892 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7906 ;;      Params:         0       0       0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0
  7908 ;;      Temps:          0       0       0       0       0       0       0
  7909 ;;      Totals:         0       0       0       0       0       0       0
  7910 ;;Total ram usage:        0 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    3
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		_SYSTEM_Initialize
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text49
  7921  0029E8                     __ptext49:
  7922                           	opt stack 0
  7923  0029E8                     _PIN_MANAGER_Initialize:
  7924                           	opt stack 25
  7925                           
  7926                           ;pin_manager.c: 57: LATE = 0x00;
  7927                           
  7928                           ;incstack = 0
  7929  0029E8  0E00               	movlw	0
  7930  0029EA  6E8D               	movwf	3981,c	;volatile
  7931                           
  7932                           ;pin_manager.c: 58: LATD = 0x00;
  7933  0029EC  0E00               	movlw	0
  7934  0029EE  6E8C               	movwf	3980,c	;volatile
  7935                           
  7936                           ;pin_manager.c: 59: LATA = 0x00;
  7937  0029F0  0E00               	movlw	0
  7938  0029F2  6E89               	movwf	3977,c	;volatile
  7939                           
  7940                           ;pin_manager.c: 60: LATB = 0x00;
  7941  0029F4  0E00               	movlw	0
  7942  0029F6  6E8A               	movwf	3978,c	;volatile
  7943                           
  7944                           ;pin_manager.c: 61: LATC = 0x00;
  7945  0029F8  0E00               	movlw	0
  7946  0029FA  6E8B               	movwf	3979,c	;volatile
  7947                           
  7948                           ;pin_manager.c: 66: TRISE = 0x07;
  7949  0029FC  0E07               	movlw	7
  7950  0029FE  6E96               	movwf	3990,c	;volatile
  7951                           
  7952                           ;pin_manager.c: 67: TRISA = 0xE1;
  7953  002A00  0EE1               	movlw	225
  7954  002A02  6E92               	movwf	3986,c	;volatile
  7955                           
  7956                           ;pin_manager.c: 68: TRISB = 0xEF;
  7957  002A04  0EEF               	movlw	239
  7958  002A06  6E93               	movwf	3987,c	;volatile
  7959                           
  7960                           ;pin_manager.c: 69: TRISC = 0x80;
  7961  002A08  0E80               	movlw	128
  7962  002A0A  6E94               	movwf	3988,c	;volatile
  7963                           
  7964                           ;pin_manager.c: 70: TRISD = 0xF2;
  7965  002A0C  0EF2               	movlw	242
  7966  002A0E  6E95               	movwf	3989,c	;volatile
  7967                           
  7968                           ;pin_manager.c: 75: ANSELC = 0x34;
  7969  002A10  0E34               	movlw	52
  7970  002A12  010F               	movlb	15	; () banked
  7971  002A14  6F3A               	movwf	58,b	;volatile
  7972                           
  7973                           ;pin_manager.c: 76: ANSELB = 0x33;
  7974  002A16  0E33               	movlw	51
  7975  002A18  6F39               	movwf	57,b	;volatile
  7976                           
  7977                           ;pin_manager.c: 77: ANSELD = 0xEC;
  7978  002A1A  0EEC               	movlw	236
  7979  002A1C  6F3B               	movwf	59,b	;volatile
  7980                           
  7981                           ;pin_manager.c: 78: ANSELE = 0x07;
  7982  002A1E  0E07               	movlw	7
  7983  002A20  6F3C               	movwf	60,b	;volatile
  7984                           
  7985                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7986  002A22  0E2F               	movlw	47
  7987  002A24  6F38               	movwf	56,b	;volatile
  7988                           
  7989                           ;pin_manager.c: 84: WPUB = 0xC2;
  7990  002A26  0EC2               	movlw	194
  7991  002A28  6E61               	movwf	3937,c	;volatile
  7992                           
  7993                           ; BSR set to: 15
  7994                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7995  002A2A  9EF1               	bcf	intcon2,7,c	;volatile
  7996                           
  7997                           ; BSR set to: 15
  7998                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7999  002A2C  86F2               	bsf	intcon,3,c	;volatile
  8000                           
  8001                           ; BSR set to: 15
  8002  002A2E  0012               	return		;funcret
  8003  002A30                     __end_of_PIN_MANAGER_Initialize:
  8004                           	opt stack 0
  8005                           tosu	equ	0xFFF
  8006                           tosh	equ	0xFFE
  8007                           tosl	equ	0xFFD
  8008                           pclath	equ	0xFFA
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           intcon	equ	0xFF2
  8016                           intcon2	equ	0xFF1
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           indf1	equ	0xFE7
  8020                           postdec1	equ	0xFE5
  8021                           fsr1h	equ	0xFE2
  8022                           fsr1l	equ	0xFE1
  8023                           indf2	equ	0xFDF
  8024                           postinc2	equ	0xFDE
  8025                           fsr2h	equ	0xFDA
  8026                           fsr2l	equ	0xFD9
  8027                           status	equ	0xFD8
  8028                           
  8029 ;; *************** function _OSCILLATOR_Initialize *****************
  8030 ;; Defined at:
  8031 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;		None
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8045 ;;      Params:         0       0       0       0       0       0       0
  8046 ;;      Locals:         0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0
  8048 ;;      Totals:         0       0       0       0       0       0       0
  8049 ;;Total ram usage:        0 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_SYSTEM_Initialize
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text50
  8060  0031EC                     __ptext50:
  8061                           	opt stack 0
  8062  0031EC                     _OSCILLATOR_Initialize:
  8063                           	opt stack 25
  8064                           
  8065                           ;mcc.c: 125: OSCCON = 0x60;
  8066                           
  8067                           ; BSR set to: 15
  8068                           ;incstack = 0
  8069  0031EC  0E60               	movlw	96
  8070  0031EE  6ED3               	movwf	4051,c	;volatile
  8071                           
  8072                           ;mcc.c: 127: OSCCON2 = 0x04;
  8073  0031F0  0E04               	movlw	4
  8074  0031F2  6ED2               	movwf	4050,c	;volatile
  8075                           
  8076                           ;mcc.c: 129: OSCTUNE = 0x00;
  8077  0031F4  0E00               	movlw	0
  8078  0031F6  6E9B               	movwf	3995,c	;volatile
  8079  0031F8  0012               	return		;funcret
  8080  0031FA                     __end_of_OSCILLATOR_Initialize:
  8081                           	opt stack 0
  8082                           tosu	equ	0xFFF
  8083                           tosh	equ	0xFFE
  8084                           tosl	equ	0xFFD
  8085                           pclath	equ	0xFFA
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           intcon	equ	0xFF2
  8093                           intcon2	equ	0xFF1
  8094                           postinc0	equ	0xFEE
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           postdec1	equ	0xFE5
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function _INTERRUPT_Initialize *****************
  8107 ;; Defined at:
  8108 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		None
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8122 ;;      Params:         0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       0       0       0       0       0
  8126 ;;Total ram usage:        0 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    3
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_SYSTEM_Initialize
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text51
  8137  00327A                     __ptext51:
  8138                           	opt stack 0
  8139  00327A                     _INTERRUPT_Initialize:
  8140                           	opt stack 25
  8141                           
  8142                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8143                           
  8144                           ;incstack = 0
  8145  00327A  9ED0               	bcf	4048,7,c	;volatile
  8146  00327C  0012               	return		;funcret
  8147  00327E                     __end_of_INTERRUPT_Initialize:
  8148                           	opt stack 0
  8149                           tosu	equ	0xFFF
  8150                           tosh	equ	0xFFE
  8151                           tosl	equ	0xFFD
  8152                           pclath	equ	0xFFA
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           intcon2	equ	0xFF1
  8161                           postinc0	equ	0xFEE
  8162                           wreg	equ	0xFE8
  8163                           indf1	equ	0xFE7
  8164                           postdec1	equ	0xFE5
  8165                           fsr1h	equ	0xFE2
  8166                           fsr1l	equ	0xFE1
  8167                           indf2	equ	0xFDF
  8168                           postinc2	equ	0xFDE
  8169                           fsr2h	equ	0xFDA
  8170                           fsr2l	equ	0xFD9
  8171                           status	equ	0xFD8
  8172                           
  8173 ;; *************** function _EUSART1_Initialize *****************
  8174 ;; Defined at:
  8175 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;		None
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;		None
  8180 ;; Return value:  Size  Location     Type
  8181 ;;                  1    wreg      void 
  8182 ;; Registers used:
  8183 ;;		wreg, status,2
  8184 ;; Tracked objects:
  8185 ;;		On entry : 0/0
  8186 ;;		On exit  : 0/0
  8187 ;;		Unchanged: 0/0
  8188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8189 ;;      Params:         0       0       0       0       0       0       0
  8190 ;;      Locals:         0       0       0       0       0       0       0
  8191 ;;      Temps:          0       0       0       0       0       0       0
  8192 ;;      Totals:         0       0       0       0       0       0       0
  8193 ;;Total ram usage:        0 bytes
  8194 ;; Hardware stack levels used:    1
  8195 ;; Hardware stack levels required when called:    3
  8196 ;; This function calls:
  8197 ;;		Nothing
  8198 ;; This function is called by:
  8199 ;;		_SYSTEM_Initialize
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           	psect	text52
  8204  002D58                     __ptext52:
  8205                           	opt stack 0
  8206  002D58                     _EUSART1_Initialize:
  8207                           	opt stack 25
  8208                           
  8209                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8210                           
  8211                           ;incstack = 0
  8212  002D58  9A9D               	bcf	3997,5,c	;volatile
  8213                           
  8214                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8215  002D5A  989D               	bcf	3997,4,c	;volatile
  8216                           
  8217                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8218  002D5C  0E08               	movlw	8
  8219  002D5E  6EB8               	movwf	4024,c	;volatile
  8220                           
  8221                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8222  002D60  0E90               	movlw	144
  8223  002D62  6EAB               	movwf	4011,c	;volatile
  8224                           
  8225                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8226  002D64  0E24               	movlw	36
  8227  002D66  6EAC               	movwf	4012,c	;volatile
  8228                           
  8229                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8230  002D68  0E10               	movlw	16
  8231  002D6A  6EAF               	movwf	4015,c	;volatile
  8232                           
  8233                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8234  002D6C  0E00               	movlw	0
  8235  002D6E  6EB0               	movwf	4016,c	;volatile
  8236                           
  8237                           ;eusart1.c: 98: eusart1TxHead = 0;
  8238  002D70  0E00               	movlw	0
  8239  002D72  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8240                           
  8241                           ;eusart1.c: 99: eusart1TxTail = 0;
  8242  002D74  0E00               	movlw	0
  8243  002D76  6E39               	movwf	_eusart1TxTail,c	;volatile
  8244                           
  8245                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8246  002D78  0E46               	movlw	70
  8247  002D7A  0100               	movlb	0	; () banked
  8248  002D7C  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8249                           
  8250                           ;eusart1.c: 102: eusart1RxHead = 0;
  8251  002D7E  0E00               	movlw	0
  8252  002D80  6E38               	movwf	_eusart1RxHead,c	;volatile
  8253                           
  8254                           ;eusart1.c: 103: eusart1RxTail = 0;
  8255  002D82  0E00               	movlw	0
  8256  002D84  6E37               	movwf	_eusart1RxTail,c	;volatile
  8257                           
  8258                           ;eusart1.c: 104: eusart1RxCount = 0;
  8259  002D86  0E00               	movlw	0
  8260  002D88  6FE5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8264  002D8A  8A9D               	bsf	3997,5,c	;volatile
  8265                           
  8266                           ; BSR set to: 0
  8267  002D8C  0012               	return		;funcret
  8268  002D8E                     __end_of_EUSART1_Initialize:
  8269                           	opt stack 0
  8270                           tosu	equ	0xFFF
  8271                           tosh	equ	0xFFE
  8272                           tosl	equ	0xFFD
  8273                           pclath	equ	0xFFA
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           intcon2	equ	0xFF1
  8282                           postinc0	equ	0xFEE
  8283                           wreg	equ	0xFE8
  8284                           indf1	equ	0xFE7
  8285                           postdec1	equ	0xFE5
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           fsr2h	equ	0xFDA
  8291                           fsr2l	equ	0xFD9
  8292                           status	equ	0xFD8
  8293                           
  8294 ;; *************** function _ADC_Initialize *****************
  8295 ;; Defined at:
  8296 ;;		line 58 in file "mcc_generated_files/adc.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;		None
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;		None
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg, status,2
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8310 ;;      Params:         0       0       0       0       0       0       0
  8311 ;;      Locals:         0       0       0       0       0       0       0
  8312 ;;      Temps:          0       0       0       0       0       0       0
  8313 ;;      Totals:         0       0       0       0       0       0       0
  8314 ;;Total ram usage:        0 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:    3
  8317 ;; This function calls:
  8318 ;;		Nothing
  8319 ;; This function is called by:
  8320 ;;		_SYSTEM_Initialize
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           	psect	text53
  8325  00315A                     __ptext53:
  8326                           	opt stack 0
  8327  00315A                     _ADC_Initialize:
  8328                           	opt stack 25
  8329                           
  8330                           ;adc.c: 63: ADCON0 = 0x05;
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;incstack = 0
  8334  00315A  0E05               	movlw	5
  8335  00315C  6EC2               	movwf	4034,c	;volatile
  8336                           
  8337                           ;adc.c: 66: ADCON1 = 0x00;
  8338  00315E  0E00               	movlw	0
  8339  003160  6EC1               	movwf	4033,c	;volatile
  8340                           
  8341                           ;adc.c: 69: ADCON2 = 0x87;
  8342  003162  0E87               	movlw	135
  8343  003164  6EC0               	movwf	4032,c	;volatile
  8344                           
  8345                           ;adc.c: 72: ADRESL = 0x00;
  8346  003166  0E00               	movlw	0
  8347  003168  6EC3               	movwf	4035,c	;volatile
  8348                           
  8349                           ;adc.c: 75: ADRESH = 0x00;
  8350  00316A  0E00               	movlw	0
  8351  00316C  6EC4               	movwf	4036,c	;volatile
  8352  00316E  0012               	return		;funcret
  8353  003170                     __end_of_ADC_Initialize:
  8354                           	opt stack 0
  8355                           tosu	equ	0xFFF
  8356                           tosh	equ	0xFFE
  8357                           tosl	equ	0xFFD
  8358                           pclath	equ	0xFFA
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           intcon2	equ	0xFF1
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           indf1	equ	0xFE7
  8370                           postdec1	equ	0xFE5
  8371                           fsr1h	equ	0xFE2
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8
  8378                           
  8379 ;; *************** function _SetMcuRunTime *****************
  8380 ;; Defined at:
  8381 ;;		line 81 in file "SystemStatus.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8395 ;;      Params:         0       0       0       0       0       0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		___llmod
  8404 ;; This function is called by:
  8405 ;;		_main
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           	psect	text54
  8410  002AB8                     __ptext54:
  8411                           	opt stack 0
  8412  002AB8                     _SetMcuRunTime:
  8413                           	opt stack 26
  8414                           
  8415                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8416                           
  8417                           ;incstack = 0
  8418  002AB8  0E01               	movlw	1
  8419  002ABA  0100               	movlb	0	; () banked
  8420  002ABC  27D3               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8421  002ABE  0E00               	movlw	0
  8422  002AC0  23D4               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8423  002AC2  23D5               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8424  002AC4  23D6               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8428  002AC6  C0D3  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8429  002ACA  C0D4  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8430  002ACE  C0D5  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8431  002AD2  C0D6  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8432  002AD6  0E80               	movlw	128
  8433  002AD8  6E1C               	movwf	___llmod@divisor,c
  8434  002ADA  0E43               	movlw	67
  8435  002ADC  6E1D               	movwf	___llmod@divisor+1,c
  8436  002ADE  0E00               	movlw	0
  8437  002AE0  6E1E               	movwf	___llmod@divisor+2,c
  8438  002AE2  0E00               	movlw	0
  8439  002AE4  6E1F               	movwf	___llmod@divisor+3,c
  8440  002AE6  ECEE  F012         	call	___llmod	;wreg free
  8441  002AEA  C018  F0D3         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8442  002AEE  C019  F0D4         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8443  002AF2  C01A  F0D5         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8444  002AF6  C01B  F0D6         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8445  002AFA  0012               	return		;funcret
  8446  002AFC                     __end_of_SetMcuRunTime:
  8447                           	opt stack 0
  8448                           tosu	equ	0xFFF
  8449                           tosh	equ	0xFFE
  8450                           tosl	equ	0xFFD
  8451                           pclath	equ	0xFFA
  8452                           tblptru	equ	0xFF8
  8453                           tblptrh	equ	0xFF7
  8454                           tblptrl	equ	0xFF6
  8455                           tablat	equ	0xFF5
  8456                           prodh	equ	0xFF4
  8457                           prodl	equ	0xFF3
  8458                           intcon	equ	0xFF2
  8459                           intcon2	equ	0xFF1
  8460                           postinc0	equ	0xFEE
  8461                           wreg	equ	0xFE8
  8462                           indf1	equ	0xFE7
  8463                           postdec1	equ	0xFE5
  8464                           fsr1h	equ	0xFE2
  8465                           fsr1l	equ	0xFE1
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           fsr2h	equ	0xFDA
  8469                           fsr2l	equ	0xFD9
  8470                           status	equ	0xFD8
  8471                           
  8472 ;; *************** function ___llmod *****************
  8473 ;; Defined at:
  8474 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  dividend        4   23[COMRAM] unsigned long 
  8477 ;;  divisor         4   27[COMRAM] unsigned long 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  counter         1   31[COMRAM] unsigned char 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  4   23[COMRAM] unsigned long 
  8482 ;; Registers used:
  8483 ;;		wreg, status,2, status,0
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8489 ;;      Params:         8       0       0       0       0       0       0
  8490 ;;      Locals:         1       0       0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0
  8492 ;;      Totals:         9       0       0       0       0       0       0
  8493 ;;Total ram usage:        9 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    3
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_SetMcuRunTime
  8500 ;;		_GetMcuRunTime
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           	psect	text55
  8505  0025DC                     __ptext55:
  8506                           	opt stack 0
  8507  0025DC                     ___llmod:
  8508                           	opt stack 24
  8509                           
  8510                           ;incstack = 0
  8511  0025DC  501C               	movf	___llmod@divisor,w,c
  8512  0025DE  101D               	iorwf	___llmod@divisor+1,w,c
  8513  0025E0  101E               	iorwf	___llmod@divisor+2,w,c
  8514  0025E2  101F               	iorwf	___llmod@divisor+3,w,c
  8515  0025E4  B4D8               	btfsc	status,2,c
  8516  0025E6  D024               	goto	l1667
  8517  0025E8  0E01               	movlw	1
  8518  0025EA  6E20               	movwf	___llmod@counter,c
  8519  0025EC  D006               	goto	l1662
  8520  0025EE  90D8               	bcf	status,0,c
  8521  0025F0  361C               	rlcf	___llmod@divisor,f,c
  8522  0025F2  361D               	rlcf	___llmod@divisor+1,f,c
  8523  0025F4  361E               	rlcf	___llmod@divisor+2,f,c
  8524  0025F6  361F               	rlcf	___llmod@divisor+3,f,c
  8525  0025F8  2A20               	incf	___llmod@counter,f,c
  8526  0025FA                     l1662:
  8527  0025FA  AE1F               	btfss	___llmod@divisor+3,7,c
  8528  0025FC  D7F8               	goto	l1663
  8529  0025FE                     u5600:
  8530  0025FE  501C               	movf	___llmod@divisor,w,c
  8531  002600  5C18               	subwf	___llmod@dividend,w,c
  8532  002602  501D               	movf	___llmod@divisor+1,w,c
  8533  002604  5819               	subwfb	___llmod@dividend+1,w,c
  8534  002606  501E               	movf	___llmod@divisor+2,w,c
  8535  002608  581A               	subwfb	___llmod@dividend+2,w,c
  8536  00260A  501F               	movf	___llmod@divisor+3,w,c
  8537  00260C  581B               	subwfb	___llmod@dividend+3,w,c
  8538  00260E  A0D8               	btfss	status,0,c
  8539  002610  D008               	goto	l1666
  8540  002612  501C               	movf	___llmod@divisor,w,c
  8541  002614  5E18               	subwf	___llmod@dividend,f,c
  8542  002616  501D               	movf	___llmod@divisor+1,w,c
  8543  002618  5A19               	subwfb	___llmod@dividend+1,f,c
  8544  00261A  501E               	movf	___llmod@divisor+2,w,c
  8545  00261C  5A1A               	subwfb	___llmod@dividend+2,f,c
  8546  00261E  501F               	movf	___llmod@divisor+3,w,c
  8547  002620  5A1B               	subwfb	___llmod@dividend+3,f,c
  8548  002622                     l1666:
  8549  002622  90D8               	bcf	status,0,c
  8550  002624  321F               	rrcf	___llmod@divisor+3,f,c
  8551  002626  321E               	rrcf	___llmod@divisor+2,f,c
  8552  002628  321D               	rrcf	___llmod@divisor+1,f,c
  8553  00262A  321C               	rrcf	___llmod@divisor,f,c
  8554  00262C  2E20               	decfsz	___llmod@counter,f,c
  8555  00262E  D7E7               	goto	u5600
  8556  002630                     l1667:
  8557  002630  C018  F018         	movff	___llmod@dividend,?___llmod
  8558  002634  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8559  002638  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8560  00263C  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8561  002640  0012               	return		;funcret
  8562  002642                     __end_of___llmod:
  8563                           	opt stack 0
  8564                           tosu	equ	0xFFF
  8565                           tosh	equ	0xFFE
  8566                           tosl	equ	0xFFD
  8567                           pclath	equ	0xFFA
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           indf1	equ	0xFE7
  8579                           postdec1	equ	0xFE5
  8580                           fsr1h	equ	0xFE2
  8581                           fsr1l	equ	0xFE1
  8582                           indf2	equ	0xFDF
  8583                           postinc2	equ	0xFDE
  8584                           fsr2h	equ	0xFDA
  8585                           fsr2l	equ	0xFD9
  8586                           status	equ	0xFD8
  8587                           
  8588 ;; *************** function _SendSystemStartAck *****************
  8589 ;; Defined at:
  8590 ;;		line 70 in file "SystemCommon.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8604 ;;      Params:         0       0       0       0       0       0       0
  8605 ;;      Locals:         0       0       0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0
  8607 ;;      Totals:         0       0       0       0       0       0       0
  8608 ;;Total ram usage:        0 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    6
  8611 ;; This function calls:
  8612 ;;		_SendAckMessage
  8613 ;; This function is called by:
  8614 ;;		_main
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text56
  8619  003246                     __ptext56:
  8620                           	opt stack 0
  8621  003246                     _SendSystemStartAck:
  8622                           	opt stack 24
  8623                           
  8624                           ;SystemCommon.c: 72: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTEM
      +                          _START);
  8625                           
  8626                           ;incstack = 0
  8627  003246  0E10               	movlw	16
  8628  003248  6E24               	movwf	SendAckMessage@inRequest,c
  8629  00324A  0E01               	movlw	1
  8630  00324C  EC33  F014         	call	_SendAckMessage
  8631  003250  0012               	return		;funcret
  8632  003252                     __end_of_SendSystemStartAck:
  8633                           	opt stack 0
  8634                           tosu	equ	0xFFF
  8635                           tosh	equ	0xFFE
  8636                           tosl	equ	0xFFD
  8637                           pclath	equ	0xFFA
  8638                           tblptru	equ	0xFF8
  8639                           tblptrh	equ	0xFF7
  8640                           tblptrl	equ	0xFF6
  8641                           tablat	equ	0xFF5
  8642                           prodh	equ	0xFF4
  8643                           prodl	equ	0xFF3
  8644                           intcon	equ	0xFF2
  8645                           intcon2	equ	0xFF1
  8646                           postinc0	equ	0xFEE
  8647                           wreg	equ	0xFE8
  8648                           indf1	equ	0xFE7
  8649                           postdec1	equ	0xFE5
  8650                           fsr1h	equ	0xFE2
  8651                           fsr1l	equ	0xFE1
  8652                           indf2	equ	0xFDF
  8653                           postinc2	equ	0xFDE
  8654                           fsr2h	equ	0xFDA
  8655                           fsr2l	equ	0xFD9
  8656                           status	equ	0xFD8
  8657                           
  8658 ;; *************** function _SendAckMessage *****************
  8659 ;; Defined at:
  8660 ;;		line 172 in file "EusartApp.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;  inGroup         1    wreg     enum E7163
  8663 ;;  inRequest       1   35[COMRAM] enum E7171
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;  inGroup         1   36[COMRAM] enum E7163
  8666 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      void 
  8669 ;; Registers used:
  8670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8676 ;;      Params:         1       0       0       0       0       0       0
  8677 ;;      Locals:         7       0       0       0       0       0       0
  8678 ;;      Temps:          0       0       0       0       0       0       0
  8679 ;;      Totals:         8       0       0       0       0       0       0
  8680 ;;Total ram usage:        8 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    5
  8683 ;; This function calls:
  8684 ;;		_WriteUartMessage
  8685 ;;		_ZeroArray
  8686 ;;		_crc8
  8687 ;; This function is called by:
  8688 ;;		_testLeds
  8689 ;;		_SetAdcOperationMode
  8690 ;;		_SetConversionResultFormat
  8691 ;;		_SetChannelMode
  8692 ;;		_FlashEreaseMem
  8693 ;;		_DacSetValue
  8694 ;;		_UpdateTxFreq
  8695 ;;		_UpdateRxFreq
  8696 ;;		_ResetMcu
  8697 ;;		_ResetCpld
  8698 ;;		_SendSystemStartAck
  8699 ;;		_SetMcuFwVersion
  8700 ;;		_SetCpldFwVersion
  8701 ;;		_keepAliveSignalUart
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text57
  8706  002866                     __ptext57:
  8707                           	opt stack 0
  8708  002866                     _SendAckMessage:
  8709                           	opt stack 22
  8710                           
  8711                           ;incstack = 0
  8712                           ;SendAckMessage@inGroup stored from wreg
  8713  002866  6E25               	movwf	SendAckMessage@inGroup,c
  8714                           
  8715                           ;EusartApp.c: 175: char TxMsg[(0x5) + 1];
  8716                           ;EusartApp.c: 176: ZeroArray(TxMsg, (0x5) + 1);
  8717  002868  0E26               	movlw	low SendAckMessage@TxMsg
  8718  00286A  6E20               	movwf	ZeroArray@array,c
  8719  00286C  0E00               	movlw	high SendAckMessage@TxMsg
  8720  00286E  6E21               	movwf	ZeroArray@array+1,c
  8721  002870  0E00               	movlw	0
  8722  002872  6E23               	movwf	ZeroArray@size+1,c
  8723  002874  0E06               	movlw	6
  8724  002876  6E22               	movwf	ZeroArray@size,c
  8725  002878  EC85  F018         	call	_ZeroArray	;wreg free
  8726                           
  8727                           ;EusartApp.c: 179: TxMsg[(0)] = (0x24);
  8728  00287C  0E24               	movlw	36
  8729  00287E  6E26               	movwf	SendAckMessage@TxMsg,c
  8730                           
  8731                           ;EusartApp.c: 180: TxMsg[(1)] = inGroup;
  8732  002880  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8733                           
  8734                           ;EusartApp.c: 181: TxMsg[(2)] = inRequest;
  8735  002884  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8736                           
  8737                           ;EusartApp.c: 182: TxMsg[(3)] = 0;
  8738  002888  0E00               	movlw	0
  8739  00288A  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8740                           
  8741                           ;EusartApp.c: 184: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8742  00288C  0E26               	movlw	low SendAckMessage@TxMsg
  8743  00288E  6E18               	movwf	crc8@dataArray,c
  8744  002890  0E00               	movlw	high SendAckMessage@TxMsg
  8745  002892  6E19               	movwf	crc8@dataArray+1,c
  8746  002894  0E00               	movlw	0
  8747  002896  6E1B               	movwf	crc8@dataSize+1,c
  8748  002898  0E05               	movlw	5
  8749  00289A  6E1A               	movwf	crc8@dataSize,c
  8750  00289C  EC84  F014         	call	_crc8	;wreg free
  8751  0028A0  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8752                           
  8753                           ;EusartApp.c: 186: WriteUartMessage(TxMsg, (0x5) + 1);
  8754  0028A2  0E26               	movlw	low SendAckMessage@TxMsg
  8755  0028A4  6E19               	movwf	WriteUartMessage@dataBuf,c
  8756  0028A6  0E00               	movlw	high SendAckMessage@TxMsg
  8757  0028A8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8758  0028AA  0E00               	movlw	0
  8759  0028AC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8760  0028AE  0E06               	movlw	6
  8761  0028B0  6E1B               	movwf	WriteUartMessage@dataSize,c
  8762  0028B2  ECC7  F016         	call	_WriteUartMessage	;wreg free
  8763  0028B6  0012               	return		;funcret
  8764  0028B8                     __end_of_SendAckMessage:
  8765                           	opt stack 0
  8766                           tosu	equ	0xFFF
  8767                           tosh	equ	0xFFE
  8768                           tosl	equ	0xFFD
  8769                           pclath	equ	0xFFA
  8770                           tblptru	equ	0xFF8
  8771                           tblptrh	equ	0xFF7
  8772                           tblptrl	equ	0xFF6
  8773                           tablat	equ	0xFF5
  8774                           prodh	equ	0xFF4
  8775                           prodl	equ	0xFF3
  8776                           intcon	equ	0xFF2
  8777                           intcon2	equ	0xFF1
  8778                           postinc0	equ	0xFEE
  8779                           wreg	equ	0xFE8
  8780                           indf1	equ	0xFE7
  8781                           postdec1	equ	0xFE5
  8782                           fsr1h	equ	0xFE2
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           fsr2h	equ	0xFDA
  8787                           fsr2l	equ	0xFD9
  8788                           status	equ	0xFD8
  8789                           
  8790 ;; *************** function _crc8 *****************
  8791 ;; Defined at:
  8792 ;;		line 13 in file "SystemCommon.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8795 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8796 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8797 ;;  dataSize        2   25[COMRAM] int 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  i               2   30[COMRAM] int 
  8800 ;;  crc             2   28[COMRAM] int 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      unsigned char 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8810 ;;      Params:         4       0       0       0       0       0       0
  8811 ;;      Locals:         4       0       0       0       0       0       0
  8812 ;;      Temps:          1       0       0       0       0       0       0
  8813 ;;      Totals:         9       0       0       0       0       0       0
  8814 ;;Total ram usage:        9 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    3
  8817 ;; This function calls:
  8818 ;;		Nothing
  8819 ;; This function is called by:
  8820 ;;		_readUartMessage
  8821 ;;		_SendAckMessage
  8822 ;;		_FlashReadUart
  8823 ;;		_FlashReadCondition
  8824 ;;		_GetMcuFwVersion
  8825 ;;		_GetCpldFwVersion
  8826 ;;		_GetMcuRunTime
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text58
  8831  002908                     __ptext58:
  8832                           	opt stack 0
  8833  002908                     _crc8:
  8834                           	opt stack 26
  8835                           
  8836                           ;SystemCommon.c: 15: int crc = 0;
  8837                           
  8838                           ;incstack = 0
  8839  002908  0E00               	movlw	0
  8840  00290A  6E1E               	movwf	crc8@crc+1,c
  8841  00290C  0E00               	movlw	0
  8842  00290E  6E1D               	movwf	crc8@crc,c
  8843                           
  8844                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8845  002910  0E00               	movlw	0
  8846  002912  6E20               	movwf	crc8@i+1,c
  8847  002914  0E00               	movlw	0
  8848  002916  6E1F               	movwf	crc8@i,c
  8849  002918  D00E               	goto	l1140
  8850  00291A                     
  8851                           ;SystemCommon.c: 17: {
  8852                           ;SystemCommon.c: 18: crc += dataArray[i];
  8853  00291A  501F               	movf	crc8@i,w,c
  8854  00291C  2418               	addwf	crc8@dataArray,w,c
  8855  00291E  6ED9               	movwf	fsr2l,c
  8856  002920  5020               	movf	crc8@i+1,w,c
  8857  002922  2019               	addwfc	crc8@dataArray+1,w,c
  8858  002924  6EDA               	movwf	fsr2h,c
  8859  002926  50DF               	movf	indf2,w,c
  8860  002928  6E1C               	movwf	??_crc8& (0+255),c
  8861  00292A  501C               	movf	??_crc8,w,c
  8862  00292C  261D               	addwf	crc8@crc,f,c
  8863  00292E  0E00               	movlw	0
  8864  002930  221E               	addwfc	crc8@crc+1,f,c
  8865  002932  4A1F               	infsnz	crc8@i,f,c
  8866  002934  2A20               	incf	crc8@i+1,f,c
  8867  002936                     l1140:
  8868  002936  501A               	movf	crc8@dataSize,w,c
  8869  002938  5C1F               	subwf	crc8@i,w,c
  8870  00293A  5020               	movf	crc8@i+1,w,c
  8871  00293C  0A80               	xorlw	128
  8872  00293E  6E1C               	movwf	??_crc8& (0+255),c
  8873  002940  501B               	movf	crc8@dataSize+1,w,c
  8874  002942  0A80               	xorlw	128
  8875  002944  581C               	subwfb	??_crc8& (0+255),w,c
  8876  002946  A0D8               	btfss	status,0,c
  8877  002948  D7E8               	goto	l1141
  8878                           
  8879                           ;SystemCommon.c: 19: }
  8880                           ;SystemCommon.c: 20: crc &= 0xff;
  8881  00294A  0EFF               	movlw	255
  8882  00294C  161D               	andwf	crc8@crc,f,c
  8883  00294E  0E00               	movlw	0
  8884  002950  161E               	andwf	crc8@crc+1,f,c
  8885                           
  8886                           ;SystemCommon.c: 21: return crc;
  8887  002952  501D               	movf	crc8@crc,w,c
  8888  002954  0012               	return	
  8889  002956                     __end_of_crc8:
  8890                           	opt stack 0
  8891                           tosu	equ	0xFFF
  8892                           tosh	equ	0xFFE
  8893                           tosl	equ	0xFFD
  8894                           pclath	equ	0xFFA
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodh	equ	0xFF4
  8900                           prodl	equ	0xFF3
  8901                           intcon	equ	0xFF2
  8902                           intcon2	equ	0xFF1
  8903                           postinc0	equ	0xFEE
  8904                           wreg	equ	0xFE8
  8905                           indf1	equ	0xFE7
  8906                           postdec1	equ	0xFE5
  8907                           fsr1h	equ	0xFE2
  8908                           fsr1l	equ	0xFE1
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           fsr2h	equ	0xFDA
  8912                           fsr2l	equ	0xFD9
  8913                           status	equ	0xFD8
  8914                           
  8915 ;; *************** function _ZeroArray *****************
  8916 ;; Defined at:
  8917 ;;		line 24 in file "SystemCommon.c"
  8918 ;; Parameters:    Size  Location     Type
  8919 ;;  array           2   31[COMRAM] PTR unsigned char 
  8920 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
  8921 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  8922 ;;  size            2   33[COMRAM] int 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;		None
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      void 
  8927 ;; Registers used:
  8928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8929 ;; Tracked objects:
  8930 ;;		On entry : 0/0
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8934 ;;      Params:         4       0       0       0       0       0       0
  8935 ;;      Locals:         0       0       0       0       0       0       0
  8936 ;;      Temps:          0       0       0       0       0       0       0
  8937 ;;      Totals:         4       0       0       0       0       0       0
  8938 ;;Total ram usage:        4 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    4
  8941 ;; This function calls:
  8942 ;;		_memset
  8943 ;; This function is called by:
  8944 ;;		_readUartMessage
  8945 ;;		_InitRxMessageParams
  8946 ;;		_SendAckMessage
  8947 ;;		_FlashReadUart
  8948 ;;		_FlashEreaseMem
  8949 ;;		_FlashReadCondition
  8950 ;;		_GetMcuFwVersion
  8951 ;;		_GetCpldFwVersion
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           	psect	text59
  8956  00310A                     __ptext59:
  8957                           	opt stack 0
  8958  00310A                     _ZeroArray:
  8959                           	opt stack 25
  8960                           
  8961                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8962                           
  8963                           ;incstack = 0
  8964  00310A  C020  F018         	movff	ZeroArray@array,memset@p1
  8965  00310E  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8966  003112  0E00               	movlw	0
  8967  003114  6E1B               	movwf	memset@c+1,c
  8968  003116  0E00               	movlw	0
  8969  003118  6E1A               	movwf	memset@c,c
  8970  00311A  C022  F01C         	movff	ZeroArray@size,memset@n
  8971  00311E  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  8972  003122  EC90  F017         	call	_memset	;wreg free
  8973  003126  0012               	return		;funcret
  8974  003128                     __end_of_ZeroArray:
  8975                           	opt stack 0
  8976                           tosu	equ	0xFFF
  8977                           tosh	equ	0xFFE
  8978                           tosl	equ	0xFFD
  8979                           pclath	equ	0xFFA
  8980                           tblptru	equ	0xFF8
  8981                           tblptrh	equ	0xFF7
  8982                           tblptrl	equ	0xFF6
  8983                           tablat	equ	0xFF5
  8984                           prodh	equ	0xFF4
  8985                           prodl	equ	0xFF3
  8986                           intcon	equ	0xFF2
  8987                           intcon2	equ	0xFF1
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           indf1	equ	0xFE7
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _memset *****************
  9001 ;; Defined at:
  9002 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  p1              2   23[COMRAM] PTR void 
  9005 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
  9006 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  9007 ;;  c               2   25[COMRAM] int 
  9008 ;;  n               2   27[COMRAM] unsigned int 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;  p               2   29[COMRAM] PTR unsigned char 
  9011 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
  9012 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  2   23[COMRAM] PTR void 
  9015 ;; Registers used:
  9016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9022 ;;      Params:         6       0       0       0       0       0       0
  9023 ;;      Locals:         2       0       0       0       0       0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0
  9025 ;;      Totals:         8       0       0       0       0       0       0
  9026 ;;Total ram usage:        8 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    3
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;;		_ZeroArray
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text60
  9037  002F20                     __ptext60:
  9038                           	opt stack 0
  9039  002F20                     _memset:
  9040                           	opt stack 25
  9041                           
  9042                           ;incstack = 0
  9043  002F20  C018  F01E         	movff	memset@p1,memset@p
  9044  002F24  C019  F01F         	movff	memset@p1+1,memset@p+1
  9045  002F28  D008               	goto	l1729
  9046  002F2A                     l5990:
  9047  002F2A  C01E  FFD9         	movff	memset@p,fsr2l
  9048  002F2E  C01F  FFDA         	movff	memset@p+1,fsr2h
  9049  002F32  C01A  FFDF         	movff	memset@c,indf2
  9050  002F36  4A1E               	infsnz	memset@p,f,c
  9051  002F38  2A1F               	incf	memset@p+1,f,c
  9052  002F3A                     l1729:
  9053  002F3A  061C               	decf	memset@n,f,c
  9054  002F3C  A0D8               	btfss	status,0,c
  9055  002F3E  061D               	decf	memset@n+1,f,c
  9056  002F40  281C               	incf	memset@n,w,c
  9057  002F42  E1F3               	bnz	l5990
  9058  002F44  281D               	incf	memset@n+1,w,c
  9059  002F46  B4D8               	btfsc	status,2,c
  9060  002F48  0012               	return	
  9061  002F4A  D7EF               	goto	l1730
  9062  002F4C                     __end_of_memset:
  9063                           	opt stack 0
  9064                           tosu	equ	0xFFF
  9065                           tosh	equ	0xFFE
  9066                           tosl	equ	0xFFD
  9067                           pclath	equ	0xFFA
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           intcon	equ	0xFF2
  9075                           intcon2	equ	0xFF1
  9076                           postinc0	equ	0xFEE
  9077                           wreg	equ	0xFE8
  9078                           indf1	equ	0xFE7
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           fsr2h	equ	0xFDA
  9085                           fsr2l	equ	0xFD9
  9086                           status	equ	0xFD8
  9087                           
  9088 ;; *************** function _WriteUartMessage *****************
  9089 ;; Defined at:
  9090 ;;		line 159 in file "EusartApp.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9093 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9094 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9095 ;;  dataSize        2   26[COMRAM] int 
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;  idx             2   29[COMRAM] int 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      void 
  9100 ;; Registers used:
  9101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9107 ;;      Params:         4       0       0       0       0       0       0
  9108 ;;      Locals:         2       0       0       0       0       0       0
  9109 ;;      Temps:          1       0       0       0       0       0       0
  9110 ;;      Totals:         7       0       0       0       0       0       0
  9111 ;;Total ram usage:        7 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    4
  9114 ;; This function calls:
  9115 ;;		_EUSART1_Write
  9116 ;; This function is called by:
  9117 ;;		_SendAckMessage
  9118 ;;		_FlashReadUart
  9119 ;;		_FlashReadCondition
  9120 ;;		_GetMcuFwVersion
  9121 ;;		_GetCpldFwVersion
  9122 ;;		_GetMcuRunTime
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text61
  9127  002D8E                     __ptext61:
  9128                           	opt stack 0
  9129  002D8E                     _WriteUartMessage:
  9130                           	opt stack 22
  9131                           
  9132                           ;EusartApp.c: 161: for(int idx = 0; idx < dataSize; idx++)
  9133                           
  9134                           ;incstack = 0
  9135  002D8E  0E00               	movlw	0
  9136  002D90  6E1F               	movwf	WriteUartMessage@idx+1,c
  9137  002D92  0E00               	movlw	0
  9138  002D94  6E1E               	movwf	WriteUartMessage@idx,c
  9139  002D96  D00B               	goto	l204
  9140  002D98                     
  9141                           ;EusartApp.c: 162: {
  9142                           ;EusartApp.c: 163: EUSART1_Write(dataBuf[idx]);
  9143  002D98  501E               	movf	WriteUartMessage@idx,w,c
  9144  002D9A  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9145  002D9C  6ED9               	movwf	fsr2l,c
  9146  002D9E  501F               	movf	WriteUartMessage@idx+1,w,c
  9147  002DA0  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9148  002DA2  6EDA               	movwf	fsr2h,c
  9149  002DA4  50DF               	movf	indf2,w,c
  9150  002DA6  EC20  F016         	call	_EUSART1_Write
  9151  002DAA  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9152  002DAC  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9153  002DAE                     l204:
  9154  002DAE  501B               	movf	WriteUartMessage@dataSize,w,c
  9155  002DB0  5C1E               	subwf	WriteUartMessage@idx,w,c
  9156  002DB2  501F               	movf	WriteUartMessage@idx+1,w,c
  9157  002DB4  0A80               	xorlw	128
  9158  002DB6  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9159  002DB8  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9160  002DBA  0A80               	xorlw	128
  9161  002DBC  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9162  002DBE  B0D8               	btfsc	status,0,c
  9163  002DC0  0012               	return	
  9164  002DC2  D7EA               	goto	l205
  9165  002DC4                     __end_of_WriteUartMessage:
  9166                           	opt stack 0
  9167                           tosu	equ	0xFFF
  9168                           tosh	equ	0xFFE
  9169                           tosl	equ	0xFFD
  9170                           pclath	equ	0xFFA
  9171                           tblptru	equ	0xFF8
  9172                           tblptrh	equ	0xFF7
  9173                           tblptrl	equ	0xFF6
  9174                           tablat	equ	0xFF5
  9175                           prodh	equ	0xFF4
  9176                           prodl	equ	0xFF3
  9177                           intcon	equ	0xFF2
  9178                           intcon2	equ	0xFF1
  9179                           postinc0	equ	0xFEE
  9180                           wreg	equ	0xFE8
  9181                           indf1	equ	0xFE7
  9182                           postdec1	equ	0xFE5
  9183                           fsr1h	equ	0xFE2
  9184                           fsr1l	equ	0xFE1
  9185                           indf2	equ	0xFDF
  9186                           postinc2	equ	0xFDE
  9187                           fsr2h	equ	0xFDA
  9188                           fsr2l	equ	0xFD9
  9189                           status	equ	0xFD8
  9190                           
  9191 ;; *************** function _EUSART1_Write *****************
  9192 ;; Defined at:
  9193 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  txData          1    wreg     unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  txData          1   23[COMRAM] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9207 ;;      Params:         0       0       0       0       0       0       0
  9208 ;;      Locals:         1       0       0       0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0
  9210 ;;      Totals:         1       0       0       0       0       0       0
  9211 ;;Total ram usage:        1 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    3
  9214 ;; This function calls:
  9215 ;;		Nothing
  9216 ;; This function is called by:
  9217 ;;		_WriteUartMessage
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           	psect	text62
  9222  002C40                     __ptext62:
  9223                           	opt stack 0
  9224  002C40                     _EUSART1_Write:
  9225                           	opt stack 22
  9226                           
  9227                           ;incstack = 0
  9228                           ;EUSART1_Write@txData stored from wreg
  9229  002C40  6E18               	movwf	EUSART1_Write@txData,c
  9230  002C42                     
  9231                           ;eusart1.c: 160: {
  9232                           
  9233                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9234  002C42  0100               	movlb	0	; () banked
  9235  002C44  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9236  002C46  B4D8               	btfsc	status,2,c
  9237  002C48  D7FC               	goto	l5944
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;eusart1.c: 161: }
  9241                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9242  002C4A  B89D               	btfsc	3997,4,c	;volatile
  9243  002C4C  D003               	goto	l740
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;eusart1.c: 164: {
  9247                           ;eusart1.c: 165: TXREG1 = txData;
  9248  002C4E  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9249                           
  9250                           ;eusart1.c: 166: }
  9251  002C52  D012               	goto	l741
  9252  002C54                     l740:
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;eusart1.c: 167: else
  9256                           ;eusart1.c: 168: {
  9257                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9258  002C54  989D               	bcf	3997,4,c	;volatile
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9262  002C56  503A               	movf	_eusart1TxHead,w,c	;volatile
  9263  002C58  0D01               	mullw	1
  9264  002C5A  0E00               	movlw	low _eusart1TxBuffer
  9265  002C5C  24F3               	addwf	prodl,w,c
  9266  002C5E  6ED9               	movwf	fsr2l,c
  9267  002C60  0E01               	movlw	high _eusart1TxBuffer
  9268  002C62  20F4               	addwfc	prodh,w,c
  9269  002C64  6EDA               	movwf	fsr2h,c
  9270  002C66  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9271                           
  9272                           ; BSR set to: 0
  9273  002C6A  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9277  002C6C  0E45               	movlw	69
  9278  002C6E  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9279  002C70  D002               	goto	l742
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;eusart1.c: 172: {
  9283                           ;eusart1.c: 173: eusart1TxHead = 0;
  9284  002C72  0E00               	movlw	0
  9285  002C74  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9286  002C76                     l742:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;eusart1.c: 174: }
  9290                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9291                           
  9292                           ; BSR set to: 0
  9293  002C76  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9294  002C78                     l741:
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;eusart1.c: 176: }
  9298                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9299                           
  9300                           ; BSR set to: 0
  9301  002C78  889D               	bsf	3997,4,c	;volatile
  9302                           
  9303                           ; BSR set to: 0
  9304  002C7A  0012               	return		;funcret
  9305  002C7C                     __end_of_EUSART1_Write:
  9306                           	opt stack 0
  9307                           tosu	equ	0xFFF
  9308                           tosh	equ	0xFFE
  9309                           tosl	equ	0xFFD
  9310                           pclath	equ	0xFFA
  9311                           tblptru	equ	0xFF8
  9312                           tblptrh	equ	0xFF7
  9313                           tblptrl	equ	0xFF6
  9314                           tablat	equ	0xFF5
  9315                           prodh	equ	0xFF4
  9316                           prodl	equ	0xFF3
  9317                           intcon	equ	0xFF2
  9318                           intcon2	equ	0xFF1
  9319                           postinc0	equ	0xFEE
  9320                           wreg	equ	0xFE8
  9321                           indf1	equ	0xFE7
  9322                           postdec1	equ	0xFE5
  9323                           fsr1h	equ	0xFE2
  9324                           fsr1l	equ	0xFE1
  9325                           indf2	equ	0xFDF
  9326                           postinc2	equ	0xFDE
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function _InitSystemApplicationManagers *****************
  9332 ;; Defined at:
  9333 ;;		line 33 in file "SystemSettings.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;		None
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      void 
  9340 ;; Registers used:
  9341 ;;		wreg, status,2, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9347 ;;      Params:         0       0       0       0       0       0       0
  9348 ;;      Locals:         0       0       0       0       0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0
  9350 ;;      Totals:         0       0       0       0       0       0       0
  9351 ;;Total ram usage:        0 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    4
  9354 ;; This function calls:
  9355 ;;		_ClearMcuRunTime
  9356 ;;		_InitAdcApplicationMgr
  9357 ;;		_InitSevenSegment
  9358 ;;		_InitSynthesizers
  9359 ;;		_TMR0_StartTimer
  9360 ;; This function is called by:
  9361 ;;		_main
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           	psect	text63
  9366  003170                     __ptext63:
  9367                           	opt stack 0
  9368  003170                     _InitSystemApplicationManagers:
  9369                           	opt stack 26
  9370                           
  9371                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;incstack = 0
  9375  003170  ECFD  F018         	call	_InitAdcApplicationMgr	;wreg free
  9376                           
  9377                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9378  003174  EC3F  F019         	call	_TMR0_StartTimer	;wreg free
  9379                           
  9380                           ;SystemSettings.c: 42: InitSevenSegment();
  9381  003178  ECCE  F017         	call	_InitSevenSegment	;wreg free
  9382                           
  9383                           ;SystemSettings.c: 45: InitSynthesizers();
  9384  00317C  EC38  F019         	call	_InitSynthesizers	;wreg free
  9385                           
  9386                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9387  003180  ECCD  F018         	call	_ClearMcuRunTime	;wreg free
  9388  003184  0012               	return		;funcret
  9389  003186                     __end_of_InitSystemApplicationManagers:
  9390                           	opt stack 0
  9391                           tosu	equ	0xFFF
  9392                           tosh	equ	0xFFE
  9393                           tosl	equ	0xFFD
  9394                           pclath	equ	0xFFA
  9395                           tblptru	equ	0xFF8
  9396                           tblptrh	equ	0xFF7
  9397                           tblptrl	equ	0xFF6
  9398                           tablat	equ	0xFF5
  9399                           prodh	equ	0xFF4
  9400                           prodl	equ	0xFF3
  9401                           intcon	equ	0xFF2
  9402                           intcon2	equ	0xFF1
  9403                           postinc0	equ	0xFEE
  9404                           wreg	equ	0xFE8
  9405                           indf1	equ	0xFE7
  9406                           postdec1	equ	0xFE5
  9407                           fsr1h	equ	0xFE2
  9408                           fsr1l	equ	0xFE1
  9409                           indf2	equ	0xFDF
  9410                           postinc2	equ	0xFDE
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8
  9414                           
  9415 ;; *************** function _TMR0_StartTimer *****************
  9416 ;; Defined at:
  9417 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;		None
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;		None
  9422 ;; Return value:  Size  Location     Type
  9423 ;;                  1    wreg      void 
  9424 ;; Registers used:
  9425 ;;		None
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 0/0
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9431 ;;      Params:         0       0       0       0       0       0       0
  9432 ;;      Locals:         0       0       0       0       0       0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0
  9434 ;;      Totals:         0       0       0       0       0       0       0
  9435 ;;Total ram usage:        0 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    3
  9438 ;; This function calls:
  9439 ;;		Nothing
  9440 ;; This function is called by:
  9441 ;;		_InitSystemApplicationManagers
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           	psect	text64
  9446  00327E                     __ptext64:
  9447                           	opt stack 0
  9448  00327E                     _TMR0_StartTimer:
  9449                           	opt stack 26
  9450                           
  9451                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9452                           
  9453                           ;incstack = 0
  9454  00327E  8ED5               	bsf	4053,7,c	;volatile
  9455  003280  0012               	return		;funcret
  9456  003282                     __end_of_TMR0_StartTimer:
  9457                           	opt stack 0
  9458                           tosu	equ	0xFFF
  9459                           tosh	equ	0xFFE
  9460                           tosl	equ	0xFFD
  9461                           pclath	equ	0xFFA
  9462                           tblptru	equ	0xFF8
  9463                           tblptrh	equ	0xFF7
  9464                           tblptrl	equ	0xFF6
  9465                           tablat	equ	0xFF5
  9466                           prodh	equ	0xFF4
  9467                           prodl	equ	0xFF3
  9468                           intcon	equ	0xFF2
  9469                           intcon2	equ	0xFF1
  9470                           postinc0	equ	0xFEE
  9471                           wreg	equ	0xFE8
  9472                           indf1	equ	0xFE7
  9473                           postdec1	equ	0xFE5
  9474                           fsr1h	equ	0xFE2
  9475                           fsr1l	equ	0xFE1
  9476                           indf2	equ	0xFDF
  9477                           postinc2	equ	0xFDE
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           
  9482 ;; *************** function _InitSynthesizers *****************
  9483 ;; Defined at:
  9484 ;;		line 13 in file "SyntApp.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;		None
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;		None
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  1    wreg      void 
  9491 ;; Registers used:
  9492 ;;		wreg, status,2
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9498 ;;      Params:         0       0       0       0       0       0       0
  9499 ;;      Locals:         0       0       0       0       0       0       0
  9500 ;;      Temps:          0       0       0       0       0       0       0
  9501 ;;      Totals:         0       0       0       0       0       0       0
  9502 ;;Total ram usage:        0 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    3
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_InitSystemApplicationManagers
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text65
  9513  003270                     __ptext65:
  9514                           	opt stack 0
  9515  003270                     _InitSynthesizers:
  9516                           	opt stack 26
  9517                           
  9518                           ;SyntApp.c: 16: IOCB = 0b10000000;
  9519                           
  9520                           ;incstack = 0
  9521  003270  0E80               	movlw	128
  9522  003272  6E62               	movwf	3938,c	;volatile
  9523  003274  0012               	return		;funcret
  9524  003276                     __end_of_InitSynthesizers:
  9525                           	opt stack 0
  9526                           tosu	equ	0xFFF
  9527                           tosh	equ	0xFFE
  9528                           tosl	equ	0xFFD
  9529                           pclath	equ	0xFFA
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           prodh	equ	0xFF4
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           postinc0	equ	0xFEE
  9539                           wreg	equ	0xFE8
  9540                           indf1	equ	0xFE7
  9541                           postdec1	equ	0xFE5
  9542                           fsr1h	equ	0xFE2
  9543                           fsr1l	equ	0xFE1
  9544                           indf2	equ	0xFDF
  9545                           postinc2	equ	0xFDE
  9546                           fsr2h	equ	0xFDA
  9547                           fsr2l	equ	0xFD9
  9548                           status	equ	0xFD8
  9549                           
  9550 ;; *************** function _InitSevenSegment *****************
  9551 ;; Defined at:
  9552 ;;		line 14 in file "SevenSegmentApp.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;		None
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;		None
  9557 ;; Return value:  Size  Location     Type
  9558 ;;                  1    wreg      void 
  9559 ;; Registers used:
  9560 ;;		wreg, status,2
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9566 ;;      Params:         0       0       0       0       0       0       0
  9567 ;;      Locals:         0       0       0       0       0       0       0
  9568 ;;      Temps:          0       0       0       0       0       0       0
  9569 ;;      Totals:         0       0       0       0       0       0       0
  9570 ;;Total ram usage:        0 bytes
  9571 ;; Hardware stack levels used:    1
  9572 ;; Hardware stack levels required when called:    3
  9573 ;; This function calls:
  9574 ;;		Nothing
  9575 ;; This function is called by:
  9576 ;;		_InitSystemApplicationManagers
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text66
  9581  002F9C                     __ptext66:
  9582                           	opt stack 0
  9583  002F9C                     _InitSevenSegment:
  9584                           	opt stack 26
  9585                           
  9586                           ;SevenSegmentApp.c: 16: ANSELA = 0;
  9587                           
  9588                           ;incstack = 0
  9589  002F9C  0E00               	movlw	0
  9590  002F9E  010F               	movlb	15	; () banked
  9591  002FA0  6F38               	movwf	56,b	;volatile
  9592                           
  9593                           ;SevenSegmentApp.c: 17: ANSELD = 0;
  9594  002FA2  0E00               	movlw	0
  9595  002FA4  6F3B               	movwf	59,b	;volatile
  9596                           
  9597                           ;SevenSegmentApp.c: 19: TRISA = 0;
  9598  002FA6  0E00               	movlw	0
  9599  002FA8  6E92               	movwf	3986,c	;volatile
  9600                           
  9601                           ;SevenSegmentApp.c: 20: LATA = 0;
  9602  002FAA  0E00               	movlw	0
  9603  002FAC  6E89               	movwf	3977,c	;volatile
  9604                           
  9605                           ;SevenSegmentApp.c: 21: TRISD = 0;
  9606  002FAE  0E00               	movlw	0
  9607  002FB0  6E95               	movwf	3989,c	;volatile
  9608                           
  9609                           ;SevenSegmentApp.c: 22: LATD = 0;
  9610  002FB2  0E00               	movlw	0
  9611  002FB4  6E8C               	movwf	3980,c	;volatile
  9612                           
  9613                           ;SevenSegmentApp.c: 24: cnt = 1;
  9614  002FB6  0E00               	movlw	0
  9615  002FB8  0100               	movlb	0	; () banked
  9616  002FBA  6FFD               	movwf	(_cnt+1)& (0+255),b
  9617  002FBC  0E01               	movlw	1
  9618  002FBE  6FFC               	movwf	_cnt& (0+255),b
  9619                           
  9620                           ; BSR set to: 0
  9621  002FC0  0012               	return		;funcret
  9622  002FC2                     __end_of_InitSevenSegment:
  9623                           	opt stack 0
  9624                           tosu	equ	0xFFF
  9625                           tosh	equ	0xFFE
  9626                           tosl	equ	0xFFD
  9627                           pclath	equ	0xFFA
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           intcon2	equ	0xFF1
  9636                           postinc0	equ	0xFEE
  9637                           wreg	equ	0xFE8
  9638                           indf1	equ	0xFE7
  9639                           postdec1	equ	0xFE5
  9640                           fsr1h	equ	0xFE2
  9641                           fsr1l	equ	0xFE1
  9642                           indf2	equ	0xFDF
  9643                           postinc2	equ	0xFDE
  9644                           fsr2h	equ	0xFDA
  9645                           fsr2l	equ	0xFD9
  9646                           status	equ	0xFD8
  9647                           
  9648 ;; *************** function _InitAdcApplicationMgr *****************
  9649 ;; Defined at:
  9650 ;;		line 22 in file "AdcApp.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;  channel         1   23[COMRAM] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      void 
  9657 ;; Registers used:
  9658 ;;		wreg, status,2
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9664 ;;      Params:         0       0       0       0       0       0       0
  9665 ;;      Locals:         1       0       0       0       0       0       0
  9666 ;;      Temps:          0       0       0       0       0       0       0
  9667 ;;      Totals:         1       0       0       0       0       0       0
  9668 ;;Total ram usage:        1 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    3
  9671 ;; This function calls:
  9672 ;;		Nothing
  9673 ;; This function is called by:
  9674 ;;		_InitSystemApplicationManagers
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text67
  9679  0031FA                     __ptext67:
  9680                           	opt stack 0
  9681  0031FA                     _InitAdcApplicationMgr:
  9682                           	opt stack 26
  9683                           
  9684                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;incstack = 0
  9688  0031FA  0E00               	movlw	0
  9689  0031FC  6E3D               	movwf	_conversionFormat,c
  9690                           
  9691                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  9692  0031FE  0E00               	movlw	0
  9693  003200  6E3C               	movwf	_adcSampleMode,c
  9694                           
  9695                           ;AdcApp.c: 26: char channel = 0;
  9696  003202  0E00               	movlw	0
  9697  003204  6E18               	movwf	InitAdcApplicationMgr@channel,c
  9698  003206  0012               	return		;funcret
  9699  003208                     __end_of_InitAdcApplicationMgr:
  9700                           	opt stack 0
  9701                           tosu	equ	0xFFF
  9702                           tosh	equ	0xFFE
  9703                           tosl	equ	0xFFD
  9704                           pclath	equ	0xFFA
  9705                           tblptru	equ	0xFF8
  9706                           tblptrh	equ	0xFF7
  9707                           tblptrl	equ	0xFF6
  9708                           tablat	equ	0xFF5
  9709                           prodh	equ	0xFF4
  9710                           prodl	equ	0xFF3
  9711                           intcon	equ	0xFF2
  9712                           intcon2	equ	0xFF1
  9713                           postinc0	equ	0xFEE
  9714                           wreg	equ	0xFE8
  9715                           indf1	equ	0xFE7
  9716                           postdec1	equ	0xFE5
  9717                           fsr1h	equ	0xFE2
  9718                           fsr1l	equ	0xFE1
  9719                           indf2	equ	0xFDF
  9720                           postinc2	equ	0xFDE
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function _ClearMcuRunTime *****************
  9726 ;; Defined at:
  9727 ;;		line 87 in file "SystemStatus.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      void 
  9734 ;; Registers used:
  9735 ;;		wreg, status,2
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9741 ;;      Params:         0       0       0       0       0       0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0
  9744 ;;      Totals:         0       0       0       0       0       0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    3
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_InitSystemApplicationManagers
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           	psect	text68
  9756  00319A                     __ptext68:
  9757                           	opt stack 0
  9758  00319A                     _ClearMcuRunTime:
  9759                           	opt stack 26
  9760                           
  9761                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
  9762                           
  9763                           ;incstack = 0
  9764  00319A  0E00               	movlw	0
  9765  00319C  0100               	movlb	0	; () banked
  9766  00319E  6FD3               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
  9767  0031A0  0E00               	movlw	0
  9768  0031A2  6FD4               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
  9769  0031A4  0E00               	movlw	0
  9770  0031A6  6FD5               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
  9771  0031A8  0E00               	movlw	0
  9772  0031AA  6FD6               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
  9773                           
  9774                           ; BSR set to: 0
  9775  0031AC  0012               	return		;funcret
  9776  0031AE                     __end_of_ClearMcuRunTime:
  9777                           	opt stack 0
  9778                           tosu	equ	0xFFF
  9779                           tosh	equ	0xFFE
  9780                           tosl	equ	0xFFD
  9781                           pclath	equ	0xFFA
  9782                           tblptru	equ	0xFF8
  9783                           tblptrh	equ	0xFF7
  9784                           tblptrl	equ	0xFF6
  9785                           tablat	equ	0xFF5
  9786                           prodh	equ	0xFF4
  9787                           prodl	equ	0xFF3
  9788                           intcon	equ	0xFF2
  9789                           intcon2	equ	0xFF1
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           indf1	equ	0xFE7
  9793                           postdec1	equ	0xFE5
  9794                           fsr1h	equ	0xFE2
  9795                           fsr1l	equ	0xFE1
  9796                           indf2	equ	0xFDF
  9797                           postinc2	equ	0xFDE
  9798                           fsr2h	equ	0xFDA
  9799                           fsr2l	equ	0xFD9
  9800                           status	equ	0xFD8
  9801                           
  9802 ;; *************** function _CheckFlashPrecentage *****************
  9803 ;; Defined at:
  9804 ;;		line 201 in file "FlashApp.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;		None
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  precentage      3   28[BANK0 ] void 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  1    wreg      unsigned char 
  9811 ;; Registers used:
  9812 ;;		wreg, status,2, status,0, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9818 ;;      Params:         0       0       0       0       0       0       0
  9819 ;;      Locals:         0       3       0       0       0       0       0
  9820 ;;      Temps:          0       4       0       0       0       0       0
  9821 ;;      Totals:         0       7       0       0       0       0       0
  9822 ;;Total ram usage:        7 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    5
  9825 ;; This function calls:
  9826 ;;		___ftdiv
  9827 ;;		___ftge
  9828 ;;		___ftmul
  9829 ;;		___lltoft
  9830 ;; This function is called by:
  9831 ;;		_main
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text69
  9836  002094                     __ptext69:
  9837                           	opt stack 0
  9838  002094                     _CheckFlashPrecentage:
  9839                           	opt stack 25
  9840                           
  9841                           ;FlashApp.c: 203: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;incstack = 0
  9845  002094  0EE0               	movlw	224
  9846  002096  0100               	movlb	0	; () banked
  9847  002098  6F6C               	movwf	___ftdiv@f2& (0+255),b
  9848  00209A  0EFF               	movlw	255
  9849  00209C  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
  9850  00209E  0E46               	movlw	70
  9851  0020A0  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
  9852  0020A2  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
  9853  0020A6  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
  9854  0020AA  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
  9855  0020AE  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
  9856  0020B2  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
  9857  0020B4  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
  9858  0020B6  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
  9859  0020B8  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
  9860  0020BA  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
  9861  0020BC  0E00               	movlw	0
  9862  0020BE  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
  9863  0020C0  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
  9864  0020C2  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
  9865  0020C4  0EF0               	movlw	240
  9866  0020C6  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
  9867  0020C8  6E20               	movwf	___lltoft@c,c
  9868  0020CA  0E7F               	movlw	127
  9869  0020CC  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
  9870  0020CE  6E21               	movwf	___lltoft@c+1,c
  9871  0020D0  0E00               	movlw	0
  9872  0020D2  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
  9873  0020D4  6E22               	movwf	___lltoft@c+2,c
  9874  0020D6  0E00               	movlw	0
  9875  0020D8  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
  9876  0020DA  6E23               	movwf	___lltoft@c+3,c
  9877  0020DC  ECB0  F013         	call	___lltoft	;wreg free
  9878  0020E0  C020  F069         	movff	?___lltoft,___ftdiv@f1
  9879  0020E4  C021  F06A         	movff	?___lltoft+1,___ftdiv@f1+1
  9880  0020E8  C022  F06B         	movff	?___lltoft+2,___ftdiv@f1+2
  9881  0020EC  EC10  F00D         	call	___ftdiv	;wreg free
  9882  0020F0  C069  F029         	movff	?___ftdiv,___ftmul@f1
  9883  0020F4  C06A  F02A         	movff	?___ftdiv+1,___ftmul@f1+1
  9884  0020F8  C06B  F02B         	movff	?___ftdiv+2,___ftmul@f1+2
  9885  0020FC  0E00               	movlw	0
  9886  0020FE  6E2C               	movwf	___ftmul@f2,c
  9887  002100  0EC8               	movlw	200
  9888  002102  6E2D               	movwf	___ftmul@f2+1,c
  9889  002104  0E42               	movlw	66
  9890  002106  6E2E               	movwf	___ftmul@f2+2,c
  9891  002108  EC95  F00C         	call	___ftmul	;wreg free
  9892  00210C  C029  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
  9893  002110  C02A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
  9894  002114  C02B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
  9895                           
  9896                           ;FlashApp.c: 204: return (precentage > 75) ? 1 : 0;
  9897  002118  0E00               	movlw	0
  9898  00211A  6E18               	movwf	___ftge@ff1,c
  9899  00211C  0E96               	movlw	150
  9900  00211E  6E19               	movwf	___ftge@ff1+1,c
  9901  002120  0E42               	movlw	66
  9902  002122  6E1A               	movwf	___ftge@ff1+2,c
  9903  002124  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
  9904  002128  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
  9905  00212C  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
  9906  002130  EC79  F011         	call	___ftge	;wreg free
  9907  002134  B0D8               	btfsc	status,0,c
  9908  002136  D002               	goto	u6340
  9909  002138  0E01               	movlw	1
  9910  00213A  0012               	return	
  9911  00213C                     u6340:
  9912  00213C  0E00               	movlw	0
  9913  00213E  0012               	return	
  9914  002140                     __end_of_CheckFlashPrecentage:
  9915                           	opt stack 0
  9916                           tosu	equ	0xFFF
  9917                           tosh	equ	0xFFE
  9918                           tosl	equ	0xFFD
  9919                           pclath	equ	0xFFA
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           postdec1	equ	0xFE5
  9932                           fsr1h	equ	0xFE2
  9933                           fsr1l	equ	0xFE1
  9934                           indf2	equ	0xFDF
  9935                           postinc2	equ	0xFDE
  9936                           fsr2h	equ	0xFDA
  9937                           fsr2l	equ	0xFD9
  9938                           status	equ	0xFD8
  9939                           
  9940 ;; *************** function _BlinkOkLeds *****************
  9941 ;; Defined at:
  9942 ;;		line 24 in file "LedsApp.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  state           1    wreg     enum E7532
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  state           1   26[COMRAM] enum E7532
  9947 ;;  idx             2   27[COMRAM] int 
  9948 ;; Return value:  Size  Location     Type
  9949 ;;                  1    wreg      void 
  9950 ;; Registers used:
  9951 ;;		wreg, status,2, status,0
  9952 ;; Tracked objects:
  9953 ;;		On entry : 0/0
  9954 ;;		On exit  : 0/0
  9955 ;;		Unchanged: 0/0
  9956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9957 ;;      Params:         0       0       0       0       0       0       0
  9958 ;;      Locals:         3       0       0       0       0       0       0
  9959 ;;      Temps:          3       0       0       0       0       0       0
  9960 ;;      Totals:         6       0       0       0       0       0       0
  9961 ;;Total ram usage:        6 bytes
  9962 ;; Hardware stack levels used:    1
  9963 ;; Hardware stack levels required when called:    3
  9964 ;; This function calls:
  9965 ;;		Nothing
  9966 ;; This function is called by:
  9967 ;;		_main
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           	psect	text70
  9972  0026A4                     __ptext70:
  9973                           	opt stack 0
  9974  0026A4                     _BlinkOkLeds:
  9975                           	opt stack 27
  9976                           
  9977                           ;incstack = 0
  9978                           ;BlinkOkLeds@state stored from wreg
  9979  0026A4  6E1B               	movwf	BlinkOkLeds@state,c
  9980                           
  9981                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
  9982  0026A6  0E00               	movlw	0
  9983  0026A8  6E1D               	movwf	BlinkOkLeds@idx+1,c
  9984  0026AA  0E00               	movlw	0
  9985  0026AC  6E1C               	movwf	BlinkOkLeds@idx,c
  9986  0026AE                     l5244:
  9987  0026AE  501B               	movf	BlinkOkLeds@state,w,c
  9988  0026B0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
  9989  0026B2  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
  9990  0026B4  5018               	movf	??_BlinkOkLeds,w,c
  9991  0026B6  5C1C               	subwf	BlinkOkLeds@idx,w,c
  9992  0026B8  501D               	movf	BlinkOkLeds@idx+1,w,c
  9993  0026BA  0A80               	xorlw	128
  9994  0026BC  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
  9995  0026BE  5019               	movf	??_BlinkOkLeds+1,w,c
  9996  0026C0  0A80               	xorlw	128
  9997  0026C2  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
  9998  0026C4  B0D8               	btfsc	status,0,c
  9999  0026C6  0012               	return	
 10000                           
 10001                           ;LedsApp.c: 27: {
 10002                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 10003  0026C8  908B               	bcf	3979,0,c	;volatile
 10004                           
 10005                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 10006  0026CA  0E02               	movlw	2
 10007  0026CC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 10008  0026CE  0E04               	movlw	4
 10009  0026D0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 10010  0026D2  0EBA               	movlw	186
 10011  0026D4                     u6597:
 10012  0026D4  2EE8               	decfsz	wreg,f,c
 10013  0026D6  D7FE               	bra	u6597
 10014  0026D8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 10015  0026DA  D7FC               	bra	u6597
 10016  0026DC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 10017  0026DE  D7FA               	bra	u6597
 10018  0026E0  D000               	nop2	
 10019                           
 10020                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 10021  0026E2  808B               	bsf	3979,0,c	;volatile
 10022                           
 10023                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 10024  0026E4  0E02               	movlw	2
 10025  0026E6  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 10026  0026E8  0E04               	movlw	4
 10027  0026EA  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 10028  0026EC  0EBA               	movlw	186
 10029  0026EE                     u6607:
 10030  0026EE  2EE8               	decfsz	wreg,f,c
 10031  0026F0  D7FE               	bra	u6607
 10032  0026F2  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 10033  0026F4  D7FC               	bra	u6607
 10034  0026F6  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 10035  0026F8  D7FA               	bra	u6607
 10036  0026FA  D000               	nop2	
 10037  0026FC  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 10038  0026FE  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 10039  002700  D7D6               	goto	l5244
 10040  002702                     __end_of_BlinkOkLeds:
 10041                           	opt stack 0
 10042                           tosu	equ	0xFFF
 10043                           tosh	equ	0xFFE
 10044                           tosl	equ	0xFFD
 10045                           pclath	equ	0xFFA
 10046                           tblptru	equ	0xFF8
 10047                           tblptrh	equ	0xFF7
 10048                           tblptrl	equ	0xFF6
 10049                           tablat	equ	0xFF5
 10050                           prodh	equ	0xFF4
 10051                           prodl	equ	0xFF3
 10052                           intcon	equ	0xFF2
 10053                           intcon2	equ	0xFF1
 10054                           postinc0	equ	0xFEE
 10055                           wreg	equ	0xFE8
 10056                           indf1	equ	0xFE7
 10057                           postdec1	equ	0xFE5
 10058                           fsr1h	equ	0xFE2
 10059                           fsr1l	equ	0xFE1
 10060                           indf2	equ	0xFDF
 10061                           postinc2	equ	0xFDE
 10062                           fsr2h	equ	0xFDA
 10063                           fsr2l	equ	0xFD9
 10064                           status	equ	0xFD8
 10065                           
 10066 ;; *************** function _BlinkErrorLeds *****************
 10067 ;; Defined at:
 10068 ;;		line 13 in file "LedsApp.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  state           1    wreg     enum E7535
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;  state           1   26[COMRAM] enum E7535
 10073 ;;  idx             2   27[COMRAM] int 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		wreg, status,2, status,0
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10083 ;;      Params:         0       0       0       0       0       0       0
 10084 ;;      Locals:         3       0       0       0       0       0       0
 10085 ;;      Temps:          3       0       0       0       0       0       0
 10086 ;;      Totals:         6       0       0       0       0       0       0
 10087 ;;Total ram usage:        6 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    3
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_main
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           	psect	text71
 10098  002702                     __ptext71:
 10099                           	opt stack 0
 10100  002702                     _BlinkErrorLeds:
 10101                           	opt stack 27
 10102                           
 10103                           ;incstack = 0
 10104                           ;BlinkErrorLeds@state stored from wreg
 10105  002702  6E1B               	movwf	BlinkErrorLeds@state,c
 10106                           
 10107                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 10108  002704  0E00               	movlw	0
 10109  002706  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 10110  002708  0E00               	movlw	0
 10111  00270A  6E1C               	movwf	BlinkErrorLeds@idx,c
 10112  00270C                     l5232:
 10113  00270C  501B               	movf	BlinkErrorLeds@state,w,c
 10114  00270E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 10115  002710  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 10116  002712  5018               	movf	??_BlinkErrorLeds,w,c
 10117  002714  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 10118  002716  501D               	movf	BlinkErrorLeds@idx+1,w,c
 10119  002718  0A80               	xorlw	128
 10120  00271A  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 10121  00271C  5019               	movf	??_BlinkErrorLeds+1,w,c
 10122  00271E  0A80               	xorlw	128
 10123  002720  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 10124  002722  B0D8               	btfsc	status,0,c
 10125  002724  0012               	return	
 10126                           
 10127                           ;LedsApp.c: 16: {
 10128                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 10129  002726  988A               	bcf	3978,4,c	;volatile
 10130                           
 10131                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 10132  002728  0E02               	movlw	2
 10133  00272A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 10134  00272C  0E04               	movlw	4
 10135  00272E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 10136  002730  0EBA               	movlw	186
 10137  002732                     u6617:
 10138  002732  2EE8               	decfsz	wreg,f,c
 10139  002734  D7FE               	bra	u6617
 10140  002736  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 10141  002738  D7FC               	bra	u6617
 10142  00273A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 10143  00273C  D7FA               	bra	u6617
 10144  00273E  D000               	nop2	
 10145                           
 10146                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 10147  002740  888A               	bsf	3978,4,c	;volatile
 10148                           
 10149                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 10150  002742  0E02               	movlw	2
 10151  002744  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 10152  002746  0E04               	movlw	4
 10153  002748  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 10154  00274A  0EBA               	movlw	186
 10155  00274C                     u6627:
 10156  00274C  2EE8               	decfsz	wreg,f,c
 10157  00274E  D7FE               	bra	u6627
 10158  002750  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 10159  002752  D7FC               	bra	u6627
 10160  002754  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 10161  002756  D7FA               	bra	u6627
 10162  002758  D000               	nop2	
 10163  00275A  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 10164  00275C  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 10165  00275E  D7D6               	goto	l5232
 10166  002760                     __end_of_BlinkErrorLeds:
 10167                           	opt stack 0
 10168                           tosu	equ	0xFFF
 10169                           tosh	equ	0xFFE
 10170                           tosl	equ	0xFFD
 10171                           pclath	equ	0xFFA
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           postinc0	equ	0xFEE
 10181                           wreg	equ	0xFE8
 10182                           indf1	equ	0xFE7
 10183                           postdec1	equ	0xFE5
 10184                           fsr1h	equ	0xFE2
 10185                           fsr1l	equ	0xFE1
 10186                           indf2	equ	0xFDF
 10187                           postinc2	equ	0xFDE
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function _AdcConvert *****************
 10193 ;; Defined at:
 10194 ;;		line 56 in file "AdcApp.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;		None
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 10199 ;;  idx             1   92[BANK0 ] unsigned char 
 10200 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 10201 ;;  adcRes          2   90[BANK0 ] unsigned int 
 10202 ;; Return value:  Size  Location     Type
 10203 ;;                  1    wreg      void 
 10204 ;; Registers used:
 10205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10211 ;;      Params:         0       0       0       0       0       0       0
 10212 ;;      Locals:         0      10       0       0       0       0       0
 10213 ;;      Temps:          0       2       0       0       0       0       0
 10214 ;;      Totals:         0      12       0       0       0       0       0
 10215 ;;Total ram usage:       12 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    8
 10218 ;; This function calls:
 10219 ;;		_ADC_GetConversion
 10220 ;;		_FlashSampleWrite
 10221 ;;		___ftdiv
 10222 ;;		___ftmul
 10223 ;;		___fttol
 10224 ;;		___lwtoft
 10225 ;;		_pow
 10226 ;; This function is called by:
 10227 ;;		_main
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text72
 10232  001012                     __ptext72:
 10233                           	opt stack 0
 10234  001012                     _AdcConvert:
 10235                           	opt stack 22
 10236                           
 10237                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 10238                           
 10239                           ;incstack = 0
 10240  001012  0E00               	movlw	0
 10241  001014  0100               	movlb	0	; () banked
 10242  001016  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 10243  001018  0E00               	movlw	0
 10244  00101A  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 10245                           
 10246                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 10247  00101C  503C               	movf	_adcSampleMode,w,c
 10248  00101E  A4D8               	btfss	status,2,c
 10249  001020  D072               	goto	l108
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;AdcApp.c: 64: {
 10253                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 10254  001022  0E00               	movlw	0
 10255  001024  6FBC               	movwf	AdcConvert@idx& (0+255),b
 10256  001026                     l6946:
 10257                           
 10258                           ; BSR set to: 0
 10259  001026  0E06               	movlw	6
 10260  001028  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 10261  00102A  D001               	goto	l109
 10262  00102C  0012               	return	
 10263  00102E                     l109:
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;AdcApp.c: 66: {
 10267                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 10268                           
 10269                           ; BSR set to: 0
 10270  00102E  51BC               	movf	AdcConvert@idx& (0+255),w,b
 10271  001030  0D01               	mullw	1
 10272  001032  0E31               	movlw	low _channelArr
 10273  001034  24F3               	addwf	prodl,w,c
 10274  001036  6EF6               	movwf	tblptrl,c
 10275  001038  0E06               	movlw	high _channelArr
 10276  00103A  20F4               	addwfc	prodh,w,c
 10277  00103C  6EF7               	movwf	tblptrh,c
 10278  00103E                     	if	0	;There are less than 3 active tblptr bytes
 10279  00103E                     	endif
 10280  00103E  0008               	tblrd		*
 10281  001040  50F5               	movf	tablat,w,c
 10282  001042  EC61  F017         	call	_ADC_GetConversion
 10283  001046  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 10284  00104A  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 10285                           
 10286                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10287  00104E  0E00               	movlw	0
 10288  001050  0100               	movlb	0	; () banked
 10289  001052  6FA3               	movwf	pow@y& (0+255),b
 10290  001054  0E20               	movlw	32
 10291  001056  6FA4               	movwf	(pow@y+1)& (0+255),b
 10292  001058  0E41               	movlw	65
 10293  00105A  6FA5               	movwf	(pow@y+2)& (0+255),b
 10294  00105C  0E00               	movlw	0
 10295  00105E  6FA0               	movwf	pow@x& (0+255),b
 10296  001060  0E00               	movlw	0
 10297  001062  6FA1               	movwf	(pow@x+1)& (0+255),b
 10298  001064  0E40               	movlw	64
 10299  001066  6FA2               	movwf	(pow@x+2)& (0+255),b
 10300  001068  ECB9  F009         	call	_pow	;wreg free
 10301  00106C  C0A0  F0B7         	movff	?_pow,_AdcConvert$3070
 10302  001070  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3070+1
 10303  001074  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3070+2
 10304                           
 10305                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10306  001078  0EC0               	movlw	192
 10307  00107A  6E2C               	movwf	___ftmul@f2,c
 10308  00107C  0E50               	movlw	80
 10309  00107E  6E2D               	movwf	___ftmul@f2+1,c
 10310  001080  0E45               	movlw	69
 10311  001082  6E2E               	movwf	___ftmul@f2+2,c
 10312  001084  C0B7  F06C         	movff	_AdcConvert$3070,___ftdiv@f2
 10313  001088  C0B8  F06D         	movff	_AdcConvert$3070+1,___ftdiv@f2+1
 10314  00108C  C0B9  F06E         	movff	_AdcConvert$3070+2,___ftdiv@f2+2
 10315  001090  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 10316  001094  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 10317  001098  EC18  F018         	call	___lwtoft	;wreg free
 10318  00109C  C020  F069         	movff	?___lwtoft,___ftdiv@f1
 10319  0010A0  C021  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 10320  0010A4  C022  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 10321  0010A8  EC10  F00D         	call	___ftdiv	;wreg free
 10322  0010AC  C069  F029         	movff	?___ftdiv,___ftmul@f1
 10323  0010B0  C06A  F02A         	movff	?___ftdiv+1,___ftmul@f1+1
 10324  0010B4  C06B  F02B         	movff	?___ftdiv+2,___ftmul@f1+2
 10325  0010B8  EC95  F00C         	call	___ftmul	;wreg free
 10326  0010BC  C029  F078         	movff	?___ftmul,___fttol@f1
 10327  0010C0  C02A  F079         	movff	?___ftmul+1,___fttol@f1+1
 10328  0010C4  C02B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 10329  0010C8  EC19  F00C         	call	___fttol	;wreg free
 10330  0010CC  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 10331  0010D0  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 10332                           
 10333                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 10334  0010D4  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 10335  0010D8  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 10336  0010DC  0100               	movlb	0	; () banked
 10337  0010DE  29BC               	incf	AdcConvert@idx& (0+255),w,b
 10338  0010E0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 10339  0010E2  EC9C  F00B         	call	_FlashSampleWrite	;wreg free
 10340                           
 10341                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 10342  0010E6  0E03               	movlw	3
 10343  0010E8  0100               	movlb	0	; () banked
 10344  0010EA  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 10345  0010EC  0E8A               	movlw	138
 10346  0010EE  6FB1               	movwf	??_AdcConvert& (0+255),b
 10347  0010F0  0E55               	movlw	85
 10348  0010F2                     u6637:
 10349  0010F2  2EE8               	decfsz	wreg,f,c
 10350  0010F4  D7FE               	bra	u6637
 10351  0010F6  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 10352  0010F8  D7FC               	bra	u6637
 10353  0010FA  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 10354  0010FC  D7FA               	bra	u6637
 10355  0010FE  D000               	nop2	
 10356  001100  0100               	movlb	0	; () banked
 10357  001102  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 10358  001104  D790               	goto	l6946
 10359  001106                     l108:
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 10363                           
 10364                           ; BSR set to: 0
 10365  001106  043C               	decf	_adcSampleMode,w,c
 10366  001108  A4D8               	btfss	status,2,c
 10367  00110A  0012               	return	
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;AdcApp.c: 74: {
 10371                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 10372  00110C  51E6               	movf	_channel& (0+255),w,b
 10373  00110E  0D01               	mullw	1
 10374  001110  0E31               	movlw	low _channelArr
 10375  001112  24F3               	addwf	prodl,w,c
 10376  001114  6EF6               	movwf	tblptrl,c
 10377  001116  0E06               	movlw	high _channelArr
 10378  001118  20F4               	addwfc	prodh,w,c
 10379  00111A  6EF7               	movwf	tblptrh,c
 10380  00111C                     	if	0	;There are less than 3 active tblptr bytes
 10381  00111C                     	endif
 10382  00111C  0008               	tblrd		*
 10383  00111E  50F5               	movf	tablat,w,c
 10384  001120  EC61  F017         	call	_ADC_GetConversion
 10385  001124  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_324
 10386  001128  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_324+1
 10387                           
 10388                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10389  00112C  0E00               	movlw	0
 10390  00112E  0100               	movlb	0	; () banked
 10391  001130  6FA3               	movwf	pow@y& (0+255),b
 10392  001132  0E20               	movlw	32
 10393  001134  6FA4               	movwf	(pow@y+1)& (0+255),b
 10394  001136  0E41               	movlw	65
 10395  001138  6FA5               	movwf	(pow@y+2)& (0+255),b
 10396  00113A  0E00               	movlw	0
 10397  00113C  6FA0               	movwf	pow@x& (0+255),b
 10398  00113E  0E00               	movlw	0
 10399  001140  6FA1               	movwf	(pow@x+1)& (0+255),b
 10400  001142  0E40               	movlw	64
 10401  001144  6FA2               	movwf	(pow@x+2)& (0+255),b
 10402  001146  ECB9  F009         	call	_pow	;wreg free
 10403  00114A  C0A0  F0B7         	movff	?_pow,_AdcConvert$3070
 10404  00114E  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3070+1
 10405  001152  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3070+2
 10406                           
 10407                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 10408  001156  0EC0               	movlw	192
 10409  001158  6E2C               	movwf	___ftmul@f2,c
 10410  00115A  0E50               	movlw	80
 10411  00115C  6E2D               	movwf	___ftmul@f2+1,c
 10412  00115E  0E45               	movlw	69
 10413  001160  6E2E               	movwf	___ftmul@f2+2,c
 10414  001162  C0B7  F06C         	movff	_AdcConvert$3070,___ftdiv@f2
 10415  001166  C0B8  F06D         	movff	_AdcConvert$3070+1,___ftdiv@f2+1
 10416  00116A  C0B9  F06E         	movff	_AdcConvert$3070+2,___ftdiv@f2+2
 10417  00116E  C0B5  F020         	movff	AdcConvert@_adcResult_324,___lwtoft@c
 10418  001172  C0B6  F021         	movff	AdcConvert@_adcResult_324+1,___lwtoft@c+1
 10419  001176  EC18  F018         	call	___lwtoft	;wreg free
 10420  00117A  C020  F069         	movff	?___lwtoft,___ftdiv@f1
 10421  00117E  C021  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 10422  001182  C022  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 10423  001186  EC10  F00D         	call	___ftdiv	;wreg free
 10424  00118A  C069  F029         	movff	?___ftdiv,___ftmul@f1
 10425  00118E  C06A  F02A         	movff	?___ftdiv+1,___ftmul@f1+1
 10426  001192  C06B  F02B         	movff	?___ftdiv+2,___ftmul@f1+2
 10427  001196  EC95  F00C         	call	___ftmul	;wreg free
 10428  00119A  C029  F078         	movff	?___ftmul,___fttol@f1
 10429  00119E  C02A  F079         	movff	?___ftmul+1,___fttol@f1+1
 10430  0011A2  C02B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 10431  0011A6  EC19  F00C         	call	___fttol	;wreg free
 10432  0011AA  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 10433  0011AE  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 10434                           
 10435                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 10436  0011B2  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 10437  0011B6  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 10438  0011BA  0E01               	movlw	1
 10439  0011BC  6E2F               	movwf	FlashSampleWrite@channelNum,c
 10440  0011BE  EC9C  F00B         	call	_FlashSampleWrite	;wreg free
 10441  0011C2  0012               	return	
 10442  0011C4                     __end_of_AdcConvert:
 10443                           	opt stack 0
 10444                           tosu	equ	0xFFF
 10445                           tosh	equ	0xFFE
 10446                           tosl	equ	0xFFD
 10447                           pclath	equ	0xFFA
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon2	equ	0xFF1
 10456                           postinc0	equ	0xFEE
 10457                           wreg	equ	0xFE8
 10458                           indf1	equ	0xFE7
 10459                           postdec1	equ	0xFE5
 10460                           fsr1h	equ	0xFE2
 10461                           fsr1l	equ	0xFE1
 10462                           indf2	equ	0xFDF
 10463                           postinc2	equ	0xFDE
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function _pow *****************
 10469 ;; Defined at:
 10470 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;  x               3   64[BANK0 ] void 
 10473 ;;  y               3   67[BANK0 ] void 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  yi              4   77[BANK0 ] unsigned long 
 10476 ;;  sign            1   76[BANK0 ] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;                  3   64[BANK0 ] unsigned char 
 10479 ;; Registers used:
 10480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10486 ;;      Params:         0       6       0       0       0       0       0
 10487 ;;      Locals:         0      11       0       0       0       0       0
 10488 ;;      Temps:          0       0       0       0       0       0       0
 10489 ;;      Totals:         0      17       0       0       0       0       0
 10490 ;;Total ram usage:       17 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    7
 10493 ;; This function calls:
 10494 ;;		___ftge
 10495 ;;		___ftmul
 10496 ;;		___ftneg
 10497 ;;		___fttol
 10498 ;;		___lltoft
 10499 ;;		_exp
 10500 ;;		_log
 10501 ;; This function is called by:
 10502 ;;		_AdcConvert
 10503 ;;		_DacSetValue
 10504 ;;		_UpdateTxFreq
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text73
 10509  001372                     __ptext73:
 10510                           	opt stack 0
 10511  001372                     _pow:
 10512                           	opt stack 20
 10513                           
 10514                           ;incstack = 0
 10515  001372  0E00               	movlw	0
 10516  001374  0100               	movlb	0	; () banked
 10517  001376  6FAC               	movwf	pow@sign& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520  001378  51A0               	movf	pow@x& (0+255),w,b
 10521  00137A  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 10522  00137C  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 10523  00137E  A4D8               	btfss	status,2,c
 10524  001380  D01D               	goto	l1741
 10525                           
 10526                           ; BSR set to: 0
 10527  001382  0E00               	movlw	0
 10528  001384  6E18               	movwf	___ftge@ff1,c
 10529  001386  0E00               	movlw	0
 10530  001388  6E19               	movwf	___ftge@ff1+1,c
 10531  00138A  0E00               	movlw	0
 10532  00138C  6E1A               	movwf	___ftge@ff1+2,c
 10533  00138E  C0A3  F01B         	movff	pow@y,___ftge@ff2
 10534  001392  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 10535  001396  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 10536  00139A  EC79  F011         	call	___ftge	;wreg free
 10537  00139E  A0D8               	btfss	status,0,c
 10538  0013A0  D005               	goto	l1742
 10539  0013A2  0E00               	movlw	0
 10540  0013A4  0100               	movlb	0	; () banked
 10541  0013A6  6FD8               	movwf	(_errno+1)& (0+255),b
 10542  0013A8  0E21               	movlw	33
 10543  0013AA  6FD7               	movwf	_errno& (0+255),b
 10544  0013AC                     l1742:
 10545  0013AC  0E00               	movlw	0
 10546  0013AE  0100               	movlb	0	; () banked
 10547  0013B0  6FA0               	movwf	?_pow& (0+255),b
 10548  0013B2  0E00               	movlw	0
 10549  0013B4  6FA1               	movwf	(?_pow+1)& (0+255),b
 10550  0013B6  0E00               	movlw	0
 10551  0013B8  6FA2               	movwf	(?_pow+2)& (0+255),b
 10552                           
 10553                           ; BSR set to: 0
 10554  0013BA  0012               	return	
 10555  0013BC                     l1741:
 10556                           
 10557                           ; BSR set to: 0
 10558                           
 10559                           ; BSR set to: 0
 10560  0013BC  51A3               	movf	pow@y& (0+255),w,b
 10561  0013BE  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 10562  0013C0  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 10563  0013C2  A4D8               	btfss	status,2,c
 10564  0013C4  D007               	goto	l1744
 10565                           
 10566                           ; BSR set to: 0
 10567  0013C6  0E00               	movlw	0
 10568  0013C8  6FA0               	movwf	?_pow& (0+255),b
 10569  0013CA  0E80               	movlw	128
 10570  0013CC  6FA1               	movwf	(?_pow+1)& (0+255),b
 10571  0013CE  0E3F               	movlw	63
 10572  0013D0  6FA2               	movwf	(?_pow+2)& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575  0013D2  0012               	return	
 10576  0013D4                     l1744:
 10577                           
 10578                           ; BSR set to: 0
 10579                           
 10580                           ; BSR set to: 0
 10581  0013D4  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 10582  0013D6  D041               	goto	l1745
 10583                           
 10584                           ; BSR set to: 0
 10585  0013D8  C0A3  F078         	movff	pow@y,___fttol@f1
 10586  0013DC  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 10587  0013E0  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 10588  0013E4  EC19  F00C         	call	___fttol	;wreg free
 10589  0013E8  C078  F0AD         	movff	?___fttol,pow@yi
 10590  0013EC  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 10591  0013F0  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 10592  0013F4  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 10593  0013F8  C0AD  F020         	movff	pow@yi,___lltoft@c
 10594  0013FC  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 10595  001400  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 10596  001404  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 10597  001408  ECB0  F013         	call	___lltoft	;wreg free
 10598  00140C  0100               	movlb	0	; () banked
 10599  00140E  51A3               	movf	pow@y& (0+255),w,b
 10600  001410  1820               	xorwf	?___lltoft,w,c
 10601  001412  E107               	bnz	u5480
 10602  001414  51A4               	movf	(pow@y+1)& (0+255),w,b
 10603  001416  1821               	xorwf	?___lltoft+1,w,c
 10604  001418  E104               	bnz	u5480
 10605  00141A  51A5               	movf	(pow@y+2)& (0+255),w,b
 10606  00141C  1822               	xorwf	?___lltoft+2,w,c
 10607  00141E  B4D8               	btfsc	status,2,c
 10608  001420  D00B               	goto	l1746
 10609  001422                     u5480:
 10610                           
 10611                           ; BSR set to: 0
 10612  001422  0E00               	movlw	0
 10613  001424  6FD8               	movwf	(_errno+1)& (0+255),b
 10614  001426  0E21               	movlw	33
 10615  001428  6FD7               	movwf	_errno& (0+255),b
 10616  00142A  0E00               	movlw	0
 10617  00142C  6FA0               	movwf	?_pow& (0+255),b
 10618  00142E  0E00               	movlw	0
 10619  001430  6FA1               	movwf	(?_pow+1)& (0+255),b
 10620  001432  0E00               	movlw	0
 10621  001434  6FA2               	movwf	(?_pow+2)& (0+255),b
 10622                           
 10623                           ; BSR set to: 0
 10624  001436  0012               	return	
 10625  001438                     l1746:
 10626                           
 10627                           ; BSR set to: 0
 10628                           
 10629                           ; BSR set to: 0
 10630  001438  51AD               	movf	pow@yi& (0+255),w,b
 10631  00143A  0B01               	andlw	1
 10632  00143C  6FAC               	movwf	pow@sign& (0+255),b
 10633                           
 10634                           ; BSR set to: 0
 10635  00143E  C0A0  F018         	movff	pow@x,___ftneg@f1
 10636  001442  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 10637  001446  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 10638  00144A  EC06  F018         	call	___ftneg	;wreg free
 10639  00144E  C018  F0A0         	movff	?___ftneg,pow@x
 10640  001452  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 10641  001456  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 10642  00145A                     l1745:
 10643  00145A  C0A0  F07F         	movff	pow@x,log@x
 10644  00145E  C0A1  F080         	movff	pow@x+1,log@x+1
 10645  001462  C0A2  F081         	movff	pow@x+2,log@x+2
 10646  001466  EC0C  F00B         	call	_log	;wreg free
 10647  00146A  C07F  F0A6         	movff	?_log,_pow$3076
 10648  00146E  C080  F0A7         	movff	?_log+1,_pow$3076+1
 10649  001472  C081  F0A8         	movff	?_log+2,_pow$3076+2
 10650  001476  C0A6  F029         	movff	_pow$3076,___ftmul@f1
 10651  00147A  C0A7  F02A         	movff	_pow$3076+1,___ftmul@f1+1
 10652  00147E  C0A8  F02B         	movff	_pow$3076+2,___ftmul@f1+2
 10653  001482  C0A3  F02C         	movff	pow@y,___ftmul@f2
 10654  001486  C0A4  F02D         	movff	pow@y+1,___ftmul@f2+1
 10655  00148A  C0A5  F02E         	movff	pow@y+2,___ftmul@f2+2
 10656  00148E  EC95  F00C         	call	___ftmul	;wreg free
 10657  001492  C029  F0A9         	movff	?___ftmul,_pow$3077
 10658  001496  C02A  F0AA         	movff	?___ftmul+1,_pow$3077+1
 10659  00149A  C02B  F0AB         	movff	?___ftmul+2,_pow$3077+2
 10660  00149E  C0A9  F097         	movff	_pow$3077,exp@x
 10661  0014A2  C0AA  F098         	movff	_pow$3077+1,exp@x+1
 10662  0014A6  C0AB  F099         	movff	_pow$3077+2,exp@x+2
 10663  0014AA  EC11  F007         	call	_exp	;wreg free
 10664  0014AE  C097  F0A0         	movff	?_exp,pow@x
 10665  0014B2  C098  F0A1         	movff	?_exp+1,pow@x+1
 10666  0014B6  C099  F0A2         	movff	?_exp+2,pow@x+2
 10667  0014BA  0100               	movlb	0	; () banked
 10668  0014BC  51AC               	movf	pow@sign& (0+255),w,b
 10669  0014BE  B4D8               	btfsc	status,2,c
 10670  0014C0  D00F               	goto	l1747
 10671                           
 10672                           ; BSR set to: 0
 10673  0014C2  C0A0  F018         	movff	pow@x,___ftneg@f1
 10674  0014C6  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 10675  0014CA  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 10676  0014CE  EC06  F018         	call	___ftneg	;wreg free
 10677  0014D2  C018  F0A0         	movff	?___ftneg,?_pow
 10678  0014D6  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 10679  0014DA  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 10680  0014DE  0012               	return	
 10681  0014E0                     l1747:
 10682                           
 10683                           ; BSR set to: 0
 10684  0014E0  C0A0  F0A0         	movff	pow@x,?_pow
 10685  0014E4  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 10686  0014E8  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 10687  0014EC  0012               	return		;funcret
 10688  0014EE                     __end_of_pow:
 10689                           	opt stack 0
 10690                           tosu	equ	0xFFF
 10691                           tosh	equ	0xFFE
 10692                           tosl	equ	0xFFD
 10693                           pclath	equ	0xFFA
 10694                           tblptru	equ	0xFF8
 10695                           tblptrh	equ	0xFF7
 10696                           tblptrl	equ	0xFF6
 10697                           tablat	equ	0xFF5
 10698                           prodh	equ	0xFF4
 10699                           prodl	equ	0xFF3
 10700                           intcon	equ	0xFF2
 10701                           intcon2	equ	0xFF1
 10702                           postinc0	equ	0xFEE
 10703                           wreg	equ	0xFE8
 10704                           indf1	equ	0xFE7
 10705                           postdec1	equ	0xFE5
 10706                           fsr1h	equ	0xFE2
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           fsr2h	equ	0xFDA
 10711                           fsr2l	equ	0xFD9
 10712                           status	equ	0xFD8
 10713                           
 10714 ;; *************** function _log *****************
 10715 ;; Defined at:
 10716 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;  x               3   31[BANK0 ] unsigned char 
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;  exponent        2   34[BANK0 ] int 
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  3   31[BANK0 ] int 
 10723 ;; Registers used:
 10724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10730 ;;      Params:         0       3       0       0       0       0       0
 10731 ;;      Locals:         0       2       0       0       0       0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0
 10733 ;;      Totals:         0       5       0       0       0       0       0
 10734 ;;Total ram usage:        5 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; Hardware stack levels required when called:    6
 10737 ;; This function calls:
 10738 ;;		___awtoft
 10739 ;;		___ftadd
 10740 ;;		___ftmul
 10741 ;;		_eval_poly
 10742 ;;		_frexp
 10743 ;; This function is called by:
 10744 ;;		_pow
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           	psect	text74
 10749  001618                     __ptext74:
 10750                           	opt stack 0
 10751  001618                     _log:
 10752                           	opt stack 20
 10753                           
 10754                           ;incstack = 0
 10755  001618  0100               	movlb	0	; () banked
 10756  00161A  AF81               	btfss	(log@x+2)& (0+255),7,b
 10757  00161C  D00B               	goto	l1943
 10758                           
 10759                           ; BSR set to: 0
 10760  00161E  0E00               	movlw	0
 10761  001620  6FD8               	movwf	(_errno+1)& (0+255),b
 10762  001622  0E21               	movlw	33
 10763  001624  6FD7               	movwf	_errno& (0+255),b
 10764  001626  0E00               	movlw	0
 10765  001628  6F7F               	movwf	?_log& (0+255),b
 10766  00162A  0E00               	movlw	0
 10767  00162C  6F80               	movwf	(?_log+1)& (0+255),b
 10768  00162E  0E00               	movlw	0
 10769  001630  6F81               	movwf	(?_log+2)& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772  001632  0012               	return	
 10773  001634                     l1943:
 10774                           
 10775                           ; BSR set to: 0
 10776                           
 10777                           ; BSR set to: 0
 10778  001634  517F               	movf	log@x& (0+255),w,b
 10779  001636  1180               	iorwf	(log@x+1)& (0+255),w,b
 10780  001638  1181               	iorwf	(log@x+2)& (0+255),w,b
 10781  00163A  A4D8               	btfss	status,2,c
 10782  00163C  D00B               	goto	l1945
 10783                           
 10784                           ; BSR set to: 0
 10785  00163E  0E00               	movlw	0
 10786  001640  6FD8               	movwf	(_errno+1)& (0+255),b
 10787  001642  0E22               	movlw	34
 10788  001644  6FD7               	movwf	_errno& (0+255),b
 10789  001646  0E00               	movlw	0
 10790  001648  6F7F               	movwf	?_log& (0+255),b
 10791  00164A  0E00               	movlw	0
 10792  00164C  6F80               	movwf	(?_log+1)& (0+255),b
 10793  00164E  0E00               	movlw	0
 10794  001650  6F81               	movwf	(?_log+2)& (0+255),b
 10795                           
 10796                           ; BSR set to: 0
 10797  001652  0012               	return	
 10798  001654                     l1945:
 10799                           
 10800                           ; BSR set to: 0
 10801                           
 10802                           ; BSR set to: 0
 10803  001654  0E00               	movlw	0
 10804  001656  6E2C               	movwf	___ftmul@f2,c
 10805  001658  0E00               	movlw	0
 10806  00165A  6E2D               	movwf	___ftmul@f2+1,c
 10807  00165C  0E40               	movlw	64
 10808  00165E  6E2E               	movwf	___ftmul@f2+2,c
 10809  001660  0E82               	movlw	low log@exponent
 10810  001662  6E1B               	movwf	frexp@eptr,c
 10811  001664  0E00               	movlw	high log@exponent
 10812  001666  6E1C               	movwf	frexp@eptr+1,c
 10813  001668  C07F  F018         	movff	log@x,frexp@value
 10814  00166C  C080  F019         	movff	log@x+1,frexp@value+1
 10815  001670  C081  F01A         	movff	log@x+2,frexp@value+2
 10816  001674  EC31  F011         	call	_frexp	;wreg free
 10817  001678  C018  F029         	movff	?_frexp,___ftmul@f1
 10818  00167C  C019  F02A         	movff	?_frexp+1,___ftmul@f1+1
 10819  001680  C01A  F02B         	movff	?_frexp+2,___ftmul@f1+2
 10820  001684  EC95  F00C         	call	___ftmul	;wreg free
 10821  001688  C029  F069         	movff	?___ftmul,___ftadd@f1
 10822  00168C  C02A  F06A         	movff	?___ftmul+1,___ftadd@f1+1
 10823  001690  C02B  F06B         	movff	?___ftmul+2,___ftadd@f1+2
 10824  001694  0E00               	movlw	0
 10825  001696  0100               	movlb	0	; () banked
 10826  001698  6F6C               	movwf	___ftadd@f2& (0+255),b
 10827  00169A  0E80               	movlw	128
 10828  00169C  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
 10829  00169E  0EBF               	movlw	191
 10830  0016A0  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
 10831  0016A2  ECE2  F008         	call	___ftadd	;wreg free
 10832  0016A6  C069  F07F         	movff	?___ftadd,log@x
 10833  0016AA  C06A  F080         	movff	?___ftadd+1,log@x+1
 10834  0016AE  C06B  F081         	movff	?___ftadd+2,log@x+2
 10835  0016B2  0100               	movlb	0	; () banked
 10836  0016B4  0782               	decf	log@exponent& (0+255),f,b
 10837  0016B6  A0D8               	btfss	status,0,c
 10838  0016B8  0783               	decf	(log@exponent+1)& (0+255),f,b
 10839                           
 10840                           ; BSR set to: 0
 10841  0016BA  C07F  F075         	movff	log@x,eval_poly@x
 10842  0016BE  C080  F076         	movff	log@x+1,eval_poly@x+1
 10843  0016C2  C081  F077         	movff	log@x+2,eval_poly@x+2
 10844  0016C6  0E56               	movlw	low log@coeff
 10845  0016C8  6F78               	movwf	eval_poly@d& (0+255),b
 10846  0016CA  0E06               	movlw	high log@coeff
 10847  0016CC  6F79               	movwf	(eval_poly@d+1)& (0+255),b
 10848  0016CE  0E00               	movlw	0
 10849  0016D0  6F7B               	movwf	(eval_poly@n+1)& (0+255),b
 10850  0016D2  0E08               	movlw	8
 10851  0016D4  6F7A               	movwf	eval_poly@n& (0+255),b
 10852  0016D6  EC67  F00E         	call	_eval_poly	;wreg free
 10853  0016DA  C075  F07F         	movff	?_eval_poly,log@x
 10854  0016DE  C076  F080         	movff	?_eval_poly+1,log@x+1
 10855  0016E2  C077  F081         	movff	?_eval_poly+2,log@x+2
 10856  0016E6  0E72               	movlw	114
 10857  0016E8  6E2C               	movwf	___ftmul@f2,c
 10858  0016EA  0E31               	movlw	49
 10859  0016EC  6E2D               	movwf	___ftmul@f2+1,c
 10860  0016EE  0E3F               	movlw	63
 10861  0016F0  6E2E               	movwf	___ftmul@f2+2,c
 10862  0016F2  C082  F020         	movff	log@exponent,___awtoft@c
 10863  0016F6  C083  F021         	movff	log@exponent+1,___awtoft@c+1
 10864  0016FA  EC3E  F016         	call	___awtoft	;wreg free
 10865  0016FE  C020  F029         	movff	?___awtoft,___ftmul@f1
 10866  001702  C021  F02A         	movff	?___awtoft+1,___ftmul@f1+1
 10867  001706  C022  F02B         	movff	?___awtoft+2,___ftmul@f1+2
 10868  00170A  EC95  F00C         	call	___ftmul	;wreg free
 10869  00170E  C029  F069         	movff	?___ftmul,___ftadd@f1
 10870  001712  C02A  F06A         	movff	?___ftmul+1,___ftadd@f1+1
 10871  001716  C02B  F06B         	movff	?___ftmul+2,___ftadd@f1+2
 10872  00171A  C07F  F06C         	movff	log@x,___ftadd@f2
 10873  00171E  C080  F06D         	movff	log@x+1,___ftadd@f2+1
 10874  001722  C081  F06E         	movff	log@x+2,___ftadd@f2+2
 10875  001726  ECE2  F008         	call	___ftadd	;wreg free
 10876  00172A  C069  F07F         	movff	?___ftadd,?_log
 10877  00172E  C06A  F080         	movff	?___ftadd+1,?_log+1
 10878  001732  C06B  F081         	movff	?___ftadd+2,?_log+2
 10879  001736  0012               	return	
 10880  001738                     __end_of_log:
 10881                           	opt stack 0
 10882                           tosu	equ	0xFFF
 10883                           tosh	equ	0xFFE
 10884                           tosl	equ	0xFFD
 10885                           pclath	equ	0xFFA
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           prodh	equ	0xFF4
 10891                           prodl	equ	0xFF3
 10892                           intcon	equ	0xFF2
 10893                           intcon2	equ	0xFF1
 10894                           postinc0	equ	0xFEE
 10895                           wreg	equ	0xFE8
 10896                           indf1	equ	0xFE7
 10897                           postdec1	equ	0xFE5
 10898                           fsr1h	equ	0xFE2
 10899                           fsr1l	equ	0xFE1
 10900                           indf2	equ	0xFDF
 10901                           postinc2	equ	0xFDE
 10902                           fsr2h	equ	0xFDA
 10903                           fsr2l	equ	0xFD9
 10904                           status	equ	0xFD8
 10905                           
 10906 ;; *************** function _exp *****************
 10907 ;; Defined at:
 10908 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;  x               3   55[BANK0 ] int 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  exponent        2   61[BANK0 ] int 
 10913 ;;  sign            1   63[BANK0 ] unsigned char 
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  3   55[BANK0 ] unsigned char 
 10916 ;; Registers used:
 10917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10923 ;;      Params:         0       3       0       0       0       0       0
 10924 ;;      Locals:         0       6       0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0
 10926 ;;      Totals:         0       9       0       0       0       0       0
 10927 ;;Total ram usage:        9 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    6
 10930 ;; This function calls:
 10931 ;;		___awtoft
 10932 ;;		___ftdiv
 10933 ;;		___ftge
 10934 ;;		___ftmul
 10935 ;;		___ftneg
 10936 ;;		___ftsub
 10937 ;;		___fttol
 10938 ;;		_eval_poly
 10939 ;;		_floor
 10940 ;;		_ldexp
 10941 ;; This function is called by:
 10942 ;;		_pow
 10943 ;; This function uses a non-reentrant model
 10944 ;;
 10945                           
 10946                           	psect	text75
 10947  000E22                     __ptext75:
 10948                           	opt stack 0
 10949  000E22                     _exp:
 10950                           	opt stack 20
 10951                           
 10952                           ;incstack = 0
 10953  000E22  0100               	movlb	0	; () banked
 10954  000E24  5197               	movf	exp@x& (0+255),w,b
 10955  000E26  1198               	iorwf	(exp@x+1)& (0+255),w,b
 10956  000E28  1199               	iorwf	(exp@x+2)& (0+255),w,b
 10957  000E2A  A4D8               	btfss	status,2,c
 10958  000E2C  D007               	goto	l1901
 10959                           
 10960                           ; BSR set to: 0
 10961  000E2E  0E00               	movlw	0
 10962  000E30  6F97               	movwf	?_exp& (0+255),b
 10963  000E32  0E80               	movlw	128
 10964  000E34  6F98               	movwf	(?_exp+1)& (0+255),b
 10965  000E36  0E3F               	movlw	63
 10966  000E38  6F99               	movwf	(?_exp+2)& (0+255),b
 10967                           
 10968                           ; BSR set to: 0
 10969  000E3A  0012               	return	
 10970  000E3C                     l1901:
 10971                           
 10972                           ; BSR set to: 0
 10973                           
 10974                           ; BSR set to: 0
 10975  000E3C  0E72               	movlw	114
 10976  000E3E  6E18               	movwf	___ftge@ff1,c
 10977  000E40  0E31               	movlw	49
 10978  000E42  6E19               	movwf	___ftge@ff1+1,c
 10979  000E44  0E44               	movlw	68
 10980  000E46  6E1A               	movwf	___ftge@ff1+2,c
 10981  000E48  C097  F01B         	movff	exp@x,___ftge@ff2
 10982  000E4C  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 10983  000E50  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 10984  000E54  EC79  F011         	call	___ftge	;wreg free
 10985  000E58  B0D8               	btfsc	status,0,c
 10986  000E5A  D00C               	goto	l1903
 10987  000E5C  0E00               	movlw	0
 10988  000E5E  0100               	movlb	0	; () banked
 10989  000E60  6FD8               	movwf	(_errno+1)& (0+255),b
 10990  000E62  0E22               	movlw	34
 10991  000E64  6FD7               	movwf	_errno& (0+255),b
 10992  000E66  0EFF               	movlw	255
 10993  000E68  6F97               	movwf	?_exp& (0+255),b
 10994  000E6A  0E7F               	movlw	127
 10995  000E6C  6F98               	movwf	(?_exp+1)& (0+255),b
 10996  000E6E  0E7F               	movlw	127
 10997  000E70  6F99               	movwf	(?_exp+2)& (0+255),b
 10998                           
 10999                           ; BSR set to: 0
 11000  000E72  0012               	return	
 11001  000E74                     l1903:
 11002                           
 11003                           ; BSR set to: 0
 11004  000E74  C097  F018         	movff	exp@x,___ftge@ff1
 11005  000E78  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 11006  000E7C  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 11007  000E80  0E49               	movlw	73
 11008  000E82  6E1B               	movwf	___ftge@ff2,c
 11009  000E84  0E3A               	movlw	58
 11010  000E86  6E1C               	movwf	___ftge@ff2+1,c
 11011  000E88  0EC4               	movlw	196
 11012  000E8A  6E1D               	movwf	___ftge@ff2+2,c
 11013  000E8C  EC79  F011         	call	___ftge	;wreg free
 11014  000E90  B0D8               	btfsc	status,0,c
 11015  000E92  D00C               	goto	l1904
 11016  000E94  0E00               	movlw	0
 11017  000E96  0100               	movlb	0	; () banked
 11018  000E98  6FD8               	movwf	(_errno+1)& (0+255),b
 11019  000E9A  0E22               	movlw	34
 11020  000E9C  6FD7               	movwf	_errno& (0+255),b
 11021  000E9E  0E00               	movlw	0
 11022  000EA0  6F97               	movwf	?_exp& (0+255),b
 11023  000EA2  0E00               	movlw	0
 11024  000EA4  6F98               	movwf	(?_exp+1)& (0+255),b
 11025  000EA6  0E00               	movlw	0
 11026  000EA8  6F99               	movwf	(?_exp+2)& (0+255),b
 11027                           
 11028                           ; BSR set to: 0
 11029  000EAA  0012               	return	
 11030  000EAC                     l1904:
 11031                           
 11032                           ; BSR set to: 0
 11033  000EAC  0100               	movlb	0	; () banked
 11034  000EAE  AF99               	btfss	(exp@x+2)& (0+255),7,b
 11035  000EB0  D002               	goto	u5390
 11036  000EB2  0E01               	movlw	1
 11037  000EB4  D001               	goto	u5400
 11038  000EB6                     u5390:
 11039  000EB6  0E00               	movlw	0
 11040  000EB8                     u5400:
 11041  000EB8  6F9F               	movwf	exp@sign& (0+255),b
 11042                           
 11043                           ; BSR set to: 0
 11044  000EBA  519F               	movf	exp@sign& (0+255),w,b
 11045  000EBC  B4D8               	btfsc	status,2,c
 11046  000EBE  D00E               	goto	l1905
 11047                           
 11048                           ; BSR set to: 0
 11049  000EC0  C097  F018         	movff	exp@x,___ftneg@f1
 11050  000EC4  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 11051  000EC8  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 11052  000ECC  EC06  F018         	call	___ftneg	;wreg free
 11053  000ED0  C018  F097         	movff	?___ftneg,exp@x
 11054  000ED4  C019  F098         	movff	?___ftneg+1,exp@x+1
 11055  000ED8  C01A  F099         	movff	?___ftneg+2,exp@x+2
 11056  000EDC                     l1905:
 11057  000EDC  C097  F029         	movff	exp@x,___ftmul@f1
 11058  000EE0  C098  F02A         	movff	exp@x+1,___ftmul@f1+1
 11059  000EE4  C099  F02B         	movff	exp@x+2,___ftmul@f1+2
 11060  000EE8  0EAA               	movlw	170
 11061  000EEA  6E2C               	movwf	___ftmul@f2,c
 11062  000EEC  0EB8               	movlw	184
 11063  000EEE  6E2D               	movwf	___ftmul@f2+1,c
 11064  000EF0  0E3F               	movlw	63
 11065  000EF2  6E2E               	movwf	___ftmul@f2+2,c
 11066  000EF4  EC95  F00C         	call	___ftmul	;wreg free
 11067  000EF8  C029  F097         	movff	?___ftmul,exp@x
 11068  000EFC  C02A  F098         	movff	?___ftmul+1,exp@x+1
 11069  000F00  C02B  F099         	movff	?___ftmul+2,exp@x+2
 11070  000F04  C097  F08F         	movff	exp@x,floor@x
 11071  000F08  C098  F090         	movff	exp@x+1,floor@x+1
 11072  000F0C  C099  F091         	movff	exp@x+2,floor@x+2
 11073  000F10  ECF6  F00D         	call	_floor	;wreg free
 11074  000F14  C08F  F09A         	movff	?_floor,_exp$3078
 11075  000F18  C090  F09B         	movff	?_floor+1,_exp$3078+1
 11076  000F1C  C091  F09C         	movff	?_floor+2,_exp$3078+2
 11077  000F20  C09A  F078         	movff	_exp$3078,___fttol@f1
 11078  000F24  C09B  F079         	movff	_exp$3078+1,___fttol@f1+1
 11079  000F28  C09C  F07A         	movff	_exp$3078+2,___fttol@f1+2
 11080  000F2C  EC19  F00C         	call	___fttol	;wreg free
 11081  000F30  C078  F09D         	movff	?___fttol,exp@exponent
 11082  000F34  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 11083  000F38  C097  F075         	movff	exp@x,___ftsub@f1
 11084  000F3C  C098  F076         	movff	exp@x+1,___ftsub@f1+1
 11085  000F40  C099  F077         	movff	exp@x+2,___ftsub@f1+2
 11086  000F44  C09D  F020         	movff	exp@exponent,___awtoft@c
 11087  000F48  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 11088  000F4C  EC3E  F016         	call	___awtoft	;wreg free
 11089  000F50  C020  F078         	movff	?___awtoft,___ftsub@f2
 11090  000F54  C021  F079         	movff	?___awtoft+1,___ftsub@f2+1
 11091  000F58  C022  F07A         	movff	?___awtoft+2,___ftsub@f2+2
 11092  000F5C  ECC0  F015         	call	___ftsub	;wreg free
 11093  000F60  C075  F097         	movff	?___ftsub,exp@x
 11094  000F64  C076  F098         	movff	?___ftsub+1,exp@x+1
 11095  000F68  C077  F099         	movff	?___ftsub+2,exp@x+2
 11096  000F6C  C097  F075         	movff	exp@x,eval_poly@x
 11097  000F70  C098  F076         	movff	exp@x+1,eval_poly@x+1
 11098  000F74  C099  F077         	movff	exp@x+2,eval_poly@x+2
 11099  000F78  0E38               	movlw	low exp@coeff
 11100  000F7A  0100               	movlb	0	; () banked
 11101  000F7C  6F78               	movwf	eval_poly@d& (0+255),b
 11102  000F7E  0E06               	movlw	high exp@coeff
 11103  000F80  6F79               	movwf	(eval_poly@d+1)& (0+255),b
 11104  000F82  0E00               	movlw	0
 11105  000F84  6F7B               	movwf	(eval_poly@n+1)& (0+255),b
 11106  000F86  0E09               	movlw	9
 11107  000F88  6F7A               	movwf	eval_poly@n& (0+255),b
 11108  000F8A  EC67  F00E         	call	_eval_poly	;wreg free
 11109  000F8E  C075  F07F         	movff	?_eval_poly,ldexp@value
 11110  000F92  C076  F080         	movff	?_eval_poly+1,ldexp@value+1
 11111  000F96  C077  F081         	movff	?_eval_poly+2,ldexp@value+2
 11112  000F9A  C09D  F082         	movff	exp@exponent,ldexp@newexp
 11113  000F9E  C09E  F083         	movff	exp@exponent+1,ldexp@newexp+1
 11114  000FA2  ECD2  F00E         	call	_ldexp	;wreg free
 11115  000FA6  C07F  F097         	movff	?_ldexp,exp@x
 11116  000FAA  C080  F098         	movff	?_ldexp+1,exp@x+1
 11117  000FAE  C081  F099         	movff	?_ldexp+2,exp@x+2
 11118  000FB2  0100               	movlb	0	; () banked
 11119  000FB4  519F               	movf	exp@sign& (0+255),w,b
 11120  000FB6  B4D8               	btfsc	status,2,c
 11121  000FB8  D025               	goto	l1906
 11122                           
 11123                           ; BSR set to: 0
 11124  000FBA  2997               	incf	exp@x& (0+255),w,b
 11125  000FBC  E10E               	bnz	l6306
 11126  000FBE  0E7F               	movlw	127
 11127  000FC0  1998               	xorwf	(exp@x+1)& (0+255),w,b
 11128  000FC2  E10B               	bnz	l6306
 11129  000FC4  0E7F               	movlw	127
 11130  000FC6  1999               	xorwf	(exp@x+2)& (0+255),w,b
 11131  000FC8  A4D8               	btfss	status,2,c
 11132  000FCA  D007               	goto	l1907
 11133                           
 11134                           ; BSR set to: 0
 11135  000FCC  0E00               	movlw	0
 11136  000FCE  6F97               	movwf	?_exp& (0+255),b
 11137  000FD0  0E00               	movlw	0
 11138  000FD2  6F98               	movwf	(?_exp+1)& (0+255),b
 11139  000FD4  0E00               	movlw	0
 11140  000FD6  6F99               	movwf	(?_exp+2)& (0+255),b
 11141                           
 11142                           ; BSR set to: 0
 11143  000FD8  0012               	return	
 11144  000FDA                     l1907:
 11145  000FDA                     l6306:
 11146                           
 11147                           ; BSR set to: 0
 11148  000FDA  0E00               	movlw	0
 11149  000FDC  6F69               	movwf	___ftdiv@f1& (0+255),b
 11150  000FDE  0E80               	movlw	128
 11151  000FE0  6F6A               	movwf	(___ftdiv@f1+1)& (0+255),b
 11152  000FE2  0E3F               	movlw	63
 11153  000FE4  6F6B               	movwf	(___ftdiv@f1+2)& (0+255),b
 11154  000FE6  C097  F06C         	movff	exp@x,___ftdiv@f2
 11155  000FEA  C098  F06D         	movff	exp@x+1,___ftdiv@f2+1
 11156  000FEE  C099  F06E         	movff	exp@x+2,___ftdiv@f2+2
 11157  000FF2  EC10  F00D         	call	___ftdiv	;wreg free
 11158  000FF6  C069  F097         	movff	?___ftdiv,?_exp
 11159  000FFA  C06A  F098         	movff	?___ftdiv+1,?_exp+1
 11160  000FFE  C06B  F099         	movff	?___ftdiv+2,?_exp+2
 11161  001002  0012               	return	
 11162  001004                     l1906:
 11163                           
 11164                           ; BSR set to: 0
 11165  001004  C097  F097         	movff	exp@x,?_exp
 11166  001008  C098  F098         	movff	exp@x+1,?_exp+1
 11167  00100C  C099  F099         	movff	exp@x+2,?_exp+2
 11168  001010  0012               	return		;funcret
 11169  001012                     __end_of_exp:
 11170                           	opt stack 0
 11171                           tosu	equ	0xFFF
 11172                           tosh	equ	0xFFE
 11173                           tosl	equ	0xFFD
 11174                           pclath	equ	0xFFA
 11175                           tblptru	equ	0xFF8
 11176                           tblptrh	equ	0xFF7
 11177                           tblptrl	equ	0xFF6
 11178                           tablat	equ	0xFF5
 11179                           prodh	equ	0xFF4
 11180                           prodl	equ	0xFF3
 11181                           intcon	equ	0xFF2
 11182                           intcon2	equ	0xFF1
 11183                           postinc0	equ	0xFEE
 11184                           wreg	equ	0xFE8
 11185                           indf1	equ	0xFE7
 11186                           postdec1	equ	0xFE5
 11187                           fsr1h	equ	0xFE2
 11188                           fsr1l	equ	0xFE1
 11189                           indf2	equ	0xFDF
 11190                           postinc2	equ	0xFDE
 11191                           fsr2h	equ	0xFDA
 11192                           fsr2l	equ	0xFD9
 11193                           status	equ	0xFD8
 11194                           
 11195 ;; *************** function _ldexp *****************
 11196 ;; Defined at:
 11197 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;  value           3   31[BANK0 ] unsigned char 
 11200 ;;  newexp          2   34[BANK0 ] int 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;		None
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  3   31[BANK0 ] int 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11212 ;;      Params:         0       5       0       0       0       0       0
 11213 ;;      Locals:         0       0       0       0       0       0       0
 11214 ;;      Temps:          0       2       0       0       0       0       0
 11215 ;;      Totals:         0       7       0       0       0       0       0
 11216 ;;Total ram usage:        7 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    3
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_exp
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text76
 11227  001DA4                     __ptext76:
 11228                           	opt stack 0
 11229  001DA4                     _ldexp:
 11230                           	opt stack 22
 11231                           
 11232                           ;incstack = 0
 11233  001DA4  0100               	movlb	0	; () banked
 11234  001DA6  517F               	movf	ldexp@value& (0+255),w,b
 11235  001DA8  1180               	iorwf	(ldexp@value+1)& (0+255),w,b
 11236  001DAA  1181               	iorwf	(ldexp@value+2)& (0+255),w,b
 11237  001DAC  A4D8               	btfss	status,2,c
 11238  001DAE  D007               	goto	l1925
 11239                           
 11240                           ; BSR set to: 0
 11241  001DB0  0E00               	movlw	0
 11242  001DB2  6F7F               	movwf	?_ldexp& (0+255),b
 11243  001DB4  0E00               	movlw	0
 11244  001DB6  6F80               	movwf	(?_ldexp+1)& (0+255),b
 11245  001DB8  0E00               	movlw	0
 11246  001DBA  6F81               	movwf	(?_ldexp+2)& (0+255),b
 11247                           
 11248                           ; BSR set to: 0
 11249  001DBC  0012               	return	
 11250  001DBE                     l1925:
 11251                           
 11252                           ; BSR set to: 0
 11253                           
 11254                           ; BSR set to: 0
 11255  001DBE  5181               	movf	(ldexp@value+2)& (0+255),w,b
 11256  001DC0  0B7F               	andlw	127
 11257  001DC2  6F84               	movwf	??_ldexp& (0+255),b
 11258  001DC4  6B85               	clrf	(??_ldexp+1)& (0+255),b
 11259  001DC6  90D8               	bcf	status,0,c
 11260  001DC8  3784               	rlcf	??_ldexp& (0+255),f,b
 11261  001DCA  3785               	rlcf	(??_ldexp+1)& (0+255),f,b
 11262  001DCC  5184               	movf	??_ldexp& (0+255),w,b
 11263  001DCE  2782               	addwf	ldexp@newexp& (0+255),f,b
 11264  001DD0  5185               	movf	(??_ldexp+1)& (0+255),w,b
 11265  001DD2  2383               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 11266  001DD4  AF80               	btfss	(ldexp@value+1)& (0+255),7,b
 11267  001DD6  D003               	goto	u5230
 11268  001DD8  6B84               	clrf	??_ldexp& (0+255),b
 11269  001DDA  2B84               	incf	??_ldexp& (0+255),f,b
 11270  001DDC  D002               	goto	u5238
 11271  001DDE                     u5230:
 11272  001DDE  0100               	movlb	0	; () banked
 11273  001DE0  6B84               	clrf	??_ldexp& (0+255),b
 11274  001DE2                     u5238:
 11275  001DE2  5184               	movf	??_ldexp& (0+255),w,b
 11276  001DE4  2782               	addwf	ldexp@newexp& (0+255),f,b
 11277  001DE6  0E00               	movlw	0
 11278  001DE8  2383               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 11279  001DEA  AF83               	btfss	(ldexp@newexp+1)& (0+255),7,b
 11280  001DEC  D00B               	goto	l1927
 11281                           
 11282                           ; BSR set to: 0
 11283  001DEE  0E00               	movlw	0
 11284  001DF0  6FD8               	movwf	(_errno+1)& (0+255),b
 11285  001DF2  0E22               	movlw	34
 11286  001DF4  6FD7               	movwf	_errno& (0+255),b
 11287  001DF6  0E00               	movlw	0
 11288  001DF8  6F7F               	movwf	?_ldexp& (0+255),b
 11289  001DFA  0E00               	movlw	0
 11290  001DFC  6F80               	movwf	(?_ldexp+1)& (0+255),b
 11291  001DFE  0E00               	movlw	0
 11292  001E00                     L1:
 11293  001E00  6F81               	movwf	(?_ldexp+2)& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296  001E02  0012               	return	
 11297  001E04                     l1927:
 11298                           
 11299                           ; BSR set to: 0
 11300                           
 11301                           ; BSR set to: 0
 11302  001E04  BF83               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 11303  001E06  D015               	goto	l1929
 11304  001E08  0583               	decf	(ldexp@newexp+1)& (0+255),w,b
 11305  001E0A  A0D8               	btfss	status,0,c
 11306  001E0C  D012               	goto	l1929
 11307                           
 11308                           ; BSR set to: 0
 11309  001E0E  0E00               	movlw	0
 11310  001E10  6FD8               	movwf	(_errno+1)& (0+255),b
 11311  001E12  0E22               	movlw	34
 11312  001E14  6FD7               	movwf	_errno& (0+255),b
 11313                           
 11314                           ; BSR set to: 0
 11315  001E16  AF81               	btfss	(ldexp@value+2)& (0+255),7,b
 11316  001E18  D006               	goto	l1930
 11317                           
 11318                           ; BSR set to: 0
 11319  001E1A  0EFF               	movlw	255
 11320  001E1C  6F7F               	movwf	?_ldexp& (0+255),b
 11321  001E1E  0E7F               	movlw	127
 11322  001E20  6F80               	movwf	(?_ldexp+1)& (0+255),b
 11323  001E22  0EFF               	movlw	255
 11324  001E24  D7ED               	goto	L1
 11325  001E26                     l1930:
 11326                           
 11327                           ; BSR set to: 0
 11328                           
 11329                           ; BSR set to: 0
 11330  001E26  0EFF               	movlw	255
 11331  001E28  6F7F               	movwf	?_ldexp& (0+255),b
 11332  001E2A  0E7F               	movlw	127
 11333  001E2C  6F80               	movwf	(?_ldexp+1)& (0+255),b
 11334  001E2E  0E7F               	movlw	127
 11335  001E30  D7E7               	goto	L1
 11336  001E32                     l1929:
 11337                           
 11338                           ; BSR set to: 0
 11339                           
 11340                           ; BSR set to: 0
 11341  001E32  3583               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 11342  001E34  3183               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 11343  001E36  6F85               	movwf	(??_ldexp+1)& (0+255),b
 11344  001E38  3182               	rrcf	ldexp@newexp& (0+255),w,b
 11345  001E3A  6F84               	movwf	??_ldexp& (0+255),b
 11346  001E3C  5181               	movf	(ldexp@value+2)& (0+255),w,b
 11347  001E3E  1984               	xorwf	??_ldexp& (0+255),w,b
 11348  001E40  0B80               	andlw	-128
 11349  001E42  1984               	xorwf	??_ldexp& (0+255),w,b
 11350  001E44  6F81               	movwf	(ldexp@value+2)& (0+255),b
 11351  001E46  C082  F084         	movff	ldexp@newexp,??_ldexp
 11352  001E4A  0E01               	movlw	1
 11353  001E4C  1784               	andwf	??_ldexp& (0+255),f,b
 11354  001E4E  3384               	rrcf	??_ldexp& (0+255),f,b
 11355  001E50  3384               	rrcf	??_ldexp& (0+255),f,b
 11356  001E52  5180               	movf	(ldexp@value+1)& (0+255),w,b
 11357  001E54  1984               	xorwf	??_ldexp& (0+255),w,b
 11358  001E56  0B7F               	andlw	-129
 11359  001E58  1984               	xorwf	??_ldexp& (0+255),w,b
 11360  001E5A  6F80               	movwf	(ldexp@value+1)& (0+255),b
 11361                           
 11362                           ; BSR set to: 0
 11363                           
 11364                           ; BSR set to: 0
 11365                           
 11366                           ; BSR set to: 0
 11367  001E5C  C07F  F07F         	movff	ldexp@value,?_ldexp
 11368  001E60  C080  F080         	movff	ldexp@value+1,?_ldexp+1
 11369  001E64  C081  F081         	movff	ldexp@value+2,?_ldexp+2
 11370  001E68  0012               	return	
 11371  001E6A                     __end_of_ldexp:
 11372                           	opt stack 0
 11373                           tosu	equ	0xFFF
 11374                           tosh	equ	0xFFE
 11375                           tosl	equ	0xFFD
 11376                           pclath	equ	0xFFA
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           intcon2	equ	0xFF1
 11385                           postinc0	equ	0xFEE
 11386                           wreg	equ	0xFE8
 11387                           indf1	equ	0xFE7
 11388                           postdec1	equ	0xFE5
 11389                           fsr1h	equ	0xFE2
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           fsr2h	equ	0xFDA
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _floor *****************
 11398 ;; Defined at:
 11399 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;  x               3   47[BANK0 ] int 
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  i               3   50[BANK0 ] int 
 11404 ;;  expon           2   53[BANK0 ] int 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  3   47[BANK0 ] int 
 11407 ;; Registers used:
 11408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11414 ;;      Params:         0       3       0       0       0       0       0
 11415 ;;      Locals:         0       5       0       0       0       0       0
 11416 ;;      Temps:          0       0       0       0       0       0       0
 11417 ;;      Totals:         0       8       0       0       0       0       0
 11418 ;;Total ram usage:        8 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    5
 11421 ;; This function calls:
 11422 ;;		___altoft
 11423 ;;		___ftadd
 11424 ;;		___ftge
 11425 ;;		___fttol
 11426 ;;		_frexp
 11427 ;; This function is called by:
 11428 ;;		_exp
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text77
 11433  001BEC                     __ptext77:
 11434                           	opt stack 0
 11435  001BEC                     _floor:
 11436                           	opt stack 20
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;incstack = 0
 11440  001BEC  C08F  F018         	movff	floor@x,frexp@value
 11441  001BF0  C090  F019         	movff	floor@x+1,frexp@value+1
 11442  001BF4  C091  F01A         	movff	floor@x+2,frexp@value+2
 11443  001BF8  0E95               	movlw	low floor@expon
 11444  001BFA  6E1B               	movwf	frexp@eptr,c
 11445  001BFC  0E00               	movlw	high floor@expon
 11446  001BFE  6E1C               	movwf	frexp@eptr+1,c
 11447  001C00  EC31  F011         	call	_frexp	;wreg free
 11448  001C04  0100               	movlb	0	; () banked
 11449  001C06  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 11450  001C08  D010               	goto	l1912
 11451                           
 11452                           ; BSR set to: 0
 11453  001C0A  AF91               	btfss	(floor@x+2)& (0+255),7,b
 11454  001C0C  D007               	goto	l1913
 11455                           
 11456                           ; BSR set to: 0
 11457  001C0E  0E00               	movlw	0
 11458  001C10  6F8F               	movwf	?_floor& (0+255),b
 11459  001C12  0E80               	movlw	128
 11460  001C14  6F90               	movwf	(?_floor+1)& (0+255),b
 11461  001C16  0EBF               	movlw	191
 11462  001C18  6F91               	movwf	(?_floor+2)& (0+255),b
 11463                           
 11464                           ; BSR set to: 0
 11465  001C1A  0012               	return	
 11466  001C1C                     l1913:
 11467                           
 11468                           ; BSR set to: 0
 11469                           
 11470                           ; BSR set to: 0
 11471  001C1C  0E00               	movlw	0
 11472  001C1E  6F8F               	movwf	?_floor& (0+255),b
 11473  001C20  0E00               	movlw	0
 11474  001C22  6F90               	movwf	(?_floor+1)& (0+255),b
 11475  001C24  0E00               	movlw	0
 11476  001C26  6F91               	movwf	(?_floor+2)& (0+255),b
 11477                           
 11478                           ; BSR set to: 0
 11479  001C28  0012               	return	
 11480  001C2A                     l1912:
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485  001C2A  5196               	movf	(floor@expon+1)& (0+255),w,b
 11486  001C2C  E104               	bnz	u5190
 11487  001C2E  0E15               	movlw	21
 11488  001C30  5D95               	subwf	floor@expon& (0+255),w,b
 11489  001C32  A0D8               	btfss	status,0,c
 11490  001C34  D007               	goto	l1915
 11491  001C36                     u5190:
 11492                           
 11493                           ; BSR set to: 0
 11494  001C36  C08F  F08F         	movff	floor@x,?_floor
 11495  001C3A  C090  F090         	movff	floor@x+1,?_floor+1
 11496  001C3E  C091  F091         	movff	floor@x+2,?_floor+2
 11497  001C42  0012               	return	
 11498  001C44                     l1915:
 11499                           
 11500                           ; BSR set to: 0
 11501                           
 11502                           ; BSR set to: 0
 11503  001C44  C08F  F078         	movff	floor@x,___fttol@f1
 11504  001C48  C090  F079         	movff	floor@x+1,___fttol@f1+1
 11505  001C4C  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 11506  001C50  EC19  F00C         	call	___fttol	;wreg free
 11507  001C54  C078  F087         	movff	?___fttol,___altoft@c
 11508  001C58  C079  F088         	movff	?___fttol+1,___altoft@c+1
 11509  001C5C  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 11510  001C60  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 11511  001C64  EC43  F012         	call	___altoft	;wreg free
 11512  001C68  C087  F092         	movff	?___altoft,floor@i
 11513  001C6C  C088  F093         	movff	?___altoft+1,floor@i+1
 11514  001C70  C089  F094         	movff	?___altoft+2,floor@i+2
 11515  001C74  C08F  F018         	movff	floor@x,___ftge@ff1
 11516  001C78  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 11517  001C7C  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 11518  001C80  C092  F01B         	movff	floor@i,___ftge@ff2
 11519  001C84  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 11520  001C88  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 11521  001C8C  EC79  F011         	call	___ftge	;wreg free
 11522  001C90  B0D8               	btfsc	status,0,c
 11523  001C92  D016               	goto	l1916
 11524  001C94  C092  F069         	movff	floor@i,___ftadd@f1
 11525  001C98  C093  F06A         	movff	floor@i+1,___ftadd@f1+1
 11526  001C9C  C094  F06B         	movff	floor@i+2,___ftadd@f1+2
 11527  001CA0  0E00               	movlw	0
 11528  001CA2  0100               	movlb	0	; () banked
 11529  001CA4  6F6C               	movwf	___ftadd@f2& (0+255),b
 11530  001CA6  0E80               	movlw	128
 11531  001CA8  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
 11532  001CAA  0EBF               	movlw	191
 11533  001CAC  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
 11534  001CAE  ECE2  F008         	call	___ftadd	;wreg free
 11535  001CB2  C069  F08F         	movff	?___ftadd,?_floor
 11536  001CB6  C06A  F090         	movff	?___ftadd+1,?_floor+1
 11537  001CBA  C06B  F091         	movff	?___ftadd+2,?_floor+2
 11538  001CBE  0012               	return	
 11539  001CC0                     l1916:
 11540  001CC0  C092  F08F         	movff	floor@i,?_floor
 11541  001CC4  C093  F090         	movff	floor@i+1,?_floor+1
 11542  001CC8  C094  F091         	movff	floor@i+2,?_floor+2
 11543  001CCC  0012               	return		;funcret
 11544  001CCE                     __end_of_floor:
 11545                           	opt stack 0
 11546                           tosu	equ	0xFFF
 11547                           tosh	equ	0xFFE
 11548                           tosl	equ	0xFFD
 11549                           pclath	equ	0xFFA
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon2	equ	0xFF1
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           indf1	equ	0xFE7
 11561                           postdec1	equ	0xFE5
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           fsr2h	equ	0xFDA
 11567                           fsr2l	equ	0xFD9
 11568                           status	equ	0xFD8
 11569                           
 11570 ;; *************** function _frexp *****************
 11571 ;; Defined at:
 11572 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;  value           3   23[COMRAM] int 
 11575 ;;  eptr            2   26[COMRAM] PTR int 
 11576 ;;		 -> log@exponent(2), floor@expon(2), 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;		None
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  3   23[COMRAM] PTR int 
 11581 ;; Registers used:
 11582 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11588 ;;      Params:         5       0       0       0       0       0       0
 11589 ;;      Locals:         0       0       0       0       0       0       0
 11590 ;;      Temps:          2       0       0       0       0       0       0
 11591 ;;      Totals:         7       0       0       0       0       0       0
 11592 ;;Total ram usage:        7 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    3
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_floor
 11599 ;;		_log
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text78
 11604  002262                     __ptext78:
 11605                           	opt stack 0
 11606  002262                     _frexp:
 11607                           	opt stack 22
 11608                           
 11609                           ;incstack = 0
 11610  002262  5018               	movf	frexp@value,w,c
 11611  002264  1019               	iorwf	frexp@value+1,w,c
 11612  002266  101A               	iorwf	frexp@value+2,w,c
 11613  002268  A4D8               	btfss	status,2,c
 11614  00226A  D00F               	goto	l1921
 11615  00226C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11616  002270  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11617  002274  0E00               	movlw	0
 11618  002276  6EDE               	movwf	postinc2,c
 11619  002278  0E00               	movlw	0
 11620  00227A  6EDD               	movwf	postdec2,c
 11621  00227C  0E00               	movlw	0
 11622  00227E  6E18               	movwf	?_frexp,c
 11623  002280  0E00               	movlw	0
 11624  002282  6E19               	movwf	?_frexp+1,c
 11625  002284  0E00               	movlw	0
 11626  002286  6E1A               	movwf	?_frexp+2,c
 11627  002288  0012               	return	
 11628  00228A                     l1921:
 11629  00228A  501A               	movf	frexp@value+2,w,c
 11630  00228C  0B7F               	andlw	127
 11631  00228E  6E1D               	movwf	??_frexp& (0+255),c
 11632  002290  6A1E               	clrf	(??_frexp+1)& (0+255),c
 11633  002292  90D8               	bcf	status,0,c
 11634  002294  361D               	rlcf	??_frexp,f,c
 11635  002296  361E               	rlcf	??_frexp+1,f,c
 11636  002298  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11637  00229C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11638  0022A0  C01D  FFDE         	movff	??_frexp,postinc2
 11639  0022A4  C01E  FFDD         	movff	??_frexp+1,postdec2
 11640  0022A8  AE19               	btfss	frexp@value+1,7,c
 11641  0022AA  D003               	goto	u5040
 11642  0022AC  6A1D               	clrf	??_frexp& (0+255),c
 11643  0022AE  2A1D               	incf	??_frexp& (0+255),f,c
 11644  0022B0  D001               	goto	u5048
 11645  0022B2                     u5040:
 11646  0022B2  6A1D               	clrf	??_frexp& (0+255),c
 11647  0022B4                     u5048:
 11648  0022B4  501D               	movf	??_frexp,w,c
 11649  0022B6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11650  0022BA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11651  0022BE  12DE               	iorwf	postinc2,f,c
 11652  0022C0  0E00               	movlw	0
 11653  0022C2  12DD               	iorwf	postdec2,f,c
 11654  0022C4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 11655  0022C8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 11656  0022CC  0E82               	movlw	130
 11657  0022CE  26DE               	addwf	postinc2,f,c
 11658  0022D0  0EFF               	movlw	255
 11659  0022D2  22DD               	addwfc	postdec2,f,c
 11660  0022D4  801A               	bsf	frexp@value+2,0,c
 11661  0022D6  821A               	bsf	frexp@value+2,1,c
 11662  0022D8  841A               	bsf	frexp@value+2,2,c
 11663  0022DA  861A               	bsf	frexp@value+2,3,c
 11664  0022DC  881A               	bsf	frexp@value+2,4,c
 11665  0022DE  8A1A               	bsf	frexp@value+2,5,c
 11666  0022E0  9C1A               	bcf	frexp@value+2,6,c
 11667  0022E2  9E19               	bcf	frexp@value+1,7,c
 11668  0022E4  C018  F018         	movff	frexp@value,?_frexp
 11669  0022E8  C019  F019         	movff	frexp@value+1,?_frexp+1
 11670  0022EC  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 11671  0022F0  0012               	return	
 11672  0022F2                     __end_of_frexp:
 11673                           	opt stack 0
 11674                           tosu	equ	0xFFF
 11675                           tosh	equ	0xFFE
 11676                           tosl	equ	0xFFD
 11677                           pclath	equ	0xFFA
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           intcon2	equ	0xFF1
 11686                           postinc0	equ	0xFEE
 11687                           wreg	equ	0xFE8
 11688                           indf1	equ	0xFE7
 11689                           postdec1	equ	0xFE5
 11690                           fsr1h	equ	0xFE2
 11691                           fsr1l	equ	0xFE1
 11692                           indf2	equ	0xFDF
 11693                           postinc2	equ	0xFDE
 11694                           postdec2	equ	0xFDD
 11695                           fsr2h	equ	0xFDA
 11696                           fsr2l	equ	0xFD9
 11697                           status	equ	0xFD8
 11698                           
 11699 ;; *************** function ___fttol *****************
 11700 ;; Defined at:
 11701 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  f1              3   24[BANK0 ] float 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  lval            4   34[BANK0 ] unsigned long 
 11706 ;;  exp1            1   38[BANK0 ] unsigned char 
 11707 ;;  sign1           1   33[BANK0 ] unsigned char 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  4   24[BANK0 ] long 
 11710 ;; Registers used:
 11711 ;;		wreg, status,2, status,0
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11717 ;;      Params:         0       4       0       0       0       0       0
 11718 ;;      Locals:         0       6       0       0       0       0       0
 11719 ;;      Temps:          0       5       0       0       0       0       0
 11720 ;;      Totals:         0      15       0       0       0       0       0
 11721 ;;Total ram usage:       15 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:    3
 11724 ;; This function calls:
 11725 ;;		Nothing
 11726 ;; This function is called by:
 11727 ;;		_AdcConvert
 11728 ;;		_DacSetValue
 11729 ;;		_UpdateTxFreq
 11730 ;;		_pow
 11731 ;;		_exp
 11732 ;;		_floor
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           	psect	text79
 11737  001832                     __ptext79:
 11738                           	opt stack 0
 11739  001832                     ___fttol:
 11740                           	opt stack 21
 11741                           
 11742                           ;incstack = 0
 11743  001832  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 11744  001836  0100               	movlb	0	; () banked
 11745  001838  6B7D               	clrf	(??___fttol+1)& (0+255),b
 11746  00183A  6B7E               	clrf	(??___fttol+2)& (0+255),b
 11747  00183C  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 11748  00183E  377C               	rlcf	??___fttol& (0+255),f,b
 11749  001840  E301               	bnc	u4951
 11750  001842  817D               	bsf	(??___fttol+1)& (0+255),0,b
 11751  001844                     u4951:
 11752  001844  517C               	movf	??___fttol& (0+255),w,b
 11753  001846  6F86               	movwf	___fttol@exp1& (0+255),b
 11754  001848  5186               	movf	___fttol@exp1& (0+255),w,b
 11755  00184A  A4D8               	btfss	status,2,c
 11756  00184C  D009               	goto	l1616
 11757                           
 11758                           ; BSR set to: 0
 11759  00184E  0E00               	movlw	0
 11760  001850  6F78               	movwf	?___fttol& (0+255),b
 11761  001852  0E00               	movlw	0
 11762  001854  6F79               	movwf	(?___fttol+1)& (0+255),b
 11763  001856  0E00               	movlw	0
 11764  001858  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11765  00185A  0E00               	movlw	0
 11766  00185C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11767                           
 11768                           ; BSR set to: 0
 11769  00185E  0012               	return	
 11770  001860                     l1616:
 11771                           
 11772                           ; BSR set to: 0
 11773                           
 11774                           ; BSR set to: 0
 11775  001860  0E17               	movlw	23
 11776  001862  6F7C               	movwf	??___fttol& (0+255),b
 11777  001864  C078  F07D         	movff	___fttol@f1,??___fttol+1
 11778  001868  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 11779  00186C  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 11780  001870  297C               	incf	??___fttol& (0+255),w,b
 11781  001872  6F80               	movwf	(??___fttol+4)& (0+255),b
 11782  001874  D004               	goto	u4970
 11783  001876                     u4975:
 11784  001876  90D8               	bcf	status,0,c
 11785  001878  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 11786  00187A  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 11787  00187C  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 11788  00187E                     u4970:
 11789  00187E  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 11790  001880  D7FA               	goto	u4975
 11791  001882  0100               	movlb	0	; () banked
 11792  001884  517D               	movf	(??___fttol+1)& (0+255),w,b
 11793  001886  6F81               	movwf	___fttol@sign1& (0+255),b
 11794                           
 11795                           ; BSR set to: 0
 11796  001888  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 11797                           
 11798                           ; BSR set to: 0
 11799  00188A  0EFF               	movlw	255
 11800  00188C  1778               	andwf	___fttol@f1& (0+255),f,b
 11801  00188E  0EFF               	movlw	255
 11802  001890  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 11803  001892  0E00               	movlw	0
 11804  001894  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 11805                           
 11806                           ; BSR set to: 0
 11807  001896  5178               	movf	___fttol@f1& (0+255),w,b
 11808  001898  6F82               	movwf	___fttol@lval& (0+255),b
 11809  00189A  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 11810  00189C  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 11811  00189E  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 11812  0018A0  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 11813  0018A2  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 11814                           
 11815                           ; BSR set to: 0
 11816  0018A4  0E8E               	movlw	142
 11817  0018A6  5F86               	subwf	___fttol@exp1& (0+255),f,b
 11818                           
 11819                           ; BSR set to: 0
 11820  0018A8  AF86               	btfss	___fttol@exp1& (0+255),7,b
 11821  0018AA  D016               	goto	l1618
 11822                           
 11823                           ; BSR set to: 0
 11824  0018AC  5186               	movf	___fttol@exp1& (0+255),w,b
 11825  0018AE  0A80               	xorlw	128
 11826  0018B0  0F8F               	addlw	143
 11827  0018B2  B0D8               	btfsc	status,0,c
 11828  0018B4  D009               	goto	l1619
 11829                           
 11830                           ; BSR set to: 0
 11831  0018B6  0E00               	movlw	0
 11832  0018B8  6F78               	movwf	?___fttol& (0+255),b
 11833  0018BA  0E00               	movlw	0
 11834  0018BC  6F79               	movwf	(?___fttol+1)& (0+255),b
 11835  0018BE  0E00               	movlw	0
 11836  0018C0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11837  0018C2  0E00               	movlw	0
 11838  0018C4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841  0018C6  0012               	return	
 11842  0018C8                     l1619:
 11843                           
 11844                           ; BSR set to: 0
 11845                           
 11846                           ; BSR set to: 0
 11847                           
 11848                           ; BSR set to: 0
 11849  0018C8  90D8               	bcf	status,0,c
 11850  0018CA  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 11851  0018CC  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 11852  0018CE  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 11853  0018D0  3382               	rrcf	___fttol@lval& (0+255),f,b
 11854                           
 11855                           ; BSR set to: 0
 11856  0018D2  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 11857  0018D4  D7F9               	goto	l1619
 11858                           
 11859                           ; BSR set to: 0
 11860  0018D6  D015               	goto	u5010
 11861  0018D8                     l1618:
 11862                           
 11863                           ; BSR set to: 0
 11864                           
 11865                           ; BSR set to: 0
 11866  0018D8  0E17               	movlw	23
 11867  0018DA  6586               	cpfsgt	___fttol@exp1& (0+255),b
 11868  0018DC  D00F               	goto	l1624
 11869                           
 11870                           ; BSR set to: 0
 11871  0018DE  0E00               	movlw	0
 11872  0018E0  6F78               	movwf	?___fttol& (0+255),b
 11873  0018E2  0E00               	movlw	0
 11874  0018E4  6F79               	movwf	(?___fttol+1)& (0+255),b
 11875  0018E6  0E00               	movlw	0
 11876  0018E8  6F7A               	movwf	(?___fttol+2)& (0+255),b
 11877  0018EA  0E00               	movlw	0
 11878  0018EC  6F7B               	movwf	(?___fttol+3)& (0+255),b
 11879                           
 11880                           ; BSR set to: 0
 11881  0018EE  0012               	return	
 11882  0018F0                     
 11883                           ; BSR set to: 0
 11884                           
 11885                           ; BSR set to: 0
 11886  0018F0  90D8               	bcf	status,0,c
 11887  0018F2  3782               	rlcf	___fttol@lval& (0+255),f,b
 11888  0018F4  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 11889  0018F6  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 11890  0018F8  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 11891  0018FA  0786               	decf	___fttol@exp1& (0+255),f,b
 11892  0018FC                     l1624:
 11893                           
 11894                           ; BSR set to: 0
 11895                           
 11896                           ; BSR set to: 0
 11897  0018FC  5186               	movf	___fttol@exp1& (0+255),w,b
 11898  0018FE  A4D8               	btfss	status,2,c
 11899  001900  D7F7               	goto	l1625
 11900  001902                     u5010:
 11901                           
 11902                           ; BSR set to: 0
 11903                           
 11904                           ; BSR set to: 0
 11905                           
 11906                           ; BSR set to: 0
 11907  001902  5181               	movf	___fttol@sign1& (0+255),w,b
 11908  001904  B4D8               	btfsc	status,2,c
 11909  001906  D008               	goto	l1627
 11910                           
 11911                           ; BSR set to: 0
 11912  001908  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 11913  00190A  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 11914  00190C  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 11915  00190E  6D82               	negf	___fttol@lval& (0+255),b
 11916  001910  0E00               	movlw	0
 11917  001912  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 11918  001914  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 11919  001916  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 11920  001918                     l1627:
 11921                           
 11922                           ; BSR set to: 0
 11923                           
 11924                           ; BSR set to: 0
 11925  001918  C082  F078         	movff	___fttol@lval,?___fttol
 11926  00191C  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 11927  001920  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 11928  001924  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 11929  001928  0012               	return	
 11930  00192A                     __end_of___fttol:
 11931                           	opt stack 0
 11932                           tosu	equ	0xFFF
 11933                           tosh	equ	0xFFE
 11934                           tosl	equ	0xFFD
 11935                           pclath	equ	0xFFA
 11936                           tblptru	equ	0xFF8
 11937                           tblptrh	equ	0xFF7
 11938                           tblptrl	equ	0xFF6
 11939                           tablat	equ	0xFF5
 11940                           prodh	equ	0xFF4
 11941                           prodl	equ	0xFF3
 11942                           intcon	equ	0xFF2
 11943                           intcon2	equ	0xFF1
 11944                           postinc0	equ	0xFEE
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           postdec1	equ	0xFE5
 11948                           fsr1h	equ	0xFE2
 11949                           fsr1l	equ	0xFE1
 11950                           indf2	equ	0xFDF
 11951                           postinc2	equ	0xFDE
 11952                           postdec2	equ	0xFDD
 11953                           fsr2h	equ	0xFDA
 11954                           fsr2l	equ	0xFD9
 11955                           status	equ	0xFD8
 11956                           
 11957 ;; *************** function ___ftge *****************
 11958 ;; Defined at:
 11959 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  ff1             3   23[COMRAM] float 
 11962 ;;  ff2             3   26[COMRAM] float 
 11963 ;; Auto vars:     Size  Location     Type
 11964 ;;		None
 11965 ;; Return value:  Size  Location     Type
 11966 ;;		None               void
 11967 ;; Registers used:
 11968 ;;		wreg, status,2, status,0
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11974 ;;      Params:         6       0       0       0       0       0       0
 11975 ;;      Locals:         0       0       0       0       0       0       0
 11976 ;;      Temps:          3       0       0       0       0       0       0
 11977 ;;      Totals:         9       0       0       0       0       0       0
 11978 ;;Total ram usage:        9 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; Hardware stack levels required when called:    3
 11981 ;; This function calls:
 11982 ;;		Nothing
 11983 ;; This function is called by:
 11984 ;;		_CheckFlashPrecentage
 11985 ;;		_pow
 11986 ;;		_exp
 11987 ;;		_floor
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           	psect	text80
 11992  0022F2                     __ptext80:
 11993                           	opt stack 0
 11994  0022F2                     ___ftge:
 11995                           	opt stack 21
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;incstack = 0
 11999  0022F2  AE1A               	btfss	___ftge@ff1+2,7,c
 12000  0022F4  D016               	goto	l1588
 12001  0022F6  C018  F01E         	movff	___ftge@ff1,??___ftge
 12002  0022FA  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 12003  0022FE  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 12004  002302  1E1E               	comf	??___ftge,f,c
 12005  002304  1E1F               	comf	??___ftge+1,f,c
 12006  002306  1E20               	comf	??___ftge+2,f,c
 12007  002308  2A1E               	incf	??___ftge,f,c
 12008  00230A  0E00               	movlw	0
 12009  00230C  221F               	addwfc	??___ftge+1,f,c
 12010  00230E  2220               	addwfc	??___ftge+2,f,c
 12011  002310  0E00               	movlw	0
 12012  002312  241E               	addwf	??___ftge,w,c
 12013  002314  6E18               	movwf	___ftge@ff1,c
 12014  002316  0E00               	movlw	0
 12015  002318  201F               	addwfc	??___ftge+1,w,c
 12016  00231A  6E19               	movwf	___ftge@ff1+1,c
 12017  00231C  0E80               	movlw	128
 12018  00231E  2020               	addwfc	??___ftge+2,w,c
 12019  002320  6E1A               	movwf	___ftge@ff1+2,c
 12020  002322                     l1588:
 12021  002322  AE1D               	btfss	___ftge@ff2+2,7,c
 12022  002324  D016               	goto	l1589
 12023  002326  C01B  F01E         	movff	___ftge@ff2,??___ftge
 12024  00232A  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 12025  00232E  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 12026  002332  1E1E               	comf	??___ftge,f,c
 12027  002334  1E1F               	comf	??___ftge+1,f,c
 12028  002336  1E20               	comf	??___ftge+2,f,c
 12029  002338  2A1E               	incf	??___ftge,f,c
 12030  00233A  0E00               	movlw	0
 12031  00233C  221F               	addwfc	??___ftge+1,f,c
 12032  00233E  2220               	addwfc	??___ftge+2,f,c
 12033  002340  0E00               	movlw	0
 12034  002342  241E               	addwf	??___ftge,w,c
 12035  002344  6E1B               	movwf	___ftge@ff2,c
 12036  002346  0E00               	movlw	0
 12037  002348  201F               	addwfc	??___ftge+1,w,c
 12038  00234A  6E1C               	movwf	___ftge@ff2+1,c
 12039  00234C  0E80               	movlw	128
 12040  00234E  2020               	addwfc	??___ftge+2,w,c
 12041  002350  6E1D               	movwf	___ftge@ff2+2,c
 12042  002352                     l1589:
 12043  002352  0E00               	movlw	0
 12044  002354  1A18               	xorwf	___ftge@ff1,f,c
 12045  002356  0E00               	movlw	0
 12046  002358  1A19               	xorwf	___ftge@ff1+1,f,c
 12047  00235A  0E80               	movlw	128
 12048  00235C  1A1A               	xorwf	___ftge@ff1+2,f,c
 12049  00235E  0E00               	movlw	0
 12050  002360  1A1B               	xorwf	___ftge@ff2,f,c
 12051  002362  0E00               	movlw	0
 12052  002364  1A1C               	xorwf	___ftge@ff2+1,f,c
 12053  002366  0E80               	movlw	128
 12054  002368  1A1D               	xorwf	___ftge@ff2+2,f,c
 12055  00236A  501B               	movf	___ftge@ff2,w,c
 12056  00236C  5C18               	subwf	___ftge@ff1,w,c
 12057  00236E  501C               	movf	___ftge@ff2+1,w,c
 12058  002370  5819               	subwfb	___ftge@ff1+1,w,c
 12059  002372  501D               	movf	___ftge@ff2+2,w,c
 12060  002374  581A               	subwfb	___ftge@ff1+2,w,c
 12061  002376  B0D8               	btfsc	status,0,c
 12062  002378  D002               	goto	l5668
 12063  00237A  90D8               	bcf	status,0,c
 12064  00237C  0012               	return	
 12065  00237E                     l5668:
 12066  00237E  80D8               	bsf	status,0,c
 12067  002380  0012               	return	
 12068  002382                     __end_of___ftge:
 12069                           	opt stack 0
 12070                           tosu	equ	0xFFF
 12071                           tosh	equ	0xFFE
 12072                           tosl	equ	0xFFD
 12073                           pclath	equ	0xFFA
 12074                           tblptru	equ	0xFF8
 12075                           tblptrh	equ	0xFF7
 12076                           tblptrl	equ	0xFF6
 12077                           tablat	equ	0xFF5
 12078                           prodh	equ	0xFF4
 12079                           prodl	equ	0xFF3
 12080                           intcon	equ	0xFF2
 12081                           intcon2	equ	0xFF1
 12082                           postinc0	equ	0xFEE
 12083                           wreg	equ	0xFE8
 12084                           indf1	equ	0xFE7
 12085                           postdec1	equ	0xFE5
 12086                           fsr1h	equ	0xFE2
 12087                           fsr1l	equ	0xFE1
 12088                           indf2	equ	0xFDF
 12089                           postinc2	equ	0xFDE
 12090                           postdec2	equ	0xFDD
 12091                           fsr2h	equ	0xFDA
 12092                           fsr2l	equ	0xFD9
 12093                           status	equ	0xFD8
 12094                           
 12095 ;; *************** function ___altoft *****************
 12096 ;; Defined at:
 12097 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;  c               4   39[BANK0 ] long 
 12100 ;; Auto vars:     Size  Location     Type
 12101 ;;  sign            1   47[COMRAM] unsigned char 
 12102 ;;  exp             1   46[COMRAM] unsigned char 
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  3   39[BANK0 ] float 
 12105 ;; Registers used:
 12106 ;;		wreg, status,2, status,0, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12112 ;;      Params:         0       4       0       0       0       0       0
 12113 ;;      Locals:         2       0       0       0       0       0       0
 12114 ;;      Temps:          0       4       0       0       0       0       0
 12115 ;;      Totals:         2       8       0       0       0       0       0
 12116 ;;Total ram usage:       10 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    4
 12119 ;; This function calls:
 12120 ;;		___ftpack
 12121 ;; This function is called by:
 12122 ;;		_floor
 12123 ;; This function uses a non-reentrant model
 12124 ;;
 12125                           
 12126                           	psect	text81
 12127  002486                     __ptext81:
 12128                           	opt stack 0
 12129  002486                     ___altoft:
 12130                           	opt stack 20
 12131                           
 12132                           ;incstack = 0
 12133  002486  0E00               	movlw	0
 12134  002488  6E30               	movwf	___altoft@sign,c
 12135  00248A  0E8E               	movlw	142
 12136  00248C  6E2F               	movwf	___altoft@exp,c
 12137  00248E  0100               	movlb	0	; () banked
 12138  002490  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 12139  002492  D011               	goto	l1386
 12140                           
 12141                           ; BSR set to: 0
 12142  002494  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 12143  002496  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 12144  002498  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 12145  00249A  6D87               	negf	___altoft@c& (0+255),b
 12146  00249C  0E00               	movlw	0
 12147  00249E  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 12148  0024A0  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 12149  0024A2  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 12150                           
 12151                           ; BSR set to: 0
 12152  0024A4  0E01               	movlw	1
 12153  0024A6  6E30               	movwf	___altoft@sign,c
 12154                           
 12155                           ; BSR set to: 0
 12156  0024A8  D006               	goto	l1386
 12157  0024AA                     
 12158                           ; BSR set to: 0
 12159                           
 12160                           ; BSR set to: 0
 12161  0024AA  90D8               	bcf	status,0,c
 12162  0024AC  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 12163  0024AE  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 12164  0024B0  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 12165  0024B2  3387               	rrcf	___altoft@c& (0+255),f,b
 12166  0024B4  2A2F               	incf	___altoft@exp,f,c
 12167  0024B6                     l1386:
 12168                           
 12169                           ; BSR set to: 0
 12170                           
 12171                           ; BSR set to: 0
 12172  0024B6  0E00               	movlw	0
 12173  0024B8  1587               	andwf	___altoft@c& (0+255),w,b
 12174  0024BA  6F8B               	movwf	??___altoft& (0+255),b
 12175  0024BC  0E00               	movlw	0
 12176  0024BE  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 12177  0024C0  6F8C               	movwf	(??___altoft+1)& (0+255),b
 12178  0024C2  0E00               	movlw	0
 12179  0024C4  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 12180  0024C6  6F8D               	movwf	(??___altoft+2)& (0+255),b
 12181  0024C8  0EFF               	movlw	255
 12182  0024CA  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 12183  0024CC  6F8E               	movwf	(??___altoft+3)& (0+255),b
 12184  0024CE  518B               	movf	??___altoft& (0+255),w,b
 12185  0024D0  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 12186  0024D2  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 12187  0024D4  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 12188  0024D6  A4D8               	btfss	status,2,c
 12189  0024D8  D7E8               	goto	l1387
 12190                           
 12191                           ; BSR set to: 0
 12192                           
 12193                           ; BSR set to: 0
 12194  0024DA  C087  F018         	movff	___altoft@c,___ftpack@arg
 12195  0024DE  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 12196  0024E2  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 12197  0024E6  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 12198  0024EA  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 12199  0024EE  ECF3  F00F         	call	___ftpack	;wreg free
 12200  0024F2  C018  F087         	movff	?___ftpack,?___altoft
 12201  0024F6  C019  F088         	movff	?___ftpack+1,?___altoft+1
 12202  0024FA  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 12203  0024FE  0012               	return	
 12204  002500                     __end_of___altoft:
 12205                           	opt stack 0
 12206                           tosu	equ	0xFFF
 12207                           tosh	equ	0xFFE
 12208                           tosl	equ	0xFFD
 12209                           pclath	equ	0xFFA
 12210                           tblptru	equ	0xFF8
 12211                           tblptrh	equ	0xFF7
 12212                           tblptrl	equ	0xFF6
 12213                           tablat	equ	0xFF5
 12214                           prodh	equ	0xFF4
 12215                           prodl	equ	0xFF3
 12216                           intcon	equ	0xFF2
 12217                           intcon2	equ	0xFF1
 12218                           postinc0	equ	0xFEE
 12219                           wreg	equ	0xFE8
 12220                           indf1	equ	0xFE7
 12221                           postdec1	equ	0xFE5
 12222                           fsr1h	equ	0xFE2
 12223                           fsr1l	equ	0xFE1
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           fsr2h	equ	0xFDA
 12228                           fsr2l	equ	0xFD9
 12229                           status	equ	0xFD8
 12230                           
 12231 ;; *************** function _eval_poly *****************
 12232 ;; Defined at:
 12233 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 12234 ;; Parameters:    Size  Location     Type
 12235 ;;  x               3   21[BANK0 ] float 
 12236 ;;  d               2   24[BANK0 ] PTR const 
 12237 ;;		 -> log@coeff(27), exp@coeff(30), 
 12238 ;;  n               2   26[BANK0 ] int 
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;  res             3   28[BANK0 ] int 
 12241 ;; Return value:  Size  Location     Type
 12242 ;;                  3   21[BANK0 ] int 
 12243 ;; Registers used:
 12244 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12250 ;;      Params:         0       7       0       0       0       0       0
 12251 ;;      Locals:         0       3       0       0       0       0       0
 12252 ;;      Temps:          2       0       0       0       0       0       0
 12253 ;;      Totals:         2      10       0       0       0       0       0
 12254 ;;Total ram usage:       12 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:    5
 12257 ;; This function calls:
 12258 ;;		___ftadd
 12259 ;;		___ftmul
 12260 ;;		___wmul
 12261 ;; This function is called by:
 12262 ;;		_exp
 12263 ;;		_log
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           	psect	text82
 12268  001CCE                     __ptext82:
 12269                           	opt stack 0
 12270  001CCE                     _eval_poly:
 12271                           	opt stack 20
 12272                           
 12273                           ;incstack = 0
 12274  001CCE  C07A  F018         	movff	eval_poly@n,___wmul@multiplier
 12275  001CD2  C07B  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 12276  001CD6  0E00               	movlw	0
 12277  001CD8  6E1B               	movwf	___wmul@multiplicand+1,c
 12278  001CDA  0E03               	movlw	3
 12279  001CDC  6E1A               	movwf	___wmul@multiplicand,c
 12280  001CDE  ECE1  F017         	call	___wmul	;wreg free
 12281  001CE2  C078  F02F         	movff	eval_poly@d,??_eval_poly
 12282  001CE6  C079  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12283  001CEA  5018               	movf	?___wmul,w,c
 12284  001CEC  262F               	addwf	??_eval_poly,f,c
 12285  001CEE  5019               	movf	?___wmul+1,w,c
 12286  001CF0  2230               	addwfc	??_eval_poly+1,f,c
 12287  001CF2  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12288  001CF6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12289  001CFA                     	if	0	;tblptru may be non-zero
 12290  001CFA                     	endif
 12291  001CFA                     	if	0	;tblptru may be non-zero
 12292  001CFA                     	endif
 12293  001CFA  0009               	tblrd		*+
 12294  001CFC  CFF5 F07C          	movff	tablat,eval_poly@res
 12295  001D00  0009               	tblrd		*+
 12296  001D02  CFF5 F07D          	movff	tablat,eval_poly@res+1
 12297  001D06  000A               	tblrd		*-
 12298  001D08  CFF5 F07E          	movff	tablat,eval_poly@res+2
 12299  001D0C  D03F               	goto	l1951
 12300  001D0E  C07C  F02C         	movff	eval_poly@res,___ftmul@f2
 12301  001D12  C07D  F02D         	movff	eval_poly@res+1,___ftmul@f2+1
 12302  001D16  C07E  F02E         	movff	eval_poly@res+2,___ftmul@f2+2
 12303  001D1A  C075  F029         	movff	eval_poly@x,___ftmul@f1
 12304  001D1E  C076  F02A         	movff	eval_poly@x+1,___ftmul@f1+1
 12305  001D22  C077  F02B         	movff	eval_poly@x+2,___ftmul@f1+2
 12306  001D26  EC95  F00C         	call	___ftmul	;wreg free
 12307  001D2A  C029  F069         	movff	?___ftmul,___ftadd@f1
 12308  001D2E  C02A  F06A         	movff	?___ftmul+1,___ftadd@f1+1
 12309  001D32  C02B  F06B         	movff	?___ftmul+2,___ftadd@f1+2
 12310  001D36  0E00               	movlw	0
 12311  001D38  6E1B               	movwf	___wmul@multiplicand+1,c
 12312  001D3A  0E03               	movlw	3
 12313  001D3C  6E1A               	movwf	___wmul@multiplicand,c
 12314  001D3E  0100               	movlb	0	; () banked
 12315  001D40  077A               	decf	eval_poly@n& (0+255),f,b
 12316  001D42  A0D8               	btfss	status,0,c
 12317  001D44  077B               	decf	(eval_poly@n+1)& (0+255),f,b
 12318  001D46  C07A  F018         	movff	eval_poly@n,___wmul@multiplier
 12319  001D4A  C07B  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 12320  001D4E  ECE1  F017         	call	___wmul	;wreg free
 12321  001D52  C078  F02F         	movff	eval_poly@d,??_eval_poly
 12322  001D56  C079  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12323  001D5A  5018               	movf	?___wmul,w,c
 12324  001D5C  262F               	addwf	??_eval_poly,f,c
 12325  001D5E  5019               	movf	?___wmul+1,w,c
 12326  001D60  2230               	addwfc	??_eval_poly+1,f,c
 12327  001D62  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12328  001D66  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12329  001D6A                     	if	0	;tblptru may be non-zero
 12330  001D6A                     	endif
 12331  001D6A                     	if	0	;tblptru may be non-zero
 12332  001D6A                     	endif
 12333  001D6A  0009               	tblrd		*+
 12334  001D6C  CFF5 F06C          	movff	tablat,___ftadd@f2
 12335  001D70  0009               	tblrd		*+
 12336  001D72  CFF5 F06D          	movff	tablat,___ftadd@f2+1
 12337  001D76  000A               	tblrd		*-
 12338  001D78  CFF5 F06E          	movff	tablat,___ftadd@f2+2
 12339  001D7C  ECE2  F008         	call	___ftadd	;wreg free
 12340  001D80  C069  F07C         	movff	?___ftadd,eval_poly@res
 12341  001D84  C06A  F07D         	movff	?___ftadd+1,eval_poly@res+1
 12342  001D88  C06B  F07E         	movff	?___ftadd+2,eval_poly@res+2
 12343  001D8C                     l1951:
 12344  001D8C  0100               	movlb	0	; () banked
 12345  001D8E  517A               	movf	eval_poly@n& (0+255),w,b
 12346  001D90  117B               	iorwf	(eval_poly@n+1)& (0+255),w,b
 12347  001D92  A4D8               	btfss	status,2,c
 12348  001D94  D7BC               	goto	l1952
 12349                           
 12350                           ; BSR set to: 0
 12351  001D96  C07C  F075         	movff	eval_poly@res,?_eval_poly
 12352  001D9A  C07D  F076         	movff	eval_poly@res+1,?_eval_poly+1
 12353  001D9E  C07E  F077         	movff	eval_poly@res+2,?_eval_poly+2
 12354                           
 12355                           ; BSR set to: 0
 12356  001DA2  0012               	return		;funcret
 12357  001DA4                     __end_of_eval_poly:
 12358                           	opt stack 0
 12359                           tosu	equ	0xFFF
 12360                           tosh	equ	0xFFE
 12361                           tosl	equ	0xFFD
 12362                           pclath	equ	0xFFA
 12363                           tblptru	equ	0xFF8
 12364                           tblptrh	equ	0xFF7
 12365                           tblptrl	equ	0xFF6
 12366                           tablat	equ	0xFF5
 12367                           prodh	equ	0xFF4
 12368                           prodl	equ	0xFF3
 12369                           intcon	equ	0xFF2
 12370                           intcon2	equ	0xFF1
 12371                           postinc0	equ	0xFEE
 12372                           wreg	equ	0xFE8
 12373                           indf1	equ	0xFE7
 12374                           postdec1	equ	0xFE5
 12375                           fsr1h	equ	0xFE2
 12376                           fsr1l	equ	0xFE1
 12377                           indf2	equ	0xFDF
 12378                           postinc2	equ	0xFDE
 12379                           postdec2	equ	0xFDD
 12380                           fsr2h	equ	0xFDA
 12381                           fsr2l	equ	0xFD9
 12382                           status	equ	0xFD8
 12383                           
 12384 ;; *************** function ___wmul *****************
 12385 ;; Defined at:
 12386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;  multiplier      2   23[COMRAM] unsigned int 
 12389 ;;  multiplicand    2   25[COMRAM] unsigned int 
 12390 ;; Auto vars:     Size  Location     Type
 12391 ;;  product         2   27[COMRAM] unsigned int 
 12392 ;; Return value:  Size  Location     Type
 12393 ;;                  2   23[COMRAM] unsigned int 
 12394 ;; Registers used:
 12395 ;;		wreg, status,2, status,0, prodl, prodh
 12396 ;; Tracked objects:
 12397 ;;		On entry : 0/0
 12398 ;;		On exit  : 0/0
 12399 ;;		Unchanged: 0/0
 12400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12401 ;;      Params:         4       0       0       0       0       0       0
 12402 ;;      Locals:         2       0       0       0       0       0       0
 12403 ;;      Temps:          0       0       0       0       0       0       0
 12404 ;;      Totals:         6       0       0       0       0       0       0
 12405 ;;Total ram usage:        6 bytes
 12406 ;; Hardware stack levels used:    1
 12407 ;; Hardware stack levels required when called:    3
 12408 ;; This function calls:
 12409 ;;		Nothing
 12410 ;; This function is called by:
 12411 ;;		_eval_poly
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           	psect	text83
 12416  002FC2                     __ptext83:
 12417                           	opt stack 0
 12418  002FC2                     ___wmul:
 12419                           	opt stack 21
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;incstack = 0
 12423  002FC2  5018               	movf	___wmul@multiplier,w,c
 12424  002FC4  021A               	mulwf	___wmul@multiplicand,c
 12425  002FC6  CFF3 F01C          	movff	prodl,___wmul@product
 12426  002FCA  CFF4 F01D          	movff	prodh,___wmul@product+1
 12427  002FCE  5018               	movf	___wmul@multiplier,w,c
 12428  002FD0  021B               	mulwf	___wmul@multiplicand+1,c
 12429  002FD2  50F3               	movf	prodl,w,c
 12430  002FD4  261D               	addwf	___wmul@product+1,f,c
 12431  002FD6  5019               	movf	___wmul@multiplier+1,w,c
 12432  002FD8  021A               	mulwf	___wmul@multiplicand,c
 12433  002FDA  50F3               	movf	prodl,w,c
 12434  002FDC  261D               	addwf	___wmul@product+1,f,c
 12435  002FDE  C01C  F018         	movff	___wmul@product,?___wmul
 12436  002FE2  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 12437  002FE6  0012               	return	
 12438  002FE8                     __end_of___wmul:
 12439                           	opt stack 0
 12440                           tosu	equ	0xFFF
 12441                           tosh	equ	0xFFE
 12442                           tosl	equ	0xFFD
 12443                           pclath	equ	0xFFA
 12444                           tblptru	equ	0xFF8
 12445                           tblptrh	equ	0xFF7
 12446                           tblptrl	equ	0xFF6
 12447                           tablat	equ	0xFF5
 12448                           prodh	equ	0xFF4
 12449                           prodl	equ	0xFF3
 12450                           intcon	equ	0xFF2
 12451                           intcon2	equ	0xFF1
 12452                           postinc0	equ	0xFEE
 12453                           wreg	equ	0xFE8
 12454                           indf1	equ	0xFE7
 12455                           postdec1	equ	0xFE5
 12456                           fsr1h	equ	0xFE2
 12457                           fsr1l	equ	0xFE1
 12458                           indf2	equ	0xFDF
 12459                           postinc2	equ	0xFDE
 12460                           postdec2	equ	0xFDD
 12461                           fsr2h	equ	0xFDA
 12462                           fsr2l	equ	0xFD9
 12463                           status	equ	0xFD8
 12464                           
 12465 ;; *************** function ___ftmul *****************
 12466 ;; Defined at:
 12467 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;  f1              3   40[COMRAM] float 
 12470 ;;  f2              3   43[COMRAM] float 
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
 12473 ;;  sign            1    8[BANK0 ] unsigned char 
 12474 ;;  cntr            1    7[BANK0 ] unsigned char 
 12475 ;;  exp             1    3[BANK0 ] unsigned char 
 12476 ;; Return value:  Size  Location     Type
 12477 ;;                  3   40[COMRAM] float 
 12478 ;; Registers used:
 12479 ;;		wreg, status,2, status,0, cstack
 12480 ;; Tracked objects:
 12481 ;;		On entry : 0/0
 12482 ;;		On exit  : 0/0
 12483 ;;		Unchanged: 0/0
 12484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12485 ;;      Params:         6       0       0       0       0       0       0
 12486 ;;      Locals:         0       6       0       0       0       0       0
 12487 ;;      Temps:          0       3       0       0       0       0       0
 12488 ;;      Totals:         6       9       0       0       0       0       0
 12489 ;;Total ram usage:       15 bytes
 12490 ;; Hardware stack levels used:    1
 12491 ;; Hardware stack levels required when called:    4
 12492 ;; This function calls:
 12493 ;;		___ftpack
 12494 ;; This function is called by:
 12495 ;;		_AdcConvert
 12496 ;;		_CheckFlashPrecentage
 12497 ;;		_DacSetValue
 12498 ;;		_UpdateTxFreq
 12499 ;;		_pow
 12500 ;;		_exp
 12501 ;;		_log
 12502 ;;		_eval_poly
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           	psect	text84
 12507  00192A                     __ptext84:
 12508                           	opt stack 0
 12509  00192A                     ___ftmul:
 12510                           	opt stack 20
 12511                           
 12512                           ;incstack = 0
 12513  00192A  C02B  F060         	movff	___ftmul@f1+2,??___ftmul
 12514  00192E  0100               	movlb	0	; () banked
 12515  001930  6B61               	clrf	(??___ftmul+1)& (0+255),b
 12516  001932  6B62               	clrf	(??___ftmul+2)& (0+255),b
 12517  001934  342A               	rlcf	___ftmul@f1+1,w,c
 12518  001936  3760               	rlcf	??___ftmul& (0+255),f,b
 12519  001938  E301               	bnc	u4861
 12520  00193A  8161               	bsf	(??___ftmul+1)& (0+255),0,b
 12521  00193C                     u4861:
 12522  00193C  5160               	movf	??___ftmul& (0+255),w,b
 12523  00193E  6F63               	movwf	___ftmul@exp& (0+255),b
 12524  001940  5163               	movf	___ftmul@exp& (0+255),w,b
 12525  001942  A4D8               	btfss	status,2,c
 12526  001944  D007               	goto	l1595
 12527                           
 12528                           ; BSR set to: 0
 12529  001946  0E00               	movlw	0
 12530  001948  6E29               	movwf	?___ftmul,c
 12531  00194A  0E00               	movlw	0
 12532  00194C  6E2A               	movwf	?___ftmul+1,c
 12533  00194E  0E00               	movlw	0
 12534  001950  6E2B               	movwf	?___ftmul+2,c
 12535                           
 12536                           ; BSR set to: 0
 12537  001952  0012               	return	
 12538  001954                     l1595:
 12539                           
 12540                           ; BSR set to: 0
 12541                           
 12542                           ; BSR set to: 0
 12543  001954  C02E  F060         	movff	___ftmul@f2+2,??___ftmul
 12544  001958  6B61               	clrf	(??___ftmul+1)& (0+255),b
 12545  00195A  6B62               	clrf	(??___ftmul+2)& (0+255),b
 12546  00195C  342D               	rlcf	___ftmul@f2+1,w,c
 12547  00195E  3760               	rlcf	??___ftmul& (0+255),f,b
 12548  001960  E301               	bnc	u4881
 12549  001962  8161               	bsf	(??___ftmul+1)& (0+255),0,b
 12550  001964                     u4881:
 12551  001964  5160               	movf	??___ftmul& (0+255),w,b
 12552  001966  6F68               	movwf	___ftmul@sign& (0+255),b
 12553  001968  5168               	movf	___ftmul@sign& (0+255),w,b
 12554  00196A  A4D8               	btfss	status,2,c
 12555  00196C  D007               	goto	l1597
 12556                           
 12557                           ; BSR set to: 0
 12558  00196E  0E00               	movlw	0
 12559  001970  6E29               	movwf	?___ftmul,c
 12560  001972  0E00               	movlw	0
 12561  001974  6E2A               	movwf	?___ftmul+1,c
 12562  001976  0E00               	movlw	0
 12563  001978  6E2B               	movwf	?___ftmul+2,c
 12564                           
 12565                           ; BSR set to: 0
 12566  00197A  0012               	return	
 12567  00197C                     l1597:
 12568                           
 12569                           ; BSR set to: 0
 12570                           
 12571                           ; BSR set to: 0
 12572  00197C  5168               	movf	___ftmul@sign& (0+255),w,b
 12573  00197E  0F7B               	addlw	123
 12574  001980  2763               	addwf	___ftmul@exp& (0+255),f,b
 12575                           
 12576                           ; BSR set to: 0
 12577  001982  C02B  F068         	movff	___ftmul@f1+2,___ftmul@sign
 12578  001986  502E               	movf	___ftmul@f2+2,w,c
 12579  001988  1B68               	xorwf	___ftmul@sign& (0+255),f,b
 12580  00198A  0E80               	movlw	128
 12581  00198C  1768               	andwf	___ftmul@sign& (0+255),f,b
 12582                           
 12583                           ; BSR set to: 0
 12584  00198E  8E2A               	bsf	___ftmul@f1+1,7,c
 12585                           
 12586                           ; BSR set to: 0
 12587  001990  8E2D               	bsf	___ftmul@f2+1,7,c
 12588                           
 12589                           ; BSR set to: 0
 12590  001992  0EFF               	movlw	255
 12591  001994  162C               	andwf	___ftmul@f2,f,c
 12592  001996  0EFF               	movlw	255
 12593  001998  162D               	andwf	___ftmul@f2+1,f,c
 12594  00199A  0E00               	movlw	0
 12595  00199C  162E               	andwf	___ftmul@f2+2,f,c
 12596                           
 12597                           ; BSR set to: 0
 12598  00199E  0E00               	movlw	0
 12599  0019A0  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
 12600  0019A2  0E00               	movlw	0
 12601  0019A4  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12602  0019A6  0E00               	movlw	0
 12603  0019A8  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12604                           
 12605                           ; BSR set to: 0
 12606  0019AA  0E07               	movlw	7
 12607  0019AC  6F67               	movwf	___ftmul@cntr& (0+255),b
 12608  0019AE                     
 12609                           ; BSR set to: 0
 12610                           
 12611                           ; BSR set to: 0
 12612  0019AE  A029               	btfss	___ftmul@f1,0,c
 12613  0019B0  D006               	goto	l1599
 12614                           
 12615                           ; BSR set to: 0
 12616  0019B2  502C               	movf	___ftmul@f2,w,c
 12617  0019B4  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12618  0019B6  502D               	movf	___ftmul@f2+1,w,c
 12619  0019B8  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12620  0019BA  502E               	movf	___ftmul@f2+2,w,c
 12621  0019BC  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12622  0019BE                     l1599:
 12623                           
 12624                           ; BSR set to: 0
 12625                           
 12626                           ; BSR set to: 0
 12627  0019BE  90D8               	bcf	status,0,c
 12628  0019C0  322B               	rrcf	___ftmul@f1+2,f,c
 12629  0019C2  322A               	rrcf	___ftmul@f1+1,f,c
 12630  0019C4  3229               	rrcf	___ftmul@f1,f,c
 12631  0019C6  90D8               	bcf	status,0,c
 12632  0019C8  362C               	rlcf	___ftmul@f2,f,c
 12633  0019CA  362D               	rlcf	___ftmul@f2+1,f,c
 12634  0019CC  362E               	rlcf	___ftmul@f2+2,f,c
 12635                           
 12636                           ; BSR set to: 0
 12637  0019CE  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
 12638  0019D0  D7EE               	goto	l1598
 12639                           
 12640                           ; BSR set to: 0
 12641                           
 12642                           ; BSR set to: 0
 12643  0019D2  0E09               	movlw	9
 12644  0019D4  6F67               	movwf	___ftmul@cntr& (0+255),b
 12645  0019D6                     
 12646                           ; BSR set to: 0
 12647                           
 12648                           ; BSR set to: 0
 12649  0019D6  A029               	btfss	___ftmul@f1,0,c
 12650  0019D8  D006               	goto	l1602
 12651                           
 12652                           ; BSR set to: 0
 12653  0019DA  502C               	movf	___ftmul@f2,w,c
 12654  0019DC  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12655  0019DE  502D               	movf	___ftmul@f2+1,w,c
 12656  0019E0  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12657  0019E2  502E               	movf	___ftmul@f2+2,w,c
 12658  0019E4  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12659  0019E6                     l1602:
 12660                           
 12661                           ; BSR set to: 0
 12662                           
 12663                           ; BSR set to: 0
 12664  0019E6  90D8               	bcf	status,0,c
 12665  0019E8  322B               	rrcf	___ftmul@f1+2,f,c
 12666  0019EA  322A               	rrcf	___ftmul@f1+1,f,c
 12667  0019EC  3229               	rrcf	___ftmul@f1,f,c
 12668  0019EE  90D8               	bcf	status,0,c
 12669  0019F0  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12670  0019F2  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12671  0019F4  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12672                           
 12673                           ; BSR set to: 0
 12674  0019F6  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
 12675  0019F8  D7EE               	goto	l1601
 12676                           
 12677                           ; BSR set to: 0
 12678                           
 12679                           ; BSR set to: 0
 12680  0019FA  C064  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 12681  0019FE  C065  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12682  001A02  C066  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12683  001A06  C063  F01B         	movff	___ftmul@exp,___ftpack@exp
 12684  001A0A  C068  F01C         	movff	___ftmul@sign,___ftpack@sign
 12685  001A0E  ECF3  F00F         	call	___ftpack	;wreg free
 12686  001A12  C018  F029         	movff	?___ftpack,?___ftmul
 12687  001A16  C019  F02A         	movff	?___ftpack+1,?___ftmul+1
 12688  001A1A  C01A  F02B         	movff	?___ftpack+2,?___ftmul+2
 12689  001A1E  0012               	return	
 12690  001A20                     __end_of___ftmul:
 12691                           	opt stack 0
 12692                           tosu	equ	0xFFF
 12693                           tosh	equ	0xFFE
 12694                           tosl	equ	0xFFD
 12695                           pclath	equ	0xFFA
 12696                           tblptru	equ	0xFF8
 12697                           tblptrh	equ	0xFF7
 12698                           tblptrl	equ	0xFF6
 12699                           tablat	equ	0xFF5
 12700                           prodh	equ	0xFF4
 12701                           prodl	equ	0xFF3
 12702                           intcon	equ	0xFF2
 12703                           intcon2	equ	0xFF1
 12704                           postinc0	equ	0xFEE
 12705                           wreg	equ	0xFE8
 12706                           indf1	equ	0xFE7
 12707                           postdec1	equ	0xFE5
 12708                           fsr1h	equ	0xFE2
 12709                           fsr1l	equ	0xFE1
 12710                           indf2	equ	0xFDF
 12711                           postinc2	equ	0xFDE
 12712                           postdec2	equ	0xFDD
 12713                           fsr2h	equ	0xFDA
 12714                           fsr2l	equ	0xFD9
 12715                           status	equ	0xFD8
 12716                           
 12717 ;; *************** function ___ftsub *****************
 12718 ;; Defined at:
 12719 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 12720 ;; Parameters:    Size  Location     Type
 12721 ;;  f1              3   21[BANK0 ] float 
 12722 ;;  f2              3   24[BANK0 ] float 
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;		None
 12725 ;; Return value:  Size  Location     Type
 12726 ;;                  3   21[BANK0 ] float 
 12727 ;; Registers used:
 12728 ;;		wreg, status,2, status,0, cstack
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12734 ;;      Params:         0       6       0       0       0       0       0
 12735 ;;      Locals:         0       0       0       0       0       0       0
 12736 ;;      Temps:          0       0       0       0       0       0       0
 12737 ;;      Totals:         0       6       0       0       0       0       0
 12738 ;;Total ram usage:        6 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    5
 12741 ;; This function calls:
 12742 ;;		___ftadd
 12743 ;; This function is called by:
 12744 ;;		_exp
 12745 ;; This function uses a non-reentrant model
 12746 ;;
 12747                           
 12748                           	psect	text85
 12749  002B80                     __ptext85:
 12750                           	opt stack 0
 12751  002B80                     ___ftsub:
 12752                           	opt stack 20
 12753                           
 12754                           ;incstack = 0
 12755  002B80  0100               	movlb	0	; () banked
 12756  002B82  5178               	movf	___ftsub@f2& (0+255),w,b
 12757  002B84  1179               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 12758  002B86  117A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 12759  002B88  B4D8               	btfsc	status,2,c
 12760  002B8A  D006               	goto	l1612
 12761                           
 12762                           ; BSR set to: 0
 12763  002B8C  0E00               	movlw	0
 12764  002B8E  1B78               	xorwf	___ftsub@f2& (0+255),f,b
 12765  002B90  0E00               	movlw	0
 12766  002B92  1B79               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 12767  002B94  0E80               	movlw	128
 12768  002B96  1B7A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 12769  002B98                     l1612:
 12770                           
 12771                           ; BSR set to: 0
 12772                           
 12773                           ; BSR set to: 0
 12774  002B98  C075  F069         	movff	___ftsub@f1,___ftadd@f1
 12775  002B9C  C076  F06A         	movff	___ftsub@f1+1,___ftadd@f1+1
 12776  002BA0  C077  F06B         	movff	___ftsub@f1+2,___ftadd@f1+2
 12777  002BA4  C078  F06C         	movff	___ftsub@f2,___ftadd@f2
 12778  002BA8  C079  F06D         	movff	___ftsub@f2+1,___ftadd@f2+1
 12779  002BAC  C07A  F06E         	movff	___ftsub@f2+2,___ftadd@f2+2
 12780  002BB0  ECE2  F008         	call	___ftadd	;wreg free
 12781  002BB4  C069  F075         	movff	?___ftadd,?___ftsub
 12782  002BB8  C06A  F076         	movff	?___ftadd+1,?___ftsub+1
 12783  002BBC  C06B  F077         	movff	?___ftadd+2,?___ftsub+2
 12784  002BC0  0012               	return	
 12785  002BC2                     __end_of___ftsub:
 12786                           	opt stack 0
 12787                           tosu	equ	0xFFF
 12788                           tosh	equ	0xFFE
 12789                           tosl	equ	0xFFD
 12790                           pclath	equ	0xFFA
 12791                           tblptru	equ	0xFF8
 12792                           tblptrh	equ	0xFF7
 12793                           tblptrl	equ	0xFF6
 12794                           tablat	equ	0xFF5
 12795                           prodh	equ	0xFF4
 12796                           prodl	equ	0xFF3
 12797                           intcon	equ	0xFF2
 12798                           intcon2	equ	0xFF1
 12799                           postinc0	equ	0xFEE
 12800                           wreg	equ	0xFE8
 12801                           indf1	equ	0xFE7
 12802                           postdec1	equ	0xFE5
 12803                           fsr1h	equ	0xFE2
 12804                           fsr1l	equ	0xFE1
 12805                           indf2	equ	0xFDF
 12806                           postinc2	equ	0xFDE
 12807                           postdec2	equ	0xFDD
 12808                           fsr2h	equ	0xFDA
 12809                           fsr2l	equ	0xFD9
 12810                           status	equ	0xFD8
 12811                           
 12812 ;; *************** function ___ftadd *****************
 12813 ;; Defined at:
 12814 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  f1              3    9[BANK0 ] float 
 12817 ;;  f2              3   12[BANK0 ] float 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;  exp1            1   20[BANK0 ] unsigned char 
 12820 ;;  exp2            1   19[BANK0 ] unsigned char 
 12821 ;;  sign            1   18[BANK0 ] unsigned char 
 12822 ;; Return value:  Size  Location     Type
 12823 ;;                  3    9[BANK0 ] float 
 12824 ;; Registers used:
 12825 ;;		wreg, status,2, status,0, cstack
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12831 ;;      Params:         0       6       0       0       0       0       0
 12832 ;;      Locals:         0       3       0       0       0       0       0
 12833 ;;      Temps:          0       3       0       0       0       0       0
 12834 ;;      Totals:         0      12       0       0       0       0       0
 12835 ;;Total ram usage:       12 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:    4
 12838 ;; This function calls:
 12839 ;;		___ftpack
 12840 ;; This function is called by:
 12841 ;;		_DacSetValue
 12842 ;;		_UpdateTxFreq
 12843 ;;		___ftsub
 12844 ;;		_floor
 12845 ;;		_log
 12846 ;;		_eval_poly
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           	psect	text86
 12851  0011C4                     __ptext86:
 12852                           	opt stack 0
 12853  0011C4                     ___ftadd:
 12854                           	opt stack 20
 12855                           
 12856                           ;incstack = 0
 12857  0011C4  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
 12858  0011C8  0100               	movlb	0	; () banked
 12859  0011CA  6B70               	clrf	(??___ftadd+1)& (0+255),b
 12860  0011CC  6B71               	clrf	(??___ftadd+2)& (0+255),b
 12861  0011CE  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12862  0011D0  376F               	rlcf	??___ftadd& (0+255),f,b
 12863  0011D2  E301               	bnc	u4651
 12864  0011D4  8170               	bsf	(??___ftadd+1)& (0+255),0,b
 12865  0011D6                     u4651:
 12866  0011D6  516F               	movf	??___ftadd& (0+255),w,b
 12867  0011D8  6F74               	movwf	___ftadd@exp1& (0+255),b
 12868  0011DA  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
 12869  0011DE  6B70               	clrf	(??___ftadd+1)& (0+255),b
 12870  0011E0  6B71               	clrf	(??___ftadd+2)& (0+255),b
 12871  0011E2  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12872  0011E4  376F               	rlcf	??___ftadd& (0+255),f,b
 12873  0011E6  E301               	bnc	u4661
 12874  0011E8  8170               	bsf	(??___ftadd+1)& (0+255),0,b
 12875  0011EA                     u4661:
 12876  0011EA  516F               	movf	??___ftadd& (0+255),w,b
 12877  0011EC  6F73               	movwf	___ftadd@exp2& (0+255),b
 12878                           
 12879                           ; BSR set to: 0
 12880  0011EE  5174               	movf	___ftadd@exp1& (0+255),w,b
 12881  0011F0  B4D8               	btfsc	status,2,c
 12882  0011F2  D00B               	goto	u4690
 12883                           
 12884                           ; BSR set to: 0
 12885  0011F4  5173               	movf	___ftadd@exp2& (0+255),w,b
 12886  0011F6  5D74               	subwf	___ftadd@exp1& (0+255),w,b
 12887  0011F8  B0D8               	btfsc	status,0,c
 12888  0011FA  D00E               	goto	l1547
 12889                           
 12890                           ; BSR set to: 0
 12891  0011FC  5174               	movf	___ftadd@exp1& (0+255),w,b
 12892  0011FE  0800               	sublw	0
 12893  001200  2573               	addwf	___ftadd@exp2& (0+255),w,b
 12894  001202  6F6F               	movwf	??___ftadd& (0+255),b
 12895  001204  0E18               	movlw	24
 12896  001206  656F               	cpfsgt	??___ftadd& (0+255),b
 12897  001208  D007               	goto	l1547
 12898  00120A                     u4690:
 12899                           
 12900                           ; BSR set to: 0
 12901  00120A  C06C  F069         	movff	___ftadd@f2,?___ftadd
 12902  00120E  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
 12903  001212  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
 12904  001216  0012               	return	
 12905  001218                     l1547:
 12906                           
 12907                           ; BSR set to: 0
 12908                           
 12909                           ; BSR set to: 0
 12910  001218  5173               	movf	___ftadd@exp2& (0+255),w,b
 12911  00121A  B4D8               	btfsc	status,2,c
 12912  00121C  D00B               	goto	u4720
 12913                           
 12914                           ; BSR set to: 0
 12915  00121E  5174               	movf	___ftadd@exp1& (0+255),w,b
 12916  001220  5D73               	subwf	___ftadd@exp2& (0+255),w,b
 12917  001222  B0D8               	btfsc	status,0,c
 12918  001224  D00E               	goto	l1551
 12919                           
 12920                           ; BSR set to: 0
 12921  001226  5173               	movf	___ftadd@exp2& (0+255),w,b
 12922  001228  0800               	sublw	0
 12923  00122A  2574               	addwf	___ftadd@exp1& (0+255),w,b
 12924  00122C  6F6F               	movwf	??___ftadd& (0+255),b
 12925  00122E  0E18               	movlw	24
 12926  001230  656F               	cpfsgt	??___ftadd& (0+255),b
 12927  001232  D007               	goto	l1551
 12928  001234                     u4720:
 12929                           
 12930                           ; BSR set to: 0
 12931  001234  C069  F069         	movff	___ftadd@f1,?___ftadd
 12932  001238  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
 12933  00123C  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
 12934  001240  0012               	return	
 12935  001242                     l1551:
 12936                           
 12937                           ; BSR set to: 0
 12938                           
 12939                           ; BSR set to: 0
 12940  001242  0E06               	movlw	6
 12941  001244  6F72               	movwf	___ftadd@sign& (0+255),b
 12942                           
 12943                           ; BSR set to: 0
 12944  001246  BF6B               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 12945                           
 12946                           ; BSR set to: 0
 12947  001248  8F72               	bsf	___ftadd@sign& (0+255),7,b
 12948                           
 12949                           ; BSR set to: 0
 12950                           
 12951                           ; BSR set to: 0
 12952  00124A  BF6E               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 12953                           
 12954                           ; BSR set to: 0
 12955  00124C  8D72               	bsf	___ftadd@sign& (0+255),6,b
 12956                           
 12957                           ; BSR set to: 0
 12958  00124E  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12959                           
 12960                           ; BSR set to: 0
 12961  001250  0EFF               	movlw	255
 12962  001252  1769               	andwf	___ftadd@f1& (0+255),f,b
 12963  001254  0EFF               	movlw	255
 12964  001256  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12965  001258  0E00               	movlw	0
 12966  00125A  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12967  00125C  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12968                           
 12969                           ; BSR set to: 0
 12970  00125E  0EFF               	movlw	255
 12971  001260  176C               	andwf	___ftadd@f2& (0+255),f,b
 12972  001262  0EFF               	movlw	255
 12973  001264  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12974  001266  0E00               	movlw	0
 12975  001268  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12976                           
 12977                           ; BSR set to: 0
 12978  00126A  5173               	movf	___ftadd@exp2& (0+255),w,b
 12979  00126C  5D74               	subwf	___ftadd@exp1& (0+255),w,b
 12980  00126E  B0D8               	btfsc	status,0,c
 12981  001270  D01B               	goto	l1556
 12982  001272                     u4750:
 12983                           
 12984                           ; BSR set to: 0
 12985                           
 12986                           ; BSR set to: 0
 12987  001272  90D8               	bcf	status,0,c
 12988  001274  376C               	rlcf	___ftadd@f2& (0+255),f,b
 12989  001276  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12990  001278  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12991  00127A  0773               	decf	___ftadd@exp2& (0+255),f,b
 12992                           
 12993                           ; BSR set to: 0
 12994  00127C  5174               	movf	___ftadd@exp1& (0+255),w,b
 12995  00127E  1973               	xorwf	___ftadd@exp2& (0+255),w,b
 12996  001280  B4D8               	btfsc	status,2,c
 12997  001282  D00D               	goto	l1561
 12998                           
 12999                           ; BSR set to: 0
 13000  001284  0772               	decf	___ftadd@sign& (0+255),f,b
 13001  001286  C072  F06F         	movff	___ftadd@sign,??___ftadd
 13002  00128A  0E07               	movlw	7
 13003  00128C  176F               	andwf	??___ftadd& (0+255),f,b
 13004  00128E  B4D8               	btfsc	status,2,c
 13005  001290  D006               	goto	l1561
 13006  001292  D7EF               	goto	u4750
 13007  001294                     
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  001294  90D8               	bcf	status,0,c
 13012  001296  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13013  001298  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13014  00129A  3369               	rrcf	___ftadd@f1& (0+255),f,b
 13015  00129C  2B74               	incf	___ftadd@exp1& (0+255),f,b
 13016  00129E                     l1561:
 13017                           
 13018                           ; BSR set to: 0
 13019                           
 13020                           ; BSR set to: 0
 13021  00129E  5173               	movf	___ftadd@exp2& (0+255),w,b
 13022  0012A0  1974               	xorwf	___ftadd@exp1& (0+255),w,b
 13023  0012A2  B4D8               	btfsc	status,2,c
 13024  0012A4  D01F               	goto	u4820
 13025  0012A6  D7F6               	goto	l1562
 13026  0012A8                     l1556:
 13027                           
 13028                           ; BSR set to: 0
 13029                           
 13030                           ; BSR set to: 0
 13031  0012A8  5174               	movf	___ftadd@exp1& (0+255),w,b
 13032  0012AA  5D73               	subwf	___ftadd@exp2& (0+255),w,b
 13033  0012AC  B0D8               	btfsc	status,0,c
 13034  0012AE  D01A               	goto	u4820
 13035  0012B0                     u4790:
 13036                           
 13037                           ; BSR set to: 0
 13038                           
 13039                           ; BSR set to: 0
 13040  0012B0  90D8               	bcf	status,0,c
 13041  0012B2  3769               	rlcf	___ftadd@f1& (0+255),f,b
 13042  0012B4  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13043  0012B6  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13044  0012B8  0774               	decf	___ftadd@exp1& (0+255),f,b
 13045                           
 13046                           ; BSR set to: 0
 13047  0012BA  5174               	movf	___ftadd@exp1& (0+255),w,b
 13048  0012BC  1973               	xorwf	___ftadd@exp2& (0+255),w,b
 13049  0012BE  B4D8               	btfsc	status,2,c
 13050  0012C0  D00D               	goto	l1570
 13051                           
 13052                           ; BSR set to: 0
 13053  0012C2  0772               	decf	___ftadd@sign& (0+255),f,b
 13054  0012C4  C072  F06F         	movff	___ftadd@sign,??___ftadd
 13055  0012C8  0E07               	movlw	7
 13056  0012CA  176F               	andwf	??___ftadd& (0+255),f,b
 13057  0012CC  B4D8               	btfsc	status,2,c
 13058  0012CE  D006               	goto	l1570
 13059  0012D0  D7EF               	goto	u4790
 13060  0012D2                     
 13061                           ; BSR set to: 0
 13062                           
 13063                           ; BSR set to: 0
 13064  0012D2  90D8               	bcf	status,0,c
 13065  0012D4  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13066  0012D6  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13067  0012D8  336C               	rrcf	___ftadd@f2& (0+255),f,b
 13068  0012DA  2B73               	incf	___ftadd@exp2& (0+255),f,b
 13069  0012DC                     l1570:
 13070                           
 13071                           ; BSR set to: 0
 13072                           
 13073                           ; BSR set to: 0
 13074  0012DC  5173               	movf	___ftadd@exp2& (0+255),w,b
 13075  0012DE  1974               	xorwf	___ftadd@exp1& (0+255),w,b
 13076  0012E0  A4D8               	btfss	status,2,c
 13077  0012E2  D7F7               	goto	l1571
 13078  0012E4                     u4820:
 13079                           
 13080                           ; BSR set to: 0
 13081                           
 13082                           ; BSR set to: 0
 13083                           
 13084                           ; BSR set to: 0
 13085  0012E4  AF72               	btfss	___ftadd@sign& (0+255),7,b
 13086  0012E6  D00C               	goto	l1573
 13087                           
 13088                           ; BSR set to: 0
 13089  0012E8  0EFF               	movlw	255
 13090  0012EA  1B69               	xorwf	___ftadd@f1& (0+255),f,b
 13091  0012EC  0EFF               	movlw	255
 13092  0012EE  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13093  0012F0  0EFF               	movlw	255
 13094  0012F2  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13095  0012F4  0E01               	movlw	1
 13096  0012F6  2769               	addwf	___ftadd@f1& (0+255),f,b
 13097  0012F8  0E00               	movlw	0
 13098  0012FA  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13099  0012FC  0E00               	movlw	0
 13100  0012FE  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13101  001300                     l1573:
 13102                           
 13103                           ; BSR set to: 0
 13104  001300  AD72               	btfss	___ftadd@sign& (0+255),6,b
 13105  001302  D00C               	goto	l1574
 13106                           
 13107                           ; BSR set to: 0
 13108  001304  0EFF               	movlw	255
 13109  001306  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
 13110  001308  0EFF               	movlw	255
 13111  00130A  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13112  00130C  0EFF               	movlw	255
 13113  00130E  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13114  001310  0E01               	movlw	1
 13115  001312  276C               	addwf	___ftadd@f2& (0+255),f,b
 13116  001314  0E00               	movlw	0
 13117  001316  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13118  001318  0E00               	movlw	0
 13119  00131A  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13120  00131C                     l1574:
 13121                           
 13122                           ; BSR set to: 0
 13123                           
 13124                           ; BSR set to: 0
 13125  00131C  0E00               	movlw	0
 13126  00131E  6F72               	movwf	___ftadd@sign& (0+255),b
 13127                           
 13128                           ; BSR set to: 0
 13129  001320  5169               	movf	___ftadd@f1& (0+255),w,b
 13130  001322  276C               	addwf	___ftadd@f2& (0+255),f,b
 13131  001324  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
 13132  001326  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13133  001328  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
 13134  00132A  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13135                           
 13136                           ; BSR set to: 0
 13137  00132C  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13138  00132E  D00E               	goto	l1575
 13139                           
 13140                           ; BSR set to: 0
 13141  001330  0EFF               	movlw	255
 13142  001332  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
 13143  001334  0EFF               	movlw	255
 13144  001336  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13145  001338  0EFF               	movlw	255
 13146  00133A  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13147  00133C  0E01               	movlw	1
 13148  00133E  276C               	addwf	___ftadd@f2& (0+255),f,b
 13149  001340  0E00               	movlw	0
 13150  001342  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13151  001344  0E00               	movlw	0
 13152  001346  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 0
 13155  001348  0E01               	movlw	1
 13156  00134A  6F72               	movwf	___ftadd@sign& (0+255),b
 13157  00134C                     l1575:
 13158                           
 13159                           ; BSR set to: 0
 13160                           
 13161                           ; BSR set to: 0
 13162  00134C  C06C  F018         	movff	___ftadd@f2,___ftpack@arg
 13163  001350  C06D  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 13164  001354  C06E  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 13165  001358  C074  F01B         	movff	___ftadd@exp1,___ftpack@exp
 13166  00135C  C072  F01C         	movff	___ftadd@sign,___ftpack@sign
 13167  001360  ECF3  F00F         	call	___ftpack	;wreg free
 13168  001364  C018  F069         	movff	?___ftpack,?___ftadd
 13169  001368  C019  F06A         	movff	?___ftpack+1,?___ftadd+1
 13170  00136C  C01A  F06B         	movff	?___ftpack+2,?___ftadd+2
 13171  001370  0012               	return	
 13172  001372                     __end_of___ftadd:
 13173                           	opt stack 0
 13174                           tosu	equ	0xFFF
 13175                           tosh	equ	0xFFE
 13176                           tosl	equ	0xFFD
 13177                           pclath	equ	0xFFA
 13178                           tblptru	equ	0xFF8
 13179                           tblptrh	equ	0xFF7
 13180                           tblptrl	equ	0xFF6
 13181                           tablat	equ	0xFF5
 13182                           prodh	equ	0xFF4
 13183                           prodl	equ	0xFF3
 13184                           intcon	equ	0xFF2
 13185                           intcon2	equ	0xFF1
 13186                           postinc0	equ	0xFEE
 13187                           wreg	equ	0xFE8
 13188                           indf1	equ	0xFE7
 13189                           postdec1	equ	0xFE5
 13190                           fsr1h	equ	0xFE2
 13191                           fsr1l	equ	0xFE1
 13192                           indf2	equ	0xFDF
 13193                           postinc2	equ	0xFDE
 13194                           postdec2	equ	0xFDD
 13195                           fsr2h	equ	0xFDA
 13196                           fsr2l	equ	0xFD9
 13197                           status	equ	0xFD8
 13198                           
 13199 ;; *************** function ___ftneg *****************
 13200 ;; Defined at:
 13201 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 13202 ;; Parameters:    Size  Location     Type
 13203 ;;  f1              3   23[COMRAM] float 
 13204 ;; Auto vars:     Size  Location     Type
 13205 ;;		None
 13206 ;; Return value:  Size  Location     Type
 13207 ;;                  3   23[COMRAM] float 
 13208 ;; Registers used:
 13209 ;;		wreg, status,2, status,0
 13210 ;; Tracked objects:
 13211 ;;		On entry : 0/0
 13212 ;;		On exit  : 0/0
 13213 ;;		Unchanged: 0/0
 13214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13215 ;;      Params:         3       0       0       0       0       0       0
 13216 ;;      Locals:         0       0       0       0       0       0       0
 13217 ;;      Temps:          0       0       0       0       0       0       0
 13218 ;;      Totals:         3       0       0       0       0       0       0
 13219 ;;Total ram usage:        3 bytes
 13220 ;; Hardware stack levels used:    1
 13221 ;; Hardware stack levels required when called:    3
 13222 ;; This function calls:
 13223 ;;		Nothing
 13224 ;; This function is called by:
 13225 ;;		_pow
 13226 ;;		_exp
 13227 ;; This function uses a non-reentrant model
 13228 ;;
 13229                           
 13230                           	psect	text87
 13231  00300C                     __ptext87:
 13232                           	opt stack 0
 13233  00300C                     ___ftneg:
 13234                           	opt stack 22
 13235                           
 13236                           ;incstack = 0
 13237  00300C  5018               	movf	___ftneg@f1,w,c
 13238  00300E  1019               	iorwf	___ftneg@f1+1,w,c
 13239  003010  101A               	iorwf	___ftneg@f1+2,w,c
 13240  003012  B4D8               	btfsc	status,2,c
 13241  003014  D006               	goto	l1606
 13242  003016  0E00               	movlw	0
 13243  003018  1A18               	xorwf	___ftneg@f1,f,c
 13244  00301A  0E00               	movlw	0
 13245  00301C  1A19               	xorwf	___ftneg@f1+1,f,c
 13246  00301E  0E80               	movlw	128
 13247  003020  1A1A               	xorwf	___ftneg@f1+2,f,c
 13248  003022                     l1606:
 13249  003022  C018  F018         	movff	___ftneg@f1,?___ftneg
 13250  003026  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 13251  00302A  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 13252  00302E  0012               	return		;funcret
 13253  003030                     __end_of___ftneg:
 13254                           	opt stack 0
 13255                           tosu	equ	0xFFF
 13256                           tosh	equ	0xFFE
 13257                           tosl	equ	0xFFD
 13258                           pclath	equ	0xFFA
 13259                           tblptru	equ	0xFF8
 13260                           tblptrh	equ	0xFF7
 13261                           tblptrl	equ	0xFF6
 13262                           tablat	equ	0xFF5
 13263                           prodh	equ	0xFF4
 13264                           prodl	equ	0xFF3
 13265                           intcon	equ	0xFF2
 13266                           intcon2	equ	0xFF1
 13267                           postinc0	equ	0xFEE
 13268                           wreg	equ	0xFE8
 13269                           indf1	equ	0xFE7
 13270                           postdec1	equ	0xFE5
 13271                           fsr1h	equ	0xFE2
 13272                           fsr1l	equ	0xFE1
 13273                           indf2	equ	0xFDF
 13274                           postinc2	equ	0xFDE
 13275                           postdec2	equ	0xFDD
 13276                           fsr2h	equ	0xFDA
 13277                           fsr2l	equ	0xFD9
 13278                           status	equ	0xFD8
 13279                           
 13280 ;; *************** function ___ftdiv *****************
 13281 ;; Defined at:
 13282 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;  f1              3    9[BANK0 ] float 
 13285 ;;  f2              3   12[BANK0 ] float 
 13286 ;; Auto vars:     Size  Location     Type
 13287 ;;  f3              3   19[BANK0 ] float 
 13288 ;;  sign            1   23[BANK0 ] unsigned char 
 13289 ;;  exp             1   22[BANK0 ] unsigned char 
 13290 ;;  cntr            1   18[BANK0 ] unsigned char 
 13291 ;; Return value:  Size  Location     Type
 13292 ;;                  3    9[BANK0 ] float 
 13293 ;; Registers used:
 13294 ;;		wreg, status,2, status,0, cstack
 13295 ;; Tracked objects:
 13296 ;;		On entry : 0/0
 13297 ;;		On exit  : 0/0
 13298 ;;		Unchanged: 0/0
 13299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13300 ;;      Params:         0       6       0       0       0       0       0
 13301 ;;      Locals:         0       6       0       0       0       0       0
 13302 ;;      Temps:          0       3       0       0       0       0       0
 13303 ;;      Totals:         0      15       0       0       0       0       0
 13304 ;;Total ram usage:       15 bytes
 13305 ;; Hardware stack levels used:    1
 13306 ;; Hardware stack levels required when called:    4
 13307 ;; This function calls:
 13308 ;;		___ftpack
 13309 ;; This function is called by:
 13310 ;;		_AdcConvert
 13311 ;;		_CheckFlashPrecentage
 13312 ;;		_DacSetValue
 13313 ;;		_exp
 13314 ;; This function uses a non-reentrant model
 13315 ;;
 13316                           
 13317                           	psect	text88
 13318  001A20                     __ptext88:
 13319                           	opt stack 0
 13320  001A20                     ___ftdiv:
 13321                           	opt stack 21
 13322                           
 13323                           ;incstack = 0
 13324  001A20  C06B  F06F         	movff	___ftdiv@f1+2,??___ftdiv
 13325  001A24  0100               	movlb	0	; () banked
 13326  001A26  6B70               	clrf	(??___ftdiv+1)& (0+255),b
 13327  001A28  6B71               	clrf	(??___ftdiv+2)& (0+255),b
 13328  001A2A  356A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 13329  001A2C  376F               	rlcf	??___ftdiv& (0+255),f,b
 13330  001A2E  E301               	bnc	u5091
 13331  001A30  8170               	bsf	(??___ftdiv+1)& (0+255),0,b
 13332  001A32                     u5091:
 13333  001A32  516F               	movf	??___ftdiv& (0+255),w,b
 13334  001A34  6F76               	movwf	___ftdiv@exp& (0+255),b
 13335  001A36  5176               	movf	___ftdiv@exp& (0+255),w,b
 13336  001A38  A4D8               	btfss	status,2,c
 13337  001A3A  D007               	goto	l1580
 13338                           
 13339                           ; BSR set to: 0
 13340  001A3C  0E00               	movlw	0
 13341  001A3E  6F69               	movwf	?___ftdiv& (0+255),b
 13342  001A40  0E00               	movlw	0
 13343  001A42  6F6A               	movwf	(?___ftdiv+1)& (0+255),b
 13344  001A44  0E00               	movlw	0
 13345  001A46  6F6B               	movwf	(?___ftdiv+2)& (0+255),b
 13346                           
 13347                           ; BSR set to: 0
 13348  001A48  0012               	return	
 13349  001A4A                     l1580:
 13350                           
 13351                           ; BSR set to: 0
 13352                           
 13353                           ; BSR set to: 0
 13354  001A4A  C06E  F06F         	movff	___ftdiv@f2+2,??___ftdiv
 13355  001A4E  6B70               	clrf	(??___ftdiv+1)& (0+255),b
 13356  001A50  6B71               	clrf	(??___ftdiv+2)& (0+255),b
 13357  001A52  356D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 13358  001A54  376F               	rlcf	??___ftdiv& (0+255),f,b
 13359  001A56  E301               	bnc	u5111
 13360  001A58  8170               	bsf	(??___ftdiv+1)& (0+255),0,b
 13361  001A5A                     u5111:
 13362  001A5A  516F               	movf	??___ftdiv& (0+255),w,b
 13363  001A5C  6F77               	movwf	___ftdiv@sign& (0+255),b
 13364  001A5E  5177               	movf	___ftdiv@sign& (0+255),w,b
 13365  001A60  A4D8               	btfss	status,2,c
 13366  001A62  D007               	goto	l1582
 13367                           
 13368                           ; BSR set to: 0
 13369  001A64  0E00               	movlw	0
 13370  001A66  6F69               	movwf	?___ftdiv& (0+255),b
 13371  001A68  0E00               	movlw	0
 13372  001A6A  6F6A               	movwf	(?___ftdiv+1)& (0+255),b
 13373  001A6C  0E00               	movlw	0
 13374  001A6E  6F6B               	movwf	(?___ftdiv+2)& (0+255),b
 13375                           
 13376                           ; BSR set to: 0
 13377  001A70  0012               	return	
 13378  001A72                     l1582:
 13379                           
 13380                           ; BSR set to: 0
 13381                           
 13382                           ; BSR set to: 0
 13383  001A72  0E00               	movlw	0
 13384  001A74  6F73               	movwf	___ftdiv@f3& (0+255),b
 13385  001A76  0E00               	movlw	0
 13386  001A78  6F74               	movwf	(___ftdiv@f3+1)& (0+255),b
 13387  001A7A  0E00               	movlw	0
 13388  001A7C  6F75               	movwf	(___ftdiv@f3+2)& (0+255),b
 13389                           
 13390                           ; BSR set to: 0
 13391  001A7E  5177               	movf	___ftdiv@sign& (0+255),w,b
 13392  001A80  0F89               	addlw	137
 13393  001A82  5F76               	subwf	___ftdiv@exp& (0+255),f,b
 13394                           
 13395                           ; BSR set to: 0
 13396  001A84  C06B  F077         	movff	___ftdiv@f1+2,___ftdiv@sign
 13397                           
 13398                           ; BSR set to: 0
 13399  001A88  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13400  001A8A  1B77               	xorwf	___ftdiv@sign& (0+255),f,b
 13401                           
 13402                           ; BSR set to: 0
 13403  001A8C  0E80               	movlw	128
 13404  001A8E  1777               	andwf	___ftdiv@sign& (0+255),f,b
 13405                           
 13406                           ; BSR set to: 0
 13407  001A90  8F6A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 13408                           
 13409                           ; BSR set to: 0
 13410  001A92  0EFF               	movlw	255
 13411  001A94  1769               	andwf	___ftdiv@f1& (0+255),f,b
 13412  001A96  0EFF               	movlw	255
 13413  001A98  176A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 13414  001A9A  0E00               	movlw	0
 13415  001A9C  176B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 13416                           
 13417                           ; BSR set to: 0
 13418  001A9E  8F6D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 13419                           
 13420                           ; BSR set to: 0
 13421  001AA0  0EFF               	movlw	255
 13422  001AA2  176C               	andwf	___ftdiv@f2& (0+255),f,b
 13423  001AA4  0EFF               	movlw	255
 13424  001AA6  176D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 13425  001AA8  0E00               	movlw	0
 13426  001AAA  176E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 13427                           
 13428                           ; BSR set to: 0
 13429  001AAC  0E18               	movlw	24
 13430  001AAE  6F72               	movwf	___ftdiv@cntr& (0+255),b
 13431  001AB0                     
 13432                           ; BSR set to: 0
 13433                           
 13434                           ; BSR set to: 0
 13435  001AB0  90D8               	bcf	status,0,c
 13436  001AB2  3773               	rlcf	___ftdiv@f3& (0+255),f,b
 13437  001AB4  3774               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 13438  001AB6  3775               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 13439                           
 13440                           ; BSR set to: 0
 13441  001AB8  516C               	movf	___ftdiv@f2& (0+255),w,b
 13442  001ABA  5D69               	subwf	___ftdiv@f1& (0+255),w,b
 13443  001ABC  516D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 13444  001ABE  596A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 13445  001AC0  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13446  001AC2  596B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 13447  001AC4  A0D8               	btfss	status,0,c
 13448  001AC6  D007               	goto	l1584
 13449                           
 13450                           ; BSR set to: 0
 13451  001AC8  516C               	movf	___ftdiv@f2& (0+255),w,b
 13452  001ACA  5F69               	subwf	___ftdiv@f1& (0+255),f,b
 13453  001ACC  516D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 13454  001ACE  5B6A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 13455  001AD0  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 13456  001AD2  5B6B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 13457                           
 13458                           ; BSR set to: 0
 13459  001AD4  8173               	bsf	___ftdiv@f3& (0+255),0,b
 13460  001AD6                     l1584:
 13461                           
 13462                           ; BSR set to: 0
 13463  001AD6  90D8               	bcf	status,0,c
 13464  001AD8  3769               	rlcf	___ftdiv@f1& (0+255),f,b
 13465  001ADA  376A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 13466  001ADC  376B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 13467                           
 13468                           ; BSR set to: 0
 13469  001ADE  2F72               	decfsz	___ftdiv@cntr& (0+255),f,b
 13470  001AE0  D7E7               	goto	l1583
 13471                           
 13472                           ; BSR set to: 0
 13473                           
 13474                           ; BSR set to: 0
 13475  001AE2  C073  F018         	movff	___ftdiv@f3,___ftpack@arg
 13476  001AE6  C074  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13477  001AEA  C075  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13478  001AEE  C076  F01B         	movff	___ftdiv@exp,___ftpack@exp
 13479  001AF2  C077  F01C         	movff	___ftdiv@sign,___ftpack@sign
 13480  001AF6  ECF3  F00F         	call	___ftpack	;wreg free
 13481  001AFA  C018  F069         	movff	?___ftpack,?___ftdiv
 13482  001AFE  C019  F06A         	movff	?___ftpack+1,?___ftdiv+1
 13483  001B02  C01A  F06B         	movff	?___ftpack+2,?___ftdiv+2
 13484  001B06  0012               	return	
 13485  001B08                     __end_of___ftdiv:
 13486                           	opt stack 0
 13487                           tosu	equ	0xFFF
 13488                           tosh	equ	0xFFE
 13489                           tosl	equ	0xFFD
 13490                           pclath	equ	0xFFA
 13491                           tblptru	equ	0xFF8
 13492                           tblptrh	equ	0xFF7
 13493                           tblptrl	equ	0xFF6
 13494                           tablat	equ	0xFF5
 13495                           prodh	equ	0xFF4
 13496                           prodl	equ	0xFF3
 13497                           intcon	equ	0xFF2
 13498                           intcon2	equ	0xFF1
 13499                           postinc0	equ	0xFEE
 13500                           wreg	equ	0xFE8
 13501                           indf1	equ	0xFE7
 13502                           postdec1	equ	0xFE5
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           postdec2	equ	0xFDD
 13508                           fsr2h	equ	0xFDA
 13509                           fsr2l	equ	0xFD9
 13510                           status	equ	0xFD8
 13511                           
 13512 ;; *************** function ___awtoft *****************
 13513 ;; Defined at:
 13514 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 13515 ;; Parameters:    Size  Location     Type
 13516 ;;  c               2   31[COMRAM] int 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  sign            1   34[COMRAM] unsigned char 
 13519 ;; Return value:  Size  Location     Type
 13520 ;;                  3   31[COMRAM] float 
 13521 ;; Registers used:
 13522 ;;		wreg, status,2, status,0, cstack
 13523 ;; Tracked objects:
 13524 ;;		On entry : 0/0
 13525 ;;		On exit  : 0/0
 13526 ;;		Unchanged: 0/0
 13527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13528 ;;      Params:         3       0       0       0       0       0       0
 13529 ;;      Locals:         1       0       0       0       0       0       0
 13530 ;;      Temps:          0       0       0       0       0       0       0
 13531 ;;      Totals:         4       0       0       0       0       0       0
 13532 ;;Total ram usage:        4 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    4
 13535 ;; This function calls:
 13536 ;;		___ftpack
 13537 ;; This function is called by:
 13538 ;;		_DacSetValue
 13539 ;;		_UpdateTxFreq
 13540 ;;		_exp
 13541 ;;		_log
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           	psect	text89
 13546  002C7C                     __ptext89:
 13547                           	opt stack 0
 13548  002C7C                     ___awtoft:
 13549                           	opt stack 21
 13550                           
 13551                           ;incstack = 0
 13552  002C7C  0E00               	movlw	0
 13553  002C7E  6E23               	movwf	___awtoft@sign,c
 13554  002C80  AE21               	btfss	___awtoft@c+1,7,c
 13555  002C82  D006               	goto	l1497
 13556  002C84  6C20               	negf	___awtoft@c,c
 13557  002C86  1E21               	comf	___awtoft@c+1,f,c
 13558  002C88  B0D8               	btfsc	status,0,c
 13559  002C8A  2A21               	incf	___awtoft@c+1,f,c
 13560  002C8C  0E01               	movlw	1
 13561  002C8E  6E23               	movwf	___awtoft@sign,c
 13562  002C90                     l1497:
 13563  002C90  C020  F018         	movff	___awtoft@c,___ftpack@arg
 13564  002C94  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 13565  002C98  6A1A               	clrf	___ftpack@arg+2,c
 13566  002C9A  0E8E               	movlw	142
 13567  002C9C  6E1B               	movwf	___ftpack@exp,c
 13568  002C9E  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 13569  002CA2  ECF3  F00F         	call	___ftpack	;wreg free
 13570  002CA6  C018  F020         	movff	?___ftpack,?___awtoft
 13571  002CAA  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 13572  002CAE  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 13573  002CB2  0012               	return	
 13574  002CB4                     __end_of___awtoft:
 13575                           	opt stack 0
 13576                           tosu	equ	0xFFF
 13577                           tosh	equ	0xFFE
 13578                           tosl	equ	0xFFD
 13579                           pclath	equ	0xFFA
 13580                           tblptru	equ	0xFF8
 13581                           tblptrh	equ	0xFF7
 13582                           tblptrl	equ	0xFF6
 13583                           tablat	equ	0xFF5
 13584                           prodh	equ	0xFF4
 13585                           prodl	equ	0xFF3
 13586                           intcon	equ	0xFF2
 13587                           intcon2	equ	0xFF1
 13588                           postinc0	equ	0xFEE
 13589                           wreg	equ	0xFE8
 13590                           indf1	equ	0xFE7
 13591                           postdec1	equ	0xFE5
 13592                           fsr1h	equ	0xFE2
 13593                           fsr1l	equ	0xFE1
 13594                           indf2	equ	0xFDF
 13595                           postinc2	equ	0xFDE
 13596                           postdec2	equ	0xFDD
 13597                           fsr2h	equ	0xFDA
 13598                           fsr2l	equ	0xFD9
 13599                           status	equ	0xFD8
 13600                           
 13601 ;; *************** function ___lltoft *****************
 13602 ;; Defined at:
 13603 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 13604 ;; Parameters:    Size  Location     Type
 13605 ;;  c               4   31[COMRAM] unsigned long 
 13606 ;; Auto vars:     Size  Location     Type
 13607 ;;  exp             1   39[COMRAM] unsigned char 
 13608 ;; Return value:  Size  Location     Type
 13609 ;;                  3   31[COMRAM] float 
 13610 ;; Registers used:
 13611 ;;		wreg, status,2, status,0, cstack
 13612 ;; Tracked objects:
 13613 ;;		On entry : 0/0
 13614 ;;		On exit  : 0/0
 13615 ;;		Unchanged: 0/0
 13616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13617 ;;      Params:         4       0       0       0       0       0       0
 13618 ;;      Locals:         1       0       0       0       0       0       0
 13619 ;;      Temps:          4       0       0       0       0       0       0
 13620 ;;      Totals:         9       0       0       0       0       0       0
 13621 ;;Total ram usage:        9 bytes
 13622 ;; Hardware stack levels used:    1
 13623 ;; Hardware stack levels required when called:    4
 13624 ;; This function calls:
 13625 ;;		___ftpack
 13626 ;; This function is called by:
 13627 ;;		_CheckFlashPrecentage
 13628 ;;		_UpdateTxFreq
 13629 ;;		_pow
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           	psect	text90
 13634  002760                     __ptext90:
 13635                           	opt stack 0
 13636  002760                     ___lltoft:
 13637                           	opt stack 22
 13638                           
 13639                           ;incstack = 0
 13640  002760  0E8E               	movlw	142
 13641  002762  6E28               	movwf	___lltoft@exp,c
 13642  002764  D006               	goto	l1673
 13643  002766  90D8               	bcf	status,0,c
 13644  002768  3223               	rrcf	___lltoft@c+3,f,c
 13645  00276A  3222               	rrcf	___lltoft@c+2,f,c
 13646  00276C  3221               	rrcf	___lltoft@c+1,f,c
 13647  00276E  3220               	rrcf	___lltoft@c,f,c
 13648  002770  2A28               	incf	___lltoft@exp,f,c
 13649  002772                     l1673:
 13650  002772  0E00               	movlw	0
 13651  002774  1420               	andwf	___lltoft@c,w,c
 13652  002776  6E24               	movwf	??___lltoft& (0+255),c
 13653  002778  0E00               	movlw	0
 13654  00277A  1421               	andwf	___lltoft@c+1,w,c
 13655  00277C  6E25               	movwf	(??___lltoft+1)& (0+255),c
 13656  00277E  0E00               	movlw	0
 13657  002780  1422               	andwf	___lltoft@c+2,w,c
 13658  002782  6E26               	movwf	(??___lltoft+2)& (0+255),c
 13659  002784  0EFF               	movlw	255
 13660  002786  1423               	andwf	___lltoft@c+3,w,c
 13661  002788  6E27               	movwf	(??___lltoft+3)& (0+255),c
 13662  00278A  5024               	movf	??___lltoft,w,c
 13663  00278C  1025               	iorwf	??___lltoft+1,w,c
 13664  00278E  1026               	iorwf	??___lltoft+2,w,c
 13665  002790  1027               	iorwf	??___lltoft+3,w,c
 13666  002792  A4D8               	btfss	status,2,c
 13667  002794  D7E8               	goto	l1674
 13668  002796  C020  F018         	movff	___lltoft@c,___ftpack@arg
 13669  00279A  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 13670  00279E  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 13671  0027A2  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 13672  0027A6  0E00               	movlw	0
 13673  0027A8  6E1C               	movwf	___ftpack@sign,c
 13674  0027AA  ECF3  F00F         	call	___ftpack	;wreg free
 13675  0027AE  C018  F020         	movff	?___ftpack,?___lltoft
 13676  0027B2  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 13677  0027B6  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 13678  0027BA  0012               	return	
 13679  0027BC                     __end_of___lltoft:
 13680                           	opt stack 0
 13681                           tosu	equ	0xFFF
 13682                           tosh	equ	0xFFE
 13683                           tosl	equ	0xFFD
 13684                           pclath	equ	0xFFA
 13685                           tblptru	equ	0xFF8
 13686                           tblptrh	equ	0xFF7
 13687                           tblptrl	equ	0xFF6
 13688                           tablat	equ	0xFF5
 13689                           prodh	equ	0xFF4
 13690                           prodl	equ	0xFF3
 13691                           intcon	equ	0xFF2
 13692                           intcon2	equ	0xFF1
 13693                           postinc0	equ	0xFEE
 13694                           wreg	equ	0xFE8
 13695                           indf1	equ	0xFE7
 13696                           postdec1	equ	0xFE5
 13697                           fsr1h	equ	0xFE2
 13698                           fsr1l	equ	0xFE1
 13699                           indf2	equ	0xFDF
 13700                           postinc2	equ	0xFDE
 13701                           postdec2	equ	0xFDD
 13702                           fsr2h	equ	0xFDA
 13703                           fsr2l	equ	0xFD9
 13704                           status	equ	0xFD8
 13705                           
 13706 ;; *************** function ___lwtoft *****************
 13707 ;; Defined at:
 13708 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 13709 ;; Parameters:    Size  Location     Type
 13710 ;;  c               2   31[COMRAM] unsigned int 
 13711 ;; Auto vars:     Size  Location     Type
 13712 ;;		None
 13713 ;; Return value:  Size  Location     Type
 13714 ;;                  3   31[COMRAM] float 
 13715 ;; Registers used:
 13716 ;;		wreg, status,2, status,0, cstack
 13717 ;; Tracked objects:
 13718 ;;		On entry : 0/0
 13719 ;;		On exit  : 0/0
 13720 ;;		Unchanged: 0/0
 13721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13722 ;;      Params:         3       0       0       0       0       0       0
 13723 ;;      Locals:         0       0       0       0       0       0       0
 13724 ;;      Temps:          0       0       0       0       0       0       0
 13725 ;;      Totals:         3       0       0       0       0       0       0
 13726 ;;Total ram usage:        3 bytes
 13727 ;; Hardware stack levels used:    1
 13728 ;; Hardware stack levels required when called:    4
 13729 ;; This function calls:
 13730 ;;		___ftpack
 13731 ;; This function is called by:
 13732 ;;		_AdcConvert
 13733 ;; This function uses a non-reentrant model
 13734 ;;
 13735                           
 13736                           	psect	text91
 13737  003030                     __ptext91:
 13738                           	opt stack 0
 13739  003030                     ___lwtoft:
 13740                           	opt stack 25
 13741                           
 13742                           ;incstack = 0
 13743  003030  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 13744  003034  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 13745  003038  6A1A               	clrf	___ftpack@arg+2,c
 13746  00303A  0E8E               	movlw	142
 13747  00303C  6E1B               	movwf	___ftpack@exp,c
 13748  00303E  0E00               	movlw	0
 13749  003040  6E1C               	movwf	___ftpack@sign,c
 13750  003042  ECF3  F00F         	call	___ftpack	;wreg free
 13751  003046  C018  F020         	movff	?___ftpack,?___lwtoft
 13752  00304A  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 13753  00304E  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 13754  003052  0012               	return	
 13755  003054                     __end_of___lwtoft:
 13756                           	opt stack 0
 13757                           tosu	equ	0xFFF
 13758                           tosh	equ	0xFFE
 13759                           tosl	equ	0xFFD
 13760                           pclath	equ	0xFFA
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           postinc0	equ	0xFEE
 13770                           wreg	equ	0xFE8
 13771                           indf1	equ	0xFE7
 13772                           postdec1	equ	0xFE5
 13773                           fsr1h	equ	0xFE2
 13774                           fsr1l	equ	0xFE1
 13775                           indf2	equ	0xFDF
 13776                           postinc2	equ	0xFDE
 13777                           postdec2	equ	0xFDD
 13778                           fsr2h	equ	0xFDA
 13779                           fsr2l	equ	0xFD9
 13780                           status	equ	0xFD8
 13781                           
 13782 ;; *************** function ___ftpack *****************
 13783 ;; Defined at:
 13784 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  arg             3   23[COMRAM] unsigned um
 13787 ;;  exp             1   26[COMRAM] unsigned char 
 13788 ;;  sign            1   27[COMRAM] unsigned char 
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;		None
 13791 ;; Return value:  Size  Location     Type
 13792 ;;                  3   23[COMRAM] float 
 13793 ;; Registers used:
 13794 ;;		wreg, status,2, status,0
 13795 ;; Tracked objects:
 13796 ;;		On entry : 0/0
 13797 ;;		On exit  : 0/0
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13800 ;;      Params:         5       0       0       0       0       0       0
 13801 ;;      Locals:         0       0       0       0       0       0       0
 13802 ;;      Temps:          3       0       0       0       0       0       0
 13803 ;;      Totals:         8       0       0       0       0       0       0
 13804 ;;Total ram usage:        8 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    3
 13807 ;; This function calls:
 13808 ;;		Nothing
 13809 ;; This function is called by:
 13810 ;;		___altoft
 13811 ;;		___awtoft
 13812 ;;		___ftadd
 13813 ;;		___ftdiv
 13814 ;;		___ftmul
 13815 ;;		___lbtoft
 13816 ;;		___lltoft
 13817 ;;		___lwtoft
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           	psect	text92
 13822  001FE6                     __ptext92:
 13823                           	opt stack 0
 13824  001FE6                     ___ftpack:
 13825                           	opt stack 20
 13826                           
 13827                           ;incstack = 0
 13828  001FE6  501B               	movf	___ftpack@exp,w,c
 13829  001FE8  B4D8               	btfsc	status,2,c
 13830  001FEA  D005               	goto	u4560
 13831  001FEC  5018               	movf	___ftpack@arg,w,c
 13832  001FEE  1019               	iorwf	___ftpack@arg+1,w,c
 13833  001FF0  101A               	iorwf	___ftpack@arg+2,w,c
 13834  001FF2  A4D8               	btfss	status,2,c
 13835  001FF4  D00C               	goto	l1516
 13836  001FF6                     u4560:
 13837  001FF6  0E00               	movlw	0
 13838  001FF8  6E18               	movwf	?___ftpack,c
 13839  001FFA  0E00               	movlw	0
 13840  001FFC  6E19               	movwf	?___ftpack+1,c
 13841  001FFE  0E00               	movlw	0
 13842  002000  6E1A               	movwf	?___ftpack+2,c
 13843  002002  0012               	return	
 13844  002004  2A1B               	incf	___ftpack@exp,f,c
 13845  002006  90D8               	bcf	status,0,c
 13846  002008  321A               	rrcf	___ftpack@arg+2,f,c
 13847  00200A  3219               	rrcf	___ftpack@arg+1,f,c
 13848  00200C  3218               	rrcf	___ftpack@arg,f,c
 13849  00200E                     l1516:
 13850  00200E  0E00               	movlw	0
 13851  002010  1418               	andwf	___ftpack@arg,w,c
 13852  002012  6E1D               	movwf	??___ftpack& (0+255),c
 13853  002014  0E00               	movlw	0
 13854  002016  1419               	andwf	___ftpack@arg+1,w,c
 13855  002018  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 13856  00201A  0EFE               	movlw	254
 13857  00201C  141A               	andwf	___ftpack@arg+2,w,c
 13858  00201E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 13859  002020  501D               	movf	??___ftpack,w,c
 13860  002022  101E               	iorwf	??___ftpack+1,w,c
 13861  002024  101F               	iorwf	??___ftpack+2,w,c
 13862  002026  B4D8               	btfsc	status,2,c
 13863  002028  D00C               	goto	l1519
 13864  00202A  D7EC               	goto	l1517
 13865  00202C  2A1B               	incf	___ftpack@exp,f,c
 13866  00202E  0E01               	movlw	1
 13867  002030  2618               	addwf	___ftpack@arg,f,c
 13868  002032  0E00               	movlw	0
 13869  002034  2219               	addwfc	___ftpack@arg+1,f,c
 13870  002036  0E00               	movlw	0
 13871  002038  221A               	addwfc	___ftpack@arg+2,f,c
 13872  00203A  90D8               	bcf	status,0,c
 13873  00203C  321A               	rrcf	___ftpack@arg+2,f,c
 13874  00203E  3219               	rrcf	___ftpack@arg+1,f,c
 13875  002040  3218               	rrcf	___ftpack@arg,f,c
 13876  002042                     l1519:
 13877  002042  0E00               	movlw	0
 13878  002044  1418               	andwf	___ftpack@arg,w,c
 13879  002046  6E1D               	movwf	??___ftpack& (0+255),c
 13880  002048  0E00               	movlw	0
 13881  00204A  1419               	andwf	___ftpack@arg+1,w,c
 13882  00204C  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 13883  00204E  0EFF               	movlw	255
 13884  002050  141A               	andwf	___ftpack@arg+2,w,c
 13885  002052  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 13886  002054  501D               	movf	??___ftpack,w,c
 13887  002056  101E               	iorwf	??___ftpack+1,w,c
 13888  002058  101F               	iorwf	??___ftpack+2,w,c
 13889  00205A  B4D8               	btfsc	status,2,c
 13890  00205C  D006               	goto	l1522
 13891  00205E  D7E6               	goto	l1520
 13892  002060  061B               	decf	___ftpack@exp,f,c
 13893  002062  90D8               	bcf	status,0,c
 13894  002064  3618               	rlcf	___ftpack@arg,f,c
 13895  002066  3619               	rlcf	___ftpack@arg+1,f,c
 13896  002068  361A               	rlcf	___ftpack@arg+2,f,c
 13897  00206A                     l1522:
 13898  00206A  BE19               	btfsc	___ftpack@arg+1,7,c
 13899  00206C  D003               	goto	u4600
 13900  00206E  0E02               	movlw	2
 13901  002070  601B               	cpfslt	___ftpack@exp,c
 13902  002072  D7F6               	goto	l1523
 13903  002074                     u4600:
 13904  002074  A01B               	btfss	___ftpack@exp,0,c
 13905  002076  9E19               	bcf	___ftpack@arg+1,7,c
 13906  002078  90D8               	bcf	status,0,c
 13907  00207A  321B               	rrcf	___ftpack@exp,f,c
 13908  00207C  501B               	movf	___ftpack@exp,w,c
 13909  00207E  121A               	iorwf	___ftpack@arg+2,f,c
 13910  002080  501C               	movf	___ftpack@sign,w,c
 13911  002082  A4D8               	btfss	status,2,c
 13912  002084  8E1A               	bsf	___ftpack@arg+2,7,c
 13913  002086  C018  F018         	movff	___ftpack@arg,?___ftpack
 13914  00208A  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 13915  00208E  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 13916  002092  0012               	return	
 13917  002094                     __end_of___ftpack:
 13918                           	opt stack 0
 13919                           tosu	equ	0xFFF
 13920                           tosh	equ	0xFFE
 13921                           tosl	equ	0xFFD
 13922                           pclath	equ	0xFFA
 13923                           tblptru	equ	0xFF8
 13924                           tblptrh	equ	0xFF7
 13925                           tblptrl	equ	0xFF6
 13926                           tablat	equ	0xFF5
 13927                           prodh	equ	0xFF4
 13928                           prodl	equ	0xFF3
 13929                           intcon	equ	0xFF2
 13930                           intcon2	equ	0xFF1
 13931                           postinc0	equ	0xFEE
 13932                           wreg	equ	0xFE8
 13933                           indf1	equ	0xFE7
 13934                           postdec1	equ	0xFE5
 13935                           fsr1h	equ	0xFE2
 13936                           fsr1l	equ	0xFE1
 13937                           indf2	equ	0xFDF
 13938                           postinc2	equ	0xFDE
 13939                           postdec2	equ	0xFDD
 13940                           fsr2h	equ	0xFDA
 13941                           fsr2l	equ	0xFD9
 13942                           status	equ	0xFD8
 13943                           
 13944 ;; *************** function _FlashSampleWrite *****************
 13945 ;; Defined at:
 13946 ;;		line 29 in file "FlashApp.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;  sampleData      2   44[COMRAM] unsigned int 
 13949 ;;  channelNum      1   46[COMRAM] unsigned char 
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 13952 ;; Return value:  Size  Location     Type
 13953 ;;                  1    wreg      void 
 13954 ;; Registers used:
 13955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13961 ;;      Params:         3       0       0       0       0       0       0
 13962 ;;      Locals:         0       2       0       0       0       0       0
 13963 ;;      Temps:          0       2       0       0       0       0       0
 13964 ;;      Totals:         3       4       0       0       0       0       0
 13965 ;;Total ram usage:        7 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    5
 13968 ;; This function calls:
 13969 ;;		_FLASH_IsWriteDone
 13970 ;;		_FLASH_WriteBlock
 13971 ;; This function is called by:
 13972 ;;		_AdcConvert
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text93
 13977  001738                     __ptext93:
 13978                           	opt stack 0
 13979  001738                     _FlashSampleWrite:
 13980                           	opt stack 24
 13981                           
 13982                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 13983                           
 13984                           ;incstack = 0
 13985  001738  502F               	movf	FlashSampleWrite@channelNum,w,c
 13986  00173A  0100               	movlb	0	; () banked
 13987  00173C  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 13988  00173E  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 13989  001740  0E0C               	movlw	12
 13990  001742                     u6105:
 13991  001742  90D8               	bcf	status,0,c
 13992  001744  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 13993  001746  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 13994  001748  2EE8               	decfsz	wreg,f,c
 13995  00174A  D7FB               	goto	u6105
 13996  00174C  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 13997  001750  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 13998                           
 13999                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 14000  001754  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 14001  001756  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 14002  001758  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 14003  00175A  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 14007  00175C  90D8               	bcf	status,0,c
 14008  00175E  35D9               	rlcf	_sampleCount& (0+255),w,b
 14009  001760  6ED9               	movwf	fsr2l,c
 14010  001762  35DA               	rlcf	(_sampleCount+1)& (0+255),w,b
 14011  001764  6EDA               	movwf	fsr2h,c
 14012  001766  0E6E               	movlw	low _sampleArray
 14013  001768  26D9               	addwf	fsr2l,f,c
 14014  00176A  0E01               	movlw	high _sampleArray
 14015  00176C  22DA               	addwfc	fsr2h,f,c
 14016  00176E  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 14017  001772  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;FlashApp.c: 35: sampleCount ++;
 14021  001776  4BD9               	infsnz	_sampleCount& (0+255),f,b
 14022  001778  2BDA               	incf	(_sampleCount+1)& (0+255),f,b
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 14026  00177A  C0D9  F060         	movff	_sampleCount,??_FlashSampleWrite
 14027  00177E  C0DA  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 14028  001782  90D8               	bcf	status,0,c
 14029  001784  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 14030  001786  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 14031  001788  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 14032  00178A  E104               	bnz	u6110
 14033  00178C  0E40               	movlw	64
 14034  00178E  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 14035  001790  A0D8               	btfss	status,0,c
 14036  001792  0012               	return	
 14037  001794                     u6110:
 14038                           
 14039                           ; BSR set to: 0
 14040  001794  EC04  F019         	call	_FLASH_IsWriteDone	;wreg free
 14041  001798  0900               	iorlw	0
 14042  00179A  B4D8               	btfsc	status,2,c
 14043  00179C  0012               	return	
 14044                           
 14045                           ;FlashApp.c: 38: {
 14046                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 14047  00179E  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 14048  0017A2  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 14049  0017A6  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 14050  0017AA  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 14051  0017AE  0E6E               	movlw	low _sampleArray
 14052  0017B0  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 14053  0017B2  0E01               	movlw	high _sampleArray
 14054  0017B4  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 14055  0017B6  EC95  F00F         	call	_FLASH_WriteBlock	;wreg free
 14056                           
 14057                           ;FlashApp.c: 40: writeAddress += (64);
 14058  0017BA  0E40               	movlw	64
 14059  0017BC  2642               	addwf	_writeAddress,f,c
 14060  0017BE  0E00               	movlw	0
 14061  0017C0  2243               	addwfc	_writeAddress+1,f,c
 14062  0017C2  2244               	addwfc	_writeAddress+2,f,c
 14063  0017C4  2245               	addwfc	_writeAddress+3,f,c
 14064                           
 14065                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 14066  0017C6  5045               	movf	_writeAddress+3,w,c
 14067  0017C8  1044               	iorwf	_writeAddress+2,w,c
 14068  0017CA  E106               	bnz	u6130
 14069  0017CC  0EF0               	movlw	240
 14070  0017CE  5C42               	subwf	_writeAddress,w,c
 14071  0017D0  0E7F               	movlw	127
 14072  0017D2  5843               	subwfb	_writeAddress+1,w,c
 14073  0017D4  A0D8               	btfss	status,0,c
 14074  0017D6  D018               	goto	l275
 14075  0017D8                     u6130:
 14076                           
 14077                           ;FlashApp.c: 42: {
 14078                           ;FlashApp.c: 43: writeAddress = 0x4000;
 14079  0017D8  0E00               	movlw	0
 14080  0017DA  6E42               	movwf	_writeAddress,c
 14081  0017DC  0E40               	movlw	64
 14082  0017DE  6E43               	movwf	_writeAddress+1,c
 14083  0017E0  0E00               	movlw	0
 14084  0017E2  6E44               	movwf	_writeAddress+2,c
 14085  0017E4  0E00               	movlw	0
 14086  0017E6  6E45               	movwf	_writeAddress+3,c
 14087                           
 14088                           ;FlashApp.c: 44: isReWriteDone = 1;
 14089  0017E8  0E01               	movlw	1
 14090  0017EA  6E3B               	movwf	_isReWriteDone,c
 14091                           
 14092                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 14093  0017EC  0E40               	movlw	64
 14094  0017EE  0100               	movlb	0	; () banked
 14095  0017F0  19F7               	xorwf	(_readAddress+1)& (0+255),w,b
 14096  0017F2  11F6               	iorwf	_readAddress& (0+255),w,b
 14097  0017F4  11F8               	iorwf	(_readAddress+2)& (0+255),w,b
 14098  0017F6  11F9               	iorwf	(_readAddress+3)& (0+255),w,b
 14099  0017F8  A4D8               	btfss	status,2,c
 14100  0017FA  D006               	goto	l275
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;FlashApp.c: 46: {
 14104                           ;FlashApp.c: 47: readAddress += (64);
 14105  0017FC  0E40               	movlw	64
 14106  0017FE  27F6               	addwf	_readAddress& (0+255),f,b
 14107  001800  0E00               	movlw	0
 14108  001802  23F7               	addwfc	(_readAddress+1)& (0+255),f,b
 14109  001804  23F8               	addwfc	(_readAddress+2)& (0+255),f,b
 14110  001806  23F9               	addwfc	(_readAddress+3)& (0+255),f,b
 14111  001808                     l275:
 14112                           
 14113                           ;FlashApp.c: 48: }
 14114                           ;FlashApp.c: 49: }
 14115                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 14116                           
 14117                           ; BSR set to: 0
 14118  001808  0431               	decf	_numOfValidateSamples,w,c
 14119  00180A  0EFF               	movlw	255
 14120  00180C  5832               	subwfb	_numOfValidateSamples+1,w,c
 14121  00180E  0EFF               	movlw	255
 14122  001810  5833               	subwfb	_numOfValidateSamples+2,w,c
 14123  001812  0EFF               	movlw	255
 14124  001814  5834               	subwfb	_numOfValidateSamples+3,w,c
 14125  001816  B0D8               	btfsc	status,0,c
 14126  001818  D006               	goto	l276
 14127                           
 14128                           ;FlashApp.c: 52: {
 14129                           ;FlashApp.c: 53: numOfValidateSamples++;
 14130  00181A  0E01               	movlw	1
 14131  00181C  2631               	addwf	_numOfValidateSamples,f,c
 14132  00181E  0E00               	movlw	0
 14133  001820  2232               	addwfc	_numOfValidateSamples+1,f,c
 14134  001822  2233               	addwfc	_numOfValidateSamples+2,f,c
 14135  001824  2234               	addwfc	_numOfValidateSamples+3,f,c
 14136  001826                     l276:
 14137                           
 14138                           ;FlashApp.c: 54: }
 14139                           ;FlashApp.c: 55: sampleCount = 0;
 14140  001826  0E00               	movlw	0
 14141  001828  0100               	movlb	0	; () banked
 14142  00182A  6FDA               	movwf	(_sampleCount+1)& (0+255),b
 14143  00182C  0E00               	movlw	0
 14144  00182E  6FD9               	movwf	_sampleCount& (0+255),b
 14145  001830  0012               	return	
 14146  001832                     __end_of_FlashSampleWrite:
 14147                           	opt stack 0
 14148                           tosu	equ	0xFFF
 14149                           tosh	equ	0xFFE
 14150                           tosl	equ	0xFFD
 14151                           pclath	equ	0xFFA
 14152                           tblptru	equ	0xFF8
 14153                           tblptrh	equ	0xFF7
 14154                           tblptrl	equ	0xFF6
 14155                           tablat	equ	0xFF5
 14156                           prodh	equ	0xFF4
 14157                           prodl	equ	0xFF3
 14158                           intcon	equ	0xFF2
 14159                           intcon2	equ	0xFF1
 14160                           postinc0	equ	0xFEE
 14161                           wreg	equ	0xFE8
 14162                           indf1	equ	0xFE7
 14163                           postdec1	equ	0xFE5
 14164                           fsr1h	equ	0xFE2
 14165                           fsr1l	equ	0xFE1
 14166                           indf2	equ	0xFDF
 14167                           postinc2	equ	0xFDE
 14168                           postdec2	equ	0xFDD
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8
 14172                           
 14173 ;; *************** function _FLASH_WriteBlock *****************
 14174 ;; Defined at:
 14175 ;;		line 93 in file "mcc_generated_files/memory.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  writeAddr       4   28[COMRAM] unsigned long 
 14178 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 14179 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 14182 ;;  i               1   43[COMRAM] unsigned char 
 14183 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;                  1    wreg      char 
 14186 ;; Registers used:
 14187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14193 ;;      Params:         6       0       0       0       0       0       0
 14194 ;;      Locals:         6       0       0       0       0       0       0
 14195 ;;      Temps:          4       0       0       0       0       0       0
 14196 ;;      Totals:        16       0       0       0       0       0       0
 14197 ;;Total ram usage:       16 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    4
 14200 ;; This function calls:
 14201 ;;		_FLASH_EraseBlock
 14202 ;; This function is called by:
 14203 ;;		_FlashSampleWrite
 14204 ;;		_FlashTest
 14205 ;;		_FLASH_WriteByte
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text94
 14210  001F2A                     __ptext94:
 14211                           	opt stack 0
 14212  001F2A                     _FLASH_WriteBlock:
 14213                           	opt stack 24
 14214                           
 14215                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 14216                           
 14217                           ;incstack = 0
 14218  001F2A  0EC0               	movlw	192
 14219  001F2C  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 14220  001F2E  0E7F               	movlw	127
 14221  001F30  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 14222  001F32  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 14223  001F36  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 14224  001F3A  5023               	movf	??_FLASH_WriteBlock,w,c
 14225  001F3C  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 14226  001F3E  5024               	movf	??_FLASH_WriteBlock+1,w,c
 14227  001F40  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 14228  001F42  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 14229  001F46  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 14230  001F4A  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 14231  001F4C  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 14232                           
 14233                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 14234  001F4E  0E00               	movlw	0
 14235  001F50  BEF2               	btfsc	intcon,7,c	;volatile
 14236  001F52  0E01               	movlw	1
 14237  001F54  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 14238                           
 14239                           ;memory.c: 97: uint8_t i;
 14240                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 14241  001F56  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 14242  001F58  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 14243  001F5A  E144               	bnz	l837
 14244  001F5C  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 14245  001F5E  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 14246  001F60  E141               	bnz	l837
 14247  001F62  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 14248  001F64  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 14249  001F66  E13E               	bnz	l837
 14250  001F68  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 14251  001F6A  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 14252  001F6C  A4D8               	btfss	status,2,c
 14253  001F6E  0012               	return	
 14254                           
 14255                           ;memory.c: 103: }
 14256                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 14257                           
 14258                           ;memory.c: 101: {
 14259                           ;memory.c: 102: return -1;
 14260                           ;	Return value of _FLASH_WriteBlock is never used
 14261  001F70  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 14262  001F74  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 14263  001F78  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 14264  001F7C  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 14265  001F80  EC16  F017         	call	_FLASH_EraseBlock	;wreg free
 14266                           
 14267                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 14268  001F84  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 14269                           
 14270                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 14271  001F88  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 14272                           
 14273                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 14274  001F8C  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 14275                           
 14276                           ;memory.c: 114: for (i=0; i<(64); i++)
 14277  001F90  0E00               	movlw	0
 14278  001F92  6E2C               	movwf	FLASH_WriteBlock@i,c
 14279  001F94                     l6512:
 14280  001F94  0E3F               	movlw	63
 14281  001F96  642C               	cpfsgt	FLASH_WriteBlock@i,c
 14282  001F98  D001               	goto	l838
 14283  001F9A  D013               	goto	u5680
 14284  001F9C                     l838:
 14285                           
 14286                           ;memory.c: 115: {
 14287                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 14288  001F9C  502C               	movf	FLASH_WriteBlock@i,w,c
 14289  001F9E  0D01               	mullw	1
 14290  001FA0  50F3               	movf	prodl,w,c
 14291  001FA2  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 14292  001FA4  6ED9               	movwf	fsr2l,c
 14293  001FA6  50F4               	movf	prodh,w,c
 14294  001FA8  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 14295  001FAA  6EDA               	movwf	fsr2h,c
 14296  001FAC  50DF               	movf	indf2,w,c
 14297  001FAE  6EF5               	movwf	tablat,c	;volatile
 14298                           
 14299                           ;memory.c: 118: if (i == ((64)-1))
 14300  001FB0  0E3F               	movlw	63
 14301  001FB2  182C               	xorwf	FLASH_WriteBlock@i,w,c
 14302  001FB4  A4D8               	btfss	status,2,c
 14303  001FB6  D002               	goto	l840
 14304  001FB8  000C               	tblwt		*	;# 
 14305                           
 14306                           ;memory.c: 121: }
 14307  001FBA  D001               	goto	l841
 14308  001FBC                     l840:
 14309  001FBC  000D               	tblwt		*+	;# 
 14310  001FBE                     l841:
 14311  001FBE  2A2C               	incf	FLASH_WriteBlock@i,f,c
 14312  001FC0  D7E9               	goto	l6512
 14313  001FC2                     u5680:
 14314                           
 14315                           ;memory.c: 125: }
 14316                           ;memory.c: 126: }
 14317                           ;memory.c: 128: PIR2bits.EEIF = 1;
 14318  001FC2  88A1               	bsf	4001,4,c	;volatile
 14319                           
 14320                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 14321  001FC4  8EA6               	bsf	4006,7,c	;volsfr
 14322                           
 14323                           ;memory.c: 130: EECON1bits.CFGS = 0;
 14324  001FC6  9CA6               	bcf	4006,6,c	;volsfr
 14325                           
 14326                           ;memory.c: 131: EECON1bits.WREN = 1;
 14327  001FC8  84A6               	bsf	4006,2,c	;volsfr
 14328                           
 14329                           ;memory.c: 132: INTCONbits.GIE = 0;
 14330  001FCA  9EF2               	bcf	intcon,7,c	;volatile
 14331                           
 14332                           ;memory.c: 133: EECON2 = 0x55;
 14333  001FCC  0E55               	movlw	85
 14334  001FCE  6EA7               	movwf	4007,c	;volsfr
 14335                           
 14336                           ;memory.c: 134: EECON2 = 0xAA;
 14337  001FD0  0EAA               	movlw	170
 14338  001FD2  6EA7               	movwf	4007,c	;volsfr
 14339                           
 14340                           ;memory.c: 135: EECON1bits.WR = 1;
 14341  001FD4  82A6               	bsf	4006,1,c	;volsfr
 14342                           
 14343                           ;memory.c: 137: EECON1bits.WREN = 0;
 14344  001FD6  94A6               	bcf	4006,2,c	;volsfr
 14345                           
 14346                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 14347  001FD8  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 14348  001FDA  D002               	bra	u5695
 14349  001FDC  9EF2               	bcf	intcon,7,c	;volatile
 14350  001FDE  D001               	bra	u5696
 14351  001FE0                     u5695:
 14352  001FE0  8EF2               	bsf	intcon,7,c	;volatile
 14353  001FE2                     u5696:
 14354  001FE2  0012               	return	
 14355  001FE4                     l837:
 14356  001FE4  0012               	return		;funcret
 14357  001FE6                     __end_of_FLASH_WriteBlock:
 14358                           	opt stack 0
 14359                           tosu	equ	0xFFF
 14360                           tosh	equ	0xFFE
 14361                           tosl	equ	0xFFD
 14362                           pclath	equ	0xFFA
 14363                           tblptru	equ	0xFF8
 14364                           tblptrh	equ	0xFF7
 14365                           tblptrl	equ	0xFF6
 14366                           tablat	equ	0xFF5
 14367                           prodh	equ	0xFF4
 14368                           prodl	equ	0xFF3
 14369                           intcon	equ	0xFF2
 14370                           intcon2	equ	0xFF1
 14371                           postinc0	equ	0xFEE
 14372                           wreg	equ	0xFE8
 14373                           indf1	equ	0xFE7
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           fsr2h	equ	0xFDA
 14381                           fsr2l	equ	0xFD9
 14382                           status	equ	0xFD8
 14383                           
 14384 ;; *************** function _FLASH_EraseBlock *****************
 14385 ;; Defined at:
 14386 ;;		line 144 in file "mcc_generated_files/memory.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;  baseAddr        4   23[COMRAM] unsigned long 
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  1    wreg      void 
 14393 ;; Registers used:
 14394 ;;		wreg, status,2
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14400 ;;      Params:         4       0       0       0       0       0       0
 14401 ;;      Locals:         1       0       0       0       0       0       0
 14402 ;;      Temps:          0       0       0       0       0       0       0
 14403 ;;      Totals:         5       0       0       0       0       0       0
 14404 ;;Total ram usage:        5 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    3
 14407 ;; This function calls:
 14408 ;;		Nothing
 14409 ;; This function is called by:
 14410 ;;		_FLASH_WriteBlock
 14411 ;; This function uses a non-reentrant model
 14412 ;;
 14413                           
 14414                           	psect	text95
 14415  002E2C                     __ptext95:
 14416                           	opt stack 0
 14417  002E2C                     _FLASH_EraseBlock:
 14418                           	opt stack 24
 14419                           
 14420                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 14421                           
 14422                           ;incstack = 0
 14423  002E2C  0E00               	movlw	0
 14424  002E2E  BEF2               	btfsc	intcon,7,c	;volatile
 14425  002E30  0E01               	movlw	1
 14426  002E32  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 14427                           
 14428                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 14429  002E34  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 14430                           
 14431                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 14432  002E38  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 14433                           
 14434                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 14435  002E3C  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 14436                           
 14437                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 14438  002E40  8EA6               	bsf	4006,7,c	;volsfr
 14439                           
 14440                           ;memory.c: 153: EECON1bits.CFGS = 0;
 14441  002E42  9CA6               	bcf	4006,6,c	;volsfr
 14442                           
 14443                           ;memory.c: 154: EECON1bits.WREN = 1;
 14444  002E44  84A6               	bsf	4006,2,c	;volsfr
 14445                           
 14446                           ;memory.c: 155: EECON1bits.FREE = 1;
 14447  002E46  88A6               	bsf	4006,4,c	;volsfr
 14448                           
 14449                           ;memory.c: 156: INTCONbits.GIE = 0;
 14450  002E48  9EF2               	bcf	intcon,7,c	;volatile
 14451                           
 14452                           ;memory.c: 157: EECON2 = 0x55;
 14453  002E4A  0E55               	movlw	85
 14454  002E4C  6EA7               	movwf	4007,c	;volsfr
 14455                           
 14456                           ;memory.c: 158: EECON2 = 0xAA;
 14457  002E4E  0EAA               	movlw	170
 14458  002E50  6EA7               	movwf	4007,c	;volsfr
 14459                           
 14460                           ;memory.c: 159: EECON1bits.WR = 1;
 14461  002E52  82A6               	bsf	4006,1,c	;volsfr
 14462                           
 14463                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 14464  002E54  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 14465  002E56  D002               	bra	u5555
 14466  002E58  9EF2               	bcf	intcon,7,c	;volatile
 14467  002E5A  D001               	bra	u5556
 14468  002E5C                     u5555:
 14469  002E5C  8EF2               	bsf	intcon,7,c	;volatile
 14470  002E5E                     u5556:
 14471  002E5E  0012               	return		;funcret
 14472  002E60                     __end_of_FLASH_EraseBlock:
 14473                           	opt stack 0
 14474                           tosu	equ	0xFFF
 14475                           tosh	equ	0xFFE
 14476                           tosl	equ	0xFFD
 14477                           pclath	equ	0xFFA
 14478                           tblptru	equ	0xFF8
 14479                           tblptrh	equ	0xFF7
 14480                           tblptrl	equ	0xFF6
 14481                           tablat	equ	0xFF5
 14482                           prodh	equ	0xFF4
 14483                           prodl	equ	0xFF3
 14484                           intcon	equ	0xFF2
 14485                           intcon2	equ	0xFF1
 14486                           postinc0	equ	0xFEE
 14487                           wreg	equ	0xFE8
 14488                           indf1	equ	0xFE7
 14489                           postdec1	equ	0xFE5
 14490                           fsr1h	equ	0xFE2
 14491                           fsr1l	equ	0xFE1
 14492                           indf2	equ	0xFDF
 14493                           postinc2	equ	0xFDE
 14494                           postdec2	equ	0xFDD
 14495                           fsr2h	equ	0xFDA
 14496                           fsr2l	equ	0xFD9
 14497                           status	equ	0xFD8
 14498                           
 14499 ;; *************** function _FLASH_IsWriteDone *****************
 14500 ;; Defined at:
 14501 ;;		line 189 in file "mcc_generated_files/memory.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;		None
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      unsigned char 
 14508 ;; Registers used:
 14509 ;;		wreg
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14515 ;;      Params:         0       0       0       0       0       0       0
 14516 ;;      Locals:         0       0       0       0       0       0       0
 14517 ;;      Temps:          0       0       0       0       0       0       0
 14518 ;;      Totals:         0       0       0       0       0       0       0
 14519 ;;Total ram usage:        0 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; Hardware stack levels required when called:    3
 14522 ;; This function calls:
 14523 ;;		Nothing
 14524 ;; This function is called by:
 14525 ;;		_FlashSampleWrite
 14526 ;;		_FlashReadUart
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           	psect	text96
 14531  003208                     __ptext96:
 14532                           	opt stack 0
 14533  003208                     _FLASH_IsWriteDone:
 14534                           	opt stack 24
 14535                           
 14536                           ;memory.c: 191: return (EECON1bits.WR == 0);
 14537                           
 14538                           ;incstack = 0
 14539  003208  A2A6               	btfss	4006,1,c	;volsfr
 14540  00320A  D001               	goto	u5501
 14541  00320C  D002               	goto	u5500
 14542  00320E                     u5501:
 14543  00320E  0E01               	movlw	1
 14544  003210  0012               	return	
 14545  003212                     u5500:
 14546  003212  0E00               	movlw	0
 14547  003214  0012               	return	
 14548  003216                     __end_of_FLASH_IsWriteDone:
 14549                           	opt stack 0
 14550                           tosu	equ	0xFFF
 14551                           tosh	equ	0xFFE
 14552                           tosl	equ	0xFFD
 14553                           pclath	equ	0xFFA
 14554                           tblptru	equ	0xFF8
 14555                           tblptrh	equ	0xFF7
 14556                           tblptrl	equ	0xFF6
 14557                           tablat	equ	0xFF5
 14558                           prodh	equ	0xFF4
 14559                           prodl	equ	0xFF3
 14560                           intcon	equ	0xFF2
 14561                           intcon2	equ	0xFF1
 14562                           postinc0	equ	0xFEE
 14563                           wreg	equ	0xFE8
 14564                           indf1	equ	0xFE7
 14565                           postdec1	equ	0xFE5
 14566                           fsr1h	equ	0xFE2
 14567                           fsr1l	equ	0xFE1
 14568                           indf2	equ	0xFDF
 14569                           postinc2	equ	0xFDE
 14570                           postdec2	equ	0xFDD
 14571                           fsr2h	equ	0xFDA
 14572                           fsr2l	equ	0xFD9
 14573                           status	equ	0xFD8
 14574                           
 14575 ;; *************** function _ADC_GetConversion *****************
 14576 ;; Defined at:
 14577 ;;		line 106 in file "mcc_generated_files/adc.c"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;  channel         1    wreg     enum E6975
 14580 ;; Auto vars:     Size  Location     Type
 14581 ;;  channel         1   27[COMRAM] enum E6975
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  2   23[COMRAM] unsigned int 
 14584 ;; Registers used:
 14585 ;;		wreg, status,2, status,0
 14586 ;; Tracked objects:
 14587 ;;		On entry : 0/0
 14588 ;;		On exit  : 0/0
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14591 ;;      Params:         2       0       0       0       0       0       0
 14592 ;;      Locals:         1       0       0       0       0       0       0
 14593 ;;      Temps:          2       0       0       0       0       0       0
 14594 ;;      Totals:         5       0       0       0       0       0       0
 14595 ;;Total ram usage:        5 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    3
 14598 ;; This function calls:
 14599 ;;		Nothing
 14600 ;; This function is called by:
 14601 ;;		_AdcConvert
 14602 ;; This function uses a non-reentrant model
 14603 ;;
 14604                           
 14605                           	psect	text97
 14606  002EC2                     __ptext97:
 14607                           	opt stack 0
 14608  002EC2                     _ADC_GetConversion:
 14609                           	opt stack 26
 14610                           
 14611                           ;incstack = 0
 14612                           ;ADC_GetConversion@channel stored from wreg
 14613  002EC2  6E1C               	movwf	ADC_GetConversion@channel,c
 14614                           
 14615                           ;adc.c: 109: ADCON0bits.CHS = channel;
 14616  002EC4  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 14617  002EC8  461A               	rlncf	??_ADC_GetConversion,f,c
 14618  002ECA  461A               	rlncf	??_ADC_GetConversion,f,c
 14619  002ECC  50C2               	movf	4034,w,c	;volatile
 14620  002ECE  181A               	xorwf	??_ADC_GetConversion,w,c
 14621  002ED0  0B83               	andlw	-125
 14622  002ED2  181A               	xorwf	??_ADC_GetConversion,w,c
 14623  002ED4  6EC2               	movwf	4034,c	;volatile
 14624                           
 14625                           ;adc.c: 112: ADCON0bits.ADON = 1;
 14626  002ED6  80C2               	bsf	4034,0,c	;volatile
 14627                           
 14628                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 14629  002ED8  82C2               	bsf	4034,1,c	;volatile
 14630  002EDA                     
 14631                           ;adc.c: 119: {
 14632  002EDA  B2C2               	btfsc	4034,1,c	;volatile
 14633  002EDC  D7FE               	goto	l950
 14634                           
 14635                           ;adc.c: 120: }
 14636                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 14637  002EDE  50C4               	movf	4036,w,c	;volatile
 14638  002EE0  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 14639  002EE2  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 14640  002EE4  50C3               	movf	4035,w,c	;volatile
 14641  002EE6  241A               	addwf	??_ADC_GetConversion,w,c
 14642  002EE8  6E18               	movwf	?_ADC_GetConversion,c
 14643  002EEA  0E00               	movlw	0
 14644  002EEC  201B               	addwfc	??_ADC_GetConversion+1,w,c
 14645  002EEE  6E19               	movwf	?_ADC_GetConversion+1,c
 14646  002EF0  0012               	return	
 14647  002EF2                     __end_of_ADC_GetConversion:
 14648                           	opt stack 0
 14649                           tosu	equ	0xFFF
 14650                           tosh	equ	0xFFE
 14651                           tosl	equ	0xFFD
 14652                           pclath	equ	0xFFA
 14653                           tblptru	equ	0xFF8
 14654                           tblptrh	equ	0xFF7
 14655                           tblptrl	equ	0xFF6
 14656                           tablat	equ	0xFF5
 14657                           prodh	equ	0xFF4
 14658                           prodl	equ	0xFF3
 14659                           intcon	equ	0xFF2
 14660                           intcon2	equ	0xFF1
 14661                           postinc0	equ	0xFEE
 14662                           wreg	equ	0xFE8
 14663                           indf1	equ	0xFE7
 14664                           postdec1	equ	0xFE5
 14665                           fsr1h	equ	0xFE2
 14666                           fsr1l	equ	0xFE1
 14667                           indf2	equ	0xFDF
 14668                           postinc2	equ	0xFDE
 14669                           postdec2	equ	0xFDD
 14670                           fsr2h	equ	0xFDA
 14671                           fsr2l	equ	0xFD9
 14672                           status	equ	0xFD8
 14673                           
 14674 ;; *************** function _INTERRUPT_InterruptManager *****************
 14675 ;; Defined at:
 14676 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14677 ;; Parameters:    Size  Location     Type
 14678 ;;		None
 14679 ;; Auto vars:     Size  Location     Type
 14680 ;;		None
 14681 ;; Return value:  Size  Location     Type
 14682 ;;                  1    wreg      void 
 14683 ;; Registers used:
 14684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14685 ;; Tracked objects:
 14686 ;;		On entry : 0/0
 14687 ;;		On exit  : 0/0
 14688 ;;		Unchanged: 0/0
 14689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14690 ;;      Params:         0       0       0       0       0       0       0
 14691 ;;      Locals:         0       0       0       0       0       0       0
 14692 ;;      Temps:         18       0       0       0       0       0       0
 14693 ;;      Totals:        18       0       0       0       0       0       0
 14694 ;;Total ram usage:       18 bytes
 14695 ;; Hardware stack levels used:    1
 14696 ;; Hardware stack levels required when called:    2
 14697 ;; This function calls:
 14698 ;;		_EUSART1_Receive_ISR
 14699 ;;		_EUSART1_Transmit_ISR
 14700 ;;		_MEMORY_ISR
 14701 ;;		_PIN_MANAGER_IOC
 14702 ;;		_TMR0_ISR
 14703 ;; This function is called by:
 14704 ;;		Interrupt level 2
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           	psect	intcode
 14709  000008                     __pintcode:
 14710                           	opt stack 0
 14711  000008                     _INTERRUPT_InterruptManager:
 14712                           	opt stack 20
 14713                           
 14714                           ;incstack = 0
 14715  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14716  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 14717  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14718  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14719  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14720  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14721  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14722  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14723  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14724  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14725  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14726  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14727  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14728  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14729  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14730  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14731  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14732  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14733  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 14734                           
 14735                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 14736  000052  B6F2               	btfsc	intcon,3,c	;volatile
 14737  000054  A0F2               	btfss	intcon,0,c	;volatile
 14738  000056  D003               	goto	i2l675
 14739                           
 14740                           ;interrupt_manager.c: 61: {
 14741                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 14742  000058  EC41  F019         	call	_PIN_MANAGER_IOC	;wreg free
 14743                           
 14744                           ;interrupt_manager.c: 63: }
 14745  00005C  D019               	goto	i2l684
 14746  00005E                     i2l675:
 14747                           
 14748                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 14749  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 14750  000060  A4F2               	btfss	intcon,2,c	;volatile
 14751  000062  D003               	goto	i2l677
 14752                           
 14753                           ;interrupt_manager.c: 65: {
 14754                           ;interrupt_manager.c: 66: TMR0_ISR();
 14755  000064  ECA0  F010         	call	_TMR0_ISR	;wreg free
 14756                           
 14757                           ;interrupt_manager.c: 67: }
 14758  000068  D013               	goto	i2l684
 14759  00006A                     i2l677:
 14760                           
 14761                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 14762  00006A  ACF2               	btfss	intcon,6,c	;volatile
 14763  00006C  D011               	goto	i2l684
 14764                           
 14765                           ;interrupt_manager.c: 69: {
 14766                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 14767  00006E  B8A0               	btfsc	4000,4,c	;volatile
 14768  000070  A8A1               	btfss	4001,4,c	;volatile
 14769  000072  D003               	goto	i2l680
 14770                           
 14771                           ;interrupt_manager.c: 71: {
 14772                           ;interrupt_manager.c: 72: MEMORY_ISR();
 14773  000074  EC43  F019         	call	_MEMORY_ISR	;wreg free
 14774                           
 14775                           ;interrupt_manager.c: 73: }
 14776  000078  D00B               	goto	i2l684
 14777  00007A                     i2l680:
 14778                           
 14779                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 14780  00007A  B89D               	btfsc	3997,4,c	;volatile
 14781  00007C  A89E               	btfss	3998,4,c	;volatile
 14782  00007E  D003               	goto	i2l682
 14783                           
 14784                           ;interrupt_manager.c: 75: {
 14785                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 14786  000080  EC5A  F016         	call	_EUSART1_Transmit_ISR	;wreg free
 14787                           
 14788                           ;interrupt_manager.c: 77: }
 14789  000084  D005               	goto	i2l684
 14790  000086                     i2l682:
 14791                           
 14792                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 14793  000086  BA9D               	btfsc	3997,5,c	;volatile
 14794  000088  AA9E               	btfss	3998,5,c	;volatile
 14795  00008A  D002               	goto	i2l684
 14796                           
 14797                           ;interrupt_manager.c: 79: {
 14798                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 14799  00008C  EC79  F017         	call	_EUSART1_Receive_ISR	;wreg free
 14800  000090                     i2l684:
 14801                           
 14802                           ;interrupt_manager.c: 87: else
 14803                           ;interrupt_manager.c: 88: {
 14804                           
 14805                           ;interrupt_manager.c: 85: }
 14806                           ;interrupt_manager.c: 86: }
 14807                           
 14808                           ;interrupt_manager.c: 82: else
 14809                           ;interrupt_manager.c: 83: {
 14810  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 14811  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 14812  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 14813  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 14814  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14815  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14816  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14817  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14818  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14819  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14820  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14821  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14822  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14823  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14824  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14825  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14826  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14827  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14828  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14829  0000DA  0011               	retfie		f
 14830  0000DC                     __end_of_INTERRUPT_InterruptManager:
 14831                           	opt stack 0
 14832                           tosu	equ	0xFFF
 14833                           tosh	equ	0xFFE
 14834                           tosl	equ	0xFFD
 14835                           pclatu	equ	0xFFB
 14836                           pclath	equ	0xFFA
 14837                           tblptru	equ	0xFF8
 14838                           tblptrh	equ	0xFF7
 14839                           tblptrl	equ	0xFF6
 14840                           tablat	equ	0xFF5
 14841                           prodh	equ	0xFF4
 14842                           prodl	equ	0xFF3
 14843                           intcon	equ	0xFF2
 14844                           intcon2	equ	0xFF1
 14845                           postinc0	equ	0xFEE
 14846                           fsr0h	equ	0xFEA
 14847                           fsr0l	equ	0xFE9
 14848                           wreg	equ	0xFE8
 14849                           indf1	equ	0xFE7
 14850                           postdec1	equ	0xFE5
 14851                           fsr1h	equ	0xFE2
 14852                           fsr1l	equ	0xFE1
 14853                           indf2	equ	0xFDF
 14854                           postinc2	equ	0xFDE
 14855                           postdec2	equ	0xFDD
 14856                           fsr2h	equ	0xFDA
 14857                           fsr2l	equ	0xFD9
 14858                           status	equ	0xFD8
 14859                           
 14860 ;; *************** function _TMR0_ISR *****************
 14861 ;; Defined at:
 14862 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 14863 ;; Parameters:    Size  Location     Type
 14864 ;;		None
 14865 ;; Auto vars:     Size  Location     Type
 14866 ;;		None
 14867 ;; Return value:  Size  Location     Type
 14868 ;;                  1    wreg      void 
 14869 ;; Registers used:
 14870 ;;		wreg, status,2, status,0, cstack
 14871 ;; Tracked objects:
 14872 ;;		On entry : 0/0
 14873 ;;		On exit  : 0/0
 14874 ;;		Unchanged: 0/0
 14875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14876 ;;      Params:         0       0       0       0       0       0       0
 14877 ;;      Locals:         0       0       0       0       0       0       0
 14878 ;;      Temps:          0       0       0       0       0       0       0
 14879 ;;      Totals:         0       0       0       0       0       0       0
 14880 ;;Total ram usage:        0 bytes
 14881 ;; Hardware stack levels used:    1
 14882 ;; Hardware stack levels required when called:    1
 14883 ;; This function calls:
 14884 ;;		___lwmod
 14885 ;; This function is called by:
 14886 ;;		_INTERRUPT_InterruptManager
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text99
 14891  002140                     __ptext99:
 14892                           	opt stack 0
 14893  002140                     _TMR0_ISR:
 14894                           	opt stack 20
 14895                           
 14896                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 14897                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 14898                           
 14899                           ;incstack = 0
 14900  002140  94F2               	bcf	intcon,2,c	;volatile
 14901                           
 14902                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 14903  002142  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 14904  002144  6ED7               	movwf	4055,c	;volatile
 14905                           
 14906                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 14907  002146  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 14908                           
 14909                           ;tmr0.c: 146: CountCallBack ++;
 14910  00214A  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 14911  00214C  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 14912                           
 14913                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 14914  00214E  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 14915  002152  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 14916  002156  0E00               	movlw	0
 14917  002158  6E04               	movwf	___lwmod@divisor+1,c
 14918  00215A  0E14               	movlw	20
 14919  00215C  6E03               	movwf	___lwmod@divisor,c
 14920  00215E  ECE1  F015         	call	___lwmod	;wreg free
 14921  002162  5001               	movf	?___lwmod,w,c
 14922  002164  1002               	iorwf	?___lwmod+1,w,c
 14923  002166  A4D8               	btfss	status,2,c
 14924  002168  D003               	goto	i2l906
 14925                           
 14926                           ;tmr0.c: 148: {
 14927                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 14928  00216A  0E01               	movlw	1
 14929  00216C  0100               	movlb	0	; () banked
 14930  00216E  6FE9               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 14931  002170                     i2l906:
 14932                           
 14933                           ;tmr0.c: 150: }
 14934                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 14935                           
 14936                           ; BSR set to: 0
 14937  002170  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 14938  002174  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 14939  002178  0E00               	movlw	0
 14940  00217A  6E04               	movwf	___lwmod@divisor+1,c
 14941  00217C  0E32               	movlw	50
 14942  00217E  6E03               	movwf	___lwmod@divisor,c
 14943  002180  ECE1  F015         	call	___lwmod	;wreg free
 14944  002184  5001               	movf	?___lwmod,w,c
 14945  002186  1002               	iorwf	?___lwmod+1,w,c
 14946  002188  A4D8               	btfss	status,2,c
 14947  00218A  D003               	goto	i2l907
 14948                           
 14949                           ;tmr0.c: 153: {
 14950                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 14951  00218C  0E01               	movlw	1
 14952  00218E  0100               	movlb	0	; () banked
 14953  002190  6FE8               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 14954  002192                     i2l907:
 14955                           
 14956                           ;tmr0.c: 155: }
 14957                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 14958                           
 14959                           ; BSR set to: 0
 14960  002192  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 14961  002196  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 14962  00219A  0E01               	movlw	1
 14963  00219C  6E04               	movwf	___lwmod@divisor+1,c
 14964  00219E  0E2C               	movlw	44
 14965  0021A0  6E03               	movwf	___lwmod@divisor,c
 14966  0021A2  ECE1  F015         	call	___lwmod	;wreg free
 14967  0021A6  5001               	movf	?___lwmod,w,c
 14968  0021A8  1002               	iorwf	?___lwmod+1,w,c
 14969  0021AA  A4D8               	btfss	status,2,c
 14970  0021AC  D003               	goto	i2l908
 14971                           
 14972                           ;tmr0.c: 157: {
 14973                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 14974  0021AE  0E01               	movlw	1
 14975  0021B0  0100               	movlb	0	; () banked
 14976  0021B2  6FE7               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 14977  0021B4                     i2l908:
 14978                           
 14979                           ;tmr0.c: 159: }
 14980                           ;tmr0.c: 161: CountCallBack %= 300;
 14981                           
 14982                           ; BSR set to: 0
 14983  0021B4  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 14984  0021B8  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 14985  0021BC  0E01               	movlw	1
 14986  0021BE  6E04               	movwf	___lwmod@divisor+1,c
 14987  0021C0  0E2C               	movlw	44
 14988  0021C2  6E03               	movwf	___lwmod@divisor,c
 14989  0021C4  ECE1  F015         	call	___lwmod	;wreg free
 14990  0021C8  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 14991  0021CC  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 14992  0021D0  0012               	return		;funcret
 14993  0021D2                     __end_of_TMR0_ISR:
 14994                           	opt stack 0
 14995                           tosu	equ	0xFFF
 14996                           tosh	equ	0xFFE
 14997                           tosl	equ	0xFFD
 14998                           pclatu	equ	0xFFB
 14999                           pclath	equ	0xFFA
 15000                           tblptru	equ	0xFF8
 15001                           tblptrh	equ	0xFF7
 15002                           tblptrl	equ	0xFF6
 15003                           tablat	equ	0xFF5
 15004                           prodh	equ	0xFF4
 15005                           prodl	equ	0xFF3
 15006                           intcon	equ	0xFF2
 15007                           intcon2	equ	0xFF1
 15008                           postinc0	equ	0xFEE
 15009                           fsr0h	equ	0xFEA
 15010                           fsr0l	equ	0xFE9
 15011                           wreg	equ	0xFE8
 15012                           indf1	equ	0xFE7
 15013                           postdec1	equ	0xFE5
 15014                           fsr1h	equ	0xFE2
 15015                           fsr1l	equ	0xFE1
 15016                           indf2	equ	0xFDF
 15017                           postinc2	equ	0xFDE
 15018                           postdec2	equ	0xFDD
 15019                           fsr2h	equ	0xFDA
 15020                           fsr2l	equ	0xFD9
 15021                           status	equ	0xFD8
 15022                           
 15023 ;; *************** function ___lwmod *****************
 15024 ;; Defined at:
 15025 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;  dividend        2    0[COMRAM] unsigned int 
 15028 ;;  divisor         2    2[COMRAM] unsigned int 
 15029 ;; Auto vars:     Size  Location     Type
 15030 ;;  counter         1    4[COMRAM] unsigned char 
 15031 ;; Return value:  Size  Location     Type
 15032 ;;                  2    0[COMRAM] unsigned int 
 15033 ;; Registers used:
 15034 ;;		wreg, status,2, status,0
 15035 ;; Tracked objects:
 15036 ;;		On entry : 0/0
 15037 ;;		On exit  : 0/0
 15038 ;;		Unchanged: 0/0
 15039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15040 ;;      Params:         4       0       0       0       0       0       0
 15041 ;;      Locals:         1       0       0       0       0       0       0
 15042 ;;      Temps:          0       0       0       0       0       0       0
 15043 ;;      Totals:         5       0       0       0       0       0       0
 15044 ;;Total ram usage:        5 bytes
 15045 ;; Hardware stack levels used:    1
 15046 ;; This function calls:
 15047 ;;		Nothing
 15048 ;; This function is called by:
 15049 ;;		_TMR0_ISR
 15050 ;;		_segmentCounter
 15051 ;; This function uses a non-reentrant model
 15052 ;;
 15053                           
 15054                           	psect	text100
 15055  002BC2                     __ptext100:
 15056                           	opt stack 0
 15057  002BC2                     ___lwmod:
 15058                           	opt stack 20
 15059                           
 15060                           ;incstack = 0
 15061  002BC2  5003               	movf	___lwmod@divisor,w,c
 15062  002BC4  1004               	iorwf	___lwmod@divisor+1,w,c
 15063  002BC6  B4D8               	btfsc	status,2,c
 15064  002BC8  D018               	goto	i2l1720
 15065  002BCA  0E01               	movlw	1
 15066  002BCC  6E05               	movwf	___lwmod@counter,c
 15067  002BCE  D004               	goto	i2l1715
 15068  002BD0  90D8               	bcf	status,0,c
 15069  002BD2  3603               	rlcf	___lwmod@divisor,f,c
 15070  002BD4  3604               	rlcf	___lwmod@divisor+1,f,c
 15071  002BD6  2A05               	incf	___lwmod@counter,f,c
 15072  002BD8                     i2l1715:
 15073  002BD8  AE04               	btfss	___lwmod@divisor+1,7,c
 15074  002BDA  D7FA               	goto	i2l1716
 15075  002BDC                     i2u394_40:
 15076  002BDC  5003               	movf	___lwmod@divisor,w,c
 15077  002BDE  5C01               	subwf	___lwmod@dividend,w,c
 15078  002BE0  5004               	movf	___lwmod@divisor+1,w,c
 15079  002BE2  5802               	subwfb	___lwmod@dividend+1,w,c
 15080  002BE4  A0D8               	btfss	status,0,c
 15081  002BE6  D004               	goto	i2l1719
 15082  002BE8  5003               	movf	___lwmod@divisor,w,c
 15083  002BEA  5E01               	subwf	___lwmod@dividend,f,c
 15084  002BEC  5004               	movf	___lwmod@divisor+1,w,c
 15085  002BEE  5A02               	subwfb	___lwmod@dividend+1,f,c
 15086  002BF0                     i2l1719:
 15087  002BF0  90D8               	bcf	status,0,c
 15088  002BF2  3204               	rrcf	___lwmod@divisor+1,f,c
 15089  002BF4  3203               	rrcf	___lwmod@divisor,f,c
 15090  002BF6  2E05               	decfsz	___lwmod@counter,f,c
 15091  002BF8  D7F1               	goto	i2u394_40
 15092  002BFA                     i2l1720:
 15093  002BFA  C001  F001         	movff	___lwmod@dividend,?___lwmod
 15094  002BFE  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 15095  002C02  0012               	return		;funcret
 15096  002C04                     __end_of___lwmod:
 15097                           	opt stack 0
 15098                           tosu	equ	0xFFF
 15099                           tosh	equ	0xFFE
 15100                           tosl	equ	0xFFD
 15101                           pclatu	equ	0xFFB
 15102                           pclath	equ	0xFFA
 15103                           tblptru	equ	0xFF8
 15104                           tblptrh	equ	0xFF7
 15105                           tblptrl	equ	0xFF6
 15106                           tablat	equ	0xFF5
 15107                           prodh	equ	0xFF4
 15108                           prodl	equ	0xFF3
 15109                           intcon	equ	0xFF2
 15110                           intcon2	equ	0xFF1
 15111                           postinc0	equ	0xFEE
 15112                           fsr0h	equ	0xFEA
 15113                           fsr0l	equ	0xFE9
 15114                           wreg	equ	0xFE8
 15115                           indf1	equ	0xFE7
 15116                           postdec1	equ	0xFE5
 15117                           fsr1h	equ	0xFE2
 15118                           fsr1l	equ	0xFE1
 15119                           indf2	equ	0xFDF
 15120                           postinc2	equ	0xFDE
 15121                           postdec2	equ	0xFDD
 15122                           fsr2h	equ	0xFDA
 15123                           fsr2l	equ	0xFD9
 15124                           status	equ	0xFD8
 15125                           
 15126 ;; *************** function _PIN_MANAGER_IOC *****************
 15127 ;; Defined at:
 15128 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 15129 ;; Parameters:    Size  Location     Type
 15130 ;;		None
 15131 ;; Auto vars:     Size  Location     Type
 15132 ;;		None
 15133 ;; Return value:  Size  Location     Type
 15134 ;;                  1    wreg      void 
 15135 ;; Registers used:
 15136 ;;		None
 15137 ;; Tracked objects:
 15138 ;;		On entry : 0/0
 15139 ;;		On exit  : 0/0
 15140 ;;		Unchanged: 0/0
 15141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15142 ;;      Params:         0       0       0       0       0       0       0
 15143 ;;      Locals:         0       0       0       0       0       0       0
 15144 ;;      Temps:          0       0       0       0       0       0       0
 15145 ;;      Totals:         0       0       0       0       0       0       0
 15146 ;;Total ram usage:        0 bytes
 15147 ;; Hardware stack levels used:    1
 15148 ;; This function calls:
 15149 ;;		Nothing
 15150 ;; This function is called by:
 15151 ;;		_INTERRUPT_InterruptManager
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           	psect	text101
 15156  003282                     __ptext101:
 15157                           	opt stack 0
 15158  003282                     _PIN_MANAGER_IOC:
 15159                           	opt stack 21
 15160                           
 15161                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 15162                           
 15163                           ;incstack = 0
 15164  003282  90F2               	bcf	intcon,0,c	;volatile
 15165  003284  0012               	return		;funcret
 15166  003286                     __end_of_PIN_MANAGER_IOC:
 15167                           	opt stack 0
 15168                           tosu	equ	0xFFF
 15169                           tosh	equ	0xFFE
 15170                           tosl	equ	0xFFD
 15171                           pclatu	equ	0xFFB
 15172                           pclath	equ	0xFFA
 15173                           tblptru	equ	0xFF8
 15174                           tblptrh	equ	0xFF7
 15175                           tblptrl	equ	0xFF6
 15176                           tablat	equ	0xFF5
 15177                           prodh	equ	0xFF4
 15178                           prodl	equ	0xFF3
 15179                           intcon	equ	0xFF2
 15180                           intcon2	equ	0xFF1
 15181                           postinc0	equ	0xFEE
 15182                           fsr0h	equ	0xFEA
 15183                           fsr0l	equ	0xFE9
 15184                           wreg	equ	0xFE8
 15185                           indf1	equ	0xFE7
 15186                           postdec1	equ	0xFE5
 15187                           fsr1h	equ	0xFE2
 15188                           fsr1l	equ	0xFE1
 15189                           indf2	equ	0xFDF
 15190                           postinc2	equ	0xFDE
 15191                           postdec2	equ	0xFDD
 15192                           fsr2h	equ	0xFDA
 15193                           fsr2l	equ	0xFD9
 15194                           status	equ	0xFD8
 15195                           
 15196 ;; *************** function _MEMORY_ISR *****************
 15197 ;; Defined at:
 15198 ;;		line 206 in file "mcc_generated_files/memory.c"
 15199 ;; Parameters:    Size  Location     Type
 15200 ;;		None
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;		None
 15203 ;; Return value:  Size  Location     Type
 15204 ;;                  1    wreg      void 
 15205 ;; Registers used:
 15206 ;;		None
 15207 ;; Tracked objects:
 15208 ;;		On entry : 0/0
 15209 ;;		On exit  : 0/0
 15210 ;;		Unchanged: 0/0
 15211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15212 ;;      Params:         0       0       0       0       0       0       0
 15213 ;;      Locals:         0       0       0       0       0       0       0
 15214 ;;      Temps:          0       0       0       0       0       0       0
 15215 ;;      Totals:         0       0       0       0       0       0       0
 15216 ;;Total ram usage:        0 bytes
 15217 ;; Hardware stack levels used:    1
 15218 ;; This function calls:
 15219 ;;		Nothing
 15220 ;; This function is called by:
 15221 ;;		_INTERRUPT_InterruptManager
 15222 ;; This function uses a non-reentrant model
 15223 ;;
 15224                           
 15225                           	psect	text102
 15226  003286                     __ptext102:
 15227                           	opt stack 0
 15228  003286                     _MEMORY_ISR:
 15229                           	opt stack 21
 15230                           
 15231                           ;memory.c: 209: PIR2bits.EEIF = 0;
 15232                           
 15233                           ;incstack = 0
 15234  003286  98A1               	bcf	4001,4,c	;volatile
 15235  003288  0012               	return		;funcret
 15236  00328A                     __end_of_MEMORY_ISR:
 15237                           	opt stack 0
 15238                           tosu	equ	0xFFF
 15239                           tosh	equ	0xFFE
 15240                           tosl	equ	0xFFD
 15241                           pclatu	equ	0xFFB
 15242                           pclath	equ	0xFFA
 15243                           tblptru	equ	0xFF8
 15244                           tblptrh	equ	0xFF7
 15245                           tblptrl	equ	0xFF6
 15246                           tablat	equ	0xFF5
 15247                           prodh	equ	0xFF4
 15248                           prodl	equ	0xFF3
 15249                           intcon	equ	0xFF2
 15250                           intcon2	equ	0xFF1
 15251                           postinc0	equ	0xFEE
 15252                           fsr0h	equ	0xFEA
 15253                           fsr0l	equ	0xFE9
 15254                           wreg	equ	0xFE8
 15255                           indf1	equ	0xFE7
 15256                           postdec1	equ	0xFE5
 15257                           fsr1h	equ	0xFE2
 15258                           fsr1l	equ	0xFE1
 15259                           indf2	equ	0xFDF
 15260                           postinc2	equ	0xFDE
 15261                           postdec2	equ	0xFDD
 15262                           fsr2h	equ	0xFDA
 15263                           fsr2l	equ	0xFD9
 15264                           status	equ	0xFD8
 15265                           
 15266 ;; *************** function _EUSART1_Transmit_ISR *****************
 15267 ;; Defined at:
 15268 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 15269 ;; Parameters:    Size  Location     Type
 15270 ;;		None
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;		None
 15273 ;; Return value:  Size  Location     Type
 15274 ;;                  1    wreg      void 
 15275 ;; Registers used:
 15276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15282 ;;      Params:         0       0       0       0       0       0       0
 15283 ;;      Locals:         0       0       0       0       0       0       0
 15284 ;;      Temps:          0       0       0       0       0       0       0
 15285 ;;      Totals:         0       0       0       0       0       0       0
 15286 ;;Total ram usage:        0 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; This function calls:
 15289 ;;		Nothing
 15290 ;; This function is called by:
 15291 ;;		_INTERRUPT_InterruptManager
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           	psect	text103
 15296  002CB4                     __ptext103:
 15297                           	opt stack 0
 15298  002CB4                     _EUSART1_Transmit_ISR:
 15299                           	opt stack 21
 15300                           
 15301                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15302                           
 15303                           ;incstack = 0
 15304  002CB4  0E46               	movlw	70
 15305  002CB6  0100               	movlb	0	; () banked
 15306  002CB8  61FE               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15307  002CBA  D012               	goto	i2l746
 15308                           
 15309                           ; BSR set to: 0
 15310                           ;eusart1.c: 186: {
 15311                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15312  002CBC  5039               	movf	_eusart1TxTail,w,c	;volatile
 15313  002CBE  0D01               	mullw	1
 15314  002CC0  0E00               	movlw	low _eusart1TxBuffer
 15315  002CC2  24F3               	addwf	prodl,w,c
 15316  002CC4  6ED9               	movwf	fsr2l,c
 15317  002CC6  0E01               	movlw	high _eusart1TxBuffer
 15318  002CC8  20F4               	addwfc	prodh,w,c
 15319  002CCA  6EDA               	movwf	fsr2h,c
 15320  002CCC  50DF               	movf	indf2,w,c
 15321  002CCE  6EAD               	movwf	4013,c	;volatile
 15322                           
 15323                           ; BSR set to: 0
 15324  002CD0  2A39               	incf	_eusart1TxTail,f,c	;volatile
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15328  002CD2  0E45               	movlw	69
 15329  002CD4  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 15330  002CD6  D002               	goto	i2l747
 15331                           
 15332                           ; BSR set to: 0
 15333                           ;eusart1.c: 189: {
 15334                           ;eusart1.c: 190: eusart1TxTail = 0;
 15335  002CD8  0E00               	movlw	0
 15336  002CDA  6E39               	movwf	_eusart1TxTail,c	;volatile
 15337  002CDC                     i2l747:
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;eusart1.c: 191: }
 15341                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15342                           
 15343                           ; BSR set to: 0
 15344  002CDC  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15345                           
 15346                           ;eusart1.c: 193: }
 15347  002CDE  0012               	return	
 15348  002CE0                     i2l746:
 15349                           
 15350                           ; BSR set to: 0
 15351                           ;eusart1.c: 194: else
 15352                           ;eusart1.c: 195: {
 15353                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 15354  002CE0  989D               	bcf	3997,4,c	;volatile
 15355                           
 15356                           ; BSR set to: 0
 15357                           ;eusart1.c: 197: eusart1TxTail = 0;
 15358  002CE2  0E00               	movlw	0
 15359  002CE4  6E39               	movwf	_eusart1TxTail,c	;volatile
 15360                           
 15361                           ;eusart1.c: 198: eusart1TxHead = 0;
 15362  002CE6  0E00               	movlw	0
 15363  002CE8  6E3A               	movwf	_eusart1TxHead,c	;volatile
 15364  002CEA  0012               	return	
 15365  002CEC                     __end_of_EUSART1_Transmit_ISR:
 15366                           	opt stack 0
 15367                           tosu	equ	0xFFF
 15368                           tosh	equ	0xFFE
 15369                           tosl	equ	0xFFD
 15370                           pclatu	equ	0xFFB
 15371                           pclath	equ	0xFFA
 15372                           tblptru	equ	0xFF8
 15373                           tblptrh	equ	0xFF7
 15374                           tblptrl	equ	0xFF6
 15375                           tablat	equ	0xFF5
 15376                           prodh	equ	0xFF4
 15377                           prodl	equ	0xFF3
 15378                           intcon	equ	0xFF2
 15379                           intcon2	equ	0xFF1
 15380                           postinc0	equ	0xFEE
 15381                           fsr0h	equ	0xFEA
 15382                           fsr0l	equ	0xFE9
 15383                           wreg	equ	0xFE8
 15384                           indf1	equ	0xFE7
 15385                           postdec1	equ	0xFE5
 15386                           fsr1h	equ	0xFE2
 15387                           fsr1l	equ	0xFE1
 15388                           indf2	equ	0xFDF
 15389                           postinc2	equ	0xFDE
 15390                           postdec2	equ	0xFDD
 15391                           fsr2h	equ	0xFDA
 15392                           fsr2l	equ	0xFD9
 15393                           status	equ	0xFD8
 15394                           
 15395 ;; *************** function _EUSART1_Receive_ISR *****************
 15396 ;; Defined at:
 15397 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;		None
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;		None
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      void 
 15404 ;; Registers used:
 15405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15411 ;;      Params:         0       0       0       0       0       0       0
 15412 ;;      Locals:         0       0       0       0       0       0       0
 15413 ;;      Temps:          0       0       0       0       0       0       0
 15414 ;;      Totals:         0       0       0       0       0       0       0
 15415 ;;Total ram usage:        0 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; This function calls:
 15418 ;;		Nothing
 15419 ;; This function is called by:
 15420 ;;		_INTERRUPT_InterruptManager
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text104
 15425  002EF2                     __ptext104:
 15426                           	opt stack 0
 15427  002EF2                     _EUSART1_Receive_ISR:
 15428                           	opt stack 21
 15429                           
 15430                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;incstack = 0
 15434  002EF2  A2AB               	btfss	4011,1,c	;volatile
 15435  002EF4  D002               	goto	i2l752
 15436                           
 15437                           ;eusart1.c: 206: {
 15438                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 15439  002EF6  98AB               	bcf	4011,4,c	;volatile
 15440                           
 15441                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 15442  002EF8  88AB               	bsf	4011,4,c	;volatile
 15443  002EFA                     i2l752:
 15444                           
 15445                           ;eusart1.c: 210: }
 15446                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15447  002EFA  5038               	movf	_eusart1RxHead,w,c	;volatile
 15448  002EFC  0D01               	mullw	1
 15449  002EFE  0E46               	movlw	low _eusart1RxBuffer
 15450  002F00  24F3               	addwf	prodl,w,c
 15451  002F02  6ED9               	movwf	fsr2l,c
 15452  002F04  0E01               	movlw	high _eusart1RxBuffer
 15453  002F06  20F4               	addwfc	prodh,w,c
 15454  002F08  6EDA               	movwf	fsr2h,c
 15455  002F0A  CFAE FFDF          	movff	4014,indf2	;volatile
 15456  002F0E  2A38               	incf	_eusart1RxHead,f,c	;volatile
 15457                           
 15458                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15459  002F10  0E27               	movlw	39
 15460  002F12  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 15461  002F14  D002               	goto	i2l753
 15462                           
 15463                           ;eusart1.c: 217: {
 15464                           ;eusart1.c: 218: eusart1RxHead = 0;
 15465  002F16  0E00               	movlw	0
 15466  002F18  6E38               	movwf	_eusart1RxHead,c	;volatile
 15467  002F1A                     i2l753:
 15468                           
 15469                           ;eusart1.c: 219: }
 15470                           ;eusart1.c: 220: eusart1RxCount++;
 15471  002F1A  0100               	movlb	0	; () banked
 15472  002F1C  2BE5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 15473                           
 15474                           ; BSR set to: 0
 15475  002F1E  0012               	return		;funcret
 15476  002F20                     __end_of_EUSART1_Receive_ISR:
 15477                           	opt stack 0
 15478                           tosu	equ	0xFFF
 15479                           tosh	equ	0xFFE
 15480                           tosl	equ	0xFFD
 15481                           pclatu	equ	0xFFB
 15482                           pclath	equ	0xFFA
 15483                           tblptru	equ	0xFF8
 15484                           tblptrh	equ	0xFF7
 15485                           tblptrl	equ	0xFF6
 15486                           tablat	equ	0xFF5
 15487                           prodh	equ	0xFF4
 15488                           prodl	equ	0xFF3
 15489                           intcon	equ	0xFF2
 15490                           intcon2	equ	0xFF1
 15491                           postinc0	equ	0xFEE
 15492                           fsr0h	equ	0xFEA
 15493                           fsr0l	equ	0xFE9
 15494                           wreg	equ	0xFE8
 15495                           indf1	equ	0xFE7
 15496                           postdec1	equ	0xFE5
 15497                           fsr1h	equ	0xFE2
 15498                           fsr1l	equ	0xFE1
 15499                           indf2	equ	0xFDF
 15500                           postinc2	equ	0xFDE
 15501                           postdec2	equ	0xFDD
 15502                           fsr2h	equ	0xFDA
 15503                           fsr2l	equ	0xFD9
 15504                           status	equ	0xFD8
 15505                           tosu	equ	0xFFF
 15506                           tosh	equ	0xFFE
 15507                           tosl	equ	0xFFD
 15508                           pclatu	equ	0xFFB
 15509                           pclath	equ	0xFFA
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           intcon2	equ	0xFF1
 15518                           postinc0	equ	0xFEE
 15519                           fsr0h	equ	0xFEA
 15520                           fsr0l	equ	0xFE9
 15521                           wreg	equ	0xFE8
 15522                           indf1	equ	0xFE7
 15523                           postdec1	equ	0xFE5
 15524                           fsr1h	equ	0xFE2
 15525                           fsr1l	equ	0xFE1
 15526                           indf2	equ	0xFDF
 15527                           postinc2	equ	0xFDE
 15528                           postdec2	equ	0xFDD
 15529                           fsr2h	equ	0xFDA
 15530                           fsr2l	equ	0xFD9
 15531                           status	equ	0xFD8
 15532                           
 15533                           	psect	text105
 15534  000000                     __ptext105:
 15535                           	opt stack 0
 15536                           tosu	equ	0xFFF
 15537                           tosh	equ	0xFFE
 15538                           tosl	equ	0xFFD
 15539                           pclatu	equ	0xFFB
 15540                           pclath	equ	0xFFA
 15541                           tblptru	equ	0xFF8
 15542                           tblptrh	equ	0xFF7
 15543                           tblptrl	equ	0xFF6
 15544                           tablat	equ	0xFF5
 15545                           prodh	equ	0xFF4
 15546                           prodl	equ	0xFF3
 15547                           intcon	equ	0xFF2
 15548                           intcon2	equ	0xFF1
 15549                           postinc0	equ	0xFEE
 15550                           fsr0h	equ	0xFEA
 15551                           fsr0l	equ	0xFE9
 15552                           wreg	equ	0xFE8
 15553                           indf1	equ	0xFE7
 15554                           postdec1	equ	0xFE5
 15555                           fsr1h	equ	0xFE2
 15556                           fsr1l	equ	0xFE1
 15557                           indf2	equ	0xFDF
 15558                           postinc2	equ	0xFDE
 15559                           postdec2	equ	0xFDD
 15560                           fsr2h	equ	0xFDA
 15561                           fsr2l	equ	0xFD9
 15562                           status	equ	0xFD8
 15563                           
 15564                           	psect	rparam
 15565  0000                     tosu	equ	0xFFF
 15566                           tosh	equ	0xFFE
 15567                           tosl	equ	0xFFD
 15568                           pclatu	equ	0xFFB
 15569                           pclath	equ	0xFFA
 15570                           tblptru	equ	0xFF8
 15571                           tblptrh	equ	0xFF7
 15572                           tblptrl	equ	0xFF6
 15573                           tablat	equ	0xFF5
 15574                           prodh	equ	0xFF4
 15575                           prodl	equ	0xFF3
 15576                           intcon	equ	0xFF2
 15577                           intcon2	equ	0xFF1
 15578                           postinc0	equ	0xFEE
 15579                           fsr0h	equ	0xFEA
 15580                           fsr0l	equ	0xFE9
 15581                           wreg	equ	0xFE8
 15582                           indf1	equ	0xFE7
 15583                           postdec1	equ	0xFE5
 15584                           fsr1h	equ	0xFE2
 15585                           fsr1l	equ	0xFE1
 15586                           indf2	equ	0xFDF
 15587                           postinc2	equ	0xFDE
 15588                           postdec2	equ	0xFDD
 15589                           fsr2h	equ	0xFDA
 15590                           fsr2l	equ	0xFD9
 15591                           status	equ	0xFD8
 15592                           
 15593                           	psect	temp
 15594  000048                     btemp:
 15595                           	opt stack 0
 15596  000048                     	ds	1
 15597  0000                     int$flags	set	btemp
 15598  0000                     wtemp6	set	btemp+1
 15599                           tosu	equ	0xFFF
 15600                           tosh	equ	0xFFE
 15601                           tosl	equ	0xFFD
 15602                           pclatu	equ	0xFFB
 15603                           pclath	equ	0xFFA
 15604                           tblptru	equ	0xFF8
 15605                           tblptrh	equ	0xFF7
 15606                           tblptrl	equ	0xFF6
 15607                           tablat	equ	0xFF5
 15608                           prodh	equ	0xFF4
 15609                           prodl	equ	0xFF3
 15610                           intcon	equ	0xFF2
 15611                           intcon2	equ	0xFF1
 15612                           postinc0	equ	0xFEE
 15613                           fsr0h	equ	0xFEA
 15614                           fsr0l	equ	0xFE9
 15615                           wreg	equ	0xFE8
 15616                           indf1	equ	0xFE7
 15617                           postdec1	equ	0xFE5
 15618                           fsr1h	equ	0xFE2
 15619                           fsr1l	equ	0xFE1
 15620                           indf2	equ	0xFDF
 15621                           postinc2	equ	0xFDE
 15622                           postdec2	equ	0xFDD
 15623                           fsr2h	equ	0xFDA
 15624                           fsr2l	equ	0xFD9
 15625                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    112
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    115     159
    BANK1           256      7     221
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3081	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _SWSPI_send_word->_SWSPI_send_bits
    _SWSPI_send_bits->_make8
    _SwSpiSetClock->_SwSpiClkHigh
    _SwSpiSetClock->_SwSpiClkLow
    _UpdateRxFreq->_SendAckMessage
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _FlashReadUart->_ZeroArray
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    ___lbtoft->___ftpack
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_InitAdcApplicationMgr
    _CheckFlashPrecentage->___ftmul
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___lltoft
    ___ftadd->___ftmul
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupFlashMemory
    _UpdateTxFreq->_pow
    _GroupDAC->_DacSetValue
    _DacSetValue->_pow
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  485066
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  347004
                                              0 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1909
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  130857
                                            111 BANK0      3     1      2
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                        15    13      2  124482
                                             81 BANK0     15    13      2
                    _SWSPI_send_word
                     _SendAckMessage
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lbtoft
                           ___lltoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      8     3      5    1929
                                             29 COMRAM     8     3      5
                    _SWSPI_send_bits
                              _make8
 ---------------------------------------------------------------------------------
 (5) _SWSPI_send_bits                                      3     2      1     564
                                             26 COMRAM     3     2      1
                        _SwSpiClkLow
                      _SwSpiDataHigh
                       _SwSpiDataLow
                      _SwSpiSetClock
                              _make8 (ARG)
 ---------------------------------------------------------------------------------
 (6) _SwSpiSetClock                                        1     1      0     155
                                             24 COMRAM     1     1      0
                       _SwSpiClkHigh
                        _SwSpiClkLow
 ---------------------------------------------------------------------------------
 (7) _SwSpiClkLow                                          1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _SwSpiClkHigh                                         1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SwSpiDataLow                                         1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SwSpiDataHigh                                        1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2    6282
                                             43 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   28339
                                            111 BANK0      3     1      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    6958
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    6958
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5096
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5096
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   20457
                                            111 BANK0      4     2      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2    6289
                                             35 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  11    11      0    6008
                                             35 COMRAM    11    11      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                3     0      3     993
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8098
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  124145
                                            111 BANK0      3     1      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         30    28      2  124018
                                             81 BANK0     30    28      2
                     _SendAckMessage
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    3164
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   18666
                                            111 BANK0      3     1      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6257
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6189
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6189
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   19023
                                            111 BANK0      3     1      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6279
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6341
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6279
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6189
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6189
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6189
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    1909
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0       1
                    _ClearMcuRunTime
              _InitAdcApplicationMgr
                   _InitSevenSegment
                   _InitSynthesizers
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSynthesizers                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   15111
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  109702
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   92803
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   29672
                                             31 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   49804
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     539
                                             31 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   12514
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4    1091
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3427
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   13135
                                             46 COMRAM     2     2      0
                                             21 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    5881
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    6174
                                             21 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    5758
                                              9 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4593
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3806
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    3505
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3344
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3133
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _InitAdcApplicationMgr
     _InitSevenSegment
     _InitSynthesizers
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _UpdateRxFreq
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpiClkLow
             _SwSpiDataHigh
             _SwSpiDataLow
             _SwSpiSetClock
               _SwSpiClkHigh
               _SwSpiClkLow
             _make8 (ARG)
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___lltoft
           ___ftpack
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      7      DD       6       86.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     73      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C3       9        0.0%
DATA                 0      0     1C3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 20 12:29:11 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
                        _DacSetValue$3071 00BB                          _DacSetValue$3072 00BE  
                        _DacSetValue$3073 00C1                __end_of_keepAliveSignalLed 315A  
                            ___altoft@exp 002F                  _eusart1TxBufferRemaining 00FE  
                      readUartMessage@idx 01DA                           _GroupControlMcu 2C04  
             __end_of_keepAliveSignalUart 3246                             ___altoft@sign 0030  
              __size_of_FLASH_IsWriteDone 000E                                        l48 258A  
                         _SWSPI_send_bits 2956                       __end_of_BlinkOkLeds 2702  
                         _SWSPI_send_word 2AFC                       ___wmul@multiplicand 001A  
                         _timer0ReloadVal 0046                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0074  
                            ___ftadd@exp2 0073                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0072                               ?_MEMORY_ISR 0001  
                                     l104 2EB6                                       l108 1106  
                                     l204 2DAE                                       l300 08EE  
                                     l109 102E                                       l205 2D98  
                                     l301 0A12                                       l302 090A  
                                     l303 0922                                       l305 09A0  
                                     l307 09F6                                       l308 0A0C  
                                     l172 0DEC                                       l181 0C6E  
                                     l173 0C2E                                       l191 0D2E  
                                     l183 0C86                                       l192 0CEA  
                                     l176 0C3C                                       l185 0C9E  
                                     l177 0C68                                       l282 088A  
                                     l290 0878                                       l194 0D54  
                                     l275 1808                                       l283 07EE  
                                     l603 28EA                                       l187 0CBC  
                                     l276 1826                                       l292 0828  
                                     l604 28C2                                       l196 0D8C  
                                     l285 073A                                       l605 2900  
                                     l189 0CC2                                       l294 083A  
                                     l606 28CC                                       l550 2970  
                                     l542 2B0E                                       l198 0D92  
                                     l383 0A62                                       l287 074A  
                                     l607 28D6                                       l560 30D6  
                                     l608 28E0                                       l385 0A96  
                                     l297 08E2                                       l289 07B6  
                                     l386 0AB4                                       l555 30DA  
                                     l547 298C                                       l740 2C54  
                                     l556 30D2                                       l572 30B8  
                                     l580 3096                                       l548 295E  
                                     l741 2C78                                       l549 296A  
                                     l742 2C76                                       l727 2A88  
                                     l567 30BC                                       l591 3080  
                                     l487 150C                                       l840 1FBC  
                                     l568 30B4                                       l584 309A  
                                     l592 3078                                       l841 1FBE  
                                     l729 2AAE                                       l579 309E  
                                     l596 307C                                       l837 1FE4  
                                     l950 2EDA                                       l838 1F9C  
                                     l848 2D46                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 01DC  
                                     _abs 2F74                                       _cnt 00FC  
                                     _exp 0E22                                       _log 1618  
                                     _pow 1372                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
              __end_of_FlashReadCondition 1F2A                              ___ftdiv@cntr 0072  
                            ___ftdiv@sign 0077                                      l1100 2A42  
                                    l1105 3068                                      l1106 305A  
                                    l1211 2434                                      ?_abs 0018  
                                    l1140 2936                                      l1060 2C10  
                                    l1141 291A                                      l1221 220E  
                                    l1061 2C16                                      l1150 2E62  
                                    l1206 2CF8                                      l1071 27C8  
                                    l1152 2E66                                      l1232 1B42  
                                    l1216 2B56                                      l1072 27D6  
                                    l1080 29A6                                      l1153 2E6A  
                                    l1057 2C1C                                      l1073 27DC  
                                    l1154 2E6E                                      l1058 2C0A  
                                    l1074 27EA                                      l1082 29B4  
                                    l1155 2E72                                      l1091 2DD8  
                                    l1083 29C2                                      l1068 27F0  
                                    l1149 2E76                                      l1069 27C2  
                                    l1079 29D0                                      l1520 202C  
                                    l1088 2DE6                                      l1096 2A5C  
                                    l1601 19D6                                      l1089 2DCA  
                                    l1097 2A36                                      l1522 206A  
                                    l1602 19E6                                      l1523 2060  
                                    l1347 2F92                                      l1099 2A3C  
                                    l1291 2692                                      l1516 200E  
                                    l1612 2B98                                      l1292 2686  
                                    l1517 2004                                      l1606 3022  
                                    l1519 2042                                      l1551 1242  
                                    l1624 18FC                                      l1616 1860  
                                    l1288 2654                                      l1561 129E  
                                    l1625 18F0                                      l1289 266C  
                                    l1570 12DC                                      l1562 1294  
                                    l1386 24B6                                      l1618 18D8  
                                    l1730 2F2A                                      l1571 12D2  
                                    l1547 1218                                      l1387 24AA  
                                    l1627 1918                                      l1619 18C8  
                                    l1580 1A4A                                      l1556 12A8  
                                    l1652 23B0                                      l1573 1300  
                                    l1901 0E3C                                      l1741 13BC  
                                    l1653 23A4                                      l1582 1A72  
                                    l1574 131C                                      l1742 13AC  
                                    l1662 25FA                                      l1583 1AB0  
                                    l1575 134C                                      l1903 0E74  
                                    l1663 25EE                                      l1584 1AD6  
                                    l1912 1C2A                                      l1904 0EAC  
                                    l1744 13D4                                      l1656 23E4  
                                    l1673 2772                                      l1497 2C90  
                                    l1921 228A                                      l1913 1C1C  
                                    l1905 0EDC                                      l1745 145A  
                                    l1729 2F3A                                      l1657 23F2  
                                    l1674 2766                                      l1930 1E26  
                                    l1906 1004                                      l1746 1438  
                                    l1666 2622                                      l1595 1954  
                                    l1915 1C44                                      l1907 0FDA  
                                    l1747 14E0                                      l1667 2630  
                                    l1588 2322                                      l1916 1CC0  
                                    l1597 197C                                      l1589 2352  
                                    l1925 1DBE                                      l1598 19AE  
                                    l1599 19BE                                      l1951 1D8C  
                                    l1927 1E04                                      l1943 1634  
                                    l1952 1D0E                                      l5232 270C  
                                    l1929 1E32                                      l1945 1654  
                                    l5244 26AE                                      l6306 0FDA  
                                    l6512 1F94                                      l6600 0972  
                                    ?_exp 0097                                      ?_log 007F  
                                    l6464 257A                                      l6392 2B2C  
                                    l6810 1BBE                                      l5668 237E  
                                    l6388 2B0E                                      l6478 25D0  
                                    l6662 0A9C                                      l6590 0912  
                                    l6726 242C                                      l6742 2CF0  
                                    l5944 2C42                                      l6664 0AA4  
                                    l6648 0A52                                      l6586 08EE  
                                    l5990 2F2A                                      l6678 0B8A  
                                    l6766 21FE                                      l6782 2B46  
                                    l6776 2236                                      l6792 2B74  
                                    l6688 1504                                      l6946 1026  
                                    l6798 1B32                                      ?_pow 00A0  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      u4000 314C  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u5010 1902                                      u4018 314E  
                                    u5111 1A5A                                      u5040 22B2  
                                    u6010 245A                                      u6110 1794  
                                    u5230 1DDE                                      u6030 2D16  
                                    u4600 2074                                      u5048 22B4  
                                    u5400 0EB8                                      u6105 1742  
                                    u5305 2D54                                      u6130 17D8  
                                    u6050 2236                                      u5306 2D56  
                                    u5091 1A32                                      u5500 3212  
                                    u5501 320E                                      u5190 1C36  
                                    u5238 1DE2                                      u6070 2B74  
                                    u4560 1FF6                                      u4720 1234  
                                    u5600 25FE                                      u6090 1BBE  
                                    u4651 11D6                                      u4820 12E4  
                                    u6340 213C                                      u5540 2B3A  
                                    u4661 11EA                                      u4750 1272  
                                    u5390 0EB6                                      u5630 25D0  
                                    u5480 1422                                      u4690 120A  
                                    u5730 06E6                                      u5570 23B4  
                                    u6338 0DC4                                      u5555 2E5C  
                                    u6507 2980                                      u6339 0DE4  
                                    u5556 2E5E                                      u5740 06E8  
                                    u4861 193C                                      u5805 084C  
                                    u6517 28C4                                      u4790 12B0  
                                    u4951 1844                                      u6607 26EE  
                                    u6527 28CE                                      u5680 1FC2  
                                    u5840 08D0                                      u4881 1964  
                                    u6617 2732                                      u6537 28D8  
                                    u4970 187E                                      u6627 274C  
                                    u6547 28E2                                      u6637 10F2  
                                    u6557 2592                                      u5950 0A9C  
                                    u5870 0972                                      u5695 1FE0  
                                    u4975 1876                                      u6567 25A2  
                                    u5696 1FE2                                      u5880 0990  
                                    u6577 25B2                                      u5785 07C0  
                                    u6497 2972                                      u5970 0B8A  
                                    u6587 25C2                                      u6597 26D4  
                                    u5990 15F2                                      _WPUB 000F61  
                           _EUSART1_Write 2C40                                      abs@a 0018  
                                    _crc8 2908                   ??_InitAdcApplicationMgr 0018  
                                    _data 00E0                                      _main 2642  
                            ___ftpack@arg 0018                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 001B                           _TMR0_StartTimer 327E  
                        _InitSynthesizers 3270                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0097  
                                    log@x 007F                         ?_FLASH_WriteBlock 001D  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A0  
                                    pow@y 00A3                                      prodh 000FF4  
                                    prodl 000FF3                 GroupStatusAndVersion@data 00CF  
           __size_of_CheckFlashPrecentage 00AC                                      start 00DC  
                           __CFG_IESO$OFF 000000                       __end_of_EepromWrite 31DE  
                      ??_FLASH_WriteBlock 0023                             _adcSampleMode 003C  
                            ___ftmul@cntr 0067                              ___param_bank 000000  
                            ___ftmul@sign 0068                            _BlinkErrorLeds 2702  
                            ___fttol@exp1 0086                                     ??_abs 001A  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0082  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 2E2C  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 31FA  
                                   ?_crc8 0018                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1372  
                         __end_of___ftdiv 1B08                           __end_of___ftneg 3030  
                         __end_of___lldiv 2404                                _EepromRead 3252  
                         __end_of___ftmul 1A20                                     _T0CON 000FD5  
                         __end_of___llmod 2642                           __end_of___ftsub 2BC2  
                         __end_of___fttol 192A                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 2C04                                     i2l752 2EFA  
                                   i2l680 007A                                     i2l753 2F1A  
                                   i2l746 2CE0                                     i2l906 2170  
                                   i2l682 0086                                     i2l747 2CDC  
                                   i2l907 2192                                     i2l675 005E  
                                   i2l908 21B4                                     i2l684 0090  
                                   i2l677 006A                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _PORTD 000F83  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 2CB4                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ?_WriteUartMessage 0019                          __end_of_TMR0_ISR 21D2  
                           __CFG_WRTB$OFF 000000                  __size_of_SetMcuFwVersion 0036  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 00B1                           _DATAEE_ReadByte 3186  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 3286                                     crc8@i 001F  
                                   _make8 2E60                     __end_of_GetMcuRunTime 1BEC  
                                   _count 00DB                                     _floor 1BEC  
                                   _ldexp 1DA4                                     _frexp 2262  
                                   _errno 00D7                           DacSetValue@vout 00BA  
                                   _group 00E3                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AD  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                   __end_of_PLL_REGISTERS 0631                   __end_of_GroupControlMcu 2C40  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                    __end_of_BlinkErrorLeds 2760  
                 __end_of_SWSPI_send_bits 29A0                               ldexp@newexp 0082  
                 __end_of_SWSPI_send_word 2B3E                               _BlinkOkLeds 26A4  
                 WriteUartMessage@dataBuf 0019                           __initialization 2500  
                             log@exponent 0082                              __end_of_crc8 2956  
              __end_of_EUSART1_Initialize 2D8E                              __end_of_main 26A4  
                 FLASH_ReadByte@flashAddr 0018               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 3074                           _readUartMessage 0C26  
                        __end_of_GroupAdc 29E8                                    ??_crc8 001C  
                                  ??_main 0031                             ___fttol@sign1 0081  
                      _TimerKeepAliveFlag 00E7                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 31EC  
                     SetMcuFwVersion@data 002C                    SWSPI_send_bits@phrType 001D  
                            _writeAddress 0042                     ?_EUSART1_Transmit_ISR 0001  
                 __end_of_TMR0_StartTimer 3282                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 007F  
                                  ?_frexp 0018                          __end_of___altoft 2500  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                                  _EECON2 000FA7                          __end_of___awtoft 2CB4  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 2094  
                        __end_of___lbtoft 300C                          __end_of___lltoft 27BC  
                       _FlashReadUart$550 00B5                         _FlashReadUart$549 00B1  
                       ?_FlashSampleWrite 002D                                    i2l1720 2BFA  
                                  i2l1715 2BD8                                    i2l1716 2BD0  
                          __CFG_WDTEN$OFF 000000                                    i2l1719 2BF0  
                                  _TABLAT 000FF5                               _EepromWrite 31D0  
                                  _RCREG1 000FAE                          __end_of___lwtoft 3054  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                  GroupSynthesizers@request 00D1  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                  __end_of_GroupFlashMemory 2A74  
                         ?_BlinkErrorLeds 0001                     __end_of_SwSpiDataHigh 30EC  
                        _GetCpldFwVersion 21D2                            __CFG_XINST$OFF 000000  
                       ?_SetCpldFwVersion 002C                                    _cState 00E4  
                                  ___ftge 22F2                          DacSetValue@dVout 00C4  
                                  ___wmul 2FC2                                 ??___ftadd 006F  
                          __CFG_STVREN$ON 000000                                 ??___ftdiv 006F  
                               ??___ftneg 001B                         ?_InitSevenSegment 0001  
                               ??___lldiv 0020                                 ??___ftmul 0060  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                        ??_SetCpldFwVersion 002E  
                               ??___lwmod 0005                        __size_of_ResetCpld 000C  
                        ?_TMR0_Initialize 0001                                    _memset 2F20  
                                  clear_0 2546                                    clear_1 2552  
                                  clear_2 255E                             ??_SwSpiClkLow 0018  
                      ??_InitSevenSegment 0018                       __size_of_AdcConvert 01B2  
                 __end_of_DATAEE_ReadByte 319A                               ?_EepromRead 0001  
                                  floor@i 0092                                    floor@x 008F  
                   ___ftmul@f3_as_product 0064                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                     __end_of_FlashReadUart 0A28  
                        __end_of_testLeds 25DC                     __end_of_SwSpiSetClock 2908  
                           ?_SetMcuSystem 0001                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                         ??_EUSART1_Write 0018  TMR0_SetInterruptHandler@InterruptHandler 0018  
            __size_of_InitRxMessageParams 0028                          ?_PIN_MANAGER_IOC 0001  
                         _eusart1RxBuffer 0146                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 2404                          __end_ofexp@coeff 0656  
                       _SYSTEM_Initialize 3128                          __end_oflog@coeff 0671  
                              __accesstop 0060                   __end_of__initialization 2564  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                         _UpdateTxFreq$3074 00B5  
                       _UpdateTxFreq$3075 00B8                                ___ftadd@f1 0069  
                              ___ftadd@f2 006C                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 007C                             ___rparam_used 000001  
                              ___ftdiv@f1 0069                                ___ftdiv@f2 006C  
                              ___ftdiv@f3 0073                          ?_GroupControlMcu 00CF  
            GroupStatusAndVersion@request 00D1                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                          ?_SWSPI_send_bits 001B  
                              ___lbtoft@c 0023                   __end_of_readUartMessage 0E22  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0029  
                              ___ftmul@f2 002C                          ?_SWSPI_send_word 001E  
                            ?_DacSetValue 00B1                                ___ftsub@f1 0075  
                              ___ftsub@f2 0078                                ___fttol@f1 0078  
                          __pcstackCOMRAM 0001                              __pidataBANK0 31C0  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 2E92  
                        _DATAEE_WriteByte 2D22                             __end_of_floor 1CCE  
                           __end_of_ldexp 1E6A                             __end_of_frexp 22F2  
                    GroupFlashMemory@data 00CF                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2AB8                              ??_MEMORY_ISR 0001  
                    SWSPI_send_bits@count 001C                  __end_of_InitSynthesizers 3276  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0035  
                 GroupFlashMemory@request 00D2                        _keepAliveSignalLed 3142  
                       make8@dataLocation 001A               __end_of_EUSART1_Receive_ISR 2F20  
                     __end_of_SwSpiClkLow 3092               FLASH_WriteBlock@GIEBitValue 002B  
                            GroupDAC@data 00CF                                   ??_make8 001B  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0084                                   ??_frexp 001D  
                         _AdcConvert$3070 00B7                 __end_of_SYSTEM_Initialize 3142  
                           _eusart1RxHead 0038                      GetMcuFwVersion@TxMsg 0026  
                           _eusart1TxHead 003A                             _eusart1RxTail 0037  
                              __pbssBANK0 00D3                                __pbssBANK1 0100  
                           _eusart1TxTail 0039                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                         __end_of_ResetCpld 3222  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 0631  
                               ?_GroupDAC 00CF                                __pnvCOMRAM 0046  
                               ?_GroupAdc 00CF            __size_of_InitAdcApplicationMgr 000E  
              __end_of_SendSystemStartAck 3252             __end_of_InitAdcApplicationMgr 3208  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 328A  
                               ?_ResetMcu 0001                        _FlashReadCondition 1E6A  
         ??_InitSystemApplicationManagers 0019                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018                            FlashReadUart@j 00B9  
        __end_of_TMR0_SetInterruptHandler 3270                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 3128                                 ?___altoft 0087  
                                 ?_memset 0018                       ?_FlashReadCondition 0001  
                               ?___awtoft 0020                                 ?___ftpack 0018  
                               ?___lbtoft 0020                              GroupAdc@data 00CF  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 323A                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 31AE                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 2140                          ?_DATAEE_ReadByte 0001  
            __size_of_keepAliveSignalUart 000C                   __end_of_GetMcuFwVersion 2486  
                                 _OSCCON2 000FD2                             ?_SwSpiDataLow 0001  
                           ?_SwSpiClkHigh 0001                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                        GetMcuRunTime@idx 006D                              ??_AdcConvert 00B1  
                    ??_FlashReadCondition 0024                            _FlashEreaseMem 2814  
                        _FLASH_EraseBlock 2E2C            __size_of_GroupStatusAndVersion 0058  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2814  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 2AB8                           __CFG_PWRTEN$OFF 000000  
                      FlashReadUart@TxMsg 006C                     GroupSynthesizers@data 00CF  
                                 __Hparam 0000                                ??_ResetMcu 002C  
               __size_of_WriteUartMessage 0036                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000                          UpdateRxFreq@data 002C  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                        UpdateRxFreq@send 0060                    GroupControlMcu@request 00D2  
                               ?_testLeds 0001                           __size_of___ftge 0090  
                                 ___ftadd 11C4                                   ___ftdiv 1A20  
                                 ___ftneg 300C                                   ___lldiv 2382  
                         __size_of___wmul 0026                                   ___ftmul 192A  
                                 ___llmod 25DC                                   ___ftsub 2B80  
                                 ___fttol 1832                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 2BC2                      AdcConvert@_adcResult 00B3  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 31C0                     _mcuRunTimeIn5SecTicks 00D3  
                                 _crcCalc 00DF                                   _channel 00E6  
                                 __pcinit 2500                                ??___awtoft 0023  
                              ??___ftpack 001D                                ??___lbtoft 0023  
                       __end_of_eval_poly 1DA4                           __size_of_memset 002C  
                                 __ramtop 0600                   __size_of_SendAckMessage 0052  
                             _SwSpiClkLow 3074                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 2642  
                                 __ptext1 0C26                                   __ptext2 2F4C  
                                 __ptext3 3054                                   __ptext4 2A30  
                                 __ptext5 29A0                                   __ptext6 27BC  
                                 __ptext7 2C04                                   __ptext8 2DC4  
                                 __ptext9 14EE                                   crc8@crc 001D  
                      __end_of_AdcConvert 11C4                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                   _OSCILLATOR_Initialize 31EC                              __size_of_abs 0028  
                            __size_of_exp 01F0                              __size_of_log 0120  
                            __size_of_pow 017C                            ??_SwSpiDataLow 0018  
                          ??_SwSpiClkHigh 0018                        _EUSART1_Initialize 2D58  
                ??_PIN_MANAGER_Initialize 0018                  __end_of_GetCpldFwVersion 2262  
                        UpdateTxFreq@data 00B1                                   _request 00E2  
                         GroupDAC@request 00D1                    __end_of_FlashEreaseMem 2866  
              __size_of_SYSTEM_Initialize 001A                      end_of_initialization 2564  
                     GetCpldFwVersion@idx 002F                             ?_UpdateRxFreq 002C  
                                 exp@sign 009F                             ?_UpdateTxFreq 00B1  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                       SetCpldFwVersion@idx 002E  
                    SwSpiDataHigh@phrType 0018                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 3266  
                                 pow@sign 00AC                           ___lldiv@counter 0024  
                       ?_GroupFlashMemory 00CF                          AdcConvert@adcRes 00BA  
                              ??_testLeds 002C                                _rxMsgQueue 01C2  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00D1                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 2F4C                               testLeds@idx 002D  
                     UpdateTxFreq@freqVal 00BB                      __size_of_DacSetValue 01FE  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 3186  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 3170  
                         ?_FLASH_ReadByte 0018                  _TMR0_SetInterruptHandler 3266  
                            ??_EepromRead 0019                           _SetMcuFwVersion 2CEC  
                        ?_GetMcuFwVersion 0001                 __size_of_SetCpldFwVersion 0042  
                          ZeroArray@array 0020             FLASH_WriteBlock@flashWrBufPtr 0021  
               __size_of_InitSevenSegment 0026                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                            ??_UpdateRxFreq 002E  
                          ??_UpdateTxFreq 00B3                  __end_of_DATAEE_WriteByte 2D58  
                FLASH_EraseBlock@baseAddr 0018                               ___ftdiv@exp 0076  
                            _EUSART1_Read 2A74                      _CheckFlashPrecentage 2094  
                       FLASH_WriteBlock@i 002C                        __end_of_EepromRead 325C  
                             ___ftmul@exp 0063                ?_SetConversionResultFormat 002C  
            __end_of_INTERRUPT_Initialize 327E                            __end_of___ftge 2382  
            InitAdcApplicationMgr@channel 0018                            __end_of___wmul 2FE8  
                     GroupControlMcu@data 00CF                             __pidataCOMRAM 3276  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 315A  
                          DacSetValue@idx 00CB                          _FLASH_WriteBlock 1F2A  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 2F4C  
                              floor@expon 0095                         ?_InitSynthesizers 0001  
                       ??_ClearMcuRunTime 0018                       start_initialization 2500  
                              eval_poly@d 0078                                eval_poly@n 007A  
                              eval_poly@x 0075                          BlinkOkLeds@state 001B  
                      ??_InitSynthesizers 0018                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 007F           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 2F9C                    __size_of_SwSpiDataHigh 001E  
                   ??_InitRxMessageParams 0024                               __end_of_exp 1012  
                             __end_of_log 1738                               __end_of_pow 14EE  
                AdcConvert@_adcResult_324 00B5                             _GetMcuRunTime 1B08  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 2C7C  
                      GetMcuFwVersion@idx 002F                        SetMcuFwVersion@idx 002E  
                              frexp@value 0018                           ___llmod@divisor 001C  
                   ?_CheckFlashPrecentage 0001                           ___llmod@counter 0020  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                               _ResetCpld 3216                             _PLL_REGISTERS 0601  
                     SendAckMessage@TxMsg 0026                       _keepAliveSignalUart 323A  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 2D8E  
                       __size_of_GroupAdc 0048                      __end_of_SwSpiDataLow 30CE  
                    __end_of_SwSpiClkHigh 30B0                    __size_of_FlashReadUart 03B6  
                  __size_of_SwSpiSetClock 0050                                  ??___ftge 001E  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 3170  
       __end_of_SetConversionResultFormat 322E                               __pdataBANK0 00EA  
                 __end_of_SetMcuFwVersion 2D22                                  ??_memset 001E  
                __size_of_GroupControlMcu 003C               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2866                            _SetChannelMode 2E92  
                __end_of_FLASH_EraseBlock 2E60                  __size_of_SWSPI_send_bits 004A  
                      _SendSystemStartAck 3246                  __size_of_SWSPI_send_word 0042  
                          _eusart1RxCount 00E5                         __size_of___altoft 007A  
                               _ZeroArray 310A                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lbtoft 0024  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01D6                       ?_SendSystemStartAck 0001  
                   DacSetValue@digitalVal 00C9                            ?_GetMcuRunTime 0001  
                          BlinkOkLeds@idx 001C                       SWSPI_send_bits@data 001B  
                      SwSpiClkLow@phrType 0018                     __size_of_SetMcuSystem 000A  
            __size_of_EUSART1_Receive_ISR 002E                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 00FA                                 __pnvBANK0 00FA  
                __size_of_TMR0_StartTimer 0004                                ?_ResetCpld 0001  
                  _PIN_MANAGER_Initialize 29E8                      ??_SendSystemStartAck 002C  
                           _SwSpiDataHigh 30CE                     _InitAdcApplicationMgr 31FA  
                               __pintcode 0008                    __end_of_SendAckMessage 28B8  
                               __ptext100 2BC2                                 __ptext101 3282  
                               __ptext102 3286                                 __ptext103 2CB4  
                               __ptext104 2EF2                                 __ptext105 0000  
                                ?___ftadd 0069                                  ?___ftdiv 0069  
                  __end_of_SetChannelMode 2EC2                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0029  
                                ?___llmod 0018                                  ?___ftsub 0075  
                                ?___fttol 0078                          _FlashSampleWrite 1738  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 310A                         __size_of_testLeds 006A  
           SetConversionResultFormat@data 002C                      __end_of_UpdateTxFreq 1618  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                            ?_SwSpiClkLow 0001                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                               _eval_poly 1CCE                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00E9                          _SetCpldFwVersion 2B3E  
                            _SetMcuSystem 325C                             _FlashReadUart 0672  
                           _SwSpiSetClock 28B8                         ?_GetCpldFwVersion 0001  
                        _InitSevenSegment 2F9C              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 0032                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                __size_of_DATAEE_ReadByte 0014                          _conversionFormat 003D  
                      ??_GetCpldFwVersion 0024                      _INTERRUPT_Initialize 327A  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 00C0  
                         UpdateTxFreq@idx 00BF                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C            FlashReadUart@numOfSampleToRead 0024  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 27BC                         _GroupSynthesizers 2DC4  
                          ?_SwSpiDataHigh 0001       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                                  i2u394_40 2BDC  
                     SWSPI_send_word@data 001E                        ?_GroupSynthesizers 00CF  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 2140  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                       ??_PIN_MANAGER_IOC 0001                          ?_SetMcuFwVersion 002C  
                     ??_GroupSynthesizers 0031                   SWSPI_send_word@dataSize 0022  
                              _ADCON0bits 000FC2                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                          ??_FlashEreaseMem 002C  
                      __end_of_channelArr 0638                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0075                            ?_FlashReadUart 0024  
                          ?_SwSpiSetClock 0001                         ??_GroupControlMcu 0031  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                       ??_SWSPI_send_bits 001C                         ??_SWSPI_send_word 0023  
                   GetCpldFwVersion@TxMsg 0026                   FlashReadCondition@TxMsg 0026  
                             _INTCON2bits 000FF1                                 copy_data0 2514  
                               copy_data1 2534                     ?_INTERRUPT_Initialize 0001  
                       ?_DATAEE_WriteByte 0018                     __size_of_SwSpiDataLow 001E  
               __end_of_GroupSynthesizers 2DF8                     __size_of_SwSpiClkHigh 001E  
                   EUSART1_Read@readValue 0019                  __end_of_FLASH_WriteBlock 1FE6  
                                _GroupDAC 3054                        ??_DATAEE_WriteByte 0019  
                                _GroupAdc 29A0                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                               ??_ResetCpld 002C  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                                _ResetMcu 31DE                             ??_DacSetValue 00B3  
                             _readAddress 00F6                                  __Lrparam 0000  
                       _ADC_GetConversion 2EC2                       FlashReadUart@offset 00BD  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 319A  
                       __CFG_P2BMX$PORTD2 000000               ??_SetConversionResultFormat 002E  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 2486                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                           GroupAdc@request 00D1  
                                ___awtoft 2C7C                             crc8@dataArray 0018  
                                ___ftpack 1FE6                                  ___lbtoft 2FE8  
                        _numOfReadSamples 003E                                  ___lltoft 2760  
                       _FLASH_IsWriteDone 3208                       WriteUartMessage@idx 001E  
                                ___lwtoft 3030                               ??_ZeroArray 0024  
                      DacSetValue@dataCnt 00C7                  GetMcuRunTime@tempRunTime 0069  
                     ??_ADC_GetConversion 001A                                  _exp$3078 009A  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00E1  
                      DacSetValue@idx_643 00CD                  __end_of_WriteUartMessage 2DC4  
                                _crcGiven 00DE                              _SwSpiDataLow 30B0  
                            _SwSpiClkHigh 3092                                  __ptext10 2AFC  
                                __ptext11 2956                                  __ptext20 31D0  
                                __ptext12 28B8                                  __ptext21 2D22  
                                __ptext13 3074                                  __ptext30 31AE  
                                __ptext22 1B08                                  __ptext14 3092  
                                __ptext31 1E6A                                  __ptext23 2382  
                                __ptext15 30B0                                  __ptext40 2E92  
                                __ptext32 2E60                                  __ptext24 2404  
                                __ptext16 30CE                                  __ptext41 322E  
                                __ptext33 2814                                  __ptext25 21D2  
                                __ptext17 30EC                                  __ptext50 31EC  
                                __ptext42 2A74                                  __ptext34 0A28  
                                __ptext26 3252                                  __ptext18 2CEC  
                                __ptext51 327A                                  __ptext43 323A  
                                __ptext35 2FE8                                  __ptext27 3186  
                                __ptext19 2B3E                                  __ptext60 2F20  
                                __ptext52 2D58                                  __ptext44 3142  
                                __ptext36 2572                                  __ptext28 0672  
                                __ptext61 2D8E                                  __ptext53 315A  
                                __ptext45 325C                                  __ptext37 31DE  
                                __ptext29 2F74                                  __ptext70 26A4  
                                __ptext62 2C40                                  __ptext54 2AB8  
                                __ptext46 3128                                  __ptext38 3216  
                                __ptext71 2702                                  __ptext63 3170  
                                __ptext55 25DC                                  __ptext47 2DF8  
                                __ptext39 3222                                  __ptext80 22F2  
                                __ptext72 1012                                  __ptext64 327E  
                                __ptext56 3246                                  __ptext48 3266  
                                __ptext81 2486                                  __ptext73 1372  
                                __ptext65 3270                                  __ptext57 2866  
                                __ptext49 29E8                                  __ptext90 2760  
                                __ptext82 1CCE                                  __ptext74 1618  
                                __ptext66 2F9C                                  __ptext58 2908  
                                __ptext91 3030                                  __ptext83 2FC2  
                                __ptext75 0E22                                  __ptext67 31FA  
                                __ptext59 310A                                  __ptext92 1FE6  
                                __ptext84 192A                                  __ptext76 1DA4  
                                __ptext68 319A                                  __ptext93 1738  
                                __ptext85 2B80                                  __ptext77 1BEC  
                                __ptext69 2094                                  __ptext94 1F2A  
                                __ptext86 11C4                                  __ptext78 2262  
                                __ptext95 2E2C                                  __ptext87 300C  
                                __ptext79 1832                                  __ptext96 3208  
                                __ptext88 1A20                                  __ptext97 2EC2  
                                __ptext89 2C7C                                  __ptext99 2140  
                                _pow$3076 00A6                                  _pow$3077 00A9  
                     ??_FLASH_IsWriteDone 0018                        DacSetValue@tempArr 00B5  
             DATAEE_WriteByte@GIEBitValue 001A                  __size_of_GetMcuFwVersion 0082  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 00CF                 __size_of_InitSynthesizers 0006  
                                _msgCount 00DD                           ??_SwSpiDataHigh 0018  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 2EF2                     __size_of_UpdateRxFreq 001E  
                   __size_of_UpdateTxFreq 012A                        SWSPI_send_word@idx 0024  
                             _groupsArray 00EA                                  _testLeds 2572  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
                     SwSpiDataLow@phrType 0018                 __end_of_FLASH_IsWriteDone 3216  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                       __end_of_DacSetValue 0C26  
                     _EUSART1_Receive_ISR 2EF2                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 2F74                                  exp@coeff 0638  
                              _MEMORY_ISR 3286                           ??_FlashReadUart 0060  
                                log@coeff 0656                           ??_SwSpiSetClock 0019  
                  SWSPI_send_word@phrType 0023                      __size_of_SwSpiClkLow 001E  
                    SetCpldFwVersion@data 002C                        ??_FLASH_EraseBlock 001C  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                             _sampleArray 016E                               _sampleCount 00D9  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                       ??_readUartMessage 01D6                 _SetConversionResultFormat 3222  
                __end_of_FlashSampleWrite 1832                                  intlevel2 0000  
                            _UpdateRxFreq 30EC                              _UpdateTxFreq 14EE  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 2AFC  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 0034  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 31AE                                _RCSTA1bits 000FAB  
            __end_of_EUSART1_Transmit_ISR 2CEC                      SwSpiSetClock@phrType 0019  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                __end_of_SetCpldFwVersion 2B80                         _TimerSamplingFlag 00E8  
                           AdcConvert@idx 00BC                  __end_of_InitSevenSegment 2FC2  
                     _SetAdcOperationMode 322E                             _isReWriteDone 003B  
                  __size_of_EUSART1_Write 003C                         EepromRead@address 0019  
                        ___lldiv@quotient 0020                          _GroupFlashMemory 2A30  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 2DF8  
                         ___lwmod@counter 0005                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                             ??_EepromWrite 001C  
                              _AdcConvert 1012                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 2A30                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 3282                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
                     SwSpiClkHigh@phrType 0018                 __size_of_GetCpldFwVersion 0090  
                             _DacSetValue 0A28  
