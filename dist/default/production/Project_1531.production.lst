

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 04 16:57:29 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   136                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   137  0000                     
   138                           ; Version 1.45
   139                           ; Generated 16/11/2017 GMT
   140                           ; 
   141                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   142                           ; All rights reserved.
   143                           ; 
   144                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   145                           ; 
   146                           ; Redistribution and use in source and binary forms, with or without modification, are
   147                           ; permitted provided that the following conditions are met:
   148                           ; 
   149                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   150                           ;        conditions and the following disclaimer.
   151                           ; 
   152                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   153                           ;        of conditions and the following disclaimer in the documentation and/or other
   154                           ;        materials provided with the distribution.
   155                           ; 
   156                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   157                           ;        software without specific prior written permission.
   158                           ; 
   159                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   160                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   161                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   162                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   163                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   164                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   165                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   166                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   167                           ; 
   168                           ; 
   169                           ; Code-generator required, PIC18F45K22 Definitions
   170                           ; 
   171                           ; SFR Addresses
   172  0000                     
   173 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   174  0000                     
   175                           	psect	idataCOMRAM
   176  003786                     __pidataCOMRAM:
   177                           	opt stack 0
   178                           
   179                           ;initializer for _writeAddress
   180  003786  4000               	dw	16384
   181  003788  0000               	dw	0
   182                           
   183                           	psect	idataBANK0
   184  0036D6                     __pidataBANK0:
   185                           	opt stack 0
   186                           
   187                           ;initializer for _groupsArray
   188  0036D6  CE                 	db	low _GroupControlMcu
   189  0036D7  30                 	db	high _GroupControlMcu
   190  0036D8  84                 	db	low _GroupStatusAndVersion
   191  0036D9  2B                 	db	high _GroupStatusAndVersion
   192  0036DA  28                 	db	low _GroupAdc
   193  0036DB  2E                 	db	high _GroupAdc
   194  0036DC  70                 	db	low _GroupSynthesizers
   195  0036DD  2A                 	db	high _GroupSynthesizers
   196  0036DE  B8                 	db	low _GroupFlashMemory
   197  0036DF  2E                 	db	high _GroupFlashMemory
   198  0036E0  90                 	db	low _GroupDAC
   199  0036E1  35                 	db	high _GroupDAC
   200                           
   201                           ;initializer for _readAddress
   202  0036E2  4000               	dw	16384
   203  0036E4  0000               	dw	0
   204                           
   205                           	psect	smallconst
   206  000600                     __psmallconst:
   207                           	opt stack 0
   208  000600  00                 	db	0
   209  000601                     _TEST_PLL_REGISTERS:
   210                           	opt stack 0
   211  000601  041C               	dw	1052
   212  000603  0001               	dw	1
   213  000605  300B               	dw	12299
   214  000607  0061               	dw	97
   215  000609  323A               	dw	12858
   216  00060B  00C0               	dw	192
   217  00060D  BCC9               	dw	48329
   218  00060F  2221               	dw	8737
   219  000611  0428               	dw	1064
   220  000613  102D               	dw	4141
   221  000615  00E7               	dw	231
   222  000617  1200               	dw	4608
   223  000619  6076               	dw	24694
   224  00061B  3505               	dw	13573
   225  00061D  0025               	dw	37
   226  00061F  0080               	dw	128
   227  000621  8B84               	dw	35716
   228  000623  3200               	dw	12800
   229  000625  0003               	dw	3
   230  000627  0000               	dw	0
   231  000629  0012               	dw	18
   232  00062B  0000               	dw	0
   233  00062D  0001               	dw	1
   234  00062F  0600               	dw	1536
   235  000631  00                 	db	0
   236  000632  00                 	db	0
   237  000633  00                 	db	0
   238  000634  00                 	db	0
   239  000635                     __end_of_TEST_PLL_REGISTERS:
   240                           	opt stack 0
   241  000635                     _PLL_INIT_REGISTERS:
   242                           	opt stack 0
   243  000635  041C               	dw	1052
   244  000637  0001               	dw	1
   245  000639  300B               	dw	12299
   246  00063B  0061               	dw	97
   247  00063D  323A               	dw	12858
   248  00063F  00C0               	dw	192
   249  000641  BCC9               	dw	48329
   250  000643  2221               	dw	8737
   251  000645  0428               	dw	1064
   252  000647  102D               	dw	4141
   253  000649  00E7               	dw	231
   254  00064B  1200               	dw	4608
   255  00064D  A076               	dw	41078
   256  00064F  3500               	dw	13568
   257  000651  0025               	dw	37
   258  000653  0080               	dw	128
   259  000655  9B84               	dw	39812
   260  000657  3400               	dw	13312
   261  000659  0003               	dw	3
   262  00065B  0000               	dw	0
   263  00065D  0012               	dw	18
   264  00065F  0000               	dw	0
   265  000661  0001               	dw	1
   266  000663  0600               	dw	1536
   267  000665  0340               	dw	832
   268  000667  0020               	dw	32
   269  000669                     __end_of_PLL_INIT_REGISTERS:
   270                           	opt stack 0
   271  000669                     _channelArr:
   272                           	opt stack 0
   273  000669  07                 	db	7
   274  00066A  06                 	db	6
   275  00066B  05                 	db	5
   276  00066C  04                 	db	4
   277  00066D  19                 	db	25
   278  00066E  0A                 	db	10
   279  00066F  0D                 	db	13
   280  000670                     __end_of_channelArr:
   281                           	opt stack 0
   282  000670                     exp@coeff:
   283                           	opt stack 0
   284  000670  00                 	db	0
   285  000671  80                 	db	128
   286  000672  3F                 	db	63
   287  000673  72                 	db	114
   288  000674  31                 	db	49
   289  000675  3F                 	db	63
   290  000676  FE                 	db	254
   291  000677  75                 	db	117
   292  000678  3E                 	db	62
   293  000679  58                 	db	88
   294  00067A  63                 	db	99
   295  00067B  3D                 	db	61
   296  00067C  95                 	db	149
   297  00067D  1D                 	db	29
   298  00067E  3C                 	db	60
   299  00067F  C5                 	db	197
   300  000680  AE                 	db	174
   301  000681  3A                 	db	58
   302  000682  79                 	db	121
   303  000683  21                 	db	33
   304  000684  39                 	db	57
   305  000685  94                 	db	148
   306  000686  80                 	db	128
   307  000687  37                 	db	55
   308  000688  93                 	db	147
   309  000689  A7                 	db	167
   310  00068A  35                 	db	53
   311  00068B  56                 	db	86
   312  00068C  15                 	db	21
   313  00068D  34                 	db	52
   314  00068E                     __end_ofexp@coeff:
   315                           	opt stack 0
   316  00068E                     log@coeff:
   317                           	opt stack 0
   318  00068E  00                 	db	0
   319  00068F  00                 	db	0
   320  000690  00                 	db	0
   321  000691  00                 	db	0
   322  000692  80                 	db	128
   323  000693  3F                 	db	63
   324  000694  F0                 	db	240
   325  000695  FF                 	db	255
   326  000696  BE                 	db	190
   327  000697  E2                 	db	226
   328  000698  A9                 	db	169
   329  000699  3E                 	db	62
   330  00069A  83                 	db	131
   331  00069B  76                 	db	118
   332  00069C  BE                 	db	190
   333  00069D  AE                 	db	174
   334  00069E  2B                 	db	43
   335  00069F  3E                 	db	62
   336  0006A0  3C                 	db	60
   337  0006A1  C3                 	db	195
   338  0006A2  BD                 	db	189
   339  0006A3  D2                 	db	210
   340  0006A4  13                 	db	19
   341  0006A5  3D                 	db	61
   342  0006A6  78                 	db	120
   343  0006A7  D3                 	db	211
   344  0006A8  BB                 	db	187
   345  0006A9                     __end_oflog@coeff:
   346                           	opt stack 0
   347  0006A9  00                 	db	0	; dummy byte at the end
   348  0000                     
   349                           	psect	nvCOMRAM
   350  000046                     __pnvCOMRAM:
   351                           	opt stack 0
   352  000046                     _timer0ReloadVal:
   353                           	opt stack 0
   354  000046                     	ds	2
   355                           
   356                           	psect	nvBANK0
   357  0000FB                     __pnvBANK0:
   358                           	opt stack 0
   359  0000FB                     _TMR0_InterruptHandler:
   360                           	opt stack 0
   361  0000FB                     	ds	2
   362  0000FD                     _cnt:
   363                           	opt stack 0
   364  0000FD                     	ds	2
   365  0000FF                     _eusart1TxBufferRemaining:
   366                           	opt stack 0
   367  0000FF                     	ds	1
   368  0000                     _ANSELE	set	3900
   369  0000                     _ANSELB	set	3897
   370  0000                     _ANSELC	set	3898
   371  0000                     _ANSELD	set	3899
   372  0000                     _ANSELA	set	3896
   373  0000                     _ADCON0bits	set	4034
   374  0000                     _ADRESH	set	4036
   375  0000                     _ADRESL	set	4035
   376  0000                     _ADCON2	set	4032
   377  0000                     _ADCON1	set	4033
   378  0000                     _ADCON0	set	4034
   379  0000                     _T0CONbits	set	4053
   380  0000                     _T0CON	set	4053
   381  0000                     _TMR0L	set	4054
   382  0000                     _TMR0H	set	4055
   383  0000                     _EEDATA	set	4008
   384  0000                     _EEADR	set	4009
   385  0000                     _EECON2	set	4007
   386  0000                     _EECON1bits	set	4006
   387  0000                     _TABLAT	set	4085
   388  0000                     _TBLPTRL	set	4086
   389  0000                     _TBLPTRH	set	4087
   390  0000                     _TBLPTRU	set	4088
   391  0000                     _INTCON2bits	set	4081
   392  0000                     _WPUB	set	3937
   393  0000                     _TRISC	set	3988
   394  0000                     _TRISB	set	3987
   395  0000                     _TRISE	set	3990
   396  0000                     _LATC	set	3979
   397  0000                     _LATB	set	3978
   398  0000                     _LATE	set	3981
   399  0000                     _RCREG1	set	4014
   400  0000                     _RCSTA1bits	set	4011
   401  0000                     _TXREG1	set	4013
   402  0000                     _SPBRGH1	set	4016
   403  0000                     _SPBRG1	set	4015
   404  0000                     _TXSTA1	set	4012
   405  0000                     _RCSTA1	set	4011
   406  0000                     _BAUDCON1	set	4024
   407  0000                     _PIR1bits	set	3998
   408  0000                     _PIE1bits	set	3997
   409  0000                     _PIR2bits	set	4001
   410  0000                     _PIE2bits	set	4000
   411  0000                     _RCONbits	set	4048
   412  0000                     _OSCTUNE	set	3995
   413  0000                     _OSCCON2	set	4050
   414  0000                     _OSCCON	set	4051
   415  0000                     _LATAbits	set	3977
   416  0000                     _LATDbits	set	3980
   417  0000                     _INTCONbits	set	4082
   418  0000                     _IOCB	set	3938
   419  0000                     _PORTD	set	3971
   420  0000                     _LATD	set	3980
   421  0000                     _TRISD	set	3989
   422  0000                     _LATA	set	3977
   423  0000                     _TRISA	set	3986
   424  0000                     _LATCbits	set	3979
   425  0000                     _LATBbits	set	3978
   426                           
   427                           ; #config settings
   428  0000                     
   429                           	psect	cinit
   430  0027A6                     __pcinit:
   431                           	opt stack 0
   432  0027A6                     start_initialization:
   433                           	opt stack 0
   434  0027A6                     __initialization:
   435                           	opt stack 0
   436                           
   437                           ; Initialize objects allocated to BANK0 (16 bytes)
   438                           ; load TBLPTR registers with __pidataBANK0
   439  0027A6  0ED6               	movlw	low __pidataBANK0
   440  0027A8  6EF6               	movwf	tblptrl,c
   441  0027AA  0E36               	movlw	high __pidataBANK0
   442  0027AC  6EF7               	movwf	tblptrh,c
   443  0027AE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   444  0027B0  6EF8               	movwf	tblptru,c
   445  0027B2  EE00  F0EB         	lfsr	0,__pdataBANK0
   446  0027B6  EE10 F010          	lfsr	1,16
   447  0027BA                     copy_data0:
   448  0027BA  0009               	tblrd		*+
   449  0027BC  CFF5 FFEE          	movff	tablat,postinc0
   450  0027C0  50E5               	movf	postdec1,w,c
   451  0027C2  50E1               	movf	fsr1l,w,c
   452  0027C4  E1FA               	bnz	copy_data0
   453                           
   454                           ; Initialize objects allocated to COMRAM (4 bytes)
   455                           ; load TBLPTR registers with __pidataCOMRAM
   456  0027C6  0E86               	movlw	low __pidataCOMRAM
   457  0027C8  6EF6               	movwf	tblptrl,c
   458  0027CA  0E37               	movlw	high __pidataCOMRAM
   459  0027CC  6EF7               	movwf	tblptrh,c
   460  0027CE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   461  0027D0  6EF8               	movwf	tblptru,c
   462  0027D2  EE00  F042         	lfsr	0,__pdataCOMRAM
   463  0027D6  EE10 F004          	lfsr	1,4
   464  0027DA                     copy_data1:
   465  0027DA  0009               	tblrd		*+
   466  0027DC  CFF5 FFEE          	movff	tablat,postinc0
   467  0027E0  50E5               	movf	postdec1,w,c
   468  0027E2  50E1               	movf	fsr1l,w,c
   469  0027E4  E1FA               	bnz	copy_data1
   470                           
   471                           ; Clear objects allocated to BANK1 (194 bytes)
   472  0027E6  EE01  F000         	lfsr	0,__pbssBANK1
   473  0027EA  0EC2               	movlw	194
   474  0027EC                     clear_0:
   475  0027EC  6AEE               	clrf	postinc0,c
   476  0027EE  06E8               	decf	wreg,f,c
   477  0027F0  E1FD               	bnz	clear_0
   478                           
   479                           ; Clear objects allocated to BANK0 (43 bytes)
   480  0027F2  EE00  F0C0         	lfsr	0,__pbssBANK0
   481  0027F6  0E2B               	movlw	43
   482  0027F8                     clear_1:
   483  0027F8  6AEE               	clrf	postinc0,c
   484  0027FA  06E8               	decf	wreg,f,c
   485  0027FC  E1FD               	bnz	clear_1
   486                           
   487                           ; Clear objects allocated to COMRAM (17 bytes)
   488  0027FE  EE00  F031         	lfsr	0,__pbssCOMRAM
   489  002802  0E11               	movlw	17
   490  002804                     clear_2:
   491  002804  6AEE               	clrf	postinc0,c
   492  002806  06E8               	decf	wreg,f,c
   493  002808  E1FD               	bnz	clear_2
   494  00280A                     end_of_initialization:
   495                           	opt stack 0
   496  00280A                     __end_of__initialization:
   497                           	opt stack 0
   498  00280A  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   499  00280C  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   500  00280E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   501  002810  6EF8               	movwf	tblptru,c
   502  002812  0100               	movlb	0
   503  002814  EFA9  F014         	goto	_main	;jump to C main() function
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	bssCOMRAM
   514  000031                     __pbssCOMRAM:
   515                           	opt stack 0
   516  000031                     _numOfValidateSamples:
   517                           	opt stack 0
   518  000031                     	ds	4
   519  000035                     TMR0_ISR@CountCallBack:
   520                           	opt stack 0
   521  000035                     	ds	2
   522  000037                     _eusart1RxTail:
   523                           	opt stack 0
   524  000037                     	ds	1
   525  000038                     _eusart1RxHead:
   526                           	opt stack 0
   527  000038                     	ds	1
   528  000039                     _eusart1TxTail:
   529                           	opt stack 0
   530  000039                     	ds	1
   531  00003A                     _eusart1TxHead:
   532                           	opt stack 0
   533  00003A                     	ds	1
   534  00003B                     _isReWriteDone:
   535                           	opt stack 0
   536  00003B                     	ds	1
   537  00003C                     _adcSampleMode:
   538                           	opt stack 0
   539  00003C                     	ds	1
   540  00003D                     _conversionFormat:
   541                           	opt stack 0
   542  00003D                     	ds	1
   543  00003E                     _numOfReadSamples:
   544                           	opt stack 0
   545  00003E                     	ds	4
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	dataCOMRAM
   556  000042                     __pdataCOMRAM:
   557                           	opt stack 0
   558  000042                     _writeAddress:
   559                           	opt stack 0
   560  000042                     	ds	4
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	bssBANK0
   571  0000C0                     __pbssBANK0:
   572                           	opt stack 0
   573  0000C0                     _mcuRunTimeIn5SecTicks:
   574                           	opt stack 0
   575  0000C0                     	ds	4
   576  0000C4                     _errno:
   577                           	opt stack 0
   578  0000C4                     	ds	2
   579  0000C6                     _sampleCount:
   580                           	opt stack 0
   581  0000C6                     	ds	2
   582  0000C8                     _count:
   583                           	opt stack 0
   584  0000C8                     	ds	2
   585  0000CA                     _msgCount:
   586                           	opt stack 0
   587  0000CA                     	ds	1
   588  0000CB                     _crcGiven:
   589                           	opt stack 0
   590  0000CB                     	ds	1
   591  0000CC                     _crcCalc:
   592                           	opt stack 0
   593  0000CC                     	ds	1
   594  0000CD                     _data:
   595                           	opt stack 0
   596  0000CD                     	ds	1
   597  0000CE                     _dataSize:
   598                           	opt stack 0
   599  0000CE                     	ds	1
   600  0000CF                     _request:
   601                           	opt stack 0
   602  0000CF                     	ds	1
   603  0000D0                     _group:
   604                           	opt stack 0
   605  0000D0                     	ds	1
   606  0000D1                     _cState:
   607                           	opt stack 0
   608  0000D1                     	ds	1
   609  0000D2                     _eusart1RxCount:
   610                           	opt stack 0
   611  0000D2                     	ds	1
   612  0000D3                     _channel:
   613                           	opt stack 0
   614  0000D3                     	ds	1
   615  0000D4                     _TimerKeepAliveFlag:
   616                           	opt stack 0
   617  0000D4                     	ds	1
   618  0000D5                     _TimerSamplingFlag:
   619                           	opt stack 0
   620  0000D5                     	ds	1
   621  0000D6                     _TimerOneSecFlag:
   622                           	opt stack 0
   623  0000D6                     	ds	1
   624  0000D7                     _rxMsgQueue:
   625                           	opt stack 0
   626  0000D7                     	ds	20
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	dataBANK0
   637  0000EB                     __pdataBANK0:
   638                           	opt stack 0
   639  0000EB                     _groupsArray:
   640                           	opt stack 0
   641  0000EB                     	ds	12
   642  0000F7                     _readAddress:
   643                           	opt stack 0
   644  0000F7                     	ds	4
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	bssBANK1
   655  000100                     __pbssBANK1:
   656                           	opt stack 0
   657  000100                     _eusart1TxBuffer:
   658                           	opt stack 0
   659  000100                     	ds	70
   660  000146                     _eusart1RxBuffer:
   661                           	opt stack 0
   662  000146                     	ds	40
   663  00016E                     _sampleArray:
   664                           	opt stack 0
   665  00016E                     	ds	64
   666  0001AE                     _rxMsgData:
   667                           	opt stack 0
   668  0001AE                     	ds	20
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  0001C2                     __pcstackBANK1:
   680                           	opt stack 0
   681  0001C2                     GroupStatusAndVersion@data:
   682                           	opt stack 0
   683  0001C2                     GroupAdc@data:
   684                           	opt stack 0
   685  0001C2                     GroupSynthesizers@data:
   686                           	opt stack 0
   687  0001C2                     GroupFlashMemory@data:
   688                           	opt stack 0
   689  0001C2                     GroupDAC@data:
   690                           	opt stack 0
   691  0001C2                     
   692                           ; 3 bytes @ 0x0
   693  0001C2                     	ds	2
   694  0001C4                     GroupFlashMemory@request:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x2
   698  0001C4                     	ds	1
   699  0001C5                     ??_readUartMessage:
   700                           
   701                           ; 1 bytes @ 0x3
   702  0001C5                     	ds	4
   703  0001C9                     readUartMessage@idx:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x7
   707  0001C9                     	ds	2
   708  0001CB                     readUartMessage@chRec:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x9
   712  0001CB                     	ds	1
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	cstackBANK0
   723  000060                     __pcstackBANK0:
   724                           	opt stack 0
   725  000060                     ??_FlashSampleWrite:
   726  000060                     ??___ftdiv:
   727  000060                     ??_FlashReadUart:
   728  000060                     strtol@sign:
   729                           	opt stack 0
   730  000060                     GetMcuRunTime@TxMsg:
   731                           	opt stack 0
   732                           
   733                           ; 9 bytes @ 0x0
   734  000060                     	ds	1
   735  000061                     strtol@a:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x1
   739  000061                     	ds	1
   740  000062                     FlashSampleWrite@rotateLeft:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x2
   744  000062                     	ds	1
   745  000063                     ___ftdiv@cntr:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x3
   749  000063                     	ds	1
   750  000064                     ___ftdiv@f3:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x4
   754  000064                     	ds	1
   755  000065                     strtol@c:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x5
   759  000065                     	ds	1
   760  000066                     ?_GetIntFromUartData:
   761                           	opt stack 0
   762  000066                     GetIntFromUartData@data:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x6
   766  000066                     	ds	1
   767  000067                     ___ftdiv@exp:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x7
   771  000067                     	ds	1
   772  000068                     ___ftdiv@sign:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x8
   776  000068                     	ds	1
   777  000069                     ?___ftmul:
   778                           	opt stack 0
   779  000069                     ___ftmul@f1:
   780                           	opt stack 0
   781  000069                     GetMcuRunTime@tempRunTime:
   782                           	opt stack 0
   783                           
   784                           ; 4 bytes @ 0x9
   785  000069                     	ds	1
   786  00006A                     GetIntFromUartData@dataRegArr:
   787                           	opt stack 0
   788                           
   789                           ; 8 bytes @ 0xA
   790  00006A                     	ds	2
   791  00006C                     ___ftmul@f2:
   792                           	opt stack 0
   793  00006C                     FlashReadUart@TxMsg:
   794                           	opt stack 0
   795                           
   796                           ; 69 bytes @ 0xC
   797  00006C                     	ds	1
   798  00006D                     GetMcuRunTime@idx:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0xD
   802  00006D                     	ds	2
   803  00006F                     ??___ftmul:
   804                           
   805                           ; 1 bytes @ 0xF
   806  00006F                     	ds	3
   807  000072                     GetIntFromUartData@c:
   808                           	opt stack 0
   809  000072                     ___ftmul@exp:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x12
   813  000072                     	ds	1
   814  000073                     GetIntFromUartData@idx:
   815                           	opt stack 0
   816  000073                     ___ftmul@f3_as_product:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x13
   820  000073                     	ds	2
   821  000075                     DacSetValue@regData:
   822                           	opt stack 0
   823  000075                     UpdateTxFreq@regData:
   824                           	opt stack 0
   825  000075                     UpdateRxFreq@regData:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x15
   829  000075                     	ds	1
   830  000076                     ___ftmul@cntr:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x16
   834  000076                     	ds	1
   835  000077                     ___ftmul@sign:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x17
   839  000077                     	ds	1
   840  000078                     ??_CheckFlashPrecentage:
   841  000078                     ?___ftadd:
   842                           	opt stack 0
   843  000078                     ?___fttol:
   844                           	opt stack 0
   845  000078                     ___ftadd@f1:
   846                           	opt stack 0
   847  000078                     ___fttol@f1:
   848                           	opt stack 0
   849                           
   850                           ; 3 bytes @ 0x18
   851  000078                     	ds	3
   852  00007B                     ___ftadd@f2:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x1B
   856  00007B                     	ds	1
   857  00007C                     ??___fttol:
   858  00007C                     CheckFlashPrecentage@precentage:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x1C
   862  00007C                     	ds	2
   863  00007E                     ??___ftadd:
   864                           
   865                           ; 1 bytes @ 0x1E
   866  00007E                     	ds	3
   867  000081                     ___ftadd@sign:
   868                           	opt stack 0
   869  000081                     ___fttol@sign1:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x21
   873  000081                     	ds	1
   874  000082                     ___ftadd@exp2:
   875                           	opt stack 0
   876  000082                     ___fttol@lval:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x22
   880  000082                     	ds	1
   881  000083                     ___ftadd@exp1:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x23
   885  000083                     	ds	1
   886  000084                     ?___ftsub:
   887                           	opt stack 0
   888  000084                     ?_eval_poly:
   889                           	opt stack 0
   890  000084                     ___ftsub@f1:
   891                           	opt stack 0
   892  000084                     eval_poly@x:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x24
   896  000084                     	ds	2
   897  000086                     ___fttol@exp1:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x26
   901  000086                     	ds	1
   902  000087                     ?___altoft:
   903                           	opt stack 0
   904  000087                     eval_poly@d:
   905                           	opt stack 0
   906  000087                     ___ftsub@f2:
   907                           	opt stack 0
   908  000087                     ___altoft@c:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x27
   912  000087                     	ds	2
   913  000089                     eval_poly@n:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x29
   917  000089                     	ds	2
   918  00008B                     ??___altoft:
   919  00008B                     eval_poly@res:
   920                           	opt stack 0
   921                           
   922                           ; 3 bytes @ 0x2B
   923  00008B                     	ds	3
   924  00008E                     ?_log:
   925                           	opt stack 0
   926  00008E                     ?_ldexp:
   927                           	opt stack 0
   928  00008E                     ldexp@value:
   929                           	opt stack 0
   930  00008E                     log@x:
   931                           	opt stack 0
   932                           
   933                           ; 3 bytes @ 0x2E
   934  00008E                     	ds	1
   935  00008F                     ?_floor:
   936                           	opt stack 0
   937  00008F                     floor@x:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0x2F
   941  00008F                     	ds	2
   942  000091                     ldexp@newexp:
   943                           	opt stack 0
   944  000091                     log@exponent:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x31
   948  000091                     	ds	1
   949  000092                     floor@i:
   950                           	opt stack 0
   951                           
   952                           ; 3 bytes @ 0x32
   953  000092                     	ds	1
   954  000093                     ??_ldexp:
   955                           
   956                           ; 1 bytes @ 0x33
   957  000093                     	ds	2
   958  000095                     floor@expon:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x35
   962  000095                     	ds	2
   963  000097                     ?_exp:
   964                           	opt stack 0
   965  000097                     exp@x:
   966                           	opt stack 0
   967                           
   968                           ; 3 bytes @ 0x37
   969  000097                     	ds	3
   970  00009A                     _exp$3270:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x3A
   974  00009A                     	ds	3
   975  00009D                     exp@exponent:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x3D
   979  00009D                     	ds	2
   980  00009F                     exp@sign:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x3F
   984  00009F                     	ds	1
   985  0000A0                     ?_pow:
   986                           	opt stack 0
   987  0000A0                     pow@x:
   988                           	opt stack 0
   989                           
   990                           ; 3 bytes @ 0x40
   991  0000A0                     	ds	3
   992  0000A3                     pow@y:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x43
   996  0000A3                     	ds	3
   997  0000A6                     _pow$3268:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x46
  1001  0000A6                     	ds	3
  1002  0000A9                     _pow$3269:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x49
  1006  0000A9                     	ds	3
  1007  0000AC                     pow@sign:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x4C
  1011  0000AC                     	ds	1
  1012  0000AD                     pow@yi:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x4D
  1016  0000AD                     	ds	4
  1017  0000B1                     ??_AdcConvert:
  1018  0000B1                     _FlashReadUart$565:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x51
  1022  0000B1                     	ds	2
  1023  0000B3                     AdcConvert@_adcResult:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x53
  1027  0000B3                     	ds	2
  1028  0000B5                     AdcConvert@_adcResult_332:
  1029                           	opt stack 0
  1030  0000B5                     _FlashReadUart$566:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x55
  1034  0000B5                     	ds	2
  1035  0000B7                     _AdcConvert$3267:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x57
  1039  0000B7                     	ds	2
  1040  0000B9                     FlashReadUart@j:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x59
  1044  0000B9                     	ds	1
  1045  0000BA                     AdcConvert@adcRes:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x5A
  1049  0000BA                     	ds	1
  1050  0000BB                     FlashReadUart@idx:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x5B
  1054  0000BB                     	ds	1
  1055  0000BC                     AdcConvert@idx:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x5C
  1059  0000BC                     	ds	1
  1060  0000BD                     FlashReadUart@offset:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x5D
  1064  0000BD                     	ds	2
  1065  0000BF                     ??_GroupFlashMemory:
  1066  0000BF                     GroupControlMcu@request:
  1067                           	opt stack 0
  1068  0000BF                     GroupStatusAndVersion@request:
  1069                           	opt stack 0
  1070  0000BF                     GroupAdc@request:
  1071                           	opt stack 0
  1072  0000BF                     GroupSynthesizers@request:
  1073                           	opt stack 0
  1074  0000BF                     GroupDAC@request:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x5F
  1078  0000BF                     	ds	1
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           postdec1	equ	0xFE5
  1086                           fsr1l	equ	0xFE1
  1087                           
  1088                           	psect	cstackCOMRAM
  1089  000001                     __pcstackCOMRAM:
  1090                           	opt stack 0
  1091  000001                     ?___lwmod:
  1092                           	opt stack 0
  1093  000001                     ___lwmod@dividend:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x0
  1097  000001                     	ds	2
  1098  000003                     ___lwmod@divisor:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x2
  1102  000003                     	ds	2
  1103  000005                     ___lwmod@counter:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x4
  1107  000005                     	ds	1
  1108  000006                     ??_INTERRUPT_InterruptManager:
  1109                           
  1110                           ; 1 bytes @ 0x5
  1111  000006                     	ds	18
  1112  000018                     ??_EUSART1_Read:
  1113  000018                     ??_isspace:
  1114  000018                     ??_isdigit:
  1115  000018                     ??_isupper:
  1116  000018                     ??_BlinkErrorLeds:
  1117  000018                     ??_BlinkOkLeds:
  1118  000018                     ??_keepAliveSignalLed:
  1119  000018                     ?_ADC_GetConversion:
  1120                           	opt stack 0
  1121  000018                     ?_abs:
  1122                           	opt stack 0
  1123  000018                     ?___wmul:
  1124                           	opt stack 0
  1125  000018                     ?___ftpack:
  1126                           	opt stack 0
  1127  000018                     ?_frexp:
  1128                           	opt stack 0
  1129  000018                     ?___ftneg:
  1130                           	opt stack 0
  1131  000018                     ?___lmul:
  1132                           	opt stack 0
  1133  000018                     ?___lldiv:
  1134                           	opt stack 0
  1135  000018                     ?___llmod:
  1136                           	opt stack 0
  1137  000018                     InitAdcApplicationMgr@channel:
  1138                           	opt stack 0
  1139  000018                     SwSpi_Data_Pin@cPinMode:
  1140                           	opt stack 0
  1141  000018                     SwSpi_Clk_Pin@cPinMode:
  1142                           	opt stack 0
  1143  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1144                           	opt stack 0
  1145  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1146                           	opt stack 0
  1147  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1148                           	opt stack 0
  1149  000018                     EUSART1_Write@txData:
  1150                           	opt stack 0
  1151  000018                     DATAEE_WriteByte@bData:
  1152                           	opt stack 0
  1153  000018                     DATAEE_ReadByte@bAdd:
  1154                           	opt stack 0
  1155  000018                     toupper@c:
  1156                           	opt stack 0
  1157  000018                     PLLUartInitialize@data:
  1158                           	opt stack 0
  1159  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1160                           	opt stack 0
  1161  000018                     crc8@dataArray:
  1162                           	opt stack 0
  1163  000018                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000018                     abs@a:
  1166                           	opt stack 0
  1167  000018                     memset@p1:
  1168                           	opt stack 0
  1169  000018                     ___ftpack@arg:
  1170                           	opt stack 0
  1171  000018                     ___ftge@ff1:
  1172                           	opt stack 0
  1173  000018                     ___ftneg@f1:
  1174                           	opt stack 0
  1175  000018                     frexp@value:
  1176                           	opt stack 0
  1177  000018                     FLASH_ReadByte@flashAddr:
  1178                           	opt stack 0
  1179  000018                     FLASH_EraseBlock@baseAddr:
  1180                           	opt stack 0
  1181  000018                     make8@data:
  1182                           	opt stack 0
  1183  000018                     ___lmul@multiplier:
  1184                           	opt stack 0
  1185  000018                     ___lldiv@dividend:
  1186                           	opt stack 0
  1187  000018                     ___llmod@dividend:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x17
  1191  000018                     	ds	1
  1192  000019                     EepromRead@address:
  1193                           	opt stack 0
  1194  000019                     SwSpi_Data_Pin@phrType:
  1195                           	opt stack 0
  1196  000019                     SwSpi_Clk_Pin@phrType:
  1197                           	opt stack 0
  1198  000019                     SwSpi_Set_CE_Pin@phrType:
  1199                           	opt stack 0
  1200  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1201                           	opt stack 0
  1202  000019                     DATAEE_WriteByte@bAdd:
  1203                           	opt stack 0
  1204  000019                     _isdigit$2977:
  1205                           	opt stack 0
  1206  000019                     _isspace$2980:
  1207                           	opt stack 0
  1208  000019                     _isupper$2983:
  1209                           	opt stack 0
  1210  000019                     WriteUartMessage@dataBuf:
  1211                           	opt stack 0
  1212  000019                     EUSART1_Read@readValue:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x18
  1216  000019                     	ds	1
  1217  00001A                     ??_ADC_GetConversion:
  1218  00001A                     ??_abs:
  1219  00001A                     ??_TMR0_Initialize:
  1220  00001A                     SWSPI_send_bits@data:
  1221                           	opt stack 0
  1222  00001A                     DATAEE_WriteByte@GIEBitValue:
  1223                           	opt stack 0
  1224  00001A                     isdigit@c:
  1225                           	opt stack 0
  1226  00001A                     isspace@c:
  1227                           	opt stack 0
  1228  00001A                     isupper@c:
  1229                           	opt stack 0
  1230  00001A                     crc8@dataSize:
  1231                           	opt stack 0
  1232  00001A                     ___wmul@multiplicand:
  1233                           	opt stack 0
  1234  00001A                     memset@c:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x19
  1238  00001A                     	ds	1
  1239  00001B                     ??_isalpha:
  1240  00001B                     BlinkErrorLeds@state:
  1241                           	opt stack 0
  1242  00001B                     BlinkOkLeds@state:
  1243                           	opt stack 0
  1244  00001B                     EepromWrite@data:
  1245                           	opt stack 0
  1246  00001B                     SWSPI_send_bits@count:
  1247                           	opt stack 0
  1248  00001B                     ___ftpack@exp:
  1249                           	opt stack 0
  1250  00001B                     WriteUartMessage@dataSize:
  1251                           	opt stack 0
  1252  00001B                     frexp@eptr:
  1253                           	opt stack 0
  1254  00001B                     ___ftge@ff2:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x1A
  1258  00001B                     	ds	1
  1259  00001C                     ??_crc8:
  1260  00001C                     EepromWrite@address:
  1261                           	opt stack 0
  1262  00001C                     SWSPI_send_bits@phrType:
  1263                           	opt stack 0
  1264  00001C                     FLASH_EraseBlock@GIEBitValue:
  1265                           	opt stack 0
  1266  00001C                     ADC_GetConversion@channel:
  1267                           	opt stack 0
  1268  00001C                     make8@dataLocation:
  1269                           	opt stack 0
  1270  00001C                     ___ftpack@sign:
  1271                           	opt stack 0
  1272  00001C                     _isalpha$2974:
  1273                           	opt stack 0
  1274  00001C                     BlinkErrorLeds@idx:
  1275                           	opt stack 0
  1276  00001C                     BlinkOkLeds@idx:
  1277                           	opt stack 0
  1278  00001C                     ___wmul@product:
  1279                           	opt stack 0
  1280  00001C                     memset@n:
  1281                           	opt stack 0
  1282  00001C                     ___lmul@multiplicand:
  1283                           	opt stack 0
  1284  00001C                     ___lldiv@divisor:
  1285                           	opt stack 0
  1286  00001C                     ___llmod@divisor:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x1B
  1290  00001C                     	ds	1
  1291  00001D                     ??_make8:
  1292  00001D                     ??___ftpack:
  1293  00001D                     ??_frexp:
  1294  00001D                     ??_WriteUartMessage:
  1295  00001D                     isalpha@c:
  1296                           	opt stack 0
  1297  00001D                     crc8@crc:
  1298                           	opt stack 0
  1299  00001D                     FLASH_WriteBlock@writeAddr:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0x1C
  1303  00001D                     	ds	1
  1304  00001E                     ??___ftge:
  1305  00001E                     WriteUartMessage@idx:
  1306                           	opt stack 0
  1307  00001E                     memset@p:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x1D
  1311  00001E                     	ds	1
  1312  00001F                     crc8@i:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x1E
  1316  00001F                     	ds	1
  1317  000020                     ?___awtoft:
  1318                           	opt stack 0
  1319  000020                     ?___lltoft:
  1320                           	opt stack 0
  1321  000020                     ?___lwtoft:
  1322                           	opt stack 0
  1323  000020                     ___llmod@counter:
  1324                           	opt stack 0
  1325  000020                     ZeroArray@array:
  1326                           	opt stack 0
  1327  000020                     ___awtoft@c:
  1328                           	opt stack 0
  1329  000020                     ___lwtoft@c:
  1330                           	opt stack 0
  1331  000020                     ___lmul@product:
  1332                           	opt stack 0
  1333  000020                     ___lldiv@quotient:
  1334                           	opt stack 0
  1335  000020                     ___lltoft@c:
  1336                           	opt stack 0
  1337                           
  1338                           ; 4 bytes @ 0x1F
  1339  000020                     	ds	1
  1340  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1341                           	opt stack 0
  1342  000021                     SWSPI_send_word@data:
  1343                           	opt stack 0
  1344                           
  1345                           ; 4 bytes @ 0x20
  1346  000021                     	ds	1
  1347  000022                     ZeroArray@size:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x21
  1351  000022                     	ds	1
  1352  000023                     ??_FLASH_WriteBlock:
  1353  000023                     ___awtoft@sign:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x22
  1357  000023                     	ds	1
  1358  000024                     ??_GetMcuFwVersion:
  1359  000024                     ??_GetCpldFwVersion:
  1360  000024                     ??_FlashReadCondition:
  1361  000024                     ??___lltoft:
  1362  000024                     ?_strtol:
  1363                           	opt stack 0
  1364  000024                     SendAckMessage@inRequest:
  1365                           	opt stack 0
  1366  000024                     ___lldiv@counter:
  1367                           	opt stack 0
  1368  000024                     strtol@s:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x23
  1372  000024                     	ds	1
  1373  000025                     ??_GetMcuRunTime:
  1374  000025                     SendAckMessage@inGroup:
  1375                           	opt stack 0
  1376  000025                     SWSPI_send_word@dataSize:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x24
  1380  000025                     	ds	1
  1381  000026                     SWSPI_send_word@datac:
  1382                           	opt stack 0
  1383  000026                     strtol@endptr:
  1384                           	opt stack 0
  1385  000026                     SendAckMessage@TxMsg:
  1386                           	opt stack 0
  1387  000026                     GetMcuFwVersion@TxMsg:
  1388                           	opt stack 0
  1389  000026                     GetCpldFwVersion@TxMsg:
  1390                           	opt stack 0
  1391                           
  1392                           ; 9 bytes @ 0x25
  1393  000026                     	ds	1
  1394  000027                     SWSPI_send_word@idx:
  1395                           	opt stack 0
  1396  000027                     FLASH_WriteBlock@blockStartAddr:
  1397                           	opt stack 0
  1398                           
  1399                           ; 4 bytes @ 0x26
  1400  000027                     	ds	1
  1401  000028                     ___lltoft@exp:
  1402                           	opt stack 0
  1403  000028                     strtol@base:
  1404                           	opt stack 0
  1405  000028                     FlashReadCondition@TxMsg:
  1406                           	opt stack 0
  1407                           
  1408                           ; 9 bytes @ 0x27
  1409  000028                     	ds	1
  1410  000029                     ?___ftdiv:
  1411                           	opt stack 0
  1412  000029                     SWSPI_send_word@phrType:
  1413                           	opt stack 0
  1414  000029                     ___ftdiv@f1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x28
  1418  000029                     	ds	1
  1419  00002A                     ??_strtol:
  1420  00002A                     ??_PLLInitialize:
  1421                           
  1422                           ; 1 bytes @ 0x29
  1423  00002A                     	ds	1
  1424  00002B                     FLASH_WriteBlock@GIEBitValue:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x2A
  1428  00002B                     	ds	1
  1429  00002C                     ??_testLeds:
  1430  00002C                     FLASH_WriteBlock@i:
  1431                           	opt stack 0
  1432  00002C                     SetAdcOperationMode@data:
  1433                           	opt stack 0
  1434  00002C                     SetConversionResultFormat@data:
  1435                           	opt stack 0
  1436  00002C                     SetChannelMode@data:
  1437                           	opt stack 0
  1438  00002C                     FlashReadUart@numOfSampleToRead:
  1439                           	opt stack 0
  1440  00002C                     PLLInitialize@idx:
  1441                           	opt stack 0
  1442  00002C                     SetMcuFwVersion@data:
  1443                           	opt stack 0
  1444  00002C                     SetCpldFwVersion@data:
  1445                           	opt stack 0
  1446  00002C                     ___ftdiv@f2:
  1447                           	opt stack 0
  1448                           
  1449                           ; 3 bytes @ 0x2B
  1450  00002C                     	ds	1
  1451  00002D                     testLeds@idx:
  1452                           	opt stack 0
  1453  00002D                     FlashSampleWrite@sampleData:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x2C
  1457  00002D                     	ds	1
  1458  00002E                     SetMcuFwVersion@idx:
  1459                           	opt stack 0
  1460  00002E                     DacSetValue@data:
  1461                           	opt stack 0
  1462  00002E                     PLLInitialize@idx_812:
  1463                           	opt stack 0
  1464  00002E                     UpdateTxFreq@data:
  1465                           	opt stack 0
  1466  00002E                     UpdateRxFreq@data:
  1467                           	opt stack 0
  1468  00002E                     SetCpldFwVersion@idx:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x2D
  1472  00002E                     	ds	1
  1473  00002F                     ??_eval_poly:
  1474  00002F                     FlashSampleWrite@channelNum:
  1475                           	opt stack 0
  1476  00002F                     GetMcuFwVersion@idx:
  1477                           	opt stack 0
  1478  00002F                     ___altoft@exp:
  1479                           	opt stack 0
  1480  00002F                     GetCpldFwVersion@idx:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x2E
  1484  00002F                     	ds	1
  1485  000030                     ___altoft@sign:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x2F
  1489  000030                     	ds	1
  1490  000031                     tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           ; 1 bytes @ 0x30
  1500 ;;
  1501 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1502 ;;
  1503 ;; *************** function _main *****************
  1504 ;; Defined at:
  1505 ;;		line 13 in file "main.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1519 ;;      Params:         0       0       0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0
  1522 ;;      Totals:         0       0       0       0       0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels required when called:   10
  1525 ;; This function calls:
  1526 ;;		_AdcConvert
  1527 ;;		_BlinkErrorLeds
  1528 ;;		_BlinkOkLeds
  1529 ;;		_CheckFlashPrecentage
  1530 ;;		_InitSystemApplicationManagers
  1531 ;;		_SendSystemStartAck
  1532 ;;		_SetMcuRunTime
  1533 ;;		_SetMcuSystem
  1534 ;;		_keepAliveSignalLed
  1535 ;;		_keepAliveSignalUart
  1536 ;;		_readUartMessage
  1537 ;; This function is called by:
  1538 ;;		Startup code after reset
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text0
  1543  002952                     __ptext0:
  1544                           	opt stack 0
  1545  002952                     _main:
  1546                           	opt stack 21
  1547                           
  1548                           ;main.c: 16: SetMcuSystem();
  1549                           
  1550                           ;incstack = 0
  1551  002952  ECB9  F01B         	call	_SetMcuSystem	;wreg free
  1552                           
  1553                           ;main.c: 19: InitSystemApplicationManagers();
  1554  002956  EC20  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1555                           
  1556                           ;main.c: 22: SendSystemStartAck();
  1557  00295A  ECAE  F01B         	call	_SendSystemStartAck	;wreg free
  1558                           
  1559                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1560  00295E  0E03               	movlw	3
  1561  002960  ECDA  F014         	call	_BlinkOkLeds
  1562  002964                     
  1563                           ;main.c: 28: {
  1564                           ;main.c: 29: readUartMessage();
  1565  002964  EC4B  F006         	call	_readUartMessage	;wreg free
  1566                           
  1567                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1568  002968  0100               	movlb	0	; () banked
  1569  00296A  05D6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1570  00296C  A4D8               	btfss	status,2,c
  1571  00296E  D006               	goto	l1417
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;main.c: 32: {
  1575                           ;main.c: 34: SetMcuRunTime();
  1576  002970  ECA0  F017         	call	_SetMcuRunTime	;wreg free
  1577                           
  1578                           ;main.c: 35: TimerOneSecFlag = 0;
  1579  002974  0E00               	movlw	0
  1580  002976  0100               	movlb	0	; () banked
  1581  002978  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1582                           
  1583                           ;main.c: 36: }
  1584  00297A  D7F4               	goto	l1416
  1585  00297C                     l1417:
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1589                           
  1590                           ; BSR set to: 0
  1591  00297C  05D5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1592  00297E  A4D8               	btfss	status,2,c
  1593  002980  D010               	goto	l1419
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 38: {
  1597                           ;main.c: 39: keepAliveSignalLed();
  1598  002982  EC2D  F01B         	call	_keepAliveSignalLed	;wreg free
  1599                           
  1600                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1601  002986  ECAB  F010         	call	_CheckFlashPrecentage	;wreg free
  1602  00298A  06E8               	decf	wreg,f,c
  1603  00298C  A4D8               	btfss	status,2,c
  1604  00298E  D003               	goto	l1420
  1605                           
  1606                           ;main.c: 42: {
  1607                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1608  002990  0E04               	movlw	4
  1609  002992  EC09  F015         	call	_BlinkErrorLeds
  1610  002996                     l1420:
  1611                           
  1612                           ;main.c: 44: }
  1613                           ;main.c: 47: AdcConvert();
  1614  002996  EC2D  F009         	call	_AdcConvert	;wreg free
  1615                           
  1616                           ;main.c: 49: TimerSamplingFlag = 0;
  1617  00299A  0E00               	movlw	0
  1618  00299C  0100               	movlb	0	; () banked
  1619  00299E  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1620                           
  1621                           ;main.c: 50: }
  1622  0029A0  D7E1               	goto	l1416
  1623  0029A2                     l1419:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1627                           
  1628                           ; BSR set to: 0
  1629  0029A2  05D4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1630  0029A4  A4D8               	btfss	status,2,c
  1631  0029A6  D7DE               	goto	l1416
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;main.c: 52: {
  1635                           ;main.c: 53: keepAliveSignalUart();
  1636  0029A8  ECA8  F01B         	call	_keepAliveSignalUart	;wreg free
  1637                           
  1638                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1639  0029AC  0E00               	movlw	0
  1640  0029AE  0100               	movlb	0	; () banked
  1641  0029B0  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           
  1645                           ; BSR set to: 0
  1646                           
  1647                           ; BSR set to: 0
  1648                           
  1649                           ; BSR set to: 0
  1650  0029B2  D7D8               	goto	l1416
  1651  0029B4                     __end_of_main:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _readUartMessage *****************
  1664 ;; Defined at:
  1665 ;;		line 28 in file "EusartApp.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  idx             2    7[BANK1 ] int 
  1670 ;;  chRec           1    9[BANK1 ] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1680 ;;      Params:         0       0       0       0       0       0       0
  1681 ;;      Locals:         0       0       3       0       0       0       0
  1682 ;;      Temps:          0       0       4       0       0       0       0
  1683 ;;      Totals:         0       0       7       0       0       0       0
  1684 ;;Total ram usage:        7 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    9
  1687 ;; This function calls:
  1688 ;;		_EUSART1_Read
  1689 ;;		_GroupAdc
  1690 ;;		_GroupControlMcu
  1691 ;;		_GroupDAC
  1692 ;;		_GroupFlashMemory
  1693 ;;		_GroupStatusAndVersion
  1694 ;;		_GroupSynthesizers
  1695 ;;		_InitRxMessageParams
  1696 ;;		_ZeroArray
  1697 ;;		_crc8
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text1
  1704  000C96                     __ptext1:
  1705                           	opt stack 0
  1706  000C96                     _readUartMessage:
  1707                           	opt stack 21
  1708                           
  1709                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;incstack = 0
  1713  000C96  0E00               	movlw	0
  1714  000C98  0101               	movlb	1	; () banked
  1715  000C9A  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1716                           
  1717                           ;EusartApp.c: 32: switch(cState)
  1718  000C9C  D0DF               	goto	l178
  1719  000C9E                     
  1720                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1721                           
  1722                           ; BSR set to: 1
  1723  000C9E  0E04               	movlw	4
  1724  000CA0  0100               	movlb	0	; () banked
  1725  000CA2  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1726  000CA4  0012               	return	
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;EusartApp.c: 38: {
  1730                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1731  000CA6  0E01               	movlw	1
  1732  000CA8  6FD1               	movwf	_cState& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;EusartApp.c: 40: }
  1736                           ;EusartApp.c: 41: return;
  1737                           
  1738                           ; BSR set to: 0
  1739  000CAA  0012               	return	
  1740  000CAC                     
  1741                           ; BSR set to: 0
  1742                           ;EusartApp.c: 45: InitRxMessageParams();
  1743                           
  1744                           ; BSR set to: 0
  1745  000CAC  EC2F  F01A         	call	_InitRxMessageParams	;wreg free
  1746                           
  1747                           ;EusartApp.c: 46: msgCount = 0;
  1748  000CB0  0E00               	movlw	0
  1749  000CB2  0100               	movlb	0	; () banked
  1750  000CB4  6FCA               	movwf	_msgCount& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1754  000CB6  0E01               	movlw	1
  1755  000CB8  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1756  000CBA  D00E               	goto	l183
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;EusartApp.c: 48: {
  1760                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1761  000CBC  EC7E  F017         	call	_EUSART1_Read	;wreg free
  1762  000CC0  0101               	movlb	1	; () banked
  1763  000CC2  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1764                           
  1765                           ; BSR set to: 1
  1766                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1767  000CC4  C1CB  F0D7         	movff	readUartMessage@chRec,_rxMsgQueue
  1768                           
  1769                           ; BSR set to: 1
  1770                           ;EusartApp.c: 51: if(chRec == (0x24))
  1771  000CC8  0E24               	movlw	36
  1772  000CCA  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1773  000CCC  A4D8               	btfss	status,2,c
  1774  000CCE  0012               	return	
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;EusartApp.c: 52: {
  1778                           ;EusartApp.c: 53: cState = READ_GROUP;
  1779  000CD0  0E02               	movlw	2
  1780  000CD2  0100               	movlb	0	; () banked
  1781  000CD4  6FD1               	movwf	_cState& (0+255),b
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;EusartApp.c: 54: }
  1785                           ;EusartApp.c: 55: }
  1786  000CD6  0012               	return	
  1787  000CD8                     l183:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;EusartApp.c: 56: else
  1791                           ;EusartApp.c: 57: {
  1792                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1793                           
  1794                           ; BSR set to: 0
  1795  000CD8  0E00               	movlw	0
  1796  000CDA  6FD1               	movwf	_cState& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;EusartApp.c: 59: }
  1800                           ;EusartApp.c: 61: break;
  1801  000CDC  0012               	return	
  1802  000CDE                     
  1803                           ; BSR set to: 0
  1804                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1805                           
  1806                           ; BSR set to: 0
  1807  000CDE  0E01               	movlw	1
  1808  000CE0  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1809  000CE2  0012               	return	
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;EusartApp.c: 66: {
  1813                           ;EusartApp.c: 67: group = EUSART1_Read();
  1814  000CE4  EC7E  F017         	call	_EUSART1_Read	;wreg free
  1815  000CE8  0100               	movlb	0	; () banked
  1816  000CEA  6FD0               	movwf	_group& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1820  000CEC  C0D0  F0D8         	movff	_group,_rxMsgQueue+1
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1824  000CF0  0E03               	movlw	3
  1825  000CF2  6FD1               	movwf	_cState& (0+255),b
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;EusartApp.c: 70: }
  1829                           ;EusartApp.c: 71: break;
  1830  000CF4  0012               	return	
  1831  000CF6                     
  1832                           ; BSR set to: 0
  1833                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1834                           
  1835                           ; BSR set to: 0
  1836  000CF6  0E01               	movlw	1
  1837  000CF8  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1838  000CFA  0012               	return	
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;EusartApp.c: 76: {
  1842                           ;EusartApp.c: 77: request = EUSART1_Read();
  1843  000CFC  EC7E  F017         	call	_EUSART1_Read	;wreg free
  1844  000D00  0100               	movlb	0	; () banked
  1845  000D02  6FCF               	movwf	_request& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1849  000D04  C0CF  F0D9         	movff	_request,_rxMsgQueue+2
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1853  000D08  0E04               	movlw	4
  1854  000D0A  6FD1               	movwf	_cState& (0+255),b
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;EusartApp.c: 80: }
  1858                           ;EusartApp.c: 81: break;
  1859  000D0C  0012               	return	
  1860  000D0E                     
  1861                           ; BSR set to: 0
  1862                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1863                           
  1864                           ; BSR set to: 0
  1865  000D0E  0E01               	movlw	1
  1866  000D10  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1867  000D12  0012               	return	
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;EusartApp.c: 85: {
  1871                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1872  000D14  EC7E  F017         	call	_EUSART1_Read	;wreg free
  1873  000D18  0100               	movlb	0	; () banked
  1874  000D1A  6FCE               	movwf	_dataSize& (0+255),b
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1878  000D1C  C0CE  F0DA         	movff	_dataSize,_rxMsgQueue+3
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;EusartApp.c: 88: if(dataSize == 0)
  1882  000D20  51CE               	movf	_dataSize& (0+255),w,b
  1883  000D22  A4D8               	btfss	status,2,c
  1884  000D24  D003               	goto	l193
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;EusartApp.c: 89: {
  1888                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1889  000D26  0E06               	movlw	6
  1890  000D28  6FD1               	movwf	_cState& (0+255),b
  1891                           
  1892                           ;EusartApp.c: 91: }
  1893  000D2A  0012               	return	
  1894  000D2C                     l193:
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;EusartApp.c: 92: else
  1898                           ;EusartApp.c: 93: {
  1899                           ;EusartApp.c: 94: cState = READ_DATA;
  1900                           
  1901                           ; BSR set to: 0
  1902  000D2C  0E05               	movlw	5
  1903  000D2E  6FD1               	movwf	_cState& (0+255),b
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;EusartApp.c: 95: }
  1907                           ;EusartApp.c: 97: }
  1908                           ;EusartApp.c: 99: break;
  1909                           
  1910                           ; BSR set to: 0
  1911  000D30  0012               	return	
  1912  000D32                     
  1913                           ; BSR set to: 0
  1914                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1915                           
  1916                           ; BSR set to: 0
  1917  000D32  51CE               	movf	_dataSize& (0+255),w,b
  1918  000D34  5DD2               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1919  000D36  A0D8               	btfss	status,0,c
  1920  000D38  0012               	return	
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;EusartApp.c: 104: {
  1924                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1925  000D3A  0EAE               	movlw	low _rxMsgData
  1926  000D3C  6E20               	movwf	ZeroArray@array,c
  1927  000D3E  0E01               	movlw	high _rxMsgData
  1928  000D40  6E21               	movwf	ZeroArray@array+1,c
  1929  000D42  0E00               	movlw	0
  1930  000D44  6E23               	movwf	ZeroArray@size+1,c
  1931  000D46  0E14               	movlw	20
  1932  000D48  6E22               	movwf	ZeroArray@size,c
  1933  000D4A  ECF6  F01A         	call	_ZeroArray	;wreg free
  1934                           
  1935                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1936  000D4E  0E00               	movlw	0
  1937  000D50  0101               	movlb	1	; () banked
  1938  000D52  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  1939  000D54  0E00               	movlw	0
  1940  000D56  6FC9               	movwf	readUartMessage@idx& (0+255),b
  1941  000D58  D022               	goto	l197
  1942  000D5A                     
  1943                           ; BSR set to: 1
  1944                           ;EusartApp.c: 108: {
  1945                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1946                           
  1947                           ; BSR set to: 1
  1948  000D5A  EC7E  F017         	call	_EUSART1_Read	;wreg free
  1949  000D5E  0101               	movlb	1	; () banked
  1950  000D60  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1951                           
  1952                           ; BSR set to: 1
  1953                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1954  000D62  0100               	movlb	0	; () banked
  1955  000D64  51CA               	movf	_msgCount& (0+255),w,b
  1956  000D66  0101               	movlb	1	; () banked
  1957  000D68  6FC5               	movwf	??_readUartMessage& (0+255),b
  1958  000D6A  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1959  000D6C  0E04               	movlw	4
  1960  000D6E  27C5               	addwf	??_readUartMessage& (0+255),f,b
  1961  000D70  0E00               	movlw	0
  1962  000D72  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1963  000D74  0ED7               	movlw	low _rxMsgQueue
  1964  000D76  25C5               	addwf	??_readUartMessage& (0+255),w,b
  1965  000D78  6ED9               	movwf	fsr2l,c
  1966  000D7A  0E00               	movlw	high _rxMsgQueue
  1967  000D7C  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1968  000D7E  6EDA               	movwf	fsr2h,c
  1969  000D80  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1970                           
  1971                           ; BSR set to: 1
  1972  000D84  0100               	movlb	0	; () banked
  1973  000D86  2BCA               	incf	_msgCount& (0+255),f,b
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  1977  000D88  0EAE               	movlw	low _rxMsgData
  1978  000D8A  0101               	movlb	1	; () banked
  1979  000D8C  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  1980  000D8E  6ED9               	movwf	fsr2l,c
  1981  000D90  0E01               	movlw	high _rxMsgData
  1982  000D92  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  1983  000D94  6EDA               	movwf	fsr2h,c
  1984  000D96  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1985                           
  1986                           ; BSR set to: 1
  1987  000D9A  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  1988  000D9C  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  1989  000D9E                     l197:
  1990                           
  1991                           ; BSR set to: 1
  1992                           
  1993                           ; BSR set to: 1
  1994  000D9E  0100               	movlb	0	; () banked
  1995  000DA0  51CE               	movf	_dataSize& (0+255),w,b
  1996  000DA2  0101               	movlb	1	; () banked
  1997  000DA4  6FC5               	movwf	??_readUartMessage& (0+255),b
  1998  000DA6  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1999  000DA8  51C5               	movf	??_readUartMessage& (0+255),w,b
  2000  000DAA  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  2001  000DAC  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2002  000DAE  0A80               	xorlw	128
  2003  000DB0  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2004  000DB2  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2005  000DB4  0A80               	xorlw	128
  2006  000DB6  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2007  000DB8  A0D8               	btfss	status,0,c
  2008  000DBA  D7CF               	goto	l198
  2009                           
  2010                           ; BSR set to: 1
  2011                           ;EusartApp.c: 112: }
  2012                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2013                           
  2014                           ; BSR set to: 1
  2015  000DBC  0E06               	movlw	6
  2016  000DBE  0100               	movlb	0	; () banked
  2017  000DC0  6FD1               	movwf	_cState& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;EusartApp.c: 115: }
  2021                           ;EusartApp.c: 116: break;
  2022  000DC2  0012               	return	
  2023  000DC4                     
  2024                           ; BSR set to: 0
  2025                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2026                           
  2027                           ; BSR set to: 0
  2028  000DC4  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2029  000DC6  B4D8               	btfsc	status,2,c
  2030  000DC8  0012               	return	
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;EusartApp.c: 120: {
  2034                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2035  000DCA  EC7E  F017         	call	_EUSART1_Read	;wreg free
  2036  000DCE  0100               	movlb	0	; () banked
  2037  000DD0  6FCB               	movwf	_crcGiven& (0+255),b
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2041  000DD2  0ED7               	movlw	low _rxMsgQueue
  2042  000DD4  6E18               	movwf	crc8@dataArray,c
  2043  000DD6  0E00               	movlw	high _rxMsgQueue
  2044  000DD8  6E19               	movwf	crc8@dataArray+1,c
  2045  000DDA  0E04               	movlw	4
  2046  000DDC  25CA               	addwf	_msgCount& (0+255),w,b
  2047  000DDE  6E1A               	movwf	crc8@dataSize,c
  2048  000DE0  6A1B               	clrf	crc8@dataSize+1,c
  2049  000DE2  0E00               	movlw	0
  2050  000DE4  221B               	addwfc	crc8@dataSize+1,f,c
  2051  000DE6  ECED  F016         	call	_crc8	;wreg free
  2052  000DEA  0100               	movlb	0	; () banked
  2053  000DEC  6FCC               	movwf	_crcCalc& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2057  000DEE  51CC               	movf	_crcCalc& (0+255),w,b
  2058  000DF0  19CB               	xorwf	_crcGiven& (0+255),w,b
  2059  000DF2  A4D8               	btfss	status,2,c
  2060  000DF4  D003               	goto	l202
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;EusartApp.c: 125: {
  2064                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2065  000DF6  0E07               	movlw	7
  2066  000DF8  6FD1               	movwf	_cState& (0+255),b
  2067                           
  2068                           ;EusartApp.c: 127: }
  2069  000DFA  0012               	return	
  2070  000DFC                     l202:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;EusartApp.c: 128: else
  2074                           ;EusartApp.c: 129: {
  2075                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2076                           
  2077                           ; BSR set to: 0
  2078  000DFC  0E00               	movlw	0
  2079  000DFE  6FD1               	movwf	_cState& (0+255),b
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;EusartApp.c: 131: }
  2083                           ;EusartApp.c: 132: }
  2084                           ;EusartApp.c: 133: break;
  2085                           
  2086                           ; BSR set to: 0
  2087  000E00  0012               	return	
  2088  000E02                     
  2089                           ; BSR set to: 0
  2090                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2091                           
  2092                           ; BSR set to: 0
  2093  000E02  0EFE               	movlw	254
  2094  000E04  0101               	movlb	1	; () banked
  2095  000E06  6FC5               	movwf	??_readUartMessage& (0+255),b
  2096  000E08  0EFF               	movlw	255
  2097  000E0A  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2098  000E0C  0100               	movlb	0	; () banked
  2099  000E0E  51D0               	movf	_group& (0+255),w,b
  2100  000E10  0101               	movlb	1	; () banked
  2101  000E12  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2102  000E14  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2103  000E16  90D8               	bcf	status,0,c
  2104  000E18  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2105  000E1A  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2106  000E1C  51C5               	movf	??_readUartMessage& (0+255),w,b
  2107  000E1E  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2108  000E20  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2109  000E22  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2110  000E24  0EEB               	movlw	low _groupsArray
  2111  000E26  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2112  000E28  6ED9               	movwf	fsr2l,c
  2113  000E2A  0E00               	movlw	high _groupsArray
  2114  000E2C  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2115  000E2E  6EDA               	movwf	fsr2h,c
  2116  000E30  D801               	call	u7798
  2117  000E32  D010               	goto	u7799
  2118  000E34                     u7798:
  2119  000E34  0005               	push	
  2120  000E36  6EFA               	movwf	pclath,c
  2121  000E38  50DE               	movf	postinc2,w,c
  2122  000E3A  6EFD               	movwf	tosl,c
  2123  000E3C  50DE               	movf	postinc2,w,c
  2124  000E3E  6EFE               	movwf	tosh,c
  2125  000E40  50F8               	movf	tblptru,w,c
  2126  000E42  6EFF               	movwf	tosu,c
  2127  000E44  50FA               	movf	pclath,w,c
  2128  000E46  0EAE               	movlw	low _rxMsgData
  2129  000E48  6FC2               	movwf	GroupDAC@data& (0+255),b
  2130  000E4A  0E01               	movlw	high _rxMsgData
  2131  000E4C  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2132  000E4E  0100               	movlb	0	; () banked
  2133  000E50  51CF               	movf	_request& (0+255),w,b
  2134  000E52  0012               	return		;indir
  2135  000E54                     u7799:
  2136                           
  2137                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2138  000E54  0E00               	movlw	0
  2139  000E56  0100               	movlb	0	; () banked
  2140  000E58  6FD1               	movwf	_cState& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;EusartApp.c: 139: }
  2144                           
  2145                           ;EusartApp.c: 138: break;
  2146  000E5A  0012               	return	
  2147  000E5C                     l178:
  2148                           
  2149                           ; BSR set to: 0
  2150  000E5C  0100               	movlb	0	; () banked
  2151  000E5E  51D1               	movf	_cState& (0+255),w,b
  2152                           
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 8, Range of values is 0 to 7
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           25    13 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  000E60  0A00               	xorlw	0	; case 0
  2160  000E62  B4D8               	btfsc	status,2,c
  2161  000E64  D71C               	goto	l179
  2162  000E66  0A01               	xorlw	1	; case 1
  2163  000E68  B4D8               	btfsc	status,2,c
  2164  000E6A  D720               	goto	l182
  2165  000E6C  0A03               	xorlw	3	; case 2
  2166  000E6E  B4D8               	btfsc	status,2,c
  2167  000E70  D736               	goto	l187
  2168  000E72  0A01               	xorlw	1	; case 3
  2169  000E74  B4D8               	btfsc	status,2,c
  2170  000E76  D73F               	goto	l189
  2171  000E78  0A07               	xorlw	7	; case 4
  2172  000E7A  B4D8               	btfsc	status,2,c
  2173  000E7C  D748               	goto	l191
  2174  000E7E  0A01               	xorlw	1	; case 5
  2175  000E80  B4D8               	btfsc	status,2,c
  2176  000E82  D757               	goto	l195
  2177  000E84  0A03               	xorlw	3	; case 6
  2178  000E86  B4D8               	btfsc	status,2,c
  2179  000E88  D79D               	goto	l200
  2180  000E8A  0A01               	xorlw	1	; case 7
  2181  000E8C  A4D8               	btfss	status,2,c
  2182  000E8E  0012               	return	
  2183  000E90  D7B8               	goto	l204
  2184  000E92                     __end_of_readUartMessage:
  2185                           	opt stack 0
  2186                           tosu	equ	0xFFF
  2187                           tosh	equ	0xFFE
  2188                           tosl	equ	0xFFD
  2189                           pclath	equ	0xFFA
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           postdec1	equ	0xFE5
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _InitRxMessageParams *****************
  2205 ;; Defined at:
  2206 ;;		line 142 in file "EusartApp.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2220 ;;      Params:         0       0       0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0
  2223 ;;      Totals:         0       0       0       0       0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    5
  2227 ;; This function calls:
  2228 ;;		_ZeroArray
  2229 ;; This function is called by:
  2230 ;;		_readUartMessage
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text2
  2235  00345E                     __ptext2:
  2236                           	opt stack 0
  2237  00345E                     _InitRxMessageParams:
  2238                           	opt stack 24
  2239                           
  2240                           ;EusartApp.c: 146: dataSize = 0;
  2241                           
  2242                           ;incstack = 0
  2243  00345E  0E00               	movlw	0
  2244  003460  0100               	movlb	0	; () banked
  2245  003462  6FCE               	movwf	_dataSize& (0+255),b
  2246                           
  2247                           ;EusartApp.c: 147: crcCalc = 0;
  2248  003464  0E00               	movlw	0
  2249  003466  6FCC               	movwf	_crcCalc& (0+255),b
  2250                           
  2251                           ;EusartApp.c: 148: crcGiven = 0;
  2252  003468  0E00               	movlw	0
  2253  00346A  6FCB               	movwf	_crcGiven& (0+255),b
  2254                           
  2255                           ;EusartApp.c: 149: msgCount = 0;
  2256  00346C  0E00               	movlw	0
  2257  00346E  6FCA               	movwf	_msgCount& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2261  003470  0ED7               	movlw	low _rxMsgQueue
  2262  003472  6E20               	movwf	ZeroArray@array,c
  2263  003474  0E00               	movlw	high _rxMsgQueue
  2264  003476  6E21               	movwf	ZeroArray@array+1,c
  2265  003478  0E00               	movlw	0
  2266  00347A  6E23               	movwf	ZeroArray@size+1,c
  2267  00347C  0E14               	movlw	20
  2268  00347E  6E22               	movwf	ZeroArray@size,c
  2269  003480  ECF6  F01A         	call	_ZeroArray
  2270  003484  0012               	return		;funcret
  2271  003486                     __end_of_InitRxMessageParams:
  2272                           	opt stack 0
  2273                           tosu	equ	0xFFF
  2274                           tosh	equ	0xFFE
  2275                           tosl	equ	0xFFD
  2276                           pclath	equ	0xFFA
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postdec1	equ	0xFE5
  2284                           fsr1l	equ	0xFE1
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _GroupDAC *****************
  2292 ;; Defined at:
  2293 ;;		line 133 in file "MessageFunctions.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  request         1    wreg     enum E12
  2296 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2297 ;;		 -> rxMsgData(20), 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  request         1   95[BANK0 ] enum E12
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         0       0       2       0       0       0       0
  2310 ;;      Locals:         0       1       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0
  2312 ;;      Totals:         0       1       2       0       0       0       0
  2313 ;;Total ram usage:        3 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    8
  2316 ;; This function calls:
  2317 ;;		_DacSetValue
  2318 ;; This function is called by:
  2319 ;;		_readUartMessage
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text3
  2324  003590                     __ptext3:
  2325                           	opt stack 0
  2326  003590                     _GroupDAC:
  2327                           	opt stack 21
  2328                           
  2329                           ;incstack = 0
  2330                           ;GroupDAC@request stored from wreg
  2331  003590  0100               	movlb	0	; () banked
  2332  003592  6FBF               	movwf	GroupDAC@request& (0+255),b
  2333                           
  2334                           ;MessageFunctions.c: 135: switch (request)
  2335  003594  D007               	goto	l1212
  2336  003596                     
  2337                           ;MessageFunctions.c: 138: DacSetValue(data);
  2338  003596  C1C2  F02E         	movff	GroupDAC@data,DacSetValue@data
  2339  00359A  C1C3  F02F         	movff	GroupDAC@data+1,DacSetValue@data+1
  2340  00359E  EC4D  F019         	call	_DacSetValue	;wreg free
  2341                           
  2342                           ;MessageFunctions.c: 143: }
  2343                           
  2344                           ;MessageFunctions.c: 142: break;
  2345                           
  2346                           ;MessageFunctions.c: 141: default:
  2347                           
  2348                           ;MessageFunctions.c: 139: break;
  2349  0035A2  0012               	return	
  2350  0035A4                     l1212:
  2351  0035A4  0100               	movlb	0	; () banked
  2352  0035A6  51BF               	movf	GroupDAC@request& (0+255),w,b
  2353                           
  2354                           ; Switch size 1, requested type "space"
  2355                           ; Number of cases is 1, Range of values is 97 to 97
  2356                           ; switch strategies available:
  2357                           ; Name         Instructions Cycles
  2358                           ; simple_byte            4     3 (average)
  2359                           ;	Chosen strategy is simple_byte
  2360  0035A8  0A61               	xorlw	97	; case 97
  2361  0035AA  A4D8               	btfss	status,2,c
  2362  0035AC  0012               	return	
  2363  0035AE  D7F3               	goto	l1213
  2364  0035B0                     __end_of_GroupDAC:
  2365                           	opt stack 0
  2366                           tosu	equ	0xFFF
  2367                           tosh	equ	0xFFE
  2368                           tosl	equ	0xFFD
  2369                           pclath	equ	0xFFA
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           postdec1	equ	0xFE5
  2377                           fsr1l	equ	0xFE1
  2378                           indf2	equ	0xFDF
  2379                           postinc2	equ	0xFDE
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _GroupFlashMemory *****************
  2385 ;; Defined at:
  2386 ;;		line 112 in file "MessageFunctions.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  request         1    wreg     enum E12
  2389 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  request         1    2[BANK1 ] enum E12
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         0       0       2       0       0       0       0
  2402 ;;      Locals:         0       0       1       0       0       0       0
  2403 ;;      Temps:          0       1       0       0       0       0       0
  2404 ;;      Totals:         0       1       3       0       0       0       0
  2405 ;;Total ram usage:        4 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    7
  2408 ;; This function calls:
  2409 ;;		_FlashEreaseMem
  2410 ;;		_FlashReadCondition
  2411 ;;		_FlashReadUart
  2412 ;; This function is called by:
  2413 ;;		_readUartMessage
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text4
  2418  002EB8                     __ptext4:
  2419                           	opt stack 0
  2420  002EB8                     _GroupFlashMemory:
  2421                           	opt stack 22
  2422                           
  2423                           ;incstack = 0
  2424                           ;GroupFlashMemory@request stored from wreg
  2425  002EB8  0101               	movlb	1	; () banked
  2426  002EBA  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2427                           
  2428                           ;MessageFunctions.c: 114: switch (request)
  2429  002EBC  D013               	goto	l1203
  2430  002EBE                     
  2431                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2432  002EBE  EC9B  F016         	call	_FlashEreaseMem	;wreg free
  2433                           
  2434                           ;MessageFunctions.c: 118: break;
  2435  002EC2  0012               	return	
  2436  002EC4                     
  2437                           ;MessageFunctions.c: 121: FlashReadCondition();
  2438  002EC4  EC2E  F00C         	call	_FlashReadCondition	;wreg free
  2439                           
  2440                           ;MessageFunctions.c: 122: break;
  2441  002EC8  0012               	return	
  2442  002ECA                     
  2443                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2444  002ECA  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2445  002ECE  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2446  002ED2  50DF               	movf	indf2,w,c
  2447  002ED4  0100               	movlb	0	; () banked
  2448  002ED6  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2449  002ED8  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2450  002EDA  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2451  002EDC  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2452  002EDE  EC55  F003         	call	_FlashReadUart	;wreg free
  2453                           
  2454                           ;MessageFunctions.c: 130: }
  2455                           
  2456                           ;MessageFunctions.c: 129: break;
  2457                           
  2458                           ;MessageFunctions.c: 128: default:
  2459                           
  2460                           ;MessageFunctions.c: 126: break;
  2461  002EE2  0012               	return	
  2462  002EE4                     l1203:
  2463  002EE4  0101               	movlb	1	; () banked
  2464  002EE6  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2465                           
  2466                           ; Switch size 1, requested type "space"
  2467                           ; Number of cases is 3, Range of values is 81 to 83
  2468                           ; switch strategies available:
  2469                           ; Name         Instructions Cycles
  2470                           ; simple_byte           10     6 (average)
  2471                           ;	Chosen strategy is simple_byte
  2472  002EE8  0A51               	xorlw	81	; case 81
  2473  002EEA  B4D8               	btfsc	status,2,c
  2474  002EEC  D7E8               	goto	l1204
  2475  002EEE  0A03               	xorlw	3	; case 82
  2476  002EF0  B4D8               	btfsc	status,2,c
  2477  002EF2  D7E8               	goto	l1206
  2478  002EF4  0A01               	xorlw	1	; case 83
  2479  002EF6  A4D8               	btfss	status,2,c
  2480  002EF8  0012               	return	
  2481  002EFA  D7E7               	goto	l1207
  2482  002EFC                     __end_of_GroupFlashMemory:
  2483                           	opt stack 0
  2484                           tosu	equ	0xFFF
  2485                           tosh	equ	0xFFE
  2486                           tosl	equ	0xFFD
  2487                           pclath	equ	0xFFA
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           fsr1l	equ	0xFE1
  2496                           indf2	equ	0xFDF
  2497                           postinc2	equ	0xFDE
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _GroupAdc *****************
  2503 ;; Defined at:
  2504 ;;		line 67 in file "MessageFunctions.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  request         1    wreg     enum E12
  2507 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  request         1   95[BANK0 ] enum E12
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2519 ;;      Params:         0       0       2       0       0       0       0
  2520 ;;      Locals:         0       1       0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0
  2522 ;;      Totals:         0       1       2       0       0       0       0
  2523 ;;Total ram usage:        3 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    7
  2526 ;; This function calls:
  2527 ;;		_SetAdcOperationMode
  2528 ;;		_SetChannelMode
  2529 ;;		_SetConversionResultFormat
  2530 ;; This function is called by:
  2531 ;;		_readUartMessage
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text5
  2536  002E28                     __ptext5:
  2537                           	opt stack 0
  2538  002E28                     _GroupAdc:
  2539                           	opt stack 22
  2540                           
  2541                           ;incstack = 0
  2542                           ;GroupAdc@request stored from wreg
  2543  002E28  0100               	movlb	0	; () banked
  2544  002E2A  6FBF               	movwf	GroupAdc@request& (0+255),b
  2545                           
  2546                           ;MessageFunctions.c: 69: switch (request)
  2547  002E2C  D015               	goto	l1184
  2548  002E2E                     
  2549                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2550  002E2E  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2551  002E32  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2552  002E36  ECA2  F01B         	call	_SetAdcOperationMode	;wreg free
  2553                           
  2554                           ;MessageFunctions.c: 73: break;
  2555  002E3A  0012               	return	
  2556  002E3C                     
  2557                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2558  002E3C  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2559  002E40  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2560  002E44  ECD2  F019         	call	_SetChannelMode	;wreg free
  2561                           
  2562                           ;MessageFunctions.c: 77: break;
  2563  002E48  0012               	return	
  2564  002E4A                     
  2565                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2566  002E4A  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2567  002E4E  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2568  002E52  EC9C  F01B         	call	_SetConversionResultFormat	;wreg free
  2569                           
  2570                           ;MessageFunctions.c: 85: }
  2571                           
  2572                           ;MessageFunctions.c: 84: break;
  2573                           
  2574                           ;MessageFunctions.c: 83: default:
  2575                           
  2576                           ;MessageFunctions.c: 81: break;
  2577  002E56  0012               	return	
  2578  002E58                     l1184:
  2579  002E58  0100               	movlb	0	; () banked
  2580  002E5A  51BF               	movf	GroupAdc@request& (0+255),w,b
  2581                           
  2582                           ; Switch size 1, requested type "space"
  2583                           ; Number of cases is 3, Range of values is 49 to 51
  2584                           ; switch strategies available:
  2585                           ; Name         Instructions Cycles
  2586                           ; simple_byte           10     6 (average)
  2587                           ;	Chosen strategy is simple_byte
  2588  002E5C  0A31               	xorlw	49	; case 49
  2589  002E5E  B4D8               	btfsc	status,2,c
  2590  002E60  D7E6               	goto	l1185
  2591  002E62  0A03               	xorlw	3	; case 50
  2592  002E64  B4D8               	btfsc	status,2,c
  2593  002E66  D7EA               	goto	l1187
  2594  002E68  0A01               	xorlw	1	; case 51
  2595  002E6A  A4D8               	btfss	status,2,c
  2596  002E6C  0012               	return	
  2597  002E6E  D7ED               	goto	l1188
  2598  002E70                     __end_of_GroupAdc:
  2599                           	opt stack 0
  2600                           tosu	equ	0xFFF
  2601                           tosh	equ	0xFFE
  2602                           tosl	equ	0xFFD
  2603                           pclath	equ	0xFFA
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           postinc0	equ	0xFEE
  2609                           wreg	equ	0xFE8
  2610                           postdec1	equ	0xFE5
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _GroupStatusAndVersion *****************
  2619 ;; Defined at:
  2620 ;;		line 38 in file "MessageFunctions.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  request         1    wreg     enum E12
  2623 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  request         1   95[BANK0 ] enum E12
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2635 ;;      Params:         0       0       2       0       0       0       0
  2636 ;;      Locals:         0       1       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0
  2638 ;;      Totals:         0       1       2       0       0       0       0
  2639 ;;Total ram usage:        3 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    7
  2642 ;; This function calls:
  2643 ;;		_GetCpldFwVersion
  2644 ;;		_GetMcuFwVersion
  2645 ;;		_GetMcuRunTime
  2646 ;;		_SetCpldFwVersion
  2647 ;;		_SetMcuFwVersion
  2648 ;; This function is called by:
  2649 ;;		_readUartMessage
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text6
  2654  002B84                     __ptext6:
  2655                           	opt stack 0
  2656  002B84                     _GroupStatusAndVersion:
  2657                           	opt stack 22
  2658                           
  2659                           ;incstack = 0
  2660                           ;GroupStatusAndVersion@request stored from wreg
  2661  002B84  0100               	movlb	0	; () banked
  2662  002B86  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2663                           
  2664                           ;MessageFunctions.c: 40: switch (request)
  2665  002B88  D017               	goto	l1173
  2666  002B8A                     
  2667                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2668  002B8A  EC55  F013         	call	_GetMcuFwVersion	;wreg free
  2669                           
  2670                           ;MessageFunctions.c: 44: break;
  2671  002B8E  0012               	return	
  2672  002B90                     
  2673                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2674  002B90  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2675  002B94  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2676  002B98  EC17  F019         	call	_SetMcuFwVersion	;wreg free
  2677                           
  2678                           ;MessageFunctions.c: 48: break;
  2679  002B9C  0012               	return	
  2680  002B9E                     
  2681                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2682  002B9E  EC3C  F012         	call	_GetCpldFwVersion	;wreg free
  2683                           
  2684                           ;MessageFunctions.c: 52: break;
  2685  002BA2  0012               	return	
  2686  002BA4                     
  2687                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2688  002BA4  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2689  002BA8  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2690  002BAC  EC04  F018         	call	_SetCpldFwVersion	;wreg free
  2691                           
  2692                           ;MessageFunctions.c: 56: break;
  2693  002BB0  0012               	return	
  2694  002BB2                     
  2695                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2696  002BB2  EC9C  F00E         	call	_GetMcuRunTime	;wreg free
  2697                           
  2698                           ;MessageFunctions.c: 64: }
  2699                           
  2700                           ;MessageFunctions.c: 63: break;
  2701                           
  2702                           ;MessageFunctions.c: 62: default:
  2703                           
  2704                           ;MessageFunctions.c: 60: break;
  2705  002BB6  0012               	return	
  2706  002BB8                     l1173:
  2707  002BB8  0100               	movlb	0	; () banked
  2708  002BBA  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2709                           
  2710                           ; Switch size 1, requested type "space"
  2711                           ; Number of cases is 5, Range of values is 33 to 37
  2712                           ; switch strategies available:
  2713                           ; Name         Instructions Cycles
  2714                           ; simple_byte           16     9 (average)
  2715                           ;	Chosen strategy is simple_byte
  2716  002BBC  0A21               	xorlw	33	; case 33
  2717  002BBE  B4D8               	btfsc	status,2,c
  2718  002BC0  D7F8               	goto	l1179
  2719  002BC2  0A03               	xorlw	3	; case 34
  2720  002BC4  B4D8               	btfsc	status,2,c
  2721  002BC6  D7E1               	goto	l1174
  2722  002BC8  0A01               	xorlw	1	; case 35
  2723  002BCA  B4D8               	btfsc	status,2,c
  2724  002BCC  D7E8               	goto	l1177
  2725  002BCE  0A07               	xorlw	7	; case 36
  2726  002BD0  B4D8               	btfsc	status,2,c
  2727  002BD2  D7DE               	goto	l1176
  2728  002BD4  0A01               	xorlw	1	; case 37
  2729  002BD6  A4D8               	btfss	status,2,c
  2730  002BD8  0012               	return	
  2731  002BDA  D7E4               	goto	l1178
  2732  002BDC                     __end_of_GroupStatusAndVersion:
  2733                           	opt stack 0
  2734                           tosu	equ	0xFFF
  2735                           tosh	equ	0xFFE
  2736                           tosl	equ	0xFFD
  2737                           pclath	equ	0xFFA
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           postinc0	equ	0xFEE
  2743                           wreg	equ	0xFE8
  2744                           postdec1	equ	0xFE5
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           fsr2h	equ	0xFDA
  2749                           fsr2l	equ	0xFD9
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _GroupControlMcu *****************
  2753 ;; Defined at:
  2754 ;;		line 11 in file "MessageFunctions.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  request         1    wreg     enum E12
  2757 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;  request         1   95[BANK0 ] enum E12
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2769 ;;      Params:         0       0       2       0       0       0       0
  2770 ;;      Locals:         0       1       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0
  2772 ;;      Totals:         0       1       2       0       0       0       0
  2773 ;;Total ram usage:        3 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    7
  2776 ;; This function calls:
  2777 ;;		_ResetCpld
  2778 ;;		_ResetMcu
  2779 ;;		_testLeds
  2780 ;; This function is called by:
  2781 ;;		_readUartMessage
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text7
  2786  0030CE                     __ptext7:
  2787                           	opt stack 0
  2788  0030CE                     _GroupControlMcu:
  2789                           	opt stack 22
  2790                           
  2791                           ;incstack = 0
  2792                           ;GroupControlMcu@request stored from wreg
  2793  0030CE  0100               	movlb	0	; () banked
  2794  0030D0  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2795                           
  2796                           ;MessageFunctions.c: 13: switch (request)
  2797  0030D2  D009               	goto	l1162
  2798  0030D4                     
  2799                           ;MessageFunctions.c: 16: testLeds();
  2800  0030D4  EC0C  F014         	call	_testLeds	;wreg free
  2801                           
  2802                           ;MessageFunctions.c: 17: break;
  2803  0030D8  0012               	return	
  2804  0030DA                     
  2805                           ;MessageFunctions.c: 20: ResetMcu();
  2806  0030DA  EC7A  F01B         	call	_ResetMcu	;wreg free
  2807                           
  2808                           ;MessageFunctions.c: 21: break;
  2809  0030DE  0012               	return	
  2810  0030E0                     
  2811                           ;MessageFunctions.c: 24: ResetCpld();
  2812  0030E0  EC96  F01B         	call	_ResetCpld	;wreg free
  2813                           
  2814                           ;MessageFunctions.c: 35: }
  2815                           
  2816                           ;MessageFunctions.c: 34: break;
  2817                           
  2818                           ;MessageFunctions.c: 33: default:
  2819                           
  2820                           ;MessageFunctions.c: 31: break;
  2821                           
  2822                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2823                           
  2824                           ;MessageFunctions.c: 28: break;
  2825                           
  2826                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2827                           
  2828                           ;MessageFunctions.c: 25: break;
  2829  0030E4  0012               	return	
  2830  0030E6                     l1162:
  2831  0030E6  0100               	movlb	0	; () banked
  2832  0030E8  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2833                           
  2834                           ; Switch size 1, requested type "space"
  2835                           ; Number of cases is 5, Range of values is 17 to 21
  2836                           ; switch strategies available:
  2837                           ; Name         Instructions Cycles
  2838                           ; simple_byte           16     9 (average)
  2839                           ;	Chosen strategy is simple_byte
  2840  0030EA  0A11               	xorlw	17	; case 17
  2841  0030EC  B4D8               	btfsc	status,2,c
  2842  0030EE  D7F5               	goto	l1165
  2843  0030F0  0A03               	xorlw	3	; case 18
  2844  0030F2  B4D8               	btfsc	status,2,c
  2845  0030F4  D7F5               	goto	l1166
  2846  0030F6  0A01               	xorlw	1	; case 19
  2847  0030F8  B4D8               	btfsc	status,2,c
  2848  0030FA  0012               	return	
  2849  0030FC  0A07               	xorlw	7	; case 20
  2850  0030FE  B4D8               	btfsc	status,2,c
  2851  003100  0012               	return	
  2852  003102  0A01               	xorlw	1	; case 21
  2853  003104  A4D8               	btfss	status,2,c
  2854  003106  0012               	return	
  2855  003108  D7E5               	goto	l1163
  2856  00310A                     __end_of_GroupControlMcu:
  2857                           	opt stack 0
  2858                           tosu	equ	0xFFF
  2859                           tosh	equ	0xFFE
  2860                           tosl	equ	0xFFD
  2861                           pclath	equ	0xFFA
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           postdec1	equ	0xFE5
  2869                           fsr1l	equ	0xFE1
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _GroupSynthesizers *****************
  2877 ;; Defined at:
  2878 ;;		line 87 in file "MessageFunctions.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  request         1    wreg     enum E12
  2881 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  request         1   95[BANK0 ] enum E12
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         0       0       2       0       0       0       0
  2894 ;;      Locals:         0       1       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0
  2896 ;;      Totals:         0       1       2       0       0       0       0
  2897 ;;Total ram usage:        3 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    8
  2900 ;; This function calls:
  2901 ;;		_PLLUartInitialize
  2902 ;;		_UpdateRxFreq
  2903 ;;		_UpdateTxFreq
  2904 ;; This function is called by:
  2905 ;;		_readUartMessage
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text8
  2910  002A70                     __ptext8:
  2911                           	opt stack 0
  2912  002A70                     _GroupSynthesizers:
  2913                           	opt stack 21
  2914                           
  2915                           ;incstack = 0
  2916                           ;GroupSynthesizers@request stored from wreg
  2917  002A70  0100               	movlb	0	; () banked
  2918  002A72  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2919                           
  2920                           ;MessageFunctions.c: 89: switch (request)
  2921  002A74  D01C               	goto	l1193
  2922  002A76                     
  2923                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2924  002A76  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2925  002A7A  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2926  002A7E  ECCD  F01B         	call	_PLLUartInitialize	;wreg free
  2927                           
  2928                           ;MessageFunctions.c: 93: break;
  2929  002A82  0012               	return	
  2930  002A84                     
  2931                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2932  002A84  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2933  002A88  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2934  002A8C  ECCD  F01B         	call	_PLLUartInitialize	;wreg free
  2935                           
  2936                           ;MessageFunctions.c: 97: break;
  2937  002A90  0012               	return	
  2938  002A92                     
  2939                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2940  002A92  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2941  002A96  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2942  002A9A  ECC2  F017         	call	_UpdateTxFreq	;wreg free
  2943                           
  2944                           ;MessageFunctions.c: 101: break;
  2945  002A9E  0012               	return	
  2946  002AA0                     
  2947                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2948  002AA0  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2949  002AA4  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2950  002AA8  ECE3  F017         	call	_UpdateRxFreq	;wreg free
  2951                           
  2952                           ;MessageFunctions.c: 109: }
  2953                           
  2954                           ;MessageFunctions.c: 108: break;
  2955                           
  2956                           ;MessageFunctions.c: 107: default:
  2957                           
  2958                           ;MessageFunctions.c: 105: break;
  2959  002AAC  0012               	return	
  2960  002AAE                     l1193:
  2961  002AAE  0100               	movlb	0	; () banked
  2962  002AB0  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2963                           
  2964                           ; Switch size 1, requested type "space"
  2965                           ; Number of cases is 4, Range of values is 64 to 67
  2966                           ; switch strategies available:
  2967                           ; Name         Instructions Cycles
  2968                           ; simple_byte           13     7 (average)
  2969                           ;	Chosen strategy is simple_byte
  2970  002AB2  0A40               	xorlw	64	; case 64
  2971  002AB4  B4D8               	btfsc	status,2,c
  2972  002AB6  D7DF               	goto	l1194
  2973  002AB8  0A01               	xorlw	1	; case 65
  2974  002ABA  B4D8               	btfsc	status,2,c
  2975  002ABC  D7E3               	goto	l1196
  2976  002ABE  0A03               	xorlw	3	; case 66
  2977  002AC0  B4D8               	btfsc	status,2,c
  2978  002AC2  D7E7               	goto	l1197
  2979  002AC4  0A01               	xorlw	1	; case 67
  2980  002AC6  A4D8               	btfss	status,2,c
  2981  002AC8  0012               	return	
  2982  002ACA  D7EA               	goto	l1198
  2983  002ACC                     __end_of_GroupSynthesizers:
  2984                           	opt stack 0
  2985                           tosu	equ	0xFFF
  2986                           tosh	equ	0xFFE
  2987                           tosl	equ	0xFFD
  2988                           pclath	equ	0xFFA
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _UpdateTxFreq *****************
  3004 ;; Defined at:
  3005 ;;		line 60 in file "SyntApp.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  data            2   45[COMRAM] PTR unsigned char 
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  regData         4   21[BANK0 ] unsigned long 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3019 ;;      Params:         2       0       0       0       0       0       0
  3020 ;;      Locals:         0       4       0       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0       0       0
  3022 ;;      Totals:         2       4       0       0       0       0       0
  3023 ;;Total ram usage:        6 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    7
  3026 ;; This function calls:
  3027 ;;		_GetIntFromUartData
  3028 ;;		_SWSPI_send_word
  3029 ;;		_SendAckMessage
  3030 ;; This function is called by:
  3031 ;;		_GroupSynthesizers
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text9
  3036  002F84                     __ptext9:
  3037                           	opt stack 0
  3038  002F84                     _UpdateTxFreq:
  3039                           	opt stack 21
  3040                           
  3041                           ;SyntApp.c: 62: uint32_t regData = GetIntFromUartData(data);
  3042                           
  3043                           ;incstack = 0
  3044  002F84  C02E  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3045  002F88  C02F  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3046  002F8C  EC59  F011         	call	_GetIntFromUartData	;wreg free
  3047  002F90  C066  F075         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3048  002F94  C067  F076         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3049  002F98  C068  F077         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3050  002F9C  C069  F078         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3051                           
  3052                           ;SyntApp.c: 63: SWSPI_send_word(SYNTH_TX, regData, 3);
  3053  002FA0  C075  F021         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3054  002FA4  C076  F022         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3055  002FA8  C077  F023         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3056  002FAC  C078  F024         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3057  002FB0  0E03               	movlw	3
  3058  002FB2  6E25               	movwf	SWSPI_send_word@dataSize,c
  3059  002FB4  0E00               	movlw	0
  3060  002FB6  ECA6  F011         	call	_SWSPI_send_word
  3061                           
  3062                           ;SyntApp.c: 64: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3063  002FBA  0E42               	movlw	66
  3064  002FBC  6E24               	movwf	SendAckMessage@inRequest,c
  3065  002FBE  0E04               	movlw	4
  3066  002FC0  ECC4  F016         	call	_SendAckMessage
  3067  002FC4  0012               	return		;funcret
  3068  002FC6                     __end_of_UpdateTxFreq:
  3069                           	opt stack 0
  3070                           tosu	equ	0xFFF
  3071                           tosh	equ	0xFFE
  3072                           tosl	equ	0xFFD
  3073                           pclath	equ	0xFFA
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           postdec1	equ	0xFE5
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _UpdateRxFreq *****************
  3089 ;; Defined at:
  3090 ;;		line 76 in file "SyntApp.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  data            2   45[COMRAM] PTR unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  regData         4   21[BANK0 ] unsigned long 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3104 ;;      Params:         2       0       0       0       0       0       0
  3105 ;;      Locals:         0       4       0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0
  3107 ;;      Totals:         2       4       0       0       0       0       0
  3108 ;;Total ram usage:        6 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    7
  3111 ;; This function calls:
  3112 ;;		_GetIntFromUartData
  3113 ;;		_SWSPI_send_word
  3114 ;;		_SendAckMessage
  3115 ;; This function is called by:
  3116 ;;		_GroupSynthesizers
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text10
  3121  002FC6                     __ptext10:
  3122                           	opt stack 0
  3123  002FC6                     _UpdateRxFreq:
  3124                           	opt stack 21
  3125                           
  3126                           ;SyntApp.c: 78: uint32_t regData = GetIntFromUartData(data);
  3127                           
  3128                           ;incstack = 0
  3129  002FC6  C02E  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3130  002FCA  C02F  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3131  002FCE  EC59  F011         	call	_GetIntFromUartData	;wreg free
  3132  002FD2  C066  F075         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3133  002FD6  C067  F076         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3134  002FDA  C068  F077         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3135  002FDE  C069  F078         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3136                           
  3137                           ;SyntApp.c: 79: SWSPI_send_word(SYNTH_RX, regData, 3);
  3138  002FE2  C075  F021         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3139  002FE6  C076  F022         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3140  002FEA  C077  F023         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3141  002FEE  C078  F024         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3142  002FF2  0E03               	movlw	3
  3143  002FF4  6E25               	movwf	SWSPI_send_word@dataSize,c
  3144  002FF6  0E01               	movlw	1
  3145  002FF8  ECA6  F011         	call	_SWSPI_send_word
  3146                           
  3147                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3148  002FFC  0E43               	movlw	67
  3149  002FFE  6E24               	movwf	SendAckMessage@inRequest,c
  3150  003000  0E04               	movlw	4
  3151  003002  ECC4  F016         	call	_SendAckMessage
  3152  003006  0012               	return		;funcret
  3153  003008                     __end_of_UpdateRxFreq:
  3154                           	opt stack 0
  3155                           tosu	equ	0xFFF
  3156                           tosh	equ	0xFFE
  3157                           tosl	equ	0xFFD
  3158                           pclath	equ	0xFFA
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           postdec1	equ	0xFE5
  3166                           fsr1l	equ	0xFE1
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _PLLUartInitialize *****************
  3174 ;; Defined at:
  3175 ;;		line 51 in file "SyntApp.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  data            2   23[COMRAM] PTR unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		None
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3189 ;;      Params:         2       0       0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0       0       0
  3192 ;;      Totals:         2       0       0       0       0       0       0
  3193 ;;Total ram usage:        2 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    3
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_GroupSynthesizers
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text11
  3204  00379A                     __ptext11:
  3205                           	opt stack 0
  3206  00379A                     _PLLUartInitialize:
  3207                           	opt stack 25
  3208                           
  3209                           ;incstack = 0
  3210  00379A  0012               	return		;funcret
  3211  00379C                     __end_of_PLLUartInitialize:
  3212                           	opt stack 0
  3213                           tosu	equ	0xFFF
  3214                           tosh	equ	0xFFE
  3215                           tosl	equ	0xFFD
  3216                           pclath	equ	0xFFA
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           postinc0	equ	0xFEE
  3222                           wreg	equ	0xFE8
  3223                           postdec1	equ	0xFE5
  3224                           fsr1l	equ	0xFE1
  3225                           indf2	equ	0xFDF
  3226                           postinc2	equ	0xFDE
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _SetMcuFwVersion *****************
  3232 ;; Defined at:
  3233 ;;		line 15 in file "SystemStatus.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  data            2   43[COMRAM] PTR unsigned char 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  idx             1   45[COMRAM] unsigned char 
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      void 
  3240 ;; Registers used:
  3241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3247 ;;      Params:         2       0       0       0       0       0       0
  3248 ;;      Locals:         1       0       0       0       0       0       0
  3249 ;;      Temps:          0       0       0       0       0       0       0
  3250 ;;      Totals:         3       0       0       0       0       0       0
  3251 ;;Total ram usage:        3 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    6
  3254 ;; This function calls:
  3255 ;;		_EepromWrite
  3256 ;;		_SendAckMessage
  3257 ;; This function is called by:
  3258 ;;		_GroupStatusAndVersion
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text12
  3263  00322E                     __ptext12:
  3264                           	opt stack 0
  3265  00322E                     _SetMcuFwVersion:
  3266                           	opt stack 22
  3267                           
  3268                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3269                           
  3270                           ;incstack = 0
  3271  00322E  0E00               	movlw	0
  3272  003230  6E2E               	movwf	SetMcuFwVersion@idx,c
  3273  003232                     l7384:
  3274  003232  0E03               	movlw	3
  3275  003234  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3276  003236  D001               	goto	l1332
  3277  003238  D00F               	goto	u7280
  3278  00323A                     l1332:
  3279                           
  3280                           ;SystemStatus.c: 18: {
  3281                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3282  00323A  502E               	movf	SetMcuFwVersion@idx,w,c
  3283  00323C  0D01               	mullw	1
  3284  00323E  50F3               	movf	prodl,w,c
  3285  003240  242C               	addwf	SetMcuFwVersion@data,w,c
  3286  003242  6ED9               	movwf	fsr2l,c
  3287  003244  50F4               	movf	prodh,w,c
  3288  003246  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3289  003248  6EDA               	movwf	fsr2h,c
  3290  00324A  50DF               	movf	indf2,w,c
  3291  00324C  6E1B               	movwf	EepromWrite@data,c
  3292  00324E  502E               	movf	SetMcuFwVersion@idx,w,c
  3293  003250  EC73  F01B         	call	_EepromWrite
  3294  003254  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3295  003256  D7ED               	goto	l7384
  3296  003258                     u7280:
  3297                           
  3298                           ;SystemStatus.c: 20: }
  3299                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3300  003258  0E24               	movlw	36
  3301  00325A  6E24               	movwf	SendAckMessage@inRequest,c
  3302  00325C  0E02               	movlw	2
  3303  00325E  ECC4  F016         	call	_SendAckMessage
  3304  003262  0012               	return		;funcret
  3305  003264                     __end_of_SetMcuFwVersion:
  3306                           	opt stack 0
  3307                           tosu	equ	0xFFF
  3308                           tosh	equ	0xFFE
  3309                           tosl	equ	0xFFD
  3310                           pclath	equ	0xFFA
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1l	equ	0xFE1
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           fsr2h	equ	0xFDA
  3324                           fsr2l	equ	0xFD9
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _SetCpldFwVersion *****************
  3328 ;; Defined at:
  3329 ;;		line 49 in file "SystemStatus.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  data            2   43[COMRAM] PTR unsigned char 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  idx             2   45[COMRAM] int 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3343 ;;      Params:         2       0       0       0       0       0       0
  3344 ;;      Locals:         2       0       0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0
  3346 ;;      Totals:         4       0       0       0       0       0       0
  3347 ;;Total ram usage:        4 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    6
  3350 ;; This function calls:
  3351 ;;		_EepromWrite
  3352 ;;		_SendAckMessage
  3353 ;; This function is called by:
  3354 ;;		_GroupStatusAndVersion
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text13
  3359  003008                     __ptext13:
  3360                           	opt stack 0
  3361  003008                     _SetCpldFwVersion:
  3362                           	opt stack 22
  3363                           
  3364                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3365                           
  3366                           ;incstack = 0
  3367  003008  0E00               	movlw	0
  3368  00300A  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3369  00300C  0E00               	movlw	0
  3370  00300E  6E2E               	movwf	SetCpldFwVersion@idx,c
  3371  003010                     l7424:
  3372  003010  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3373  003012  D006               	goto	l1342
  3374  003014  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3375  003016  E113               	bnz	l7434
  3376  003018  0E04               	movlw	4
  3377  00301A  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3378  00301C  B0D8               	btfsc	status,0,c
  3379  00301E  D00F               	goto	u7320
  3380  003020                     l1342:
  3381                           
  3382                           ;SystemStatus.c: 52: {
  3383                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3384  003020  502E               	movf	SetCpldFwVersion@idx,w,c
  3385  003022  242C               	addwf	SetCpldFwVersion@data,w,c
  3386  003024  6ED9               	movwf	fsr2l,c
  3387  003026  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3388  003028  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3389  00302A  6EDA               	movwf	fsr2h,c
  3390  00302C  50DF               	movf	indf2,w,c
  3391  00302E  6E1B               	movwf	EepromWrite@data,c
  3392  003030  502E               	movf	SetCpldFwVersion@idx,w,c
  3393  003032  0F04               	addlw	4
  3394  003034  EC73  F01B         	call	_EepromWrite
  3395  003038  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3396  00303A  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3397  00303C  D7E9               	goto	l7424
  3398  00303E                     u7320:
  3399  00303E                     l7434:
  3400                           
  3401                           ;SystemStatus.c: 54: }
  3402                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3403  00303E  0E25               	movlw	37
  3404  003040  6E24               	movwf	SendAckMessage@inRequest,c
  3405  003042  0E02               	movlw	2
  3406  003044  ECC4  F016         	call	_SendAckMessage
  3407  003048  0012               	return		;funcret
  3408  00304A                     __end_of_SetCpldFwVersion:
  3409                           	opt stack 0
  3410                           tosu	equ	0xFFF
  3411                           tosh	equ	0xFFE
  3412                           tosl	equ	0xFFD
  3413                           pclath	equ	0xFFA
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           postdec1	equ	0xFE5
  3423                           fsr1l	equ	0xFE1
  3424                           indf2	equ	0xFDF
  3425                           postinc2	equ	0xFDE
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _EepromWrite *****************
  3431 ;; Defined at:
  3432 ;;		line 220 in file "FlashApp.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  address         1    wreg     unsigned char 
  3435 ;;  data            1   26[COMRAM] unsigned char 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  address         1   27[COMRAM] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3447 ;;      Params:         1       0       0       0       0       0       0
  3448 ;;      Locals:         1       0       0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0
  3450 ;;      Totals:         2       0       0       0       0       0       0
  3451 ;;Total ram usage:        2 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    4
  3454 ;; This function calls:
  3455 ;;		_DATAEE_WriteByte
  3456 ;; This function is called by:
  3457 ;;		_SetMcuFwVersion
  3458 ;;		_SetCpldFwVersion
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text14
  3463  0036E6                     __ptext14:
  3464                           	opt stack 0
  3465  0036E6                     _EepromWrite:
  3466                           	opt stack 23
  3467                           
  3468                           ;incstack = 0
  3469                           ;EepromWrite@address stored from wreg
  3470  0036E6  6E1C               	movwf	EepromWrite@address,c
  3471                           
  3472                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3473  0036E8  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3474  0036EC  501C               	movf	EepromWrite@address,w,c
  3475  0036EE  EC32  F019         	call	_DATAEE_WriteByte
  3476  0036F2  0012               	return		;funcret
  3477  0036F4                     __end_of_EepromWrite:
  3478                           	opt stack 0
  3479                           tosu	equ	0xFFF
  3480                           tosh	equ	0xFFE
  3481                           tosl	equ	0xFFD
  3482                           pclath	equ	0xFFA
  3483                           tblptru	equ	0xFF8
  3484                           tblptrh	equ	0xFF7
  3485                           tblptrl	equ	0xFF6
  3486                           tablat	equ	0xFF5
  3487                           prodh	equ	0xFF4
  3488                           prodl	equ	0xFF3
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           postdec1	equ	0xFE5
  3492                           fsr1l	equ	0xFE1
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _DATAEE_WriteByte *****************
  3500 ;; Defined at:
  3501 ;;		line 167 in file "mcc_generated_files/memory.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  bAdd            1    wreg     unsigned char 
  3504 ;;  bData           1   23[COMRAM] unsigned char 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  bAdd            1   24[COMRAM] unsigned char 
  3507 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3517 ;;      Params:         1       0       0       0       0       0       0
  3518 ;;      Locals:         2       0       0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0       0       0
  3520 ;;      Totals:         3       0       0       0       0       0       0
  3521 ;;Total ram usage:        3 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    3
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_EepromWrite
  3528 ;;		_EepromTest
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text15
  3533  003264                     __ptext15:
  3534                           	opt stack 0
  3535  003264                     _DATAEE_WriteByte:
  3536                           	opt stack 23
  3537                           
  3538                           ;incstack = 0
  3539                           ;DATAEE_WriteByte@bAdd stored from wreg
  3540  003264  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3541                           
  3542                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3543  003266  0E00               	movlw	0
  3544  003268  BEF2               	btfsc	intcon,7,c	;volatile
  3545  00326A  0E01               	movlw	1
  3546  00326C  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3547                           
  3548                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3549  00326E  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3550                           
  3551                           ;memory.c: 172: EEDATA = bData;
  3552  003272  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3553                           
  3554                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3555  003276  9EA6               	bcf	4006,7,c	;volsfr
  3556                           
  3557                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3558  003278  9CA6               	bcf	4006,6,c	;volsfr
  3559                           
  3560                           ;memory.c: 175: EECON1bits.WREN = 1;
  3561  00327A  84A6               	bsf	4006,2,c	;volsfr
  3562                           
  3563                           ;memory.c: 176: INTCONbits.GIE = 0;
  3564  00327C  9EF2               	bcf	intcon,7,c	;volatile
  3565                           
  3566                           ;memory.c: 177: EECON2 = 0x55;
  3567  00327E  0E55               	movlw	85
  3568  003280  6EA7               	movwf	4007,c	;volsfr
  3569                           
  3570                           ;memory.c: 178: EECON2 = 0xAA;
  3571  003282  0EAA               	movlw	170
  3572  003284  6EA7               	movwf	4007,c	;volsfr
  3573                           
  3574                           ;memory.c: 179: EECON1bits.WR = 1;
  3575  003286  82A6               	bsf	4006,1,c	;volsfr
  3576  003288                     
  3577                           ;memory.c: 182: {
  3578  003288  B2A6               	btfsc	4006,1,c	;volsfr
  3579  00328A  D7FE               	goto	l945
  3580                           
  3581                           ;memory.c: 183: }
  3582                           ;memory.c: 185: EECON1bits.WREN = 0;
  3583  00328C  94A6               	bcf	4006,2,c	;volsfr
  3584                           
  3585                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3586  00328E  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3587  003290  D002               	bra	u6105
  3588  003292  9EF2               	bcf	intcon,7,c	;volatile
  3589  003294  D001               	bra	u6106
  3590  003296                     u6105:
  3591  003296  8EF2               	bsf	intcon,7,c	;volatile
  3592  003298                     u6106:
  3593  003298  0012               	return		;funcret
  3594  00329A                     __end_of_DATAEE_WriteByte:
  3595                           	opt stack 0
  3596                           tosu	equ	0xFFF
  3597                           tosh	equ	0xFFE
  3598                           tosl	equ	0xFFD
  3599                           pclath	equ	0xFFA
  3600                           tblptru	equ	0xFF8
  3601                           tblptrh	equ	0xFF7
  3602                           tblptrl	equ	0xFF6
  3603                           tablat	equ	0xFF5
  3604                           prodh	equ	0xFF4
  3605                           prodl	equ	0xFF3
  3606                           intcon	equ	0xFF2
  3607                           postinc0	equ	0xFEE
  3608                           wreg	equ	0xFE8
  3609                           postdec1	equ	0xFE5
  3610                           fsr1l	equ	0xFE1
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           fsr2h	equ	0xFDA
  3614                           fsr2l	equ	0xFD9
  3615                           status	equ	0xFD8
  3616                           
  3617 ;; *************** function _GetMcuRunTime *****************
  3618 ;; Defined at:
  3619 ;;		line 92 in file "SystemStatus.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  idx             2   13[BANK0 ] int 
  3624 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3625 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3635 ;;      Params:         0       0       0       0       0       0       0
  3636 ;;      Locals:         0      15       0       0       0       0       0
  3637 ;;      Temps:          2       0       0       0       0       0       0
  3638 ;;      Totals:         2      15       0       0       0       0       0
  3639 ;;Total ram usage:       17 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    5
  3642 ;; This function calls:
  3643 ;;		_WriteUartMessage
  3644 ;;		___lldiv
  3645 ;;		___llmod
  3646 ;;		_crc8
  3647 ;; This function is called by:
  3648 ;;		_GroupStatusAndVersion
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text16
  3653  001D38                     __ptext16:
  3654                           	opt stack 0
  3655  001D38                     _GetMcuRunTime:
  3656                           	opt stack 23
  3657                           
  3658                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3659                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3660                           
  3661                           ;incstack = 0
  3662  001D38  0E24               	movlw	36
  3663  001D3A  0100               	movlb	0	; () banked
  3664  001D3C  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3665                           
  3666                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3667  001D3E  0E02               	movlw	2
  3668  001D40  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3669                           
  3670                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3671  001D42  0E21               	movlw	33
  3672  001D44  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3673                           
  3674                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3675  001D46  0E04               	movlw	4
  3676  001D48  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3680  001D4A  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3681  001D4E  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3682  001D52  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3683  001D56  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3684                           
  3685                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3686  001D5A  0E00               	movlw	0
  3687  001D5C  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3688  001D5E  0E00               	movlw	0
  3689  001D60  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3690  001D62                     l7440:
  3691                           
  3692                           ; BSR set to: 0
  3693  001D62  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3694  001D64  D006               	goto	l1358
  3695  001D66  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3696  001D68  E142               	bnz	l7452
  3697  001D6A  0E04               	movlw	4
  3698  001D6C  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3699  001D6E  B0D8               	btfsc	status,0,c
  3700  001D70  D03E               	goto	u7340
  3701  001D72                     l1358:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;SystemStatus.c: 107: {
  3705                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3706                           
  3707                           ; BSR set to: 0
  3708  001D72  0E04               	movlw	4
  3709  001D74  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3710  001D76  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3711  001D78  0E00               	movlw	0
  3712  001D7A  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3713  001D7C  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3714  001D7E  0E60               	movlw	low GetMcuRunTime@TxMsg
  3715  001D80  2425               	addwf	??_GetMcuRunTime,w,c
  3716  001D82  6ED9               	movwf	fsr2l,c
  3717  001D84  0E00               	movlw	high GetMcuRunTime@TxMsg
  3718  001D86  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3719  001D88  6EDA               	movwf	fsr2h,c
  3720  001D8A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3721  001D8E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3722  001D92  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3723  001D96  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3724  001D9A  0E0A               	movlw	10
  3725  001D9C  6E1C               	movwf	___llmod@divisor,c
  3726  001D9E  0E00               	movlw	0
  3727  001DA0  6E1D               	movwf	___llmod@divisor+1,c
  3728  001DA2  0E00               	movlw	0
  3729  001DA4  6E1E               	movwf	___llmod@divisor+2,c
  3730  001DA6  0E00               	movlw	0
  3731  001DA8  6E1F               	movwf	___llmod@divisor+3,c
  3732  001DAA  EC76  F014         	call	___llmod	;wreg free
  3733  001DAE  5018               	movf	?___llmod,w,c
  3734  001DB0  6EDF               	movwf	indf2,c
  3735                           
  3736                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3737  001DB2  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3738  001DB6  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3739  001DBA  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3740  001DBE  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3741  001DC2  0E0A               	movlw	10
  3742  001DC4  6E1C               	movwf	___lldiv@divisor,c
  3743  001DC6  0E00               	movlw	0
  3744  001DC8  6E1D               	movwf	___lldiv@divisor+1,c
  3745  001DCA  0E00               	movlw	0
  3746  001DCC  6E1E               	movwf	___lldiv@divisor+2,c
  3747  001DCE  0E00               	movlw	0
  3748  001DD0  6E1F               	movwf	___lldiv@divisor+3,c
  3749  001DD2  EC14  F013         	call	___lldiv	;wreg free
  3750  001DD6  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3751  001DDA  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3752  001DDE  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3753  001DE2  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3754  001DE6  0100               	movlb	0	; () banked
  3755  001DE8  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3756  001DEA  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3757  001DEC  D7BA               	goto	l7440
  3758  001DEE                     u7340:
  3759  001DEE                     l7452:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;SystemStatus.c: 110: }
  3763                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3764  001DEE  0E60               	movlw	low GetMcuRunTime@TxMsg
  3765  001DF0  6E18               	movwf	crc8@dataArray,c
  3766  001DF2  0E00               	movlw	high GetMcuRunTime@TxMsg
  3767  001DF4  6E19               	movwf	crc8@dataArray+1,c
  3768  001DF6  0E00               	movlw	0
  3769  001DF8  6E1B               	movwf	crc8@dataSize+1,c
  3770  001DFA  0E08               	movlw	8
  3771  001DFC  6E1A               	movwf	crc8@dataSize,c
  3772  001DFE  ECED  F016         	call	_crc8	;wreg free
  3773  001E02  0100               	movlb	0	; () banked
  3774  001E04  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3778  001E06  0E60               	movlw	low GetMcuRunTime@TxMsg
  3779  001E08  6E19               	movwf	WriteUartMessage@dataBuf,c
  3780  001E0A  0E00               	movlw	high GetMcuRunTime@TxMsg
  3781  001E0C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3782  001E0E  0E00               	movlw	0
  3783  001E10  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3784  001E12  0E09               	movlw	9
  3785  001E14  6E1B               	movwf	WriteUartMessage@dataSize,c
  3786  001E16  EC83  F019         	call	_WriteUartMessage	;wreg free
  3787  001E1A  0012               	return		;funcret
  3788  001E1C                     __end_of_GetMcuRunTime:
  3789                           	opt stack 0
  3790                           tosu	equ	0xFFF
  3791                           tosh	equ	0xFFE
  3792                           tosl	equ	0xFFD
  3793                           pclath	equ	0xFFA
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           postinc0	equ	0xFEE
  3802                           wreg	equ	0xFE8
  3803                           postdec1	equ	0xFE5
  3804                           fsr1l	equ	0xFE1
  3805                           indf2	equ	0xFDF
  3806                           postinc2	equ	0xFDE
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function ___lldiv *****************
  3812 ;; Defined at:
  3813 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  dividend        4   23[COMRAM] unsigned long 
  3816 ;;  divisor         4   27[COMRAM] unsigned long 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  quotient        4   31[COMRAM] unsigned long 
  3819 ;;  counter         1   35[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  4   23[COMRAM] unsigned long 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3829 ;;      Params:         8       0       0       0       0       0       0
  3830 ;;      Locals:         5       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0
  3832 ;;      Totals:        13       0       0       0       0       0       0
  3833 ;;Total ram usage:       13 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    3
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_GetMcuRunTime
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text17
  3844  002628                     __ptext17:
  3845                           	opt stack 0
  3846  002628                     ___lldiv:
  3847                           	opt stack 24
  3848                           
  3849                           ;incstack = 0
  3850  002628  0E00               	movlw	0
  3851  00262A  6E20               	movwf	___lldiv@quotient,c
  3852  00262C  0E00               	movlw	0
  3853  00262E  6E21               	movwf	___lldiv@quotient+1,c
  3854  002630  0E00               	movlw	0
  3855  002632  6E22               	movwf	___lldiv@quotient+2,c
  3856  002634  0E00               	movlw	0
  3857  002636  6E23               	movwf	___lldiv@quotient+3,c
  3858  002638  501C               	movf	___lldiv@divisor,w,c
  3859  00263A  101D               	iorwf	___lldiv@divisor+1,w,c
  3860  00263C  101E               	iorwf	___lldiv@divisor+2,w,c
  3861  00263E  101F               	iorwf	___lldiv@divisor+3,w,c
  3862  002640  B4D8               	btfsc	status,2,c
  3863  002642  D02A               	goto	l1785
  3864  002644  0E01               	movlw	1
  3865  002646  6E24               	movwf	___lldiv@counter,c
  3866  002648  D006               	goto	l1780
  3867  00264A  90D8               	bcf	status,0,c
  3868  00264C  361C               	rlcf	___lldiv@divisor,f,c
  3869  00264E  361D               	rlcf	___lldiv@divisor+1,f,c
  3870  002650  361E               	rlcf	___lldiv@divisor+2,f,c
  3871  002652  361F               	rlcf	___lldiv@divisor+3,f,c
  3872  002654  2A24               	incf	___lldiv@counter,f,c
  3873  002656                     l1780:
  3874  002656  AE1F               	btfss	___lldiv@divisor+3,7,c
  3875  002658  D7F8               	goto	l1781
  3876  00265A                     u6840:
  3877  00265A  90D8               	bcf	status,0,c
  3878  00265C  3620               	rlcf	___lldiv@quotient,f,c
  3879  00265E  3621               	rlcf	___lldiv@quotient+1,f,c
  3880  002660  3622               	rlcf	___lldiv@quotient+2,f,c
  3881  002662  3623               	rlcf	___lldiv@quotient+3,f,c
  3882  002664  501C               	movf	___lldiv@divisor,w,c
  3883  002666  5C18               	subwf	___lldiv@dividend,w,c
  3884  002668  501D               	movf	___lldiv@divisor+1,w,c
  3885  00266A  5819               	subwfb	___lldiv@dividend+1,w,c
  3886  00266C  501E               	movf	___lldiv@divisor+2,w,c
  3887  00266E  581A               	subwfb	___lldiv@dividend+2,w,c
  3888  002670  501F               	movf	___lldiv@divisor+3,w,c
  3889  002672  581B               	subwfb	___lldiv@dividend+3,w,c
  3890  002674  A0D8               	btfss	status,0,c
  3891  002676  D009               	goto	l1784
  3892  002678  501C               	movf	___lldiv@divisor,w,c
  3893  00267A  5E18               	subwf	___lldiv@dividend,f,c
  3894  00267C  501D               	movf	___lldiv@divisor+1,w,c
  3895  00267E  5A19               	subwfb	___lldiv@dividend+1,f,c
  3896  002680  501E               	movf	___lldiv@divisor+2,w,c
  3897  002682  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3898  002684  501F               	movf	___lldiv@divisor+3,w,c
  3899  002686  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3900  002688  8020               	bsf	___lldiv@quotient,0,c
  3901  00268A                     l1784:
  3902  00268A  90D8               	bcf	status,0,c
  3903  00268C  321F               	rrcf	___lldiv@divisor+3,f,c
  3904  00268E  321E               	rrcf	___lldiv@divisor+2,f,c
  3905  002690  321D               	rrcf	___lldiv@divisor+1,f,c
  3906  002692  321C               	rrcf	___lldiv@divisor,f,c
  3907  002694  2E24               	decfsz	___lldiv@counter,f,c
  3908  002696  D7E1               	goto	u6840
  3909  002698                     l1785:
  3910  002698  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3911  00269C  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3912  0026A0  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3913  0026A4  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3914  0026A8  0012               	return		;funcret
  3915  0026AA                     __end_of___lldiv:
  3916                           	opt stack 0
  3917                           tosu	equ	0xFFF
  3918                           tosh	equ	0xFFE
  3919                           tosl	equ	0xFFD
  3920                           pclath	equ	0xFFA
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           postdec1	equ	0xFE5
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _GetMcuFwVersion *****************
  3939 ;; Defined at:
  3940 ;;		line 26 in file "SystemStatus.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  idx             1   46[COMRAM] unsigned char 
  3945 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         0       0       0       0       0       0       0
  3956 ;;      Locals:        10       0       0       0       0       0       0
  3957 ;;      Temps:          2       0       0       0       0       0       0
  3958 ;;      Totals:        12       0       0       0       0       0       0
  3959 ;;Total ram usage:       12 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    5
  3962 ;; This function calls:
  3963 ;;		_EepromRead
  3964 ;;		_WriteUartMessage
  3965 ;;		_ZeroArray
  3966 ;;		_crc8
  3967 ;; This function is called by:
  3968 ;;		_GroupStatusAndVersion
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text18
  3973  0026AA                     __ptext18:
  3974                           	opt stack 0
  3975  0026AA                     _GetMcuFwVersion:
  3976                           	opt stack 23
  3977                           
  3978                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  3979                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  3980                           
  3981                           ;incstack = 0
  3982  0026AA  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3983  0026AC  6E20               	movwf	ZeroArray@array,c
  3984  0026AE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3985  0026B0  6E21               	movwf	ZeroArray@array+1,c
  3986  0026B2  0E00               	movlw	0
  3987  0026B4  6E23               	movwf	ZeroArray@size+1,c
  3988  0026B6  0E09               	movlw	9
  3989  0026B8  6E22               	movwf	ZeroArray@size,c
  3990  0026BA  ECF6  F01A         	call	_ZeroArray	;wreg free
  3991                           
  3992                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  3993  0026BE  0E24               	movlw	36
  3994  0026C0  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  3995                           
  3996                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3997  0026C2  0E02               	movlw	2
  3998  0026C4  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  3999                           
  4000                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4001  0026C6  0E22               	movlw	34
  4002  0026C8  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  4003                           
  4004                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  4005  0026CA  0E04               	movlw	4
  4006  0026CC  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  4007                           
  4008                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  4009  0026CE  0E00               	movlw	0
  4010  0026D0  6E2F               	movwf	GetMcuFwVersion@idx,c
  4011  0026D2                     l7368:
  4012  0026D2  0E03               	movlw	3
  4013  0026D4  642F               	cpfsgt	GetMcuFwVersion@idx,c
  4014  0026D6  D001               	goto	l1337
  4015  0026D8  D013               	goto	u7260
  4016  0026DA                     l1337:
  4017                           
  4018                           ;SystemStatus.c: 40: {
  4019                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  4020  0026DA  502F               	movf	GetMcuFwVersion@idx,w,c
  4021  0026DC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4022  0026DE  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  4023  0026E0  0E04               	movlw	4
  4024  0026E2  2624               	addwf	??_GetMcuFwVersion,f,c
  4025  0026E4  0E00               	movlw	0
  4026  0026E6  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  4027  0026E8  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4028  0026EA  2424               	addwf	??_GetMcuFwVersion,w,c
  4029  0026EC  6ED9               	movwf	fsr2l,c
  4030  0026EE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4031  0026F0  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  4032  0026F2  6EDA               	movwf	fsr2h,c
  4033  0026F4  502F               	movf	GetMcuFwVersion@idx,w,c
  4034  0026F6  ECB4  F01B         	call	_EepromRead
  4035  0026FA  6EDF               	movwf	indf2,c
  4036  0026FC  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4037  0026FE  D7E9               	goto	l7368
  4038  002700                     u7260:
  4039                           
  4040                           ;SystemStatus.c: 42: }
  4041                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4042  002700  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4043  002702  6E18               	movwf	crc8@dataArray,c
  4044  002704  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4045  002706  6E19               	movwf	crc8@dataArray+1,c
  4046  002708  0E00               	movlw	0
  4047  00270A  6E1B               	movwf	crc8@dataSize+1,c
  4048  00270C  0E08               	movlw	8
  4049  00270E  6E1A               	movwf	crc8@dataSize,c
  4050  002710  ECED  F016         	call	_crc8	;wreg free
  4051  002714  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4052                           
  4053                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4054  002716  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4055  002718  6E19               	movwf	WriteUartMessage@dataBuf,c
  4056  00271A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4057  00271C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4058  00271E  0E00               	movlw	0
  4059  002720  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4060  002722  0E09               	movlw	9
  4061  002724  6E1B               	movwf	WriteUartMessage@dataSize,c
  4062  002726  EC83  F019         	call	_WriteUartMessage	;wreg free
  4063  00272A  0012               	return		;funcret
  4064  00272C                     __end_of_GetMcuFwVersion:
  4065                           	opt stack 0
  4066                           tosu	equ	0xFFF
  4067                           tosh	equ	0xFFE
  4068                           tosl	equ	0xFFD
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postdec1	equ	0xFE5
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _GetCpldFwVersion *****************
  4088 ;; Defined at:
  4089 ;;		line 58 in file "SystemStatus.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  idx             2   46[COMRAM] int 
  4094 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         0       0       0       0       0       0       0
  4105 ;;      Locals:        11       0       0       0       0       0       0
  4106 ;;      Temps:          2       0       0       0       0       0       0
  4107 ;;      Totals:        13       0       0       0       0       0       0
  4108 ;;Total ram usage:       13 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    5
  4111 ;; This function calls:
  4112 ;;		_EepromRead
  4113 ;;		_WriteUartMessage
  4114 ;;		_ZeroArray
  4115 ;;		_crc8
  4116 ;; This function is called by:
  4117 ;;		_GroupStatusAndVersion
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text19
  4122  002478                     __ptext19:
  4123                           	opt stack 0
  4124  002478                     _GetCpldFwVersion:
  4125                           	opt stack 23
  4126                           
  4127                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4128                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4129                           
  4130                           ;incstack = 0
  4131  002478  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4132  00247A  6E20               	movwf	ZeroArray@array,c
  4133  00247C  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4134  00247E  6E21               	movwf	ZeroArray@array+1,c
  4135  002480  0E00               	movlw	0
  4136  002482  6E23               	movwf	ZeroArray@size+1,c
  4137  002484  0E09               	movlw	9
  4138  002486  6E22               	movwf	ZeroArray@size,c
  4139  002488  ECF6  F01A         	call	_ZeroArray	;wreg free
  4140                           
  4141                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4142  00248C  0E24               	movlw	36
  4143  00248E  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4144                           
  4145                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4146  002490  0E02               	movlw	2
  4147  002492  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4148                           
  4149                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4150  002494  0E23               	movlw	35
  4151  002496  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4152                           
  4153                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4154  002498  0E04               	movlw	4
  4155  00249A  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4156                           
  4157                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4158  00249C  0E00               	movlw	0
  4159  00249E  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4160  0024A0  0E00               	movlw	0
  4161  0024A2  6E2F               	movwf	GetCpldFwVersion@idx,c
  4162  0024A4                     l7408:
  4163  0024A4  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4164  0024A6  D006               	goto	l1347
  4165  0024A8  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4166  0024AA  E118               	bnz	l7418
  4167  0024AC  0E04               	movlw	4
  4168  0024AE  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4169  0024B0  B0D8               	btfsc	status,0,c
  4170  0024B2  D014               	goto	u7300
  4171  0024B4                     l1347:
  4172                           
  4173                           ;SystemStatus.c: 72: {
  4174                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4175  0024B4  0E04               	movlw	4
  4176  0024B6  242F               	addwf	GetCpldFwVersion@idx,w,c
  4177  0024B8  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4178  0024BA  0E00               	movlw	0
  4179  0024BC  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4180  0024BE  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4181  0024C0  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4182  0024C2  2424               	addwf	??_GetCpldFwVersion,w,c
  4183  0024C4  6ED9               	movwf	fsr2l,c
  4184  0024C6  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4185  0024C8  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4186  0024CA  6EDA               	movwf	fsr2h,c
  4187  0024CC  502F               	movf	GetCpldFwVersion@idx,w,c
  4188  0024CE  0F04               	addlw	4
  4189  0024D0  ECB4  F01B         	call	_EepromRead
  4190  0024D4  6EDF               	movwf	indf2,c
  4191  0024D6  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4192  0024D8  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4193  0024DA  D7E4               	goto	l7408
  4194  0024DC                     u7300:
  4195  0024DC                     l7418:
  4196                           
  4197                           ;SystemStatus.c: 74: }
  4198                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4199  0024DC  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4200  0024DE  6E18               	movwf	crc8@dataArray,c
  4201  0024E0  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4202  0024E2  6E19               	movwf	crc8@dataArray+1,c
  4203  0024E4  0E00               	movlw	0
  4204  0024E6  6E1B               	movwf	crc8@dataSize+1,c
  4205  0024E8  0E08               	movlw	8
  4206  0024EA  6E1A               	movwf	crc8@dataSize,c
  4207  0024EC  ECED  F016         	call	_crc8	;wreg free
  4208  0024F0  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4209                           
  4210                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4211  0024F2  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4212  0024F4  6E19               	movwf	WriteUartMessage@dataBuf,c
  4213  0024F6  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4214  0024F8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4215  0024FA  0E00               	movlw	0
  4216  0024FC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4217  0024FE  0E09               	movlw	9
  4218  002500  6E1B               	movwf	WriteUartMessage@dataSize,c
  4219  002502  EC83  F019         	call	_WriteUartMessage	;wreg free
  4220  002506  0012               	return		;funcret
  4221  002508                     __end_of_GetCpldFwVersion:
  4222                           	opt stack 0
  4223                           tosu	equ	0xFFF
  4224                           tosh	equ	0xFFE
  4225                           tosl	equ	0xFFD
  4226                           pclath	equ	0xFFA
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           postinc0	equ	0xFEE
  4235                           wreg	equ	0xFE8
  4236                           postdec1	equ	0xFE5
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _EepromRead *****************
  4245 ;; Defined at:
  4246 ;;		line 215 in file "FlashApp.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  address         1    wreg     unsigned char 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  address         1   24[COMRAM] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      unsigned char 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4260 ;;      Params:         0       0       0       0       0       0       0
  4261 ;;      Locals:         1       0       0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0
  4263 ;;      Totals:         1       0       0       0       0       0       0
  4264 ;;Total ram usage:        1 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    4
  4267 ;; This function calls:
  4268 ;;		_DATAEE_ReadByte
  4269 ;; This function is called by:
  4270 ;;		_GetMcuFwVersion
  4271 ;;		_GetCpldFwVersion
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text20
  4276  003768                     __ptext20:
  4277                           	opt stack 0
  4278  003768                     _EepromRead:
  4279                           	opt stack 23
  4280                           
  4281                           ;incstack = 0
  4282                           ;EepromRead@address stored from wreg
  4283  003768  6E19               	movwf	EepromRead@address,c
  4284                           
  4285                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
  4286  00376A  5019               	movf	EepromRead@address,w,c
  4287  00376C  EC44  F01B         	call	_DATAEE_ReadByte
  4288  003770  0012               	return	
  4289  003772                     __end_of_EepromRead:
  4290                           	opt stack 0
  4291                           tosu	equ	0xFFF
  4292                           tosh	equ	0xFFE
  4293                           tosl	equ	0xFFD
  4294                           pclath	equ	0xFFA
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           postinc0	equ	0xFEE
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           fsr1l	equ	0xFE1
  4306                           indf2	equ	0xFDF
  4307                           postinc2	equ	0xFDE
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _DATAEE_ReadByte *****************
  4313 ;; Defined at:
  4314 ;;		line 194 in file "mcc_generated_files/memory.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  bAdd            1    wreg     unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  bAdd            1   23[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      unsigned char 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4328 ;;      Params:         0       0       0       0       0       0       0
  4329 ;;      Locals:         1       0       0       0       0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0
  4331 ;;      Totals:         1       0       0       0       0       0       0
  4332 ;;Total ram usage:        1 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    3
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_EepromRead
  4339 ;;		_EepromTest
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text21
  4344  003688                     __ptext21:
  4345                           	opt stack 0
  4346  003688                     _DATAEE_ReadByte:
  4347                           	opt stack 23
  4348                           
  4349                           ;incstack = 0
  4350                           ;DATAEE_ReadByte@bAdd stored from wreg
  4351  003688  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  4352                           
  4353                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  4354  00368A  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  4355                           
  4356                           ;memory.c: 198: EECON1bits.CFGS = 0;
  4357  00368E  9CA6               	bcf	4006,6,c	;volsfr
  4358                           
  4359                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  4360  003690  9EA6               	bcf	4006,7,c	;volsfr
  4361                           
  4362                           ;memory.c: 200: EECON1bits.RD = 1;
  4363  003692  80A6               	bsf	4006,0,c	;volsfr
  4364                           
  4365                           ;memory.c: 201: __nop();
  4366  003694  F000               	nop	
  4367                           
  4368                           ;memory.c: 202: __nop();
  4369  003696  F000               	nop	
  4370                           
  4371                           ;memory.c: 204: return (EEDATA);
  4372  003698  50A8               	movf	4008,w,c	;volatile
  4373  00369A  0012               	return	
  4374  00369C                     __end_of_DATAEE_ReadByte:
  4375                           	opt stack 0
  4376                           tosu	equ	0xFFF
  4377                           tosh	equ	0xFFE
  4378                           tosl	equ	0xFFD
  4379                           pclath	equ	0xFFA
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _FlashReadUart *****************
  4398 ;; Defined at:
  4399 ;;		line 62 in file "FlashApp.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  numOfSampleT    2   43[COMRAM] int 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  idx             2   91[BANK0 ] int 
  4404 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4405 ;;  offset          2   93[BANK0 ] int 
  4406 ;;  j               2   89[BANK0 ] int 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4416 ;;      Params:         2       0       0       0       0       0       0
  4417 ;;      Locals:         0      83       0       0       0       0       0
  4418 ;;      Temps:          0      12       0       0       0       0       0
  4419 ;;      Totals:         2      95       0       0       0       0       0
  4420 ;;Total ram usage:       97 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    6
  4423 ;; This function calls:
  4424 ;;		_FLASH_IsWriteDone
  4425 ;;		_FLASH_ReadByte
  4426 ;;		_SendAckMessage
  4427 ;;		_WriteUartMessage
  4428 ;;		_ZeroArray
  4429 ;;		_abs
  4430 ;;		_crc8
  4431 ;; This function is called by:
  4432 ;;		_GroupFlashMemory
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text22
  4437  0006AA                     __ptext22:
  4438                           	opt stack 0
  4439  0006AA                     _FlashReadUart:
  4440                           	opt stack 22
  4441                           
  4442                           ;FlashApp.c: 65: int j=0;
  4443                           
  4444                           ;incstack = 0
  4445  0006AA  0E00               	movlw	0
  4446  0006AC  0100               	movlb	0	; () banked
  4447  0006AE  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4448  0006B0  0E00               	movlw	0
  4449  0006B2  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4450                           
  4451                           ;FlashApp.c: 66: int offset = 0;
  4452  0006B4  0E00               	movlw	0
  4453  0006B6  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4454  0006B8  0E00               	movlw	0
  4455  0006BA  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4459                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4460  0006BC  0E6C               	movlw	low FlashReadUart@TxMsg
  4461  0006BE  6E20               	movwf	ZeroArray@array,c
  4462  0006C0  0E00               	movlw	high FlashReadUart@TxMsg
  4463  0006C2  6E21               	movwf	ZeroArray@array+1,c
  4464  0006C4  0E00               	movlw	0
  4465  0006C6  6E23               	movwf	ZeroArray@size+1,c
  4466  0006C8  0E45               	movlw	69
  4467  0006CA  6E22               	movwf	ZeroArray@size,c
  4468  0006CC  ECF6  F01A         	call	_ZeroArray	;wreg free
  4469                           
  4470                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4471  0006D0  EC8F  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4472  0006D4  0900               	iorlw	0
  4473  0006D6  B4D8               	btfsc	status,2,c
  4474  0006D8  0012               	return	
  4475                           
  4476                           ;FlashApp.c: 74: }
  4477                           ;FlashApp.c: 76: if (numOfReadSamples)
  4478                           
  4479                           ;FlashApp.c: 72: {
  4480                           ;FlashApp.c: 73: return;
  4481  0006DA  503E               	movf	_numOfReadSamples,w,c
  4482  0006DC  103F               	iorwf	_numOfReadSamples+1,w,c
  4483  0006DE  1040               	iorwf	_numOfReadSamples+2,w,c
  4484  0006E0  1041               	iorwf	_numOfReadSamples+3,w,c
  4485  0006E2  B4D8               	btfsc	status,2,c
  4486  0006E4  D0EE               	goto	l290
  4487                           
  4488                           ;FlashApp.c: 77: {
  4489                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4490  0006E6  5031               	movf	_numOfValidateSamples,w,c
  4491  0006E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4492  0006EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4493  0006EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4494  0006EE  B4D8               	btfsc	status,2,c
  4495  0006F0  D09A               	goto	l291
  4496                           
  4497                           ;FlashApp.c: 79: {
  4498                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4499  0006F2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4500  0006F6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4501  0006FA  0E00               	movlw	0
  4502  0006FC  0100               	movlb	0	; () banked
  4503  0006FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4504  000700  0EFF               	movlw	255
  4505  000702  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4506  000704  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4507  000706  5031               	movf	_numOfValidateSamples,w,c
  4508  000708  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4509  00070A  5032               	movf	_numOfValidateSamples+1,w,c
  4510  00070C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4511  00070E  5033               	movf	_numOfValidateSamples+2,w,c
  4512  000710  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4513  000712  5034               	movf	_numOfValidateSamples+3,w,c
  4514  000714  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4515  000716  B0D8               	btfsc	status,0,c
  4516  000718  D002               	goto	u7050
  4517  00071A  0E01               	movlw	1
  4518  00071C  D001               	goto	u7060
  4519  00071E                     u7050:
  4520  00071E  0E00               	movlw	0
  4521  000720                     u7060:
  4522  000720  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4523  000722  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4524  000724  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4525  000726  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4526  000728  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4527  00072A  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4528  00072C  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4529  00072E  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4530  000730  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4531  000732  0E00               	movlw	0
  4532  000734  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4533  000736  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4534  000738  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4535  00073A  5031               	movf	_numOfValidateSamples,w,c
  4536  00073C  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4537  00073E  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4538  000740  5032               	movf	_numOfValidateSamples+1,w,c
  4539  000742  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4540  000744  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4541  000746  5033               	movf	_numOfValidateSamples+2,w,c
  4542  000748  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4543  00074A  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4544  00074C  5034               	movf	_numOfValidateSamples+3,w,c
  4545  00074E  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4546  000750  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4547  000752  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4548  000754  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4549  000756  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4550  000758  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4551  00075A  A4D8               	btfss	status,2,c
  4552  00075C  D00A               	goto	l293
  4553                           
  4554                           ; BSR set to: 0
  4555  00075E  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$565
  4556  000762  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$565+1
  4557  000766  0E00               	movlw	0
  4558  000768  BFB2               	btfsc	(_FlashReadUart$565+1)& (0+255),7,b
  4559  00076A  0EFF               	movlw	-1
  4560  00076C  6FB3               	movwf	(_FlashReadUart$565+2)& (0+255),b
  4561  00076E  6FB4               	movwf	(_FlashReadUart$565+3)& (0+255),b
  4562  000770  D008               	goto	l295
  4563  000772                     l293:
  4564                           
  4565                           ; BSR set to: 0
  4566  000772  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$565
  4567  000776  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$565+1
  4568  00077A  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$565+2
  4569  00077E  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$565+3
  4570  000782                     l295:
  4571                           
  4572                           ; BSR set to: 0
  4573  000782  C0B1  F0BD         	movff	_FlashReadUart$565,FlashReadUart@offset
  4574  000786  C0B2  F0BE         	movff	_FlashReadUart$565+1,FlashReadUart@offset+1
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;FlashApp.c: 81: if(offset < 0)
  4578  00078A  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4579  00078C  D091               	goto	l298
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;FlashApp.c: 82: {
  4583                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4584  00078E  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4585  000792  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4586  000796  EC43  F01A         	call	_abs	;wreg free
  4587  00079A  C018  F060         	movff	?_abs,??_FlashReadUart
  4588  00079E  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4589  0007A2  0E00               	movlw	0
  4590  0007A4  0100               	movlb	0	; () banked
  4591  0007A6  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4592  0007A8  0EFF               	movlw	255
  4593  0007AA  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4594  0007AC  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4595  0007AE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4596  0007B0  5C3E               	subwf	_numOfReadSamples,w,c
  4597  0007B2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4598  0007B4  583F               	subwfb	_numOfReadSamples+1,w,c
  4599  0007B6  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4600  0007B8  5840               	subwfb	_numOfReadSamples+2,w,c
  4601  0007BA  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4602  0007BC  5841               	subwfb	_numOfReadSamples+3,w,c
  4603  0007BE  B0D8               	btfsc	status,0,c
  4604  0007C0  D016               	goto	l297
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;FlashApp.c: 84: {
  4608                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4609  0007C2  503E               	movf	_numOfReadSamples,w,c
  4610  0007C4  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4611  0007C6  6F60               	movwf	??_FlashReadUart& (0+255),b
  4612  0007C8  503F               	movf	_numOfReadSamples+1,w,c
  4613  0007CA  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4614  0007CC  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4615  0007CE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4616  0007D0  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4617  0007D2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4618  0007D4  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4622  0007D6  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4623  0007DA  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4624  0007DE  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4625  0007E0  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4626  0007E2  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4627  0007E4  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4628  0007E6  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4629  0007EA  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4630  0007EE                     l297:
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;FlashApp.c: 88: }
  4634                           ;FlashApp.c: 90: readAddress += offset * (64);
  4635  0007EE  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4636  0007F2  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4637  0007F6  0E06               	movlw	6
  4638  0007F8                     u7105:
  4639  0007F8  90D8               	bcf	status,0,c
  4640  0007FA  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4641  0007FC  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4642  0007FE  2EE8               	decfsz	wreg,f,c
  4643  000800  D7FB               	goto	u7105
  4644  000802  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4645  000806  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4646  00080A  0E00               	movlw	0
  4647  00080C  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4648  00080E  0EFF               	movlw	255
  4649  000810  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4650  000812  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4651  000814  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4652  000816  27F7               	addwf	_readAddress& (0+255),f,b
  4653  000818  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4654  00081A  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4655  00081C  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4656  00081E  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4657  000820  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4658  000822  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;FlashApp.c: 91: }
  4662                           ;FlashApp.c: 92: }
  4663  000824  D045               	goto	l298
  4664  000826                     l291:
  4665                           
  4666                           ;FlashApp.c: 93: else
  4667                           ;FlashApp.c: 94: {
  4668                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4669                           
  4670                           ; BSR set to: 0
  4671  000826  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4672  00082A  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4673  00082E  0E00               	movlw	0
  4674  000830  0100               	movlb	0	; () banked
  4675  000832  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4676  000834  0EFF               	movlw	255
  4677  000836  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4678  000838  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4679  00083A  503E               	movf	_numOfReadSamples,w,c
  4680  00083C  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4681  00083E  503F               	movf	_numOfReadSamples+1,w,c
  4682  000840  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4683  000842  5040               	movf	_numOfReadSamples+2,w,c
  4684  000844  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4685  000846  5041               	movf	_numOfReadSamples+3,w,c
  4686  000848  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4687  00084A  A0D8               	btfss	status,0,c
  4688  00084C  D009               	goto	l300
  4689                           
  4690                           ; BSR set to: 0
  4691  00084E  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$566
  4692  000852  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$566+1
  4693  000856  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$566+2
  4694  00085A  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$566+3
  4695  00085E  D009               	goto	l302
  4696  000860                     l300:
  4697                           
  4698                           ; BSR set to: 0
  4699                           
  4700                           ; BSR set to: 0
  4701  000860  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$566
  4702  000864  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$566+1
  4703  000868  0E00               	movlw	0
  4704  00086A  BFB6               	btfsc	(_FlashReadUart$566+1)& (0+255),7,b
  4705  00086C  0EFF               	movlw	-1
  4706  00086E  6FB7               	movwf	(_FlashReadUart$566+2)& (0+255),b
  4707  000870  6FB8               	movwf	(_FlashReadUart$566+3)& (0+255),b
  4708  000872                     l302:
  4709                           
  4710                           ; BSR set to: 0
  4711                           
  4712                           ; BSR set to: 0
  4713  000872  C0B5  F02C         	movff	_FlashReadUart$566,FlashReadUart@numOfSampleToRead
  4714  000876  C0B6  F02D         	movff	_FlashReadUart$566+1,FlashReadUart@numOfSampleToRead+1
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4718  00087A  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4719  00087E  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4720  000882  0E06               	movlw	6
  4721  000884                     u7125:
  4722  000884  90D8               	bcf	status,0,c
  4723  000886  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4724  000888  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4725  00088A  2EE8               	decfsz	wreg,f,c
  4726  00088C  D7FB               	goto	u7125
  4727  00088E  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4728  000892  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4729  000896  0E00               	movlw	0
  4730  000898  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4731  00089A  0EFF               	movlw	255
  4732  00089C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4733  00089E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4734  0008A0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4735  0008A2  5FF7               	subwf	_readAddress& (0+255),f,b
  4736  0008A4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4737  0008A6  5BF8               	subwfb	(_readAddress+1)& (0+255),f,b
  4738  0008A8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4739  0008AA  5BF9               	subwfb	(_readAddress+2)& (0+255),f,b
  4740  0008AC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4741  0008AE  5BFA               	subwfb	(_readAddress+3)& (0+255),f,b
  4742  0008B0                     l298:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;FlashApp.c: 97: }
  4746                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4747                           
  4748                           ; BSR set to: 0
  4749  0008B0  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4750  0008B2  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4751  0008B4  E13E               	bnz	l7274
  4752  0008B6  05F7               	decf	_readAddress& (0+255),w,b
  4753  0008B8  0E40               	movlw	64
  4754  0008BA  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4755  0008BC  B0D8               	btfsc	status,0,c
  4756  0008BE  D039               	goto	l308
  4757  0008C0  D023               	goto	u7160
  4758  0008C2                     l290:
  4759                           
  4760                           ;FlashApp.c: 104: else
  4761                           ;FlashApp.c: 105: {
  4762                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4763                           
  4764                           ; BSR set to: 0
  4765  0008C2  503B               	movf	_isReWriteDone,w,c
  4766  0008C4  B4D8               	btfsc	status,2,c
  4767  0008C6  D029               	goto	l305
  4768  0008C8  0100               	movlb	0	; () banked
  4769  0008CA  51F7               	movf	_readAddress& (0+255),w,b
  4770  0008CC  5C42               	subwf	_writeAddress,w,c
  4771  0008CE  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4772  0008D0  5843               	subwfb	_writeAddress+1,w,c
  4773  0008D2  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4774  0008D4  5844               	subwfb	_writeAddress+2,w,c
  4775  0008D6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4776  0008D8  5845               	subwfb	_writeAddress+3,w,c
  4777  0008DA  A0D8               	btfss	status,0,c
  4778  0008DC  D01E               	goto	l305
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;FlashApp.c: 107: {
  4782                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4783  0008DE  0E40               	movlw	64
  4784  0008E0  2442               	addwf	_writeAddress,w,c
  4785  0008E2  6FF7               	movwf	_readAddress& (0+255),b
  4786  0008E4  0E00               	movlw	0
  4787  0008E6  2043               	addwfc	_writeAddress+1,w,c
  4788  0008E8  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4789  0008EA  0E00               	movlw	0
  4790  0008EC  2044               	addwfc	_writeAddress+2,w,c
  4791  0008EE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4792  0008F0  0E00               	movlw	0
  4793  0008F2  2045               	addwfc	_writeAddress+3,w,c
  4794  0008F4  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4795                           
  4796                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4797  0008F6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4798  0008F8  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4799  0008FA  E106               	bnz	u7160
  4800  0008FC  0EF0               	movlw	240
  4801  0008FE  5DF7               	subwf	_readAddress& (0+255),w,b
  4802  000900  0E7F               	movlw	127
  4803  000902  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4804  000904  A0D8               	btfss	status,0,c
  4805  000906  D015               	goto	l308
  4806  000908                     u7160:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;FlashApp.c: 110: {
  4810                           ;FlashApp.c: 111: readAddress = 0x4000;
  4811  000908  0E00               	movlw	0
  4812  00090A  6FF7               	movwf	_readAddress& (0+255),b
  4813  00090C  0E40               	movlw	64
  4814  00090E  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4815  000910  0E00               	movlw	0
  4816  000912  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4817  000914  0E00               	movlw	0
  4818  000916  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;FlashApp.c: 112: }
  4822                           ;FlashApp.c: 114: }
  4823  000918  D00C               	goto	l308
  4824  00091A                     l305:
  4825                           
  4826                           ;FlashApp.c: 115: else
  4827                           ;FlashApp.c: 116: {
  4828                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4829                           
  4830                           ; BSR set to: 0
  4831  00091A  5031               	movf	_numOfValidateSamples,w,c
  4832  00091C  1032               	iorwf	_numOfValidateSamples+1,w,c
  4833  00091E  1033               	iorwf	_numOfValidateSamples+2,w,c
  4834  000920  1034               	iorwf	_numOfValidateSamples+3,w,c
  4835  000922  A4D8               	btfss	status,2,c
  4836  000924  D006               	goto	l308
  4837                           
  4838                           ;FlashApp.c: 118: {
  4839                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4840  000926  0E55               	movlw	85
  4841  000928  6E24               	movwf	SendAckMessage@inRequest,c
  4842  00092A  0E05               	movlw	5
  4843  00092C  ECC4  F016         	call	_SendAckMessage
  4844                           
  4845                           ;FlashApp.c: 120: return;
  4846  000930  0012               	return	
  4847  000932                     l308:
  4848  000932                     l7274:
  4849                           
  4850                           ;FlashApp.c: 121: }
  4851                           ;FlashApp.c: 123: }
  4852                           ;FlashApp.c: 124: }
  4853                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4854  000932  0E24               	movlw	36
  4855  000934  0100               	movlb	0	; () banked
  4856  000936  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4857                           
  4858                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4859  000938  0E05               	movlw	5
  4860  00093A  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4861                           
  4862                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4863  00093C  0E54               	movlw	84
  4864  00093E  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4865                           
  4866                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4867  000940  0E40               	movlw	64
  4868  000942  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4869                           
  4870                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4871  000944  0E00               	movlw	0
  4872  000946  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4873  000948  0E00               	movlw	0
  4874  00094A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4875  00094C  D084               	goto	l309
  4876  00094E                     
  4877                           ; BSR set to: 0
  4878                           ;FlashApp.c: 133: {
  4879                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4880                           
  4881                           ; BSR set to: 0
  4882  00094E  0E00               	movlw	0
  4883  000950  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4884  000952  0E00               	movlw	0
  4885  000954  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4886  000956                     l7278:
  4887                           
  4888                           ; BSR set to: 0
  4889  000956  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4890  000958  D006               	goto	l311
  4891  00095A  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4892  00095C  E12C               	bnz	l7288
  4893  00095E  0E40               	movlw	64
  4894  000960  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4895  000962  B0D8               	btfsc	status,0,c
  4896  000964  D028               	goto	u7190
  4897  000966                     l311:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;FlashApp.c: 136: {
  4901                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4902                           
  4903                           ; BSR set to: 0
  4904  000966  0E04               	movlw	4
  4905  000968  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4906  00096A  6F60               	movwf	??_FlashReadUart& (0+255),b
  4907  00096C  0E00               	movlw	0
  4908  00096E  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4909  000970  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4910  000972  0E6C               	movlw	low FlashReadUart@TxMsg
  4911  000974  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4912  000976  6ED9               	movwf	fsr2l,c
  4913  000978  0E00               	movlw	high FlashReadUart@TxMsg
  4914  00097A  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4915  00097C  6EDA               	movwf	fsr2h,c
  4916  00097E  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4917  000982  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4918  000986  0E00               	movlw	0
  4919  000988  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4920  00098A  0EFF               	movlw	255
  4921  00098C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4922  00098E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4923  000990  51F7               	movf	_readAddress& (0+255),w,b
  4924  000992  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4925  000994  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4926  000996  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4927  000998  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4928  00099A  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4929  00099C  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4930  00099E  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4931  0009A0  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4932  0009A2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4933  0009A4  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4934  0009A6  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4935  0009A8  EC62  F01B         	call	_FLASH_ReadByte	;wreg free
  4936  0009AC  6EDF               	movwf	indf2,c
  4937  0009AE  0100               	movlb	0	; () banked
  4938  0009B0  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4939  0009B2  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4940  0009B4  D7D0               	goto	l7278
  4941  0009B6                     u7190:
  4942  0009B6                     l7288:
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;FlashApp.c: 138: }
  4946                           ;FlashApp.c: 140: readAddress += (64);
  4947  0009B6  0E40               	movlw	64
  4948  0009B8  27F7               	addwf	_readAddress& (0+255),f,b
  4949  0009BA  0E00               	movlw	0
  4950  0009BC  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4951  0009BE  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4952  0009C0  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4953                           
  4954                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4955  0009C2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4956  0009C4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4957  0009C6  E106               	bnz	u7200
  4958  0009C8  0EF0               	movlw	240
  4959  0009CA  5DF7               	subwf	_readAddress& (0+255),w,b
  4960  0009CC  0E7F               	movlw	127
  4961  0009CE  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4962  0009D0  A0D8               	btfss	status,0,c
  4963  0009D2  D008               	goto	l313
  4964  0009D4                     u7200:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;FlashApp.c: 142: {
  4968                           ;FlashApp.c: 143: readAddress = 0x4000;
  4969  0009D4  0E00               	movlw	0
  4970  0009D6  6FF7               	movwf	_readAddress& (0+255),b
  4971  0009D8  0E40               	movlw	64
  4972  0009DA  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4973  0009DC  0E00               	movlw	0
  4974  0009DE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4975  0009E0  0E00               	movlw	0
  4976  0009E2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4977  0009E4                     l313:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;FlashApp.c: 144: }
  4981                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4982                           
  4983                           ; BSR set to: 0
  4984  0009E4  0E6C               	movlw	low FlashReadUart@TxMsg
  4985  0009E6  6E18               	movwf	crc8@dataArray,c
  4986  0009E8  0E00               	movlw	high FlashReadUart@TxMsg
  4987  0009EA  6E19               	movwf	crc8@dataArray+1,c
  4988  0009EC  0E00               	movlw	0
  4989  0009EE  6E1B               	movwf	crc8@dataSize+1,c
  4990  0009F0  0E44               	movlw	68
  4991  0009F2  6E1A               	movwf	crc8@dataSize,c
  4992  0009F4  ECED  F016         	call	_crc8	;wreg free
  4993  0009F8  0100               	movlb	0	; () banked
  4994  0009FA  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4998  0009FC  0E6C               	movlw	low FlashReadUart@TxMsg
  4999  0009FE  6E19               	movwf	WriteUartMessage@dataBuf,c
  5000  000A00  0E00               	movlw	high FlashReadUart@TxMsg
  5001  000A02  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5002  000A04  0E00               	movlw	0
  5003  000A06  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5004  000A08  0E45               	movlw	69
  5005  000A0A  6E1B               	movwf	WriteUartMessage@dataSize,c
  5006  000A0C  EC83  F019         	call	_WriteUartMessage	;wreg free
  5007                           
  5008                           ;FlashApp.c: 149: if(numOfValidateSamples)
  5009  000A10  5031               	movf	_numOfValidateSamples,w,c
  5010  000A12  1032               	iorwf	_numOfValidateSamples+1,w,c
  5011  000A14  1033               	iorwf	_numOfValidateSamples+2,w,c
  5012  000A16  1034               	iorwf	_numOfValidateSamples+3,w,c
  5013  000A18  B4D8               	btfsc	status,2,c
  5014  000A1A  D01A               	goto	l316
  5015                           
  5016                           ;FlashApp.c: 150: {
  5017                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  5018  000A1C  043E               	decf	_numOfReadSamples,w,c
  5019  000A1E  0EFF               	movlw	255
  5020  000A20  583F               	subwfb	_numOfReadSamples+1,w,c
  5021  000A22  0EFF               	movlw	255
  5022  000A24  5840               	subwfb	_numOfReadSamples+2,w,c
  5023  000A26  0EFF               	movlw	255
  5024  000A28  5841               	subwfb	_numOfReadSamples+3,w,c
  5025  000A2A  B0D8               	btfsc	status,0,c
  5026  000A2C  D006               	goto	l315
  5027                           
  5028                           ;FlashApp.c: 152: {
  5029                           ;FlashApp.c: 153: numOfReadSamples++;
  5030  000A2E  0E01               	movlw	1
  5031  000A30  263E               	addwf	_numOfReadSamples,f,c
  5032  000A32  0E00               	movlw	0
  5033  000A34  223F               	addwfc	_numOfReadSamples+1,f,c
  5034  000A36  2240               	addwfc	_numOfReadSamples+2,f,c
  5035  000A38  2241               	addwfc	_numOfReadSamples+3,f,c
  5036  000A3A                     l315:
  5037                           
  5038                           ;FlashApp.c: 154: }
  5039                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  5040  000A3A  5031               	movf	_numOfValidateSamples,w,c
  5041  000A3C  1032               	iorwf	_numOfValidateSamples+1,w,c
  5042  000A3E  1033               	iorwf	_numOfValidateSamples+2,w,c
  5043  000A40  1034               	iorwf	_numOfValidateSamples+3,w,c
  5044  000A42  B4D8               	btfsc	status,2,c
  5045  000A44  D005               	goto	l316
  5046                           
  5047                           ;FlashApp.c: 156: {
  5048                           ;FlashApp.c: 157: numOfValidateSamples--;
  5049  000A46  0631               	decf	_numOfValidateSamples,f,c
  5050  000A48  0E00               	movlw	0
  5051  000A4A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5052  000A4C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5053  000A4E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5054  000A50                     l316:
  5055  000A50  0100               	movlb	0	; () banked
  5056  000A52  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5057  000A54  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5058  000A56                     l309:
  5059                           
  5060                           ; BSR set to: 0
  5061                           
  5062                           ; BSR set to: 0
  5063  000A56  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  5064  000A58  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5065  000A5A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5066  000A5C  0A80               	xorlw	128
  5067  000A5E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5068  000A60  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5069  000A62  0A80               	xorlw	128
  5070  000A64  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5071  000A66  B0D8               	btfsc	status,0,c
  5072  000A68  0012               	return	
  5073  000A6A  D771               	goto	l310
  5074  000A6C                     __end_of_FlashReadUart:
  5075                           	opt stack 0
  5076                           tosu	equ	0xFFF
  5077                           tosh	equ	0xFFE
  5078                           tosl	equ	0xFFD
  5079                           pclath	equ	0xFFA
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           postinc0	equ	0xFEE
  5088                           wreg	equ	0xFE8
  5089                           postdec1	equ	0xFE5
  5090                           fsr1l	equ	0xFE1
  5091                           indf2	equ	0xFDF
  5092                           postinc2	equ	0xFDE
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _abs *****************
  5098 ;; Defined at:
  5099 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  a               2   23[COMRAM] int 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  2   23[COMRAM] int 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5113 ;;      Params:         2       0       0       0       0       0       0
  5114 ;;      Locals:         0       0       0       0       0       0       0
  5115 ;;      Temps:          2       0       0       0       0       0       0
  5116 ;;      Totals:         4       0       0       0       0       0       0
  5117 ;;Total ram usage:        4 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    3
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_FlashReadUart
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           	psect	text23
  5128  003486                     __ptext23:
  5129                           	opt stack 0
  5130  003486                     _abs:
  5131                           	opt stack 24
  5132                           
  5133                           ;incstack = 0
  5134  003486  AE19               	btfss	abs@a+1,7,c
  5135  003488  D00D               	goto	l1475
  5136  00348A  C018  F01A         	movff	abs@a,??_abs
  5137  00348E  C019  F01B         	movff	abs@a+1,??_abs+1
  5138  003492  1E1A               	comf	??_abs,f,c
  5139  003494  1E1B               	comf	??_abs+1,f,c
  5140  003496  4A1A               	infsnz	??_abs,f,c
  5141  003498  2A1B               	incf	??_abs+1,f,c
  5142  00349A  C01A  F018         	movff	??_abs,?_abs
  5143  00349E  C01B  F019         	movff	??_abs+1,?_abs+1
  5144  0034A2  0012               	return	
  5145  0034A4                     l1475:
  5146  0034A4  C018  F018         	movff	abs@a,?_abs
  5147  0034A8  C019  F019         	movff	abs@a+1,?_abs+1
  5148  0034AC  0012               	return		;funcret
  5149  0034AE                     __end_of_abs:
  5150                           	opt stack 0
  5151                           tosu	equ	0xFFF
  5152                           tosh	equ	0xFFE
  5153                           tosl	equ	0xFFD
  5154                           pclath	equ	0xFFA
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           postdec1	equ	0xFE5
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _FLASH_ReadByte *****************
  5173 ;; Defined at:
  5174 ;;		line 58 in file "mcc_generated_files/memory.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      unsigned char 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5188 ;;      Params:         4       0       0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0
  5191 ;;      Totals:         4       0       0       0       0       0       0
  5192 ;;Total ram usage:        4 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    3
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_FlashReadUart
  5199 ;;		_FlashTest
  5200 ;;		_FLASH_ReadWord
  5201 ;;		_FLASH_WriteByte
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text24
  5206  0036C4                     __ptext24:
  5207                           	opt stack 0
  5208  0036C4                     _FLASH_ReadByte:
  5209                           	opt stack 24
  5210                           
  5211                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5212                           
  5213                           ;incstack = 0
  5214  0036C4  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5215                           
  5216                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5217  0036C8  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5218                           
  5219                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5220  0036CC  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5221  0036D0  0008               	tblrd		*	;# 
  5222                           
  5223                           ;memory.c: 66: return (TABLAT);
  5224  0036D2  50F5               	movf	tablat,w,c	;volatile
  5225  0036D4  0012               	return	
  5226  0036D6                     __end_of_FLASH_ReadByte:
  5227                           	opt stack 0
  5228                           tosu	equ	0xFFF
  5229                           tosh	equ	0xFFE
  5230                           tosl	equ	0xFFD
  5231                           pclath	equ	0xFFA
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _FlashReadCondition *****************
  5250 ;; Defined at:
  5251 ;;		line 178 in file "FlashApp.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       0       0       0       0       0       0
  5266 ;;      Locals:         9       0       0       0       0       0       0
  5267 ;;      Temps:          4       0       0       0       0       0       0
  5268 ;;      Totals:        13       0       0       0       0       0       0
  5269 ;;Total ram usage:       13 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    5
  5272 ;; This function calls:
  5273 ;;		_WriteUartMessage
  5274 ;;		_ZeroArray
  5275 ;;		_crc8
  5276 ;;		_make8
  5277 ;; This function is called by:
  5278 ;;		_GroupFlashMemory
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text25
  5283  00185C                     __ptext25:
  5284                           	opt stack 0
  5285  00185C                     _FlashReadCondition:
  5286                           	opt stack 23
  5287                           
  5288                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5289                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5290                           
  5291                           ;incstack = 0
  5292  00185C  0E28               	movlw	low FlashReadCondition@TxMsg
  5293  00185E  6E20               	movwf	ZeroArray@array,c
  5294  001860  0E00               	movlw	high FlashReadCondition@TxMsg
  5295  001862  6E21               	movwf	ZeroArray@array+1,c
  5296  001864  0E00               	movlw	0
  5297  001866  6E23               	movwf	ZeroArray@size+1,c
  5298  001868  0E09               	movlw	9
  5299  00186A  6E22               	movwf	ZeroArray@size,c
  5300  00186C  ECF6  F01A         	call	_ZeroArray	;wreg free
  5301                           
  5302                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5303  001870  0E24               	movlw	36
  5304  001872  6E28               	movwf	FlashReadCondition@TxMsg,c
  5305                           
  5306                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5307  001874  0E05               	movlw	5
  5308  001876  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5309                           
  5310                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5311  001878  0E52               	movlw	82
  5312  00187A  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5313                           
  5314                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5315  00187C  0E04               	movlw	4
  5316  00187E  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5317                           
  5318                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5319  001880  0EF0               	movlw	240
  5320  001882  6E18               	movwf	make8@data,c
  5321  001884  0E3F               	movlw	63
  5322  001886  6E19               	movwf	make8@data+1,c
  5323  001888  0E00               	movlw	0
  5324  00188A  6E1A               	movwf	make8@data+2,c
  5325  00188C  0E00               	movlw	0
  5326  00188E  6E1B               	movwf	make8@data+3,c
  5327  001890  0E01               	movlw	1
  5328  001892  6E1C               	movwf	make8@dataLocation,c
  5329  001894  EC66  F015         	call	_make8	;wreg free
  5330  001898  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5331                           
  5332                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5333  00189A  0EF0               	movlw	240
  5334  00189C  6E18               	movwf	make8@data,c
  5335  00189E  0E3F               	movlw	63
  5336  0018A0  6E19               	movwf	make8@data+1,c
  5337  0018A2  0E00               	movlw	0
  5338  0018A4  6E1A               	movwf	make8@data+2,c
  5339  0018A6  0E00               	movlw	0
  5340  0018A8  6E1B               	movwf	make8@data+3,c
  5341  0018AA  0E00               	movlw	0
  5342  0018AC  6E1C               	movwf	make8@dataLocation,c
  5343  0018AE  EC66  F015         	call	_make8	;wreg free
  5344  0018B2  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5345                           
  5346                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5347  0018B4  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5348  0018B8  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5349  0018BC  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5350  0018C0  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5351  0018C4  1E24               	comf	??_FlashReadCondition,f,c
  5352  0018C6  1E25               	comf	??_FlashReadCondition+1,f,c
  5353  0018C8  1E26               	comf	??_FlashReadCondition+2,f,c
  5354  0018CA  1E27               	comf	??_FlashReadCondition+3,f,c
  5355  0018CC  2A24               	incf	??_FlashReadCondition,f,c
  5356  0018CE  0E00               	movlw	0
  5357  0018D0  2225               	addwfc	??_FlashReadCondition+1,f,c
  5358  0018D2  2226               	addwfc	??_FlashReadCondition+2,f,c
  5359  0018D4  2227               	addwfc	??_FlashReadCondition+3,f,c
  5360  0018D6  0EF0               	movlw	240
  5361  0018D8  2424               	addwf	??_FlashReadCondition,w,c
  5362  0018DA  6E18               	movwf	make8@data,c
  5363  0018DC  0E7F               	movlw	127
  5364  0018DE  2025               	addwfc	??_FlashReadCondition+1,w,c
  5365  0018E0  6E19               	movwf	make8@data+1,c
  5366  0018E2  0E00               	movlw	0
  5367  0018E4  2026               	addwfc	??_FlashReadCondition+2,w,c
  5368  0018E6  6E1A               	movwf	make8@data+2,c
  5369  0018E8  0E00               	movlw	0
  5370  0018EA  2027               	addwfc	??_FlashReadCondition+3,w,c
  5371  0018EC  6E1B               	movwf	make8@data+3,c
  5372  0018EE  0E01               	movlw	1
  5373  0018F0  6E1C               	movwf	make8@dataLocation,c
  5374  0018F2  EC66  F015         	call	_make8	;wreg free
  5375  0018F6  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5376                           
  5377                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5378  0018F8  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5379  0018FC  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5380  001900  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5381  001904  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5382  001908  1E24               	comf	??_FlashReadCondition,f,c
  5383  00190A  1E25               	comf	??_FlashReadCondition+1,f,c
  5384  00190C  1E26               	comf	??_FlashReadCondition+2,f,c
  5385  00190E  1E27               	comf	??_FlashReadCondition+3,f,c
  5386  001910  2A24               	incf	??_FlashReadCondition,f,c
  5387  001912  0E00               	movlw	0
  5388  001914  2225               	addwfc	??_FlashReadCondition+1,f,c
  5389  001916  2226               	addwfc	??_FlashReadCondition+2,f,c
  5390  001918  2227               	addwfc	??_FlashReadCondition+3,f,c
  5391  00191A  0EF0               	movlw	240
  5392  00191C  2424               	addwf	??_FlashReadCondition,w,c
  5393  00191E  6E18               	movwf	make8@data,c
  5394  001920  0E7F               	movlw	127
  5395  001922  2025               	addwfc	??_FlashReadCondition+1,w,c
  5396  001924  6E19               	movwf	make8@data+1,c
  5397  001926  0E00               	movlw	0
  5398  001928  2026               	addwfc	??_FlashReadCondition+2,w,c
  5399  00192A  6E1A               	movwf	make8@data+2,c
  5400  00192C  0E00               	movlw	0
  5401  00192E  2027               	addwfc	??_FlashReadCondition+3,w,c
  5402  001930  6E1B               	movwf	make8@data+3,c
  5403  001932  0E00               	movlw	0
  5404  001934  6E1C               	movwf	make8@dataLocation,c
  5405  001936  EC66  F015         	call	_make8	;wreg free
  5406  00193A  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5407                           
  5408                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5409  00193C  0E28               	movlw	low FlashReadCondition@TxMsg
  5410  00193E  6E18               	movwf	crc8@dataArray,c
  5411  001940  0E00               	movlw	high FlashReadCondition@TxMsg
  5412  001942  6E19               	movwf	crc8@dataArray+1,c
  5413  001944  0E00               	movlw	0
  5414  001946  6E1B               	movwf	crc8@dataSize+1,c
  5415  001948  0E08               	movlw	8
  5416  00194A  6E1A               	movwf	crc8@dataSize,c
  5417  00194C  ECED  F016         	call	_crc8	;wreg free
  5418  001950  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5419                           
  5420                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5421  001952  0E28               	movlw	low FlashReadCondition@TxMsg
  5422  001954  6E19               	movwf	WriteUartMessage@dataBuf,c
  5423  001956  0E00               	movlw	high FlashReadCondition@TxMsg
  5424  001958  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5425  00195A  0E00               	movlw	0
  5426  00195C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5427  00195E  0E09               	movlw	9
  5428  001960  6E1B               	movwf	WriteUartMessage@dataSize,c
  5429  001962  EC83  F019         	call	_WriteUartMessage	;wreg free
  5430  001966  0012               	return		;funcret
  5431  001968                     __end_of_FlashReadCondition:
  5432                           	opt stack 0
  5433                           tosu	equ	0xFFF
  5434                           tosh	equ	0xFFE
  5435                           tosl	equ	0xFFD
  5436                           pclath	equ	0xFFA
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           postdec1	equ	0xFE5
  5447                           fsr1l	equ	0xFE1
  5448                           indf2	equ	0xFDF
  5449                           postinc2	equ	0xFDE
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _FlashEreaseMem *****************
  5455 ;; Defined at:
  5456 ;;		line 168 in file "FlashApp.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      void 
  5463 ;; Registers used:
  5464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5470 ;;      Params:         0       0       0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0
  5473 ;;      Totals:         0       0       0       0       0       0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    6
  5477 ;; This function calls:
  5478 ;;		_SendAckMessage
  5479 ;;		_ZeroArray
  5480 ;; This function is called by:
  5481 ;;		_GroupFlashMemory
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text26
  5486  002D36                     __ptext26:
  5487                           	opt stack 0
  5488  002D36                     _FlashEreaseMem:
  5489                           	opt stack 22
  5490                           
  5491                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5492                           
  5493                           ;incstack = 0
  5494  002D36  0E00               	movlw	0
  5495  002D38  6E42               	movwf	_writeAddress,c
  5496  002D3A  0E40               	movlw	64
  5497  002D3C  6E43               	movwf	_writeAddress+1,c
  5498  002D3E  0E00               	movlw	0
  5499  002D40  6E44               	movwf	_writeAddress+2,c
  5500  002D42  0E00               	movlw	0
  5501  002D44  6E45               	movwf	_writeAddress+3,c
  5502                           
  5503                           ;FlashApp.c: 171: readAddress = 0x4000;
  5504  002D46  0E00               	movlw	0
  5505  002D48  0100               	movlb	0	; () banked
  5506  002D4A  6FF7               	movwf	_readAddress& (0+255),b
  5507  002D4C  0E40               	movlw	64
  5508  002D4E  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5509  002D50  0E00               	movlw	0
  5510  002D52  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5511  002D54  0E00               	movlw	0
  5512  002D56  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5513                           
  5514                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5515  002D58  0E00               	movlw	0
  5516  002D5A  6E31               	movwf	_numOfValidateSamples,c
  5517  002D5C  0E00               	movlw	0
  5518  002D5E  6E32               	movwf	_numOfValidateSamples+1,c
  5519  002D60  0E00               	movlw	0
  5520  002D62  6E33               	movwf	_numOfValidateSamples+2,c
  5521  002D64  0E00               	movlw	0
  5522  002D66  6E34               	movwf	_numOfValidateSamples+3,c
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5526  002D68  0E6E               	movlw	low _sampleArray
  5527  002D6A  6E20               	movwf	ZeroArray@array,c
  5528  002D6C  0E01               	movlw	high _sampleArray
  5529  002D6E  6E21               	movwf	ZeroArray@array+1,c
  5530  002D70  0E00               	movlw	0
  5531  002D72  6E23               	movwf	ZeroArray@size+1,c
  5532  002D74  0E20               	movlw	32
  5533  002D76  6E22               	movwf	ZeroArray@size,c
  5534  002D78  ECF6  F01A         	call	_ZeroArray	;wreg free
  5535                           
  5536                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5537  002D7C  0E51               	movlw	81
  5538  002D7E  6E24               	movwf	SendAckMessage@inRequest,c
  5539  002D80  0E05               	movlw	5
  5540  002D82  ECC4  F016         	call	_SendAckMessage
  5541  002D86  0012               	return		;funcret
  5542  002D88                     __end_of_FlashEreaseMem:
  5543                           	opt stack 0
  5544                           tosu	equ	0xFFF
  5545                           tosh	equ	0xFFE
  5546                           tosl	equ	0xFFD
  5547                           pclath	equ	0xFFA
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           intcon	equ	0xFF2
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _DacSetValue *****************
  5566 ;; Defined at:
  5567 ;;		line 33 in file "DacApp.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  data            2   45[COMRAM] PTR unsigned char 
  5570 ;;		 -> rxMsgData(20), 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  regData         2   21[BANK0 ] unsigned int 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5582 ;;      Params:         2       0       0       0       0       0       0
  5583 ;;      Locals:         0       2       0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0
  5585 ;;      Totals:         2       2       0       0       0       0       0
  5586 ;;Total ram usage:        4 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    7
  5589 ;; This function calls:
  5590 ;;		_GetIntFromUartData
  5591 ;;		_SWSPI_send_word
  5592 ;;		_SendAckMessage
  5593 ;; This function is called by:
  5594 ;;		_GroupDAC
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text27
  5599  00329A                     __ptext27:
  5600                           	opt stack 0
  5601  00329A                     _DacSetValue:
  5602                           	opt stack 21
  5603                           
  5604                           ;DacApp.c: 35: uint16_t regData = GetIntFromUartData(data);
  5605                           
  5606                           ;incstack = 0
  5607  00329A  C02E  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5608  00329E  C02F  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5609  0032A2  EC59  F011         	call	_GetIntFromUartData	;wreg free
  5610  0032A6  C066  F075         	movff	?_GetIntFromUartData,DacSetValue@regData
  5611  0032AA  C067  F076         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5612                           
  5613                           ;DacApp.c: 36: SWSPI_send_word(EXT_DAC, regData, 1);
  5614  0032AE  C075  F021         	movff	DacSetValue@regData,SWSPI_send_word@data
  5615  0032B2  C076  F022         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5616  0032B6  6A23               	clrf	SWSPI_send_word@data+2,c
  5617  0032B8  6A24               	clrf	SWSPI_send_word@data+3,c
  5618  0032BA  0E01               	movlw	1
  5619  0032BC  6E25               	movwf	SWSPI_send_word@dataSize,c
  5620  0032BE  0E02               	movlw	2
  5621  0032C0  ECA6  F011         	call	_SWSPI_send_word
  5622                           
  5623                           ;DacApp.c: 39: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5624  0032C4  0E61               	movlw	97
  5625  0032C6  6E24               	movwf	SendAckMessage@inRequest,c
  5626  0032C8  0E06               	movlw	6
  5627  0032CA  ECC4  F016         	call	_SendAckMessage
  5628  0032CE  0012               	return		;funcret
  5629  0032D0                     __end_of_DacSetValue:
  5630                           	opt stack 0
  5631                           tosu	equ	0xFFF
  5632                           tosh	equ	0xFFE
  5633                           tosl	equ	0xFFD
  5634                           pclath	equ	0xFFA
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           postdec1	equ	0xFE5
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _GetIntFromUartData *****************
  5653 ;; Defined at:
  5654 ;;		line 40 in file "SystemCommon.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5657 ;;		 -> rxMsgData(20), 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  c               1   18[BANK0 ] unsigned char 
  5660 ;;  idx             2   19[BANK0 ] int 
  5661 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  4    6[BANK0 ] unsigned long 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5671 ;;      Params:         0       4       0       0       0       0       0
  5672 ;;      Locals:         0      11       0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0
  5674 ;;      Totals:         0      15       0       0       0       0       0
  5675 ;;Total ram usage:       15 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		_ZeroArray
  5680 ;;		_strtol
  5681 ;; This function is called by:
  5682 ;;		_DacSetValue
  5683 ;;		_UpdateTxFreq
  5684 ;;		_UpdateRxFreq
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text28
  5689  0022B2                     __ptext28:
  5690                           	opt stack 0
  5691  0022B2                     _GetIntFromUartData:
  5692                           	opt stack 21
  5693                           
  5694                           ;SystemCommon.c: 42: char dataRegArr[8];
  5695                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  5696                           
  5697                           ;incstack = 0
  5698  0022B2  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5699  0022B4  6E20               	movwf	ZeroArray@array,c
  5700  0022B6  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5701  0022B8  6E21               	movwf	ZeroArray@array+1,c
  5702  0022BA  0E00               	movlw	0
  5703  0022BC  6E23               	movwf	ZeroArray@size+1,c
  5704  0022BE  0E08               	movlw	8
  5705  0022C0  6E22               	movwf	ZeroArray@size,c
  5706  0022C2  ECF6  F01A         	call	_ZeroArray	;wreg free
  5707                           
  5708                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  5709  0022C6  0E00               	movlw	0
  5710  0022C8  0100               	movlb	0	; () banked
  5711  0022CA  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5712  0022CC  0E00               	movlw	0
  5713  0022CE  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  5714  0022D0                     l6966:
  5715                           
  5716                           ; BSR set to: 0
  5717  0022D0  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5718  0022D2  D006               	goto	l1266
  5719  0022D4  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5720  0022D6  E123               	bnz	l6984
  5721  0022D8  0E08               	movlw	8
  5722  0022DA  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5723  0022DC  B0D8               	btfsc	status,0,c
  5724  0022DE  D01F               	goto	u6740
  5725  0022E0                     l1266:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;SystemCommon.c: 46: {
  5729                           ;SystemCommon.c: 47: char c = data[idx] + '0';
  5730                           
  5731                           ; BSR set to: 0
  5732  0022E0  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5733  0022E2  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5734  0022E4  6ED9               	movwf	fsr2l,c
  5735  0022E6  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5736  0022E8  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5737  0022EA  6EDA               	movwf	fsr2h,c
  5738  0022EC  50DF               	movf	indf2,w,c
  5739  0022EE  0F30               	addlw	48
  5740  0022F0  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;SystemCommon.c: 48: if(c == 0x40)
  5744  0022F2  0E40               	movlw	64
  5745  0022F4  1972               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5746  0022F6  B4D8               	btfsc	status,2,c
  5747  0022F8  D012               	goto	u6740
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;SystemCommon.c: 52: else
  5751                           ;SystemCommon.c: 53: {
  5752                           ;SystemCommon.c: 54: dataRegArr[idx] = data[idx] + '0';
  5753                           
  5754                           ; BSR set to: 0
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;SystemCommon.c: 51: }
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;SystemCommon.c: 49: {
  5761                           ;SystemCommon.c: 50: break;
  5762  0022FA  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5763  0022FC  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5764  0022FE  6ED9               	movwf	fsr2l,c
  5765  002300  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5766  002302  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5767  002304  6EDA               	movwf	fsr2h,c
  5768  002306  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5769  002308  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5770  00230A  6EE1               	movwf	fsr1l,c
  5771  00230C  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5772  00230E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5773  002310  6EE2               	movwf	fsr1h,c
  5774  002312  50E7               	movf	indf1,w,c
  5775  002314  0F30               	addlw	48
  5776  002316  6EDF               	movwf	indf2,c
  5777                           
  5778                           ; BSR set to: 0
  5779                           
  5780                           ; BSR set to: 0
  5781  002318  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5782  00231A  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5783  00231C  D7D9               	goto	l6966
  5784  00231E                     u6740:
  5785  00231E                     l6984:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;SystemCommon.c: 55: }
  5789                           ;SystemCommon.c: 57: }
  5790                           ;SystemCommon.c: 59: return strtol(dataRegArr, (0), 16);
  5791  00231E  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5792  002320  6E24               	movwf	strtol@s,c
  5793  002322  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5794  002324  6E25               	movwf	strtol@s+1,c
  5795  002326  0E00               	movlw	0
  5796  002328  6E26               	movwf	strtol@endptr,c
  5797  00232A  0E00               	movlw	0
  5798  00232C  6E27               	movwf	strtol@endptr+1,c
  5799  00232E  0E00               	movlw	0
  5800  002330  6E29               	movwf	strtol@base+1,c
  5801  002332  0E10               	movlw	16
  5802  002334  6E28               	movwf	strtol@base,c
  5803  002336  EC42  F008         	call	_strtol	;wreg free
  5804  00233A  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5805  00233E  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5806  002342  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5807  002346  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5808  00234A  0012               	return	
  5809  00234C                     __end_of_GetIntFromUartData:
  5810                           	opt stack 0
  5811                           tosu	equ	0xFFF
  5812                           tosh	equ	0xFFE
  5813                           tosl	equ	0xFFD
  5814                           pclath	equ	0xFFA
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           intcon	equ	0xFF2
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           indf1	equ	0xFE7
  5825                           postdec1	equ	0xFE5
  5826                           fsr1h	equ	0xFE2
  5827                           fsr1l	equ	0xFE1
  5828                           indf2	equ	0xFDF
  5829                           postinc2	equ	0xFDE
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _strtol *****************
  5835 ;; Defined at:
  5836 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5839 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5840 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5841 ;;		 -> NULL(0), 
  5842 ;;  base            2   39[COMRAM] int 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  a               4    1[BANK0 ] long 
  5845 ;;  c               1    5[BANK0 ] unsigned char 
  5846 ;;  sign            1    0[BANK0 ] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  4   35[COMRAM] long 
  5849 ;; Registers used:
  5850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5856 ;;      Params:         6       0       0       0       0       0       0
  5857 ;;      Locals:         0       6       0       0       0       0       0
  5858 ;;      Temps:          4       0       0       0       0       0       0
  5859 ;;      Totals:        10       6       0       0       0       0       0
  5860 ;;Total ram usage:       16 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		___lmul
  5865 ;;		_isalpha
  5866 ;;		_isdigit
  5867 ;;		_isspace
  5868 ;;		_toupper
  5869 ;; This function is called by:
  5870 ;;		_GetIntFromUartData
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text29
  5875  001084                     __ptext29:
  5876                           	opt stack 0
  5877  001084                     _strtol:
  5878                           	opt stack 21
  5879                           
  5880                           ;incstack = 0
  5881  001084  C024  FFD9         	movff	strtol@s,fsr2l
  5882  001088  C025  FFDA         	movff	strtol@s+1,fsr2h
  5883  00108C  50DF               	movf	indf2,w,c
  5884  00108E  0100               	movlb	0	; () banked
  5885  001090  6F65               	movwf	strtol@c& (0+255),b
  5886                           
  5887                           ; BSR set to: 0
  5888  001092  4A24               	infsnz	strtol@s,f,c
  5889  001094  2A25               	incf	strtol@s+1,f,c
  5890                           
  5891                           ; BSR set to: 0
  5892  001096  5165               	movf	strtol@c& (0+255),w,b
  5893  001098  EC6B  F01A         	call	_isspace
  5894  00109C  B0D8               	btfsc	status,0,c
  5895  00109E  D7F2               	goto	_strtol
  5896  0010A0  0E00               	movlw	0
  5897  0010A2  0100               	movlb	0	; () banked
  5898  0010A4  6F61               	movwf	strtol@a& (0+255),b
  5899  0010A6  0E00               	movlw	0
  5900  0010A8  6F62               	movwf	(strtol@a+1)& (0+255),b
  5901  0010AA  0E00               	movlw	0
  5902  0010AC  6F63               	movwf	(strtol@a+2)& (0+255),b
  5903  0010AE  0E00               	movlw	0
  5904  0010B0  6F64               	movwf	(strtol@a+3)& (0+255),b
  5905  0010B2  0E00               	movlw	0
  5906  0010B4  6F60               	movwf	strtol@sign& (0+255),b
  5907                           
  5908                           ; BSR set to: 0
  5909  0010B6  0E2D               	movlw	45
  5910  0010B8  1965               	xorwf	strtol@c& (0+255),w,b
  5911  0010BA  A4D8               	btfss	status,2,c
  5912  0010BC  D003               	goto	l2008
  5913                           
  5914                           ; BSR set to: 0
  5915  0010BE  0E01               	movlw	1
  5916  0010C0  6F60               	movwf	strtol@sign& (0+255),b
  5917  0010C2  D004               	goto	u6190
  5918  0010C4                     l2008:
  5919                           
  5920                           ; BSR set to: 0
  5921                           
  5922                           ; BSR set to: 0
  5923  0010C4  0E2B               	movlw	43
  5924  0010C6  1965               	xorwf	strtol@c& (0+255),w,b
  5925  0010C8  A4D8               	btfss	status,2,c
  5926  0010CA  D008               	goto	l2010
  5927  0010CC                     u6190:
  5928                           
  5929                           ; BSR set to: 0
  5930  0010CC  C024  FFD9         	movff	strtol@s,fsr2l
  5931  0010D0  C025  FFDA         	movff	strtol@s+1,fsr2h
  5932  0010D4  50DF               	movf	indf2,w,c
  5933  0010D6  6F65               	movwf	strtol@c& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936  0010D8  4A24               	infsnz	strtol@s,f,c
  5937  0010DA  2A25               	incf	strtol@s+1,f,c
  5938  0010DC                     l2010:
  5939                           
  5940                           ; BSR set to: 0
  5941                           
  5942                           ; BSR set to: 0
  5943                           
  5944                           ; BSR set to: 0
  5945  0010DC  0E30               	movlw	48
  5946  0010DE  1965               	xorwf	strtol@c& (0+255),w,b
  5947  0010E0  A4D8               	btfss	status,2,c
  5948  0010E2  D02E               	goto	l2018
  5949                           
  5950                           ; BSR set to: 0
  5951  0010E4  C024  FFD9         	movff	strtol@s,fsr2l
  5952  0010E8  C025  FFDA         	movff	strtol@s+1,fsr2h
  5953  0010EC  50DF               	movf	indf2,w,c
  5954  0010EE  6F65               	movwf	strtol@c& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957  0010F0  4A24               	infsnz	strtol@s,f,c
  5958  0010F2  2A25               	incf	strtol@s+1,f,c
  5959                           
  5960                           ; BSR set to: 0
  5961  0010F4  5028               	movf	strtol@base,w,c
  5962  0010F6  1029               	iorwf	strtol@base+1,w,c
  5963  0010F8  B4D8               	btfsc	status,2,c
  5964  0010FA  D005               	goto	u6220
  5965                           
  5966                           ; BSR set to: 0
  5967  0010FC  0E10               	movlw	16
  5968  0010FE  1828               	xorwf	strtol@base,w,c
  5969  001100  1029               	iorwf	strtol@base+1,w,c
  5970  001102  A4D8               	btfss	status,2,c
  5971  001104  D015               	goto	l2012
  5972  001106                     u6220:
  5973                           
  5974                           ; BSR set to: 0
  5975                           
  5976                           ; BSR set to: 0
  5977  001106  0E78               	movlw	120
  5978  001108  1965               	xorwf	strtol@c& (0+255),w,b
  5979  00110A  B4D8               	btfsc	status,2,c
  5980  00110C  D004               	goto	u6240
  5981                           
  5982                           ; BSR set to: 0
  5983  00110E  0E58               	movlw	88
  5984  001110  1965               	xorwf	strtol@c& (0+255),w,b
  5985  001112  A4D8               	btfss	status,2,c
  5986  001114  D00D               	goto	l2012
  5987  001116                     u6240:
  5988                           
  5989                           ; BSR set to: 0
  5990                           
  5991                           ; BSR set to: 0
  5992  001116  0E00               	movlw	0
  5993  001118  6E29               	movwf	strtol@base+1,c
  5994  00111A  0E10               	movlw	16
  5995  00111C  6E28               	movwf	strtol@base,c
  5996                           
  5997                           ; BSR set to: 0
  5998  00111E  C024  FFD9         	movff	strtol@s,fsr2l
  5999  001122  C025  FFDA         	movff	strtol@s+1,fsr2h
  6000  001126  50DF               	movf	indf2,w,c
  6001  001128  6F65               	movwf	strtol@c& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004  00112A  4A24               	infsnz	strtol@s,f,c
  6005  00112C  2A25               	incf	strtol@s+1,f,c
  6006  00112E  D008               	goto	l2018
  6007  001130                     l2012:
  6008                           
  6009                           ; BSR set to: 0
  6010                           
  6011                           ; BSR set to: 0
  6012  001130  5028               	movf	strtol@base,w,c
  6013  001132  1029               	iorwf	strtol@base+1,w,c
  6014  001134  A4D8               	btfss	status,2,c
  6015  001136  D004               	goto	l2018
  6016                           
  6017                           ; BSR set to: 0
  6018  001138  0E00               	movlw	0
  6019  00113A  6E29               	movwf	strtol@base+1,c
  6020  00113C  0E08               	movlw	8
  6021  00113E  6E28               	movwf	strtol@base,c
  6022  001140                     l2018:
  6023                           
  6024                           ; BSR set to: 0
  6025                           
  6026                           ; BSR set to: 0
  6027                           
  6028                           ; BSR set to: 0
  6029                           
  6030                           ; BSR set to: 0
  6031  001140  5028               	movf	strtol@base,w,c
  6032  001142  1029               	iorwf	strtol@base+1,w,c
  6033  001144  A4D8               	btfss	status,2,c
  6034  001146  D004               	goto	l2019
  6035                           
  6036                           ; BSR set to: 0
  6037  001148  0E00               	movlw	0
  6038  00114A  6E29               	movwf	strtol@base+1,c
  6039  00114C  0E0A               	movlw	10
  6040  00114E  6E28               	movwf	strtol@base,c
  6041  001150                     l2019:
  6042                           
  6043                           ; BSR set to: 0
  6044                           
  6045                           ; BSR set to: 0
  6046                           
  6047                           ; BSR set to: 0
  6048  001150  5165               	movf	strtol@c& (0+255),w,b
  6049  001152  EC57  F01A         	call	_isalpha
  6050  001156  A0D8               	btfss	status,0,c
  6051  001158  D008               	goto	l2021
  6052  00115A  0100               	movlb	0	; () banked
  6053  00115C  5165               	movf	strtol@c& (0+255),w,b
  6054  00115E  EC4E  F01B         	call	_toupper
  6055  001162  0FC9               	addlw	201
  6056  001164  0100               	movlb	0	; () banked
  6057  001166  6F65               	movwf	strtol@c& (0+255),b
  6058  001168  D009               	goto	l2024
  6059  00116A                     l2021:
  6060                           
  6061                           ; BSR set to: 0
  6062  00116A  0100               	movlb	0	; () banked
  6063  00116C  5165               	movf	strtol@c& (0+255),w,b
  6064  00116E  ECD8  F01A         	call	_isdigit
  6065  001172  A0D8               	btfss	status,0,c
  6066  001174  D039               	goto	l2025
  6067  001176  0E30               	movlw	48
  6068  001178  0100               	movlb	0	; () banked
  6069  00117A  5F65               	subwf	strtol@c& (0+255),f,b
  6070  00117C                     l2024:
  6071                           
  6072                           ; BSR set to: 0
  6073                           
  6074                           ; BSR set to: 0
  6075                           
  6076                           ; BSR set to: 0
  6077  00117C  5165               	movf	strtol@c& (0+255),w,b
  6078  00117E  6E2A               	movwf	??_strtol& (0+255),c
  6079  001180  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6080  001182  5028               	movf	strtol@base,w,c
  6081  001184  5C2A               	subwf	??_strtol,w,c
  6082  001186  502B               	movf	??_strtol+1,w,c
  6083  001188  0A80               	xorlw	128
  6084  00118A  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6085  00118C  5029               	movf	strtol@base+1,w,c
  6086  00118E  0A80               	xorlw	128
  6087  001190  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6088  001192  B0D8               	btfsc	status,0,c
  6089  001194  D029               	goto	l2025
  6090                           
  6091                           ; BSR set to: 0
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096  001196  C028  F018         	movff	strtol@base,___lmul@multiplier
  6097  00119A  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6098  00119E  0E00               	movlw	0
  6099  0011A0  BE19               	btfsc	___lmul@multiplier+1,7,c
  6100  0011A2  0EFF               	movlw	-1
  6101  0011A4  6E1A               	movwf	___lmul@multiplier+2,c
  6102  0011A6  6E1B               	movwf	___lmul@multiplier+3,c
  6103  0011A8  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6104  0011AC  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6105  0011B0  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6106  0011B4  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6107  0011B8  EC1A  F016         	call	___lmul	;wreg free
  6108  0011BC  0100               	movlb	0	; () banked
  6109  0011BE  5165               	movf	strtol@c& (0+255),w,b
  6110  0011C0  2418               	addwf	?___lmul,w,c
  6111  0011C2  6F61               	movwf	strtol@a& (0+255),b
  6112  0011C4  0E00               	movlw	0
  6113  0011C6  2019               	addwfc	?___lmul+1,w,c
  6114  0011C8  6F62               	movwf	(strtol@a+1)& (0+255),b
  6115  0011CA  0E00               	movlw	0
  6116  0011CC  201A               	addwfc	?___lmul+2,w,c
  6117  0011CE  6F63               	movwf	(strtol@a+2)& (0+255),b
  6118  0011D0  0E00               	movlw	0
  6119  0011D2  201B               	addwfc	?___lmul+3,w,c
  6120  0011D4  6F64               	movwf	(strtol@a+3)& (0+255),b
  6121                           
  6122                           ; BSR set to: 0
  6123  0011D6  C024  FFD9         	movff	strtol@s,fsr2l
  6124  0011DA  C025  FFDA         	movff	strtol@s+1,fsr2h
  6125  0011DE  50DF               	movf	indf2,w,c
  6126  0011E0  6F65               	movwf	strtol@c& (0+255),b
  6127                           
  6128                           ; BSR set to: 0
  6129  0011E2  4A24               	infsnz	strtol@s,f,c
  6130  0011E4  2A25               	incf	strtol@s+1,f,c
  6131  0011E6  D7B4               	goto	l2019
  6132  0011E8                     l2025:
  6133                           
  6134                           ; BSR set to: 0
  6135  0011E8  5026               	movf	strtol@endptr,w,c
  6136  0011EA  1027               	iorwf	strtol@endptr+1,w,c
  6137  0011EC  B4D8               	btfsc	status,2,c
  6138  0011EE  D00E               	goto	l2027
  6139  0011F0  0EFF               	movlw	255
  6140  0011F2  2424               	addwf	strtol@s,w,c
  6141  0011F4  6E2A               	movwf	??_strtol& (0+255),c
  6142  0011F6  0EFF               	movlw	255
  6143  0011F8  2025               	addwfc	strtol@s+1,w,c
  6144  0011FA  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6145  0011FC  C026  FFD9         	movff	strtol@endptr,fsr2l
  6146  001200  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6147  001204  C02A  FFDE         	movff	??_strtol,postinc2
  6148  001208  C02B  FFDD         	movff	??_strtol+1,postdec2
  6149  00120C                     l2027:
  6150  00120C  0100               	movlb	0	; () banked
  6151  00120E  5160               	movf	strtol@sign& (0+255),w,b
  6152  001210  B4D8               	btfsc	status,2,c
  6153  001212  D01A               	goto	l2028
  6154                           
  6155                           ; BSR set to: 0
  6156  001214  C061  F02A         	movff	strtol@a,??_strtol
  6157  001218  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6158  00121C  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6159  001220  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6160  001224  1E2A               	comf	??_strtol,f,c
  6161  001226  1E2B               	comf	??_strtol+1,f,c
  6162  001228  1E2C               	comf	??_strtol+2,f,c
  6163  00122A  1E2D               	comf	??_strtol+3,f,c
  6164  00122C  2A2A               	incf	??_strtol,f,c
  6165  00122E  0E00               	movlw	0
  6166  001230  222B               	addwfc	??_strtol+1,f,c
  6167  001232  222C               	addwfc	??_strtol+2,f,c
  6168  001234  222D               	addwfc	??_strtol+3,f,c
  6169  001236  C02A  F024         	movff	??_strtol,?_strtol
  6170  00123A  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6171  00123E  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6172  001242  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6173                           
  6174                           ; BSR set to: 0
  6175  001246  0012               	return	
  6176  001248                     l2028:
  6177                           
  6178                           ; BSR set to: 0
  6179  001248  C061  F024         	movff	strtol@a,?_strtol
  6180  00124C  C062  F025         	movff	strtol@a+1,?_strtol+1
  6181  001250  C063  F026         	movff	strtol@a+2,?_strtol+2
  6182  001254  C064  F027         	movff	strtol@a+3,?_strtol+3
  6183                           
  6184                           ; BSR set to: 0
  6185  001258  0012               	return		;funcret
  6186  00125A                     __end_of_strtol:
  6187                           	opt stack 0
  6188                           tosu	equ	0xFFF
  6189                           tosh	equ	0xFFE
  6190                           tosl	equ	0xFFD
  6191                           pclath	equ	0xFFA
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           prodh	equ	0xFF4
  6197                           prodl	equ	0xFF3
  6198                           intcon	equ	0xFF2
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _toupper *****************
  6213 ;; Defined at:
  6214 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  c               1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  c               1   23[COMRAM] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      unsigned char 
  6221 ;; Registers used:
  6222 ;;		wreg, status,2, status,0
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6228 ;;      Params:         0       0       0       0       0       0       0
  6229 ;;      Locals:         1       0       0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0
  6231 ;;      Totals:         1       0       0       0       0       0       0
  6232 ;;Total ram usage:        1 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    3
  6235 ;; This function calls:
  6236 ;;		Nothing
  6237 ;; This function is called by:
  6238 ;;		_strtol
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text30
  6243  00369C                     __ptext30:
  6244                           	opt stack 0
  6245  00369C                     _toupper:
  6246                           	opt stack 22
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;incstack = 0
  6250                           ;toupper@c stored from wreg
  6251  00369C  6E18               	movwf	toupper@c,c
  6252  00369E  0E7B               	movlw	123
  6253  0036A0  6018               	cpfslt	toupper@c,c
  6254  0036A2  D004               	goto	l2032
  6255  0036A4  0E60               	movlw	96
  6256  0036A6  6418               	cpfsgt	toupper@c,c
  6257  0036A8  D001               	goto	l2032
  6258  0036AA  9A18               	bcf	toupper@c,5,c
  6259  0036AC                     l2032:
  6260  0036AC  5018               	movf	toupper@c,w,c
  6261  0036AE  0012               	return	
  6262  0036B0                     __end_of_toupper:
  6263                           	opt stack 0
  6264                           tosu	equ	0xFFF
  6265                           tosh	equ	0xFFE
  6266                           tosl	equ	0xFFD
  6267                           pclath	equ	0xFFA
  6268                           tblptru	equ	0xFF8
  6269                           tblptrh	equ	0xFF7
  6270                           tblptrl	equ	0xFF6
  6271                           tablat	equ	0xFF5
  6272                           prodh	equ	0xFF4
  6273                           prodl	equ	0xFF3
  6274                           intcon	equ	0xFF2
  6275                           postinc0	equ	0xFEE
  6276                           wreg	equ	0xFE8
  6277                           indf1	equ	0xFE7
  6278                           postdec1	equ	0xFE5
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           
  6288 ;; *************** function _isspace *****************
  6289 ;; Defined at:
  6290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  c               1    wreg     unsigned char 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  c               1   25[COMRAM] unsigned char 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, status,2, status,0
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6304 ;;      Params:         0       0       0       0       0       0       0
  6305 ;;      Locals:         2       0       0       0       0       0       0
  6306 ;;      Temps:          1       0       0       0       0       0       0
  6307 ;;      Totals:         3       0       0       0       0       0       0
  6308 ;;Total ram usage:        3 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    3
  6311 ;; This function calls:
  6312 ;;		Nothing
  6313 ;; This function is called by:
  6314 ;;		_strtol
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text31
  6319  0034D6                     __ptext31:
  6320                           	opt stack 0
  6321  0034D6                     _isspace:
  6322                           	opt stack 22
  6323                           
  6324                           ;incstack = 0
  6325                           ;isspace@c stored from wreg
  6326  0034D6  6E1A               	movwf	isspace@c,c
  6327  0034D8  0E01               	movlw	1
  6328  0034DA  6E19               	movwf	_isspace$2980,c
  6329  0034DC  0E20               	movlw	32
  6330  0034DE  181A               	xorwf	isspace@c,w,c
  6331  0034E0  B4D8               	btfsc	status,2,c
  6332  0034E2  D008               	goto	l2114
  6333  0034E4  0E0E               	movlw	14
  6334  0034E6  601A               	cpfslt	isspace@c,c
  6335  0034E8  D003               	goto	u5980
  6336  0034EA  0E09               	movlw	9
  6337  0034EC  601A               	cpfslt	isspace@c,c
  6338  0034EE  D002               	goto	l2114
  6339  0034F0                     u5980:
  6340  0034F0  0E00               	movlw	0
  6341  0034F2  6E19               	movwf	_isspace$2980,c
  6342  0034F4                     l2114:
  6343  0034F4  C019  F018         	movff	_isspace$2980,??_isspace
  6344  0034F8  3018               	rrcf	??_isspace,w,c
  6345  0034FA  0012               	return	
  6346  0034FC                     __end_of_isspace:
  6347                           	opt stack 0
  6348                           tosu	equ	0xFFF
  6349                           tosh	equ	0xFFE
  6350                           tosl	equ	0xFFD
  6351                           pclath	equ	0xFFA
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           indf1	equ	0xFE7
  6362                           postdec1	equ	0xFE5
  6363                           fsr1h	equ	0xFE2
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _isdigit *****************
  6373 ;; Defined at:
  6374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  c               1    wreg     unsigned char 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  c               1   25[COMRAM] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;		None               void
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6388 ;;      Params:         0       0       0       0       0       0       0
  6389 ;;      Locals:         2       0       0       0       0       0       0
  6390 ;;      Temps:          1       0       0       0       0       0       0
  6391 ;;      Totals:         3       0       0       0       0       0       0
  6392 ;;Total ram usage:        3 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    3
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_strtol
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text32
  6403  0035B0                     __ptext32:
  6404                           	opt stack 0
  6405  0035B0                     _isdigit:
  6406                           	opt stack 22
  6407                           
  6408                           ;incstack = 0
  6409                           ;isdigit@c stored from wreg
  6410  0035B0  6E1A               	movwf	isdigit@c,c
  6411  0035B2  0E00               	movlw	0
  6412  0035B4  6E19               	movwf	_isdigit$2977,c
  6413  0035B6  0E3A               	movlw	58
  6414  0035B8  601A               	cpfslt	isdigit@c,c
  6415  0035BA  D005               	goto	l2109
  6416  0035BC  0E2F               	movlw	47
  6417  0035BE  641A               	cpfsgt	isdigit@c,c
  6418  0035C0  D002               	goto	l2109
  6419  0035C2  0E01               	movlw	1
  6420  0035C4  6E19               	movwf	_isdigit$2977,c
  6421  0035C6                     l2109:
  6422  0035C6  C019  F018         	movff	_isdigit$2977,??_isdigit
  6423  0035CA  3018               	rrcf	??_isdigit,w,c
  6424  0035CC  0012               	return	
  6425  0035CE                     __end_of_isdigit:
  6426                           	opt stack 0
  6427                           tosu	equ	0xFFF
  6428                           tosh	equ	0xFFE
  6429                           tosl	equ	0xFFD
  6430                           pclath	equ	0xFFA
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           intcon	equ	0xFF2
  6438                           postinc0	equ	0xFEE
  6439                           wreg	equ	0xFE8
  6440                           indf1	equ	0xFE7
  6441                           postdec1	equ	0xFE5
  6442                           fsr1h	equ	0xFE2
  6443                           fsr1l	equ	0xFE1
  6444                           indf2	equ	0xFDF
  6445                           postinc2	equ	0xFDE
  6446                           postdec2	equ	0xFDD
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _isalpha *****************
  6452 ;; Defined at:
  6453 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  c               1    wreg     unsigned char 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  c               1   28[COMRAM] unsigned char 
  6458 ;; Return value:  Size  Location     Type
  6459 ;;		None               void
  6460 ;; Registers used:
  6461 ;;		wreg, status,2, status,0, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6467 ;;      Params:         0       0       0       0       0       0       0
  6468 ;;      Locals:         2       0       0       0       0       0       0
  6469 ;;      Temps:          1       0       0       0       0       0       0
  6470 ;;      Totals:         3       0       0       0       0       0       0
  6471 ;;Total ram usage:        3 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    4
  6474 ;; This function calls:
  6475 ;;		_isupper
  6476 ;; This function is called by:
  6477 ;;		_strtol
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text33
  6482  0034AE                     __ptext33:
  6483                           	opt stack 0
  6484  0034AE                     _isalpha:
  6485                           	opt stack 21
  6486                           
  6487                           ;incstack = 0
  6488                           ;isalpha@c stored from wreg
  6489  0034AE  6E1D               	movwf	isalpha@c,c
  6490  0034B0  0E01               	movlw	1
  6491  0034B2  6E1C               	movwf	_isalpha$2974,c
  6492  0034B4  0E7B               	movlw	123
  6493  0034B6  601D               	cpfslt	isalpha@c,c
  6494  0034B8  D003               	goto	u6000
  6495  0034BA  0E61               	movlw	97
  6496  0034BC  601D               	cpfslt	isalpha@c,c
  6497  0034BE  D007               	goto	l2104
  6498  0034C0                     u6000:
  6499  0034C0  501D               	movf	isalpha@c,w,c
  6500  0034C2  ECE7  F01A         	call	_isupper
  6501  0034C6  B0D8               	btfsc	status,0,c
  6502  0034C8  D002               	goto	l2104
  6503  0034CA  0E00               	movlw	0
  6504  0034CC  6E1C               	movwf	_isalpha$2974,c
  6505  0034CE                     l2104:
  6506  0034CE  C01C  F01B         	movff	_isalpha$2974,??_isalpha
  6507  0034D2  301B               	rrcf	??_isalpha,w,c
  6508  0034D4  0012               	return	
  6509  0034D6                     __end_of_isalpha:
  6510                           	opt stack 0
  6511                           tosu	equ	0xFFF
  6512                           tosh	equ	0xFFE
  6513                           tosl	equ	0xFFD
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           indf1	equ	0xFE7
  6525                           postdec1	equ	0xFE5
  6526                           fsr1h	equ	0xFE2
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _isupper *****************
  6536 ;; Defined at:
  6537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  c               1    wreg     unsigned char 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  c               1   25[COMRAM] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;		None               void
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6551 ;;      Params:         0       0       0       0       0       0       0
  6552 ;;      Locals:         2       0       0       0       0       0       0
  6553 ;;      Temps:          1       0       0       0       0       0       0
  6554 ;;      Totals:         3       0       0       0       0       0       0
  6555 ;;Total ram usage:        3 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    3
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_isalpha
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text34
  6566  0035CE                     __ptext34:
  6567                           	opt stack 0
  6568  0035CE                     _isupper:
  6569                           	opt stack 21
  6570                           
  6571                           ;incstack = 0
  6572                           ;isupper@c stored from wreg
  6573  0035CE  6E1A               	movwf	isupper@c,c
  6574  0035D0  0E00               	movlw	0
  6575  0035D2  6E19               	movwf	_isupper$2983,c
  6576  0035D4  0E5B               	movlw	91
  6577  0035D6  601A               	cpfslt	isupper@c,c
  6578  0035D8  D005               	goto	l2119
  6579  0035DA  0E40               	movlw	64
  6580  0035DC  641A               	cpfsgt	isupper@c,c
  6581  0035DE  D002               	goto	l2119
  6582  0035E0  0E01               	movlw	1
  6583  0035E2  6E19               	movwf	_isupper$2983,c
  6584  0035E4                     l2119:
  6585  0035E4  C019  F018         	movff	_isupper$2983,??_isupper
  6586  0035E8  3018               	rrcf	??_isupper,w,c
  6587  0035EA  0012               	return	
  6588  0035EC                     __end_of_isupper:
  6589                           	opt stack 0
  6590                           tosu	equ	0xFFF
  6591                           tosh	equ	0xFFE
  6592                           tosl	equ	0xFFD
  6593                           pclath	equ	0xFFA
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           indf1	equ	0xFE7
  6604                           postdec1	equ	0xFE5
  6605                           fsr1h	equ	0xFE2
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function ___lmul *****************
  6615 ;; Defined at:
  6616 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  multiplier      4   23[COMRAM] unsigned long 
  6619 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  product         4   31[COMRAM] unsigned long 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  4   23[COMRAM] unsigned long 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6631 ;;      Params:         8       0       0       0       0       0       0
  6632 ;;      Locals:         4       0       0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0       0       0
  6634 ;;      Totals:        12       0       0       0       0       0       0
  6635 ;;Total ram usage:       12 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    3
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_strtol
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text35
  6646  002C34                     __ptext35:
  6647                           	opt stack 0
  6648  002C34                     ___lmul:
  6649                           	opt stack 22
  6650                           
  6651                           ;incstack = 0
  6652  002C34  0E00               	movlw	0
  6653  002C36  6E20               	movwf	___lmul@product,c
  6654  002C38  0E00               	movlw	0
  6655  002C3A  6E21               	movwf	___lmul@product+1,c
  6656  002C3C  0E00               	movlw	0
  6657  002C3E  6E22               	movwf	___lmul@product+2,c
  6658  002C40  0E00               	movlw	0
  6659  002C42  6E23               	movwf	___lmul@product+3,c
  6660  002C44  A018               	btfss	___lmul@multiplier,0,c
  6661  002C46  D008               	goto	l1438
  6662  002C48  501C               	movf	___lmul@multiplicand,w,c
  6663  002C4A  2620               	addwf	___lmul@product,f,c
  6664  002C4C  501D               	movf	___lmul@multiplicand+1,w,c
  6665  002C4E  2221               	addwfc	___lmul@product+1,f,c
  6666  002C50  501E               	movf	___lmul@multiplicand+2,w,c
  6667  002C52  2222               	addwfc	___lmul@product+2,f,c
  6668  002C54  501F               	movf	___lmul@multiplicand+3,w,c
  6669  002C56  2223               	addwfc	___lmul@product+3,f,c
  6670  002C58                     l1438:
  6671  002C58  90D8               	bcf	status,0,c
  6672  002C5A  361C               	rlcf	___lmul@multiplicand,f,c
  6673  002C5C  361D               	rlcf	___lmul@multiplicand+1,f,c
  6674  002C5E  361E               	rlcf	___lmul@multiplicand+2,f,c
  6675  002C60  361F               	rlcf	___lmul@multiplicand+3,f,c
  6676  002C62  90D8               	bcf	status,0,c
  6677  002C64  321B               	rrcf	___lmul@multiplier+3,f,c
  6678  002C66  321A               	rrcf	___lmul@multiplier+2,f,c
  6679  002C68  3219               	rrcf	___lmul@multiplier+1,f,c
  6680  002C6A  3218               	rrcf	___lmul@multiplier,f,c
  6681  002C6C  5018               	movf	___lmul@multiplier,w,c
  6682  002C6E  1019               	iorwf	___lmul@multiplier+1,w,c
  6683  002C70  101A               	iorwf	___lmul@multiplier+2,w,c
  6684  002C72  101B               	iorwf	___lmul@multiplier+3,w,c
  6685  002C74  A4D8               	btfss	status,2,c
  6686  002C76  D7E6               	goto	l1437
  6687  002C78  C020  F018         	movff	___lmul@product,?___lmul
  6688  002C7C  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6689  002C80  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6690  002C84  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6691  002C88  0012               	return		;funcret
  6692  002C8A                     __end_of___lmul:
  6693                           	opt stack 0
  6694                           tosu	equ	0xFFF
  6695                           tosh	equ	0xFFE
  6696                           tosl	equ	0xFFD
  6697                           pclath	equ	0xFFA
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           postinc0	equ	0xFEE
  6706                           wreg	equ	0xFE8
  6707                           indf1	equ	0xFE7
  6708                           postdec1	equ	0xFE5
  6709                           fsr1h	equ	0xFE2
  6710                           fsr1l	equ	0xFE1
  6711                           indf2	equ	0xFDF
  6712                           postinc2	equ	0xFDE
  6713                           postdec2	equ	0xFDD
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function _testLeds *****************
  6719 ;; Defined at:
  6720 ;;		line 43 in file "LedsApp.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  idx             2   44[COMRAM] int 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  1    wreg      void 
  6727 ;; Registers used:
  6728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6734 ;;      Params:         0       0       0       0       0       0       0
  6735 ;;      Locals:         2       0       0       0       0       0       0
  6736 ;;      Temps:          1       0       0       0       0       0       0
  6737 ;;      Totals:         3       0       0       0       0       0       0
  6738 ;;Total ram usage:        3 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    6
  6741 ;; This function calls:
  6742 ;;		_SendAckMessage
  6743 ;; This function is called by:
  6744 ;;		_GroupControlMcu
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text36
  6749  002818                     __ptext36:
  6750                           	opt stack 0
  6751  002818                     _testLeds:
  6752                           	opt stack 22
  6753                           
  6754                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6755                           
  6756                           ;incstack = 0
  6757  002818  0E00               	movlw	0
  6758  00281A  6E2E               	movwf	testLeds@idx+1,c
  6759  00281C  0E00               	movlw	0
  6760  00281E  6E2D               	movwf	testLeds@idx,c
  6761  002820                     l7150:
  6762  002820  BE2E               	btfsc	testLeds@idx+1,7,c
  6763  002822  D006               	goto	l50
  6764  002824  502E               	movf	testLeds@idx+1,w,c
  6765  002826  E127               	bnz	l7164
  6766  002828  0E0A               	movlw	10
  6767  00282A  5C2D               	subwf	testLeds@idx,w,c
  6768  00282C  B0D8               	btfsc	status,0,c
  6769  00282E  D023               	goto	u6950
  6770  002830                     l50:
  6771                           
  6772                           ;LedsApp.c: 47: {
  6773                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6774  002830  808B               	bsf	3979,0,c	;volatile
  6775                           
  6776                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6777  002832  0E82               	movlw	130
  6778  002834  6E2C               	movwf	??_testLeds& (0+255),c
  6779  002836  0EDE               	movlw	222
  6780  002838                     u7957:
  6781  002838  2EE8               	decfsz	wreg,f,c
  6782  00283A  D7FE               	bra	u7957
  6783  00283C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6784  00283E  D7FC               	bra	u7957
  6785                           
  6786                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6787  002840  888A               	bsf	3978,4,c	;volatile
  6788                           
  6789                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6790  002842  0E82               	movlw	130
  6791  002844  6E2C               	movwf	??_testLeds& (0+255),c
  6792  002846  0EDE               	movlw	222
  6793  002848                     u7967:
  6794  002848  2EE8               	decfsz	wreg,f,c
  6795  00284A  D7FE               	bra	u7967
  6796  00284C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6797  00284E  D7FC               	bra	u7967
  6798                           
  6799                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6800  002850  908B               	bcf	3979,0,c	;volatile
  6801                           
  6802                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6803  002852  0E82               	movlw	130
  6804  002854  6E2C               	movwf	??_testLeds& (0+255),c
  6805  002856  0EDE               	movlw	222
  6806  002858                     u7977:
  6807  002858  2EE8               	decfsz	wreg,f,c
  6808  00285A  D7FE               	bra	u7977
  6809  00285C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6810  00285E  D7FC               	bra	u7977
  6811                           
  6812                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6813  002860  988A               	bcf	3978,4,c	;volatile
  6814                           
  6815                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6816  002862  0E82               	movlw	130
  6817  002864  6E2C               	movwf	??_testLeds& (0+255),c
  6818  002866  0EDE               	movlw	222
  6819  002868                     u7987:
  6820  002868  2EE8               	decfsz	wreg,f,c
  6821  00286A  D7FE               	bra	u7987
  6822  00286C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6823  00286E  D7FC               	bra	u7987
  6824  002870  4A2D               	infsnz	testLeds@idx,f,c
  6825  002872  2A2E               	incf	testLeds@idx+1,f,c
  6826  002874  D7D5               	goto	l7150
  6827  002876                     u6950:
  6828  002876                     l7164:
  6829                           
  6830                           ;LedsApp.c: 57: }
  6831                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6832  002876  0E15               	movlw	21
  6833  002878  6E24               	movwf	SendAckMessage@inRequest,c
  6834  00287A  0E01               	movlw	1
  6835  00287C  ECC4  F016         	call	_SendAckMessage
  6836  002880  0012               	return	
  6837  002882                     __end_of_testLeds:
  6838                           	opt stack 0
  6839                           tosu	equ	0xFFF
  6840                           tosh	equ	0xFFE
  6841                           tosl	equ	0xFFD
  6842                           pclath	equ	0xFFA
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodh	equ	0xFF4
  6848                           prodl	equ	0xFF3
  6849                           intcon	equ	0xFF2
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf1	equ	0xFE7
  6853                           postdec1	equ	0xFE5
  6854                           fsr1h	equ	0xFE2
  6855                           fsr1l	equ	0xFE1
  6856                           indf2	equ	0xFDF
  6857                           postinc2	equ	0xFDE
  6858                           postdec2	equ	0xFDD
  6859                           fsr2h	equ	0xFDA
  6860                           fsr2l	equ	0xFD9
  6861                           status	equ	0xFD8
  6862                           
  6863 ;; *************** function _ResetMcu *****************
  6864 ;; Defined at:
  6865 ;;		line 85 in file "SystemCommon.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;		None
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;		None
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      void 
  6872 ;; Registers used:
  6873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6879 ;;      Params:         0       0       0       0       0       0       0
  6880 ;;      Locals:         0       0       0       0       0       0       0
  6881 ;;      Temps:          0       0       0       0       0       0       0
  6882 ;;      Totals:         0       0       0       0       0       0       0
  6883 ;;Total ram usage:        0 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    6
  6886 ;; This function calls:
  6887 ;;		_SendAckMessage
  6888 ;; This function is called by:
  6889 ;;		_GroupControlMcu
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text37
  6894  0036F4                     __ptext37:
  6895                           	opt stack 0
  6896  0036F4                     _ResetMcu:
  6897                           	opt stack 22
  6898                           
  6899                           ;SystemCommon.c: 88: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          MCU);
  6900                           
  6901                           ;incstack = 0
  6902  0036F4  0E11               	movlw	17
  6903  0036F6  6E24               	movwf	SendAckMessage@inRequest,c
  6904  0036F8  0E01               	movlw	1
  6905  0036FA  ECC4  F016         	call	_SendAckMessage
  6906  0036FE  00FF               	reset		;# 
  6907  003700  0012               	return		;funcret
  6908  003702                     __end_of_ResetMcu:
  6909                           	opt stack 0
  6910                           tosu	equ	0xFFF
  6911                           tosh	equ	0xFFE
  6912                           tosl	equ	0xFFD
  6913                           pclath	equ	0xFFA
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           postinc0	equ	0xFEE
  6922                           wreg	equ	0xFE8
  6923                           indf1	equ	0xFE7
  6924                           postdec1	equ	0xFE5
  6925                           fsr1h	equ	0xFE2
  6926                           fsr1l	equ	0xFE1
  6927                           indf2	equ	0xFDF
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function _ResetCpld *****************
  6935 ;; Defined at:
  6936 ;;		line 94 in file "SystemCommon.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;		None
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      void 
  6943 ;; Registers used:
  6944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6950 ;;      Params:         0       0       0       0       0       0       0
  6951 ;;      Locals:         0       0       0       0       0       0       0
  6952 ;;      Temps:          0       0       0       0       0       0       0
  6953 ;;      Totals:         0       0       0       0       0       0       0
  6954 ;;Total ram usage:        0 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    6
  6957 ;; This function calls:
  6958 ;;		_SendAckMessage
  6959 ;; This function is called by:
  6960 ;;		_GroupControlMcu
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text38
  6965  00372C                     __ptext38:
  6966                           	opt stack 0
  6967  00372C                     _ResetCpld:
  6968                           	opt stack 22
  6969                           
  6970                           ;SystemCommon.c: 97: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          CPLD);
  6971                           
  6972                           ;incstack = 0
  6973  00372C  0E12               	movlw	18
  6974  00372E  6E24               	movwf	SendAckMessage@inRequest,c
  6975  003730  0E01               	movlw	1
  6976  003732  ECC4  F016         	call	_SendAckMessage
  6977  003736  0012               	return		;funcret
  6978  003738                     __end_of_ResetCpld:
  6979                           	opt stack 0
  6980                           tosu	equ	0xFFF
  6981                           tosh	equ	0xFFE
  6982                           tosl	equ	0xFFD
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           indf1	equ	0xFE7
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _SetConversionResultFormat *****************
  7005 ;; Defined at:
  7006 ;;		line 38 in file "AdcApp.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  data            2   43[COMRAM] PTR unsigned char 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         2       0       0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0
  7023 ;;      Totals:         2       0       0       0       0       0       0
  7024 ;;Total ram usage:        2 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    6
  7027 ;; This function calls:
  7028 ;;		_SendAckMessage
  7029 ;; This function is called by:
  7030 ;;		_GroupAdc
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text39
  7035  003738                     __ptext39:
  7036                           	opt stack 0
  7037  003738                     _SetConversionResultFormat:
  7038                           	opt stack 22
  7039                           
  7040                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7041                           
  7042                           ;incstack = 0
  7043  003738  0E33               	movlw	51
  7044  00373A  6E24               	movwf	SendAckMessage@inRequest,c
  7045  00373C  0E03               	movlw	3
  7046  00373E  ECC4  F016         	call	_SendAckMessage
  7047  003742  0012               	return		;funcret
  7048  003744                     __end_of_SetConversionResultFormat:
  7049                           	opt stack 0
  7050                           tosu	equ	0xFFF
  7051                           tosh	equ	0xFFE
  7052                           tosl	equ	0xFFD
  7053                           pclath	equ	0xFFA
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           postinc0	equ	0xFEE
  7062                           wreg	equ	0xFE8
  7063                           indf1	equ	0xFE7
  7064                           postdec1	equ	0xFE5
  7065                           fsr1h	equ	0xFE2
  7066                           fsr1l	equ	0xFE1
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function _SetChannelMode *****************
  7075 ;; Defined at:
  7076 ;;		line 43 in file "AdcApp.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  data            2   43[COMRAM] PTR unsigned char 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7090 ;;      Params:         2       0       0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0
  7093 ;;      Totals:         2       0       0       0       0       0       0
  7094 ;;Total ram usage:        2 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    6
  7097 ;; This function calls:
  7098 ;;		_SendAckMessage
  7099 ;; This function is called by:
  7100 ;;		_GroupAdc
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           	psect	text40
  7105  0033A4                     __ptext40:
  7106                           	opt stack 0
  7107  0033A4                     _SetChannelMode:
  7108                           	opt stack 22
  7109                           
  7110                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7111                           
  7112                           ;incstack = 0
  7113  0033A4  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7114  0033A8  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7115  0033AC  50DF               	movf	indf2,w,c
  7116  0033AE  6E3C               	movwf	_adcSampleMode,c
  7117                           
  7118                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7119  0033B0  043C               	decf	_adcSampleMode,w,c
  7120  0033B2  A4D8               	btfss	status,2,c
  7121  0033B4  D009               	goto	l108
  7122                           
  7123                           ;AdcApp.c: 47: {
  7124                           ;AdcApp.c: 48: channel = data[1];
  7125  0033B6  EE20 F001          	lfsr	2,1
  7126  0033BA  502C               	movf	SetChannelMode@data,w,c
  7127  0033BC  26D9               	addwf	fsr2l,f,c
  7128  0033BE  502D               	movf	SetChannelMode@data+1,w,c
  7129  0033C0  22DA               	addwfc	fsr2h,f,c
  7130  0033C2  50DF               	movf	indf2,w,c
  7131  0033C4  0100               	movlb	0	; () banked
  7132  0033C6  6FD3               	movwf	_channel& (0+255),b
  7133  0033C8                     l108:
  7134                           
  7135                           ;AdcApp.c: 49: }
  7136                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7137                           
  7138                           ; BSR set to: 0
  7139  0033C8  0E32               	movlw	50
  7140  0033CA  6E24               	movwf	SendAckMessage@inRequest,c
  7141  0033CC  0E03               	movlw	3
  7142  0033CE  ECC4  F016         	call	_SendAckMessage
  7143  0033D2  0012               	return		;funcret
  7144  0033D4                     __end_of_SetChannelMode:
  7145                           	opt stack 0
  7146                           tosu	equ	0xFFF
  7147                           tosh	equ	0xFFE
  7148                           tosl	equ	0xFFD
  7149                           pclath	equ	0xFFA
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           intcon	equ	0xFF2
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           indf1	equ	0xFE7
  7160                           postdec1	equ	0xFE5
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           postinc2	equ	0xFDE
  7165                           postdec2	equ	0xFDD
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _SetAdcOperationMode *****************
  7171 ;; Defined at:
  7172 ;;		line 33 in file "AdcApp.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  data            2   43[COMRAM] PTR unsigned char 
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7186 ;;      Params:         2       0       0       0       0       0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0
  7189 ;;      Totals:         2       0       0       0       0       0       0
  7190 ;;Total ram usage:        2 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    6
  7193 ;; This function calls:
  7194 ;;		_SendAckMessage
  7195 ;; This function is called by:
  7196 ;;		_GroupAdc
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text41
  7201  003744                     __ptext41:
  7202                           	opt stack 0
  7203  003744                     _SetAdcOperationMode:
  7204                           	opt stack 22
  7205                           
  7206                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7207                           
  7208                           ;incstack = 0
  7209  003744  0E31               	movlw	49
  7210  003746  6E24               	movwf	SendAckMessage@inRequest,c
  7211  003748  0E03               	movlw	3
  7212  00374A  ECC4  F016         	call	_SendAckMessage
  7213  00374E  0012               	return		;funcret
  7214  003750                     __end_of_SetAdcOperationMode:
  7215                           	opt stack 0
  7216                           tosu	equ	0xFFF
  7217                           tosh	equ	0xFFE
  7218                           tosl	equ	0xFFD
  7219                           pclath	equ	0xFFA
  7220                           tblptru	equ	0xFF8
  7221                           tblptrh	equ	0xFF7
  7222                           tblptrl	equ	0xFF6
  7223                           tablat	equ	0xFF5
  7224                           prodh	equ	0xFF4
  7225                           prodl	equ	0xFF3
  7226                           intcon	equ	0xFF2
  7227                           postinc0	equ	0xFEE
  7228                           wreg	equ	0xFE8
  7229                           indf1	equ	0xFE7
  7230                           postdec1	equ	0xFE5
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _EUSART1_Read *****************
  7241 ;; Defined at:
  7242 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  readValue       2   24[COMRAM] unsigned int 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      unsigned char 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7256 ;;      Params:         0       0       0       0       0       0       0
  7257 ;;      Locals:         2       0       0       0       0       0       0
  7258 ;;      Temps:          1       0       0       0       0       0       0
  7259 ;;      Totals:         3       0       0       0       0       0       0
  7260 ;;Total ram usage:        3 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    3
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_readUartMessage
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text42
  7271  002EFC                     __ptext42:
  7272                           	opt stack 0
  7273  002EFC                     _EUSART1_Read:
  7274                           	opt stack 26
  7275                           
  7276                           ;eusart1.c: 112: uint16_t readValue = 0;
  7277                           
  7278                           ;incstack = 0
  7279  002EFC  0E00               	movlw	0
  7280  002EFE  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7281  002F00  0E00               	movlw	0
  7282  002F02  6E19               	movwf	EUSART1_Read@readValue,c
  7283                           
  7284                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7285  002F04  0100               	movlb	0	; () banked
  7286  002F06  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7287  002F08  A4D8               	btfss	status,2,c
  7288  002F0A  D002               	goto	l824
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;eusart1.c: 120: {
  7292                           ;eusart1.c: 121: return readValue;
  7293  002F0C  5019               	movf	EUSART1_Read@readValue,w,c
  7294                           
  7295                           ; BSR set to: 0
  7296  002F0E  0012               	return	
  7297  002F10                     l824:
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;eusart1.c: 122: }
  7301                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7302                           
  7303                           ; BSR set to: 0
  7304  002F10  5037               	movf	_eusart1RxTail,w,c	;volatile
  7305  002F12  0D01               	mullw	1
  7306  002F14  0E46               	movlw	low _eusart1RxBuffer
  7307  002F16  24F3               	addwf	prodl,w,c
  7308  002F18  6ED9               	movwf	fsr2l,c
  7309  002F1A  0E01               	movlw	high _eusart1RxBuffer
  7310  002F1C  20F4               	addwfc	prodh,w,c
  7311  002F1E  6EDA               	movwf	fsr2h,c
  7312  002F20  50DF               	movf	indf2,w,c
  7313  002F22  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7314  002F24  5018               	movf	??_EUSART1_Read,w,c
  7315  002F26  6E19               	movwf	EUSART1_Read@readValue,c
  7316  002F28  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7317                           
  7318                           ; BSR set to: 0
  7319  002F2A  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7323  002F2C  0E27               	movlw	39
  7324  002F2E  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7325  002F30  D002               	goto	l826
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;eusart1.c: 126: {
  7329                           ;eusart1.c: 127: eusart1RxTail = 0;
  7330  002F32  0E00               	movlw	0
  7331  002F34  6E37               	movwf	_eusart1RxTail,c	;volatile
  7332  002F36                     l826:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;eusart1.c: 128: }
  7336                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7337                           
  7338                           ; BSR set to: 0
  7339  002F36  9A9D               	bcf	3997,5,c	;volatile
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;eusart1.c: 130: eusart1RxCount--;
  7343  002F38  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7347  002F3A  8A9D               	bsf	3997,5,c	;volatile
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;eusart1.c: 133: return readValue;
  7351  002F3C  5019               	movf	EUSART1_Read@readValue,w,c
  7352  002F3E  0012               	return	
  7353  002F40                     __end_of_EUSART1_Read:
  7354                           	opt stack 0
  7355                           tosu	equ	0xFFF
  7356                           tosh	equ	0xFFE
  7357                           tosl	equ	0xFFD
  7358                           pclath	equ	0xFFA
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           intcon	equ	0xFF2
  7366                           postinc0	equ	0xFEE
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           postdec1	equ	0xFE5
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function _keepAliveSignalUart *****************
  7380 ;; Defined at:
  7381 ;;		line 117 in file "SystemStatus.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;		None
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7395 ;;      Params:         0       0       0       0       0       0       0
  7396 ;;      Locals:         0       0       0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0
  7398 ;;      Totals:         0       0       0       0       0       0       0
  7399 ;;Total ram usage:        0 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    6
  7402 ;; This function calls:
  7403 ;;		_SendAckMessage
  7404 ;; This function is called by:
  7405 ;;		_main
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text43
  7410  003750                     __ptext43:
  7411                           	opt stack 0
  7412  003750                     _keepAliveSignalUart:
  7413                           	opt stack 24
  7414                           
  7415                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;incstack = 0
  7419  003750  0E16               	movlw	22
  7420  003752  6E24               	movwf	SendAckMessage@inRequest,c
  7421  003754  0E01               	movlw	1
  7422  003756  ECC4  F016         	call	_SendAckMessage
  7423  00375A  0012               	return		;funcret
  7424  00375C                     __end_of_keepAliveSignalUart:
  7425                           	opt stack 0
  7426                           tosu	equ	0xFFF
  7427                           tosh	equ	0xFFE
  7428                           tosl	equ	0xFFD
  7429                           pclath	equ	0xFFA
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           intcon	equ	0xFF2
  7437                           postinc0	equ	0xFEE
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           postdec1	equ	0xFE5
  7441                           fsr1h	equ	0xFE2
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function _keepAliveSignalLed *****************
  7451 ;; Defined at:
  7452 ;;		line 35 in file "LedsApp.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7466 ;;      Params:         0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0       0       0
  7468 ;;      Temps:          1       0       0       0       0       0       0
  7469 ;;      Totals:         1       0       0       0       0       0       0
  7470 ;;Total ram usage:        1 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_main
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text44
  7481  00365A                     __ptext44:
  7482                           	opt stack 0
  7483  00365A                     _keepAliveSignalLed:
  7484                           	opt stack 27
  7485                           
  7486                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7487                           
  7488                           ;incstack = 0
  7489  00365A  B08B               	btfsc	3979,0,c	;volatile
  7490  00365C  D003               	goto	u5130
  7491  00365E  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7492  003660  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7493  003662  D001               	goto	u5148
  7494  003664                     u5130:
  7495  003664  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7496  003666                     u5148:
  7497  003666  508B               	movf	3979,w,c	;volatile
  7498  003668  1818               	xorwf	??_keepAliveSignalLed,w,c
  7499  00366A  0BFE               	andlw	-2
  7500  00366C  1818               	xorwf	??_keepAliveSignalLed,w,c
  7501  00366E  6E8B               	movwf	3979,c	;volatile
  7502  003670  0012               	return		;funcret
  7503  003672                     __end_of_keepAliveSignalLed:
  7504                           	opt stack 0
  7505                           tosu	equ	0xFFF
  7506                           tosh	equ	0xFFE
  7507                           tosl	equ	0xFFD
  7508                           pclath	equ	0xFFA
  7509                           tblptru	equ	0xFF8
  7510                           tblptrh	equ	0xFF7
  7511                           tblptrl	equ	0xFF6
  7512                           tablat	equ	0xFF5
  7513                           prodh	equ	0xFF4
  7514                           prodl	equ	0xFF3
  7515                           intcon	equ	0xFF2
  7516                           postinc0	equ	0xFEE
  7517                           wreg	equ	0xFE8
  7518                           indf1	equ	0xFE7
  7519                           postdec1	equ	0xFE5
  7520                           fsr1h	equ	0xFE2
  7521                           fsr1l	equ	0xFE1
  7522                           indf2	equ	0xFDF
  7523                           postinc2	equ	0xFDE
  7524                           postdec2	equ	0xFDD
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _SetMcuSystem *****************
  7530 ;; Defined at:
  7531 ;;		line 11 in file "SystemSettings.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      void 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7545 ;;      Params:         0       0       0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    6
  7552 ;; This function calls:
  7553 ;;		_SYSTEM_Initialize
  7554 ;; This function is called by:
  7555 ;;		_main
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text45
  7560  003772                     __ptext45:
  7561                           	opt stack 0
  7562  003772                     _SetMcuSystem:
  7563                           	opt stack 24
  7564                           
  7565                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7566                           
  7567                           ;incstack = 0
  7568  003772  EC13  F01B         	call	_SYSTEM_Initialize	;wreg free
  7569                           
  7570                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7571  003776  8EF2               	bsf	intcon,7,c	;volatile
  7572                           
  7573                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7574  003778  8CF2               	bsf	intcon,6,c	;volatile
  7575  00377A  0012               	return		;funcret
  7576  00377C                     __end_of_SetMcuSystem:
  7577                           	opt stack 0
  7578                           tosu	equ	0xFFF
  7579                           tosh	equ	0xFFE
  7580                           tosl	equ	0xFFD
  7581                           pclath	equ	0xFFA
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           indf1	equ	0xFE7
  7592                           postdec1	equ	0xFE5
  7593                           fsr1h	equ	0xFE2
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           fsr2h	equ	0xFDA
  7599                           fsr2l	equ	0xFD9
  7600                           status	equ	0xFD8
  7601                           
  7602 ;; *************** function _SYSTEM_Initialize *****************
  7603 ;; Defined at:
  7604 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7618 ;;      Params:         0       0       0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0
  7621 ;;      Totals:         0       0       0       0       0       0       0
  7622 ;;Total ram usage:        0 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    5
  7625 ;; This function calls:
  7626 ;;		_ADC_Initialize
  7627 ;;		_EUSART1_Initialize
  7628 ;;		_INTERRUPT_Initialize
  7629 ;;		_OSCILLATOR_Initialize
  7630 ;;		_PIN_MANAGER_Initialize
  7631 ;;		_TMR0_Initialize
  7632 ;; This function is called by:
  7633 ;;		_SetMcuSystem
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           	psect	text46
  7638  003626                     __ptext46:
  7639                           	opt stack 0
  7640  003626                     _SYSTEM_Initialize:
  7641                           	opt stack 24
  7642                           
  7643                           ;mcc.c: 114: INTERRUPT_Initialize();
  7644                           
  7645                           ;incstack = 0
  7646  003626  ECC5  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7647                           
  7648                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7649  00362A  EC38  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7650                           
  7651                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7652  00362E  EC81  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7653                           
  7654                           ;mcc.c: 117: ADC_Initialize();
  7655  003632  EC39  F01B         	call	_ADC_Initialize	;wreg free
  7656                           
  7657                           ;mcc.c: 118: TMR0_Initialize();
  7658  003636  EC9E  F019         	call	_TMR0_Initialize	;wreg free
  7659                           
  7660                           ;mcc.c: 119: EUSART1_Initialize();
  7661  00363A  EC68  F019         	call	_EUSART1_Initialize	;wreg free
  7662  00363E  0012               	return		;funcret
  7663  003640                     __end_of_SYSTEM_Initialize:
  7664                           	opt stack 0
  7665                           tosu	equ	0xFFF
  7666                           tosh	equ	0xFFE
  7667                           tosl	equ	0xFFD
  7668                           pclath	equ	0xFFA
  7669                           tblptru	equ	0xFF8
  7670                           tblptrh	equ	0xFF7
  7671                           tblptrl	equ	0xFF6
  7672                           tablat	equ	0xFF5
  7673                           prodh	equ	0xFF4
  7674                           prodl	equ	0xFF3
  7675                           intcon	equ	0xFF2
  7676                           postinc0	equ	0xFEE
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postdec1	equ	0xFE5
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _TMR0_Initialize *****************
  7690 ;; Defined at:
  7691 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;		None
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7705 ;;      Params:         0       0       0       0       0       0       0
  7706 ;;      Locals:         0       0       0       0       0       0       0
  7707 ;;      Temps:          2       0       0       0       0       0       0
  7708 ;;      Totals:         2       0       0       0       0       0       0
  7709 ;;Total ram usage:        2 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    4
  7712 ;; This function calls:
  7713 ;;		_TMR0_SetInterruptHandler
  7714 ;; This function is called by:
  7715 ;;		_SYSTEM_Initialize
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           	psect	text47
  7720  00333C                     __ptext47:
  7721                           	opt stack 0
  7722  00333C                     _TMR0_Initialize:
  7723                           	opt stack 24
  7724                           
  7725                           ;tmr0.c: 71: TMR0H = 0x3C;
  7726                           
  7727                           ;incstack = 0
  7728  00333C  0E3C               	movlw	60
  7729  00333E  6ED7               	movwf	4055,c	;volatile
  7730                           
  7731                           ;tmr0.c: 74: TMR0L = 0xAF;
  7732  003340  0EAF               	movlw	175
  7733  003342  6ED6               	movwf	4054,c	;volatile
  7734                           
  7735                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7736  003344  50D6               	movf	4054,w,c	;volatile
  7737  003346  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7738  00334A  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7739  00334C  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7740  003350  6A1A               	clrf	??_TMR0_Initialize,c
  7741  003352  101A               	iorwf	??_TMR0_Initialize,w,c
  7742  003354  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7743  003356  501B               	movf	??_TMR0_Initialize+1,w,c
  7744  003358  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7745                           
  7746                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7747  00335A  94F2               	bcf	intcon,2,c	;volatile
  7748                           
  7749                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7750  00335C  8AF2               	bsf	intcon,5,c	;volatile
  7751                           
  7752                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7753  00335E  0E00               	movlw	0
  7754  003360  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7755  003362  0E00               	movlw	0
  7756  003364  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7757  003366  ECBE  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7758                           
  7759                           ;tmr0.c: 90: T0CON = 0x90;
  7760  00336A  0E90               	movlw	144
  7761  00336C  6ED5               	movwf	4053,c	;volatile
  7762  00336E  0012               	return		;funcret
  7763  003370                     __end_of_TMR0_Initialize:
  7764                           	opt stack 0
  7765                           tosu	equ	0xFFF
  7766                           tosh	equ	0xFFE
  7767                           tosl	equ	0xFFD
  7768                           pclath	equ	0xFFA
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           prodh	equ	0xFF4
  7774                           prodl	equ	0xFF3
  7775                           intcon	equ	0xFF2
  7776                           postinc0	equ	0xFEE
  7777                           wreg	equ	0xFE8
  7778                           indf1	equ	0xFE7
  7779                           postdec1	equ	0xFE5
  7780                           fsr1h	equ	0xFE2
  7781                           fsr1l	equ	0xFE1
  7782                           indf2	equ	0xFDF
  7783                           postinc2	equ	0xFDE
  7784                           postdec2	equ	0xFDD
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789 ;; *************** function _TMR0_SetInterruptHandler *****************
  7790 ;; Defined at:
  7791 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7794 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;		None
  7797 ;; Return value:  Size  Location     Type
  7798 ;;                  1    wreg      void 
  7799 ;; Registers used:
  7800 ;;		wreg, status,2, status,0
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7806 ;;      Params:         2       0       0       0       0       0       0
  7807 ;;      Locals:         0       0       0       0       0       0       0
  7808 ;;      Temps:          0       0       0       0       0       0       0
  7809 ;;      Totals:         2       0       0       0       0       0       0
  7810 ;;Total ram usage:        2 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; Hardware stack levels required when called:    3
  7813 ;; This function calls:
  7814 ;;		Nothing
  7815 ;; This function is called by:
  7816 ;;		_TMR0_Initialize
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text48
  7821  00377C                     __ptext48:
  7822                           	opt stack 0
  7823  00377C                     _TMR0_SetInterruptHandler:
  7824                           	opt stack 24
  7825                           
  7826                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7827                           
  7828                           ;incstack = 0
  7829  00377C  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7830  003780  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7831  003784  0012               	return		;funcret
  7832  003786                     __end_of_TMR0_SetInterruptHandler:
  7833                           	opt stack 0
  7834                           tosu	equ	0xFFF
  7835                           tosh	equ	0xFFE
  7836                           tosl	equ	0xFFD
  7837                           pclath	equ	0xFFA
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           postinc0	equ	0xFEE
  7846                           wreg	equ	0xFE8
  7847                           indf1	equ	0xFE7
  7848                           postdec1	equ	0xFE5
  7849                           fsr1h	equ	0xFE2
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _PIN_MANAGER_Initialize *****************
  7859 ;; Defined at:
  7860 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7874 ;;      Params:         0       0       0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0
  7877 ;;      Totals:         0       0       0       0       0       0       0
  7878 ;;Total ram usage:        0 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    3
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_SYSTEM_Initialize
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text49
  7889  002E70                     __ptext49:
  7890                           	opt stack 0
  7891  002E70                     _PIN_MANAGER_Initialize:
  7892                           	opt stack 25
  7893                           
  7894                           ;pin_manager.c: 57: LATE = 0x00;
  7895                           
  7896                           ;incstack = 0
  7897  002E70  0E00               	movlw	0
  7898  002E72  6E8D               	movwf	3981,c	;volatile
  7899                           
  7900                           ;pin_manager.c: 58: LATD = 0x00;
  7901  002E74  0E00               	movlw	0
  7902  002E76  6E8C               	movwf	3980,c	;volatile
  7903                           
  7904                           ;pin_manager.c: 59: LATA = 0x06;
  7905  002E78  0E06               	movlw	6
  7906  002E7A  6E89               	movwf	3977,c	;volatile
  7907                           
  7908                           ;pin_manager.c: 60: LATB = 0x00;
  7909  002E7C  0E00               	movlw	0
  7910  002E7E  6E8A               	movwf	3978,c	;volatile
  7911                           
  7912                           ;pin_manager.c: 61: LATC = 0x00;
  7913  002E80  0E00               	movlw	0
  7914  002E82  6E8B               	movwf	3979,c	;volatile
  7915                           
  7916                           ;pin_manager.c: 66: TRISE = 0x07;
  7917  002E84  0E07               	movlw	7
  7918  002E86  6E96               	movwf	3990,c	;volatile
  7919                           
  7920                           ;pin_manager.c: 67: TRISA = 0xE1;
  7921  002E88  0EE1               	movlw	225
  7922  002E8A  6E92               	movwf	3986,c	;volatile
  7923                           
  7924                           ;pin_manager.c: 68: TRISB = 0xEF;
  7925  002E8C  0EEF               	movlw	239
  7926  002E8E  6E93               	movwf	3987,c	;volatile
  7927                           
  7928                           ;pin_manager.c: 69: TRISC = 0x80;
  7929  002E90  0E80               	movlw	128
  7930  002E92  6E94               	movwf	3988,c	;volatile
  7931                           
  7932                           ;pin_manager.c: 70: TRISD = 0xF2;
  7933  002E94  0EF2               	movlw	242
  7934  002E96  6E95               	movwf	3989,c	;volatile
  7935                           
  7936                           ;pin_manager.c: 75: ANSELC = 0x30;
  7937  002E98  0E30               	movlw	48
  7938  002E9A  010F               	movlb	15	; () banked
  7939  002E9C  6F3A               	movwf	58,b	;volatile
  7940                           
  7941                           ;pin_manager.c: 76: ANSELB = 0x33;
  7942  002E9E  0E33               	movlw	51
  7943  002EA0  6F39               	movwf	57,b	;volatile
  7944                           
  7945                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7946  002EA2  0EE4               	movlw	228
  7947  002EA4  6F3B               	movwf	59,b	;volatile
  7948                           
  7949                           ;pin_manager.c: 78: ANSELE = 0x07;
  7950  002EA6  0E07               	movlw	7
  7951  002EA8  6F3C               	movwf	60,b	;volatile
  7952                           
  7953                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7954  002EAA  0E2F               	movlw	47
  7955  002EAC  6F38               	movwf	56,b	;volatile
  7956                           
  7957                           ;pin_manager.c: 84: WPUB = 0xC2;
  7958  002EAE  0EC2               	movlw	194
  7959  002EB0  6E61               	movwf	3937,c	;volatile
  7960                           
  7961                           ; BSR set to: 15
  7962                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7963  002EB2  9EF1               	bcf	intcon2,7,c	;volatile
  7964                           
  7965                           ; BSR set to: 15
  7966                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7967  002EB4  86F2               	bsf	intcon,3,c	;volatile
  7968                           
  7969                           ; BSR set to: 15
  7970  002EB6  0012               	return		;funcret
  7971  002EB8                     __end_of_PIN_MANAGER_Initialize:
  7972                           	opt stack 0
  7973                           tosu	equ	0xFFF
  7974                           tosh	equ	0xFFE
  7975                           tosl	equ	0xFFD
  7976                           pclath	equ	0xFFA
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           intcon	equ	0xFF2
  7984                           intcon2	equ	0xFF1
  7985                           postinc0	equ	0xFEE
  7986                           wreg	equ	0xFE8
  7987                           indf1	equ	0xFE7
  7988                           postdec1	equ	0xFE5
  7989                           fsr1h	equ	0xFE2
  7990                           fsr1l	equ	0xFE1
  7991                           indf2	equ	0xFDF
  7992                           postinc2	equ	0xFDE
  7993                           postdec2	equ	0xFDD
  7994                           fsr2h	equ	0xFDA
  7995                           fsr2l	equ	0xFD9
  7996                           status	equ	0xFD8
  7997                           
  7998 ;; *************** function _OSCILLATOR_Initialize *****************
  7999 ;; Defined at:
  8000 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      void 
  8007 ;; Registers used:
  8008 ;;		wreg, status,2
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8014 ;;      Params:         0       0       0       0       0       0       0
  8015 ;;      Locals:         0       0       0       0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0
  8017 ;;      Totals:         0       0       0       0       0       0       0
  8018 ;;Total ram usage:        0 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    3
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		_SYSTEM_Initialize
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text50
  8029  003702                     __ptext50:
  8030                           	opt stack 0
  8031  003702                     _OSCILLATOR_Initialize:
  8032                           	opt stack 25
  8033                           
  8034                           ;mcc.c: 125: OSCCON = 0x60;
  8035                           
  8036                           ; BSR set to: 15
  8037                           ;incstack = 0
  8038  003702  0E60               	movlw	96
  8039  003704  6ED3               	movwf	4051,c	;volatile
  8040                           
  8041                           ;mcc.c: 127: OSCCON2 = 0x04;
  8042  003706  0E04               	movlw	4
  8043  003708  6ED2               	movwf	4050,c	;volatile
  8044                           
  8045                           ;mcc.c: 129: OSCTUNE = 0x00;
  8046  00370A  0E00               	movlw	0
  8047  00370C  6E9B               	movwf	3995,c	;volatile
  8048  00370E  0012               	return		;funcret
  8049  003710                     __end_of_OSCILLATOR_Initialize:
  8050                           	opt stack 0
  8051                           tosu	equ	0xFFF
  8052                           tosh	equ	0xFFE
  8053                           tosl	equ	0xFFD
  8054                           pclath	equ	0xFFA
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodh	equ	0xFF4
  8060                           prodl	equ	0xFF3
  8061                           intcon	equ	0xFF2
  8062                           intcon2	equ	0xFF1
  8063                           postinc0	equ	0xFEE
  8064                           wreg	equ	0xFE8
  8065                           indf1	equ	0xFE7
  8066                           postdec1	equ	0xFE5
  8067                           fsr1h	equ	0xFE2
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           fsr2h	equ	0xFDA
  8073                           fsr2l	equ	0xFD9
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function _INTERRUPT_Initialize *****************
  8077 ;; Defined at:
  8078 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		None
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8092 ;;      Params:         0       0       0       0       0       0       0
  8093 ;;      Locals:         0       0       0       0       0       0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0
  8095 ;;      Totals:         0       0       0       0       0       0       0
  8096 ;;Total ram usage:        0 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    3
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_SYSTEM_Initialize
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text51
  8107  00378A                     __ptext51:
  8108                           	opt stack 0
  8109  00378A                     _INTERRUPT_Initialize:
  8110                           	opt stack 25
  8111                           
  8112                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8113                           
  8114                           ;incstack = 0
  8115  00378A  9ED0               	bcf	4048,7,c	;volatile
  8116  00378C  0012               	return		;funcret
  8117  00378E                     __end_of_INTERRUPT_Initialize:
  8118                           	opt stack 0
  8119                           tosu	equ	0xFFF
  8120                           tosh	equ	0xFFE
  8121                           tosl	equ	0xFFD
  8122                           pclath	equ	0xFFA
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon2	equ	0xFF1
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           indf1	equ	0xFE7
  8134                           postdec1	equ	0xFE5
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           fsr2h	equ	0xFDA
  8141                           fsr2l	equ	0xFD9
  8142                           status	equ	0xFD8
  8143                           
  8144 ;; *************** function _EUSART1_Initialize *****************
  8145 ;; Defined at:
  8146 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;		None
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;		None
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  1    wreg      void 
  8153 ;; Registers used:
  8154 ;;		wreg, status,2
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8160 ;;      Params:         0       0       0       0       0       0       0
  8161 ;;      Locals:         0       0       0       0       0       0       0
  8162 ;;      Temps:          0       0       0       0       0       0       0
  8163 ;;      Totals:         0       0       0       0       0       0       0
  8164 ;;Total ram usage:        0 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    3
  8167 ;; This function calls:
  8168 ;;		Nothing
  8169 ;; This function is called by:
  8170 ;;		_SYSTEM_Initialize
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           	psect	text52
  8175  0032D0                     __ptext52:
  8176                           	opt stack 0
  8177  0032D0                     _EUSART1_Initialize:
  8178                           	opt stack 25
  8179                           
  8180                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8181                           
  8182                           ;incstack = 0
  8183  0032D0  9A9D               	bcf	3997,5,c	;volatile
  8184                           
  8185                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8186  0032D2  989D               	bcf	3997,4,c	;volatile
  8187                           
  8188                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8189  0032D4  0E08               	movlw	8
  8190  0032D6  6EB8               	movwf	4024,c	;volatile
  8191                           
  8192                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8193  0032D8  0E90               	movlw	144
  8194  0032DA  6EAB               	movwf	4011,c	;volatile
  8195                           
  8196                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8197  0032DC  0E24               	movlw	36
  8198  0032DE  6EAC               	movwf	4012,c	;volatile
  8199                           
  8200                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8201  0032E0  0E10               	movlw	16
  8202  0032E2  6EAF               	movwf	4015,c	;volatile
  8203                           
  8204                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8205  0032E4  0E00               	movlw	0
  8206  0032E6  6EB0               	movwf	4016,c	;volatile
  8207                           
  8208                           ;eusart1.c: 98: eusart1TxHead = 0;
  8209  0032E8  0E00               	movlw	0
  8210  0032EA  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8211                           
  8212                           ;eusart1.c: 99: eusart1TxTail = 0;
  8213  0032EC  0E00               	movlw	0
  8214  0032EE  6E39               	movwf	_eusart1TxTail,c	;volatile
  8215                           
  8216                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8217  0032F0  0E46               	movlw	70
  8218  0032F2  0100               	movlb	0	; () banked
  8219  0032F4  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8220                           
  8221                           ;eusart1.c: 102: eusart1RxHead = 0;
  8222  0032F6  0E00               	movlw	0
  8223  0032F8  6E38               	movwf	_eusart1RxHead,c	;volatile
  8224                           
  8225                           ;eusart1.c: 103: eusart1RxTail = 0;
  8226  0032FA  0E00               	movlw	0
  8227  0032FC  6E37               	movwf	_eusart1RxTail,c	;volatile
  8228                           
  8229                           ;eusart1.c: 104: eusart1RxCount = 0;
  8230  0032FE  0E00               	movlw	0
  8231  003300  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8235  003302  8A9D               	bsf	3997,5,c	;volatile
  8236                           
  8237                           ; BSR set to: 0
  8238  003304  0012               	return		;funcret
  8239  003306                     __end_of_EUSART1_Initialize:
  8240                           	opt stack 0
  8241                           tosu	equ	0xFFF
  8242                           tosh	equ	0xFFE
  8243                           tosl	equ	0xFFD
  8244                           pclath	equ	0xFFA
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           intcon	equ	0xFF2
  8252                           intcon2	equ	0xFF1
  8253                           postinc0	equ	0xFEE
  8254                           wreg	equ	0xFE8
  8255                           indf1	equ	0xFE7
  8256                           postdec1	equ	0xFE5
  8257                           fsr1h	equ	0xFE2
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function _ADC_Initialize *****************
  8267 ;; Defined at:
  8268 ;;		line 58 in file "mcc_generated_files/adc.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8282 ;;      Params:         0       0       0       0       0       0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0
  8285 ;;      Totals:         0       0       0       0       0       0       0
  8286 ;;Total ram usage:        0 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    3
  8289 ;; This function calls:
  8290 ;;		Nothing
  8291 ;; This function is called by:
  8292 ;;		_SYSTEM_Initialize
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text53
  8297  003672                     __ptext53:
  8298                           	opt stack 0
  8299  003672                     _ADC_Initialize:
  8300                           	opt stack 25
  8301                           
  8302                           ;adc.c: 63: ADCON0 = 0x05;
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;incstack = 0
  8306  003672  0E05               	movlw	5
  8307  003674  6EC2               	movwf	4034,c	;volatile
  8308                           
  8309                           ;adc.c: 66: ADCON1 = 0x00;
  8310  003676  0E00               	movlw	0
  8311  003678  6EC1               	movwf	4033,c	;volatile
  8312                           
  8313                           ;adc.c: 69: ADCON2 = 0x87;
  8314  00367A  0E87               	movlw	135
  8315  00367C  6EC0               	movwf	4032,c	;volatile
  8316                           
  8317                           ;adc.c: 72: ADRESL = 0x00;
  8318  00367E  0E00               	movlw	0
  8319  003680  6EC3               	movwf	4035,c	;volatile
  8320                           
  8321                           ;adc.c: 75: ADRESH = 0x00;
  8322  003682  0E00               	movlw	0
  8323  003684  6EC4               	movwf	4036,c	;volatile
  8324  003686  0012               	return		;funcret
  8325  003688                     __end_of_ADC_Initialize:
  8326                           	opt stack 0
  8327                           tosu	equ	0xFFF
  8328                           tosh	equ	0xFFE
  8329                           tosl	equ	0xFFD
  8330                           pclath	equ	0xFFA
  8331                           tblptru	equ	0xFF8
  8332                           tblptrh	equ	0xFF7
  8333                           tblptrl	equ	0xFF6
  8334                           tablat	equ	0xFF5
  8335                           prodh	equ	0xFF4
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           postinc0	equ	0xFEE
  8340                           wreg	equ	0xFE8
  8341                           indf1	equ	0xFE7
  8342                           postdec1	equ	0xFE5
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           fsr2h	equ	0xFDA
  8349                           fsr2l	equ	0xFD9
  8350                           status	equ	0xFD8
  8351                           
  8352 ;; *************** function _SetMcuRunTime *****************
  8353 ;; Defined at:
  8354 ;;		line 81 in file "SystemStatus.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;		None
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2, status,0, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8368 ;;      Params:         0       0       0       0       0       0       0
  8369 ;;      Locals:         0       0       0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0
  8371 ;;      Totals:         0       0       0       0       0       0       0
  8372 ;;Total ram usage:        0 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    4
  8375 ;; This function calls:
  8376 ;;		___llmod
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text54
  8383  002F40                     __ptext54:
  8384                           	opt stack 0
  8385  002F40                     _SetMcuRunTime:
  8386                           	opt stack 26
  8387                           
  8388                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8389                           
  8390                           ;incstack = 0
  8391  002F40  0E01               	movlw	1
  8392  002F42  0100               	movlb	0	; () banked
  8393  002F44  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8394  002F46  0E00               	movlw	0
  8395  002F48  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8396  002F4A  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8397  002F4C  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8401  002F4E  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8402  002F52  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8403  002F56  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8404  002F5A  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8405  002F5E  0E80               	movlw	128
  8406  002F60  6E1C               	movwf	___llmod@divisor,c
  8407  002F62  0E43               	movlw	67
  8408  002F64  6E1D               	movwf	___llmod@divisor+1,c
  8409  002F66  0E00               	movlw	0
  8410  002F68  6E1E               	movwf	___llmod@divisor+2,c
  8411  002F6A  0E00               	movlw	0
  8412  002F6C  6E1F               	movwf	___llmod@divisor+3,c
  8413  002F6E  EC76  F014         	call	___llmod	;wreg free
  8414  002F72  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8415  002F76  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8416  002F7A  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8417  002F7E  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8418  002F82  0012               	return		;funcret
  8419  002F84                     __end_of_SetMcuRunTime:
  8420                           	opt stack 0
  8421                           tosu	equ	0xFFF
  8422                           tosh	equ	0xFFE
  8423                           tosl	equ	0xFFD
  8424                           pclath	equ	0xFFA
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           intcon	equ	0xFF2
  8432                           intcon2	equ	0xFF1
  8433                           postinc0	equ	0xFEE
  8434                           wreg	equ	0xFE8
  8435                           indf1	equ	0xFE7
  8436                           postdec1	equ	0xFE5
  8437                           fsr1h	equ	0xFE2
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function ___llmod *****************
  8447 ;; Defined at:
  8448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  dividend        4   23[COMRAM] unsigned long 
  8451 ;;  divisor         4   27[COMRAM] unsigned long 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  counter         1   31[COMRAM] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  4   23[COMRAM] unsigned long 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8463 ;;      Params:         8       0       0       0       0       0       0
  8464 ;;      Locals:         1       0       0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0
  8466 ;;      Totals:         9       0       0       0       0       0       0
  8467 ;;Total ram usage:        9 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    3
  8470 ;; This function calls:
  8471 ;;		Nothing
  8472 ;; This function is called by:
  8473 ;;		_SetMcuRunTime
  8474 ;;		_GetMcuRunTime
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text55
  8479  0028EC                     __ptext55:
  8480                           	opt stack 0
  8481  0028EC                     ___llmod:
  8482                           	opt stack 24
  8483                           
  8484                           ;incstack = 0
  8485  0028EC  501C               	movf	___llmod@divisor,w,c
  8486  0028EE  101D               	iorwf	___llmod@divisor+1,w,c
  8487  0028F0  101E               	iorwf	___llmod@divisor+2,w,c
  8488  0028F2  101F               	iorwf	___llmod@divisor+3,w,c
  8489  0028F4  B4D8               	btfsc	status,2,c
  8490  0028F6  D024               	goto	l1795
  8491  0028F8  0E01               	movlw	1
  8492  0028FA  6E20               	movwf	___llmod@counter,c
  8493  0028FC  D006               	goto	l1790
  8494  0028FE  90D8               	bcf	status,0,c
  8495  002900  361C               	rlcf	___llmod@divisor,f,c
  8496  002902  361D               	rlcf	___llmod@divisor+1,f,c
  8497  002904  361E               	rlcf	___llmod@divisor+2,f,c
  8498  002906  361F               	rlcf	___llmod@divisor+3,f,c
  8499  002908  2A20               	incf	___llmod@counter,f,c
  8500  00290A                     l1790:
  8501  00290A  AE1F               	btfss	___llmod@divisor+3,7,c
  8502  00290C  D7F8               	goto	l1791
  8503  00290E                     u6870:
  8504  00290E  501C               	movf	___llmod@divisor,w,c
  8505  002910  5C18               	subwf	___llmod@dividend,w,c
  8506  002912  501D               	movf	___llmod@divisor+1,w,c
  8507  002914  5819               	subwfb	___llmod@dividend+1,w,c
  8508  002916  501E               	movf	___llmod@divisor+2,w,c
  8509  002918  581A               	subwfb	___llmod@dividend+2,w,c
  8510  00291A  501F               	movf	___llmod@divisor+3,w,c
  8511  00291C  581B               	subwfb	___llmod@dividend+3,w,c
  8512  00291E  A0D8               	btfss	status,0,c
  8513  002920  D008               	goto	l1794
  8514  002922  501C               	movf	___llmod@divisor,w,c
  8515  002924  5E18               	subwf	___llmod@dividend,f,c
  8516  002926  501D               	movf	___llmod@divisor+1,w,c
  8517  002928  5A19               	subwfb	___llmod@dividend+1,f,c
  8518  00292A  501E               	movf	___llmod@divisor+2,w,c
  8519  00292C  5A1A               	subwfb	___llmod@dividend+2,f,c
  8520  00292E  501F               	movf	___llmod@divisor+3,w,c
  8521  002930  5A1B               	subwfb	___llmod@dividend+3,f,c
  8522  002932                     l1794:
  8523  002932  90D8               	bcf	status,0,c
  8524  002934  321F               	rrcf	___llmod@divisor+3,f,c
  8525  002936  321E               	rrcf	___llmod@divisor+2,f,c
  8526  002938  321D               	rrcf	___llmod@divisor+1,f,c
  8527  00293A  321C               	rrcf	___llmod@divisor,f,c
  8528  00293C  2E20               	decfsz	___llmod@counter,f,c
  8529  00293E  D7E7               	goto	u6870
  8530  002940                     l1795:
  8531  002940  C018  F018         	movff	___llmod@dividend,?___llmod
  8532  002944  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8533  002948  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8534  00294C  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8535  002950  0012               	return		;funcret
  8536  002952                     __end_of___llmod:
  8537                           	opt stack 0
  8538                           tosu	equ	0xFFF
  8539                           tosh	equ	0xFFE
  8540                           tosl	equ	0xFFD
  8541                           pclath	equ	0xFFA
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon2	equ	0xFF1
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           indf1	equ	0xFE7
  8553                           postdec1	equ	0xFE5
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           postdec2	equ	0xFDD
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function _SendSystemStartAck *****************
  8564 ;; Defined at:
  8565 ;;		line 103 in file "SystemCommon.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;		None
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8579 ;;      Params:         0       0       0       0       0       0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0
  8582 ;;      Totals:         0       0       0       0       0       0       0
  8583 ;;Total ram usage:        0 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    6
  8586 ;; This function calls:
  8587 ;;		_SendAckMessage
  8588 ;; This function is called by:
  8589 ;;		_main
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text56
  8594  00375C                     __ptext56:
  8595                           	opt stack 0
  8596  00375C                     _SendSystemStartAck:
  8597                           	opt stack 24
  8598                           
  8599                           ;SystemCommon.c: 105: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8600                           
  8601                           ;incstack = 0
  8602  00375C  0E10               	movlw	16
  8603  00375E  6E24               	movwf	SendAckMessage@inRequest,c
  8604  003760  0E01               	movlw	1
  8605  003762  ECC4  F016         	call	_SendAckMessage
  8606  003766  0012               	return		;funcret
  8607  003768                     __end_of_SendSystemStartAck:
  8608                           	opt stack 0
  8609                           tosu	equ	0xFFF
  8610                           tosh	equ	0xFFE
  8611                           tosl	equ	0xFFD
  8612                           pclath	equ	0xFFA
  8613                           tblptru	equ	0xFF8
  8614                           tblptrh	equ	0xFF7
  8615                           tblptrl	equ	0xFF6
  8616                           tablat	equ	0xFF5
  8617                           prodh	equ	0xFF4
  8618                           prodl	equ	0xFF3
  8619                           intcon	equ	0xFF2
  8620                           intcon2	equ	0xFF1
  8621                           postinc0	equ	0xFEE
  8622                           wreg	equ	0xFE8
  8623                           indf1	equ	0xFE7
  8624                           postdec1	equ	0xFE5
  8625                           fsr1h	equ	0xFE2
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           fsr2h	equ	0xFDA
  8631                           fsr2l	equ	0xFD9
  8632                           status	equ	0xFD8
  8633                           
  8634 ;; *************** function _SendAckMessage *****************
  8635 ;; Defined at:
  8636 ;;		line 171 in file "EusartApp.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;  inGroup         1    wreg     enum E7163
  8639 ;;  inRequest       1   35[COMRAM] enum E7171
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;  inGroup         1   36[COMRAM] enum E7163
  8642 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8652 ;;      Params:         1       0       0       0       0       0       0
  8653 ;;      Locals:         7       0       0       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0
  8655 ;;      Totals:         8       0       0       0       0       0       0
  8656 ;;Total ram usage:        8 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    5
  8659 ;; This function calls:
  8660 ;;		_WriteUartMessage
  8661 ;;		_ZeroArray
  8662 ;;		_crc8
  8663 ;; This function is called by:
  8664 ;;		_testLeds
  8665 ;;		_SetAdcOperationMode
  8666 ;;		_SetConversionResultFormat
  8667 ;;		_SetChannelMode
  8668 ;;		_FlashReadUart
  8669 ;;		_FlashEreaseMem
  8670 ;;		_DacSetValue
  8671 ;;		_UpdateTxFreq
  8672 ;;		_UpdateRxFreq
  8673 ;;		_ResetMcu
  8674 ;;		_ResetCpld
  8675 ;;		_SendSystemStartAck
  8676 ;;		_SetMcuFwVersion
  8677 ;;		_SetCpldFwVersion
  8678 ;;		_keepAliveSignalUart
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text57
  8683  002D88                     __ptext57:
  8684                           	opt stack 0
  8685  002D88                     _SendAckMessage:
  8686                           	opt stack 22
  8687                           
  8688                           ;incstack = 0
  8689                           ;SendAckMessage@inGroup stored from wreg
  8690  002D88  6E25               	movwf	SendAckMessage@inGroup,c
  8691                           
  8692                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8693                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8694  002D8A  0E26               	movlw	low SendAckMessage@TxMsg
  8695  002D8C  6E20               	movwf	ZeroArray@array,c
  8696  002D8E  0E00               	movlw	high SendAckMessage@TxMsg
  8697  002D90  6E21               	movwf	ZeroArray@array+1,c
  8698  002D92  0E00               	movlw	0
  8699  002D94  6E23               	movwf	ZeroArray@size+1,c
  8700  002D96  0E06               	movlw	6
  8701  002D98  6E22               	movwf	ZeroArray@size,c
  8702  002D9A  ECF6  F01A         	call	_ZeroArray	;wreg free
  8703                           
  8704                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8705  002D9E  0E24               	movlw	36
  8706  002DA0  6E26               	movwf	SendAckMessage@TxMsg,c
  8707                           
  8708                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8709  002DA2  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8710                           
  8711                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8712  002DA6  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8713                           
  8714                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8715  002DAA  0E00               	movlw	0
  8716  002DAC  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8717                           
  8718                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8719  002DAE  0E26               	movlw	low SendAckMessage@TxMsg
  8720  002DB0  6E18               	movwf	crc8@dataArray,c
  8721  002DB2  0E00               	movlw	high SendAckMessage@TxMsg
  8722  002DB4  6E19               	movwf	crc8@dataArray+1,c
  8723  002DB6  0E00               	movlw	0
  8724  002DB8  6E1B               	movwf	crc8@dataSize+1,c
  8725  002DBA  0E05               	movlw	5
  8726  002DBC  6E1A               	movwf	crc8@dataSize,c
  8727  002DBE  ECED  F016         	call	_crc8	;wreg free
  8728  002DC2  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8729                           
  8730                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8731  002DC4  0E26               	movlw	low SendAckMessage@TxMsg
  8732  002DC6  6E19               	movwf	WriteUartMessage@dataBuf,c
  8733  002DC8  0E00               	movlw	high SendAckMessage@TxMsg
  8734  002DCA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8735  002DCC  0E00               	movlw	0
  8736  002DCE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8737  002DD0  0E06               	movlw	6
  8738  002DD2  6E1B               	movwf	WriteUartMessage@dataSize,c
  8739  002DD4  EC83  F019         	call	_WriteUartMessage	;wreg free
  8740  002DD8  0012               	return		;funcret
  8741  002DDA                     __end_of_SendAckMessage:
  8742                           	opt stack 0
  8743                           tosu	equ	0xFFF
  8744                           tosh	equ	0xFFE
  8745                           tosl	equ	0xFFD
  8746                           pclath	equ	0xFFA
  8747                           tblptru	equ	0xFF8
  8748                           tblptrh	equ	0xFF7
  8749                           tblptrl	equ	0xFF6
  8750                           tablat	equ	0xFF5
  8751                           prodh	equ	0xFF4
  8752                           prodl	equ	0xFF3
  8753                           intcon	equ	0xFF2
  8754                           intcon2	equ	0xFF1
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           indf1	equ	0xFE7
  8758                           postdec1	equ	0xFE5
  8759                           fsr1h	equ	0xFE2
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _crc8 *****************
  8769 ;; Defined at:
  8770 ;;		line 13 in file "SystemCommon.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8773 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8774 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8775 ;;  dataSize        2   25[COMRAM] int 
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;  i               2   30[COMRAM] int 
  8778 ;;  crc             2   28[COMRAM] int 
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  1    wreg      unsigned char 
  8781 ;; Registers used:
  8782 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8788 ;;      Params:         4       0       0       0       0       0       0
  8789 ;;      Locals:         4       0       0       0       0       0       0
  8790 ;;      Temps:          1       0       0       0       0       0       0
  8791 ;;      Totals:         9       0       0       0       0       0       0
  8792 ;;Total ram usage:        9 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    3
  8795 ;; This function calls:
  8796 ;;		Nothing
  8797 ;; This function is called by:
  8798 ;;		_readUartMessage
  8799 ;;		_SendAckMessage
  8800 ;;		_FlashReadUart
  8801 ;;		_FlashReadCondition
  8802 ;;		_GetMcuFwVersion
  8803 ;;		_GetCpldFwVersion
  8804 ;;		_GetMcuRunTime
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text58
  8809  002DDA                     __ptext58:
  8810                           	opt stack 0
  8811  002DDA                     _crc8:
  8812                           	opt stack 26
  8813                           
  8814                           ;SystemCommon.c: 15: int crc = 0;
  8815                           
  8816                           ;incstack = 0
  8817  002DDA  0E00               	movlw	0
  8818  002DDC  6E1E               	movwf	crc8@crc+1,c
  8819  002DDE  0E00               	movlw	0
  8820  002DE0  6E1D               	movwf	crc8@crc,c
  8821                           
  8822                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8823  002DE2  0E00               	movlw	0
  8824  002DE4  6E20               	movwf	crc8@i+1,c
  8825  002DE6  0E00               	movlw	0
  8826  002DE8  6E1F               	movwf	crc8@i,c
  8827  002DEA  D00E               	goto	l1251
  8828  002DEC                     
  8829                           ;SystemCommon.c: 17: {
  8830                           ;SystemCommon.c: 18: crc += dataArray[i];
  8831  002DEC  501F               	movf	crc8@i,w,c
  8832  002DEE  2418               	addwf	crc8@dataArray,w,c
  8833  002DF0  6ED9               	movwf	fsr2l,c
  8834  002DF2  5020               	movf	crc8@i+1,w,c
  8835  002DF4  2019               	addwfc	crc8@dataArray+1,w,c
  8836  002DF6  6EDA               	movwf	fsr2h,c
  8837  002DF8  50DF               	movf	indf2,w,c
  8838  002DFA  6E1C               	movwf	??_crc8& (0+255),c
  8839  002DFC  501C               	movf	??_crc8,w,c
  8840  002DFE  261D               	addwf	crc8@crc,f,c
  8841  002E00  0E00               	movlw	0
  8842  002E02  221E               	addwfc	crc8@crc+1,f,c
  8843  002E04  4A1F               	infsnz	crc8@i,f,c
  8844  002E06  2A20               	incf	crc8@i+1,f,c
  8845  002E08                     l1251:
  8846  002E08  501A               	movf	crc8@dataSize,w,c
  8847  002E0A  5C1F               	subwf	crc8@i,w,c
  8848  002E0C  5020               	movf	crc8@i+1,w,c
  8849  002E0E  0A80               	xorlw	128
  8850  002E10  6E1C               	movwf	??_crc8& (0+255),c
  8851  002E12  501B               	movf	crc8@dataSize+1,w,c
  8852  002E14  0A80               	xorlw	128
  8853  002E16  581C               	subwfb	??_crc8& (0+255),w,c
  8854  002E18  A0D8               	btfss	status,0,c
  8855  002E1A  D7E8               	goto	l1252
  8856                           
  8857                           ;SystemCommon.c: 19: }
  8858                           ;SystemCommon.c: 20: crc &= 0xff;
  8859  002E1C  0EFF               	movlw	255
  8860  002E1E  161D               	andwf	crc8@crc,f,c
  8861  002E20  0E00               	movlw	0
  8862  002E22  161E               	andwf	crc8@crc+1,f,c
  8863                           
  8864                           ;SystemCommon.c: 21: return crc;
  8865  002E24  501D               	movf	crc8@crc,w,c
  8866  002E26  0012               	return	
  8867  002E28                     __end_of_crc8:
  8868                           	opt stack 0
  8869                           tosu	equ	0xFFF
  8870                           tosh	equ	0xFFE
  8871                           tosl	equ	0xFFD
  8872                           pclath	equ	0xFFA
  8873                           tblptru	equ	0xFF8
  8874                           tblptrh	equ	0xFF7
  8875                           tblptrl	equ	0xFF6
  8876                           tablat	equ	0xFF5
  8877                           prodh	equ	0xFF4
  8878                           prodl	equ	0xFF3
  8879                           intcon	equ	0xFF2
  8880                           intcon2	equ	0xFF1
  8881                           postinc0	equ	0xFEE
  8882                           wreg	equ	0xFE8
  8883                           indf1	equ	0xFE7
  8884                           postdec1	equ	0xFE5
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _ZeroArray *****************
  8895 ;; Defined at:
  8896 ;;		line 24 in file "SystemCommon.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  array           2   31[COMRAM] PTR unsigned char 
  8899 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8900 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8901 ;;		 -> rxMsgQueue(20), 
  8902 ;;  size            2   33[COMRAM] int 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8914 ;;      Params:         4       0       0       0       0       0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0
  8917 ;;      Totals:         4       0       0       0       0       0       0
  8918 ;;Total ram usage:        4 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    4
  8921 ;; This function calls:
  8922 ;;		_memset
  8923 ;; This function is called by:
  8924 ;;		_readUartMessage
  8925 ;;		_InitRxMessageParams
  8926 ;;		_SendAckMessage
  8927 ;;		_FlashReadUart
  8928 ;;		_FlashEreaseMem
  8929 ;;		_FlashReadCondition
  8930 ;;		_GetIntFromUartData
  8931 ;;		_GetMcuFwVersion
  8932 ;;		_GetCpldFwVersion
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text59
  8937  0035EC                     __ptext59:
  8938                           	opt stack 0
  8939  0035EC                     _ZeroArray:
  8940                           	opt stack 25
  8941                           
  8942                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8943                           
  8944                           ;incstack = 0
  8945  0035EC  C020  F018         	movff	ZeroArray@array,memset@p1
  8946  0035F0  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8947  0035F4  0E00               	movlw	0
  8948  0035F6  6E1B               	movwf	memset@c+1,c
  8949  0035F8  0E00               	movlw	0
  8950  0035FA  6E1A               	movwf	memset@c,c
  8951  0035FC  C022  F01C         	movff	ZeroArray@size,memset@n
  8952  003600  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  8953  003604  EC19  F01A         	call	_memset	;wreg free
  8954  003608  0012               	return		;funcret
  8955  00360A                     __end_of_ZeroArray:
  8956                           	opt stack 0
  8957                           tosu	equ	0xFFF
  8958                           tosh	equ	0xFFE
  8959                           tosl	equ	0xFFD
  8960                           pclath	equ	0xFFA
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           intcon2	equ	0xFF1
  8969                           postinc0	equ	0xFEE
  8970                           wreg	equ	0xFE8
  8971                           indf1	equ	0xFE7
  8972                           postdec1	equ	0xFE5
  8973                           fsr1h	equ	0xFE2
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           fsr2h	equ	0xFDA
  8979                           fsr2l	equ	0xFD9
  8980                           status	equ	0xFD8
  8981                           
  8982 ;; *************** function _memset *****************
  8983 ;; Defined at:
  8984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;  p1              2   23[COMRAM] PTR void 
  8987 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8988 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8989 ;;		 -> rxMsgQueue(20), 
  8990 ;;  c               2   25[COMRAM] int 
  8991 ;;  n               2   27[COMRAM] unsigned int 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  p               2   29[COMRAM] PTR unsigned char 
  8994 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8995 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8996 ;;		 -> rxMsgQueue(20), 
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  2   23[COMRAM] PTR void 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9006 ;;      Params:         6       0       0       0       0       0       0
  9007 ;;      Locals:         2       0       0       0       0       0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0
  9009 ;;      Totals:         8       0       0       0       0       0       0
  9010 ;;Total ram usage:        8 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    3
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_ZeroArray
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text60
  9021  003432                     __ptext60:
  9022                           	opt stack 0
  9023  003432                     _memset:
  9024                           	opt stack 25
  9025                           
  9026                           ;incstack = 0
  9027  003432  C018  F01E         	movff	memset@p1,memset@p
  9028  003436  C019  F01F         	movff	memset@p1+1,memset@p+1
  9029  00343A  D008               	goto	l1857
  9030  00343C                     l6456:
  9031  00343C  C01E  FFD9         	movff	memset@p,fsr2l
  9032  003440  C01F  FFDA         	movff	memset@p+1,fsr2h
  9033  003444  C01A  FFDF         	movff	memset@c,indf2
  9034  003448  4A1E               	infsnz	memset@p,f,c
  9035  00344A  2A1F               	incf	memset@p+1,f,c
  9036  00344C                     l1857:
  9037  00344C  061C               	decf	memset@n,f,c
  9038  00344E  A0D8               	btfss	status,0,c
  9039  003450  061D               	decf	memset@n+1,f,c
  9040  003452  281C               	incf	memset@n,w,c
  9041  003454  E1F3               	bnz	l6456
  9042  003456  281D               	incf	memset@n+1,w,c
  9043  003458  B4D8               	btfsc	status,2,c
  9044  00345A  0012               	return	
  9045  00345C  D7EF               	goto	l1858
  9046  00345E                     __end_of_memset:
  9047                           	opt stack 0
  9048                           tosu	equ	0xFFF
  9049                           tosh	equ	0xFFE
  9050                           tosl	equ	0xFFD
  9051                           pclath	equ	0xFFA
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodh	equ	0xFF4
  9057                           prodl	equ	0xFF3
  9058                           intcon	equ	0xFF2
  9059                           intcon2	equ	0xFF1
  9060                           postinc0	equ	0xFEE
  9061                           wreg	equ	0xFE8
  9062                           indf1	equ	0xFE7
  9063                           postdec1	equ	0xFE5
  9064                           fsr1h	equ	0xFE2
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           fsr2h	equ	0xFDA
  9070                           fsr2l	equ	0xFD9
  9071                           status	equ	0xFD8
  9072                           
  9073 ;; *************** function _WriteUartMessage *****************
  9074 ;; Defined at:
  9075 ;;		line 158 in file "EusartApp.c"
  9076 ;; Parameters:    Size  Location     Type
  9077 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9078 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9079 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9080 ;;  dataSize        2   26[COMRAM] int 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  idx             2   29[COMRAM] int 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9092 ;;      Params:         4       0       0       0       0       0       0
  9093 ;;      Locals:         2       0       0       0       0       0       0
  9094 ;;      Temps:          1       0       0       0       0       0       0
  9095 ;;      Totals:         7       0       0       0       0       0       0
  9096 ;;Total ram usage:        7 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    4
  9099 ;; This function calls:
  9100 ;;		_EUSART1_Write
  9101 ;; This function is called by:
  9102 ;;		_SendAckMessage
  9103 ;;		_FlashReadUart
  9104 ;;		_FlashReadCondition
  9105 ;;		_GetMcuFwVersion
  9106 ;;		_GetCpldFwVersion
  9107 ;;		_GetMcuRunTime
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text61
  9112  003306                     __ptext61:
  9113                           	opt stack 0
  9114  003306                     _WriteUartMessage:
  9115                           	opt stack 22
  9116                           
  9117                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9118                           
  9119                           ;incstack = 0
  9120  003306  0E00               	movlw	0
  9121  003308  6E1F               	movwf	WriteUartMessage@idx+1,c
  9122  00330A  0E00               	movlw	0
  9123  00330C  6E1E               	movwf	WriteUartMessage@idx,c
  9124  00330E  D00B               	goto	l210
  9125  003310                     
  9126                           ;EusartApp.c: 161: {
  9127                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9128  003310  501E               	movf	WriteUartMessage@idx,w,c
  9129  003312  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9130  003314  6ED9               	movwf	fsr2l,c
  9131  003316  501F               	movf	WriteUartMessage@idx+1,w,c
  9132  003318  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9133  00331A  6EDA               	movwf	fsr2h,c
  9134  00331C  50DF               	movf	indf2,w,c
  9135  00331E  EC85  F018         	call	_EUSART1_Write
  9136  003322  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9137  003324  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9138  003326                     l210:
  9139  003326  501B               	movf	WriteUartMessage@dataSize,w,c
  9140  003328  5C1E               	subwf	WriteUartMessage@idx,w,c
  9141  00332A  501F               	movf	WriteUartMessage@idx+1,w,c
  9142  00332C  0A80               	xorlw	128
  9143  00332E  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9144  003330  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9145  003332  0A80               	xorlw	128
  9146  003334  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9147  003336  B0D8               	btfsc	status,0,c
  9148  003338  0012               	return	
  9149  00333A  D7EA               	goto	l211
  9150  00333C                     __end_of_WriteUartMessage:
  9151                           	opt stack 0
  9152                           tosu	equ	0xFFF
  9153                           tosh	equ	0xFFE
  9154                           tosl	equ	0xFFD
  9155                           pclath	equ	0xFFA
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           postinc0	equ	0xFEE
  9165                           wreg	equ	0xFE8
  9166                           indf1	equ	0xFE7
  9167                           postdec1	equ	0xFE5
  9168                           fsr1h	equ	0xFE2
  9169                           fsr1l	equ	0xFE1
  9170                           indf2	equ	0xFDF
  9171                           postinc2	equ	0xFDE
  9172                           postdec2	equ	0xFDD
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function _EUSART1_Write *****************
  9178 ;; Defined at:
  9179 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  txData          1    wreg     unsigned char 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  txData          1   23[COMRAM] unsigned char 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9193 ;;      Params:         0       0       0       0       0       0       0
  9194 ;;      Locals:         1       0       0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0
  9196 ;;      Totals:         1       0       0       0       0       0       0
  9197 ;;Total ram usage:        1 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    3
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_WriteUartMessage
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text62
  9208  00310A                     __ptext62:
  9209                           	opt stack 0
  9210  00310A                     _EUSART1_Write:
  9211                           	opt stack 22
  9212                           
  9213                           ;incstack = 0
  9214                           ;EUSART1_Write@txData stored from wreg
  9215  00310A  6E18               	movwf	EUSART1_Write@txData,c
  9216  00310C                     
  9217                           ;eusart1.c: 160: {
  9218                           
  9219                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9220  00310C  0100               	movlb	0	; () banked
  9221  00310E  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9222  003110  B4D8               	btfsc	status,2,c
  9223  003112  D7FC               	goto	l6400
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;eusart1.c: 161: }
  9227                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9228  003114  B89D               	btfsc	3997,4,c	;volatile
  9229  003116  D003               	goto	l837
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;eusart1.c: 164: {
  9233                           ;eusart1.c: 165: TXREG1 = txData;
  9234  003118  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9235                           
  9236                           ;eusart1.c: 166: }
  9237  00311C  D012               	goto	l838
  9238  00311E                     l837:
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;eusart1.c: 167: else
  9242                           ;eusart1.c: 168: {
  9243                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9244  00311E  989D               	bcf	3997,4,c	;volatile
  9245                           
  9246                           ; BSR set to: 0
  9247                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9248  003120  503A               	movf	_eusart1TxHead,w,c	;volatile
  9249  003122  0D01               	mullw	1
  9250  003124  0E00               	movlw	low _eusart1TxBuffer
  9251  003126  24F3               	addwf	prodl,w,c
  9252  003128  6ED9               	movwf	fsr2l,c
  9253  00312A  0E01               	movlw	high _eusart1TxBuffer
  9254  00312C  20F4               	addwfc	prodh,w,c
  9255  00312E  6EDA               	movwf	fsr2h,c
  9256  003130  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9257                           
  9258                           ; BSR set to: 0
  9259  003134  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9263  003136  0E45               	movlw	69
  9264  003138  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9265  00313A  D002               	goto	l839
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;eusart1.c: 172: {
  9269                           ;eusart1.c: 173: eusart1TxHead = 0;
  9270  00313C  0E00               	movlw	0
  9271  00313E  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9272  003140                     l839:
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;eusart1.c: 174: }
  9276                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9277                           
  9278                           ; BSR set to: 0
  9279  003140  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9280  003142                     l838:
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;eusart1.c: 176: }
  9284                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9285                           
  9286                           ; BSR set to: 0
  9287  003142  889D               	bsf	3997,4,c	;volatile
  9288                           
  9289                           ; BSR set to: 0
  9290  003144  0012               	return		;funcret
  9291  003146                     __end_of_EUSART1_Write:
  9292                           	opt stack 0
  9293                           tosu	equ	0xFFF
  9294                           tosh	equ	0xFFE
  9295                           tosl	equ	0xFFD
  9296                           pclath	equ	0xFFA
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           intcon	equ	0xFF2
  9304                           intcon2	equ	0xFF1
  9305                           postinc0	equ	0xFEE
  9306                           wreg	equ	0xFE8
  9307                           indf1	equ	0xFE7
  9308                           postdec1	equ	0xFE5
  9309                           fsr1h	equ	0xFE2
  9310                           fsr1l	equ	0xFE1
  9311                           indf2	equ	0xFDF
  9312                           postinc2	equ	0xFDE
  9313                           postdec2	equ	0xFDD
  9314                           fsr2h	equ	0xFDA
  9315                           fsr2l	equ	0xFD9
  9316                           status	equ	0xFD8
  9317                           
  9318 ;; *************** function _InitSystemApplicationManagers *****************
  9319 ;; Defined at:
  9320 ;;		line 33 in file "SystemSettings.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;		None
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;		None
  9325 ;; Return value:  Size  Location     Type
  9326 ;;                  1    wreg      void 
  9327 ;; Registers used:
  9328 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9329 ;; Tracked objects:
  9330 ;;		On entry : 0/0
  9331 ;;		On exit  : 0/0
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9334 ;;      Params:         0       0       0       0       0       0       0
  9335 ;;      Locals:         0       0       0       0       0       0       0
  9336 ;;      Temps:          0       0       0       0       0       0       0
  9337 ;;      Totals:         0       0       0       0       0       0       0
  9338 ;;Total ram usage:        0 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; Hardware stack levels required when called:    7
  9341 ;; This function calls:
  9342 ;;		_ClearMcuRunTime
  9343 ;;		_DacInit
  9344 ;;		_InitAdcApplicationMgr
  9345 ;;		_InitSevenSegment
  9346 ;;		_PLLInitialize
  9347 ;;		_TMR0_StartTimer
  9348 ;; This function is called by:
  9349 ;;		_main
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text63
  9354  003640                     __ptext63:
  9355                           	opt stack 0
  9356  003640                     _InitSystemApplicationManagers:
  9357                           	opt stack 23
  9358                           
  9359                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;incstack = 0
  9363  003640  EC88  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9364                           
  9365                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9366  003644  ECC7  F01B         	call	_TMR0_StartTimer	;wreg free
  9367                           
  9368                           ;SystemSettings.c: 42: InitSevenSegment();
  9369  003648  EC7E  F01A         	call	_InitSevenSegment	;wreg free
  9370                           
  9371                           ;SystemSettings.c: 45: PLLInitialize();
  9372  00364C  EC36  F005         	call	_PLLInitialize	;wreg free
  9373                           
  9374                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9375  003650  EC58  F01B         	call	_ClearMcuRunTime	;wreg free
  9376                           
  9377                           ;SystemSettings.c: 51: DacInit();
  9378  003654  EC41  F014         	call	_DacInit	;wreg free
  9379  003658  0012               	return		;funcret
  9380  00365A                     __end_of_InitSystemApplicationManagers:
  9381                           	opt stack 0
  9382                           tosu	equ	0xFFF
  9383                           tosh	equ	0xFFE
  9384                           tosl	equ	0xFFD
  9385                           pclath	equ	0xFFA
  9386                           tblptru	equ	0xFF8
  9387                           tblptrh	equ	0xFF7
  9388                           tblptrl	equ	0xFF6
  9389                           tablat	equ	0xFF5
  9390                           prodh	equ	0xFF4
  9391                           prodl	equ	0xFF3
  9392                           intcon	equ	0xFF2
  9393                           intcon2	equ	0xFF1
  9394                           postinc0	equ	0xFEE
  9395                           wreg	equ	0xFE8
  9396                           indf1	equ	0xFE7
  9397                           postdec1	equ	0xFE5
  9398                           fsr1h	equ	0xFE2
  9399                           fsr1l	equ	0xFE1
  9400                           indf2	equ	0xFDF
  9401                           postinc2	equ	0xFDE
  9402                           postdec2	equ	0xFDD
  9403                           fsr2h	equ	0xFDA
  9404                           fsr2l	equ	0xFD9
  9405                           status	equ	0xFD8
  9406                           
  9407 ;; *************** function _TMR0_StartTimer *****************
  9408 ;; Defined at:
  9409 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		None
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9423 ;;      Params:         0       0       0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0       0       0
  9426 ;;      Totals:         0       0       0       0       0       0       0
  9427 ;;Total ram usage:        0 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    3
  9430 ;; This function calls:
  9431 ;;		Nothing
  9432 ;; This function is called by:
  9433 ;;		_InitSystemApplicationManagers
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           	psect	text64
  9438  00378E                     __ptext64:
  9439                           	opt stack 0
  9440  00378E                     _TMR0_StartTimer:
  9441                           	opt stack 26
  9442                           
  9443                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9444                           
  9445                           ;incstack = 0
  9446  00378E  8ED5               	bsf	4053,7,c	;volatile
  9447  003790  0012               	return		;funcret
  9448  003792                     __end_of_TMR0_StartTimer:
  9449                           	opt stack 0
  9450                           tosu	equ	0xFFF
  9451                           tosh	equ	0xFFE
  9452                           tosl	equ	0xFFD
  9453                           pclath	equ	0xFFA
  9454                           tblptru	equ	0xFF8
  9455                           tblptrh	equ	0xFF7
  9456                           tblptrl	equ	0xFF6
  9457                           tablat	equ	0xFF5
  9458                           prodh	equ	0xFF4
  9459                           prodl	equ	0xFF3
  9460                           intcon	equ	0xFF2
  9461                           intcon2	equ	0xFF1
  9462                           postinc0	equ	0xFEE
  9463                           wreg	equ	0xFE8
  9464                           indf1	equ	0xFE7
  9465                           postdec1	equ	0xFE5
  9466                           fsr1h	equ	0xFE2
  9467                           fsr1l	equ	0xFE1
  9468                           indf2	equ	0xFDF
  9469                           postinc2	equ	0xFDE
  9470                           postdec2	equ	0xFDD
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function _PLLInitialize *****************
  9476 ;; Defined at:
  9477 ;;		line 14 in file "SyntApp.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;		None
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;  idx             2   45[COMRAM] int 
  9482 ;;  idx             2   43[COMRAM] int 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      void 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9492 ;;      Params:         0       0       0       0       0       0       0
  9493 ;;      Locals:         4       0       0       0       0       0       0
  9494 ;;      Temps:          2       0       0       0       0       0       0
  9495 ;;      Totals:         6       0       0       0       0       0       0
  9496 ;;Total ram usage:        6 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    6
  9499 ;; This function calls:
  9500 ;;		_SWSPI_send_word
  9501 ;;		_SwSpi_Set_CE_Pin
  9502 ;; This function is called by:
  9503 ;;		_InitSystemApplicationManagers
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           	psect	text65
  9508  000A6C                     __ptext65:
  9509                           	opt stack 0
  9510  000A6C                     _PLLInitialize:
  9511                           	opt stack 23
  9512                           
  9513                           ;SyntApp.c: 17: IOCB = 0b10000000;
  9514                           
  9515                           ;incstack = 0
  9516  000A6C  0E80               	movlw	128
  9517  000A6E  6E62               	movwf	3938,c	;volatile
  9518                           
  9519                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9520  000A70  0E01               	movlw	1
  9521  000A72  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9522  000A74  0E00               	movlw	0
  9523  000A76  ECA3  F018         	call	_SwSpi_Set_CE_Pin
  9524                           
  9525                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  9526  000A7A  0E00               	movlw	0
  9527  000A7C  6E2D               	movwf	PLLInitialize@idx+1,c
  9528  000A7E  0E00               	movlw	0
  9529  000A80  6E2C               	movwf	PLLInitialize@idx,c
  9530  000A82                     l7634:
  9531  000A82  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  9532  000A84  D006               	goto	l500
  9533  000A86  502D               	movf	PLLInitialize@idx+1,w,c
  9534  000A88  E128               	bnz	l7644
  9535  000A8A  0E0D               	movlw	13
  9536  000A8C  5C2C               	subwf	PLLInitialize@idx,w,c
  9537  000A8E  B0D8               	btfsc	status,0,c
  9538  000A90  D024               	goto	u7610
  9539  000A92                     l500:
  9540                           
  9541                           ;SyntApp.c: 25: {
  9542                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[idx], 3);
  9543  000A92  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  9544  000A96  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  9545  000A9A  90D8               	bcf	status,0,c
  9546  000A9C  362A               	rlcf	??_PLLInitialize,f,c
  9547  000A9E  362B               	rlcf	??_PLLInitialize+1,f,c
  9548  000AA0  90D8               	bcf	status,0,c
  9549  000AA2  362A               	rlcf	??_PLLInitialize,f,c
  9550  000AA4  362B               	rlcf	??_PLLInitialize+1,f,c
  9551  000AA6  0E35               	movlw	low _PLL_INIT_REGISTERS
  9552  000AA8  242A               	addwf	??_PLLInitialize,w,c
  9553  000AAA  6EF6               	movwf	tblptrl,c
  9554  000AAC  0E06               	movlw	high _PLL_INIT_REGISTERS
  9555  000AAE  202B               	addwfc	??_PLLInitialize+1,w,c
  9556  000AB0  6EF7               	movwf	tblptrh,c
  9557  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  9558  000AB2                     	endif
  9559  000AB2  0009               	tblrd		*+
  9560  000AB4  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9561  000AB8  0009               	tblrd		*+
  9562  000ABA  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9563  000ABE  0009               	tblrd		*+
  9564  000AC0  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9565  000AC4  000A               	tblrd		*-
  9566  000AC6  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9567  000ACA  0E03               	movlw	3
  9568  000ACC  6E25               	movwf	SWSPI_send_word@dataSize,c
  9569  000ACE  0E00               	movlw	0
  9570  000AD0  ECA6  F011         	call	_SWSPI_send_word
  9571  000AD4  4A2C               	infsnz	PLLInitialize@idx,f,c
  9572  000AD6  2A2D               	incf	PLLInitialize@idx+1,f,c
  9573  000AD8  D7D4               	goto	l7634
  9574  000ADA                     u7610:
  9575  000ADA                     l7644:
  9576                           
  9577                           ;SyntApp.c: 27: }
  9578                           ;SyntApp.c: 30: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[4], 3);
  9579  000ADA  0E45               	movlw	low (_PLL_INIT_REGISTERS+16)
  9580  000ADC  6EF6               	movwf	tblptrl,c
  9581  000ADE  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9582  000AE0  6EF7               	movwf	tblptrh,c
  9583  000AE2                     	if	0	;tblptru may be non-zero
  9584  000AE2                     	endif
  9585  000AE2                     	if	0	;tblptru may be non-zero
  9586  000AE2                     	endif
  9587  000AE2  0009               	tblrd		*+
  9588  000AE4  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9589  000AE8  0009               	tblrd		*+
  9590  000AEA  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9591  000AEE  0009               	tblrd		*+
  9592  000AF0  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9593  000AF4  000A               	tblrd		*-
  9594  000AF6  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9595  000AFA  0E03               	movlw	3
  9596  000AFC  6E25               	movwf	SWSPI_send_word@dataSize,c
  9597  000AFE  0E00               	movlw	0
  9598  000B00  ECA6  F011         	call	_SWSPI_send_word
  9599                           
  9600                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[2], 3);
  9601  000B04  0E3D               	movlw	low (_PLL_INIT_REGISTERS+8)
  9602  000B06  6EF6               	movwf	tblptrl,c
  9603  000B08  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9604  000B0A  6EF7               	movwf	tblptrh,c
  9605  000B0C                     	if	0	;tblptru may be non-zero
  9606  000B0C                     	endif
  9607  000B0C                     	if	0	;tblptru may be non-zero
  9608  000B0C                     	endif
  9609  000B0C  0009               	tblrd		*+
  9610  000B0E  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9611  000B12  0009               	tblrd		*+
  9612  000B14  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9613  000B18  0009               	tblrd		*+
  9614  000B1A  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9615  000B1E  000A               	tblrd		*-
  9616  000B20  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9617  000B24  0E03               	movlw	3
  9618  000B26  6E25               	movwf	SWSPI_send_word@dataSize,c
  9619  000B28  0E00               	movlw	0
  9620  000B2A  ECA6  F011         	call	_SWSPI_send_word
  9621                           
  9622                           ;SyntApp.c: 32: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[1], 3);
  9623  000B2E  0E39               	movlw	low (_PLL_INIT_REGISTERS+4)
  9624  000B30  6EF6               	movwf	tblptrl,c
  9625  000B32  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9626  000B34  6EF7               	movwf	tblptrh,c
  9627  000B36                     	if	0	;tblptru may be non-zero
  9628  000B36                     	endif
  9629  000B36                     	if	0	;tblptru may be non-zero
  9630  000B36                     	endif
  9631  000B36  0009               	tblrd		*+
  9632  000B38  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9633  000B3C  0009               	tblrd		*+
  9634  000B3E  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9635  000B42  0009               	tblrd		*+
  9636  000B44  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9637  000B48  000A               	tblrd		*-
  9638  000B4A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9639  000B4E  0E03               	movlw	3
  9640  000B50  6E25               	movwf	SWSPI_send_word@dataSize,c
  9641  000B52  0E00               	movlw	0
  9642  000B54  ECA6  F011         	call	_SWSPI_send_word
  9643                           
  9644                           ;SyntApp.c: 33: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[0], 3);
  9645  000B58  0E35               	movlw	low _PLL_INIT_REGISTERS
  9646  000B5A  6EF6               	movwf	tblptrl,c
  9647  000B5C                     	if	1	;There is more than 1 active tblptr byte
  9648  000B5C  0E06               	movlw	high _PLL_INIT_REGISTERS
  9649  000B5E  6EF7               	movwf	tblptrh,c
  9650  000B60                     	endif
  9651  000B60                     	if	0	;There are less than 3 active tblptr bytes
  9652  000B60                     	endif
  9653  000B60  0009               	tblrd		*+
  9654  000B62  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9655  000B66  0009               	tblrd		*+
  9656  000B68  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9657  000B6C  0009               	tblrd		*+
  9658  000B6E  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9659  000B72  000A               	tblrd		*-
  9660  000B74  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9661  000B78  0E03               	movlw	3
  9662  000B7A  6E25               	movwf	SWSPI_send_word@dataSize,c
  9663  000B7C  0E00               	movlw	0
  9664  000B7E  ECA6  F011         	call	_SWSPI_send_word
  9665                           
  9666                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9667  000B82  0E01               	movlw	1
  9668  000B84  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9669  000B86  0E01               	movlw	1
  9670  000B88  ECA3  F018         	call	_SwSpi_Set_CE_Pin
  9671                           
  9672                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  9673  000B8C  0E00               	movlw	0
  9674  000B8E  6E2F               	movwf	PLLInitialize@idx_812+1,c
  9675  000B90  0E00               	movlw	0
  9676  000B92  6E2E               	movwf	PLLInitialize@idx_812,c
  9677  000B94                     l7650:
  9678  000B94  BE2F               	btfsc	PLLInitialize@idx_812+1,7,c
  9679  000B96  D006               	goto	l502
  9680  000B98  502F               	movf	PLLInitialize@idx_812+1,w,c
  9681  000B9A  E128               	bnz	l7660
  9682  000B9C  0E0D               	movlw	13
  9683  000B9E  5C2E               	subwf	PLLInitialize@idx_812,w,c
  9684  000BA0  B0D8               	btfsc	status,0,c
  9685  000BA2  D024               	goto	u7630
  9686  000BA4                     l502:
  9687                           
  9688                           ;SyntApp.c: 40: {
  9689                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  9690  000BA4  C02E  F02A         	movff	PLLInitialize@idx_812,??_PLLInitialize
  9691  000BA8  C02F  F02B         	movff	PLLInitialize@idx_812+1,??_PLLInitialize+1
  9692  000BAC  90D8               	bcf	status,0,c
  9693  000BAE  362A               	rlcf	??_PLLInitialize,f,c
  9694  000BB0  362B               	rlcf	??_PLLInitialize+1,f,c
  9695  000BB2  90D8               	bcf	status,0,c
  9696  000BB4  362A               	rlcf	??_PLLInitialize,f,c
  9697  000BB6  362B               	rlcf	??_PLLInitialize+1,f,c
  9698  000BB8  0E35               	movlw	low _PLL_INIT_REGISTERS
  9699  000BBA  242A               	addwf	??_PLLInitialize,w,c
  9700  000BBC  6EF6               	movwf	tblptrl,c
  9701  000BBE  0E06               	movlw	high _PLL_INIT_REGISTERS
  9702  000BC0  202B               	addwfc	??_PLLInitialize+1,w,c
  9703  000BC2  6EF7               	movwf	tblptrh,c
  9704  000BC4                     	if	0	;There are less than 3 active tblptr bytes
  9705  000BC4                     	endif
  9706  000BC4  0009               	tblrd		*+
  9707  000BC6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9708  000BCA  0009               	tblrd		*+
  9709  000BCC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9710  000BD0  0009               	tblrd		*+
  9711  000BD2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9712  000BD6  000A               	tblrd		*-
  9713  000BD8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9714  000BDC  0E03               	movlw	3
  9715  000BDE  6E25               	movwf	SWSPI_send_word@dataSize,c
  9716  000BE0  0E01               	movlw	1
  9717  000BE2  ECA6  F011         	call	_SWSPI_send_word
  9718  000BE6  4A2E               	infsnz	PLLInitialize@idx_812,f,c
  9719  000BE8  2A2F               	incf	PLLInitialize@idx_812+1,f,c
  9720  000BEA  D7D4               	goto	l7650
  9721  000BEC                     u7630:
  9722  000BEC                     l7660:
  9723                           
  9724                           ;SyntApp.c: 42: }
  9725                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  9726  000BEC  0E45               	movlw	low (_PLL_INIT_REGISTERS+16)
  9727  000BEE  6EF6               	movwf	tblptrl,c
  9728  000BF0  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9729  000BF2  6EF7               	movwf	tblptrh,c
  9730  000BF4                     	if	0	;tblptru may be non-zero
  9731  000BF4                     	endif
  9732  000BF4                     	if	0	;tblptru may be non-zero
  9733  000BF4                     	endif
  9734  000BF4  0009               	tblrd		*+
  9735  000BF6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9736  000BFA  0009               	tblrd		*+
  9737  000BFC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9738  000C00  0009               	tblrd		*+
  9739  000C02  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9740  000C06  000A               	tblrd		*-
  9741  000C08  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9742  000C0C  0E03               	movlw	3
  9743  000C0E  6E25               	movwf	SWSPI_send_word@dataSize,c
  9744  000C10  0E01               	movlw	1
  9745  000C12  ECA6  F011         	call	_SWSPI_send_word
  9746                           
  9747                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  9748  000C16  0E3D               	movlw	low (_PLL_INIT_REGISTERS+8)
  9749  000C18  6EF6               	movwf	tblptrl,c
  9750  000C1A  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9751  000C1C  6EF7               	movwf	tblptrh,c
  9752  000C1E                     	if	0	;tblptru may be non-zero
  9753  000C1E                     	endif
  9754  000C1E                     	if	0	;tblptru may be non-zero
  9755  000C1E                     	endif
  9756  000C1E  0009               	tblrd		*+
  9757  000C20  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9758  000C24  0009               	tblrd		*+
  9759  000C26  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9760  000C2A  0009               	tblrd		*+
  9761  000C2C  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9762  000C30  000A               	tblrd		*-
  9763  000C32  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9764  000C36  0E03               	movlw	3
  9765  000C38  6E25               	movwf	SWSPI_send_word@dataSize,c
  9766  000C3A  0E01               	movlw	1
  9767  000C3C  ECA6  F011         	call	_SWSPI_send_word
  9768                           
  9769                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  9770  000C40  0E39               	movlw	low (_PLL_INIT_REGISTERS+4)
  9771  000C42  6EF6               	movwf	tblptrl,c
  9772  000C44  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9773  000C46  6EF7               	movwf	tblptrh,c
  9774  000C48                     	if	0	;tblptru may be non-zero
  9775  000C48                     	endif
  9776  000C48                     	if	0	;tblptru may be non-zero
  9777  000C48                     	endif
  9778  000C48  0009               	tblrd		*+
  9779  000C4A  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9780  000C4E  0009               	tblrd		*+
  9781  000C50  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9782  000C54  0009               	tblrd		*+
  9783  000C56  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9784  000C5A  000A               	tblrd		*-
  9785  000C5C  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9786  000C60  0E03               	movlw	3
  9787  000C62  6E25               	movwf	SWSPI_send_word@dataSize,c
  9788  000C64  0E01               	movlw	1
  9789  000C66  ECA6  F011         	call	_SWSPI_send_word
  9790                           
  9791                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  9792  000C6A  0E35               	movlw	low _PLL_INIT_REGISTERS
  9793  000C6C  6EF6               	movwf	tblptrl,c
  9794  000C6E                     	if	1	;There is more than 1 active tblptr byte
  9795  000C6E  0E06               	movlw	high _PLL_INIT_REGISTERS
  9796  000C70  6EF7               	movwf	tblptrh,c
  9797  000C72                     	endif
  9798  000C72                     	if	0	;There are less than 3 active tblptr bytes
  9799  000C72                     	endif
  9800  000C72  0009               	tblrd		*+
  9801  000C74  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9802  000C78  0009               	tblrd		*+
  9803  000C7A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9804  000C7E  0009               	tblrd		*+
  9805  000C80  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9806  000C84  000A               	tblrd		*-
  9807  000C86  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9808  000C8A  0E03               	movlw	3
  9809  000C8C  6E25               	movwf	SWSPI_send_word@dataSize,c
  9810  000C8E  0E01               	movlw	1
  9811  000C90  ECA6  F011         	call	_SWSPI_send_word
  9812  000C94  0012               	return		;funcret
  9813  000C96                     __end_of_PLLInitialize:
  9814                           	opt stack 0
  9815                           tosu	equ	0xFFF
  9816                           tosh	equ	0xFFE
  9817                           tosl	equ	0xFFD
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           intcon2	equ	0xFF1
  9827                           postinc0	equ	0xFEE
  9828                           wreg	equ	0xFE8
  9829                           indf1	equ	0xFE7
  9830                           postdec1	equ	0xFE5
  9831                           fsr1h	equ	0xFE2
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9841 ;; Defined at:
  9842 ;;		line 193 in file "SwSpiApp.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  phrType         1    wreg     enum E7538
  9845 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;  phrType         1   24[COMRAM] enum E7538
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      void 
  9850 ;; Registers used:
  9851 ;;		wreg, status,2, status,0
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9857 ;;      Params:         1       0       0       0       0       0       0
  9858 ;;      Locals:         1       0       0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0
  9860 ;;      Totals:         2       0       0       0       0       0       0
  9861 ;;Total ram usage:        2 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    3
  9864 ;; This function calls:
  9865 ;;		Nothing
  9866 ;; This function is called by:
  9867 ;;		_PLLInitialize
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text66
  9872  003146                     __ptext66:
  9873                           	opt stack 0
  9874  003146                     _SwSpi_Set_CE_Pin:
  9875                           	opt stack 25
  9876                           
  9877                           ;incstack = 0
  9878                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9879  003146  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9880                           
  9881                           ;SwSpiApp.c: 195: switch(phrType)
  9882  003148  D014               	goto	l656
  9883  00314A                     
  9884                           ;SwSpiApp.c: 198: if(cPinMode == 1)
  9885  00314A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9886  00314C  A4D8               	btfss	status,2,c
  9887  00314E  D002               	goto	l658
  9888                           
  9889                           ;SwSpiApp.c: 199: {
  9890                           ;SwSpiApp.c: 200: do { LATCbits.LATC1 = 1; } while(0);
  9891  003150  828B               	bsf	3979,1,c	;volatile
  9892                           
  9893                           ;SwSpiApp.c: 201: }
  9894  003152  0012               	return	
  9895  003154                     l658:
  9896                           
  9897                           ;SwSpiApp.c: 202: else if(cPinMode == 0)
  9898  003154  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9899  003156  A4D8               	btfss	status,2,c
  9900  003158  0012               	return	
  9901                           
  9902                           ;SwSpiApp.c: 203: {
  9903                           ;SwSpiApp.c: 204: do { LATCbits.LATC1 = 0; } while(0);
  9904  00315A  928B               	bcf	3979,1,c	;volatile
  9905                           
  9906                           ;SwSpiApp.c: 205: }
  9907                           ;SwSpiApp.c: 206: break;
  9908  00315C  0012               	return	
  9909  00315E                     
  9910                           ;SwSpiApp.c: 209: if(cPinMode == 1)
  9911  00315E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9912  003160  A4D8               	btfss	status,2,c
  9913  003162  D002               	goto	l667
  9914                           
  9915                           ;SwSpiApp.c: 210: {
  9916                           ;SwSpiApp.c: 211: do { LATDbits.LATD2 = 1; } while(0);
  9917  003164  848C               	bsf	3980,2,c	;volatile
  9918                           
  9919                           ;SwSpiApp.c: 212: }
  9920  003166  0012               	return	
  9921  003168                     l667:
  9922                           
  9923                           ;SwSpiApp.c: 213: else if(cPinMode == 0)
  9924  003168  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9925  00316A  A4D8               	btfss	status,2,c
  9926  00316C  0012               	return	
  9927                           
  9928                           ;SwSpiApp.c: 214: {
  9929                           ;SwSpiApp.c: 215: do { LATCbits.LATC1 = 0; } while(0);
  9930  00316E  928B               	bcf	3979,1,c	;volatile
  9931                           
  9932                           ;SwSpiApp.c: 218: }
  9933                           
  9934                           ;SwSpiApp.c: 216: }
  9935                           ;SwSpiApp.c: 217: break;
  9936  003170  0012               	return	
  9937  003172                     l656:
  9938  003172  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9939                           
  9940                           ; Switch size 1, requested type "space"
  9941                           ; Number of cases is 2, Range of values is 0 to 1
  9942                           ; switch strategies available:
  9943                           ; Name         Instructions Cycles
  9944                           ; simple_byte            7     4 (average)
  9945                           ;	Chosen strategy is simple_byte
  9946  003174  0A00               	xorlw	0	; case 0
  9947  003176  B4D8               	btfsc	status,2,c
  9948  003178  D7E8               	goto	l657
  9949  00317A  0A01               	xorlw	1	; case 1
  9950  00317C  A4D8               	btfss	status,2,c
  9951  00317E  0012               	return	
  9952  003180  D7EE               	goto	l666
  9953  003182                     __end_of_SwSpi_Set_CE_Pin:
  9954                           	opt stack 0
  9955                           tosu	equ	0xFFF
  9956                           tosh	equ	0xFFE
  9957                           tosl	equ	0xFFD
  9958                           pclath	equ	0xFFA
  9959                           tblptru	equ	0xFF8
  9960                           tblptrh	equ	0xFF7
  9961                           tblptrl	equ	0xFF6
  9962                           tablat	equ	0xFF5
  9963                           prodh	equ	0xFF4
  9964                           prodl	equ	0xFF3
  9965                           intcon	equ	0xFF2
  9966                           intcon2	equ	0xFF1
  9967                           postinc0	equ	0xFEE
  9968                           wreg	equ	0xFE8
  9969                           indf1	equ	0xFE7
  9970                           postdec1	equ	0xFE5
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980 ;; *************** function _InitSevenSegment *****************
  9981 ;; Defined at:
  9982 ;;		line 14 in file "SevenSegmentApp.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;		None
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;		None
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		wreg, status,2
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9996 ;;      Params:         0       0       0       0       0       0       0
  9997 ;;      Locals:         0       0       0       0       0       0       0
  9998 ;;      Temps:          0       0       0       0       0       0       0
  9999 ;;      Totals:         0       0       0       0       0       0       0
 10000 ;;Total ram usage:        0 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:    3
 10003 ;; This function calls:
 10004 ;;		Nothing
 10005 ;; This function is called by:
 10006 ;;		_InitSystemApplicationManagers
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           	psect	text67
 10011  0034FC                     __ptext67:
 10012                           	opt stack 0
 10013  0034FC                     _InitSevenSegment:
 10014                           	opt stack 26
 10015                           
 10016                           ;SevenSegmentApp.c: 16: ANSELA = 0;
 10017                           
 10018                           ;incstack = 0
 10019  0034FC  0E00               	movlw	0
 10020  0034FE  010F               	movlb	15	; () banked
 10021  003500  6F38               	movwf	56,b	;volatile
 10022                           
 10023                           ;SevenSegmentApp.c: 17: ANSELD = 0;
 10024  003502  0E00               	movlw	0
 10025  003504  6F3B               	movwf	59,b	;volatile
 10026                           
 10027                           ;SevenSegmentApp.c: 19: TRISA = 0;
 10028  003506  0E00               	movlw	0
 10029  003508  6E92               	movwf	3986,c	;volatile
 10030                           
 10031                           ;SevenSegmentApp.c: 20: LATA = 0;
 10032  00350A  0E00               	movlw	0
 10033  00350C  6E89               	movwf	3977,c	;volatile
 10034                           
 10035                           ;SevenSegmentApp.c: 21: TRISD = 0;
 10036  00350E  0E00               	movlw	0
 10037  003510  6E95               	movwf	3989,c	;volatile
 10038                           
 10039                           ;SevenSegmentApp.c: 22: LATD = 0;
 10040  003512  0E00               	movlw	0
 10041  003514  6E8C               	movwf	3980,c	;volatile
 10042                           
 10043                           ;SevenSegmentApp.c: 24: cnt = 1;
 10044  003516  0E00               	movlw	0
 10045  003518  0100               	movlb	0	; () banked
 10046  00351A  6FFE               	movwf	(_cnt+1)& (0+255),b
 10047  00351C  0E01               	movlw	1
 10048  00351E  6FFD               	movwf	_cnt& (0+255),b
 10049                           
 10050                           ; BSR set to: 0
 10051  003520  0012               	return		;funcret
 10052  003522                     __end_of_InitSevenSegment:
 10053                           	opt stack 0
 10054                           tosu	equ	0xFFF
 10055                           tosh	equ	0xFFE
 10056                           tosl	equ	0xFFD
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon2	equ	0xFF1
 10066                           postinc0	equ	0xFEE
 10067                           wreg	equ	0xFE8
 10068                           indf1	equ	0xFE7
 10069                           postdec1	equ	0xFE5
 10070                           fsr1h	equ	0xFE2
 10071                           fsr1l	equ	0xFE1
 10072                           indf2	equ	0xFDF
 10073                           postinc2	equ	0xFDE
 10074                           postdec2	equ	0xFDD
 10075                           fsr2h	equ	0xFDA
 10076                           fsr2l	equ	0xFD9
 10077                           status	equ	0xFD8
 10078                           
 10079 ;; *************** function _InitAdcApplicationMgr *****************
 10080 ;; Defined at:
 10081 ;;		line 22 in file "AdcApp.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;		None
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  channel         1   23[COMRAM] unsigned char 
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  1    wreg      void 
 10088 ;; Registers used:
 10089 ;;		wreg, status,2
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10095 ;;      Params:         0       0       0       0       0       0       0
 10096 ;;      Locals:         1       0       0       0       0       0       0
 10097 ;;      Temps:          0       0       0       0       0       0       0
 10098 ;;      Totals:         1       0       0       0       0       0       0
 10099 ;;Total ram usage:        1 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    3
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_InitSystemApplicationManagers
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text68
 10110  003710                     __ptext68:
 10111                           	opt stack 0
 10112  003710                     _InitAdcApplicationMgr:
 10113                           	opt stack 26
 10114                           
 10115                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10116                           
 10117                           ; BSR set to: 0
 10118                           ;incstack = 0
 10119  003710  0E00               	movlw	0
 10120  003712  6E3D               	movwf	_conversionFormat,c
 10121                           
 10122                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10123  003714  0E00               	movlw	0
 10124  003716  6E3C               	movwf	_adcSampleMode,c
 10125                           
 10126                           ;AdcApp.c: 26: char channel = 0;
 10127  003718  0E00               	movlw	0
 10128  00371A  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10129  00371C  0012               	return		;funcret
 10130  00371E                     __end_of_InitAdcApplicationMgr:
 10131                           	opt stack 0
 10132                           tosu	equ	0xFFF
 10133                           tosh	equ	0xFFE
 10134                           tosl	equ	0xFFD
 10135                           pclath	equ	0xFFA
 10136                           tblptru	equ	0xFF8
 10137                           tblptrh	equ	0xFF7
 10138                           tblptrl	equ	0xFF6
 10139                           tablat	equ	0xFF5
 10140                           prodh	equ	0xFF4
 10141                           prodl	equ	0xFF3
 10142                           intcon	equ	0xFF2
 10143                           intcon2	equ	0xFF1
 10144                           postinc0	equ	0xFEE
 10145                           wreg	equ	0xFE8
 10146                           indf1	equ	0xFE7
 10147                           postdec1	equ	0xFE5
 10148                           fsr1h	equ	0xFE2
 10149                           fsr1l	equ	0xFE1
 10150                           indf2	equ	0xFDF
 10151                           postinc2	equ	0xFDE
 10152                           postdec2	equ	0xFDD
 10153                           fsr2h	equ	0xFDA
 10154                           fsr2l	equ	0xFD9
 10155                           status	equ	0xFD8
 10156                           
 10157 ;; *************** function _DacInit *****************
 10158 ;; Defined at:
 10159 ;;		line 24 in file "DacApp.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;		None
 10162 ;; Auto vars:     Size  Location     Type
 10163 ;;		None
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  1    wreg      void 
 10166 ;; Registers used:
 10167 ;;		wreg, status,2, status,0, cstack
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10173 ;;      Params:         0       0       0       0       0       0       0
 10174 ;;      Locals:         0       0       0       0       0       0       0
 10175 ;;      Temps:          0       0       0       0       0       0       0
 10176 ;;      Totals:         0       0       0       0       0       0       0
 10177 ;;Total ram usage:        0 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; Hardware stack levels required when called:    6
 10180 ;; This function calls:
 10181 ;;		_SWSPI_send_word
 10182 ;; This function is called by:
 10183 ;;		_InitSystemApplicationManagers
 10184 ;; This function uses a non-reentrant model
 10185 ;;
 10186                           
 10187                           	psect	text69
 10188  002882                     __ptext69:
 10189                           	opt stack 0
 10190  002882                     _DacInit:
 10191                           	opt stack 23
 10192                           
 10193                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 10194                           
 10195                           ;incstack = 0
 10196  002882  0E44               	movlw	68
 10197  002884  6E21               	movwf	SWSPI_send_word@data,c
 10198  002886  0E23               	movlw	35
 10199  002888  6E22               	movwf	SWSPI_send_word@data+1,c
 10200  00288A  0E00               	movlw	0
 10201  00288C  6E23               	movwf	SWSPI_send_word@data+2,c
 10202  00288E  0E00               	movlw	0
 10203  002890  6E24               	movwf	SWSPI_send_word@data+3,c
 10204  002892  0E01               	movlw	1
 10205  002894  6E25               	movwf	SWSPI_send_word@dataSize,c
 10206  002896  0E02               	movlw	2
 10207  002898  ECA6  F011         	call	_SWSPI_send_word
 10208                           
 10209                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 10210  00289C  0E44               	movlw	68
 10211  00289E  6E21               	movwf	SWSPI_send_word@data,c
 10212  0028A0  0E63               	movlw	99
 10213  0028A2  6E22               	movwf	SWSPI_send_word@data+1,c
 10214  0028A4  0E00               	movlw	0
 10215  0028A6  6E23               	movwf	SWSPI_send_word@data+2,c
 10216  0028A8  0E00               	movlw	0
 10217  0028AA  6E24               	movwf	SWSPI_send_word@data+3,c
 10218  0028AC  0E01               	movlw	1
 10219  0028AE  6E25               	movwf	SWSPI_send_word@dataSize,c
 10220  0028B0  0E02               	movlw	2
 10221  0028B2  ECA6  F011         	call	_SWSPI_send_word
 10222                           
 10223                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 10224  0028B6  0E44               	movlw	68
 10225  0028B8  6E21               	movwf	SWSPI_send_word@data,c
 10226  0028BA  0EA3               	movlw	163
 10227  0028BC  6E22               	movwf	SWSPI_send_word@data+1,c
 10228  0028BE  0E00               	movlw	0
 10229  0028C0  6E23               	movwf	SWSPI_send_word@data+2,c
 10230  0028C2  0E00               	movlw	0
 10231  0028C4  6E24               	movwf	SWSPI_send_word@data+3,c
 10232  0028C6  0E01               	movlw	1
 10233  0028C8  6E25               	movwf	SWSPI_send_word@dataSize,c
 10234  0028CA  0E02               	movlw	2
 10235  0028CC  ECA6  F011         	call	_SWSPI_send_word
 10236                           
 10237                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 10238  0028D0  0E44               	movlw	68
 10239  0028D2  6E21               	movwf	SWSPI_send_word@data,c
 10240  0028D4  0EE3               	movlw	227
 10241  0028D6  6E22               	movwf	SWSPI_send_word@data+1,c
 10242  0028D8  0E00               	movlw	0
 10243  0028DA  6E23               	movwf	SWSPI_send_word@data+2,c
 10244  0028DC  0E00               	movlw	0
 10245  0028DE  6E24               	movwf	SWSPI_send_word@data+3,c
 10246  0028E0  0E01               	movlw	1
 10247  0028E2  6E25               	movwf	SWSPI_send_word@dataSize,c
 10248  0028E4  0E02               	movlw	2
 10249  0028E6  ECA6  F011         	call	_SWSPI_send_word
 10250  0028EA  0012               	return		;funcret
 10251  0028EC                     __end_of_DacInit:
 10252                           	opt stack 0
 10253                           tosu	equ	0xFFF
 10254                           tosh	equ	0xFFE
 10255                           tosl	equ	0xFFD
 10256                           pclath	equ	0xFFA
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon2	equ	0xFF1
 10265                           postinc0	equ	0xFEE
 10266                           wreg	equ	0xFE8
 10267                           indf1	equ	0xFE7
 10268                           postdec1	equ	0xFE5
 10269                           fsr1h	equ	0xFE2
 10270                           fsr1l	equ	0xFE1
 10271                           indf2	equ	0xFDF
 10272                           postinc2	equ	0xFDE
 10273                           postdec2	equ	0xFDD
 10274                           fsr2h	equ	0xFDA
 10275                           fsr2l	equ	0xFD9
 10276                           status	equ	0xFD8
 10277                           
 10278 ;; *************** function _SWSPI_send_word *****************
 10279 ;; Defined at:
 10280 ;;		line 17 in file "SwSpiApp.c"
 10281 ;; Parameters:    Size  Location     Type
 10282 ;;  phrType         1    wreg     enum E7538
 10283 ;;  data            4   32[COMRAM] unsigned long 
 10284 ;;  dataSize        1   36[COMRAM] unsigned char 
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;  phrType         1   40[COMRAM] enum E7538
 10287 ;;  datac           1   37[COMRAM] unsigned char 
 10288 ;;  idx             2   38[COMRAM] int 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  1    wreg      void 
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, status,0, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10298 ;;      Params:         5       0       0       0       0       0       0
 10299 ;;      Locals:         4       0       0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0
 10301 ;;      Totals:         9       0       0       0       0       0       0
 10302 ;;Total ram usage:        9 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    5
 10305 ;; This function calls:
 10306 ;;		_SWSPI_send_bits
 10307 ;;		_SwSpi_Set_Dac_Sync_Pin
 10308 ;;		_SwSpi_Set_Synth_Le_Pin
 10309 ;;		_make8
 10310 ;; This function is called by:
 10311 ;;		_DacInit
 10312 ;;		_DacSetValue
 10313 ;;		_PLLInitialize
 10314 ;;		_UpdateTxFreq
 10315 ;;		_UpdateRxFreq
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text70
 10320  00234C                     __ptext70:
 10321                           	opt stack 0
 10322  00234C                     _SWSPI_send_word:
 10323                           	opt stack 22
 10324                           
 10325                           ;incstack = 0
 10326                           ;SWSPI_send_word@phrType stored from wreg
 10327  00234C  6E29               	movwf	SWSPI_send_word@phrType,c
 10328                           
 10329                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10330  00234E  9EF2               	bcf	intcon,7,c	;volatile
 10331                           
 10332                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10333  002350  5029               	movf	SWSPI_send_word@phrType,w,c
 10334  002352  B4D8               	btfsc	status,2,c
 10335  002354  D003               	goto	u6650
 10336  002356  0429               	decf	SWSPI_send_word@phrType,w,c
 10337  002358  A4D8               	btfss	status,2,c
 10338  00235A  D006               	goto	l567
 10339  00235C                     u6650:
 10340                           
 10341                           ;SwSpiApp.c: 24: {
 10342                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10343  00235C  0E00               	movlw	0
 10344  00235E  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10345  002360  5029               	movf	SWSPI_send_word@phrType,w,c
 10346  002362  ECC1  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10347                           
 10348                           ;SwSpiApp.c: 26: }
 10349  002366  D007               	goto	l571
 10350  002368                     l567:
 10351                           
 10352                           ;SwSpiApp.c: 27: else if(phrType == EXT_DAC)
 10353  002368  0E02               	movlw	2
 10354  00236A  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10355  00236C  A4D8               	btfss	status,2,c
 10356  00236E  D003               	goto	l571
 10357                           
 10358                           ;SwSpiApp.c: 28: {
 10359                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 10360  002370  0E00               	movlw	0
 10361  002372  EC05  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10362  002376                     l571:
 10363                           
 10364                           ;SwSpiApp.c: 30: }
 10365                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 10366  002376  0E01               	movlw	1
 10367  002378  2425               	addwf	SWSPI_send_word@dataSize,w,c
 10368  00237A  6E27               	movwf	SWSPI_send_word@idx,c
 10369  00237C  6A28               	clrf	SWSPI_send_word@idx+1,c
 10370  00237E  0E00               	movlw	0
 10371  002380  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 10372  002382                     l6940:
 10373  002382  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 10374  002384  D01B               	goto	u6680
 10375  002386  5028               	movf	SWSPI_send_word@idx+1,w,c
 10376  002388  E103               	bnz	l6944
 10377  00238A  0427               	decf	SWSPI_send_word@idx,w,c
 10378  00238C  A0D8               	btfss	status,0,c
 10379  00238E  D016               	goto	u6680
 10380  002390                     l6944:
 10381                           
 10382                           ;SwSpiApp.c: 36: {
 10383                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 10384  002390  C021  F018         	movff	SWSPI_send_word@data,make8@data
 10385  002394  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10386  002398  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10387  00239C  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10388  0023A0  0427               	decf	SWSPI_send_word@idx,w,c
 10389  0023A2  6E1C               	movwf	make8@dataLocation,c
 10390  0023A4  EC66  F015         	call	_make8	;wreg free
 10391  0023A8  6E26               	movwf	SWSPI_send_word@datac,c
 10392                           
 10393                           ;SwSpiApp.c: 38: SWSPI_send_bits(phrType, datac);
 10394  0023AA  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_send_bits@data
 10395  0023AE  5029               	movf	SWSPI_send_word@phrType,w,c
 10396  0023B0  ECEE  F015         	call	_SWSPI_send_bits
 10397  0023B4  0627               	decf	SWSPI_send_word@idx,f,c
 10398  0023B6  A0D8               	btfss	status,0,c
 10399  0023B8  0628               	decf	SWSPI_send_word@idx+1,f,c
 10400  0023BA  D7E3               	goto	l6940
 10401  0023BC                     u6680:
 10402                           
 10403                           ;SwSpiApp.c: 39: }
 10404                           ;SwSpiApp.c: 44: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10405  0023BC  5029               	movf	SWSPI_send_word@phrType,w,c
 10406  0023BE  B4D8               	btfsc	status,2,c
 10407  0023C0  D003               	goto	u6700
 10408  0023C2  0429               	decf	SWSPI_send_word@phrType,w,c
 10409  0023C4  A4D8               	btfss	status,2,c
 10410  0023C6  D006               	goto	l574
 10411  0023C8                     u6700:
 10412                           
 10413                           ;SwSpiApp.c: 45: {
 10414                           ;SwSpiApp.c: 46: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10415  0023C8  0E01               	movlw	1
 10416  0023CA  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10417  0023CC  5029               	movf	SWSPI_send_word@phrType,w,c
 10418  0023CE  ECC1  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10419                           
 10420                           ;SwSpiApp.c: 47: }
 10421  0023D2  D007               	goto	l578
 10422  0023D4                     l574:
 10423                           
 10424                           ;SwSpiApp.c: 48: else if(phrType == EXT_DAC)
 10425  0023D4  0E02               	movlw	2
 10426  0023D6  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10427  0023D8  A4D8               	btfss	status,2,c
 10428  0023DA  D003               	goto	l578
 10429                           
 10430                           ;SwSpiApp.c: 49: {
 10431                           ;SwSpiApp.c: 50: SwSpi_Set_Dac_Sync_Pin(1);
 10432  0023DC  0E01               	movlw	1
 10433  0023DE  EC05  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10434  0023E2                     l578:
 10435                           
 10436                           ;SwSpiApp.c: 51: }
 10437                           ;SwSpiApp.c: 54: (INTCONbits.GIE = 1);
 10438  0023E2  8EF2               	bsf	intcon,7,c	;volatile
 10439  0023E4  0012               	return		;funcret
 10440  0023E6                     __end_of_SWSPI_send_word:
 10441                           	opt stack 0
 10442                           tosu	equ	0xFFF
 10443                           tosh	equ	0xFFE
 10444                           tosl	equ	0xFFD
 10445                           pclath	equ	0xFFA
 10446                           tblptru	equ	0xFF8
 10447                           tblptrh	equ	0xFF7
 10448                           tblptrl	equ	0xFF6
 10449                           tablat	equ	0xFF5
 10450                           prodh	equ	0xFF4
 10451                           prodl	equ	0xFF3
 10452                           intcon	equ	0xFF2
 10453                           intcon2	equ	0xFF1
 10454                           postinc0	equ	0xFEE
 10455                           wreg	equ	0xFE8
 10456                           indf1	equ	0xFE7
 10457                           postdec1	equ	0xFE5
 10458                           fsr1h	equ	0xFE2
 10459                           fsr1l	equ	0xFE1
 10460                           indf2	equ	0xFDF
 10461                           postinc2	equ	0xFDE
 10462                           postdec2	equ	0xFDD
 10463                           fsr2h	equ	0xFDA
 10464                           fsr2l	equ	0xFD9
 10465                           status	equ	0xFD8
 10466                           
 10467 ;; *************** function _make8 *****************
 10468 ;; Defined at:
 10469 ;;		line 62 in file "SystemCommon.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;  data            4   23[COMRAM] unsigned long 
 10472 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      unsigned char 
 10477 ;; Registers used:
 10478 ;;		wreg, status,2, status,0
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10484 ;;      Params:         5       0       0       0       0       0       0
 10485 ;;      Locals:         0       0       0       0       0       0       0
 10486 ;;      Temps:          4       0       0       0       0       0       0
 10487 ;;      Totals:         9       0       0       0       0       0       0
 10488 ;;Total ram usage:        9 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    3
 10491 ;; This function calls:
 10492 ;;		Nothing
 10493 ;; This function is called by:
 10494 ;;		_FlashReadCondition
 10495 ;;		_SWSPI_send_word
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	text71
 10500  002ACC                     __ptext71:
 10501                           	opt stack 0
 10502  002ACC                     _make8:
 10503                           	opt stack 23
 10504                           
 10505                           ;SystemCommon.c: 64: switch(dataLocation)
 10506                           
 10507                           ;incstack = 0
 10508  002ACC  D01F               	goto	l1273
 10509  002ACE                     
 10510                           ;SystemCommon.c: 67: return (data & 0x000000ff);
 10511  002ACE  5018               	movf	make8@data,w,c
 10512  002AD0  0012               	return	
 10513  002AD2                     
 10514                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
 10515  002AD2  5019               	movf	make8@data+1,w,c
 10516  002AD4  0012               	return	
 10517  002AD6                     
 10518                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
 10519  002AD6  501A               	movf	make8@data+2,w,c
 10520  002AD8  0012               	return	
 10521  002ADA                     
 10522                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
 10523  002ADA  0E00               	movlw	0
 10524  002ADC  1418               	andwf	make8@data,w,c
 10525  002ADE  6E1D               	movwf	??_make8& (0+255),c
 10526  002AE0  0E00               	movlw	0
 10527  002AE2  1419               	andwf	make8@data+1,w,c
 10528  002AE4  6E1E               	movwf	(??_make8+1)& (0+255),c
 10529  002AE6  0E00               	movlw	0
 10530  002AE8  141A               	andwf	make8@data+2,w,c
 10531  002AEA  6E1F               	movwf	(??_make8+2)& (0+255),c
 10532  002AEC  0EFF               	movlw	255
 10533  002AEE  141B               	andwf	make8@data+3,w,c
 10534  002AF0  6E20               	movwf	(??_make8+3)& (0+255),c
 10535  002AF2  0E19               	movlw	25
 10536  002AF4  D005               	goto	u6080
 10537  002AF6                     u6085:
 10538  002AF6  90D8               	bcf	status,0,c
 10539  002AF8  3220               	rrcf	??_make8+3,f,c
 10540  002AFA  321F               	rrcf	??_make8+2,f,c
 10541  002AFC  321E               	rrcf	??_make8+1,f,c
 10542  002AFE  321D               	rrcf	??_make8,f,c
 10543  002B00                     u6080:
 10544  002B00  2EE8               	decfsz	wreg,f,c
 10545  002B02  D7F9               	goto	u6085
 10546  002B04  501D               	movf	??_make8,w,c
 10547  002B06  0012               	return	
 10548  002B08                     
 10549                           ;SystemCommon.c: 79: return (0);
 10550  002B08  0E00               	movlw	0
 10551                           
 10552                           ;SystemCommon.c: 80: }
 10553  002B0A  0012               	return	
 10554  002B0C                     l1273:
 10555  002B0C  501C               	movf	make8@dataLocation,w,c
 10556                           
 10557                           ; Switch size 1, requested type "space"
 10558                           ; Number of cases is 4, Range of values is 0 to 3
 10559                           ; switch strategies available:
 10560                           ; Name         Instructions Cycles
 10561                           ; simple_byte           13     7 (average)
 10562                           ;	Chosen strategy is simple_byte
 10563  002B0E  0A00               	xorlw	0	; case 0
 10564  002B10  B4D8               	btfsc	status,2,c
 10565  002B12  D7DD               	goto	l1274
 10566  002B14  0A01               	xorlw	1	; case 1
 10567  002B16  B4D8               	btfsc	status,2,c
 10568  002B18  D7DC               	goto	l1276
 10569  002B1A  0A03               	xorlw	3	; case 2
 10570  002B1C  B4D8               	btfsc	status,2,c
 10571  002B1E  D7DB               	goto	l1277
 10572  002B20  0A01               	xorlw	1	; case 3
 10573  002B22  B4D8               	btfsc	status,2,c
 10574  002B24  D7DA               	goto	l1278
 10575  002B26  D7F0               	goto	l1279
 10576  002B28                     __end_of_make8:
 10577                           	opt stack 0
 10578                           tosu	equ	0xFFF
 10579                           tosh	equ	0xFFE
 10580                           tosl	equ	0xFFD
 10581                           pclath	equ	0xFFA
 10582                           tblptru	equ	0xFF8
 10583                           tblptrh	equ	0xFF7
 10584                           tblptrl	equ	0xFF6
 10585                           tablat	equ	0xFF5
 10586                           prodh	equ	0xFF4
 10587                           prodl	equ	0xFF3
 10588                           intcon	equ	0xFF2
 10589                           intcon2	equ	0xFF1
 10590                           postinc0	equ	0xFEE
 10591                           wreg	equ	0xFE8
 10592                           indf1	equ	0xFE7
 10593                           postdec1	equ	0xFE5
 10594                           fsr1h	equ	0xFE2
 10595                           fsr1l	equ	0xFE1
 10596                           indf2	equ	0xFDF
 10597                           postinc2	equ	0xFDE
 10598                           postdec2	equ	0xFDD
 10599                           fsr2h	equ	0xFDA
 10600                           fsr2l	equ	0xFD9
 10601                           status	equ	0xFD8
 10602                           
 10603 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10604 ;; Defined at:
 10605 ;;		line 224 in file "SwSpiApp.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;  phrType         1    wreg     enum E7538
 10608 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  phrType         1   24[COMRAM] enum E7538
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  1    wreg      void 
 10613 ;; Registers used:
 10614 ;;		wreg, status,2, status,0
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10620 ;;      Params:         1       0       0       0       0       0       0
 10621 ;;      Locals:         1       0       0       0       0       0       0
 10622 ;;      Temps:          0       0       0       0       0       0       0
 10623 ;;      Totals:         2       0       0       0       0       0       0
 10624 ;;Total ram usage:        2 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    3
 10627 ;; This function calls:
 10628 ;;		Nothing
 10629 ;; This function is called by:
 10630 ;;		_SWSPI_send_word
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text72
 10635  003182                     __ptext72:
 10636                           	opt stack 0
 10637  003182                     _SwSpi_Set_Synth_Le_Pin:
 10638                           	opt stack 23
 10639                           
 10640                           ;incstack = 0
 10641                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10642  003182  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10643                           
 10644                           ;SwSpiApp.c: 226: switch(phrType)
 10645  003184  D014               	goto	l677
 10646  003186                     
 10647                           ;SwSpiApp.c: 229: if(cPinMode == 1)
 10648  003186  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10649  003188  A4D8               	btfss	status,2,c
 10650  00318A  D002               	goto	l679
 10651                           
 10652                           ;SwSpiApp.c: 230: {
 10653                           ;SwSpiApp.c: 231: do { LATCbits.LATC2 = 1; } while(0);
 10654  00318C  848B               	bsf	3979,2,c	;volatile
 10655                           
 10656                           ;SwSpiApp.c: 232: }
 10657  00318E  0012               	return	
 10658  003190                     l679:
 10659                           
 10660                           ;SwSpiApp.c: 233: else if(cPinMode == 0)
 10661  003190  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10662  003192  A4D8               	btfss	status,2,c
 10663  003194  0012               	return	
 10664                           
 10665                           ;SwSpiApp.c: 234: {
 10666                           ;SwSpiApp.c: 235: do { LATCbits.LATC2 = 0; } while(0);
 10667  003196  948B               	bcf	3979,2,c	;volatile
 10668                           
 10669                           ;SwSpiApp.c: 236: }
 10670                           ;SwSpiApp.c: 237: break;
 10671  003198  0012               	return	
 10672  00319A                     
 10673                           ;SwSpiApp.c: 240: if(cPinMode == 1)
 10674  00319A  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10675  00319C  A4D8               	btfss	status,2,c
 10676  00319E  D002               	goto	l688
 10677                           
 10678                           ;SwSpiApp.c: 241: {
 10679                           ;SwSpiApp.c: 242: do { LATDbits.LATD3 = 1; } while(0);
 10680  0031A0  868C               	bsf	3980,3,c	;volatile
 10681                           
 10682                           ;SwSpiApp.c: 243: }
 10683  0031A2  0012               	return	
 10684  0031A4                     l688:
 10685                           
 10686                           ;SwSpiApp.c: 244: else if(cPinMode == 0)
 10687  0031A4  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10688  0031A6  A4D8               	btfss	status,2,c
 10689  0031A8  0012               	return	
 10690                           
 10691                           ;SwSpiApp.c: 245: {
 10692                           ;SwSpiApp.c: 246: do { LATDbits.LATD3 = 0; } while(0);
 10693  0031AA  968C               	bcf	3980,3,c	;volatile
 10694                           
 10695                           ;SwSpiApp.c: 249: }
 10696                           
 10697                           ;SwSpiApp.c: 247: }
 10698                           ;SwSpiApp.c: 248: break;
 10699  0031AC  0012               	return	
 10700  0031AE                     l677:
 10701  0031AE  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10702                           
 10703                           ; Switch size 1, requested type "space"
 10704                           ; Number of cases is 2, Range of values is 0 to 1
 10705                           ; switch strategies available:
 10706                           ; Name         Instructions Cycles
 10707                           ; simple_byte            7     4 (average)
 10708                           ;	Chosen strategy is simple_byte
 10709  0031B0  0A00               	xorlw	0	; case 0
 10710  0031B2  B4D8               	btfsc	status,2,c
 10711  0031B4  D7E8               	goto	l678
 10712  0031B6  0A01               	xorlw	1	; case 1
 10713  0031B8  A4D8               	btfss	status,2,c
 10714  0031BA  0012               	return	
 10715  0031BC  D7EE               	goto	l687
 10716  0031BE                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10717                           	opt stack 0
 10718                           tosu	equ	0xFFF
 10719                           tosh	equ	0xFFE
 10720                           tosl	equ	0xFFD
 10721                           pclath	equ	0xFFA
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           intcon2	equ	0xFF1
 10730                           postinc0	equ	0xFEE
 10731                           wreg	equ	0xFE8
 10732                           indf1	equ	0xFE7
 10733                           postdec1	equ	0xFE5
 10734                           fsr1h	equ	0xFE2
 10735                           fsr1l	equ	0xFE1
 10736                           indf2	equ	0xFDF
 10737                           postinc2	equ	0xFDE
 10738                           postdec2	equ	0xFDD
 10739                           fsr2h	equ	0xFDA
 10740                           fsr2l	equ	0xFD9
 10741                           status	equ	0xFD8
 10742                           
 10743 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10744 ;; Defined at:
 10745 ;;		line 252 in file "SwSpiApp.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  cPinMode        1    wreg     unsigned char 
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10750 ;; Return value:  Size  Location     Type
 10751 ;;                  1    wreg      void 
 10752 ;; Registers used:
 10753 ;;		wreg, status,2, status,0
 10754 ;; Tracked objects:
 10755 ;;		On entry : 0/0
 10756 ;;		On exit  : 0/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10759 ;;      Params:         0       0       0       0       0       0       0
 10760 ;;      Locals:         1       0       0       0       0       0       0
 10761 ;;      Temps:          0       0       0       0       0       0       0
 10762 ;;      Totals:         1       0       0       0       0       0       0
 10763 ;;Total ram usage:        1 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    3
 10766 ;; This function calls:
 10767 ;;		Nothing
 10768 ;; This function is called by:
 10769 ;;		_SWSPI_send_word
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           	psect	text73
 10774  00360A                     __ptext73:
 10775                           	opt stack 0
 10776  00360A                     _SwSpi_Set_Dac_Sync_Pin:
 10777                           	opt stack 23
 10778                           
 10779                           ;incstack = 0
 10780                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10781  00360A  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10782                           
 10783                           ;SwSpiApp.c: 254: switch(cPinMode)
 10784  00360C  D004               	goto	l698
 10785  00360E                     
 10786                           ;SwSpiApp.c: 257: do { LATAbits.LATA2 = 0; } while(0);
 10787  00360E  9489               	bcf	3977,2,c	;volatile
 10788                           
 10789                           ;SwSpiApp.c: 258: break;
 10790  003610  0012               	return	
 10791  003612                     
 10792                           ;SwSpiApp.c: 261: do { LATAbits.LATA2 = 1; } while(0);
 10793  003612  8489               	bsf	3977,2,c	;volatile
 10794                           
 10795                           ;SwSpiApp.c: 263: }
 10796                           
 10797                           ;SwSpiApp.c: 262: break;
 10798  003614  0012               	return	
 10799  003616                     l698:
 10800  003616  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10801                           
 10802                           ; Switch size 1, requested type "space"
 10803                           ; Number of cases is 2, Range of values is 0 to 1
 10804                           ; switch strategies available:
 10805                           ; Name         Instructions Cycles
 10806                           ; simple_byte            7     4 (average)
 10807                           ;	Chosen strategy is simple_byte
 10808  003618  0A00               	xorlw	0	; case 0
 10809  00361A  B4D8               	btfsc	status,2,c
 10810  00361C  D7F8               	goto	l699
 10811  00361E  0A01               	xorlw	1	; case 1
 10812  003620  A4D8               	btfss	status,2,c
 10813  003622  0012               	return	
 10814  003624  D7F6               	goto	l703
 10815  003626                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10816                           	opt stack 0
 10817                           tosu	equ	0xFFF
 10818                           tosh	equ	0xFFE
 10819                           tosl	equ	0xFFD
 10820                           pclath	equ	0xFFA
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           intcon2	equ	0xFF1
 10829                           postinc0	equ	0xFEE
 10830                           wreg	equ	0xFE8
 10831                           indf1	equ	0xFE7
 10832                           postdec1	equ	0xFE5
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           postdec2	equ	0xFDD
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function _SWSPI_send_bits *****************
 10843 ;; Defined at:
 10844 ;;		line 57 in file "SwSpiApp.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  phrType         1    wreg     enum E7538
 10847 ;;  data            1   25[COMRAM] unsigned char 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  phrType         1   27[COMRAM] enum E7538
 10850 ;;  count           1   26[COMRAM] unsigned char 
 10851 ;; Return value:  Size  Location     Type
 10852 ;;                  1    wreg      void 
 10853 ;; Registers used:
 10854 ;;		wreg, status,2, status,0, cstack
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10860 ;;      Params:         1       0       0       0       0       0       0
 10861 ;;      Locals:         2       0       0       0       0       0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0
 10863 ;;      Totals:         3       0       0       0       0       0       0
 10864 ;;Total ram usage:        3 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; Hardware stack levels required when called:    4
 10867 ;; This function calls:
 10868 ;;		_SwSpi_Clk_Pin
 10869 ;;		_SwSpi_Data_Pin
 10870 ;; This function is called by:
 10871 ;;		_SWSPI_send_word
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text74
 10876  002BDC                     __ptext74:
 10877                           	opt stack 0
 10878  002BDC                     _SWSPI_send_bits:
 10879                           	opt stack 22
 10880                           
 10881                           ;incstack = 0
 10882                           ;SWSPI_send_bits@phrType stored from wreg
 10883  002BDC  6E1C               	movwf	SWSPI_send_bits@phrType,c
 10884                           
 10885                           ;SwSpiApp.c: 59: uint8_t count;
 10886                           ;SwSpiApp.c: 60: for (count = 8; count ; count--, data <<= 1)
 10887  002BDE  0E08               	movlw	8
 10888  002BE0  6E1B               	movwf	SWSPI_send_bits@count,c
 10889  002BE2  D01A               	goto	l582
 10890  002BE4                     
 10891                           ;SwSpiApp.c: 61: {
 10892                           ;SwSpiApp.c: 63: {
 10893                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 1);
 10894  002BE4  0E01               	movlw	1
 10895  002BE6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10896  002BE8  501C               	movf	SWSPI_send_bits@phrType,w,c
 10897  002BEA  EC70  F016         	call	_SwSpi_Clk_Pin
 10898                           
 10899                           ;SwSpiApp.c: 65: }
 10900                           ;SwSpiApp.c: 67: if (data & 0X80)
 10901  002BEE  AE1A               	btfss	SWSPI_send_bits@data,7,c
 10902  002BF0  D006               	goto	l584
 10903                           
 10904                           ;SwSpiApp.c: 68: {
 10905                           ;SwSpiApp.c: 70: SwSpi_Data_Pin(phrType, 1);
 10906  002BF2  0E01               	movlw	1
 10907  002BF4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10908  002BF6  501C               	movf	SWSPI_send_bits@phrType,w,c
 10909  002BF8  EC45  F016         	call	_SwSpi_Data_Pin
 10910                           
 10911                           ;SwSpiApp.c: 71: }
 10912  002BFC  D005               	goto	l585
 10913  002BFE                     l584:
 10914                           
 10915                           ;SwSpiApp.c: 72: else
 10916                           ;SwSpiApp.c: 73: {
 10917                           ;SwSpiApp.c: 74: SwSpi_Data_Pin(phrType, 0);
 10918  002BFE  0E00               	movlw	0
 10919  002C00  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10920  002C02  501C               	movf	SWSPI_send_bits@phrType,w,c
 10921  002C04  EC45  F016         	call	_SwSpi_Data_Pin
 10922  002C08                     l585:
 10923                           
 10924                           ;SwSpiApp.c: 75: }
 10925                           ;SwSpiApp.c: 77: SwSpi_Clk_Pin(phrType, 0);
 10926  002C08  0E00               	movlw	0
 10927  002C0A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10928  002C0C  501C               	movf	SWSPI_send_bits@phrType,w,c
 10929  002C0E  EC70  F016         	call	_SwSpi_Clk_Pin
 10930  002C12  061B               	decf	SWSPI_send_bits@count,f,c
 10931  002C14  90D8               	bcf	status,0,c
 10932  002C16  361A               	rlcf	SWSPI_send_bits@data,f,c
 10933  002C18                     l582:
 10934  002C18  501B               	movf	SWSPI_send_bits@count,w,c
 10935  002C1A  A4D8               	btfss	status,2,c
 10936  002C1C  D7E3               	goto	l583
 10937                           
 10938                           ;SwSpiApp.c: 85: }
 10939                           ;SwSpiApp.c: 87: SwSpi_Data_Pin(phrType, 0);
 10940  002C1E  0E00               	movlw	0
 10941  002C20  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10942  002C22  501C               	movf	SWSPI_send_bits@phrType,w,c
 10943  002C24  EC45  F016         	call	_SwSpi_Data_Pin
 10944                           
 10945                           ;SwSpiApp.c: 88: SwSpi_Clk_Pin(phrType, 0);
 10946  002C28  0E00               	movlw	0
 10947  002C2A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10948  002C2C  501C               	movf	SWSPI_send_bits@phrType,w,c
 10949  002C2E  EC70  F016         	call	_SwSpi_Clk_Pin
 10950  002C32  0012               	return		;funcret
 10951  002C34                     __end_of_SWSPI_send_bits:
 10952                           	opt stack 0
 10953                           tosu	equ	0xFFF
 10954                           tosh	equ	0xFFE
 10955                           tosl	equ	0xFFD
 10956                           pclath	equ	0xFFA
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           intcon2	equ	0xFF1
 10965                           postinc0	equ	0xFEE
 10966                           wreg	equ	0xFE8
 10967                           indf1	equ	0xFE7
 10968                           postdec1	equ	0xFE5
 10969                           fsr1h	equ	0xFE2
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function _SwSpi_Data_Pin *****************
 10979 ;; Defined at:
 10980 ;;		line 95 in file "SwSpiApp.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  phrType         1    wreg     enum E7538
 10983 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  phrType         1   24[COMRAM] enum E7538
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		wreg, status,2, status,0
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10995 ;;      Params:         1       0       0       0       0       0       0
 10996 ;;      Locals:         1       0       0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0
 10998 ;;      Totals:         2       0       0       0       0       0       0
 10999 ;;Total ram usage:        2 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    3
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_SWSPI_send_bits
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           	psect	text75
 11010  002C8A                     __ptext75:
 11011                           	opt stack 0
 11012  002C8A                     _SwSpi_Data_Pin:
 11013                           	opt stack 22
 11014                           
 11015                           ;incstack = 0
 11016                           ;SwSpi_Data_Pin@phrType stored from wreg
 11017  002C8A  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11018                           
 11019                           ;SwSpiApp.c: 97: switch(phrType)
 11020  002C8C  D01E               	goto	l590
 11021  002C8E                     
 11022                           ;SwSpiApp.c: 100: if(cPinMode == 1)
 11023  002C8E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11024  002C90  A4D8               	btfss	status,2,c
 11025  002C92  D002               	goto	l592
 11026                           
 11027                           ;SwSpiApp.c: 101: {
 11028                           ;SwSpiApp.c: 102: do { LATDbits.LATD0 = 1; } while(0);
 11029  002C94  808C               	bsf	3980,0,c	;volatile
 11030                           
 11031                           ;SwSpiApp.c: 103: }
 11032  002C96  0012               	return	
 11033  002C98                     l592:
 11034                           
 11035                           ;SwSpiApp.c: 104: else if (cPinMode == 0)
 11036  002C98  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11037  002C9A  A4D8               	btfss	status,2,c
 11038  002C9C  0012               	return	
 11039                           
 11040                           ;SwSpiApp.c: 105: {
 11041                           ;SwSpiApp.c: 106: do { LATDbits.LATD0 = 0; } while(0);
 11042  002C9E  908C               	bcf	3980,0,c	;volatile
 11043                           
 11044                           ;SwSpiApp.c: 107: }
 11045                           ;SwSpiApp.c: 108: break;
 11046  002CA0  0012               	return	
 11047  002CA2                     
 11048                           ;SwSpiApp.c: 111: if(cPinMode == 1)
 11049  002CA2  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11050  002CA4  A4D8               	btfss	status,2,c
 11051  002CA6  D002               	goto	l601
 11052                           
 11053                           ;SwSpiApp.c: 112: {
 11054                           ;SwSpiApp.c: 113: do { LATCbits.LATC5 = 1; } while(0);
 11055  002CA8  8A8B               	bsf	3979,5,c	;volatile
 11056                           
 11057                           ;SwSpiApp.c: 114: }
 11058  002CAA  0012               	return	
 11059  002CAC                     l601:
 11060                           
 11061                           ;SwSpiApp.c: 115: else if (cPinMode == 0)
 11062  002CAC  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11063  002CAE  A4D8               	btfss	status,2,c
 11064  002CB0  0012               	return	
 11065                           
 11066                           ;SwSpiApp.c: 116: {
 11067                           ;SwSpiApp.c: 117: do { LATCbits.LATC5 = 0; } while(0);
 11068  002CB2  9A8B               	bcf	3979,5,c	;volatile
 11069                           
 11070                           ;SwSpiApp.c: 118: }
 11071                           ;SwSpiApp.c: 119: break;
 11072  002CB4  0012               	return	
 11073  002CB6                     
 11074                           ;SwSpiApp.c: 122: if(cPinMode == 1)
 11075  002CB6  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11076  002CB8  A4D8               	btfss	status,2,c
 11077  002CBA  D002               	goto	l609
 11078                           
 11079                           ;SwSpiApp.c: 123: {
 11080                           ;SwSpiApp.c: 124: do { LATAbits.LATA4 = 1; } while(0);
 11081  002CBC  8889               	bsf	3977,4,c	;volatile
 11082                           
 11083                           ;SwSpiApp.c: 125: }
 11084  002CBE  0012               	return	
 11085  002CC0                     l609:
 11086                           
 11087                           ;SwSpiApp.c: 126: else if (cPinMode == 0)
 11088  002CC0  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11089  002CC2  A4D8               	btfss	status,2,c
 11090  002CC4  0012               	return	
 11091                           
 11092                           ;SwSpiApp.c: 127: {
 11093                           ;SwSpiApp.c: 128: do { LATAbits.LATA4 = 0; } while(0);
 11094  002CC6  9889               	bcf	3977,4,c	;volatile
 11095                           
 11096                           ;SwSpiApp.c: 131: }
 11097                           
 11098                           ;SwSpiApp.c: 129: }
 11099                           ;SwSpiApp.c: 130: break;
 11100  002CC8  0012               	return	
 11101  002CCA                     l590:
 11102  002CCA  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11103                           
 11104                           ; Switch size 1, requested type "space"
 11105                           ; Number of cases is 3, Range of values is 0 to 2
 11106                           ; switch strategies available:
 11107                           ; Name         Instructions Cycles
 11108                           ; simple_byte           10     6 (average)
 11109                           ;	Chosen strategy is simple_byte
 11110  002CCC  0A00               	xorlw	0	; case 0
 11111  002CCE  B4D8               	btfsc	status,2,c
 11112  002CD0  D7DE               	goto	l591
 11113  002CD2  0A01               	xorlw	1	; case 1
 11114  002CD4  B4D8               	btfsc	status,2,c
 11115  002CD6  D7E5               	goto	l600
 11116  002CD8  0A03               	xorlw	3	; case 2
 11117  002CDA  A4D8               	btfss	status,2,c
 11118  002CDC  0012               	return	
 11119  002CDE  D7EB               	goto	l608
 11120  002CE0                     __end_of_SwSpi_Data_Pin:
 11121                           	opt stack 0
 11122                           tosu	equ	0xFFF
 11123                           tosh	equ	0xFFE
 11124                           tosl	equ	0xFFD
 11125                           pclath	equ	0xFFA
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           intcon2	equ	0xFF1
 11134                           postinc0	equ	0xFEE
 11135                           wreg	equ	0xFE8
 11136                           indf1	equ	0xFE7
 11137                           postdec1	equ	0xFE5
 11138                           fsr1h	equ	0xFE2
 11139                           fsr1l	equ	0xFE1
 11140                           indf2	equ	0xFDF
 11141                           postinc2	equ	0xFDE
 11142                           postdec2	equ	0xFDD
 11143                           fsr2h	equ	0xFDA
 11144                           fsr2l	equ	0xFD9
 11145                           status	equ	0xFD8
 11146                           
 11147 ;; *************** function _SwSpi_Clk_Pin *****************
 11148 ;; Defined at:
 11149 ;;		line 134 in file "SwSpiApp.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  phrType         1    wreg     enum E7538
 11152 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  phrType         1   24[COMRAM] enum E7538
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      void 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2, status,0
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11164 ;;      Params:         1       0       0       0       0       0       0
 11165 ;;      Locals:         1       0       0       0       0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0
 11167 ;;      Totals:         2       0       0       0       0       0       0
 11168 ;;Total ram usage:        2 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_SWSPI_send_bits
 11175 ;;		_SwSpi_Synth_Toggle_Clock
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	text76
 11180  002CE0                     __ptext76:
 11181                           	opt stack 0
 11182  002CE0                     _SwSpi_Clk_Pin:
 11183                           	opt stack 22
 11184                           
 11185                           ;incstack = 0
 11186                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11187  002CE0  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11188                           
 11189                           ;SwSpiApp.c: 136: switch(phrType)
 11190  002CE2  D01E               	goto	l619
 11191  002CE4                     
 11192                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 11193  002CE4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11194  002CE6  A4D8               	btfss	status,2,c
 11195  002CE8  D002               	goto	l621
 11196                           
 11197                           ;SwSpiApp.c: 140: {
 11198                           ;SwSpiApp.c: 141: do { LATCbits.LATC3 = 1; } while(0);
 11199  002CEA  868B               	bsf	3979,3,c	;volatile
 11200                           
 11201                           ;SwSpiApp.c: 142: }
 11202  002CEC  0012               	return	
 11203  002CEE                     l621:
 11204                           
 11205                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 11206  002CEE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11207  002CF0  A4D8               	btfss	status,2,c
 11208  002CF2  0012               	return	
 11209                           
 11210                           ;SwSpiApp.c: 144: {
 11211                           ;SwSpiApp.c: 145: do { LATCbits.LATC3 = 0; } while(0);
 11212  002CF4  968B               	bcf	3979,3,c	;volatile
 11213                           
 11214                           ;SwSpiApp.c: 146: }
 11215                           ;SwSpiApp.c: 147: break;
 11216  002CF6  0012               	return	
 11217  002CF8                     
 11218                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 11219  002CF8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11220  002CFA  A4D8               	btfss	status,2,c
 11221  002CFC  D002               	goto	l630
 11222                           
 11223                           ;SwSpiApp.c: 151: {
 11224                           ;SwSpiApp.c: 152: do { LATCbits.LATC4 = 1; } while(0);
 11225  002CFE  888B               	bsf	3979,4,c	;volatile
 11226                           
 11227                           ;SwSpiApp.c: 153: }
 11228  002D00  0012               	return	
 11229  002D02                     l630:
 11230                           
 11231                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 11232  002D02  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11233  002D04  A4D8               	btfss	status,2,c
 11234  002D06  0012               	return	
 11235                           
 11236                           ;SwSpiApp.c: 155: {
 11237                           ;SwSpiApp.c: 156: do { LATCbits.LATC4 = 0; } while(0);
 11238  002D08  988B               	bcf	3979,4,c	;volatile
 11239                           
 11240                           ;SwSpiApp.c: 157: }
 11241                           ;SwSpiApp.c: 159: break;
 11242  002D0A  0012               	return	
 11243  002D0C                     
 11244                           ;SwSpiApp.c: 162: if(cPinMode == 1)
 11245  002D0C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11246  002D0E  A4D8               	btfss	status,2,c
 11247  002D10  D002               	goto	l638
 11248                           
 11249                           ;SwSpiApp.c: 163: {
 11250                           ;SwSpiApp.c: 164: do { LATAbits.LATA3 = 1; } while(0);
 11251  002D12  8689               	bsf	3977,3,c	;volatile
 11252                           
 11253                           ;SwSpiApp.c: 165: }
 11254  002D14  0012               	return	
 11255  002D16                     l638:
 11256                           
 11257                           ;SwSpiApp.c: 166: else if (cPinMode == 0)
 11258  002D16  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11259  002D18  A4D8               	btfss	status,2,c
 11260  002D1A  0012               	return	
 11261                           
 11262                           ;SwSpiApp.c: 167: {
 11263                           ;SwSpiApp.c: 168: do { LATAbits.LATA3 = 0; } while(0);
 11264  002D1C  9689               	bcf	3977,3,c	;volatile
 11265                           
 11266                           ;SwSpiApp.c: 171: }
 11267                           
 11268                           ;SwSpiApp.c: 169: }
 11269                           ;SwSpiApp.c: 170: break;
 11270  002D1E  0012               	return	
 11271  002D20                     l619:
 11272  002D20  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11273                           
 11274                           ; Switch size 1, requested type "space"
 11275                           ; Number of cases is 3, Range of values is 0 to 2
 11276                           ; switch strategies available:
 11277                           ; Name         Instructions Cycles
 11278                           ; simple_byte           10     6 (average)
 11279                           ;	Chosen strategy is simple_byte
 11280  002D22  0A00               	xorlw	0	; case 0
 11281  002D24  B4D8               	btfsc	status,2,c
 11282  002D26  D7DE               	goto	l620
 11283  002D28  0A01               	xorlw	1	; case 1
 11284  002D2A  B4D8               	btfsc	status,2,c
 11285  002D2C  D7E5               	goto	l629
 11286  002D2E  0A03               	xorlw	3	; case 2
 11287  002D30  A4D8               	btfss	status,2,c
 11288  002D32  0012               	return	
 11289  002D34  D7EB               	goto	l637
 11290  002D36                     __end_of_SwSpi_Clk_Pin:
 11291                           	opt stack 0
 11292                           tosu	equ	0xFFF
 11293                           tosh	equ	0xFFE
 11294                           tosl	equ	0xFFD
 11295                           pclath	equ	0xFFA
 11296                           tblptru	equ	0xFF8
 11297                           tblptrh	equ	0xFF7
 11298                           tblptrl	equ	0xFF6
 11299                           tablat	equ	0xFF5
 11300                           prodh	equ	0xFF4
 11301                           prodl	equ	0xFF3
 11302                           intcon	equ	0xFF2
 11303                           intcon2	equ	0xFF1
 11304                           postinc0	equ	0xFEE
 11305                           wreg	equ	0xFE8
 11306                           indf1	equ	0xFE7
 11307                           postdec1	equ	0xFE5
 11308                           fsr1h	equ	0xFE2
 11309                           fsr1l	equ	0xFE1
 11310                           indf2	equ	0xFDF
 11311                           postinc2	equ	0xFDE
 11312                           postdec2	equ	0xFDD
 11313                           fsr2h	equ	0xFDA
 11314                           fsr2l	equ	0xFD9
 11315                           status	equ	0xFD8
 11316                           
 11317 ;; *************** function _ClearMcuRunTime *****************
 11318 ;; Defined at:
 11319 ;;		line 87 in file "SystemStatus.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;		None
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;		None
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  1    wreg      void 
 11326 ;; Registers used:
 11327 ;;		wreg, status,2
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11333 ;;      Params:         0       0       0       0       0       0       0
 11334 ;;      Locals:         0       0       0       0       0       0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0
 11336 ;;      Totals:         0       0       0       0       0       0       0
 11337 ;;Total ram usage:        0 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    3
 11340 ;; This function calls:
 11341 ;;		Nothing
 11342 ;; This function is called by:
 11343 ;;		_InitSystemApplicationManagers
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           	psect	text77
 11348  0036B0                     __ptext77:
 11349                           	opt stack 0
 11350  0036B0                     _ClearMcuRunTime:
 11351                           	opt stack 26
 11352                           
 11353                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11354                           
 11355                           ;incstack = 0
 11356  0036B0  0E00               	movlw	0
 11357  0036B2  0100               	movlb	0	; () banked
 11358  0036B4  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11359  0036B6  0E00               	movlw	0
 11360  0036B8  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11361  0036BA  0E00               	movlw	0
 11362  0036BC  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11363  0036BE  0E00               	movlw	0
 11364  0036C0  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11365                           
 11366                           ; BSR set to: 0
 11367  0036C2  0012               	return		;funcret
 11368  0036C4                     __end_of_ClearMcuRunTime:
 11369                           	opt stack 0
 11370                           tosu	equ	0xFFF
 11371                           tosh	equ	0xFFE
 11372                           tosl	equ	0xFFD
 11373                           pclath	equ	0xFFA
 11374                           tblptru	equ	0xFF8
 11375                           tblptrh	equ	0xFF7
 11376                           tblptrl	equ	0xFF6
 11377                           tablat	equ	0xFF5
 11378                           prodh	equ	0xFF4
 11379                           prodl	equ	0xFF3
 11380                           intcon	equ	0xFF2
 11381                           intcon2	equ	0xFF1
 11382                           postinc0	equ	0xFEE
 11383                           wreg	equ	0xFE8
 11384                           indf1	equ	0xFE7
 11385                           postdec1	equ	0xFE5
 11386                           fsr1h	equ	0xFE2
 11387                           fsr1l	equ	0xFE1
 11388                           indf2	equ	0xFDF
 11389                           postinc2	equ	0xFDE
 11390                           postdec2	equ	0xFDD
 11391                           fsr2h	equ	0xFDA
 11392                           fsr2l	equ	0xFD9
 11393                           status	equ	0xFD8
 11394                           
 11395 ;; *************** function _CheckFlashPrecentage *****************
 11396 ;; Defined at:
 11397 ;;		line 205 in file "FlashApp.c"
 11398 ;; Parameters:    Size  Location     Type
 11399 ;;		None
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  precentage      3   28[BANK0 ] void 
 11402 ;; Return value:  Size  Location     Type
 11403 ;;                  1    wreg      unsigned char 
 11404 ;; Registers used:
 11405 ;;		wreg, status,2, status,0, cstack
 11406 ;; Tracked objects:
 11407 ;;		On entry : 0/0
 11408 ;;		On exit  : 0/0
 11409 ;;		Unchanged: 0/0
 11410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11411 ;;      Params:         0       0       0       0       0       0       0
 11412 ;;      Locals:         0       3       0       0       0       0       0
 11413 ;;      Temps:          0       4       0       0       0       0       0
 11414 ;;      Totals:         0       7       0       0       0       0       0
 11415 ;;Total ram usage:        7 bytes
 11416 ;; Hardware stack levels used:    1
 11417 ;; Hardware stack levels required when called:    5
 11418 ;; This function calls:
 11419 ;;		___ftdiv
 11420 ;;		___ftge
 11421 ;;		___ftmul
 11422 ;;		___lltoft
 11423 ;; This function is called by:
 11424 ;;		_main
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           	psect	text78
 11429  002156                     __ptext78:
 11430                           	opt stack 0
 11431  002156                     _CheckFlashPrecentage:
 11432                           	opt stack 25
 11433                           
 11434                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;incstack = 0
 11438  002156  0EE0               	movlw	224
 11439  002158  6E2C               	movwf	___ftdiv@f2,c
 11440  00215A  0EFF               	movlw	255
 11441  00215C  6E2D               	movwf	___ftdiv@f2+1,c
 11442  00215E  0E46               	movlw	70
 11443  002160  6E2E               	movwf	___ftdiv@f2+2,c
 11444  002162  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11445  002166  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11446  00216A  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11447  00216E  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11448  002172  0100               	movlb	0	; () banked
 11449  002174  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11450  002176  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11451  002178  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11452  00217A  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11453  00217C  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11454  00217E  0E00               	movlw	0
 11455  002180  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11456  002182  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11457  002184  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11458  002186  0EF0               	movlw	240
 11459  002188  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11460  00218A  6E20               	movwf	___lltoft@c,c
 11461  00218C  0E7F               	movlw	127
 11462  00218E  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11463  002190  6E21               	movwf	___lltoft@c+1,c
 11464  002192  0E00               	movlw	0
 11465  002194  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11466  002196  6E22               	movwf	___lltoft@c+2,c
 11467  002198  0E00               	movlw	0
 11468  00219A  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11469  00219C  6E23               	movwf	___lltoft@c+3,c
 11470  00219E  EC94  F015         	call	___lltoft	;wreg free
 11471  0021A2  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11472  0021A6  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11473  0021AA  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11474  0021AE  EC28  F00E         	call	___ftdiv	;wreg free
 11475  0021B2  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11476  0021B6  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11477  0021BA  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11478  0021BE  0E00               	movlw	0
 11479  0021C0  0100               	movlb	0	; () banked
 11480  0021C2  6F6C               	movwf	___ftmul@f2& (0+255),b
 11481  0021C4  0EC8               	movlw	200
 11482  0021C6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11483  0021C8  0E42               	movlw	66
 11484  0021CA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11485  0021CC  ECAD  F00D         	call	___ftmul	;wreg free
 11486  0021D0  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11487  0021D4  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11488  0021D8  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11489                           
 11490                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11491  0021DC  0E00               	movlw	0
 11492  0021DE  6E18               	movwf	___ftge@ff1,c
 11493  0021E0  0E96               	movlw	150
 11494  0021E2  6E19               	movwf	___ftge@ff1+1,c
 11495  0021E4  0E42               	movlw	66
 11496  0021E6  6E1A               	movwf	___ftge@ff1+2,c
 11497  0021E8  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11498  0021EC  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11499  0021F0  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11500  0021F4  ECCC  F012         	call	___ftge	;wreg free
 11501  0021F8  B0D8               	btfsc	status,0,c
 11502  0021FA  D002               	goto	u7800
 11503  0021FC  0E01               	movlw	1
 11504  0021FE  0012               	return	
 11505  002200                     u7800:
 11506  002200  0E00               	movlw	0
 11507  002202  0012               	return	
 11508  002204                     __end_of_CheckFlashPrecentage:
 11509                           	opt stack 0
 11510                           tosu	equ	0xFFF
 11511                           tosh	equ	0xFFE
 11512                           tosl	equ	0xFFD
 11513                           pclath	equ	0xFFA
 11514                           tblptru	equ	0xFF8
 11515                           tblptrh	equ	0xFF7
 11516                           tblptrl	equ	0xFF6
 11517                           tablat	equ	0xFF5
 11518                           prodh	equ	0xFF4
 11519                           prodl	equ	0xFF3
 11520                           intcon	equ	0xFF2
 11521                           intcon2	equ	0xFF1
 11522                           postinc0	equ	0xFEE
 11523                           wreg	equ	0xFE8
 11524                           indf1	equ	0xFE7
 11525                           postdec1	equ	0xFE5
 11526                           fsr1h	equ	0xFE2
 11527                           fsr1l	equ	0xFE1
 11528                           indf2	equ	0xFDF
 11529                           postinc2	equ	0xFDE
 11530                           postdec2	equ	0xFDD
 11531                           fsr2h	equ	0xFDA
 11532                           fsr2l	equ	0xFD9
 11533                           status	equ	0xFD8
 11534                           
 11535 ;; *************** function _BlinkOkLeds *****************
 11536 ;; Defined at:
 11537 ;;		line 24 in file "LedsApp.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;  state           1    wreg     enum E7551
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;  state           1   26[COMRAM] enum E7551
 11542 ;;  idx             2   27[COMRAM] int 
 11543 ;; Return value:  Size  Location     Type
 11544 ;;                  1    wreg      void 
 11545 ;; Registers used:
 11546 ;;		wreg, status,2, status,0
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 0/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11552 ;;      Params:         0       0       0       0       0       0       0
 11553 ;;      Locals:         3       0       0       0       0       0       0
 11554 ;;      Temps:          3       0       0       0       0       0       0
 11555 ;;      Totals:         6       0       0       0       0       0       0
 11556 ;;Total ram usage:        6 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; Hardware stack levels required when called:    3
 11559 ;; This function calls:
 11560 ;;		Nothing
 11561 ;; This function is called by:
 11562 ;;		_main
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           	psect	text79
 11567  0029B4                     __ptext79:
 11568                           	opt stack 0
 11569  0029B4                     _BlinkOkLeds:
 11570                           	opt stack 27
 11571                           
 11572                           ;incstack = 0
 11573                           ;BlinkOkLeds@state stored from wreg
 11574  0029B4  6E1B               	movwf	BlinkOkLeds@state,c
 11575                           
 11576                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11577  0029B6  0E00               	movlw	0
 11578  0029B8  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11579  0029BA  0E00               	movlw	0
 11580  0029BC  6E1C               	movwf	BlinkOkLeds@idx,c
 11581  0029BE                     l5946:
 11582  0029BE  501B               	movf	BlinkOkLeds@state,w,c
 11583  0029C0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11584  0029C2  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11585  0029C4  5018               	movf	??_BlinkOkLeds,w,c
 11586  0029C6  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11587  0029C8  501D               	movf	BlinkOkLeds@idx+1,w,c
 11588  0029CA  0A80               	xorlw	128
 11589  0029CC  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11590  0029CE  5019               	movf	??_BlinkOkLeds+1,w,c
 11591  0029D0  0A80               	xorlw	128
 11592  0029D2  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11593  0029D4  B0D8               	btfsc	status,0,c
 11594  0029D6  0012               	return	
 11595                           
 11596                           ;LedsApp.c: 27: {
 11597                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11598  0029D8  908B               	bcf	3979,0,c	;volatile
 11599                           
 11600                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11601  0029DA  0E02               	movlw	2
 11602  0029DC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11603  0029DE  0E04               	movlw	4
 11604  0029E0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11605  0029E2  0EBA               	movlw	186
 11606  0029E4                     u7997:
 11607  0029E4  2EE8               	decfsz	wreg,f,c
 11608  0029E6  D7FE               	bra	u7997
 11609  0029E8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11610  0029EA  D7FC               	bra	u7997
 11611  0029EC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11612  0029EE  D7FA               	bra	u7997
 11613  0029F0  D000               	nop2	
 11614                           
 11615                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11616  0029F2  808B               	bsf	3979,0,c	;volatile
 11617                           
 11618                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 11619  0029F4  0E02               	movlw	2
 11620  0029F6  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11621  0029F8  0E04               	movlw	4
 11622  0029FA  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11623  0029FC  0EBA               	movlw	186
 11624  0029FE                     u8007:
 11625  0029FE  2EE8               	decfsz	wreg,f,c
 11626  002A00  D7FE               	bra	u8007
 11627  002A02  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11628  002A04  D7FC               	bra	u8007
 11629  002A06  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11630  002A08  D7FA               	bra	u8007
 11631  002A0A  D000               	nop2	
 11632  002A0C  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 11633  002A0E  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 11634  002A10  D7D6               	goto	l5946
 11635  002A12                     __end_of_BlinkOkLeds:
 11636                           	opt stack 0
 11637                           tosu	equ	0xFFF
 11638                           tosh	equ	0xFFE
 11639                           tosl	equ	0xFFD
 11640                           pclath	equ	0xFFA
 11641                           tblptru	equ	0xFF8
 11642                           tblptrh	equ	0xFF7
 11643                           tblptrl	equ	0xFF6
 11644                           tablat	equ	0xFF5
 11645                           prodh	equ	0xFF4
 11646                           prodl	equ	0xFF3
 11647                           intcon	equ	0xFF2
 11648                           intcon2	equ	0xFF1
 11649                           postinc0	equ	0xFEE
 11650                           wreg	equ	0xFE8
 11651                           indf1	equ	0xFE7
 11652                           postdec1	equ	0xFE5
 11653                           fsr1h	equ	0xFE2
 11654                           fsr1l	equ	0xFE1
 11655                           indf2	equ	0xFDF
 11656                           postinc2	equ	0xFDE
 11657                           postdec2	equ	0xFDD
 11658                           fsr2h	equ	0xFDA
 11659                           fsr2l	equ	0xFD9
 11660                           status	equ	0xFD8
 11661                           
 11662 ;; *************** function _BlinkErrorLeds *****************
 11663 ;; Defined at:
 11664 ;;		line 13 in file "LedsApp.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;  state           1    wreg     enum E7554
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  state           1   26[COMRAM] enum E7554
 11669 ;;  idx             2   27[COMRAM] int 
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  1    wreg      void 
 11672 ;; Registers used:
 11673 ;;		wreg, status,2, status,0
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11679 ;;      Params:         0       0       0       0       0       0       0
 11680 ;;      Locals:         3       0       0       0       0       0       0
 11681 ;;      Temps:          3       0       0       0       0       0       0
 11682 ;;      Totals:         6       0       0       0       0       0       0
 11683 ;;Total ram usage:        6 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    3
 11686 ;; This function calls:
 11687 ;;		Nothing
 11688 ;; This function is called by:
 11689 ;;		_main
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           	psect	text80
 11694  002A12                     __ptext80:
 11695                           	opt stack 0
 11696  002A12                     _BlinkErrorLeds:
 11697                           	opt stack 27
 11698                           
 11699                           ;incstack = 0
 11700                           ;BlinkErrorLeds@state stored from wreg
 11701  002A12  6E1B               	movwf	BlinkErrorLeds@state,c
 11702                           
 11703                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 11704  002A14  0E00               	movlw	0
 11705  002A16  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 11706  002A18  0E00               	movlw	0
 11707  002A1A  6E1C               	movwf	BlinkErrorLeds@idx,c
 11708  002A1C                     l5934:
 11709  002A1C  501B               	movf	BlinkErrorLeds@state,w,c
 11710  002A1E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11711  002A20  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 11712  002A22  5018               	movf	??_BlinkErrorLeds,w,c
 11713  002A24  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 11714  002A26  501D               	movf	BlinkErrorLeds@idx+1,w,c
 11715  002A28  0A80               	xorlw	128
 11716  002A2A  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 11717  002A2C  5019               	movf	??_BlinkErrorLeds+1,w,c
 11718  002A2E  0A80               	xorlw	128
 11719  002A30  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 11720  002A32  B0D8               	btfsc	status,0,c
 11721  002A34  0012               	return	
 11722                           
 11723                           ;LedsApp.c: 16: {
 11724                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 11725  002A36  988A               	bcf	3978,4,c	;volatile
 11726                           
 11727                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 11728  002A38  0E02               	movlw	2
 11729  002A3A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11730  002A3C  0E04               	movlw	4
 11731  002A3E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11732  002A40  0EBA               	movlw	186
 11733  002A42                     u8017:
 11734  002A42  2EE8               	decfsz	wreg,f,c
 11735  002A44  D7FE               	bra	u8017
 11736  002A46  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11737  002A48  D7FC               	bra	u8017
 11738  002A4A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11739  002A4C  D7FA               	bra	u8017
 11740  002A4E  D000               	nop2	
 11741                           
 11742                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 11743  002A50  888A               	bsf	3978,4,c	;volatile
 11744                           
 11745                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 11746  002A52  0E02               	movlw	2
 11747  002A54  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11748  002A56  0E04               	movlw	4
 11749  002A58  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11750  002A5A  0EBA               	movlw	186
 11751  002A5C                     u8027:
 11752  002A5C  2EE8               	decfsz	wreg,f,c
 11753  002A5E  D7FE               	bra	u8027
 11754  002A60  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11755  002A62  D7FC               	bra	u8027
 11756  002A64  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11757  002A66  D7FA               	bra	u8027
 11758  002A68  D000               	nop2	
 11759  002A6A  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 11760  002A6C  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 11761  002A6E  D7D6               	goto	l5934
 11762  002A70                     __end_of_BlinkErrorLeds:
 11763                           	opt stack 0
 11764                           tosu	equ	0xFFF
 11765                           tosh	equ	0xFFE
 11766                           tosl	equ	0xFFD
 11767                           pclath	equ	0xFFA
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           intcon2	equ	0xFF1
 11776                           postinc0	equ	0xFEE
 11777                           wreg	equ	0xFE8
 11778                           indf1	equ	0xFE7
 11779                           postdec1	equ	0xFE5
 11780                           fsr1h	equ	0xFE2
 11781                           fsr1l	equ	0xFE1
 11782                           indf2	equ	0xFDF
 11783                           postinc2	equ	0xFDE
 11784                           postdec2	equ	0xFDD
 11785                           fsr2h	equ	0xFDA
 11786                           fsr2l	equ	0xFD9
 11787                           status	equ	0xFD8
 11788                           
 11789 ;; *************** function _AdcConvert *****************
 11790 ;; Defined at:
 11791 ;;		line 56 in file "AdcApp.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 11796 ;;  idx             1   92[BANK0 ] unsigned char 
 11797 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 11798 ;;  adcRes          2   90[BANK0 ] unsigned int 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11808 ;;      Params:         0       0       0       0       0       0       0
 11809 ;;      Locals:         0      10       0       0       0       0       0
 11810 ;;      Temps:          0       2       0       0       0       0       0
 11811 ;;      Totals:         0      12       0       0       0       0       0
 11812 ;;Total ram usage:       12 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:    8
 11815 ;; This function calls:
 11816 ;;		_ADC_GetConversion
 11817 ;;		_FlashSampleWrite
 11818 ;;		___ftdiv
 11819 ;;		___ftmul
 11820 ;;		___fttol
 11821 ;;		___lwtoft
 11822 ;;		_pow
 11823 ;; This function is called by:
 11824 ;;		_main
 11825 ;; This function uses a non-reentrant model
 11826 ;;
 11827                           
 11828                           	psect	text81
 11829  00125A                     __ptext81:
 11830                           	opt stack 0
 11831  00125A                     _AdcConvert:
 11832                           	opt stack 22
 11833                           
 11834                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 11835                           
 11836                           ;incstack = 0
 11837  00125A  0E00               	movlw	0
 11838  00125C  0100               	movlb	0	; () banked
 11839  00125E  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 11840  001260  0E00               	movlw	0
 11841  001262  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 11842                           
 11843                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 11844  001264  503C               	movf	_adcSampleMode,w,c
 11845  001266  A4D8               	btfss	status,2,c
 11846  001268  D073               	goto	l112
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;AdcApp.c: 64: {
 11850                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 11851  00126A  0E00               	movlw	0
 11852  00126C  6FBC               	movwf	AdcConvert@idx& (0+255),b
 11853  00126E                     l7744:
 11854                           
 11855                           ; BSR set to: 0
 11856  00126E  0E06               	movlw	6
 11857  001270  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 11858  001272  D001               	goto	l113
 11859  001274  0012               	return	
 11860  001276                     l113:
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;AdcApp.c: 66: {
 11864                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 11865                           
 11866                           ; BSR set to: 0
 11867  001276  51BC               	movf	AdcConvert@idx& (0+255),w,b
 11868  001278  0D01               	mullw	1
 11869  00127A  0E69               	movlw	low _channelArr
 11870  00127C  24F3               	addwf	prodl,w,c
 11871  00127E  6EF6               	movwf	tblptrl,c
 11872  001280  0E06               	movlw	high _channelArr
 11873  001282  20F4               	addwfc	prodh,w,c
 11874  001284  6EF7               	movwf	tblptrh,c
 11875  001286                     	if	0	;There are less than 3 active tblptr bytes
 11876  001286                     	endif
 11877  001286  0008               	tblrd		*
 11878  001288  50F5               	movf	tablat,w,c
 11879  00128A  ECEA  F019         	call	_ADC_GetConversion
 11880  00128E  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 11881  001292  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 11882                           
 11883                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11884  001296  0E00               	movlw	0
 11885  001298  0100               	movlb	0	; () banked
 11886  00129A  6FA3               	movwf	pow@y& (0+255),b
 11887  00129C  0E20               	movlw	32
 11888  00129E  6FA4               	movwf	(pow@y+1)& (0+255),b
 11889  0012A0  0E41               	movlw	65
 11890  0012A2  6FA5               	movwf	(pow@y+2)& (0+255),b
 11891  0012A4  0E00               	movlw	0
 11892  0012A6  6FA0               	movwf	pow@x& (0+255),b
 11893  0012A8  0E00               	movlw	0
 11894  0012AA  6FA1               	movwf	(pow@x+1)& (0+255),b
 11895  0012AC  0E40               	movlw	64
 11896  0012AE  6FA2               	movwf	(pow@x+2)& (0+255),b
 11897  0012B0  ECDF  F00A         	call	_pow	;wreg free
 11898  0012B4  C0A0  F0B7         	movff	?_pow,_AdcConvert$3267
 11899  0012B8  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3267+1
 11900  0012BC  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3267+2
 11901                           
 11902                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11903  0012C0  0EC0               	movlw	192
 11904  0012C2  0100               	movlb	0	; () banked
 11905  0012C4  6F6C               	movwf	___ftmul@f2& (0+255),b
 11906  0012C6  0E50               	movlw	80
 11907  0012C8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11908  0012CA  0E45               	movlw	69
 11909  0012CC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11910  0012CE  C0B7  F02C         	movff	_AdcConvert$3267,___ftdiv@f2
 11911  0012D2  C0B8  F02D         	movff	_AdcConvert$3267+1,___ftdiv@f2+1
 11912  0012D6  C0B9  F02E         	movff	_AdcConvert$3267+2,___ftdiv@f2+2
 11913  0012DA  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 11914  0012DE  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 11915  0012E2  ECB6  F01A         	call	___lwtoft	;wreg free
 11916  0012E6  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 11917  0012EA  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 11918  0012EE  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 11919  0012F2  EC28  F00E         	call	___ftdiv	;wreg free
 11920  0012F6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11921  0012FA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11922  0012FE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11923  001302  ECAD  F00D         	call	___ftmul	;wreg free
 11924  001306  C069  F078         	movff	?___ftmul,___fttol@f1
 11925  00130A  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 11926  00130E  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 11927  001312  EC31  F00D         	call	___fttol	;wreg free
 11928  001316  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 11929  00131A  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 11930                           
 11931                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 11932  00131E  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 11933  001322  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 11934  001326  0100               	movlb	0	; () banked
 11935  001328  29BC               	incf	AdcConvert@idx& (0+255),w,b
 11936  00132A  6E2F               	movwf	FlashSampleWrite@channelNum,c
 11937  00132C  ECB4  F00C         	call	_FlashSampleWrite	;wreg free
 11938                           
 11939                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 11940  001330  0E03               	movlw	3
 11941  001332  0100               	movlb	0	; () banked
 11942  001334  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 11943  001336  0E8A               	movlw	138
 11944  001338  6FB1               	movwf	??_AdcConvert& (0+255),b
 11945  00133A  0E55               	movlw	85
 11946  00133C                     u8037:
 11947  00133C  2EE8               	decfsz	wreg,f,c
 11948  00133E  D7FE               	bra	u8037
 11949  001340  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 11950  001342  D7FC               	bra	u8037
 11951  001344  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 11952  001346  D7FA               	bra	u8037
 11953  001348  D000               	nop2	
 11954  00134A  0100               	movlb	0	; () banked
 11955  00134C  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 11956  00134E  D78F               	goto	l7744
 11957  001350                     l112:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 11961                           
 11962                           ; BSR set to: 0
 11963  001350  043C               	decf	_adcSampleMode,w,c
 11964  001352  A4D8               	btfss	status,2,c
 11965  001354  0012               	return	
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;AdcApp.c: 74: {
 11969                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 11970  001356  51D3               	movf	_channel& (0+255),w,b
 11971  001358  0D01               	mullw	1
 11972  00135A  0E69               	movlw	low _channelArr
 11973  00135C  24F3               	addwf	prodl,w,c
 11974  00135E  6EF6               	movwf	tblptrl,c
 11975  001360  0E06               	movlw	high _channelArr
 11976  001362  20F4               	addwfc	prodh,w,c
 11977  001364  6EF7               	movwf	tblptrh,c
 11978  001366                     	if	0	;There are less than 3 active tblptr bytes
 11979  001366                     	endif
 11980  001366  0008               	tblrd		*
 11981  001368  50F5               	movf	tablat,w,c
 11982  00136A  ECEA  F019         	call	_ADC_GetConversion
 11983  00136E  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
 11984  001372  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
 11985                           
 11986                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11987  001376  0E00               	movlw	0
 11988  001378  0100               	movlb	0	; () banked
 11989  00137A  6FA3               	movwf	pow@y& (0+255),b
 11990  00137C  0E20               	movlw	32
 11991  00137E  6FA4               	movwf	(pow@y+1)& (0+255),b
 11992  001380  0E41               	movlw	65
 11993  001382  6FA5               	movwf	(pow@y+2)& (0+255),b
 11994  001384  0E00               	movlw	0
 11995  001386  6FA0               	movwf	pow@x& (0+255),b
 11996  001388  0E00               	movlw	0
 11997  00138A  6FA1               	movwf	(pow@x+1)& (0+255),b
 11998  00138C  0E40               	movlw	64
 11999  00138E  6FA2               	movwf	(pow@x+2)& (0+255),b
 12000  001390  ECDF  F00A         	call	_pow	;wreg free
 12001  001394  C0A0  F0B7         	movff	?_pow,_AdcConvert$3267
 12002  001398  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3267+1
 12003  00139C  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3267+2
 12004                           
 12005                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12006  0013A0  0EC0               	movlw	192
 12007  0013A2  0100               	movlb	0	; () banked
 12008  0013A4  6F6C               	movwf	___ftmul@f2& (0+255),b
 12009  0013A6  0E50               	movlw	80
 12010  0013A8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12011  0013AA  0E45               	movlw	69
 12012  0013AC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12013  0013AE  C0B7  F02C         	movff	_AdcConvert$3267,___ftdiv@f2
 12014  0013B2  C0B8  F02D         	movff	_AdcConvert$3267+1,___ftdiv@f2+1
 12015  0013B6  C0B9  F02E         	movff	_AdcConvert$3267+2,___ftdiv@f2+2
 12016  0013BA  C0B5  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
 12017  0013BE  C0B6  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
 12018  0013C2  ECB6  F01A         	call	___lwtoft	;wreg free
 12019  0013C6  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12020  0013CA  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12021  0013CE  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12022  0013D2  EC28  F00E         	call	___ftdiv	;wreg free
 12023  0013D6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12024  0013DA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12025  0013DE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12026  0013E2  ECAD  F00D         	call	___ftmul	;wreg free
 12027  0013E6  C069  F078         	movff	?___ftmul,___fttol@f1
 12028  0013EA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12029  0013EE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12030  0013F2  EC31  F00D         	call	___fttol	;wreg free
 12031  0013F6  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12032  0013FA  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12033                           
 12034                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12035  0013FE  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12036  001402  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12037  001406  0E01               	movlw	1
 12038  001408  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12039  00140A  ECB4  F00C         	call	_FlashSampleWrite	;wreg free
 12040  00140E  0012               	return	
 12041  001410                     __end_of_AdcConvert:
 12042                           	opt stack 0
 12043                           tosu	equ	0xFFF
 12044                           tosh	equ	0xFFE
 12045                           tosl	equ	0xFFD
 12046                           pclath	equ	0xFFA
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           intcon2	equ	0xFF1
 12055                           postinc0	equ	0xFEE
 12056                           wreg	equ	0xFE8
 12057                           indf1	equ	0xFE7
 12058                           postdec1	equ	0xFE5
 12059                           fsr1h	equ	0xFE2
 12060                           fsr1l	equ	0xFE1
 12061                           indf2	equ	0xFDF
 12062                           postinc2	equ	0xFDE
 12063                           postdec2	equ	0xFDD
 12064                           fsr2h	equ	0xFDA
 12065                           fsr2l	equ	0xFD9
 12066                           status	equ	0xFD8
 12067                           
 12068 ;; *************** function _pow *****************
 12069 ;; Defined at:
 12070 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;  x               3   64[BANK0 ] void 
 12073 ;;  y               3   67[BANK0 ] void 
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;  yi              4   77[BANK0 ] unsigned long 
 12076 ;;  sign            1   76[BANK0 ] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  3   64[BANK0 ] unsigned char 
 12079 ;; Registers used:
 12080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12086 ;;      Params:         0       6       0       0       0       0       0
 12087 ;;      Locals:         0      11       0       0       0       0       0
 12088 ;;      Temps:          0       0       0       0       0       0       0
 12089 ;;      Totals:         0      17       0       0       0       0       0
 12090 ;;Total ram usage:       17 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:    7
 12093 ;; This function calls:
 12094 ;;		___ftge
 12095 ;;		___ftmul
 12096 ;;		___ftneg
 12097 ;;		___fttol
 12098 ;;		___lltoft
 12099 ;;		_exp
 12100 ;;		_log
 12101 ;; This function is called by:
 12102 ;;		_AdcConvert
 12103 ;; This function uses a non-reentrant model
 12104 ;;
 12105                           
 12106                           	psect	text82
 12107  0015BE                     __ptext82:
 12108                           	opt stack 0
 12109  0015BE                     _pow:
 12110                           	opt stack 22
 12111                           
 12112                           ;incstack = 0
 12113  0015BE  0E00               	movlw	0
 12114  0015C0  0100               	movlb	0	; () banked
 12115  0015C2  6FAC               	movwf	pow@sign& (0+255),b
 12116                           
 12117                           ; BSR set to: 0
 12118  0015C4  51A0               	movf	pow@x& (0+255),w,b
 12119  0015C6  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12120  0015C8  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12121  0015CA  A4D8               	btfss	status,2,c
 12122  0015CC  D01D               	goto	l1869
 12123                           
 12124                           ; BSR set to: 0
 12125  0015CE  0E00               	movlw	0
 12126  0015D0  6E18               	movwf	___ftge@ff1,c
 12127  0015D2  0E00               	movlw	0
 12128  0015D4  6E19               	movwf	___ftge@ff1+1,c
 12129  0015D6  0E00               	movlw	0
 12130  0015D8  6E1A               	movwf	___ftge@ff1+2,c
 12131  0015DA  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12132  0015DE  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12133  0015E2  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12134  0015E6  ECCC  F012         	call	___ftge	;wreg free
 12135  0015EA  A0D8               	btfss	status,0,c
 12136  0015EC  D005               	goto	l1870
 12137  0015EE  0E00               	movlw	0
 12138  0015F0  0100               	movlb	0	; () banked
 12139  0015F2  6FC5               	movwf	(_errno+1)& (0+255),b
 12140  0015F4  0E21               	movlw	33
 12141  0015F6  6FC4               	movwf	_errno& (0+255),b
 12142  0015F8                     l1870:
 12143  0015F8  0E00               	movlw	0
 12144  0015FA  0100               	movlb	0	; () banked
 12145  0015FC  6FA0               	movwf	?_pow& (0+255),b
 12146  0015FE  0E00               	movlw	0
 12147  001600  6FA1               	movwf	(?_pow+1)& (0+255),b
 12148  001602  0E00               	movlw	0
 12149  001604  6FA2               	movwf	(?_pow+2)& (0+255),b
 12150                           
 12151                           ; BSR set to: 0
 12152  001606  0012               	return	
 12153  001608                     l1869:
 12154                           
 12155                           ; BSR set to: 0
 12156                           
 12157                           ; BSR set to: 0
 12158  001608  51A3               	movf	pow@y& (0+255),w,b
 12159  00160A  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12160  00160C  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12161  00160E  A4D8               	btfss	status,2,c
 12162  001610  D007               	goto	l1872
 12163                           
 12164                           ; BSR set to: 0
 12165  001612  0E00               	movlw	0
 12166  001614  6FA0               	movwf	?_pow& (0+255),b
 12167  001616  0E80               	movlw	128
 12168  001618  6FA1               	movwf	(?_pow+1)& (0+255),b
 12169  00161A  0E3F               	movlw	63
 12170  00161C  6FA2               	movwf	(?_pow+2)& (0+255),b
 12171                           
 12172                           ; BSR set to: 0
 12173  00161E  0012               	return	
 12174  001620                     l1872:
 12175                           
 12176                           ; BSR set to: 0
 12177                           
 12178                           ; BSR set to: 0
 12179  001620  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12180  001622  D041               	goto	l1873
 12181                           
 12182                           ; BSR set to: 0
 12183  001624  C0A3  F078         	movff	pow@y,___fttol@f1
 12184  001628  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12185  00162C  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12186  001630  EC31  F00D         	call	___fttol	;wreg free
 12187  001634  C078  F0AD         	movff	?___fttol,pow@yi
 12188  001638  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12189  00163C  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12190  001640  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12191  001644  C0AD  F020         	movff	pow@yi,___lltoft@c
 12192  001648  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12193  00164C  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12194  001650  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12195  001654  EC94  F015         	call	___lltoft	;wreg free
 12196  001658  0100               	movlb	0	; () banked
 12197  00165A  51A3               	movf	pow@y& (0+255),w,b
 12198  00165C  1820               	xorwf	?___lltoft,w,c
 12199  00165E  E107               	bnz	u7500
 12200  001660  51A4               	movf	(pow@y+1)& (0+255),w,b
 12201  001662  1821               	xorwf	?___lltoft+1,w,c
 12202  001664  E104               	bnz	u7500
 12203  001666  51A5               	movf	(pow@y+2)& (0+255),w,b
 12204  001668  1822               	xorwf	?___lltoft+2,w,c
 12205  00166A  B4D8               	btfsc	status,2,c
 12206  00166C  D00B               	goto	l1874
 12207  00166E                     u7500:
 12208                           
 12209                           ; BSR set to: 0
 12210  00166E  0E00               	movlw	0
 12211  001670  6FC5               	movwf	(_errno+1)& (0+255),b
 12212  001672  0E21               	movlw	33
 12213  001674  6FC4               	movwf	_errno& (0+255),b
 12214  001676  0E00               	movlw	0
 12215  001678  6FA0               	movwf	?_pow& (0+255),b
 12216  00167A  0E00               	movlw	0
 12217  00167C  6FA1               	movwf	(?_pow+1)& (0+255),b
 12218  00167E  0E00               	movlw	0
 12219  001680  6FA2               	movwf	(?_pow+2)& (0+255),b
 12220                           
 12221                           ; BSR set to: 0
 12222  001682  0012               	return	
 12223  001684                     l1874:
 12224                           
 12225                           ; BSR set to: 0
 12226                           
 12227                           ; BSR set to: 0
 12228  001684  51AD               	movf	pow@yi& (0+255),w,b
 12229  001686  0B01               	andlw	1
 12230  001688  6FAC               	movwf	pow@sign& (0+255),b
 12231                           
 12232                           ; BSR set to: 0
 12233  00168A  C0A0  F018         	movff	pow@x,___ftneg@f1
 12234  00168E  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12235  001692  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12236  001696  ECA4  F01A         	call	___ftneg	;wreg free
 12237  00169A  C018  F0A0         	movff	?___ftneg,pow@x
 12238  00169E  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12239  0016A2  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12240  0016A6                     l1873:
 12241  0016A6  C0A0  F08E         	movff	pow@x,log@x
 12242  0016AA  C0A1  F08F         	movff	pow@x+1,log@x+1
 12243  0016AE  C0A2  F090         	movff	pow@x+2,log@x+2
 12244  0016B2  EC9D  F00B         	call	_log	;wreg free
 12245  0016B6  C08E  F0A6         	movff	?_log,_pow$3268
 12246  0016BA  C08F  F0A7         	movff	?_log+1,_pow$3268+1
 12247  0016BE  C090  F0A8         	movff	?_log+2,_pow$3268+2
 12248  0016C2  C0A6  F069         	movff	_pow$3268,___ftmul@f1
 12249  0016C6  C0A7  F06A         	movff	_pow$3268+1,___ftmul@f1+1
 12250  0016CA  C0A8  F06B         	movff	_pow$3268+2,___ftmul@f1+2
 12251  0016CE  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12252  0016D2  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12253  0016D6  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12254  0016DA  ECAD  F00D         	call	___ftmul	;wreg free
 12255  0016DE  C069  F0A9         	movff	?___ftmul,_pow$3269
 12256  0016E2  C06A  F0AA         	movff	?___ftmul+1,_pow$3269+1
 12257  0016E6  C06B  F0AB         	movff	?___ftmul+2,_pow$3269+2
 12258  0016EA  C0A9  F097         	movff	_pow$3269,exp@x
 12259  0016EE  C0AA  F098         	movff	_pow$3269+1,exp@x+1
 12260  0016F2  C0AB  F099         	movff	_pow$3269+2,exp@x+2
 12261  0016F6  EC49  F007         	call	_exp	;wreg free
 12262  0016FA  C097  F0A0         	movff	?_exp,pow@x
 12263  0016FE  C098  F0A1         	movff	?_exp+1,pow@x+1
 12264  001702  C099  F0A2         	movff	?_exp+2,pow@x+2
 12265  001706  0100               	movlb	0	; () banked
 12266  001708  51AC               	movf	pow@sign& (0+255),w,b
 12267  00170A  B4D8               	btfsc	status,2,c
 12268  00170C  D00F               	goto	l1875
 12269                           
 12270                           ; BSR set to: 0
 12271  00170E  C0A0  F018         	movff	pow@x,___ftneg@f1
 12272  001712  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12273  001716  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12274  00171A  ECA4  F01A         	call	___ftneg	;wreg free
 12275  00171E  C018  F0A0         	movff	?___ftneg,?_pow
 12276  001722  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12277  001726  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12278  00172A  0012               	return	
 12279  00172C                     l1875:
 12280                           
 12281                           ; BSR set to: 0
 12282  00172C  C0A0  F0A0         	movff	pow@x,?_pow
 12283  001730  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12284  001734  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12285  001738  0012               	return		;funcret
 12286  00173A                     __end_of_pow:
 12287                           	opt stack 0
 12288                           tosu	equ	0xFFF
 12289                           tosh	equ	0xFFE
 12290                           tosl	equ	0xFFD
 12291                           pclath	equ	0xFFA
 12292                           tblptru	equ	0xFF8
 12293                           tblptrh	equ	0xFF7
 12294                           tblptrl	equ	0xFF6
 12295                           tablat	equ	0xFF5
 12296                           prodh	equ	0xFF4
 12297                           prodl	equ	0xFF3
 12298                           intcon	equ	0xFF2
 12299                           intcon2	equ	0xFF1
 12300                           postinc0	equ	0xFEE
 12301                           wreg	equ	0xFE8
 12302                           indf1	equ	0xFE7
 12303                           postdec1	equ	0xFE5
 12304                           fsr1h	equ	0xFE2
 12305                           fsr1l	equ	0xFE1
 12306                           indf2	equ	0xFDF
 12307                           postinc2	equ	0xFDE
 12308                           postdec2	equ	0xFDD
 12309                           fsr2h	equ	0xFDA
 12310                           fsr2l	equ	0xFD9
 12311                           status	equ	0xFD8
 12312                           
 12313 ;; *************** function _log *****************
 12314 ;; Defined at:
 12315 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;  x               3   46[BANK0 ] unsigned char 
 12318 ;; Auto vars:     Size  Location     Type
 12319 ;;  exponent        2   49[BANK0 ] int 
 12320 ;; Return value:  Size  Location     Type
 12321 ;;                  3   46[BANK0 ] int 
 12322 ;; Registers used:
 12323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12324 ;; Tracked objects:
 12325 ;;		On entry : 0/0
 12326 ;;		On exit  : 0/0
 12327 ;;		Unchanged: 0/0
 12328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12329 ;;      Params:         0       3       0       0       0       0       0
 12330 ;;      Locals:         0       2       0       0       0       0       0
 12331 ;;      Temps:          0       0       0       0       0       0       0
 12332 ;;      Totals:         0       5       0       0       0       0       0
 12333 ;;Total ram usage:        5 bytes
 12334 ;; Hardware stack levels used:    1
 12335 ;; Hardware stack levels required when called:    6
 12336 ;; This function calls:
 12337 ;;		___awtoft
 12338 ;;		___ftadd
 12339 ;;		___ftmul
 12340 ;;		_eval_poly
 12341 ;;		_frexp
 12342 ;; This function is called by:
 12343 ;;		_pow
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           	psect	text83
 12348  00173A                     __ptext83:
 12349                           	opt stack 0
 12350  00173A                     _log:
 12351                           	opt stack 22
 12352                           
 12353                           ;incstack = 0
 12354  00173A  0100               	movlb	0	; () banked
 12355  00173C  AF90               	btfss	(log@x+2)& (0+255),7,b
 12356  00173E  D00B               	goto	l2131
 12357                           
 12358                           ; BSR set to: 0
 12359  001740  0E00               	movlw	0
 12360  001742  6FC5               	movwf	(_errno+1)& (0+255),b
 12361  001744  0E21               	movlw	33
 12362  001746  6FC4               	movwf	_errno& (0+255),b
 12363  001748  0E00               	movlw	0
 12364  00174A  6F8E               	movwf	?_log& (0+255),b
 12365  00174C  0E00               	movlw	0
 12366  00174E  6F8F               	movwf	(?_log+1)& (0+255),b
 12367  001750  0E00               	movlw	0
 12368  001752  6F90               	movwf	(?_log+2)& (0+255),b
 12369                           
 12370                           ; BSR set to: 0
 12371  001754  0012               	return	
 12372  001756                     l2131:
 12373                           
 12374                           ; BSR set to: 0
 12375                           
 12376                           ; BSR set to: 0
 12377  001756  518E               	movf	log@x& (0+255),w,b
 12378  001758  118F               	iorwf	(log@x+1)& (0+255),w,b
 12379  00175A  1190               	iorwf	(log@x+2)& (0+255),w,b
 12380  00175C  A4D8               	btfss	status,2,c
 12381  00175E  D00B               	goto	l2133
 12382                           
 12383                           ; BSR set to: 0
 12384  001760  0E00               	movlw	0
 12385  001762  6FC5               	movwf	(_errno+1)& (0+255),b
 12386  001764  0E22               	movlw	34
 12387  001766  6FC4               	movwf	_errno& (0+255),b
 12388  001768  0E00               	movlw	0
 12389  00176A  6F8E               	movwf	?_log& (0+255),b
 12390  00176C  0E00               	movlw	0
 12391  00176E  6F8F               	movwf	(?_log+1)& (0+255),b
 12392  001770  0E00               	movlw	0
 12393  001772  6F90               	movwf	(?_log+2)& (0+255),b
 12394                           
 12395                           ; BSR set to: 0
 12396  001774  0012               	return	
 12397  001776                     l2133:
 12398                           
 12399                           ; BSR set to: 0
 12400                           
 12401                           ; BSR set to: 0
 12402  001776  0E00               	movlw	0
 12403  001778  6F6C               	movwf	___ftmul@f2& (0+255),b
 12404  00177A  0E00               	movlw	0
 12405  00177C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12406  00177E  0E40               	movlw	64
 12407  001780  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12408  001782  0E91               	movlw	low log@exponent
 12409  001784  6E1B               	movwf	frexp@eptr,c
 12410  001786  0E00               	movlw	high log@exponent
 12411  001788  6E1C               	movwf	frexp@eptr+1,c
 12412  00178A  C08E  F018         	movff	log@x,frexp@value
 12413  00178E  C08F  F019         	movff	log@x+1,frexp@value+1
 12414  001792  C090  F01A         	movff	log@x+2,frexp@value+2
 12415  001796  EC84  F012         	call	_frexp	;wreg free
 12416  00179A  C018  F069         	movff	?_frexp,___ftmul@f1
 12417  00179E  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12418  0017A2  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12419  0017A6  ECAD  F00D         	call	___ftmul	;wreg free
 12420  0017AA  C069  F078         	movff	?___ftmul,___ftadd@f1
 12421  0017AE  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12422  0017B2  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12423  0017B6  0E00               	movlw	0
 12424  0017B8  0100               	movlb	0	; () banked
 12425  0017BA  6F7B               	movwf	___ftadd@f2& (0+255),b
 12426  0017BC  0E80               	movlw	128
 12427  0017BE  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12428  0017C0  0EBF               	movlw	191
 12429  0017C2  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12430  0017C4  EC08  F00A         	call	___ftadd	;wreg free
 12431  0017C8  C078  F08E         	movff	?___ftadd,log@x
 12432  0017CC  C079  F08F         	movff	?___ftadd+1,log@x+1
 12433  0017D0  C07A  F090         	movff	?___ftadd+2,log@x+2
 12434  0017D4  0100               	movlb	0	; () banked
 12435  0017D6  0791               	decf	log@exponent& (0+255),f,b
 12436  0017D8  A0D8               	btfss	status,0,c
 12437  0017DA  0792               	decf	(log@exponent+1)& (0+255),f,b
 12438                           
 12439                           ; BSR set to: 0
 12440  0017DC  C08E  F084         	movff	log@x,eval_poly@x
 12441  0017E0  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12442  0017E4  C090  F086         	movff	log@x+2,eval_poly@x+2
 12443  0017E8  0E8E               	movlw	low log@coeff
 12444  0017EA  6F87               	movwf	eval_poly@d& (0+255),b
 12445  0017EC  0E06               	movlw	high log@coeff
 12446  0017EE  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12447  0017F0  0E00               	movlw	0
 12448  0017F2  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12449  0017F4  0E08               	movlw	8
 12450  0017F6  6F89               	movwf	eval_poly@n& (0+255),b
 12451  0017F8  EC7F  F00F         	call	_eval_poly	;wreg free
 12452  0017FC  C084  F08E         	movff	?_eval_poly,log@x
 12453  001800  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12454  001804  C086  F090         	movff	?_eval_poly+2,log@x+2
 12455  001808  0E72               	movlw	114
 12456  00180A  0100               	movlb	0	; () banked
 12457  00180C  6F6C               	movwf	___ftmul@f2& (0+255),b
 12458  00180E  0E31               	movlw	49
 12459  001810  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12460  001812  0E3F               	movlw	63
 12461  001814  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12462  001816  C091  F020         	movff	log@exponent,___awtoft@c
 12463  00181A  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12464  00181E  ECDF  F018         	call	___awtoft	;wreg free
 12465  001822  C020  F069         	movff	?___awtoft,___ftmul@f1
 12466  001826  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12467  00182A  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12468  00182E  ECAD  F00D         	call	___ftmul	;wreg free
 12469  001832  C069  F078         	movff	?___ftmul,___ftadd@f1
 12470  001836  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12471  00183A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12472  00183E  C08E  F07B         	movff	log@x,___ftadd@f2
 12473  001842  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12474  001846  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12475  00184A  EC08  F00A         	call	___ftadd	;wreg free
 12476  00184E  C078  F08E         	movff	?___ftadd,?_log
 12477  001852  C079  F08F         	movff	?___ftadd+1,?_log+1
 12478  001856  C07A  F090         	movff	?___ftadd+2,?_log+2
 12479  00185A  0012               	return	
 12480  00185C                     __end_of_log:
 12481                           	opt stack 0
 12482                           tosu	equ	0xFFF
 12483                           tosh	equ	0xFFE
 12484                           tosl	equ	0xFFD
 12485                           pclath	equ	0xFFA
 12486                           tblptru	equ	0xFF8
 12487                           tblptrh	equ	0xFF7
 12488                           tblptrl	equ	0xFF6
 12489                           tablat	equ	0xFF5
 12490                           prodh	equ	0xFF4
 12491                           prodl	equ	0xFF3
 12492                           intcon	equ	0xFF2
 12493                           intcon2	equ	0xFF1
 12494                           postinc0	equ	0xFEE
 12495                           wreg	equ	0xFE8
 12496                           indf1	equ	0xFE7
 12497                           postdec1	equ	0xFE5
 12498                           fsr1h	equ	0xFE2
 12499                           fsr1l	equ	0xFE1
 12500                           indf2	equ	0xFDF
 12501                           postinc2	equ	0xFDE
 12502                           postdec2	equ	0xFDD
 12503                           fsr2h	equ	0xFDA
 12504                           fsr2l	equ	0xFD9
 12505                           status	equ	0xFD8
 12506                           
 12507 ;; *************** function _exp *****************
 12508 ;; Defined at:
 12509 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  x               3   55[BANK0 ] int 
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  exponent        2   61[BANK0 ] int 
 12514 ;;  sign            1   63[BANK0 ] unsigned char 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  3   55[BANK0 ] unsigned char 
 12517 ;; Registers used:
 12518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12524 ;;      Params:         0       3       0       0       0       0       0
 12525 ;;      Locals:         0       6       0       0       0       0       0
 12526 ;;      Temps:          0       0       0       0       0       0       0
 12527 ;;      Totals:         0       9       0       0       0       0       0
 12528 ;;Total ram usage:        9 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    6
 12531 ;; This function calls:
 12532 ;;		___awtoft
 12533 ;;		___ftdiv
 12534 ;;		___ftge
 12535 ;;		___ftmul
 12536 ;;		___ftneg
 12537 ;;		___ftsub
 12538 ;;		___fttol
 12539 ;;		_eval_poly
 12540 ;;		_floor
 12541 ;;		_ldexp
 12542 ;; This function is called by:
 12543 ;;		_pow
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text84
 12548  000E92                     __ptext84:
 12549                           	opt stack 0
 12550  000E92                     _exp:
 12551                           	opt stack 22
 12552                           
 12553                           ;incstack = 0
 12554  000E92  0100               	movlb	0	; () banked
 12555  000E94  5197               	movf	exp@x& (0+255),w,b
 12556  000E96  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12557  000E98  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12558  000E9A  A4D8               	btfss	status,2,c
 12559  000E9C  D007               	goto	l2067
 12560                           
 12561                           ; BSR set to: 0
 12562  000E9E  0E00               	movlw	0
 12563  000EA0  6F97               	movwf	?_exp& (0+255),b
 12564  000EA2  0E80               	movlw	128
 12565  000EA4  6F98               	movwf	(?_exp+1)& (0+255),b
 12566  000EA6  0E3F               	movlw	63
 12567  000EA8  6F99               	movwf	(?_exp+2)& (0+255),b
 12568                           
 12569                           ; BSR set to: 0
 12570  000EAA  0012               	return	
 12571  000EAC                     l2067:
 12572                           
 12573                           ; BSR set to: 0
 12574                           
 12575                           ; BSR set to: 0
 12576  000EAC  0E72               	movlw	114
 12577  000EAE  6E18               	movwf	___ftge@ff1,c
 12578  000EB0  0E31               	movlw	49
 12579  000EB2  6E19               	movwf	___ftge@ff1+1,c
 12580  000EB4  0E44               	movlw	68
 12581  000EB6  6E1A               	movwf	___ftge@ff1+2,c
 12582  000EB8  C097  F01B         	movff	exp@x,___ftge@ff2
 12583  000EBC  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12584  000EC0  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12585  000EC4  ECCC  F012         	call	___ftge	;wreg free
 12586  000EC8  B0D8               	btfsc	status,0,c
 12587  000ECA  D00C               	goto	l2069
 12588  000ECC  0E00               	movlw	0
 12589  000ECE  0100               	movlb	0	; () banked
 12590  000ED0  6FC5               	movwf	(_errno+1)& (0+255),b
 12591  000ED2  0E22               	movlw	34
 12592  000ED4  6FC4               	movwf	_errno& (0+255),b
 12593  000ED6  0EFF               	movlw	255
 12594  000ED8  6F97               	movwf	?_exp& (0+255),b
 12595  000EDA  0E7F               	movlw	127
 12596  000EDC  6F98               	movwf	(?_exp+1)& (0+255),b
 12597  000EDE  0E7F               	movlw	127
 12598  000EE0  6F99               	movwf	(?_exp+2)& (0+255),b
 12599                           
 12600                           ; BSR set to: 0
 12601  000EE2  0012               	return	
 12602  000EE4                     l2069:
 12603                           
 12604                           ; BSR set to: 0
 12605  000EE4  C097  F018         	movff	exp@x,___ftge@ff1
 12606  000EE8  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12607  000EEC  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12608  000EF0  0E49               	movlw	73
 12609  000EF2  6E1B               	movwf	___ftge@ff2,c
 12610  000EF4  0E3A               	movlw	58
 12611  000EF6  6E1C               	movwf	___ftge@ff2+1,c
 12612  000EF8  0EC4               	movlw	196
 12613  000EFA  6E1D               	movwf	___ftge@ff2+2,c
 12614  000EFC  ECCC  F012         	call	___ftge	;wreg free
 12615  000F00  B0D8               	btfsc	status,0,c
 12616  000F02  D00C               	goto	l2070
 12617  000F04  0E00               	movlw	0
 12618  000F06  0100               	movlb	0	; () banked
 12619  000F08  6FC5               	movwf	(_errno+1)& (0+255),b
 12620  000F0A  0E22               	movlw	34
 12621  000F0C  6FC4               	movwf	_errno& (0+255),b
 12622  000F0E  0E00               	movlw	0
 12623  000F10  6F97               	movwf	?_exp& (0+255),b
 12624  000F12  0E00               	movlw	0
 12625  000F14  6F98               	movwf	(?_exp+1)& (0+255),b
 12626  000F16  0E00               	movlw	0
 12627  000F18  6F99               	movwf	(?_exp+2)& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630  000F1A  0012               	return	
 12631  000F1C                     l2070:
 12632                           
 12633                           ; BSR set to: 0
 12634  000F1C  0100               	movlb	0	; () banked
 12635  000F1E  AF99               	btfss	(exp@x+2)& (0+255),7,b
 12636  000F20  D002               	goto	u7410
 12637  000F22  0E01               	movlw	1
 12638  000F24  D001               	goto	u7420
 12639  000F26                     u7410:
 12640  000F26  0E00               	movlw	0
 12641  000F28                     u7420:
 12642  000F28  6F9F               	movwf	exp@sign& (0+255),b
 12643                           
 12644                           ; BSR set to: 0
 12645  000F2A  519F               	movf	exp@sign& (0+255),w,b
 12646  000F2C  B4D8               	btfsc	status,2,c
 12647  000F2E  D00E               	goto	l2071
 12648                           
 12649                           ; BSR set to: 0
 12650  000F30  C097  F018         	movff	exp@x,___ftneg@f1
 12651  000F34  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 12652  000F38  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 12653  000F3C  ECA4  F01A         	call	___ftneg	;wreg free
 12654  000F40  C018  F097         	movff	?___ftneg,exp@x
 12655  000F44  C019  F098         	movff	?___ftneg+1,exp@x+1
 12656  000F48  C01A  F099         	movff	?___ftneg+2,exp@x+2
 12657  000F4C                     l2071:
 12658  000F4C  C097  F069         	movff	exp@x,___ftmul@f1
 12659  000F50  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 12660  000F54  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 12661  000F58  0EAA               	movlw	170
 12662  000F5A  0100               	movlb	0	; () banked
 12663  000F5C  6F6C               	movwf	___ftmul@f2& (0+255),b
 12664  000F5E  0EB8               	movlw	184
 12665  000F60  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12666  000F62  0E3F               	movlw	63
 12667  000F64  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12668  000F66  ECAD  F00D         	call	___ftmul	;wreg free
 12669  000F6A  C069  F097         	movff	?___ftmul,exp@x
 12670  000F6E  C06A  F098         	movff	?___ftmul+1,exp@x+1
 12671  000F72  C06B  F099         	movff	?___ftmul+2,exp@x+2
 12672  000F76  C097  F08F         	movff	exp@x,floor@x
 12673  000F7A  C098  F090         	movff	exp@x+1,floor@x+1
 12674  000F7E  C099  F091         	movff	exp@x+2,floor@x+2
 12675  000F82  EC0E  F00F         	call	_floor	;wreg free
 12676  000F86  C08F  F09A         	movff	?_floor,_exp$3270
 12677  000F8A  C090  F09B         	movff	?_floor+1,_exp$3270+1
 12678  000F8E  C091  F09C         	movff	?_floor+2,_exp$3270+2
 12679  000F92  C09A  F078         	movff	_exp$3270,___fttol@f1
 12680  000F96  C09B  F079         	movff	_exp$3270+1,___fttol@f1+1
 12681  000F9A  C09C  F07A         	movff	_exp$3270+2,___fttol@f1+2
 12682  000F9E  EC31  F00D         	call	___fttol	;wreg free
 12683  000FA2  C078  F09D         	movff	?___fttol,exp@exponent
 12684  000FA6  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 12685  000FAA  C097  F084         	movff	exp@x,___ftsub@f1
 12686  000FAE  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 12687  000FB2  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 12688  000FB6  C09D  F020         	movff	exp@exponent,___awtoft@c
 12689  000FBA  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 12690  000FBE  ECDF  F018         	call	___awtoft	;wreg free
 12691  000FC2  C020  F087         	movff	?___awtoft,___ftsub@f2
 12692  000FC6  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 12693  000FCA  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 12694  000FCE  EC25  F018         	call	___ftsub	;wreg free
 12695  000FD2  C084  F097         	movff	?___ftsub,exp@x
 12696  000FD6  C085  F098         	movff	?___ftsub+1,exp@x+1
 12697  000FDA  C086  F099         	movff	?___ftsub+2,exp@x+2
 12698  000FDE  C097  F084         	movff	exp@x,eval_poly@x
 12699  000FE2  C098  F085         	movff	exp@x+1,eval_poly@x+1
 12700  000FE6  C099  F086         	movff	exp@x+2,eval_poly@x+2
 12701  000FEA  0E70               	movlw	low exp@coeff
 12702  000FEC  0100               	movlb	0	; () banked
 12703  000FEE  6F87               	movwf	eval_poly@d& (0+255),b
 12704  000FF0  0E06               	movlw	high exp@coeff
 12705  000FF2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12706  000FF4  0E00               	movlw	0
 12707  000FF6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12708  000FF8  0E09               	movlw	9
 12709  000FFA  6F89               	movwf	eval_poly@n& (0+255),b
 12710  000FFC  EC7F  F00F         	call	_eval_poly	;wreg free
 12711  001000  C084  F08E         	movff	?_eval_poly,ldexp@value
 12712  001004  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 12713  001008  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 12714  00100C  C09D  F091         	movff	exp@exponent,ldexp@newexp
 12715  001010  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 12716  001014  ECEA  F00F         	call	_ldexp	;wreg free
 12717  001018  C08E  F097         	movff	?_ldexp,exp@x
 12718  00101C  C08F  F098         	movff	?_ldexp+1,exp@x+1
 12719  001020  C090  F099         	movff	?_ldexp+2,exp@x+2
 12720  001024  0100               	movlb	0	; () banked
 12721  001026  519F               	movf	exp@sign& (0+255),w,b
 12722  001028  B4D8               	btfsc	status,2,c
 12723  00102A  D025               	goto	l2072
 12724                           
 12725                           ; BSR set to: 0
 12726  00102C  2997               	incf	exp@x& (0+255),w,b
 12727  00102E  E10E               	bnz	l7528
 12728  001030  0E7F               	movlw	127
 12729  001032  1998               	xorwf	(exp@x+1)& (0+255),w,b
 12730  001034  E10B               	bnz	l7528
 12731  001036  0E7F               	movlw	127
 12732  001038  1999               	xorwf	(exp@x+2)& (0+255),w,b
 12733  00103A  A4D8               	btfss	status,2,c
 12734  00103C  D007               	goto	l2073
 12735                           
 12736                           ; BSR set to: 0
 12737  00103E  0E00               	movlw	0
 12738  001040  6F97               	movwf	?_exp& (0+255),b
 12739  001042  0E00               	movlw	0
 12740  001044  6F98               	movwf	(?_exp+1)& (0+255),b
 12741  001046  0E00               	movlw	0
 12742  001048  6F99               	movwf	(?_exp+2)& (0+255),b
 12743                           
 12744                           ; BSR set to: 0
 12745  00104A  0012               	return	
 12746  00104C                     l2073:
 12747  00104C                     l7528:
 12748                           
 12749                           ; BSR set to: 0
 12750  00104C  0E00               	movlw	0
 12751  00104E  6E29               	movwf	___ftdiv@f1,c
 12752  001050  0E80               	movlw	128
 12753  001052  6E2A               	movwf	___ftdiv@f1+1,c
 12754  001054  0E3F               	movlw	63
 12755  001056  6E2B               	movwf	___ftdiv@f1+2,c
 12756  001058  C097  F02C         	movff	exp@x,___ftdiv@f2
 12757  00105C  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 12758  001060  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 12759  001064  EC28  F00E         	call	___ftdiv	;wreg free
 12760  001068  C029  F097         	movff	?___ftdiv,?_exp
 12761  00106C  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 12762  001070  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 12763  001074  0012               	return	
 12764  001076                     l2072:
 12765                           
 12766                           ; BSR set to: 0
 12767  001076  C097  F097         	movff	exp@x,?_exp
 12768  00107A  C098  F098         	movff	exp@x+1,?_exp+1
 12769  00107E  C099  F099         	movff	exp@x+2,?_exp+2
 12770  001082  0012               	return		;funcret
 12771  001084                     __end_of_exp:
 12772                           	opt stack 0
 12773                           tosu	equ	0xFFF
 12774                           tosh	equ	0xFFE
 12775                           tosl	equ	0xFFD
 12776                           pclath	equ	0xFFA
 12777                           tblptru	equ	0xFF8
 12778                           tblptrh	equ	0xFF7
 12779                           tblptrl	equ	0xFF6
 12780                           tablat	equ	0xFF5
 12781                           prodh	equ	0xFF4
 12782                           prodl	equ	0xFF3
 12783                           intcon	equ	0xFF2
 12784                           intcon2	equ	0xFF1
 12785                           postinc0	equ	0xFEE
 12786                           wreg	equ	0xFE8
 12787                           indf1	equ	0xFE7
 12788                           postdec1	equ	0xFE5
 12789                           fsr1h	equ	0xFE2
 12790                           fsr1l	equ	0xFE1
 12791                           indf2	equ	0xFDF
 12792                           postinc2	equ	0xFDE
 12793                           postdec2	equ	0xFDD
 12794                           fsr2h	equ	0xFDA
 12795                           fsr2l	equ	0xFD9
 12796                           status	equ	0xFD8
 12797                           
 12798 ;; *************** function _ldexp *****************
 12799 ;; Defined at:
 12800 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;  value           3   46[BANK0 ] unsigned char 
 12803 ;;  newexp          2   49[BANK0 ] int 
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;		None
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  3   46[BANK0 ] int 
 12808 ;; Registers used:
 12809 ;;		wreg, status,2, status,0
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12815 ;;      Params:         0       5       0       0       0       0       0
 12816 ;;      Locals:         0       0       0       0       0       0       0
 12817 ;;      Temps:          0       2       0       0       0       0       0
 12818 ;;      Totals:         0       7       0       0       0       0       0
 12819 ;;Total ram usage:        7 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    3
 12822 ;; This function calls:
 12823 ;;		Nothing
 12824 ;; This function is called by:
 12825 ;;		_exp
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           	psect	text85
 12830  001FD4                     __ptext85:
 12831                           	opt stack 0
 12832  001FD4                     _ldexp:
 12833                           	opt stack 24
 12834                           
 12835                           ;incstack = 0
 12836  001FD4  0100               	movlb	0	; () banked
 12837  001FD6  518E               	movf	ldexp@value& (0+255),w,b
 12838  001FD8  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 12839  001FDA  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 12840  001FDC  A4D8               	btfss	status,2,c
 12841  001FDE  D007               	goto	l2091
 12842                           
 12843                           ; BSR set to: 0
 12844  001FE0  0E00               	movlw	0
 12845  001FE2  6F8E               	movwf	?_ldexp& (0+255),b
 12846  001FE4  0E00               	movlw	0
 12847  001FE6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12848  001FE8  0E00               	movlw	0
 12849  001FEA  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12850                           
 12851                           ; BSR set to: 0
 12852  001FEC  0012               	return	
 12853  001FEE                     l2091:
 12854                           
 12855                           ; BSR set to: 0
 12856                           
 12857                           ; BSR set to: 0
 12858  001FEE  5190               	movf	(ldexp@value+2)& (0+255),w,b
 12859  001FF0  0B7F               	andlw	127
 12860  001FF2  6F93               	movwf	??_ldexp& (0+255),b
 12861  001FF4  6B94               	clrf	(??_ldexp+1)& (0+255),b
 12862  001FF6  90D8               	bcf	status,0,c
 12863  001FF8  3793               	rlcf	??_ldexp& (0+255),f,b
 12864  001FFA  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 12865  001FFC  5193               	movf	??_ldexp& (0+255),w,b
 12866  001FFE  2791               	addwf	ldexp@newexp& (0+255),f,b
 12867  002000  5194               	movf	(??_ldexp+1)& (0+255),w,b
 12868  002002  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12869  002004  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 12870  002006  D003               	goto	u4270
 12871  002008  6B93               	clrf	??_ldexp& (0+255),b
 12872  00200A  2B93               	incf	??_ldexp& (0+255),f,b
 12873  00200C  D002               	goto	u4278
 12874  00200E                     u4270:
 12875  00200E  0100               	movlb	0	; () banked
 12876  002010  6B93               	clrf	??_ldexp& (0+255),b
 12877  002012                     u4278:
 12878  002012  5193               	movf	??_ldexp& (0+255),w,b
 12879  002014  2791               	addwf	ldexp@newexp& (0+255),f,b
 12880  002016  0E00               	movlw	0
 12881  002018  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12882  00201A  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 12883  00201C  D00B               	goto	l2093
 12884                           
 12885                           ; BSR set to: 0
 12886  00201E  0E00               	movlw	0
 12887  002020  6FC5               	movwf	(_errno+1)& (0+255),b
 12888  002022  0E22               	movlw	34
 12889  002024  6FC4               	movwf	_errno& (0+255),b
 12890  002026  0E00               	movlw	0
 12891  002028  6F8E               	movwf	?_ldexp& (0+255),b
 12892  00202A  0E00               	movlw	0
 12893  00202C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12894  00202E  0E00               	movlw	0
 12895  002030                     L1:
 12896  002030  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12897                           
 12898                           ; BSR set to: 0
 12899  002032  0012               	return	
 12900  002034                     l2093:
 12901                           
 12902                           ; BSR set to: 0
 12903                           
 12904                           ; BSR set to: 0
 12905  002034  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 12906  002036  D015               	goto	l2095
 12907  002038  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 12908  00203A  A0D8               	btfss	status,0,c
 12909  00203C  D012               	goto	l2095
 12910                           
 12911                           ; BSR set to: 0
 12912  00203E  0E00               	movlw	0
 12913  002040  6FC5               	movwf	(_errno+1)& (0+255),b
 12914  002042  0E22               	movlw	34
 12915  002044  6FC4               	movwf	_errno& (0+255),b
 12916                           
 12917                           ; BSR set to: 0
 12918  002046  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 12919  002048  D006               	goto	l2096
 12920                           
 12921                           ; BSR set to: 0
 12922  00204A  0EFF               	movlw	255
 12923  00204C  6F8E               	movwf	?_ldexp& (0+255),b
 12924  00204E  0E7F               	movlw	127
 12925  002050  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12926  002052  0EFF               	movlw	255
 12927  002054  D7ED               	goto	L1
 12928  002056                     l2096:
 12929                           
 12930                           ; BSR set to: 0
 12931                           
 12932                           ; BSR set to: 0
 12933  002056  0EFF               	movlw	255
 12934  002058  6F8E               	movwf	?_ldexp& (0+255),b
 12935  00205A  0E7F               	movlw	127
 12936  00205C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12937  00205E  0E7F               	movlw	127
 12938  002060  D7E7               	goto	L1
 12939  002062                     l2095:
 12940                           
 12941                           ; BSR set to: 0
 12942                           
 12943                           ; BSR set to: 0
 12944  002062  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 12945  002064  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 12946  002066  6F94               	movwf	(??_ldexp+1)& (0+255),b
 12947  002068  3191               	rrcf	ldexp@newexp& (0+255),w,b
 12948  00206A  6F93               	movwf	??_ldexp& (0+255),b
 12949  00206C  5190               	movf	(ldexp@value+2)& (0+255),w,b
 12950  00206E  1993               	xorwf	??_ldexp& (0+255),w,b
 12951  002070  0B80               	andlw	-128
 12952  002072  1993               	xorwf	??_ldexp& (0+255),w,b
 12953  002074  6F90               	movwf	(ldexp@value+2)& (0+255),b
 12954  002076  C091  F093         	movff	ldexp@newexp,??_ldexp
 12955  00207A  0E01               	movlw	1
 12956  00207C  1793               	andwf	??_ldexp& (0+255),f,b
 12957  00207E  3393               	rrcf	??_ldexp& (0+255),f,b
 12958  002080  3393               	rrcf	??_ldexp& (0+255),f,b
 12959  002082  518F               	movf	(ldexp@value+1)& (0+255),w,b
 12960  002084  1993               	xorwf	??_ldexp& (0+255),w,b
 12961  002086  0B7F               	andlw	-129
 12962  002088  1993               	xorwf	??_ldexp& (0+255),w,b
 12963  00208A  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 12964                           
 12965                           ; BSR set to: 0
 12966                           
 12967                           ; BSR set to: 0
 12968                           
 12969                           ; BSR set to: 0
 12970  00208C  C08E  F08E         	movff	ldexp@value,?_ldexp
 12971  002090  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 12972  002094  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 12973  002098  0012               	return	
 12974  00209A                     __end_of_ldexp:
 12975                           	opt stack 0
 12976                           tosu	equ	0xFFF
 12977                           tosh	equ	0xFFE
 12978                           tosl	equ	0xFFD
 12979                           pclath	equ	0xFFA
 12980                           tblptru	equ	0xFF8
 12981                           tblptrh	equ	0xFF7
 12982                           tblptrl	equ	0xFF6
 12983                           tablat	equ	0xFF5
 12984                           prodh	equ	0xFF4
 12985                           prodl	equ	0xFF3
 12986                           intcon	equ	0xFF2
 12987                           intcon2	equ	0xFF1
 12988                           postinc0	equ	0xFEE
 12989                           wreg	equ	0xFE8
 12990                           indf1	equ	0xFE7
 12991                           postdec1	equ	0xFE5
 12992                           fsr1h	equ	0xFE2
 12993                           fsr1l	equ	0xFE1
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _floor *****************
 13002 ;; Defined at:
 13003 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  x               3   47[BANK0 ] int 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  i               3   50[BANK0 ] int 
 13008 ;;  expon           2   53[BANK0 ] int 
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  3   47[BANK0 ] int 
 13011 ;; Registers used:
 13012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13018 ;;      Params:         0       3       0       0       0       0       0
 13019 ;;      Locals:         0       5       0       0       0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0
 13021 ;;      Totals:         0       8       0       0       0       0       0
 13022 ;;Total ram usage:        8 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; Hardware stack levels required when called:    5
 13025 ;; This function calls:
 13026 ;;		___altoft
 13027 ;;		___ftadd
 13028 ;;		___ftge
 13029 ;;		___fttol
 13030 ;;		_frexp
 13031 ;; This function is called by:
 13032 ;;		_exp
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text86
 13037  001E1C                     __ptext86:
 13038                           	opt stack 0
 13039  001E1C                     _floor:
 13040                           	opt stack 22
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;incstack = 0
 13044  001E1C  C08F  F018         	movff	floor@x,frexp@value
 13045  001E20  C090  F019         	movff	floor@x+1,frexp@value+1
 13046  001E24  C091  F01A         	movff	floor@x+2,frexp@value+2
 13047  001E28  0E95               	movlw	low floor@expon
 13048  001E2A  6E1B               	movwf	frexp@eptr,c
 13049  001E2C  0E00               	movlw	high floor@expon
 13050  001E2E  6E1C               	movwf	frexp@eptr+1,c
 13051  001E30  EC84  F012         	call	_frexp	;wreg free
 13052  001E34  0100               	movlb	0	; () banked
 13053  001E36  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13054  001E38  D010               	goto	l2078
 13055                           
 13056                           ; BSR set to: 0
 13057  001E3A  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13058  001E3C  D007               	goto	l2079
 13059                           
 13060                           ; BSR set to: 0
 13061  001E3E  0E00               	movlw	0
 13062  001E40  6F8F               	movwf	?_floor& (0+255),b
 13063  001E42  0E80               	movlw	128
 13064  001E44  6F90               	movwf	(?_floor+1)& (0+255),b
 13065  001E46  0EBF               	movlw	191
 13066  001E48  6F91               	movwf	(?_floor+2)& (0+255),b
 13067                           
 13068                           ; BSR set to: 0
 13069  001E4A  0012               	return	
 13070  001E4C                     l2079:
 13071                           
 13072                           ; BSR set to: 0
 13073                           
 13074                           ; BSR set to: 0
 13075  001E4C  0E00               	movlw	0
 13076  001E4E  6F8F               	movwf	?_floor& (0+255),b
 13077  001E50  0E00               	movlw	0
 13078  001E52  6F90               	movwf	(?_floor+1)& (0+255),b
 13079  001E54  0E00               	movlw	0
 13080  001E56  6F91               	movwf	(?_floor+2)& (0+255),b
 13081                           
 13082                           ; BSR set to: 0
 13083  001E58  0012               	return	
 13084  001E5A                     l2078:
 13085                           
 13086                           ; BSR set to: 0
 13087                           
 13088                           ; BSR set to: 0
 13089  001E5A  5196               	movf	(floor@expon+1)& (0+255),w,b
 13090  001E5C  E104               	bnz	u6910
 13091  001E5E  0E15               	movlw	21
 13092  001E60  5D95               	subwf	floor@expon& (0+255),w,b
 13093  001E62  A0D8               	btfss	status,0,c
 13094  001E64  D007               	goto	l2081
 13095  001E66                     u6910:
 13096                           
 13097                           ; BSR set to: 0
 13098  001E66  C08F  F08F         	movff	floor@x,?_floor
 13099  001E6A  C090  F090         	movff	floor@x+1,?_floor+1
 13100  001E6E  C091  F091         	movff	floor@x+2,?_floor+2
 13101  001E72  0012               	return	
 13102  001E74                     l2081:
 13103                           
 13104                           ; BSR set to: 0
 13105                           
 13106                           ; BSR set to: 0
 13107  001E74  C08F  F078         	movff	floor@x,___fttol@f1
 13108  001E78  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13109  001E7C  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13110  001E80  EC31  F00D         	call	___fttol	;wreg free
 13111  001E84  C078  F087         	movff	?___fttol,___altoft@c
 13112  001E88  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13113  001E8C  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13114  001E90  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13115  001E94  EC96  F013         	call	___altoft	;wreg free
 13116  001E98  C087  F092         	movff	?___altoft,floor@i
 13117  001E9C  C088  F093         	movff	?___altoft+1,floor@i+1
 13118  001EA0  C089  F094         	movff	?___altoft+2,floor@i+2
 13119  001EA4  C08F  F018         	movff	floor@x,___ftge@ff1
 13120  001EA8  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13121  001EAC  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13122  001EB0  C092  F01B         	movff	floor@i,___ftge@ff2
 13123  001EB4  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13124  001EB8  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13125  001EBC  ECCC  F012         	call	___ftge	;wreg free
 13126  001EC0  B0D8               	btfsc	status,0,c
 13127  001EC2  D016               	goto	l2082
 13128  001EC4  C092  F078         	movff	floor@i,___ftadd@f1
 13129  001EC8  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13130  001ECC  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13131  001ED0  0E00               	movlw	0
 13132  001ED2  0100               	movlb	0	; () banked
 13133  001ED4  6F7B               	movwf	___ftadd@f2& (0+255),b
 13134  001ED6  0E80               	movlw	128
 13135  001ED8  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13136  001EDA  0EBF               	movlw	191
 13137  001EDC  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13138  001EDE  EC08  F00A         	call	___ftadd	;wreg free
 13139  001EE2  C078  F08F         	movff	?___ftadd,?_floor
 13140  001EE6  C079  F090         	movff	?___ftadd+1,?_floor+1
 13141  001EEA  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13142  001EEE  0012               	return	
 13143  001EF0                     l2082:
 13144  001EF0  C092  F08F         	movff	floor@i,?_floor
 13145  001EF4  C093  F090         	movff	floor@i+1,?_floor+1
 13146  001EF8  C094  F091         	movff	floor@i+2,?_floor+2
 13147  001EFC  0012               	return		;funcret
 13148  001EFE                     __end_of_floor:
 13149                           	opt stack 0
 13150                           tosu	equ	0xFFF
 13151                           tosh	equ	0xFFE
 13152                           tosl	equ	0xFFD
 13153                           pclath	equ	0xFFA
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           intcon	equ	0xFF2
 13161                           intcon2	equ	0xFF1
 13162                           postinc0	equ	0xFEE
 13163                           wreg	equ	0xFE8
 13164                           indf1	equ	0xFE7
 13165                           postdec1	equ	0xFE5
 13166                           fsr1h	equ	0xFE2
 13167                           fsr1l	equ	0xFE1
 13168                           indf2	equ	0xFDF
 13169                           postinc2	equ	0xFDE
 13170                           postdec2	equ	0xFDD
 13171                           fsr2h	equ	0xFDA
 13172                           fsr2l	equ	0xFD9
 13173                           status	equ	0xFD8
 13174                           
 13175 ;; *************** function _frexp *****************
 13176 ;; Defined at:
 13177 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13178 ;; Parameters:    Size  Location     Type
 13179 ;;  value           3   23[COMRAM] int 
 13180 ;;  eptr            2   26[COMRAM] PTR int 
 13181 ;;		 -> log@exponent(2), floor@expon(2), 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;		None
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  3   23[COMRAM] PTR int 
 13186 ;; Registers used:
 13187 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13193 ;;      Params:         5       0       0       0       0       0       0
 13194 ;;      Locals:         0       0       0       0       0       0       0
 13195 ;;      Temps:          2       0       0       0       0       0       0
 13196 ;;      Totals:         7       0       0       0       0       0       0
 13197 ;;Total ram usage:        7 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    3
 13200 ;; This function calls:
 13201 ;;		Nothing
 13202 ;; This function is called by:
 13203 ;;		_floor
 13204 ;;		_log
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           	psect	text87
 13209  002508                     __ptext87:
 13210                           	opt stack 0
 13211  002508                     _frexp:
 13212                           	opt stack 24
 13213                           
 13214                           ;incstack = 0
 13215  002508  5018               	movf	frexp@value,w,c
 13216  00250A  1019               	iorwf	frexp@value+1,w,c
 13217  00250C  101A               	iorwf	frexp@value+2,w,c
 13218  00250E  A4D8               	btfss	status,2,c
 13219  002510  D00F               	goto	l2087
 13220  002512  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13221  002516  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13222  00251A  0E00               	movlw	0
 13223  00251C  6EDE               	movwf	postinc2,c
 13224  00251E  0E00               	movlw	0
 13225  002520  6EDD               	movwf	postdec2,c
 13226  002522  0E00               	movlw	0
 13227  002524  6E18               	movwf	?_frexp,c
 13228  002526  0E00               	movlw	0
 13229  002528  6E19               	movwf	?_frexp+1,c
 13230  00252A  0E00               	movlw	0
 13231  00252C  6E1A               	movwf	?_frexp+2,c
 13232  00252E  0012               	return	
 13233  002530                     l2087:
 13234  002530  501A               	movf	frexp@value+2,w,c
 13235  002532  0B7F               	andlw	127
 13236  002534  6E1D               	movwf	??_frexp& (0+255),c
 13237  002536  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13238  002538  90D8               	bcf	status,0,c
 13239  00253A  361D               	rlcf	??_frexp,f,c
 13240  00253C  361E               	rlcf	??_frexp+1,f,c
 13241  00253E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13242  002542  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13243  002546  C01D  FFDE         	movff	??_frexp,postinc2
 13244  00254A  C01E  FFDD         	movff	??_frexp+1,postdec2
 13245  00254E  AE19               	btfss	frexp@value+1,7,c
 13246  002550  D003               	goto	u3910
 13247  002552  6A1D               	clrf	??_frexp& (0+255),c
 13248  002554  2A1D               	incf	??_frexp& (0+255),f,c
 13249  002556  D001               	goto	u3918
 13250  002558                     u3910:
 13251  002558  6A1D               	clrf	??_frexp& (0+255),c
 13252  00255A                     u3918:
 13253  00255A  501D               	movf	??_frexp,w,c
 13254  00255C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13255  002560  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13256  002564  12DE               	iorwf	postinc2,f,c
 13257  002566  0E00               	movlw	0
 13258  002568  12DD               	iorwf	postdec2,f,c
 13259  00256A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13260  00256E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13261  002572  0E82               	movlw	130
 13262  002574  26DE               	addwf	postinc2,f,c
 13263  002576  0EFF               	movlw	255
 13264  002578  22DD               	addwfc	postdec2,f,c
 13265  00257A  801A               	bsf	frexp@value+2,0,c
 13266  00257C  821A               	bsf	frexp@value+2,1,c
 13267  00257E  841A               	bsf	frexp@value+2,2,c
 13268  002580  861A               	bsf	frexp@value+2,3,c
 13269  002582  881A               	bsf	frexp@value+2,4,c
 13270  002584  8A1A               	bsf	frexp@value+2,5,c
 13271  002586  9C1A               	bcf	frexp@value+2,6,c
 13272  002588  9E19               	bcf	frexp@value+1,7,c
 13273  00258A  C018  F018         	movff	frexp@value,?_frexp
 13274  00258E  C019  F019         	movff	frexp@value+1,?_frexp+1
 13275  002592  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13276  002596  0012               	return	
 13277  002598                     __end_of_frexp:
 13278                           	opt stack 0
 13279                           tosu	equ	0xFFF
 13280                           tosh	equ	0xFFE
 13281                           tosl	equ	0xFFD
 13282                           pclath	equ	0xFFA
 13283                           tblptru	equ	0xFF8
 13284                           tblptrh	equ	0xFF7
 13285                           tblptrl	equ	0xFF6
 13286                           tablat	equ	0xFF5
 13287                           prodh	equ	0xFF4
 13288                           prodl	equ	0xFF3
 13289                           intcon	equ	0xFF2
 13290                           intcon2	equ	0xFF1
 13291                           postinc0	equ	0xFEE
 13292                           wreg	equ	0xFE8
 13293                           indf1	equ	0xFE7
 13294                           postdec1	equ	0xFE5
 13295                           fsr1h	equ	0xFE2
 13296                           fsr1l	equ	0xFE1
 13297                           indf2	equ	0xFDF
 13298                           postinc2	equ	0xFDE
 13299                           postdec2	equ	0xFDD
 13300                           fsr2h	equ	0xFDA
 13301                           fsr2l	equ	0xFD9
 13302                           status	equ	0xFD8
 13303                           
 13304 ;; *************** function ___fttol *****************
 13305 ;; Defined at:
 13306 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;  f1              3   24[BANK0 ] float 
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  lval            4   34[BANK0 ] unsigned long 
 13311 ;;  exp1            1   38[BANK0 ] unsigned char 
 13312 ;;  sign1           1   33[BANK0 ] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  4   24[BANK0 ] long 
 13315 ;; Registers used:
 13316 ;;		wreg, status,2, status,0
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13322 ;;      Params:         0       4       0       0       0       0       0
 13323 ;;      Locals:         0       6       0       0       0       0       0
 13324 ;;      Temps:          0       5       0       0       0       0       0
 13325 ;;      Totals:         0      15       0       0       0       0       0
 13326 ;;Total ram usage:       15 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    3
 13329 ;; This function calls:
 13330 ;;		Nothing
 13331 ;; This function is called by:
 13332 ;;		_AdcConvert
 13333 ;;		_pow
 13334 ;;		_exp
 13335 ;;		_floor
 13336 ;; This function uses a non-reentrant model
 13337 ;;
 13338                           
 13339                           	psect	text88
 13340  001A62                     __ptext88:
 13341                           	opt stack 0
 13342  001A62                     ___fttol:
 13343                           	opt stack 23
 13344                           
 13345                           ;incstack = 0
 13346  001A62  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13347  001A66  0100               	movlb	0	; () banked
 13348  001A68  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13349  001A6A  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13350  001A6C  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13351  001A6E  377C               	rlcf	??___fttol& (0+255),f,b
 13352  001A70  E301               	bnc	u3821
 13353  001A72  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13354  001A74                     u3821:
 13355  001A74  517C               	movf	??___fttol& (0+255),w,b
 13356  001A76  6F86               	movwf	___fttol@exp1& (0+255),b
 13357  001A78  5186               	movf	___fttol@exp1& (0+255),w,b
 13358  001A7A  A4D8               	btfss	status,2,c
 13359  001A7C  D009               	goto	l1744
 13360                           
 13361                           ; BSR set to: 0
 13362  001A7E  0E00               	movlw	0
 13363  001A80  6F78               	movwf	?___fttol& (0+255),b
 13364  001A82  0E00               	movlw	0
 13365  001A84  6F79               	movwf	(?___fttol+1)& (0+255),b
 13366  001A86  0E00               	movlw	0
 13367  001A88  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13368  001A8A  0E00               	movlw	0
 13369  001A8C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13370                           
 13371                           ; BSR set to: 0
 13372  001A8E  0012               	return	
 13373  001A90                     l1744:
 13374                           
 13375                           ; BSR set to: 0
 13376                           
 13377                           ; BSR set to: 0
 13378  001A90  0E17               	movlw	23
 13379  001A92  6F7C               	movwf	??___fttol& (0+255),b
 13380  001A94  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13381  001A98  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13382  001A9C  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13383  001AA0  297C               	incf	??___fttol& (0+255),w,b
 13384  001AA2  6F80               	movwf	(??___fttol+4)& (0+255),b
 13385  001AA4  D004               	goto	u3840
 13386  001AA6                     u3845:
 13387  001AA6  90D8               	bcf	status,0,c
 13388  001AA8  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13389  001AAA  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13390  001AAC  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13391  001AAE                     u3840:
 13392  001AAE  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13393  001AB0  D7FA               	goto	u3845
 13394  001AB2  0100               	movlb	0	; () banked
 13395  001AB4  517D               	movf	(??___fttol+1)& (0+255),w,b
 13396  001AB6  6F81               	movwf	___fttol@sign1& (0+255),b
 13397                           
 13398                           ; BSR set to: 0
 13399  001AB8  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13400                           
 13401                           ; BSR set to: 0
 13402  001ABA  0EFF               	movlw	255
 13403  001ABC  1778               	andwf	___fttol@f1& (0+255),f,b
 13404  001ABE  0EFF               	movlw	255
 13405  001AC0  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13406  001AC2  0E00               	movlw	0
 13407  001AC4  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13408                           
 13409                           ; BSR set to: 0
 13410  001AC6  5178               	movf	___fttol@f1& (0+255),w,b
 13411  001AC8  6F82               	movwf	___fttol@lval& (0+255),b
 13412  001ACA  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13413  001ACC  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13414  001ACE  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13415  001AD0  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13416  001AD2  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13417                           
 13418                           ; BSR set to: 0
 13419  001AD4  0E8E               	movlw	142
 13420  001AD6  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13421                           
 13422                           ; BSR set to: 0
 13423  001AD8  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13424  001ADA  D016               	goto	l1746
 13425                           
 13426                           ; BSR set to: 0
 13427  001ADC  5186               	movf	___fttol@exp1& (0+255),w,b
 13428  001ADE  0A80               	xorlw	128
 13429  001AE0  0F8F               	addlw	143
 13430  001AE2  B0D8               	btfsc	status,0,c
 13431  001AE4  D009               	goto	l1747
 13432                           
 13433                           ; BSR set to: 0
 13434  001AE6  0E00               	movlw	0
 13435  001AE8  6F78               	movwf	?___fttol& (0+255),b
 13436  001AEA  0E00               	movlw	0
 13437  001AEC  6F79               	movwf	(?___fttol+1)& (0+255),b
 13438  001AEE  0E00               	movlw	0
 13439  001AF0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13440  001AF2  0E00               	movlw	0
 13441  001AF4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13442                           
 13443                           ; BSR set to: 0
 13444  001AF6  0012               	return	
 13445  001AF8                     l1747:
 13446                           
 13447                           ; BSR set to: 0
 13448                           
 13449                           ; BSR set to: 0
 13450                           
 13451                           ; BSR set to: 0
 13452  001AF8  90D8               	bcf	status,0,c
 13453  001AFA  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13454  001AFC  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13455  001AFE  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13456  001B00  3382               	rrcf	___fttol@lval& (0+255),f,b
 13457                           
 13458                           ; BSR set to: 0
 13459  001B02  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13460  001B04  D7F9               	goto	l1747
 13461                           
 13462                           ; BSR set to: 0
 13463  001B06  D015               	goto	u3880
 13464  001B08                     l1746:
 13465                           
 13466                           ; BSR set to: 0
 13467                           
 13468                           ; BSR set to: 0
 13469  001B08  0E17               	movlw	23
 13470  001B0A  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13471  001B0C  D00F               	goto	l1752
 13472                           
 13473                           ; BSR set to: 0
 13474  001B0E  0E00               	movlw	0
 13475  001B10  6F78               	movwf	?___fttol& (0+255),b
 13476  001B12  0E00               	movlw	0
 13477  001B14  6F79               	movwf	(?___fttol+1)& (0+255),b
 13478  001B16  0E00               	movlw	0
 13479  001B18  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13480  001B1A  0E00               	movlw	0
 13481  001B1C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13482                           
 13483                           ; BSR set to: 0
 13484  001B1E  0012               	return	
 13485  001B20                     
 13486                           ; BSR set to: 0
 13487                           
 13488                           ; BSR set to: 0
 13489  001B20  90D8               	bcf	status,0,c
 13490  001B22  3782               	rlcf	___fttol@lval& (0+255),f,b
 13491  001B24  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13492  001B26  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13493  001B28  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13494  001B2A  0786               	decf	___fttol@exp1& (0+255),f,b
 13495  001B2C                     l1752:
 13496                           
 13497                           ; BSR set to: 0
 13498                           
 13499                           ; BSR set to: 0
 13500  001B2C  5186               	movf	___fttol@exp1& (0+255),w,b
 13501  001B2E  A4D8               	btfss	status,2,c
 13502  001B30  D7F7               	goto	l1753
 13503  001B32                     u3880:
 13504                           
 13505                           ; BSR set to: 0
 13506                           
 13507                           ; BSR set to: 0
 13508                           
 13509                           ; BSR set to: 0
 13510  001B32  5181               	movf	___fttol@sign1& (0+255),w,b
 13511  001B34  B4D8               	btfsc	status,2,c
 13512  001B36  D008               	goto	l1755
 13513                           
 13514                           ; BSR set to: 0
 13515  001B38  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13516  001B3A  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13517  001B3C  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13518  001B3E  6D82               	negf	___fttol@lval& (0+255),b
 13519  001B40  0E00               	movlw	0
 13520  001B42  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13521  001B44  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13522  001B46  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13523  001B48                     l1755:
 13524                           
 13525                           ; BSR set to: 0
 13526                           
 13527                           ; BSR set to: 0
 13528  001B48  C082  F078         	movff	___fttol@lval,?___fttol
 13529  001B4C  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13530  001B50  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13531  001B54  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13532  001B58  0012               	return	
 13533  001B5A                     __end_of___fttol:
 13534                           	opt stack 0
 13535                           tosu	equ	0xFFF
 13536                           tosh	equ	0xFFE
 13537                           tosl	equ	0xFFD
 13538                           pclath	equ	0xFFA
 13539                           tblptru	equ	0xFF8
 13540                           tblptrh	equ	0xFF7
 13541                           tblptrl	equ	0xFF6
 13542                           tablat	equ	0xFF5
 13543                           prodh	equ	0xFF4
 13544                           prodl	equ	0xFF3
 13545                           intcon	equ	0xFF2
 13546                           intcon2	equ	0xFF1
 13547                           postinc0	equ	0xFEE
 13548                           wreg	equ	0xFE8
 13549                           indf1	equ	0xFE7
 13550                           postdec1	equ	0xFE5
 13551                           fsr1h	equ	0xFE2
 13552                           fsr1l	equ	0xFE1
 13553                           indf2	equ	0xFDF
 13554                           postinc2	equ	0xFDE
 13555                           postdec2	equ	0xFDD
 13556                           fsr2h	equ	0xFDA
 13557                           fsr2l	equ	0xFD9
 13558                           status	equ	0xFD8
 13559                           
 13560 ;; *************** function ___ftge *****************
 13561 ;; Defined at:
 13562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13563 ;; Parameters:    Size  Location     Type
 13564 ;;  ff1             3   23[COMRAM] float 
 13565 ;;  ff2             3   26[COMRAM] float 
 13566 ;; Auto vars:     Size  Location     Type
 13567 ;;		None
 13568 ;; Return value:  Size  Location     Type
 13569 ;;		None               void
 13570 ;; Registers used:
 13571 ;;		wreg, status,2, status,0
 13572 ;; Tracked objects:
 13573 ;;		On entry : 0/0
 13574 ;;		On exit  : 0/0
 13575 ;;		Unchanged: 0/0
 13576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13577 ;;      Params:         6       0       0       0       0       0       0
 13578 ;;      Locals:         0       0       0       0       0       0       0
 13579 ;;      Temps:          3       0       0       0       0       0       0
 13580 ;;      Totals:         9       0       0       0       0       0       0
 13581 ;;Total ram usage:        9 bytes
 13582 ;; Hardware stack levels used:    1
 13583 ;; Hardware stack levels required when called:    3
 13584 ;; This function calls:
 13585 ;;		Nothing
 13586 ;; This function is called by:
 13587 ;;		_CheckFlashPrecentage
 13588 ;;		_pow
 13589 ;;		_exp
 13590 ;;		_floor
 13591 ;; This function uses a non-reentrant model
 13592 ;;
 13593                           
 13594                           	psect	text89
 13595  002598                     __ptext89:
 13596                           	opt stack 0
 13597  002598                     ___ftge:
 13598                           	opt stack 26
 13599                           
 13600                           ; BSR set to: 0
 13601                           ;incstack = 0
 13602  002598  AE1A               	btfss	___ftge@ff1+2,7,c
 13603  00259A  D016               	goto	l1716
 13604  00259C  C018  F01E         	movff	___ftge@ff1,??___ftge
 13605  0025A0  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13606  0025A4  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13607  0025A8  1E1E               	comf	??___ftge,f,c
 13608  0025AA  1E1F               	comf	??___ftge+1,f,c
 13609  0025AC  1E20               	comf	??___ftge+2,f,c
 13610  0025AE  2A1E               	incf	??___ftge,f,c
 13611  0025B0  0E00               	movlw	0
 13612  0025B2  221F               	addwfc	??___ftge+1,f,c
 13613  0025B4  2220               	addwfc	??___ftge+2,f,c
 13614  0025B6  0E00               	movlw	0
 13615  0025B8  241E               	addwf	??___ftge,w,c
 13616  0025BA  6E18               	movwf	___ftge@ff1,c
 13617  0025BC  0E00               	movlw	0
 13618  0025BE  201F               	addwfc	??___ftge+1,w,c
 13619  0025C0  6E19               	movwf	___ftge@ff1+1,c
 13620  0025C2  0E80               	movlw	128
 13621  0025C4  2020               	addwfc	??___ftge+2,w,c
 13622  0025C6  6E1A               	movwf	___ftge@ff1+2,c
 13623  0025C8                     l1716:
 13624  0025C8  AE1D               	btfss	___ftge@ff2+2,7,c
 13625  0025CA  D016               	goto	l1717
 13626  0025CC  C01B  F01E         	movff	___ftge@ff2,??___ftge
 13627  0025D0  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 13628  0025D4  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 13629  0025D8  1E1E               	comf	??___ftge,f,c
 13630  0025DA  1E1F               	comf	??___ftge+1,f,c
 13631  0025DC  1E20               	comf	??___ftge+2,f,c
 13632  0025DE  2A1E               	incf	??___ftge,f,c
 13633  0025E0  0E00               	movlw	0
 13634  0025E2  221F               	addwfc	??___ftge+1,f,c
 13635  0025E4  2220               	addwfc	??___ftge+2,f,c
 13636  0025E6  0E00               	movlw	0
 13637  0025E8  241E               	addwf	??___ftge,w,c
 13638  0025EA  6E1B               	movwf	___ftge@ff2,c
 13639  0025EC  0E00               	movlw	0
 13640  0025EE  201F               	addwfc	??___ftge+1,w,c
 13641  0025F0  6E1C               	movwf	___ftge@ff2+1,c
 13642  0025F2  0E80               	movlw	128
 13643  0025F4  2020               	addwfc	??___ftge+2,w,c
 13644  0025F6  6E1D               	movwf	___ftge@ff2+2,c
 13645  0025F8                     l1717:
 13646  0025F8  0E00               	movlw	0
 13647  0025FA  1A18               	xorwf	___ftge@ff1,f,c
 13648  0025FC  0E00               	movlw	0
 13649  0025FE  1A19               	xorwf	___ftge@ff1+1,f,c
 13650  002600  0E80               	movlw	128
 13651  002602  1A1A               	xorwf	___ftge@ff1+2,f,c
 13652  002604  0E00               	movlw	0
 13653  002606  1A1B               	xorwf	___ftge@ff2,f,c
 13654  002608  0E00               	movlw	0
 13655  00260A  1A1C               	xorwf	___ftge@ff2+1,f,c
 13656  00260C  0E80               	movlw	128
 13657  00260E  1A1D               	xorwf	___ftge@ff2+2,f,c
 13658  002610  501B               	movf	___ftge@ff2,w,c
 13659  002612  5C18               	subwf	___ftge@ff1,w,c
 13660  002614  501C               	movf	___ftge@ff2+1,w,c
 13661  002616  5819               	subwfb	___ftge@ff1+1,w,c
 13662  002618  501D               	movf	___ftge@ff2+2,w,c
 13663  00261A  581A               	subwfb	___ftge@ff1+2,w,c
 13664  00261C  B0D8               	btfsc	status,0,c
 13665  00261E  D002               	goto	l4354
 13666  002620  90D8               	bcf	status,0,c
 13667  002622  0012               	return	
 13668  002624                     l4354:
 13669  002624  80D8               	bsf	status,0,c
 13670  002626  0012               	return	
 13671  002628                     __end_of___ftge:
 13672                           	opt stack 0
 13673                           tosu	equ	0xFFF
 13674                           tosh	equ	0xFFE
 13675                           tosl	equ	0xFFD
 13676                           pclath	equ	0xFFA
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodh	equ	0xFF4
 13682                           prodl	equ	0xFF3
 13683                           intcon	equ	0xFF2
 13684                           intcon2	equ	0xFF1
 13685                           postinc0	equ	0xFEE
 13686                           wreg	equ	0xFE8
 13687                           indf1	equ	0xFE7
 13688                           postdec1	equ	0xFE5
 13689                           fsr1h	equ	0xFE2
 13690                           fsr1l	equ	0xFE1
 13691                           indf2	equ	0xFDF
 13692                           postinc2	equ	0xFDE
 13693                           postdec2	equ	0xFDD
 13694                           fsr2h	equ	0xFDA
 13695                           fsr2l	equ	0xFD9
 13696                           status	equ	0xFD8
 13697                           
 13698 ;; *************** function ___altoft *****************
 13699 ;; Defined at:
 13700 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;  c               4   39[BANK0 ] long 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  sign            1   47[COMRAM] unsigned char 
 13705 ;;  exp             1   46[COMRAM] unsigned char 
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  3   39[BANK0 ] float 
 13708 ;; Registers used:
 13709 ;;		wreg, status,2, status,0, cstack
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13715 ;;      Params:         0       4       0       0       0       0       0
 13716 ;;      Locals:         2       0       0       0       0       0       0
 13717 ;;      Temps:          0       4       0       0       0       0       0
 13718 ;;      Totals:         2       8       0       0       0       0       0
 13719 ;;Total ram usage:       10 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    4
 13722 ;; This function calls:
 13723 ;;		___ftpack
 13724 ;; This function is called by:
 13725 ;;		_floor
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           	psect	text90
 13730  00272C                     __ptext90:
 13731                           	opt stack 0
 13732  00272C                     ___altoft:
 13733                           	opt stack 22
 13734                           
 13735                           ;incstack = 0
 13736  00272C  0E00               	movlw	0
 13737  00272E  6E30               	movwf	___altoft@sign,c
 13738  002730  0E8E               	movlw	142
 13739  002732  6E2F               	movwf	___altoft@exp,c
 13740  002734  0100               	movlb	0	; () banked
 13741  002736  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 13742  002738  D011               	goto	l1514
 13743                           
 13744                           ; BSR set to: 0
 13745  00273A  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 13746  00273C  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 13747  00273E  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 13748  002740  6D87               	negf	___altoft@c& (0+255),b
 13749  002742  0E00               	movlw	0
 13750  002744  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 13751  002746  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 13752  002748  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 13753                           
 13754                           ; BSR set to: 0
 13755  00274A  0E01               	movlw	1
 13756  00274C  6E30               	movwf	___altoft@sign,c
 13757                           
 13758                           ; BSR set to: 0
 13759  00274E  D006               	goto	l1514
 13760  002750                     
 13761                           ; BSR set to: 0
 13762                           
 13763                           ; BSR set to: 0
 13764  002750  90D8               	bcf	status,0,c
 13765  002752  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 13766  002754  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 13767  002756  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 13768  002758  3387               	rrcf	___altoft@c& (0+255),f,b
 13769  00275A  2A2F               	incf	___altoft@exp,f,c
 13770  00275C                     l1514:
 13771                           
 13772                           ; BSR set to: 0
 13773                           
 13774                           ; BSR set to: 0
 13775  00275C  0E00               	movlw	0
 13776  00275E  1587               	andwf	___altoft@c& (0+255),w,b
 13777  002760  6F8B               	movwf	??___altoft& (0+255),b
 13778  002762  0E00               	movlw	0
 13779  002764  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 13780  002766  6F8C               	movwf	(??___altoft+1)& (0+255),b
 13781  002768  0E00               	movlw	0
 13782  00276A  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 13783  00276C  6F8D               	movwf	(??___altoft+2)& (0+255),b
 13784  00276E  0EFF               	movlw	255
 13785  002770  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 13786  002772  6F8E               	movwf	(??___altoft+3)& (0+255),b
 13787  002774  518B               	movf	??___altoft& (0+255),w,b
 13788  002776  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 13789  002778  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 13790  00277A  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 13791  00277C  A4D8               	btfss	status,2,c
 13792  00277E  D7E8               	goto	l1515
 13793                           
 13794                           ; BSR set to: 0
 13795                           
 13796                           ; BSR set to: 0
 13797  002780  C087  F018         	movff	___altoft@c,___ftpack@arg
 13798  002784  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 13799  002788  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 13800  00278C  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 13801  002790  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 13802  002794  EC02  F011         	call	___ftpack	;wreg free
 13803  002798  C018  F087         	movff	?___ftpack,?___altoft
 13804  00279C  C019  F088         	movff	?___ftpack+1,?___altoft+1
 13805  0027A0  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 13806  0027A4  0012               	return	
 13807  0027A6                     __end_of___altoft:
 13808                           	opt stack 0
 13809                           tosu	equ	0xFFF
 13810                           tosh	equ	0xFFE
 13811                           tosl	equ	0xFFD
 13812                           pclath	equ	0xFFA
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           intcon2	equ	0xFF1
 13821                           postinc0	equ	0xFEE
 13822                           wreg	equ	0xFE8
 13823                           indf1	equ	0xFE7
 13824                           postdec1	equ	0xFE5
 13825                           fsr1h	equ	0xFE2
 13826                           fsr1l	equ	0xFE1
 13827                           indf2	equ	0xFDF
 13828                           postinc2	equ	0xFDE
 13829                           postdec2	equ	0xFDD
 13830                           fsr2h	equ	0xFDA
 13831                           fsr2l	equ	0xFD9
 13832                           status	equ	0xFD8
 13833                           
 13834 ;; *************** function _eval_poly *****************
 13835 ;; Defined at:
 13836 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  x               3   36[BANK0 ] float 
 13839 ;;  d               2   39[BANK0 ] PTR const 
 13840 ;;		 -> log@coeff(27), exp@coeff(30), 
 13841 ;;  n               2   41[BANK0 ] int 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  res             3   43[BANK0 ] int 
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  3   36[BANK0 ] int 
 13846 ;; Registers used:
 13847 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : 0/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13853 ;;      Params:         0       7       0       0       0       0       0
 13854 ;;      Locals:         0       3       0       0       0       0       0
 13855 ;;      Temps:          2       0       0       0       0       0       0
 13856 ;;      Totals:         2      10       0       0       0       0       0
 13857 ;;Total ram usage:       12 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; Hardware stack levels required when called:    5
 13860 ;; This function calls:
 13861 ;;		___ftadd
 13862 ;;		___ftmul
 13863 ;;		___wmul
 13864 ;; This function is called by:
 13865 ;;		_exp
 13866 ;;		_log
 13867 ;; This function uses a non-reentrant model
 13868 ;;
 13869                           
 13870                           	psect	text91
 13871  001EFE                     __ptext91:
 13872                           	opt stack 0
 13873  001EFE                     _eval_poly:
 13874                           	opt stack 22
 13875                           
 13876                           ;incstack = 0
 13877  001EFE  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13878  001F02  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13879  001F06  0E00               	movlw	0
 13880  001F08  6E1B               	movwf	___wmul@multiplicand+1,c
 13881  001F0A  0E03               	movlw	3
 13882  001F0C  6E1A               	movwf	___wmul@multiplicand,c
 13883  001F0E  EC91  F01A         	call	___wmul	;wreg free
 13884  001F12  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13885  001F16  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13886  001F1A  5018               	movf	?___wmul,w,c
 13887  001F1C  262F               	addwf	??_eval_poly,f,c
 13888  001F1E  5019               	movf	?___wmul+1,w,c
 13889  001F20  2230               	addwfc	??_eval_poly+1,f,c
 13890  001F22  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13891  001F26  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13892  001F2A                     	if	0	;tblptru may be non-zero
 13893  001F2A                     	endif
 13894  001F2A                     	if	0	;tblptru may be non-zero
 13895  001F2A                     	endif
 13896  001F2A  0009               	tblrd		*+
 13897  001F2C  CFF5 F08B          	movff	tablat,eval_poly@res
 13898  001F30  0009               	tblrd		*+
 13899  001F32  CFF5 F08C          	movff	tablat,eval_poly@res+1
 13900  001F36  000A               	tblrd		*-
 13901  001F38  CFF5 F08D          	movff	tablat,eval_poly@res+2
 13902  001F3C  D03F               	goto	l2139
 13903  001F3E  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 13904  001F42  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 13905  001F46  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 13906  001F4A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 13907  001F4E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 13908  001F52  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 13909  001F56  ECAD  F00D         	call	___ftmul	;wreg free
 13910  001F5A  C069  F078         	movff	?___ftmul,___ftadd@f1
 13911  001F5E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13912  001F62  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13913  001F66  0E00               	movlw	0
 13914  001F68  6E1B               	movwf	___wmul@multiplicand+1,c
 13915  001F6A  0E03               	movlw	3
 13916  001F6C  6E1A               	movwf	___wmul@multiplicand,c
 13917  001F6E  0100               	movlb	0	; () banked
 13918  001F70  0789               	decf	eval_poly@n& (0+255),f,b
 13919  001F72  A0D8               	btfss	status,0,c
 13920  001F74  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 13921  001F76  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13922  001F7A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13923  001F7E  EC91  F01A         	call	___wmul	;wreg free
 13924  001F82  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13925  001F86  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13926  001F8A  5018               	movf	?___wmul,w,c
 13927  001F8C  262F               	addwf	??_eval_poly,f,c
 13928  001F8E  5019               	movf	?___wmul+1,w,c
 13929  001F90  2230               	addwfc	??_eval_poly+1,f,c
 13930  001F92  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13931  001F96  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13932  001F9A                     	if	0	;tblptru may be non-zero
 13933  001F9A                     	endif
 13934  001F9A                     	if	0	;tblptru may be non-zero
 13935  001F9A                     	endif
 13936  001F9A  0009               	tblrd		*+
 13937  001F9C  CFF5 F07B          	movff	tablat,___ftadd@f2
 13938  001FA0  0009               	tblrd		*+
 13939  001FA2  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 13940  001FA6  000A               	tblrd		*-
 13941  001FA8  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 13942  001FAC  EC08  F00A         	call	___ftadd	;wreg free
 13943  001FB0  C078  F08B         	movff	?___ftadd,eval_poly@res
 13944  001FB4  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 13945  001FB8  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 13946  001FBC                     l2139:
 13947  001FBC  0100               	movlb	0	; () banked
 13948  001FBE  5189               	movf	eval_poly@n& (0+255),w,b
 13949  001FC0  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 13950  001FC2  A4D8               	btfss	status,2,c
 13951  001FC4  D7BC               	goto	l2140
 13952                           
 13953                           ; BSR set to: 0
 13954  001FC6  C08B  F084         	movff	eval_poly@res,?_eval_poly
 13955  001FCA  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 13956  001FCE  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 13957                           
 13958                           ; BSR set to: 0
 13959  001FD2  0012               	return		;funcret
 13960  001FD4                     __end_of_eval_poly:
 13961                           	opt stack 0
 13962                           tosu	equ	0xFFF
 13963                           tosh	equ	0xFFE
 13964                           tosl	equ	0xFFD
 13965                           pclath	equ	0xFFA
 13966                           tblptru	equ	0xFF8
 13967                           tblptrh	equ	0xFF7
 13968                           tblptrl	equ	0xFF6
 13969                           tablat	equ	0xFF5
 13970                           prodh	equ	0xFF4
 13971                           prodl	equ	0xFF3
 13972                           intcon	equ	0xFF2
 13973                           intcon2	equ	0xFF1
 13974                           postinc0	equ	0xFEE
 13975                           wreg	equ	0xFE8
 13976                           indf1	equ	0xFE7
 13977                           postdec1	equ	0xFE5
 13978                           fsr1h	equ	0xFE2
 13979                           fsr1l	equ	0xFE1
 13980                           indf2	equ	0xFDF
 13981                           postinc2	equ	0xFDE
 13982                           postdec2	equ	0xFDD
 13983                           fsr2h	equ	0xFDA
 13984                           fsr2l	equ	0xFD9
 13985                           status	equ	0xFD8
 13986                           
 13987 ;; *************** function ___wmul *****************
 13988 ;; Defined at:
 13989 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  multiplier      2   23[COMRAM] unsigned int 
 13992 ;;  multiplicand    2   25[COMRAM] unsigned int 
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;  product         2   27[COMRAM] unsigned int 
 13995 ;; Return value:  Size  Location     Type
 13996 ;;                  2   23[COMRAM] unsigned int 
 13997 ;; Registers used:
 13998 ;;		wreg, status,2, status,0, prodl, prodh
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14004 ;;      Params:         4       0       0       0       0       0       0
 14005 ;;      Locals:         2       0       0       0       0       0       0
 14006 ;;      Temps:          0       0       0       0       0       0       0
 14007 ;;      Totals:         6       0       0       0       0       0       0
 14008 ;;Total ram usage:        6 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    3
 14011 ;; This function calls:
 14012 ;;		Nothing
 14013 ;; This function is called by:
 14014 ;;		_eval_poly
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           	psect	text92
 14019  003522                     __ptext92:
 14020                           	opt stack 0
 14021  003522                     ___wmul:
 14022                           	opt stack 23
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;incstack = 0
 14026  003522  5018               	movf	___wmul@multiplier,w,c
 14027  003524  021A               	mulwf	___wmul@multiplicand,c
 14028  003526  CFF3 F01C          	movff	prodl,___wmul@product
 14029  00352A  CFF4 F01D          	movff	prodh,___wmul@product+1
 14030  00352E  5018               	movf	___wmul@multiplier,w,c
 14031  003530  021B               	mulwf	___wmul@multiplicand+1,c
 14032  003532  50F3               	movf	prodl,w,c
 14033  003534  261D               	addwf	___wmul@product+1,f,c
 14034  003536  5019               	movf	___wmul@multiplier+1,w,c
 14035  003538  021A               	mulwf	___wmul@multiplicand,c
 14036  00353A  50F3               	movf	prodl,w,c
 14037  00353C  261D               	addwf	___wmul@product+1,f,c
 14038  00353E  C01C  F018         	movff	___wmul@product,?___wmul
 14039  003542  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14040  003546  0012               	return	
 14041  003548                     __end_of___wmul:
 14042                           	opt stack 0
 14043                           tosu	equ	0xFFF
 14044                           tosh	equ	0xFFE
 14045                           tosl	equ	0xFFD
 14046                           pclath	equ	0xFFA
 14047                           tblptru	equ	0xFF8
 14048                           tblptrh	equ	0xFF7
 14049                           tblptrl	equ	0xFF6
 14050                           tablat	equ	0xFF5
 14051                           prodh	equ	0xFF4
 14052                           prodl	equ	0xFF3
 14053                           intcon	equ	0xFF2
 14054                           intcon2	equ	0xFF1
 14055                           postinc0	equ	0xFEE
 14056                           wreg	equ	0xFE8
 14057                           indf1	equ	0xFE7
 14058                           postdec1	equ	0xFE5
 14059                           fsr1h	equ	0xFE2
 14060                           fsr1l	equ	0xFE1
 14061                           indf2	equ	0xFDF
 14062                           postinc2	equ	0xFDE
 14063                           postdec2	equ	0xFDD
 14064                           fsr2h	equ	0xFDA
 14065                           fsr2l	equ	0xFD9
 14066                           status	equ	0xFD8
 14067                           
 14068 ;; *************** function ___ftmul *****************
 14069 ;; Defined at:
 14070 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;  f1              3    9[BANK0 ] float 
 14073 ;;  f2              3   12[BANK0 ] float 
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14076 ;;  sign            1   23[BANK0 ] unsigned char 
 14077 ;;  cntr            1   22[BANK0 ] unsigned char 
 14078 ;;  exp             1   18[BANK0 ] unsigned char 
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  3    9[BANK0 ] float 
 14081 ;; Registers used:
 14082 ;;		wreg, status,2, status,0, cstack
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14088 ;;      Params:         0       6       0       0       0       0       0
 14089 ;;      Locals:         0       6       0       0       0       0       0
 14090 ;;      Temps:          0       3       0       0       0       0       0
 14091 ;;      Totals:         0      15       0       0       0       0       0
 14092 ;;Total ram usage:       15 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:    4
 14095 ;; This function calls:
 14096 ;;		___ftpack
 14097 ;; This function is called by:
 14098 ;;		_AdcConvert
 14099 ;;		_CheckFlashPrecentage
 14100 ;;		_pow
 14101 ;;		_exp
 14102 ;;		_log
 14103 ;;		_eval_poly
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           	psect	text93
 14108  001B5A                     __ptext93:
 14109                           	opt stack 0
 14110  001B5A                     ___ftmul:
 14111                           	opt stack 25
 14112                           
 14113                           ;incstack = 0
 14114  001B5A  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14115  001B5E  0100               	movlb	0	; () banked
 14116  001B60  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14117  001B62  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14118  001B64  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14119  001B66  376F               	rlcf	??___ftmul& (0+255),f,b
 14120  001B68  E301               	bnc	u6551
 14121  001B6A  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14122  001B6C                     u6551:
 14123  001B6C  516F               	movf	??___ftmul& (0+255),w,b
 14124  001B6E  6F72               	movwf	___ftmul@exp& (0+255),b
 14125  001B70  5172               	movf	___ftmul@exp& (0+255),w,b
 14126  001B72  A4D8               	btfss	status,2,c
 14127  001B74  D007               	goto	l1723
 14128                           
 14129                           ; BSR set to: 0
 14130  001B76  0E00               	movlw	0
 14131  001B78  6F69               	movwf	?___ftmul& (0+255),b
 14132  001B7A  0E00               	movlw	0
 14133  001B7C  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14134  001B7E  0E00               	movlw	0
 14135  001B80  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14136                           
 14137                           ; BSR set to: 0
 14138  001B82  0012               	return	
 14139  001B84                     l1723:
 14140                           
 14141                           ; BSR set to: 0
 14142                           
 14143                           ; BSR set to: 0
 14144  001B84  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14145  001B88  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14146  001B8A  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14147  001B8C  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14148  001B8E  376F               	rlcf	??___ftmul& (0+255),f,b
 14149  001B90  E301               	bnc	u6571
 14150  001B92  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14151  001B94                     u6571:
 14152  001B94  516F               	movf	??___ftmul& (0+255),w,b
 14153  001B96  6F77               	movwf	___ftmul@sign& (0+255),b
 14154  001B98  5177               	movf	___ftmul@sign& (0+255),w,b
 14155  001B9A  A4D8               	btfss	status,2,c
 14156  001B9C  D007               	goto	l1725
 14157                           
 14158                           ; BSR set to: 0
 14159  001B9E  0E00               	movlw	0
 14160  001BA0  6F69               	movwf	?___ftmul& (0+255),b
 14161  001BA2  0E00               	movlw	0
 14162  001BA4  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14163  001BA6  0E00               	movlw	0
 14164  001BA8  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14165                           
 14166                           ; BSR set to: 0
 14167  001BAA  0012               	return	
 14168  001BAC                     l1725:
 14169                           
 14170                           ; BSR set to: 0
 14171                           
 14172                           ; BSR set to: 0
 14173  001BAC  5177               	movf	___ftmul@sign& (0+255),w,b
 14174  001BAE  0F7B               	addlw	123
 14175  001BB0  2772               	addwf	___ftmul@exp& (0+255),f,b
 14176                           
 14177                           ; BSR set to: 0
 14178  001BB2  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14179  001BB6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14180  001BB8  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14181  001BBA  0E80               	movlw	128
 14182  001BBC  1777               	andwf	___ftmul@sign& (0+255),f,b
 14183                           
 14184                           ; BSR set to: 0
 14185  001BBE  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14186                           
 14187                           ; BSR set to: 0
 14188  001BC0  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14189                           
 14190                           ; BSR set to: 0
 14191  001BC2  0EFF               	movlw	255
 14192  001BC4  176C               	andwf	___ftmul@f2& (0+255),f,b
 14193  001BC6  0EFF               	movlw	255
 14194  001BC8  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14195  001BCA  0E00               	movlw	0
 14196  001BCC  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14197                           
 14198                           ; BSR set to: 0
 14199  001BCE  0E00               	movlw	0
 14200  001BD0  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14201  001BD2  0E00               	movlw	0
 14202  001BD4  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14203  001BD6  0E00               	movlw	0
 14204  001BD8  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14205                           
 14206                           ; BSR set to: 0
 14207  001BDA  0E07               	movlw	7
 14208  001BDC  6F76               	movwf	___ftmul@cntr& (0+255),b
 14209  001BDE                     
 14210                           ; BSR set to: 0
 14211                           
 14212                           ; BSR set to: 0
 14213  001BDE  A169               	btfss	___ftmul@f1& (0+255),0,b
 14214  001BE0  D006               	goto	l1727
 14215                           
 14216                           ; BSR set to: 0
 14217  001BE2  516C               	movf	___ftmul@f2& (0+255),w,b
 14218  001BE4  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14219  001BE6  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14220  001BE8  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14221  001BEA  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14222  001BEC  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14223  001BEE                     l1727:
 14224                           
 14225                           ; BSR set to: 0
 14226                           
 14227                           ; BSR set to: 0
 14228  001BEE  90D8               	bcf	status,0,c
 14229  001BF0  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14230  001BF2  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14231  001BF4  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14232  001BF6  90D8               	bcf	status,0,c
 14233  001BF8  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14234  001BFA  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14235  001BFC  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14236                           
 14237                           ; BSR set to: 0
 14238  001BFE  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14239  001C00  D7EE               	goto	l1726
 14240                           
 14241                           ; BSR set to: 0
 14242                           
 14243                           ; BSR set to: 0
 14244  001C02  0E09               	movlw	9
 14245  001C04  6F76               	movwf	___ftmul@cntr& (0+255),b
 14246  001C06                     
 14247                           ; BSR set to: 0
 14248                           
 14249                           ; BSR set to: 0
 14250  001C06  A169               	btfss	___ftmul@f1& (0+255),0,b
 14251  001C08  D006               	goto	l1730
 14252                           
 14253                           ; BSR set to: 0
 14254  001C0A  516C               	movf	___ftmul@f2& (0+255),w,b
 14255  001C0C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14256  001C0E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14257  001C10  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14258  001C12  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14259  001C14  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14260  001C16                     l1730:
 14261                           
 14262                           ; BSR set to: 0
 14263                           
 14264                           ; BSR set to: 0
 14265  001C16  90D8               	bcf	status,0,c
 14266  001C18  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14267  001C1A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14268  001C1C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14269  001C1E  90D8               	bcf	status,0,c
 14270  001C20  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14271  001C22  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14272  001C24  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14273                           
 14274                           ; BSR set to: 0
 14275  001C26  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14276  001C28  D7EE               	goto	l1729
 14277                           
 14278                           ; BSR set to: 0
 14279                           
 14280                           ; BSR set to: 0
 14281  001C2A  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14282  001C2E  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14283  001C32  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14284  001C36  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14285  001C3A  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14286  001C3E  EC02  F011         	call	___ftpack	;wreg free
 14287  001C42  C018  F069         	movff	?___ftpack,?___ftmul
 14288  001C46  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14289  001C4A  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14290  001C4E  0012               	return	
 14291  001C50                     __end_of___ftmul:
 14292                           	opt stack 0
 14293                           tosu	equ	0xFFF
 14294                           tosh	equ	0xFFE
 14295                           tosl	equ	0xFFD
 14296                           pclath	equ	0xFFA
 14297                           tblptru	equ	0xFF8
 14298                           tblptrh	equ	0xFF7
 14299                           tblptrl	equ	0xFF6
 14300                           tablat	equ	0xFF5
 14301                           prodh	equ	0xFF4
 14302                           prodl	equ	0xFF3
 14303                           intcon	equ	0xFF2
 14304                           intcon2	equ	0xFF1
 14305                           postinc0	equ	0xFEE
 14306                           wreg	equ	0xFE8
 14307                           indf1	equ	0xFE7
 14308                           postdec1	equ	0xFE5
 14309                           fsr1h	equ	0xFE2
 14310                           fsr1l	equ	0xFE1
 14311                           indf2	equ	0xFDF
 14312                           postinc2	equ	0xFDE
 14313                           postdec2	equ	0xFDD
 14314                           fsr2h	equ	0xFDA
 14315                           fsr2l	equ	0xFD9
 14316                           status	equ	0xFD8
 14317                           
 14318 ;; *************** function ___ftsub *****************
 14319 ;; Defined at:
 14320 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14321 ;; Parameters:    Size  Location     Type
 14322 ;;  f1              3   36[BANK0 ] float 
 14323 ;;  f2              3   39[BANK0 ] float 
 14324 ;; Auto vars:     Size  Location     Type
 14325 ;;		None
 14326 ;; Return value:  Size  Location     Type
 14327 ;;                  3   36[BANK0 ] float 
 14328 ;; Registers used:
 14329 ;;		wreg, status,2, status,0, cstack
 14330 ;; Tracked objects:
 14331 ;;		On entry : 0/0
 14332 ;;		On exit  : 0/0
 14333 ;;		Unchanged: 0/0
 14334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14335 ;;      Params:         0       6       0       0       0       0       0
 14336 ;;      Locals:         0       0       0       0       0       0       0
 14337 ;;      Temps:          0       0       0       0       0       0       0
 14338 ;;      Totals:         0       6       0       0       0       0       0
 14339 ;;Total ram usage:        6 bytes
 14340 ;; Hardware stack levels used:    1
 14341 ;; Hardware stack levels required when called:    5
 14342 ;; This function calls:
 14343 ;;		___ftadd
 14344 ;; This function is called by:
 14345 ;;		_exp
 14346 ;; This function uses a non-reentrant model
 14347 ;;
 14348                           
 14349                           	psect	text94
 14350  00304A                     __ptext94:
 14351                           	opt stack 0
 14352  00304A                     ___ftsub:
 14353                           	opt stack 22
 14354                           
 14355                           ;incstack = 0
 14356  00304A  0100               	movlb	0	; () banked
 14357  00304C  5187               	movf	___ftsub@f2& (0+255),w,b
 14358  00304E  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14359  003050  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14360  003052  B4D8               	btfsc	status,2,c
 14361  003054  D006               	goto	l1740
 14362                           
 14363                           ; BSR set to: 0
 14364  003056  0E00               	movlw	0
 14365  003058  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14366  00305A  0E00               	movlw	0
 14367  00305C  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14368  00305E  0E80               	movlw	128
 14369  003060  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14370  003062                     l1740:
 14371                           
 14372                           ; BSR set to: 0
 14373                           
 14374                           ; BSR set to: 0
 14375  003062  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14376  003066  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14377  00306A  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14378  00306E  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14379  003072  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14380  003076  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14381  00307A  EC08  F00A         	call	___ftadd	;wreg free
 14382  00307E  C078  F084         	movff	?___ftadd,?___ftsub
 14383  003082  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14384  003086  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14385  00308A  0012               	return	
 14386  00308C                     __end_of___ftsub:
 14387                           	opt stack 0
 14388                           tosu	equ	0xFFF
 14389                           tosh	equ	0xFFE
 14390                           tosl	equ	0xFFD
 14391                           pclath	equ	0xFFA
 14392                           tblptru	equ	0xFF8
 14393                           tblptrh	equ	0xFF7
 14394                           tblptrl	equ	0xFF6
 14395                           tablat	equ	0xFF5
 14396                           prodh	equ	0xFF4
 14397                           prodl	equ	0xFF3
 14398                           intcon	equ	0xFF2
 14399                           intcon2	equ	0xFF1
 14400                           postinc0	equ	0xFEE
 14401                           wreg	equ	0xFE8
 14402                           indf1	equ	0xFE7
 14403                           postdec1	equ	0xFE5
 14404                           fsr1h	equ	0xFE2
 14405                           fsr1l	equ	0xFE1
 14406                           indf2	equ	0xFDF
 14407                           postinc2	equ	0xFDE
 14408                           postdec2	equ	0xFDD
 14409                           fsr2h	equ	0xFDA
 14410                           fsr2l	equ	0xFD9
 14411                           status	equ	0xFD8
 14412                           
 14413 ;; *************** function ___ftadd *****************
 14414 ;; Defined at:
 14415 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14416 ;; Parameters:    Size  Location     Type
 14417 ;;  f1              3   24[BANK0 ] float 
 14418 ;;  f2              3   27[BANK0 ] float 
 14419 ;; Auto vars:     Size  Location     Type
 14420 ;;  exp1            1   35[BANK0 ] unsigned char 
 14421 ;;  exp2            1   34[BANK0 ] unsigned char 
 14422 ;;  sign            1   33[BANK0 ] unsigned char 
 14423 ;; Return value:  Size  Location     Type
 14424 ;;                  3   24[BANK0 ] float 
 14425 ;; Registers used:
 14426 ;;		wreg, status,2, status,0, cstack
 14427 ;; Tracked objects:
 14428 ;;		On entry : 0/0
 14429 ;;		On exit  : 0/0
 14430 ;;		Unchanged: 0/0
 14431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14432 ;;      Params:         0       6       0       0       0       0       0
 14433 ;;      Locals:         0       3       0       0       0       0       0
 14434 ;;      Temps:          0       3       0       0       0       0       0
 14435 ;;      Totals:         0      12       0       0       0       0       0
 14436 ;;Total ram usage:       12 bytes
 14437 ;; Hardware stack levels used:    1
 14438 ;; Hardware stack levels required when called:    4
 14439 ;; This function calls:
 14440 ;;		___ftpack
 14441 ;; This function is called by:
 14442 ;;		___ftsub
 14443 ;;		_floor
 14444 ;;		_log
 14445 ;;		_eval_poly
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           	psect	text95
 14450  001410                     __ptext95:
 14451                           	opt stack 0
 14452  001410                     ___ftadd:
 14453                           	opt stack 22
 14454                           
 14455                           ;incstack = 0
 14456  001410  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14457  001414  0100               	movlb	0	; () banked
 14458  001416  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14459  001418  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14460  00141A  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14461  00141C  377E               	rlcf	??___ftadd& (0+255),f,b
 14462  00141E  E301               	bnc	u6341
 14463  001420  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14464  001422                     u6341:
 14465  001422  517E               	movf	??___ftadd& (0+255),w,b
 14466  001424  6F83               	movwf	___ftadd@exp1& (0+255),b
 14467  001426  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14468  00142A  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14469  00142C  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14470  00142E  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14471  001430  377E               	rlcf	??___ftadd& (0+255),f,b
 14472  001432  E301               	bnc	u6351
 14473  001434  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14474  001436                     u6351:
 14475  001436  517E               	movf	??___ftadd& (0+255),w,b
 14476  001438  6F82               	movwf	___ftadd@exp2& (0+255),b
 14477                           
 14478                           ; BSR set to: 0
 14479  00143A  5183               	movf	___ftadd@exp1& (0+255),w,b
 14480  00143C  B4D8               	btfsc	status,2,c
 14481  00143E  D00B               	goto	u6380
 14482                           
 14483                           ; BSR set to: 0
 14484  001440  5182               	movf	___ftadd@exp2& (0+255),w,b
 14485  001442  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14486  001444  B0D8               	btfsc	status,0,c
 14487  001446  D00E               	goto	l1675
 14488                           
 14489                           ; BSR set to: 0
 14490  001448  5183               	movf	___ftadd@exp1& (0+255),w,b
 14491  00144A  0800               	sublw	0
 14492  00144C  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14493  00144E  6F7E               	movwf	??___ftadd& (0+255),b
 14494  001450  0E18               	movlw	24
 14495  001452  657E               	cpfsgt	??___ftadd& (0+255),b
 14496  001454  D007               	goto	l1675
 14497  001456                     u6380:
 14498                           
 14499                           ; BSR set to: 0
 14500  001456  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14501  00145A  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14502  00145E  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14503  001462  0012               	return	
 14504  001464                     l1675:
 14505                           
 14506                           ; BSR set to: 0
 14507                           
 14508                           ; BSR set to: 0
 14509  001464  5182               	movf	___ftadd@exp2& (0+255),w,b
 14510  001466  B4D8               	btfsc	status,2,c
 14511  001468  D00B               	goto	u6410
 14512                           
 14513                           ; BSR set to: 0
 14514  00146A  5183               	movf	___ftadd@exp1& (0+255),w,b
 14515  00146C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14516  00146E  B0D8               	btfsc	status,0,c
 14517  001470  D00E               	goto	l1679
 14518                           
 14519                           ; BSR set to: 0
 14520  001472  5182               	movf	___ftadd@exp2& (0+255),w,b
 14521  001474  0800               	sublw	0
 14522  001476  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14523  001478  6F7E               	movwf	??___ftadd& (0+255),b
 14524  00147A  0E18               	movlw	24
 14525  00147C  657E               	cpfsgt	??___ftadd& (0+255),b
 14526  00147E  D007               	goto	l1679
 14527  001480                     u6410:
 14528                           
 14529                           ; BSR set to: 0
 14530  001480  C078  F078         	movff	___ftadd@f1,?___ftadd
 14531  001484  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14532  001488  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14533  00148C  0012               	return	
 14534  00148E                     l1679:
 14535                           
 14536                           ; BSR set to: 0
 14537                           
 14538                           ; BSR set to: 0
 14539  00148E  0E06               	movlw	6
 14540  001490  6F81               	movwf	___ftadd@sign& (0+255),b
 14541                           
 14542                           ; BSR set to: 0
 14543  001492  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14544                           
 14545                           ; BSR set to: 0
 14546  001494  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14547                           
 14548                           ; BSR set to: 0
 14549                           
 14550                           ; BSR set to: 0
 14551  001496  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14552                           
 14553                           ; BSR set to: 0
 14554  001498  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14555                           
 14556                           ; BSR set to: 0
 14557  00149A  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14558                           
 14559                           ; BSR set to: 0
 14560  00149C  0EFF               	movlw	255
 14561  00149E  1778               	andwf	___ftadd@f1& (0+255),f,b
 14562  0014A0  0EFF               	movlw	255
 14563  0014A2  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14564  0014A4  0E00               	movlw	0
 14565  0014A6  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14566  0014A8  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14567                           
 14568                           ; BSR set to: 0
 14569  0014AA  0EFF               	movlw	255
 14570  0014AC  177B               	andwf	___ftadd@f2& (0+255),f,b
 14571  0014AE  0EFF               	movlw	255
 14572  0014B0  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14573  0014B2  0E00               	movlw	0
 14574  0014B4  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14575                           
 14576                           ; BSR set to: 0
 14577  0014B6  5182               	movf	___ftadd@exp2& (0+255),w,b
 14578  0014B8  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14579  0014BA  B0D8               	btfsc	status,0,c
 14580  0014BC  D01B               	goto	l1684
 14581  0014BE                     u6440:
 14582                           
 14583                           ; BSR set to: 0
 14584                           
 14585                           ; BSR set to: 0
 14586  0014BE  90D8               	bcf	status,0,c
 14587  0014C0  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14588  0014C2  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14589  0014C4  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14590  0014C6  0782               	decf	___ftadd@exp2& (0+255),f,b
 14591                           
 14592                           ; BSR set to: 0
 14593  0014C8  5183               	movf	___ftadd@exp1& (0+255),w,b
 14594  0014CA  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14595  0014CC  B4D8               	btfsc	status,2,c
 14596  0014CE  D00D               	goto	l1689
 14597                           
 14598                           ; BSR set to: 0
 14599  0014D0  0781               	decf	___ftadd@sign& (0+255),f,b
 14600  0014D2  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14601  0014D6  0E07               	movlw	7
 14602  0014D8  177E               	andwf	??___ftadd& (0+255),f,b
 14603  0014DA  B4D8               	btfsc	status,2,c
 14604  0014DC  D006               	goto	l1689
 14605  0014DE  D7EF               	goto	u6440
 14606  0014E0                     
 14607                           ; BSR set to: 0
 14608                           
 14609                           ; BSR set to: 0
 14610  0014E0  90D8               	bcf	status,0,c
 14611  0014E2  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14612  0014E4  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14613  0014E6  3378               	rrcf	___ftadd@f1& (0+255),f,b
 14614  0014E8  2B83               	incf	___ftadd@exp1& (0+255),f,b
 14615  0014EA                     l1689:
 14616                           
 14617                           ; BSR set to: 0
 14618                           
 14619                           ; BSR set to: 0
 14620  0014EA  5182               	movf	___ftadd@exp2& (0+255),w,b
 14621  0014EC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14622  0014EE  B4D8               	btfsc	status,2,c
 14623  0014F0  D01F               	goto	u6510
 14624  0014F2  D7F6               	goto	l1690
 14625  0014F4                     l1684:
 14626                           
 14627                           ; BSR set to: 0
 14628                           
 14629                           ; BSR set to: 0
 14630  0014F4  5183               	movf	___ftadd@exp1& (0+255),w,b
 14631  0014F6  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14632  0014F8  B0D8               	btfsc	status,0,c
 14633  0014FA  D01A               	goto	u6510
 14634  0014FC                     u6480:
 14635                           
 14636                           ; BSR set to: 0
 14637                           
 14638                           ; BSR set to: 0
 14639  0014FC  90D8               	bcf	status,0,c
 14640  0014FE  3778               	rlcf	___ftadd@f1& (0+255),f,b
 14641  001500  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14642  001502  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14643  001504  0783               	decf	___ftadd@exp1& (0+255),f,b
 14644                           
 14645                           ; BSR set to: 0
 14646  001506  5183               	movf	___ftadd@exp1& (0+255),w,b
 14647  001508  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14648  00150A  B4D8               	btfsc	status,2,c
 14649  00150C  D00D               	goto	l1698
 14650                           
 14651                           ; BSR set to: 0
 14652  00150E  0781               	decf	___ftadd@sign& (0+255),f,b
 14653  001510  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14654  001514  0E07               	movlw	7
 14655  001516  177E               	andwf	??___ftadd& (0+255),f,b
 14656  001518  B4D8               	btfsc	status,2,c
 14657  00151A  D006               	goto	l1698
 14658  00151C  D7EF               	goto	u6480
 14659  00151E                     
 14660                           ; BSR set to: 0
 14661                           
 14662                           ; BSR set to: 0
 14663  00151E  90D8               	bcf	status,0,c
 14664  001520  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14665  001522  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14666  001524  337B               	rrcf	___ftadd@f2& (0+255),f,b
 14667  001526  2B82               	incf	___ftadd@exp2& (0+255),f,b
 14668  001528                     l1698:
 14669                           
 14670                           ; BSR set to: 0
 14671                           
 14672                           ; BSR set to: 0
 14673  001528  5182               	movf	___ftadd@exp2& (0+255),w,b
 14674  00152A  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14675  00152C  A4D8               	btfss	status,2,c
 14676  00152E  D7F7               	goto	l1699
 14677  001530                     u6510:
 14678                           
 14679                           ; BSR set to: 0
 14680                           
 14681                           ; BSR set to: 0
 14682                           
 14683                           ; BSR set to: 0
 14684  001530  AF81               	btfss	___ftadd@sign& (0+255),7,b
 14685  001532  D00C               	goto	l1701
 14686                           
 14687                           ; BSR set to: 0
 14688  001534  0EFF               	movlw	255
 14689  001536  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 14690  001538  0EFF               	movlw	255
 14691  00153A  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14692  00153C  0EFF               	movlw	255
 14693  00153E  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14694  001540  0E01               	movlw	1
 14695  001542  2778               	addwf	___ftadd@f1& (0+255),f,b
 14696  001544  0E00               	movlw	0
 14697  001546  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14698  001548  0E00               	movlw	0
 14699  00154A  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14700  00154C                     l1701:
 14701                           
 14702                           ; BSR set to: 0
 14703  00154C  AD81               	btfss	___ftadd@sign& (0+255),6,b
 14704  00154E  D00C               	goto	l1702
 14705                           
 14706                           ; BSR set to: 0
 14707  001550  0EFF               	movlw	255
 14708  001552  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14709  001554  0EFF               	movlw	255
 14710  001556  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14711  001558  0EFF               	movlw	255
 14712  00155A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14713  00155C  0E01               	movlw	1
 14714  00155E  277B               	addwf	___ftadd@f2& (0+255),f,b
 14715  001560  0E00               	movlw	0
 14716  001562  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14717  001564  0E00               	movlw	0
 14718  001566  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14719  001568                     l1702:
 14720                           
 14721                           ; BSR set to: 0
 14722                           
 14723                           ; BSR set to: 0
 14724  001568  0E00               	movlw	0
 14725  00156A  6F81               	movwf	___ftadd@sign& (0+255),b
 14726                           
 14727                           ; BSR set to: 0
 14728  00156C  5178               	movf	___ftadd@f1& (0+255),w,b
 14729  00156E  277B               	addwf	___ftadd@f2& (0+255),f,b
 14730  001570  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 14731  001572  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14732  001574  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 14733  001576  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14734                           
 14735                           ; BSR set to: 0
 14736  001578  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14737  00157A  D00E               	goto	l1703
 14738                           
 14739                           ; BSR set to: 0
 14740  00157C  0EFF               	movlw	255
 14741  00157E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14742  001580  0EFF               	movlw	255
 14743  001582  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14744  001584  0EFF               	movlw	255
 14745  001586  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14746  001588  0E01               	movlw	1
 14747  00158A  277B               	addwf	___ftadd@f2& (0+255),f,b
 14748  00158C  0E00               	movlw	0
 14749  00158E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14750  001590  0E00               	movlw	0
 14751  001592  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14752                           
 14753                           ; BSR set to: 0
 14754  001594  0E01               	movlw	1
 14755  001596  6F81               	movwf	___ftadd@sign& (0+255),b
 14756  001598                     l1703:
 14757                           
 14758                           ; BSR set to: 0
 14759                           
 14760                           ; BSR set to: 0
 14761  001598  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 14762  00159C  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 14763  0015A0  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 14764  0015A4  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 14765  0015A8  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 14766  0015AC  EC02  F011         	call	___ftpack	;wreg free
 14767  0015B0  C018  F078         	movff	?___ftpack,?___ftadd
 14768  0015B4  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 14769  0015B8  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 14770  0015BC  0012               	return	
 14771  0015BE                     __end_of___ftadd:
 14772                           	opt stack 0
 14773                           tosu	equ	0xFFF
 14774                           tosh	equ	0xFFE
 14775                           tosl	equ	0xFFD
 14776                           pclath	equ	0xFFA
 14777                           tblptru	equ	0xFF8
 14778                           tblptrh	equ	0xFF7
 14779                           tblptrl	equ	0xFF6
 14780                           tablat	equ	0xFF5
 14781                           prodh	equ	0xFF4
 14782                           prodl	equ	0xFF3
 14783                           intcon	equ	0xFF2
 14784                           intcon2	equ	0xFF1
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           indf1	equ	0xFE7
 14788                           postdec1	equ	0xFE5
 14789                           fsr1h	equ	0xFE2
 14790                           fsr1l	equ	0xFE1
 14791                           indf2	equ	0xFDF
 14792                           postinc2	equ	0xFDE
 14793                           postdec2	equ	0xFDD
 14794                           fsr2h	equ	0xFDA
 14795                           fsr2l	equ	0xFD9
 14796                           status	equ	0xFD8
 14797                           
 14798 ;; *************** function ___ftneg *****************
 14799 ;; Defined at:
 14800 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 14801 ;; Parameters:    Size  Location     Type
 14802 ;;  f1              3   23[COMRAM] float 
 14803 ;; Auto vars:     Size  Location     Type
 14804 ;;		None
 14805 ;; Return value:  Size  Location     Type
 14806 ;;                  3   23[COMRAM] float 
 14807 ;; Registers used:
 14808 ;;		wreg, status,2, status,0
 14809 ;; Tracked objects:
 14810 ;;		On entry : 0/0
 14811 ;;		On exit  : 0/0
 14812 ;;		Unchanged: 0/0
 14813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14814 ;;      Params:         3       0       0       0       0       0       0
 14815 ;;      Locals:         0       0       0       0       0       0       0
 14816 ;;      Temps:          0       0       0       0       0       0       0
 14817 ;;      Totals:         3       0       0       0       0       0       0
 14818 ;;Total ram usage:        3 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:    3
 14821 ;; This function calls:
 14822 ;;		Nothing
 14823 ;; This function is called by:
 14824 ;;		_pow
 14825 ;;		_exp
 14826 ;; This function uses a non-reentrant model
 14827 ;;
 14828                           
 14829                           	psect	text96
 14830  003548                     __ptext96:
 14831                           	opt stack 0
 14832  003548                     ___ftneg:
 14833                           	opt stack 24
 14834                           
 14835                           ;incstack = 0
 14836  003548  5018               	movf	___ftneg@f1,w,c
 14837  00354A  1019               	iorwf	___ftneg@f1+1,w,c
 14838  00354C  101A               	iorwf	___ftneg@f1+2,w,c
 14839  00354E  B4D8               	btfsc	status,2,c
 14840  003550  D006               	goto	l1734
 14841  003552  0E00               	movlw	0
 14842  003554  1A18               	xorwf	___ftneg@f1,f,c
 14843  003556  0E00               	movlw	0
 14844  003558  1A19               	xorwf	___ftneg@f1+1,f,c
 14845  00355A  0E80               	movlw	128
 14846  00355C  1A1A               	xorwf	___ftneg@f1+2,f,c
 14847  00355E                     l1734:
 14848  00355E  C018  F018         	movff	___ftneg@f1,?___ftneg
 14849  003562  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 14850  003566  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 14851  00356A  0012               	return		;funcret
 14852  00356C                     __end_of___ftneg:
 14853                           	opt stack 0
 14854                           tosu	equ	0xFFF
 14855                           tosh	equ	0xFFE
 14856                           tosl	equ	0xFFD
 14857                           pclath	equ	0xFFA
 14858                           tblptru	equ	0xFF8
 14859                           tblptrh	equ	0xFF7
 14860                           tblptrl	equ	0xFF6
 14861                           tablat	equ	0xFF5
 14862                           prodh	equ	0xFF4
 14863                           prodl	equ	0xFF3
 14864                           intcon	equ	0xFF2
 14865                           intcon2	equ	0xFF1
 14866                           postinc0	equ	0xFEE
 14867                           wreg	equ	0xFE8
 14868                           indf1	equ	0xFE7
 14869                           postdec1	equ	0xFE5
 14870                           fsr1h	equ	0xFE2
 14871                           fsr1l	equ	0xFE1
 14872                           indf2	equ	0xFDF
 14873                           postinc2	equ	0xFDE
 14874                           postdec2	equ	0xFDD
 14875                           fsr2h	equ	0xFDA
 14876                           fsr2l	equ	0xFD9
 14877                           status	equ	0xFD8
 14878                           
 14879 ;; *************** function ___ftdiv *****************
 14880 ;; Defined at:
 14881 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  f1              3   40[COMRAM] float 
 14884 ;;  f2              3   43[COMRAM] float 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  f3              3    4[BANK0 ] float 
 14887 ;;  sign            1    8[BANK0 ] unsigned char 
 14888 ;;  exp             1    7[BANK0 ] unsigned char 
 14889 ;;  cntr            1    3[BANK0 ] unsigned char 
 14890 ;; Return value:  Size  Location     Type
 14891 ;;                  3   40[COMRAM] float 
 14892 ;; Registers used:
 14893 ;;		wreg, status,2, status,0, cstack
 14894 ;; Tracked objects:
 14895 ;;		On entry : 0/0
 14896 ;;		On exit  : 0/0
 14897 ;;		Unchanged: 0/0
 14898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14899 ;;      Params:         6       0       0       0       0       0       0
 14900 ;;      Locals:         0       6       0       0       0       0       0
 14901 ;;      Temps:          0       3       0       0       0       0       0
 14902 ;;      Totals:         6       9       0       0       0       0       0
 14903 ;;Total ram usage:       15 bytes
 14904 ;; Hardware stack levels used:    1
 14905 ;; Hardware stack levels required when called:    4
 14906 ;; This function calls:
 14907 ;;		___ftpack
 14908 ;; This function is called by:
 14909 ;;		_AdcConvert
 14910 ;;		_CheckFlashPrecentage
 14911 ;;		_exp
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           	psect	text97
 14916  001C50                     __ptext97:
 14917                           	opt stack 0
 14918  001C50                     ___ftdiv:
 14919                           	opt stack 25
 14920                           
 14921                           ;incstack = 0
 14922  001C50  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 14923  001C54  0100               	movlb	0	; () banked
 14924  001C56  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 14925  001C58  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 14926  001C5A  342A               	rlcf	___ftdiv@f1+1,w,c
 14927  001C5C  3760               	rlcf	??___ftdiv& (0+255),f,b
 14928  001C5E  E301               	bnc	u6761
 14929  001C60  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 14930  001C62                     u6761:
 14931  001C62  5160               	movf	??___ftdiv& (0+255),w,b
 14932  001C64  6F67               	movwf	___ftdiv@exp& (0+255),b
 14933  001C66  5167               	movf	___ftdiv@exp& (0+255),w,b
 14934  001C68  A4D8               	btfss	status,2,c
 14935  001C6A  D007               	goto	l1708
 14936                           
 14937                           ; BSR set to: 0
 14938  001C6C  0E00               	movlw	0
 14939  001C6E  6E29               	movwf	?___ftdiv,c
 14940  001C70  0E00               	movlw	0
 14941  001C72  6E2A               	movwf	?___ftdiv+1,c
 14942  001C74  0E00               	movlw	0
 14943  001C76  6E2B               	movwf	?___ftdiv+2,c
 14944                           
 14945                           ; BSR set to: 0
 14946  001C78  0012               	return	
 14947  001C7A                     l1708:
 14948                           
 14949                           ; BSR set to: 0
 14950                           
 14951                           ; BSR set to: 0
 14952  001C7A  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 14953  001C7E  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 14954  001C80  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 14955  001C82  342D               	rlcf	___ftdiv@f2+1,w,c
 14956  001C84  3760               	rlcf	??___ftdiv& (0+255),f,b
 14957  001C86  E301               	bnc	u6781
 14958  001C88  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 14959  001C8A                     u6781:
 14960  001C8A  5160               	movf	??___ftdiv& (0+255),w,b
 14961  001C8C  6F68               	movwf	___ftdiv@sign& (0+255),b
 14962  001C8E  5168               	movf	___ftdiv@sign& (0+255),w,b
 14963  001C90  A4D8               	btfss	status,2,c
 14964  001C92  D007               	goto	l1710
 14965                           
 14966                           ; BSR set to: 0
 14967  001C94  0E00               	movlw	0
 14968  001C96  6E29               	movwf	?___ftdiv,c
 14969  001C98  0E00               	movlw	0
 14970  001C9A  6E2A               	movwf	?___ftdiv+1,c
 14971  001C9C  0E00               	movlw	0
 14972  001C9E  6E2B               	movwf	?___ftdiv+2,c
 14973                           
 14974                           ; BSR set to: 0
 14975  001CA0  0012               	return	
 14976  001CA2                     l1710:
 14977                           
 14978                           ; BSR set to: 0
 14979                           
 14980                           ; BSR set to: 0
 14981  001CA2  0E00               	movlw	0
 14982  001CA4  6F64               	movwf	___ftdiv@f3& (0+255),b
 14983  001CA6  0E00               	movlw	0
 14984  001CA8  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 14985  001CAA  0E00               	movlw	0
 14986  001CAC  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 14987                           
 14988                           ; BSR set to: 0
 14989  001CAE  5168               	movf	___ftdiv@sign& (0+255),w,b
 14990  001CB0  0F89               	addlw	137
 14991  001CB2  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 14992                           
 14993                           ; BSR set to: 0
 14994  001CB4  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 14995                           
 14996                           ; BSR set to: 0
 14997  001CB8  502E               	movf	___ftdiv@f2+2,w,c
 14998  001CBA  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 14999                           
 15000                           ; BSR set to: 0
 15001  001CBC  0E80               	movlw	128
 15002  001CBE  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15003                           
 15004                           ; BSR set to: 0
 15005  001CC0  8E2A               	bsf	___ftdiv@f1+1,7,c
 15006                           
 15007                           ; BSR set to: 0
 15008  001CC2  0EFF               	movlw	255
 15009  001CC4  1629               	andwf	___ftdiv@f1,f,c
 15010  001CC6  0EFF               	movlw	255
 15011  001CC8  162A               	andwf	___ftdiv@f1+1,f,c
 15012  001CCA  0E00               	movlw	0
 15013  001CCC  162B               	andwf	___ftdiv@f1+2,f,c
 15014                           
 15015                           ; BSR set to: 0
 15016  001CCE  8E2D               	bsf	___ftdiv@f2+1,7,c
 15017                           
 15018                           ; BSR set to: 0
 15019  001CD0  0EFF               	movlw	255
 15020  001CD2  162C               	andwf	___ftdiv@f2,f,c
 15021  001CD4  0EFF               	movlw	255
 15022  001CD6  162D               	andwf	___ftdiv@f2+1,f,c
 15023  001CD8  0E00               	movlw	0
 15024  001CDA  162E               	andwf	___ftdiv@f2+2,f,c
 15025                           
 15026                           ; BSR set to: 0
 15027  001CDC  0E18               	movlw	24
 15028  001CDE  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15029  001CE0                     
 15030                           ; BSR set to: 0
 15031                           
 15032                           ; BSR set to: 0
 15033  001CE0  90D8               	bcf	status,0,c
 15034  001CE2  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15035  001CE4  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15036  001CE6  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15037                           
 15038                           ; BSR set to: 0
 15039  001CE8  502C               	movf	___ftdiv@f2,w,c
 15040  001CEA  5C29               	subwf	___ftdiv@f1,w,c
 15041  001CEC  502D               	movf	___ftdiv@f2+1,w,c
 15042  001CEE  582A               	subwfb	___ftdiv@f1+1,w,c
 15043  001CF0  502E               	movf	___ftdiv@f2+2,w,c
 15044  001CF2  582B               	subwfb	___ftdiv@f1+2,w,c
 15045  001CF4  A0D8               	btfss	status,0,c
 15046  001CF6  D007               	goto	l1712
 15047                           
 15048                           ; BSR set to: 0
 15049  001CF8  502C               	movf	___ftdiv@f2,w,c
 15050  001CFA  5E29               	subwf	___ftdiv@f1,f,c
 15051  001CFC  502D               	movf	___ftdiv@f2+1,w,c
 15052  001CFE  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15053  001D00  502E               	movf	___ftdiv@f2+2,w,c
 15054  001D02  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15055                           
 15056                           ; BSR set to: 0
 15057  001D04  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15058  001D06                     l1712:
 15059                           
 15060                           ; BSR set to: 0
 15061  001D06  90D8               	bcf	status,0,c
 15062  001D08  3629               	rlcf	___ftdiv@f1,f,c
 15063  001D0A  362A               	rlcf	___ftdiv@f1+1,f,c
 15064  001D0C  362B               	rlcf	___ftdiv@f1+2,f,c
 15065                           
 15066                           ; BSR set to: 0
 15067  001D0E  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15068  001D10  D7E7               	goto	l1711
 15069                           
 15070                           ; BSR set to: 0
 15071                           
 15072                           ; BSR set to: 0
 15073  001D12  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15074  001D16  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15075  001D1A  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15076  001D1E  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15077  001D22  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15078  001D26  EC02  F011         	call	___ftpack	;wreg free
 15079  001D2A  C018  F029         	movff	?___ftpack,?___ftdiv
 15080  001D2E  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15081  001D32  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15082  001D36  0012               	return	
 15083  001D38                     __end_of___ftdiv:
 15084                           	opt stack 0
 15085                           tosu	equ	0xFFF
 15086                           tosh	equ	0xFFE
 15087                           tosl	equ	0xFFD
 15088                           pclath	equ	0xFFA
 15089                           tblptru	equ	0xFF8
 15090                           tblptrh	equ	0xFF7
 15091                           tblptrl	equ	0xFF6
 15092                           tablat	equ	0xFF5
 15093                           prodh	equ	0xFF4
 15094                           prodl	equ	0xFF3
 15095                           intcon	equ	0xFF2
 15096                           intcon2	equ	0xFF1
 15097                           postinc0	equ	0xFEE
 15098                           wreg	equ	0xFE8
 15099                           indf1	equ	0xFE7
 15100                           postdec1	equ	0xFE5
 15101                           fsr1h	equ	0xFE2
 15102                           fsr1l	equ	0xFE1
 15103                           indf2	equ	0xFDF
 15104                           postinc2	equ	0xFDE
 15105                           postdec2	equ	0xFDD
 15106                           fsr2h	equ	0xFDA
 15107                           fsr2l	equ	0xFD9
 15108                           status	equ	0xFD8
 15109                           
 15110 ;; *************** function ___awtoft *****************
 15111 ;; Defined at:
 15112 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;  c               2   31[COMRAM] int 
 15115 ;; Auto vars:     Size  Location     Type
 15116 ;;  sign            1   34[COMRAM] unsigned char 
 15117 ;; Return value:  Size  Location     Type
 15118 ;;                  3   31[COMRAM] float 
 15119 ;; Registers used:
 15120 ;;		wreg, status,2, status,0, cstack
 15121 ;; Tracked objects:
 15122 ;;		On entry : 0/0
 15123 ;;		On exit  : 0/0
 15124 ;;		Unchanged: 0/0
 15125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15126 ;;      Params:         3       0       0       0       0       0       0
 15127 ;;      Locals:         1       0       0       0       0       0       0
 15128 ;;      Temps:          0       0       0       0       0       0       0
 15129 ;;      Totals:         4       0       0       0       0       0       0
 15130 ;;Total ram usage:        4 bytes
 15131 ;; Hardware stack levels used:    1
 15132 ;; Hardware stack levels required when called:    4
 15133 ;; This function calls:
 15134 ;;		___ftpack
 15135 ;; This function is called by:
 15136 ;;		_exp
 15137 ;;		_log
 15138 ;; This function uses a non-reentrant model
 15139 ;;
 15140                           
 15141                           	psect	text98
 15142  0031BE                     __ptext98:
 15143                           	opt stack 0
 15144  0031BE                     ___awtoft:
 15145                           	opt stack 23
 15146                           
 15147                           ;incstack = 0
 15148  0031BE  0E00               	movlw	0
 15149  0031C0  6E23               	movwf	___awtoft@sign,c
 15150  0031C2  AE21               	btfss	___awtoft@c+1,7,c
 15151  0031C4  D006               	goto	l1625
 15152  0031C6  6C20               	negf	___awtoft@c,c
 15153  0031C8  1E21               	comf	___awtoft@c+1,f,c
 15154  0031CA  B0D8               	btfsc	status,0,c
 15155  0031CC  2A21               	incf	___awtoft@c+1,f,c
 15156  0031CE  0E01               	movlw	1
 15157  0031D0  6E23               	movwf	___awtoft@sign,c
 15158  0031D2                     l1625:
 15159  0031D2  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15160  0031D6  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15161  0031DA  6A1A               	clrf	___ftpack@arg+2,c
 15162  0031DC  0E8E               	movlw	142
 15163  0031DE  6E1B               	movwf	___ftpack@exp,c
 15164  0031E0  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15165  0031E4  EC02  F011         	call	___ftpack	;wreg free
 15166  0031E8  C018  F020         	movff	?___ftpack,?___awtoft
 15167  0031EC  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15168  0031F0  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15169  0031F4  0012               	return	
 15170  0031F6                     __end_of___awtoft:
 15171                           	opt stack 0
 15172                           tosu	equ	0xFFF
 15173                           tosh	equ	0xFFE
 15174                           tosl	equ	0xFFD
 15175                           pclath	equ	0xFFA
 15176                           tblptru	equ	0xFF8
 15177                           tblptrh	equ	0xFF7
 15178                           tblptrl	equ	0xFF6
 15179                           tablat	equ	0xFF5
 15180                           prodh	equ	0xFF4
 15181                           prodl	equ	0xFF3
 15182                           intcon	equ	0xFF2
 15183                           intcon2	equ	0xFF1
 15184                           postinc0	equ	0xFEE
 15185                           wreg	equ	0xFE8
 15186                           indf1	equ	0xFE7
 15187                           postdec1	equ	0xFE5
 15188                           fsr1h	equ	0xFE2
 15189                           fsr1l	equ	0xFE1
 15190                           indf2	equ	0xFDF
 15191                           postinc2	equ	0xFDE
 15192                           postdec2	equ	0xFDD
 15193                           fsr2h	equ	0xFDA
 15194                           fsr2l	equ	0xFD9
 15195                           status	equ	0xFD8
 15196                           
 15197 ;; *************** function ___lltoft *****************
 15198 ;; Defined at:
 15199 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15200 ;; Parameters:    Size  Location     Type
 15201 ;;  c               4   31[COMRAM] unsigned long 
 15202 ;; Auto vars:     Size  Location     Type
 15203 ;;  exp             1   39[COMRAM] unsigned char 
 15204 ;; Return value:  Size  Location     Type
 15205 ;;                  3   31[COMRAM] float 
 15206 ;; Registers used:
 15207 ;;		wreg, status,2, status,0, cstack
 15208 ;; Tracked objects:
 15209 ;;		On entry : 0/0
 15210 ;;		On exit  : 0/0
 15211 ;;		Unchanged: 0/0
 15212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15213 ;;      Params:         4       0       0       0       0       0       0
 15214 ;;      Locals:         1       0       0       0       0       0       0
 15215 ;;      Temps:          4       0       0       0       0       0       0
 15216 ;;      Totals:         9       0       0       0       0       0       0
 15217 ;;Total ram usage:        9 bytes
 15218 ;; Hardware stack levels used:    1
 15219 ;; Hardware stack levels required when called:    4
 15220 ;; This function calls:
 15221 ;;		___ftpack
 15222 ;; This function is called by:
 15223 ;;		_CheckFlashPrecentage
 15224 ;;		_pow
 15225 ;; This function uses a non-reentrant model
 15226 ;;
 15227                           
 15228                           	psect	text99
 15229  002B28                     __ptext99:
 15230                           	opt stack 0
 15231  002B28                     ___lltoft:
 15232                           	opt stack 25
 15233                           
 15234                           ;incstack = 0
 15235  002B28  0E8E               	movlw	142
 15236  002B2A  6E28               	movwf	___lltoft@exp,c
 15237  002B2C  D006               	goto	l1801
 15238  002B2E  90D8               	bcf	status,0,c
 15239  002B30  3223               	rrcf	___lltoft@c+3,f,c
 15240  002B32  3222               	rrcf	___lltoft@c+2,f,c
 15241  002B34  3221               	rrcf	___lltoft@c+1,f,c
 15242  002B36  3220               	rrcf	___lltoft@c,f,c
 15243  002B38  2A28               	incf	___lltoft@exp,f,c
 15244  002B3A                     l1801:
 15245  002B3A  0E00               	movlw	0
 15246  002B3C  1420               	andwf	___lltoft@c,w,c
 15247  002B3E  6E24               	movwf	??___lltoft& (0+255),c
 15248  002B40  0E00               	movlw	0
 15249  002B42  1421               	andwf	___lltoft@c+1,w,c
 15250  002B44  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15251  002B46  0E00               	movlw	0
 15252  002B48  1422               	andwf	___lltoft@c+2,w,c
 15253  002B4A  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15254  002B4C  0EFF               	movlw	255
 15255  002B4E  1423               	andwf	___lltoft@c+3,w,c
 15256  002B50  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15257  002B52  5024               	movf	??___lltoft,w,c
 15258  002B54  1025               	iorwf	??___lltoft+1,w,c
 15259  002B56  1026               	iorwf	??___lltoft+2,w,c
 15260  002B58  1027               	iorwf	??___lltoft+3,w,c
 15261  002B5A  A4D8               	btfss	status,2,c
 15262  002B5C  D7E8               	goto	l1802
 15263  002B5E  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15264  002B62  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15265  002B66  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15266  002B6A  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15267  002B6E  0E00               	movlw	0
 15268  002B70  6E1C               	movwf	___ftpack@sign,c
 15269  002B72  EC02  F011         	call	___ftpack	;wreg free
 15270  002B76  C018  F020         	movff	?___ftpack,?___lltoft
 15271  002B7A  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15272  002B7E  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15273  002B82  0012               	return	
 15274  002B84                     __end_of___lltoft:
 15275                           	opt stack 0
 15276                           tosu	equ	0xFFF
 15277                           tosh	equ	0xFFE
 15278                           tosl	equ	0xFFD
 15279                           pclath	equ	0xFFA
 15280                           tblptru	equ	0xFF8
 15281                           tblptrh	equ	0xFF7
 15282                           tblptrl	equ	0xFF6
 15283                           tablat	equ	0xFF5
 15284                           prodh	equ	0xFF4
 15285                           prodl	equ	0xFF3
 15286                           intcon	equ	0xFF2
 15287                           intcon2	equ	0xFF1
 15288                           postinc0	equ	0xFEE
 15289                           wreg	equ	0xFE8
 15290                           indf1	equ	0xFE7
 15291                           postdec1	equ	0xFE5
 15292                           fsr1h	equ	0xFE2
 15293                           fsr1l	equ	0xFE1
 15294                           indf2	equ	0xFDF
 15295                           postinc2	equ	0xFDE
 15296                           postdec2	equ	0xFDD
 15297                           fsr2h	equ	0xFDA
 15298                           fsr2l	equ	0xFD9
 15299                           status	equ	0xFD8
 15300                           
 15301 ;; *************** function ___lwtoft *****************
 15302 ;; Defined at:
 15303 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;  c               2   31[COMRAM] unsigned int 
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;                  3   31[COMRAM] float 
 15310 ;; Registers used:
 15311 ;;		wreg, status,2, status,0, cstack
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15317 ;;      Params:         3       0       0       0       0       0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0
 15320 ;;      Totals:         3       0       0       0       0       0       0
 15321 ;;Total ram usage:        3 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:    4
 15324 ;; This function calls:
 15325 ;;		___ftpack
 15326 ;; This function is called by:
 15327 ;;		_AdcConvert
 15328 ;; This function uses a non-reentrant model
 15329 ;;
 15330                           
 15331                           	psect	text100
 15332  00356C                     __ptext100:
 15333                           	opt stack 0
 15334  00356C                     ___lwtoft:
 15335                           	opt stack 25
 15336                           
 15337                           ;incstack = 0
 15338  00356C  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15339  003570  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15340  003574  6A1A               	clrf	___ftpack@arg+2,c
 15341  003576  0E8E               	movlw	142
 15342  003578  6E1B               	movwf	___ftpack@exp,c
 15343  00357A  0E00               	movlw	0
 15344  00357C  6E1C               	movwf	___ftpack@sign,c
 15345  00357E  EC02  F011         	call	___ftpack	;wreg free
 15346  003582  C018  F020         	movff	?___ftpack,?___lwtoft
 15347  003586  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15348  00358A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15349  00358E  0012               	return	
 15350  003590                     __end_of___lwtoft:
 15351                           	opt stack 0
 15352                           tosu	equ	0xFFF
 15353                           tosh	equ	0xFFE
 15354                           tosl	equ	0xFFD
 15355                           pclath	equ	0xFFA
 15356                           tblptru	equ	0xFF8
 15357                           tblptrh	equ	0xFF7
 15358                           tblptrl	equ	0xFF6
 15359                           tablat	equ	0xFF5
 15360                           prodh	equ	0xFF4
 15361                           prodl	equ	0xFF3
 15362                           intcon	equ	0xFF2
 15363                           intcon2	equ	0xFF1
 15364                           postinc0	equ	0xFEE
 15365                           wreg	equ	0xFE8
 15366                           indf1	equ	0xFE7
 15367                           postdec1	equ	0xFE5
 15368                           fsr1h	equ	0xFE2
 15369                           fsr1l	equ	0xFE1
 15370                           indf2	equ	0xFDF
 15371                           postinc2	equ	0xFDE
 15372                           postdec2	equ	0xFDD
 15373                           fsr2h	equ	0xFDA
 15374                           fsr2l	equ	0xFD9
 15375                           status	equ	0xFD8
 15376                           
 15377 ;; *************** function ___ftpack *****************
 15378 ;; Defined at:
 15379 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;  arg             3   23[COMRAM] unsigned um
 15382 ;;  exp             1   26[COMRAM] unsigned char 
 15383 ;;  sign            1   27[COMRAM] unsigned char 
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;		None
 15386 ;; Return value:  Size  Location     Type
 15387 ;;                  3   23[COMRAM] float 
 15388 ;; Registers used:
 15389 ;;		wreg, status,2, status,0
 15390 ;; Tracked objects:
 15391 ;;		On entry : 0/0
 15392 ;;		On exit  : 0/0
 15393 ;;		Unchanged: 0/0
 15394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15395 ;;      Params:         5       0       0       0       0       0       0
 15396 ;;      Locals:         0       0       0       0       0       0       0
 15397 ;;      Temps:          3       0       0       0       0       0       0
 15398 ;;      Totals:         8       0       0       0       0       0       0
 15399 ;;Total ram usage:        8 bytes
 15400 ;; Hardware stack levels used:    1
 15401 ;; Hardware stack levels required when called:    3
 15402 ;; This function calls:
 15403 ;;		Nothing
 15404 ;; This function is called by:
 15405 ;;		___altoft
 15406 ;;		___awtoft
 15407 ;;		___ftadd
 15408 ;;		___ftdiv
 15409 ;;		___ftmul
 15410 ;;		___lltoft
 15411 ;;		___lwtoft
 15412 ;; This function uses a non-reentrant model
 15413 ;;
 15414                           
 15415                           	psect	text101
 15416  002204                     __ptext101:
 15417                           	opt stack 0
 15418  002204                     ___ftpack:
 15419                           	opt stack 25
 15420                           
 15421                           ;incstack = 0
 15422  002204  501B               	movf	___ftpack@exp,w,c
 15423  002206  B4D8               	btfsc	status,2,c
 15424  002208  D005               	goto	u5890
 15425  00220A  5018               	movf	___ftpack@arg,w,c
 15426  00220C  1019               	iorwf	___ftpack@arg+1,w,c
 15427  00220E  101A               	iorwf	___ftpack@arg+2,w,c
 15428  002210  A4D8               	btfss	status,2,c
 15429  002212  D00C               	goto	l1644
 15430  002214                     u5890:
 15431  002214  0E00               	movlw	0
 15432  002216  6E18               	movwf	?___ftpack,c
 15433  002218  0E00               	movlw	0
 15434  00221A  6E19               	movwf	?___ftpack+1,c
 15435  00221C  0E00               	movlw	0
 15436  00221E  6E1A               	movwf	?___ftpack+2,c
 15437  002220  0012               	return	
 15438  002222  2A1B               	incf	___ftpack@exp,f,c
 15439  002224  90D8               	bcf	status,0,c
 15440  002226  321A               	rrcf	___ftpack@arg+2,f,c
 15441  002228  3219               	rrcf	___ftpack@arg+1,f,c
 15442  00222A  3218               	rrcf	___ftpack@arg,f,c
 15443  00222C                     l1644:
 15444  00222C  0E00               	movlw	0
 15445  00222E  1418               	andwf	___ftpack@arg,w,c
 15446  002230  6E1D               	movwf	??___ftpack& (0+255),c
 15447  002232  0E00               	movlw	0
 15448  002234  1419               	andwf	___ftpack@arg+1,w,c
 15449  002236  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15450  002238  0EFE               	movlw	254
 15451  00223A  141A               	andwf	___ftpack@arg+2,w,c
 15452  00223C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15453  00223E  501D               	movf	??___ftpack,w,c
 15454  002240  101E               	iorwf	??___ftpack+1,w,c
 15455  002242  101F               	iorwf	??___ftpack+2,w,c
 15456  002244  B4D8               	btfsc	status,2,c
 15457  002246  D00C               	goto	l1647
 15458  002248  D7EC               	goto	l1645
 15459  00224A  2A1B               	incf	___ftpack@exp,f,c
 15460  00224C  0E01               	movlw	1
 15461  00224E  2618               	addwf	___ftpack@arg,f,c
 15462  002250  0E00               	movlw	0
 15463  002252  2219               	addwfc	___ftpack@arg+1,f,c
 15464  002254  0E00               	movlw	0
 15465  002256  221A               	addwfc	___ftpack@arg+2,f,c
 15466  002258  90D8               	bcf	status,0,c
 15467  00225A  321A               	rrcf	___ftpack@arg+2,f,c
 15468  00225C  3219               	rrcf	___ftpack@arg+1,f,c
 15469  00225E  3218               	rrcf	___ftpack@arg,f,c
 15470  002260                     l1647:
 15471  002260  0E00               	movlw	0
 15472  002262  1418               	andwf	___ftpack@arg,w,c
 15473  002264  6E1D               	movwf	??___ftpack& (0+255),c
 15474  002266  0E00               	movlw	0
 15475  002268  1419               	andwf	___ftpack@arg+1,w,c
 15476  00226A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15477  00226C  0EFF               	movlw	255
 15478  00226E  141A               	andwf	___ftpack@arg+2,w,c
 15479  002270  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15480  002272  501D               	movf	??___ftpack,w,c
 15481  002274  101E               	iorwf	??___ftpack+1,w,c
 15482  002276  101F               	iorwf	??___ftpack+2,w,c
 15483  002278  B4D8               	btfsc	status,2,c
 15484  00227A  D006               	goto	l1650
 15485  00227C  D7E6               	goto	l1648
 15486  00227E  061B               	decf	___ftpack@exp,f,c
 15487  002280  90D8               	bcf	status,0,c
 15488  002282  3618               	rlcf	___ftpack@arg,f,c
 15489  002284  3619               	rlcf	___ftpack@arg+1,f,c
 15490  002286  361A               	rlcf	___ftpack@arg+2,f,c
 15491  002288                     l1650:
 15492  002288  BE19               	btfsc	___ftpack@arg+1,7,c
 15493  00228A  D003               	goto	u5930
 15494  00228C  0E02               	movlw	2
 15495  00228E  601B               	cpfslt	___ftpack@exp,c
 15496  002290  D7F6               	goto	l1651
 15497  002292                     u5930:
 15498  002292  A01B               	btfss	___ftpack@exp,0,c
 15499  002294  9E19               	bcf	___ftpack@arg+1,7,c
 15500  002296  90D8               	bcf	status,0,c
 15501  002298  321B               	rrcf	___ftpack@exp,f,c
 15502  00229A  501B               	movf	___ftpack@exp,w,c
 15503  00229C  121A               	iorwf	___ftpack@arg+2,f,c
 15504  00229E  501C               	movf	___ftpack@sign,w,c
 15505  0022A0  A4D8               	btfss	status,2,c
 15506  0022A2  8E1A               	bsf	___ftpack@arg+2,7,c
 15507  0022A4  C018  F018         	movff	___ftpack@arg,?___ftpack
 15508  0022A8  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15509  0022AC  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15510  0022B0  0012               	return	
 15511  0022B2                     __end_of___ftpack:
 15512                           	opt stack 0
 15513                           tosu	equ	0xFFF
 15514                           tosh	equ	0xFFE
 15515                           tosl	equ	0xFFD
 15516                           pclath	equ	0xFFA
 15517                           tblptru	equ	0xFF8
 15518                           tblptrh	equ	0xFF7
 15519                           tblptrl	equ	0xFF6
 15520                           tablat	equ	0xFF5
 15521                           prodh	equ	0xFF4
 15522                           prodl	equ	0xFF3
 15523                           intcon	equ	0xFF2
 15524                           intcon2	equ	0xFF1
 15525                           postinc0	equ	0xFEE
 15526                           wreg	equ	0xFE8
 15527                           indf1	equ	0xFE7
 15528                           postdec1	equ	0xFE5
 15529                           fsr1h	equ	0xFE2
 15530                           fsr1l	equ	0xFE1
 15531                           indf2	equ	0xFDF
 15532                           postinc2	equ	0xFDE
 15533                           postdec2	equ	0xFDD
 15534                           fsr2h	equ	0xFDA
 15535                           fsr2l	equ	0xFD9
 15536                           status	equ	0xFD8
 15537                           
 15538 ;; *************** function _FlashSampleWrite *****************
 15539 ;; Defined at:
 15540 ;;		line 29 in file "FlashApp.c"
 15541 ;; Parameters:    Size  Location     Type
 15542 ;;  sampleData      2   44[COMRAM] unsigned int 
 15543 ;;  channelNum      1   46[COMRAM] unsigned char 
 15544 ;; Auto vars:     Size  Location     Type
 15545 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15546 ;; Return value:  Size  Location     Type
 15547 ;;                  1    wreg      void 
 15548 ;; Registers used:
 15549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15550 ;; Tracked objects:
 15551 ;;		On entry : 0/0
 15552 ;;		On exit  : 0/0
 15553 ;;		Unchanged: 0/0
 15554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15555 ;;      Params:         3       0       0       0       0       0       0
 15556 ;;      Locals:         0       2       0       0       0       0       0
 15557 ;;      Temps:          0       2       0       0       0       0       0
 15558 ;;      Totals:         3       4       0       0       0       0       0
 15559 ;;Total ram usage:        7 bytes
 15560 ;; Hardware stack levels used:    1
 15561 ;; Hardware stack levels required when called:    5
 15562 ;; This function calls:
 15563 ;;		_FLASH_IsWriteDone
 15564 ;;		_FLASH_WriteBlock
 15565 ;; This function is called by:
 15566 ;;		_AdcConvert
 15567 ;; This function uses a non-reentrant model
 15568 ;;
 15569                           
 15570                           	psect	text102
 15571  001968                     __ptext102:
 15572                           	opt stack 0
 15573  001968                     _FlashSampleWrite:
 15574                           	opt stack 24
 15575                           
 15576                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15577                           
 15578                           ;incstack = 0
 15579  001968  502F               	movf	FlashSampleWrite@channelNum,w,c
 15580  00196A  0100               	movlb	0	; () banked
 15581  00196C  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15582  00196E  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15583  001970  0E0C               	movlw	12
 15584  001972                     u7525:
 15585  001972  90D8               	bcf	status,0,c
 15586  001974  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15587  001976  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15588  001978  2EE8               	decfsz	wreg,f,c
 15589  00197A  D7FB               	goto	u7525
 15590  00197C  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15591  001980  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15592                           
 15593                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15594  001984  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15595  001986  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15596  001988  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15597  00198A  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15601  00198C  90D8               	bcf	status,0,c
 15602  00198E  35C6               	rlcf	_sampleCount& (0+255),w,b
 15603  001990  6ED9               	movwf	fsr2l,c
 15604  001992  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 15605  001994  6EDA               	movwf	fsr2h,c
 15606  001996  0E6E               	movlw	low _sampleArray
 15607  001998  26D9               	addwf	fsr2l,f,c
 15608  00199A  0E01               	movlw	high _sampleArray
 15609  00199C  22DA               	addwfc	fsr2h,f,c
 15610  00199E  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15611  0019A2  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;FlashApp.c: 35: sampleCount ++;
 15615  0019A6  4BC6               	infsnz	_sampleCount& (0+255),f,b
 15616  0019A8  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 15620  0019AA  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 15621  0019AE  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 15622  0019B2  90D8               	bcf	status,0,c
 15623  0019B4  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15624  0019B6  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15625  0019B8  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 15626  0019BA  E104               	bnz	u7530
 15627  0019BC  0E40               	movlw	64
 15628  0019BE  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 15629  0019C0  A0D8               	btfss	status,0,c
 15630  0019C2  0012               	return	
 15631  0019C4                     u7530:
 15632                           
 15633                           ; BSR set to: 0
 15634  0019C4  EC8F  F01B         	call	_FLASH_IsWriteDone	;wreg free
 15635  0019C8  0900               	iorlw	0
 15636  0019CA  B4D8               	btfsc	status,2,c
 15637  0019CC  0012               	return	
 15638                           
 15639                           ;FlashApp.c: 38: {
 15640                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 15641  0019CE  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 15642  0019D2  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 15643  0019D6  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 15644  0019DA  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 15645  0019DE  0E6E               	movlw	low _sampleArray
 15646  0019E0  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 15647  0019E2  0E01               	movlw	high _sampleArray
 15648  0019E4  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 15649  0019E6  EC4D  F010         	call	_FLASH_WriteBlock	;wreg free
 15650                           
 15651                           ;FlashApp.c: 40: writeAddress += (64);
 15652  0019EA  0E40               	movlw	64
 15653  0019EC  2642               	addwf	_writeAddress,f,c
 15654  0019EE  0E00               	movlw	0
 15655  0019F0  2243               	addwfc	_writeAddress+1,f,c
 15656  0019F2  2244               	addwfc	_writeAddress+2,f,c
 15657  0019F4  2245               	addwfc	_writeAddress+3,f,c
 15658                           
 15659                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 15660  0019F6  5045               	movf	_writeAddress+3,w,c
 15661  0019F8  1044               	iorwf	_writeAddress+2,w,c
 15662  0019FA  E106               	bnz	u7550
 15663  0019FC  0EF0               	movlw	240
 15664  0019FE  5C42               	subwf	_writeAddress,w,c
 15665  001A00  0E7F               	movlw	127
 15666  001A02  5843               	subwfb	_writeAddress+1,w,c
 15667  001A04  A0D8               	btfss	status,0,c
 15668  001A06  D018               	goto	l283
 15669  001A08                     u7550:
 15670                           
 15671                           ;FlashApp.c: 42: {
 15672                           ;FlashApp.c: 43: writeAddress = 0x4000;
 15673  001A08  0E00               	movlw	0
 15674  001A0A  6E42               	movwf	_writeAddress,c
 15675  001A0C  0E40               	movlw	64
 15676  001A0E  6E43               	movwf	_writeAddress+1,c
 15677  001A10  0E00               	movlw	0
 15678  001A12  6E44               	movwf	_writeAddress+2,c
 15679  001A14  0E00               	movlw	0
 15680  001A16  6E45               	movwf	_writeAddress+3,c
 15681                           
 15682                           ;FlashApp.c: 44: isReWriteDone = 1;
 15683  001A18  0E01               	movlw	1
 15684  001A1A  6E3B               	movwf	_isReWriteDone,c
 15685                           
 15686                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 15687  001A1C  0E40               	movlw	64
 15688  001A1E  0100               	movlb	0	; () banked
 15689  001A20  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 15690  001A22  11F7               	iorwf	_readAddress& (0+255),w,b
 15691  001A24  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 15692  001A26  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 15693  001A28  A4D8               	btfss	status,2,c
 15694  001A2A  D006               	goto	l283
 15695                           
 15696                           ; BSR set to: 0
 15697                           ;FlashApp.c: 46: {
 15698                           ;FlashApp.c: 47: readAddress += (64);
 15699  001A2C  0E40               	movlw	64
 15700  001A2E  27F7               	addwf	_readAddress& (0+255),f,b
 15701  001A30  0E00               	movlw	0
 15702  001A32  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 15703  001A34  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 15704  001A36  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 15705  001A38                     l283:
 15706                           
 15707                           ;FlashApp.c: 48: }
 15708                           ;FlashApp.c: 49: }
 15709                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 15710                           
 15711                           ; BSR set to: 0
 15712  001A38  0431               	decf	_numOfValidateSamples,w,c
 15713  001A3A  0EFF               	movlw	255
 15714  001A3C  5832               	subwfb	_numOfValidateSamples+1,w,c
 15715  001A3E  0EFF               	movlw	255
 15716  001A40  5833               	subwfb	_numOfValidateSamples+2,w,c
 15717  001A42  0EFF               	movlw	255
 15718  001A44  5834               	subwfb	_numOfValidateSamples+3,w,c
 15719  001A46  B0D8               	btfsc	status,0,c
 15720  001A48  D006               	goto	l284
 15721                           
 15722                           ;FlashApp.c: 52: {
 15723                           ;FlashApp.c: 53: numOfValidateSamples++;
 15724  001A4A  0E01               	movlw	1
 15725  001A4C  2631               	addwf	_numOfValidateSamples,f,c
 15726  001A4E  0E00               	movlw	0
 15727  001A50  2232               	addwfc	_numOfValidateSamples+1,f,c
 15728  001A52  2233               	addwfc	_numOfValidateSamples+2,f,c
 15729  001A54  2234               	addwfc	_numOfValidateSamples+3,f,c
 15730  001A56                     l284:
 15731                           
 15732                           ;FlashApp.c: 54: }
 15733                           ;FlashApp.c: 55: sampleCount = 0;
 15734  001A56  0E00               	movlw	0
 15735  001A58  0100               	movlb	0	; () banked
 15736  001A5A  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 15737  001A5C  0E00               	movlw	0
 15738  001A5E  6FC6               	movwf	_sampleCount& (0+255),b
 15739  001A60  0012               	return	
 15740  001A62                     __end_of_FlashSampleWrite:
 15741                           	opt stack 0
 15742                           tosu	equ	0xFFF
 15743                           tosh	equ	0xFFE
 15744                           tosl	equ	0xFFD
 15745                           pclath	equ	0xFFA
 15746                           tblptru	equ	0xFF8
 15747                           tblptrh	equ	0xFF7
 15748                           tblptrl	equ	0xFF6
 15749                           tablat	equ	0xFF5
 15750                           prodh	equ	0xFF4
 15751                           prodl	equ	0xFF3
 15752                           intcon	equ	0xFF2
 15753                           intcon2	equ	0xFF1
 15754                           postinc0	equ	0xFEE
 15755                           wreg	equ	0xFE8
 15756                           indf1	equ	0xFE7
 15757                           postdec1	equ	0xFE5
 15758                           fsr1h	equ	0xFE2
 15759                           fsr1l	equ	0xFE1
 15760                           indf2	equ	0xFDF
 15761                           postinc2	equ	0xFDE
 15762                           postdec2	equ	0xFDD
 15763                           fsr2h	equ	0xFDA
 15764                           fsr2l	equ	0xFD9
 15765                           status	equ	0xFD8
 15766                           
 15767 ;; *************** function _FLASH_WriteBlock *****************
 15768 ;; Defined at:
 15769 ;;		line 93 in file "mcc_generated_files/memory.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;  writeAddr       4   28[COMRAM] unsigned long 
 15772 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 15773 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 15776 ;;  i               1   43[COMRAM] unsigned char 
 15777 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 15778 ;; Return value:  Size  Location     Type
 15779 ;;                  1    wreg      char 
 15780 ;; Registers used:
 15781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15787 ;;      Params:         6       0       0       0       0       0       0
 15788 ;;      Locals:         6       0       0       0       0       0       0
 15789 ;;      Temps:          4       0       0       0       0       0       0
 15790 ;;      Totals:        16       0       0       0       0       0       0
 15791 ;;Total ram usage:       16 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    4
 15794 ;; This function calls:
 15795 ;;		_FLASH_EraseBlock
 15796 ;; This function is called by:
 15797 ;;		_FlashSampleWrite
 15798 ;;		_FlashTest
 15799 ;;		_FLASH_WriteByte
 15800 ;; This function uses a non-reentrant model
 15801 ;;
 15802                           
 15803                           	psect	text103
 15804  00209A                     __ptext103:
 15805                           	opt stack 0
 15806  00209A                     _FLASH_WriteBlock:
 15807                           	opt stack 24
 15808                           
 15809                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 15810                           
 15811                           ;incstack = 0
 15812  00209A  0EC0               	movlw	192
 15813  00209C  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 15814  00209E  0E7F               	movlw	127
 15815  0020A0  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 15816  0020A2  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 15817  0020A6  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 15818  0020AA  5023               	movf	??_FLASH_WriteBlock,w,c
 15819  0020AC  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 15820  0020AE  5024               	movf	??_FLASH_WriteBlock+1,w,c
 15821  0020B0  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 15822  0020B2  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 15823  0020B6  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 15824  0020BA  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 15825  0020BC  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 15826                           
 15827                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 15828  0020BE  0E00               	movlw	0
 15829  0020C0  BEF2               	btfsc	intcon,7,c	;volatile
 15830  0020C2  0E01               	movlw	1
 15831  0020C4  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 15832                           
 15833                           ;memory.c: 97: uint8_t i;
 15834                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 15835  0020C6  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 15836  0020C8  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 15837  0020CA  E144               	bnz	l934
 15838  0020CC  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 15839  0020CE  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 15840  0020D0  E141               	bnz	l934
 15841  0020D2  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 15842  0020D4  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 15843  0020D6  E13E               	bnz	l934
 15844  0020D8  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 15845  0020DA  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 15846  0020DC  A4D8               	btfss	status,2,c
 15847  0020DE  0012               	return	
 15848                           
 15849                           ;memory.c: 103: }
 15850                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 15851                           
 15852                           ;memory.c: 101: {
 15853                           ;memory.c: 102: return -1;
 15854                           ;	Return value of _FLASH_WriteBlock is never used
 15855  0020E0  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 15856  0020E4  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 15857  0020E8  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 15858  0020EC  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 15859  0020F0  ECB8  F019         	call	_FLASH_EraseBlock	;wreg free
 15860                           
 15861                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 15862  0020F4  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 15863                           
 15864                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 15865  0020F8  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 15866                           
 15867                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 15868  0020FC  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 15869                           
 15870                           ;memory.c: 114: for (i=0; i<(64); i++)
 15871  002100  0E00               	movlw	0
 15872  002102  6E2C               	movwf	FLASH_WriteBlock@i,c
 15873  002104                     l7198:
 15874  002104  0E3F               	movlw	63
 15875  002106  642C               	cpfsgt	FLASH_WriteBlock@i,c
 15876  002108  D001               	goto	l935
 15877  00210A  D013               	goto	u7000
 15878  00210C                     l935:
 15879                           
 15880                           ;memory.c: 115: {
 15881                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 15882  00210C  502C               	movf	FLASH_WriteBlock@i,w,c
 15883  00210E  0D01               	mullw	1
 15884  002110  50F3               	movf	prodl,w,c
 15885  002112  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 15886  002114  6ED9               	movwf	fsr2l,c
 15887  002116  50F4               	movf	prodh,w,c
 15888  002118  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 15889  00211A  6EDA               	movwf	fsr2h,c
 15890  00211C  50DF               	movf	indf2,w,c
 15891  00211E  6EF5               	movwf	tablat,c	;volatile
 15892                           
 15893                           ;memory.c: 118: if (i == ((64)-1))
 15894  002120  0E3F               	movlw	63
 15895  002122  182C               	xorwf	FLASH_WriteBlock@i,w,c
 15896  002124  A4D8               	btfss	status,2,c
 15897  002126  D002               	goto	l937
 15898  002128  000C               	tblwt		*	;# 
 15899                           
 15900                           ;memory.c: 121: }
 15901  00212A  D001               	goto	l938
 15902  00212C                     l937:
 15903  00212C  000D               	tblwt		*+	;# 
 15904  00212E                     l938:
 15905  00212E  2A2C               	incf	FLASH_WriteBlock@i,f,c
 15906  002130  D7E9               	goto	l7198
 15907  002132                     u7000:
 15908                           
 15909                           ;memory.c: 125: }
 15910                           ;memory.c: 126: }
 15911                           ;memory.c: 128: PIR2bits.EEIF = 1;
 15912  002132  88A1               	bsf	4001,4,c	;volatile
 15913                           
 15914                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 15915  002134  8EA6               	bsf	4006,7,c	;volsfr
 15916                           
 15917                           ;memory.c: 130: EECON1bits.CFGS = 0;
 15918  002136  9CA6               	bcf	4006,6,c	;volsfr
 15919                           
 15920                           ;memory.c: 131: EECON1bits.WREN = 1;
 15921  002138  84A6               	bsf	4006,2,c	;volsfr
 15922                           
 15923                           ;memory.c: 132: INTCONbits.GIE = 0;
 15924  00213A  9EF2               	bcf	intcon,7,c	;volatile
 15925                           
 15926                           ;memory.c: 133: EECON2 = 0x55;
 15927  00213C  0E55               	movlw	85
 15928  00213E  6EA7               	movwf	4007,c	;volsfr
 15929                           
 15930                           ;memory.c: 134: EECON2 = 0xAA;
 15931  002140  0EAA               	movlw	170
 15932  002142  6EA7               	movwf	4007,c	;volsfr
 15933                           
 15934                           ;memory.c: 135: EECON1bits.WR = 1;
 15935  002144  82A6               	bsf	4006,1,c	;volsfr
 15936                           
 15937                           ;memory.c: 137: EECON1bits.WREN = 0;
 15938  002146  94A6               	bcf	4006,2,c	;volsfr
 15939                           
 15940                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 15941  002148  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 15942  00214A  D002               	bra	u7015
 15943  00214C  9EF2               	bcf	intcon,7,c	;volatile
 15944  00214E  D001               	bra	u7016
 15945  002150                     u7015:
 15946  002150  8EF2               	bsf	intcon,7,c	;volatile
 15947  002152                     u7016:
 15948  002152  0012               	return	
 15949  002154                     l934:
 15950  002154  0012               	return		;funcret
 15951  002156                     __end_of_FLASH_WriteBlock:
 15952                           	opt stack 0
 15953                           tosu	equ	0xFFF
 15954                           tosh	equ	0xFFE
 15955                           tosl	equ	0xFFD
 15956                           pclath	equ	0xFFA
 15957                           tblptru	equ	0xFF8
 15958                           tblptrh	equ	0xFF7
 15959                           tblptrl	equ	0xFF6
 15960                           tablat	equ	0xFF5
 15961                           prodh	equ	0xFF4
 15962                           prodl	equ	0xFF3
 15963                           intcon	equ	0xFF2
 15964                           intcon2	equ	0xFF1
 15965                           postinc0	equ	0xFEE
 15966                           wreg	equ	0xFE8
 15967                           indf1	equ	0xFE7
 15968                           postdec1	equ	0xFE5
 15969                           fsr1h	equ	0xFE2
 15970                           fsr1l	equ	0xFE1
 15971                           indf2	equ	0xFDF
 15972                           postinc2	equ	0xFDE
 15973                           postdec2	equ	0xFDD
 15974                           fsr2h	equ	0xFDA
 15975                           fsr2l	equ	0xFD9
 15976                           status	equ	0xFD8
 15977                           
 15978 ;; *************** function _FLASH_EraseBlock *****************
 15979 ;; Defined at:
 15980 ;;		line 144 in file "mcc_generated_files/memory.c"
 15981 ;; Parameters:    Size  Location     Type
 15982 ;;  baseAddr        4   23[COMRAM] unsigned long 
 15983 ;; Auto vars:     Size  Location     Type
 15984 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 15985 ;; Return value:  Size  Location     Type
 15986 ;;                  1    wreg      void 
 15987 ;; Registers used:
 15988 ;;		wreg, status,2
 15989 ;; Tracked objects:
 15990 ;;		On entry : 0/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15994 ;;      Params:         4       0       0       0       0       0       0
 15995 ;;      Locals:         1       0       0       0       0       0       0
 15996 ;;      Temps:          0       0       0       0       0       0       0
 15997 ;;      Totals:         5       0       0       0       0       0       0
 15998 ;;Total ram usage:        5 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:    3
 16001 ;; This function calls:
 16002 ;;		Nothing
 16003 ;; This function is called by:
 16004 ;;		_FLASH_WriteBlock
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           	psect	text104
 16009  003370                     __ptext104:
 16010                           	opt stack 0
 16011  003370                     _FLASH_EraseBlock:
 16012                           	opt stack 24
 16013                           
 16014                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16015                           
 16016                           ;incstack = 0
 16017  003370  0E00               	movlw	0
 16018  003372  BEF2               	btfsc	intcon,7,c	;volatile
 16019  003374  0E01               	movlw	1
 16020  003376  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16021                           
 16022                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16023  003378  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16024                           
 16025                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16026  00337C  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16027                           
 16028                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16029  003380  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16030                           
 16031                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16032  003384  8EA6               	bsf	4006,7,c	;volsfr
 16033                           
 16034                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16035  003386  9CA6               	bcf	4006,6,c	;volsfr
 16036                           
 16037                           ;memory.c: 154: EECON1bits.WREN = 1;
 16038  003388  84A6               	bsf	4006,2,c	;volsfr
 16039                           
 16040                           ;memory.c: 155: EECON1bits.FREE = 1;
 16041  00338A  88A6               	bsf	4006,4,c	;volsfr
 16042                           
 16043                           ;memory.c: 156: INTCONbits.GIE = 0;
 16044  00338C  9EF2               	bcf	intcon,7,c	;volatile
 16045                           
 16046                           ;memory.c: 157: EECON2 = 0x55;
 16047  00338E  0E55               	movlw	85
 16048  003390  6EA7               	movwf	4007,c	;volsfr
 16049                           
 16050                           ;memory.c: 158: EECON2 = 0xAA;
 16051  003392  0EAA               	movlw	170
 16052  003394  6EA7               	movwf	4007,c	;volsfr
 16053                           
 16054                           ;memory.c: 159: EECON1bits.WR = 1;
 16055  003396  82A6               	bsf	4006,1,c	;volsfr
 16056                           
 16057                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16058  003398  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16059  00339A  D002               	bra	u6755
 16060  00339C  9EF2               	bcf	intcon,7,c	;volatile
 16061  00339E  D001               	bra	u6756
 16062  0033A0                     u6755:
 16063  0033A0  8EF2               	bsf	intcon,7,c	;volatile
 16064  0033A2                     u6756:
 16065  0033A2  0012               	return		;funcret
 16066  0033A4                     __end_of_FLASH_EraseBlock:
 16067                           	opt stack 0
 16068                           tosu	equ	0xFFF
 16069                           tosh	equ	0xFFE
 16070                           tosl	equ	0xFFD
 16071                           pclath	equ	0xFFA
 16072                           tblptru	equ	0xFF8
 16073                           tblptrh	equ	0xFF7
 16074                           tblptrl	equ	0xFF6
 16075                           tablat	equ	0xFF5
 16076                           prodh	equ	0xFF4
 16077                           prodl	equ	0xFF3
 16078                           intcon	equ	0xFF2
 16079                           intcon2	equ	0xFF1
 16080                           postinc0	equ	0xFEE
 16081                           wreg	equ	0xFE8
 16082                           indf1	equ	0xFE7
 16083                           postdec1	equ	0xFE5
 16084                           fsr1h	equ	0xFE2
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           fsr2h	equ	0xFDA
 16090                           fsr2l	equ	0xFD9
 16091                           status	equ	0xFD8
 16092                           
 16093 ;; *************** function _FLASH_IsWriteDone *****************
 16094 ;; Defined at:
 16095 ;;		line 189 in file "mcc_generated_files/memory.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;		None
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;		None
 16100 ;; Return value:  Size  Location     Type
 16101 ;;                  1    wreg      unsigned char 
 16102 ;; Registers used:
 16103 ;;		wreg
 16104 ;; Tracked objects:
 16105 ;;		On entry : 0/0
 16106 ;;		On exit  : 0/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16109 ;;      Params:         0       0       0       0       0       0       0
 16110 ;;      Locals:         0       0       0       0       0       0       0
 16111 ;;      Temps:          0       0       0       0       0       0       0
 16112 ;;      Totals:         0       0       0       0       0       0       0
 16113 ;;Total ram usage:        0 bytes
 16114 ;; Hardware stack levels used:    1
 16115 ;; Hardware stack levels required when called:    3
 16116 ;; This function calls:
 16117 ;;		Nothing
 16118 ;; This function is called by:
 16119 ;;		_FlashSampleWrite
 16120 ;;		_FlashReadUart
 16121 ;; This function uses a non-reentrant model
 16122 ;;
 16123                           
 16124                           	psect	text105
 16125  00371E                     __ptext105:
 16126                           	opt stack 0
 16127  00371E                     _FLASH_IsWriteDone:
 16128                           	opt stack 24
 16129                           
 16130                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16131                           
 16132                           ;incstack = 0
 16133  00371E  A2A6               	btfss	4006,1,c	;volsfr
 16134  003720  D001               	goto	u6611
 16135  003722  D002               	goto	u6610
 16136  003724                     u6611:
 16137  003724  0E01               	movlw	1
 16138  003726  0012               	return	
 16139  003728                     u6610:
 16140  003728  0E00               	movlw	0
 16141  00372A  0012               	return	
 16142  00372C                     __end_of_FLASH_IsWriteDone:
 16143                           	opt stack 0
 16144                           tosu	equ	0xFFF
 16145                           tosh	equ	0xFFE
 16146                           tosl	equ	0xFFD
 16147                           pclath	equ	0xFFA
 16148                           tblptru	equ	0xFF8
 16149                           tblptrh	equ	0xFF7
 16150                           tblptrl	equ	0xFF6
 16151                           tablat	equ	0xFF5
 16152                           prodh	equ	0xFF4
 16153                           prodl	equ	0xFF3
 16154                           intcon	equ	0xFF2
 16155                           intcon2	equ	0xFF1
 16156                           postinc0	equ	0xFEE
 16157                           wreg	equ	0xFE8
 16158                           indf1	equ	0xFE7
 16159                           postdec1	equ	0xFE5
 16160                           fsr1h	equ	0xFE2
 16161                           fsr1l	equ	0xFE1
 16162                           indf2	equ	0xFDF
 16163                           postinc2	equ	0xFDE
 16164                           postdec2	equ	0xFDD
 16165                           fsr2h	equ	0xFDA
 16166                           fsr2l	equ	0xFD9
 16167                           status	equ	0xFD8
 16168                           
 16169 ;; *************** function _ADC_GetConversion *****************
 16170 ;; Defined at:
 16171 ;;		line 106 in file "mcc_generated_files/adc.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;  channel         1    wreg     enum E6975
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;  channel         1   27[COMRAM] enum E6975
 16176 ;; Return value:  Size  Location     Type
 16177 ;;                  2   23[COMRAM] unsigned int 
 16178 ;; Registers used:
 16179 ;;		wreg, status,2, status,0
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16185 ;;      Params:         2       0       0       0       0       0       0
 16186 ;;      Locals:         1       0       0       0       0       0       0
 16187 ;;      Temps:          2       0       0       0       0       0       0
 16188 ;;      Totals:         5       0       0       0       0       0       0
 16189 ;;Total ram usage:        5 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    3
 16192 ;; This function calls:
 16193 ;;		Nothing
 16194 ;; This function is called by:
 16195 ;;		_AdcConvert
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           	psect	text106
 16200  0033D4                     __ptext106:
 16201                           	opt stack 0
 16202  0033D4                     _ADC_GetConversion:
 16203                           	opt stack 26
 16204                           
 16205                           ;incstack = 0
 16206                           ;ADC_GetConversion@channel stored from wreg
 16207  0033D4  6E1C               	movwf	ADC_GetConversion@channel,c
 16208                           
 16209                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16210  0033D6  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16211  0033DA  461A               	rlncf	??_ADC_GetConversion,f,c
 16212  0033DC  461A               	rlncf	??_ADC_GetConversion,f,c
 16213  0033DE  50C2               	movf	4034,w,c	;volatile
 16214  0033E0  181A               	xorwf	??_ADC_GetConversion,w,c
 16215  0033E2  0B83               	andlw	-125
 16216  0033E4  181A               	xorwf	??_ADC_GetConversion,w,c
 16217  0033E6  6EC2               	movwf	4034,c	;volatile
 16218                           
 16219                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16220  0033E8  80C2               	bsf	4034,0,c	;volatile
 16221                           
 16222                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16223  0033EA  82C2               	bsf	4034,1,c	;volatile
 16224  0033EC                     
 16225                           ;adc.c: 119: {
 16226  0033EC  B2C2               	btfsc	4034,1,c	;volatile
 16227  0033EE  D7FE               	goto	l1047
 16228                           
 16229                           ;adc.c: 120: }
 16230                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16231  0033F0  50C4               	movf	4036,w,c	;volatile
 16232  0033F2  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16233  0033F4  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16234  0033F6  50C3               	movf	4035,w,c	;volatile
 16235  0033F8  241A               	addwf	??_ADC_GetConversion,w,c
 16236  0033FA  6E18               	movwf	?_ADC_GetConversion,c
 16237  0033FC  0E00               	movlw	0
 16238  0033FE  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16239  003400  6E19               	movwf	?_ADC_GetConversion+1,c
 16240  003402  0012               	return	
 16241  003404                     __end_of_ADC_GetConversion:
 16242                           	opt stack 0
 16243                           tosu	equ	0xFFF
 16244                           tosh	equ	0xFFE
 16245                           tosl	equ	0xFFD
 16246                           pclath	equ	0xFFA
 16247                           tblptru	equ	0xFF8
 16248                           tblptrh	equ	0xFF7
 16249                           tblptrl	equ	0xFF6
 16250                           tablat	equ	0xFF5
 16251                           prodh	equ	0xFF4
 16252                           prodl	equ	0xFF3
 16253                           intcon	equ	0xFF2
 16254                           intcon2	equ	0xFF1
 16255                           postinc0	equ	0xFEE
 16256                           wreg	equ	0xFE8
 16257                           indf1	equ	0xFE7
 16258                           postdec1	equ	0xFE5
 16259                           fsr1h	equ	0xFE2
 16260                           fsr1l	equ	0xFE1
 16261                           indf2	equ	0xFDF
 16262                           postinc2	equ	0xFDE
 16263                           postdec2	equ	0xFDD
 16264                           fsr2h	equ	0xFDA
 16265                           fsr2l	equ	0xFD9
 16266                           status	equ	0xFD8
 16267                           
 16268 ;; *************** function _INTERRUPT_InterruptManager *****************
 16269 ;; Defined at:
 16270 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16271 ;; Parameters:    Size  Location     Type
 16272 ;;		None
 16273 ;; Auto vars:     Size  Location     Type
 16274 ;;		None
 16275 ;; Return value:  Size  Location     Type
 16276 ;;                  1    wreg      void 
 16277 ;; Registers used:
 16278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16279 ;; Tracked objects:
 16280 ;;		On entry : 0/0
 16281 ;;		On exit  : 0/0
 16282 ;;		Unchanged: 0/0
 16283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16284 ;;      Params:         0       0       0       0       0       0       0
 16285 ;;      Locals:         0       0       0       0       0       0       0
 16286 ;;      Temps:         18       0       0       0       0       0       0
 16287 ;;      Totals:        18       0       0       0       0       0       0
 16288 ;;Total ram usage:       18 bytes
 16289 ;; Hardware stack levels used:    1
 16290 ;; Hardware stack levels required when called:    2
 16291 ;; This function calls:
 16292 ;;		_EUSART1_Receive_ISR
 16293 ;;		_EUSART1_Transmit_ISR
 16294 ;;		_MEMORY_ISR
 16295 ;;		_PIN_MANAGER_IOC
 16296 ;;		_TMR0_ISR
 16297 ;; This function is called by:
 16298 ;;		Interrupt level 2
 16299 ;; This function uses a non-reentrant model
 16300 ;;
 16301                           
 16302                           	psect	intcode
 16303  000008                     __pintcode:
 16304                           	opt stack 0
 16305  000008                     _INTERRUPT_InterruptManager:
 16306                           	opt stack 21
 16307                           
 16308                           ;incstack = 0
 16309  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16310  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16311  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16312  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16313  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16314  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16315  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16316  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16317  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16318  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16319  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16320  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16321  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16322  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16323  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16324  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16325  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16326  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16327  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16328                           
 16329                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16330  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16331  000054  A0F2               	btfss	intcon,0,c	;volatile
 16332  000056  D003               	goto	i2l772
 16333                           
 16334                           ;interrupt_manager.c: 61: {
 16335                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16336  000058  ECC9  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16337                           
 16338                           ;interrupt_manager.c: 63: }
 16339  00005C  D019               	goto	i2l781
 16340  00005E                     i2l772:
 16341                           
 16342                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16343  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16344  000060  A4F2               	btfss	intcon,2,c	;volatile
 16345  000062  D003               	goto	i2l774
 16346                           
 16347                           ;interrupt_manager.c: 65: {
 16348                           ;interrupt_manager.c: 66: TMR0_ISR();
 16349  000064  ECF3  F011         	call	_TMR0_ISR	;wreg free
 16350                           
 16351                           ;interrupt_manager.c: 67: }
 16352  000068  D013               	goto	i2l781
 16353  00006A                     i2l774:
 16354                           
 16355                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16356  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16357  00006C  D011               	goto	i2l781
 16358                           
 16359                           ;interrupt_manager.c: 69: {
 16360                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16361  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16362  000070  A8A1               	btfss	4001,4,c	;volatile
 16363  000072  D003               	goto	i2l777
 16364                           
 16365                           ;interrupt_manager.c: 71: {
 16366                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16367  000074  ECCB  F01B         	call	_MEMORY_ISR	;wreg free
 16368                           
 16369                           ;interrupt_manager.c: 73: }
 16370  000078  D00B               	goto	i2l781
 16371  00007A                     i2l777:
 16372                           
 16373                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16374  00007A  B89D               	btfsc	3997,4,c	;volatile
 16375  00007C  A89E               	btfss	3998,4,c	;volatile
 16376  00007E  D003               	goto	i2l779
 16377                           
 16378                           ;interrupt_manager.c: 75: {
 16379                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16380  000080  ECFB  F018         	call	_EUSART1_Transmit_ISR	;wreg free
 16381                           
 16382                           ;interrupt_manager.c: 77: }
 16383  000084  D005               	goto	i2l781
 16384  000086                     i2l779:
 16385                           
 16386                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16387  000086  BA9D               	btfsc	3997,5,c	;volatile
 16388  000088  AA9E               	btfss	3998,5,c	;volatile
 16389  00008A  D002               	goto	i2l781
 16390                           
 16391                           ;interrupt_manager.c: 79: {
 16392                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16393  00008C  EC02  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16394  000090                     i2l781:
 16395                           
 16396                           ;interrupt_manager.c: 87: else
 16397                           ;interrupt_manager.c: 88: {
 16398                           
 16399                           ;interrupt_manager.c: 85: }
 16400                           ;interrupt_manager.c: 86: }
 16401                           
 16402                           ;interrupt_manager.c: 82: else
 16403                           ;interrupt_manager.c: 83: {
 16404  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16405  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16406  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16407  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16408  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16409  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16410  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16411  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16412  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16413  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16414  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16415  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16416  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16417  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16418  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16419  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16420  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16421  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16422  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16423  0000DA  0011               	retfie		f
 16424  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16425                           	opt stack 0
 16426                           tosu	equ	0xFFF
 16427                           tosh	equ	0xFFE
 16428                           tosl	equ	0xFFD
 16429                           pclatu	equ	0xFFB
 16430                           pclath	equ	0xFFA
 16431                           tblptru	equ	0xFF8
 16432                           tblptrh	equ	0xFF7
 16433                           tblptrl	equ	0xFF6
 16434                           tablat	equ	0xFF5
 16435                           prodh	equ	0xFF4
 16436                           prodl	equ	0xFF3
 16437                           intcon	equ	0xFF2
 16438                           intcon2	equ	0xFF1
 16439                           postinc0	equ	0xFEE
 16440                           fsr0h	equ	0xFEA
 16441                           fsr0l	equ	0xFE9
 16442                           wreg	equ	0xFE8
 16443                           indf1	equ	0xFE7
 16444                           postdec1	equ	0xFE5
 16445                           fsr1h	equ	0xFE2
 16446                           fsr1l	equ	0xFE1
 16447                           indf2	equ	0xFDF
 16448                           postinc2	equ	0xFDE
 16449                           postdec2	equ	0xFDD
 16450                           fsr2h	equ	0xFDA
 16451                           fsr2l	equ	0xFD9
 16452                           status	equ	0xFD8
 16453                           
 16454 ;; *************** function _TMR0_ISR *****************
 16455 ;; Defined at:
 16456 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;		None
 16459 ;; Auto vars:     Size  Location     Type
 16460 ;;		None
 16461 ;; Return value:  Size  Location     Type
 16462 ;;                  1    wreg      void 
 16463 ;; Registers used:
 16464 ;;		wreg, status,2, status,0, cstack
 16465 ;; Tracked objects:
 16466 ;;		On entry : 0/0
 16467 ;;		On exit  : 0/0
 16468 ;;		Unchanged: 0/0
 16469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16470 ;;      Params:         0       0       0       0       0       0       0
 16471 ;;      Locals:         0       0       0       0       0       0       0
 16472 ;;      Temps:          0       0       0       0       0       0       0
 16473 ;;      Totals:         0       0       0       0       0       0       0
 16474 ;;Total ram usage:        0 bytes
 16475 ;; Hardware stack levels used:    1
 16476 ;; Hardware stack levels required when called:    1
 16477 ;; This function calls:
 16478 ;;		___lwmod
 16479 ;; This function is called by:
 16480 ;;		_INTERRUPT_InterruptManager
 16481 ;; This function uses a non-reentrant model
 16482 ;;
 16483                           
 16484                           	psect	text108
 16485  0023E6                     __ptext108:
 16486                           	opt stack 0
 16487  0023E6                     _TMR0_ISR:
 16488                           	opt stack 21
 16489                           
 16490                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16491                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16492                           
 16493                           ;incstack = 0
 16494  0023E6  94F2               	bcf	intcon,2,c	;volatile
 16495                           
 16496                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16497  0023E8  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16498  0023EA  6ED7               	movwf	4055,c	;volatile
 16499                           
 16500                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16501  0023EC  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16502                           
 16503                           ;tmr0.c: 146: CountCallBack ++;
 16504  0023F0  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16505  0023F2  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16506                           
 16507                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16508  0023F4  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16509  0023F8  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16510  0023FC  0E00               	movlw	0
 16511  0023FE  6E04               	movwf	___lwmod@divisor+1,c
 16512  002400  0E14               	movlw	20
 16513  002402  6E03               	movwf	___lwmod@divisor,c
 16514  002404  EC46  F018         	call	___lwmod	;wreg free
 16515  002408  5001               	movf	?___lwmod,w,c
 16516  00240A  1002               	iorwf	?___lwmod+1,w,c
 16517  00240C  A4D8               	btfss	status,2,c
 16518  00240E  D003               	goto	i2l1003
 16519                           
 16520                           ;tmr0.c: 148: {
 16521                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16522  002410  0E01               	movlw	1
 16523  002412  0100               	movlb	0	; () banked
 16524  002414  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16525  002416                     i2l1003:
 16526                           
 16527                           ;tmr0.c: 150: }
 16528                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16529                           
 16530                           ; BSR set to: 0
 16531  002416  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16532  00241A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16533  00241E  0E00               	movlw	0
 16534  002420  6E04               	movwf	___lwmod@divisor+1,c
 16535  002422  0E32               	movlw	50
 16536  002424  6E03               	movwf	___lwmod@divisor,c
 16537  002426  EC46  F018         	call	___lwmod	;wreg free
 16538  00242A  5001               	movf	?___lwmod,w,c
 16539  00242C  1002               	iorwf	?___lwmod+1,w,c
 16540  00242E  A4D8               	btfss	status,2,c
 16541  002430  D003               	goto	i2l1004
 16542                           
 16543                           ;tmr0.c: 153: {
 16544                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16545  002432  0E01               	movlw	1
 16546  002434  0100               	movlb	0	; () banked
 16547  002436  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16548  002438                     i2l1004:
 16549                           
 16550                           ;tmr0.c: 155: }
 16551                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16552                           
 16553                           ; BSR set to: 0
 16554  002438  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16555  00243C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16556  002440  0E01               	movlw	1
 16557  002442  6E04               	movwf	___lwmod@divisor+1,c
 16558  002444  0E2C               	movlw	44
 16559  002446  6E03               	movwf	___lwmod@divisor,c
 16560  002448  EC46  F018         	call	___lwmod	;wreg free
 16561  00244C  5001               	movf	?___lwmod,w,c
 16562  00244E  1002               	iorwf	?___lwmod+1,w,c
 16563  002450  A4D8               	btfss	status,2,c
 16564  002452  D003               	goto	i2l1005
 16565                           
 16566                           ;tmr0.c: 157: {
 16567                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16568  002454  0E01               	movlw	1
 16569  002456  0100               	movlb	0	; () banked
 16570  002458  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16571  00245A                     i2l1005:
 16572                           
 16573                           ;tmr0.c: 159: }
 16574                           ;tmr0.c: 161: CountCallBack %= 300;
 16575                           
 16576                           ; BSR set to: 0
 16577  00245A  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16578  00245E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16579  002462  0E01               	movlw	1
 16580  002464  6E04               	movwf	___lwmod@divisor+1,c
 16581  002466  0E2C               	movlw	44
 16582  002468  6E03               	movwf	___lwmod@divisor,c
 16583  00246A  EC46  F018         	call	___lwmod	;wreg free
 16584  00246E  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16585  002472  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16586  002476  0012               	return		;funcret
 16587  002478                     __end_of_TMR0_ISR:
 16588                           	opt stack 0
 16589                           tosu	equ	0xFFF
 16590                           tosh	equ	0xFFE
 16591                           tosl	equ	0xFFD
 16592                           pclatu	equ	0xFFB
 16593                           pclath	equ	0xFFA
 16594                           tblptru	equ	0xFF8
 16595                           tblptrh	equ	0xFF7
 16596                           tblptrl	equ	0xFF6
 16597                           tablat	equ	0xFF5
 16598                           prodh	equ	0xFF4
 16599                           prodl	equ	0xFF3
 16600                           intcon	equ	0xFF2
 16601                           intcon2	equ	0xFF1
 16602                           postinc0	equ	0xFEE
 16603                           fsr0h	equ	0xFEA
 16604                           fsr0l	equ	0xFE9
 16605                           wreg	equ	0xFE8
 16606                           indf1	equ	0xFE7
 16607                           postdec1	equ	0xFE5
 16608                           fsr1h	equ	0xFE2
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function ___lwmod *****************
 16618 ;; Defined at:
 16619 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  dividend        2    0[COMRAM] unsigned int 
 16622 ;;  divisor         2    2[COMRAM] unsigned int 
 16623 ;; Auto vars:     Size  Location     Type
 16624 ;;  counter         1    4[COMRAM] unsigned char 
 16625 ;; Return value:  Size  Location     Type
 16626 ;;                  2    0[COMRAM] unsigned int 
 16627 ;; Registers used:
 16628 ;;		wreg, status,2, status,0
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16634 ;;      Params:         4       0       0       0       0       0       0
 16635 ;;      Locals:         1       0       0       0       0       0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0
 16637 ;;      Totals:         5       0       0       0       0       0       0
 16638 ;;Total ram usage:        5 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; This function calls:
 16641 ;;		Nothing
 16642 ;; This function is called by:
 16643 ;;		_TMR0_ISR
 16644 ;;		_segmentCounter
 16645 ;; This function uses a non-reentrant model
 16646 ;;
 16647                           
 16648                           	psect	text109
 16649  00308C                     __ptext109:
 16650                           	opt stack 0
 16651  00308C                     ___lwmod:
 16652                           	opt stack 21
 16653                           
 16654                           ;incstack = 0
 16655  00308C  5003               	movf	___lwmod@divisor,w,c
 16656  00308E  1004               	iorwf	___lwmod@divisor+1,w,c
 16657  003090  B4D8               	btfsc	status,2,c
 16658  003092  D018               	goto	i2l1848
 16659  003094  0E01               	movlw	1
 16660  003096  6E05               	movwf	___lwmod@counter,c
 16661  003098  D004               	goto	i2l1843
 16662  00309A  90D8               	bcf	status,0,c
 16663  00309C  3603               	rlcf	___lwmod@divisor,f,c
 16664  00309E  3604               	rlcf	___lwmod@divisor+1,f,c
 16665  0030A0  2A05               	incf	___lwmod@counter,f,c
 16666  0030A2                     i2l1843:
 16667  0030A2  AE04               	btfss	___lwmod@divisor+1,7,c
 16668  0030A4  D7FA               	goto	i2l1844
 16669  0030A6                     i2u507_40:
 16670  0030A6  5003               	movf	___lwmod@divisor,w,c
 16671  0030A8  5C01               	subwf	___lwmod@dividend,w,c
 16672  0030AA  5004               	movf	___lwmod@divisor+1,w,c
 16673  0030AC  5802               	subwfb	___lwmod@dividend+1,w,c
 16674  0030AE  A0D8               	btfss	status,0,c
 16675  0030B0  D004               	goto	i2l1847
 16676  0030B2  5003               	movf	___lwmod@divisor,w,c
 16677  0030B4  5E01               	subwf	___lwmod@dividend,f,c
 16678  0030B6  5004               	movf	___lwmod@divisor+1,w,c
 16679  0030B8  5A02               	subwfb	___lwmod@dividend+1,f,c
 16680  0030BA                     i2l1847:
 16681  0030BA  90D8               	bcf	status,0,c
 16682  0030BC  3204               	rrcf	___lwmod@divisor+1,f,c
 16683  0030BE  3203               	rrcf	___lwmod@divisor,f,c
 16684  0030C0  2E05               	decfsz	___lwmod@counter,f,c
 16685  0030C2  D7F1               	goto	i2u507_40
 16686  0030C4                     i2l1848:
 16687  0030C4  C001  F001         	movff	___lwmod@dividend,?___lwmod
 16688  0030C8  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 16689  0030CC  0012               	return		;funcret
 16690  0030CE                     __end_of___lwmod:
 16691                           	opt stack 0
 16692                           tosu	equ	0xFFF
 16693                           tosh	equ	0xFFE
 16694                           tosl	equ	0xFFD
 16695                           pclatu	equ	0xFFB
 16696                           pclath	equ	0xFFA
 16697                           tblptru	equ	0xFF8
 16698                           tblptrh	equ	0xFF7
 16699                           tblptrl	equ	0xFF6
 16700                           tablat	equ	0xFF5
 16701                           prodh	equ	0xFF4
 16702                           prodl	equ	0xFF3
 16703                           intcon	equ	0xFF2
 16704                           intcon2	equ	0xFF1
 16705                           postinc0	equ	0xFEE
 16706                           fsr0h	equ	0xFEA
 16707                           fsr0l	equ	0xFE9
 16708                           wreg	equ	0xFE8
 16709                           indf1	equ	0xFE7
 16710                           postdec1	equ	0xFE5
 16711                           fsr1h	equ	0xFE2
 16712                           fsr1l	equ	0xFE1
 16713                           indf2	equ	0xFDF
 16714                           postinc2	equ	0xFDE
 16715                           postdec2	equ	0xFDD
 16716                           fsr2h	equ	0xFDA
 16717                           fsr2l	equ	0xFD9
 16718                           status	equ	0xFD8
 16719                           
 16720 ;; *************** function _PIN_MANAGER_IOC *****************
 16721 ;; Defined at:
 16722 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 16723 ;; Parameters:    Size  Location     Type
 16724 ;;		None
 16725 ;; Auto vars:     Size  Location     Type
 16726 ;;		None
 16727 ;; Return value:  Size  Location     Type
 16728 ;;                  1    wreg      void 
 16729 ;; Registers used:
 16730 ;;		None
 16731 ;; Tracked objects:
 16732 ;;		On entry : 0/0
 16733 ;;		On exit  : 0/0
 16734 ;;		Unchanged: 0/0
 16735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16736 ;;      Params:         0       0       0       0       0       0       0
 16737 ;;      Locals:         0       0       0       0       0       0       0
 16738 ;;      Temps:          0       0       0       0       0       0       0
 16739 ;;      Totals:         0       0       0       0       0       0       0
 16740 ;;Total ram usage:        0 bytes
 16741 ;; Hardware stack levels used:    1
 16742 ;; This function calls:
 16743 ;;		Nothing
 16744 ;; This function is called by:
 16745 ;;		_INTERRUPT_InterruptManager
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           	psect	text110
 16750  003792                     __ptext110:
 16751                           	opt stack 0
 16752  003792                     _PIN_MANAGER_IOC:
 16753                           	opt stack 22
 16754                           
 16755                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 16756                           
 16757                           ;incstack = 0
 16758  003792  90F2               	bcf	intcon,0,c	;volatile
 16759  003794  0012               	return		;funcret
 16760  003796                     __end_of_PIN_MANAGER_IOC:
 16761                           	opt stack 0
 16762                           tosu	equ	0xFFF
 16763                           tosh	equ	0xFFE
 16764                           tosl	equ	0xFFD
 16765                           pclatu	equ	0xFFB
 16766                           pclath	equ	0xFFA
 16767                           tblptru	equ	0xFF8
 16768                           tblptrh	equ	0xFF7
 16769                           tblptrl	equ	0xFF6
 16770                           tablat	equ	0xFF5
 16771                           prodh	equ	0xFF4
 16772                           prodl	equ	0xFF3
 16773                           intcon	equ	0xFF2
 16774                           intcon2	equ	0xFF1
 16775                           postinc0	equ	0xFEE
 16776                           fsr0h	equ	0xFEA
 16777                           fsr0l	equ	0xFE9
 16778                           wreg	equ	0xFE8
 16779                           indf1	equ	0xFE7
 16780                           postdec1	equ	0xFE5
 16781                           fsr1h	equ	0xFE2
 16782                           fsr1l	equ	0xFE1
 16783                           indf2	equ	0xFDF
 16784                           postinc2	equ	0xFDE
 16785                           postdec2	equ	0xFDD
 16786                           fsr2h	equ	0xFDA
 16787                           fsr2l	equ	0xFD9
 16788                           status	equ	0xFD8
 16789                           
 16790 ;; *************** function _MEMORY_ISR *****************
 16791 ;; Defined at:
 16792 ;;		line 206 in file "mcc_generated_files/memory.c"
 16793 ;; Parameters:    Size  Location     Type
 16794 ;;		None
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;		None
 16797 ;; Return value:  Size  Location     Type
 16798 ;;                  1    wreg      void 
 16799 ;; Registers used:
 16800 ;;		None
 16801 ;; Tracked objects:
 16802 ;;		On entry : 0/0
 16803 ;;		On exit  : 0/0
 16804 ;;		Unchanged: 0/0
 16805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16806 ;;      Params:         0       0       0       0       0       0       0
 16807 ;;      Locals:         0       0       0       0       0       0       0
 16808 ;;      Temps:          0       0       0       0       0       0       0
 16809 ;;      Totals:         0       0       0       0       0       0       0
 16810 ;;Total ram usage:        0 bytes
 16811 ;; Hardware stack levels used:    1
 16812 ;; This function calls:
 16813 ;;		Nothing
 16814 ;; This function is called by:
 16815 ;;		_INTERRUPT_InterruptManager
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           	psect	text111
 16820  003796                     __ptext111:
 16821                           	opt stack 0
 16822  003796                     _MEMORY_ISR:
 16823                           	opt stack 22
 16824                           
 16825                           ;memory.c: 209: PIR2bits.EEIF = 0;
 16826                           
 16827                           ;incstack = 0
 16828  003796  98A1               	bcf	4001,4,c	;volatile
 16829  003798  0012               	return		;funcret
 16830  00379A                     __end_of_MEMORY_ISR:
 16831                           	opt stack 0
 16832                           tosu	equ	0xFFF
 16833                           tosh	equ	0xFFE
 16834                           tosl	equ	0xFFD
 16835                           pclatu	equ	0xFFB
 16836                           pclath	equ	0xFFA
 16837                           tblptru	equ	0xFF8
 16838                           tblptrh	equ	0xFF7
 16839                           tblptrl	equ	0xFF6
 16840                           tablat	equ	0xFF5
 16841                           prodh	equ	0xFF4
 16842                           prodl	equ	0xFF3
 16843                           intcon	equ	0xFF2
 16844                           intcon2	equ	0xFF1
 16845                           postinc0	equ	0xFEE
 16846                           fsr0h	equ	0xFEA
 16847                           fsr0l	equ	0xFE9
 16848                           wreg	equ	0xFE8
 16849                           indf1	equ	0xFE7
 16850                           postdec1	equ	0xFE5
 16851                           fsr1h	equ	0xFE2
 16852                           fsr1l	equ	0xFE1
 16853                           indf2	equ	0xFDF
 16854                           postinc2	equ	0xFDE
 16855                           postdec2	equ	0xFDD
 16856                           fsr2h	equ	0xFDA
 16857                           fsr2l	equ	0xFD9
 16858                           status	equ	0xFD8
 16859                           
 16860 ;; *************** function _EUSART1_Transmit_ISR *****************
 16861 ;; Defined at:
 16862 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 16863 ;; Parameters:    Size  Location     Type
 16864 ;;		None
 16865 ;; Auto vars:     Size  Location     Type
 16866 ;;		None
 16867 ;; Return value:  Size  Location     Type
 16868 ;;                  1    wreg      void 
 16869 ;; Registers used:
 16870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16871 ;; Tracked objects:
 16872 ;;		On entry : 0/0
 16873 ;;		On exit  : 0/0
 16874 ;;		Unchanged: 0/0
 16875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16876 ;;      Params:         0       0       0       0       0       0       0
 16877 ;;      Locals:         0       0       0       0       0       0       0
 16878 ;;      Temps:          0       0       0       0       0       0       0
 16879 ;;      Totals:         0       0       0       0       0       0       0
 16880 ;;Total ram usage:        0 bytes
 16881 ;; Hardware stack levels used:    1
 16882 ;; This function calls:
 16883 ;;		Nothing
 16884 ;; This function is called by:
 16885 ;;		_INTERRUPT_InterruptManager
 16886 ;; This function uses a non-reentrant model
 16887 ;;
 16888                           
 16889                           	psect	text112
 16890  0031F6                     __ptext112:
 16891                           	opt stack 0
 16892  0031F6                     _EUSART1_Transmit_ISR:
 16893                           	opt stack 22
 16894                           
 16895                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16896                           
 16897                           ;incstack = 0
 16898  0031F6  0E46               	movlw	70
 16899  0031F8  0100               	movlb	0	; () banked
 16900  0031FA  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16901  0031FC  D012               	goto	i2l843
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;eusart1.c: 186: {
 16905                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16906  0031FE  5039               	movf	_eusart1TxTail,w,c	;volatile
 16907  003200  0D01               	mullw	1
 16908  003202  0E00               	movlw	low _eusart1TxBuffer
 16909  003204  24F3               	addwf	prodl,w,c
 16910  003206  6ED9               	movwf	fsr2l,c
 16911  003208  0E01               	movlw	high _eusart1TxBuffer
 16912  00320A  20F4               	addwfc	prodh,w,c
 16913  00320C  6EDA               	movwf	fsr2h,c
 16914  00320E  50DF               	movf	indf2,w,c
 16915  003210  6EAD               	movwf	4013,c	;volatile
 16916                           
 16917                           ; BSR set to: 0
 16918  003212  2A39               	incf	_eusart1TxTail,f,c	;volatile
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16922  003214  0E45               	movlw	69
 16923  003216  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 16924  003218  D002               	goto	i2l844
 16925                           
 16926                           ; BSR set to: 0
 16927                           ;eusart1.c: 189: {
 16928                           ;eusart1.c: 190: eusart1TxTail = 0;
 16929  00321A  0E00               	movlw	0
 16930  00321C  6E39               	movwf	_eusart1TxTail,c	;volatile
 16931  00321E                     i2l844:
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;eusart1.c: 191: }
 16935                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 16936                           
 16937                           ; BSR set to: 0
 16938  00321E  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16939                           
 16940                           ;eusart1.c: 193: }
 16941  003220  0012               	return	
 16942  003222                     i2l843:
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;eusart1.c: 194: else
 16946                           ;eusart1.c: 195: {
 16947                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 16948  003222  989D               	bcf	3997,4,c	;volatile
 16949                           
 16950                           ; BSR set to: 0
 16951                           ;eusart1.c: 197: eusart1TxTail = 0;
 16952  003224  0E00               	movlw	0
 16953  003226  6E39               	movwf	_eusart1TxTail,c	;volatile
 16954                           
 16955                           ;eusart1.c: 198: eusart1TxHead = 0;
 16956  003228  0E00               	movlw	0
 16957  00322A  6E3A               	movwf	_eusart1TxHead,c	;volatile
 16958  00322C  0012               	return	
 16959  00322E                     __end_of_EUSART1_Transmit_ISR:
 16960                           	opt stack 0
 16961                           tosu	equ	0xFFF
 16962                           tosh	equ	0xFFE
 16963                           tosl	equ	0xFFD
 16964                           pclatu	equ	0xFFB
 16965                           pclath	equ	0xFFA
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           intcon2	equ	0xFF1
 16974                           postinc0	equ	0xFEE
 16975                           fsr0h	equ	0xFEA
 16976                           fsr0l	equ	0xFE9
 16977                           wreg	equ	0xFE8
 16978                           indf1	equ	0xFE7
 16979                           postdec1	equ	0xFE5
 16980                           fsr1h	equ	0xFE2
 16981                           fsr1l	equ	0xFE1
 16982                           indf2	equ	0xFDF
 16983                           postinc2	equ	0xFDE
 16984                           postdec2	equ	0xFDD
 16985                           fsr2h	equ	0xFDA
 16986                           fsr2l	equ	0xFD9
 16987                           status	equ	0xFD8
 16988                           
 16989 ;; *************** function _EUSART1_Receive_ISR *****************
 16990 ;; Defined at:
 16991 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 16992 ;; Parameters:    Size  Location     Type
 16993 ;;		None
 16994 ;; Auto vars:     Size  Location     Type
 16995 ;;		None
 16996 ;; Return value:  Size  Location     Type
 16997 ;;                  1    wreg      void 
 16998 ;; Registers used:
 16999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17000 ;; Tracked objects:
 17001 ;;		On entry : 0/0
 17002 ;;		On exit  : 0/0
 17003 ;;		Unchanged: 0/0
 17004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17005 ;;      Params:         0       0       0       0       0       0       0
 17006 ;;      Locals:         0       0       0       0       0       0       0
 17007 ;;      Temps:          0       0       0       0       0       0       0
 17008 ;;      Totals:         0       0       0       0       0       0       0
 17009 ;;Total ram usage:        0 bytes
 17010 ;; Hardware stack levels used:    1
 17011 ;; This function calls:
 17012 ;;		Nothing
 17013 ;; This function is called by:
 17014 ;;		_INTERRUPT_InterruptManager
 17015 ;; This function uses a non-reentrant model
 17016 ;;
 17017                           
 17018                           	psect	text113
 17019  003404                     __ptext113:
 17020                           	opt stack 0
 17021  003404                     _EUSART1_Receive_ISR:
 17022                           	opt stack 22
 17023                           
 17024                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17025                           
 17026                           ; BSR set to: 0
 17027                           ;incstack = 0
 17028  003404  A2AB               	btfss	4011,1,c	;volatile
 17029  003406  D002               	goto	i2l849
 17030                           
 17031                           ;eusart1.c: 206: {
 17032                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17033  003408  98AB               	bcf	4011,4,c	;volatile
 17034                           
 17035                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17036  00340A  88AB               	bsf	4011,4,c	;volatile
 17037  00340C                     i2l849:
 17038                           
 17039                           ;eusart1.c: 210: }
 17040                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17041  00340C  5038               	movf	_eusart1RxHead,w,c	;volatile
 17042  00340E  0D01               	mullw	1
 17043  003410  0E46               	movlw	low _eusart1RxBuffer
 17044  003412  24F3               	addwf	prodl,w,c
 17045  003414  6ED9               	movwf	fsr2l,c
 17046  003416  0E01               	movlw	high _eusart1RxBuffer
 17047  003418  20F4               	addwfc	prodh,w,c
 17048  00341A  6EDA               	movwf	fsr2h,c
 17049  00341C  CFAE FFDF          	movff	4014,indf2	;volatile
 17050  003420  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17051                           
 17052                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17053  003422  0E27               	movlw	39
 17054  003424  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17055  003426  D002               	goto	i2l850
 17056                           
 17057                           ;eusart1.c: 217: {
 17058                           ;eusart1.c: 218: eusart1RxHead = 0;
 17059  003428  0E00               	movlw	0
 17060  00342A  6E38               	movwf	_eusart1RxHead,c	;volatile
 17061  00342C                     i2l850:
 17062                           
 17063                           ;eusart1.c: 219: }
 17064                           ;eusart1.c: 220: eusart1RxCount++;
 17065  00342C  0100               	movlb	0	; () banked
 17066  00342E  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17067                           
 17068                           ; BSR set to: 0
 17069  003430  0012               	return		;funcret
 17070  003432                     __end_of_EUSART1_Receive_ISR:
 17071                           	opt stack 0
 17072                           tosu	equ	0xFFF
 17073                           tosh	equ	0xFFE
 17074                           tosl	equ	0xFFD
 17075                           pclatu	equ	0xFFB
 17076                           pclath	equ	0xFFA
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           intcon2	equ	0xFF1
 17085                           postinc0	equ	0xFEE
 17086                           fsr0h	equ	0xFEA
 17087                           fsr0l	equ	0xFE9
 17088                           wreg	equ	0xFE8
 17089                           indf1	equ	0xFE7
 17090                           postdec1	equ	0xFE5
 17091                           fsr1h	equ	0xFE2
 17092                           fsr1l	equ	0xFE1
 17093                           indf2	equ	0xFDF
 17094                           postinc2	equ	0xFDE
 17095                           postdec2	equ	0xFDD
 17096                           fsr2h	equ	0xFDA
 17097                           fsr2l	equ	0xFD9
 17098                           status	equ	0xFD8
 17099                           tosu	equ	0xFFF
 17100                           tosh	equ	0xFFE
 17101                           tosl	equ	0xFFD
 17102                           pclatu	equ	0xFFB
 17103                           pclath	equ	0xFFA
 17104                           tblptru	equ	0xFF8
 17105                           tblptrh	equ	0xFF7
 17106                           tblptrl	equ	0xFF6
 17107                           tablat	equ	0xFF5
 17108                           prodh	equ	0xFF4
 17109                           prodl	equ	0xFF3
 17110                           intcon	equ	0xFF2
 17111                           intcon2	equ	0xFF1
 17112                           postinc0	equ	0xFEE
 17113                           fsr0h	equ	0xFEA
 17114                           fsr0l	equ	0xFE9
 17115                           wreg	equ	0xFE8
 17116                           indf1	equ	0xFE7
 17117                           postdec1	equ	0xFE5
 17118                           fsr1h	equ	0xFE2
 17119                           fsr1l	equ	0xFE1
 17120                           indf2	equ	0xFDF
 17121                           postinc2	equ	0xFDE
 17122                           postdec2	equ	0xFDD
 17123                           fsr2h	equ	0xFDA
 17124                           fsr2l	equ	0xFD9
 17125                           status	equ	0xFD8
 17126                           
 17127                           	psect	text114
 17128  000000                     __ptext114:
 17129                           	opt stack 0
 17130                           tosu	equ	0xFFF
 17131                           tosh	equ	0xFFE
 17132                           tosl	equ	0xFFD
 17133                           pclatu	equ	0xFFB
 17134                           pclath	equ	0xFFA
 17135                           tblptru	equ	0xFF8
 17136                           tblptrh	equ	0xFF7
 17137                           tblptrl	equ	0xFF6
 17138                           tablat	equ	0xFF5
 17139                           prodh	equ	0xFF4
 17140                           prodl	equ	0xFF3
 17141                           intcon	equ	0xFF2
 17142                           intcon2	equ	0xFF1
 17143                           postinc0	equ	0xFEE
 17144                           fsr0h	equ	0xFEA
 17145                           fsr0l	equ	0xFE9
 17146                           wreg	equ	0xFE8
 17147                           indf1	equ	0xFE7
 17148                           postdec1	equ	0xFE5
 17149                           fsr1h	equ	0xFE2
 17150                           fsr1l	equ	0xFE1
 17151                           indf2	equ	0xFDF
 17152                           postinc2	equ	0xFDE
 17153                           postdec2	equ	0xFDD
 17154                           fsr2h	equ	0xFDA
 17155                           fsr2l	equ	0xFD9
 17156                           status	equ	0xFD8
 17157                           
 17158                           	psect	rparam
 17159  0000                     tosu	equ	0xFFF
 17160                           tosh	equ	0xFFE
 17161                           tosl	equ	0xFFD
 17162                           pclatu	equ	0xFFB
 17163                           pclath	equ	0xFFA
 17164                           tblptru	equ	0xFF8
 17165                           tblptrh	equ	0xFF7
 17166                           tblptrl	equ	0xFF6
 17167                           tablat	equ	0xFF5
 17168                           prodh	equ	0xFF4
 17169                           prodl	equ	0xFF3
 17170                           intcon	equ	0xFF2
 17171                           intcon2	equ	0xFF1
 17172                           postinc0	equ	0xFEE
 17173                           fsr0h	equ	0xFEA
 17174                           fsr0l	equ	0xFE9
 17175                           wreg	equ	0xFE8
 17176                           indf1	equ	0xFE7
 17177                           postdec1	equ	0xFE5
 17178                           fsr1h	equ	0xFE2
 17179                           fsr1l	equ	0xFE1
 17180                           indf2	equ	0xFDF
 17181                           postinc2	equ	0xFDE
 17182                           postdec2	equ	0xFDD
 17183                           fsr2h	equ	0xFDA
 17184                           fsr2l	equ	0xFD9
 17185                           status	equ	0xFD8
 17186                           
 17187                           	psect	temp
 17188  000048                     btemp:
 17189                           	opt stack 0
 17190  000048                     	ds	1
 17191  0000                     int$flags	set	btemp
 17192  0000                     wtemp6	set	btemp+1
 17193                           tosu	equ	0xFFF
 17194                           tosh	equ	0xFFE
 17195                           tosl	equ	0xFFD
 17196                           pclatu	equ	0xFFB
 17197                           pclath	equ	0xFFA
 17198                           tblptru	equ	0xFF8
 17199                           tblptrh	equ	0xFF7
 17200                           tblptrl	equ	0xFF6
 17201                           tablat	equ	0xFF5
 17202                           prodh	equ	0xFF4
 17203                           prodl	equ	0xFF3
 17204                           intcon	equ	0xFF2
 17205                           intcon2	equ	0xFF1
 17206                           postinc0	equ	0xFEE
 17207                           fsr0h	equ	0xFEA
 17208                           fsr0l	equ	0xFE9
 17209                           wreg	equ	0xFE8
 17210                           indf1	equ	0xFE7
 17211                           postdec1	equ	0xFE5
 17212                           fsr1h	equ	0xFE2
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           fsr2h	equ	0xFDA
 17218                           fsr2l	equ	0xFD9
 17219                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    168
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     96     160
    BANK1           256     10     204
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_send_bits->_SwSpi_Clk_Pin
    _SWSPI_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateTxFreq->_GetIntFromUartData
    _UpdateRxFreq->_GetIntFromUartData
    _GroupFlashMemory->_FlashReadUart
    _DacSetValue->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  296582
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  156921
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2089
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   36499
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   29239
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7228
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7228
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5276
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5276
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   27788
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   12928
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6250
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8548
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   18209
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          4     2      2   18082
                                             45 COMRAM     2     0      2
                                             21 BANK0      2     2      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  15    11      4    5012
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   19476
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6527
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   19833
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6611
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6549
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6459
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6459
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2089
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   13373
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    6916
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    6456
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    6456
                                             32 COMRAM     9     4      5
                    _SWSPI_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1055
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_send_bits                                      3     2      1    1501
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     487
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     667
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      A      CC       6       79.7%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     60      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       9        0.0%
DATA                 0      0     1B3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 04 16:57:29 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3672                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                         _GroupControlMcu 30CE               __end_of_keepAliveSignalUart 375C  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l50 2830                           _SWSPI_send_bits 2BDC  
                     __end_of_BlinkOkLeds 2A12                           _SWSPI_send_word 234C  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0081  
                             ?_MEMORY_ISR 0001                                       l112 1350  
                                     l200 0DC4                                       l113 1276  
                                     l210 3326                                       l202 0DFC  
                                     l211 3310                                       l108 33C8  
                                     l300 0860                                       l204 0E02  
                                     l310 094E                                       l302 0872  
                                     l311 0966                                       l313 09E4  
                                     l305 091A                                       l315 0A3A  
                                     l500 0A92                                       l316 0A50  
                                     l308 0932                                       l309 0A56  
                                     l502 0BA4                                       l182 0CAC  
                                     l191 0D0E                                       l183 0CD8  
                                     l600 2CA2                                       l601 2CAC  
                                     l193 0D2C                                       l290 08C2  
                                     l178 0E5C                                       l283 1A38  
                                     l291 0826                                       l195 0D32  
                                     l187 0CDE                                       l179 0C9E  
                                     l284 1A56                                       l620 2CE4  
                                     l621 2CEE                                       l293 0772  
                                     l197 0D9E                                       l189 0CF6  
                                     l630 2D02                                       l198 0D5A  
                                     l703 3612                                       l295 0782  
                                     l608 2CB6                                       l609 2CC0  
                                     l297 07EE                                       l298 08B0  
                                     l619 2D20                                       l571 2376  
                                     l637 2D0C                                       l629 2CF8  
                                     l638 2D16                                       l590 2CCA  
                                     l582 2C18                                       l574 23D4  
                                     l591 2C8E                                       l583 2BE4  
                                     l567 2368                                       l592 2C98  
                                     l584 2BFE                                       l656 3172  
                                     l824 2F10                                       l585 2C08  
                                     l657 314A                                       l578 23E2  
                                     l666 315E                                       l658 3154  
                                     l826 2F36                                       l667 3168  
                                     l677 31AE                                       l837 311E  
                                     l934 2154                                       l678 3186  
                                     l838 3142                                       l935 210C  
                                     l687 319A                                       l679 3190  
                                     l839 3140                                       l688 31A4  
                                     l937 212C                                       l945 3288  
                                     l938 212E                                       l698 3616  
                                     l699 360E                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                      readUartMessage@chRec 01CB  
                        PLLInitialize@idx 002C                                       _abs 3486  
                                     _cnt 00FD                                       _exp 0E92  
                                     _log 173A                                       _pow 15BE  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                     ??_SetAdcOperationMode 002E  
          ?_InitSystemApplicationManagers 0001                __end_of_FlashReadCondition 1968  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                                    l2010 10DC                                      l1203 2EE4  
                                    ?_abs 0018                                      l2012 1130  
                                    l1204 2EBE                                      l1212 35A4  
                                    l2021 116A                                      l1213 3596  
                                    l1206 2EC4                                      l1047 33EC  
                                    l1207 2ECA                                      l2104 34CE  
                                    l2032 36AC                                      l2024 117C  
                                    l2008 10C4                                      l2025 11E8  
                                    l2114 34F4                                      l2018 1140  
                                    l1162 30E6                                      l2131 1756  
                                    l1251 2E08                                      l2027 120C  
                                    l2019 1150                                      l1163 30D4  
                                    l2140 1F3E                                      l1252 2DEC  
                                    l2028 1248                                      l1332 323A  
                                    l1420 2996                                      l2133 1776  
                                    l2109 35C6                                      l1165 30DA  
                                    l1173 2BB8                                      l2070 0F1C  
                                    l1342 3020                                      l1166 30E0  
                                    l1174 2B8A                                      l2071 0F4C  
                                    l2119 35E4                                      l2072 1076  
                                    l1176 2B90                                      l1184 2E58  
                                    l1416 2964                                      l2081 1E74  
                                    l2073 104C                                      l1273 2B0C  
                                    l1337 26DA                                      l1193 2AAE  
                                    l1177 2B9E                                      l1185 2E2E  
                                    l1417 297C                                      l1514 275C  
                                    l2082 1EF0                                      l1274 2ACE  
                                    l1266 22E0                                      l1194 2A76  
                                    l1178 2BA4                                      l2139 1FBC  
                                    l1515 2750                                      l2091 1FEE  
                                    l2067 0EAC                                      l1347 24B4  
                                    l1179 2BB2                                      l1187 2E3C  
                                    l1419 29A2                                      l1276 2AD2  
                                    l1196 2A84                                      l1188 2E4A  
                                    l1701 154C                                      l2093 2034  
                                    l2069 0EE4                                      l1277 2AD6  
                                    l1437 2C44                                      l1197 2A92  
                                    l1710 1CA2                                      l1702 1568  
                                    l2078 1E5A                                      l1278 2ADA  
                                    l1438 2C58                                      l1358 1D72  
                                    l1198 2AA0                                      l1711 1CE0  
                                    l1703 1598                                      l2087 2530  
                                    l2079 1E4C                                      l2095 2062  
                                    l1279 2B08                                      l1712 1D06  
                                    l2096 2056                                      l1801 2B3A  
                                    l1625 31D2                                      l1650 2288  
                                    l1802 2B2E                                      l1730 1C16  
                                    l1651 227E                                      l1723 1B84  
                                    l1475 34A4                                      l1644 222C  
                                    l1708 1C7A                                      l1740 3062  
                                    l1716 25C8                                      l1645 2222  
                                    l1725 1BAC                                      l1717 25F8  
                                    l1734 355E                                      l1726 1BDE  
                                    l1647 2260                                      l1727 1BEE  
                                    l1648 224A                                      l1752 1B2C  
                                    l1744 1A90                                      l1729 1C06  
                                    l1753 1B20                                      l1690 14E0  
                                    l1746 1B08                                      l1675 1464  
                                    l1755 1B48                                      l1747 1AF8  
                                    l1684 14F4                                      l1780 2656  
                                    l1781 264A                                      l1870 15F8  
                                    l1790 290A                                      l1679 148E  
                                    l1791 28FE                                      l1872 1620  
                                    l1784 268A                                      l1689 14EA  
                                    l1873 16A6                                      l1857 344C  
                                    l1785 2698                                      l1698 1528  
                                    l4354 2624                                      l1874 1684  
                                    l1858 343C                                      l1794 2932  
                                    l1699 151E                                      l1875 172C  
                                    l1795 2940                                      l1869 1608  
                                    l6400 310C                                      l7150 2820  
                                    l7164 2876                                      ?_exp 0097  
                                    ?_log 008E                                      l6456 343C  
                                    l7408 24A4                                      l7440 1D62  
                                    l7424 3010                                      l7274 0932  
                                    l7418 24DC                                      l7434 303E  
                                    l7452 1DEE                                      l7198 2104  
                                    l5934 2A1C                                      l7278 0956  
                                    l7528 104C                                      l7288 09B6  
                                    l7368 26D2                                      l7384 3232  
                                    l5946 29BE                                      l7650 0B94  
                                    l7634 0A82                                      l6940 2382  
                                    l7660 0BEC                                      l7644 0ADA  
                                    l7744 126E                                      l6944 2390  
                                    l6966 22D0                                      l6984 231E  
                                    ?_pow 00A0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u6000 34C0                                      u5130 3664  
                                    u4270 200E                                      u7000 2132  
                                    u6105 3296                                      u6106 3298  
                                    u5148 3666                                      u6220 1106  
                                    u3821 1A74                                      u3910 2558  
                                    u4278 2012                                      u7015 2150  
                                    u7016 2152                                      u3840 1AAE  
                                    u6080 2B00                                      u6240 1116  
                                    u7200 09D4                                      u7105 07F8  
                                    u6410 1480                                      u7050 071E  
                                    u7060 0720                                      u7300 24DC  
                                    u6341 1422                                      u3845 1AA6  
                                    u6085 2AF6                                      u7125 0884  
                                    u6510 1530                                      u3918 255A  
                                    u6190 10CC                                      u6351 1436  
                                    u8007 29FE                                      u6440 14BE  
                                    u3880 1B32                                      u7160 0908  
                                    u7320 303E                                      u8017 2A42  
                                    u6610 3728                                      u7410 0F26  
                                    u6611 3724                                      u8027 2A5C  
                                    u6380 1456                                      u7420 0F28  
                                    u7500 166E                                      u6700 23C8  
                                    u7260 2700                                      u7340 1DEE  
                                    u8037 133C                                      u7190 09B6  
                                    u6551 1B6C                                      u6480 14FC  
                                    u7280 3258                                      u7530 19C4  
                                    u5930 2292                                      u6650 235C  
                                    u7610 0ADA                                      u6571 1B94  
                                    u6740 231E                                      u7525 1972  
                                    u7550 1A08                                      u6910 1E66  
                                    u7630 0BEC                                      u7800 2200  
                                    u6680 23BC                                      u6840 265A  
                                    u6761 1C62                                      u5890 2214  
                                    u6755 33A0                                      u6756 33A2  
                                    u5980 34F0                                      u6781 1C8A  
                                    u6870 290E                                      u6950 2876  
                                    u7957 2838                                      u7798 0E34  
                                    u7967 2848                                      u7799 0E54  
                                    u7977 2858                                      u7987 2868  
                                    u7997 29E4                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 310A  
                                    abs@a 0018                                      _crc8 2DDA  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CD  
                                    _main 2952                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 378E                           __end_of_DacInit 28EC  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 36F4                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003C                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2A12                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 3370            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 3710                                     ?_crc8 0018  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 15BE           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                         __end_of___ftdiv 1D38                           __end_of___ftneg 356C  
                         __end_of___lldiv 26AA                                _EepromRead 3768  
                         __end_of___ftmul 1C50                                     _T0CON 000FD5  
                         __end_of___llmod 2952                           __end_of___ftsub 308C  
                         __end_of___fttol 1B5A                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 30CE                                     i2l850 342C  
                                   i2l843 3222                                     i2l844 321E  
                                   i2l772 005E                                     i2l781 0090  
                                   i2l774 006A                                     i2l849 340C  
                                   i2l777 007A                                     i2l779 0086  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _PORTD 000F83                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 234C  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 31F6  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 2478                             __CFG_WRTB$OFF 000000  
                __size_of_SetMcuFwVersion 0036                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 002E  
                         _DATAEE_ReadByte 3688                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 3796  
                                   crc8@i 001F                                     _make8 2ACC  
                   __end_of_GetMcuRunTime 1E1C                                     _count 00C8  
                                   _floor 1E1C                                     _ldexp 1FD4  
                                   _frexp 2508                                     _errno 00C4  
                         __end_of_isalpha 34D6                           __end_of_isdigit 35CE  
                                   _group 00D0                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 34FC  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                         __end_of_isupper 35EC                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AD  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 36B0            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                 __end_of_GroupControlMcu 310A                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000        __size_of_SetConversionResultFormat 000C  
                             exp@exponent 009D            CheckFlashPrecentage@precentage 007C  
                  __end_of_BlinkErrorLeds 2A70                   __end_of_SWSPI_send_bits 2C34  
                             ldexp@newexp 0091                   __end_of_SWSPI_send_word 23E6  
                             _BlinkOkLeds 29B4                   WriteUartMessage@dataBuf 0019  
                         __initialization 27A6                               log@exponent 0091  
                            __end_of_crc8 2E28                __end_of_EUSART1_Initialize 3306  
                            __end_of_main 29B4                   FLASH_ReadByte@flashAddr 0018  
             ?_INTERRUPT_InterruptManager 0001                          __end_of_GroupDAC 35B0  
                         _readUartMessage 0C96                          __end_of_GroupAdc 2E70  
                                  ??_crc8 001C                                    ??_main 0031  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D4                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 3702  
                     SetMcuFwVersion@data 002C                    SWSPI_send_bits@phrType 001C  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 3792  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 008F                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 008E                                    ?_frexp 0018  
                        __end_of___altoft 27A6                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002A  
                                  _EECON2 000FA7                          __end_of___awtoft 31F6  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 22B2  
                        __end_of___lltoft 2B84                         _FlashReadUart$565 00B1  
                       _FlashReadUart$566 00B5                                    i2l1003 2416  
                       ?_FlashSampleWrite 002D                                    i2l1004 2438  
                                  i2l1005 245A                            __CFG_WDTEN$OFF 000000  
                                  i2l1843 30A2                                    i2l1844 309A  
                                  i2l1847 30BA                                    i2l1848 30C4  
                                  _TABLAT 000FF5                               _EepromWrite 36E6  
                                  _RCREG1 000FAE                          __end_of___lwtoft 3590  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 360A                   __size_of_SwSpi_Data_Pin 0056  
                GroupSynthesizers@request 00BF                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                __end_of_GroupFlashMemory 2EFC                           ?_BlinkErrorLeds 0001  
                        _GetCpldFwVersion 2478                            __CFG_XINST$OFF 000000  
                       ?_SetCpldFwVersion 002C                                    _cState 00D1  
                                  ___ftge 2598                                    ___lmul 2C34  
                                  ___wmul 3522                       UpdateRxFreq@regData 0075  
                               ??___ftadd 007E                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                       ?_InitSevenSegment 0001                                 ??___lldiv 0020  
                               ??___ftmul 006F                     __end_of_PLLInitialize 0C96  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                        ??_SetCpldFwVersion 002E  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                      __size_of_ResetCpld 000C                          ?_TMR0_Initialize 0001  
                                  _memset 3432                                    clear_0 27EC  
                                  clear_1 27F8                                    clear_2 2804  
                      ??_InitSevenSegment 0018                       __size_of_AdcConvert 01B6  
                 __end_of_DATAEE_ReadByte 369C                               ?_EepromRead 0001  
                                  _strtol 1084                                    floor@i 0092  
                   __end_of_SwSpi_Clk_Pin 2D36                                    floor@x 008F  
                   ___ftmul@f3_as_product 0073                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A6C  
                        __end_of_testLeds 2882                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 26AA                          __end_ofexp@coeff 068E  
                       _SYSTEM_Initialize 3626                          __end_oflog@coeff 06A9  
                              __accesstop 0060                   __end_of__initialization 280A  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                          ?_SWSPI_send_bits 001A  
                 __end_of_readUartMessage 0E92                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0021                              ?_DacSetValue 002E  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                            __pcstackCOMRAM 0001  
                            __pidataBANK0 36D6                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2B28                          _DATAEE_WriteByte 3264  
                           __end_of_floor 1EFE                             __end_of_ldexp 209A  
                           __end_of_frexp 2598                    _SwSpi_Set_Synth_Le_Pin 3182  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2F40                              ??_MEMORY_ISR 0001  
                    SWSPI_send_bits@count 001B                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 01C4                        _keepAliveSignalLed 365A  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 3432  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 3640  
                         _AdcConvert$3267 00B7                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 3738                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0669                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 000E                __end_of_SendSystemStartAck 3768  
           __end_of_InitAdcApplicationMgr 371E                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 379A                                 ?_ResetMcu 0001  
                      _FlashReadCondition 185C           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 3786  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 360A                                 ?___altoft 0087  
                                 ?_memset 0018                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 3750                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 36C4                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 2204                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 272C                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 2882  
                   GetIntFromUartData@idx 0073                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B1                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2D36                          _FLASH_EraseBlock 3370  
          __size_of_GroupStatusAndVersion 0058                            _SwSpi_Data_Pin 2C8A  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2BDC  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 2F40                        _GetIntFromUartData 22B2  
                         __CFG_PWRTEN$OFF 000000                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                        UpdateRxFreq@data 002E                     SendAckMessage@inGroup 0025  
                        ?_readUartMessage 0001                    GroupControlMcu@request 00BF  
                               ?_testLeds 0001                      PLLInitialize@idx_812 002E  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 1410  
                                 ___ftdiv 1C50                                   ___ftneg 3548  
                                 ___lldiv 2628                           __size_of___wmul 0026  
                                 ___ftmul 1B5A                                   ___llmod 28EC  
                                 ___ftsub 304A                                   ___fttol 1A62  
              FlashSampleWrite@rotateLeft 0062                              crc8@dataSize 001A  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 308C  
                    AdcConvert@_adcResult 00B3                              __psmallconst 0600  
                              ??___altoft 008B                    __end_of_FLASH_ReadByte 36D6  
                   _mcuRunTimeIn5SecTicks 00C0                                   _crcCalc 00CC  
                                 _channel 00D3                                   __pcinit 27A6  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 1FD4                           __size_of_memset 002C  
                                 __ramtop 0600                   __size_of_SendAckMessage 0052  
                              ??___lltoft 0024                   __size_of_SetChannelMode 0030  
                                 __ptext0 2952                                   __ptext1 0C96  
                                 __ptext2 345E                                   __ptext3 3590  
                                 __ptext4 2EB8                                   __ptext5 2E28  
                                 __ptext6 2B84                                   __ptext7 30CE  
                                 __ptext8 2A70                                   __ptext9 2F84  
                                 crc8@crc 001D                        __end_of_AdcConvert 1410  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                       BlinkErrorLeds@idx 001C                           __size_of_strtol 01D6  
                   _OSCILLATOR_Initialize 3702                              __size_of_abs 0028  
                                 _isalpha 34AE                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 35B0  
                            __size_of_pow 017C                        _EUSART1_Initialize 32D0  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 34D6  
                __end_of_GetCpldFwVersion 2508                                   _isupper 35CE  
                        UpdateTxFreq@data 002E                                   _request 00CF  
                         GroupDAC@request 00BF                      ??_GetIntFromUartData 002E  
                  __end_of_FlashEreaseMem 2D88                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2CE0  
                                 _toupper 369C                      end_of_initialization 280A  
                     GetCpldFwVersion@idx 002F                             ?_UpdateRxFreq 002E  
                                 exp@sign 009F                             ?_UpdateTxFreq 002E  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                       SetCpldFwVersion@idx 002E  
              __end_of_TEST_PLL_REGISTERS 0635                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 0000                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 377C                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BA                                ??_testLeds 002C  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 00D7  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                __end_of_PLL_INIT_REGISTERS 0669  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 345E  
                             testLeds@idx 002D                      __size_of_DacSetValue 0036  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                     UpdateTxFreq@regData 0075                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 365A    __size_of_InitSystemApplicationManagers 001A  
           _InitSystemApplicationManagers 3640                           ?_FLASH_ReadByte 0018  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 377C  
                            ??_EepromRead 0019                           _SetMcuFwVersion 322E  
                        ?_GetMcuFwVersion 0001                 __size_of_SetCpldFwVersion 0042  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 3626  
                            strtol@endptr 0026             FLASH_WriteBlock@flashWrBufPtr 0021  
               __size_of_InitSevenSegment 0026                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                          ??_UpdateRxFreq 0030                            ??_UpdateTxFreq 0030  
                __end_of_DATAEE_WriteByte 329A                  FLASH_EraseBlock@baseAddr 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2EFC  
                    _CheckFlashPrecentage 2156                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 3772                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 378E  
                          __end_of___ftge 2628              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2C8A                            __end_of___wmul 3548  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 3786  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 3672  
                        _FLASH_WriteBlock 209A                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 345E                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 125A  
                     start_initialization 27A6                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 008E           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 34AE                     ??_InitRxMessageParams 0024  
                             __end_of_exp 1084                               __end_of_log 185C  
                             __end_of_pow 173A                  AdcConvert@_adcResult_332 00B5  
                           _GetMcuRunTime 1D38                           ??_SetMcuRunTime 0021  
                   __end_of_EUSART1_Write 3146                        GetMcuFwVersion@idx 002F  
                      SetMcuFwVersion@idx 002E                    __size_of_PLLInitialize 022A  
                              frexp@value 0018                           ___llmod@divisor 001C  
                   ?_CheckFlashPrecentage 0001                           ___llmod@counter 0020  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                               _ResetCpld 372C                    __size_of_SwSpi_Clk_Pin 0056  
                     SendAckMessage@TxMsg 0026            __end_of_SwSpi_Set_Synth_Le_Pin 31BE  
                     _keepAliveSignalUart 3750                         __size_of_GroupDAC 0020  
                        _WriteUartMessage 3306                         __size_of_GroupAdc 0048  
                  __size_of_FlashReadUart 03C2                                  ??___ftge 001E  
                                ??___lmul 0020                   SendAckMessage@inRequest 0024  
                                ??___wmul 001C                         __size_of_ResetMcu 000E  
                    __size_of_BlinkOkLeds 005E                   SetAdcOperationMode@data 002C  
                  __end_of_ADC_Initialize 3688         __end_of_SetConversionResultFormat 3744  
                             __pdataBANK0 00EB                   __end_of_SetMcuFwVersion 3264  
                                ??_memset 001E                  __size_of_GroupControlMcu 003C  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 2D88  
                          _SetChannelMode 33A4                  __end_of_FLASH_EraseBlock 33A4  
                __size_of_SWSPI_send_bits 0058                        _SendSystemStartAck 375C  
                __size_of_SWSPI_send_word 009A                                  ??_strtol 002A  
                          _eusart1RxCount 00D2                         __size_of___altoft 007A  
                               _ZeroArray 35EC                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                      ?_keepAliveSignalUart 0001  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 01C2  
                     ?_SendSystemStartAck 0001                              _isalpha$2974 001C  
                          ?_GetMcuRunTime 0001                              _isdigit$2977 0019  
                          BlinkOkLeds@idx 001C                                  ?_DacInit 0001  
                     SWSPI_send_bits@data 001A                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 3146              __size_of_EUSART1_Receive_ISR 002E  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FB  
                               __pnvBANK0 00FB                  __size_of_TMR0_StartTimer 0004  
                              ?_ResetCpld 0001                    _PIN_MANAGER_Initialize 2E70  
                    ??_SendSystemStartAck 002C                     _InitAdcApplicationMgr 3710  
                               __pintcode 0008                    __end_of_SendAckMessage 2DDA  
                               __ptext100 356C                                 __ptext101 2204  
                               __ptext110 3792                                 __ptext102 1968  
                               __ptext111 3796                                 __ptext103 209A  
                               __ptext112 31F6                                 __ptext104 3370  
                               __ptext113 3404                                 __ptext105 371E  
                               __ptext114 0000                                 __ptext106 33D4  
                               __ptext108 23E6                                 __ptext109 308C  
                                ?___ftadd 0078                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 33D4                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 1968  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 3008                         __size_of_testLeds 006A  
                           _PLLInitialize 0A6C             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 2FC6               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2CE0                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1EFE  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D6  
                                ?_isspace 0001                          _SetCpldFwVersion 3008  
                            _SetMcuSystem 3772                                  ?_isupper 0001  
                           _FlashReadUart 06AA                         _PLLUartInitialize 379A  
                       ?_GetCpldFwVersion 0001                          _InitSevenSegment 34FC  
            __size_of_SetAdcOperationMode 000C                            __size_of_make8 005C  
                          __size_of_floor 00E2                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                        ?_PLLUartInitialize 0018  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                        _conversionFormat 003D                        ??_GetCpldFwVersion 0024  
                    _INTERRUPT_Initialize 378A            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 010C                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                     ??_PLLUartInitialize 001A            FlashReadUart@numOfSampleToRead 002C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 2B84                         _GroupSynthesizers 2A70  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                _PIR1bits 000F9E                          ??_FLASH_ReadByte 001C  
                                i2u507_40 30A6                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                       SWSPI_send_word@data 0021  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 23E6                           ?_SendAckMessage 0024  
                         ?_SetChannelMode 002C                        _TEST_PLL_REGISTERS 0601  
                          ?_PLLInitialize 0001                         ??_PIN_MANAGER_IOC 0001  
                        ?_SetMcuFwVersion 002C                       ??_GroupSynthesizers 0031  
                  GetIntFromUartData@data 0066                   SWSPI_send_word@dataSize 0025  
                              _ADCON0bits 000FC2                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                        ??_FlashEreaseMem 002C                 __end_of_PLLUartInitialize 379C  
                      __end_of_channelArr 0670                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0031  
                      _PLL_INIT_REGISTERS 0635                           ??_GetMcuRunTime 0025  
                   DATAEE_WriteByte@bData 0018                         ??_SWSPI_send_bits 001B  
                            _isspace$2980 0019                         ??_SWSPI_send_word 0026  
                   GetCpldFwVersion@TxMsg 0026               __size_of_GetIntFromUartData 009A  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 27BA  
                               copy_data1 27DA                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2ACC                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 2156                                  _GroupDAC 3590  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2E28  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 36F4  
                           ??_DacSetValue 0030                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 33D4  
                     FlashReadUart@offset 00BD                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 36B0                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 272C  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 31BE  
                           crc8@dataArray 0018                                  ___ftpack 2204  
                        _numOfReadSamples 003E                                  ___lltoft 2B28  
                       _FLASH_IsWriteDone 371E                       WriteUartMessage@idx 001E  
                                ___lwtoft 356C                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3270 009A                              _isupper$2983 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 333C  
                        __size_of_isalpha 0028                                  _crcGiven 00CB  
                        __size_of_isdigit 001E                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                        DacSetValue@regData 0075  
                                __ptext10 2FC6                                  __ptext11 379A  
                                __ptext20 3768                                  __ptext12 322E  
                                __ptext21 3688                                  __ptext13 3008  
                                __ptext30 369C                                  __ptext22 06AA  
                                __ptext14 36E6                                  __ptext31 34D6  
                                __ptext23 3486                                  __ptext15 3264  
                                __ptext40 33A4                                  __ptext32 35B0  
                                __ptext24 36C4                                  __ptext16 1D38  
                                __ptext41 3744                                  __ptext33 34AE  
                                __ptext25 185C                                  __ptext17 2628  
                                __ptext50 3702                                  __ptext42 2EFC  
                                __ptext34 35CE                                  __ptext26 2D36  
                                __ptext18 26AA                                  __ptext51 378A  
                                __ptext43 3750                                  __ptext35 2C34  
                                __ptext27 329A                                  __ptext19 2478  
                                __ptext60 3432                                  __ptext52 32D0  
                                __ptext44 365A                                  __ptext36 2818  
                                __ptext28 22B2                                  __ptext61 3306  
                                __ptext53 3672                                  __ptext45 3772  
                                __ptext37 36F4                                  __ptext29 1084  
                                __ptext70 234C                                  __ptext62 310A  
                                __ptext54 2F40                                  __ptext46 3626  
                                __ptext38 372C                                  __ptext71 2ACC  
                                __ptext63 3640                                  __ptext55 28EC  
                                __ptext47 333C                                  __ptext39 3738  
                                __ptext80 2A12                                  __ptext72 3182  
                                __ptext64 378E                                  __ptext56 375C  
                                __ptext48 377C                                  __ptext81 125A  
                                __ptext73 360A                                  __ptext65 0A6C  
                                __ptext57 2D88                                  __ptext49 2E70  
                                __ptext90 272C                                  __ptext82 15BE  
                                __ptext74 2BDC                                  __ptext66 3146  
                                __ptext58 2DDA                                  __ptext91 1EFE  
                                __ptext83 173A                                  __ptext75 2C8A  
                                __ptext67 34FC                                  __ptext59 35EC  
                                __ptext92 3522                                  __ptext84 0E92  
                                __ptext76 2CE0                                  __ptext68 3710  
                                __ptext93 1B5A                                  __ptext85 1FD4  
                                __ptext77 36B0                                  __ptext69 2882  
                                __ptext94 304A                                  __ptext86 1E1C  
                                __ptext78 2156                                  __ptext95 1410  
                                __ptext87 2508                                  __ptext79 29B4  
                                __ptext96 3548                                  __ptext88 1A62  
                                __ptext97 1C50                                  __ptext89 2598  
                                __ptext98 31BE                                  __ptext99 2B28  
                        __size_of_isupper 001E                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3268 00A6                                  _pow$3269 00A9  
                     ??_FLASH_IsWriteDone 0018                       GetIntFromUartData@c 0072  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0082                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 01C2  
                                _msgCount 00CA              _TMR0_DefaultInterruptHandler 000000  
                       ??_DATAEE_ReadByte 0018                 __end_of_ADC_GetConversion 3404  
                   __size_of_UpdateRxFreq 0042                     __size_of_UpdateTxFreq 0042  
                      SWSPI_send_word@idx 0027                               _groupsArray 00EB  
                         ??_PLLInitialize 002A                                  _testLeds 2818  
                 __size_of_BlinkErrorLeds 005E                                  int$flags 0048  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 372C        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           EepromWrite@data 001B  
                         ??_SwSpi_Clk_Pin 0019                       __end_of_DacSetValue 32D0  
                     _EUSART1_Receive_ISR 3404                  __end_of_SwSpi_Set_CE_Pin 3182  
                       ?_FLASH_EraseBlock 0018               __end_of_InitRxMessageParams 3486  
                                exp@coeff 0670                                _MEMORY_ISR 3796  
                         ??_FlashReadUart 0060                                  log@coeff 068E  
              __size_of_PLLUartInitialize 0002                    SWSPI_send_word@phrType 0029  
                    SetCpldFwVersion@data 002C                        ??_FLASH_EraseBlock 001C  
                              _INTCONbits 000FF2                               ??_eval_poly 002F  
                             _sampleArray 016E                               _sampleCount 00C6  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                       ??_readUartMessage 01C5                 _SetConversionResultFormat 3738  
                __end_of_FlashSampleWrite 1A62                                  intlevel2 0000  
                            _UpdateRxFreq 2FC6                              _UpdateTxFreq 2F84  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 2F84  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 005C  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 36C4  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 322E                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                  __end_of_SetCpldFwVersion 304A  
                       _TimerSamplingFlag 00D5                             AdcConvert@idx 00BC  
                __end_of_InitSevenSegment 3522                       _SetAdcOperationMode 3744  
                           _isReWriteDone 003B                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 2EB8                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 333C                           ___lwmod@counter 0005  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                             ??_EepromWrite 001C  
                              _AdcConvert 125A                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 2EB8              GetIntFromUartData@dataRegArr 006A  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 3792  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                 __size_of_GetCpldFwVersion 0090  
                             _DacSetValue 329A  
