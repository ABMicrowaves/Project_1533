

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 12:12:28 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   110                           	psect	text85,global,reloc=2,class=CODE,delta=1
   111                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   112                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   113  0000                     
   114                           ; Version 1.45
   115                           ; Generated 16/11/2017 GMT
   116                           ; 
   117                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   118                           ; All rights reserved.
   119                           ; 
   120                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   121                           ; 
   122                           ; Redistribution and use in source and binary forms, with or without modification, are
   123                           ; permitted provided that the following conditions are met:
   124                           ; 
   125                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   126                           ;        conditions and the following disclaimer.
   127                           ; 
   128                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   129                           ;        of conditions and the following disclaimer in the documentation and/or other
   130                           ;        materials provided with the distribution.
   131                           ; 
   132                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   133                           ;        software without specific prior written permission.
   134                           ; 
   135                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   136                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   137                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   138                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   139                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   140                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   141                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   142                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   143                           ; 
   144                           ; 
   145                           ; Code-generator required, PIC18F45K22 Definitions
   146                           ; 
   147                           ; SFR Addresses
   148  0000                     
   149 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   150  0000                     
   151                           	psect	idataCOMRAM
   152  002CFC                     __pidataCOMRAM:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _writeAddress
   156  002CFC  4000               	dw	16384
   157  002CFE  0000               	dw	0
   158                           
   159                           	psect	idataBANK0
   160  002D00                     __pidataBANK0:
   161                           	opt stack 0
   162                           
   163                           ;initializer for _readAddress
   164  002D00  4000               	dw	16384
   165  002D02  0000               	dw	0
   166                           
   167                           	psect	idataBANK1
   168  002CD6                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for _groupsArray
   172  002CD6  E2                 	db	low _GroupRx
   173  002CD7  26                 	db	high _GroupRx
   174  002CD8  E8                 	db	low _GroupTx
   175  002CD9  23                 	db	high _GroupTx
   176  002CDA  84                 	db	low _GroupCommon
   177  002CDB  2B                 	db	high _GroupCommon
   178  002CDC  00                 	db	0
   179  002CDD  00                 	db	0
   180  002CDE  00                 	db	0
   181  002CDF  00                 	db	0
   182  002CE0  00                 	db	0
   183  002CE1  00                 	db	0
   184                           
   185                           	psect	mediumconst
   186  007A80                     __pmediumconst:
   187                           	opt stack 0
   188  007A80  00                 	db	0
   189  007A81                     _PLL_INIT_REGISTERS:
   190                           	opt stack 0
   191  007A81  041C               	dw	1052
   192  007A83  0001               	dw	1
   193  007A85  300B               	dw	12299
   194  007A87  0061               	dw	97
   195  007A89  323A               	dw	12858
   196  007A8B  00C0               	dw	192
   197  007A8D  BCC9               	dw	48329
   198  007A8F  2221               	dw	8737
   199  007A91  0428               	dw	1064
   200  007A93  102D               	dw	4141
   201  007A95  00E7               	dw	231
   202  007A97  1200               	dw	4608
   203  007A99  2076               	dw	8310
   204  007A9B  3501               	dw	13569
   205  007A9D  0025               	dw	37
   206  007A9F  0080               	dw	128
   207  007AA1  9B84               	dw	39812
   208  007AA3  3400               	dw	13312
   209  007AA5  0003               	dw	3
   210  007AA7  0000               	dw	0
   211  007AA9  0012               	dw	18
   212  007AAB  0000               	dw	0
   213  007AAD  0001               	dw	1
   214  007AAF  0600               	dw	1536
   215  007AB1  0340               	dw	832
   216  007AB3  0020               	dw	32
   217  007AB5                     __end_of_PLL_INIT_REGISTERS:
   218                           	opt stack 0
   219  007AB5                     _dpowers:
   220                           	opt stack 0
   221  007AB5  0001               	dw	1
   222  007AB7  000A               	dw	10
   223  007AB9  0064               	dw	100
   224  007ABB  03E8               	dw	1000
   225  007ABD  2710               	dw	10000
   226  007ABF                     __end_of_dpowers:
   227                           	opt stack 0
   228  007ABF                     _channelArr:
   229                           	opt stack 0
   230  007ABF  04                 	db	4
   231  007AC0  05                 	db	5
   232  007AC1  06                 	db	6
   233  007AC2  07                 	db	7
   234  007AC3                     __end_of_channelArr:
   235                           	opt stack 0
   236  007AC3                     exp@coeff:
   237                           	opt stack 0
   238  007AC3  00                 	db	0
   239  007AC4  80                 	db	128
   240  007AC5  3F                 	db	63
   241  007AC6  72                 	db	114
   242  007AC7  31                 	db	49
   243  007AC8  3F                 	db	63
   244  007AC9  FE                 	db	254
   245  007ACA  75                 	db	117
   246  007ACB  3E                 	db	62
   247  007ACC  58                 	db	88
   248  007ACD  63                 	db	99
   249  007ACE  3D                 	db	61
   250  007ACF  95                 	db	149
   251  007AD0  1D                 	db	29
   252  007AD1  3C                 	db	60
   253  007AD2  C5                 	db	197
   254  007AD3  AE                 	db	174
   255  007AD4  3A                 	db	58
   256  007AD5  79                 	db	121
   257  007AD6  21                 	db	33
   258  007AD7  39                 	db	57
   259  007AD8  94                 	db	148
   260  007AD9  80                 	db	128
   261  007ADA  37                 	db	55
   262  007ADB  93                 	db	147
   263  007ADC  A7                 	db	167
   264  007ADD  35                 	db	53
   265  007ADE  56                 	db	86
   266  007ADF  15                 	db	21
   267  007AE0  34                 	db	52
   268  007AE1                     __end_ofexp@coeff:
   269                           	opt stack 0
   270  007AE1                     log@coeff:
   271                           	opt stack 0
   272  007AE1  00                 	db	0
   273  007AE2  00                 	db	0
   274  007AE3  00                 	db	0
   275  007AE4  00                 	db	0
   276  007AE5  80                 	db	128
   277  007AE6  3F                 	db	63
   278  007AE7  F0                 	db	240
   279  007AE8  FF                 	db	255
   280  007AE9  BE                 	db	190
   281  007AEA  E2                 	db	226
   282  007AEB  A9                 	db	169
   283  007AEC  3E                 	db	62
   284  007AED  83                 	db	131
   285  007AEE  76                 	db	118
   286  007AEF  BE                 	db	190
   287  007AF0  AE                 	db	174
   288  007AF1  2B                 	db	43
   289  007AF2  3E                 	db	62
   290  007AF3  3C                 	db	60
   291  007AF4  C3                 	db	195
   292  007AF5  BD                 	db	189
   293  007AF6  D2                 	db	210
   294  007AF7  13                 	db	19
   295  007AF8  3D                 	db	61
   296  007AF9  78                 	db	120
   297  007AFA  D3                 	db	211
   298  007AFB  BB                 	db	187
   299  007AFC                     __end_oflog@coeff:
   300                           	opt stack 0
   301  007AFC                     STR_33:
   302                           
   303                           ; BSR set to: 0
   304  007AFC  24                 	db	36
   305  007AFD  52                 	db	82	;'R'
   306  007AFE  43                 	db	67	;'C'
   307  007AFF  50                 	db	80	;'P'
   308  007B00  20                 	db	32
   309  007B01  3C                 	db	60	;'<'
   310  007B02  58                 	db	88	;'X'
   311  007B03  3E                 	db	62	;'>'
   312  007B04  3C                 	db	60	;'<'
   313  007B05  63                 	db	99	;'c'
   314  007B06  72                 	db	114	;'r'
   315  007B07  3E                 	db	62	;'>'
   316  007B08  20                 	db	32
   317  007B09  20                 	db	32
   318  007B0A  20                 	db	32
   319  007B0B  20                 	db	32
   320  007B0C  20                 	db	32
   321  007B0D  53                 	db	83	;'S'
   322  007B0E  65                 	db	101	;'e'
   323  007B0F  74                 	db	116	;'t'
   324  007B10  20                 	db	32
   325  007B11  43                 	db	67	;'C'
   326  007B12  6F                 	db	111	;'o'
   327  007B13  6D                 	db	109	;'m'
   328  007B14  70                 	db	112	;'p'
   329  007B15  72                 	db	114	;'r'
   330  007B16  65                 	db	101	;'e'
   331  007B17  73                 	db	115	;'s'
   332  007B18  73                 	db	115	;'s'
   333  007B19  69                 	db	105	;'i'
   334  007B1A  6F                 	db	111	;'o'
   335  007B1B  6E                 	db	110	;'n'
   336  007B1C  20                 	db	32
   337  007B1D  6F                 	db	111	;'o'
   338  007B1E  70                 	db	112	;'p'
   339  007B1F  65                 	db	101	;'e'
   340  007B20  72                 	db	114	;'r'
   341  007B21  61                 	db	97	;'a'
   342  007B22  74                 	db	116	;'t'
   343  007B23  69                 	db	105	;'i'
   344  007B24  6F                 	db	111	;'o'
   345  007B25  6E                 	db	110	;'n'
   346  007B26  20                 	db	32
   347  007B27  6D                 	db	109	;'m'
   348  007B28  6F                 	db	111	;'o'
   349  007B29  64                 	db	100	;'d'
   350  007B2A  65                 	db	101	;'e'
   351  007B2B  20                 	db	32
   352  007B2C  61                 	db	97	;'a'
   353  007B2D  74                 	db	116	;'t'
   354  007B2E  20                 	db	32
   355  007B2F  52                 	db	82	;'R'
   356  007B30  58                 	db	88	;'X'
   357  007B31  20                 	db	32
   358  007B32  73                 	db	115	;'s'
   359  007B33  79                 	db	121	;'y'
   360  007B34  73                 	db	115	;'s'
   361  007B35  74                 	db	116	;'t'
   362  007B36  65                 	db	101	;'e'
   363  007B37  6D                 	db	109	;'m'
   364  007B38  3A                 	db	58	;':'
   365  007B39  20                 	db	32
   366  007B3A  41                 	db	65	;'A'
   367  007B3B  75                 	db	117	;'u'
   368  007B3C  74                 	db	116	;'t'
   369  007B3D  6F                 	db	111	;'o'
   370  007B3E  6D                 	db	109	;'m'
   371  007B3F  61                 	db	97	;'a'
   372  007B40  74                 	db	116	;'t'
   373  007B41  69                 	db	105	;'i'
   374  007B42  63                 	db	99	;'c'
   375  007B43  5B                 	db	91	;'['
   376  007B44  31                 	db	49	;'1'
   377  007B45  5D                 	db	93	;']'
   378  007B46  20                 	db	32
   379  007B47  4D                 	db	77	;'M'
   380  007B48  61                 	db	97	;'a'
   381  007B49  6E                 	db	110	;'n'
   382  007B4A  75                 	db	117	;'u'
   383  007B4B  61                 	db	97	;'a'
   384  007B4C  6C                 	db	108	;'l'
   385  007B4D  5B                 	db	91	;'['
   386  007B4E  30                 	db	48	;'0'
   387  007B4F  5D                 	db	93	;']'
   388  007B50  20                 	db	32
   389  007B51  5B                 	db	91	;'['
   390  007B52  44                 	db	68	;'D'
   391  007B53  65                 	db	101	;'e'
   392  007B54  66                 	db	102	;'f'
   393  007B55  61                 	db	97	;'a'
   394  007B56  75                 	db	117	;'u'
   395  007B57  6C                 	db	108	;'l'
   396  007B58  74                 	db	116	;'t'
   397  007B59  20                 	db	32
   398  007B5A  3D                 	db	61	;'='
   399  007B5B  20                 	db	32
   400  007B5C  30                 	db	48	;'0'
   401  007B5D  5D                 	db	93	;']'
   402  007B5E  0D                 	db	13
   403  007B5F  0A                 	db	10
   404  007B60  00                 	db	0
   405  007B61                     STR_32:
   406                           
   407                           ; BSR set to: 0
   408  007B61  24                 	db	36
   409  007B62  52                 	db	82	;'R'
   410  007B63  43                 	db	67	;'C'
   411  007B64  52                 	db	82	;'R'
   412  007B65  20                 	db	32
   413  007B66  3C                 	db	60	;'<'
   414  007B67  58                 	db	88	;'X'
   415  007B68  3E                 	db	62	;'>'
   416  007B69  3C                 	db	60	;'<'
   417  007B6A  63                 	db	99	;'c'
   418  007B6B  72                 	db	114	;'r'
   419  007B6C  3E                 	db	62	;'>'
   420  007B6D  20                 	db	32
   421  007B6E  20                 	db	32
   422  007B6F  20                 	db	32
   423  007B70  20                 	db	32
   424  007B71  20                 	db	32
   425  007B72  53                 	db	83	;'S'
   426  007B73  65                 	db	101	;'e'
   427  007B74  74                 	db	116	;'t'
   428  007B75  20                 	db	32
   429  007B76  43                 	db	67	;'C'
   430  007B77  6F                 	db	111	;'o'
   431  007B78  6D                 	db	109	;'m'
   432  007B79  70                 	db	112	;'p'
   433  007B7A  72                 	db	114	;'r'
   434  007B7B  65                 	db	101	;'e'
   435  007B7C  73                 	db	115	;'s'
   436  007B7D  73                 	db	115	;'s'
   437  007B7E  69                 	db	105	;'i'
   438  007B7F  6F                 	db	111	;'o'
   439  007B80  6E                 	db	110	;'n'
   440  007B81  20                 	db	32
   441  007B82  72                 	db	114	;'r'
   442  007B83  61                 	db	97	;'a'
   443  007B84  6E                 	db	110	;'n'
   444  007B85  67                 	db	103	;'g'
   445  007B86  65                 	db	101	;'e'
   446  007B87  20                 	db	32
   447  007B88  61                 	db	97	;'a'
   448  007B89  74                 	db	116	;'t'
   449  007B8A  20                 	db	32
   450  007B8B  52                 	db	82	;'R'
   451  007B8C  58                 	db	88	;'X'
   452  007B8D  20                 	db	32
   453  007B8E  73                 	db	115	;'s'
   454  007B8F  79                 	db	121	;'y'
   455  007B90  73                 	db	115	;'s'
   456  007B91  74                 	db	116	;'t'
   457  007B92  65                 	db	101	;'e'
   458  007B93  6D                 	db	109	;'m'
   459  007B94  2E                 	db	46
   460  007B95  20                 	db	32
   461  007B96  48                 	db	72	;'H'
   462  007B97  69                 	db	105	;'i'
   463  007B98  67                 	db	103	;'g'
   464  007B99  68                 	db	104	;'h'
   465  007B9A  20                 	db	32
   466  007B9B  5B                 	db	91	;'['
   467  007B9C  31                 	db	49	;'1'
   468  007B9D  5D                 	db	93	;']'
   469  007B9E  20                 	db	32
   470  007B9F  4C                 	db	76	;'L'
   471  007BA0  6F                 	db	111	;'o'
   472  007BA1  77                 	db	119	;'w'
   473  007BA2  20                 	db	32
   474  007BA3  5B                 	db	91	;'['
   475  007BA4  30                 	db	48	;'0'
   476  007BA5  5D                 	db	93	;']'
   477  007BA6  20                 	db	32
   478  007BA7  5B                 	db	91	;'['
   479  007BA8  44                 	db	68	;'D'
   480  007BA9  65                 	db	101	;'e'
   481  007BAA  66                 	db	102	;'f'
   482  007BAB  61                 	db	97	;'a'
   483  007BAC  75                 	db	117	;'u'
   484  007BAD  6C                 	db	108	;'l'
   485  007BAE  74                 	db	116	;'t'
   486  007BAF  20                 	db	32
   487  007BB0  3D                 	db	61	;'='
   488  007BB1  20                 	db	32
   489  007BB2  30                 	db	48	;'0'
   490  007BB3  5D                 	db	93	;']'
   491  007BB4  0D                 	db	13
   492  007BB5  0A                 	db	10
   493  007BB6  00                 	db	0
   494  007BB7                     STR_37:
   495                           
   496                           ; BSR set to: 0
   497  007BB7  24                 	db	36
   498  007BB8  53                 	db	83	;'S'
   499  007BB9  42                 	db	66	;'B'
   500  007BBA  55                 	db	85	;'U'
   501  007BBB  20                 	db	32
   502  007BBC  3C                 	db	60	;'<'
   503  007BBD  58                 	db	88	;'X'
   504  007BBE  3E                 	db	62	;'>'
   505  007BBF  3C                 	db	60	;'<'
   506  007BC0  63                 	db	99	;'c'
   507  007BC1  72                 	db	114	;'r'
   508  007BC2  3E                 	db	62	;'>'
   509  007BC3  20                 	db	32
   510  007BC4  20                 	db	32
   511  007BC5  20                 	db	32
   512  007BC6  20                 	db	32
   513  007BC7  20                 	db	32
   514  007BC8  53                 	db	83	;'S'
   515  007BC9  65                 	db	101	;'e'
   516  007BCA  74                 	db	116	;'t'
   517  007BCB  20                 	db	32
   518  007BCC  55                 	db	85	;'U'
   519  007BCD  41                 	db	65	;'A'
   520  007BCE  52                 	db	82	;'R'
   521  007BCF  54                 	db	84	;'T'
   522  007BD0  20                 	db	32
   523  007BD1  61                 	db	97	;'a'
   524  007BD2  75                 	db	117	;'u'
   525  007BD3  74                 	db	116	;'t'
   526  007BD4  6F                 	db	111	;'o'
   527  007BD5  6D                 	db	109	;'m'
   528  007BD6  61                 	db	97	;'a'
   529  007BD7  74                 	db	116	;'t'
   530  007BD8  69                 	db	105	;'i'
   531  007BD9  63                 	db	99	;'c'
   532  007BDA  20                 	db	32
   533  007BDB  6F                 	db	111	;'o'
   534  007BDC  70                 	db	112	;'p'
   535  007BDD  65                 	db	101	;'e'
   536  007BDE  72                 	db	114	;'r'
   537  007BDF  61                 	db	97	;'a'
   538  007BE0  74                 	db	116	;'t'
   539  007BE1  69                 	db	105	;'i'
   540  007BE2  6F                 	db	111	;'o'
   541  007BE3  6E                 	db	110	;'n'
   542  007BE4  3A                 	db	58	;':'
   543  007BE5  20                 	db	32
   544  007BE6  41                 	db	65	;'A'
   545  007BE7  75                 	db	117	;'u'
   546  007BE8  74                 	db	116	;'t'
   547  007BE9  6F                 	db	111	;'o'
   548  007BEA  6D                 	db	109	;'m'
   549  007BEB  61                 	db	97	;'a'
   550  007BEC  74                 	db	116	;'t'
   551  007BED  69                 	db	105	;'i'
   552  007BEE  63                 	db	99	;'c'
   553  007BEF  5B                 	db	91	;'['
   554  007BF0  31                 	db	49	;'1'
   555  007BF1  5D                 	db	93	;']'
   556  007BF2  20                 	db	32
   557  007BF3  4D                 	db	77	;'M'
   558  007BF4  61                 	db	97	;'a'
   559  007BF5  6E                 	db	110	;'n'
   560  007BF6  75                 	db	117	;'u'
   561  007BF7  61                 	db	97	;'a'
   562  007BF8  6C                 	db	108	;'l'
   563  007BF9  5B                 	db	91	;'['
   564  007BFA  30                 	db	48	;'0'
   565  007BFB  5D                 	db	93	;']'
   566  007BFC  20                 	db	32
   567  007BFD  5B                 	db	91	;'['
   568  007BFE  44                 	db	68	;'D'
   569  007BFF  65                 	db	101	;'e'
   570  007C00  66                 	db	102	;'f'
   571  007C01  61                 	db	97	;'a'
   572  007C02  75                 	db	117	;'u'
   573  007C03  6C                 	db	108	;'l'
   574  007C04  74                 	db	116	;'t'
   575  007C05  20                 	db	32
   576  007C06  3D                 	db	61	;'='
   577  007C07  20                 	db	32
   578  007C08  30                 	db	48	;'0'
   579  007C09  5D                 	db	93	;']'
   580  007C0A  0D                 	db	13
   581  007C0B  0A                 	db	10
   582  007C0C  00                 	db	0
   583  007C0D                     STR_26:
   584                           
   585                           ; BSR set to: 0
   586  007C0D  24                 	db	36
   587  007C0E  54                 	db	84	;'T'
   588  007C0F  58                 	db	88	;'X'
   589  007C10  20                 	db	32
   590  007C11  3C                 	db	60	;'<'
   591  007C12  58                 	db	88	;'X'
   592  007C13  3E                 	db	62	;'>'
   593  007C14  3C                 	db	60	;'<'
   594  007C15  63                 	db	99	;'c'
   595  007C16  72                 	db	114	;'r'
   596  007C17  3E                 	db	62	;'>'
   597  007C18  20                 	db	32
   598  007C19  20                 	db	32
   599  007C1A  20                 	db	32
   600  007C1B  20                 	db	32
   601  007C1C  20                 	db	32
   602  007C1D  20                 	db	32
   603  007C1E  54                 	db	84	;'T'
   604  007C1F  75                 	db	117	;'u'
   605  007C20  72                 	db	114	;'r'
   606  007C21  6E                 	db	110	;'n'
   607  007C22  20                 	db	32
   608  007C23  6F                 	db	111	;'o'
   609  007C24  6E                 	db	110	;'n'
   610  007C25  5B                 	db	91	;'['
   611  007C26  31                 	db	49	;'1'
   612  007C27  5D                 	db	93	;']'
   613  007C28  20                 	db	32
   614  007C29  2F                 	db	47
   615  007C2A  20                 	db	32
   616  007C2B  6F                 	db	111	;'o'
   617  007C2C  66                 	db	102	;'f'
   618  007C2D  66                 	db	102	;'f'
   619  007C2E  5B                 	db	91	;'['
   620  007C2F  30                 	db	48	;'0'
   621  007C30  5D                 	db	93	;']'
   622  007C31  20                 	db	32
   623  007C32  74                 	db	116	;'t'
   624  007C33  72                 	db	114	;'r'
   625  007C34  61                 	db	97	;'a'
   626  007C35  6E                 	db	110	;'n'
   627  007C36  73                 	db	115	;'s'
   628  007C37  6D                 	db	109	;'m'
   629  007C38  69                 	db	105	;'i'
   630  007C39  73                 	db	115	;'s'
   631  007C3A  73                 	db	115	;'s'
   632  007C3B  69                 	db	105	;'i'
   633  007C3C  6F                 	db	111	;'o'
   634  007C3D  6E                 	db	110	;'n'
   635  007C3E  20                 	db	32
   636  007C3F  61                 	db	97	;'a'
   637  007C40  74                 	db	116	;'t'
   638  007C41  20                 	db	32
   639  007C42  54                 	db	84	;'T'
   640  007C43  58                 	db	88	;'X'
   641  007C44  20                 	db	32
   642  007C45  73                 	db	115	;'s'
   643  007C46  79                 	db	121	;'y'
   644  007C47  73                 	db	115	;'s'
   645  007C48  74                 	db	116	;'t'
   646  007C49  65                 	db	101	;'e'
   647  007C4A  6D                 	db	109	;'m'
   648  007C4B  20                 	db	32
   649  007C4C  5B                 	db	91	;'['
   650  007C4D  44                 	db	68	;'D'
   651  007C4E  65                 	db	101	;'e'
   652  007C4F  66                 	db	102	;'f'
   653  007C50  61                 	db	97	;'a'
   654  007C51  75                 	db	117	;'u'
   655  007C52  6C                 	db	108	;'l'
   656  007C53  74                 	db	116	;'t'
   657  007C54  20                 	db	32
   658  007C55  3D                 	db	61	;'='
   659  007C56  20                 	db	32
   660  007C57  30                 	db	48	;'0'
   661  007C58  5D                 	db	93	;']'
   662  007C59  0D                 	db	13
   663  007C5A  0A                 	db	10
   664  007C5B  00                 	db	0
   665  007C5C                     STR_25:
   666                           
   667                           ; BSR set to: 0
   668  007C5C  24                 	db	36
   669  007C5D  54                 	db	84	;'T'
   670  007C5E  42                 	db	66	;'B'
   671  007C5F  20                 	db	32
   672  007C60  3C                 	db	60	;'<'
   673  007C61  58                 	db	88	;'X'
   674  007C62  3E                 	db	62	;'>'
   675  007C63  3C                 	db	60	;'<'
   676  007C64  63                 	db	99	;'c'
   677  007C65  72                 	db	114	;'r'
   678  007C66  3E                 	db	62	;'>'
   679  007C67  20                 	db	32
   680  007C68  20                 	db	32
   681  007C69  20                 	db	32
   682  007C6A  20                 	db	32
   683  007C6B  20                 	db	32
   684  007C6C  20                 	db	32
   685  007C6D  54                 	db	84	;'T'
   686  007C6E  75                 	db	117	;'u'
   687  007C6F  72                 	db	114	;'r'
   688  007C70  6E                 	db	110	;'n'
   689  007C71  20                 	db	32
   690  007C72  6F                 	db	111	;'o'
   691  007C73  6E                 	db	110	;'n'
   692  007C74  5B                 	db	91	;'['
   693  007C75  31                 	db	49	;'1'
   694  007C76  5D                 	db	93	;']'
   695  007C77  20                 	db	32
   696  007C78  2F                 	db	47
   697  007C79  20                 	db	32
   698  007C7A  6F                 	db	111	;'o'
   699  007C7B  66                 	db	102	;'f'
   700  007C7C  66                 	db	102	;'f'
   701  007C7D  5B                 	db	91	;'['
   702  007C7E  30                 	db	48	;'0'
   703  007C7F  5D                 	db	93	;']'
   704  007C80  20                 	db	32
   705  007C81  42                 	db	66	;'B'
   706  007C82  49                 	db	73	;'I'
   707  007C83  54                 	db	84	;'T'
   708  007C84  20                 	db	32
   709  007C85  6D                 	db	109	;'m'
   710  007C86  6F                 	db	111	;'o'
   711  007C87  64                 	db	100	;'d'
   712  007C88  65                 	db	101	;'e'
   713  007C89  20                 	db	32
   714  007C8A  61                 	db	97	;'a'
   715  007C8B  74                 	db	116	;'t'
   716  007C8C  20                 	db	32
   717  007C8D  54                 	db	84	;'T'
   718  007C8E  58                 	db	88	;'X'
   719  007C8F  20                 	db	32
   720  007C90  73                 	db	115	;'s'
   721  007C91  79                 	db	121	;'y'
   722  007C92  73                 	db	115	;'s'
   723  007C93  74                 	db	116	;'t'
   724  007C94  65                 	db	101	;'e'
   725  007C95  6D                 	db	109	;'m'
   726  007C96  20                 	db	32
   727  007C97  5B                 	db	91	;'['
   728  007C98  44                 	db	68	;'D'
   729  007C99  65                 	db	101	;'e'
   730  007C9A  66                 	db	102	;'f'
   731  007C9B  61                 	db	97	;'a'
   732  007C9C  75                 	db	117	;'u'
   733  007C9D  6C                 	db	108	;'l'
   734  007C9E  74                 	db	116	;'t'
   735  007C9F  20                 	db	32
   736  007CA0  3D                 	db	61	;'='
   737  007CA1  20                 	db	32
   738  007CA2  30                 	db	48	;'0'
   739  007CA3  5D                 	db	93	;']'
   740  007CA4  0D                 	db	13
   741  007CA5  0A                 	db	10
   742  007CA6  00                 	db	0
   743  007CA7                     STR_28:
   744                           
   745                           ; BSR set to: 0
   746  007CA7  24                 	db	36
   747  007CA8  52                 	db	82	;'R'
   748  007CA9  49                 	db	73	;'I'
   749  007CAA  20                 	db	32
   750  007CAB  3C                 	db	60	;'<'
   751  007CAC  58                 	db	88	;'X'
   752  007CAD  58                 	db	88	;'X'
   753  007CAE  58                 	db	88	;'X'
   754  007CAF  58                 	db	88	;'X'
   755  007CB0  3E                 	db	62	;'>'
   756  007CB1  3C                 	db	60	;'<'
   757  007CB2  63                 	db	99	;'c'
   758  007CB3  72                 	db	114	;'r'
   759  007CB4  3E                 	db	62	;'>'
   760  007CB5  20                 	db	32
   761  007CB6  20                 	db	32
   762  007CB7  20                 	db	32
   763  007CB8  49                 	db	73	;'I'
   764  007CB9  6E                 	db	110	;'n'
   765  007CBA  69                 	db	105	;'i'
   766  007CBB  74                 	db	116	;'t'
   767  007CBC  20                 	db	32
   768  007CBD  52                 	db	82	;'R'
   769  007CBE  58                 	db	88	;'X'
   770  007CBF  20                 	db	32
   771  007CC0  73                 	db	115	;'s'
   772  007CC1  79                 	db	121	;'y'
   773  007CC2  73                 	db	115	;'s'
   774  007CC3  74                 	db	116	;'t'
   775  007CC4  65                 	db	101	;'e'
   776  007CC5  6D                 	db	109	;'m'
   777  007CC6  20                 	db	32
   778  007CC7  61                 	db	97	;'a'
   779  007CC8  6E                 	db	110	;'n'
   780  007CC9  64                 	db	100	;'d'
   781  007CCA  20                 	db	32
   782  007CCB  73                 	db	115	;'s'
   783  007CCC  65                 	db	101	;'e'
   784  007CCD  74                 	db	116	;'t'
   785  007CCE  20                 	db	32
   786  007CCF  66                 	db	102	;'f'
   787  007CD0  72                 	db	114	;'r'
   788  007CD1  65                 	db	101	;'e'
   789  007CD2  71                 	db	113	;'q'
   790  007CD3  75                 	db	117	;'u'
   791  007CD4  65                 	db	101	;'e'
   792  007CD5  6E                 	db	110	;'n'
   793  007CD6  63                 	db	99	;'c'
   794  007CD7  79                 	db	121	;'y'
   795  007CD8  20                 	db	32
   796  007CD9  61                 	db	97	;'a'
   797  007CDA  74                 	db	116	;'t'
   798  007CDB  20                 	db	32
   799  007CDC  58                 	db	88	;'X'
   800  007CDD  58                 	db	88	;'X'
   801  007CDE  58                 	db	88	;'X'
   802  007CDF  58                 	db	88	;'X'
   803  007CE0  20                 	db	32
   804  007CE1  28                 	db	40
   805  007CE2  30                 	db	48	;'0'
   806  007CE3  2D                 	db	45
   807  007CE4  39                 	db	57	;'9'
   808  007CE5  39                 	db	57	;'9'
   809  007CE6  39                 	db	57	;'9'
   810  007CE7  39                 	db	57	;'9'
   811  007CE8  29                 	db	41
   812  007CE9  5B                 	db	91	;'['
   813  007CEA  4D                 	db	77	;'M'
   814  007CEB  48                 	db	72	;'H'
   815  007CEC  7A                 	db	122	;'z'
   816  007CED  5D                 	db	93	;']'
   817  007CEE  0D                 	db	13
   818  007CEF  0A                 	db	10
   819  007CF0  00                 	db	0
   820  007CF1                     STR_22:
   821                           
   822                           ; BSR set to: 0
   823  007CF1  24                 	db	36
   824  007CF2  54                 	db	84	;'T'
   825  007CF3  49                 	db	73	;'I'
   826  007CF4  20                 	db	32
   827  007CF5  3C                 	db	60	;'<'
   828  007CF6  58                 	db	88	;'X'
   829  007CF7  58                 	db	88	;'X'
   830  007CF8  58                 	db	88	;'X'
   831  007CF9  58                 	db	88	;'X'
   832  007CFA  3E                 	db	62	;'>'
   833  007CFB  3C                 	db	60	;'<'
   834  007CFC  63                 	db	99	;'c'
   835  007CFD  72                 	db	114	;'r'
   836  007CFE  3E                 	db	62	;'>'
   837  007CFF  20                 	db	32
   838  007D00  20                 	db	32
   839  007D01  20                 	db	32
   840  007D02  49                 	db	73	;'I'
   841  007D03  6E                 	db	110	;'n'
   842  007D04  69                 	db	105	;'i'
   843  007D05  74                 	db	116	;'t'
   844  007D06  20                 	db	32
   845  007D07  54                 	db	84	;'T'
   846  007D08  58                 	db	88	;'X'
   847  007D09  20                 	db	32
   848  007D0A  73                 	db	115	;'s'
   849  007D0B  79                 	db	121	;'y'
   850  007D0C  73                 	db	115	;'s'
   851  007D0D  74                 	db	116	;'t'
   852  007D0E  65                 	db	101	;'e'
   853  007D0F  6D                 	db	109	;'m'
   854  007D10  20                 	db	32
   855  007D11  61                 	db	97	;'a'
   856  007D12  6E                 	db	110	;'n'
   857  007D13  64                 	db	100	;'d'
   858  007D14  20                 	db	32
   859  007D15  73                 	db	115	;'s'
   860  007D16  65                 	db	101	;'e'
   861  007D17  74                 	db	116	;'t'
   862  007D18  20                 	db	32
   863  007D19  66                 	db	102	;'f'
   864  007D1A  72                 	db	114	;'r'
   865  007D1B  65                 	db	101	;'e'
   866  007D1C  71                 	db	113	;'q'
   867  007D1D  75                 	db	117	;'u'
   868  007D1E  65                 	db	101	;'e'
   869  007D1F  6E                 	db	110	;'n'
   870  007D20  63                 	db	99	;'c'
   871  007D21  79                 	db	121	;'y'
   872  007D22  20                 	db	32
   873  007D23  28                 	db	40
   874  007D24  30                 	db	48	;'0'
   875  007D25  2D                 	db	45
   876  007D26  39                 	db	57	;'9'
   877  007D27  39                 	db	57	;'9'
   878  007D28  39                 	db	57	;'9'
   879  007D29  39                 	db	57	;'9'
   880  007D2A  29                 	db	41
   881  007D2B  5B                 	db	91	;'['
   882  007D2C  4D                 	db	77	;'M'
   883  007D2D  48                 	db	72	;'H'
   884  007D2E  7A                 	db	122	;'z'
   885  007D2F  5D                 	db	93	;']'
   886  007D30  0D                 	db	13
   887  007D31  0A                 	db	10
   888  007D32  00                 	db	0
   889  007D33                     STR_30:
   890                           
   891                           ; BSR set to: 0
   892  007D33  24                 	db	36
   893  007D34  52                 	db	82	;'R'
   894  007D35  42                 	db	66	;'B'
   895  007D36  20                 	db	32
   896  007D37  3C                 	db	60	;'<'
   897  007D38  58                 	db	88	;'X'
   898  007D39  3E                 	db	62	;'>'
   899  007D3A  3C                 	db	60	;'<'
   900  007D3B  63                 	db	99	;'c'
   901  007D3C  72                 	db	114	;'r'
   902  007D3D  3E                 	db	62	;'>'
   903  007D3E  20                 	db	32
   904  007D3F  20                 	db	32
   905  007D40  20                 	db	32
   906  007D41  20                 	db	32
   907  007D42  20                 	db	32
   908  007D43  20                 	db	32
   909  007D44  54                 	db	84	;'T'
   910  007D45  75                 	db	117	;'u'
   911  007D46  72                 	db	114	;'r'
   912  007D47  6E                 	db	110	;'n'
   913  007D48  20                 	db	32
   914  007D49  6F                 	db	111	;'o'
   915  007D4A  6E                 	db	110	;'n'
   916  007D4B  5B                 	db	91	;'['
   917  007D4C  31                 	db	49	;'1'
   918  007D4D  5D                 	db	93	;']'
   919  007D4E  20                 	db	32
   920  007D4F  2F                 	db	47
   921  007D50  20                 	db	32
   922  007D51  6F                 	db	111	;'o'
   923  007D52  66                 	db	102	;'f'
   924  007D53  66                 	db	102	;'f'
   925  007D54  5B                 	db	91	;'['
   926  007D55  30                 	db	48	;'0'
   927  007D56  5D                 	db	93	;']'
   928  007D57  20                 	db	32
   929  007D58  42                 	db	66	;'B'
   930  007D59  49                 	db	73	;'I'
   931  007D5A  54                 	db	84	;'T'
   932  007D5B  20                 	db	32
   933  007D5C  6D                 	db	109	;'m'
   934  007D5D  6F                 	db	111	;'o'
   935  007D5E  64                 	db	100	;'d'
   936  007D5F  65                 	db	101	;'e'
   937  007D60  20                 	db	32
   938  007D61  61                 	db	97	;'a'
   939  007D62  74                 	db	116	;'t'
   940  007D63  20                 	db	32
   941  007D64  52                 	db	82	;'R'
   942  007D65  58                 	db	88	;'X'
   943  007D66  20                 	db	32
   944  007D67  73                 	db	115	;'s'
   945  007D68  79                 	db	121	;'y'
   946  007D69  73                 	db	115	;'s'
   947  007D6A  74                 	db	116	;'t'
   948  007D6B  65                 	db	101	;'e'
   949  007D6C  6D                 	db	109	;'m'
   950  007D6D  2E                 	db	46
   951  007D6E  0D                 	db	13
   952  007D6F  0A                 	db	10
   953  007D70  00                 	db	0
   954  007D71                     STR_23:
   955                           
   956                           ; BSR set to: 0
   957  007D71  24                 	db	36
   958  007D72  54                 	db	84	;'T'
   959  007D73  46                 	db	70	;'F'
   960  007D74  20                 	db	32
   961  007D75  3C                 	db	60	;'<'
   962  007D76  58                 	db	88	;'X'
   963  007D77  58                 	db	88	;'X'
   964  007D78  58                 	db	88	;'X'
   965  007D79  58                 	db	88	;'X'
   966  007D7A  3E                 	db	62	;'>'
   967  007D7B  3C                 	db	60	;'<'
   968  007D7C  63                 	db	99	;'c'
   969  007D7D  72                 	db	114	;'r'
   970  007D7E  3E                 	db	62	;'>'
   971  007D7F  20                 	db	32
   972  007D80  20                 	db	32
   973  007D81  20                 	db	32
   974  007D82  53                 	db	83	;'S'
   975  007D83  65                 	db	101	;'e'
   976  007D84  74                 	db	116	;'t'
   977  007D85  20                 	db	32
   978  007D86  54                 	db	84	;'T'
   979  007D87  58                 	db	88	;'X'
   980  007D88  20                 	db	32
   981  007D89  73                 	db	115	;'s'
   982  007D8A  79                 	db	121	;'y'
   983  007D8B  73                 	db	115	;'s'
   984  007D8C  74                 	db	116	;'t'
   985  007D8D  65                 	db	101	;'e'
   986  007D8E  6D                 	db	109	;'m'
   987  007D8F  20                 	db	32
   988  007D90  66                 	db	102	;'f'
   989  007D91  72                 	db	114	;'r'
   990  007D92  65                 	db	101	;'e'
   991  007D93  71                 	db	113	;'q'
   992  007D94  75                 	db	117	;'u'
   993  007D95  65                 	db	101	;'e'
   994  007D96  6E                 	db	110	;'n'
   995  007D97  63                 	db	99	;'c'
   996  007D98  79                 	db	121	;'y'
   997  007D99  20                 	db	32
   998  007D9A  61                 	db	97	;'a'
   999  007D9B  74                 	db	116	;'t'
  1000  007D9C  20                 	db	32
  1001  007D9D  28                 	db	40
  1002  007D9E  30                 	db	48	;'0'
  1003  007D9F  2D                 	db	45
  1004  007DA0  39                 	db	57	;'9'
  1005  007DA1  39                 	db	57	;'9'
  1006  007DA2  39                 	db	57	;'9'
  1007  007DA3  39                 	db	57	;'9'
  1008  007DA4  29                 	db	41
  1009  007DA5  5B                 	db	91	;'['
  1010  007DA6  4D                 	db	77	;'M'
  1011  007DA7  48                 	db	72	;'H'
  1012  007DA8  7A                 	db	122	;'z'
  1013  007DA9  5D                 	db	93	;']'
  1014  007DAA  2E                 	db	46
  1015  007DAB  0D                 	db	13
  1016  007DAC  0A                 	db	10
  1017  007DAD  00                 	db	0
  1018  007DAE                     STR_31:
  1019                           
  1020                           ; BSR set to: 0
  1021  007DAE  24                 	db	36
  1022  007DAF  52                 	db	82	;'R'
  1023  007DB0  58                 	db	88	;'X'
  1024  007DB1  20                 	db	32
  1025  007DB2  3C                 	db	60	;'<'
  1026  007DB3  58                 	db	88	;'X'
  1027  007DB4  3E                 	db	62	;'>'
  1028  007DB5  3C                 	db	60	;'<'
  1029  007DB6  63                 	db	99	;'c'
  1030  007DB7  72                 	db	114	;'r'
  1031  007DB8  3E                 	db	62	;'>'
  1032  007DB9  20                 	db	32
  1033  007DBA  20                 	db	32
  1034  007DBB  20                 	db	32
  1035  007DBC  20                 	db	32
  1036  007DBD  20                 	db	32
  1037  007DBE  20                 	db	32
  1038  007DBF  54                 	db	84	;'T'
  1039  007DC0  75                 	db	117	;'u'
  1040  007DC1  72                 	db	114	;'r'
  1041  007DC2  6E                 	db	110	;'n'
  1042  007DC3  20                 	db	32
  1043  007DC4  6F                 	db	111	;'o'
  1044  007DC5  6E                 	db	110	;'n'
  1045  007DC6  5B                 	db	91	;'['
  1046  007DC7  31                 	db	49	;'1'
  1047  007DC8  5D                 	db	93	;']'
  1048  007DC9  20                 	db	32
  1049  007DCA  2F                 	db	47
  1050  007DCB  20                 	db	32
  1051  007DCC  6F                 	db	111	;'o'
  1052  007DCD  66                 	db	102	;'f'
  1053  007DCE  66                 	db	102	;'f'
  1054  007DCF  5B                 	db	91	;'['
  1055  007DD0  30                 	db	48	;'0'
  1056  007DD1  5D                 	db	93	;']'
  1057  007DD2  20                 	db	32
  1058  007DD3  72                 	db	114	;'r'
  1059  007DD4  65                 	db	101	;'e'
  1060  007DD5  63                 	db	99	;'c'
  1061  007DD6  65                 	db	101	;'e'
  1062  007DD7  69                 	db	105	;'i'
  1063  007DD8  76                 	db	118	;'v'
  1064  007DD9  65                 	db	101	;'e'
  1065  007DDA  20                 	db	32
  1066  007DDB  61                 	db	97	;'a'
  1067  007DDC  74                 	db	116	;'t'
  1068  007DDD  20                 	db	32
  1069  007DDE  52                 	db	82	;'R'
  1070  007DDF  58                 	db	88	;'X'
  1071  007DE0  20                 	db	32
  1072  007DE1  73                 	db	115	;'s'
  1073  007DE2  79                 	db	121	;'y'
  1074  007DE3  73                 	db	115	;'s'
  1075  007DE4  74                 	db	116	;'t'
  1076  007DE5  65                 	db	101	;'e'
  1077  007DE6  6D                 	db	109	;'m'
  1078  007DE7  2E                 	db	46
  1079  007DE8  0D                 	db	13
  1080  007DE9  0A                 	db	10
  1081  007DEA  00                 	db	0
  1082  007DEB                     STR_36:
  1083                           
  1084                           ; BSR set to: 0
  1085  007DEB  24                 	db	36
  1086  007DEC  53                 	db	83	;'S'
  1087  007DED  42                 	db	66	;'B'
  1088  007DEE  54                 	db	84	;'T'
  1089  007DEF  20                 	db	32
  1090  007DF0  3C                 	db	60	;'<'
  1091  007DF1  58                 	db	88	;'X'
  1092  007DF2  58                 	db	88	;'X'
  1093  007DF3  3E                 	db	62	;'>'
  1094  007DF4  3C                 	db	60	;'<'
  1095  007DF5  63                 	db	99	;'c'
  1096  007DF6  72                 	db	114	;'r'
  1097  007DF7  3E                 	db	62	;'>'
  1098  007DF8  20                 	db	32
  1099  007DF9  20                 	db	32
  1100  007DFA  20                 	db	32
  1101  007DFB  20                 	db	32
  1102  007DFC  53                 	db	83	;'S'
  1103  007DFD  65                 	db	101	;'e'
  1104  007DFE  74                 	db	116	;'t'
  1105  007DFF  20                 	db	32
  1106  007E00  55                 	db	85	;'U'
  1107  007E01  41                 	db	65	;'A'
  1108  007E02  52                 	db	82	;'R'
  1109  007E03  54                 	db	84	;'T'
  1110  007E04  20                 	db	32
  1111  007E05  72                 	db	114	;'r'
  1112  007E06  65                 	db	101	;'e'
  1113  007E07  66                 	db	102	;'f'
  1114  007E08  72                 	db	114	;'r'
  1115  007E09  65                 	db	101	;'e'
  1116  007E0A  73                 	db	115	;'s'
  1117  007E0B  68                 	db	104	;'h'
  1118  007E0C  20                 	db	32
  1119  007E0D  72                 	db	114	;'r'
  1120  007E0E  61                 	db	97	;'a'
  1121  007E0F  74                 	db	116	;'t'
  1122  007E10  65                 	db	101	;'e'
  1123  007E11  20                 	db	32
  1124  007E12  28                 	db	40
  1125  007E13  31                 	db	49	;'1'
  1126  007E14  2D                 	db	45
  1127  007E15  32                 	db	50	;'2'
  1128  007E16  30                 	db	48	;'0'
  1129  007E17  29                 	db	41
  1130  007E18  5B                 	db	91	;'['
  1131  007E19  48                 	db	72	;'H'
  1132  007E1A  7A                 	db	122	;'z'
  1133  007E1B  5D                 	db	93	;']'
  1134  007E1C  2E                 	db	46
  1135  007E1D  0D                 	db	13
  1136  007E1E  0A                 	db	10
  1137  007E1F  00                 	db	0
  1138  007E20                     STR_35:
  1139                           
  1140                           ; BSR set to: 0
  1141  007E20  24                 	db	36
  1142  007E21  53                 	db	83	;'S'
  1143  007E22  48                 	db	72	;'H'
  1144  007E23  20                 	db	32
  1145  007E24  3C                 	db	60	;'<'
  1146  007E25  63                 	db	99	;'c'
  1147  007E26  72                 	db	114	;'r'
  1148  007E27  3E                 	db	62	;'>'
  1149  007E28  20                 	db	32
  1150  007E29  20                 	db	32
  1151  007E2A  20                 	db	32
  1152  007E2B  20                 	db	32
  1153  007E2C  20                 	db	32
  1154  007E2D  20                 	db	32
  1155  007E2E  20                 	db	32
  1156  007E2F  20                 	db	32
  1157  007E30  20                 	db	32
  1158  007E31  50                 	db	80	;'P'
  1159  007E32  72                 	db	114	;'r'
  1160  007E33  69                 	db	105	;'i'
  1161  007E34  6E                 	db	110	;'n'
  1162  007E35  74                 	db	116	;'t'
  1163  007E36  20                 	db	32
  1164  007E37  73                 	db	115	;'s'
  1165  007E38  79                 	db	121	;'y'
  1166  007E39  73                 	db	115	;'s'
  1167  007E3A  74                 	db	116	;'t'
  1168  007E3B  65                 	db	101	;'e'
  1169  007E3C  6D                 	db	109	;'m'
  1170  007E3D  20                 	db	32
  1171  007E3E  68                 	db	104	;'h'
  1172  007E3F  65                 	db	101	;'e'
  1173  007E40  6C                 	db	108	;'l'
  1174  007E41  70                 	db	112	;'p'
  1175  007E42  20                 	db	32
  1176  007E43  6D                 	db	109	;'m'
  1177  007E44  65                 	db	101	;'e'
  1178  007E45  73                 	db	115	;'s'
  1179  007E46  73                 	db	115	;'s'
  1180  007E47  61                 	db	97	;'a'
  1181  007E48  67                 	db	103	;'g'
  1182  007E49  65                 	db	101	;'e'
  1183  007E4A  2E                 	db	46
  1184  007E4B  0D                 	db	13
  1185  007E4C  0A                 	db	10
  1186  007E4D  00                 	db	0
  1187  007E4E                     STR_24:
  1188                           
  1189                           ; BSR set to: 0
  1190  007E4E  24                 	db	36
  1191  007E4F  54                 	db	84	;'T'
  1192  007E50  51                 	db	81	;'Q'
  1193  007E51  20                 	db	32
  1194  007E52  3C                 	db	60	;'<'
  1195  007E53  63                 	db	99	;'c'
  1196  007E54  72                 	db	114	;'r'
  1197  007E55  3E                 	db	62	;'>'
  1198  007E56  20                 	db	32
  1199  007E57  20                 	db	32
  1200  007E58  20                 	db	32
  1201  007E59  20                 	db	32
  1202  007E5A  20                 	db	32
  1203  007E5B  20                 	db	32
  1204  007E5C  20                 	db	32
  1205  007E5D  20                 	db	32
  1206  007E5E  20                 	db	32
  1207  007E5F  47                 	db	71	;'G'
  1208  007E60  65                 	db	101	;'e'
  1209  007E61  74                 	db	116	;'t'
  1210  007E62  20                 	db	32
  1211  007E63  73                 	db	115	;'s'
  1212  007E64  74                 	db	116	;'t'
  1213  007E65  61                 	db	97	;'a'
  1214  007E66  74                 	db	116	;'t'
  1215  007E67  75                 	db	117	;'u'
  1216  007E68  73                 	db	115	;'s'
  1217  007E69  20                 	db	32
  1218  007E6A  66                 	db	102	;'f'
  1219  007E6B  72                 	db	114	;'r'
  1220  007E6C  6F                 	db	111	;'o'
  1221  007E6D  6D                 	db	109	;'m'
  1222  007E6E  20                 	db	32
  1223  007E6F  54                 	db	84	;'T'
  1224  007E70  58                 	db	88	;'X'
  1225  007E71  20                 	db	32
  1226  007E72  73                 	db	115	;'s'
  1227  007E73  79                 	db	121	;'y'
  1228  007E74  73                 	db	115	;'s'
  1229  007E75  74                 	db	116	;'t'
  1230  007E76  65                 	db	101	;'e'
  1231  007E77  6D                 	db	109	;'m'
  1232  007E78  2E                 	db	46
  1233  007E79  0D                 	db	13
  1234  007E7A  0A                 	db	10
  1235  007E7B  00                 	db	0
  1236  007E7C                     STR_29:
  1237                           
  1238                           ; BSR set to: 0
  1239  007E7C  24                 	db	36
  1240  007E7D  52                 	db	82	;'R'
  1241  007E7E  51                 	db	81	;'Q'
  1242  007E7F  20                 	db	32
  1243  007E80  3C                 	db	60	;'<'
  1244  007E81  63                 	db	99	;'c'
  1245  007E82  72                 	db	114	;'r'
  1246  007E83  3E                 	db	62	;'>'
  1247  007E84  20                 	db	32
  1248  007E85  20                 	db	32
  1249  007E86  20                 	db	32
  1250  007E87  20                 	db	32
  1251  007E88  20                 	db	32
  1252  007E89  20                 	db	32
  1253  007E8A  20                 	db	32
  1254  007E8B  20                 	db	32
  1255  007E8C  20                 	db	32
  1256  007E8D  47                 	db	71	;'G'
  1257  007E8E  65                 	db	101	;'e'
  1258  007E8F  74                 	db	116	;'t'
  1259  007E90  20                 	db	32
  1260  007E91  73                 	db	115	;'s'
  1261  007E92  74                 	db	116	;'t'
  1262  007E93  61                 	db	97	;'a'
  1263  007E94  74                 	db	116	;'t'
  1264  007E95  75                 	db	117	;'u'
  1265  007E96  73                 	db	115	;'s'
  1266  007E97  20                 	db	32
  1267  007E98  66                 	db	102	;'f'
  1268  007E99  72                 	db	114	;'r'
  1269  007E9A  6F                 	db	111	;'o'
  1270  007E9B  6D                 	db	109	;'m'
  1271  007E9C  20                 	db	32
  1272  007E9D  52                 	db	82	;'R'
  1273  007E9E  58                 	db	88	;'X'
  1274  007E9F  20                 	db	32
  1275  007EA0  73                 	db	115	;'s'
  1276  007EA1  79                 	db	121	;'y'
  1277  007EA2  73                 	db	115	;'s'
  1278  007EA3  74                 	db	116	;'t'
  1279  007EA4  65                 	db	101	;'e'
  1280  007EA5  6D                 	db	109	;'m'
  1281  007EA6  0D                 	db	13
  1282  007EA7  0A                 	db	10
  1283  007EA8  00                 	db	0
  1284  007EA9                     STR_38:
  1285                           
  1286                           ; BSR set to: 0
  1287  007EA9  24                 	db	36
  1288  007EAA  53                 	db	83	;'S'
  1289  007EAB  51                 	db	81	;'Q'
  1290  007EAC  20                 	db	32
  1291  007EAD  3C                 	db	60	;'<'
  1292  007EAE  58                 	db	88	;'X'
  1293  007EAF  3E                 	db	62	;'>'
  1294  007EB0  3C                 	db	60	;'<'
  1295  007EB1  63                 	db	99	;'c'
  1296  007EB2  72                 	db	114	;'r'
  1297  007EB3  3E                 	db	62	;'>'
  1298  007EB4  20                 	db	32
  1299  007EB5  20                 	db	32
  1300  007EB6  20                 	db	32
  1301  007EB7  20                 	db	32
  1302  007EB8  20                 	db	32
  1303  007EB9  20                 	db	32
  1304  007EBA  47                 	db	71	;'G'
  1305  007EBB  65                 	db	101	;'e'
  1306  007EBC  74                 	db	116	;'t'
  1307  007EBD  20                 	db	32
  1308  007EBE  73                 	db	115	;'s'
  1309  007EBF  79                 	db	121	;'y'
  1310  007EC0  73                 	db	115	;'s'
  1311  007EC1  74                 	db	116	;'t'
  1312  007EC2  65                 	db	101	;'e'
  1313  007EC3  6D                 	db	109	;'m'
  1314  007EC4  20                 	db	32
  1315  007EC5  73                 	db	115	;'s'
  1316  007EC6  74                 	db	116	;'t'
  1317  007EC7  61                 	db	97	;'a'
  1318  007EC8  74                 	db	116	;'t'
  1319  007EC9  75                 	db	117	;'u'
  1320  007ECA  73                 	db	115	;'s'
  1321  007ECB  2E                 	db	46
  1322  007ECC  0D                 	db	13
  1323  007ECD  0A                 	db	10
  1324  007ECE  00                 	db	0
  1325  007ECF                     STR_39:
  1326                           
  1327                           ; BSR set to: 0
  1328  007ECF  24                 	db	36
  1329  007ED0  53                 	db	83	;'S'
  1330  007ED1  4C                 	db	76	;'L'
  1331  007ED2  20                 	db	32
  1332  007ED3  3C                 	db	60	;'<'
  1333  007ED4  63                 	db	99	;'c'
  1334  007ED5  72                 	db	114	;'r'
  1335  007ED6  3E                 	db	62	;'>'
  1336  007ED7  20                 	db	32
  1337  007ED8  20                 	db	32
  1338  007ED9  20                 	db	32
  1339  007EDA  20                 	db	32
  1340  007EDB  20                 	db	32
  1341  007EDC  20                 	db	32
  1342  007EDD  20                 	db	32
  1343  007EDE  20                 	db	32
  1344  007EDF  20                 	db	32
  1345  007EE0  54                 	db	84	;'T'
  1346  007EE1  65                 	db	101	;'e'
  1347  007EE2  73                 	db	115	;'s'
  1348  007EE3  74                 	db	116	;'t'
  1349  007EE4  20                 	db	32
  1350  007EE5  73                 	db	115	;'s'
  1351  007EE6  79                 	db	121	;'y'
  1352  007EE7  73                 	db	115	;'s'
  1353  007EE8  74                 	db	116	;'t'
  1354  007EE9  65                 	db	101	;'e'
  1355  007EEA  6D                 	db	109	;'m'
  1356  007EEB  20                 	db	32
  1357  007EEC  4C                 	db	76	;'L'
  1358  007EED  45                 	db	69	;'E'
  1359  007EEE  44                 	db	68	;'D'
  1360  007EEF  73                 	db	115	;'s'
  1361  007EF0  2E                 	db	46
  1362  007EF1  0D                 	db	13
  1363  007EF2  0A                 	db	10
  1364  007EF3  00                 	db	0
  1365  007EF4                     STR_12:
  1366                           
  1367                           ; BSR set to: 0
  1368  007EF4  2A                 	db	42
  1369  007EF5  2A                 	db	42
  1370  007EF6  2A                 	db	42
  1371  007EF7  2A                 	db	42
  1372  007EF8  2A                 	db	42
  1373  007EF9  2A                 	db	42
  1374  007EFA  2A                 	db	42
  1375  007EFB  2A                 	db	42
  1376  007EFC  2A                 	db	42
  1377  007EFD  2A                 	db	42
  1378  007EFE  2A                 	db	42
  1379  007EFF  2A                 	db	42
  1380  007F00  2A                 	db	42
  1381  007F01  2A                 	db	42
  1382  007F02  2A                 	db	42
  1383  007F03  2A                 	db	42
  1384  007F04  2A                 	db	42
  1385  007F05  2A                 	db	42
  1386  007F06  2A                 	db	42
  1387  007F07  2A                 	db	42
  1388  007F08  2A                 	db	42
  1389  007F09  2A                 	db	42
  1390  007F0A  2A                 	db	42
  1391  007F0B  2A                 	db	42
  1392  007F0C  2A                 	db	42
  1393  007F0D  2A                 	db	42
  1394  007F0E  2A                 	db	42
  1395  007F0F  20                 	db	32
  1396  007F10  0A                 	db	10
  1397  007F11  0D                 	db	13
  1398  007F12  00                 	db	0
  1399  007F13                     STR_34:
  1400                           
  1401                           ; BSR set to: 0
  1402  007F13  0A                 	db	10
  1403  007F14  0D                 	db	13
  1404  007F15  3C                 	db	60	;'<'
  1405  007F16  43                 	db	67	;'C'
  1406  007F17  6F                 	db	111	;'o'
  1407  007F18  6D                 	db	109	;'m'
  1408  007F19  6D                 	db	109	;'m'
  1409  007F1A  6F                 	db	111	;'o'
  1410  007F1B  6E                 	db	110	;'n'
  1411  007F1C  20                 	db	32
  1412  007F1D  73                 	db	115	;'s'
  1413  007F1E  79                 	db	121	;'y'
  1414  007F1F  73                 	db	115	;'s'
  1415  007F20  74                 	db	116	;'t'
  1416  007F21  65                 	db	101	;'e'
  1417  007F22  6D                 	db	109	;'m'
  1418  007F23  20                 	db	32
  1419  007F24  63                 	db	99	;'c'
  1420  007F25  6F                 	db	111	;'o'
  1421  007F26  6D                 	db	109	;'m'
  1422  007F27  6D                 	db	109	;'m'
  1423  007F28  61                 	db	97	;'a'
  1424  007F29  6E                 	db	110	;'n'
  1425  007F2A  64                 	db	100	;'d'
  1426  007F2B  73                 	db	115	;'s'
  1427  007F2C  3E                 	db	62	;'>'
  1428  007F2D  0A                 	db	10
  1429  007F2E  0D                 	db	13
  1430  007F2F  00                 	db	0
  1431  007F30                     STR_27:
  1432                           
  1433                           ; BSR set to: 0
  1434  007F30  0A                 	db	10
  1435  007F31  0D                 	db	13
  1436  007F32  3C                 	db	60	;'<'
  1437  007F33  52                 	db	82	;'R'
  1438  007F34  58                 	db	88	;'X'
  1439  007F35  20                 	db	32
  1440  007F36  73                 	db	115	;'s'
  1441  007F37  79                 	db	121	;'y'
  1442  007F38  73                 	db	115	;'s'
  1443  007F39  74                 	db	116	;'t'
  1444  007F3A  65                 	db	101	;'e'
  1445  007F3B  6D                 	db	109	;'m'
  1446  007F3C  20                 	db	32
  1447  007F3D  63                 	db	99	;'c'
  1448  007F3E  6F                 	db	111	;'o'
  1449  007F3F  6D                 	db	109	;'m'
  1450  007F40  6D                 	db	109	;'m'
  1451  007F41  61                 	db	97	;'a'
  1452  007F42  6E                 	db	110	;'n'
  1453  007F43  64                 	db	100	;'d'
  1454  007F44  73                 	db	115	;'s'
  1455  007F45  3E                 	db	62	;'>'
  1456  007F46  0A                 	db	10
  1457  007F47  0D                 	db	13
  1458  007F48  00                 	db	0
  1459  007F49                     STR_21:
  1460                           
  1461                           ; BSR set to: 0
  1462  007F49  3C                 	db	60	;'<'
  1463  007F4A  54                 	db	84	;'T'
  1464  007F4B  58                 	db	88	;'X'
  1465  007F4C  20                 	db	32
  1466  007F4D  73                 	db	115	;'s'
  1467  007F4E  79                 	db	121	;'y'
  1468  007F4F  73                 	db	115	;'s'
  1469  007F50  74                 	db	116	;'t'
  1470  007F51  65                 	db	101	;'e'
  1471  007F52  6D                 	db	109	;'m'
  1472  007F53  20                 	db	32
  1473  007F54  63                 	db	99	;'c'
  1474  007F55  6F                 	db	111	;'o'
  1475  007F56  6D                 	db	109	;'m'
  1476  007F57  6D                 	db	109	;'m'
  1477  007F58  61                 	db	97	;'a'
  1478  007F59  6E                 	db	110	;'n'
  1479  007F5A  64                 	db	100	;'d'
  1480  007F5B  73                 	db	115	;'s'
  1481  007F5C  3E                 	db	62	;'>'
  1482  007F5D  0A                 	db	10
  1483  007F5E  0D                 	db	13
  1484  007F5F  00                 	db	0
  1485  007F60                     STR_13:
  1486                           
  1487                           ; BSR set to: 0
  1488  007F60  46                 	db	70	;'F'
  1489  007F61  41                 	db	65	;'A'
  1490  007F62  53                 	db	83	;'S'
  1491  007F63  54                 	db	84	;'T'
  1492  007F64  20                 	db	32
  1493  007F65  4C                 	db	76	;'L'
  1494  007F66  49                 	db	73	;'I'
  1495  007F67  4E                 	db	78	;'N'
  1496  007F68  4B                 	db	75	;'K'
  1497  007F69  20                 	db	32
  1498  007F6A  53                 	db	83	;'S'
  1499  007F6B  59                 	db	89	;'Y'
  1500  007F6C  53                 	db	83	;'S'
  1501  007F6D  54                 	db	84	;'T'
  1502  007F6E  45                 	db	69	;'E'
  1503  007F6F  4D                 	db	77	;'M'
  1504  007F70  20                 	db	32
  1505  007F71  0A                 	db	10
  1506  007F72  0D                 	db	13
  1507  007F73  00                 	db	0
  1508  007F74                     STR_18:
  1509                           
  1510                           ; BSR set to: 0
  1511  007F74  43                 	db	67	;'C'
  1512  007F75  6F                 	db	111	;'o'
  1513  007F76  6D                 	db	109	;'m'
  1514  007F77  70                 	db	112	;'p'
  1515  007F78  69                 	db	105	;'i'
  1516  007F79  6C                 	db	108	;'l'
  1517  007F7A  65                 	db	101	;'e'
  1518  007F7B  20                 	db	32
  1519  007F7C  74                 	db	116	;'t'
  1520  007F7D  69                 	db	105	;'i'
  1521  007F7E  6D                 	db	109	;'m'
  1522  007F7F  65                 	db	101	;'e'
  1523  007F80  3A                 	db	58	;':'
  1524  007F81  20                 	db	32
  1525  007F82  25                 	db	37
  1526  007F83  73                 	db	115	;'s'
  1527  007F84  20                 	db	32
  1528  007F85  0A                 	db	10
  1529  007F86  0D                 	db	13
  1530  007F87  00                 	db	0
  1531  007F88                     STR_16:
  1532                           
  1533                           ; BSR set to: 0
  1534  007F88  43                 	db	67	;'C'
  1535  007F89  6F                 	db	111	;'o'
  1536  007F8A  6D                 	db	109	;'m'
  1537  007F8B  70                 	db	112	;'p'
  1538  007F8C  69                 	db	105	;'i'
  1539  007F8D  6C                 	db	108	;'l'
  1540  007F8E  65                 	db	101	;'e'
  1541  007F8F  20                 	db	32
  1542  007F90  64                 	db	100	;'d'
  1543  007F91  61                 	db	97	;'a'
  1544  007F92  74                 	db	116	;'t'
  1545  007F93  65                 	db	101	;'e'
  1546  007F94  3A                 	db	58	;':'
  1547  007F95  20                 	db	32
  1548  007F96  25                 	db	37
  1549  007F97  73                 	db	115	;'s'
  1550  007F98  20                 	db	32
  1551  007F99  0A                 	db	10
  1552  007F9A  0D                 	db	13
  1553  007F9B  00                 	db	0
  1554  007F9C                     STR_3:
  1555                           
  1556                           ; BSR set to: 0
  1557  007F9C  53                 	db	83	;'S'
  1558  007F9D  41                 	db	65	;'A'
  1559  007F9E  4D                 	db	77	;'M'
  1560  007F9F  50                 	db	80	;'P'
  1561  007FA0  4C                 	db	76	;'L'
  1562  007FA1  45                 	db	69	;'E'
  1563  007FA2  20                 	db	32
  1564  007FA3  43                 	db	67	;'C'
  1565  007FA4  48                 	db	72	;'H'
  1566  007FA5  41                 	db	65	;'A'
  1567  007FA6  4E                 	db	78	;'N'
  1568  007FA7  4E                 	db	78	;'N'
  1569  007FA8  45                 	db	69	;'E'
  1570  007FA9  4C                 	db	76	;'L'
  1571  007FAA  20                 	db	32
  1572  007FAB  4E                 	db	78	;'N'
  1573  007FAC  41                 	db	65	;'A'
  1574  007FAD  4D                 	db	77	;'M'
  1575  007FAE  45                 	db	69	;'E'
  1576  007FAF  00                 	db	0
  1577  007FB0                     STR_14:
  1578                           
  1579                           ; BSR set to: 0
  1580  007FB0  53                 	db	83	;'S'
  1581  007FB1  57                 	db	87	;'W'
  1582  007FB2  20                 	db	32
  1583  007FB3  56                 	db	86	;'V'
  1584  007FB4  45                 	db	69	;'E'
  1585  007FB5  53                 	db	83	;'S'
  1586  007FB6  52                 	db	82	;'R'
  1587  007FB7  49                 	db	73	;'I'
  1588  007FB8  4F                 	db	79	;'O'
  1589  007FB9  4E                 	db	78	;'N'
  1590  007FBA  3A                 	db	58	;':'
  1591  007FBB  20                 	db	32
  1592  007FBC  25                 	db	37
  1593  007FBD  73                 	db	115	;'s'
  1594  007FBE  20                 	db	32
  1595  007FBF  0A                 	db	10
  1596  007FC0  0D                 	db	13
  1597  007FC1  00                 	db	0
  1598  007FC2                     STR_17:
  1599                           
  1600                           ; BSR set to: 0
  1601  007FC2  4D                 	db	77	;'M'
  1602  007FC3  61                 	db	97	;'a'
  1603  007FC4  72                 	db	114	;'r'
  1604  007FC5  20                 	db	32
  1605  007FC6  32                 	db	50	;'2'
  1606  007FC7  36                 	db	54	;'6'
  1607  007FC8  20                 	db	32
  1608  007FC9  32                 	db	50	;'2'
  1609  007FCA  30                 	db	48	;'0'
  1610  007FCB  31                 	db	49	;'1'
  1611  007FCC  38                 	db	56	;'8'
  1612  007FCD  00                 	db	0
  1613  007FCE                     STR_8:
  1614                           
  1615                           ; BSR set to: 0
  1616  007FCE  4E                 	db	78	;'N'
  1617  007FCF  4F                 	db	79	;'O'
  1618  007FD0  54                 	db	84	;'T'
  1619  007FD1  20                 	db	32
  1620  007FD2  4F                 	db	79	;'O'
  1621  007FD3  2E                 	db	46
  1622  007FD4  4B                 	db	75	;'K'
  1623  007FD5  20                 	db	32
  1624  007FD6  0A                 	db	10
  1625  007FD7  0D                 	db	13
  1626  007FD8  00                 	db	0
  1627  007FD9                     STR_1:
  1628                           
  1629                           ; BSR set to: 0
  1630  007FD9  4E                 	db	78	;'N'
  1631  007FDA  4F                 	db	79	;'O'
  1632  007FDB  54                 	db	84	;'T'
  1633  007FDC  20                 	db	32
  1634  007FDD  4F                 	db	79	;'O'
  1635  007FDE  4B                 	db	75	;'K'
  1636  007FDF  20                 	db	32
  1637  007FE0  0A                 	db	10
  1638  007FE1  0D                 	db	13
  1639  007FE2  00                 	db	0
  1640  007FE3                     STR_19:
  1641                           
  1642                           ; BSR set to: 0
  1643  007FE3  31                 	db	49	;'1'
  1644  007FE4  32                 	db	50	;'2'
  1645  007FE5  3A                 	db	58	;':'
  1646  007FE6  31                 	db	49	;'1'
  1647  007FE7  32                 	db	50	;'2'
  1648  007FE8  3A                 	db	58	;':'
  1649  007FE9  32                 	db	50	;'2'
  1650  007FEA  34                 	db	52	;'4'
  1651  007FEB  00                 	db	0
  1652  007FEC                     STR_40:
  1653                           
  1654                           ; BSR set to: 0
  1655  007FEC  28                 	db	40
  1656  007FED  6E                 	db	110	;'n'
  1657  007FEE  75                 	db	117	;'u'
  1658  007FEF  6C                 	db	108	;'l'
  1659  007FF0  6C                 	db	108	;'l'
  1660  007FF1  29                 	db	41
  1661  007FF2  00                 	db	0
  1662  007FF3                     STR_15:
  1663                           
  1664                           ; BSR set to: 0
  1665  007FF3  31                 	db	49	;'1'
  1666  007FF4  5F                 	db	95	;'_'
  1667  007FF5  30                 	db	48	;'0'
  1668  007FF6  30                 	db	48	;'0'
  1669  007FF7  32                 	db	50	;'2'
  1670  007FF8  00                 	db	0
  1671  007FF9                     STR_6:
  1672                           
  1673                           ; BSR set to: 0
  1674  007FF9  25                 	db	37
  1675  007FFA  64                 	db	100	;'d'
  1676  007FFB  20                 	db	32
  1677  007FFC  09                 	db	9
  1678  007FFD  00                 	db	0
  1679  0000                     
  1680                           ; #config settings
  1681  007FFE  00                 	db	0	; dummy byte at the end
  1682  0000                     
  1683                           	psect	nvCOMRAM
  1684  000046                     __pnvCOMRAM:
  1685                           	opt stack 0
  1686  000046                     _timer0ReloadVal:
  1687                           	opt stack 0
  1688  000046                     	ds	2
  1689                           
  1690                           	psect	nvBANK0
  1691  0000DC                     __pnvBANK0:
  1692                           	opt stack 0
  1693  0000DC                     _eusart1TxBufferRemaining:
  1694                           	opt stack 0
  1695  0000DC                     	ds	1
  1696                           
  1697                           	psect	nvBANK1
  1698  0001FB                     __pnvBANK1:
  1699                           	opt stack 0
  1700  0001FB                     _TMR0_InterruptHandler:
  1701                           	opt stack 0
  1702  0001FB                     	ds	2
  1703  0000                     _ANSELA	set	3896
  1704  0000                     _ANSELE	set	3900
  1705  0000                     _ANSELD	set	3899
  1706  0000                     _ANSELB	set	3897
  1707  0000                     _ANSELC	set	3898
  1708  0000                     _ADCON0bits	set	4034
  1709  0000                     _ADRESH	set	4036
  1710  0000                     _ADRESL	set	4035
  1711  0000                     _ADCON2	set	4032
  1712  0000                     _ADCON1	set	4033
  1713  0000                     _ADCON0	set	4034
  1714  0000                     _T0CONbits	set	4053
  1715  0000                     _T0CON	set	4053
  1716  0000                     _TMR0L	set	4054
  1717  0000                     _TMR0H	set	4055
  1718  0000                     _EEDATA	set	4008
  1719  0000                     _EEADR	set	4009
  1720  0000                     _EECON2	set	4007
  1721  0000                     _EECON1bits	set	4006
  1722  0000                     _TABLAT	set	4085
  1723  0000                     _TBLPTRL	set	4086
  1724  0000                     _TBLPTRH	set	4087
  1725  0000                     _TBLPTRU	set	4088
  1726  0000                     _INTCON2bits	set	4081
  1727  0000                     _WPUB	set	3937
  1728  0000                     _TRISD	set	3989
  1729  0000                     _TRISC	set	3988
  1730  0000                     _TRISB	set	3987
  1731  0000                     _TRISA	set	3986
  1732  0000                     _TRISE	set	3990
  1733  0000                     _LATC	set	3979
  1734  0000                     _LATB	set	3978
  1735  0000                     _LATA	set	3977
  1736  0000                     _LATD	set	3980
  1737  0000                     _LATE	set	3981
  1738  0000                     _RCREG1	set	4014
  1739  0000                     _RCSTA1bits	set	4011
  1740  0000                     _TXREG1	set	4013
  1741  0000                     _SPBRGH1	set	4016
  1742  0000                     _SPBRG1	set	4015
  1743  0000                     _TXSTA1	set	4012
  1744  0000                     _RCSTA1	set	4011
  1745  0000                     _BAUDCON1	set	4024
  1746  0000                     _PIR1bits	set	3998
  1747  0000                     _PIE1bits	set	3997
  1748  0000                     _PIR2bits	set	4001
  1749  0000                     _PIE2bits	set	4000
  1750  0000                     _RCONbits	set	4048
  1751  0000                     _OSCTUNE	set	3995
  1752  0000                     _OSCCON2	set	4050
  1753  0000                     _OSCCON	set	4051
  1754  0000                     _LATAbits	set	3977
  1755  0000                     _LATDbits	set	3980
  1756  0000                     _INTCONbits	set	4082
  1757  0000                     _LATCbits	set	3979
  1758  0000                     _LATBbits	set	3978
  1759                           
  1760                           	psect	cinit
  1761  001D52                     __pcinit:
  1762                           	opt stack 0
  1763  001D52                     start_initialization:
  1764                           	opt stack 0
  1765  001D52                     __initialization:
  1766                           	opt stack 0
  1767                           
  1768                           ; Initialize objects allocated to BANK1 (12 bytes)
  1769                           ; load TBLPTR registers with __pidataBANK1
  1770  001D52  0ED6               	movlw	low __pidataBANK1
  1771  001D54  6EF6               	movwf	tblptrl,c
  1772  001D56  0E2C               	movlw	high __pidataBANK1
  1773  001D58  6EF7               	movwf	tblptrh,c
  1774  001D5A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1775  001D5C  6EF8               	movwf	tblptru,c
  1776  001D5E  EE01  F0EF         	lfsr	0,__pdataBANK1
  1777  001D62  EE10 F00C          	lfsr	1,12
  1778  001D66                     copy_data0:
  1779  001D66  0009               	tblrd		*+
  1780  001D68  CFF5 FFEE          	movff	tablat,postinc0
  1781  001D6C  50E5               	movf	postdec1,w,c
  1782  001D6E  50E1               	movf	fsr1l,w,c
  1783  001D70  E1FA               	bnz	copy_data0
  1784                           
  1785                           ; Initialize objects allocated to BANK0 (4 bytes)
  1786                           ; load TBLPTR registers with __pidataBANK0
  1787  001D72  0E00               	movlw	low __pidataBANK0
  1788  001D74  6EF6               	movwf	tblptrl,c
  1789  001D76  0E2D               	movlw	high __pidataBANK0
  1790  001D78  6EF7               	movwf	tblptrh,c
  1791  001D7A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1792  001D7C  6EF8               	movwf	tblptru,c
  1793  001D7E  EE00  F0D8         	lfsr	0,__pdataBANK0
  1794  001D82  EE10 F004          	lfsr	1,4
  1795  001D86                     copy_data1:
  1796  001D86  0009               	tblrd		*+
  1797  001D88  CFF5 FFEE          	movff	tablat,postinc0
  1798  001D8C  50E5               	movf	postdec1,w,c
  1799  001D8E  50E1               	movf	fsr1l,w,c
  1800  001D90  E1FA               	bnz	copy_data1
  1801                           
  1802                           ; Initialize objects allocated to COMRAM (4 bytes)
  1803                           ; load TBLPTR registers with __pidataCOMRAM
  1804  001D92  0EFC               	movlw	low __pidataCOMRAM
  1805  001D94  6EF6               	movwf	tblptrl,c
  1806  001D96  0E2C               	movlw	high __pidataCOMRAM
  1807  001D98  6EF7               	movwf	tblptrh,c
  1808  001D9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1809  001D9C  6EF8               	movwf	tblptru,c
  1810  001D9E  EE00  F042         	lfsr	0,__pdataCOMRAM
  1811  001DA2  EE10 F004          	lfsr	1,4
  1812  001DA6                     copy_data2:
  1813  001DA6  0009               	tblrd		*+
  1814  001DA8  CFF5 FFEE          	movff	tablat,postinc0
  1815  001DAC  50E5               	movf	postdec1,w,c
  1816  001DAE  50E1               	movf	fsr1l,w,c
  1817  001DB0  E1FA               	bnz	copy_data2
  1818                           
  1819                           ; Clear objects allocated to BANK2 (70 bytes)
  1820  001DB2  EE02  F000         	lfsr	0,__pbssBANK2
  1821  001DB6  0E46               	movlw	70
  1822  001DB8                     clear_0:
  1823  001DB8  6AEE               	clrf	postinc0,c
  1824  001DBA  06E8               	decf	wreg,f,c
  1825  001DBC  E1FD               	bnz	clear_0
  1826                           
  1827                           ; Clear objects allocated to BANK1 (186 bytes)
  1828  001DBE  EE01  F000         	lfsr	0,__pbssBANK1
  1829  001DC2  0EBA               	movlw	186
  1830  001DC4                     clear_1:
  1831  001DC4  6AEE               	clrf	postinc0,c
  1832  001DC6  06E8               	decf	wreg,f,c
  1833  001DC8  E1FD               	bnz	clear_1
  1834                           
  1835                           ; Clear objects allocated to BANK0 (16 bytes)
  1836  001DCA  EE00  F0C8         	lfsr	0,__pbssBANK0
  1837  001DCE  0E10               	movlw	16
  1838  001DD0                     clear_2:
  1839  001DD0  6AEE               	clrf	postinc0,c
  1840  001DD2  06E8               	decf	wreg,f,c
  1841  001DD4  E1FD               	bnz	clear_2
  1842                           
  1843                           ; Clear objects allocated to COMRAM (17 bytes)
  1844  001DD6  EE00  F031         	lfsr	0,__pbssCOMRAM
  1845  001DDA  0E11               	movlw	17
  1846  001DDC                     clear_3:
  1847  001DDC  6AEE               	clrf	postinc0,c
  1848  001DDE  06E8               	decf	wreg,f,c
  1849  001DE0  E1FD               	bnz	clear_3
  1850  001DE2                     end_of_initialization:
  1851                           	opt stack 0
  1852  001DE2                     __end_of__initialization:
  1853                           	opt stack 0
  1854  001DE2  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1855  001DE4  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1856  001DE6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1857  001DE8  6EF8               	movwf	tblptru,c
  1858  001DEA  0100               	movlb	0
  1859  001DEC  EF4A  F013         	goto	_main	;jump to C main() function
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           
  1869                           	psect	bssCOMRAM
  1870  000031                     __pbssCOMRAM:
  1871                           	opt stack 0
  1872  000031                     _numOfValidateSamples:
  1873                           	opt stack 0
  1874  000031                     	ds	4
  1875  000035                     TMR0_ISR@CountCallBack:
  1876                           	opt stack 0
  1877  000035                     	ds	2
  1878  000037                     _channelNum:
  1879                           	opt stack 0
  1880  000037                     	ds	2
  1881  000039                     _eusart1RxTail:
  1882                           	opt stack 0
  1883  000039                     	ds	1
  1884  00003A                     _eusart1RxHead:
  1885                           	opt stack 0
  1886  00003A                     	ds	1
  1887  00003B                     _eusart1TxTail:
  1888                           	opt stack 0
  1889  00003B                     	ds	1
  1890  00003C                     _eusart1TxHead:
  1891                           	opt stack 0
  1892  00003C                     	ds	1
  1893  00003D                     _adcSampleMode:
  1894                           	opt stack 0
  1895  00003D                     	ds	1
  1896  00003E                     _numOfReadSamples:
  1897                           	opt stack 0
  1898  00003E                     	ds	4
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           
  1908                           	psect	dataCOMRAM
  1909  000042                     __pdataCOMRAM:
  1910                           	opt stack 0
  1911  000042                     _writeAddress:
  1912                           	opt stack 0
  1913  000042                     	ds	4
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postdec1	equ	0xFE5
  1921                           fsr1l	equ	0xFE1
  1922                           
  1923                           	psect	bssBANK0
  1924  0000C8                     __pbssBANK0:
  1925                           	opt stack 0
  1926  0000C8                     _sampleCount:
  1927                           	opt stack 0
  1928  0000C8                     	ds	2
  1929  0000CA                     _isReWriteDone:
  1930                           	opt stack 0
  1931  0000CA                     	ds	1
  1932  0000CB                     _msgCount:
  1933                           	opt stack 0
  1934  0000CB                     	ds	1
  1935  0000CC                     _crcGiven:
  1936                           	opt stack 0
  1937  0000CC                     	ds	1
  1938  0000CD                     _crcCalc:
  1939                           	opt stack 0
  1940  0000CD                     	ds	1
  1941  0000CE                     _dataSize:
  1942                           	opt stack 0
  1943  0000CE                     	ds	1
  1944  0000CF                     _request:
  1945                           	opt stack 0
  1946  0000CF                     	ds	1
  1947  0000D0                     _group:
  1948                           	opt stack 0
  1949  0000D0                     	ds	1
  1950  0000D1                     _cState:
  1951                           	opt stack 0
  1952  0000D1                     	ds	1
  1953  0000D2                     _eusart1RxCount:
  1954                           	opt stack 0
  1955  0000D2                     	ds	1
  1956  0000D3                     _channel:
  1957                           	opt stack 0
  1958  0000D3                     	ds	1
  1959  0000D4                     _needToSample:
  1960                           	opt stack 0
  1961  0000D4                     	ds	1
  1962  0000D5                     _TimerKeepAliveFlag:
  1963                           	opt stack 0
  1964  0000D5                     	ds	1
  1965  0000D6                     _TimerSamplingFlag:
  1966                           	opt stack 0
  1967  0000D6                     	ds	1
  1968  0000D7                     _TimerOneSecFlag:
  1969                           	opt stack 0
  1970  0000D7                     	ds	1
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1l	equ	0xFE1
  1979                           
  1980                           	psect	dataBANK0
  1981  0000D8                     __pdataBANK0:
  1982                           	opt stack 0
  1983  0000D8                     _readAddress:
  1984                           	opt stack 0
  1985  0000D8                     	ds	4
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           
  1995                           	psect	bssBANK1
  1996  000100                     __pbssBANK1:
  1997                           	opt stack 0
  1998  000100                     _eusart1RxBuffer:
  1999                           	opt stack 0
  2000  000100                     	ds	40
  2001  000128                     _synthCalcParams:
  2002                           	opt stack 0
  2003  000128                     	ds	32
  2004  000148                     _mcuRunTimeIn5SecTicks:
  2005                           	opt stack 0
  2006  000148                     	ds	4
  2007  00014C                     _errno:
  2008                           	opt stack 0
  2009  00014C                     	ds	2
  2010  00014E                     _numSamples:
  2011                           	opt stack 0
  2012  00014E                     	ds	2
  2013  000150                     _count:
  2014                           	opt stack 0
  2015  000150                     	ds	2
  2016  000152                     _sampleArray:
  2017                           	opt stack 0
  2018  000152                     	ds	64
  2019  000192                     _rxMsgData:
  2020                           	opt stack 0
  2021  000192                     	ds	20
  2022  0001A6                     _rxMsgQueue:
  2023                           	opt stack 0
  2024  0001A6                     	ds	20
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           
  2034                           	psect	dataBANK1
  2035  0001EF                     __pdataBANK1:
  2036                           	opt stack 0
  2037  0001EF                     _groupsArray:
  2038                           	opt stack 0
  2039  0001EF                     	ds	12
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           
  2049                           	psect	bssBANK2
  2050  000200                     __pbssBANK2:
  2051                           	opt stack 0
  2052  000200                     _eusart1TxBuffer:
  2053                           	opt stack 0
  2054  000200                     	ds	70
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1l	equ	0xFE1
  2063                           
  2064                           	psect	cstackBANK2
  2065  000246                     __pcstackBANK2:
  2066                           	opt stack 0
  2067  000246                     SampleSingleChannel@dest:
  2068                           	opt stack 0
  2069                           
  2070                           ; 50 bytes @ 0x0
  2071  000246                     	ds	50
  2072  000278                     _SampleSingleChannel$2943:
  2073                           	opt stack 0
  2074                           
  2075                           ; 3 bytes @ 0x32
  2076  000278                     	ds	3
  2077  00027B                     SampleSingleChannel@_adcResult:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x35
  2081  00027B                     	ds	2
  2082  00027D                     SampleSingleChannel@adcRes:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x37
  2086  00027D                     	ds	2
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           
  2096                           	psect	cstackBANK1
  2097  0001BA                     __pcstackBANK1:
  2098                           	opt stack 0
  2099  0001BA                     readUartByte@dest:
  2100                           	opt stack 0
  2101                           
  2102                           ; 50 bytes @ 0x0
  2103  0001BA                     	ds	50
  2104  0001EC                     readUartByte@idx:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x32
  2108  0001EC                     	ds	2
  2109  0001EE                     readUartByte@chRec:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x34
  2113  0001EE                     	ds	1
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           postinc0	equ	0xFEE
  2119                           wreg	equ	0xFE8
  2120                           postdec1	equ	0xFE5
  2121                           fsr1l	equ	0xFE1
  2122                           
  2123                           	psect	cstackBANK0
  2124  000060                     __pcstackBANK0:
  2125                           	opt stack 0
  2126  000060                     ??___ftdiv:
  2127  000060                     sprintf@flag:
  2128                           	opt stack 0
  2129  000060                     strtol@sign:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x0
  2133  000060                     	ds	1
  2134  000061                     sprintf@prec:
  2135                           	opt stack 0
  2136  000061                     strtol@a:
  2137                           	opt stack 0
  2138                           
  2139                           ; 4 bytes @ 0x1
  2140  000061                     	ds	1
  2141  000062                     sprintf@ap:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x2
  2145  000062                     	ds	1
  2146  000063                     ___ftdiv@cntr:
  2147                           	opt stack 0
  2148                           
  2149                           ; 1 bytes @ 0x3
  2150  000063                     	ds	1
  2151  000064                     sprintf@cp:
  2152                           	opt stack 0
  2153  000064                     ___ftdiv@f3:
  2154                           	opt stack 0
  2155                           
  2156                           ; 3 bytes @ 0x4
  2157  000064                     	ds	1
  2158  000065                     strtol@c:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x5
  2162  000065                     	ds	1
  2163  000066                     ?_GetIntFromUartData:
  2164                           	opt stack 0
  2165  000066                     GetIntFromUartData@data:
  2166                           	opt stack 0
  2167  000066                     sprintf@val:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x6
  2171  000066                     	ds	1
  2172  000067                     ___ftdiv@exp:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x7
  2176  000067                     	ds	1
  2177  000068                     sprintf@c:
  2178                           	opt stack 0
  2179  000068                     ___ftdiv@sign:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x8
  2183  000068                     	ds	1
  2184  000069                     ?___ftmul:
  2185                           	opt stack 0
  2186  000069                     ___ftmul@f1:
  2187                           	opt stack 0
  2188  000069                     SendUartSystemInitMessage@dest:
  2189                           	opt stack 0
  2190  000069                     PrintHelpScreen@dest:
  2191                           	opt stack 0
  2192                           
  2193                           ; 50 bytes @ 0x9
  2194  000069                     	ds	1
  2195  00006A                     GetIntFromUartData@dataRegArr:
  2196                           	opt stack 0
  2197                           
  2198                           ; 8 bytes @ 0xA
  2199  00006A                     	ds	2
  2200  00006C                     ___ftmul@f2:
  2201                           	opt stack 0
  2202                           
  2203                           ; 3 bytes @ 0xC
  2204  00006C                     	ds	3
  2205  00006F                     ??___ftmul:
  2206                           
  2207                           ; 1 bytes @ 0xF
  2208  00006F                     	ds	3
  2209  000072                     GetIntFromUartData@c:
  2210                           	opt stack 0
  2211  000072                     ___ftmul@exp:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x12
  2215  000072                     	ds	1
  2216  000073                     GetIntFromUartData@idx:
  2217                           	opt stack 0
  2218  000073                     ___ftmul@f3_as_product:
  2219                           	opt stack 0
  2220                           
  2221                           ; 3 bytes @ 0x13
  2222  000073                     	ds	2
  2223  000075                     AdcSingleSample@data:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x15
  2227  000075                     	ds	1
  2228  000076                     ___ftmul@cntr:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x16
  2232  000076                     	ds	1
  2233  000077                     AdcSingleSample@cType:
  2234                           	opt stack 0
  2235  000077                     ___ftmul@sign:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x17
  2239  000077                     	ds	1
  2240  000078                     ?___fttol:
  2241                           	opt stack 0
  2242  000078                     ___fttol@f1:
  2243                           	opt stack 0
  2244  000078                     AdcSingleSample@retNum:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x18
  2248  000078                     	ds	4
  2249  00007C                     ??___fttol:
  2250                           
  2251                           ; 1 bytes @ 0x1C
  2252  00007C                     	ds	5
  2253  000081                     ___fttol@sign1:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x21
  2257  000081                     	ds	1
  2258  000082                     ___fttol@lval:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x22
  2262  000082                     	ds	4
  2263  000086                     ___fttol@exp1:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x26
  2267  000086                     	ds	1
  2268  000087                     ?___awtoft:
  2269                           	opt stack 0
  2270  000087                     ___awtoft@c:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x27
  2274  000087                     	ds	3
  2275  00008A                     ?___ftneg:
  2276                           	opt stack 0
  2277  00008A                     ___ftneg@f1:
  2278                           	opt stack 0
  2279                           
  2280                           ; 3 bytes @ 0x2A
  2281  00008A                     	ds	3
  2282  00008D                     ?___ftadd:
  2283                           	opt stack 0
  2284  00008D                     ___ftadd@f1:
  2285                           	opt stack 0
  2286                           
  2287                           ; 3 bytes @ 0x2D
  2288  00008D                     	ds	3
  2289  000090                     ___ftadd@f2:
  2290                           	opt stack 0
  2291                           
  2292                           ; 3 bytes @ 0x30
  2293  000090                     	ds	3
  2294  000093                     ??___ftadd:
  2295                           
  2296                           ; 1 bytes @ 0x33
  2297  000093                     	ds	3
  2298  000096                     ___ftadd@sign:
  2299                           	opt stack 0
  2300                           
  2301                           ; 1 bytes @ 0x36
  2302  000096                     	ds	1
  2303  000097                     ___ftadd@exp2:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x37
  2307  000097                     	ds	1
  2308  000098                     ___ftadd@exp1:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x38
  2312  000098                     	ds	1
  2313  000099                     ?___ftsub:
  2314                           	opt stack 0
  2315  000099                     ?_floor:
  2316                           	opt stack 0
  2317  000099                     ?_eval_poly:
  2318                           	opt stack 0
  2319  000099                     CalcSynthRegParams@regArray:
  2320                           	opt stack 0
  2321  000099                     ___ftsub@f1:
  2322                           	opt stack 0
  2323  000099                     floor@x:
  2324                           	opt stack 0
  2325  000099                     eval_poly@x:
  2326                           	opt stack 0
  2327                           
  2328                           ; 3 bytes @ 0x39
  2329  000099                     	ds	2
  2330  00009B                     CalcSynthRegParams@inputFreq:
  2331                           	opt stack 0
  2332                           
  2333                           ; 4 bytes @ 0x3B
  2334  00009B                     	ds	1
  2335  00009C                     eval_poly@d:
  2336                           	opt stack 0
  2337  00009C                     ___ftsub@f2:
  2338                           	opt stack 0
  2339  00009C                     floor@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 3 bytes @ 0x3C
  2343  00009C                     	ds	2
  2344  00009E                     eval_poly@n:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x3E
  2348  00009E                     	ds	1
  2349  00009F                     ??_CalcSynthRegParams:
  2350  00009F                     floor@expon:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0x3F
  2354  00009F                     	ds	1
  2355  0000A0                     ??_eval_poly:
  2356                           
  2357                           ; 1 bytes @ 0x40
  2358  0000A0                     	ds	2
  2359  0000A2                     eval_poly@res:
  2360                           	opt stack 0
  2361                           
  2362                           ; 3 bytes @ 0x42
  2363  0000A2                     	ds	3
  2364  0000A5                     ?_log:
  2365                           	opt stack 0
  2366  0000A5                     ?_ldexp:
  2367                           	opt stack 0
  2368  0000A5                     ldexp@value:
  2369                           	opt stack 0
  2370  0000A5                     log@x:
  2371                           	opt stack 0
  2372                           
  2373                           ; 3 bytes @ 0x45
  2374  0000A5                     	ds	3
  2375  0000A8                     ldexp@newexp:
  2376                           	opt stack 0
  2377  0000A8                     log@exponent:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x48
  2381  0000A8                     	ds	2
  2382  0000AA                     ??_ldexp:
  2383                           
  2384                           ; 1 bytes @ 0x4A
  2385  0000AA                     	ds	1
  2386  0000AB                     UpdateSynthFreq@data:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x4B
  2390  0000AB                     	ds	1
  2391  0000AC                     ?_exp:
  2392                           	opt stack 0
  2393  0000AC                     exp@x:
  2394                           	opt stack 0
  2395                           
  2396                           ; 3 bytes @ 0x4C
  2397  0000AC                     	ds	1
  2398  0000AD                     UpdateSynthFreq@regSynthArray:
  2399                           	opt stack 0
  2400                           
  2401                           ; 16 bytes @ 0x4D
  2402  0000AD                     	ds	2
  2403  0000AF                     _exp$2946:
  2404                           	opt stack 0
  2405                           
  2406                           ; 3 bytes @ 0x4F
  2407  0000AF                     	ds	3
  2408  0000B2                     exp@exponent:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x52
  2412  0000B2                     	ds	2
  2413  0000B4                     exp@sign:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x54
  2417  0000B4                     	ds	1
  2418  0000B5                     ?_pow:
  2419                           	opt stack 0
  2420  0000B5                     pow@x:
  2421                           	opt stack 0
  2422                           
  2423                           ; 3 bytes @ 0x55
  2424  0000B5                     	ds	3
  2425  0000B8                     pow@y:
  2426                           	opt stack 0
  2427                           
  2428                           ; 3 bytes @ 0x58
  2429  0000B8                     	ds	3
  2430  0000BB                     _pow$2944:
  2431                           	opt stack 0
  2432                           
  2433                           ; 3 bytes @ 0x5B
  2434  0000BB                     	ds	2
  2435  0000BD                     UpdateSynthFreq@insertFraqData:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x5D
  2439  0000BD                     	ds	1
  2440  0000BE                     _pow$2945:
  2441                           	opt stack 0
  2442                           
  2443                           ; 3 bytes @ 0x5E
  2444  0000BE                     	ds	3
  2445  0000C1                     pow@sign:
  2446                           	opt stack 0
  2447  0000C1                     GroupRx@data:
  2448                           	opt stack 0
  2449  0000C1                     GroupTx@data:
  2450                           	opt stack 0
  2451  0000C1                     GroupCommon@data:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x61
  2455  0000C1                     	ds	1
  2456  0000C2                     pow@yi:
  2457                           	opt stack 0
  2458                           
  2459                           ; 4 bytes @ 0x62
  2460  0000C2                     	ds	1
  2461  0000C3                     GroupRx@request:
  2462                           	opt stack 0
  2463  0000C3                     GroupTx@request:
  2464                           	opt stack 0
  2465  0000C3                     GroupCommon@request:
  2466                           	opt stack 0
  2467                           
  2468                           ; 1 bytes @ 0x63
  2469  0000C3                     	ds	1
  2470  0000C4                     ??_readUartByte:
  2471                           
  2472                           ; 1 bytes @ 0x64
  2473  0000C4                     	ds	2
  2474  0000C6                     ??_SampleSingleChannel:
  2475                           
  2476                           ; 1 bytes @ 0x66
  2477  0000C6                     	ds	2
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           postinc0	equ	0xFEE
  2483                           wreg	equ	0xFE8
  2484                           postdec1	equ	0xFE5
  2485                           fsr1l	equ	0xFE1
  2486                           
  2487                           	psect	cstackCOMRAM
  2488  000001                     __pcstackCOMRAM:
  2489                           	opt stack 0
  2490  000001                     ?i2___lwmod:
  2491                           	opt stack 0
  2492  000001                     i2___lwmod@dividend:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x0
  2496  000001                     	ds	2
  2497  000003                     i2___lwmod@divisor:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x2
  2501  000003                     	ds	2
  2502  000005                     i2___lwmod@counter:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x4
  2506  000005                     	ds	1
  2507  000006                     ??_INTERRUPT_InterruptManager:
  2508                           
  2509                           ; 1 bytes @ 0x5
  2510  000006                     	ds	18
  2511  000018                     ??_EUSART1_Read:
  2512  000018                     ??_isspace:
  2513  000018                     ??_isdigit:
  2514  000018                     ??_isupper:
  2515  000018                     ??_BlinkOkLeds:
  2516  000018                     ??_keepAliveSignalLed:
  2517  000018                     ??_testLeds:
  2518  000018                     ?_ADC_GetConversion:
  2519                           	opt stack 0
  2520  000018                     ?___wmul:
  2521                           	opt stack 0
  2522  000018                     ?___lwdiv:
  2523                           	opt stack 0
  2524  000018                     ?___ftpack:
  2525                           	opt stack 0
  2526  000018                     ?_frexp:
  2527                           	opt stack 0
  2528  000018                     ?___lmul:
  2529                           	opt stack 0
  2530  000018                     ?___lldiv:
  2531                           	opt stack 0
  2532  000018                     SwSpi_Data_Pin@cPinMode:
  2533                           	opt stack 0
  2534  000018                     SwSpi_Clk_Pin@cPinMode:
  2535                           	opt stack 0
  2536  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  2537                           	opt stack 0
  2538  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  2539                           	opt stack 0
  2540  000018                     EUSART1_Write@txData:
  2541                           	opt stack 0
  2542  000018                     toupper@c:
  2543                           	opt stack 0
  2544  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  2545                           	opt stack 0
  2546  000018                     ___wmul@multiplier:
  2547                           	opt stack 0
  2548  000018                     ___lwdiv@dividend:
  2549                           	opt stack 0
  2550  000018                     memset@p1:
  2551                           	opt stack 0
  2552  000018                     ___ftpack@arg:
  2553                           	opt stack 0
  2554  000018                     ___ftge@ff1:
  2555                           	opt stack 0
  2556  000018                     frexp@value:
  2557                           	opt stack 0
  2558  000018                     make8@data:
  2559                           	opt stack 0
  2560  000018                     ___lmul@multiplier:
  2561                           	opt stack 0
  2562  000018                     ___lldiv@dividend:
  2563                           	opt stack 0
  2564                           
  2565                           ; 4 bytes @ 0x17
  2566  000018                     	ds	1
  2567  000019                     SwSpi_Data_Pin@phrType:
  2568                           	opt stack 0
  2569  000019                     SwSpi_Clk_Pin@phrType:
  2570                           	opt stack 0
  2571  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  2572                           	opt stack 0
  2573  000019                     _isdigit$2620:
  2574                           	opt stack 0
  2575  000019                     _isspace$2623:
  2576                           	opt stack 0
  2577  000019                     _isupper$2626:
  2578                           	opt stack 0
  2579  000019                     testLeds@idx:
  2580                           	opt stack 0
  2581  000019                     UART_Write_Text@text:
  2582                           	opt stack 0
  2583  000019                     EUSART1_Read@readValue:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x18
  2587  000019                     	ds	1
  2588  00001A                     ??_ADC_GetConversion:
  2589  00001A                     ??_TMR0_Initialize:
  2590  00001A                     SWSPI_DAC_send_bits@data:
  2591                           	opt stack 0
  2592  00001A                     SWSPI_Synth_send_bits@data:
  2593                           	opt stack 0
  2594  00001A                     isdigit@c:
  2595                           	opt stack 0
  2596  00001A                     isspace@c:
  2597                           	opt stack 0
  2598  00001A                     isupper@c:
  2599                           	opt stack 0
  2600  00001A                     ___wmul@multiplicand:
  2601                           	opt stack 0
  2602  00001A                     ___lwdiv@divisor:
  2603                           	opt stack 0
  2604  00001A                     memset@c:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x19
  2608  00001A                     	ds	1
  2609  00001B                     ??_UART_Write_Text:
  2610  00001B                     ??_isalpha:
  2611  00001B                     BlinkOkLeds@state:
  2612                           	opt stack 0
  2613  00001B                     SWSPI_DAC_send_bits@count:
  2614                           	opt stack 0
  2615  00001B                     SWSPI_Synth_send_bits@count:
  2616                           	opt stack 0
  2617  00001B                     ___ftpack@exp:
  2618                           	opt stack 0
  2619  00001B                     frexp@eptr:
  2620                           	opt stack 0
  2621  00001B                     ___ftge@ff2:
  2622                           	opt stack 0
  2623                           
  2624                           ; 3 bytes @ 0x1A
  2625  00001B                     	ds	1
  2626  00001C                     SWSPI_DAC_send_bits@phrType:
  2627                           	opt stack 0
  2628  00001C                     SWSPI_Synth_send_bits@phrType:
  2629                           	opt stack 0
  2630  00001C                     ADC_GetConversion@channel:
  2631                           	opt stack 0
  2632  00001C                     make8@dataLocation:
  2633                           	opt stack 0
  2634  00001C                     ___ftpack@sign:
  2635                           	opt stack 0
  2636  00001C                     ___lwdiv@counter:
  2637                           	opt stack 0
  2638  00001C                     _isalpha$2617:
  2639                           	opt stack 0
  2640  00001C                     BlinkOkLeds@idx:
  2641                           	opt stack 0
  2642  00001C                     ___wmul@product:
  2643                           	opt stack 0
  2644  00001C                     memset@n:
  2645                           	opt stack 0
  2646  00001C                     ___lmul@multiplicand:
  2647                           	opt stack 0
  2648  00001C                     ___lldiv@divisor:
  2649                           	opt stack 0
  2650                           
  2651                           ; 4 bytes @ 0x1B
  2652  00001C                     	ds	1
  2653  00001D                     ??_make8:
  2654  00001D                     ??___ftpack:
  2655  00001D                     ??_frexp:
  2656  00001D                     isalpha@c:
  2657                           	opt stack 0
  2658  00001D                     UART_Write_Text@i:
  2659                           	opt stack 0
  2660  00001D                     ___lwdiv@quotient:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x1C
  2664  00001D                     	ds	1
  2665  00001E                     ??___ftge:
  2666  00001E                     memset@p:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0x1D
  2670  00001E                     	ds	1
  2671  00001F                     ?___lwmod:
  2672                           	opt stack 0
  2673  00001F                     ___lwmod@dividend:
  2674                           	opt stack 0
  2675                           
  2676                           ; 2 bytes @ 0x1E
  2677  00001F                     	ds	1
  2678  000020                     ?___altoft:
  2679                           	opt stack 0
  2680  000020                     ?___lltoft:
  2681                           	opt stack 0
  2682  000020                     ?___lwtoft:
  2683                           	opt stack 0
  2684  000020                     ZeroArray@array:
  2685                           	opt stack 0
  2686  000020                     ___lwtoft@c:
  2687                           	opt stack 0
  2688  000020                     ___lmul@product:
  2689                           	opt stack 0
  2690  000020                     ___altoft@c:
  2691                           	opt stack 0
  2692  000020                     ___lldiv@quotient:
  2693                           	opt stack 0
  2694  000020                     ___lltoft@c:
  2695                           	opt stack 0
  2696                           
  2697                           ; 4 bytes @ 0x1F
  2698  000020                     	ds	1
  2699  000021                     ___lwmod@divisor:
  2700                           	opt stack 0
  2701  000021                     SWSPI_send_word@data:
  2702                           	opt stack 0
  2703                           
  2704                           ; 4 bytes @ 0x20
  2705  000021                     	ds	1
  2706  000022                     ZeroArray@size:
  2707                           	opt stack 0
  2708                           
  2709                           ; 2 bytes @ 0x21
  2710  000022                     	ds	1
  2711  000023                     ___lwmod@counter:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x22
  2715  000023                     	ds	1
  2716  000024                     ??___altoft:
  2717  000024                     ??___lltoft:
  2718  000024                     ?_sprintf:
  2719                           	opt stack 0
  2720  000024                     ?_strtol:
  2721                           	opt stack 0
  2722  000024                     ___lldiv@counter:
  2723                           	opt stack 0
  2724  000024                     sprintf@sp:
  2725                           	opt stack 0
  2726  000024                     strtol@s:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0x23
  2730  000024                     	ds	1
  2731  000025                     ?___llmod:
  2732                           	opt stack 0
  2733  000025                     SWSPI_send_word@dataSize:
  2734                           	opt stack 0
  2735  000025                     ___llmod@dividend:
  2736                           	opt stack 0
  2737                           
  2738                           ; 4 bytes @ 0x24
  2739  000025                     	ds	1
  2740  000026                     SWSPI_send_word@datac:
  2741                           	opt stack 0
  2742  000026                     sprintf@f:
  2743                           	opt stack 0
  2744  000026                     strtol@endptr:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x25
  2748  000026                     	ds	1
  2749  000027                     SWSPI_send_word@idx:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x26
  2753  000027                     	ds	1
  2754  000028                     ___altoft@exp:
  2755                           	opt stack 0
  2756  000028                     ___lltoft@exp:
  2757                           	opt stack 0
  2758  000028                     strtol@base:
  2759                           	opt stack 0
  2760                           
  2761                           ; 2 bytes @ 0x27
  2762  000028                     	ds	1
  2763  000029                     SWSPI_send_word@phrType:
  2764                           	opt stack 0
  2765  000029                     ___altoft@sign:
  2766                           	opt stack 0
  2767  000029                     ___llmod@divisor:
  2768                           	opt stack 0
  2769                           
  2770                           ; 4 bytes @ 0x28
  2771  000029                     	ds	1
  2772  00002A                     ??_sprintf:
  2773  00002A                     ??_strtol:
  2774  00002A                     ?___ftdiv:
  2775                           	opt stack 0
  2776  00002A                     ___ftdiv@f1:
  2777                           	opt stack 0
  2778                           
  2779                           ; 3 bytes @ 0x29
  2780  00002A                     	ds	1
  2781  00002B                     
  2782                           ; 1 bytes @ 0x2A
  2783  00002B                     	ds	2
  2784  00002D                     ___llmod@counter:
  2785                           	opt stack 0
  2786  00002D                     ___ftdiv@f2:
  2787                           	opt stack 0
  2788                           
  2789                           ; 3 bytes @ 0x2C
  2790  00002D                     	ds	1
  2791  00002E                     ??_GetIntFromUartData:
  2792  00002E                     
  2793                           ; 1 bytes @ 0x2D
  2794  00002E                     	ds	2
  2795  000030                     ___awtoft@sign:
  2796                           	opt stack 0
  2797                           
  2798                           ; 1 bytes @ 0x2F
  2799  000030                     	ds	1
  2800  000031                     tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           
  2809                           ; 1 bytes @ 0x30
  2810 ;;
  2811 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2812 ;;
  2813 ;; *************** function _main *****************
  2814 ;; Defined at:
  2815 ;;		line 13 in file "main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2829 ;;      Params:         0       0       0       0       0       0       0
  2830 ;;      Locals:         0       0       0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0
  2832 ;;      Totals:         0       0       0       0       0       0       0
  2833 ;;Total ram usage:        0 bytes
  2834 ;; Hardware stack levels required when called:   10
  2835 ;; This function calls:
  2836 ;;		_BlinkOkLeds
  2837 ;;		_InitSystemApplicationManagers
  2838 ;;		_SampleSingleChannel
  2839 ;;		_SendUartSystemInitMessage
  2840 ;;		_SetMcuRunTime
  2841 ;;		_SetMcuSystem
  2842 ;;		_keepAliveSignalLed
  2843 ;;		_readUartByte
  2844 ;; This function is called by:
  2845 ;;		Startup code after reset
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text0
  2850  002694                     __ptext0:
  2851                           	opt stack 0
  2852  002694                     _main:
  2853                           	opt stack 21
  2854                           
  2855                           ;main.c: 16: SetMcuSystem();
  2856                           
  2857                           ;incstack = 0
  2858  002694  EC71  F016         	call	_SetMcuSystem	;wreg free
  2859                           
  2860                           ;main.c: 19: InitSystemApplicationManagers();
  2861  002698  EC45  F016         	call	_InitSystemApplicationManagers	;wreg free
  2862                           
  2863                           ;main.c: 22: SendUartSystemInitMessage();
  2864  00269C  ECB5  F00C         	call	_SendUartSystemInitMessage	;wreg free
  2865                           
  2866                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  2867  0026A0  0E03               	movlw	3
  2868  0026A2  EC69  F011         	call	_BlinkOkLeds
  2869  0026A6                     
  2870                           ;main.c: 29: {
  2871                           ;main.c: 30: readUartByte();
  2872  0026A6  EC1A  F002         	call	_readUartByte	;wreg free
  2873                           
  2874                           ;main.c: 32: if (TimerOneSecFlag == 1)
  2875  0026AA  0100               	movlb	0	; () banked
  2876  0026AC  05D7               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  2877  0026AE  A4D8               	btfss	status,2,c
  2878  0026B0  D006               	goto	l1251
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 33: {
  2882                           ;main.c: 35: SetMcuRunTime();
  2883  0026B2  ECFF  F013         	call	_SetMcuRunTime	;wreg free
  2884                           
  2885                           ;main.c: 36: TimerOneSecFlag = 0;
  2886  0026B6  0E00               	movlw	0
  2887  0026B8  0100               	movlb	0	; () banked
  2888  0026BA  6FD7               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  2889                           
  2890                           ;main.c: 37: }
  2891  0026BC  D7F4               	goto	l1250
  2892  0026BE                     l1251:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 38: else if (TimerKeepAliveFlag == 1)
  2896                           
  2897                           ; BSR set to: 0
  2898  0026BE  05D5               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  2899  0026C0  A4D8               	btfss	status,2,c
  2900  0026C2  D006               	goto	l1253
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 39: {
  2904                           ;main.c: 40: keepAliveSignalLed();
  2905  0026C4  EC2E  F016         	call	_keepAliveSignalLed	;wreg free
  2906                           
  2907                           ;main.c: 41: TimerKeepAliveFlag = 0;
  2908  0026C8  0E00               	movlw	0
  2909  0026CA  0100               	movlb	0	; () banked
  2910  0026CC  6FD5               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  2911                           
  2912                           ;main.c: 42: }
  2913  0026CE  D7EB               	goto	l1250
  2914  0026D0                     l1253:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 43: else if (TimerSamplingFlag == 1)
  2918                           
  2919                           ; BSR set to: 0
  2920  0026D0  05D6               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  2921  0026D2  A4D8               	btfss	status,2,c
  2922  0026D4  D7E8               	goto	l1250
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 44: {
  2926                           ;main.c: 45: if(1 == needToSample)
  2927  0026D6  05D4               	decf	_needToSample& (0+255),w,b	;volatile
  2928  0026D8  A4D8               	btfss	status,2,c
  2929  0026DA  D7E5               	goto	l1250
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 46: {
  2933                           ;main.c: 47: SampleSingleChannel();
  2934  0026DC  EC4D  F00A         	call	_SampleSingleChannel	;wreg free
  2935  0026E0  D7E2               	goto	l1250
  2936  0026E2                     __end_of_main:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           postdec1	equ	0xFE5
  2945                           fsr1l	equ	0xFE1
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function _readUartByte *****************
  2949 ;; Defined at:
  2950 ;;		line 28 in file "EusartApp.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  idx             2   50[BANK1 ] int 
  2955 ;;  dest           50    0[BANK1 ] unsigned char [50]
  2956 ;;  chRec           1   52[BANK1 ] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2966 ;;      Params:         0       0       0       0       0       0       0
  2967 ;;      Locals:         0       0      53       0       0       0       0
  2968 ;;      Temps:          0       3       0       0       0       0       0
  2969 ;;      Totals:         0       3      53       0       0       0       0
  2970 ;;Total ram usage:       56 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    9
  2973 ;; This function calls:
  2974 ;;		_EUSART1_Read
  2975 ;;		_GroupCommon
  2976 ;;		_GroupRx
  2977 ;;		_GroupTx
  2978 ;;		_InitRxMessageParams
  2979 ;;		_UART_Write_Text
  2980 ;;		_sprintf
  2981 ;;		_toupper
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text1
  2988  000434                     __ptext1:
  2989                           	opt stack 0
  2990  000434                     _readUartByte:
  2991                           	opt stack 21
  2992                           
  2993                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2994                           
  2995                           ;incstack = 0
  2996  000434  0E00               	movlw	0
  2997  000436  0101               	movlb	1	; () banked
  2998  000438  6FEE               	movwf	readUartByte@chRec& (0+255),b
  2999                           
  3000                           ;EusartApp.c: 32: char dest[50];
  3001                           ;EusartApp.c: 34: switch(cState)
  3002  00043A  D157               	goto	l172
  3003  00043C                     
  3004                           ;EusartApp.c: 38: InitRxMessageParams();
  3005                           
  3006                           ; BSR set to: 1
  3007  00043C  ECBB  F013         	call	_InitRxMessageParams	;wreg free
  3008                           
  3009                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  3010  000440  0E01               	movlw	1
  3011  000442  0100               	movlb	0	; () banked
  3012  000444  6FD1               	movwf	_cState& (0+255),b
  3013                           
  3014                           ;EusartApp.c: 40: break;
  3015  000446  0012               	return	
  3016  000448                     
  3017                           ; BSR set to: 0
  3018                           ;EusartApp.c: 44: chRec = EUSART1_Read();
  3019                           
  3020                           ; BSR set to: 0
  3021  000448  ECDD  F013         	call	_EUSART1_Read	;wreg free
  3022  00044C  0101               	movlb	1	; () banked
  3023  00044E  6FEE               	movwf	readUartByte@chRec& (0+255),b
  3024                           
  3025                           ; BSR set to: 1
  3026                           ;EusartApp.c: 46: if(chRec == (0x24))
  3027  000450  0E24               	movlw	36
  3028  000452  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3029  000454  A4D8               	btfss	status,2,c
  3030  000456  0012               	return	
  3031                           
  3032                           ; BSR set to: 1
  3033                           ;EusartApp.c: 47: {
  3034                           ;EusartApp.c: 48: cState = READ_STREAM;
  3035  000458  0E02               	movlw	2
  3036  00045A  0100               	movlb	0	; () banked
  3037  00045C  6FD1               	movwf	_cState& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;EusartApp.c: 49: }
  3041                           ;EusartApp.c: 50: break;
  3042  00045E  0012               	return	
  3043  000460                     
  3044                           ; BSR set to: 0
  3045                           ;EusartApp.c: 54: if(eusart1RxCount > 0)
  3046                           
  3047                           ; BSR set to: 0
  3048  000460  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  3049  000462  B4D8               	btfsc	status,2,c
  3050  000464  0012               	return	
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;EusartApp.c: 55: {
  3054                           ;EusartApp.c: 56: chRec = EUSART1_Read();
  3055  000466  ECDD  F013         	call	_EUSART1_Read	;wreg free
  3056  00046A  0101               	movlb	1	; () banked
  3057  00046C  6FEE               	movwf	readUartByte@chRec& (0+255),b
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;EusartApp.c: 57: if(chRec == (0))
  3061  00046E  51EE               	movf	readUartByte@chRec& (0+255),w,b
  3062  000470  B4D8               	btfsc	status,2,c
  3063  000472  0012               	return	
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;EusartApp.c: 61: else if(chRec == (0xd))
  3067                           
  3068                           ; BSR set to: 1
  3069                           
  3070                           ; BSR set to: 1
  3071                           ;EusartApp.c: 60: }
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;EusartApp.c: 58: {
  3075                           ;EusartApp.c: 59: return;
  3076  000474  0E0D               	movlw	13
  3077  000476  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3078  000478  A4D8               	btfss	status,2,c
  3079  00047A  D004               	goto	l182
  3080                           
  3081                           ; BSR set to: 1
  3082                           ;EusartApp.c: 62: {
  3083                           ;EusartApp.c: 63: cState = READ_GROUP;
  3084  00047C  0E03               	movlw	3
  3085  00047E  0100               	movlb	0	; () banked
  3086  000480  6FD1               	movwf	_cState& (0+255),b
  3087                           
  3088                           ;EusartApp.c: 64: }
  3089  000482  0012               	return	
  3090  000484                     l182:
  3091                           
  3092                           ;EusartApp.c: 65: else
  3093                           ;EusartApp.c: 66: {
  3094                           ;EusartApp.c: 67: if(chRec != ' ')
  3095                           
  3096                           ; BSR set to: 0
  3097  000484  0E20               	movlw	32
  3098  000486  0101               	movlb	1	; () banked
  3099  000488  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3100  00048A  B4D8               	btfsc	status,2,c
  3101  00048C  0012               	return	
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;EusartApp.c: 68: {
  3105                           ;EusartApp.c: 69: rxMsgQueue[msgCount++] = chRec;
  3106  00048E  0100               	movlb	0	; () banked
  3107  000490  51CB               	movf	_msgCount& (0+255),w,b
  3108  000492  0D01               	mullw	1
  3109  000494  0EA6               	movlw	low _rxMsgQueue
  3110  000496  24F3               	addwf	prodl,w,c
  3111  000498  6ED9               	movwf	fsr2l,c
  3112  00049A  0E01               	movlw	high _rxMsgQueue
  3113  00049C  20F4               	addwfc	prodh,w,c
  3114  00049E  6EDA               	movwf	fsr2h,c
  3115  0004A0  C1EE  FFDF         	movff	readUartByte@chRec,indf2
  3116                           
  3117                           ; BSR set to: 0
  3118  0004A4  2BCB               	incf	_msgCount& (0+255),f,b
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;EusartApp.c: 76: }
  3122                           ;EusartApp.c: 77: break;
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;EusartApp.c: 73: else
  3126                           ;EusartApp.c: 74: {
  3127                           ;EusartApp.c: 75: return;
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;EusartApp.c: 70: }
  3131                           ;EusartApp.c: 71: }
  3132                           ;EusartApp.c: 72: }
  3133                           
  3134                           ; BSR set to: 0
  3135                           
  3136                           ; BSR set to: 0
  3137  0004A6  0012               	return	
  3138  0004A8                     
  3139                           ; BSR set to: 0
  3140                           ;EusartApp.c: 81: chRec = toupper(rxMsgQueue[0]);
  3141                           
  3142                           ; BSR set to: 0
  3143  0004A8  0101               	movlb	1	; () banked
  3144  0004AA  51A6               	movf	_rxMsgQueue& (0+255),w,b
  3145  0004AC  EC50  F016         	call	_toupper
  3146  0004B0  0101               	movlb	1	; () banked
  3147  0004B2  6FEE               	movwf	readUartByte@chRec& (0+255),b
  3148                           
  3149                           ;EusartApp.c: 83: switch(chRec)
  3150  0004B4  D026               	goto	l187
  3151  0004B6                     
  3152                           ; BSR set to: 1
  3153                           ;EusartApp.c: 87: group = RX_GROUP;
  3154                           
  3155                           ; BSR set to: 1
  3156  0004B6  0E00               	movlw	0
  3157  0004B8  0100               	movlb	0	; () banked
  3158  0004BA  6FD0               	movwf	_group& (0+255),b
  3159                           
  3160                           ;EusartApp.c: 88: cState = READ_REQUEST;
  3161  0004BC  0E04               	movlw	4
  3162  0004BE  6FD1               	movwf	_cState& (0+255),b
  3163                           
  3164                           ;EusartApp.c: 89: break;
  3165  0004C0  0012               	return	
  3166  0004C2                     
  3167                           ;EusartApp.c: 93: group = TX_GROUP;
  3168                           
  3169                           ; BSR set to: 0
  3170  0004C2  0E01               	movlw	1
  3171  0004C4  0100               	movlb	0	; () banked
  3172  0004C6  6FD0               	movwf	_group& (0+255),b
  3173                           
  3174                           ;EusartApp.c: 94: cState = READ_REQUEST;
  3175  0004C8  0E04               	movlw	4
  3176  0004CA  6FD1               	movwf	_cState& (0+255),b
  3177                           
  3178                           ;EusartApp.c: 95: break;
  3179  0004CC  0012               	return	
  3180  0004CE                     
  3181                           ;EusartApp.c: 99: group = COMMON_GROUP;
  3182                           
  3183                           ; BSR set to: 0
  3184  0004CE  0E02               	movlw	2
  3185  0004D0  0100               	movlb	0	; () banked
  3186  0004D2  6FD0               	movwf	_group& (0+255),b
  3187                           
  3188                           ;EusartApp.c: 100: cState = READ_REQUEST;
  3189  0004D4  0E04               	movlw	4
  3190  0004D6  6FD1               	movwf	_cState& (0+255),b
  3191                           
  3192                           ;EusartApp.c: 101: break;
  3193  0004D8  0012               	return	
  3194  0004DA                     
  3195                           ;EusartApp.c: 104: sprintf(dest, "NOT O.K \n\r");
  3196                           
  3197                           ; BSR set to: 0
  3198  0004DA  0EBA               	movlw	low readUartByte@dest
  3199  0004DC  6E24               	movwf	sprintf@sp,c
  3200  0004DE  0E01               	movlw	high readUartByte@dest
  3201  0004E0  6E25               	movwf	sprintf@sp+1,c
  3202  0004E2  0ECE               	movlw	low STR_8
  3203  0004E4  6E26               	movwf	sprintf@f,c
  3204  0004E6  0E7F               	movlw	high STR_8
  3205  0004E8  6E27               	movwf	sprintf@f+1,c
  3206  0004EA  ECA7  F006         	call	_sprintf	;wreg free
  3207                           
  3208                           ;EusartApp.c: 105: UART_Write_Text(dest);
  3209  0004EE  0EBA               	movlw	low readUartByte@dest
  3210  0004F0  6E19               	movwf	UART_Write_Text@text,c
  3211  0004F2  0E01               	movlw	high readUartByte@dest
  3212  0004F4  6E1A               	movwf	UART_Write_Text@text+1,c
  3213  0004F6  EC98  F010         	call	_UART_Write_Text	;wreg free
  3214                           
  3215                           ;EusartApp.c: 106: cState = START_RX_MESSAGE_READ;
  3216  0004FA  0E00               	movlw	0
  3217  0004FC  0100               	movlb	0	; () banked
  3218  0004FE  6FD1               	movwf	_cState& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;EusartApp.c: 108: }
  3222                           
  3223                           ;EusartApp.c: 107: break;
  3224  000500  0012               	return	
  3225  000502                     l187:
  3226                           
  3227                           ; BSR set to: 0
  3228  000502  0101               	movlb	1	; () banked
  3229  000504  51EE               	movf	readUartByte@chRec& (0+255),w,b
  3230                           
  3231                           ; Switch size 1, requested type "space"
  3232                           ; Number of cases is 3, Range of values is 82 to 84
  3233                           ; switch strategies available:
  3234                           ; Name         Instructions Cycles
  3235                           ; simple_byte           10     6 (average)
  3236                           ;	Chosen strategy is simple_byte
  3237  000506  0A52               	xorlw	82	; case 82
  3238  000508  B4D8               	btfsc	status,2,c
  3239  00050A  D7D5               	goto	l188
  3240  00050C  0A01               	xorlw	1	; case 83
  3241  00050E  B4D8               	btfsc	status,2,c
  3242  000510  D7DE               	goto	l191
  3243  000512  0A07               	xorlw	7	; case 84
  3244  000514  B4D8               	btfsc	status,2,c
  3245  000516  D7D5               	goto	l190
  3246  000518  D7E0               	goto	l192
  3247  00051A                     
  3248                           ;EusartApp.c: 113: chRec = toupper(rxMsgQueue[1]);
  3249                           
  3250                           ; BSR set to: 1
  3251  00051A  0101               	movlb	1	; () banked
  3252  00051C  51A7               	movf	(_rxMsgQueue+1)& (0+255),w,b
  3253  00051E  EC50  F016         	call	_toupper
  3254  000522  0101               	movlb	1	; () banked
  3255  000524  6FEE               	movwf	readUartByte@chRec& (0+255),b
  3256                           
  3257                           ;EusartApp.c: 115: switch(group)
  3258  000526  D072               	goto	l194
  3259  000528                     
  3260                           ;EusartApp.c: 119: if( chRec == 'I' || chRec == 'F' || chRec == 'Q' ||
  3261                           ;EusartApp.c: 120: chRec == 'X' || chRec == 'C' || chRec == 'S' ||
  3262                           ;EusartApp.c: 121: chRec == 'C')
  3263                           
  3264                           ; BSR set to: 1
  3265  000528  0E49               	movlw	73
  3266  00052A  0101               	movlb	1	; () banked
  3267  00052C  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3268  00052E  B4D8               	btfsc	status,2,c
  3269  000530  D018               	goto	u7810
  3270                           
  3271                           ; BSR set to: 1
  3272  000532  0E46               	movlw	70
  3273  000534  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3274  000536  B4D8               	btfsc	status,2,c
  3275  000538  D014               	goto	u7810
  3276                           
  3277                           ; BSR set to: 1
  3278  00053A  0E51               	movlw	81
  3279  00053C  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3280  00053E  B4D8               	btfsc	status,2,c
  3281  000540  D010               	goto	u7810
  3282                           
  3283                           ; BSR set to: 1
  3284  000542  0E58               	movlw	88
  3285  000544  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3286  000546  B4D8               	btfsc	status,2,c
  3287  000548  D00C               	goto	u7810
  3288                           
  3289                           ; BSR set to: 1
  3290  00054A  0E43               	movlw	67
  3291  00054C  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3292  00054E  B4D8               	btfsc	status,2,c
  3293  000550  D008               	goto	u7810
  3294                           
  3295                           ; BSR set to: 1
  3296  000552  0E53               	movlw	83
  3297  000554  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3298  000556  B4D8               	btfsc	status,2,c
  3299  000558  D004               	goto	u7810
  3300                           
  3301                           ; BSR set to: 1
  3302  00055A  0E43               	movlw	67
  3303  00055C  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3304  00055E  A4D8               	btfss	status,2,c
  3305  000560  D007               	goto	l196
  3306  000562                     u7810:
  3307                           
  3308                           ; BSR set to: 1
  3309                           ;EusartApp.c: 122: {
  3310                           ;EusartApp.c: 124: request = chRec - '0';
  3311                           
  3312                           ; BSR set to: 1
  3313  000562  51EE               	movf	readUartByte@chRec& (0+255),w,b
  3314  000564  0FD0               	addlw	208
  3315  000566  0100               	movlb	0	; () banked
  3316  000568  6FCF               	movwf	_request& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;EusartApp.c: 125: cState = READ_DATA_SIZE;
  3320  00056A  0E05               	movlw	5
  3321  00056C  6FD1               	movwf	_cState& (0+255),b
  3322                           
  3323                           ;EusartApp.c: 127: }
  3324  00056E  0012               	return	
  3325  000570                     l196:
  3326                           
  3327                           ;EusartApp.c: 128: else
  3328                           ;EusartApp.c: 129: {
  3329                           ;EusartApp.c: 130: UART_Write_Text("NOT OK \n\r");
  3330                           
  3331                           ; BSR set to: 0
  3332  000570  0ED9               	movlw	low STR_1
  3333  000572  6E19               	movwf	UART_Write_Text@text,c
  3334  000574  0E7F               	movlw	high STR_1
  3335  000576  6E1A               	movwf	UART_Write_Text@text+1,c
  3336  000578  EC98  F010         	call	_UART_Write_Text	;wreg free
  3337                           
  3338                           ;EusartApp.c: 131: cState = START_RX_MESSAGE_READ;
  3339  00057C  0E00               	movlw	0
  3340  00057E  0100               	movlb	0	; () banked
  3341  000580  6FD1               	movwf	_cState& (0+255),b
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;EusartApp.c: 132: }
  3345                           ;EusartApp.c: 133: return;
  3346                           
  3347                           ; BSR set to: 0
  3348  000582  0012               	return	
  3349  000584                     
  3350                           ; BSR set to: 0
  3351                           ;EusartApp.c: 137: if(chRec == 'I' || chRec == 'F' || chRec == 'Q' || chRec == 'X' || ch
      +                          Rec == 'B' || chRec == 'S')
  3352                           
  3353                           ; BSR set to: 0
  3354  000584  0E49               	movlw	73
  3355  000586  0101               	movlb	1	; () banked
  3356  000588  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3357  00058A  B4D8               	btfsc	status,2,c
  3358  00058C  D014               	goto	u7870
  3359                           
  3360                           ; BSR set to: 1
  3361  00058E  0E46               	movlw	70
  3362  000590  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3363  000592  B4D8               	btfsc	status,2,c
  3364  000594  D010               	goto	u7870
  3365                           
  3366                           ; BSR set to: 1
  3367  000596  0E51               	movlw	81
  3368  000598  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3369  00059A  B4D8               	btfsc	status,2,c
  3370  00059C  D00C               	goto	u7870
  3371                           
  3372                           ; BSR set to: 1
  3373  00059E  0E58               	movlw	88
  3374  0005A0  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3375  0005A2  B4D8               	btfsc	status,2,c
  3376  0005A4  D008               	goto	u7870
  3377                           
  3378                           ; BSR set to: 1
  3379  0005A6  0E42               	movlw	66
  3380  0005A8  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3381  0005AA  B4D8               	btfsc	status,2,c
  3382  0005AC  D004               	goto	u7870
  3383                           
  3384                           ; BSR set to: 1
  3385  0005AE  0E53               	movlw	83
  3386  0005B0  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3387  0005B2  A4D8               	btfss	status,2,c
  3388  0005B4  D007               	goto	l201
  3389  0005B6                     u7870:
  3390                           
  3391                           ; BSR set to: 1
  3392                           ;EusartApp.c: 138: {
  3393                           ;EusartApp.c: 139: request = (chRec - '0');
  3394                           
  3395                           ; BSR set to: 1
  3396  0005B6  51EE               	movf	readUartByte@chRec& (0+255),w,b
  3397  0005B8  0FD0               	addlw	208
  3398  0005BA  0100               	movlb	0	; () banked
  3399  0005BC  6FCF               	movwf	_request& (0+255),b
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;EusartApp.c: 140: cState = READ_DATA_SIZE;
  3403  0005BE  0E05               	movlw	5
  3404  0005C0  6FD1               	movwf	_cState& (0+255),b
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;EusartApp.c: 142: }
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;EusartApp.c: 141: return;
  3411  0005C2  0012               	return	
  3412  0005C4                     l201:
  3413                           
  3414                           ;EusartApp.c: 143: else
  3415                           ;EusartApp.c: 144: {
  3416                           ;EusartApp.c: 145: UART_Write_Text("NOT OK \n\r");
  3417                           
  3418                           ; BSR set to: 0
  3419  0005C4  0ED9               	movlw	low STR_1
  3420  0005C6  6E19               	movwf	UART_Write_Text@text,c
  3421  0005C8  0E7F               	movlw	high STR_1
  3422  0005CA  6E1A               	movwf	UART_Write_Text@text+1,c
  3423  0005CC  EC98  F010         	call	_UART_Write_Text	;wreg free
  3424                           
  3425                           ;EusartApp.c: 146: cState = START_RX_MESSAGE_READ;
  3426  0005D0  0E00               	movlw	0
  3427  0005D2  0100               	movlb	0	; () banked
  3428  0005D4  6FD1               	movwf	_cState& (0+255),b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;EusartApp.c: 147: }
  3432                           ;EusartApp.c: 148: break;
  3433  0005D6  0012               	return	
  3434  0005D8                     
  3435                           ; BSR set to: 0
  3436                           ;EusartApp.c: 152: if(chRec == 'H' || chRec == 'L')
  3437                           
  3438                           ; BSR set to: 0
  3439  0005D8  0E48               	movlw	72
  3440  0005DA  0101               	movlb	1	; () banked
  3441  0005DC  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3442  0005DE  B4D8               	btfsc	status,2,c
  3443  0005E0  D004               	goto	u7890
  3444                           
  3445                           ; BSR set to: 1
  3446  0005E2  0E4C               	movlw	76
  3447  0005E4  19EE               	xorwf	readUartByte@chRec& (0+255),w,b
  3448  0005E6  A4D8               	btfss	status,2,c
  3449  0005E8  D007               	goto	l207
  3450  0005EA                     u7890:
  3451                           
  3452                           ; BSR set to: 1
  3453                           ;EusartApp.c: 153: {
  3454                           ;EusartApp.c: 154: request = (chRec - '0');
  3455                           
  3456                           ; BSR set to: 1
  3457  0005EA  51EE               	movf	readUartByte@chRec& (0+255),w,b
  3458  0005EC  0FD0               	addlw	208
  3459  0005EE  0100               	movlb	0	; () banked
  3460  0005F0  6FCF               	movwf	_request& (0+255),b
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;EusartApp.c: 155: cState = READ_DATA_SIZE;
  3464  0005F2  0E05               	movlw	5
  3465  0005F4  6FD1               	movwf	_cState& (0+255),b
  3466                           
  3467                           ;EusartApp.c: 156: }
  3468  0005F6  0012               	return	
  3469  0005F8                     l207:
  3470                           
  3471                           ;EusartApp.c: 157: else
  3472                           ;EusartApp.c: 158: {
  3473                           ;EusartApp.c: 159: UART_Write_Text("NOT OK \n\r");
  3474                           
  3475                           ; BSR set to: 0
  3476  0005F8  0ED9               	movlw	low STR_1
  3477  0005FA  6E19               	movwf	UART_Write_Text@text,c
  3478  0005FC  0E7F               	movlw	high STR_1
  3479  0005FE  6E1A               	movwf	UART_Write_Text@text+1,c
  3480  000600  EC98  F010         	call	_UART_Write_Text	;wreg free
  3481                           
  3482                           ;EusartApp.c: 160: cState = START_RX_MESSAGE_READ;
  3483  000604  0E00               	movlw	0
  3484  000606  0100               	movlb	0	; () banked
  3485  000608  6FD1               	movwf	_cState& (0+255),b
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;EusartApp.c: 161: }
  3489                           ;EusartApp.c: 162: }
  3490  00060A  0012               	return	
  3491  00060C                     l194:
  3492                           
  3493                           ; BSR set to: 0
  3494  00060C  0100               	movlb	0	; () banked
  3495  00060E  51D0               	movf	_group& (0+255),w,b
  3496                           
  3497                           ; Switch size 1, requested type "space"
  3498                           ; Number of cases is 3, Range of values is 0 to 2
  3499                           ; switch strategies available:
  3500                           ; Name         Instructions Cycles
  3501                           ; simple_byte           10     6 (average)
  3502                           ;	Chosen strategy is simple_byte
  3503  000610  0A00               	xorlw	0	; case 0
  3504  000612  B4D8               	btfsc	status,2,c
  3505  000614  D789               	goto	l195
  3506  000616  0A01               	xorlw	1	; case 1
  3507  000618  B4D8               	btfsc	status,2,c
  3508  00061A  D7B4               	goto	l200
  3509  00061C  0A03               	xorlw	3	; case 2
  3510  00061E  A4D8               	btfss	status,2,c
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;EusartApp.c: 163: return;
  3514  000620  0012               	return	
  3515  000622  D7DA               	goto	l206
  3516  000624                     
  3517                           ; BSR set to: 0
  3518                           ;EusartApp.c: 167: dataSize = msgCount - 2;
  3519                           
  3520                           ; BSR set to: 0
  3521  000624  51CB               	movf	_msgCount& (0+255),w,b
  3522  000626  0FFE               	addlw	254
  3523  000628  6FCE               	movwf	_dataSize& (0+255),b
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;EusartApp.c: 168: rxMsgData[(0x0)] = dataSize;
  3527  00062A  C0CE  F192         	movff	_dataSize,_rxMsgData
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;EusartApp.c: 169: if(dataSize == 0)
  3531  00062E  51CE               	movf	_dataSize& (0+255),w,b
  3532  000630  A4D8               	btfss	status,2,c
  3533  000632  D003               	goto	l212
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;EusartApp.c: 170: {
  3537                           ;EusartApp.c: 171: cState = JUMP_FUNCTION;
  3538  000634  0E08               	movlw	8
  3539  000636  6FD1               	movwf	_cState& (0+255),b
  3540                           
  3541                           ;EusartApp.c: 172: }
  3542  000638  0012               	return	
  3543  00063A                     l212:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;EusartApp.c: 173: else
  3547                           ;EusartApp.c: 174: {
  3548                           ;EusartApp.c: 175: cState = READ_DATA;
  3549                           
  3550                           ; BSR set to: 0
  3551  00063A  0E06               	movlw	6
  3552  00063C  6FD1               	movwf	_cState& (0+255),b
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;EusartApp.c: 176: }
  3556                           ;EusartApp.c: 178: break;
  3557  00063E  0012               	return	
  3558  000640                     
  3559                           ; BSR set to: 0
  3560                           ;EusartApp.c: 182: for(int idx = 1; idx < dataSize + 1; idx++)
  3561                           
  3562                           ; BSR set to: 0
  3563  000640  0E00               	movlw	0
  3564  000642  0101               	movlb	1	; () banked
  3565  000644  6FED               	movwf	(readUartByte@idx+1)& (0+255),b
  3566  000646  0E01               	movlw	1
  3567  000648  6FEC               	movwf	readUartByte@idx& (0+255),b
  3568  00064A  D01B               	goto	l215
  3569  00064C                     
  3570                           ;EusartApp.c: 183: {
  3571                           ;EusartApp.c: 184: rxMsgData[idx] = rxMsgQueue[(0x2) + idx - 1];
  3572                           
  3573                           ; BSR set to: 1
  3574  00064C  0E01               	movlw	1
  3575  00064E  0101               	movlb	1	; () banked
  3576  000650  25EC               	addwf	readUartByte@idx& (0+255),w,b
  3577  000652  0100               	movlb	0	; () banked
  3578  000654  6FC4               	movwf	??_readUartByte& (0+255),b
  3579  000656  0E00               	movlw	0
  3580  000658  0101               	movlb	1	; () banked
  3581  00065A  21ED               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3582  00065C  0100               	movlb	0	; () banked
  3583  00065E  6FC5               	movwf	(??_readUartByte+1)& (0+255),b
  3584  000660  0EA6               	movlw	low _rxMsgQueue
  3585  000662  25C4               	addwf	??_readUartByte& (0+255),w,b
  3586  000664  6ED9               	movwf	fsr2l,c
  3587  000666  0E01               	movlw	high _rxMsgQueue
  3588  000668  21C5               	addwfc	(??_readUartByte+1)& (0+255),w,b
  3589  00066A  6EDA               	movwf	fsr2h,c
  3590  00066C  0E92               	movlw	low _rxMsgData
  3591  00066E  0101               	movlb	1	; () banked
  3592  000670  25EC               	addwf	readUartByte@idx& (0+255),w,b
  3593  000672  6EE1               	movwf	fsr1l,c
  3594  000674  0E01               	movlw	high _rxMsgData
  3595  000676  21ED               	addwfc	(readUartByte@idx+1)& (0+255),w,b
  3596  000678  6EE2               	movwf	fsr1h,c
  3597  00067A  CFDF FFE7          	movff	indf2,indf1
  3598                           
  3599                           ; BSR set to: 1
  3600  00067E  4BEC               	infsnz	readUartByte@idx& (0+255),f,b
  3601  000680  2BED               	incf	(readUartByte@idx+1)& (0+255),f,b
  3602  000682                     l215:
  3603                           
  3604                           ; BSR set to: 1
  3605                           
  3606                           ; BSR set to: 1
  3607  000682  0100               	movlb	0	; () banked
  3608  000684  51CE               	movf	_dataSize& (0+255),w,b
  3609  000686  6FC4               	movwf	??_readUartByte& (0+255),b
  3610  000688  6BC5               	clrf	(??_readUartByte+1)& (0+255),b
  3611  00068A  0E01               	movlw	1
  3612  00068C  27C4               	addwf	??_readUartByte& (0+255),f,b
  3613  00068E  0E00               	movlw	0
  3614  000690  23C5               	addwfc	(??_readUartByte+1)& (0+255),f,b
  3615  000692  51C4               	movf	??_readUartByte& (0+255),w,b
  3616  000694  0101               	movlb	1	; () banked
  3617  000696  5DEC               	subwf	readUartByte@idx& (0+255),w,b
  3618  000698  51ED               	movf	(readUartByte@idx+1)& (0+255),w,b
  3619  00069A  0A80               	xorlw	128
  3620  00069C  0100               	movlb	0	; () banked
  3621  00069E  6FC6               	movwf	(??_readUartByte+2)& (0+255),b
  3622  0006A0  51C5               	movf	(??_readUartByte+1)& (0+255),w,b
  3623  0006A2  0A80               	xorlw	128
  3624  0006A4  59C6               	subwfb	(??_readUartByte+2)& (0+255),w,b
  3625  0006A6  A0D8               	btfss	status,0,c
  3626  0006A8  D7D1               	goto	l216
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;EusartApp.c: 185: }
  3630                           ;EusartApp.c: 187: cState = JUMP_FUNCTION;
  3631                           
  3632                           ; BSR set to: 0
  3633  0006AA  0E08               	movlw	8
  3634  0006AC  6FD1               	movwf	_cState& (0+255),b
  3635                           
  3636                           ;EusartApp.c: 188: break;
  3637  0006AE  0012               	return	
  3638  0006B0                     
  3639                           ; BSR set to: 0
  3640                           ;EusartApp.c: 192: groupsArray[group](request, rxMsgData);
  3641                           
  3642                           ; BSR set to: 0
  3643  0006B0  51D0               	movf	_group& (0+255),w,b
  3644  0006B2  0D02               	mullw	2
  3645  0006B4  0EEF               	movlw	low _groupsArray
  3646  0006B6  24F3               	addwf	prodl,w,c
  3647  0006B8  6ED9               	movwf	fsr2l,c
  3648  0006BA  0E01               	movlw	high _groupsArray
  3649  0006BC  20F4               	addwfc	prodh,w,c
  3650  0006BE  6EDA               	movwf	fsr2h,c
  3651  0006C0  D801               	call	u7928
  3652  0006C2  D00F               	goto	u7929
  3653  0006C4                     u7928:
  3654  0006C4  0005               	push	
  3655  0006C6  6EFA               	movwf	pclath,c
  3656  0006C8  50DE               	movf	postinc2,w,c
  3657  0006CA  6EFD               	movwf	tosl,c
  3658  0006CC  50DE               	movf	postinc2,w,c
  3659  0006CE  6EFE               	movwf	tosh,c
  3660  0006D0  50F8               	movf	tblptru,w,c
  3661  0006D2  6EFF               	movwf	tosu,c
  3662  0006D4  50FA               	movf	pclath,w,c
  3663  0006D6  0E92               	movlw	low _rxMsgData
  3664  0006D8  6FC1               	movwf	GroupCommon@data& (0+255),b
  3665  0006DA  0E01               	movlw	high _rxMsgData
  3666  0006DC  6FC2               	movwf	(GroupCommon@data+1)& (0+255),b
  3667  0006DE  51CF               	movf	_request& (0+255),w,b
  3668  0006E0  0012               	return		;indir
  3669  0006E2                     u7929:
  3670                           
  3671                           ;EusartApp.c: 193: cState = START_RX_MESSAGE_READ;
  3672  0006E2  0E00               	movlw	0
  3673  0006E4  0100               	movlb	0	; () banked
  3674  0006E6  6FD1               	movwf	_cState& (0+255),b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;EusartApp.c: 195: }
  3678                           
  3679                           ;EusartApp.c: 194: break;
  3680  0006E8  0012               	return	
  3681  0006EA                     l172:
  3682                           
  3683                           ; BSR set to: 0
  3684  0006EA  0100               	movlb	0	; () banked
  3685  0006EC  51D1               	movf	_cState& (0+255),w,b
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 8, Range of values is 0 to 8
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte           25    13 (average)
  3692                           ;	Chosen strategy is simple_byte
  3693  0006EE  0A00               	xorlw	0	; case 0
  3694  0006F0  B4D8               	btfsc	status,2,c
  3695  0006F2  D6A4               	goto	l173
  3696  0006F4  0A01               	xorlw	1	; case 1
  3697  0006F6  B4D8               	btfsc	status,2,c
  3698  0006F8  D6A7               	goto	l175
  3699  0006FA  0A03               	xorlw	3	; case 2
  3700  0006FC  B4D8               	btfsc	status,2,c
  3701  0006FE  D6B0               	goto	l177
  3702  000700  0A01               	xorlw	1	; case 3
  3703  000702  B4D8               	btfsc	status,2,c
  3704  000704  D6D1               	goto	l186
  3705  000706  0A07               	xorlw	7	; case 4
  3706  000708  B4D8               	btfsc	status,2,c
  3707  00070A  D707               	goto	l193
  3708  00070C  0A01               	xorlw	1	; case 5
  3709  00070E  B4D8               	btfsc	status,2,c
  3710  000710  D789               	goto	l211
  3711  000712  0A03               	xorlw	3	; case 6
  3712  000714  B4D8               	btfsc	status,2,c
  3713  000716  D794               	goto	l214
  3714  000718  0A0E               	xorlw	14	; case 8
  3715  00071A  A4D8               	btfss	status,2,c
  3716  00071C  0012               	return	
  3717  00071E  D7C8               	goto	l218
  3718  000720                     __end_of_readUartByte:
  3719                           	opt stack 0
  3720                           tosu	equ	0xFFF
  3721                           tosh	equ	0xFFE
  3722                           tosl	equ	0xFFD
  3723                           pclath	equ	0xFFA
  3724                           tblptru	equ	0xFF8
  3725                           tblptrh	equ	0xFF7
  3726                           tblptrl	equ	0xFF6
  3727                           tablat	equ	0xFF5
  3728                           prodh	equ	0xFF4
  3729                           prodl	equ	0xFF3
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           indf1	equ	0xFE7
  3733                           postdec1	equ	0xFE5
  3734                           fsr1h	equ	0xFE2
  3735                           fsr1l	equ	0xFE1
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           fsr2h	equ	0xFDA
  3739                           fsr2l	equ	0xFD9
  3740                           status	equ	0xFD8
  3741                           
  3742 ;; *************** function _InitRxMessageParams *****************
  3743 ;; Defined at:
  3744 ;;		line 198 in file "EusartApp.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3758 ;;      Params:         0       0       0       0       0       0       0
  3759 ;;      Locals:         0       0       0       0       0       0       0
  3760 ;;      Temps:          0       0       0       0       0       0       0
  3761 ;;      Totals:         0       0       0       0       0       0       0
  3762 ;;Total ram usage:        0 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    5
  3765 ;; This function calls:
  3766 ;;		_ZeroArray
  3767 ;; This function is called by:
  3768 ;;		_readUartByte
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text2
  3773  002776                     __ptext2:
  3774                           	opt stack 0
  3775  002776                     _InitRxMessageParams:
  3776                           	opt stack 24
  3777                           
  3778                           ;EusartApp.c: 200: group = 0;
  3779                           
  3780                           ;incstack = 0
  3781  002776  0E00               	movlw	0
  3782  002778  0100               	movlb	0	; () banked
  3783  00277A  6FD0               	movwf	_group& (0+255),b
  3784                           
  3785                           ;EusartApp.c: 201: request = 0;
  3786  00277C  0E00               	movlw	0
  3787  00277E  6FCF               	movwf	_request& (0+255),b
  3788                           
  3789                           ;EusartApp.c: 202: msgCount = 0;
  3790  002780  0E00               	movlw	0
  3791  002782  6FCB               	movwf	_msgCount& (0+255),b
  3792                           
  3793                           ;EusartApp.c: 203: dataSize = 0;
  3794  002784  0E00               	movlw	0
  3795  002786  6FCE               	movwf	_dataSize& (0+255),b
  3796                           
  3797                           ;EusartApp.c: 204: crcCalc = 0;
  3798  002788  0E00               	movlw	0
  3799  00278A  6FCD               	movwf	_crcCalc& (0+255),b
  3800                           
  3801                           ;EusartApp.c: 205: crcGiven = 0;
  3802  00278C  0E00               	movlw	0
  3803  00278E  6FCC               	movwf	_crcGiven& (0+255),b
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;EusartApp.c: 206: ZeroArray(rxMsgQueue, (0x14));
  3807  002790  0EA6               	movlw	low _rxMsgQueue
  3808  002792  6E20               	movwf	ZeroArray@array,c
  3809  002794  0E01               	movlw	high _rxMsgQueue
  3810  002796  6E21               	movwf	ZeroArray@array+1,c
  3811  002798  0E00               	movlw	0
  3812  00279A  6E23               	movwf	ZeroArray@size+1,c
  3813  00279C  0E14               	movlw	20
  3814  00279E  6E22               	movwf	ZeroArray@size,c
  3815  0027A0  EC04  F016         	call	_ZeroArray
  3816                           
  3817                           ;EusartApp.c: 207: ZeroArray(rxMsgData, (0x14));
  3818  0027A4  0E92               	movlw	low _rxMsgData
  3819  0027A6  6E20               	movwf	ZeroArray@array,c
  3820  0027A8  0E01               	movlw	high _rxMsgData
  3821  0027AA  6E21               	movwf	ZeroArray@array+1,c
  3822  0027AC  0E00               	movlw	0
  3823  0027AE  6E23               	movwf	ZeroArray@size+1,c
  3824  0027B0  0E14               	movlw	20
  3825  0027B2  6E22               	movwf	ZeroArray@size,c
  3826  0027B4  EC04  F016         	call	_ZeroArray	;wreg free
  3827  0027B8  0012               	return		;funcret
  3828  0027BA                     __end_of_InitRxMessageParams:
  3829                           	opt stack 0
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           pclath	equ	0xFFA
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           indf1	equ	0xFE7
  3843                           postdec1	equ	0xFE5
  3844                           fsr1h	equ	0xFE2
  3845                           fsr1l	equ	0xFE1
  3846                           indf2	equ	0xFDF
  3847                           postinc2	equ	0xFDE
  3848                           fsr2h	equ	0xFDA
  3849                           fsr2l	equ	0xFD9
  3850                           status	equ	0xFD8
  3851                           
  3852 ;; *************** function _GroupCommon *****************
  3853 ;; Defined at:
  3854 ;;		line 80 in file "MessageFunctions.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  request         1    wreg     enum E6
  3857 ;;  data            2   97[BANK0 ] PTR unsigned char 
  3858 ;;		 -> rxMsgData(20), 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  request         1   99[BANK0 ] enum E6
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3870 ;;      Params:         0       2       0       0       0       0       0
  3871 ;;      Locals:         0       1       0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0
  3873 ;;      Totals:         0       3       0       0       0       0       0
  3874 ;;Total ram usage:        3 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    6
  3877 ;; This function calls:
  3878 ;;		_PrintHelpScreen
  3879 ;;		_testLeds
  3880 ;; This function is called by:
  3881 ;;		_readUartByte
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text3
  3886  002B84                     __ptext3:
  3887                           	opt stack 0
  3888  002B84                     _GroupCommon:
  3889                           	opt stack 23
  3890                           
  3891                           ;incstack = 0
  3892                           ;GroupCommon@request stored from wreg
  3893  002B84  0100               	movlb	0	; () banked
  3894  002B86  6FC3               	movwf	GroupCommon@request& (0+255),b
  3895                           
  3896                           ;MessageFunctions.c: 82: switch (request)
  3897  002B88  D006               	goto	l1080
  3898  002B8A                     
  3899                           ;MessageFunctions.c: 85: PrintHelpScreen();
  3900  002B8A  EC90  F003         	call	_PrintHelpScreen	;wreg free
  3901                           
  3902                           ;MessageFunctions.c: 86: break;
  3903  002B8E  0012               	return	
  3904  002B90                     
  3905                           ;MessageFunctions.c: 89: testLeds();
  3906  002B90  EC39  F011         	call	_testLeds	;wreg free
  3907                           
  3908                           ;MessageFunctions.c: 94: }
  3909                           
  3910                           ;MessageFunctions.c: 93: break;
  3911                           
  3912                           ;MessageFunctions.c: 92: default:
  3913                           
  3914                           ;MessageFunctions.c: 90: break;
  3915  002B94  0012               	return	
  3916  002B96                     l1080:
  3917  002B96  0100               	movlb	0	; () banked
  3918  002B98  51C3               	movf	GroupCommon@request& (0+255),w,b
  3919                           
  3920                           ; Switch size 1, requested type "space"
  3921                           ; Number of cases is 2, Range of values is 24 to 28
  3922                           ; switch strategies available:
  3923                           ; Name         Instructions Cycles
  3924                           ; simple_byte            7     4 (average)
  3925                           ;	Chosen strategy is simple_byte
  3926  002B9A  0A18               	xorlw	24	; case 24
  3927  002B9C  B4D8               	btfsc	status,2,c
  3928  002B9E  D7F5               	goto	l1081
  3929  002BA0  0A04               	xorlw	4	; case 28
  3930  002BA2  A4D8               	btfss	status,2,c
  3931  002BA4  0012               	return	
  3932  002BA6  D7F4               	goto	l1083
  3933  002BA8                     __end_of_GroupCommon:
  3934                           	opt stack 0
  3935                           tosu	equ	0xFFF
  3936                           tosh	equ	0xFFE
  3937                           tosl	equ	0xFFD
  3938                           pclath	equ	0xFFA
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodh	equ	0xFF4
  3944                           prodl	equ	0xFF3
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           indf1	equ	0xFE7
  3948                           postdec1	equ	0xFE5
  3949                           fsr1h	equ	0xFE2
  3950                           fsr1l	equ	0xFE1
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _GroupRx *****************
  3958 ;; Defined at:
  3959 ;;		line 11 in file "MessageFunctions.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  request         1    wreg     enum E6
  3962 ;;  data            2   97[BANK0 ] PTR unsigned char 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  request         1   99[BANK0 ] enum E6
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3974 ;;      Params:         0       2       0       0       0       0       0
  3975 ;;      Locals:         0       1       0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0
  3977 ;;      Totals:         0       3       0       0       0       0       0
  3978 ;;Total ram usage:        3 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    8
  3981 ;; This function calls:
  3982 ;;		_AdcSingleSample
  3983 ;;		_UpdateSynthFreq
  3984 ;; This function is called by:
  3985 ;;		_readUartByte
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text4
  3990  0026E2                     __ptext4:
  3991                           	opt stack 0
  3992  0026E2                     _GroupRx:
  3993                           	opt stack 21
  3994                           
  3995                           ;incstack = 0
  3996                           ;GroupRx@request stored from wreg
  3997  0026E2  0100               	movlb	0	; () banked
  3998  0026E4  6FC3               	movwf	GroupRx@request& (0+255),b
  3999                           
  4000                           ;MessageFunctions.c: 13: switch (request)
  4001  0026E6  D010               	goto	l1054
  4002  0026E8                     
  4003                           ;MessageFunctions.c: 20: UpdateSynthFreq(RX_TYPE, data);
  4004  0026E8  C0C1  F0AB         	movff	GroupRx@data,UpdateSynthFreq@data
  4005  0026EC  C0C2  F0AC         	movff	GroupRx@data+1,UpdateSynthFreq@data+1
  4006  0026F0  0E01               	movlw	1
  4007  0026F2  EC22  F013         	call	_UpdateSynthFreq
  4008                           
  4009                           ;MessageFunctions.c: 31: break;
  4010                           
  4011                           ;MessageFunctions.c: 30: case SET_MODULE_OPERATION_MODE:
  4012                           
  4013                           ;MessageFunctions.c: 28: break;
  4014                           
  4015                           ;MessageFunctions.c: 27: case SET_MODULE_BIT_MODE:
  4016                           
  4017                           ;MessageFunctions.c: 25: break;
  4018                           
  4019                           ;MessageFunctions.c: 23: case READ_MODULE_STATUS:
  4020                           
  4021                           ;MessageFunctions.c: 21: break;
  4022  0026F6  0012               	return	
  4023  0026F8                     
  4024                           ;MessageFunctions.c: 34: AdcSingleSample(RX_TYPE, data);
  4025  0026F8  C0C1  F075         	movff	GroupRx@data,AdcSingleSample@data
  4026  0026FC  C0C2  F076         	movff	GroupRx@data+1,AdcSingleSample@data+1
  4027  002700  0E01               	movlw	1
  4028  002702  EC17  F009         	call	_AdcSingleSample
  4029                           
  4030                           ;MessageFunctions.c: 39: }
  4031                           
  4032                           ;MessageFunctions.c: 38: break;
  4033                           
  4034                           ;MessageFunctions.c: 37: default:
  4035                           
  4036                           ;MessageFunctions.c: 35: break;
  4037  002706  0012               	return	
  4038  002708                     l1054:
  4039  002708  0100               	movlb	0	; () banked
  4040  00270A  51C3               	movf	GroupRx@request& (0+255),w,b
  4041                           
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 6, Range of values is 18 to 40
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte           19    10 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048  00270C  0A12               	xorlw	18	; case 18
  4049  00270E  B4D8               	btfsc	status,2,c
  4050  002710  0012               	return	
  4051  002712  0A04               	xorlw	4	; case 22
  4052  002714  B4D8               	btfsc	status,2,c
  4053  002716  D7E8               	goto	l1057
  4054  002718  0A0F               	xorlw	15	; case 25
  4055  00271A  B4D8               	btfsc	status,2,c
  4056  00271C  0012               	return	
  4057  00271E  0A38               	xorlw	56	; case 33
  4058  002720  B4D8               	btfsc	status,2,c
  4059  002722  0012               	return	
  4060  002724  0A02               	xorlw	2	; case 35
  4061  002726  B4D8               	btfsc	status,2,c
  4062  002728  D7E7               	goto	l1061
  4063  00272A  0A0B               	xorlw	11	; case 40
  4064  00272C  0012               	return	
  4065  00272E                     __end_of_GroupRx:
  4066                           	opt stack 0
  4067                           tosu	equ	0xFFF
  4068                           tosh	equ	0xFFE
  4069                           tosl	equ	0xFFD
  4070                           pclath	equ	0xFFA
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           indf1	equ	0xFE7
  4080                           postdec1	equ	0xFE5
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           postinc2	equ	0xFDE
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _GroupTx *****************
  4090 ;; Defined at:
  4091 ;;		line 42 in file "MessageFunctions.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  request         1    wreg     enum E6
  4094 ;;  data            2   97[BANK0 ] PTR unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  request         1   99[BANK0 ] enum E6
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4106 ;;      Params:         0       2       0       0       0       0       0
  4107 ;;      Locals:         0       1       0       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0
  4109 ;;      Totals:         0       3       0       0       0       0       0
  4110 ;;Total ram usage:        3 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    8
  4113 ;; This function calls:
  4114 ;;		_AdcSingleSample
  4115 ;;		_UpdateSynthFreq
  4116 ;; This function is called by:
  4117 ;;		_readUartByte
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text5
  4122  0023E8                     __ptext5:
  4123                           	opt stack 0
  4124  0023E8                     _GroupTx:
  4125                           	opt stack 21
  4126                           
  4127                           ;incstack = 0
  4128                           ;GroupTx@request stored from wreg
  4129  0023E8  0100               	movlb	0	; () banked
  4130  0023EA  6FC3               	movwf	GroupTx@request& (0+255),b
  4131                           
  4132                           ;MessageFunctions.c: 44: switch (request)
  4133  0023EC  D010               	goto	l1066
  4134  0023EE                     
  4135                           ;MessageFunctions.c: 52: UpdateSynthFreq(TX_TYPE, data);
  4136  0023EE  C0C1  F0AB         	movff	GroupTx@data,UpdateSynthFreq@data
  4137  0023F2  C0C2  F0AC         	movff	GroupTx@data+1,UpdateSynthFreq@data+1
  4138  0023F6  0E00               	movlw	0
  4139  0023F8  EC22  F013         	call	_UpdateSynthFreq
  4140                           
  4141                           ;MessageFunctions.c: 69: break;
  4142                           
  4143                           ;MessageFunctions.c: 68: case RX_SET_COMRESSION_RANGE:
  4144                           
  4145                           ;MessageFunctions.c: 66: break;
  4146                           
  4147                           ;MessageFunctions.c: 65: case RX_SET_COMRESSION_MODE:
  4148                           
  4149                           ;MessageFunctions.c: 63: break;
  4150                           
  4151                           ;MessageFunctions.c: 62: case SET_MODULE_OPERATION_MODE:
  4152                           
  4153                           ;MessageFunctions.c: 60: break;
  4154                           
  4155                           ;MessageFunctions.c: 59: case SET_MODULE_BIT_MODE:
  4156                           
  4157                           ;MessageFunctions.c: 57: break;
  4158                           
  4159                           ;MessageFunctions.c: 55: case READ_MODULE_STATUS:
  4160                           
  4161                           ;MessageFunctions.c: 53: break;
  4162  0023FC  0012               	return	
  4163  0023FE                     
  4164                           ;MessageFunctions.c: 72: AdcSingleSample(TX_TYPE, data);
  4165  0023FE  C0C1  F075         	movff	GroupTx@data,AdcSingleSample@data
  4166  002402  C0C2  F076         	movff	GroupTx@data+1,AdcSingleSample@data+1
  4167  002406  0E00               	movlw	0
  4168  002408  EC17  F009         	call	_AdcSingleSample
  4169                           
  4170                           ;MessageFunctions.c: 77: }
  4171                           
  4172                           ;MessageFunctions.c: 76: break;
  4173                           
  4174                           ;MessageFunctions.c: 75: default:
  4175                           
  4176                           ;MessageFunctions.c: 73: break;
  4177  00240C  0012               	return	
  4178  00240E                     l1066:
  4179  00240E  0100               	movlb	0	; () banked
  4180  002410  51C3               	movf	GroupTx@request& (0+255),w,b
  4181                           
  4182                           ; Switch size 1, requested type "space"
  4183                           ; Number of cases is 8, Range of values is 18 to 101
  4184                           ; switch strategies available:
  4185                           ; Name         Instructions Cycles
  4186                           ; simple_byte           25    13 (average)
  4187                           ;	Chosen strategy is simple_byte
  4188  002412  0A12               	xorlw	18	; case 18
  4189  002414  B4D8               	btfsc	status,2,c
  4190  002416  0012               	return	
  4191  002418  0A04               	xorlw	4	; case 22
  4192  00241A  B4D8               	btfsc	status,2,c
  4193  00241C  D7E8               	goto	l1069
  4194  00241E  0A0F               	xorlw	15	; case 25
  4195  002420  B4D8               	btfsc	status,2,c
  4196  002422  0012               	return	
  4197  002424  0A38               	xorlw	56	; case 33
  4198  002426  B4D8               	btfsc	status,2,c
  4199  002428  0012               	return	
  4200  00242A  0A02               	xorlw	2	; case 35
  4201  00242C  B4D8               	btfsc	status,2,c
  4202  00242E  D7E7               	goto	l1075
  4203  002430  0A0B               	xorlw	11	; case 40
  4204  002432  B4D8               	btfsc	status,2,c
  4205  002434  0012               	return	
  4206  002436  0A4B               	xorlw	75	; case 99
  4207  002438  B4D8               	btfsc	status,2,c
  4208  00243A  0012               	return	
  4209  00243C  0A06               	xorlw	6	; case 101
  4210  00243E  0012               	return	
  4211  002440                     __end_of_GroupTx:
  4212                           	opt stack 0
  4213                           tosu	equ	0xFFF
  4214                           tosh	equ	0xFFE
  4215                           tosl	equ	0xFFD
  4216                           pclath	equ	0xFFA
  4217                           tblptru	equ	0xFF8
  4218                           tblptrh	equ	0xFF7
  4219                           tblptrl	equ	0xFF6
  4220                           tablat	equ	0xFF5
  4221                           prodh	equ	0xFF4
  4222                           prodl	equ	0xFF3
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf1	equ	0xFE7
  4226                           postdec1	equ	0xFE5
  4227                           fsr1h	equ	0xFE2
  4228                           fsr1l	equ	0xFE1
  4229                           indf2	equ	0xFDF
  4230                           postinc2	equ	0xFDE
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _UpdateSynthFreq *****************
  4236 ;; Defined at:
  4237 ;;		line 45 in file "SyntApp.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  cType           1    wreg     enum E177
  4240 ;;  data            2   75[BANK0 ] PTR unsigned char 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  cType           1    0[COMRAM] enum E177
  4243 ;;  regSynthArra   16   77[BANK0 ] unsigned long [4]
  4244 ;;  insertFraqDa    4   93[BANK0 ] unsigned long 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4254 ;;      Params:         0       2       0       0       0       0       0
  4255 ;;      Locals:         0      20       0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0
  4257 ;;      Totals:         0      22       0       0       0       0       0
  4258 ;;Total ram usage:       22 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    7
  4261 ;; This function calls:
  4262 ;;		_CalcSynthRegParams
  4263 ;;		_GetIntFromUartData
  4264 ;;		_ZeroArray
  4265 ;; This function is called by:
  4266 ;;		_GroupRx
  4267 ;;		_GroupTx
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text6
  4272  002644                     __ptext6:
  4273                           	opt stack 0
  4274  002644                     _UpdateSynthFreq:
  4275                           	opt stack 21
  4276                           
  4277                           ;SyntApp.c: 47: uint32_t insertFraqData = GetIntFromUartData(data);
  4278                           
  4279                           ;incstack = 0
  4280  002644  C0AB  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  4281  002648  C0AC  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  4282  00264C  ECF8  F00E         	call	_GetIntFromUartData	;wreg free
  4283  002650  C066  F0BD         	movff	?_GetIntFromUartData,UpdateSynthFreq@insertFraqData
  4284  002654  C067  F0BE         	movff	?_GetIntFromUartData+1,UpdateSynthFreq@insertFraqData+1
  4285  002658  C068  F0BF         	movff	?_GetIntFromUartData+2,UpdateSynthFreq@insertFraqData+2
  4286  00265C  C069  F0C0         	movff	?_GetIntFromUartData+3,UpdateSynthFreq@insertFraqData+3
  4287                           
  4288                           ;SyntApp.c: 49: uint32_t regSynthArray[4];
  4289                           ;SyntApp.c: 50: ZeroArray(regSynthArray, sizeof(regSynthArray));
  4290  002660  0EAD               	movlw	low UpdateSynthFreq@regSynthArray
  4291  002662  6E20               	movwf	ZeroArray@array,c
  4292  002664  0E00               	movlw	high UpdateSynthFreq@regSynthArray
  4293  002666  6E21               	movwf	ZeroArray@array+1,c
  4294  002668  0E00               	movlw	0
  4295  00266A  6E23               	movwf	ZeroArray@size+1,c
  4296  00266C  0E10               	movlw	16
  4297  00266E  6E22               	movwf	ZeroArray@size,c
  4298  002670  EC04  F016         	call	_ZeroArray	;wreg free
  4299                           
  4300                           ;SyntApp.c: 52: CalcSynthRegParams(regSynthArray, insertFraqData);
  4301  002674  0EAD               	movlw	low UpdateSynthFreq@regSynthArray
  4302  002676  0100               	movlb	0	; () banked
  4303  002678  6F99               	movwf	CalcSynthRegParams@regArray& (0+255),b
  4304  00267A  0E00               	movlw	high UpdateSynthFreq@regSynthArray
  4305  00267C  6F9A               	movwf	(CalcSynthRegParams@regArray+1)& (0+255),b
  4306  00267E  C0BD  F09B         	movff	UpdateSynthFreq@insertFraqData,CalcSynthRegParams@inputFreq
  4307  002682  C0BE  F09C         	movff	UpdateSynthFreq@insertFraqData+1,CalcSynthRegParams@inputFreq+1
  4308  002686  C0BF  F09D         	movff	UpdateSynthFreq@insertFraqData+2,CalcSynthRegParams@inputFreq+2
  4309  00268A  C0C0  F09E         	movff	UpdateSynthFreq@insertFraqData+3,CalcSynthRegParams@inputFreq+3
  4310  00268E  EC70  F000         	call	_CalcSynthRegParams	;wreg free
  4311  002692  0012               	return		;funcret
  4312  002694                     __end_of_UpdateSynthFreq:
  4313                           	opt stack 0
  4314                           tosu	equ	0xFFF
  4315                           tosh	equ	0xFFE
  4316                           tosl	equ	0xFFD
  4317                           pclath	equ	0xFFA
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           indf1	equ	0xFE7
  4327                           postdec1	equ	0xFE5
  4328                           fsr1h	equ	0xFE2
  4329                           fsr1l	equ	0xFE1
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _CalcSynthRegParams *****************
  4337 ;; Defined at:
  4338 ;;		line 59 in file "SyntApp.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  regArray        2   57[BANK0 ] PTR long 
  4341 ;;		 -> UpdateSynthFreq@regSynthArray(16), 
  4342 ;;  inputFreq       4   59[BANK0 ] long 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      unsigned char 
  4347 ;; Registers used:
  4348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4354 ;;      Params:         0       6       0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0
  4356 ;;      Temps:          0      12       0       0       0       0       0
  4357 ;;      Totals:         0      18       0       0       0       0       0
  4358 ;;Total ram usage:       18 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    5
  4361 ;; This function calls:
  4362 ;;		___altoft
  4363 ;;		___awtoft
  4364 ;;		___ftadd
  4365 ;;		___ftdiv
  4366 ;;		___ftmul
  4367 ;;		___ftneg
  4368 ;;		___fttol
  4369 ;; This function is called by:
  4370 ;;		_UpdateSynthFreq
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text7
  4375  0000E0                     __ptext7:
  4376                           	opt stack 0
  4377  0000E0                     _CalcSynthRegParams:
  4378                           	opt stack 22
  4379                           
  4380                           ;SyntApp.c: 61: synthCalcParams.fVco = inputFreq / 2.0;
  4381                           
  4382                           ;incstack = 0
  4383  0000E0  C09B  F020         	movff	CalcSynthRegParams@inputFreq,___altoft@c
  4384  0000E4  C09C  F021         	movff	CalcSynthRegParams@inputFreq+1,___altoft@c+1
  4385  0000E8  C09D  F022         	movff	CalcSynthRegParams@inputFreq+2,___altoft@c+2
  4386  0000EC  C09E  F023         	movff	CalcSynthRegParams@inputFreq+3,___altoft@c+3
  4387  0000F0  EC5C  F010         	call	___altoft	;wreg free
  4388  0000F4  C020  F02A         	movff	?___altoft,___ftdiv@f1
  4389  0000F8  C021  F02B         	movff	?___altoft+1,___ftdiv@f1+1
  4390  0000FC  C022  F02C         	movff	?___altoft+2,___ftdiv@f1+2
  4391  000100  0E00               	movlw	0
  4392  000102  6E2D               	movwf	___ftdiv@f2,c
  4393  000104  0E00               	movlw	0
  4394  000106  6E2E               	movwf	___ftdiv@f2+1,c
  4395  000108  0E40               	movlw	64
  4396  00010A  6E2F               	movwf	___ftdiv@f2+2,c
  4397  00010C  ECD0  F00B         	call	___ftdiv	;wreg free
  4398  000110  C02A  F128         	movff	?___ftdiv,_synthCalcParams
  4399  000114  C02B  F129         	movff	?___ftdiv+1,_synthCalcParams+1
  4400  000118  C02C  F12A         	movff	?___ftdiv+2,_synthCalcParams+2
  4401                           
  4402                           ;SyntApp.c: 62: synthCalcParams.fPFD = 40.0;
  4403  00011C  0E00               	movlw	0
  4404  00011E  0101               	movlb	1	; () banked
  4405  000120  6F2B               	movwf	(_synthCalcParams+3)& (0+255),b
  4406  000122  0E20               	movlw	32
  4407  000124  6F2C               	movwf	(_synthCalcParams+4)& (0+255),b
  4408  000126  0E42               	movlw	66
  4409  000128  6F2D               	movwf	(_synthCalcParams+5)& (0+255),b
  4410                           
  4411                           ; BSR set to: 1
  4412                           ;SyntApp.c: 63: synthCalcParams.INT = (int)(synthCalcParams.fVco / synthCalcParams.fPFD)
      +                          ;
  4413  00012A  C12B  F02D         	movff	_synthCalcParams+3,___ftdiv@f2
  4414  00012E  C12C  F02E         	movff	_synthCalcParams+4,___ftdiv@f2+1
  4415  000132  C12D  F02F         	movff	_synthCalcParams+5,___ftdiv@f2+2
  4416  000136  C128  F02A         	movff	_synthCalcParams,___ftdiv@f1
  4417  00013A  C129  F02B         	movff	_synthCalcParams+1,___ftdiv@f1+1
  4418  00013E  C12A  F02C         	movff	_synthCalcParams+2,___ftdiv@f1+2
  4419  000142  ECD0  F00B         	call	___ftdiv	;wreg free
  4420  000146  C02A  F078         	movff	?___ftdiv,___fttol@f1
  4421  00014A  C02B  F079         	movff	?___ftdiv+1,___fttol@f1+1
  4422  00014E  C02C  F07A         	movff	?___ftdiv+2,___fttol@f1+2
  4423  000152  ECD9  F00A         	call	___fttol	;wreg free
  4424  000156  0100               	movlb	0	; () banked
  4425  000158  C078  F12E         	movff	?___fttol,_synthCalcParams+6
  4426  00015C  C079  F12F         	movff	?___fttol+1,_synthCalcParams+7
  4427  000160  0101               	movlb	1	; () banked
  4428  000162  0E00               	movlw	0
  4429  000164  BF2F               	btfsc	(_synthCalcParams+7)& (0+255),7,b
  4430  000166  0EFF               	movlw	-1
  4431  000168  6F30               	movwf	(_synthCalcParams+8)& (0+255),b
  4432  00016A  6F31               	movwf	(_synthCalcParams+9)& (0+255),b
  4433                           
  4434                           ;SyntApp.c: 64: synthCalcParams.Mod1 = 16777216;
  4435  00016C  0E00               	movlw	0
  4436  00016E  6F32               	movwf	(_synthCalcParams+10)& (0+255),b
  4437  000170  0E00               	movlw	0
  4438  000172  6F33               	movwf	(_synthCalcParams+11)& (0+255),b
  4439  000174  0E00               	movlw	0
  4440  000176  6F34               	movwf	(_synthCalcParams+12)& (0+255),b
  4441  000178  0E01               	movlw	1
  4442  00017A  6F35               	movwf	(_synthCalcParams+13)& (0+255),b
  4443                           
  4444                           ; BSR set to: 1
  4445                           ;SyntApp.c: 65: synthCalcParams.Fraq = (synthCalcParams.fVco / synthCalcParams.fPFD) - (
      +                          int)(synthCalcParams.fVco / synthCalcParams.fPFD);
  4446  00017C  C12B  F02D         	movff	_synthCalcParams+3,___ftdiv@f2
  4447  000180  C12C  F02E         	movff	_synthCalcParams+4,___ftdiv@f2+1
  4448  000184  C12D  F02F         	movff	_synthCalcParams+5,___ftdiv@f2+2
  4449  000188  C128  F02A         	movff	_synthCalcParams,___ftdiv@f1
  4450  00018C  C129  F02B         	movff	_synthCalcParams+1,___ftdiv@f1+1
  4451  000190  C12A  F02C         	movff	_synthCalcParams+2,___ftdiv@f1+2
  4452  000194  ECD0  F00B         	call	___ftdiv	;wreg free
  4453  000198  C02A  F08D         	movff	?___ftdiv,___ftadd@f1
  4454  00019C  C02B  F08E         	movff	?___ftdiv+1,___ftadd@f1+1
  4455  0001A0  C02C  F08F         	movff	?___ftdiv+2,___ftadd@f1+2
  4456  0001A4  C12B  F02D         	movff	_synthCalcParams+3,___ftdiv@f2
  4457  0001A8  C12C  F02E         	movff	_synthCalcParams+4,___ftdiv@f2+1
  4458  0001AC  C12D  F02F         	movff	_synthCalcParams+5,___ftdiv@f2+2
  4459  0001B0  C128  F02A         	movff	_synthCalcParams,___ftdiv@f1
  4460  0001B4  C129  F02B         	movff	_synthCalcParams+1,___ftdiv@f1+1
  4461  0001B8  C12A  F02C         	movff	_synthCalcParams+2,___ftdiv@f1+2
  4462  0001BC  ECD0  F00B         	call	___ftdiv	;wreg free
  4463  0001C0  C02A  F078         	movff	?___ftdiv,___fttol@f1
  4464  0001C4  C02B  F079         	movff	?___ftdiv+1,___fttol@f1+1
  4465  0001C8  C02C  F07A         	movff	?___ftdiv+2,___fttol@f1+2
  4466  0001CC  ECD9  F00A         	call	___fttol	;wreg free
  4467  0001D0  C078  F087         	movff	?___fttol,___awtoft@c
  4468  0001D4  C079  F088         	movff	?___fttol+1,___awtoft@c+1
  4469  0001D8  ECC0  F014         	call	___awtoft	;wreg free
  4470  0001DC  C087  F08A         	movff	?___awtoft,___ftneg@f1
  4471  0001E0  C088  F08B         	movff	?___awtoft+1,___ftneg@f1+1
  4472  0001E4  C089  F08C         	movff	?___awtoft+2,___ftneg@f1+2
  4473  0001E8  ECAF  F015         	call	___ftneg	;wreg free
  4474  0001EC  C08A  F090         	movff	?___ftneg,___ftadd@f2
  4475  0001F0  C08B  F091         	movff	?___ftneg+1,___ftadd@f2+1
  4476  0001F4  C08C  F092         	movff	?___ftneg+2,___ftadd@f2+2
  4477  0001F8  EC80  F007         	call	___ftadd	;wreg free
  4478  0001FC  C08D  F136         	movff	?___ftadd,_synthCalcParams+14
  4479  000200  C08E  F137         	movff	?___ftadd+1,_synthCalcParams+15
  4480  000204  C08F  F138         	movff	?___ftadd+2,_synthCalcParams+16
  4481                           
  4482                           ;SyntApp.c: 66: synthCalcParams.Fraq1 = (int)(synthCalcParams.Fraq * 16777216);
  4483  000208  0E00               	movlw	0
  4484  00020A  0100               	movlb	0	; () banked
  4485  00020C  6F6C               	movwf	___ftmul@f2& (0+255),b
  4486  00020E  0E80               	movlw	128
  4487  000210  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  4488  000212  0E4B               	movlw	75
  4489  000214  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  4490  000216  C136  F069         	movff	_synthCalcParams+14,___ftmul@f1
  4491  00021A  C137  F06A         	movff	_synthCalcParams+15,___ftmul@f1+1
  4492  00021E  C138  F06B         	movff	_synthCalcParams+16,___ftmul@f1+2
  4493  000222  EC55  F00B         	call	___ftmul	;wreg free
  4494  000226  C069  F078         	movff	?___ftmul,___fttol@f1
  4495  00022A  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  4496  00022E  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  4497  000232  ECD9  F00A         	call	___fttol	;wreg free
  4498  000236  0100               	movlb	0	; () banked
  4499  000238  C078  F139         	movff	?___fttol,_synthCalcParams+17
  4500  00023C  C079  F13A         	movff	?___fttol+1,_synthCalcParams+18
  4501  000240  0101               	movlb	1	; () banked
  4502  000242  0E00               	movlw	0
  4503  000244  BF3A               	btfsc	(_synthCalcParams+18)& (0+255),7,b
  4504  000246  0EFF               	movlw	-1
  4505  000248  6F3B               	movwf	(_synthCalcParams+19)& (0+255),b
  4506  00024A  6F3C               	movwf	(_synthCalcParams+20)& (0+255),b
  4507                           
  4508                           ; BSR set to: 1
  4509                           ;SyntApp.c: 67: synthCalcParams.remFraq1 = (synthCalcParams.Fraq * 16777216) - (int)(syn
      +                          thCalcParams.Fraq * 16777216);
  4510  00024C  0E00               	movlw	0
  4511  00024E  0100               	movlb	0	; () banked
  4512  000250  6F6C               	movwf	___ftmul@f2& (0+255),b
  4513  000252  0E80               	movlw	128
  4514  000254  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  4515  000256  0E4B               	movlw	75
  4516  000258  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  4517  00025A  C136  F069         	movff	_synthCalcParams+14,___ftmul@f1
  4518  00025E  C137  F06A         	movff	_synthCalcParams+15,___ftmul@f1+1
  4519  000262  C138  F06B         	movff	_synthCalcParams+16,___ftmul@f1+2
  4520  000266  EC55  F00B         	call	___ftmul	;wreg free
  4521  00026A  C069  F08D         	movff	?___ftmul,___ftadd@f1
  4522  00026E  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  4523  000272  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  4524  000276  0E00               	movlw	0
  4525  000278  0100               	movlb	0	; () banked
  4526  00027A  6F6C               	movwf	___ftmul@f2& (0+255),b
  4527  00027C  0E80               	movlw	128
  4528  00027E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  4529  000280  0E4B               	movlw	75
  4530  000282  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  4531  000284  C136  F069         	movff	_synthCalcParams+14,___ftmul@f1
  4532  000288  C137  F06A         	movff	_synthCalcParams+15,___ftmul@f1+1
  4533  00028C  C138  F06B         	movff	_synthCalcParams+16,___ftmul@f1+2
  4534  000290  EC55  F00B         	call	___ftmul	;wreg free
  4535  000294  C069  F078         	movff	?___ftmul,___fttol@f1
  4536  000298  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  4537  00029C  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  4538  0002A0  ECD9  F00A         	call	___fttol	;wreg free
  4539  0002A4  C078  F087         	movff	?___fttol,___awtoft@c
  4540  0002A8  C079  F088         	movff	?___fttol+1,___awtoft@c+1
  4541  0002AC  ECC0  F014         	call	___awtoft	;wreg free
  4542  0002B0  C087  F08A         	movff	?___awtoft,___ftneg@f1
  4543  0002B4  C088  F08B         	movff	?___awtoft+1,___ftneg@f1+1
  4544  0002B8  C089  F08C         	movff	?___awtoft+2,___ftneg@f1+2
  4545  0002BC  ECAF  F015         	call	___ftneg	;wreg free
  4546  0002C0  C08A  F090         	movff	?___ftneg,___ftadd@f2
  4547  0002C4  C08B  F091         	movff	?___ftneg+1,___ftadd@f2+1
  4548  0002C8  C08C  F092         	movff	?___ftneg+2,___ftadd@f2+2
  4549  0002CC  EC80  F007         	call	___ftadd	;wreg free
  4550  0002D0  C08D  F13D         	movff	?___ftadd,_synthCalcParams+21
  4551  0002D4  C08E  F13E         	movff	?___ftadd+1,_synthCalcParams+22
  4552  0002D8  C08F  F13F         	movff	?___ftadd+2,_synthCalcParams+23
  4553                           
  4554                           ;SyntApp.c: 68: synthCalcParams.Mod2 = 5461;
  4555  0002DC  0E55               	movlw	85
  4556  0002DE  0101               	movlb	1	; () banked
  4557  0002E0  6F40               	movwf	(_synthCalcParams+24)& (0+255),b
  4558  0002E2  0E15               	movlw	21
  4559  0002E4  6F41               	movwf	(_synthCalcParams+25)& (0+255),b
  4560  0002E6  0E00               	movlw	0
  4561  0002E8  6F42               	movwf	(_synthCalcParams+26)& (0+255),b
  4562  0002EA  0E00               	movlw	0
  4563  0002EC  6F43               	movwf	(_synthCalcParams+27)& (0+255),b
  4564                           
  4565                           ;SyntApp.c: 69: synthCalcParams.Fraq2 = (int)(synthCalcParams.remFraq1 * synthCalcParams
      +                          .Mod2);
  4566  0002EE  C13D  F06C         	movff	_synthCalcParams+21,___ftmul@f2
  4567  0002F2  C13E  F06D         	movff	_synthCalcParams+22,___ftmul@f2+1
  4568  0002F6  C13F  F06E         	movff	_synthCalcParams+23,___ftmul@f2+2
  4569  0002FA  C140  F020         	movff	_synthCalcParams+24,___altoft@c
  4570  0002FE  C141  F021         	movff	_synthCalcParams+25,___altoft@c+1
  4571  000302  C142  F022         	movff	_synthCalcParams+26,___altoft@c+2
  4572  000306  C143  F023         	movff	_synthCalcParams+27,___altoft@c+3
  4573  00030A  EC5C  F010         	call	___altoft	;wreg free
  4574  00030E  C020  F069         	movff	?___altoft,___ftmul@f1
  4575  000312  C021  F06A         	movff	?___altoft+1,___ftmul@f1+1
  4576  000316  C022  F06B         	movff	?___altoft+2,___ftmul@f1+2
  4577  00031A  EC55  F00B         	call	___ftmul	;wreg free
  4578  00031E  C069  F078         	movff	?___ftmul,___fttol@f1
  4579  000322  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  4580  000326  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  4581  00032A  ECD9  F00A         	call	___fttol	;wreg free
  4582  00032E  0100               	movlb	0	; () banked
  4583  000330  C078  F144         	movff	?___fttol,_synthCalcParams+28
  4584  000334  C079  F145         	movff	?___fttol+1,_synthCalcParams+29
  4585  000338  0101               	movlb	1	; () banked
  4586  00033A  0E00               	movlw	0
  4587  00033C  BF45               	btfsc	(_synthCalcParams+29)& (0+255),7,b
  4588  00033E  0EFF               	movlw	-1
  4589  000340  6F46               	movwf	(_synthCalcParams+30)& (0+255),b
  4590  000342  6F47               	movwf	(_synthCalcParams+31)& (0+255),b
  4591                           
  4592                           ; BSR set to: 1
  4593                           ;SyntApp.c: 71: regArray[0] = (0 << 21) + (synthCalcParams.INT << 4) | 0x0;
  4594  000344  C12E  F09F         	movff	_synthCalcParams+6,??_CalcSynthRegParams
  4595  000348  C12F  F0A0         	movff	_synthCalcParams+7,??_CalcSynthRegParams+1
  4596  00034C  C130  F0A1         	movff	_synthCalcParams+8,??_CalcSynthRegParams+2
  4597  000350  C131  F0A2         	movff	_synthCalcParams+9,??_CalcSynthRegParams+3
  4598  000354  0E04               	movlw	4
  4599  000356                     u7205:
  4600  000356  90D8               	bcf	status,0,c
  4601  000358  0100               	movlb	0	; () banked
  4602  00035A  379F               	rlcf	??_CalcSynthRegParams& (0+255),f,b
  4603  00035C  37A0               	rlcf	(??_CalcSynthRegParams+1)& (0+255),f,b
  4604  00035E  37A1               	rlcf	(??_CalcSynthRegParams+2)& (0+255),f,b
  4605  000360  37A2               	rlcf	(??_CalcSynthRegParams+3)& (0+255),f,b
  4606  000362  2EE8               	decfsz	wreg,f,c
  4607  000364  D7F8               	goto	u7205
  4608  000366  C099  FFD9         	movff	CalcSynthRegParams@regArray,fsr2l
  4609  00036A  C09A  FFDA         	movff	CalcSynthRegParams@regArray+1,fsr2h
  4610  00036E  C09F  FFDE         	movff	??_CalcSynthRegParams,postinc2
  4611  000372  C0A0  FFDE         	movff	??_CalcSynthRegParams+1,postinc2
  4612  000376  C0A1  FFDE         	movff	??_CalcSynthRegParams+2,postinc2
  4613  00037A  C0A2  FFDE         	movff	??_CalcSynthRegParams+3,postinc2
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;SyntApp.c: 72: regArray[1] = (synthCalcParams.Fraq1 << 4) | 0x1;
  4617  00037E  C139  F09F         	movff	_synthCalcParams+17,??_CalcSynthRegParams
  4618  000382  C13A  F0A0         	movff	_synthCalcParams+18,??_CalcSynthRegParams+1
  4619  000386  C13B  F0A1         	movff	_synthCalcParams+19,??_CalcSynthRegParams+2
  4620  00038A  C13C  F0A2         	movff	_synthCalcParams+20,??_CalcSynthRegParams+3
  4621  00038E  0E04               	movlw	4
  4622  000390                     u7215:
  4623  000390  90D8               	bcf	status,0,c
  4624  000392  379F               	rlcf	??_CalcSynthRegParams& (0+255),f,b
  4625  000394  37A0               	rlcf	(??_CalcSynthRegParams+1)& (0+255),f,b
  4626  000396  37A1               	rlcf	(??_CalcSynthRegParams+2)& (0+255),f,b
  4627  000398  37A2               	rlcf	(??_CalcSynthRegParams+3)& (0+255),f,b
  4628  00039A  2EE8               	decfsz	wreg,f,c
  4629  00039C  D7F9               	goto	u7215
  4630  00039E  0E01               	movlw	1
  4631  0003A0  119F               	iorwf	??_CalcSynthRegParams& (0+255),w,b
  4632  0003A2  6FA3               	movwf	(??_CalcSynthRegParams+4)& (0+255),b
  4633  0003A4  51A0               	movf	(??_CalcSynthRegParams+1)& (0+255),w,b
  4634  0003A6  6FA4               	movwf	(??_CalcSynthRegParams+5)& (0+255),b
  4635  0003A8  51A1               	movf	(??_CalcSynthRegParams+2)& (0+255),w,b
  4636  0003AA  6FA5               	movwf	(??_CalcSynthRegParams+6)& (0+255),b
  4637  0003AC  51A2               	movf	(??_CalcSynthRegParams+3)& (0+255),w,b
  4638  0003AE  6FA6               	movwf	(??_CalcSynthRegParams+7)& (0+255),b
  4639  0003B0  EE20 F004          	lfsr	2,4
  4640  0003B4  5199               	movf	CalcSynthRegParams@regArray& (0+255),w,b
  4641  0003B6  26D9               	addwf	fsr2l,f,c
  4642  0003B8  519A               	movf	(CalcSynthRegParams@regArray+1)& (0+255),w,b
  4643  0003BA  22DA               	addwfc	fsr2h,f,c
  4644  0003BC  C0A3  FFDE         	movff	??_CalcSynthRegParams+4,postinc2
  4645  0003C0  C0A4  FFDE         	movff	??_CalcSynthRegParams+5,postinc2
  4646  0003C4  C0A5  FFDE         	movff	??_CalcSynthRegParams+6,postinc2
  4647  0003C8  C0A6  FFDE         	movff	??_CalcSynthRegParams+7,postinc2
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;SyntApp.c: 73: regArray[2] = (synthCalcParams.Fraq2 << 18) + (5461 << 4) | 0x2;
  4651  0003CC  C144  F09F         	movff	_synthCalcParams+28,??_CalcSynthRegParams
  4652  0003D0  C145  F0A0         	movff	_synthCalcParams+29,??_CalcSynthRegParams+1
  4653  0003D4  C146  F0A1         	movff	_synthCalcParams+30,??_CalcSynthRegParams+2
  4654  0003D8  C147  F0A2         	movff	_synthCalcParams+31,??_CalcSynthRegParams+3
  4655  0003DC  0E12               	movlw	18
  4656  0003DE                     u7225:
  4657  0003DE  90D8               	bcf	status,0,c
  4658  0003E0  379F               	rlcf	??_CalcSynthRegParams& (0+255),f,b
  4659  0003E2  37A0               	rlcf	(??_CalcSynthRegParams+1)& (0+255),f,b
  4660  0003E4  37A1               	rlcf	(??_CalcSynthRegParams+2)& (0+255),f,b
  4661  0003E6  37A2               	rlcf	(??_CalcSynthRegParams+3)& (0+255),f,b
  4662  0003E8  2EE8               	decfsz	wreg,f,c
  4663  0003EA  D7F9               	goto	u7225
  4664  0003EC  0E50               	movlw	80
  4665  0003EE  259F               	addwf	??_CalcSynthRegParams& (0+255),w,b
  4666  0003F0  6FA3               	movwf	(??_CalcSynthRegParams+4)& (0+255),b
  4667  0003F2  0E55               	movlw	85
  4668  0003F4  21A0               	addwfc	(??_CalcSynthRegParams+1)& (0+255),w,b
  4669  0003F6  6FA4               	movwf	(??_CalcSynthRegParams+5)& (0+255),b
  4670  0003F8  0E00               	movlw	0
  4671  0003FA  21A1               	addwfc	(??_CalcSynthRegParams+2)& (0+255),w,b
  4672  0003FC  6FA5               	movwf	(??_CalcSynthRegParams+6)& (0+255),b
  4673  0003FE  0E00               	movlw	0
  4674  000400  21A2               	addwfc	(??_CalcSynthRegParams+3)& (0+255),w,b
  4675  000402  6FA6               	movwf	(??_CalcSynthRegParams+7)& (0+255),b
  4676  000404  0E02               	movlw	2
  4677  000406  11A3               	iorwf	(??_CalcSynthRegParams+4)& (0+255),w,b
  4678  000408  6FA7               	movwf	(??_CalcSynthRegParams+8)& (0+255),b
  4679  00040A  51A4               	movf	(??_CalcSynthRegParams+5)& (0+255),w,b
  4680  00040C  6FA8               	movwf	(??_CalcSynthRegParams+9)& (0+255),b
  4681  00040E  51A5               	movf	(??_CalcSynthRegParams+6)& (0+255),w,b
  4682  000410  6FA9               	movwf	(??_CalcSynthRegParams+10)& (0+255),b
  4683  000412  51A6               	movf	(??_CalcSynthRegParams+7)& (0+255),w,b
  4684  000414  6FAA               	movwf	(??_CalcSynthRegParams+11)& (0+255),b
  4685  000416  EE20 F008          	lfsr	2,8
  4686  00041A  5199               	movf	CalcSynthRegParams@regArray& (0+255),w,b
  4687  00041C  26D9               	addwf	fsr2l,f,c
  4688  00041E  519A               	movf	(CalcSynthRegParams@regArray+1)& (0+255),w,b
  4689  000420  22DA               	addwfc	fsr2h,f,c
  4690  000422  C0A7  FFDE         	movff	??_CalcSynthRegParams+8,postinc2
  4691  000426  C0A8  FFDE         	movff	??_CalcSynthRegParams+9,postinc2
  4692  00042A  C0A9  FFDE         	movff	??_CalcSynthRegParams+10,postinc2
  4693  00042E  C0AA  FFDE         	movff	??_CalcSynthRegParams+11,postinc2
  4694                           
  4695                           ; BSR set to: 0
  4696  000432  0012               	return		;funcret
  4697  000434                     __end_of_CalcSynthRegParams:
  4698                           	opt stack 0
  4699                           tosu	equ	0xFFF
  4700                           tosh	equ	0xFFE
  4701                           tosl	equ	0xFFD
  4702                           pclath	equ	0xFFA
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           indf1	equ	0xFE7
  4712                           postdec1	equ	0xFE5
  4713                           fsr1h	equ	0xFE2
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _AdcSingleSample *****************
  4722 ;; Defined at:
  4723 ;;		line 46 in file "AdcApp.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  cType           1    wreg     enum E177
  4726 ;;  data            2   21[BANK0 ] PTR unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  cType           1   23[BANK0 ] enum E177
  4729 ;;  retNum          4   24[BANK0 ] unsigned long 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         0       2       0       0       0       0       0
  4740 ;;      Locals:         0       5       0       0       0       0       0
  4741 ;;      Temps:          1       0       0       0       0       0       0
  4742 ;;      Totals:         1       7       0       0       0       0       0
  4743 ;;Total ram usage:        8 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    7
  4746 ;; This function calls:
  4747 ;;		_GetIntFromUartData
  4748 ;;		_UART_Write_Text
  4749 ;;		___lldiv
  4750 ;;		___llmod
  4751 ;; This function is called by:
  4752 ;;		_GroupRx
  4753 ;;		_GroupTx
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text8
  4758  00122E                     __ptext8:
  4759                           	opt stack 0
  4760  00122E                     _AdcSingleSample:
  4761                           	opt stack 21
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;incstack = 0
  4765                           ;AdcSingleSample@cType stored from wreg
  4766  00122E  0100               	movlb	0	; () banked
  4767  001230  6F77               	movwf	AdcSingleSample@cType& (0+255),b
  4768                           
  4769                           ;AdcApp.c: 48: uint32_t retNum = 0x0;
  4770  001232  0E00               	movlw	0
  4771  001234  0100               	movlb	0	; () banked
  4772  001236  6F78               	movwf	AdcSingleSample@retNum& (0+255),b
  4773  001238  0E00               	movlw	0
  4774  00123A  6F79               	movwf	(AdcSingleSample@retNum+1)& (0+255),b
  4775  00123C  0E00               	movlw	0
  4776  00123E  6F7A               	movwf	(AdcSingleSample@retNum+2)& (0+255),b
  4777  001240  0E00               	movlw	0
  4778  001242  6F7B               	movwf	(AdcSingleSample@retNum+3)& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;AdcApp.c: 50: if(data[0] == '0')
  4782  001244  C075  FFD9         	movff	AdcSingleSample@data,fsr2l
  4783  001248  C076  FFDA         	movff	AdcSingleSample@data+1,fsr2h
  4784  00124C  0E30               	movlw	48
  4785  00124E  18DE               	xorwf	postinc2,w,c
  4786  001250  A4D8               	btfss	status,2,c
  4787  001252  D007               	goto	l96
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;AdcApp.c: 51: {
  4791                           ;AdcApp.c: 52: UART_Write_Text("NOT OK \n\r");
  4792  001254  0ED9               	movlw	low STR_1
  4793  001256  6E19               	movwf	UART_Write_Text@text,c
  4794  001258  0E7F               	movlw	high STR_1
  4795  00125A  6E1A               	movwf	UART_Write_Text@text+1,c
  4796  00125C  EC98  F010         	call	_UART_Write_Text	;wreg free
  4797                           
  4798                           ;AdcApp.c: 53: }
  4799  001260  0012               	return	
  4800  001262                     l96:
  4801                           
  4802                           ;AdcApp.c: 54: else
  4803                           ;AdcApp.c: 55: {
  4804                           ;AdcApp.c: 56: retNum = GetIntFromUartData(data);
  4805  001262  C075  F066         	movff	AdcSingleSample@data,GetIntFromUartData@data
  4806  001266  C076  F067         	movff	AdcSingleSample@data+1,GetIntFromUartData@data+1
  4807  00126A  ECF8  F00E         	call	_GetIntFromUartData	;wreg free
  4808  00126E  C066  F078         	movff	?_GetIntFromUartData,AdcSingleSample@retNum
  4809  001272  C067  F079         	movff	?_GetIntFromUartData+1,AdcSingleSample@retNum+1
  4810  001276  C068  F07A         	movff	?_GetIntFromUartData+2,AdcSingleSample@retNum+2
  4811  00127A  C069  F07B         	movff	?_GetIntFromUartData+3,AdcSingleSample@retNum+3
  4812                           
  4813                           ;AdcApp.c: 57: channelNum = (retNum / 0xA) % 0x64;
  4814  00127E  0E0A               	movlw	10
  4815  001280  6E1C               	movwf	___lldiv@divisor,c
  4816  001282  0E00               	movlw	0
  4817  001284  6E1D               	movwf	___lldiv@divisor+1,c
  4818  001286  0E00               	movlw	0
  4819  001288  6E1E               	movwf	___lldiv@divisor+2,c
  4820  00128A  0E00               	movlw	0
  4821  00128C  6E1F               	movwf	___lldiv@divisor+3,c
  4822  00128E  C078  F018         	movff	AdcSingleSample@retNum,___lldiv@dividend
  4823  001292  C079  F019         	movff	AdcSingleSample@retNum+1,___lldiv@dividend+1
  4824  001296  C07A  F01A         	movff	AdcSingleSample@retNum+2,___lldiv@dividend+2
  4825  00129A  C07B  F01B         	movff	AdcSingleSample@retNum+3,___lldiv@dividend+3
  4826  00129E  EC1B  F010         	call	___lldiv	;wreg free
  4827  0012A2  C018  F025         	movff	?___lldiv,___llmod@dividend
  4828  0012A6  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  4829  0012AA  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  4830  0012AE  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  4831  0012B2  0E64               	movlw	100
  4832  0012B4  6E29               	movwf	___llmod@divisor,c
  4833  0012B6  0E00               	movlw	0
  4834  0012B8  6E2A               	movwf	___llmod@divisor+1,c
  4835  0012BA  0E00               	movlw	0
  4836  0012BC  6E2B               	movwf	___llmod@divisor+2,c
  4837  0012BE  0E00               	movlw	0
  4838  0012C0  6E2C               	movwf	___llmod@divisor+3,c
  4839  0012C2  EC06  F011         	call	___llmod	;wreg free
  4840  0012C6  C025  F037         	movff	?___llmod,_channelNum
  4841  0012CA  C026  F038         	movff	?___llmod+1,_channelNum+1
  4842                           
  4843                           ;AdcApp.c: 58: numSamples = retNum % 0xA;
  4844  0012CE  C078  F025         	movff	AdcSingleSample@retNum,___llmod@dividend
  4845  0012D2  C079  F026         	movff	AdcSingleSample@retNum+1,___llmod@dividend+1
  4846  0012D6  C07A  F027         	movff	AdcSingleSample@retNum+2,___llmod@dividend+2
  4847  0012DA  C07B  F028         	movff	AdcSingleSample@retNum+3,___llmod@dividend+3
  4848  0012DE  0E0A               	movlw	10
  4849  0012E0  6E29               	movwf	___llmod@divisor,c
  4850  0012E2  0E00               	movlw	0
  4851  0012E4  6E2A               	movwf	___llmod@divisor+1,c
  4852  0012E6  0E00               	movlw	0
  4853  0012E8  6E2B               	movwf	___llmod@divisor+2,c
  4854  0012EA  0E00               	movlw	0
  4855  0012EC  6E2C               	movwf	___llmod@divisor+3,c
  4856  0012EE  EC06  F011         	call	___llmod	;wreg free
  4857  0012F2  C025  F14E         	movff	?___llmod,_numSamples
  4858  0012F6  C026  F14F         	movff	?___llmod+1,_numSamples+1
  4859                           
  4860                           ;AdcApp.c: 60: if(channelNum > (0x04))
  4861  0012FA  5038               	movf	_channelNum+1,w,c
  4862  0012FC  E104               	bnz	u7430
  4863  0012FE  0E05               	movlw	5
  4864  001300  5C37               	subwf	_channelNum,w,c
  4865  001302  A0D8               	btfss	status,0,c
  4866  001304  D007               	goto	l98
  4867  001306                     u7430:
  4868                           
  4869                           ;AdcApp.c: 61: {
  4870                           ;AdcApp.c: 62: UART_Write_Text("NOT OK \n\r");
  4871  001306  0ED9               	movlw	low STR_1
  4872  001308  6E19               	movwf	UART_Write_Text@text,c
  4873  00130A  0E7F               	movlw	high STR_1
  4874  00130C  6E1A               	movwf	UART_Write_Text@text+1,c
  4875  00130E  EC98  F010         	call	_UART_Write_Text	;wreg free
  4876                           
  4877                           ;AdcApp.c: 63: }
  4878  001312  0012               	return	
  4879  001314                     l98:
  4880                           
  4881                           ;AdcApp.c: 64: else
  4882                           ;AdcApp.c: 65: {
  4883                           ;AdcApp.c: 66: if(cType == TX_TYPE)
  4884  001314  0100               	movlb	0	; () banked
  4885  001316  5177               	movf	AdcSingleSample@cType& (0+255),w,b
  4886  001318  A4D8               	btfss	status,2,c
  4887  00131A  D01C               	goto	l105
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;AdcApp.c: 67: {
  4891                           ;AdcApp.c: 68: if(channelNum == 0) UART_Write_Text("SAMPLE CHANNEL NAME");
  4892  00131C  5037               	movf	_channelNum,w,c
  4893  00131E  1038               	iorwf	_channelNum+1,w,c
  4894  001320  A4D8               	btfss	status,2,c
  4895  001322  D006               	goto	l101
  4896                           
  4897                           ; BSR set to: 0
  4898  001324  0E9C               	movlw	low STR_3
  4899  001326  6E19               	movwf	UART_Write_Text@text,c
  4900  001328  0E7F               	movlw	high STR_3
  4901  00132A  6E1A               	movwf	UART_Write_Text@text+1,c
  4902  00132C  EC98  F010         	call	_UART_Write_Text	;wreg free
  4903  001330                     l101:
  4904                           
  4905                           ;AdcApp.c: 69: if(channelNum == 0x0 || channelNum == 0x1)
  4906  001330  5037               	movf	_channelNum,w,c
  4907  001332  1038               	iorwf	_channelNum+1,w,c
  4908  001334  B4D8               	btfsc	status,2,c
  4909  001336  D004               	goto	u7470
  4910  001338  0437               	decf	_channelNum,w,c
  4911  00133A  1038               	iorwf	_channelNum+1,w,c
  4912  00133C  A4D8               	btfss	status,2,c
  4913  00133E  D004               	goto	l102
  4914  001340                     u7470:
  4915                           
  4916                           ;AdcApp.c: 70: {
  4917                           ;AdcApp.c: 71: needToSample = 1;
  4918  001340  0E01               	movlw	1
  4919  001342  0100               	movlb	0	; () banked
  4920  001344  6FD4               	movwf	_needToSample& (0+255),b	;volatile
  4921                           
  4922                           ;AdcApp.c: 72: }
  4923  001346  D006               	goto	l105
  4924  001348                     l102:
  4925                           
  4926                           ;AdcApp.c: 74: else
  4927                           ;AdcApp.c: 75: {
  4928                           ;AdcApp.c: 76: UART_Write_Text("NOT OK \n\r");
  4929                           
  4930                           ; BSR set to: 0
  4931  001348  0ED9               	movlw	low STR_1
  4932  00134A  6E19               	movwf	UART_Write_Text@text,c
  4933  00134C  0E7F               	movlw	high STR_1
  4934  00134E  6E1A               	movwf	UART_Write_Text@text+1,c
  4935  001350  EC98  F010         	call	_UART_Write_Text	;wreg free
  4936  001354                     l105:
  4937                           
  4938                           ;AdcApp.c: 77: }
  4939                           ;AdcApp.c: 79: }
  4940                           ;AdcApp.c: 81: if(cType == RX_TYPE)
  4941  001354  0100               	movlb	0	; () banked
  4942  001356  0577               	decf	AdcSingleSample@cType& (0+255),w,b
  4943  001358  A4D8               	btfss	status,2,c
  4944  00135A  D003               	goto	l106
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;AdcApp.c: 82: {
  4948                           ;AdcApp.c: 83: needToSample = 1;
  4949  00135C  0E01               	movlw	1
  4950  00135E  6FD4               	movwf	_needToSample& (0+255),b	;volatile
  4951                           
  4952                           ;AdcApp.c: 84: }
  4953  001360  0012               	return	
  4954  001362                     l106:
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;AdcApp.c: 85: else
  4958                           ;AdcApp.c: 86: {
  4959                           ;AdcApp.c: 87: UART_Write_Text("NOT OK \n\r");
  4960                           
  4961                           ; BSR set to: 0
  4962  001362  0ED9               	movlw	low STR_1
  4963  001364  6E19               	movwf	UART_Write_Text@text,c
  4964  001366  0E7F               	movlw	high STR_1
  4965  001368  6E1A               	movwf	UART_Write_Text@text+1,c
  4966  00136A  EC98  F010         	call	_UART_Write_Text	;wreg free
  4967  00136E  0012               	return	
  4968  001370                     __end_of_AdcSingleSample:
  4969                           	opt stack 0
  4970                           tosu	equ	0xFFF
  4971                           tosh	equ	0xFFE
  4972                           tosl	equ	0xFFD
  4973                           pclath	equ	0xFFA
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           postinc0	equ	0xFEE
  4981                           wreg	equ	0xFE8
  4982                           indf1	equ	0xFE7
  4983                           postdec1	equ	0xFE5
  4984                           fsr1h	equ	0xFE2
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function ___lldiv *****************
  4993 ;; Defined at:
  4994 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  dividend        4   23[COMRAM] unsigned long 
  4997 ;;  divisor         4   27[COMRAM] unsigned long 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  quotient        4   31[COMRAM] unsigned long 
  5000 ;;  counter         1   35[COMRAM] unsigned char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  4   23[COMRAM] unsigned long 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5010 ;;      Params:         8       0       0       0       0       0       0
  5011 ;;      Locals:         5       0       0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0
  5013 ;;      Totals:        13       0       0       0       0       0       0
  5014 ;;Total ram usage:       13 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    3
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_AdcSingleSample
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text9
  5025  002036                     __ptext9:
  5026                           	opt stack 0
  5027  002036                     ___lldiv:
  5028                           	opt stack 24
  5029                           
  5030                           ;incstack = 0
  5031  002036  0E00               	movlw	0
  5032  002038  6E20               	movwf	___lldiv@quotient,c
  5033  00203A  0E00               	movlw	0
  5034  00203C  6E21               	movwf	___lldiv@quotient+1,c
  5035  00203E  0E00               	movlw	0
  5036  002040  6E22               	movwf	___lldiv@quotient+2,c
  5037  002042  0E00               	movlw	0
  5038  002044  6E23               	movwf	___lldiv@quotient+3,c
  5039  002046  501C               	movf	___lldiv@divisor,w,c
  5040  002048  101D               	iorwf	___lldiv@divisor+1,w,c
  5041  00204A  101E               	iorwf	___lldiv@divisor+2,w,c
  5042  00204C  101F               	iorwf	___lldiv@divisor+3,w,c
  5043  00204E  B4D8               	btfsc	status,2,c
  5044  002050  D02A               	goto	l1652
  5045  002052  0E01               	movlw	1
  5046  002054  6E24               	movwf	___lldiv@counter,c
  5047  002056  D006               	goto	l1647
  5048  002058  90D8               	bcf	status,0,c
  5049  00205A  361C               	rlcf	___lldiv@divisor,f,c
  5050  00205C  361D               	rlcf	___lldiv@divisor+1,f,c
  5051  00205E  361E               	rlcf	___lldiv@divisor+2,f,c
  5052  002060  361F               	rlcf	___lldiv@divisor+3,f,c
  5053  002062  2A24               	incf	___lldiv@counter,f,c
  5054  002064                     l1647:
  5055  002064  AE1F               	btfss	___lldiv@divisor+3,7,c
  5056  002066  D7F8               	goto	l1648
  5057  002068                     u7250:
  5058  002068  90D8               	bcf	status,0,c
  5059  00206A  3620               	rlcf	___lldiv@quotient,f,c
  5060  00206C  3621               	rlcf	___lldiv@quotient+1,f,c
  5061  00206E  3622               	rlcf	___lldiv@quotient+2,f,c
  5062  002070  3623               	rlcf	___lldiv@quotient+3,f,c
  5063  002072  501C               	movf	___lldiv@divisor,w,c
  5064  002074  5C18               	subwf	___lldiv@dividend,w,c
  5065  002076  501D               	movf	___lldiv@divisor+1,w,c
  5066  002078  5819               	subwfb	___lldiv@dividend+1,w,c
  5067  00207A  501E               	movf	___lldiv@divisor+2,w,c
  5068  00207C  581A               	subwfb	___lldiv@dividend+2,w,c
  5069  00207E  501F               	movf	___lldiv@divisor+3,w,c
  5070  002080  581B               	subwfb	___lldiv@dividend+3,w,c
  5071  002082  A0D8               	btfss	status,0,c
  5072  002084  D009               	goto	l1651
  5073  002086  501C               	movf	___lldiv@divisor,w,c
  5074  002088  5E18               	subwf	___lldiv@dividend,f,c
  5075  00208A  501D               	movf	___lldiv@divisor+1,w,c
  5076  00208C  5A19               	subwfb	___lldiv@dividend+1,f,c
  5077  00208E  501E               	movf	___lldiv@divisor+2,w,c
  5078  002090  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5079  002092  501F               	movf	___lldiv@divisor+3,w,c
  5080  002094  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5081  002096  8020               	bsf	___lldiv@quotient,0,c
  5082  002098                     l1651:
  5083  002098  90D8               	bcf	status,0,c
  5084  00209A  321F               	rrcf	___lldiv@divisor+3,f,c
  5085  00209C  321E               	rrcf	___lldiv@divisor+2,f,c
  5086  00209E  321D               	rrcf	___lldiv@divisor+1,f,c
  5087  0020A0  321C               	rrcf	___lldiv@divisor,f,c
  5088  0020A2  2E24               	decfsz	___lldiv@counter,f,c
  5089  0020A4  D7E1               	goto	u7250
  5090  0020A6                     l1652:
  5091  0020A6  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5092  0020AA  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5093  0020AE  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5094  0020B2  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5095  0020B6  0012               	return		;funcret
  5096  0020B8                     __end_of___lldiv:
  5097                           	opt stack 0
  5098                           tosu	equ	0xFFF
  5099                           tosh	equ	0xFFE
  5100                           tosl	equ	0xFFD
  5101                           pclath	equ	0xFFA
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           indf1	equ	0xFE7
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _GetIntFromUartData *****************
  5121 ;; Defined at:
  5122 ;;		line 40 in file "SystemCommon.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  c               1   18[BANK0 ] unsigned char 
  5127 ;;  idx             2   19[BANK0 ] int 
  5128 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  4    6[BANK0 ] unsigned long 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5138 ;;      Params:         0       4       0       0       0       0       0
  5139 ;;      Locals:         0      11       0       0       0       0       0
  5140 ;;      Temps:          2       0       0       0       0       0       0
  5141 ;;      Totals:         2      15       0       0       0       0       0
  5142 ;;Total ram usage:       17 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    6
  5145 ;; This function calls:
  5146 ;;		_ZeroArray
  5147 ;;		_strtol
  5148 ;; This function is called by:
  5149 ;;		_AdcSingleSample
  5150 ;;		_UpdateSynthFreq
  5151 ;;		_DacSetValue
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text10
  5156  001DF0                     __ptext10:
  5157                           	opt stack 0
  5158  001DF0                     _GetIntFromUartData:
  5159                           	opt stack 21
  5160                           
  5161                           ;SystemCommon.c: 42: char dataRegArr[8];
  5162                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  5163                           
  5164                           ;incstack = 0
  5165  001DF0  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5166  001DF2  6E20               	movwf	ZeroArray@array,c
  5167  001DF4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5168  001DF6  6E21               	movwf	ZeroArray@array+1,c
  5169  001DF8  0E00               	movlw	0
  5170  001DFA  6E23               	movwf	ZeroArray@size+1,c
  5171  001DFC  0E08               	movlw	8
  5172  001DFE  6E22               	movwf	ZeroArray@size,c
  5173  001E00  EC04  F016         	call	_ZeroArray	;wreg free
  5174                           
  5175                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  5176  001E04  0E00               	movlw	0
  5177  001E06  0100               	movlb	0	; () banked
  5178  001E08  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5179  001E0A  0E00               	movlw	0
  5180  001E0C  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  5181  001E0E                     l6709:
  5182                           
  5183                           ; BSR set to: 0
  5184  001E0E  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5185  001E10  D006               	goto	l1127
  5186  001E12  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5187  001E14  E120               	bnz	l6727
  5188  001E16  0E08               	movlw	8
  5189  001E18  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5190  001E1A  B0D8               	btfsc	status,0,c
  5191  001E1C  D01C               	goto	u7090
  5192  001E1E                     l1127:
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;SystemCommon.c: 46: {
  5196                           ;SystemCommon.c: 47: char c = data[idx + 1];
  5197                           
  5198                           ; BSR set to: 0
  5199  001E1E  0E01               	movlw	1
  5200  001E20  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5201  001E22  6E2E               	movwf	??_GetIntFromUartData& (0+255),c
  5202  001E24  0E00               	movlw	0
  5203  001E26  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5204  001E28  6E2F               	movwf	(??_GetIntFromUartData+1)& (0+255),c
  5205  001E2A  502E               	movf	??_GetIntFromUartData,w,c
  5206  001E2C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5207  001E2E  6ED9               	movwf	fsr2l,c
  5208  001E30  502F               	movf	??_GetIntFromUartData+1,w,c
  5209  001E32  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5210  001E34  6EDA               	movwf	fsr2h,c
  5211  001E36  50DF               	movf	indf2,w,c
  5212  001E38  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;SystemCommon.c: 48: if(c == (0))
  5216  001E3A  5172               	movf	GetIntFromUartData@c& (0+255),w,b
  5217  001E3C  B4D8               	btfsc	status,2,c
  5218  001E3E  D00B               	goto	u7090
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;SystemCommon.c: 52: else
  5222                           ;SystemCommon.c: 53: {
  5223                           ;SystemCommon.c: 54: dataRegArr[idx] = c;
  5224                           
  5225                           ; BSR set to: 0
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;SystemCommon.c: 51: }
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;SystemCommon.c: 49: {
  5232                           ;SystemCommon.c: 50: break;
  5233  001E40  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5234  001E42  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5235  001E44  6ED9               	movwf	fsr2l,c
  5236  001E46  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5237  001E48  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5238  001E4A  6EDA               	movwf	fsr2h,c
  5239  001E4C  C072  FFDF         	movff	GetIntFromUartData@c,indf2
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244  001E50  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5245  001E52  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5246  001E54  D7DC               	goto	l6709
  5247  001E56                     u7090:
  5248  001E56                     l6727:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;SystemCommon.c: 55: }
  5252                           ;SystemCommon.c: 56: }
  5253                           ;SystemCommon.c: 58: return strtol(dataRegArr, (0), 10);
  5254  001E56  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5255  001E58  6E24               	movwf	strtol@s,c
  5256  001E5A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5257  001E5C  6E25               	movwf	strtol@s+1,c
  5258  001E5E  0E00               	movlw	0
  5259  001E60  6E26               	movwf	strtol@endptr,c
  5260  001E62  0E00               	movlw	0
  5261  001E64  6E27               	movwf	strtol@endptr+1,c
  5262  001E66  0E00               	movlw	0
  5263  001E68  6E29               	movwf	strtol@base+1,c
  5264  001E6A  0E0A               	movlw	10
  5265  001E6C  6E28               	movwf	strtol@base,c
  5266  001E6E  ECBC  F005         	call	_strtol	;wreg free
  5267  001E72  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5268  001E76  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5269  001E7A  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5270  001E7E  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5271  001E82  0012               	return	
  5272  001E84                     __end_of_GetIntFromUartData:
  5273                           	opt stack 0
  5274                           tosu	equ	0xFFF
  5275                           tosh	equ	0xFFE
  5276                           tosl	equ	0xFFD
  5277                           pclath	equ	0xFFA
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf1	equ	0xFE7
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function _strtol *****************
  5297 ;; Defined at:
  5298 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5301 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5302 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5303 ;;		 -> NULL(0), 
  5304 ;;  base            2   39[COMRAM] int 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  a               4    1[BANK0 ] long 
  5307 ;;  c               1    5[BANK0 ] unsigned char 
  5308 ;;  sign            1    0[BANK0 ] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  4   35[COMRAM] long 
  5311 ;; Registers used:
  5312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5318 ;;      Params:         6       0       0       0       0       0       0
  5319 ;;      Locals:         0       6       0       0       0       0       0
  5320 ;;      Temps:          4       0       0       0       0       0       0
  5321 ;;      Totals:        10       6       0       0       0       0       0
  5322 ;;Total ram usage:       16 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    5
  5325 ;; This function calls:
  5326 ;;		___lmul
  5327 ;;		_isalpha
  5328 ;;		_isdigit
  5329 ;;		_isspace
  5330 ;;		_toupper
  5331 ;; This function is called by:
  5332 ;;		_GetIntFromUartData
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text11
  5337  000B78                     __ptext11:
  5338                           	opt stack 0
  5339  000B78                     _strtol:
  5340                           	opt stack 21
  5341                           
  5342                           ;incstack = 0
  5343  000B78  C024  FFD9         	movff	strtol@s,fsr2l
  5344  000B7C  C025  FFDA         	movff	strtol@s+1,fsr2h
  5345  000B80  50DF               	movf	indf2,w,c
  5346  000B82  0100               	movlb	0	; () banked
  5347  000B84  6F65               	movwf	strtol@c& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350  000B86  4A24               	infsnz	strtol@s,f,c
  5351  000B88  2A25               	incf	strtol@s+1,f,c
  5352                           
  5353                           ; BSR set to: 0
  5354  000B8A  5165               	movf	strtol@c& (0+255),w,b
  5355  000B8C  EC89  F015         	call	_isspace
  5356  000B90  B0D8               	btfsc	status,0,c
  5357  000B92  D7F2               	goto	_strtol
  5358  000B94  0E00               	movlw	0
  5359  000B96  0100               	movlb	0	; () banked
  5360  000B98  6F61               	movwf	strtol@a& (0+255),b
  5361  000B9A  0E00               	movlw	0
  5362  000B9C  6F62               	movwf	(strtol@a+1)& (0+255),b
  5363  000B9E  0E00               	movlw	0
  5364  000BA0  6F63               	movwf	(strtol@a+2)& (0+255),b
  5365  000BA2  0E00               	movlw	0
  5366  000BA4  6F64               	movwf	(strtol@a+3)& (0+255),b
  5367  000BA6  0E00               	movlw	0
  5368  000BA8  6F60               	movwf	strtol@sign& (0+255),b
  5369                           
  5370                           ; BSR set to: 0
  5371  000BAA  0E2D               	movlw	45
  5372  000BAC  1965               	xorwf	strtol@c& (0+255),w,b
  5373  000BAE  A4D8               	btfss	status,2,c
  5374  000BB0  D003               	goto	l1875
  5375                           
  5376                           ; BSR set to: 0
  5377  000BB2  0E01               	movlw	1
  5378  000BB4  6F60               	movwf	strtol@sign& (0+255),b
  5379  000BB6  D004               	goto	u6360
  5380  000BB8                     l1875:
  5381                           
  5382                           ; BSR set to: 0
  5383                           
  5384                           ; BSR set to: 0
  5385  000BB8  0E2B               	movlw	43
  5386  000BBA  1965               	xorwf	strtol@c& (0+255),w,b
  5387  000BBC  A4D8               	btfss	status,2,c
  5388  000BBE  D008               	goto	l1877
  5389  000BC0                     u6360:
  5390                           
  5391                           ; BSR set to: 0
  5392  000BC0  C024  FFD9         	movff	strtol@s,fsr2l
  5393  000BC4  C025  FFDA         	movff	strtol@s+1,fsr2h
  5394  000BC8  50DF               	movf	indf2,w,c
  5395  000BCA  6F65               	movwf	strtol@c& (0+255),b
  5396                           
  5397                           ; BSR set to: 0
  5398  000BCC  4A24               	infsnz	strtol@s,f,c
  5399  000BCE  2A25               	incf	strtol@s+1,f,c
  5400  000BD0                     l1877:
  5401                           
  5402                           ; BSR set to: 0
  5403                           
  5404                           ; BSR set to: 0
  5405                           
  5406                           ; BSR set to: 0
  5407  000BD0  0E30               	movlw	48
  5408  000BD2  1965               	xorwf	strtol@c& (0+255),w,b
  5409  000BD4  A4D8               	btfss	status,2,c
  5410  000BD6  D02E               	goto	l1885
  5411                           
  5412                           ; BSR set to: 0
  5413  000BD8  C024  FFD9         	movff	strtol@s,fsr2l
  5414  000BDC  C025  FFDA         	movff	strtol@s+1,fsr2h
  5415  000BE0  50DF               	movf	indf2,w,c
  5416  000BE2  6F65               	movwf	strtol@c& (0+255),b
  5417                           
  5418                           ; BSR set to: 0
  5419  000BE4  4A24               	infsnz	strtol@s,f,c
  5420  000BE6  2A25               	incf	strtol@s+1,f,c
  5421                           
  5422                           ; BSR set to: 0
  5423  000BE8  5028               	movf	strtol@base,w,c
  5424  000BEA  1029               	iorwf	strtol@base+1,w,c
  5425  000BEC  B4D8               	btfsc	status,2,c
  5426  000BEE  D005               	goto	u6390
  5427                           
  5428                           ; BSR set to: 0
  5429  000BF0  0E10               	movlw	16
  5430  000BF2  1828               	xorwf	strtol@base,w,c
  5431  000BF4  1029               	iorwf	strtol@base+1,w,c
  5432  000BF6  A4D8               	btfss	status,2,c
  5433  000BF8  D015               	goto	l1879
  5434  000BFA                     u6390:
  5435                           
  5436                           ; BSR set to: 0
  5437                           
  5438                           ; BSR set to: 0
  5439  000BFA  0E78               	movlw	120
  5440  000BFC  1965               	xorwf	strtol@c& (0+255),w,b
  5441  000BFE  B4D8               	btfsc	status,2,c
  5442  000C00  D004               	goto	u6410
  5443                           
  5444                           ; BSR set to: 0
  5445  000C02  0E58               	movlw	88
  5446  000C04  1965               	xorwf	strtol@c& (0+255),w,b
  5447  000C06  A4D8               	btfss	status,2,c
  5448  000C08  D00D               	goto	l1879
  5449  000C0A                     u6410:
  5450                           
  5451                           ; BSR set to: 0
  5452                           
  5453                           ; BSR set to: 0
  5454  000C0A  0E00               	movlw	0
  5455  000C0C  6E29               	movwf	strtol@base+1,c
  5456  000C0E  0E10               	movlw	16
  5457  000C10  6E28               	movwf	strtol@base,c
  5458                           
  5459                           ; BSR set to: 0
  5460  000C12  C024  FFD9         	movff	strtol@s,fsr2l
  5461  000C16  C025  FFDA         	movff	strtol@s+1,fsr2h
  5462  000C1A  50DF               	movf	indf2,w,c
  5463  000C1C  6F65               	movwf	strtol@c& (0+255),b
  5464                           
  5465                           ; BSR set to: 0
  5466  000C1E  4A24               	infsnz	strtol@s,f,c
  5467  000C20  2A25               	incf	strtol@s+1,f,c
  5468  000C22  D008               	goto	l1885
  5469  000C24                     l1879:
  5470                           
  5471                           ; BSR set to: 0
  5472                           
  5473                           ; BSR set to: 0
  5474  000C24  5028               	movf	strtol@base,w,c
  5475  000C26  1029               	iorwf	strtol@base+1,w,c
  5476  000C28  A4D8               	btfss	status,2,c
  5477  000C2A  D004               	goto	l1885
  5478                           
  5479                           ; BSR set to: 0
  5480  000C2C  0E00               	movlw	0
  5481  000C2E  6E29               	movwf	strtol@base+1,c
  5482  000C30  0E08               	movlw	8
  5483  000C32  6E28               	movwf	strtol@base,c
  5484  000C34                     l1885:
  5485                           
  5486                           ; BSR set to: 0
  5487                           
  5488                           ; BSR set to: 0
  5489                           
  5490                           ; BSR set to: 0
  5491                           
  5492                           ; BSR set to: 0
  5493  000C34  5028               	movf	strtol@base,w,c
  5494  000C36  1029               	iorwf	strtol@base+1,w,c
  5495  000C38  A4D8               	btfss	status,2,c
  5496  000C3A  D004               	goto	l1886
  5497                           
  5498                           ; BSR set to: 0
  5499  000C3C  0E00               	movlw	0
  5500  000C3E  6E29               	movwf	strtol@base+1,c
  5501  000C40  0E0A               	movlw	10
  5502  000C42  6E28               	movwf	strtol@base,c
  5503  000C44                     l1886:
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ; BSR set to: 0
  5508                           
  5509                           ; BSR set to: 0
  5510  000C44  5165               	movf	strtol@c& (0+255),w,b
  5511  000C46  EC75  F015         	call	_isalpha
  5512  000C4A  A0D8               	btfss	status,0,c
  5513  000C4C  D008               	goto	l1888
  5514  000C4E  0100               	movlb	0	; () banked
  5515  000C50  5165               	movf	strtol@c& (0+255),w,b
  5516  000C52  EC50  F016         	call	_toupper
  5517  000C56  0FC9               	addlw	201
  5518  000C58  0100               	movlb	0	; () banked
  5519  000C5A  6F65               	movwf	strtol@c& (0+255),b
  5520  000C5C  D009               	goto	l1891
  5521  000C5E                     l1888:
  5522                           
  5523                           ; BSR set to: 0
  5524  000C5E  0100               	movlb	0	; () banked
  5525  000C60  5165               	movf	strtol@c& (0+255),w,b
  5526  000C62  ECE6  F015         	call	_isdigit
  5527  000C66  A0D8               	btfss	status,0,c
  5528  000C68  D039               	goto	l1892
  5529  000C6A  0E30               	movlw	48
  5530  000C6C  0100               	movlb	0	; () banked
  5531  000C6E  5F65               	subwf	strtol@c& (0+255),f,b
  5532  000C70                     l1891:
  5533                           
  5534                           ; BSR set to: 0
  5535                           
  5536                           ; BSR set to: 0
  5537                           
  5538                           ; BSR set to: 0
  5539  000C70  5165               	movf	strtol@c& (0+255),w,b
  5540  000C72  6E2A               	movwf	??_strtol& (0+255),c
  5541  000C74  6A2B               	clrf	(??_strtol+1)& (0+255),c
  5542  000C76  5028               	movf	strtol@base,w,c
  5543  000C78  5C2A               	subwf	??_strtol,w,c
  5544  000C7A  502B               	movf	??_strtol+1,w,c
  5545  000C7C  0A80               	xorlw	128
  5546  000C7E  6E2C               	movwf	(??_strtol+2)& (0+255),c
  5547  000C80  5029               	movf	strtol@base+1,w,c
  5548  000C82  0A80               	xorlw	128
  5549  000C84  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  5550  000C86  B0D8               	btfsc	status,0,c
  5551  000C88  D029               	goto	l1892
  5552                           
  5553                           ; BSR set to: 0
  5554                           
  5555                           ; BSR set to: 0
  5556                           
  5557                           ; BSR set to: 0
  5558  000C8A  C028  F018         	movff	strtol@base,___lmul@multiplier
  5559  000C8E  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  5560  000C92  0E00               	movlw	0
  5561  000C94  BE19               	btfsc	___lmul@multiplier+1,7,c
  5562  000C96  0EFF               	movlw	-1
  5563  000C98  6E1A               	movwf	___lmul@multiplier+2,c
  5564  000C9A  6E1B               	movwf	___lmul@multiplier+3,c
  5565  000C9C  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  5566  000CA0  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  5567  000CA4  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  5568  000CA8  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  5569  000CAC  EC78  F012         	call	___lmul	;wreg free
  5570  000CB0  0100               	movlb	0	; () banked
  5571  000CB2  5165               	movf	strtol@c& (0+255),w,b
  5572  000CB4  2418               	addwf	?___lmul,w,c
  5573  000CB6  6F61               	movwf	strtol@a& (0+255),b
  5574  000CB8  0E00               	movlw	0
  5575  000CBA  2019               	addwfc	?___lmul+1,w,c
  5576  000CBC  6F62               	movwf	(strtol@a+1)& (0+255),b
  5577  000CBE  0E00               	movlw	0
  5578  000CC0  201A               	addwfc	?___lmul+2,w,c
  5579  000CC2  6F63               	movwf	(strtol@a+2)& (0+255),b
  5580  000CC4  0E00               	movlw	0
  5581  000CC6  201B               	addwfc	?___lmul+3,w,c
  5582  000CC8  6F64               	movwf	(strtol@a+3)& (0+255),b
  5583                           
  5584                           ; BSR set to: 0
  5585  000CCA  C024  FFD9         	movff	strtol@s,fsr2l
  5586  000CCE  C025  FFDA         	movff	strtol@s+1,fsr2h
  5587  000CD2  50DF               	movf	indf2,w,c
  5588  000CD4  6F65               	movwf	strtol@c& (0+255),b
  5589                           
  5590                           ; BSR set to: 0
  5591  000CD6  4A24               	infsnz	strtol@s,f,c
  5592  000CD8  2A25               	incf	strtol@s+1,f,c
  5593  000CDA  D7B4               	goto	l1886
  5594  000CDC                     l1892:
  5595                           
  5596                           ; BSR set to: 0
  5597  000CDC  5026               	movf	strtol@endptr,w,c
  5598  000CDE  1027               	iorwf	strtol@endptr+1,w,c
  5599  000CE0  B4D8               	btfsc	status,2,c
  5600  000CE2  D00E               	goto	l1894
  5601  000CE4  0EFF               	movlw	255
  5602  000CE6  2424               	addwf	strtol@s,w,c
  5603  000CE8  6E2A               	movwf	??_strtol& (0+255),c
  5604  000CEA  0EFF               	movlw	255
  5605  000CEC  2025               	addwfc	strtol@s+1,w,c
  5606  000CEE  6E2B               	movwf	(??_strtol+1)& (0+255),c
  5607  000CF0  C026  FFD9         	movff	strtol@endptr,fsr2l
  5608  000CF4  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  5609  000CF8  C02A  FFDE         	movff	??_strtol,postinc2
  5610  000CFC  C02B  FFDD         	movff	??_strtol+1,postdec2
  5611  000D00                     l1894:
  5612  000D00  0100               	movlb	0	; () banked
  5613  000D02  5160               	movf	strtol@sign& (0+255),w,b
  5614  000D04  B4D8               	btfsc	status,2,c
  5615  000D06  D01A               	goto	l1895
  5616                           
  5617                           ; BSR set to: 0
  5618  000D08  C061  F02A         	movff	strtol@a,??_strtol
  5619  000D0C  C062  F02B         	movff	strtol@a+1,??_strtol+1
  5620  000D10  C063  F02C         	movff	strtol@a+2,??_strtol+2
  5621  000D14  C064  F02D         	movff	strtol@a+3,??_strtol+3
  5622  000D18  1E2A               	comf	??_strtol,f,c
  5623  000D1A  1E2B               	comf	??_strtol+1,f,c
  5624  000D1C  1E2C               	comf	??_strtol+2,f,c
  5625  000D1E  1E2D               	comf	??_strtol+3,f,c
  5626  000D20  2A2A               	incf	??_strtol,f,c
  5627  000D22  0E00               	movlw	0
  5628  000D24  222B               	addwfc	??_strtol+1,f,c
  5629  000D26  222C               	addwfc	??_strtol+2,f,c
  5630  000D28  222D               	addwfc	??_strtol+3,f,c
  5631  000D2A  C02A  F024         	movff	??_strtol,?_strtol
  5632  000D2E  C02B  F025         	movff	??_strtol+1,?_strtol+1
  5633  000D32  C02C  F026         	movff	??_strtol+2,?_strtol+2
  5634  000D36  C02D  F027         	movff	??_strtol+3,?_strtol+3
  5635                           
  5636                           ; BSR set to: 0
  5637  000D3A  0012               	return	
  5638  000D3C                     l1895:
  5639                           
  5640                           ; BSR set to: 0
  5641  000D3C  C061  F024         	movff	strtol@a,?_strtol
  5642  000D40  C062  F025         	movff	strtol@a+1,?_strtol+1
  5643  000D44  C063  F026         	movff	strtol@a+2,?_strtol+2
  5644  000D48  C064  F027         	movff	strtol@a+3,?_strtol+3
  5645                           
  5646                           ; BSR set to: 0
  5647  000D4C  0012               	return		;funcret
  5648  000D4E                     __end_of_strtol:
  5649                           	opt stack 0
  5650                           tosu	equ	0xFFF
  5651                           tosh	equ	0xFFE
  5652                           tosl	equ	0xFFD
  5653                           pclath	equ	0xFFA
  5654                           tblptru	equ	0xFF8
  5655                           tblptrh	equ	0xFF7
  5656                           tblptrl	equ	0xFF6
  5657                           tablat	equ	0xFF5
  5658                           prodh	equ	0xFF4
  5659                           prodl	equ	0xFF3
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           indf1	equ	0xFE7
  5663                           postdec1	equ	0xFE5
  5664                           fsr1h	equ	0xFE2
  5665                           fsr1l	equ	0xFE1
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _toupper *****************
  5674 ;; Defined at:
  5675 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  c               1    wreg     unsigned char 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  c               1   23[COMRAM] unsigned char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      unsigned char 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5689 ;;      Params:         0       0       0       0       0       0       0
  5690 ;;      Locals:         1       0       0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0
  5692 ;;      Totals:         1       0       0       0       0       0       0
  5693 ;;Total ram usage:        1 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    3
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_readUartByte
  5700 ;;		_strtol
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text12
  5705  002CA0                     __ptext12:
  5706                           	opt stack 0
  5707  002CA0                     _toupper:
  5708                           	opt stack 26
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;incstack = 0
  5712                           ;toupper@c stored from wreg
  5713  002CA0  6E18               	movwf	toupper@c,c
  5714  002CA2  0E7B               	movlw	123
  5715  002CA4  6018               	cpfslt	toupper@c,c
  5716  002CA6  D004               	goto	l1899
  5717  002CA8  0E60               	movlw	96
  5718  002CAA  6418               	cpfsgt	toupper@c,c
  5719  002CAC  D001               	goto	l1899
  5720  002CAE  9A18               	bcf	toupper@c,5,c
  5721  002CB0                     l1899:
  5722  002CB0  5018               	movf	toupper@c,w,c
  5723  002CB2  0012               	return	
  5724  002CB4                     __end_of_toupper:
  5725                           	opt stack 0
  5726                           tosu	equ	0xFFF
  5727                           tosh	equ	0xFFE
  5728                           tosl	equ	0xFFD
  5729                           pclath	equ	0xFFA
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           indf1	equ	0xFE7
  5739                           postdec1	equ	0xFE5
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _isspace *****************
  5750 ;; Defined at:
  5751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  c               1    wreg     unsigned char 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  c               1   25[COMRAM] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;		None               void
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5765 ;;      Params:         0       0       0       0       0       0       0
  5766 ;;      Locals:         2       0       0       0       0       0       0
  5767 ;;      Temps:          1       0       0       0       0       0       0
  5768 ;;      Totals:         3       0       0       0       0       0       0
  5769 ;;Total ram usage:        3 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    3
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_strtol
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text13
  5780  002B12                     __ptext13:
  5781                           	opt stack 0
  5782  002B12                     _isspace:
  5783                           	opt stack 22
  5784                           
  5785                           ;incstack = 0
  5786                           ;isspace@c stored from wreg
  5787  002B12  6E1A               	movwf	isspace@c,c
  5788  002B14  0E01               	movlw	1
  5789  002B16  6E19               	movwf	_isspace$2623,c
  5790  002B18  0E20               	movlw	32
  5791  002B1A  181A               	xorwf	isspace@c,w,c
  5792  002B1C  B4D8               	btfsc	status,2,c
  5793  002B1E  D008               	goto	l1981
  5794  002B20  0E0E               	movlw	14
  5795  002B22  601A               	cpfslt	isspace@c,c
  5796  002B24  D003               	goto	u6250
  5797  002B26  0E09               	movlw	9
  5798  002B28  601A               	cpfslt	isspace@c,c
  5799  002B2A  D002               	goto	l1981
  5800  002B2C                     u6250:
  5801  002B2C  0E00               	movlw	0
  5802  002B2E  6E19               	movwf	_isspace$2623,c
  5803  002B30                     l1981:
  5804  002B30  C019  F018         	movff	_isspace$2623,??_isspace
  5805  002B34  3018               	rrcf	??_isspace,w,c
  5806  002B36  0012               	return	
  5807  002B38                     __end_of_isspace:
  5808                           	opt stack 0
  5809                           tosu	equ	0xFFF
  5810                           tosh	equ	0xFFE
  5811                           tosl	equ	0xFFD
  5812                           pclath	equ	0xFFA
  5813                           tblptru	equ	0xFF8
  5814                           tblptrh	equ	0xFF7
  5815                           tblptrl	equ	0xFF6
  5816                           tablat	equ	0xFF5
  5817                           prodh	equ	0xFF4
  5818                           prodl	equ	0xFF3
  5819                           postinc0	equ	0xFEE
  5820                           wreg	equ	0xFE8
  5821                           indf1	equ	0xFE7
  5822                           postdec1	equ	0xFE5
  5823                           fsr1h	equ	0xFE2
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _isdigit *****************
  5833 ;; Defined at:
  5834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  c               1    wreg     unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  c               1   25[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;		None               void
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5848 ;;      Params:         0       0       0       0       0       0       0
  5849 ;;      Locals:         2       0       0       0       0       0       0
  5850 ;;      Temps:          1       0       0       0       0       0       0
  5851 ;;      Totals:         3       0       0       0       0       0       0
  5852 ;;Total ram usage:        3 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    3
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_strtol
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text14
  5863  002BCC                     __ptext14:
  5864                           	opt stack 0
  5865  002BCC                     _isdigit:
  5866                           	opt stack 22
  5867                           
  5868                           ;incstack = 0
  5869                           ;isdigit@c stored from wreg
  5870  002BCC  6E1A               	movwf	isdigit@c,c
  5871  002BCE  0E00               	movlw	0
  5872  002BD0  6E19               	movwf	_isdigit$2620,c
  5873  002BD2  0E3A               	movlw	58
  5874  002BD4  601A               	cpfslt	isdigit@c,c
  5875  002BD6  D005               	goto	l1976
  5876  002BD8  0E2F               	movlw	47
  5877  002BDA  641A               	cpfsgt	isdigit@c,c
  5878  002BDC  D002               	goto	l1976
  5879  002BDE  0E01               	movlw	1
  5880  002BE0  6E19               	movwf	_isdigit$2620,c
  5881  002BE2                     l1976:
  5882  002BE2  C019  F018         	movff	_isdigit$2620,??_isdigit
  5883  002BE6  3018               	rrcf	??_isdigit,w,c
  5884  002BE8  0012               	return	
  5885  002BEA                     __end_of_isdigit:
  5886                           	opt stack 0
  5887                           tosu	equ	0xFFF
  5888                           tosh	equ	0xFFE
  5889                           tosl	equ	0xFFD
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf1	equ	0xFE7
  5900                           postdec1	equ	0xFE5
  5901                           fsr1h	equ	0xFE2
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           postinc2	equ	0xFDE
  5905                           postdec2	equ	0xFDD
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function _isalpha *****************
  5911 ;; Defined at:
  5912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  c               1    wreg     unsigned char 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  c               1   28[COMRAM] unsigned char 
  5917 ;; Return value:  Size  Location     Type
  5918 ;;		None               void
  5919 ;; Registers used:
  5920 ;;		wreg, status,2, status,0, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5926 ;;      Params:         0       0       0       0       0       0       0
  5927 ;;      Locals:         2       0       0       0       0       0       0
  5928 ;;      Temps:          1       0       0       0       0       0       0
  5929 ;;      Totals:         3       0       0       0       0       0       0
  5930 ;;Total ram usage:        3 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:    4
  5933 ;; This function calls:
  5934 ;;		_isupper
  5935 ;; This function is called by:
  5936 ;;		_strtol
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text15
  5941  002AEA                     __ptext15:
  5942                           	opt stack 0
  5943  002AEA                     _isalpha:
  5944                           	opt stack 21
  5945                           
  5946                           ;incstack = 0
  5947                           ;isalpha@c stored from wreg
  5948  002AEA  6E1D               	movwf	isalpha@c,c
  5949  002AEC  0E01               	movlw	1
  5950  002AEE  6E1C               	movwf	_isalpha$2617,c
  5951  002AF0  0E7B               	movlw	123
  5952  002AF2  601D               	cpfslt	isalpha@c,c
  5953  002AF4  D003               	goto	u6270
  5954  002AF6  0E61               	movlw	97
  5955  002AF8  601D               	cpfslt	isalpha@c,c
  5956  002AFA  D007               	goto	l1971
  5957  002AFC                     u6270:
  5958  002AFC  501D               	movf	isalpha@c,w,c
  5959  002AFE  ECF5  F015         	call	_isupper
  5960  002B02  B0D8               	btfsc	status,0,c
  5961  002B04  D002               	goto	l1971
  5962  002B06  0E00               	movlw	0
  5963  002B08  6E1C               	movwf	_isalpha$2617,c
  5964  002B0A                     l1971:
  5965  002B0A  C01C  F01B         	movff	_isalpha$2617,??_isalpha
  5966  002B0E  301B               	rrcf	??_isalpha,w,c
  5967  002B10  0012               	return	
  5968  002B12                     __end_of_isalpha:
  5969                           	opt stack 0
  5970                           tosu	equ	0xFFF
  5971                           tosh	equ	0xFFE
  5972                           tosl	equ	0xFFD
  5973                           pclath	equ	0xFFA
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           indf1	equ	0xFE7
  5983                           postdec1	equ	0xFE5
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _isupper *****************
  5994 ;; Defined at:
  5995 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  c               1    wreg     unsigned char 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  c               1   25[COMRAM] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;		None               void
  6002 ;; Registers used:
  6003 ;;		wreg, status,2, status,0
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6009 ;;      Params:         0       0       0       0       0       0       0
  6010 ;;      Locals:         2       0       0       0       0       0       0
  6011 ;;      Temps:          1       0       0       0       0       0       0
  6012 ;;      Totals:         3       0       0       0       0       0       0
  6013 ;;Total ram usage:        3 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    3
  6016 ;; This function calls:
  6017 ;;		Nothing
  6018 ;; This function is called by:
  6019 ;;		_isalpha
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text16
  6024  002BEA                     __ptext16:
  6025                           	opt stack 0
  6026  002BEA                     _isupper:
  6027                           	opt stack 21
  6028                           
  6029                           ;incstack = 0
  6030                           ;isupper@c stored from wreg
  6031  002BEA  6E1A               	movwf	isupper@c,c
  6032  002BEC  0E00               	movlw	0
  6033  002BEE  6E19               	movwf	_isupper$2626,c
  6034  002BF0  0E5B               	movlw	91
  6035  002BF2  601A               	cpfslt	isupper@c,c
  6036  002BF4  D005               	goto	l1986
  6037  002BF6  0E40               	movlw	64
  6038  002BF8  641A               	cpfsgt	isupper@c,c
  6039  002BFA  D002               	goto	l1986
  6040  002BFC  0E01               	movlw	1
  6041  002BFE  6E19               	movwf	_isupper$2626,c
  6042  002C00                     l1986:
  6043  002C00  C019  F018         	movff	_isupper$2626,??_isupper
  6044  002C04  3018               	rrcf	??_isupper,w,c
  6045  002C06  0012               	return	
  6046  002C08                     __end_of_isupper:
  6047                           	opt stack 0
  6048                           tosu	equ	0xFFF
  6049                           tosh	equ	0xFFE
  6050                           tosl	equ	0xFFD
  6051                           pclath	equ	0xFFA
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           postinc0	equ	0xFEE
  6059                           wreg	equ	0xFE8
  6060                           indf1	equ	0xFE7
  6061                           postdec1	equ	0xFE5
  6062                           fsr1h	equ	0xFE2
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function ___lmul *****************
  6072 ;; Defined at:
  6073 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  multiplier      4   23[COMRAM] unsigned long 
  6076 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  product         4   31[COMRAM] unsigned long 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  4   23[COMRAM] unsigned long 
  6081 ;; Registers used:
  6082 ;;		wreg, status,2, status,0
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6088 ;;      Params:         8       0       0       0       0       0       0
  6089 ;;      Locals:         4       0       0       0       0       0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0
  6091 ;;      Totals:        12       0       0       0       0       0       0
  6092 ;;Total ram usage:       12 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    3
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_strtol
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text17
  6103  0024F0                     __ptext17:
  6104                           	opt stack 0
  6105  0024F0                     ___lmul:
  6106                           	opt stack 22
  6107                           
  6108                           ;incstack = 0
  6109  0024F0  0E00               	movlw	0
  6110  0024F2  6E20               	movwf	___lmul@product,c
  6111  0024F4  0E00               	movlw	0
  6112  0024F6  6E21               	movwf	___lmul@product+1,c
  6113  0024F8  0E00               	movlw	0
  6114  0024FA  6E22               	movwf	___lmul@product+2,c
  6115  0024FC  0E00               	movlw	0
  6116  0024FE  6E23               	movwf	___lmul@product+3,c
  6117  002500  A018               	btfss	___lmul@multiplier,0,c
  6118  002502  D008               	goto	l1305
  6119  002504  501C               	movf	___lmul@multiplicand,w,c
  6120  002506  2620               	addwf	___lmul@product,f,c
  6121  002508  501D               	movf	___lmul@multiplicand+1,w,c
  6122  00250A  2221               	addwfc	___lmul@product+1,f,c
  6123  00250C  501E               	movf	___lmul@multiplicand+2,w,c
  6124  00250E  2222               	addwfc	___lmul@product+2,f,c
  6125  002510  501F               	movf	___lmul@multiplicand+3,w,c
  6126  002512  2223               	addwfc	___lmul@product+3,f,c
  6127  002514                     l1305:
  6128  002514  90D8               	bcf	status,0,c
  6129  002516  361C               	rlcf	___lmul@multiplicand,f,c
  6130  002518  361D               	rlcf	___lmul@multiplicand+1,f,c
  6131  00251A  361E               	rlcf	___lmul@multiplicand+2,f,c
  6132  00251C  361F               	rlcf	___lmul@multiplicand+3,f,c
  6133  00251E  90D8               	bcf	status,0,c
  6134  002520  321B               	rrcf	___lmul@multiplier+3,f,c
  6135  002522  321A               	rrcf	___lmul@multiplier+2,f,c
  6136  002524  3219               	rrcf	___lmul@multiplier+1,f,c
  6137  002526  3218               	rrcf	___lmul@multiplier,f,c
  6138  002528  5018               	movf	___lmul@multiplier,w,c
  6139  00252A  1019               	iorwf	___lmul@multiplier+1,w,c
  6140  00252C  101A               	iorwf	___lmul@multiplier+2,w,c
  6141  00252E  101B               	iorwf	___lmul@multiplier+3,w,c
  6142  002530  A4D8               	btfss	status,2,c
  6143  002532  D7E6               	goto	l1304
  6144  002534  C020  F018         	movff	___lmul@product,?___lmul
  6145  002538  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6146  00253C  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6147  002540  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6148  002544  0012               	return		;funcret
  6149  002546                     __end_of___lmul:
  6150                           	opt stack 0
  6151                           tosu	equ	0xFFF
  6152                           tosh	equ	0xFFE
  6153                           tosl	equ	0xFFD
  6154                           pclath	equ	0xFFA
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           postinc0	equ	0xFEE
  6162                           wreg	equ	0xFE8
  6163                           indf1	equ	0xFE7
  6164                           postdec1	equ	0xFE5
  6165                           fsr1h	equ	0xFE2
  6166                           fsr1l	equ	0xFE1
  6167                           indf2	equ	0xFDF
  6168                           postinc2	equ	0xFDE
  6169                           postdec2	equ	0xFDD
  6170                           fsr2h	equ	0xFDA
  6171                           fsr2l	equ	0xFD9
  6172                           status	equ	0xFD8
  6173                           
  6174 ;; *************** function _ZeroArray *****************
  6175 ;; Defined at:
  6176 ;;		line 24 in file "SystemCommon.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  array           2   31[COMRAM] PTR unsigned char 
  6179 ;;		 -> GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashReadCondition@TxMsg(7), FlashReadUart@
      +TxMsg(67), 
  6180 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  6181 ;;  size            2   33[COMRAM] int 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6193 ;;      Params:         4       0       0       0       0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0
  6196 ;;      Totals:         4       0       0       0       0       0       0
  6197 ;;Total ram usage:        4 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    4
  6200 ;; This function calls:
  6201 ;;		_memset
  6202 ;; This function is called by:
  6203 ;;		_InitRxMessageParams
  6204 ;;		_UpdateSynthFreq
  6205 ;;		_GetIntFromUartData
  6206 ;;		_SendAckMessage
  6207 ;;		_FlashReadUart
  6208 ;;		_FlashEreaseMem
  6209 ;;		_FlashReadCondition
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text18
  6214  002C08                     __ptext18:
  6215                           	opt stack 0
  6216  002C08                     _ZeroArray:
  6217                           	opt stack 24
  6218                           
  6219                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  6220                           
  6221                           ;incstack = 0
  6222  002C08  C020  F018         	movff	ZeroArray@array,memset@p1
  6223  002C0C  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  6224  002C10  0E00               	movlw	0
  6225  002C12  6E1B               	movwf	memset@c+1,c
  6226  002C14  0E00               	movlw	0
  6227  002C16  6E1A               	movwf	memset@c,c
  6228  002C18  C022  F01C         	movff	ZeroArray@size,memset@n
  6229  002C1C  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  6230  002C20  EC5F  F015         	call	_memset	;wreg free
  6231  002C24  0012               	return		;funcret
  6232  002C26                     __end_of_ZeroArray:
  6233                           	opt stack 0
  6234                           tosu	equ	0xFFF
  6235                           tosh	equ	0xFFE
  6236                           tosl	equ	0xFFD
  6237                           pclath	equ	0xFFA
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           postinc0	equ	0xFEE
  6245                           wreg	equ	0xFE8
  6246                           indf1	equ	0xFE7
  6247                           postdec1	equ	0xFE5
  6248                           fsr1h	equ	0xFE2
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _memset *****************
  6258 ;; Defined at:
  6259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  p1              2   23[COMRAM] PTR void 
  6262 ;;		 -> GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashReadCondition@TxMsg(7), FlashReadUart@
      +TxMsg(67), 
  6263 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  6264 ;;  c               2   25[COMRAM] int 
  6265 ;;  n               2   27[COMRAM] unsigned int 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  p               2   29[COMRAM] PTR unsigned char 
  6268 ;;		 -> GetIntFromUartData@dataRegArr(8), UpdateSynthFreq@regSynthArray(16), FlashReadCondition@TxMsg(7), FlashReadUart@
      +TxMsg(67), 
  6269 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  2   23[COMRAM] PTR void 
  6272 ;; Registers used:
  6273 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6279 ;;      Params:         6       0       0       0       0       0       0
  6280 ;;      Locals:         2       0       0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0
  6282 ;;      Totals:         8       0       0       0       0       0       0
  6283 ;;Total ram usage:        8 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    3
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		_ZeroArray
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text19
  6294  002ABE                     __ptext19:
  6295                           	opt stack 0
  6296  002ABE                     _memset:
  6297                           	opt stack 24
  6298                           
  6299                           ;incstack = 0
  6300  002ABE  C018  F01E         	movff	memset@p1,memset@p
  6301  002AC2  C019  F01F         	movff	memset@p1+1,memset@p+1
  6302  002AC6  D008               	goto	l1724
  6303  002AC8                     l6183:
  6304  002AC8  C01E  FFD9         	movff	memset@p,fsr2l
  6305  002ACC  C01F  FFDA         	movff	memset@p+1,fsr2h
  6306  002AD0  C01A  FFDF         	movff	memset@c,indf2
  6307  002AD4  4A1E               	infsnz	memset@p,f,c
  6308  002AD6  2A1F               	incf	memset@p+1,f,c
  6309  002AD8                     l1724:
  6310  002AD8  061C               	decf	memset@n,f,c
  6311  002ADA  A0D8               	btfss	status,0,c
  6312  002ADC  061D               	decf	memset@n+1,f,c
  6313  002ADE  281C               	incf	memset@n,w,c
  6314  002AE0  E1F3               	bnz	l6183
  6315  002AE2  281D               	incf	memset@n+1,w,c
  6316  002AE4  B4D8               	btfsc	status,2,c
  6317  002AE6  0012               	return	
  6318  002AE8  D7EF               	goto	l1725
  6319  002AEA                     __end_of_memset:
  6320                           	opt stack 0
  6321                           tosu	equ	0xFFF
  6322                           tosh	equ	0xFFE
  6323                           tosl	equ	0xFFD
  6324                           pclath	equ	0xFFA
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           postinc0	equ	0xFEE
  6332                           wreg	equ	0xFE8
  6333                           indf1	equ	0xFE7
  6334                           postdec1	equ	0xFE5
  6335                           fsr1h	equ	0xFE2
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _testLeds *****************
  6345 ;; Defined at:
  6346 ;;		line 43 in file "LedsApp.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  idx             2   24[COMRAM] int 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      void 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2, status,0
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6360 ;;      Params:         0       0       0       0       0       0       0
  6361 ;;      Locals:         2       0       0       0       0       0       0
  6362 ;;      Temps:          1       0       0       0       0       0       0
  6363 ;;      Totals:         3       0       0       0       0       0       0
  6364 ;;Total ram usage:        3 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    3
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_GroupCommon
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text20
  6375  002272                     __ptext20:
  6376                           	opt stack 0
  6377  002272                     _testLeds:
  6378                           	opt stack 25
  6379                           
  6380                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6381                           
  6382                           ;incstack = 0
  6383  002272  0E00               	movlw	0
  6384  002274  6E1A               	movwf	testLeds@idx+1,c
  6385  002276  0E00               	movlw	0
  6386  002278  6E19               	movwf	testLeds@idx,c
  6387  00227A                     l6941:
  6388  00227A  BE1A               	btfsc	testLeds@idx+1,7,c
  6389  00227C  D006               	goto	l42
  6390  00227E  501A               	movf	testLeds@idx+1,w,c
  6391  002280  E127               	bnz	l44
  6392  002282  0E0A               	movlw	10
  6393  002284  5C19               	subwf	testLeds@idx,w,c
  6394  002286  B0D8               	btfsc	status,0,c
  6395  002288  0012               	return	
  6396  00228A                     l42:
  6397                           
  6398                           ;LedsApp.c: 47: {
  6399                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6400  00228A  808B               	bsf	3979,0,c	;volatile
  6401                           
  6402                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6403  00228C  0E82               	movlw	130
  6404  00228E  6E18               	movwf	??_testLeds& (0+255),c
  6405  002290  0EDE               	movlw	222
  6406  002292                     u8217:
  6407  002292  2EE8               	decfsz	wreg,f,c
  6408  002294  D7FE               	bra	u8217
  6409  002296  2E18               	decfsz	??_testLeds& (0+255),f,c
  6410  002298  D7FC               	bra	u8217
  6411                           
  6412                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6413  00229A  888A               	bsf	3978,4,c	;volatile
  6414                           
  6415                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6416  00229C  0E82               	movlw	130
  6417  00229E  6E18               	movwf	??_testLeds& (0+255),c
  6418  0022A0  0EDE               	movlw	222
  6419  0022A2                     u8227:
  6420  0022A2  2EE8               	decfsz	wreg,f,c
  6421  0022A4  D7FE               	bra	u8227
  6422  0022A6  2E18               	decfsz	??_testLeds& (0+255),f,c
  6423  0022A8  D7FC               	bra	u8227
  6424                           
  6425                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6426  0022AA  908B               	bcf	3979,0,c	;volatile
  6427                           
  6428                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6429  0022AC  0E82               	movlw	130
  6430  0022AE  6E18               	movwf	??_testLeds& (0+255),c
  6431  0022B0  0EDE               	movlw	222
  6432  0022B2                     u8237:
  6433  0022B2  2EE8               	decfsz	wreg,f,c
  6434  0022B4  D7FE               	bra	u8237
  6435  0022B6  2E18               	decfsz	??_testLeds& (0+255),f,c
  6436  0022B8  D7FC               	bra	u8237
  6437                           
  6438                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6439  0022BA  988A               	bcf	3978,4,c	;volatile
  6440                           
  6441                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6442  0022BC  0E82               	movlw	130
  6443  0022BE  6E18               	movwf	??_testLeds& (0+255),c
  6444  0022C0  0EDE               	movlw	222
  6445  0022C2                     u8247:
  6446  0022C2  2EE8               	decfsz	wreg,f,c
  6447  0022C4  D7FE               	bra	u8247
  6448  0022C6  2E18               	decfsz	??_testLeds& (0+255),f,c
  6449  0022C8  D7FC               	bra	u8247
  6450  0022CA  4A19               	infsnz	testLeds@idx,f,c
  6451  0022CC  2A1A               	incf	testLeds@idx+1,f,c
  6452  0022CE  D7D5               	goto	l6941
  6453  0022D0                     l44:
  6454  0022D0  0012               	return		;funcret
  6455  0022D2                     __end_of_testLeds:
  6456                           	opt stack 0
  6457                           tosu	equ	0xFFF
  6458                           tosh	equ	0xFFE
  6459                           tosl	equ	0xFFD
  6460                           pclath	equ	0xFFA
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           indf1	equ	0xFE7
  6470                           postdec1	equ	0xFE5
  6471                           fsr1h	equ	0xFE2
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _PrintHelpScreen *****************
  6481 ;; Defined at:
  6482 ;;		line 89 in file "SystemStatus.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  dest           50    9[BANK0 ] unsigned char [50]
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      void 
  6489 ;; Registers used:
  6490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6496 ;;      Params:         0       0       0       0       0       0       0
  6497 ;;      Locals:         0      50       0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0
  6499 ;;      Totals:         0      50       0       0       0       0       0
  6500 ;;Total ram usage:       50 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    5
  6503 ;; This function calls:
  6504 ;;		_UART_Write_Text
  6505 ;;		_sprintf
  6506 ;; This function is called by:
  6507 ;;		_GroupCommon
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text21
  6512  000720                     __ptext21:
  6513                           	opt stack 0
  6514  000720                     _PrintHelpScreen:
  6515                           	opt stack 23
  6516                           
  6517                           ;SystemStatus.c: 91: char dest[50];
  6518                           ;SystemStatus.c: 94: sprintf(dest, "<TX system commands>\n\r");
  6519                           
  6520                           ;incstack = 0
  6521  000720  0E69               	movlw	low PrintHelpScreen@dest
  6522  000722  6E24               	movwf	sprintf@sp,c
  6523  000724  0E00               	movlw	high PrintHelpScreen@dest
  6524  000726  6E25               	movwf	sprintf@sp+1,c
  6525  000728  0E49               	movlw	low STR_21
  6526  00072A  6E26               	movwf	sprintf@f,c
  6527  00072C  0E7F               	movlw	high STR_21
  6528  00072E  6E27               	movwf	sprintf@f+1,c
  6529  000730  ECA7  F006         	call	_sprintf	;wreg free
  6530                           
  6531                           ;SystemStatus.c: 95: UART_Write_Text(dest);
  6532  000734  0E69               	movlw	low PrintHelpScreen@dest
  6533  000736  6E19               	movwf	UART_Write_Text@text,c
  6534  000738  0E00               	movlw	high PrintHelpScreen@dest
  6535  00073A  6E1A               	movwf	UART_Write_Text@text+1,c
  6536  00073C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6537                           
  6538                           ;SystemStatus.c: 97: sprintf(dest, "$TI <XXXX><cr>   Init TX system and set frequency (0
      +                          -9999)[MHz]\r\n");
  6539  000740  0E69               	movlw	low PrintHelpScreen@dest
  6540  000742  6E24               	movwf	sprintf@sp,c
  6541  000744  0E00               	movlw	high PrintHelpScreen@dest
  6542  000746  6E25               	movwf	sprintf@sp+1,c
  6543  000748  0EF1               	movlw	low STR_22
  6544  00074A  6E26               	movwf	sprintf@f,c
  6545  00074C  0E7C               	movlw	high STR_22
  6546  00074E  6E27               	movwf	sprintf@f+1,c
  6547  000750  ECA7  F006         	call	_sprintf	;wreg free
  6548                           
  6549                           ;SystemStatus.c: 98: UART_Write_Text(dest);
  6550  000754  0E69               	movlw	low PrintHelpScreen@dest
  6551  000756  6E19               	movwf	UART_Write_Text@text,c
  6552  000758  0E00               	movlw	high PrintHelpScreen@dest
  6553  00075A  6E1A               	movwf	UART_Write_Text@text+1,c
  6554  00075C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6555                           
  6556                           ;SystemStatus.c: 99: sprintf(dest, "$TF <XXXX><cr>   Set TX system frequency at (0-9999)
      +                          [MHz].\r\n");
  6557  000760  0E69               	movlw	low PrintHelpScreen@dest
  6558  000762  6E24               	movwf	sprintf@sp,c
  6559  000764  0E00               	movlw	high PrintHelpScreen@dest
  6560  000766  6E25               	movwf	sprintf@sp+1,c
  6561  000768  0E71               	movlw	low STR_23
  6562  00076A  6E26               	movwf	sprintf@f,c
  6563  00076C  0E7D               	movlw	high STR_23
  6564  00076E  6E27               	movwf	sprintf@f+1,c
  6565  000770  ECA7  F006         	call	_sprintf	;wreg free
  6566                           
  6567                           ;SystemStatus.c: 100: UART_Write_Text(dest);
  6568  000774  0E69               	movlw	low PrintHelpScreen@dest
  6569  000776  6E19               	movwf	UART_Write_Text@text,c
  6570  000778  0E00               	movlw	high PrintHelpScreen@dest
  6571  00077A  6E1A               	movwf	UART_Write_Text@text+1,c
  6572  00077C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6573                           
  6574                           ;SystemStatus.c: 101: sprintf(dest, "$TQ <cr>         Get status from TX system.\r\n");
  6575  000780  0E69               	movlw	low PrintHelpScreen@dest
  6576  000782  6E24               	movwf	sprintf@sp,c
  6577  000784  0E00               	movlw	high PrintHelpScreen@dest
  6578  000786  6E25               	movwf	sprintf@sp+1,c
  6579  000788  0E4E               	movlw	low STR_24
  6580  00078A  6E26               	movwf	sprintf@f,c
  6581  00078C  0E7E               	movlw	high STR_24
  6582  00078E  6E27               	movwf	sprintf@f+1,c
  6583  000790  ECA7  F006         	call	_sprintf	;wreg free
  6584                           
  6585                           ;SystemStatus.c: 102: UART_Write_Text(dest);
  6586  000794  0E69               	movlw	low PrintHelpScreen@dest
  6587  000796  6E19               	movwf	UART_Write_Text@text,c
  6588  000798  0E00               	movlw	high PrintHelpScreen@dest
  6589  00079A  6E1A               	movwf	UART_Write_Text@text+1,c
  6590  00079C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6591                           
  6592                           ;SystemStatus.c: 103: sprintf(dest, "$TB <X><cr>      Turn on[1] / off[0] BIT mode at TX
      +                           system [Default = 0]\r\n");
  6593  0007A0  0E69               	movlw	low PrintHelpScreen@dest
  6594  0007A2  6E24               	movwf	sprintf@sp,c
  6595  0007A4  0E00               	movlw	high PrintHelpScreen@dest
  6596  0007A6  6E25               	movwf	sprintf@sp+1,c
  6597  0007A8  0E5C               	movlw	low STR_25
  6598  0007AA  6E26               	movwf	sprintf@f,c
  6599  0007AC  0E7C               	movlw	high STR_25
  6600  0007AE  6E27               	movwf	sprintf@f+1,c
  6601  0007B0  ECA7  F006         	call	_sprintf	;wreg free
  6602                           
  6603                           ;SystemStatus.c: 104: UART_Write_Text(dest);
  6604  0007B4  0E69               	movlw	low PrintHelpScreen@dest
  6605  0007B6  6E19               	movwf	UART_Write_Text@text,c
  6606  0007B8  0E00               	movlw	high PrintHelpScreen@dest
  6607  0007BA  6E1A               	movwf	UART_Write_Text@text+1,c
  6608  0007BC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6609                           
  6610                           ;SystemStatus.c: 105: sprintf(dest, "$TX <X><cr>      Turn on[1] / off[0] transmission a
      +                          t TX system [Default = 0]\r\n");
  6611  0007C0  0E69               	movlw	low PrintHelpScreen@dest
  6612  0007C2  6E24               	movwf	sprintf@sp,c
  6613  0007C4  0E00               	movlw	high PrintHelpScreen@dest
  6614  0007C6  6E25               	movwf	sprintf@sp+1,c
  6615  0007C8  0E0D               	movlw	low STR_26
  6616  0007CA  6E26               	movwf	sprintf@f,c
  6617  0007CC  0E7C               	movlw	high STR_26
  6618  0007CE  6E27               	movwf	sprintf@f+1,c
  6619  0007D0  ECA7  F006         	call	_sprintf	;wreg free
  6620                           
  6621                           ;SystemStatus.c: 106: UART_Write_Text(dest);
  6622  0007D4  0E69               	movlw	low PrintHelpScreen@dest
  6623  0007D6  6E19               	movwf	UART_Write_Text@text,c
  6624  0007D8  0E00               	movlw	high PrintHelpScreen@dest
  6625  0007DA  6E1A               	movwf	UART_Write_Text@text+1,c
  6626  0007DC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6627                           
  6628                           ;SystemStatus.c: 109: sprintf(dest, "\n\r<RX system commands>\n\r");
  6629  0007E0  0E69               	movlw	low PrintHelpScreen@dest
  6630  0007E2  6E24               	movwf	sprintf@sp,c
  6631  0007E4  0E00               	movlw	high PrintHelpScreen@dest
  6632  0007E6  6E25               	movwf	sprintf@sp+1,c
  6633  0007E8  0E30               	movlw	low STR_27
  6634  0007EA  6E26               	movwf	sprintf@f,c
  6635  0007EC  0E7F               	movlw	high STR_27
  6636  0007EE  6E27               	movwf	sprintf@f+1,c
  6637  0007F0  ECA7  F006         	call	_sprintf	;wreg free
  6638                           
  6639                           ;SystemStatus.c: 110: UART_Write_Text(dest);
  6640  0007F4  0E69               	movlw	low PrintHelpScreen@dest
  6641  0007F6  6E19               	movwf	UART_Write_Text@text,c
  6642  0007F8  0E00               	movlw	high PrintHelpScreen@dest
  6643  0007FA  6E1A               	movwf	UART_Write_Text@text+1,c
  6644  0007FC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6645                           
  6646                           ;SystemStatus.c: 111: sprintf(dest, "$RI <XXXX><cr>   Init RX system and set frequency a
      +                          t XXXX (0-9999)[MHz]\r\n");
  6647  000800  0E69               	movlw	low PrintHelpScreen@dest
  6648  000802  6E24               	movwf	sprintf@sp,c
  6649  000804  0E00               	movlw	high PrintHelpScreen@dest
  6650  000806  6E25               	movwf	sprintf@sp+1,c
  6651  000808  0EA7               	movlw	low STR_28
  6652  00080A  6E26               	movwf	sprintf@f,c
  6653  00080C  0E7C               	movlw	high STR_28
  6654  00080E  6E27               	movwf	sprintf@f+1,c
  6655  000810  ECA7  F006         	call	_sprintf	;wreg free
  6656                           
  6657                           ;SystemStatus.c: 112: UART_Write_Text(dest);
  6658  000814  0E69               	movlw	low PrintHelpScreen@dest
  6659  000816  6E19               	movwf	UART_Write_Text@text,c
  6660  000818  0E00               	movlw	high PrintHelpScreen@dest
  6661  00081A  6E1A               	movwf	UART_Write_Text@text+1,c
  6662  00081C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6663                           
  6664                           ;SystemStatus.c: 113: sprintf(dest, "$RQ <cr>         Get status from RX system\r\n");
  6665  000820  0E69               	movlw	low PrintHelpScreen@dest
  6666  000822  6E24               	movwf	sprintf@sp,c
  6667  000824  0E00               	movlw	high PrintHelpScreen@dest
  6668  000826  6E25               	movwf	sprintf@sp+1,c
  6669  000828  0E7C               	movlw	low STR_29
  6670  00082A  6E26               	movwf	sprintf@f,c
  6671  00082C  0E7E               	movlw	high STR_29
  6672  00082E  6E27               	movwf	sprintf@f+1,c
  6673  000830  ECA7  F006         	call	_sprintf	;wreg free
  6674                           
  6675                           ;SystemStatus.c: 114: UART_Write_Text(dest);
  6676  000834  0E69               	movlw	low PrintHelpScreen@dest
  6677  000836  6E19               	movwf	UART_Write_Text@text,c
  6678  000838  0E00               	movlw	high PrintHelpScreen@dest
  6679  00083A  6E1A               	movwf	UART_Write_Text@text+1,c
  6680  00083C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6681                           
  6682                           ;SystemStatus.c: 115: sprintf(dest, "$RB <X><cr>      Turn on[1] / off[0] BIT mode at RX
      +                           system.\r\n");
  6683  000840  0E69               	movlw	low PrintHelpScreen@dest
  6684  000842  6E24               	movwf	sprintf@sp,c
  6685  000844  0E00               	movlw	high PrintHelpScreen@dest
  6686  000846  6E25               	movwf	sprintf@sp+1,c
  6687  000848  0E33               	movlw	low STR_30
  6688  00084A  6E26               	movwf	sprintf@f,c
  6689  00084C  0E7D               	movlw	high STR_30
  6690  00084E  6E27               	movwf	sprintf@f+1,c
  6691  000850  ECA7  F006         	call	_sprintf	;wreg free
  6692                           
  6693                           ;SystemStatus.c: 116: UART_Write_Text(dest);
  6694  000854  0E69               	movlw	low PrintHelpScreen@dest
  6695  000856  6E19               	movwf	UART_Write_Text@text,c
  6696  000858  0E00               	movlw	high PrintHelpScreen@dest
  6697  00085A  6E1A               	movwf	UART_Write_Text@text+1,c
  6698  00085C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6699                           
  6700                           ;SystemStatus.c: 117: sprintf(dest, "$RX <X><cr>      Turn on[1] / off[0] receive at RX 
      +                          system.\r\n");
  6701  000860  0E69               	movlw	low PrintHelpScreen@dest
  6702  000862  6E24               	movwf	sprintf@sp,c
  6703  000864  0E00               	movlw	high PrintHelpScreen@dest
  6704  000866  6E25               	movwf	sprintf@sp+1,c
  6705  000868  0EAE               	movlw	low STR_31
  6706  00086A  6E26               	movwf	sprintf@f,c
  6707  00086C  0E7D               	movlw	high STR_31
  6708  00086E  6E27               	movwf	sprintf@f+1,c
  6709  000870  ECA7  F006         	call	_sprintf	;wreg free
  6710                           
  6711                           ;SystemStatus.c: 118: UART_Write_Text(dest);
  6712  000874  0E69               	movlw	low PrintHelpScreen@dest
  6713  000876  6E19               	movwf	UART_Write_Text@text,c
  6714  000878  0E00               	movlw	high PrintHelpScreen@dest
  6715  00087A  6E1A               	movwf	UART_Write_Text@text+1,c
  6716  00087C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6717                           
  6718                           ;SystemStatus.c: 119: sprintf(dest, "$RCR <X><cr>     Set Compression range at RX system
      +                          . High [1] Low [0] [Default = 0]\r\n");
  6719  000880  0E69               	movlw	low PrintHelpScreen@dest
  6720  000882  6E24               	movwf	sprintf@sp,c
  6721  000884  0E00               	movlw	high PrintHelpScreen@dest
  6722  000886  6E25               	movwf	sprintf@sp+1,c
  6723  000888  0E61               	movlw	low STR_32
  6724  00088A  6E26               	movwf	sprintf@f,c
  6725  00088C  0E7B               	movlw	high STR_32
  6726  00088E  6E27               	movwf	sprintf@f+1,c
  6727  000890  ECA7  F006         	call	_sprintf	;wreg free
  6728                           
  6729                           ;SystemStatus.c: 120: UART_Write_Text(dest);
  6730  000894  0E69               	movlw	low PrintHelpScreen@dest
  6731  000896  6E19               	movwf	UART_Write_Text@text,c
  6732  000898  0E00               	movlw	high PrintHelpScreen@dest
  6733  00089A  6E1A               	movwf	UART_Write_Text@text+1,c
  6734  00089C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6735                           
  6736                           ;SystemStatus.c: 121: sprintf(dest, "$RCP <X><cr>     Set Compression operation mode at 
      +                          RX system: Automatic[1] Manual[0] [Default = 0]\r\n");
  6737  0008A0  0E69               	movlw	low PrintHelpScreen@dest
  6738  0008A2  6E24               	movwf	sprintf@sp,c
  6739  0008A4  0E00               	movlw	high PrintHelpScreen@dest
  6740  0008A6  6E25               	movwf	sprintf@sp+1,c
  6741  0008A8  0EFC               	movlw	low STR_33
  6742  0008AA  6E26               	movwf	sprintf@f,c
  6743  0008AC  0E7A               	movlw	high STR_33
  6744  0008AE  6E27               	movwf	sprintf@f+1,c
  6745  0008B0  ECA7  F006         	call	_sprintf	;wreg free
  6746                           
  6747                           ;SystemStatus.c: 122: UART_Write_Text(dest);
  6748  0008B4  0E69               	movlw	low PrintHelpScreen@dest
  6749  0008B6  6E19               	movwf	UART_Write_Text@text,c
  6750  0008B8  0E00               	movlw	high PrintHelpScreen@dest
  6751  0008BA  6E1A               	movwf	UART_Write_Text@text+1,c
  6752  0008BC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6753                           
  6754                           ;SystemStatus.c: 125: sprintf(dest, "\n\r<Common system commands>\n\r");
  6755  0008C0  0E69               	movlw	low PrintHelpScreen@dest
  6756  0008C2  6E24               	movwf	sprintf@sp,c
  6757  0008C4  0E00               	movlw	high PrintHelpScreen@dest
  6758  0008C6  6E25               	movwf	sprintf@sp+1,c
  6759  0008C8  0E13               	movlw	low STR_34
  6760  0008CA  6E26               	movwf	sprintf@f,c
  6761  0008CC  0E7F               	movlw	high STR_34
  6762  0008CE  6E27               	movwf	sprintf@f+1,c
  6763  0008D0  ECA7  F006         	call	_sprintf	;wreg free
  6764                           
  6765                           ;SystemStatus.c: 126: UART_Write_Text(dest);
  6766  0008D4  0E69               	movlw	low PrintHelpScreen@dest
  6767  0008D6  6E19               	movwf	UART_Write_Text@text,c
  6768  0008D8  0E00               	movlw	high PrintHelpScreen@dest
  6769  0008DA  6E1A               	movwf	UART_Write_Text@text+1,c
  6770  0008DC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6771                           
  6772                           ;SystemStatus.c: 127: sprintf(dest, "$SH <cr>         Print system help message.\r\n");
  6773  0008E0  0E69               	movlw	low PrintHelpScreen@dest
  6774  0008E2  6E24               	movwf	sprintf@sp,c
  6775  0008E4  0E00               	movlw	high PrintHelpScreen@dest
  6776  0008E6  6E25               	movwf	sprintf@sp+1,c
  6777  0008E8  0E20               	movlw	low STR_35
  6778  0008EA  6E26               	movwf	sprintf@f,c
  6779  0008EC  0E7E               	movlw	high STR_35
  6780  0008EE  6E27               	movwf	sprintf@f+1,c
  6781  0008F0  ECA7  F006         	call	_sprintf	;wreg free
  6782                           
  6783                           ;SystemStatus.c: 128: UART_Write_Text(dest);
  6784  0008F4  0E69               	movlw	low PrintHelpScreen@dest
  6785  0008F6  6E19               	movwf	UART_Write_Text@text,c
  6786  0008F8  0E00               	movlw	high PrintHelpScreen@dest
  6787  0008FA  6E1A               	movwf	UART_Write_Text@text+1,c
  6788  0008FC  EC98  F010         	call	_UART_Write_Text	;wreg free
  6789                           
  6790                           ;SystemStatus.c: 129: sprintf(dest, "$SBT <XX><cr>    Set UART refresh rate (1-20)[Hz].\
      +                          r\n");
  6791  000900  0E69               	movlw	low PrintHelpScreen@dest
  6792  000902  6E24               	movwf	sprintf@sp,c
  6793  000904  0E00               	movlw	high PrintHelpScreen@dest
  6794  000906  6E25               	movwf	sprintf@sp+1,c
  6795  000908  0EEB               	movlw	low STR_36
  6796  00090A  6E26               	movwf	sprintf@f,c
  6797  00090C  0E7D               	movlw	high STR_36
  6798  00090E  6E27               	movwf	sprintf@f+1,c
  6799  000910  ECA7  F006         	call	_sprintf	;wreg free
  6800                           
  6801                           ;SystemStatus.c: 130: UART_Write_Text(dest);
  6802  000914  0E69               	movlw	low PrintHelpScreen@dest
  6803  000916  6E19               	movwf	UART_Write_Text@text,c
  6804  000918  0E00               	movlw	high PrintHelpScreen@dest
  6805  00091A  6E1A               	movwf	UART_Write_Text@text+1,c
  6806  00091C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6807                           
  6808                           ;SystemStatus.c: 131: sprintf(dest, "$SBU <X><cr>     Set UART automatic operation: Auto
      +                          matic[1] Manual[0] [Default = 0]\r\n");
  6809  000920  0E69               	movlw	low PrintHelpScreen@dest
  6810  000922  6E24               	movwf	sprintf@sp,c
  6811  000924  0E00               	movlw	high PrintHelpScreen@dest
  6812  000926  6E25               	movwf	sprintf@sp+1,c
  6813  000928  0EB7               	movlw	low STR_37
  6814  00092A  6E26               	movwf	sprintf@f,c
  6815  00092C  0E7B               	movlw	high STR_37
  6816  00092E  6E27               	movwf	sprintf@f+1,c
  6817  000930  ECA7  F006         	call	_sprintf	;wreg free
  6818                           
  6819                           ;SystemStatus.c: 132: UART_Write_Text(dest);
  6820  000934  0E69               	movlw	low PrintHelpScreen@dest
  6821  000936  6E19               	movwf	UART_Write_Text@text,c
  6822  000938  0E00               	movlw	high PrintHelpScreen@dest
  6823  00093A  6E1A               	movwf	UART_Write_Text@text+1,c
  6824  00093C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6825                           
  6826                           ;SystemStatus.c: 133: sprintf(dest, "$SQ <X><cr>      Get system status.\r\n");
  6827  000940  0E69               	movlw	low PrintHelpScreen@dest
  6828  000942  6E24               	movwf	sprintf@sp,c
  6829  000944  0E00               	movlw	high PrintHelpScreen@dest
  6830  000946  6E25               	movwf	sprintf@sp+1,c
  6831  000948  0EA9               	movlw	low STR_38
  6832  00094A  6E26               	movwf	sprintf@f,c
  6833  00094C  0E7E               	movlw	high STR_38
  6834  00094E  6E27               	movwf	sprintf@f+1,c
  6835  000950  ECA7  F006         	call	_sprintf	;wreg free
  6836                           
  6837                           ;SystemStatus.c: 134: UART_Write_Text(dest);
  6838  000954  0E69               	movlw	low PrintHelpScreen@dest
  6839  000956  6E19               	movwf	UART_Write_Text@text,c
  6840  000958  0E00               	movlw	high PrintHelpScreen@dest
  6841  00095A  6E1A               	movwf	UART_Write_Text@text+1,c
  6842  00095C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6843                           
  6844                           ;SystemStatus.c: 135: sprintf(dest, "$SL <cr>         Test system LEDs.\r\n");
  6845  000960  0E69               	movlw	low PrintHelpScreen@dest
  6846  000962  6E24               	movwf	sprintf@sp,c
  6847  000964  0E00               	movlw	high PrintHelpScreen@dest
  6848  000966  6E25               	movwf	sprintf@sp+1,c
  6849  000968  0ECF               	movlw	low STR_39
  6850  00096A  6E26               	movwf	sprintf@f,c
  6851  00096C  0E7E               	movlw	high STR_39
  6852  00096E  6E27               	movwf	sprintf@f+1,c
  6853  000970  ECA7  F006         	call	_sprintf	;wreg free
  6854                           
  6855                           ;SystemStatus.c: 136: UART_Write_Text(dest);
  6856  000974  0E69               	movlw	low PrintHelpScreen@dest
  6857  000976  6E19               	movwf	UART_Write_Text@text,c
  6858  000978  0E00               	movlw	high PrintHelpScreen@dest
  6859  00097A  6E1A               	movwf	UART_Write_Text@text+1,c
  6860  00097C  EC98  F010         	call	_UART_Write_Text	;wreg free
  6861  000980  0012               	return		;funcret
  6862  000982                     __end_of_PrintHelpScreen:
  6863                           	opt stack 0
  6864                           tosu	equ	0xFFF
  6865                           tosh	equ	0xFFE
  6866                           tosl	equ	0xFFD
  6867                           pclath	equ	0xFFA
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodh	equ	0xFF4
  6873                           prodl	equ	0xFF3
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           indf1	equ	0xFE7
  6877                           postdec1	equ	0xFE5
  6878                           fsr1h	equ	0xFE2
  6879                           fsr1l	equ	0xFE1
  6880                           indf2	equ	0xFDF
  6881                           postinc2	equ	0xFDE
  6882                           postdec2	equ	0xFDD
  6883                           fsr2h	equ	0xFDA
  6884                           fsr2l	equ	0xFD9
  6885                           status	equ	0xFD8
  6886                           
  6887 ;; *************** function _EUSART1_Read *****************
  6888 ;; Defined at:
  6889 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  readValue       2   24[COMRAM] unsigned int 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      unsigned char 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6903 ;;      Params:         0       0       0       0       0       0       0
  6904 ;;      Locals:         2       0       0       0       0       0       0
  6905 ;;      Temps:          1       0       0       0       0       0       0
  6906 ;;      Totals:         3       0       0       0       0       0       0
  6907 ;;Total ram usage:        3 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    3
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_readUartByte
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text22
  6918  0027BA                     __ptext22:
  6919                           	opt stack 0
  6920  0027BA                     _EUSART1_Read:
  6921                           	opt stack 26
  6922                           
  6923                           ;eusart1.c: 112: uint16_t readValue = 0;
  6924                           
  6925                           ;incstack = 0
  6926  0027BA  0E00               	movlw	0
  6927  0027BC  6E1A               	movwf	EUSART1_Read@readValue+1,c
  6928  0027BE  0E00               	movlw	0
  6929  0027C0  6E19               	movwf	EUSART1_Read@readValue,c
  6930                           
  6931                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  6932  0027C2  0100               	movlb	0	; () banked
  6933  0027C4  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  6934  0027C6  A4D8               	btfss	status,2,c
  6935  0027C8  D002               	goto	l758
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;eusart1.c: 120: {
  6939                           ;eusart1.c: 121: return readValue;
  6940  0027CA  5019               	movf	EUSART1_Read@readValue,w,c
  6941                           
  6942                           ; BSR set to: 0
  6943  0027CC  0012               	return	
  6944  0027CE                     l758:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;eusart1.c: 122: }
  6948                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  6949                           
  6950                           ; BSR set to: 0
  6951  0027CE  5039               	movf	_eusart1RxTail,w,c	;volatile
  6952  0027D0  0D01               	mullw	1
  6953  0027D2  0E00               	movlw	low _eusart1RxBuffer
  6954  0027D4  24F3               	addwf	prodl,w,c
  6955  0027D6  6ED9               	movwf	fsr2l,c
  6956  0027D8  0E01               	movlw	high _eusart1RxBuffer
  6957  0027DA  20F4               	addwfc	prodh,w,c
  6958  0027DC  6EDA               	movwf	fsr2h,c
  6959  0027DE  50DF               	movf	indf2,w,c
  6960  0027E0  6E18               	movwf	??_EUSART1_Read& (0+255),c
  6961  0027E2  5018               	movf	??_EUSART1_Read,w,c
  6962  0027E4  6E19               	movwf	EUSART1_Read@readValue,c
  6963  0027E6  6A1A               	clrf	EUSART1_Read@readValue+1,c
  6964                           
  6965                           ; BSR set to: 0
  6966  0027E8  2A39               	incf	_eusart1RxTail,f,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  6970  0027EA  0E27               	movlw	39
  6971  0027EC  6439               	cpfsgt	_eusart1RxTail,c	;volatile
  6972  0027EE  D002               	goto	l760
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;eusart1.c: 126: {
  6976                           ;eusart1.c: 127: eusart1RxTail = 0;
  6977  0027F0  0E00               	movlw	0
  6978  0027F2  6E39               	movwf	_eusart1RxTail,c	;volatile
  6979  0027F4                     l760:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;eusart1.c: 128: }
  6983                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  6984                           
  6985                           ; BSR set to: 0
  6986  0027F4  9A9D               	bcf	3997,5,c	;volatile
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;eusart1.c: 130: eusart1RxCount--;
  6990  0027F6  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  6994  0027F8  8A9D               	bsf	3997,5,c	;volatile
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;eusart1.c: 133: return readValue;
  6998  0027FA  5019               	movf	EUSART1_Read@readValue,w,c
  6999  0027FC  0012               	return	
  7000  0027FE                     __end_of_EUSART1_Read:
  7001                           	opt stack 0
  7002                           tosu	equ	0xFFF
  7003                           tosh	equ	0xFFE
  7004                           tosl	equ	0xFFD
  7005                           pclath	equ	0xFFA
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           postdec1	equ	0xFE5
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function _keepAliveSignalLed *****************
  7026 ;; Defined at:
  7027 ;;		line 35 in file "LedsApp.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;		None
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		wreg, status,2, status,0
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7041 ;;      Params:         0       0       0       0       0       0       0
  7042 ;;      Locals:         0       0       0       0       0       0       0
  7043 ;;      Temps:          1       0       0       0       0       0       0
  7044 ;;      Totals:         1       0       0       0       0       0       0
  7045 ;;Total ram usage:        1 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    3
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text23
  7056  002C5C                     __ptext23:
  7057                           	opt stack 0
  7058  002C5C                     _keepAliveSignalLed:
  7059                           	opt stack 27
  7060                           
  7061                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;incstack = 0
  7065  002C5C  B08B               	btfsc	3979,0,c	;volatile
  7066  002C5E  D003               	goto	u5090
  7067  002C60  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7068  002C62  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7069  002C64  D001               	goto	u5108
  7070  002C66                     u5090:
  7071  002C66  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7072  002C68                     u5108:
  7073  002C68  508B               	movf	3979,w,c	;volatile
  7074  002C6A  1818               	xorwf	??_keepAliveSignalLed,w,c
  7075  002C6C  0BFE               	andlw	-2
  7076  002C6E  1818               	xorwf	??_keepAliveSignalLed,w,c
  7077  002C70  6E8B               	movwf	3979,c	;volatile
  7078  002C72  0012               	return		;funcret
  7079  002C74                     __end_of_keepAliveSignalLed:
  7080                           	opt stack 0
  7081                           tosu	equ	0xFFF
  7082                           tosh	equ	0xFFE
  7083                           tosl	equ	0xFFD
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           postinc0	equ	0xFEE
  7092                           wreg	equ	0xFE8
  7093                           indf1	equ	0xFE7
  7094                           postdec1	equ	0xFE5
  7095                           fsr1h	equ	0xFE2
  7096                           fsr1l	equ	0xFE1
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function _SetMcuSystem *****************
  7105 ;; Defined at:
  7106 ;;		line 11 in file "SystemSettings.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;		None
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7120 ;;      Params:         0       0       0       0       0       0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0
  7123 ;;      Totals:         0       0       0       0       0       0       0
  7124 ;;Total ram usage:        0 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    6
  7127 ;; This function calls:
  7128 ;;		_SYSTEM_Initialize
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text24
  7135  002CE2                     __ptext24:
  7136                           	opt stack 0
  7137  002CE2                     _SetMcuSystem:
  7138                           	opt stack 24
  7139                           
  7140                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7141                           
  7142                           ;incstack = 0
  7143  002CE2  EC21  F016         	call	_SYSTEM_Initialize	;wreg free
  7144                           
  7145                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7146  002CE6  8EF2               	bsf	intcon,7,c	;volatile
  7147                           
  7148                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7149  002CE8  8CF2               	bsf	intcon,6,c	;volatile
  7150  002CEA  0012               	return		;funcret
  7151  002CEC                     __end_of_SetMcuSystem:
  7152                           	opt stack 0
  7153                           tosu	equ	0xFFF
  7154                           tosh	equ	0xFFE
  7155                           tosl	equ	0xFFD
  7156                           pclath	equ	0xFFA
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           postinc0	equ	0xFEE
  7165                           wreg	equ	0xFE8
  7166                           indf1	equ	0xFE7
  7167                           postdec1	equ	0xFE5
  7168                           fsr1h	equ	0xFE2
  7169                           fsr1l	equ	0xFE1
  7170                           indf2	equ	0xFDF
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _SYSTEM_Initialize *****************
  7178 ;; Defined at:
  7179 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7193 ;;      Params:         0       0       0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    5
  7200 ;; This function calls:
  7201 ;;		_ADC_Initialize
  7202 ;;		_EUSART1_Initialize
  7203 ;;		_INTERRUPT_Initialize
  7204 ;;		_OSCILLATOR_Initialize
  7205 ;;		_PIN_MANAGER_Initialize
  7206 ;;		_TMR0_Initialize
  7207 ;; This function is called by:
  7208 ;;		_SetMcuSystem
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text25
  7213  002C42                     __ptext25:
  7214                           	opt stack 0
  7215  002C42                     _SYSTEM_Initialize:
  7216                           	opt stack 24
  7217                           
  7218                           ;mcc.c: 114: INTERRUPT_Initialize();
  7219                           
  7220                           ;incstack = 0
  7221  002C42  EC82  F016         	call	_INTERRUPT_Initialize	;wreg free
  7222                           
  7223                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7224  002C46  EC97  F013         	call	_PIN_MANAGER_Initialize	;wreg free
  7225                           
  7226                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7227  002C4A  EC64  F016         	call	_OSCILLATOR_Initialize	;wreg free
  7228                           
  7229                           ;mcc.c: 117: TMR0_Initialize();
  7230  002C4E  EC14  F015         	call	_TMR0_Initialize	;wreg free
  7231                           
  7232                           ;mcc.c: 118: ADC_Initialize();
  7233  002C52  EC3A  F016         	call	_ADC_Initialize	;wreg free
  7234                           
  7235                           ;mcc.c: 119: EUSART1_Initialize();
  7236  002C56  ECF9  F014         	call	_EUSART1_Initialize	;wreg free
  7237  002C5A  0012               	return		;funcret
  7238  002C5C                     __end_of_SYSTEM_Initialize:
  7239                           	opt stack 0
  7240                           tosu	equ	0xFFF
  7241                           tosh	equ	0xFFE
  7242                           tosl	equ	0xFFD
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           postinc0	equ	0xFEE
  7252                           wreg	equ	0xFE8
  7253                           indf1	equ	0xFE7
  7254                           postdec1	equ	0xFE5
  7255                           fsr1h	equ	0xFE2
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _TMR0_Initialize *****************
  7265 ;; Defined at:
  7266 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;		None
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, status,2, status,0, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7280 ;;      Params:         0       0       0       0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0
  7282 ;;      Temps:          2       0       0       0       0       0       0
  7283 ;;      Totals:         2       0       0       0       0       0       0
  7284 ;;Total ram usage:        2 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    4
  7287 ;; This function calls:
  7288 ;;		_TMR0_SetInterruptHandler
  7289 ;; This function is called by:
  7290 ;;		_SYSTEM_Initialize
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           	psect	text26
  7295  002A28                     __ptext26:
  7296                           	opt stack 0
  7297  002A28                     _TMR0_Initialize:
  7298                           	opt stack 24
  7299                           
  7300                           ;tmr0.c: 71: TMR0H = 0x3C;
  7301                           
  7302                           ;incstack = 0
  7303  002A28  0E3C               	movlw	60
  7304  002A2A  6ED7               	movwf	4055,c	;volatile
  7305                           
  7306                           ;tmr0.c: 74: TMR0L = 0xAF;
  7307  002A2C  0EAF               	movlw	175
  7308  002A2E  6ED6               	movwf	4054,c	;volatile
  7309                           
  7310                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7311  002A30  50D6               	movf	4054,w,c	;volatile
  7312  002A32  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7313  002A36  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7314  002A38  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7315  002A3C  6A1A               	clrf	??_TMR0_Initialize,c
  7316  002A3E  101A               	iorwf	??_TMR0_Initialize,w,c
  7317  002A40  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7318  002A42  501B               	movf	??_TMR0_Initialize+1,w,c
  7319  002A44  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7320                           
  7321                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7322  002A46  94F2               	bcf	intcon,2,c	;volatile
  7323                           
  7324                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7325  002A48  8AF2               	bsf	intcon,5,c	;volatile
  7326                           
  7327                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7328  002A4A  0E00               	movlw	0
  7329  002A4C  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7330  002A4E  0E00               	movlw	0
  7331  002A50  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7332  002A52  EC76  F016         	call	_TMR0_SetInterruptHandler	;wreg free
  7333                           
  7334                           ;tmr0.c: 90: T0CON = 0x90;
  7335  002A56  0E90               	movlw	144
  7336  002A58  6ED5               	movwf	4053,c	;volatile
  7337  002A5A  0012               	return		;funcret
  7338  002A5C                     __end_of_TMR0_Initialize:
  7339                           	opt stack 0
  7340                           tosu	equ	0xFFF
  7341                           tosh	equ	0xFFE
  7342                           tosl	equ	0xFFD
  7343                           pclath	equ	0xFFA
  7344                           tblptru	equ	0xFF8
  7345                           tblptrh	equ	0xFF7
  7346                           tblptrl	equ	0xFF6
  7347                           tablat	equ	0xFF5
  7348                           prodh	equ	0xFF4
  7349                           prodl	equ	0xFF3
  7350                           intcon	equ	0xFF2
  7351                           postinc0	equ	0xFEE
  7352                           wreg	equ	0xFE8
  7353                           indf1	equ	0xFE7
  7354                           postdec1	equ	0xFE5
  7355                           fsr1h	equ	0xFE2
  7356                           fsr1l	equ	0xFE1
  7357                           indf2	equ	0xFDF
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function _TMR0_SetInterruptHandler *****************
  7365 ;; Defined at:
  7366 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7369 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;		None
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7381 ;;      Params:         2       0       0       0       0       0       0
  7382 ;;      Locals:         0       0       0       0       0       0       0
  7383 ;;      Temps:          0       0       0       0       0       0       0
  7384 ;;      Totals:         2       0       0       0       0       0       0
  7385 ;;Total ram usage:        2 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    3
  7388 ;; This function calls:
  7389 ;;		Nothing
  7390 ;; This function is called by:
  7391 ;;		_TMR0_Initialize
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text27
  7396  002CEC                     __ptext27:
  7397                           	opt stack 0
  7398  002CEC                     _TMR0_SetInterruptHandler:
  7399                           	opt stack 24
  7400                           
  7401                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7402                           
  7403                           ;incstack = 0
  7404  002CEC  C018  F1FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7405  002CF0  C019  F1FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7406  002CF4  0012               	return		;funcret
  7407  002CF6                     __end_of_TMR0_SetInterruptHandler:
  7408                           	opt stack 0
  7409                           tosu	equ	0xFFF
  7410                           tosh	equ	0xFFE
  7411                           tosl	equ	0xFFD
  7412                           pclath	equ	0xFFA
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _PIN_MANAGER_Initialize *****************
  7434 ;; Defined at:
  7435 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7449 ;;      Params:         0       0       0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0
  7452 ;;      Totals:         0       0       0       0       0       0       0
  7453 ;;Total ram usage:        0 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    3
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_SYSTEM_Initialize
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text28
  7464  00272E                     __ptext28:
  7465                           	opt stack 0
  7466  00272E                     _PIN_MANAGER_Initialize:
  7467                           	opt stack 25
  7468                           
  7469                           ;pin_manager.c: 57: LATE = 0x00;
  7470                           
  7471                           ;incstack = 0
  7472  00272E  0E00               	movlw	0
  7473  002730  6E8D               	movwf	3981,c	;volatile
  7474                           
  7475                           ;pin_manager.c: 58: LATD = 0x00;
  7476  002732  0E00               	movlw	0
  7477  002734  6E8C               	movwf	3980,c	;volatile
  7478                           
  7479                           ;pin_manager.c: 59: LATA = 0x06;
  7480  002736  0E06               	movlw	6
  7481  002738  6E89               	movwf	3977,c	;volatile
  7482                           
  7483                           ;pin_manager.c: 60: LATB = 0x00;
  7484  00273A  0E00               	movlw	0
  7485  00273C  6E8A               	movwf	3978,c	;volatile
  7486                           
  7487                           ;pin_manager.c: 61: LATC = 0x00;
  7488  00273E  0E00               	movlw	0
  7489  002740  6E8B               	movwf	3979,c	;volatile
  7490                           
  7491                           ;pin_manager.c: 66: TRISE = 0x07;
  7492  002742  0E07               	movlw	7
  7493  002744  6E96               	movwf	3990,c	;volatile
  7494                           
  7495                           ;pin_manager.c: 67: TRISA = 0xE1;
  7496  002746  0EE1               	movlw	225
  7497  002748  6E92               	movwf	3986,c	;volatile
  7498                           
  7499                           ;pin_manager.c: 68: TRISB = 0xEF;
  7500  00274A  0EEF               	movlw	239
  7501  00274C  6E93               	movwf	3987,c	;volatile
  7502                           
  7503                           ;pin_manager.c: 69: TRISC = 0x80;
  7504  00274E  0E80               	movlw	128
  7505  002750  6E94               	movwf	3988,c	;volatile
  7506                           
  7507                           ;pin_manager.c: 70: TRISD = 0xF2;
  7508  002752  0EF2               	movlw	242
  7509  002754  6E95               	movwf	3989,c	;volatile
  7510                           
  7511                           ;pin_manager.c: 75: ANSELC = 0x30;
  7512  002756  0E30               	movlw	48
  7513  002758  010F               	movlb	15	; () banked
  7514  00275A  6F3A               	movwf	58,b	;volatile
  7515                           
  7516                           ;pin_manager.c: 76: ANSELB = 0x33;
  7517  00275C  0E33               	movlw	51
  7518  00275E  6F39               	movwf	57,b	;volatile
  7519                           
  7520                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7521  002760  0EE4               	movlw	228
  7522  002762  6F3B               	movwf	59,b	;volatile
  7523                           
  7524                           ;pin_manager.c: 78: ANSELE = 0x07;
  7525  002764  0E07               	movlw	7
  7526  002766  6F3C               	movwf	60,b	;volatile
  7527                           
  7528                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7529  002768  0E2F               	movlw	47
  7530  00276A  6F38               	movwf	56,b	;volatile
  7531                           
  7532                           ;pin_manager.c: 84: WPUB = 0xC2;
  7533  00276C  0EC2               	movlw	194
  7534  00276E  6E61               	movwf	3937,c	;volatile
  7535                           
  7536                           ; BSR set to: 15
  7537                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 1;
  7538  002770  8EF1               	bsf	intcon2,7,c	;volatile
  7539                           
  7540                           ; BSR set to: 15
  7541                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7542  002772  86F2               	bsf	intcon,3,c	;volatile
  7543                           
  7544                           ; BSR set to: 15
  7545  002774  0012               	return		;funcret
  7546  002776                     __end_of_PIN_MANAGER_Initialize:
  7547                           	opt stack 0
  7548                           tosu	equ	0xFFF
  7549                           tosh	equ	0xFFE
  7550                           tosl	equ	0xFFD
  7551                           pclath	equ	0xFFA
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           prodh	equ	0xFF4
  7557                           prodl	equ	0xFF3
  7558                           intcon	equ	0xFF2
  7559                           intcon2	equ	0xFF1
  7560                           postinc0	equ	0xFEE
  7561                           wreg	equ	0xFE8
  7562                           indf1	equ	0xFE7
  7563                           postdec1	equ	0xFE5
  7564                           fsr1h	equ	0xFE2
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _OSCILLATOR_Initialize *****************
  7574 ;; Defined at:
  7575 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;                  1    wreg      void 
  7582 ;; Registers used:
  7583 ;;		wreg, status,2
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7589 ;;      Params:         0       0       0       0       0       0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0
  7591 ;;      Temps:          0       0       0       0       0       0       0
  7592 ;;      Totals:         0       0       0       0       0       0       0
  7593 ;;Total ram usage:        0 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:    3
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_SYSTEM_Initialize
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text29
  7604  002CC8                     __ptext29:
  7605                           	opt stack 0
  7606  002CC8                     _OSCILLATOR_Initialize:
  7607                           	opt stack 25
  7608                           
  7609                           ;mcc.c: 125: OSCCON = 0x60;
  7610                           
  7611                           ; BSR set to: 15
  7612                           ;incstack = 0
  7613  002CC8  0E60               	movlw	96
  7614  002CCA  6ED3               	movwf	4051,c	;volatile
  7615                           
  7616                           ;mcc.c: 127: OSCCON2 = 0x04;
  7617  002CCC  0E04               	movlw	4
  7618  002CCE  6ED2               	movwf	4050,c	;volatile
  7619                           
  7620                           ;mcc.c: 129: OSCTUNE = 0x00;
  7621  002CD0  0E00               	movlw	0
  7622  002CD2  6E9B               	movwf	3995,c	;volatile
  7623  002CD4  0012               	return		;funcret
  7624  002CD6                     __end_of_OSCILLATOR_Initialize:
  7625                           	opt stack 0
  7626                           tosu	equ	0xFFF
  7627                           tosh	equ	0xFFE
  7628                           tosl	equ	0xFFD
  7629                           pclath	equ	0xFFA
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           intcon2	equ	0xFF1
  7638                           postinc0	equ	0xFEE
  7639                           wreg	equ	0xFE8
  7640                           indf1	equ	0xFE7
  7641                           postdec1	equ	0xFE5
  7642                           fsr1h	equ	0xFE2
  7643                           fsr1l	equ	0xFE1
  7644                           indf2	equ	0xFDF
  7645                           postinc2	equ	0xFDE
  7646                           postdec2	equ	0xFDD
  7647                           fsr2h	equ	0xFDA
  7648                           fsr2l	equ	0xFD9
  7649                           status	equ	0xFD8
  7650                           
  7651 ;; *************** function _INTERRUPT_Initialize *****************
  7652 ;; Defined at:
  7653 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7654 ;; Parameters:    Size  Location     Type
  7655 ;;		None
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;		None
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  1    wreg      void 
  7660 ;; Registers used:
  7661 ;;		None
  7662 ;; Tracked objects:
  7663 ;;		On entry : 0/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7667 ;;      Params:         0       0       0       0       0       0       0
  7668 ;;      Locals:         0       0       0       0       0       0       0
  7669 ;;      Temps:          0       0       0       0       0       0       0
  7670 ;;      Totals:         0       0       0       0       0       0       0
  7671 ;;Total ram usage:        0 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    3
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_SYSTEM_Initialize
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text30
  7682  002D04                     __ptext30:
  7683                           	opt stack 0
  7684  002D04                     _INTERRUPT_Initialize:
  7685                           	opt stack 25
  7686                           
  7687                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  7688                           
  7689                           ;incstack = 0
  7690  002D04  9ED0               	bcf	4048,7,c	;volatile
  7691  002D06  0012               	return		;funcret
  7692  002D08                     __end_of_INTERRUPT_Initialize:
  7693                           	opt stack 0
  7694                           tosu	equ	0xFFF
  7695                           tosh	equ	0xFFE
  7696                           tosl	equ	0xFFD
  7697                           pclath	equ	0xFFA
  7698                           tblptru	equ	0xFF8
  7699                           tblptrh	equ	0xFF7
  7700                           tblptrl	equ	0xFF6
  7701                           tablat	equ	0xFF5
  7702                           prodh	equ	0xFF4
  7703                           prodl	equ	0xFF3
  7704                           intcon	equ	0xFF2
  7705                           intcon2	equ	0xFF1
  7706                           postinc0	equ	0xFEE
  7707                           wreg	equ	0xFE8
  7708                           indf1	equ	0xFE7
  7709                           postdec1	equ	0xFE5
  7710                           fsr1h	equ	0xFE2
  7711                           fsr1l	equ	0xFE1
  7712                           indf2	equ	0xFDF
  7713                           postinc2	equ	0xFDE
  7714                           postdec2	equ	0xFDD
  7715                           fsr2h	equ	0xFDA
  7716                           fsr2l	equ	0xFD9
  7717                           status	equ	0xFD8
  7718                           
  7719 ;; *************** function _EUSART1_Initialize *****************
  7720 ;; Defined at:
  7721 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;		None
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;		None
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      void 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7735 ;;      Params:         0       0       0       0       0       0       0
  7736 ;;      Locals:         0       0       0       0       0       0       0
  7737 ;;      Temps:          0       0       0       0       0       0       0
  7738 ;;      Totals:         0       0       0       0       0       0       0
  7739 ;;Total ram usage:        0 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    3
  7742 ;; This function calls:
  7743 ;;		Nothing
  7744 ;; This function is called by:
  7745 ;;		_SYSTEM_Initialize
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text31
  7750  0029F2                     __ptext31:
  7751                           	opt stack 0
  7752  0029F2                     _EUSART1_Initialize:
  7753                           	opt stack 25
  7754                           
  7755                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  7756                           
  7757                           ;incstack = 0
  7758  0029F2  9A9D               	bcf	3997,5,c	;volatile
  7759                           
  7760                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  7761  0029F4  989D               	bcf	3997,4,c	;volatile
  7762                           
  7763                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  7764  0029F6  0E08               	movlw	8
  7765  0029F8  6EB8               	movwf	4024,c	;volatile
  7766                           
  7767                           ;eusart1.c: 85: RCSTA1 = 0x90;
  7768  0029FA  0E90               	movlw	144
  7769  0029FC  6EAB               	movwf	4011,c	;volatile
  7770                           
  7771                           ;eusart1.c: 88: TXSTA1 = 0x24;
  7772  0029FE  0E24               	movlw	36
  7773  002A00  6EAC               	movwf	4012,c	;volatile
  7774                           
  7775                           ;eusart1.c: 91: SPBRG1 = 0x10;
  7776  002A02  0E10               	movlw	16
  7777  002A04  6EAF               	movwf	4015,c	;volatile
  7778                           
  7779                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  7780  002A06  0E00               	movlw	0
  7781  002A08  6EB0               	movwf	4016,c	;volatile
  7782                           
  7783                           ;eusart1.c: 98: eusart1TxHead = 0;
  7784  002A0A  0E00               	movlw	0
  7785  002A0C  6E3C               	movwf	_eusart1TxHead,c	;volatile
  7786                           
  7787                           ;eusart1.c: 99: eusart1TxTail = 0;
  7788  002A0E  0E00               	movlw	0
  7789  002A10  6E3B               	movwf	_eusart1TxTail,c	;volatile
  7790                           
  7791                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  7792  002A12  0E46               	movlw	70
  7793  002A14  0100               	movlb	0	; () banked
  7794  002A16  6FDC               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  7795                           
  7796                           ;eusart1.c: 102: eusart1RxHead = 0;
  7797  002A18  0E00               	movlw	0
  7798  002A1A  6E3A               	movwf	_eusart1RxHead,c	;volatile
  7799                           
  7800                           ;eusart1.c: 103: eusart1RxTail = 0;
  7801  002A1C  0E00               	movlw	0
  7802  002A1E  6E39               	movwf	_eusart1RxTail,c	;volatile
  7803                           
  7804                           ;eusart1.c: 104: eusart1RxCount = 0;
  7805  002A20  0E00               	movlw	0
  7806  002A22  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  7810  002A24  8A9D               	bsf	3997,5,c	;volatile
  7811                           
  7812                           ; BSR set to: 0
  7813  002A26  0012               	return		;funcret
  7814  002A28                     __end_of_EUSART1_Initialize:
  7815                           	opt stack 0
  7816                           tosu	equ	0xFFF
  7817                           tosh	equ	0xFFE
  7818                           tosl	equ	0xFFD
  7819                           pclath	equ	0xFFA
  7820                           tblptru	equ	0xFF8
  7821                           tblptrh	equ	0xFF7
  7822                           tblptrl	equ	0xFF6
  7823                           tablat	equ	0xFF5
  7824                           prodh	equ	0xFF4
  7825                           prodl	equ	0xFF3
  7826                           intcon	equ	0xFF2
  7827                           intcon2	equ	0xFF1
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           indf1	equ	0xFE7
  7831                           postdec1	equ	0xFE5
  7832                           fsr1h	equ	0xFE2
  7833                           fsr1l	equ	0xFE1
  7834                           indf2	equ	0xFDF
  7835                           postinc2	equ	0xFDE
  7836                           postdec2	equ	0xFDD
  7837                           fsr2h	equ	0xFDA
  7838                           fsr2l	equ	0xFD9
  7839                           status	equ	0xFD8
  7840                           
  7841 ;; *************** function _ADC_Initialize *****************
  7842 ;; Defined at:
  7843 ;;		line 58 in file "mcc_generated_files/adc.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7857 ;;      Params:         0       0       0       0       0       0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0
  7860 ;;      Totals:         0       0       0       0       0       0       0
  7861 ;;Total ram usage:        0 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    3
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_SYSTEM_Initialize
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text32
  7872  002C74                     __ptext32:
  7873                           	opt stack 0
  7874  002C74                     _ADC_Initialize:
  7875                           	opt stack 25
  7876                           
  7877                           ;adc.c: 63: ADCON0 = 0x05;
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;incstack = 0
  7881  002C74  0E05               	movlw	5
  7882  002C76  6EC2               	movwf	4034,c	;volatile
  7883                           
  7884                           ;adc.c: 66: ADCON1 = 0x00;
  7885  002C78  0E00               	movlw	0
  7886  002C7A  6EC1               	movwf	4033,c	;volatile
  7887                           
  7888                           ;adc.c: 69: ADCON2 = 0x87;
  7889  002C7C  0E87               	movlw	135
  7890  002C7E  6EC0               	movwf	4032,c	;volatile
  7891                           
  7892                           ;adc.c: 72: ADRESL = 0x00;
  7893  002C80  0E00               	movlw	0
  7894  002C82  6EC3               	movwf	4035,c	;volatile
  7895                           
  7896                           ;adc.c: 75: ADRESH = 0x00;
  7897  002C84  0E00               	movlw	0
  7898  002C86  6EC4               	movwf	4036,c	;volatile
  7899  002C88  0012               	return		;funcret
  7900  002C8A                     __end_of_ADC_Initialize:
  7901                           	opt stack 0
  7902                           tosu	equ	0xFFF
  7903                           tosh	equ	0xFFE
  7904                           tosl	equ	0xFFD
  7905                           pclath	equ	0xFFA
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           intcon	equ	0xFF2
  7913                           intcon2	equ	0xFF1
  7914                           postinc0	equ	0xFEE
  7915                           wreg	equ	0xFE8
  7916                           indf1	equ	0xFE7
  7917                           postdec1	equ	0xFE5
  7918                           fsr1h	equ	0xFE2
  7919                           fsr1l	equ	0xFE1
  7920                           indf2	equ	0xFDF
  7921                           postinc2	equ	0xFDE
  7922                           postdec2	equ	0xFDD
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function _SetMcuRunTime *****************
  7928 ;; Defined at:
  7929 ;;		line 45 in file "SystemStatus.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7943 ;;      Params:         0       0       0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    4
  7950 ;; This function calls:
  7951 ;;		___llmod
  7952 ;; This function is called by:
  7953 ;;		_main
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text33
  7958  0027FE                     __ptext33:
  7959                           	opt stack 0
  7960  0027FE                     _SetMcuRunTime:
  7961                           	opt stack 26
  7962                           
  7963                           ;SystemStatus.c: 47: mcuRunTimeIn5SecTicks++;
  7964                           
  7965                           ;incstack = 0
  7966  0027FE  0E01               	movlw	1
  7967  002800  0101               	movlb	1	; () banked
  7968  002802  2748               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  7969  002804  0E00               	movlw	0
  7970  002806  2349               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  7971  002808  234A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  7972  00280A  234B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  7973                           
  7974                           ; BSR set to: 1
  7975                           ;SystemStatus.c: 48: mcuRunTimeIn5SecTicks %= (17280);
  7976  00280C  C148  F025         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  7977  002810  C149  F026         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  7978  002814  C14A  F027         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  7979  002818  C14B  F028         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  7980  00281C  0E80               	movlw	128
  7981  00281E  6E29               	movwf	___llmod@divisor,c
  7982  002820  0E43               	movlw	67
  7983  002822  6E2A               	movwf	___llmod@divisor+1,c
  7984  002824  0E00               	movlw	0
  7985  002826  6E2B               	movwf	___llmod@divisor+2,c
  7986  002828  0E00               	movlw	0
  7987  00282A  6E2C               	movwf	___llmod@divisor+3,c
  7988  00282C  EC06  F011         	call	___llmod	;wreg free
  7989  002830  C025  F148         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  7990  002834  C026  F149         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  7991  002838  C027  F14A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  7992  00283C  C028  F14B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  7993  002840  0012               	return		;funcret
  7994  002842                     __end_of_SetMcuRunTime:
  7995                           	opt stack 0
  7996                           tosu	equ	0xFFF
  7997                           tosh	equ	0xFFE
  7998                           tosl	equ	0xFFD
  7999                           pclath	equ	0xFFA
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           intcon2	equ	0xFF1
  8008                           postinc0	equ	0xFEE
  8009                           wreg	equ	0xFE8
  8010                           indf1	equ	0xFE7
  8011                           postdec1	equ	0xFE5
  8012                           fsr1h	equ	0xFE2
  8013                           fsr1l	equ	0xFE1
  8014                           indf2	equ	0xFDF
  8015                           postinc2	equ	0xFDE
  8016                           postdec2	equ	0xFDD
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function ___llmod *****************
  8022 ;; Defined at:
  8023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  dividend        4   36[COMRAM] unsigned long 
  8026 ;;  divisor         4   40[COMRAM] unsigned long 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  counter         1   44[COMRAM] unsigned char 
  8029 ;; Return value:  Size  Location     Type
  8030 ;;                  4   36[COMRAM] unsigned long 
  8031 ;; Registers used:
  8032 ;;		wreg, status,2, status,0
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8038 ;;      Params:         8       0       0       0       0       0       0
  8039 ;;      Locals:         1       0       0       0       0       0       0
  8040 ;;      Temps:          0       0       0       0       0       0       0
  8041 ;;      Totals:         9       0       0       0       0       0       0
  8042 ;;Total ram usage:        9 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; Hardware stack levels required when called:    3
  8045 ;; This function calls:
  8046 ;;		Nothing
  8047 ;; This function is called by:
  8048 ;;		_AdcSingleSample
  8049 ;;		_SetMcuRunTime
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text34
  8054  00220C                     __ptext34:
  8055                           	opt stack 0
  8056  00220C                     ___llmod:
  8057                           	opt stack 24
  8058                           
  8059                           ;incstack = 0
  8060  00220C  5029               	movf	___llmod@divisor,w,c
  8061  00220E  102A               	iorwf	___llmod@divisor+1,w,c
  8062  002210  102B               	iorwf	___llmod@divisor+2,w,c
  8063  002212  102C               	iorwf	___llmod@divisor+3,w,c
  8064  002214  B4D8               	btfsc	status,2,c
  8065  002216  D024               	goto	l1662
  8066  002218  0E01               	movlw	1
  8067  00221A  6E2D               	movwf	___llmod@counter,c
  8068  00221C  D006               	goto	l1657
  8069  00221E  90D8               	bcf	status,0,c
  8070  002220  3629               	rlcf	___llmod@divisor,f,c
  8071  002222  362A               	rlcf	___llmod@divisor+1,f,c
  8072  002224  362B               	rlcf	___llmod@divisor+2,f,c
  8073  002226  362C               	rlcf	___llmod@divisor+3,f,c
  8074  002228  2A2D               	incf	___llmod@counter,f,c
  8075  00222A                     l1657:
  8076  00222A  AE2C               	btfss	___llmod@divisor+3,7,c
  8077  00222C  D7F8               	goto	l1658
  8078  00222E                     u7280:
  8079  00222E  5029               	movf	___llmod@divisor,w,c
  8080  002230  5C25               	subwf	___llmod@dividend,w,c
  8081  002232  502A               	movf	___llmod@divisor+1,w,c
  8082  002234  5826               	subwfb	___llmod@dividend+1,w,c
  8083  002236  502B               	movf	___llmod@divisor+2,w,c
  8084  002238  5827               	subwfb	___llmod@dividend+2,w,c
  8085  00223A  502C               	movf	___llmod@divisor+3,w,c
  8086  00223C  5828               	subwfb	___llmod@dividend+3,w,c
  8087  00223E  A0D8               	btfss	status,0,c
  8088  002240  D008               	goto	l1661
  8089  002242  5029               	movf	___llmod@divisor,w,c
  8090  002244  5E25               	subwf	___llmod@dividend,f,c
  8091  002246  502A               	movf	___llmod@divisor+1,w,c
  8092  002248  5A26               	subwfb	___llmod@dividend+1,f,c
  8093  00224A  502B               	movf	___llmod@divisor+2,w,c
  8094  00224C  5A27               	subwfb	___llmod@dividend+2,f,c
  8095  00224E  502C               	movf	___llmod@divisor+3,w,c
  8096  002250  5A28               	subwfb	___llmod@dividend+3,f,c
  8097  002252                     l1661:
  8098  002252  90D8               	bcf	status,0,c
  8099  002254  322C               	rrcf	___llmod@divisor+3,f,c
  8100  002256  322B               	rrcf	___llmod@divisor+2,f,c
  8101  002258  322A               	rrcf	___llmod@divisor+1,f,c
  8102  00225A  3229               	rrcf	___llmod@divisor,f,c
  8103  00225C  2E2D               	decfsz	___llmod@counter,f,c
  8104  00225E  D7E7               	goto	u7280
  8105  002260                     l1662:
  8106  002260  C025  F025         	movff	___llmod@dividend,?___llmod
  8107  002264  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  8108  002268  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  8109  00226C  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  8110  002270  0012               	return		;funcret
  8111  002272                     __end_of___llmod:
  8112                           	opt stack 0
  8113                           tosu	equ	0xFFF
  8114                           tosh	equ	0xFFE
  8115                           tosl	equ	0xFFD
  8116                           pclath	equ	0xFFA
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           prodh	equ	0xFF4
  8122                           prodl	equ	0xFF3
  8123                           intcon	equ	0xFF2
  8124                           intcon2	equ	0xFF1
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           indf1	equ	0xFE7
  8128                           postdec1	equ	0xFE5
  8129                           fsr1h	equ	0xFE2
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function _SendUartSystemInitMessage *****************
  8139 ;; Defined at:
  8140 ;;		line 66 in file "SystemStatus.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  dest           50    9[BANK0 ] unsigned char [50]
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8154 ;;      Params:         0       0       0       0       0       0       0
  8155 ;;      Locals:         0      50       0       0       0       0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0
  8157 ;;      Totals:         0      50       0       0       0       0       0
  8158 ;;Total ram usage:       50 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    5
  8161 ;; This function calls:
  8162 ;;		_UART_Write_Text
  8163 ;;		_sprintf
  8164 ;; This function is called by:
  8165 ;;		_main
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	text35
  8170  00196A                     __ptext35:
  8171                           	opt stack 0
  8172  00196A                     _SendUartSystemInitMessage:
  8173                           	opt stack 25
  8174                           
  8175                           ;SystemStatus.c: 68: char dest[50];
  8176                           ;SystemStatus.c: 70: sprintf(dest, "*************************** \n\r");
  8177                           
  8178                           ;incstack = 0
  8179  00196A  0E69               	movlw	low SendUartSystemInitMessage@dest
  8180  00196C  6E24               	movwf	sprintf@sp,c
  8181  00196E  0E00               	movlw	high SendUartSystemInitMessage@dest
  8182  001970  6E25               	movwf	sprintf@sp+1,c
  8183  001972  0EF4               	movlw	low STR_12
  8184  001974  6E26               	movwf	sprintf@f,c
  8185  001976  0E7E               	movlw	high STR_12
  8186  001978  6E27               	movwf	sprintf@f+1,c
  8187  00197A  ECA7  F006         	call	_sprintf	;wreg free
  8188                           
  8189                           ;SystemStatus.c: 71: UART_Write_Text(dest);
  8190  00197E  0E69               	movlw	low SendUartSystemInitMessage@dest
  8191  001980  6E19               	movwf	UART_Write_Text@text,c
  8192  001982  0E00               	movlw	high SendUartSystemInitMessage@dest
  8193  001984  6E1A               	movwf	UART_Write_Text@text+1,c
  8194  001986  EC98  F010         	call	_UART_Write_Text	;wreg free
  8195                           
  8196                           ;SystemStatus.c: 73: sprintf(dest, "FAST LINK SYSTEM \n\r");
  8197  00198A  0E69               	movlw	low SendUartSystemInitMessage@dest
  8198  00198C  6E24               	movwf	sprintf@sp,c
  8199  00198E  0E00               	movlw	high SendUartSystemInitMessage@dest
  8200  001990  6E25               	movwf	sprintf@sp+1,c
  8201  001992  0E60               	movlw	low STR_13
  8202  001994  6E26               	movwf	sprintf@f,c
  8203  001996  0E7F               	movlw	high STR_13
  8204  001998  6E27               	movwf	sprintf@f+1,c
  8205  00199A  ECA7  F006         	call	_sprintf	;wreg free
  8206                           
  8207                           ;SystemStatus.c: 74: UART_Write_Text(dest);
  8208  00199E  0E69               	movlw	low SendUartSystemInitMessage@dest
  8209  0019A0  6E19               	movwf	UART_Write_Text@text,c
  8210  0019A2  0E00               	movlw	high SendUartSystemInitMessage@dest
  8211  0019A4  6E1A               	movwf	UART_Write_Text@text+1,c
  8212  0019A6  EC98  F010         	call	_UART_Write_Text	;wreg free
  8213                           
  8214                           ;SystemStatus.c: 76: sprintf(dest, "SW VESRION: %s \n\r", "1_002");
  8215  0019AA  0E69               	movlw	low SendUartSystemInitMessage@dest
  8216  0019AC  6E24               	movwf	sprintf@sp,c
  8217  0019AE  0E00               	movlw	high SendUartSystemInitMessage@dest
  8218  0019B0  6E25               	movwf	sprintf@sp+1,c
  8219  0019B2  0EB0               	movlw	low STR_14
  8220  0019B4  6E26               	movwf	sprintf@f,c
  8221  0019B6  0E7F               	movlw	high STR_14
  8222  0019B8  6E27               	movwf	sprintf@f+1,c
  8223  0019BA  0EF3               	movlw	low STR_15
  8224  0019BC  6E28               	movwf	?_sprintf+4,c
  8225  0019BE  0E7F               	movlw	high STR_15
  8226  0019C0  6E29               	movwf	?_sprintf+5,c
  8227  0019C2  ECA7  F006         	call	_sprintf	;wreg free
  8228                           
  8229                           ;SystemStatus.c: 77: UART_Write_Text(dest);
  8230  0019C6  0E69               	movlw	low SendUartSystemInitMessage@dest
  8231  0019C8  6E19               	movwf	UART_Write_Text@text,c
  8232  0019CA  0E00               	movlw	high SendUartSystemInitMessage@dest
  8233  0019CC  6E1A               	movwf	UART_Write_Text@text+1,c
  8234  0019CE  EC98  F010         	call	_UART_Write_Text	;wreg free
  8235                           
  8236                           ;SystemStatus.c: 79: sprintf(dest, "Compile date: %s \n\r", "Mar 26 2018");
  8237  0019D2  0E69               	movlw	low SendUartSystemInitMessage@dest
  8238  0019D4  6E24               	movwf	sprintf@sp,c
  8239  0019D6  0E00               	movlw	high SendUartSystemInitMessage@dest
  8240  0019D8  6E25               	movwf	sprintf@sp+1,c
  8241  0019DA  0E88               	movlw	low STR_16
  8242  0019DC  6E26               	movwf	sprintf@f,c
  8243  0019DE  0E7F               	movlw	high STR_16
  8244  0019E0  6E27               	movwf	sprintf@f+1,c
  8245  0019E2  0EC2               	movlw	low STR_17
  8246  0019E4  6E28               	movwf	?_sprintf+4,c
  8247  0019E6  0E7F               	movlw	high STR_17
  8248  0019E8  6E29               	movwf	?_sprintf+5,c
  8249  0019EA  ECA7  F006         	call	_sprintf	;wreg free
  8250                           
  8251                           ;SystemStatus.c: 80: UART_Write_Text(dest);
  8252  0019EE  0E69               	movlw	low SendUartSystemInitMessage@dest
  8253  0019F0  6E19               	movwf	UART_Write_Text@text,c
  8254  0019F2  0E00               	movlw	high SendUartSystemInitMessage@dest
  8255  0019F4  6E1A               	movwf	UART_Write_Text@text+1,c
  8256  0019F6  EC98  F010         	call	_UART_Write_Text	;wreg free
  8257                           
  8258                           ;SystemStatus.c: 82: sprintf(dest, "Compile time: %s \n\r", "12:12:24");
  8259  0019FA  0E69               	movlw	low SendUartSystemInitMessage@dest
  8260  0019FC  6E24               	movwf	sprintf@sp,c
  8261  0019FE  0E00               	movlw	high SendUartSystemInitMessage@dest
  8262  001A00  6E25               	movwf	sprintf@sp+1,c
  8263  001A02  0E74               	movlw	low STR_18
  8264  001A04  6E26               	movwf	sprintf@f,c
  8265  001A06  0E7F               	movlw	high STR_18
  8266  001A08  6E27               	movwf	sprintf@f+1,c
  8267  001A0A  0EE3               	movlw	low STR_19
  8268  001A0C  6E28               	movwf	?_sprintf+4,c
  8269  001A0E  0E7F               	movlw	high STR_19
  8270  001A10  6E29               	movwf	?_sprintf+5,c
  8271  001A12  ECA7  F006         	call	_sprintf	;wreg free
  8272                           
  8273                           ;SystemStatus.c: 83: UART_Write_Text(dest);
  8274  001A16  0E69               	movlw	low SendUartSystemInitMessage@dest
  8275  001A18  6E19               	movwf	UART_Write_Text@text,c
  8276  001A1A  0E00               	movlw	high SendUartSystemInitMessage@dest
  8277  001A1C  6E1A               	movwf	UART_Write_Text@text+1,c
  8278  001A1E  EC98  F010         	call	_UART_Write_Text	;wreg free
  8279                           
  8280                           ;SystemStatus.c: 85: sprintf(dest, "*************************** \n\r");
  8281  001A22  0E69               	movlw	low SendUartSystemInitMessage@dest
  8282  001A24  6E24               	movwf	sprintf@sp,c
  8283  001A26  0E00               	movlw	high SendUartSystemInitMessage@dest
  8284  001A28  6E25               	movwf	sprintf@sp+1,c
  8285  001A2A  0EF4               	movlw	low STR_12
  8286  001A2C  6E26               	movwf	sprintf@f,c
  8287  001A2E  0E7E               	movlw	high STR_12
  8288  001A30  6E27               	movwf	sprintf@f+1,c
  8289  001A32  ECA7  F006         	call	_sprintf	;wreg free
  8290                           
  8291                           ;SystemStatus.c: 86: UART_Write_Text(dest);
  8292  001A36  0E69               	movlw	low SendUartSystemInitMessage@dest
  8293  001A38  6E19               	movwf	UART_Write_Text@text,c
  8294  001A3A  0E00               	movlw	high SendUartSystemInitMessage@dest
  8295  001A3C  6E1A               	movwf	UART_Write_Text@text+1,c
  8296  001A3E  EC98  F010         	call	_UART_Write_Text	;wreg free
  8297  001A42  0012               	return		;funcret
  8298  001A44                     __end_of_SendUartSystemInitMessage:
  8299                           	opt stack 0
  8300                           tosu	equ	0xFFF
  8301                           tosh	equ	0xFFE
  8302                           tosl	equ	0xFFD
  8303                           pclath	equ	0xFFA
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon2	equ	0xFF1
  8312                           postinc0	equ	0xFEE
  8313                           wreg	equ	0xFE8
  8314                           indf1	equ	0xFE7
  8315                           postdec1	equ	0xFE5
  8316                           fsr1h	equ	0xFE2
  8317                           fsr1l	equ	0xFE1
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _SampleSingleChannel *****************
  8326 ;; Defined at:
  8327 ;;		line 93 in file "AdcApp.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  _adcResult      2   53[BANK2 ] unsigned int 
  8332 ;;  dest           50    0[BANK2 ] unsigned char [50]
  8333 ;;  adcRes          2   55[BANK2 ] unsigned int 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      unsigned char 
  8336 ;; Registers used:
  8337 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8343 ;;      Params:         0       0       0       0       0       0       0
  8344 ;;      Locals:         0       0       0      57       0       0       0
  8345 ;;      Temps:          0       2       0       0       0       0       0
  8346 ;;      Totals:         0       2       0      57       0       0       0
  8347 ;;Total ram usage:       59 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    8
  8350 ;; This function calls:
  8351 ;;		_ADC_GetConversion
  8352 ;;		_UART_Write_Text
  8353 ;;		___ftdiv
  8354 ;;		___ftmul
  8355 ;;		___fttol
  8356 ;;		___lwtoft
  8357 ;;		_pow
  8358 ;;		_sprintf
  8359 ;; This function is called by:
  8360 ;;		_main
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text36
  8365  00149A                     __ptext36:
  8366                           	opt stack 0
  8367  00149A                     _SampleSingleChannel:
  8368                           	opt stack 22
  8369                           
  8370                           ;AdcApp.c: 95: char dest[50];
  8371                           ;AdcApp.c: 96: uint16_t adcRes = 0x0;
  8372                           
  8373                           ;incstack = 0
  8374  00149A  0E00               	movlw	0
  8375  00149C  0102               	movlb	2	; () banked
  8376  00149E  6F7E               	movwf	(SampleSingleChannel@adcRes+1)& (0+255),b
  8377  0014A0  0E00               	movlw	0
  8378  0014A2  6F7D               	movwf	SampleSingleChannel@adcRes& (0+255),b
  8379                           
  8380                           ; BSR set to: 2
  8381                           ;AdcApp.c: 97: if(numSamples--)
  8382  0014A4  0101               	movlb	1	; () banked
  8383  0014A6  074E               	decf	_numSamples& (0+255),f,b
  8384  0014A8  A0D8               	btfss	status,0,c
  8385  0014AA  074F               	decf	(_numSamples+1)& (0+255),f,b
  8386  0014AC  294E               	incf	_numSamples& (0+255),w,b
  8387  0014AE  E103               	bnz	u7690
  8388  0014B0  294F               	incf	(_numSamples+1)& (0+255),w,b
  8389  0014B2  B4D8               	btfsc	status,2,c
  8390  0014B4  D074               	goto	l111
  8391  0014B6                     u7690:
  8392                           
  8393                           ; BSR set to: 1
  8394                           ;AdcApp.c: 98: {
  8395                           ;AdcApp.c: 99: adc_result_t _adcResult = ADC_GetConversion(channelArr[channelNum]);
  8396  0014B6  0EBF               	movlw	low _channelArr
  8397  0014B8  2437               	addwf	_channelNum,w,c
  8398  0014BA  6EF6               	movwf	tblptrl,c
  8399  0014BC  0E7A               	movlw	high _channelArr
  8400  0014BE  2038               	addwfc	_channelNum+1,w,c
  8401  0014C0  6EF7               	movwf	tblptrh,c
  8402  0014C2                     	if	0	;There are less than 3 active tblptr bytes
  8403  0014C2                     	endif
  8404  0014C2  0008               	tblrd		*
  8405  0014C4  50F5               	movf	tablat,w,c
  8406  0014C6  EC47  F015         	call	_ADC_GetConversion
  8407  0014CA  C018  F27B         	movff	?_ADC_GetConversion,SampleSingleChannel@_adcResult
  8408  0014CE  C019  F27C         	movff	?_ADC_GetConversion+1,SampleSingleChannel@_adcResult+1
  8409                           
  8410                           ;AdcApp.c: 100: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8411  0014D2  0E00               	movlw	0
  8412  0014D4  0100               	movlb	0	; () banked
  8413  0014D6  6FB8               	movwf	pow@y& (0+255),b
  8414  0014D8  0E20               	movlw	32
  8415  0014DA  6FB9               	movwf	(pow@y+1)& (0+255),b
  8416  0014DC  0E41               	movlw	65
  8417  0014DE  6FBA               	movwf	(pow@y+2)& (0+255),b
  8418  0014E0  0E00               	movlw	0
  8419  0014E2  6FB5               	movwf	pow@x& (0+255),b
  8420  0014E4  0E00               	movlw	0
  8421  0014E6  6FB6               	movwf	(pow@x+1)& (0+255),b
  8422  0014E8  0E40               	movlw	64
  8423  0014EA  6FB7               	movwf	(pow@x+2)& (0+255),b
  8424  0014EC  EC57  F008         	call	_pow	;wreg free
  8425  0014F0  C0B5  F278         	movff	?_pow,_SampleSingleChannel$2943
  8426  0014F4  C0B6  F279         	movff	?_pow+1,_SampleSingleChannel$2943+1
  8427  0014F8  C0B7  F27A         	movff	?_pow+2,_SampleSingleChannel$2943+2
  8428                           
  8429                           ;AdcApp.c: 100: adcRes = (_adcResult/pow(2,(10)))*(3340);
  8430  0014FC  0EC0               	movlw	192
  8431  0014FE  0100               	movlb	0	; () banked
  8432  001500  6F6C               	movwf	___ftmul@f2& (0+255),b
  8433  001502  0E50               	movlw	80
  8434  001504  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  8435  001506  0E45               	movlw	69
  8436  001508  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  8437  00150A  C278  F02D         	movff	_SampleSingleChannel$2943,___ftdiv@f2
  8438  00150E  C279  F02E         	movff	_SampleSingleChannel$2943+1,___ftdiv@f2+1
  8439  001512  C27A  F02F         	movff	_SampleSingleChannel$2943+2,___ftdiv@f2+2
  8440  001516  C27B  F020         	movff	SampleSingleChannel@_adcResult,___lwtoft@c
  8441  00151A  C27C  F021         	movff	SampleSingleChannel@_adcResult+1,___lwtoft@c+1
  8442  00151E  ECD4  F015         	call	___lwtoft	;wreg free
  8443  001522  C020  F02A         	movff	?___lwtoft,___ftdiv@f1
  8444  001526  C021  F02B         	movff	?___lwtoft+1,___ftdiv@f1+1
  8445  00152A  C022  F02C         	movff	?___lwtoft+2,___ftdiv@f1+2
  8446  00152E  ECD0  F00B         	call	___ftdiv	;wreg free
  8447  001532  C02A  F069         	movff	?___ftdiv,___ftmul@f1
  8448  001536  C02B  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
  8449  00153A  C02C  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
  8450  00153E  EC55  F00B         	call	___ftmul	;wreg free
  8451  001542  C069  F078         	movff	?___ftmul,___fttol@f1
  8452  001546  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
  8453  00154A  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
  8454  00154E  ECD9  F00A         	call	___fttol	;wreg free
  8455  001552  C078  F27D         	movff	?___fttol,SampleSingleChannel@adcRes
  8456  001556  C079  F27E         	movff	?___fttol+1,SampleSingleChannel@adcRes+1
  8457                           
  8458                           ;AdcApp.c: 102: sprintf(dest, "%d \t", adcRes);
  8459  00155A  0E46               	movlw	low SampleSingleChannel@dest
  8460  00155C  6E24               	movwf	sprintf@sp,c
  8461  00155E  0E02               	movlw	high SampleSingleChannel@dest
  8462  001560  6E25               	movwf	sprintf@sp+1,c
  8463  001562  0EF9               	movlw	low STR_6
  8464  001564  6E26               	movwf	sprintf@f,c
  8465  001566  0E7F               	movlw	high STR_6
  8466  001568  6E27               	movwf	sprintf@f+1,c
  8467  00156A  C27D  F028         	movff	SampleSingleChannel@adcRes,?_sprintf+4
  8468  00156E  C27E  F029         	movff	SampleSingleChannel@adcRes+1,?_sprintf+5
  8469  001572  ECA7  F006         	call	_sprintf	;wreg free
  8470                           
  8471                           ;AdcApp.c: 103: UART_Write_Text(dest);
  8472  001576  0E46               	movlw	low SampleSingleChannel@dest
  8473  001578  6E19               	movwf	UART_Write_Text@text,c
  8474  00157A  0E02               	movlw	high SampleSingleChannel@dest
  8475  00157C  6E1A               	movwf	UART_Write_Text@text+1,c
  8476  00157E  EC98  F010         	call	_UART_Write_Text	;wreg free
  8477                           
  8478                           ;AdcApp.c: 104: _delay((unsigned long)((1000)*(8000000/4000.0)));
  8479  001582  0E0B               	movlw	11
  8480  001584  0100               	movlb	0	; () banked
  8481  001586  6FC7               	movwf	(??_SampleSingleChannel+1)& (0+255),b
  8482  001588  0E26               	movlw	38
  8483  00158A  6FC6               	movwf	??_SampleSingleChannel& (0+255),b
  8484  00158C  0E5D               	movlw	93
  8485  00158E                     u8257:
  8486  00158E  2EE8               	decfsz	wreg,f,c
  8487  001590  D7FE               	bra	u8257
  8488  001592  2FC6               	decfsz	??_SampleSingleChannel& (0+255),f,b
  8489  001594  D7FC               	bra	u8257
  8490  001596  2FC7               	decfsz	(??_SampleSingleChannel+1)& (0+255),f,b
  8491  001598  D7FA               	bra	u8257
  8492  00159A  D000               	nop2	
  8493                           
  8494                           ;AdcApp.c: 105: }
  8495  00159C  0012               	return	
  8496  00159E                     l111:
  8497                           
  8498                           ;AdcApp.c: 106: else
  8499                           ;AdcApp.c: 107: {
  8500                           ;AdcApp.c: 108: needToSample = 0;
  8501  00159E  0E00               	movlw	0
  8502  0015A0  0100               	movlb	0	; () banked
  8503  0015A2  6FD4               	movwf	_needToSample& (0+255),b	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;AdcApp.c: 109: UART_Write_Text("NOT OK \n\r");
  8507  0015A4  0ED9               	movlw	low STR_1
  8508  0015A6  6E19               	movwf	UART_Write_Text@text,c
  8509  0015A8  0E7F               	movlw	high STR_1
  8510  0015AA  6E1A               	movwf	UART_Write_Text@text+1,c
  8511  0015AC  EC98  F010         	call	_UART_Write_Text	;wreg free
  8512  0015B0  0012               	return	
  8513  0015B2                     __end_of_SampleSingleChannel:
  8514                           	opt stack 0
  8515                           tosu	equ	0xFFF
  8516                           tosh	equ	0xFFE
  8517                           tosl	equ	0xFFD
  8518                           pclath	equ	0xFFA
  8519                           tblptru	equ	0xFF8
  8520                           tblptrh	equ	0xFF7
  8521                           tblptrl	equ	0xFF6
  8522                           tablat	equ	0xFF5
  8523                           prodh	equ	0xFF4
  8524                           prodl	equ	0xFF3
  8525                           intcon	equ	0xFF2
  8526                           intcon2	equ	0xFF1
  8527                           postinc0	equ	0xFEE
  8528                           wreg	equ	0xFE8
  8529                           indf1	equ	0xFE7
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function _sprintf *****************
  8541 ;; Defined at:
  8542 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  sp              2   35[COMRAM] PTR unsigned char 
  8545 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), readUartByte@dest(50), SampleSingleChannel@dest(50
      +), 
  8546 ;;  f               2   37[COMRAM] PTR const unsigned char 
  8547 ;;		 -> STR_39(37), STR_38(38), STR_37(86), STR_36(53), 
  8548 ;;		 -> STR_35(46), STR_34(29), STR_33(101), STR_32(86), 
  8549 ;;		 -> STR_31(61), STR_30(62), STR_29(45), STR_28(74), 
  8550 ;;		 -> STR_27(25), STR_26(79), STR_25(75), STR_24(46), 
  8551 ;;		 -> STR_23(61), STR_22(66), STR_21(23), STR_20(31), 
  8552 ;;		 -> STR_18(20), STR_16(20), STR_14(18), STR_13(20), 
  8553 ;;		 -> STR_12(31), STR_8(11), STR_6(5), 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  tmpval          4    0        struct .
  8556 ;;  val             2    6[BANK0 ] unsigned int 
  8557 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  8558 ;;		 -> STR_40(7), STR_19(9), STR_17(12), STR_15(6), 
  8559 ;;  ap              2    2[BANK0 ] PTR void [1]
  8560 ;;		 -> ?_sprintf(2), 
  8561 ;;  len             2    0        unsigned int 
  8562 ;;  c               1    8[BANK0 ] char 
  8563 ;;  prec            1    1[BANK0 ] char 
  8564 ;;  flag            1    0[BANK0 ] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  2   35[COMRAM] int 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8574 ;;      Params:         6       0       0       0       0       0       0
  8575 ;;      Locals:         0       9       0       0       0       0       0
  8576 ;;      Temps:          1       0       0       0       0       0       0
  8577 ;;      Totals:         7       9       0       0       0       0       0
  8578 ;;Total ram usage:       16 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    4
  8581 ;; This function calls:
  8582 ;;		___lwdiv
  8583 ;;		___lwmod
  8584 ;; This function is called by:
  8585 ;;		_SampleSingleChannel
  8586 ;;		_readUartByte
  8587 ;;		_SendUartSystemInitMessage
  8588 ;;		_PrintHelpScreen
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text37
  8593  000D4E                     __ptext37:
  8594                           	opt stack 0
  8595  000D4E                     _sprintf:
  8596                           	opt stack 25
  8597                           
  8598                           ;doprnt.c: 494: va_list ap;
  8599                           ;doprnt.c: 499: signed char c;
  8600                           ;doprnt.c: 506: signed char prec;
  8601                           ;doprnt.c: 508: unsigned char flag;
  8602                           ;doprnt.c: 523: union {
  8603                           ;doprnt.c: 524: unsigned long vd;
  8604                           ;doprnt.c: 525: double integ;
  8605                           ;doprnt.c: 526: } tmpval;
  8606                           ;doprnt.c: 528: unsigned int val;
  8607                           ;doprnt.c: 529: unsigned len;
  8608                           ;doprnt.c: 530: const char * cp;
  8609                           ;doprnt.c: 533: *ap = __va_start();
  8610                           
  8611                           ;incstack = 0
  8612  000D4E  0E28               	movlw	low (?_sprintf+4)
  8613  000D50  0100               	movlb	0	; () banked
  8614  000D52  6F62               	movwf	sprintf@ap& (0+255),b
  8615  000D54  0E00               	movlw	high (?_sprintf+4)
  8616  000D56  6F63               	movwf	(sprintf@ap+1)& (0+255),b
  8617                           
  8618                           ;doprnt.c: 536: while(c = *f++) {
  8619  000D58  D0C0               	goto	u7180
  8620  000D5A                     
  8621                           ; BSR set to: 0
  8622                           ;doprnt.c: 538: if(c != '%')
  8623                           
  8624                           ; BSR set to: 0
  8625  000D5A  0E25               	movlw	37
  8626  000D5C  1968               	xorwf	sprintf@c& (0+255),w,b
  8627  000D5E  B4D8               	btfsc	status,2,c
  8628  000D60  D009               	goto	l1270
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;doprnt.c: 540: {
  8632                           ;doprnt.c: 541: ((*sp++ = (c)));
  8633  000D62  C024  FFD9         	movff	sprintf@sp,fsr2l
  8634  000D66  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8635  000D6A  C068  FFDF         	movff	sprintf@c,indf2
  8636                           
  8637                           ; BSR set to: 0
  8638  000D6E  4A24               	infsnz	sprintf@sp,f,c
  8639  000D70  2A25               	incf	sprintf@sp+1,f,c
  8640                           
  8641                           ;doprnt.c: 542: continue;
  8642  000D72  D0B3               	goto	u7180
  8643  000D74                     l1270:
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;doprnt.c: 543: }
  8647                           ;doprnt.c: 548: flag = 0;
  8648                           
  8649                           ; BSR set to: 0
  8650  000D74  0E00               	movlw	0
  8651  000D76  6F60               	movwf	sprintf@flag& (0+255),b
  8652                           
  8653                           ;doprnt.c: 635: switch(c = *f++) {
  8654  000D78  D02E               	goto	l1271
  8655  000D7A                     
  8656                           ; BSR set to: 0
  8657                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8658                           
  8659                           ; BSR set to: 0
  8660  000D7A  C062  FFD9         	movff	sprintf@ap,fsr2l
  8661  000D7E  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8662  000D82  CFDE F064          	movff	postinc2,sprintf@cp
  8663  000D86  CFDD F065          	movff	postdec2,sprintf@cp+1
  8664                           
  8665                           ; BSR set to: 0
  8666  000D8A  0E02               	movlw	2
  8667  000D8C  2762               	addwf	sprintf@ap& (0+255),f,b
  8668  000D8E  0E00               	movlw	0
  8669  000D90  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;doprnt.c: 740: if(!cp)
  8673  000D92  5164               	movf	sprintf@cp& (0+255),w,b
  8674  000D94  1165               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8675  000D96  A4D8               	btfss	status,2,c
  8676  000D98  D014               	goto	l1279
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;doprnt.c: 741: cp = "(null)";
  8680  000D9A  0EEC               	movlw	low STR_40
  8681  000D9C  6F64               	movwf	sprintf@cp& (0+255),b
  8682  000D9E  0E7F               	movlw	high STR_40
  8683  000DA0  6F65               	movwf	(sprintf@cp+1)& (0+255),b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;doprnt.c: 777: while(*cp)
  8687  000DA2  D00F               	goto	l1279
  8688  000DA4                     
  8689                           ; BSR set to: 0
  8690                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  8691                           
  8692                           ; BSR set to: 0
  8693  000DA4  C064  FFF6         	movff	sprintf@cp,tblptrl
  8694  000DA8  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8695  000DAC                     	if	0	;tblptru may be non-zero
  8696  000DAC                     	endif
  8697  000DAC                     	if	0	;tblptru may be non-zero
  8698  000DAC                     	endif
  8699  000DAC  C024  FFD9         	movff	sprintf@sp,fsr2l
  8700  000DB0  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8701  000DB4  0008               	tblrd		*
  8702  000DB6  CFF5 FFDF          	movff	tablat,indf2
  8703                           
  8704                           ; BSR set to: 0
  8705  000DBA  4B64               	infsnz	sprintf@cp& (0+255),f,b
  8706  000DBC  2B65               	incf	(sprintf@cp+1)& (0+255),f,b
  8707                           
  8708                           ; BSR set to: 0
  8709  000DBE  4A24               	infsnz	sprintf@sp,f,c
  8710  000DC0  2A25               	incf	sprintf@sp+1,f,c
  8711  000DC2                     l1279:
  8712                           
  8713                           ; BSR set to: 0
  8714                           
  8715                           ; BSR set to: 0
  8716  000DC2  C064  FFF6         	movff	sprintf@cp,tblptrl
  8717  000DC6  C065  FFF7         	movff	sprintf@cp+1,tblptrh
  8718  000DCA                     	if	0	;tblptru may be non-zero
  8719  000DCA                     	endif
  8720  000DCA                     	if	0	;tblptru may be non-zero
  8721  000DCA                     	endif
  8722  000DCA  0008               	tblrd		*
  8723  000DCC  50F5               	movf	tablat,w,c
  8724  000DCE  0900               	iorlw	0
  8725  000DD0  B4D8               	btfsc	status,2,c
  8726  000DD2  D083               	goto	u7180
  8727  000DD4  D7E7               	goto	l1280
  8728  000DD6                     l1271:
  8729                           
  8730                           ; BSR set to: 0
  8731                           
  8732                           ; BSR set to: 0
  8733  000DD6  C026  FFF6         	movff	sprintf@f,tblptrl
  8734  000DDA  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8735  000DDE  4A26               	infsnz	sprintf@f,f,c
  8736  000DE0  2A27               	incf	sprintf@f+1,f,c
  8737  000DE2                     	if	0	;tblptru may be non-zero
  8738  000DE2                     	endif
  8739  000DE2                     	if	0	;tblptru may be non-zero
  8740  000DE2                     	endif
  8741  000DE2  0008               	tblrd		*
  8742  000DE4  CFF5 F068          	movff	tablat,sprintf@c
  8743  000DE8  5168               	movf	sprintf@c& (0+255),w,b
  8744                           
  8745                           ; Switch size 1, requested type "space"
  8746                           ; Number of cases is 4, Range of values is 0 to 115
  8747                           ; switch strategies available:
  8748                           ; Name         Instructions Cycles
  8749                           ; simple_byte           13     7 (average)
  8750                           ;	Chosen strategy is simple_byte
  8751  000DEA  0A00               	xorlw	0	; case 0
  8752  000DEC  B4D8               	btfsc	status,2,c
  8753  000DEE  D081               	goto	u7190
  8754  000DF0  0A64               	xorlw	100	; case 100
  8755  000DF2  B4D8               	btfsc	status,2,c
  8756  000DF4  D007               	goto	l1276
  8757  000DF6  0A0D               	xorlw	13	; case 105
  8758  000DF8  B4D8               	btfsc	status,2,c
  8759  000DFA  D004               	goto	l1276
  8760  000DFC  0A1A               	xorlw	26	; case 115
  8761  000DFE  B4D8               	btfsc	status,2,c
  8762  000E00  D7BC               	goto	l1277
  8763  000E02  D06B               	goto	u7180
  8764  000E04                     l1276:
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;doprnt.c: 1253: {
  8768                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8769                           
  8770                           ; BSR set to: 0
  8771  000E04  C062  FFD9         	movff	sprintf@ap,fsr2l
  8772  000E08  C063  FFDA         	movff	sprintf@ap+1,fsr2h
  8773  000E0C  CFDE F066          	movff	postinc2,sprintf@val
  8774  000E10  CFDD F067          	movff	postdec2,sprintf@val+1
  8775                           
  8776                           ; BSR set to: 0
  8777  000E14  0E02               	movlw	2
  8778  000E16  2762               	addwf	sprintf@ap& (0+255),f,b
  8779  000E18  0E00               	movlw	0
  8780  000E1A  2363               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;doprnt.c: 1261: if((int)val < 0) {
  8784  000E1C  AF67               	btfss	(sprintf@val+1)& (0+255),7,b
  8785  000E1E  D006               	goto	l1283
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;doprnt.c: 1262: flag |= 0x03;
  8789  000E20  0E03               	movlw	3
  8790  000E22  1360               	iorwf	sprintf@flag& (0+255),f,b
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;doprnt.c: 1263: val = -val;
  8794  000E24  6D66               	negf	sprintf@val& (0+255),b
  8795  000E26  1F67               	comf	(sprintf@val+1)& (0+255),f,b
  8796  000E28  B0D8               	btfsc	status,0,c
  8797  000E2A  2B67               	incf	(sprintf@val+1)& (0+255),f,b
  8798  000E2C                     l1283:
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;doprnt.c: 1264: }
  8802                           ;doprnt.c: 1266: }
  8803                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8804                           
  8805                           ; BSR set to: 0
  8806  000E2C  0E01               	movlw	1
  8807  000E2E  6F68               	movwf	sprintf@c& (0+255),b
  8808  000E30                     l6773:
  8809                           
  8810                           ; BSR set to: 0
  8811  000E30  0E05               	movlw	5
  8812  000E32  1968               	xorwf	sprintf@c& (0+255),w,b
  8813  000E34  B4D8               	btfsc	status,2,c
  8814  000E36  D012               	goto	u7160
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;doprnt.c: 1306: if(val < dpowers[c])
  8818                           
  8819                           ; BSR set to: 0
  8820                           
  8821                           ; BSR set to: 0
  8822  000E38  5168               	movf	sprintf@c& (0+255),w,b
  8823  000E3A  0D02               	mullw	2
  8824  000E3C  0EB5               	movlw	low _dpowers
  8825  000E3E  24F3               	addwf	prodl,w,c
  8826  000E40  6EF6               	movwf	tblptrl,c
  8827  000E42  0E7A               	movlw	high _dpowers
  8828  000E44  20F4               	addwfc	prodh,w,c
  8829  000E46  6EF7               	movwf	tblptrh,c
  8830  000E48                     	if	0	;There are less than 3 active tblptr bytes
  8831  000E48                     	endif
  8832  000E48  0009               	tblrd		*+
  8833  000E4A  50F5               	movf	tablat,w,c
  8834  000E4C  5D66               	subwf	sprintf@val& (0+255),w,b
  8835  000E4E  0009               	tblrd		*+
  8836  000E50  50F5               	movf	tablat,w,c
  8837  000E52  5967               	subwfb	(sprintf@val+1)& (0+255),w,b
  8838  000E54  A0D8               	btfss	status,0,c
  8839  000E56  D002               	goto	u7160
  8840                           
  8841                           ; BSR set to: 0
  8842                           
  8843                           ; BSR set to: 0
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;doprnt.c: 1307: break;
  8847  000E58  2B68               	incf	sprintf@c& (0+255),f,b
  8848  000E5A  D7EA               	goto	l6773
  8849  000E5C                     u7160:
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;doprnt.c: 1422: {
  8853                           ;doprnt.c: 1438: if(flag & 0x03)
  8854                           
  8855                           ; BSR set to: 0
  8856  000E5C  C060  F02A         	movff	sprintf@flag,??_sprintf
  8857  000E60  0E03               	movlw	3
  8858  000E62  162A               	andwf	??_sprintf,f,c
  8859  000E64  B4D8               	btfsc	status,2,c
  8860  000E66  D008               	goto	l1287
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8864  000E68  C024  FFD9         	movff	sprintf@sp,fsr2l
  8865  000E6C  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8866  000E70  0E2D               	movlw	45
  8867  000E72  6EDF               	movwf	indf2,c
  8868                           
  8869                           ; BSR set to: 0
  8870  000E74  4A24               	infsnz	sprintf@sp,f,c
  8871  000E76  2A25               	incf	sprintf@sp+1,f,c
  8872  000E78                     l1287:
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;doprnt.c: 1469: }
  8876                           ;doprnt.c: 1472: prec = c;
  8877                           
  8878                           ; BSR set to: 0
  8879  000E78  C068  F061         	movff	sprintf@c,sprintf@prec
  8880                           
  8881                           ;doprnt.c: 1474: while(prec--) {
  8882  000E7C  D02A               	goto	l1288
  8883  000E7E                     
  8884                           ; BSR set to: 0
  8885                           ;doprnt.c: 1478: {
  8886                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8887                           
  8888                           ; BSR set to: 0
  8889  000E7E  5161               	movf	sprintf@prec& (0+255),w,b
  8890  000E80  0D02               	mullw	2
  8891  000E82  0EB5               	movlw	low _dpowers
  8892  000E84  24F3               	addwf	prodl,w,c
  8893  000E86  6EF6               	movwf	tblptrl,c
  8894  000E88  0E7A               	movlw	high _dpowers
  8895  000E8A  20F4               	addwfc	prodh,w,c
  8896  000E8C  6EF7               	movwf	tblptrh,c
  8897  000E8E                     	if	0	;There are less than 3 active tblptr bytes
  8898  000E8E                     	endif
  8899  000E8E  0009               	tblrd		*+
  8900  000E90  CFF5 F01A          	movff	tablat,___lwdiv@divisor
  8901  000E94  000A               	tblrd		*-
  8902  000E96  CFF5 F01B          	movff	tablat,___lwdiv@divisor+1
  8903  000E9A  C066  F018         	movff	sprintf@val,___lwdiv@dividend
  8904  000E9E  C067  F019         	movff	sprintf@val+1,___lwdiv@dividend+1
  8905  000EA2  ECF9  F012         	call	___lwdiv	;wreg free
  8906  000EA6  C018  F01F         	movff	?___lwdiv,___lwmod@dividend
  8907  000EAA  C019  F020         	movff	?___lwdiv+1,___lwmod@dividend+1
  8908  000EAE  0E00               	movlw	0
  8909  000EB0  6E22               	movwf	___lwmod@divisor+1,c
  8910  000EB2  0E0A               	movlw	10
  8911  000EB4  6E21               	movwf	___lwmod@divisor,c
  8912  000EB6  EC21  F014         	call	___lwmod	;wreg free
  8913  000EBA  501F               	movf	?___lwmod,w,c
  8914  000EBC  0F30               	addlw	48
  8915  000EBE  0100               	movlb	0	; () banked
  8916  000EC0  6F68               	movwf	sprintf@c& (0+255),b
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;doprnt.c: 1523: }
  8920                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8921  000EC2  C024  FFD9         	movff	sprintf@sp,fsr2l
  8922  000EC6  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8923  000ECA  C068  FFDF         	movff	sprintf@c,indf2
  8924                           
  8925                           ; BSR set to: 0
  8926  000ECE  4A24               	infsnz	sprintf@sp,f,c
  8927  000ED0  2A25               	incf	sprintf@sp+1,f,c
  8928  000ED2                     l1288:
  8929                           
  8930                           ; BSR set to: 0
  8931                           
  8932                           ; BSR set to: 0
  8933  000ED2  0761               	decf	sprintf@prec& (0+255),f,b
  8934  000ED4  2961               	incf	sprintf@prec& (0+255),w,b
  8935  000ED6  A4D8               	btfss	status,2,c
  8936  000ED8  D7D2               	goto	l1289
  8937  000EDA                     u7180:
  8938                           
  8939                           ; BSR set to: 0
  8940                           
  8941                           ; BSR set to: 0
  8942                           
  8943                           ; BSR set to: 0
  8944  000EDA  C026  FFF6         	movff	sprintf@f,tblptrl
  8945  000EDE  C027  FFF7         	movff	sprintf@f+1,tblptrh
  8946  000EE2  4A26               	infsnz	sprintf@f,f,c
  8947  000EE4  2A27               	incf	sprintf@f+1,f,c
  8948  000EE6                     	if	0	;tblptru may be non-zero
  8949  000EE6                     	endif
  8950  000EE6                     	if	0	;tblptru may be non-zero
  8951  000EE6                     	endif
  8952  000EE6  0008               	tblrd		*
  8953  000EE8  CFF5 F068          	movff	tablat,sprintf@c
  8954  000EEC  5168               	movf	sprintf@c& (0+255),w,b
  8955  000EEE  A4D8               	btfss	status,2,c
  8956  000EF0  D734               	goto	l1269
  8957  000EF2                     u7190:
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;doprnt.c: 1538: *sp = 0;
  8961                           
  8962                           ; BSR set to: 0
  8963                           
  8964                           ;doprnt.c: 1525: }
  8965                           ;doprnt.c: 1533: }
  8966                           ;doprnt.c: 1535: alldone:
  8967                           
  8968                           ; BSR set to: 0
  8969  000EF2  C024  FFD9         	movff	sprintf@sp,fsr2l
  8970  000EF6  C025  FFDA         	movff	sprintf@sp+1,fsr2h
  8971  000EFA  0E00               	movlw	0
  8972  000EFC  6EDF               	movwf	indf2,c
  8973  000EFE  0012               	return	
  8974  000F00                     __end_of_sprintf:
  8975                           	opt stack 0
  8976                           tosu	equ	0xFFF
  8977                           tosh	equ	0xFFE
  8978                           tosl	equ	0xFFD
  8979                           pclath	equ	0xFFA
  8980                           tblptru	equ	0xFF8
  8981                           tblptrh	equ	0xFF7
  8982                           tblptrl	equ	0xFF6
  8983                           tablat	equ	0xFF5
  8984                           prodh	equ	0xFF4
  8985                           prodl	equ	0xFF3
  8986                           intcon	equ	0xFF2
  8987                           intcon2	equ	0xFF1
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           indf1	equ	0xFE7
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function ___lwmod *****************
  9002 ;; Defined at:
  9003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  dividend        2   30[COMRAM] unsigned int 
  9006 ;;  divisor         2   32[COMRAM] unsigned int 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;  counter         1   34[COMRAM] unsigned char 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  2   30[COMRAM] unsigned int 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9018 ;;      Params:         4       0       0       0       0       0       0
  9019 ;;      Locals:         1       0       0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0
  9021 ;;      Totals:         5       0       0       0       0       0       0
  9022 ;;Total ram usage:        5 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    3
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_sprintf
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text38
  9033  002842                     __ptext38:
  9034                           	opt stack 0
  9035  002842                     ___lwmod:
  9036                           	opt stack 25
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;incstack = 0
  9040  002842  5021               	movf	___lwmod@divisor,w,c
  9041  002844  1022               	iorwf	___lwmod@divisor+1,w,c
  9042  002846  B4D8               	btfsc	status,2,c
  9043  002848  D018               	goto	l1715
  9044  00284A  0E01               	movlw	1
  9045  00284C  6E23               	movwf	___lwmod@counter,c
  9046  00284E  D004               	goto	l1710
  9047  002850  90D8               	bcf	status,0,c
  9048  002852  3621               	rlcf	___lwmod@divisor,f,c
  9049  002854  3622               	rlcf	___lwmod@divisor+1,f,c
  9050  002856  2A23               	incf	___lwmod@counter,f,c
  9051  002858                     l1710:
  9052  002858  AE22               	btfss	___lwmod@divisor+1,7,c
  9053  00285A  D7FA               	goto	l1711
  9054  00285C                     u7000:
  9055  00285C  5021               	movf	___lwmod@divisor,w,c
  9056  00285E  5C1F               	subwf	___lwmod@dividend,w,c
  9057  002860  5022               	movf	___lwmod@divisor+1,w,c
  9058  002862  5820               	subwfb	___lwmod@dividend+1,w,c
  9059  002864  A0D8               	btfss	status,0,c
  9060  002866  D004               	goto	l1714
  9061  002868  5021               	movf	___lwmod@divisor,w,c
  9062  00286A  5E1F               	subwf	___lwmod@dividend,f,c
  9063  00286C  5022               	movf	___lwmod@divisor+1,w,c
  9064  00286E  5A20               	subwfb	___lwmod@dividend+1,f,c
  9065  002870                     l1714:
  9066  002870  90D8               	bcf	status,0,c
  9067  002872  3222               	rrcf	___lwmod@divisor+1,f,c
  9068  002874  3221               	rrcf	___lwmod@divisor,f,c
  9069  002876  2E23               	decfsz	___lwmod@counter,f,c
  9070  002878  D7F1               	goto	u7000
  9071  00287A                     l1715:
  9072  00287A  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  9073  00287E  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  9074  002882  0012               	return		;funcret
  9075  002884                     __end_of___lwmod:
  9076                           	opt stack 0
  9077                           tosu	equ	0xFFF
  9078                           tosh	equ	0xFFE
  9079                           tosl	equ	0xFFD
  9080                           pclath	equ	0xFFA
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           indf1	equ	0xFE7
  9092                           postdec1	equ	0xFE5
  9093                           fsr1h	equ	0xFE2
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function ___lwdiv *****************
  9103 ;; Defined at:
  9104 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  dividend        2   23[COMRAM] unsigned int 
  9107 ;;  divisor         2   25[COMRAM] unsigned int 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  quotient        2   28[COMRAM] unsigned int 
  9110 ;;  counter         1   27[COMRAM] unsigned char 
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  2   23[COMRAM] unsigned int 
  9113 ;; Registers used:
  9114 ;;		wreg, status,2, status,0
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9120 ;;      Params:         4       0       0       0       0       0       0
  9121 ;;      Locals:         3       0       0       0       0       0       0
  9122 ;;      Temps:          0       0       0       0       0       0       0
  9123 ;;      Totals:         7       0       0       0       0       0       0
  9124 ;;Total ram usage:        7 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    3
  9127 ;; This function calls:
  9128 ;;		Nothing
  9129 ;; This function is called by:
  9130 ;;		_sprintf
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text39
  9135  0025F2                     __ptext39:
  9136                           	opt stack 0
  9137  0025F2                     ___lwdiv:
  9138                           	opt stack 25
  9139                           
  9140                           ;incstack = 0
  9141  0025F2  0E00               	movlw	0
  9142  0025F4  6E1E               	movwf	___lwdiv@quotient+1,c
  9143  0025F6  0E00               	movlw	0
  9144  0025F8  6E1D               	movwf	___lwdiv@quotient,c
  9145  0025FA  501A               	movf	___lwdiv@divisor,w,c
  9146  0025FC  101B               	iorwf	___lwdiv@divisor+1,w,c
  9147  0025FE  B4D8               	btfsc	status,2,c
  9148  002600  D01C               	goto	l1705
  9149  002602  0E01               	movlw	1
  9150  002604  6E1C               	movwf	___lwdiv@counter,c
  9151  002606  D004               	goto	l1700
  9152  002608  90D8               	bcf	status,0,c
  9153  00260A  361A               	rlcf	___lwdiv@divisor,f,c
  9154  00260C  361B               	rlcf	___lwdiv@divisor+1,f,c
  9155  00260E  2A1C               	incf	___lwdiv@counter,f,c
  9156  002610                     l1700:
  9157  002610  AE1B               	btfss	___lwdiv@divisor+1,7,c
  9158  002612  D7FA               	goto	l1701
  9159  002614                     u6970:
  9160  002614  90D8               	bcf	status,0,c
  9161  002616  361D               	rlcf	___lwdiv@quotient,f,c
  9162  002618  361E               	rlcf	___lwdiv@quotient+1,f,c
  9163  00261A  501A               	movf	___lwdiv@divisor,w,c
  9164  00261C  5C18               	subwf	___lwdiv@dividend,w,c
  9165  00261E  501B               	movf	___lwdiv@divisor+1,w,c
  9166  002620  5819               	subwfb	___lwdiv@dividend+1,w,c
  9167  002622  A0D8               	btfss	status,0,c
  9168  002624  D005               	goto	l1704
  9169  002626  501A               	movf	___lwdiv@divisor,w,c
  9170  002628  5E18               	subwf	___lwdiv@dividend,f,c
  9171  00262A  501B               	movf	___lwdiv@divisor+1,w,c
  9172  00262C  5A19               	subwfb	___lwdiv@dividend+1,f,c
  9173  00262E  801D               	bsf	___lwdiv@quotient,0,c
  9174  002630                     l1704:
  9175  002630  90D8               	bcf	status,0,c
  9176  002632  321B               	rrcf	___lwdiv@divisor+1,f,c
  9177  002634  321A               	rrcf	___lwdiv@divisor,f,c
  9178  002636  2E1C               	decfsz	___lwdiv@counter,f,c
  9179  002638  D7ED               	goto	u6970
  9180  00263A                     l1705:
  9181  00263A  C01D  F018         	movff	___lwdiv@quotient,?___lwdiv
  9182  00263E  C01E  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9183  002642  0012               	return		;funcret
  9184  002644                     __end_of___lwdiv:
  9185                           	opt stack 0
  9186                           tosu	equ	0xFFF
  9187                           tosh	equ	0xFFE
  9188                           tosl	equ	0xFFD
  9189                           pclath	equ	0xFFA
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           intcon	equ	0xFF2
  9197                           intcon2	equ	0xFF1
  9198                           postinc0	equ	0xFEE
  9199                           wreg	equ	0xFE8
  9200                           indf1	equ	0xFE7
  9201                           postdec1	equ	0xFE5
  9202                           fsr1h	equ	0xFE2
  9203                           fsr1l	equ	0xFE1
  9204                           indf2	equ	0xFDF
  9205                           postinc2	equ	0xFDE
  9206                           postdec2	equ	0xFDD
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function _pow *****************
  9212 ;; Defined at:
  9213 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  x               3   85[BANK0 ] unsigned int 
  9216 ;;  y               3   88[BANK0 ] unsigned int 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  yi              4   98[BANK0 ] unsigned long 
  9219 ;;  sign            1   97[BANK0 ] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  3   85[BANK0 ] unsigned char 
  9222 ;; Registers used:
  9223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9229 ;;      Params:         0       6       0       0       0       0       0
  9230 ;;      Locals:         0      11       0       0       0       0       0
  9231 ;;      Temps:          0       0       0       0       0       0       0
  9232 ;;      Totals:         0      17       0       0       0       0       0
  9233 ;;Total ram usage:       17 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    7
  9236 ;; This function calls:
  9237 ;;		___ftge
  9238 ;;		___ftmul
  9239 ;;		___ftneg
  9240 ;;		___fttol
  9241 ;;		___lltoft
  9242 ;;		_exp
  9243 ;;		_log
  9244 ;; This function is called by:
  9245 ;;		_SampleSingleChannel
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text40
  9250  0010AE                     __ptext40:
  9251                           	opt stack 0
  9252  0010AE                     _pow:
  9253                           	opt stack 22
  9254                           
  9255                           ;incstack = 0
  9256  0010AE  0E00               	movlw	0
  9257  0010B0  0100               	movlb	0	; () banked
  9258  0010B2  6FC1               	movwf	pow@sign& (0+255),b
  9259                           
  9260                           ; BSR set to: 0
  9261  0010B4  51B5               	movf	pow@x& (0+255),w,b
  9262  0010B6  11B6               	iorwf	(pow@x+1)& (0+255),w,b
  9263  0010B8  11B7               	iorwf	(pow@x+2)& (0+255),w,b
  9264  0010BA  A4D8               	btfss	status,2,c
  9265  0010BC  D01D               	goto	l1736
  9266                           
  9267                           ; BSR set to: 0
  9268  0010BE  0E00               	movlw	0
  9269  0010C0  6E18               	movwf	___ftge@ff1,c
  9270  0010C2  0E00               	movlw	0
  9271  0010C4  6E19               	movwf	___ftge@ff1+1,c
  9272  0010C6  0E00               	movlw	0
  9273  0010C8  6E1A               	movwf	___ftge@ff1+2,c
  9274  0010CA  C0B8  F01B         	movff	pow@y,___ftge@ff2
  9275  0010CE  C0B9  F01C         	movff	pow@y+1,___ftge@ff2+1
  9276  0010D2  C0BA  F01D         	movff	pow@y+2,___ftge@ff2+2
  9277  0010D6  ECD3  F00F         	call	___ftge	;wreg free
  9278  0010DA  A0D8               	btfss	status,0,c
  9279  0010DC  D005               	goto	l1737
  9280  0010DE  0E00               	movlw	0
  9281  0010E0  0101               	movlb	1	; () banked
  9282  0010E2  6F4D               	movwf	(_errno+1)& (0+255),b
  9283  0010E4  0E21               	movlw	33
  9284  0010E6  6F4C               	movwf	_errno& (0+255),b
  9285  0010E8                     l1737:
  9286  0010E8  0E00               	movlw	0
  9287  0010EA  0100               	movlb	0	; () banked
  9288  0010EC  6FB5               	movwf	?_pow& (0+255),b
  9289  0010EE  0E00               	movlw	0
  9290  0010F0  6FB6               	movwf	(?_pow+1)& (0+255),b
  9291  0010F2  0E00               	movlw	0
  9292  0010F4  6FB7               	movwf	(?_pow+2)& (0+255),b
  9293                           
  9294                           ; BSR set to: 0
  9295  0010F6  0012               	return	
  9296  0010F8                     l1736:
  9297                           
  9298                           ; BSR set to: 0
  9299                           
  9300                           ; BSR set to: 0
  9301  0010F8  51B8               	movf	pow@y& (0+255),w,b
  9302  0010FA  11B9               	iorwf	(pow@y+1)& (0+255),w,b
  9303  0010FC  11BA               	iorwf	(pow@y+2)& (0+255),w,b
  9304  0010FE  A4D8               	btfss	status,2,c
  9305  001100  D007               	goto	l1739
  9306                           
  9307                           ; BSR set to: 0
  9308  001102  0E00               	movlw	0
  9309  001104  6FB5               	movwf	?_pow& (0+255),b
  9310  001106  0E80               	movlw	128
  9311  001108  6FB6               	movwf	(?_pow+1)& (0+255),b
  9312  00110A  0E3F               	movlw	63
  9313  00110C  6FB7               	movwf	(?_pow+2)& (0+255),b
  9314                           
  9315                           ; BSR set to: 0
  9316  00110E  0012               	return	
  9317  001110                     l1739:
  9318                           
  9319                           ; BSR set to: 0
  9320                           
  9321                           ; BSR set to: 0
  9322  001110  AFB7               	btfss	(pow@x+2)& (0+255),7,b
  9323  001112  D043               	goto	l1740
  9324                           
  9325                           ; BSR set to: 0
  9326  001114  C0B8  F078         	movff	pow@y,___fttol@f1
  9327  001118  C0B9  F079         	movff	pow@y+1,___fttol@f1+1
  9328  00111C  C0BA  F07A         	movff	pow@y+2,___fttol@f1+2
  9329  001120  ECD9  F00A         	call	___fttol	;wreg free
  9330  001124  C078  F0C2         	movff	?___fttol,pow@yi
  9331  001128  C079  F0C3         	movff	?___fttol+1,pow@yi+1
  9332  00112C  C07A  F0C4         	movff	?___fttol+2,pow@yi+2
  9333  001130  C07B  F0C5         	movff	?___fttol+3,pow@yi+3
  9334  001134  C0C2  F020         	movff	pow@yi,___lltoft@c
  9335  001138  C0C3  F021         	movff	pow@yi+1,___lltoft@c+1
  9336  00113C  C0C4  F022         	movff	pow@yi+2,___lltoft@c+2
  9337  001140  C0C5  F023         	movff	pow@yi+3,___lltoft@c+3
  9338  001144  EC98  F011         	call	___lltoft	;wreg free
  9339  001148  0100               	movlb	0	; () banked
  9340  00114A  51B8               	movf	pow@y& (0+255),w,b
  9341  00114C  1820               	xorwf	?___lltoft,w,c
  9342  00114E  E107               	bnz	u7650
  9343  001150  51B9               	movf	(pow@y+1)& (0+255),w,b
  9344  001152  1821               	xorwf	?___lltoft+1,w,c
  9345  001154  E104               	bnz	u7650
  9346  001156  51BA               	movf	(pow@y+2)& (0+255),w,b
  9347  001158  1822               	xorwf	?___lltoft+2,w,c
  9348  00115A  B4D8               	btfsc	status,2,c
  9349  00115C  D00D               	goto	l1741
  9350  00115E                     u7650:
  9351                           
  9352                           ; BSR set to: 0
  9353  00115E  0E00               	movlw	0
  9354  001160  0101               	movlb	1	; () banked
  9355  001162  6F4D               	movwf	(_errno+1)& (0+255),b
  9356  001164  0E21               	movlw	33
  9357  001166  6F4C               	movwf	_errno& (0+255),b
  9358  001168  0E00               	movlw	0
  9359  00116A  0100               	movlb	0	; () banked
  9360  00116C  6FB5               	movwf	?_pow& (0+255),b
  9361  00116E  0E00               	movlw	0
  9362  001170  6FB6               	movwf	(?_pow+1)& (0+255),b
  9363  001172  0E00               	movlw	0
  9364  001174  6FB7               	movwf	(?_pow+2)& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367  001176  0012               	return	
  9368  001178                     l1741:
  9369                           
  9370                           ; BSR set to: 0
  9371                           
  9372                           ; BSR set to: 0
  9373  001178  51C2               	movf	pow@yi& (0+255),w,b
  9374  00117A  0B01               	andlw	1
  9375  00117C  6FC1               	movwf	pow@sign& (0+255),b
  9376                           
  9377                           ; BSR set to: 0
  9378  00117E  C0B5  F08A         	movff	pow@x,___ftneg@f1
  9379  001182  C0B6  F08B         	movff	pow@x+1,___ftneg@f1+1
  9380  001186  C0B7  F08C         	movff	pow@x+2,___ftneg@f1+2
  9381  00118A  ECAF  F015         	call	___ftneg	;wreg free
  9382  00118E  C08A  F0B5         	movff	?___ftneg,pow@x
  9383  001192  C08B  F0B6         	movff	?___ftneg+1,pow@x+1
  9384  001196  C08C  F0B7         	movff	?___ftneg+2,pow@x+2
  9385  00119A                     l1740:
  9386  00119A  C0B5  F0A5         	movff	pow@x,log@x
  9387  00119E  C0B6  F0A6         	movff	pow@x+1,log@x+1
  9388  0011A2  C0B7  F0A7         	movff	pow@x+2,log@x+2
  9389  0011A6  ECB8  F009         	call	_log	;wreg free
  9390  0011AA  C0A5  F0BB         	movff	?_log,_pow$2944
  9391  0011AE  C0A6  F0BC         	movff	?_log+1,_pow$2944+1
  9392  0011B2  C0A7  F0BD         	movff	?_log+2,_pow$2944+2
  9393  0011B6  C0BB  F069         	movff	_pow$2944,___ftmul@f1
  9394  0011BA  C0BC  F06A         	movff	_pow$2944+1,___ftmul@f1+1
  9395  0011BE  C0BD  F06B         	movff	_pow$2944+2,___ftmul@f1+2
  9396  0011C2  C0B8  F06C         	movff	pow@y,___ftmul@f2
  9397  0011C6  C0B9  F06D         	movff	pow@y+1,___ftmul@f2+1
  9398  0011CA  C0BA  F06E         	movff	pow@y+2,___ftmul@f2+2
  9399  0011CE  EC55  F00B         	call	___ftmul	;wreg free
  9400  0011D2  C069  F0BE         	movff	?___ftmul,_pow$2945
  9401  0011D6  C06A  F0BF         	movff	?___ftmul+1,_pow$2945+1
  9402  0011DA  C06B  F0C0         	movff	?___ftmul+2,_pow$2945+2
  9403  0011DE  C0BE  F0AC         	movff	_pow$2945,exp@x
  9404  0011E2  C0BF  F0AD         	movff	_pow$2945+1,exp@x+1
  9405  0011E6  C0C0  F0AE         	movff	_pow$2945+2,exp@x+2
  9406  0011EA  ECC1  F004         	call	_exp	;wreg free
  9407  0011EE  C0AC  F0B5         	movff	?_exp,pow@x
  9408  0011F2  C0AD  F0B6         	movff	?_exp+1,pow@x+1
  9409  0011F6  C0AE  F0B7         	movff	?_exp+2,pow@x+2
  9410  0011FA  0100               	movlb	0	; () banked
  9411  0011FC  51C1               	movf	pow@sign& (0+255),w,b
  9412  0011FE  B4D8               	btfsc	status,2,c
  9413  001200  D00F               	goto	l1742
  9414                           
  9415                           ; BSR set to: 0
  9416  001202  C0B5  F08A         	movff	pow@x,___ftneg@f1
  9417  001206  C0B6  F08B         	movff	pow@x+1,___ftneg@f1+1
  9418  00120A  C0B7  F08C         	movff	pow@x+2,___ftneg@f1+2
  9419  00120E  ECAF  F015         	call	___ftneg	;wreg free
  9420  001212  C08A  F0B5         	movff	?___ftneg,?_pow
  9421  001216  C08B  F0B6         	movff	?___ftneg+1,?_pow+1
  9422  00121A  C08C  F0B7         	movff	?___ftneg+2,?_pow+2
  9423  00121E  0012               	return	
  9424  001220                     l1742:
  9425                           
  9426                           ; BSR set to: 0
  9427  001220  C0B5  F0B5         	movff	pow@x,?_pow
  9428  001224  C0B6  F0B6         	movff	pow@x+1,?_pow+1
  9429  001228  C0B7  F0B7         	movff	pow@x+2,?_pow+2
  9430  00122C  0012               	return		;funcret
  9431  00122E                     __end_of_pow:
  9432                           	opt stack 0
  9433                           tosu	equ	0xFFF
  9434                           tosh	equ	0xFFE
  9435                           tosl	equ	0xFFD
  9436                           pclath	equ	0xFFA
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           intcon	equ	0xFF2
  9444                           intcon2	equ	0xFF1
  9445                           postinc0	equ	0xFEE
  9446                           wreg	equ	0xFE8
  9447                           indf1	equ	0xFE7
  9448                           postdec1	equ	0xFE5
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function _log *****************
  9459 ;; Defined at:
  9460 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  x               3   69[BANK0 ] unsigned char 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  exponent        2   72[BANK0 ] int 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  3   69[BANK0 ] int 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9474 ;;      Params:         0       3       0       0       0       0       0
  9475 ;;      Locals:         0       2       0       0       0       0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0
  9477 ;;      Totals:         0       5       0       0       0       0       0
  9478 ;;Total ram usage:        5 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    6
  9481 ;; This function calls:
  9482 ;;		___awtoft
  9483 ;;		___ftadd
  9484 ;;		___ftmul
  9485 ;;		_eval_poly
  9486 ;;		_frexp
  9487 ;; This function is called by:
  9488 ;;		_pow
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text41
  9493  001370                     __ptext41:
  9494                           	opt stack 0
  9495  001370                     _log:
  9496                           	opt stack 22
  9497                           
  9498                           ;incstack = 0
  9499  001370  0100               	movlb	0	; () banked
  9500  001372  AFA7               	btfss	(log@x+2)& (0+255),7,b
  9501  001374  D00D               	goto	l1998
  9502                           
  9503                           ; BSR set to: 0
  9504  001376  0E00               	movlw	0
  9505  001378  0101               	movlb	1	; () banked
  9506  00137A  6F4D               	movwf	(_errno+1)& (0+255),b
  9507  00137C  0E21               	movlw	33
  9508  00137E  6F4C               	movwf	_errno& (0+255),b
  9509  001380  0E00               	movlw	0
  9510  001382  0100               	movlb	0	; () banked
  9511  001384  6FA5               	movwf	?_log& (0+255),b
  9512  001386  0E00               	movlw	0
  9513  001388  6FA6               	movwf	(?_log+1)& (0+255),b
  9514  00138A  0E00               	movlw	0
  9515  00138C  6FA7               	movwf	(?_log+2)& (0+255),b
  9516                           
  9517                           ; BSR set to: 0
  9518  00138E  0012               	return	
  9519  001390                     l1998:
  9520                           
  9521                           ; BSR set to: 0
  9522                           
  9523                           ; BSR set to: 0
  9524  001390  51A5               	movf	log@x& (0+255),w,b
  9525  001392  11A6               	iorwf	(log@x+1)& (0+255),w,b
  9526  001394  11A7               	iorwf	(log@x+2)& (0+255),w,b
  9527  001396  A4D8               	btfss	status,2,c
  9528  001398  D00D               	goto	l2000
  9529                           
  9530                           ; BSR set to: 0
  9531  00139A  0E00               	movlw	0
  9532  00139C  0101               	movlb	1	; () banked
  9533  00139E  6F4D               	movwf	(_errno+1)& (0+255),b
  9534  0013A0  0E22               	movlw	34
  9535  0013A2  6F4C               	movwf	_errno& (0+255),b
  9536  0013A4  0E00               	movlw	0
  9537  0013A6  0100               	movlb	0	; () banked
  9538  0013A8  6FA5               	movwf	?_log& (0+255),b
  9539  0013AA  0E00               	movlw	0
  9540  0013AC  6FA6               	movwf	(?_log+1)& (0+255),b
  9541  0013AE  0E00               	movlw	0
  9542  0013B0  6FA7               	movwf	(?_log+2)& (0+255),b
  9543                           
  9544                           ; BSR set to: 0
  9545  0013B2  0012               	return	
  9546  0013B4                     l2000:
  9547                           
  9548                           ; BSR set to: 0
  9549                           
  9550                           ; BSR set to: 0
  9551  0013B4  0E00               	movlw	0
  9552  0013B6  6F6C               	movwf	___ftmul@f2& (0+255),b
  9553  0013B8  0E00               	movlw	0
  9554  0013BA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9555  0013BC  0E40               	movlw	64
  9556  0013BE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9557  0013C0  0EA8               	movlw	low log@exponent
  9558  0013C2  6E1B               	movwf	frexp@eptr,c
  9559  0013C4  0E00               	movlw	high log@exponent
  9560  0013C6  6E1C               	movwf	frexp@eptr+1,c
  9561  0013C8  C0A5  F018         	movff	log@x,frexp@value
  9562  0013CC  C0A6  F019         	movff	log@x+1,frexp@value+1
  9563  0013D0  C0A7  F01A         	movff	log@x+2,frexp@value+2
  9564  0013D4  EC8B  F00F         	call	_frexp	;wreg free
  9565  0013D8  C018  F069         	movff	?_frexp,___ftmul@f1
  9566  0013DC  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
  9567  0013E0  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
  9568  0013E4  EC55  F00B         	call	___ftmul	;wreg free
  9569  0013E8  C069  F08D         	movff	?___ftmul,___ftadd@f1
  9570  0013EC  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  9571  0013F0  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  9572  0013F4  0E00               	movlw	0
  9573  0013F6  0100               	movlb	0	; () banked
  9574  0013F8  6F90               	movwf	___ftadd@f2& (0+255),b
  9575  0013FA  0E80               	movlw	128
  9576  0013FC  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  9577  0013FE  0EBF               	movlw	191
  9578  001400  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  9579  001402  EC80  F007         	call	___ftadd	;wreg free
  9580  001406  C08D  F0A5         	movff	?___ftadd,log@x
  9581  00140A  C08E  F0A6         	movff	?___ftadd+1,log@x+1
  9582  00140E  C08F  F0A7         	movff	?___ftadd+2,log@x+2
  9583  001412  0100               	movlb	0	; () banked
  9584  001414  07A8               	decf	log@exponent& (0+255),f,b
  9585  001416  A0D8               	btfss	status,0,c
  9586  001418  07A9               	decf	(log@exponent+1)& (0+255),f,b
  9587                           
  9588                           ; BSR set to: 0
  9589  00141A  C0A5  F099         	movff	log@x,eval_poly@x
  9590  00141E  C0A6  F09A         	movff	log@x+1,eval_poly@x+1
  9591  001422  C0A7  F09B         	movff	log@x+2,eval_poly@x+2
  9592  001426  0EE1               	movlw	low log@coeff
  9593  001428  6F9C               	movwf	eval_poly@d& (0+255),b
  9594  00142A  0E7A               	movlw	high log@coeff
  9595  00142C  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  9596  00142E  0E00               	movlw	0
  9597  001430  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  9598  001432  0E08               	movlw	8
  9599  001434  6F9E               	movwf	eval_poly@n& (0+255),b
  9600  001436  EC22  F00D         	call	_eval_poly	;wreg free
  9601  00143A  C099  F0A5         	movff	?_eval_poly,log@x
  9602  00143E  C09A  F0A6         	movff	?_eval_poly+1,log@x+1
  9603  001442  C09B  F0A7         	movff	?_eval_poly+2,log@x+2
  9604  001446  0E72               	movlw	114
  9605  001448  0100               	movlb	0	; () banked
  9606  00144A  6F6C               	movwf	___ftmul@f2& (0+255),b
  9607  00144C  0E31               	movlw	49
  9608  00144E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9609  001450  0E3F               	movlw	63
  9610  001452  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9611  001454  C0A8  F087         	movff	log@exponent,___awtoft@c
  9612  001458  C0A9  F088         	movff	log@exponent+1,___awtoft@c+1
  9613  00145C  ECC0  F014         	call	___awtoft	;wreg free
  9614  001460  C087  F069         	movff	?___awtoft,___ftmul@f1
  9615  001464  C088  F06A         	movff	?___awtoft+1,___ftmul@f1+1
  9616  001468  C089  F06B         	movff	?___awtoft+2,___ftmul@f1+2
  9617  00146C  EC55  F00B         	call	___ftmul	;wreg free
  9618  001470  C069  F08D         	movff	?___ftmul,___ftadd@f1
  9619  001474  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  9620  001478  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  9621  00147C  C0A5  F090         	movff	log@x,___ftadd@f2
  9622  001480  C0A6  F091         	movff	log@x+1,___ftadd@f2+1
  9623  001484  C0A7  F092         	movff	log@x+2,___ftadd@f2+2
  9624  001488  EC80  F007         	call	___ftadd	;wreg free
  9625  00148C  C08D  F0A5         	movff	?___ftadd,?_log
  9626  001490  C08E  F0A6         	movff	?___ftadd+1,?_log+1
  9627  001494  C08F  F0A7         	movff	?___ftadd+2,?_log+2
  9628  001498  0012               	return	
  9629  00149A                     __end_of_log:
  9630                           	opt stack 0
  9631                           tosu	equ	0xFFF
  9632                           tosh	equ	0xFFE
  9633                           tosl	equ	0xFFD
  9634                           pclath	equ	0xFFA
  9635                           tblptru	equ	0xFF8
  9636                           tblptrh	equ	0xFF7
  9637                           tblptrl	equ	0xFF6
  9638                           tablat	equ	0xFF5
  9639                           prodh	equ	0xFF4
  9640                           prodl	equ	0xFF3
  9641                           intcon	equ	0xFF2
  9642                           intcon2	equ	0xFF1
  9643                           postinc0	equ	0xFEE
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postdec1	equ	0xFE5
  9647                           fsr1h	equ	0xFE2
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _exp *****************
  9657 ;; Defined at:
  9658 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  x               3   76[BANK0 ] int 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  exponent        2   82[BANK0 ] int 
  9663 ;;  sign            1   84[BANK0 ] unsigned char 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  3   76[BANK0 ] unsigned char 
  9666 ;; Registers used:
  9667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9673 ;;      Params:         0       3       0       0       0       0       0
  9674 ;;      Locals:         0       6       0       0       0       0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0
  9676 ;;      Totals:         0       9       0       0       0       0       0
  9677 ;;Total ram usage:        9 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    6
  9680 ;; This function calls:
  9681 ;;		___awtoft
  9682 ;;		___ftdiv
  9683 ;;		___ftge
  9684 ;;		___ftmul
  9685 ;;		___ftneg
  9686 ;;		___ftsub
  9687 ;;		___fttol
  9688 ;;		_eval_poly
  9689 ;;		_floor
  9690 ;;		_ldexp
  9691 ;; This function is called by:
  9692 ;;		_pow
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           	psect	text42
  9697  000982                     __ptext42:
  9698                           	opt stack 0
  9699  000982                     _exp:
  9700                           	opt stack 22
  9701                           
  9702                           ;incstack = 0
  9703  000982  0100               	movlb	0	; () banked
  9704  000984  51AC               	movf	exp@x& (0+255),w,b
  9705  000986  11AD               	iorwf	(exp@x+1)& (0+255),w,b
  9706  000988  11AE               	iorwf	(exp@x+2)& (0+255),w,b
  9707  00098A  A4D8               	btfss	status,2,c
  9708  00098C  D007               	goto	l1934
  9709                           
  9710                           ; BSR set to: 0
  9711  00098E  0E00               	movlw	0
  9712  000990  6FAC               	movwf	?_exp& (0+255),b
  9713  000992  0E80               	movlw	128
  9714  000994  6FAD               	movwf	(?_exp+1)& (0+255),b
  9715  000996  0E3F               	movlw	63
  9716  000998  6FAE               	movwf	(?_exp+2)& (0+255),b
  9717                           
  9718                           ; BSR set to: 0
  9719  00099A  0012               	return	
  9720  00099C                     l1934:
  9721                           
  9722                           ; BSR set to: 0
  9723                           
  9724                           ; BSR set to: 0
  9725  00099C  0E72               	movlw	114
  9726  00099E  6E18               	movwf	___ftge@ff1,c
  9727  0009A0  0E31               	movlw	49
  9728  0009A2  6E19               	movwf	___ftge@ff1+1,c
  9729  0009A4  0E44               	movlw	68
  9730  0009A6  6E1A               	movwf	___ftge@ff1+2,c
  9731  0009A8  C0AC  F01B         	movff	exp@x,___ftge@ff2
  9732  0009AC  C0AD  F01C         	movff	exp@x+1,___ftge@ff2+1
  9733  0009B0  C0AE  F01D         	movff	exp@x+2,___ftge@ff2+2
  9734  0009B4  ECD3  F00F         	call	___ftge	;wreg free
  9735  0009B8  B0D8               	btfsc	status,0,c
  9736  0009BA  D00D               	goto	l1936
  9737  0009BC  0E00               	movlw	0
  9738  0009BE  0101               	movlb	1	; () banked
  9739  0009C0  6F4D               	movwf	(_errno+1)& (0+255),b
  9740  0009C2  0E22               	movlw	34
  9741  0009C4  6F4C               	movwf	_errno& (0+255),b
  9742  0009C6  0EFF               	movlw	255
  9743  0009C8  0100               	movlb	0	; () banked
  9744  0009CA  6FAC               	movwf	?_exp& (0+255),b
  9745  0009CC  0E7F               	movlw	127
  9746  0009CE  6FAD               	movwf	(?_exp+1)& (0+255),b
  9747  0009D0  0E7F               	movlw	127
  9748  0009D2  6FAE               	movwf	(?_exp+2)& (0+255),b
  9749                           
  9750                           ; BSR set to: 0
  9751  0009D4  0012               	return	
  9752  0009D6                     l1936:
  9753                           
  9754                           ; BSR set to: 0
  9755  0009D6  C0AC  F018         	movff	exp@x,___ftge@ff1
  9756  0009DA  C0AD  F019         	movff	exp@x+1,___ftge@ff1+1
  9757  0009DE  C0AE  F01A         	movff	exp@x+2,___ftge@ff1+2
  9758  0009E2  0E49               	movlw	73
  9759  0009E4  6E1B               	movwf	___ftge@ff2,c
  9760  0009E6  0E3A               	movlw	58
  9761  0009E8  6E1C               	movwf	___ftge@ff2+1,c
  9762  0009EA  0EC4               	movlw	196
  9763  0009EC  6E1D               	movwf	___ftge@ff2+2,c
  9764  0009EE  ECD3  F00F         	call	___ftge	;wreg free
  9765  0009F2  B0D8               	btfsc	status,0,c
  9766  0009F4  D00D               	goto	l1937
  9767  0009F6  0E00               	movlw	0
  9768  0009F8  0101               	movlb	1	; () banked
  9769  0009FA  6F4D               	movwf	(_errno+1)& (0+255),b
  9770  0009FC  0E22               	movlw	34
  9771  0009FE  6F4C               	movwf	_errno& (0+255),b
  9772  000A00  0E00               	movlw	0
  9773  000A02  0100               	movlb	0	; () banked
  9774  000A04  6FAC               	movwf	?_exp& (0+255),b
  9775  000A06  0E00               	movlw	0
  9776  000A08  6FAD               	movwf	(?_exp+1)& (0+255),b
  9777  000A0A  0E00               	movlw	0
  9778  000A0C  6FAE               	movwf	(?_exp+2)& (0+255),b
  9779                           
  9780                           ; BSR set to: 0
  9781  000A0E  0012               	return	
  9782  000A10                     l1937:
  9783                           
  9784                           ; BSR set to: 0
  9785  000A10  0100               	movlb	0	; () banked
  9786  000A12  AFAE               	btfss	(exp@x+2)& (0+255),7,b
  9787  000A14  D002               	goto	u7550
  9788  000A16  0E01               	movlw	1
  9789  000A18  D001               	goto	u7560
  9790  000A1A                     u7550:
  9791  000A1A  0E00               	movlw	0
  9792  000A1C                     u7560:
  9793  000A1C  6FB4               	movwf	exp@sign& (0+255),b
  9794                           
  9795                           ; BSR set to: 0
  9796  000A1E  51B4               	movf	exp@sign& (0+255),w,b
  9797  000A20  B4D8               	btfsc	status,2,c
  9798  000A22  D00E               	goto	l1938
  9799                           
  9800                           ; BSR set to: 0
  9801  000A24  C0AC  F08A         	movff	exp@x,___ftneg@f1
  9802  000A28  C0AD  F08B         	movff	exp@x+1,___ftneg@f1+1
  9803  000A2C  C0AE  F08C         	movff	exp@x+2,___ftneg@f1+2
  9804  000A30  ECAF  F015         	call	___ftneg	;wreg free
  9805  000A34  C08A  F0AC         	movff	?___ftneg,exp@x
  9806  000A38  C08B  F0AD         	movff	?___ftneg+1,exp@x+1
  9807  000A3C  C08C  F0AE         	movff	?___ftneg+2,exp@x+2
  9808  000A40                     l1938:
  9809  000A40  C0AC  F069         	movff	exp@x,___ftmul@f1
  9810  000A44  C0AD  F06A         	movff	exp@x+1,___ftmul@f1+1
  9811  000A48  C0AE  F06B         	movff	exp@x+2,___ftmul@f1+2
  9812  000A4C  0EAA               	movlw	170
  9813  000A4E  0100               	movlb	0	; () banked
  9814  000A50  6F6C               	movwf	___ftmul@f2& (0+255),b
  9815  000A52  0EB8               	movlw	184
  9816  000A54  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
  9817  000A56  0E3F               	movlw	63
  9818  000A58  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
  9819  000A5A  EC55  F00B         	call	___ftmul	;wreg free
  9820  000A5E  C069  F0AC         	movff	?___ftmul,exp@x
  9821  000A62  C06A  F0AD         	movff	?___ftmul+1,exp@x+1
  9822  000A66  C06B  F0AE         	movff	?___ftmul+2,exp@x+2
  9823  000A6A  C0AC  F099         	movff	exp@x,floor@x
  9824  000A6E  C0AD  F09A         	movff	exp@x+1,floor@x+1
  9825  000A72  C0AE  F09B         	movff	exp@x+2,floor@x+2
  9826  000A76  EC44  F00C         	call	_floor	;wreg free
  9827  000A7A  C099  F0AF         	movff	?_floor,_exp$2946
  9828  000A7E  C09A  F0B0         	movff	?_floor+1,_exp$2946+1
  9829  000A82  C09B  F0B1         	movff	?_floor+2,_exp$2946+2
  9830  000A86  C0AF  F078         	movff	_exp$2946,___fttol@f1
  9831  000A8A  C0B0  F079         	movff	_exp$2946+1,___fttol@f1+1
  9832  000A8E  C0B1  F07A         	movff	_exp$2946+2,___fttol@f1+2
  9833  000A92  ECD9  F00A         	call	___fttol	;wreg free
  9834  000A96  C078  F0B2         	movff	?___fttol,exp@exponent
  9835  000A9A  C079  F0B3         	movff	?___fttol+1,exp@exponent+1
  9836  000A9E  C0AC  F099         	movff	exp@x,___ftsub@f1
  9837  000AA2  C0AD  F09A         	movff	exp@x+1,___ftsub@f1+1
  9838  000AA6  C0AE  F09B         	movff	exp@x+2,___ftsub@f1+2
  9839  000AAA  C0B2  F087         	movff	exp@exponent,___awtoft@c
  9840  000AAE  C0B3  F088         	movff	exp@exponent+1,___awtoft@c+1
  9841  000AB2  ECC0  F014         	call	___awtoft	;wreg free
  9842  000AB6  C087  F09C         	movff	?___awtoft,___ftsub@f2
  9843  000ABA  C088  F09D         	movff	?___awtoft+1,___ftsub@f2+1
  9844  000ABE  C089  F09E         	movff	?___awtoft+2,___ftsub@f2+2
  9845  000AC2  EC42  F014         	call	___ftsub	;wreg free
  9846  000AC6  C099  F0AC         	movff	?___ftsub,exp@x
  9847  000ACA  C09A  F0AD         	movff	?___ftsub+1,exp@x+1
  9848  000ACE  C09B  F0AE         	movff	?___ftsub+2,exp@x+2
  9849  000AD2  C0AC  F099         	movff	exp@x,eval_poly@x
  9850  000AD6  C0AD  F09A         	movff	exp@x+1,eval_poly@x+1
  9851  000ADA  C0AE  F09B         	movff	exp@x+2,eval_poly@x+2
  9852  000ADE  0EC3               	movlw	low exp@coeff
  9853  000AE0  0100               	movlb	0	; () banked
  9854  000AE2  6F9C               	movwf	eval_poly@d& (0+255),b
  9855  000AE4  0E7A               	movlw	high exp@coeff
  9856  000AE6  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  9857  000AE8  0E00               	movlw	0
  9858  000AEA  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  9859  000AEC  0E09               	movlw	9
  9860  000AEE  6F9E               	movwf	eval_poly@n& (0+255),b
  9861  000AF0  EC22  F00D         	call	_eval_poly	;wreg free
  9862  000AF4  C099  F0A5         	movff	?_eval_poly,ldexp@value
  9863  000AF8  C09A  F0A6         	movff	?_eval_poly+1,ldexp@value+1
  9864  000AFC  C09B  F0A7         	movff	?_eval_poly+2,ldexp@value+2
  9865  000B00  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
  9866  000B04  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
  9867  000B08  EC8F  F00D         	call	_ldexp	;wreg free
  9868  000B0C  C0A5  F0AC         	movff	?_ldexp,exp@x
  9869  000B10  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
  9870  000B14  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
  9871  000B18  0100               	movlb	0	; () banked
  9872  000B1A  51B4               	movf	exp@sign& (0+255),w,b
  9873  000B1C  B4D8               	btfsc	status,2,c
  9874  000B1E  D025               	goto	l1939
  9875                           
  9876                           ; BSR set to: 0
  9877  000B20  29AC               	incf	exp@x& (0+255),w,b
  9878  000B22  E10E               	bnz	l7117
  9879  000B24  0E7F               	movlw	127
  9880  000B26  19AD               	xorwf	(exp@x+1)& (0+255),w,b
  9881  000B28  E10B               	bnz	l7117
  9882  000B2A  0E7F               	movlw	127
  9883  000B2C  19AE               	xorwf	(exp@x+2)& (0+255),w,b
  9884  000B2E  A4D8               	btfss	status,2,c
  9885  000B30  D007               	goto	l1940
  9886                           
  9887                           ; BSR set to: 0
  9888  000B32  0E00               	movlw	0
  9889  000B34  6FAC               	movwf	?_exp& (0+255),b
  9890  000B36  0E00               	movlw	0
  9891  000B38  6FAD               	movwf	(?_exp+1)& (0+255),b
  9892  000B3A  0E00               	movlw	0
  9893  000B3C  6FAE               	movwf	(?_exp+2)& (0+255),b
  9894                           
  9895                           ; BSR set to: 0
  9896  000B3E  0012               	return	
  9897  000B40                     l1940:
  9898  000B40                     l7117:
  9899                           
  9900                           ; BSR set to: 0
  9901  000B40  0E00               	movlw	0
  9902  000B42  6E2A               	movwf	___ftdiv@f1,c
  9903  000B44  0E80               	movlw	128
  9904  000B46  6E2B               	movwf	___ftdiv@f1+1,c
  9905  000B48  0E3F               	movlw	63
  9906  000B4A  6E2C               	movwf	___ftdiv@f1+2,c
  9907  000B4C  C0AC  F02D         	movff	exp@x,___ftdiv@f2
  9908  000B50  C0AD  F02E         	movff	exp@x+1,___ftdiv@f2+1
  9909  000B54  C0AE  F02F         	movff	exp@x+2,___ftdiv@f2+2
  9910  000B58  ECD0  F00B         	call	___ftdiv	;wreg free
  9911  000B5C  C02A  F0AC         	movff	?___ftdiv,?_exp
  9912  000B60  C02B  F0AD         	movff	?___ftdiv+1,?_exp+1
  9913  000B64  C02C  F0AE         	movff	?___ftdiv+2,?_exp+2
  9914  000B68  0012               	return	
  9915  000B6A                     l1939:
  9916                           
  9917                           ; BSR set to: 0
  9918  000B6A  C0AC  F0AC         	movff	exp@x,?_exp
  9919  000B6E  C0AD  F0AD         	movff	exp@x+1,?_exp+1
  9920  000B72  C0AE  F0AE         	movff	exp@x+2,?_exp+2
  9921  000B76  0012               	return		;funcret
  9922  000B78                     __end_of_exp:
  9923                           	opt stack 0
  9924                           tosu	equ	0xFFF
  9925                           tosh	equ	0xFFE
  9926                           tosl	equ	0xFFD
  9927                           pclath	equ	0xFFA
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           intcon2	equ	0xFF1
  9936                           postinc0	equ	0xFEE
  9937                           wreg	equ	0xFE8
  9938                           indf1	equ	0xFE7
  9939                           postdec1	equ	0xFE5
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           
  9949 ;; *************** function _ldexp *****************
  9950 ;; Defined at:
  9951 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  value           3   69[BANK0 ] unsigned char 
  9954 ;;  newexp          2   72[BANK0 ] int 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;		None
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  3   69[BANK0 ] int 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9966 ;;      Params:         0       5       0       0       0       0       0
  9967 ;;      Locals:         0       0       0       0       0       0       0
  9968 ;;      Temps:          0       2       0       0       0       0       0
  9969 ;;      Totals:         0       7       0       0       0       0       0
  9970 ;;Total ram usage:        7 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    3
  9973 ;; This function calls:
  9974 ;;		Nothing
  9975 ;; This function is called by:
  9976 ;;		_exp
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	text43
  9981  001B1E                     __ptext43:
  9982                           	opt stack 0
  9983  001B1E                     _ldexp:
  9984                           	opt stack 24
  9985                           
  9986                           ;incstack = 0
  9987  001B1E  0100               	movlb	0	; () banked
  9988  001B20  51A5               	movf	ldexp@value& (0+255),w,b
  9989  001B22  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
  9990  001B24  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
  9991  001B26  A4D8               	btfss	status,2,c
  9992  001B28  D007               	goto	l1958
  9993                           
  9994                           ; BSR set to: 0
  9995  001B2A  0E00               	movlw	0
  9996  001B2C  6FA5               	movwf	?_ldexp& (0+255),b
  9997  001B2E  0E00               	movlw	0
  9998  001B30  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  9999  001B32  0E00               	movlw	0
 10000  001B34  6FA7               	movwf	(?_ldexp+2)& (0+255),b
 10001                           
 10002                           ; BSR set to: 0
 10003  001B36  0012               	return	
 10004  001B38                     l1958:
 10005                           
 10006                           ; BSR set to: 0
 10007                           
 10008                           ; BSR set to: 0
 10009  001B38  51A7               	movf	(ldexp@value+2)& (0+255),w,b
 10010  001B3A  0B7F               	andlw	127
 10011  001B3C  6FAA               	movwf	??_ldexp& (0+255),b
 10012  001B3E  6BAB               	clrf	(??_ldexp+1)& (0+255),b
 10013  001B40  90D8               	bcf	status,0,c
 10014  001B42  37AA               	rlcf	??_ldexp& (0+255),f,b
 10015  001B44  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
 10016  001B46  51AA               	movf	??_ldexp& (0+255),w,b
 10017  001B48  27A8               	addwf	ldexp@newexp& (0+255),f,b
 10018  001B4A  51AB               	movf	(??_ldexp+1)& (0+255),w,b
 10019  001B4C  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 10020  001B4E  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
 10021  001B50  D003               	goto	u7360
 10022  001B52  6BAA               	clrf	??_ldexp& (0+255),b
 10023  001B54  2BAA               	incf	??_ldexp& (0+255),f,b
 10024  001B56  D002               	goto	u7368
 10025  001B58                     u7360:
 10026  001B58  0100               	movlb	0	; () banked
 10027  001B5A  6BAA               	clrf	??_ldexp& (0+255),b
 10028  001B5C                     u7368:
 10029  001B5C  51AA               	movf	??_ldexp& (0+255),w,b
 10030  001B5E  27A8               	addwf	ldexp@newexp& (0+255),f,b
 10031  001B60  0E00               	movlw	0
 10032  001B62  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 10033  001B64  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
 10034  001B66  D00D               	goto	l1960
 10035                           
 10036                           ; BSR set to: 0
 10037  001B68  0E00               	movlw	0
 10038  001B6A  0101               	movlb	1	; () banked
 10039  001B6C  6F4D               	movwf	(_errno+1)& (0+255),b
 10040  001B6E  0E22               	movlw	34
 10041  001B70  6F4C               	movwf	_errno& (0+255),b
 10042  001B72  0E00               	movlw	0
 10043  001B74  0100               	movlb	0	; () banked
 10044  001B76  6FA5               	movwf	?_ldexp& (0+255),b
 10045  001B78  0E00               	movlw	0
 10046  001B7A  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 10047  001B7C  0E00               	movlw	0
 10048  001B7E                     L1:
 10049  001B7E  6FA7               	movwf	(?_ldexp+2)& (0+255),b
 10050                           
 10051                           ; BSR set to: 0
 10052  001B80  0012               	return	
 10053  001B82                     l1960:
 10054                           
 10055                           ; BSR set to: 0
 10056                           
 10057                           ; BSR set to: 0
 10058  001B82  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 10059  001B84  D017               	goto	l1962
 10060  001B86  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
 10061  001B88  A0D8               	btfss	status,0,c
 10062  001B8A  D014               	goto	l1962
 10063                           
 10064                           ; BSR set to: 0
 10065  001B8C  0E00               	movlw	0
 10066  001B8E  0101               	movlb	1	; () banked
 10067  001B90  6F4D               	movwf	(_errno+1)& (0+255),b
 10068  001B92  0E22               	movlw	34
 10069  001B94  6F4C               	movwf	_errno& (0+255),b
 10070                           
 10071                           ; BSR set to: 1
 10072  001B96  0100               	movlb	0	; () banked
 10073  001B98  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
 10074  001B9A  D006               	goto	l1963
 10075                           
 10076                           ; BSR set to: 0
 10077  001B9C  0EFF               	movlw	255
 10078  001B9E  6FA5               	movwf	?_ldexp& (0+255),b
 10079  001BA0  0E7F               	movlw	127
 10080  001BA2  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 10081  001BA4  0EFF               	movlw	255
 10082  001BA6  D7EB               	goto	L1
 10083  001BA8                     l1963:
 10084                           
 10085                           ; BSR set to: 0
 10086                           
 10087                           ; BSR set to: 0
 10088  001BA8  0EFF               	movlw	255
 10089  001BAA  6FA5               	movwf	?_ldexp& (0+255),b
 10090  001BAC  0E7F               	movlw	127
 10091  001BAE  6FA6               	movwf	(?_ldexp+1)& (0+255),b
 10092  001BB0  0E7F               	movlw	127
 10093  001BB2  D7E5               	goto	L1
 10094  001BB4                     l1962:
 10095                           
 10096                           ; BSR set to: 0
 10097                           
 10098                           ; BSR set to: 0
 10099  001BB4  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 10100  001BB6  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 10101  001BB8  6FAB               	movwf	(??_ldexp+1)& (0+255),b
 10102  001BBA  31A8               	rrcf	ldexp@newexp& (0+255),w,b
 10103  001BBC  6FAA               	movwf	??_ldexp& (0+255),b
 10104  001BBE  51A7               	movf	(ldexp@value+2)& (0+255),w,b
 10105  001BC0  19AA               	xorwf	??_ldexp& (0+255),w,b
 10106  001BC2  0B80               	andlw	-128
 10107  001BC4  19AA               	xorwf	??_ldexp& (0+255),w,b
 10108  001BC6  6FA7               	movwf	(ldexp@value+2)& (0+255),b
 10109  001BC8  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
 10110  001BCC  0E01               	movlw	1
 10111  001BCE  17AA               	andwf	??_ldexp& (0+255),f,b
 10112  001BD0  33AA               	rrcf	??_ldexp& (0+255),f,b
 10113  001BD2  33AA               	rrcf	??_ldexp& (0+255),f,b
 10114  001BD4  51A6               	movf	(ldexp@value+1)& (0+255),w,b
 10115  001BD6  19AA               	xorwf	??_ldexp& (0+255),w,b
 10116  001BD8  0B7F               	andlw	-129
 10117  001BDA  19AA               	xorwf	??_ldexp& (0+255),w,b
 10118  001BDC  6FA6               	movwf	(ldexp@value+1)& (0+255),b
 10119                           
 10120                           ; BSR set to: 0
 10121                           
 10122                           ; BSR set to: 0
 10123                           
 10124                           ; BSR set to: 0
 10125  001BDE  C0A5  F0A5         	movff	ldexp@value,?_ldexp
 10126  001BE2  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
 10127  001BE6  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
 10128  001BEA  0012               	return	
 10129  001BEC                     __end_of_ldexp:
 10130                           	opt stack 0
 10131                           tosu	equ	0xFFF
 10132                           tosh	equ	0xFFE
 10133                           tosl	equ	0xFFD
 10134                           pclath	equ	0xFFA
 10135                           tblptru	equ	0xFF8
 10136                           tblptrh	equ	0xFF7
 10137                           tblptrl	equ	0xFF6
 10138                           tablat	equ	0xFF5
 10139                           prodh	equ	0xFF4
 10140                           prodl	equ	0xFF3
 10141                           intcon	equ	0xFF2
 10142                           intcon2	equ	0xFF1
 10143                           postinc0	equ	0xFEE
 10144                           wreg	equ	0xFE8
 10145                           indf1	equ	0xFE7
 10146                           postdec1	equ	0xFE5
 10147                           fsr1h	equ	0xFE2
 10148                           fsr1l	equ	0xFE1
 10149                           indf2	equ	0xFDF
 10150                           postinc2	equ	0xFDE
 10151                           postdec2	equ	0xFDD
 10152                           fsr2h	equ	0xFDA
 10153                           fsr2l	equ	0xFD9
 10154                           status	equ	0xFD8
 10155                           
 10156 ;; *************** function _floor *****************
 10157 ;; Defined at:
 10158 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;  x               3   57[BANK0 ] int 
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;  i               3   60[BANK0 ] int 
 10163 ;;  expon           2   63[BANK0 ] int 
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  3   57[BANK0 ] int 
 10166 ;; Registers used:
 10167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10173 ;;      Params:         0       3       0       0       0       0       0
 10174 ;;      Locals:         0       5       0       0       0       0       0
 10175 ;;      Temps:          0       0       0       0       0       0       0
 10176 ;;      Totals:         0       8       0       0       0       0       0
 10177 ;;Total ram usage:        8 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; Hardware stack levels required when called:    5
 10180 ;; This function calls:
 10181 ;;		___altoft
 10182 ;;		___ftadd
 10183 ;;		___ftge
 10184 ;;		___fttol
 10185 ;;		_frexp
 10186 ;; This function is called by:
 10187 ;;		_exp
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           	psect	text44
 10192  001888                     __ptext44:
 10193                           	opt stack 0
 10194  001888                     _floor:
 10195                           	opt stack 22
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;incstack = 0
 10199  001888  C099  F018         	movff	floor@x,frexp@value
 10200  00188C  C09A  F019         	movff	floor@x+1,frexp@value+1
 10201  001890  C09B  F01A         	movff	floor@x+2,frexp@value+2
 10202  001894  0E9F               	movlw	low floor@expon
 10203  001896  6E1B               	movwf	frexp@eptr,c
 10204  001898  0E00               	movlw	high floor@expon
 10205  00189A  6E1C               	movwf	frexp@eptr+1,c
 10206  00189C  EC8B  F00F         	call	_frexp	;wreg free
 10207  0018A0  0100               	movlb	0	; () banked
 10208  0018A2  AFA0               	btfss	(floor@expon+1)& (0+255),7,b
 10209  0018A4  D010               	goto	l1945
 10210                           
 10211                           ; BSR set to: 0
 10212  0018A6  AF9B               	btfss	(floor@x+2)& (0+255),7,b
 10213  0018A8  D007               	goto	l1946
 10214                           
 10215                           ; BSR set to: 0
 10216  0018AA  0E00               	movlw	0
 10217  0018AC  6F99               	movwf	?_floor& (0+255),b
 10218  0018AE  0E80               	movlw	128
 10219  0018B0  6F9A               	movwf	(?_floor+1)& (0+255),b
 10220  0018B2  0EBF               	movlw	191
 10221  0018B4  6F9B               	movwf	(?_floor+2)& (0+255),b
 10222                           
 10223                           ; BSR set to: 0
 10224  0018B6  0012               	return	
 10225  0018B8                     l1946:
 10226                           
 10227                           ; BSR set to: 0
 10228                           
 10229                           ; BSR set to: 0
 10230  0018B8  0E00               	movlw	0
 10231  0018BA  6F99               	movwf	?_floor& (0+255),b
 10232  0018BC  0E00               	movlw	0
 10233  0018BE  6F9A               	movwf	(?_floor+1)& (0+255),b
 10234  0018C0  0E00               	movlw	0
 10235  0018C2  6F9B               	movwf	(?_floor+2)& (0+255),b
 10236                           
 10237                           ; BSR set to: 0
 10238  0018C4  0012               	return	
 10239  0018C6                     l1945:
 10240                           
 10241                           ; BSR set to: 0
 10242                           
 10243                           ; BSR set to: 0
 10244  0018C6  51A0               	movf	(floor@expon+1)& (0+255),w,b
 10245  0018C8  E104               	bnz	u7320
 10246  0018CA  0E15               	movlw	21
 10247  0018CC  5D9F               	subwf	floor@expon& (0+255),w,b
 10248  0018CE  A0D8               	btfss	status,0,c
 10249  0018D0  D007               	goto	l1948
 10250  0018D2                     u7320:
 10251                           
 10252                           ; BSR set to: 0
 10253  0018D2  C099  F099         	movff	floor@x,?_floor
 10254  0018D6  C09A  F09A         	movff	floor@x+1,?_floor+1
 10255  0018DA  C09B  F09B         	movff	floor@x+2,?_floor+2
 10256  0018DE  0012               	return	
 10257  0018E0                     l1948:
 10258                           
 10259                           ; BSR set to: 0
 10260                           
 10261                           ; BSR set to: 0
 10262  0018E0  C099  F078         	movff	floor@x,___fttol@f1
 10263  0018E4  C09A  F079         	movff	floor@x+1,___fttol@f1+1
 10264  0018E8  C09B  F07A         	movff	floor@x+2,___fttol@f1+2
 10265  0018EC  ECD9  F00A         	call	___fttol	;wreg free
 10266  0018F0  C078  F020         	movff	?___fttol,___altoft@c
 10267  0018F4  C079  F021         	movff	?___fttol+1,___altoft@c+1
 10268  0018F8  C07A  F022         	movff	?___fttol+2,___altoft@c+2
 10269  0018FC  C07B  F023         	movff	?___fttol+3,___altoft@c+3
 10270  001900  EC5C  F010         	call	___altoft	;wreg free
 10271  001904  C020  F09C         	movff	?___altoft,floor@i
 10272  001908  C021  F09D         	movff	?___altoft+1,floor@i+1
 10273  00190C  C022  F09E         	movff	?___altoft+2,floor@i+2
 10274  001910  C099  F018         	movff	floor@x,___ftge@ff1
 10275  001914  C09A  F019         	movff	floor@x+1,___ftge@ff1+1
 10276  001918  C09B  F01A         	movff	floor@x+2,___ftge@ff1+2
 10277  00191C  C09C  F01B         	movff	floor@i,___ftge@ff2
 10278  001920  C09D  F01C         	movff	floor@i+1,___ftge@ff2+1
 10279  001924  C09E  F01D         	movff	floor@i+2,___ftge@ff2+2
 10280  001928  ECD3  F00F         	call	___ftge	;wreg free
 10281  00192C  B0D8               	btfsc	status,0,c
 10282  00192E  D016               	goto	l1949
 10283  001930  C09C  F08D         	movff	floor@i,___ftadd@f1
 10284  001934  C09D  F08E         	movff	floor@i+1,___ftadd@f1+1
 10285  001938  C09E  F08F         	movff	floor@i+2,___ftadd@f1+2
 10286  00193C  0E00               	movlw	0
 10287  00193E  0100               	movlb	0	; () banked
 10288  001940  6F90               	movwf	___ftadd@f2& (0+255),b
 10289  001942  0E80               	movlw	128
 10290  001944  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
 10291  001946  0EBF               	movlw	191
 10292  001948  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
 10293  00194A  EC80  F007         	call	___ftadd	;wreg free
 10294  00194E  C08D  F099         	movff	?___ftadd,?_floor
 10295  001952  C08E  F09A         	movff	?___ftadd+1,?_floor+1
 10296  001956  C08F  F09B         	movff	?___ftadd+2,?_floor+2
 10297  00195A  0012               	return	
 10298  00195C                     l1949:
 10299  00195C  C09C  F099         	movff	floor@i,?_floor
 10300  001960  C09D  F09A         	movff	floor@i+1,?_floor+1
 10301  001964  C09E  F09B         	movff	floor@i+2,?_floor+2
 10302  001968  0012               	return		;funcret
 10303  00196A                     __end_of_floor:
 10304                           	opt stack 0
 10305                           tosu	equ	0xFFF
 10306                           tosh	equ	0xFFE
 10307                           tosl	equ	0xFFD
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           intcon2	equ	0xFF1
 10317                           postinc0	equ	0xFEE
 10318                           wreg	equ	0xFE8
 10319                           indf1	equ	0xFE7
 10320                           postdec1	equ	0xFE5
 10321                           fsr1h	equ	0xFE2
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           postdec2	equ	0xFDD
 10326                           fsr2h	equ	0xFDA
 10327                           fsr2l	equ	0xFD9
 10328                           status	equ	0xFD8
 10329                           
 10330 ;; *************** function _frexp *****************
 10331 ;; Defined at:
 10332 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;  value           3   23[COMRAM] int 
 10335 ;;  eptr            2   26[COMRAM] PTR int 
 10336 ;;		 -> log@exponent(2), floor@expon(2), 
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;		None
 10339 ;; Return value:  Size  Location     Type
 10340 ;;                  3   23[COMRAM] PTR int 
 10341 ;; Registers used:
 10342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10348 ;;      Params:         5       0       0       0       0       0       0
 10349 ;;      Locals:         0       0       0       0       0       0       0
 10350 ;;      Temps:          2       0       0       0       0       0       0
 10351 ;;      Totals:         7       0       0       0       0       0       0
 10352 ;;Total ram usage:        7 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    3
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_floor
 10359 ;;		_log
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           	psect	text45
 10364  001F16                     __ptext45:
 10365                           	opt stack 0
 10366  001F16                     _frexp:
 10367                           	opt stack 24
 10368                           
 10369                           ;incstack = 0
 10370  001F16  5018               	movf	frexp@value,w,c
 10371  001F18  1019               	iorwf	frexp@value+1,w,c
 10372  001F1A  101A               	iorwf	frexp@value+2,w,c
 10373  001F1C  A4D8               	btfss	status,2,c
 10374  001F1E  D00F               	goto	l1954
 10375  001F20  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10376  001F24  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10377  001F28  0E00               	movlw	0
 10378  001F2A  6EDE               	movwf	postinc2,c
 10379  001F2C  0E00               	movlw	0
 10380  001F2E  6EDD               	movwf	postdec2,c
 10381  001F30  0E00               	movlw	0
 10382  001F32  6E18               	movwf	?_frexp,c
 10383  001F34  0E00               	movlw	0
 10384  001F36  6E19               	movwf	?_frexp+1,c
 10385  001F38  0E00               	movlw	0
 10386  001F3A  6E1A               	movwf	?_frexp+2,c
 10387  001F3C  0012               	return	
 10388  001F3E                     l1954:
 10389  001F3E  501A               	movf	frexp@value+2,w,c
 10390  001F40  0B7F               	andlw	127
 10391  001F42  6E1D               	movwf	??_frexp& (0+255),c
 10392  001F44  6A1E               	clrf	(??_frexp+1)& (0+255),c
 10393  001F46  90D8               	bcf	status,0,c
 10394  001F48  361D               	rlcf	??_frexp,f,c
 10395  001F4A  361E               	rlcf	??_frexp+1,f,c
 10396  001F4C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10397  001F50  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10398  001F54  C01D  FFDE         	movff	??_frexp,postinc2
 10399  001F58  C01E  FFDD         	movff	??_frexp+1,postdec2
 10400  001F5C  AE19               	btfss	frexp@value+1,7,c
 10401  001F5E  D003               	goto	u7030
 10402  001F60  6A1D               	clrf	??_frexp& (0+255),c
 10403  001F62  2A1D               	incf	??_frexp& (0+255),f,c
 10404  001F64  D001               	goto	u7038
 10405  001F66                     u7030:
 10406  001F66  6A1D               	clrf	??_frexp& (0+255),c
 10407  001F68                     u7038:
 10408  001F68  501D               	movf	??_frexp,w,c
 10409  001F6A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10410  001F6E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10411  001F72  12DE               	iorwf	postinc2,f,c
 10412  001F74  0E00               	movlw	0
 10413  001F76  12DD               	iorwf	postdec2,f,c
 10414  001F78  C01B  FFD9         	movff	frexp@eptr,fsr2l
 10415  001F7C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 10416  001F80  0E82               	movlw	130
 10417  001F82  26DE               	addwf	postinc2,f,c
 10418  001F84  0EFF               	movlw	255
 10419  001F86  22DD               	addwfc	postdec2,f,c
 10420  001F88  801A               	bsf	frexp@value+2,0,c
 10421  001F8A  821A               	bsf	frexp@value+2,1,c
 10422  001F8C  841A               	bsf	frexp@value+2,2,c
 10423  001F8E  861A               	bsf	frexp@value+2,3,c
 10424  001F90  881A               	bsf	frexp@value+2,4,c
 10425  001F92  8A1A               	bsf	frexp@value+2,5,c
 10426  001F94  9C1A               	bcf	frexp@value+2,6,c
 10427  001F96  9E19               	bcf	frexp@value+1,7,c
 10428  001F98  C018  F018         	movff	frexp@value,?_frexp
 10429  001F9C  C019  F019         	movff	frexp@value+1,?_frexp+1
 10430  001FA0  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 10431  001FA4  0012               	return	
 10432  001FA6                     __end_of_frexp:
 10433                           	opt stack 0
 10434                           tosu	equ	0xFFF
 10435                           tosh	equ	0xFFE
 10436                           tosl	equ	0xFFD
 10437                           pclath	equ	0xFFA
 10438                           tblptru	equ	0xFF8
 10439                           tblptrh	equ	0xFF7
 10440                           tblptrl	equ	0xFF6
 10441                           tablat	equ	0xFF5
 10442                           prodh	equ	0xFF4
 10443                           prodl	equ	0xFF3
 10444                           intcon	equ	0xFF2
 10445                           intcon2	equ	0xFF1
 10446                           postinc0	equ	0xFEE
 10447                           wreg	equ	0xFE8
 10448                           indf1	equ	0xFE7
 10449                           postdec1	equ	0xFE5
 10450                           fsr1h	equ	0xFE2
 10451                           fsr1l	equ	0xFE1
 10452                           indf2	equ	0xFDF
 10453                           postinc2	equ	0xFDE
 10454                           postdec2	equ	0xFDD
 10455                           fsr2h	equ	0xFDA
 10456                           fsr2l	equ	0xFD9
 10457                           status	equ	0xFD8
 10458                           
 10459 ;; *************** function ___fttol *****************
 10460 ;; Defined at:
 10461 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;  f1              3   24[BANK0 ] float 
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;  lval            4   34[BANK0 ] unsigned long 
 10466 ;;  exp1            1   38[BANK0 ] unsigned char 
 10467 ;;  sign1           1   33[BANK0 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  4   24[BANK0 ] long 
 10470 ;; Registers used:
 10471 ;;		wreg, status,2, status,0
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10477 ;;      Params:         0       4       0       0       0       0       0
 10478 ;;      Locals:         0       6       0       0       0       0       0
 10479 ;;      Temps:          0       5       0       0       0       0       0
 10480 ;;      Totals:         0      15       0       0       0       0       0
 10481 ;;Total ram usage:       15 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    3
 10484 ;; This function calls:
 10485 ;;		Nothing
 10486 ;; This function is called by:
 10487 ;;		_SampleSingleChannel
 10488 ;;		_CalcSynthRegParams
 10489 ;;		_pow
 10490 ;;		_exp
 10491 ;;		_floor
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text46
 10496  0015B2                     __ptext46:
 10497                           	opt stack 0
 10498  0015B2                     ___fttol:
 10499                           	opt stack 23
 10500                           
 10501                           ;incstack = 0
 10502  0015B2  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 10503  0015B6  0100               	movlb	0	; () banked
 10504  0015B8  6B7D               	clrf	(??___fttol+1)& (0+255),b
 10505  0015BA  6B7E               	clrf	(??___fttol+2)& (0+255),b
 10506  0015BC  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 10507  0015BE  377C               	rlcf	??___fttol& (0+255),f,b
 10508  0015C0  E301               	bnc	u6881
 10509  0015C2  817D               	bsf	(??___fttol+1)& (0+255),0,b
 10510  0015C4                     u6881:
 10511  0015C4  517C               	movf	??___fttol& (0+255),w,b
 10512  0015C6  6F86               	movwf	___fttol@exp1& (0+255),b
 10513  0015C8  5186               	movf	___fttol@exp1& (0+255),w,b
 10514  0015CA  A4D8               	btfss	status,2,c
 10515  0015CC  D009               	goto	l1611
 10516                           
 10517                           ; BSR set to: 0
 10518  0015CE  0E00               	movlw	0
 10519  0015D0  6F78               	movwf	?___fttol& (0+255),b
 10520  0015D2  0E00               	movlw	0
 10521  0015D4  6F79               	movwf	(?___fttol+1)& (0+255),b
 10522  0015D6  0E00               	movlw	0
 10523  0015D8  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10524  0015DA  0E00               	movlw	0
 10525  0015DC  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528  0015DE  0012               	return	
 10529  0015E0                     l1611:
 10530                           
 10531                           ; BSR set to: 0
 10532                           
 10533                           ; BSR set to: 0
 10534  0015E0  0E17               	movlw	23
 10535  0015E2  6F7C               	movwf	??___fttol& (0+255),b
 10536  0015E4  C078  F07D         	movff	___fttol@f1,??___fttol+1
 10537  0015E8  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 10538  0015EC  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 10539  0015F0  297C               	incf	??___fttol& (0+255),w,b
 10540  0015F2  6F80               	movwf	(??___fttol+4)& (0+255),b
 10541  0015F4  D004               	goto	u6900
 10542  0015F6                     u6905:
 10543  0015F6  90D8               	bcf	status,0,c
 10544  0015F8  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 10545  0015FA  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 10546  0015FC  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 10547  0015FE                     u6900:
 10548  0015FE  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 10549  001600  D7FA               	goto	u6905
 10550  001602  0100               	movlb	0	; () banked
 10551  001604  517D               	movf	(??___fttol+1)& (0+255),w,b
 10552  001606  6F81               	movwf	___fttol@sign1& (0+255),b
 10553                           
 10554                           ; BSR set to: 0
 10555  001608  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 10556                           
 10557                           ; BSR set to: 0
 10558  00160A  0EFF               	movlw	255
 10559  00160C  1778               	andwf	___fttol@f1& (0+255),f,b
 10560  00160E  0EFF               	movlw	255
 10561  001610  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 10562  001612  0E00               	movlw	0
 10563  001614  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 10564                           
 10565                           ; BSR set to: 0
 10566  001616  5178               	movf	___fttol@f1& (0+255),w,b
 10567  001618  6F82               	movwf	___fttol@lval& (0+255),b
 10568  00161A  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 10569  00161C  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 10570  00161E  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 10571  001620  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 10572  001622  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575  001624  0E8E               	movlw	142
 10576  001626  5F86               	subwf	___fttol@exp1& (0+255),f,b
 10577                           
 10578                           ; BSR set to: 0
 10579  001628  AF86               	btfss	___fttol@exp1& (0+255),7,b
 10580  00162A  D016               	goto	l1613
 10581                           
 10582                           ; BSR set to: 0
 10583  00162C  5186               	movf	___fttol@exp1& (0+255),w,b
 10584  00162E  0A80               	xorlw	128
 10585  001630  0F8F               	addlw	143
 10586  001632  B0D8               	btfsc	status,0,c
 10587  001634  D009               	goto	l1614
 10588                           
 10589                           ; BSR set to: 0
 10590  001636  0E00               	movlw	0
 10591  001638  6F78               	movwf	?___fttol& (0+255),b
 10592  00163A  0E00               	movlw	0
 10593  00163C  6F79               	movwf	(?___fttol+1)& (0+255),b
 10594  00163E  0E00               	movlw	0
 10595  001640  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10596  001642  0E00               	movlw	0
 10597  001644  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10598                           
 10599                           ; BSR set to: 0
 10600  001646  0012               	return	
 10601  001648                     l1614:
 10602                           
 10603                           ; BSR set to: 0
 10604                           
 10605                           ; BSR set to: 0
 10606                           
 10607                           ; BSR set to: 0
 10608  001648  90D8               	bcf	status,0,c
 10609  00164A  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10610  00164C  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10611  00164E  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10612  001650  3382               	rrcf	___fttol@lval& (0+255),f,b
 10613                           
 10614                           ; BSR set to: 0
 10615  001652  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 10616  001654  D7F9               	goto	l1614
 10617                           
 10618                           ; BSR set to: 0
 10619  001656  D015               	goto	u6940
 10620  001658                     l1613:
 10621                           
 10622                           ; BSR set to: 0
 10623                           
 10624                           ; BSR set to: 0
 10625  001658  0E17               	movlw	23
 10626  00165A  6586               	cpfsgt	___fttol@exp1& (0+255),b
 10627  00165C  D00F               	goto	l1619
 10628                           
 10629                           ; BSR set to: 0
 10630  00165E  0E00               	movlw	0
 10631  001660  6F78               	movwf	?___fttol& (0+255),b
 10632  001662  0E00               	movlw	0
 10633  001664  6F79               	movwf	(?___fttol+1)& (0+255),b
 10634  001666  0E00               	movlw	0
 10635  001668  6F7A               	movwf	(?___fttol+2)& (0+255),b
 10636  00166A  0E00               	movlw	0
 10637  00166C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 10638                           
 10639                           ; BSR set to: 0
 10640  00166E  0012               	return	
 10641  001670                     
 10642                           ; BSR set to: 0
 10643                           
 10644                           ; BSR set to: 0
 10645  001670  90D8               	bcf	status,0,c
 10646  001672  3782               	rlcf	___fttol@lval& (0+255),f,b
 10647  001674  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10648  001676  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10649  001678  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10650  00167A  0786               	decf	___fttol@exp1& (0+255),f,b
 10651  00167C                     l1619:
 10652                           
 10653                           ; BSR set to: 0
 10654                           
 10655                           ; BSR set to: 0
 10656  00167C  5186               	movf	___fttol@exp1& (0+255),w,b
 10657  00167E  A4D8               	btfss	status,2,c
 10658  001680  D7F7               	goto	l1620
 10659  001682                     u6940:
 10660                           
 10661                           ; BSR set to: 0
 10662                           
 10663                           ; BSR set to: 0
 10664                           
 10665                           ; BSR set to: 0
 10666  001682  5181               	movf	___fttol@sign1& (0+255),w,b
 10667  001684  B4D8               	btfsc	status,2,c
 10668  001686  D008               	goto	l1622
 10669                           
 10670                           ; BSR set to: 0
 10671  001688  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 10672  00168A  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 10673  00168C  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 10674  00168E  6D82               	negf	___fttol@lval& (0+255),b
 10675  001690  0E00               	movlw	0
 10676  001692  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10677  001694  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10678  001696  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10679  001698                     l1622:
 10680                           
 10681                           ; BSR set to: 0
 10682                           
 10683                           ; BSR set to: 0
 10684  001698  C082  F078         	movff	___fttol@lval,?___fttol
 10685  00169C  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 10686  0016A0  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 10687  0016A4  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 10688  0016A8  0012               	return	
 10689  0016AA                     __end_of___fttol:
 10690                           	opt stack 0
 10691                           tosu	equ	0xFFF
 10692                           tosh	equ	0xFFE
 10693                           tosl	equ	0xFFD
 10694                           pclath	equ	0xFFA
 10695                           tblptru	equ	0xFF8
 10696                           tblptrh	equ	0xFF7
 10697                           tblptrl	equ	0xFF6
 10698                           tablat	equ	0xFF5
 10699                           prodh	equ	0xFF4
 10700                           prodl	equ	0xFF3
 10701                           intcon	equ	0xFF2
 10702                           intcon2	equ	0xFF1
 10703                           postinc0	equ	0xFEE
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postdec1	equ	0xFE5
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           fsr2h	equ	0xFDA
 10713                           fsr2l	equ	0xFD9
 10714                           status	equ	0xFD8
 10715                           
 10716 ;; *************** function ___ftge *****************
 10717 ;; Defined at:
 10718 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 10719 ;; Parameters:    Size  Location     Type
 10720 ;;  ff1             3   23[COMRAM] float 
 10721 ;;  ff2             3   26[COMRAM] float 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;		None               void
 10726 ;; Registers used:
 10727 ;;		wreg, status,2, status,0
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10733 ;;      Params:         6       0       0       0       0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0
 10735 ;;      Temps:          3       0       0       0       0       0       0
 10736 ;;      Totals:         9       0       0       0       0       0       0
 10737 ;;Total ram usage:        9 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    3
 10740 ;; This function calls:
 10741 ;;		Nothing
 10742 ;; This function is called by:
 10743 ;;		_pow
 10744 ;;		_exp
 10745 ;;		_floor
 10746 ;;		_CheckFlashPrecentage
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           	psect	text47
 10751  001FA6                     __ptext47:
 10752                           	opt stack 0
 10753  001FA6                     ___ftge:
 10754                           	opt stack 23
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;incstack = 0
 10758  001FA6  AE1A               	btfss	___ftge@ff1+2,7,c
 10759  001FA8  D016               	goto	l1583
 10760  001FAA  C018  F01E         	movff	___ftge@ff1,??___ftge
 10761  001FAE  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 10762  001FB2  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 10763  001FB6  1E1E               	comf	??___ftge,f,c
 10764  001FB8  1E1F               	comf	??___ftge+1,f,c
 10765  001FBA  1E20               	comf	??___ftge+2,f,c
 10766  001FBC  2A1E               	incf	??___ftge,f,c
 10767  001FBE  0E00               	movlw	0
 10768  001FC0  221F               	addwfc	??___ftge+1,f,c
 10769  001FC2  2220               	addwfc	??___ftge+2,f,c
 10770  001FC4  0E00               	movlw	0
 10771  001FC6  241E               	addwf	??___ftge,w,c
 10772  001FC8  6E18               	movwf	___ftge@ff1,c
 10773  001FCA  0E00               	movlw	0
 10774  001FCC  201F               	addwfc	??___ftge+1,w,c
 10775  001FCE  6E19               	movwf	___ftge@ff1+1,c
 10776  001FD0  0E80               	movlw	128
 10777  001FD2  2020               	addwfc	??___ftge+2,w,c
 10778  001FD4  6E1A               	movwf	___ftge@ff1+2,c
 10779  001FD6                     l1583:
 10780  001FD6  AE1D               	btfss	___ftge@ff2+2,7,c
 10781  001FD8  D016               	goto	l1584
 10782  001FDA  C01B  F01E         	movff	___ftge@ff2,??___ftge
 10783  001FDE  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 10784  001FE2  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 10785  001FE6  1E1E               	comf	??___ftge,f,c
 10786  001FE8  1E1F               	comf	??___ftge+1,f,c
 10787  001FEA  1E20               	comf	??___ftge+2,f,c
 10788  001FEC  2A1E               	incf	??___ftge,f,c
 10789  001FEE  0E00               	movlw	0
 10790  001FF0  221F               	addwfc	??___ftge+1,f,c
 10791  001FF2  2220               	addwfc	??___ftge+2,f,c
 10792  001FF4  0E00               	movlw	0
 10793  001FF6  241E               	addwf	??___ftge,w,c
 10794  001FF8  6E1B               	movwf	___ftge@ff2,c
 10795  001FFA  0E00               	movlw	0
 10796  001FFC  201F               	addwfc	??___ftge+1,w,c
 10797  001FFE  6E1C               	movwf	___ftge@ff2+1,c
 10798  002000  0E80               	movlw	128
 10799  002002  2020               	addwfc	??___ftge+2,w,c
 10800  002004  6E1D               	movwf	___ftge@ff2+2,c
 10801  002006                     l1584:
 10802  002006  0E00               	movlw	0
 10803  002008  1A18               	xorwf	___ftge@ff1,f,c
 10804  00200A  0E00               	movlw	0
 10805  00200C  1A19               	xorwf	___ftge@ff1+1,f,c
 10806  00200E  0E80               	movlw	128
 10807  002010  1A1A               	xorwf	___ftge@ff1+2,f,c
 10808  002012  0E00               	movlw	0
 10809  002014  1A1B               	xorwf	___ftge@ff2,f,c
 10810  002016  0E00               	movlw	0
 10811  002018  1A1C               	xorwf	___ftge@ff2+1,f,c
 10812  00201A  0E80               	movlw	128
 10813  00201C  1A1D               	xorwf	___ftge@ff2+2,f,c
 10814  00201E  501B               	movf	___ftge@ff2,w,c
 10815  002020  5C18               	subwf	___ftge@ff1,w,c
 10816  002022  501C               	movf	___ftge@ff2+1,w,c
 10817  002024  5819               	subwfb	___ftge@ff1+1,w,c
 10818  002026  501D               	movf	___ftge@ff2+2,w,c
 10819  002028  581A               	subwfb	___ftge@ff1+2,w,c
 10820  00202A  B0D8               	btfsc	status,0,c
 10821  00202C  D002               	goto	l6155
 10822  00202E  90D8               	bcf	status,0,c
 10823  002030  0012               	return	
 10824  002032                     l6155:
 10825  002032  80D8               	bsf	status,0,c
 10826  002034  0012               	return	
 10827  002036                     __end_of___ftge:
 10828                           	opt stack 0
 10829                           tosu	equ	0xFFF
 10830                           tosh	equ	0xFFE
 10831                           tosl	equ	0xFFD
 10832                           pclath	equ	0xFFA
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           intcon2	equ	0xFF1
 10841                           postinc0	equ	0xFEE
 10842                           wreg	equ	0xFE8
 10843                           indf1	equ	0xFE7
 10844                           postdec1	equ	0xFE5
 10845                           fsr1h	equ	0xFE2
 10846                           fsr1l	equ	0xFE1
 10847                           indf2	equ	0xFDF
 10848                           postinc2	equ	0xFDE
 10849                           postdec2	equ	0xFDD
 10850                           fsr2h	equ	0xFDA
 10851                           fsr2l	equ	0xFD9
 10852                           status	equ	0xFD8
 10853                           
 10854 ;; *************** function ___altoft *****************
 10855 ;; Defined at:
 10856 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  c               4   31[COMRAM] long 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;  sign            1   40[COMRAM] unsigned char 
 10861 ;;  exp             1   39[COMRAM] unsigned char 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  3   31[COMRAM] float 
 10864 ;; Registers used:
 10865 ;;		wreg, status,2, status,0, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10871 ;;      Params:         4       0       0       0       0       0       0
 10872 ;;      Locals:         2       0       0       0       0       0       0
 10873 ;;      Temps:          4       0       0       0       0       0       0
 10874 ;;      Totals:        10       0       0       0       0       0       0
 10875 ;;Total ram usage:       10 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    4
 10878 ;; This function calls:
 10879 ;;		___ftpack
 10880 ;; This function is called by:
 10881 ;;		_CalcSynthRegParams
 10882 ;;		_floor
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text48
 10887  0020B8                     __ptext48:
 10888                           	opt stack 0
 10889  0020B8                     ___altoft:
 10890                           	opt stack 22
 10891                           
 10892                           ;incstack = 0
 10893  0020B8  0E00               	movlw	0
 10894  0020BA  6E29               	movwf	___altoft@sign,c
 10895  0020BC  0E8E               	movlw	142
 10896  0020BE  6E28               	movwf	___altoft@exp,c
 10897  0020C0  AE23               	btfss	___altoft@c+3,7,c
 10898  0020C2  D011               	goto	l1381
 10899  0020C4  1E23               	comf	___altoft@c+3,f,c
 10900  0020C6  1E22               	comf	___altoft@c+2,f,c
 10901  0020C8  1E21               	comf	___altoft@c+1,f,c
 10902  0020CA  6C20               	negf	___altoft@c,c
 10903  0020CC  0E00               	movlw	0
 10904  0020CE  2221               	addwfc	___altoft@c+1,f,c
 10905  0020D0  2222               	addwfc	___altoft@c+2,f,c
 10906  0020D2  2223               	addwfc	___altoft@c+3,f,c
 10907  0020D4  0E01               	movlw	1
 10908  0020D6  6E29               	movwf	___altoft@sign,c
 10909  0020D8  D006               	goto	l1381
 10910  0020DA  90D8               	bcf	status,0,c
 10911  0020DC  3223               	rrcf	___altoft@c+3,f,c
 10912  0020DE  3222               	rrcf	___altoft@c+2,f,c
 10913  0020E0  3221               	rrcf	___altoft@c+1,f,c
 10914  0020E2  3220               	rrcf	___altoft@c,f,c
 10915  0020E4  2A28               	incf	___altoft@exp,f,c
 10916  0020E6                     l1381:
 10917  0020E6  0E00               	movlw	0
 10918  0020E8  1420               	andwf	___altoft@c,w,c
 10919  0020EA  6E24               	movwf	??___altoft& (0+255),c
 10920  0020EC  0E00               	movlw	0
 10921  0020EE  1421               	andwf	___altoft@c+1,w,c
 10922  0020F0  6E25               	movwf	(??___altoft+1)& (0+255),c
 10923  0020F2  0E00               	movlw	0
 10924  0020F4  1422               	andwf	___altoft@c+2,w,c
 10925  0020F6  6E26               	movwf	(??___altoft+2)& (0+255),c
 10926  0020F8  0EFF               	movlw	255
 10927  0020FA  1423               	andwf	___altoft@c+3,w,c
 10928  0020FC  6E27               	movwf	(??___altoft+3)& (0+255),c
 10929  0020FE  5024               	movf	??___altoft,w,c
 10930  002100  1025               	iorwf	??___altoft+1,w,c
 10931  002102  1026               	iorwf	??___altoft+2,w,c
 10932  002104  1027               	iorwf	??___altoft+3,w,c
 10933  002106  A4D8               	btfss	status,2,c
 10934  002108  D7E8               	goto	l1382
 10935  00210A  C020  F018         	movff	___altoft@c,___ftpack@arg
 10936  00210E  C021  F019         	movff	___altoft@c+1,___ftpack@arg+1
 10937  002112  C022  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 10938  002116  C028  F01B         	movff	___altoft@exp,___ftpack@exp
 10939  00211A  C029  F01C         	movff	___altoft@sign,___ftpack@sign
 10940  00211E  EC52  F00E         	call	___ftpack	;wreg free
 10941  002122  C018  F020         	movff	?___ftpack,?___altoft
 10942  002126  C019  F021         	movff	?___ftpack+1,?___altoft+1
 10943  00212A  C01A  F022         	movff	?___ftpack+2,?___altoft+2
 10944  00212E  0012               	return	
 10945  002130                     __end_of___altoft:
 10946                           	opt stack 0
 10947                           tosu	equ	0xFFF
 10948                           tosh	equ	0xFFE
 10949                           tosl	equ	0xFFD
 10950                           pclath	equ	0xFFA
 10951                           tblptru	equ	0xFF8
 10952                           tblptrh	equ	0xFF7
 10953                           tblptrl	equ	0xFF6
 10954                           tablat	equ	0xFF5
 10955                           prodh	equ	0xFF4
 10956                           prodl	equ	0xFF3
 10957                           intcon	equ	0xFF2
 10958                           intcon2	equ	0xFF1
 10959                           postinc0	equ	0xFEE
 10960                           wreg	equ	0xFE8
 10961                           indf1	equ	0xFE7
 10962                           postdec1	equ	0xFE5
 10963                           fsr1h	equ	0xFE2
 10964                           fsr1l	equ	0xFE1
 10965                           indf2	equ	0xFDF
 10966                           postinc2	equ	0xFDE
 10967                           postdec2	equ	0xFDD
 10968                           fsr2h	equ	0xFDA
 10969                           fsr2l	equ	0xFD9
 10970                           status	equ	0xFD8
 10971                           
 10972 ;; *************** function _eval_poly *****************
 10973 ;; Defined at:
 10974 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;  x               3   57[BANK0 ] float 
 10977 ;;  d               2   60[BANK0 ] PTR const 
 10978 ;;		 -> log@coeff(27), exp@coeff(30), 
 10979 ;;  n               2   62[BANK0 ] int 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;  res             3   66[BANK0 ] int 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  3   57[BANK0 ] int 
 10984 ;; Registers used:
 10985 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10991 ;;      Params:         0       7       0       0       0       0       0
 10992 ;;      Locals:         0       3       0       0       0       0       0
 10993 ;;      Temps:          0       2       0       0       0       0       0
 10994 ;;      Totals:         0      12       0       0       0       0       0
 10995 ;;Total ram usage:       12 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    5
 10998 ;; This function calls:
 10999 ;;		___ftadd
 11000 ;;		___ftmul
 11001 ;;		___wmul
 11002 ;; This function is called by:
 11003 ;;		_exp
 11004 ;;		_log
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text49
 11009  001A44                     __ptext49:
 11010                           	opt stack 0
 11011  001A44                     _eval_poly:
 11012                           	opt stack 22
 11013                           
 11014                           ;incstack = 0
 11015  001A44  C09E  F018         	movff	eval_poly@n,___wmul@multiplier
 11016  001A48  C09F  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 11017  001A4C  0E00               	movlw	0
 11018  001A4E  6E1B               	movwf	___wmul@multiplicand+1,c
 11019  001A50  0E03               	movlw	3
 11020  001A52  6E1A               	movwf	___wmul@multiplicand,c
 11021  001A54  EC9C  F015         	call	___wmul	;wreg free
 11022  001A58  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 11023  001A5C  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 11024  001A60  5018               	movf	?___wmul,w,c
 11025  001A62  0100               	movlb	0	; () banked
 11026  001A64  27A0               	addwf	??_eval_poly& (0+255),f,b
 11027  001A66  5019               	movf	?___wmul+1,w,c
 11028  001A68  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 11029  001A6A  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 11030  001A6E  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 11031  001A72                     	if	0	;tblptru may be non-zero
 11032  001A72                     	endif
 11033  001A72                     	if	0	;tblptru may be non-zero
 11034  001A72                     	endif
 11035  001A72  0009               	tblrd		*+
 11036  001A74  CFF5 F0A2          	movff	tablat,eval_poly@res
 11037  001A78  0009               	tblrd		*+
 11038  001A7A  CFF5 F0A3          	movff	tablat,eval_poly@res+1
 11039  001A7E  000A               	tblrd		*-
 11040  001A80  CFF5 F0A4          	movff	tablat,eval_poly@res+2
 11041  001A84  D040               	goto	l2006
 11042  001A86                     
 11043                           ; BSR set to: 0
 11044                           
 11045                           ; BSR set to: 0
 11046  001A86  C0A2  F06C         	movff	eval_poly@res,___ftmul@f2
 11047  001A8A  C0A3  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 11048  001A8E  C0A4  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 11049  001A92  C099  F069         	movff	eval_poly@x,___ftmul@f1
 11050  001A96  C09A  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 11051  001A9A  C09B  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 11052  001A9E  EC55  F00B         	call	___ftmul	;wreg free
 11053  001AA2  C069  F08D         	movff	?___ftmul,___ftadd@f1
 11054  001AA6  C06A  F08E         	movff	?___ftmul+1,___ftadd@f1+1
 11055  001AAA  C06B  F08F         	movff	?___ftmul+2,___ftadd@f1+2
 11056  001AAE  0E00               	movlw	0
 11057  001AB0  6E1B               	movwf	___wmul@multiplicand+1,c
 11058  001AB2  0E03               	movlw	3
 11059  001AB4  6E1A               	movwf	___wmul@multiplicand,c
 11060  001AB6  0100               	movlb	0	; () banked
 11061  001AB8  079E               	decf	eval_poly@n& (0+255),f,b
 11062  001ABA  A0D8               	btfss	status,0,c
 11063  001ABC  079F               	decf	(eval_poly@n+1)& (0+255),f,b
 11064  001ABE  C09E  F018         	movff	eval_poly@n,___wmul@multiplier
 11065  001AC2  C09F  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 11066  001AC6  EC9C  F015         	call	___wmul	;wreg free
 11067  001ACA  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
 11068  001ACE  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
 11069  001AD2  5018               	movf	?___wmul,w,c
 11070  001AD4  0100               	movlb	0	; () banked
 11071  001AD6  27A0               	addwf	??_eval_poly& (0+255),f,b
 11072  001AD8  5019               	movf	?___wmul+1,w,c
 11073  001ADA  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
 11074  001ADC  C0A0  FFF6         	movff	??_eval_poly,tblptrl
 11075  001AE0  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
 11076  001AE4                     	if	0	;tblptru may be non-zero
 11077  001AE4                     	endif
 11078  001AE4                     	if	0	;tblptru may be non-zero
 11079  001AE4                     	endif
 11080  001AE4  0009               	tblrd		*+
 11081  001AE6  CFF5 F090          	movff	tablat,___ftadd@f2
 11082  001AEA  0009               	tblrd		*+
 11083  001AEC  CFF5 F091          	movff	tablat,___ftadd@f2+1
 11084  001AF0  000A               	tblrd		*-
 11085  001AF2  CFF5 F092          	movff	tablat,___ftadd@f2+2
 11086  001AF6  EC80  F007         	call	___ftadd	;wreg free
 11087  001AFA  C08D  F0A2         	movff	?___ftadd,eval_poly@res
 11088  001AFE  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
 11089  001B02  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
 11090  001B06                     l2006:
 11091  001B06  0100               	movlb	0	; () banked
 11092  001B08  519E               	movf	eval_poly@n& (0+255),w,b
 11093  001B0A  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
 11094  001B0C  A4D8               	btfss	status,2,c
 11095  001B0E  D7BB               	goto	l2007
 11096                           
 11097                           ; BSR set to: 0
 11098  001B10  C0A2  F099         	movff	eval_poly@res,?_eval_poly
 11099  001B14  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
 11100  001B18  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
 11101                           
 11102                           ; BSR set to: 0
 11103  001B1C  0012               	return		;funcret
 11104  001B1E                     __end_of_eval_poly:
 11105                           	opt stack 0
 11106                           tosu	equ	0xFFF
 11107                           tosh	equ	0xFFE
 11108                           tosl	equ	0xFFD
 11109                           pclath	equ	0xFFA
 11110                           tblptru	equ	0xFF8
 11111                           tblptrh	equ	0xFF7
 11112                           tblptrl	equ	0xFF6
 11113                           tablat	equ	0xFF5
 11114                           prodh	equ	0xFF4
 11115                           prodl	equ	0xFF3
 11116                           intcon	equ	0xFF2
 11117                           intcon2	equ	0xFF1
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           indf1	equ	0xFE7
 11121                           postdec1	equ	0xFE5
 11122                           fsr1h	equ	0xFE2
 11123                           fsr1l	equ	0xFE1
 11124                           indf2	equ	0xFDF
 11125                           postinc2	equ	0xFDE
 11126                           postdec2	equ	0xFDD
 11127                           fsr2h	equ	0xFDA
 11128                           fsr2l	equ	0xFD9
 11129                           status	equ	0xFD8
 11130                           
 11131 ;; *************** function ___wmul *****************
 11132 ;; Defined at:
 11133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  multiplier      2   23[COMRAM] unsigned int 
 11136 ;;  multiplicand    2   25[COMRAM] unsigned int 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;  product         2   27[COMRAM] unsigned int 
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  2   23[COMRAM] unsigned int 
 11141 ;; Registers used:
 11142 ;;		wreg, status,2, status,0, prodl, prodh
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11148 ;;      Params:         4       0       0       0       0       0       0
 11149 ;;      Locals:         2       0       0       0       0       0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0
 11151 ;;      Totals:         6       0       0       0       0       0       0
 11152 ;;Total ram usage:        6 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    3
 11155 ;; This function calls:
 11156 ;;		Nothing
 11157 ;; This function is called by:
 11158 ;;		_eval_poly
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           	psect	text50
 11163  002B38                     __ptext50:
 11164                           	opt stack 0
 11165  002B38                     ___wmul:
 11166                           	opt stack 23
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;incstack = 0
 11170  002B38  5018               	movf	___wmul@multiplier,w,c
 11171  002B3A  021A               	mulwf	___wmul@multiplicand,c
 11172  002B3C  CFF3 F01C          	movff	prodl,___wmul@product
 11173  002B40  CFF4 F01D          	movff	prodh,___wmul@product+1
 11174  002B44  5018               	movf	___wmul@multiplier,w,c
 11175  002B46  021B               	mulwf	___wmul@multiplicand+1,c
 11176  002B48  50F3               	movf	prodl,w,c
 11177  002B4A  261D               	addwf	___wmul@product+1,f,c
 11178  002B4C  5019               	movf	___wmul@multiplier+1,w,c
 11179  002B4E  021A               	mulwf	___wmul@multiplicand,c
 11180  002B50  50F3               	movf	prodl,w,c
 11181  002B52  261D               	addwf	___wmul@product+1,f,c
 11182  002B54  C01C  F018         	movff	___wmul@product,?___wmul
 11183  002B58  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 11184  002B5C  0012               	return	
 11185  002B5E                     __end_of___wmul:
 11186                           	opt stack 0
 11187                           tosu	equ	0xFFF
 11188                           tosh	equ	0xFFE
 11189                           tosl	equ	0xFFD
 11190                           pclath	equ	0xFFA
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           intcon2	equ	0xFF1
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           indf1	equ	0xFE7
 11202                           postdec1	equ	0xFE5
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function ___ftmul *****************
 11213 ;; Defined at:
 11214 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  f1              3    9[BANK0 ] float 
 11217 ;;  f2              3   12[BANK0 ] float 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 11220 ;;  sign            1   23[BANK0 ] unsigned char 
 11221 ;;  cntr            1   22[BANK0 ] unsigned char 
 11222 ;;  exp             1   18[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  3    9[BANK0 ] float 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11232 ;;      Params:         0       6       0       0       0       0       0
 11233 ;;      Locals:         0       6       0       0       0       0       0
 11234 ;;      Temps:          0       3       0       0       0       0       0
 11235 ;;      Totals:         0      15       0       0       0       0       0
 11236 ;;Total ram usage:       15 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    4
 11239 ;; This function calls:
 11240 ;;		___ftpack
 11241 ;; This function is called by:
 11242 ;;		_SampleSingleChannel
 11243 ;;		_CalcSynthRegParams
 11244 ;;		_pow
 11245 ;;		_exp
 11246 ;;		_log
 11247 ;;		_eval_poly
 11248 ;;		_CheckFlashPrecentage
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           	psect	text51
 11253  0016AA                     __ptext51:
 11254                           	opt stack 0
 11255  0016AA                     ___ftmul:
 11256                           	opt stack 22
 11257                           
 11258                           ;incstack = 0
 11259  0016AA  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 11260  0016AE  0100               	movlb	0	; () banked
 11261  0016B0  6B70               	clrf	(??___ftmul+1)& (0+255),b
 11262  0016B2  6B71               	clrf	(??___ftmul+2)& (0+255),b
 11263  0016B4  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 11264  0016B6  376F               	rlcf	??___ftmul& (0+255),f,b
 11265  0016B8  E301               	bnc	u6771
 11266  0016BA  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 11267  0016BC                     u6771:
 11268  0016BC  516F               	movf	??___ftmul& (0+255),w,b
 11269  0016BE  6F72               	movwf	___ftmul@exp& (0+255),b
 11270  0016C0  5172               	movf	___ftmul@exp& (0+255),w,b
 11271  0016C2  A4D8               	btfss	status,2,c
 11272  0016C4  D007               	goto	l1590
 11273                           
 11274                           ; BSR set to: 0
 11275  0016C6  0E00               	movlw	0
 11276  0016C8  6F69               	movwf	?___ftmul& (0+255),b
 11277  0016CA  0E00               	movlw	0
 11278  0016CC  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 11279  0016CE  0E00               	movlw	0
 11280  0016D0  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 11281                           
 11282                           ; BSR set to: 0
 11283  0016D2  0012               	return	
 11284  0016D4                     l1590:
 11285                           
 11286                           ; BSR set to: 0
 11287                           
 11288                           ; BSR set to: 0
 11289  0016D4  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 11290  0016D8  6B70               	clrf	(??___ftmul+1)& (0+255),b
 11291  0016DA  6B71               	clrf	(??___ftmul+2)& (0+255),b
 11292  0016DC  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 11293  0016DE  376F               	rlcf	??___ftmul& (0+255),f,b
 11294  0016E0  E301               	bnc	u6791
 11295  0016E2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 11296  0016E4                     u6791:
 11297  0016E4  516F               	movf	??___ftmul& (0+255),w,b
 11298  0016E6  6F77               	movwf	___ftmul@sign& (0+255),b
 11299  0016E8  5177               	movf	___ftmul@sign& (0+255),w,b
 11300  0016EA  A4D8               	btfss	status,2,c
 11301  0016EC  D007               	goto	l1592
 11302                           
 11303                           ; BSR set to: 0
 11304  0016EE  0E00               	movlw	0
 11305  0016F0  6F69               	movwf	?___ftmul& (0+255),b
 11306  0016F2  0E00               	movlw	0
 11307  0016F4  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 11308  0016F6  0E00               	movlw	0
 11309  0016F8  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312  0016FA  0012               	return	
 11313  0016FC                     l1592:
 11314                           
 11315                           ; BSR set to: 0
 11316                           
 11317                           ; BSR set to: 0
 11318  0016FC  5177               	movf	___ftmul@sign& (0+255),w,b
 11319  0016FE  0F7B               	addlw	123
 11320  001700  2772               	addwf	___ftmul@exp& (0+255),f,b
 11321                           
 11322                           ; BSR set to: 0
 11323  001702  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 11324  001706  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11325  001708  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 11326  00170A  0E80               	movlw	128
 11327  00170C  1777               	andwf	___ftmul@sign& (0+255),f,b
 11328                           
 11329                           ; BSR set to: 0
 11330  00170E  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11331                           
 11332                           ; BSR set to: 0
 11333  001710  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11334                           
 11335                           ; BSR set to: 0
 11336  001712  0EFF               	movlw	255
 11337  001714  176C               	andwf	___ftmul@f2& (0+255),f,b
 11338  001716  0EFF               	movlw	255
 11339  001718  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 11340  00171A  0E00               	movlw	0
 11341  00171C  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11342                           
 11343                           ; BSR set to: 0
 11344  00171E  0E00               	movlw	0
 11345  001720  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 11346  001722  0E00               	movlw	0
 11347  001724  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 11348  001726  0E00               	movlw	0
 11349  001728  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352  00172A  0E07               	movlw	7
 11353  00172C  6F76               	movwf	___ftmul@cntr& (0+255),b
 11354  00172E                     
 11355                           ; BSR set to: 0
 11356                           
 11357                           ; BSR set to: 0
 11358  00172E  A169               	btfss	___ftmul@f1& (0+255),0,b
 11359  001730  D006               	goto	l1594
 11360                           
 11361                           ; BSR set to: 0
 11362  001732  516C               	movf	___ftmul@f2& (0+255),w,b
 11363  001734  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11364  001736  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11365  001738  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11366  00173A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11367  00173C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11368  00173E                     l1594:
 11369                           
 11370                           ; BSR set to: 0
 11371                           
 11372                           ; BSR set to: 0
 11373  00173E  90D8               	bcf	status,0,c
 11374  001740  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11375  001742  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11376  001744  3369               	rrcf	___ftmul@f1& (0+255),f,b
 11377  001746  90D8               	bcf	status,0,c
 11378  001748  376C               	rlcf	___ftmul@f2& (0+255),f,b
 11379  00174A  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11380  00174C  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11381                           
 11382                           ; BSR set to: 0
 11383  00174E  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 11384  001750  D7EE               	goto	l1593
 11385                           
 11386                           ; BSR set to: 0
 11387                           
 11388                           ; BSR set to: 0
 11389  001752  0E09               	movlw	9
 11390  001754  6F76               	movwf	___ftmul@cntr& (0+255),b
 11391  001756                     
 11392                           ; BSR set to: 0
 11393                           
 11394                           ; BSR set to: 0
 11395  001756  A169               	btfss	___ftmul@f1& (0+255),0,b
 11396  001758  D006               	goto	l1597
 11397                           
 11398                           ; BSR set to: 0
 11399  00175A  516C               	movf	___ftmul@f2& (0+255),w,b
 11400  00175C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11401  00175E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 11402  001760  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11403  001762  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 11404  001764  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11405  001766                     l1597:
 11406                           
 11407                           ; BSR set to: 0
 11408                           
 11409                           ; BSR set to: 0
 11410  001766  90D8               	bcf	status,0,c
 11411  001768  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11412  00176A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11413  00176C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 11414  00176E  90D8               	bcf	status,0,c
 11415  001770  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11416  001772  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11417  001774  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11418                           
 11419                           ; BSR set to: 0
 11420  001776  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 11421  001778  D7EE               	goto	l1596
 11422                           
 11423                           ; BSR set to: 0
 11424                           
 11425                           ; BSR set to: 0
 11426  00177A  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 11427  00177E  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11428  001782  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11429  001786  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 11430  00178A  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 11431  00178E  EC52  F00E         	call	___ftpack	;wreg free
 11432  001792  C018  F069         	movff	?___ftpack,?___ftmul
 11433  001796  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 11434  00179A  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 11435  00179E  0012               	return	
 11436  0017A0                     __end_of___ftmul:
 11437                           	opt stack 0
 11438                           tosu	equ	0xFFF
 11439                           tosh	equ	0xFFE
 11440                           tosl	equ	0xFFD
 11441                           pclath	equ	0xFFA
 11442                           tblptru	equ	0xFF8
 11443                           tblptrh	equ	0xFF7
 11444                           tblptrl	equ	0xFF6
 11445                           tablat	equ	0xFF5
 11446                           prodh	equ	0xFF4
 11447                           prodl	equ	0xFF3
 11448                           intcon	equ	0xFF2
 11449                           intcon2	equ	0xFF1
 11450                           postinc0	equ	0xFEE
 11451                           wreg	equ	0xFE8
 11452                           indf1	equ	0xFE7
 11453                           postdec1	equ	0xFE5
 11454                           fsr1h	equ	0xFE2
 11455                           fsr1l	equ	0xFE1
 11456                           indf2	equ	0xFDF
 11457                           postinc2	equ	0xFDE
 11458                           postdec2	equ	0xFDD
 11459                           fsr2h	equ	0xFDA
 11460                           fsr2l	equ	0xFD9
 11461                           status	equ	0xFD8
 11462                           
 11463 ;; *************** function ___ftsub *****************
 11464 ;; Defined at:
 11465 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;  f1              3   57[BANK0 ] float 
 11468 ;;  f2              3   60[BANK0 ] float 
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;		None
 11471 ;; Return value:  Size  Location     Type
 11472 ;;                  3   57[BANK0 ] float 
 11473 ;; Registers used:
 11474 ;;		wreg, status,2, status,0, cstack
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11480 ;;      Params:         0       6       0       0       0       0       0
 11481 ;;      Locals:         0       0       0       0       0       0       0
 11482 ;;      Temps:          0       0       0       0       0       0       0
 11483 ;;      Totals:         0       6       0       0       0       0       0
 11484 ;;Total ram usage:        6 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:    5
 11487 ;; This function calls:
 11488 ;;		___ftadd
 11489 ;; This function is called by:
 11490 ;;		_exp
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text52
 11495  002884                     __ptext52:
 11496                           	opt stack 0
 11497  002884                     ___ftsub:
 11498                           	opt stack 22
 11499                           
 11500                           ;incstack = 0
 11501  002884  0100               	movlb	0	; () banked
 11502  002886  519C               	movf	___ftsub@f2& (0+255),w,b
 11503  002888  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11504  00288A  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11505  00288C  B4D8               	btfsc	status,2,c
 11506  00288E  D006               	goto	l1607
 11507                           
 11508                           ; BSR set to: 0
 11509  002890  0E00               	movlw	0
 11510  002892  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 11511  002894  0E00               	movlw	0
 11512  002896  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11513  002898  0E80               	movlw	128
 11514  00289A  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11515  00289C                     l1607:
 11516                           
 11517                           ; BSR set to: 0
 11518                           
 11519                           ; BSR set to: 0
 11520  00289C  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 11521  0028A0  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11522  0028A4  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11523  0028A8  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 11524  0028AC  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 11525  0028B0  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 11526  0028B4  EC80  F007         	call	___ftadd	;wreg free
 11527  0028B8  C08D  F099         	movff	?___ftadd,?___ftsub
 11528  0028BC  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 11529  0028C0  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 11530  0028C4  0012               	return	
 11531  0028C6                     __end_of___ftsub:
 11532                           	opt stack 0
 11533                           tosu	equ	0xFFF
 11534                           tosh	equ	0xFFE
 11535                           tosl	equ	0xFFD
 11536                           pclath	equ	0xFFA
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodh	equ	0xFF4
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           intcon2	equ	0xFF1
 11545                           postinc0	equ	0xFEE
 11546                           wreg	equ	0xFE8
 11547                           indf1	equ	0xFE7
 11548                           postdec1	equ	0xFE5
 11549                           fsr1h	equ	0xFE2
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           postdec2	equ	0xFDD
 11554                           fsr2h	equ	0xFDA
 11555                           fsr2l	equ	0xFD9
 11556                           status	equ	0xFD8
 11557                           
 11558 ;; *************** function ___ftadd *****************
 11559 ;; Defined at:
 11560 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;  f1              3   45[BANK0 ] float 
 11563 ;;  f2              3   48[BANK0 ] float 
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;  exp1            1   56[BANK0 ] unsigned char 
 11566 ;;  exp2            1   55[BANK0 ] unsigned char 
 11567 ;;  sign            1   54[BANK0 ] unsigned char 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;                  3   45[BANK0 ] float 
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0, cstack
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11577 ;;      Params:         0       6       0       0       0       0       0
 11578 ;;      Locals:         0       3       0       0       0       0       0
 11579 ;;      Temps:          0       3       0       0       0       0       0
 11580 ;;      Totals:         0      12       0       0       0       0       0
 11581 ;;Total ram usage:       12 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    4
 11584 ;; This function calls:
 11585 ;;		___ftpack
 11586 ;; This function is called by:
 11587 ;;		_CalcSynthRegParams
 11588 ;;		___ftsub
 11589 ;;		_floor
 11590 ;;		_log
 11591 ;;		_eval_poly
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text53
 11596  000F00                     __ptext53:
 11597                           	opt stack 0
 11598  000F00                     ___ftadd:
 11599                           	opt stack 22
 11600                           
 11601                           ;incstack = 0
 11602  000F00  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 11603  000F04  0100               	movlb	0	; () banked
 11604  000F06  6B94               	clrf	(??___ftadd+1)& (0+255),b
 11605  000F08  6B95               	clrf	(??___ftadd+2)& (0+255),b
 11606  000F0A  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11607  000F0C  3793               	rlcf	??___ftadd& (0+255),f,b
 11608  000F0E  E301               	bnc	u6511
 11609  000F10  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 11610  000F12                     u6511:
 11611  000F12  5193               	movf	??___ftadd& (0+255),w,b
 11612  000F14  6F98               	movwf	___ftadd@exp1& (0+255),b
 11613  000F16  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 11614  000F1A  6B94               	clrf	(??___ftadd+1)& (0+255),b
 11615  000F1C  6B95               	clrf	(??___ftadd+2)& (0+255),b
 11616  000F1E  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11617  000F20  3793               	rlcf	??___ftadd& (0+255),f,b
 11618  000F22  E301               	bnc	u6521
 11619  000F24  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 11620  000F26                     u6521:
 11621  000F26  5193               	movf	??___ftadd& (0+255),w,b
 11622  000F28  6F97               	movwf	___ftadd@exp2& (0+255),b
 11623                           
 11624                           ; BSR set to: 0
 11625  000F2A  5198               	movf	___ftadd@exp1& (0+255),w,b
 11626  000F2C  B4D8               	btfsc	status,2,c
 11627  000F2E  D00B               	goto	u6550
 11628                           
 11629                           ; BSR set to: 0
 11630  000F30  5197               	movf	___ftadd@exp2& (0+255),w,b
 11631  000F32  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 11632  000F34  B0D8               	btfsc	status,0,c
 11633  000F36  D00E               	goto	l1542
 11634                           
 11635                           ; BSR set to: 0
 11636  000F38  5198               	movf	___ftadd@exp1& (0+255),w,b
 11637  000F3A  0800               	sublw	0
 11638  000F3C  2597               	addwf	___ftadd@exp2& (0+255),w,b
 11639  000F3E  6F93               	movwf	??___ftadd& (0+255),b
 11640  000F40  0E18               	movlw	24
 11641  000F42  6593               	cpfsgt	??___ftadd& (0+255),b
 11642  000F44  D007               	goto	l1542
 11643  000F46                     u6550:
 11644                           
 11645                           ; BSR set to: 0
 11646  000F46  C090  F08D         	movff	___ftadd@f2,?___ftadd
 11647  000F4A  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 11648  000F4E  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 11649  000F52  0012               	return	
 11650  000F54                     l1542:
 11651                           
 11652                           ; BSR set to: 0
 11653                           
 11654                           ; BSR set to: 0
 11655  000F54  5197               	movf	___ftadd@exp2& (0+255),w,b
 11656  000F56  B4D8               	btfsc	status,2,c
 11657  000F58  D00B               	goto	u6580
 11658                           
 11659                           ; BSR set to: 0
 11660  000F5A  5198               	movf	___ftadd@exp1& (0+255),w,b
 11661  000F5C  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 11662  000F5E  B0D8               	btfsc	status,0,c
 11663  000F60  D00E               	goto	l1546
 11664                           
 11665                           ; BSR set to: 0
 11666  000F62  5197               	movf	___ftadd@exp2& (0+255),w,b
 11667  000F64  0800               	sublw	0
 11668  000F66  2598               	addwf	___ftadd@exp1& (0+255),w,b
 11669  000F68  6F93               	movwf	??___ftadd& (0+255),b
 11670  000F6A  0E18               	movlw	24
 11671  000F6C  6593               	cpfsgt	??___ftadd& (0+255),b
 11672  000F6E  D007               	goto	l1546
 11673  000F70                     u6580:
 11674                           
 11675                           ; BSR set to: 0
 11676  000F70  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 11677  000F74  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 11678  000F78  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 11679  000F7C  0012               	return	
 11680  000F7E                     l1546:
 11681                           
 11682                           ; BSR set to: 0
 11683                           
 11684                           ; BSR set to: 0
 11685  000F7E  0E06               	movlw	6
 11686  000F80  6F96               	movwf	___ftadd@sign& (0+255),b
 11687                           
 11688                           ; BSR set to: 0
 11689  000F82  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 11690                           
 11691                           ; BSR set to: 0
 11692  000F84  8F96               	bsf	___ftadd@sign& (0+255),7,b
 11693                           
 11694                           ; BSR set to: 0
 11695                           
 11696                           ; BSR set to: 0
 11697  000F86  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 11698                           
 11699                           ; BSR set to: 0
 11700  000F88  8D96               	bsf	___ftadd@sign& (0+255),6,b
 11701                           
 11702                           ; BSR set to: 0
 11703  000F8A  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11704                           
 11705                           ; BSR set to: 0
 11706  000F8C  0EFF               	movlw	255
 11707  000F8E  178D               	andwf	___ftadd@f1& (0+255),f,b
 11708  000F90  0EFF               	movlw	255
 11709  000F92  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11710  000F94  0E00               	movlw	0
 11711  000F96  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11712  000F98  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11713                           
 11714                           ; BSR set to: 0
 11715  000F9A  0EFF               	movlw	255
 11716  000F9C  1790               	andwf	___ftadd@f2& (0+255),f,b
 11717  000F9E  0EFF               	movlw	255
 11718  000FA0  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11719  000FA2  0E00               	movlw	0
 11720  000FA4  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11721                           
 11722                           ; BSR set to: 0
 11723  000FA6  5197               	movf	___ftadd@exp2& (0+255),w,b
 11724  000FA8  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 11725  000FAA  B0D8               	btfsc	status,0,c
 11726  000FAC  D01B               	goto	l1551
 11727  000FAE                     u6610:
 11728                           
 11729                           ; BSR set to: 0
 11730                           
 11731                           ; BSR set to: 0
 11732  000FAE  90D8               	bcf	status,0,c
 11733  000FB0  3790               	rlcf	___ftadd@f2& (0+255),f,b
 11734  000FB2  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11735  000FB4  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11736  000FB6  0797               	decf	___ftadd@exp2& (0+255),f,b
 11737                           
 11738                           ; BSR set to: 0
 11739  000FB8  5198               	movf	___ftadd@exp1& (0+255),w,b
 11740  000FBA  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 11741  000FBC  B4D8               	btfsc	status,2,c
 11742  000FBE  D00D               	goto	l1556
 11743                           
 11744                           ; BSR set to: 0
 11745  000FC0  0796               	decf	___ftadd@sign& (0+255),f,b
 11746  000FC2  C096  F093         	movff	___ftadd@sign,??___ftadd
 11747  000FC6  0E07               	movlw	7
 11748  000FC8  1793               	andwf	??___ftadd& (0+255),f,b
 11749  000FCA  B4D8               	btfsc	status,2,c
 11750  000FCC  D006               	goto	l1556
 11751  000FCE  D7EF               	goto	u6610
 11752  000FD0                     
 11753                           ; BSR set to: 0
 11754                           
 11755                           ; BSR set to: 0
 11756  000FD0  90D8               	bcf	status,0,c
 11757  000FD2  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11758  000FD4  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11759  000FD6  338D               	rrcf	___ftadd@f1& (0+255),f,b
 11760  000FD8  2B98               	incf	___ftadd@exp1& (0+255),f,b
 11761  000FDA                     l1556:
 11762                           
 11763                           ; BSR set to: 0
 11764                           
 11765                           ; BSR set to: 0
 11766  000FDA  5197               	movf	___ftadd@exp2& (0+255),w,b
 11767  000FDC  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 11768  000FDE  B4D8               	btfsc	status,2,c
 11769  000FE0  D01F               	goto	u6680
 11770  000FE2  D7F6               	goto	l1557
 11771  000FE4                     l1551:
 11772                           
 11773                           ; BSR set to: 0
 11774                           
 11775                           ; BSR set to: 0
 11776  000FE4  5198               	movf	___ftadd@exp1& (0+255),w,b
 11777  000FE6  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 11778  000FE8  B0D8               	btfsc	status,0,c
 11779  000FEA  D01A               	goto	u6680
 11780  000FEC                     u6650:
 11781                           
 11782                           ; BSR set to: 0
 11783                           
 11784                           ; BSR set to: 0
 11785  000FEC  90D8               	bcf	status,0,c
 11786  000FEE  378D               	rlcf	___ftadd@f1& (0+255),f,b
 11787  000FF0  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11788  000FF2  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11789  000FF4  0798               	decf	___ftadd@exp1& (0+255),f,b
 11790                           
 11791                           ; BSR set to: 0
 11792  000FF6  5198               	movf	___ftadd@exp1& (0+255),w,b
 11793  000FF8  1997               	xorwf	___ftadd@exp2& (0+255),w,b
 11794  000FFA  B4D8               	btfsc	status,2,c
 11795  000FFC  D00D               	goto	l1565
 11796                           
 11797                           ; BSR set to: 0
 11798  000FFE  0796               	decf	___ftadd@sign& (0+255),f,b
 11799  001000  C096  F093         	movff	___ftadd@sign,??___ftadd
 11800  001004  0E07               	movlw	7
 11801  001006  1793               	andwf	??___ftadd& (0+255),f,b
 11802  001008  B4D8               	btfsc	status,2,c
 11803  00100A  D006               	goto	l1565
 11804  00100C  D7EF               	goto	u6650
 11805  00100E                     
 11806                           ; BSR set to: 0
 11807                           
 11808                           ; BSR set to: 0
 11809  00100E  90D8               	bcf	status,0,c
 11810  001010  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11811  001012  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11812  001014  3390               	rrcf	___ftadd@f2& (0+255),f,b
 11813  001016  2B97               	incf	___ftadd@exp2& (0+255),f,b
 11814  001018                     l1565:
 11815                           
 11816                           ; BSR set to: 0
 11817                           
 11818                           ; BSR set to: 0
 11819  001018  5197               	movf	___ftadd@exp2& (0+255),w,b
 11820  00101A  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 11821  00101C  A4D8               	btfss	status,2,c
 11822  00101E  D7F7               	goto	l1566
 11823  001020                     u6680:
 11824                           
 11825                           ; BSR set to: 0
 11826                           
 11827                           ; BSR set to: 0
 11828                           
 11829                           ; BSR set to: 0
 11830  001020  AF96               	btfss	___ftadd@sign& (0+255),7,b
 11831  001022  D00C               	goto	l1568
 11832                           
 11833                           ; BSR set to: 0
 11834  001024  0EFF               	movlw	255
 11835  001026  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 11836  001028  0EFF               	movlw	255
 11837  00102A  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11838  00102C  0EFF               	movlw	255
 11839  00102E  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11840  001030  0E01               	movlw	1
 11841  001032  278D               	addwf	___ftadd@f1& (0+255),f,b
 11842  001034  0E00               	movlw	0
 11843  001036  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11844  001038  0E00               	movlw	0
 11845  00103A  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11846  00103C                     l1568:
 11847                           
 11848                           ; BSR set to: 0
 11849  00103C  AD96               	btfss	___ftadd@sign& (0+255),6,b
 11850  00103E  D00C               	goto	l1569
 11851                           
 11852                           ; BSR set to: 0
 11853  001040  0EFF               	movlw	255
 11854  001042  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 11855  001044  0EFF               	movlw	255
 11856  001046  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11857  001048  0EFF               	movlw	255
 11858  00104A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11859  00104C  0E01               	movlw	1
 11860  00104E  2790               	addwf	___ftadd@f2& (0+255),f,b
 11861  001050  0E00               	movlw	0
 11862  001052  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11863  001054  0E00               	movlw	0
 11864  001056  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11865  001058                     l1569:
 11866                           
 11867                           ; BSR set to: 0
 11868                           
 11869                           ; BSR set to: 0
 11870  001058  0E00               	movlw	0
 11871  00105A  6F96               	movwf	___ftadd@sign& (0+255),b
 11872                           
 11873                           ; BSR set to: 0
 11874  00105C  518D               	movf	___ftadd@f1& (0+255),w,b
 11875  00105E  2790               	addwf	___ftadd@f2& (0+255),f,b
 11876  001060  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 11877  001062  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11878  001064  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 11879  001066  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11880                           
 11881                           ; BSR set to: 0
 11882  001068  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11883  00106A  D00E               	goto	l1570
 11884                           
 11885                           ; BSR set to: 0
 11886  00106C  0EFF               	movlw	255
 11887  00106E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 11888  001070  0EFF               	movlw	255
 11889  001072  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11890  001074  0EFF               	movlw	255
 11891  001076  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11892  001078  0E01               	movlw	1
 11893  00107A  2790               	addwf	___ftadd@f2& (0+255),f,b
 11894  00107C  0E00               	movlw	0
 11895  00107E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11896  001080  0E00               	movlw	0
 11897  001082  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11898                           
 11899                           ; BSR set to: 0
 11900  001084  0E01               	movlw	1
 11901  001086  6F96               	movwf	___ftadd@sign& (0+255),b
 11902  001088                     l1570:
 11903                           
 11904                           ; BSR set to: 0
 11905                           
 11906                           ; BSR set to: 0
 11907  001088  C090  F018         	movff	___ftadd@f2,___ftpack@arg
 11908  00108C  C091  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 11909  001090  C092  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 11910  001094  C098  F01B         	movff	___ftadd@exp1,___ftpack@exp
 11911  001098  C096  F01C         	movff	___ftadd@sign,___ftpack@sign
 11912  00109C  EC52  F00E         	call	___ftpack	;wreg free
 11913  0010A0  C018  F08D         	movff	?___ftpack,?___ftadd
 11914  0010A4  C019  F08E         	movff	?___ftpack+1,?___ftadd+1
 11915  0010A8  C01A  F08F         	movff	?___ftpack+2,?___ftadd+2
 11916  0010AC  0012               	return	
 11917  0010AE                     __end_of___ftadd:
 11918                           	opt stack 0
 11919                           tosu	equ	0xFFF
 11920                           tosh	equ	0xFFE
 11921                           tosl	equ	0xFFD
 11922                           pclath	equ	0xFFA
 11923                           tblptru	equ	0xFF8
 11924                           tblptrh	equ	0xFF7
 11925                           tblptrl	equ	0xFF6
 11926                           tablat	equ	0xFF5
 11927                           prodh	equ	0xFF4
 11928                           prodl	equ	0xFF3
 11929                           intcon	equ	0xFF2
 11930                           intcon2	equ	0xFF1
 11931                           postinc0	equ	0xFEE
 11932                           wreg	equ	0xFE8
 11933                           indf1	equ	0xFE7
 11934                           postdec1	equ	0xFE5
 11935                           fsr1h	equ	0xFE2
 11936                           fsr1l	equ	0xFE1
 11937                           indf2	equ	0xFDF
 11938                           postinc2	equ	0xFDE
 11939                           postdec2	equ	0xFDD
 11940                           fsr2h	equ	0xFDA
 11941                           fsr2l	equ	0xFD9
 11942                           status	equ	0xFD8
 11943                           
 11944 ;; *************** function ___ftneg *****************
 11945 ;; Defined at:
 11946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 11947 ;; Parameters:    Size  Location     Type
 11948 ;;  f1              3   42[BANK0 ] float 
 11949 ;; Auto vars:     Size  Location     Type
 11950 ;;		None
 11951 ;; Return value:  Size  Location     Type
 11952 ;;                  3   42[BANK0 ] float 
 11953 ;; Registers used:
 11954 ;;		wreg, status,2, status,0
 11955 ;; Tracked objects:
 11956 ;;		On entry : 0/0
 11957 ;;		On exit  : 0/0
 11958 ;;		Unchanged: 0/0
 11959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11960 ;;      Params:         0       3       0       0       0       0       0
 11961 ;;      Locals:         0       0       0       0       0       0       0
 11962 ;;      Temps:          0       0       0       0       0       0       0
 11963 ;;      Totals:         0       3       0       0       0       0       0
 11964 ;;Total ram usage:        3 bytes
 11965 ;; Hardware stack levels used:    1
 11966 ;; Hardware stack levels required when called:    3
 11967 ;; This function calls:
 11968 ;;		Nothing
 11969 ;; This function is called by:
 11970 ;;		_CalcSynthRegParams
 11971 ;;		_pow
 11972 ;;		_exp
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text54
 11977  002B5E                     __ptext54:
 11978                           	opt stack 0
 11979  002B5E                     ___ftneg:
 11980                           	opt stack 23
 11981                           
 11982                           ;incstack = 0
 11983  002B5E  0100               	movlb	0	; () banked
 11984  002B60  518A               	movf	___ftneg@f1& (0+255),w,b
 11985  002B62  118B               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11986  002B64  118C               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11987  002B66  B4D8               	btfsc	status,2,c
 11988  002B68  D006               	goto	l1601
 11989                           
 11990                           ; BSR set to: 0
 11991  002B6A  0E00               	movlw	0
 11992  002B6C  1B8A               	xorwf	___ftneg@f1& (0+255),f,b
 11993  002B6E  0E00               	movlw	0
 11994  002B70  1B8B               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11995  002B72  0E80               	movlw	128
 11996  002B74  1B8C               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11997  002B76                     l1601:
 11998                           
 11999                           ; BSR set to: 0
 12000  002B76  C08A  F08A         	movff	___ftneg@f1,?___ftneg
 12001  002B7A  C08B  F08B         	movff	___ftneg@f1+1,?___ftneg+1
 12002  002B7E  C08C  F08C         	movff	___ftneg@f1+2,?___ftneg+2
 12003                           
 12004                           ; BSR set to: 0
 12005  002B82  0012               	return		;funcret
 12006  002B84                     __end_of___ftneg:
 12007                           	opt stack 0
 12008                           tosu	equ	0xFFF
 12009                           tosh	equ	0xFFE
 12010                           tosl	equ	0xFFD
 12011                           pclath	equ	0xFFA
 12012                           tblptru	equ	0xFF8
 12013                           tblptrh	equ	0xFF7
 12014                           tblptrl	equ	0xFF6
 12015                           tablat	equ	0xFF5
 12016                           prodh	equ	0xFF4
 12017                           prodl	equ	0xFF3
 12018                           intcon	equ	0xFF2
 12019                           intcon2	equ	0xFF1
 12020                           postinc0	equ	0xFEE
 12021                           wreg	equ	0xFE8
 12022                           indf1	equ	0xFE7
 12023                           postdec1	equ	0xFE5
 12024                           fsr1h	equ	0xFE2
 12025                           fsr1l	equ	0xFE1
 12026                           indf2	equ	0xFDF
 12027                           postinc2	equ	0xFDE
 12028                           postdec2	equ	0xFDD
 12029                           fsr2h	equ	0xFDA
 12030                           fsr2l	equ	0xFD9
 12031                           status	equ	0xFD8
 12032                           
 12033 ;; *************** function ___ftdiv *****************
 12034 ;; Defined at:
 12035 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;  f1              3   41[COMRAM] float 
 12038 ;;  f2              3   44[COMRAM] float 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  f3              3    4[BANK0 ] float 
 12041 ;;  sign            1    8[BANK0 ] unsigned char 
 12042 ;;  exp             1    7[BANK0 ] unsigned char 
 12043 ;;  cntr            1    3[BANK0 ] unsigned char 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  3   41[COMRAM] float 
 12046 ;; Registers used:
 12047 ;;		wreg, status,2, status,0, cstack
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12053 ;;      Params:         6       0       0       0       0       0       0
 12054 ;;      Locals:         0       6       0       0       0       0       0
 12055 ;;      Temps:          0       3       0       0       0       0       0
 12056 ;;      Totals:         6       9       0       0       0       0       0
 12057 ;;Total ram usage:       15 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    4
 12060 ;; This function calls:
 12061 ;;		___ftpack
 12062 ;; This function is called by:
 12063 ;;		_SampleSingleChannel
 12064 ;;		_CalcSynthRegParams
 12065 ;;		_exp
 12066 ;;		_CheckFlashPrecentage
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           	psect	text55
 12071  0017A0                     __ptext55:
 12072                           	opt stack 0
 12073  0017A0                     ___ftdiv:
 12074                           	opt stack 22
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;incstack = 0
 12078  0017A0  C02C  F060         	movff	___ftdiv@f1+2,??___ftdiv
 12079  0017A4  0100               	movlb	0	; () banked
 12080  0017A6  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 12081  0017A8  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 12082  0017AA  342B               	rlcf	___ftdiv@f1+1,w,c
 12083  0017AC  3760               	rlcf	??___ftdiv& (0+255),f,b
 12084  0017AE  E301               	bnc	u6721
 12085  0017B0  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 12086  0017B2                     u6721:
 12087  0017B2  5160               	movf	??___ftdiv& (0+255),w,b
 12088  0017B4  6F67               	movwf	___ftdiv@exp& (0+255),b
 12089  0017B6  5167               	movf	___ftdiv@exp& (0+255),w,b
 12090  0017B8  A4D8               	btfss	status,2,c
 12091  0017BA  D007               	goto	l1575
 12092                           
 12093                           ; BSR set to: 0
 12094  0017BC  0E00               	movlw	0
 12095  0017BE  6E2A               	movwf	?___ftdiv,c
 12096  0017C0  0E00               	movlw	0
 12097  0017C2  6E2B               	movwf	?___ftdiv+1,c
 12098  0017C4  0E00               	movlw	0
 12099  0017C6  6E2C               	movwf	?___ftdiv+2,c
 12100                           
 12101                           ; BSR set to: 0
 12102  0017C8  0012               	return	
 12103  0017CA                     l1575:
 12104                           
 12105                           ; BSR set to: 0
 12106                           
 12107                           ; BSR set to: 0
 12108  0017CA  C02F  F060         	movff	___ftdiv@f2+2,??___ftdiv
 12109  0017CE  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 12110  0017D0  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 12111  0017D2  342E               	rlcf	___ftdiv@f2+1,w,c
 12112  0017D4  3760               	rlcf	??___ftdiv& (0+255),f,b
 12113  0017D6  E301               	bnc	u6741
 12114  0017D8  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 12115  0017DA                     u6741:
 12116  0017DA  5160               	movf	??___ftdiv& (0+255),w,b
 12117  0017DC  6F68               	movwf	___ftdiv@sign& (0+255),b
 12118  0017DE  5168               	movf	___ftdiv@sign& (0+255),w,b
 12119  0017E0  A4D8               	btfss	status,2,c
 12120  0017E2  D007               	goto	l1577
 12121                           
 12122                           ; BSR set to: 0
 12123  0017E4  0E00               	movlw	0
 12124  0017E6  6E2A               	movwf	?___ftdiv,c
 12125  0017E8  0E00               	movlw	0
 12126  0017EA  6E2B               	movwf	?___ftdiv+1,c
 12127  0017EC  0E00               	movlw	0
 12128  0017EE  6E2C               	movwf	?___ftdiv+2,c
 12129                           
 12130                           ; BSR set to: 0
 12131  0017F0  0012               	return	
 12132  0017F2                     l1577:
 12133                           
 12134                           ; BSR set to: 0
 12135                           
 12136                           ; BSR set to: 0
 12137  0017F2  0E00               	movlw	0
 12138  0017F4  6F64               	movwf	___ftdiv@f3& (0+255),b
 12139  0017F6  0E00               	movlw	0
 12140  0017F8  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 12141  0017FA  0E00               	movlw	0
 12142  0017FC  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 12143                           
 12144                           ; BSR set to: 0
 12145  0017FE  5168               	movf	___ftdiv@sign& (0+255),w,b
 12146  001800  0F89               	addlw	137
 12147  001802  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 12148                           
 12149                           ; BSR set to: 0
 12150  001804  C02C  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 12151                           
 12152                           ; BSR set to: 0
 12153  001808  502F               	movf	___ftdiv@f2+2,w,c
 12154  00180A  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 12155                           
 12156                           ; BSR set to: 0
 12157  00180C  0E80               	movlw	128
 12158  00180E  1768               	andwf	___ftdiv@sign& (0+255),f,b
 12159                           
 12160                           ; BSR set to: 0
 12161  001810  8E2B               	bsf	___ftdiv@f1+1,7,c
 12162                           
 12163                           ; BSR set to: 0
 12164  001812  0EFF               	movlw	255
 12165  001814  162A               	andwf	___ftdiv@f1,f,c
 12166  001816  0EFF               	movlw	255
 12167  001818  162B               	andwf	___ftdiv@f1+1,f,c
 12168  00181A  0E00               	movlw	0
 12169  00181C  162C               	andwf	___ftdiv@f1+2,f,c
 12170                           
 12171                           ; BSR set to: 0
 12172  00181E  8E2E               	bsf	___ftdiv@f2+1,7,c
 12173                           
 12174                           ; BSR set to: 0
 12175  001820  0EFF               	movlw	255
 12176  001822  162D               	andwf	___ftdiv@f2,f,c
 12177  001824  0EFF               	movlw	255
 12178  001826  162E               	andwf	___ftdiv@f2+1,f,c
 12179  001828  0E00               	movlw	0
 12180  00182A  162F               	andwf	___ftdiv@f2+2,f,c
 12181                           
 12182                           ; BSR set to: 0
 12183  00182C  0E18               	movlw	24
 12184  00182E  6F63               	movwf	___ftdiv@cntr& (0+255),b
 12185  001830                     
 12186                           ; BSR set to: 0
 12187                           
 12188                           ; BSR set to: 0
 12189  001830  90D8               	bcf	status,0,c
 12190  001832  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 12191  001834  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 12192  001836  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 12193                           
 12194                           ; BSR set to: 0
 12195  001838  502D               	movf	___ftdiv@f2,w,c
 12196  00183A  5C2A               	subwf	___ftdiv@f1,w,c
 12197  00183C  502E               	movf	___ftdiv@f2+1,w,c
 12198  00183E  582B               	subwfb	___ftdiv@f1+1,w,c
 12199  001840  502F               	movf	___ftdiv@f2+2,w,c
 12200  001842  582C               	subwfb	___ftdiv@f1+2,w,c
 12201  001844  A0D8               	btfss	status,0,c
 12202  001846  D007               	goto	l1579
 12203                           
 12204                           ; BSR set to: 0
 12205  001848  502D               	movf	___ftdiv@f2,w,c
 12206  00184A  5E2A               	subwf	___ftdiv@f1,f,c
 12207  00184C  502E               	movf	___ftdiv@f2+1,w,c
 12208  00184E  5A2B               	subwfb	___ftdiv@f1+1,f,c
 12209  001850  502F               	movf	___ftdiv@f2+2,w,c
 12210  001852  5A2C               	subwfb	___ftdiv@f1+2,f,c
 12211                           
 12212                           ; BSR set to: 0
 12213  001854  8164               	bsf	___ftdiv@f3& (0+255),0,b
 12214  001856                     l1579:
 12215                           
 12216                           ; BSR set to: 0
 12217  001856  90D8               	bcf	status,0,c
 12218  001858  362A               	rlcf	___ftdiv@f1,f,c
 12219  00185A  362B               	rlcf	___ftdiv@f1+1,f,c
 12220  00185C  362C               	rlcf	___ftdiv@f1+2,f,c
 12221                           
 12222                           ; BSR set to: 0
 12223  00185E  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 12224  001860  D7E7               	goto	l1578
 12225                           
 12226                           ; BSR set to: 0
 12227                           
 12228                           ; BSR set to: 0
 12229  001862  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 12230  001866  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12231  00186A  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12232  00186E  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 12233  001872  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 12234  001876  EC52  F00E         	call	___ftpack	;wreg free
 12235  00187A  C018  F02A         	movff	?___ftpack,?___ftdiv
 12236  00187E  C019  F02B         	movff	?___ftpack+1,?___ftdiv+1
 12237  001882  C01A  F02C         	movff	?___ftpack+2,?___ftdiv+2
 12238  001886  0012               	return	
 12239  001888                     __end_of___ftdiv:
 12240                           	opt stack 0
 12241                           tosu	equ	0xFFF
 12242                           tosh	equ	0xFFE
 12243                           tosl	equ	0xFFD
 12244                           pclath	equ	0xFFA
 12245                           tblptru	equ	0xFF8
 12246                           tblptrh	equ	0xFF7
 12247                           tblptrl	equ	0xFF6
 12248                           tablat	equ	0xFF5
 12249                           prodh	equ	0xFF4
 12250                           prodl	equ	0xFF3
 12251                           intcon	equ	0xFF2
 12252                           intcon2	equ	0xFF1
 12253                           postinc0	equ	0xFEE
 12254                           wreg	equ	0xFE8
 12255                           indf1	equ	0xFE7
 12256                           postdec1	equ	0xFE5
 12257                           fsr1h	equ	0xFE2
 12258                           fsr1l	equ	0xFE1
 12259                           indf2	equ	0xFDF
 12260                           postinc2	equ	0xFDE
 12261                           postdec2	equ	0xFDD
 12262                           fsr2h	equ	0xFDA
 12263                           fsr2l	equ	0xFD9
 12264                           status	equ	0xFD8
 12265                           
 12266 ;; *************** function ___awtoft *****************
 12267 ;; Defined at:
 12268 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12269 ;; Parameters:    Size  Location     Type
 12270 ;;  c               2   39[BANK0 ] int 
 12271 ;; Auto vars:     Size  Location     Type
 12272 ;;  sign            1   47[COMRAM] unsigned char 
 12273 ;; Return value:  Size  Location     Type
 12274 ;;                  3   39[BANK0 ] float 
 12275 ;; Registers used:
 12276 ;;		wreg, status,2, status,0, cstack
 12277 ;; Tracked objects:
 12278 ;;		On entry : 0/0
 12279 ;;		On exit  : 0/0
 12280 ;;		Unchanged: 0/0
 12281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12282 ;;      Params:         0       3       0       0       0       0       0
 12283 ;;      Locals:         1       0       0       0       0       0       0
 12284 ;;      Temps:          0       0       0       0       0       0       0
 12285 ;;      Totals:         1       3       0       0       0       0       0
 12286 ;;Total ram usage:        4 bytes
 12287 ;; Hardware stack levels used:    1
 12288 ;; Hardware stack levels required when called:    4
 12289 ;; This function calls:
 12290 ;;		___ftpack
 12291 ;; This function is called by:
 12292 ;;		_CalcSynthRegParams
 12293 ;;		_exp
 12294 ;;		_log
 12295 ;; This function uses a non-reentrant model
 12296 ;;
 12297                           
 12298                           	psect	text56
 12299  002980                     __ptext56:
 12300                           	opt stack 0
 12301  002980                     ___awtoft:
 12302                           	opt stack 22
 12303                           
 12304                           ;incstack = 0
 12305  002980  0E00               	movlw	0
 12306  002982  6E30               	movwf	___awtoft@sign,c
 12307  002984  0100               	movlb	0	; () banked
 12308  002986  AF88               	btfss	(___awtoft@c+1)& (0+255),7,b
 12309  002988  D006               	goto	l1492
 12310                           
 12311                           ; BSR set to: 0
 12312  00298A  6D87               	negf	___awtoft@c& (0+255),b
 12313  00298C  1F88               	comf	(___awtoft@c+1)& (0+255),f,b
 12314  00298E  B0D8               	btfsc	status,0,c
 12315  002990  2B88               	incf	(___awtoft@c+1)& (0+255),f,b
 12316                           
 12317                           ; BSR set to: 0
 12318  002992  0E01               	movlw	1
 12319  002994  6E30               	movwf	___awtoft@sign,c
 12320  002996                     l1492:
 12321                           
 12322                           ; BSR set to: 0
 12323                           
 12324                           ; BSR set to: 0
 12325  002996  C087  F018         	movff	___awtoft@c,___ftpack@arg
 12326  00299A  C088  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 12327  00299E  6A1A               	clrf	___ftpack@arg+2,c
 12328  0029A0  0E8E               	movlw	142
 12329  0029A2  6E1B               	movwf	___ftpack@exp,c
 12330  0029A4  C030  F01C         	movff	___awtoft@sign,___ftpack@sign
 12331  0029A8  EC52  F00E         	call	___ftpack	;wreg free
 12332  0029AC  C018  F087         	movff	?___ftpack,?___awtoft
 12333  0029B0  C019  F088         	movff	?___ftpack+1,?___awtoft+1
 12334  0029B4  C01A  F089         	movff	?___ftpack+2,?___awtoft+2
 12335  0029B8  0012               	return	
 12336  0029BA                     __end_of___awtoft:
 12337                           	opt stack 0
 12338                           tosu	equ	0xFFF
 12339                           tosh	equ	0xFFE
 12340                           tosl	equ	0xFFD
 12341                           pclath	equ	0xFFA
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           intcon2	equ	0xFF1
 12350                           postinc0	equ	0xFEE
 12351                           wreg	equ	0xFE8
 12352                           indf1	equ	0xFE7
 12353                           postdec1	equ	0xFE5
 12354                           fsr1h	equ	0xFE2
 12355                           fsr1l	equ	0xFE1
 12356                           indf2	equ	0xFDF
 12357                           postinc2	equ	0xFDE
 12358                           postdec2	equ	0xFDD
 12359                           fsr2h	equ	0xFDA
 12360                           fsr2l	equ	0xFD9
 12361                           status	equ	0xFD8
 12362                           
 12363 ;; *************** function ___lltoft *****************
 12364 ;; Defined at:
 12365 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;  c               4   31[COMRAM] unsigned long 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  exp             1   39[COMRAM] unsigned char 
 12370 ;; Return value:  Size  Location     Type
 12371 ;;                  3   31[COMRAM] float 
 12372 ;; Registers used:
 12373 ;;		wreg, status,2, status,0, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 0/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12379 ;;      Params:         4       0       0       0       0       0       0
 12380 ;;      Locals:         1       0       0       0       0       0       0
 12381 ;;      Temps:          4       0       0       0       0       0       0
 12382 ;;      Totals:         9       0       0       0       0       0       0
 12383 ;;Total ram usage:        9 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    4
 12386 ;; This function calls:
 12387 ;;		___ftpack
 12388 ;; This function is called by:
 12389 ;;		_pow
 12390 ;;		_CheckFlashPrecentage
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           	psect	text57
 12395  002330                     __ptext57:
 12396                           	opt stack 0
 12397  002330                     ___lltoft:
 12398                           	opt stack 24
 12399                           
 12400                           ;incstack = 0
 12401  002330  0E8E               	movlw	142
 12402  002332  6E28               	movwf	___lltoft@exp,c
 12403  002334  D006               	goto	l1668
 12404  002336  90D8               	bcf	status,0,c
 12405  002338  3223               	rrcf	___lltoft@c+3,f,c
 12406  00233A  3222               	rrcf	___lltoft@c+2,f,c
 12407  00233C  3221               	rrcf	___lltoft@c+1,f,c
 12408  00233E  3220               	rrcf	___lltoft@c,f,c
 12409  002340  2A28               	incf	___lltoft@exp,f,c
 12410  002342                     l1668:
 12411  002342  0E00               	movlw	0
 12412  002344  1420               	andwf	___lltoft@c,w,c
 12413  002346  6E24               	movwf	??___lltoft& (0+255),c
 12414  002348  0E00               	movlw	0
 12415  00234A  1421               	andwf	___lltoft@c+1,w,c
 12416  00234C  6E25               	movwf	(??___lltoft+1)& (0+255),c
 12417  00234E  0E00               	movlw	0
 12418  002350  1422               	andwf	___lltoft@c+2,w,c
 12419  002352  6E26               	movwf	(??___lltoft+2)& (0+255),c
 12420  002354  0EFF               	movlw	255
 12421  002356  1423               	andwf	___lltoft@c+3,w,c
 12422  002358  6E27               	movwf	(??___lltoft+3)& (0+255),c
 12423  00235A  5024               	movf	??___lltoft,w,c
 12424  00235C  1025               	iorwf	??___lltoft+1,w,c
 12425  00235E  1026               	iorwf	??___lltoft+2,w,c
 12426  002360  1027               	iorwf	??___lltoft+3,w,c
 12427  002362  A4D8               	btfss	status,2,c
 12428  002364  D7E8               	goto	l1669
 12429  002366  C020  F018         	movff	___lltoft@c,___ftpack@arg
 12430  00236A  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 12431  00236E  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 12432  002372  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 12433  002376  0E00               	movlw	0
 12434  002378  6E1C               	movwf	___ftpack@sign,c
 12435  00237A  EC52  F00E         	call	___ftpack	;wreg free
 12436  00237E  C018  F020         	movff	?___ftpack,?___lltoft
 12437  002382  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 12438  002386  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 12439  00238A  0012               	return	
 12440  00238C                     __end_of___lltoft:
 12441                           	opt stack 0
 12442                           tosu	equ	0xFFF
 12443                           tosh	equ	0xFFE
 12444                           tosl	equ	0xFFD
 12445                           pclath	equ	0xFFA
 12446                           tblptru	equ	0xFF8
 12447                           tblptrh	equ	0xFF7
 12448                           tblptrl	equ	0xFF6
 12449                           tablat	equ	0xFF5
 12450                           prodh	equ	0xFF4
 12451                           prodl	equ	0xFF3
 12452                           intcon	equ	0xFF2
 12453                           intcon2	equ	0xFF1
 12454                           postinc0	equ	0xFEE
 12455                           wreg	equ	0xFE8
 12456                           indf1	equ	0xFE7
 12457                           postdec1	equ	0xFE5
 12458                           fsr1h	equ	0xFE2
 12459                           fsr1l	equ	0xFE1
 12460                           indf2	equ	0xFDF
 12461                           postinc2	equ	0xFDE
 12462                           postdec2	equ	0xFDD
 12463                           fsr2h	equ	0xFDA
 12464                           fsr2l	equ	0xFD9
 12465                           status	equ	0xFD8
 12466                           
 12467 ;; *************** function ___lwtoft *****************
 12468 ;; Defined at:
 12469 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;  c               2   31[COMRAM] unsigned int 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  3   31[COMRAM] float 
 12476 ;; Registers used:
 12477 ;;		wreg, status,2, status,0, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12483 ;;      Params:         3       0       0       0       0       0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0
 12486 ;;      Totals:         3       0       0       0       0       0       0
 12487 ;;Total ram usage:        3 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    4
 12490 ;; This function calls:
 12491 ;;		___ftpack
 12492 ;; This function is called by:
 12493 ;;		_SampleSingleChannel
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text58
 12498  002BA8                     __ptext58:
 12499                           	opt stack 0
 12500  002BA8                     ___lwtoft:
 12501                           	opt stack 25
 12502                           
 12503                           ;incstack = 0
 12504  002BA8  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 12505  002BAC  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 12506  002BB0  6A1A               	clrf	___ftpack@arg+2,c
 12507  002BB2  0E8E               	movlw	142
 12508  002BB4  6E1B               	movwf	___ftpack@exp,c
 12509  002BB6  0E00               	movlw	0
 12510  002BB8  6E1C               	movwf	___ftpack@sign,c
 12511  002BBA  EC52  F00E         	call	___ftpack	;wreg free
 12512  002BBE  C018  F020         	movff	?___ftpack,?___lwtoft
 12513  002BC2  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 12514  002BC6  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 12515  002BCA  0012               	return	
 12516  002BCC                     __end_of___lwtoft:
 12517                           	opt stack 0
 12518                           tosu	equ	0xFFF
 12519                           tosh	equ	0xFFE
 12520                           tosl	equ	0xFFD
 12521                           pclath	equ	0xFFA
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           prodh	equ	0xFF4
 12527                           prodl	equ	0xFF3
 12528                           intcon	equ	0xFF2
 12529                           intcon2	equ	0xFF1
 12530                           postinc0	equ	0xFEE
 12531                           wreg	equ	0xFE8
 12532                           indf1	equ	0xFE7
 12533                           postdec1	equ	0xFE5
 12534                           fsr1h	equ	0xFE2
 12535                           fsr1l	equ	0xFE1
 12536                           indf2	equ	0xFDF
 12537                           postinc2	equ	0xFDE
 12538                           postdec2	equ	0xFDD
 12539                           fsr2h	equ	0xFDA
 12540                           fsr2l	equ	0xFD9
 12541                           status	equ	0xFD8
 12542                           
 12543 ;; *************** function ___ftpack *****************
 12544 ;; Defined at:
 12545 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;  arg             3   23[COMRAM] unsigned um
 12548 ;;  exp             1   26[COMRAM] unsigned char 
 12549 ;;  sign            1   27[COMRAM] unsigned char 
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;		None
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  3   23[COMRAM] float 
 12554 ;; Registers used:
 12555 ;;		wreg, status,2, status,0
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12561 ;;      Params:         5       0       0       0       0       0       0
 12562 ;;      Locals:         0       0       0       0       0       0       0
 12563 ;;      Temps:          3       0       0       0       0       0       0
 12564 ;;      Totals:         8       0       0       0       0       0       0
 12565 ;;Total ram usage:        8 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    3
 12568 ;; This function calls:
 12569 ;;		Nothing
 12570 ;; This function is called by:
 12571 ;;		___altoft
 12572 ;;		___awtoft
 12573 ;;		___ftadd
 12574 ;;		___ftdiv
 12575 ;;		___ftmul
 12576 ;;		___lltoft
 12577 ;;		___lwtoft
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           	psect	text59
 12582  001CA4                     __ptext59:
 12583                           	opt stack 0
 12584  001CA4                     ___ftpack:
 12585                           	opt stack 22
 12586                           
 12587                           ;incstack = 0
 12588  001CA4  501B               	movf	___ftpack@exp,w,c
 12589  001CA6  B4D8               	btfsc	status,2,c
 12590  001CA8  D005               	goto	u6160
 12591  001CAA  5018               	movf	___ftpack@arg,w,c
 12592  001CAC  1019               	iorwf	___ftpack@arg+1,w,c
 12593  001CAE  101A               	iorwf	___ftpack@arg+2,w,c
 12594  001CB0  A4D8               	btfss	status,2,c
 12595  001CB2  D00C               	goto	l1511
 12596  001CB4                     u6160:
 12597  001CB4  0E00               	movlw	0
 12598  001CB6  6E18               	movwf	?___ftpack,c
 12599  001CB8  0E00               	movlw	0
 12600  001CBA  6E19               	movwf	?___ftpack+1,c
 12601  001CBC  0E00               	movlw	0
 12602  001CBE  6E1A               	movwf	?___ftpack+2,c
 12603  001CC0  0012               	return	
 12604  001CC2  2A1B               	incf	___ftpack@exp,f,c
 12605  001CC4  90D8               	bcf	status,0,c
 12606  001CC6  321A               	rrcf	___ftpack@arg+2,f,c
 12607  001CC8  3219               	rrcf	___ftpack@arg+1,f,c
 12608  001CCA  3218               	rrcf	___ftpack@arg,f,c
 12609  001CCC                     l1511:
 12610  001CCC  0E00               	movlw	0
 12611  001CCE  1418               	andwf	___ftpack@arg,w,c
 12612  001CD0  6E1D               	movwf	??___ftpack& (0+255),c
 12613  001CD2  0E00               	movlw	0
 12614  001CD4  1419               	andwf	___ftpack@arg+1,w,c
 12615  001CD6  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 12616  001CD8  0EFE               	movlw	254
 12617  001CDA  141A               	andwf	___ftpack@arg+2,w,c
 12618  001CDC  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 12619  001CDE  501D               	movf	??___ftpack,w,c
 12620  001CE0  101E               	iorwf	??___ftpack+1,w,c
 12621  001CE2  101F               	iorwf	??___ftpack+2,w,c
 12622  001CE4  B4D8               	btfsc	status,2,c
 12623  001CE6  D00C               	goto	l1514
 12624  001CE8  D7EC               	goto	l1512
 12625  001CEA  2A1B               	incf	___ftpack@exp,f,c
 12626  001CEC  0E01               	movlw	1
 12627  001CEE  2618               	addwf	___ftpack@arg,f,c
 12628  001CF0  0E00               	movlw	0
 12629  001CF2  2219               	addwfc	___ftpack@arg+1,f,c
 12630  001CF4  0E00               	movlw	0
 12631  001CF6  221A               	addwfc	___ftpack@arg+2,f,c
 12632  001CF8  90D8               	bcf	status,0,c
 12633  001CFA  321A               	rrcf	___ftpack@arg+2,f,c
 12634  001CFC  3219               	rrcf	___ftpack@arg+1,f,c
 12635  001CFE  3218               	rrcf	___ftpack@arg,f,c
 12636  001D00                     l1514:
 12637  001D00  0E00               	movlw	0
 12638  001D02  1418               	andwf	___ftpack@arg,w,c
 12639  001D04  6E1D               	movwf	??___ftpack& (0+255),c
 12640  001D06  0E00               	movlw	0
 12641  001D08  1419               	andwf	___ftpack@arg+1,w,c
 12642  001D0A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 12643  001D0C  0EFF               	movlw	255
 12644  001D0E  141A               	andwf	___ftpack@arg+2,w,c
 12645  001D10  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 12646  001D12  501D               	movf	??___ftpack,w,c
 12647  001D14  101E               	iorwf	??___ftpack+1,w,c
 12648  001D16  101F               	iorwf	??___ftpack+2,w,c
 12649  001D18  B4D8               	btfsc	status,2,c
 12650  001D1A  D006               	goto	l1517
 12651  001D1C  D7E6               	goto	l1515
 12652  001D1E  061B               	decf	___ftpack@exp,f,c
 12653  001D20  90D8               	bcf	status,0,c
 12654  001D22  3618               	rlcf	___ftpack@arg,f,c
 12655  001D24  3619               	rlcf	___ftpack@arg+1,f,c
 12656  001D26  361A               	rlcf	___ftpack@arg+2,f,c
 12657  001D28                     l1517:
 12658  001D28  BE19               	btfsc	___ftpack@arg+1,7,c
 12659  001D2A  D003               	goto	u6200
 12660  001D2C  0E02               	movlw	2
 12661  001D2E  601B               	cpfslt	___ftpack@exp,c
 12662  001D30  D7F6               	goto	l1518
 12663  001D32                     u6200:
 12664  001D32  A01B               	btfss	___ftpack@exp,0,c
 12665  001D34  9E19               	bcf	___ftpack@arg+1,7,c
 12666  001D36  90D8               	bcf	status,0,c
 12667  001D38  321B               	rrcf	___ftpack@exp,f,c
 12668  001D3A  501B               	movf	___ftpack@exp,w,c
 12669  001D3C  121A               	iorwf	___ftpack@arg+2,f,c
 12670  001D3E  501C               	movf	___ftpack@sign,w,c
 12671  001D40  A4D8               	btfss	status,2,c
 12672  001D42  8E1A               	bsf	___ftpack@arg+2,7,c
 12673  001D44  C018  F018         	movff	___ftpack@arg,?___ftpack
 12674  001D48  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 12675  001D4C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 12676  001D50  0012               	return	
 12677  001D52                     __end_of___ftpack:
 12678                           	opt stack 0
 12679                           tosu	equ	0xFFF
 12680                           tosh	equ	0xFFE
 12681                           tosl	equ	0xFFD
 12682                           pclath	equ	0xFFA
 12683                           tblptru	equ	0xFF8
 12684                           tblptrh	equ	0xFF7
 12685                           tblptrl	equ	0xFF6
 12686                           tablat	equ	0xFF5
 12687                           prodh	equ	0xFF4
 12688                           prodl	equ	0xFF3
 12689                           intcon	equ	0xFF2
 12690                           intcon2	equ	0xFF1
 12691                           postinc0	equ	0xFEE
 12692                           wreg	equ	0xFE8
 12693                           indf1	equ	0xFE7
 12694                           postdec1	equ	0xFE5
 12695                           fsr1h	equ	0xFE2
 12696                           fsr1l	equ	0xFE1
 12697                           indf2	equ	0xFDF
 12698                           postinc2	equ	0xFDE
 12699                           postdec2	equ	0xFDD
 12700                           fsr2h	equ	0xFDA
 12701                           fsr2l	equ	0xFD9
 12702                           status	equ	0xFD8
 12703                           
 12704 ;; *************** function _UART_Write_Text *****************
 12705 ;; Defined at:
 12706 ;;		line 224 in file "EusartApp.c"
 12707 ;; Parameters:    Size  Location     Type
 12708 ;;  text            2   24[COMRAM] PTR unsigned char 
 12709 ;;		 -> PrintHelpScreen@dest(50), SendUartSystemInitMessage@dest(50), STR_11(10), STR_10(10), 
 12710 ;;		 -> STR_9(10), readUartByte@dest(50), STR_7(10), SampleSingleChannel@dest(50), 
 12711 ;;		 -> STR_5(10), STR_4(10), STR_3(20), STR_2(10), 
 12712 ;;		 -> STR_1(10), 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;  i               2   28[COMRAM] int 
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12724 ;;      Params:         2       0       0       0       0       0       0
 12725 ;;      Locals:         2       0       0       0       0       0       0
 12726 ;;      Temps:          2       0       0       0       0       0       0
 12727 ;;      Totals:         6       0       0       0       0       0       0
 12728 ;;Total ram usage:        6 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    4
 12731 ;; This function calls:
 12732 ;;		_EUSART1_Write
 12733 ;; This function is called by:
 12734 ;;		_AdcSingleSample
 12735 ;;		_SampleSingleChannel
 12736 ;;		_readUartByte
 12737 ;;		_SendUartSystemInitMessage
 12738 ;;		_PrintHelpScreen
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           	psect	text60
 12743  002130                     __ptext60:
 12744                           	opt stack 0
 12745  002130                     _UART_Write_Text:
 12746                           	opt stack 25
 12747                           
 12748                           ;EusartApp.c: 226: for(int i =0;text[i]!='\0';i++)
 12749                           
 12750                           ;incstack = 0
 12751  002130  0E00               	movlw	0
 12752  002132  6E1E               	movwf	UART_Write_Text@i+1,c
 12753  002134  0E00               	movlw	0
 12754  002136  6E1D               	movwf	UART_Write_Text@i,c
 12755  002138  D01A               	goto	l230
 12756  00213A                     
 12757                           ;EusartApp.c: 227: {
 12758                           ;EusartApp.c: 228: EUSART1_Write(text[i]);
 12759  00213A  501D               	movf	UART_Write_Text@i,w,c
 12760  00213C  2419               	addwf	UART_Write_Text@text,w,c
 12761  00213E  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12762  002140  501E               	movf	UART_Write_Text@i+1,w,c
 12763  002142  201A               	addwfc	UART_Write_Text@text+1,w,c
 12764  002144  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12765  002146  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12766  00214A  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12767  00214E  6AF8               	clrf	tblptru,c
 12768  002150  0E05               	movlw	(high __ramtop+-1)
 12769  002152  64F7               	cpfsgt	tblptrh,c
 12770  002154  D003               	bra	u7047
 12771  002156  0008               	tblrd		*
 12772  002158  50F5               	movf	tablat,w,c
 12773  00215A  D005               	bra	u7040
 12774  00215C                     u7047:
 12775  00215C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12776  002160  CFF7 FFEA          	movff	tblptrh,fsr0h
 12777  002164  50EF               	movf	indf0,w,c
 12778  002166                     u7040:
 12779  002166  EC84  F014         	call	_EUSART1_Write
 12780  00216A  4A1D               	infsnz	UART_Write_Text@i,f,c
 12781  00216C  2A1E               	incf	UART_Write_Text@i+1,f,c
 12782  00216E                     l230:
 12783  00216E  501D               	movf	UART_Write_Text@i,w,c
 12784  002170  2419               	addwf	UART_Write_Text@text,w,c
 12785  002172  6E1B               	movwf	??_UART_Write_Text& (0+255),c
 12786  002174  501E               	movf	UART_Write_Text@i+1,w,c
 12787  002176  201A               	addwfc	UART_Write_Text@text+1,w,c
 12788  002178  6E1C               	movwf	(??_UART_Write_Text+1)& (0+255),c
 12789  00217A  C01B  FFF6         	movff	??_UART_Write_Text,tblptrl
 12790  00217E  C01C  FFF7         	movff	??_UART_Write_Text+1,tblptrh
 12791  002182  6AF8               	clrf	tblptru,c
 12792  002184  0E05               	movlw	(high __ramtop+-1)
 12793  002186  64F7               	cpfsgt	tblptrh,c
 12794  002188  D003               	bra	u7057
 12795  00218A  0008               	tblrd		*
 12796  00218C  50F5               	movf	tablat,w,c
 12797  00218E  D005               	bra	u7050
 12798  002190                     u7057:
 12799  002190  CFF6 FFE9          	movff	tblptrl,fsr0l
 12800  002194  CFF7 FFEA          	movff	tblptrh,fsr0h
 12801  002198  50EF               	movf	indf0,w,c
 12802  00219A                     u7050:
 12803  00219A  0900               	iorlw	0
 12804  00219C  B4D8               	btfsc	status,2,c
 12805  00219E  0012               	return	
 12806  0021A0  D7CC               	goto	l231
 12807  0021A2                     __end_of_UART_Write_Text:
 12808                           	opt stack 0
 12809                           tosu	equ	0xFFF
 12810                           tosh	equ	0xFFE
 12811                           tosl	equ	0xFFD
 12812                           pclath	equ	0xFFA
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon	equ	0xFF2
 12820                           intcon2	equ	0xFF1
 12821                           indf0	equ	0xFEF
 12822                           postinc0	equ	0xFEE
 12823                           fsr0h	equ	0xFEA
 12824                           fsr0l	equ	0xFE9
 12825                           wreg	equ	0xFE8
 12826                           indf1	equ	0xFE7
 12827                           postdec1	equ	0xFE5
 12828                           fsr1h	equ	0xFE2
 12829                           fsr1l	equ	0xFE1
 12830                           indf2	equ	0xFDF
 12831                           postinc2	equ	0xFDE
 12832                           postdec2	equ	0xFDD
 12833                           fsr2h	equ	0xFDA
 12834                           fsr2l	equ	0xFD9
 12835                           status	equ	0xFD8
 12836                           
 12837 ;; *************** function _EUSART1_Write *****************
 12838 ;; Defined at:
 12839 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 12840 ;; Parameters:    Size  Location     Type
 12841 ;;  txData          1    wreg     unsigned char 
 12842 ;; Auto vars:     Size  Location     Type
 12843 ;;  txData          1   23[COMRAM] unsigned char 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  1    wreg      void 
 12846 ;; Registers used:
 12847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12853 ;;      Params:         0       0       0       0       0       0       0
 12854 ;;      Locals:         1       0       0       0       0       0       0
 12855 ;;      Temps:          0       0       0       0       0       0       0
 12856 ;;      Totals:         1       0       0       0       0       0       0
 12857 ;;Total ram usage:        1 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    3
 12860 ;; This function calls:
 12861 ;;		Nothing
 12862 ;; This function is called by:
 12863 ;;		_UART_Write_Text
 12864 ;;		_WriteUartMessage
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868                           	psect	text61
 12869  002908                     __ptext61:
 12870                           	opt stack 0
 12871  002908                     _EUSART1_Write:
 12872                           	opt stack 25
 12873                           
 12874                           ;incstack = 0
 12875                           ;EUSART1_Write@txData stored from wreg
 12876  002908  6E18               	movwf	EUSART1_Write@txData,c
 12877  00290A                     
 12878                           ;eusart1.c: 160: {
 12879                           
 12880                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 12881  00290A  0100               	movlb	0	; () banked
 12882  00290C  51DC               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 12883  00290E  B4D8               	btfsc	status,2,c
 12884  002910  D7FC               	goto	l6277
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;eusart1.c: 161: }
 12888                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 12889  002912  B89D               	btfsc	3997,4,c	;volatile
 12890  002914  D003               	goto	l771
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;eusart1.c: 164: {
 12894                           ;eusart1.c: 165: TXREG1 = txData;
 12895  002916  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 12896                           
 12897                           ;eusart1.c: 166: }
 12898  00291A  D012               	goto	l772
 12899  00291C                     l771:
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;eusart1.c: 167: else
 12903                           ;eusart1.c: 168: {
 12904                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 12905  00291C  989D               	bcf	3997,4,c	;volatile
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 12909  00291E  503C               	movf	_eusart1TxHead,w,c	;volatile
 12910  002920  0D01               	mullw	1
 12911  002922  0E00               	movlw	low _eusart1TxBuffer
 12912  002924  24F3               	addwf	prodl,w,c
 12913  002926  6ED9               	movwf	fsr2l,c
 12914  002928  0E02               	movlw	high _eusart1TxBuffer
 12915  00292A  20F4               	addwfc	prodh,w,c
 12916  00292C  6EDA               	movwf	fsr2h,c
 12917  00292E  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 12918                           
 12919                           ; BSR set to: 0
 12920  002932  2A3C               	incf	_eusart1TxHead,f,c	;volatile
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 12924  002934  0E45               	movlw	69
 12925  002936  643C               	cpfsgt	_eusart1TxHead,c	;volatile
 12926  002938  D002               	goto	l773
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;eusart1.c: 172: {
 12930                           ;eusart1.c: 173: eusart1TxHead = 0;
 12931  00293A  0E00               	movlw	0
 12932  00293C  6E3C               	movwf	_eusart1TxHead,c	;volatile
 12933  00293E                     l773:
 12934                           
 12935                           ; BSR set to: 0
 12936                           ;eusart1.c: 174: }
 12937                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 12938                           
 12939                           ; BSR set to: 0
 12940  00293E  07DC               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 12941  002940                     l772:
 12942                           
 12943                           ; BSR set to: 0
 12944                           ;eusart1.c: 176: }
 12945                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 12946                           
 12947                           ; BSR set to: 0
 12948  002940  889D               	bsf	3997,4,c	;volatile
 12949                           
 12950                           ; BSR set to: 0
 12951  002942  0012               	return		;funcret
 12952  002944                     __end_of_EUSART1_Write:
 12953                           	opt stack 0
 12954                           tosu	equ	0xFFF
 12955                           tosh	equ	0xFFE
 12956                           tosl	equ	0xFFD
 12957                           pclath	equ	0xFFA
 12958                           tblptru	equ	0xFF8
 12959                           tblptrh	equ	0xFF7
 12960                           tblptrl	equ	0xFF6
 12961                           tablat	equ	0xFF5
 12962                           prodh	equ	0xFF4
 12963                           prodl	equ	0xFF3
 12964                           intcon	equ	0xFF2
 12965                           intcon2	equ	0xFF1
 12966                           indf0	equ	0xFEF
 12967                           postinc0	equ	0xFEE
 12968                           fsr0h	equ	0xFEA
 12969                           fsr0l	equ	0xFE9
 12970                           wreg	equ	0xFE8
 12971                           indf1	equ	0xFE7
 12972                           postdec1	equ	0xFE5
 12973                           fsr1h	equ	0xFE2
 12974                           fsr1l	equ	0xFE1
 12975                           indf2	equ	0xFDF
 12976                           postinc2	equ	0xFDE
 12977                           postdec2	equ	0xFDD
 12978                           fsr2h	equ	0xFDA
 12979                           fsr2l	equ	0xFD9
 12980                           status	equ	0xFD8
 12981                           
 12982 ;; *************** function _ADC_GetConversion *****************
 12983 ;; Defined at:
 12984 ;;		line 106 in file "mcc_generated_files/adc.c"
 12985 ;; Parameters:    Size  Location     Type
 12986 ;;  channel         1    wreg     enum E6975
 12987 ;; Auto vars:     Size  Location     Type
 12988 ;;  channel         1   27[COMRAM] enum E6975
 12989 ;; Return value:  Size  Location     Type
 12990 ;;                  2   23[COMRAM] unsigned int 
 12991 ;; Registers used:
 12992 ;;		wreg, status,2, status,0
 12993 ;; Tracked objects:
 12994 ;;		On entry : 0/0
 12995 ;;		On exit  : 0/0
 12996 ;;		Unchanged: 0/0
 12997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12998 ;;      Params:         2       0       0       0       0       0       0
 12999 ;;      Locals:         1       0       0       0       0       0       0
 13000 ;;      Temps:          2       0       0       0       0       0       0
 13001 ;;      Totals:         5       0       0       0       0       0       0
 13002 ;;Total ram usage:        5 bytes
 13003 ;; Hardware stack levels used:    1
 13004 ;; Hardware stack levels required when called:    3
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_SampleSingleChannel
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012                           	psect	text62
 13013  002A8E                     __ptext62:
 13014                           	opt stack 0
 13015  002A8E                     _ADC_GetConversion:
 13016                           	opt stack 26
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;incstack = 0
 13020                           ;ADC_GetConversion@channel stored from wreg
 13021  002A8E  6E1C               	movwf	ADC_GetConversion@channel,c
 13022                           
 13023                           ;adc.c: 109: ADCON0bits.CHS = channel;
 13024  002A90  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 13025  002A94  461A               	rlncf	??_ADC_GetConversion,f,c
 13026  002A96  461A               	rlncf	??_ADC_GetConversion,f,c
 13027  002A98  50C2               	movf	4034,w,c	;volatile
 13028  002A9A  181A               	xorwf	??_ADC_GetConversion,w,c
 13029  002A9C  0B83               	andlw	-125
 13030  002A9E  181A               	xorwf	??_ADC_GetConversion,w,c
 13031  002AA0  6EC2               	movwf	4034,c	;volatile
 13032                           
 13033                           ;adc.c: 112: ADCON0bits.ADON = 1;
 13034  002AA2  80C2               	bsf	4034,0,c	;volatile
 13035                           
 13036                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 13037  002AA4  82C2               	bsf	4034,1,c	;volatile
 13038  002AA6                     
 13039                           ;adc.c: 119: {
 13040  002AA6  B2C2               	btfsc	4034,1,c	;volatile
 13041  002AA8  D7FE               	goto	l981
 13042                           
 13043                           ;adc.c: 120: }
 13044                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 13045  002AAA  50C4               	movf	4036,w,c	;volatile
 13046  002AAC  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 13047  002AAE  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 13048  002AB0  50C3               	movf	4035,w,c	;volatile
 13049  002AB2  241A               	addwf	??_ADC_GetConversion,w,c
 13050  002AB4  6E18               	movwf	?_ADC_GetConversion,c
 13051  002AB6  0E00               	movlw	0
 13052  002AB8  201B               	addwfc	??_ADC_GetConversion+1,w,c
 13053  002ABA  6E19               	movwf	?_ADC_GetConversion+1,c
 13054  002ABC  0012               	return	
 13055  002ABE                     __end_of_ADC_GetConversion:
 13056                           	opt stack 0
 13057                           tosu	equ	0xFFF
 13058                           tosh	equ	0xFFE
 13059                           tosl	equ	0xFFD
 13060                           pclath	equ	0xFFA
 13061                           tblptru	equ	0xFF8
 13062                           tblptrh	equ	0xFF7
 13063                           tblptrl	equ	0xFF6
 13064                           tablat	equ	0xFF5
 13065                           prodh	equ	0xFF4
 13066                           prodl	equ	0xFF3
 13067                           intcon	equ	0xFF2
 13068                           intcon2	equ	0xFF1
 13069                           indf0	equ	0xFEF
 13070                           postinc0	equ	0xFEE
 13071                           fsr0h	equ	0xFEA
 13072                           fsr0l	equ	0xFE9
 13073                           wreg	equ	0xFE8
 13074                           indf1	equ	0xFE7
 13075                           postdec1	equ	0xFE5
 13076                           fsr1h	equ	0xFE2
 13077                           fsr1l	equ	0xFE1
 13078                           indf2	equ	0xFDF
 13079                           postinc2	equ	0xFDE
 13080                           postdec2	equ	0xFDD
 13081                           fsr2h	equ	0xFDA
 13082                           fsr2l	equ	0xFD9
 13083                           status	equ	0xFD8
 13084                           
 13085 ;; *************** function _InitSystemApplicationManagers *****************
 13086 ;; Defined at:
 13087 ;;		line 33 in file "SystemSettings.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;		None
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;		None
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  1    wreg      void 
 13094 ;; Registers used:
 13095 ;;		wreg, status,2, status,0, cstack
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13101 ;;      Params:         0       0       0       0       0       0       0
 13102 ;;      Locals:         0       0       0       0       0       0       0
 13103 ;;      Temps:          0       0       0       0       0       0       0
 13104 ;;      Totals:         0       0       0       0       0       0       0
 13105 ;;Total ram usage:        0 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    7
 13108 ;; This function calls:
 13109 ;;		_ClearMcuRunTime
 13110 ;;		_DacInit
 13111 ;;		_InitAdcApplicationMgr
 13112 ;;		_PLLInitialize
 13113 ;;		_TMR0_StartTimer
 13114 ;; This function is called by:
 13115 ;;		_main
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text63
 13120  002C8A                     __ptext63:
 13121                           	opt stack 0
 13122  002C8A                     _InitSystemApplicationManagers:
 13123                           	opt stack 23
 13124                           
 13125                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 13126                           
 13127                           ;incstack = 0
 13128  002C8A  EC7B  F016         	call	_InitAdcApplicationMgr	;wreg free
 13129                           
 13130                           ;SystemSettings.c: 39: TMR0_StartTimer();
 13131  002C8E  EC84  F016         	call	_TMR0_StartTimer	;wreg free
 13132                           
 13133                           ;SystemSettings.c: 42: PLLInitialize();
 13134  002C92  EC8A  F016         	call	_PLLInitialize	;wreg free
 13135                           
 13136                           ;SystemSettings.c: 45: ClearMcuRunTime();
 13137  002C96  EC5A  F016         	call	_ClearMcuRunTime	;wreg free
 13138                           
 13139                           ;SystemSettings.c: 48: DacInit();
 13140  002C9A  ECD1  F010         	call	_DacInit	;wreg free
 13141  002C9E  0012               	return		;funcret
 13142  002CA0                     __end_of_InitSystemApplicationManagers:
 13143                           	opt stack 0
 13144                           tosu	equ	0xFFF
 13145                           tosh	equ	0xFFE
 13146                           tosl	equ	0xFFD
 13147                           pclath	equ	0xFFA
 13148                           tblptru	equ	0xFF8
 13149                           tblptrh	equ	0xFF7
 13150                           tblptrl	equ	0xFF6
 13151                           tablat	equ	0xFF5
 13152                           prodh	equ	0xFF4
 13153                           prodl	equ	0xFF3
 13154                           intcon	equ	0xFF2
 13155                           intcon2	equ	0xFF1
 13156                           indf0	equ	0xFEF
 13157                           postinc0	equ	0xFEE
 13158                           fsr0h	equ	0xFEA
 13159                           fsr0l	equ	0xFE9
 13160                           wreg	equ	0xFE8
 13161                           indf1	equ	0xFE7
 13162                           postdec1	equ	0xFE5
 13163                           fsr1h	equ	0xFE2
 13164                           fsr1l	equ	0xFE1
 13165                           indf2	equ	0xFDF
 13166                           postinc2	equ	0xFDE
 13167                           postdec2	equ	0xFDD
 13168                           fsr2h	equ	0xFDA
 13169                           fsr2l	equ	0xFD9
 13170                           status	equ	0xFD8
 13171                           
 13172 ;; *************** function _TMR0_StartTimer *****************
 13173 ;; Defined at:
 13174 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;		None
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;		None
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		None
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13188 ;;      Params:         0       0       0       0       0       0       0
 13189 ;;      Locals:         0       0       0       0       0       0       0
 13190 ;;      Temps:          0       0       0       0       0       0       0
 13191 ;;      Totals:         0       0       0       0       0       0       0
 13192 ;;Total ram usage:        0 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    3
 13195 ;; This function calls:
 13196 ;;		Nothing
 13197 ;; This function is called by:
 13198 ;;		_InitSystemApplicationManagers
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           	psect	text64
 13203  002D08                     __ptext64:
 13204                           	opt stack 0
 13205  002D08                     _TMR0_StartTimer:
 13206                           	opt stack 26
 13207                           
 13208                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 13209                           
 13210                           ;incstack = 0
 13211  002D08  8ED5               	bsf	4053,7,c	;volatile
 13212  002D0A  0012               	return		;funcret
 13213  002D0C                     __end_of_TMR0_StartTimer:
 13214                           	opt stack 0
 13215                           tosu	equ	0xFFF
 13216                           tosh	equ	0xFFE
 13217                           tosl	equ	0xFFD
 13218                           pclath	equ	0xFFA
 13219                           tblptru	equ	0xFF8
 13220                           tblptrh	equ	0xFF7
 13221                           tblptrl	equ	0xFF6
 13222                           tablat	equ	0xFF5
 13223                           prodh	equ	0xFF4
 13224                           prodl	equ	0xFF3
 13225                           intcon	equ	0xFF2
 13226                           intcon2	equ	0xFF1
 13227                           indf0	equ	0xFEF
 13228                           postinc0	equ	0xFEE
 13229                           fsr0h	equ	0xFEA
 13230                           fsr0l	equ	0xFE9
 13231                           wreg	equ	0xFE8
 13232                           indf1	equ	0xFE7
 13233                           postdec1	equ	0xFE5
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           fsr2h	equ	0xFDA
 13240                           fsr2l	equ	0xFD9
 13241                           status	equ	0xFD8
 13242                           
 13243 ;; *************** function _PLLInitialize *****************
 13244 ;; Defined at:
 13245 ;;		line 31 in file "SyntApp.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;		None
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;		None
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  1    wreg      void 
 13252 ;; Registers used:
 13253 ;;		None
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13259 ;;      Params:         0       0       0       0       0       0       0
 13260 ;;      Locals:         0       0       0       0       0       0       0
 13261 ;;      Temps:          0       0       0       0       0       0       0
 13262 ;;      Totals:         0       0       0       0       0       0       0
 13263 ;;Total ram usage:        0 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    3
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_InitSystemApplicationManagers
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text65
 13274  002D14                     __ptext65:
 13275                           	opt stack 0
 13276  002D14                     _PLLInitialize:
 13277                           	opt stack 26
 13278                           
 13279                           ;incstack = 0
 13280  002D14  0012               	return		;funcret
 13281  002D16                     __end_of_PLLInitialize:
 13282                           	opt stack 0
 13283                           tosu	equ	0xFFF
 13284                           tosh	equ	0xFFE
 13285                           tosl	equ	0xFFD
 13286                           pclath	equ	0xFFA
 13287                           tblptru	equ	0xFF8
 13288                           tblptrh	equ	0xFF7
 13289                           tblptrl	equ	0xFF6
 13290                           tablat	equ	0xFF5
 13291                           prodh	equ	0xFF4
 13292                           prodl	equ	0xFF3
 13293                           intcon	equ	0xFF2
 13294                           intcon2	equ	0xFF1
 13295                           indf0	equ	0xFEF
 13296                           postinc0	equ	0xFEE
 13297                           fsr0h	equ	0xFEA
 13298                           fsr0l	equ	0xFE9
 13299                           wreg	equ	0xFE8
 13300                           indf1	equ	0xFE7
 13301                           postdec1	equ	0xFE5
 13302                           fsr1h	equ	0xFE2
 13303                           fsr1l	equ	0xFE1
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8
 13310                           
 13311 ;; *************** function _InitAdcApplicationMgr *****************
 13312 ;; Defined at:
 13313 ;;		line 23 in file "AdcApp.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;		None
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  1    wreg      void 
 13320 ;; Registers used:
 13321 ;;		wreg, status,2
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13327 ;;      Params:         0       0       0       0       0       0       0
 13328 ;;      Locals:         0       0       0       0       0       0       0
 13329 ;;      Temps:          0       0       0       0       0       0       0
 13330 ;;      Totals:         0       0       0       0       0       0       0
 13331 ;;Total ram usage:        0 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    3
 13334 ;; This function calls:
 13335 ;;		Nothing
 13336 ;; This function is called by:
 13337 ;;		_InitSystemApplicationManagers
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           	psect	text66
 13342  002CF6                     __ptext66:
 13343                           	opt stack 0
 13344  002CF6                     _InitAdcApplicationMgr:
 13345                           	opt stack 26
 13346                           
 13347                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 13348                           
 13349                           ;incstack = 0
 13350  002CF6  0E00               	movlw	0
 13351  002CF8  6E3D               	movwf	_adcSampleMode,c
 13352  002CFA  0012               	return		;funcret
 13353  002CFC                     __end_of_InitAdcApplicationMgr:
 13354                           	opt stack 0
 13355                           tosu	equ	0xFFF
 13356                           tosh	equ	0xFFE
 13357                           tosl	equ	0xFFD
 13358                           pclath	equ	0xFFA
 13359                           tblptru	equ	0xFF8
 13360                           tblptrh	equ	0xFF7
 13361                           tblptrl	equ	0xFF6
 13362                           tablat	equ	0xFF5
 13363                           prodh	equ	0xFF4
 13364                           prodl	equ	0xFF3
 13365                           intcon	equ	0xFF2
 13366                           intcon2	equ	0xFF1
 13367                           indf0	equ	0xFEF
 13368                           postinc0	equ	0xFEE
 13369                           fsr0h	equ	0xFEA
 13370                           fsr0l	equ	0xFE9
 13371                           wreg	equ	0xFE8
 13372                           indf1	equ	0xFE7
 13373                           postdec1	equ	0xFE5
 13374                           fsr1h	equ	0xFE2
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           postdec2	equ	0xFDD
 13379                           fsr2h	equ	0xFDA
 13380                           fsr2l	equ	0xFD9
 13381                           status	equ	0xFD8
 13382                           
 13383 ;; *************** function _DacInit *****************
 13384 ;; Defined at:
 13385 ;;		line 24 in file "DacApp.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		wreg, status,2, status,0, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13399 ;;      Params:         0       0       0       0       0       0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0
 13402 ;;      Totals:         0       0       0       0       0       0       0
 13403 ;;Total ram usage:        0 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    6
 13406 ;; This function calls:
 13407 ;;		_SWSPI_send_word
 13408 ;; This function is called by:
 13409 ;;		_InitSystemApplicationManagers
 13410 ;; This function uses a non-reentrant model
 13411 ;;
 13412                           
 13413                           	psect	text67
 13414  0021A2                     __ptext67:
 13415                           	opt stack 0
 13416  0021A2                     _DacInit:
 13417                           	opt stack 23
 13418                           
 13419                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 13420                           
 13421                           ;incstack = 0
 13422  0021A2  0E44               	movlw	68
 13423  0021A4  6E21               	movwf	SWSPI_send_word@data,c
 13424  0021A6  0E23               	movlw	35
 13425  0021A8  6E22               	movwf	SWSPI_send_word@data+1,c
 13426  0021AA  0E00               	movlw	0
 13427  0021AC  6E23               	movwf	SWSPI_send_word@data+2,c
 13428  0021AE  0E00               	movlw	0
 13429  0021B0  6E24               	movwf	SWSPI_send_word@data+3,c
 13430  0021B2  0E01               	movlw	1
 13431  0021B4  6E25               	movwf	SWSPI_send_word@dataSize,c
 13432  0021B6  0E02               	movlw	2
 13433  0021B8  ECF6  F00D         	call	_SWSPI_send_word
 13434                           
 13435                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 13436  0021BC  0E44               	movlw	68
 13437  0021BE  6E21               	movwf	SWSPI_send_word@data,c
 13438  0021C0  0E63               	movlw	99
 13439  0021C2  6E22               	movwf	SWSPI_send_word@data+1,c
 13440  0021C4  0E00               	movlw	0
 13441  0021C6  6E23               	movwf	SWSPI_send_word@data+2,c
 13442  0021C8  0E00               	movlw	0
 13443  0021CA  6E24               	movwf	SWSPI_send_word@data+3,c
 13444  0021CC  0E01               	movlw	1
 13445  0021CE  6E25               	movwf	SWSPI_send_word@dataSize,c
 13446  0021D0  0E02               	movlw	2
 13447  0021D2  ECF6  F00D         	call	_SWSPI_send_word
 13448                           
 13449                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 13450  0021D6  0E44               	movlw	68
 13451  0021D8  6E21               	movwf	SWSPI_send_word@data,c
 13452  0021DA  0EA3               	movlw	163
 13453  0021DC  6E22               	movwf	SWSPI_send_word@data+1,c
 13454  0021DE  0E00               	movlw	0
 13455  0021E0  6E23               	movwf	SWSPI_send_word@data+2,c
 13456  0021E2  0E00               	movlw	0
 13457  0021E4  6E24               	movwf	SWSPI_send_word@data+3,c
 13458  0021E6  0E01               	movlw	1
 13459  0021E8  6E25               	movwf	SWSPI_send_word@dataSize,c
 13460  0021EA  0E02               	movlw	2
 13461  0021EC  ECF6  F00D         	call	_SWSPI_send_word
 13462                           
 13463                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 13464  0021F0  0E44               	movlw	68
 13465  0021F2  6E21               	movwf	SWSPI_send_word@data,c
 13466  0021F4  0EE3               	movlw	227
 13467  0021F6  6E22               	movwf	SWSPI_send_word@data+1,c
 13468  0021F8  0E00               	movlw	0
 13469  0021FA  6E23               	movwf	SWSPI_send_word@data+2,c
 13470  0021FC  0E00               	movlw	0
 13471  0021FE  6E24               	movwf	SWSPI_send_word@data+3,c
 13472  002200  0E01               	movlw	1
 13473  002202  6E25               	movwf	SWSPI_send_word@dataSize,c
 13474  002204  0E02               	movlw	2
 13475  002206  ECF6  F00D         	call	_SWSPI_send_word
 13476  00220A  0012               	return		;funcret
 13477  00220C                     __end_of_DacInit:
 13478                           	opt stack 0
 13479                           tosu	equ	0xFFF
 13480                           tosh	equ	0xFFE
 13481                           tosl	equ	0xFFD
 13482                           pclath	equ	0xFFA
 13483                           tblptru	equ	0xFF8
 13484                           tblptrh	equ	0xFF7
 13485                           tblptrl	equ	0xFF6
 13486                           tablat	equ	0xFF5
 13487                           prodh	equ	0xFF4
 13488                           prodl	equ	0xFF3
 13489                           intcon	equ	0xFF2
 13490                           intcon2	equ	0xFF1
 13491                           indf0	equ	0xFEF
 13492                           postinc0	equ	0xFEE
 13493                           fsr0h	equ	0xFEA
 13494                           fsr0l	equ	0xFE9
 13495                           wreg	equ	0xFE8
 13496                           indf1	equ	0xFE7
 13497                           postdec1	equ	0xFE5
 13498                           fsr1h	equ	0xFE2
 13499                           fsr1l	equ	0xFE1
 13500                           indf2	equ	0xFDF
 13501                           postinc2	equ	0xFDE
 13502                           postdec2	equ	0xFDD
 13503                           fsr2h	equ	0xFDA
 13504                           fsr2l	equ	0xFD9
 13505                           status	equ	0xFD8
 13506                           
 13507 ;; *************** function _SWSPI_send_word *****************
 13508 ;; Defined at:
 13509 ;;		line 17 in file "SwSpiApp.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  phrType         1    wreg     enum E7592
 13512 ;;  data            4   32[COMRAM] unsigned long 
 13513 ;;  dataSize        1   36[COMRAM] unsigned char 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  phrType         1   40[COMRAM] enum E7592
 13516 ;;  datac           1   37[COMRAM] unsigned char 
 13517 ;;  idx             2   38[COMRAM] int 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg, status,2, status,0, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13527 ;;      Params:         5       0       0       0       0       0       0
 13528 ;;      Locals:         4       0       0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0
 13530 ;;      Totals:         9       0       0       0       0       0       0
 13531 ;;Total ram usage:        9 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    5
 13534 ;; This function calls:
 13535 ;;		_SWSPI_DAC_send_bits
 13536 ;;		_SWSPI_Synth_send_bits
 13537 ;;		_SwSpi_Set_Dac_Sync_Pin
 13538 ;;		_SwSpi_Set_Synth_Le_Pin
 13539 ;;		_make8
 13540 ;; This function is called by:
 13541 ;;		_DacInit
 13542 ;;		_DacSetValue
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545                           
 13546                           	psect	text68
 13547  001BEC                     __ptext68:
 13548                           	opt stack 0
 13549  001BEC                     _SWSPI_send_word:
 13550                           	opt stack 23
 13551                           
 13552                           ;incstack = 0
 13553                           ;SWSPI_send_word@phrType stored from wreg
 13554  001BEC  6E29               	movwf	SWSPI_send_word@phrType,c
 13555                           
 13556                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 13557  001BEE  9EF2               	bcf	intcon,7,c	;volatile
 13558                           
 13559                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13560  001BF0  5029               	movf	SWSPI_send_word@phrType,w,c
 13561  001BF2  B4D8               	btfsc	status,2,c
 13562  001BF4  D003               	goto	u4740
 13563  001BF6  0429               	decf	SWSPI_send_word@phrType,w,c
 13564  001BF8  A4D8               	btfss	status,2,c
 13565  001BFA  D005               	goto	l489
 13566  001BFC                     u4740:
 13567                           
 13568                           ;SwSpiApp.c: 24: {
 13569                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 13570  001BFC  0E00               	movlw	0
 13571  001BFE  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13572  001C00  5029               	movf	SWSPI_send_word@phrType,w,c
 13573  001C02  ECA2  F014         	call	_SwSpi_Set_Synth_Le_Pin
 13574  001C06                     l489:
 13575                           
 13576                           ;SwSpiApp.c: 26: }
 13577                           ;SwSpiApp.c: 27: if(phrType == EXT_DAC)
 13578  001C06  0E02               	movlw	2
 13579  001C08  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13580  001C0A  A4D8               	btfss	status,2,c
 13581  001C0C  D003               	goto	l492
 13582                           
 13583                           ;SwSpiApp.c: 28: {
 13584                           ;SwSpiApp.c: 29: SwSpi_Set_Dac_Sync_Pin(0);
 13585  001C0E  0E00               	movlw	0
 13586  001C10  EC13  F016         	call	_SwSpi_Set_Dac_Sync_Pin
 13587  001C14                     l492:
 13588                           
 13589                           ;SwSpiApp.c: 30: }
 13590                           ;SwSpiApp.c: 35: for(int idx = dataSize + 1; idx > 0; idx--)
 13591  001C14  0E01               	movlw	1
 13592  001C16  2425               	addwf	SWSPI_send_word@dataSize,w,c
 13593  001C18  6E27               	movwf	SWSPI_send_word@idx,c
 13594  001C1A  6A28               	clrf	SWSPI_send_word@idx+1,c
 13595  001C1C  0E00               	movlw	0
 13596  001C1E  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 13597  001C20                     l5153:
 13598  001C20  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 13599  001C22  D02B               	goto	u4800
 13600  001C24  5028               	movf	SWSPI_send_word@idx+1,w,c
 13601  001C26  E103               	bnz	l5157
 13602  001C28  0427               	decf	SWSPI_send_word@idx,w,c
 13603  001C2A  A0D8               	btfss	status,0,c
 13604  001C2C  D026               	goto	u4800
 13605  001C2E                     l5157:
 13606                           
 13607                           ;SwSpiApp.c: 36: {
 13608                           ;SwSpiApp.c: 37: uint8_t datac = make8(data, idx - 1);
 13609  001C2E  C021  F018         	movff	SWSPI_send_word@data,make8@data
 13610  001C32  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 13611  001C36  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 13612  001C3A  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 13613  001C3E  0427               	decf	SWSPI_send_word@idx,w,c
 13614  001C40  6E1C               	movwf	make8@dataLocation,c
 13615  001C42  ECC6  F011         	call	_make8	;wreg free
 13616  001C46  6E26               	movwf	SWSPI_send_word@datac,c
 13617                           
 13618                           ;SwSpiApp.c: 39: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13619  001C48  5029               	movf	SWSPI_send_word@phrType,w,c
 13620  001C4A  B4D8               	btfsc	status,2,c
 13621  001C4C  D003               	goto	u4780
 13622  001C4E  0429               	decf	SWSPI_send_word@phrType,w,c
 13623  001C50  A4D8               	btfss	status,2,c
 13624  001C52  D006               	goto	l495
 13625  001C54                     u4780:
 13626                           
 13627                           ;SwSpiApp.c: 40: {
 13628                           ;SwSpiApp.c: 41: SWSPI_Synth_send_bits(phrType, datac);
 13629  001C54  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_Synth_send_bits@data
 13630  001C58  5029               	movf	SWSPI_send_word@phrType,w,c
 13631  001C5A  EC20  F012         	call	_SWSPI_Synth_send_bits
 13632                           
 13633                           ;SwSpiApp.c: 42: }
 13634  001C5E  D009               	goto	l499
 13635  001C60                     l495:
 13636                           
 13637                           ;SwSpiApp.c: 43: else if (phrType == EXT_DAC)
 13638  001C60  0E02               	movlw	2
 13639  001C62  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13640  001C64  A4D8               	btfss	status,2,c
 13641  001C66  D005               	goto	l499
 13642                           
 13643                           ;SwSpiApp.c: 44: {
 13644                           ;SwSpiApp.c: 45: SWSPI_DAC_send_bits(phrType, datac);
 13645  001C68  C026  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 13646  001C6C  5029               	movf	SWSPI_send_word@phrType,w,c
 13647  001C6E  EC4C  F012         	call	_SWSPI_DAC_send_bits
 13648  001C72                     l499:
 13649  001C72  0627               	decf	SWSPI_send_word@idx,f,c
 13650  001C74  A0D8               	btfss	status,0,c
 13651  001C76  0628               	decf	SWSPI_send_word@idx+1,f,c
 13652  001C78  D7D3               	goto	l5153
 13653  001C7A                     u4800:
 13654                           
 13655                           ;SwSpiApp.c: 46: }
 13656                           ;SwSpiApp.c: 47: }
 13657                           ;SwSpiApp.c: 52: if(phrType == EXT_DAC)
 13658  001C7A  0E02               	movlw	2
 13659  001C7C  1829               	xorwf	SWSPI_send_word@phrType,w,c
 13660  001C7E  A4D8               	btfss	status,2,c
 13661  001C80  D004               	goto	l500
 13662                           
 13663                           ;SwSpiApp.c: 53: {
 13664                           ;SwSpiApp.c: 54: SwSpi_Set_Dac_Sync_Pin(1);
 13665  001C82  0E01               	movlw	1
 13666  001C84  EC13  F016         	call	_SwSpi_Set_Dac_Sync_Pin
 13667                           
 13668                           ;SwSpiApp.c: 55: }
 13669  001C88  D00B               	goto	l502
 13670  001C8A                     l500:
 13671                           
 13672                           ;SwSpiApp.c: 56: else if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 13673  001C8A  5029               	movf	SWSPI_send_word@phrType,w,c
 13674  001C8C  B4D8               	btfsc	status,2,c
 13675  001C8E  D003               	goto	u4830
 13676  001C90  0429               	decf	SWSPI_send_word@phrType,w,c
 13677  001C92  A4D8               	btfss	status,2,c
 13678  001C94  D005               	goto	l502
 13679  001C96                     u4830:
 13680                           
 13681                           ;SwSpiApp.c: 57: {
 13682                           ;SwSpiApp.c: 58: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 13683  001C96  0E01               	movlw	1
 13684  001C98  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 13685  001C9A  5029               	movf	SWSPI_send_word@phrType,w,c
 13686  001C9C  ECA2  F014         	call	_SwSpi_Set_Synth_Le_Pin
 13687  001CA0                     l502:
 13688                           
 13689                           ;SwSpiApp.c: 59: }
 13690                           ;SwSpiApp.c: 62: (INTCONbits.GIE = 1);
 13691  001CA0  8EF2               	bsf	intcon,7,c	;volatile
 13692  001CA2  0012               	return		;funcret
 13693  001CA4                     __end_of_SWSPI_send_word:
 13694                           	opt stack 0
 13695                           tosu	equ	0xFFF
 13696                           tosh	equ	0xFFE
 13697                           tosl	equ	0xFFD
 13698                           pclath	equ	0xFFA
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           intcon	equ	0xFF2
 13706                           intcon2	equ	0xFF1
 13707                           indf0	equ	0xFEF
 13708                           postinc0	equ	0xFEE
 13709                           fsr0h	equ	0xFEA
 13710                           fsr0l	equ	0xFE9
 13711                           wreg	equ	0xFE8
 13712                           indf1	equ	0xFE7
 13713                           postdec1	equ	0xFE5
 13714                           fsr1h	equ	0xFE2
 13715                           fsr1l	equ	0xFE1
 13716                           indf2	equ	0xFDF
 13717                           postinc2	equ	0xFDE
 13718                           postdec2	equ	0xFDD
 13719                           fsr2h	equ	0xFDA
 13720                           fsr2l	equ	0xFD9
 13721                           status	equ	0xFD8
 13722                           
 13723 ;; *************** function _make8 *****************
 13724 ;; Defined at:
 13725 ;;		line 61 in file "SystemCommon.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  data            4   23[COMRAM] unsigned long 
 13728 ;;  dataLocation    1   27[COMRAM] unsigned char 
 13729 ;; Auto vars:     Size  Location     Type
 13730 ;;		None
 13731 ;; Return value:  Size  Location     Type
 13732 ;;                  1    wreg      unsigned char 
 13733 ;; Registers used:
 13734 ;;		wreg, status,2, status,0
 13735 ;; Tracked objects:
 13736 ;;		On entry : 0/0
 13737 ;;		On exit  : 0/0
 13738 ;;		Unchanged: 0/0
 13739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13740 ;;      Params:         5       0       0       0       0       0       0
 13741 ;;      Locals:         0       0       0       0       0       0       0
 13742 ;;      Temps:          4       0       0       0       0       0       0
 13743 ;;      Totals:         9       0       0       0       0       0       0
 13744 ;;Total ram usage:        9 bytes
 13745 ;; Hardware stack levels used:    1
 13746 ;; Hardware stack levels required when called:    3
 13747 ;; This function calls:
 13748 ;;		Nothing
 13749 ;; This function is called by:
 13750 ;;		_SWSPI_send_word
 13751 ;;		_FlashReadCondition
 13752 ;; This function uses a non-reentrant model
 13753 ;;
 13754                           
 13755                           	psect	text69
 13756  00238C                     __ptext69:
 13757                           	opt stack 0
 13758  00238C                     _make8:
 13759                           	opt stack 24
 13760                           
 13761                           ;SystemCommon.c: 63: switch(dataLocation)
 13762                           
 13763                           ;incstack = 0
 13764  00238C  D01F               	goto	l1134
 13765  00238E                     
 13766                           ;SystemCommon.c: 66: return (data & 0x000000ff);
 13767  00238E  5018               	movf	make8@data,w,c
 13768  002390  0012               	return	
 13769  002392                     
 13770                           ;SystemCommon.c: 69: return (data & 0x0000ff00) >> 8;
 13771  002392  5019               	movf	make8@data+1,w,c
 13772  002394  0012               	return	
 13773  002396                     
 13774                           ;SystemCommon.c: 72: return (data & 0x00ff0000) >> 16;
 13775  002396  501A               	movf	make8@data+2,w,c
 13776  002398  0012               	return	
 13777  00239A                     
 13778                           ;SystemCommon.c: 75: return (data & 0xff000000) >> 24;
 13779  00239A  0E00               	movlw	0
 13780  00239C  1418               	andwf	make8@data,w,c
 13781  00239E  6E1D               	movwf	??_make8& (0+255),c
 13782  0023A0  0E00               	movlw	0
 13783  0023A2  1419               	andwf	make8@data+1,w,c
 13784  0023A4  6E1E               	movwf	(??_make8+1)& (0+255),c
 13785  0023A6  0E00               	movlw	0
 13786  0023A8  141A               	andwf	make8@data+2,w,c
 13787  0023AA  6E1F               	movwf	(??_make8+2)& (0+255),c
 13788  0023AC  0EFF               	movlw	255
 13789  0023AE  141B               	andwf	make8@data+3,w,c
 13790  0023B0  6E20               	movwf	(??_make8+3)& (0+255),c
 13791  0023B2  0E19               	movlw	25
 13792  0023B4  D005               	goto	u4350
 13793  0023B6                     u4355:
 13794  0023B6  90D8               	bcf	status,0,c
 13795  0023B8  3220               	rrcf	??_make8+3,f,c
 13796  0023BA  321F               	rrcf	??_make8+2,f,c
 13797  0023BC  321E               	rrcf	??_make8+1,f,c
 13798  0023BE  321D               	rrcf	??_make8,f,c
 13799  0023C0                     u4350:
 13800  0023C0  2EE8               	decfsz	wreg,f,c
 13801  0023C2  D7F9               	goto	u4355
 13802  0023C4  501D               	movf	??_make8,w,c
 13803  0023C6  0012               	return	
 13804  0023C8                     
 13805                           ;SystemCommon.c: 78: return (0);
 13806  0023C8  0E00               	movlw	0
 13807                           
 13808                           ;SystemCommon.c: 79: }
 13809  0023CA  0012               	return	
 13810  0023CC                     l1134:
 13811  0023CC  501C               	movf	make8@dataLocation,w,c
 13812                           
 13813                           ; Switch size 1, requested type "space"
 13814                           ; Number of cases is 4, Range of values is 0 to 3
 13815                           ; switch strategies available:
 13816                           ; Name         Instructions Cycles
 13817                           ; simple_byte           13     7 (average)
 13818                           ;	Chosen strategy is simple_byte
 13819  0023CE  0A00               	xorlw	0	; case 0
 13820  0023D0  B4D8               	btfsc	status,2,c
 13821  0023D2  D7DD               	goto	l1135
 13822  0023D4  0A01               	xorlw	1	; case 1
 13823  0023D6  B4D8               	btfsc	status,2,c
 13824  0023D8  D7DC               	goto	l1137
 13825  0023DA  0A03               	xorlw	3	; case 2
 13826  0023DC  B4D8               	btfsc	status,2,c
 13827  0023DE  D7DB               	goto	l1138
 13828  0023E0  0A01               	xorlw	1	; case 3
 13829  0023E2  B4D8               	btfsc	status,2,c
 13830  0023E4  D7DA               	goto	l1139
 13831  0023E6  D7F0               	goto	l1140
 13832  0023E8                     __end_of_make8:
 13833                           	opt stack 0
 13834                           tosu	equ	0xFFF
 13835                           tosh	equ	0xFFE
 13836                           tosl	equ	0xFFD
 13837                           pclath	equ	0xFFA
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           intcon2	equ	0xFF1
 13846                           indf0	equ	0xFEF
 13847                           postinc0	equ	0xFEE
 13848                           fsr0h	equ	0xFEA
 13849                           fsr0l	equ	0xFE9
 13850                           wreg	equ	0xFE8
 13851                           indf1	equ	0xFE7
 13852                           postdec1	equ	0xFE5
 13853                           fsr1h	equ	0xFE2
 13854                           fsr1l	equ	0xFE1
 13855                           indf2	equ	0xFDF
 13856                           postinc2	equ	0xFDE
 13857                           postdec2	equ	0xFDD
 13858                           fsr2h	equ	0xFDA
 13859                           fsr2l	equ	0xFD9
 13860                           status	equ	0xFD8
 13861                           
 13862 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 13863 ;; Defined at:
 13864 ;;		line 252 in file "SwSpiApp.c"
 13865 ;; Parameters:    Size  Location     Type
 13866 ;;  phrType         1    wreg     enum E7592
 13867 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13868 ;; Auto vars:     Size  Location     Type
 13869 ;;  phrType         1   24[COMRAM] enum E7592
 13870 ;; Return value:  Size  Location     Type
 13871 ;;                  1    wreg      void 
 13872 ;; Registers used:
 13873 ;;		wreg, status,2, status,0
 13874 ;; Tracked objects:
 13875 ;;		On entry : 0/0
 13876 ;;		On exit  : 0/0
 13877 ;;		Unchanged: 0/0
 13878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13879 ;;      Params:         1       0       0       0       0       0       0
 13880 ;;      Locals:         1       0       0       0       0       0       0
 13881 ;;      Temps:          0       0       0       0       0       0       0
 13882 ;;      Totals:         2       0       0       0       0       0       0
 13883 ;;Total ram usage:        2 bytes
 13884 ;; Hardware stack levels used:    1
 13885 ;; Hardware stack levels required when called:    3
 13886 ;; This function calls:
 13887 ;;		Nothing
 13888 ;; This function is called by:
 13889 ;;		_SWSPI_send_word
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           	psect	text70
 13894  002944                     __ptext70:
 13895                           	opt stack 0
 13896  002944                     _SwSpi_Set_Synth_Le_Pin:
 13897                           	opt stack 24
 13898                           
 13899                           ;incstack = 0
 13900                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 13901  002944  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 13902                           
 13903                           ;SwSpiApp.c: 254: switch(phrType)
 13904  002946  D014               	goto	l611
 13905  002948                     
 13906                           ;SwSpiApp.c: 257: if(cPinMode == 1)
 13907  002948  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13908  00294A  A4D8               	btfss	status,2,c
 13909  00294C  D002               	goto	l613
 13910                           
 13911                           ;SwSpiApp.c: 258: {
 13912                           ;SwSpiApp.c: 259: do { LATCbits.LATC2 = 1; } while(0);
 13913  00294E  848B               	bsf	3979,2,c	;volatile
 13914                           
 13915                           ;SwSpiApp.c: 260: }
 13916  002950  0012               	return	
 13917  002952                     l613:
 13918                           
 13919                           ;SwSpiApp.c: 261: else if(cPinMode == 0)
 13920  002952  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13921  002954  A4D8               	btfss	status,2,c
 13922  002956  0012               	return	
 13923                           
 13924                           ;SwSpiApp.c: 262: {
 13925                           ;SwSpiApp.c: 263: do { LATCbits.LATC2 = 0; } while(0);
 13926  002958  948B               	bcf	3979,2,c	;volatile
 13927                           
 13928                           ;SwSpiApp.c: 264: }
 13929                           ;SwSpiApp.c: 265: break;
 13930  00295A  0012               	return	
 13931  00295C                     
 13932                           ;SwSpiApp.c: 268: if(cPinMode == 1)
 13933  00295C  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13934  00295E  A4D8               	btfss	status,2,c
 13935  002960  D002               	goto	l622
 13936                           
 13937                           ;SwSpiApp.c: 269: {
 13938                           ;SwSpiApp.c: 270: do { LATDbits.LATD3 = 1; } while(0);
 13939  002962  868C               	bsf	3980,3,c	;volatile
 13940                           
 13941                           ;SwSpiApp.c: 271: }
 13942  002964  0012               	return	
 13943  002966                     l622:
 13944                           
 13945                           ;SwSpiApp.c: 272: else if(cPinMode == 0)
 13946  002966  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 13947  002968  A4D8               	btfss	status,2,c
 13948  00296A  0012               	return	
 13949                           
 13950                           ;SwSpiApp.c: 273: {
 13951                           ;SwSpiApp.c: 274: do { LATDbits.LATD3 = 0; } while(0);
 13952  00296C  968C               	bcf	3980,3,c	;volatile
 13953                           
 13954                           ;SwSpiApp.c: 277: }
 13955                           
 13956                           ;SwSpiApp.c: 275: }
 13957                           ;SwSpiApp.c: 276: break;
 13958  00296E  0012               	return	
 13959  002970                     l611:
 13960  002970  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 13961                           
 13962                           ; Switch size 1, requested type "space"
 13963                           ; Number of cases is 2, Range of values is 0 to 1
 13964                           ; switch strategies available:
 13965                           ; Name         Instructions Cycles
 13966                           ; simple_byte            7     4 (average)
 13967                           ;	Chosen strategy is simple_byte
 13968  002972  0A00               	xorlw	0	; case 0
 13969  002974  B4D8               	btfsc	status,2,c
 13970  002976  D7E8               	goto	l612
 13971  002978  0A01               	xorlw	1	; case 1
 13972  00297A  A4D8               	btfss	status,2,c
 13973  00297C  0012               	return	
 13974  00297E  D7EE               	goto	l621
 13975  002980                     __end_of_SwSpi_Set_Synth_Le_Pin:
 13976                           	opt stack 0
 13977                           tosu	equ	0xFFF
 13978                           tosh	equ	0xFFE
 13979                           tosl	equ	0xFFD
 13980                           pclath	equ	0xFFA
 13981                           tblptru	equ	0xFF8
 13982                           tblptrh	equ	0xFF7
 13983                           tblptrl	equ	0xFF6
 13984                           tablat	equ	0xFF5
 13985                           prodh	equ	0xFF4
 13986                           prodl	equ	0xFF3
 13987                           intcon	equ	0xFF2
 13988                           intcon2	equ	0xFF1
 13989                           indf0	equ	0xFEF
 13990                           postinc0	equ	0xFEE
 13991                           fsr0h	equ	0xFEA
 13992                           fsr0l	equ	0xFE9
 13993                           wreg	equ	0xFE8
 13994                           indf1	equ	0xFE7
 13995                           postdec1	equ	0xFE5
 13996                           fsr1h	equ	0xFE2
 13997                           fsr1l	equ	0xFE1
 13998                           indf2	equ	0xFDF
 13999                           postinc2	equ	0xFDE
 14000                           postdec2	equ	0xFDD
 14001                           fsr2h	equ	0xFDA
 14002                           fsr2l	equ	0xFD9
 14003                           status	equ	0xFD8
 14004                           
 14005 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 14006 ;; Defined at:
 14007 ;;		line 280 in file "SwSpiApp.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  cPinMode        1    wreg     unsigned char 
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      void 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2, status,0
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14021 ;;      Params:         0       0       0       0       0       0       0
 14022 ;;      Locals:         1       0       0       0       0       0       0
 14023 ;;      Temps:          0       0       0       0       0       0       0
 14024 ;;      Totals:         1       0       0       0       0       0       0
 14025 ;;Total ram usage:        1 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    3
 14028 ;; This function calls:
 14029 ;;		Nothing
 14030 ;; This function is called by:
 14031 ;;		_SWSPI_send_word
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035                           	psect	text71
 14036  002C26                     __ptext71:
 14037                           	opt stack 0
 14038  002C26                     _SwSpi_Set_Dac_Sync_Pin:
 14039                           	opt stack 24
 14040                           
 14041                           ;incstack = 0
 14042                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 14043  002C26  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 14044                           
 14045                           ;SwSpiApp.c: 282: switch(cPinMode)
 14046  002C28  D004               	goto	l632
 14047  002C2A                     
 14048                           ;SwSpiApp.c: 285: do { LATAbits.LATA2 = 0; } while(0);
 14049  002C2A  9489               	bcf	3977,2,c	;volatile
 14050                           
 14051                           ;SwSpiApp.c: 286: break;
 14052  002C2C  0012               	return	
 14053  002C2E                     
 14054                           ;SwSpiApp.c: 289: do { LATAbits.LATA2 = 1; } while(0);
 14055  002C2E  8489               	bsf	3977,2,c	;volatile
 14056                           
 14057                           ;SwSpiApp.c: 291: }
 14058                           
 14059                           ;SwSpiApp.c: 290: break;
 14060  002C30  0012               	return	
 14061  002C32                     l632:
 14062  002C32  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 14063                           
 14064                           ; Switch size 1, requested type "space"
 14065                           ; Number of cases is 2, Range of values is 0 to 1
 14066                           ; switch strategies available:
 14067                           ; Name         Instructions Cycles
 14068                           ; simple_byte            7     4 (average)
 14069                           ;	Chosen strategy is simple_byte
 14070  002C34  0A00               	xorlw	0	; case 0
 14071  002C36  B4D8               	btfsc	status,2,c
 14072  002C38  D7F8               	goto	l633
 14073  002C3A  0A01               	xorlw	1	; case 1
 14074  002C3C  A4D8               	btfss	status,2,c
 14075  002C3E  0012               	return	
 14076  002C40  D7F6               	goto	l637
 14077  002C42                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 14078                           	opt stack 0
 14079                           tosu	equ	0xFFF
 14080                           tosh	equ	0xFFE
 14081                           tosl	equ	0xFFD
 14082                           pclath	equ	0xFFA
 14083                           tblptru	equ	0xFF8
 14084                           tblptrh	equ	0xFF7
 14085                           tblptrl	equ	0xFF6
 14086                           tablat	equ	0xFF5
 14087                           prodh	equ	0xFF4
 14088                           prodl	equ	0xFF3
 14089                           intcon	equ	0xFF2
 14090                           intcon2	equ	0xFF1
 14091                           indf0	equ	0xFEF
 14092                           postinc0	equ	0xFEE
 14093                           fsr0h	equ	0xFEA
 14094                           fsr0l	equ	0xFE9
 14095                           wreg	equ	0xFE8
 14096                           indf1	equ	0xFE7
 14097                           postdec1	equ	0xFE5
 14098                           fsr1h	equ	0xFE2
 14099                           fsr1l	equ	0xFE1
 14100                           indf2	equ	0xFDF
 14101                           postinc2	equ	0xFDE
 14102                           postdec2	equ	0xFDD
 14103                           fsr2h	equ	0xFDA
 14104                           fsr2l	equ	0xFD9
 14105                           status	equ	0xFD8
 14106                           
 14107 ;; *************** function _SWSPI_Synth_send_bits *****************
 14108 ;; Defined at:
 14109 ;;		line 89 in file "SwSpiApp.c"
 14110 ;; Parameters:    Size  Location     Type
 14111 ;;  phrType         1    wreg     enum E7592
 14112 ;;  data            1   25[COMRAM] unsigned char 
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;  phrType         1   27[COMRAM] enum E7592
 14115 ;;  count           1   26[COMRAM] unsigned char 
 14116 ;; Return value:  Size  Location     Type
 14117 ;;                  1    wreg      void 
 14118 ;; Registers used:
 14119 ;;		wreg, status,2, status,0, cstack
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14125 ;;      Params:         1       0       0       0       0       0       0
 14126 ;;      Locals:         2       0       0       0       0       0       0
 14127 ;;      Temps:          0       0       0       0       0       0       0
 14128 ;;      Totals:         3       0       0       0       0       0       0
 14129 ;;Total ram usage:        3 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; Hardware stack levels required when called:    4
 14132 ;; This function calls:
 14133 ;;		_SwSpi_Clk_Pin
 14134 ;;		_SwSpi_Data_Pin
 14135 ;; This function is called by:
 14136 ;;		_SWSPI_send_word
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text72
 14141  002440                     __ptext72:
 14142                           	opt stack 0
 14143  002440                     _SWSPI_Synth_send_bits:
 14144                           	opt stack 23
 14145                           
 14146                           ;incstack = 0
 14147                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 14148  002440  6E1C               	movwf	SWSPI_Synth_send_bits@phrType,c
 14149                           
 14150                           ;SwSpiApp.c: 91: uint8_t count;
 14151                           ;SwSpiApp.c: 92: for (count = 8; count ; count--, data <<= 1)
 14152  002442  0E08               	movlw	8
 14153  002444  6E1B               	movwf	SWSPI_Synth_send_bits@count,c
 14154  002446  D01A               	goto	l516
 14155  002448                     
 14156                           ;SwSpiApp.c: 93: {
 14157                           ;SwSpiApp.c: 94: SwSpi_Clk_Pin(phrType, 0);
 14158  002448  0E00               	movlw	0
 14159  00244A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14160  00244C  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14161  00244E  ECCE  F012         	call	_SwSpi_Clk_Pin
 14162                           
 14163                           ;SwSpiApp.c: 96: if (data & 0X80)
 14164  002452  AE1A               	btfss	SWSPI_Synth_send_bits@data,7,c
 14165  002454  D006               	goto	l518
 14166                           
 14167                           ;SwSpiApp.c: 97: {
 14168                           ;SwSpiApp.c: 99: SwSpi_Data_Pin(phrType, 1);
 14169  002456  0E01               	movlw	1
 14170  002458  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14171  00245A  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14172  00245C  ECA3  F012         	call	_SwSpi_Data_Pin
 14173                           
 14174                           ;SwSpiApp.c: 100: }
 14175  002460  D005               	goto	l519
 14176  002462                     l518:
 14177                           
 14178                           ;SwSpiApp.c: 101: else
 14179                           ;SwSpiApp.c: 102: {
 14180                           ;SwSpiApp.c: 103: SwSpi_Data_Pin(phrType, 0);
 14181  002462  0E00               	movlw	0
 14182  002464  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14183  002466  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14184  002468  ECA3  F012         	call	_SwSpi_Data_Pin
 14185  00246C                     l519:
 14186                           
 14187                           ;SwSpiApp.c: 104: }
 14188                           ;SwSpiApp.c: 106: SwSpi_Clk_Pin(phrType, 1);
 14189  00246C  0E01               	movlw	1
 14190  00246E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14191  002470  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14192  002472  ECCE  F012         	call	_SwSpi_Clk_Pin
 14193  002476  061B               	decf	SWSPI_Synth_send_bits@count,f,c
 14194  002478  90D8               	bcf	status,0,c
 14195  00247A  361A               	rlcf	SWSPI_Synth_send_bits@data,f,c
 14196  00247C                     l516:
 14197  00247C  501B               	movf	SWSPI_Synth_send_bits@count,w,c
 14198  00247E  A4D8               	btfss	status,2,c
 14199  002480  D7E3               	goto	l517
 14200                           
 14201                           ;SwSpiApp.c: 113: }
 14202                           ;SwSpiApp.c: 115: SwSpi_Data_Pin(phrType, 0);
 14203  002482  0E00               	movlw	0
 14204  002484  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14205  002486  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14206  002488  ECA3  F012         	call	_SwSpi_Data_Pin
 14207                           
 14208                           ;SwSpiApp.c: 116: SwSpi_Clk_Pin(phrType, 0);
 14209  00248C  0E00               	movlw	0
 14210  00248E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14211  002490  501C               	movf	SWSPI_Synth_send_bits@phrType,w,c
 14212  002492  ECCE  F012         	call	_SwSpi_Clk_Pin
 14213  002496  0012               	return		;funcret
 14214  002498                     __end_of_SWSPI_Synth_send_bits:
 14215                           	opt stack 0
 14216                           tosu	equ	0xFFF
 14217                           tosh	equ	0xFFE
 14218                           tosl	equ	0xFFD
 14219                           pclath	equ	0xFFA
 14220                           tblptru	equ	0xFF8
 14221                           tblptrh	equ	0xFF7
 14222                           tblptrl	equ	0xFF6
 14223                           tablat	equ	0xFF5
 14224                           prodh	equ	0xFF4
 14225                           prodl	equ	0xFF3
 14226                           intcon	equ	0xFF2
 14227                           intcon2	equ	0xFF1
 14228                           indf0	equ	0xFEF
 14229                           postinc0	equ	0xFEE
 14230                           fsr0h	equ	0xFEA
 14231                           fsr0l	equ	0xFE9
 14232                           wreg	equ	0xFE8
 14233                           indf1	equ	0xFE7
 14234                           postdec1	equ	0xFE5
 14235                           fsr1h	equ	0xFE2
 14236                           fsr1l	equ	0xFE1
 14237                           indf2	equ	0xFDF
 14238                           postinc2	equ	0xFDE
 14239                           postdec2	equ	0xFDD
 14240                           fsr2h	equ	0xFDA
 14241                           fsr2l	equ	0xFD9
 14242                           status	equ	0xFD8
 14243                           
 14244 ;; *************** function _SWSPI_DAC_send_bits *****************
 14245 ;; Defined at:
 14246 ;;		line 65 in file "SwSpiApp.c"
 14247 ;; Parameters:    Size  Location     Type
 14248 ;;  phrType         1    wreg     enum E7592
 14249 ;;  data            1   25[COMRAM] unsigned char 
 14250 ;; Auto vars:     Size  Location     Type
 14251 ;;  phrType         1   27[COMRAM] enum E7592
 14252 ;;  count           1   26[COMRAM] unsigned char 
 14253 ;; Return value:  Size  Location     Type
 14254 ;;                  1    wreg      void 
 14255 ;; Registers used:
 14256 ;;		wreg, status,2, status,0, cstack
 14257 ;; Tracked objects:
 14258 ;;		On entry : 0/0
 14259 ;;		On exit  : 0/0
 14260 ;;		Unchanged: 0/0
 14261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14262 ;;      Params:         1       0       0       0       0       0       0
 14263 ;;      Locals:         2       0       0       0       0       0       0
 14264 ;;      Temps:          0       0       0       0       0       0       0
 14265 ;;      Totals:         3       0       0       0       0       0       0
 14266 ;;Total ram usage:        3 bytes
 14267 ;; Hardware stack levels used:    1
 14268 ;; Hardware stack levels required when called:    4
 14269 ;; This function calls:
 14270 ;;		_SwSpi_Clk_Pin
 14271 ;;		_SwSpi_Data_Pin
 14272 ;; This function is called by:
 14273 ;;		_SWSPI_send_word
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           	psect	text73
 14278  002498                     __ptext73:
 14279                           	opt stack 0
 14280  002498                     _SWSPI_DAC_send_bits:
 14281                           	opt stack 23
 14282                           
 14283                           ;incstack = 0
 14284                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 14285  002498  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 14286                           
 14287                           ;SwSpiApp.c: 67: uint8_t count;
 14288                           ;SwSpiApp.c: 68: for (count = 8; count ; count--, data <<= 1)
 14289  00249A  0E08               	movlw	8
 14290  00249C  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 14291  00249E  D01A               	goto	l508
 14292  0024A0                     
 14293                           ;SwSpiApp.c: 69: {
 14294                           ;SwSpiApp.c: 70: SwSpi_Clk_Pin(phrType, 1);
 14295  0024A0  0E01               	movlw	1
 14296  0024A2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14297  0024A4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14298  0024A6  ECCE  F012         	call	_SwSpi_Clk_Pin
 14299                           
 14300                           ;SwSpiApp.c: 72: if (data & 0X80)
 14301  0024AA  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 14302  0024AC  D006               	goto	l510
 14303                           
 14304                           ;SwSpiApp.c: 73: {
 14305                           ;SwSpiApp.c: 75: SwSpi_Data_Pin(phrType, 1);
 14306  0024AE  0E01               	movlw	1
 14307  0024B0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14308  0024B2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14309  0024B4  ECA3  F012         	call	_SwSpi_Data_Pin
 14310                           
 14311                           ;SwSpiApp.c: 76: }
 14312  0024B8  D005               	goto	l511
 14313  0024BA                     l510:
 14314                           
 14315                           ;SwSpiApp.c: 77: else
 14316                           ;SwSpiApp.c: 78: {
 14317                           ;SwSpiApp.c: 79: SwSpi_Data_Pin(phrType, 0);
 14318  0024BA  0E00               	movlw	0
 14319  0024BC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14320  0024BE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14321  0024C0  ECA3  F012         	call	_SwSpi_Data_Pin
 14322  0024C4                     l511:
 14323                           
 14324                           ;SwSpiApp.c: 80: }
 14325                           ;SwSpiApp.c: 82: SwSpi_Clk_Pin(phrType, 0);
 14326  0024C4  0E00               	movlw	0
 14327  0024C6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14328  0024C8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14329  0024CA  ECCE  F012         	call	_SwSpi_Clk_Pin
 14330  0024CE  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 14331  0024D0  90D8               	bcf	status,0,c
 14332  0024D2  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 14333  0024D4                     l508:
 14334  0024D4  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 14335  0024D6  A4D8               	btfss	status,2,c
 14336  0024D8  D7E3               	goto	l509
 14337                           
 14338                           ;SwSpiApp.c: 83: }
 14339                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 0);
 14340  0024DA  0E00               	movlw	0
 14341  0024DC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 14342  0024DE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14343  0024E0  ECA3  F012         	call	_SwSpi_Data_Pin
 14344                           
 14345                           ;SwSpiApp.c: 86: SwSpi_Clk_Pin(phrType, 0);
 14346  0024E4  0E00               	movlw	0
 14347  0024E6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 14348  0024E8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 14349  0024EA  ECCE  F012         	call	_SwSpi_Clk_Pin
 14350  0024EE  0012               	return		;funcret
 14351  0024F0                     __end_of_SWSPI_DAC_send_bits:
 14352                           	opt stack 0
 14353                           tosu	equ	0xFFF
 14354                           tosh	equ	0xFFE
 14355                           tosl	equ	0xFFD
 14356                           pclath	equ	0xFFA
 14357                           tblptru	equ	0xFF8
 14358                           tblptrh	equ	0xFF7
 14359                           tblptrl	equ	0xFF6
 14360                           tablat	equ	0xFF5
 14361                           prodh	equ	0xFF4
 14362                           prodl	equ	0xFF3
 14363                           intcon	equ	0xFF2
 14364                           intcon2	equ	0xFF1
 14365                           indf0	equ	0xFEF
 14366                           postinc0	equ	0xFEE
 14367                           fsr0h	equ	0xFEA
 14368                           fsr0l	equ	0xFE9
 14369                           wreg	equ	0xFE8
 14370                           indf1	equ	0xFE7
 14371                           postdec1	equ	0xFE5
 14372                           fsr1h	equ	0xFE2
 14373                           fsr1l	equ	0xFE1
 14374                           indf2	equ	0xFDF
 14375                           postinc2	equ	0xFDE
 14376                           postdec2	equ	0xFDD
 14377                           fsr2h	equ	0xFDA
 14378                           fsr2l	equ	0xFD9
 14379                           status	equ	0xFD8
 14380                           
 14381 ;; *************** function _SwSpi_Data_Pin *****************
 14382 ;; Defined at:
 14383 ;;		line 123 in file "SwSpiApp.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;  phrType         1    wreg     enum E7592
 14386 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14387 ;; Auto vars:     Size  Location     Type
 14388 ;;  phrType         1   24[COMRAM] enum E7592
 14389 ;; Return value:  Size  Location     Type
 14390 ;;                  1    wreg      void 
 14391 ;; Registers used:
 14392 ;;		wreg, status,2, status,0
 14393 ;; Tracked objects:
 14394 ;;		On entry : 0/0
 14395 ;;		On exit  : 0/0
 14396 ;;		Unchanged: 0/0
 14397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14398 ;;      Params:         1       0       0       0       0       0       0
 14399 ;;      Locals:         1       0       0       0       0       0       0
 14400 ;;      Temps:          0       0       0       0       0       0       0
 14401 ;;      Totals:         2       0       0       0       0       0       0
 14402 ;;Total ram usage:        2 bytes
 14403 ;; Hardware stack levels used:    1
 14404 ;; Hardware stack levels required when called:    3
 14405 ;; This function calls:
 14406 ;;		Nothing
 14407 ;; This function is called by:
 14408 ;;		_SWSPI_DAC_send_bits
 14409 ;;		_SWSPI_Synth_send_bits
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           	psect	text74
 14414  002546                     __ptext74:
 14415                           	opt stack 0
 14416  002546                     _SwSpi_Data_Pin:
 14417                           	opt stack 23
 14418                           
 14419                           ;incstack = 0
 14420                           ;SwSpi_Data_Pin@phrType stored from wreg
 14421  002546  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 14422                           
 14423                           ;SwSpiApp.c: 125: switch(phrType)
 14424  002548  D01E               	goto	l524
 14425  00254A                     
 14426                           ;SwSpiApp.c: 128: if(cPinMode == 1)
 14427  00254A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14428  00254C  A4D8               	btfss	status,2,c
 14429  00254E  D002               	goto	l526
 14430                           
 14431                           ;SwSpiApp.c: 129: {
 14432                           ;SwSpiApp.c: 130: do { LATDbits.LATD0 = 1; } while(0);
 14433  002550  808C               	bsf	3980,0,c	;volatile
 14434                           
 14435                           ;SwSpiApp.c: 131: }
 14436  002552  0012               	return	
 14437  002554                     l526:
 14438                           
 14439                           ;SwSpiApp.c: 132: else if (cPinMode == 0)
 14440  002554  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14441  002556  A4D8               	btfss	status,2,c
 14442  002558  0012               	return	
 14443                           
 14444                           ;SwSpiApp.c: 133: {
 14445                           ;SwSpiApp.c: 134: do { LATDbits.LATD0 = 0; } while(0);
 14446  00255A  908C               	bcf	3980,0,c	;volatile
 14447                           
 14448                           ;SwSpiApp.c: 135: }
 14449                           ;SwSpiApp.c: 136: break;
 14450  00255C  0012               	return	
 14451  00255E                     
 14452                           ;SwSpiApp.c: 139: if(cPinMode == 1)
 14453  00255E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14454  002560  A4D8               	btfss	status,2,c
 14455  002562  D002               	goto	l535
 14456                           
 14457                           ;SwSpiApp.c: 140: {
 14458                           ;SwSpiApp.c: 141: do { LATCbits.LATC5 = 1; } while(0);
 14459  002564  8A8B               	bsf	3979,5,c	;volatile
 14460                           
 14461                           ;SwSpiApp.c: 142: }
 14462  002566  0012               	return	
 14463  002568                     l535:
 14464                           
 14465                           ;SwSpiApp.c: 143: else if (cPinMode == 0)
 14466  002568  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14467  00256A  A4D8               	btfss	status,2,c
 14468  00256C  0012               	return	
 14469                           
 14470                           ;SwSpiApp.c: 144: {
 14471                           ;SwSpiApp.c: 145: do { LATCbits.LATC5 = 0; } while(0);
 14472  00256E  9A8B               	bcf	3979,5,c	;volatile
 14473                           
 14474                           ;SwSpiApp.c: 146: }
 14475                           ;SwSpiApp.c: 147: break;
 14476  002570  0012               	return	
 14477  002572                     
 14478                           ;SwSpiApp.c: 150: if(cPinMode == 1)
 14479  002572  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 14480  002574  A4D8               	btfss	status,2,c
 14481  002576  D002               	goto	l543
 14482                           
 14483                           ;SwSpiApp.c: 151: {
 14484                           ;SwSpiApp.c: 152: do { LATAbits.LATA4 = 1; } while(0);
 14485  002578  8889               	bsf	3977,4,c	;volatile
 14486                           
 14487                           ;SwSpiApp.c: 153: }
 14488  00257A  0012               	return	
 14489  00257C                     l543:
 14490                           
 14491                           ;SwSpiApp.c: 154: else if (cPinMode == 0)
 14492  00257C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 14493  00257E  A4D8               	btfss	status,2,c
 14494  002580  0012               	return	
 14495                           
 14496                           ;SwSpiApp.c: 155: {
 14497                           ;SwSpiApp.c: 156: do { LATAbits.LATA4 = 0; } while(0);
 14498  002582  9889               	bcf	3977,4,c	;volatile
 14499                           
 14500                           ;SwSpiApp.c: 159: }
 14501                           
 14502                           ;SwSpiApp.c: 157: }
 14503                           ;SwSpiApp.c: 158: break;
 14504  002584  0012               	return	
 14505  002586                     l524:
 14506  002586  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 14507                           
 14508                           ; Switch size 1, requested type "space"
 14509                           ; Number of cases is 3, Range of values is 0 to 2
 14510                           ; switch strategies available:
 14511                           ; Name         Instructions Cycles
 14512                           ; simple_byte           10     6 (average)
 14513                           ;	Chosen strategy is simple_byte
 14514  002588  0A00               	xorlw	0	; case 0
 14515  00258A  B4D8               	btfsc	status,2,c
 14516  00258C  D7DE               	goto	l525
 14517  00258E  0A01               	xorlw	1	; case 1
 14518  002590  B4D8               	btfsc	status,2,c
 14519  002592  D7E5               	goto	l534
 14520  002594  0A03               	xorlw	3	; case 2
 14521  002596  A4D8               	btfss	status,2,c
 14522  002598  0012               	return	
 14523  00259A  D7EB               	goto	l542
 14524  00259C                     __end_of_SwSpi_Data_Pin:
 14525                           	opt stack 0
 14526                           tosu	equ	0xFFF
 14527                           tosh	equ	0xFFE
 14528                           tosl	equ	0xFFD
 14529                           pclath	equ	0xFFA
 14530                           tblptru	equ	0xFF8
 14531                           tblptrh	equ	0xFF7
 14532                           tblptrl	equ	0xFF6
 14533                           tablat	equ	0xFF5
 14534                           prodh	equ	0xFF4
 14535                           prodl	equ	0xFF3
 14536                           intcon	equ	0xFF2
 14537                           intcon2	equ	0xFF1
 14538                           indf0	equ	0xFEF
 14539                           postinc0	equ	0xFEE
 14540                           fsr0h	equ	0xFEA
 14541                           fsr0l	equ	0xFE9
 14542                           wreg	equ	0xFE8
 14543                           indf1	equ	0xFE7
 14544                           postdec1	equ	0xFE5
 14545                           fsr1h	equ	0xFE2
 14546                           fsr1l	equ	0xFE1
 14547                           indf2	equ	0xFDF
 14548                           postinc2	equ	0xFDE
 14549                           postdec2	equ	0xFDD
 14550                           fsr2h	equ	0xFDA
 14551                           fsr2l	equ	0xFD9
 14552                           status	equ	0xFD8
 14553                           
 14554 ;; *************** function _SwSpi_Clk_Pin *****************
 14555 ;; Defined at:
 14556 ;;		line 162 in file "SwSpiApp.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  phrType         1    wreg     enum E7592
 14559 ;;  cPinMode        1   23[COMRAM] unsigned char 
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;  phrType         1   24[COMRAM] enum E7592
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, status,2, status,0
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14571 ;;      Params:         1       0       0       0       0       0       0
 14572 ;;      Locals:         1       0       0       0       0       0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0
 14574 ;;      Totals:         2       0       0       0       0       0       0
 14575 ;;Total ram usage:        2 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    3
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_SWSPI_DAC_send_bits
 14582 ;;		_SWSPI_Synth_send_bits
 14583 ;;		_SwSpi_Synth_Toggle_Clock
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           	psect	text75
 14588  00259C                     __ptext75:
 14589                           	opt stack 0
 14590  00259C                     _SwSpi_Clk_Pin:
 14591                           	opt stack 23
 14592                           
 14593                           ;incstack = 0
 14594                           ;SwSpi_Clk_Pin@phrType stored from wreg
 14595  00259C  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 14596                           
 14597                           ;SwSpiApp.c: 164: switch(phrType)
 14598  00259E  D01E               	goto	l553
 14599  0025A0                     
 14600                           ;SwSpiApp.c: 167: if(cPinMode == 1)
 14601  0025A0  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14602  0025A2  A4D8               	btfss	status,2,c
 14603  0025A4  D002               	goto	l555
 14604                           
 14605                           ;SwSpiApp.c: 168: {
 14606                           ;SwSpiApp.c: 169: do { LATCbits.LATC3 = 1; } while(0);
 14607  0025A6  868B               	bsf	3979,3,c	;volatile
 14608                           
 14609                           ;SwSpiApp.c: 170: }
 14610  0025A8  0012               	return	
 14611  0025AA                     l555:
 14612                           
 14613                           ;SwSpiApp.c: 171: else if (cPinMode == 0)
 14614  0025AA  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14615  0025AC  A4D8               	btfss	status,2,c
 14616  0025AE  0012               	return	
 14617                           
 14618                           ;SwSpiApp.c: 172: {
 14619                           ;SwSpiApp.c: 173: do { LATCbits.LATC3 = 0; } while(0);
 14620  0025B0  968B               	bcf	3979,3,c	;volatile
 14621                           
 14622                           ;SwSpiApp.c: 174: }
 14623                           ;SwSpiApp.c: 175: break;
 14624  0025B2  0012               	return	
 14625  0025B4                     
 14626                           ;SwSpiApp.c: 178: if(cPinMode == 1)
 14627  0025B4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14628  0025B6  A4D8               	btfss	status,2,c
 14629  0025B8  D002               	goto	l564
 14630                           
 14631                           ;SwSpiApp.c: 179: {
 14632                           ;SwSpiApp.c: 180: do { LATCbits.LATC4 = 1; } while(0);
 14633  0025BA  888B               	bsf	3979,4,c	;volatile
 14634                           
 14635                           ;SwSpiApp.c: 181: }
 14636  0025BC  0012               	return	
 14637  0025BE                     l564:
 14638                           
 14639                           ;SwSpiApp.c: 182: else if (cPinMode == 0)
 14640  0025BE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14641  0025C0  A4D8               	btfss	status,2,c
 14642  0025C2  0012               	return	
 14643                           
 14644                           ;SwSpiApp.c: 183: {
 14645                           ;SwSpiApp.c: 184: do { LATCbits.LATC4 = 0; } while(0);
 14646  0025C4  988B               	bcf	3979,4,c	;volatile
 14647                           
 14648                           ;SwSpiApp.c: 185: }
 14649                           ;SwSpiApp.c: 187: break;
 14650  0025C6  0012               	return	
 14651  0025C8                     
 14652                           ;SwSpiApp.c: 190: if(cPinMode == 1)
 14653  0025C8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 14654  0025CA  A4D8               	btfss	status,2,c
 14655  0025CC  D002               	goto	l572
 14656                           
 14657                           ;SwSpiApp.c: 191: {
 14658                           ;SwSpiApp.c: 192: do { LATAbits.LATA3 = 1; } while(0);
 14659  0025CE  8689               	bsf	3977,3,c	;volatile
 14660                           
 14661                           ;SwSpiApp.c: 193: }
 14662  0025D0  0012               	return	
 14663  0025D2                     l572:
 14664                           
 14665                           ;SwSpiApp.c: 194: else if (cPinMode == 0)
 14666  0025D2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 14667  0025D4  A4D8               	btfss	status,2,c
 14668  0025D6  0012               	return	
 14669                           
 14670                           ;SwSpiApp.c: 195: {
 14671                           ;SwSpiApp.c: 196: do { LATAbits.LATA3 = 0; } while(0);
 14672  0025D8  9689               	bcf	3977,3,c	;volatile
 14673                           
 14674                           ;SwSpiApp.c: 199: }
 14675                           
 14676                           ;SwSpiApp.c: 197: }
 14677                           ;SwSpiApp.c: 198: break;
 14678  0025DA  0012               	return	
 14679  0025DC                     l553:
 14680  0025DC  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 14681                           
 14682                           ; Switch size 1, requested type "space"
 14683                           ; Number of cases is 3, Range of values is 0 to 2
 14684                           ; switch strategies available:
 14685                           ; Name         Instructions Cycles
 14686                           ; simple_byte           10     6 (average)
 14687                           ;	Chosen strategy is simple_byte
 14688  0025DE  0A00               	xorlw	0	; case 0
 14689  0025E0  B4D8               	btfsc	status,2,c
 14690  0025E2  D7DE               	goto	l554
 14691  0025E4  0A01               	xorlw	1	; case 1
 14692  0025E6  B4D8               	btfsc	status,2,c
 14693  0025E8  D7E5               	goto	l563
 14694  0025EA  0A03               	xorlw	3	; case 2
 14695  0025EC  A4D8               	btfss	status,2,c
 14696  0025EE  0012               	return	
 14697  0025F0  D7EB               	goto	l571
 14698  0025F2                     __end_of_SwSpi_Clk_Pin:
 14699                           	opt stack 0
 14700                           tosu	equ	0xFFF
 14701                           tosh	equ	0xFFE
 14702                           tosl	equ	0xFFD
 14703                           pclath	equ	0xFFA
 14704                           tblptru	equ	0xFF8
 14705                           tblptrh	equ	0xFF7
 14706                           tblptrl	equ	0xFF6
 14707                           tablat	equ	0xFF5
 14708                           prodh	equ	0xFF4
 14709                           prodl	equ	0xFF3
 14710                           intcon	equ	0xFF2
 14711                           intcon2	equ	0xFF1
 14712                           indf0	equ	0xFEF
 14713                           postinc0	equ	0xFEE
 14714                           fsr0h	equ	0xFEA
 14715                           fsr0l	equ	0xFE9
 14716                           wreg	equ	0xFE8
 14717                           indf1	equ	0xFE7
 14718                           postdec1	equ	0xFE5
 14719                           fsr1h	equ	0xFE2
 14720                           fsr1l	equ	0xFE1
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           postdec2	equ	0xFDD
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728 ;; *************** function _ClearMcuRunTime *****************
 14729 ;; Defined at:
 14730 ;;		line 51 in file "SystemStatus.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;		None
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;		None
 14735 ;; Return value:  Size  Location     Type
 14736 ;;                  1    wreg      void 
 14737 ;; Registers used:
 14738 ;;		wreg, status,2
 14739 ;; Tracked objects:
 14740 ;;		On entry : 0/0
 14741 ;;		On exit  : 0/0
 14742 ;;		Unchanged: 0/0
 14743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14744 ;;      Params:         0       0       0       0       0       0       0
 14745 ;;      Locals:         0       0       0       0       0       0       0
 14746 ;;      Temps:          0       0       0       0       0       0       0
 14747 ;;      Totals:         0       0       0       0       0       0       0
 14748 ;;Total ram usage:        0 bytes
 14749 ;; Hardware stack levels used:    1
 14750 ;; Hardware stack levels required when called:    3
 14751 ;; This function calls:
 14752 ;;		Nothing
 14753 ;; This function is called by:
 14754 ;;		_InitSystemApplicationManagers
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text76
 14759  002CB4                     __ptext76:
 14760                           	opt stack 0
 14761  002CB4                     _ClearMcuRunTime:
 14762                           	opt stack 26
 14763                           
 14764                           ;SystemStatus.c: 53: mcuRunTimeIn5SecTicks = 0;
 14765                           
 14766                           ;incstack = 0
 14767  002CB4  0E00               	movlw	0
 14768  002CB6  0101               	movlb	1	; () banked
 14769  002CB8  6F48               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14770  002CBA  0E00               	movlw	0
 14771  002CBC  6F49               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14772  002CBE  0E00               	movlw	0
 14773  002CC0  6F4A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14774  002CC2  0E00               	movlw	0
 14775  002CC4  6F4B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14776                           
 14777                           ; BSR set to: 1
 14778  002CC6  0012               	return		;funcret
 14779  002CC8                     __end_of_ClearMcuRunTime:
 14780                           	opt stack 0
 14781                           tosu	equ	0xFFF
 14782                           tosh	equ	0xFFE
 14783                           tosl	equ	0xFFD
 14784                           pclath	equ	0xFFA
 14785                           tblptru	equ	0xFF8
 14786                           tblptrh	equ	0xFF7
 14787                           tblptrl	equ	0xFF6
 14788                           tablat	equ	0xFF5
 14789                           prodh	equ	0xFF4
 14790                           prodl	equ	0xFF3
 14791                           intcon	equ	0xFF2
 14792                           intcon2	equ	0xFF1
 14793                           indf0	equ	0xFEF
 14794                           postinc0	equ	0xFEE
 14795                           fsr0h	equ	0xFEA
 14796                           fsr0l	equ	0xFE9
 14797                           wreg	equ	0xFE8
 14798                           indf1	equ	0xFE7
 14799                           postdec1	equ	0xFE5
 14800                           fsr1h	equ	0xFE2
 14801                           fsr1l	equ	0xFE1
 14802                           indf2	equ	0xFDF
 14803                           postinc2	equ	0xFDE
 14804                           postdec2	equ	0xFDD
 14805                           fsr2h	equ	0xFDA
 14806                           fsr2l	equ	0xFD9
 14807                           status	equ	0xFD8
 14808                           
 14809 ;; *************** function _BlinkOkLeds *****************
 14810 ;; Defined at:
 14811 ;;		line 24 in file "LedsApp.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  state           1    wreg     enum E7608
 14814 ;; Auto vars:     Size  Location     Type
 14815 ;;  state           1   26[COMRAM] enum E7608
 14816 ;;  idx             2   27[COMRAM] int 
 14817 ;; Return value:  Size  Location     Type
 14818 ;;                  1    wreg      void 
 14819 ;; Registers used:
 14820 ;;		wreg, status,2, status,0
 14821 ;; Tracked objects:
 14822 ;;		On entry : 0/0
 14823 ;;		On exit  : 0/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14826 ;;      Params:         0       0       0       0       0       0       0
 14827 ;;      Locals:         3       0       0       0       0       0       0
 14828 ;;      Temps:          3       0       0       0       0       0       0
 14829 ;;      Totals:         6       0       0       0       0       0       0
 14830 ;;Total ram usage:        6 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; Hardware stack levels required when called:    3
 14833 ;; This function calls:
 14834 ;;		Nothing
 14835 ;; This function is called by:
 14836 ;;		_main
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           	psect	text77
 14841  0022D2                     __ptext77:
 14842                           	opt stack 0
 14843  0022D2                     _BlinkOkLeds:
 14844                           	opt stack 27
 14845                           
 14846                           ; BSR set to: 1
 14847                           ;incstack = 0
 14848                           ;BlinkOkLeds@state stored from wreg
 14849  0022D2  6E1B               	movwf	BlinkOkLeds@state,c
 14850                           
 14851                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14852  0022D4  0E00               	movlw	0
 14853  0022D6  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14854  0022D8  0E00               	movlw	0
 14855  0022DA  6E1C               	movwf	BlinkOkLeds@idx,c
 14856  0022DC                     l5497:
 14857  0022DC  501B               	movf	BlinkOkLeds@state,w,c
 14858  0022DE  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14859  0022E0  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14860  0022E2  5018               	movf	??_BlinkOkLeds,w,c
 14861  0022E4  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14862  0022E6  501D               	movf	BlinkOkLeds@idx+1,w,c
 14863  0022E8  0A80               	xorlw	128
 14864  0022EA  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14865  0022EC  5019               	movf	??_BlinkOkLeds+1,w,c
 14866  0022EE  0A80               	xorlw	128
 14867  0022F0  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14868  0022F2  B0D8               	btfsc	status,0,c
 14869  0022F4  0012               	return	
 14870                           
 14871                           ;LedsApp.c: 27: {
 14872                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14873  0022F6  908B               	bcf	3979,0,c	;volatile
 14874                           
 14875                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14876  0022F8  0E02               	movlw	2
 14877  0022FA  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14878  0022FC  0E04               	movlw	4
 14879  0022FE  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14880  002300  0EBA               	movlw	186
 14881  002302                     u8267:
 14882  002302  2EE8               	decfsz	wreg,f,c
 14883  002304  D7FE               	bra	u8267
 14884  002306  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14885  002308  D7FC               	bra	u8267
 14886  00230A  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14887  00230C  D7FA               	bra	u8267
 14888  00230E  D000               	nop2	
 14889                           
 14890                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14891  002310  808B               	bsf	3979,0,c	;volatile
 14892                           
 14893                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14894  002312  0E02               	movlw	2
 14895  002314  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14896  002316  0E04               	movlw	4
 14897  002318  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14898  00231A  0EBA               	movlw	186
 14899  00231C                     u8277:
 14900  00231C  2EE8               	decfsz	wreg,f,c
 14901  00231E  D7FE               	bra	u8277
 14902  002320  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14903  002322  D7FC               	bra	u8277
 14904  002324  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14905  002326  D7FA               	bra	u8277
 14906  002328  D000               	nop2	
 14907  00232A  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14908  00232C  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14909  00232E  D7D6               	goto	l5497
 14910  002330                     __end_of_BlinkOkLeds:
 14911                           	opt stack 0
 14912                           tosu	equ	0xFFF
 14913                           tosh	equ	0xFFE
 14914                           tosl	equ	0xFFD
 14915                           pclath	equ	0xFFA
 14916                           tblptru	equ	0xFF8
 14917                           tblptrh	equ	0xFF7
 14918                           tblptrl	equ	0xFF6
 14919                           tablat	equ	0xFF5
 14920                           prodh	equ	0xFF4
 14921                           prodl	equ	0xFF3
 14922                           intcon	equ	0xFF2
 14923                           intcon2	equ	0xFF1
 14924                           indf0	equ	0xFEF
 14925                           postinc0	equ	0xFEE
 14926                           fsr0h	equ	0xFEA
 14927                           fsr0l	equ	0xFE9
 14928                           wreg	equ	0xFE8
 14929                           indf1	equ	0xFE7
 14930                           postdec1	equ	0xFE5
 14931                           fsr1h	equ	0xFE2
 14932                           fsr1l	equ	0xFE1
 14933                           indf2	equ	0xFDF
 14934                           postinc2	equ	0xFDE
 14935                           postdec2	equ	0xFDD
 14936                           fsr2h	equ	0xFDA
 14937                           fsr2l	equ	0xFD9
 14938                           status	equ	0xFD8
 14939                           
 14940 ;; *************** function _INTERRUPT_InterruptManager *****************
 14941 ;; Defined at:
 14942 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;		None
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;		None
 14947 ;; Return value:  Size  Location     Type
 14948 ;;                  1    wreg      void 
 14949 ;; Registers used:
 14950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14956 ;;      Params:         0       0       0       0       0       0       0
 14957 ;;      Locals:         0       0       0       0       0       0       0
 14958 ;;      Temps:         18       0       0       0       0       0       0
 14959 ;;      Totals:        18       0       0       0       0       0       0
 14960 ;;Total ram usage:       18 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    2
 14963 ;; This function calls:
 14964 ;;		_EUSART1_Receive_ISR
 14965 ;;		_EUSART1_Transmit_ISR
 14966 ;;		_MEMORY_ISR
 14967 ;;		_PIN_MANAGER_IOC
 14968 ;;		_TMR0_ISR
 14969 ;; This function is called by:
 14970 ;;		Interrupt level 2
 14971 ;; This function uses a non-reentrant model
 14972 ;;
 14973                           
 14974                           	psect	intcode
 14975  000008                     __pintcode:
 14976                           	opt stack 0
 14977  000008                     _INTERRUPT_InterruptManager:
 14978                           	opt stack 21
 14979                           
 14980                           ;incstack = 0
 14981  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14982  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 14983  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14984  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14985  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14986  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14987  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14988  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14989  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14990  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14991  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14992  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14993  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14994  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14995  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14996  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14997  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14998  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14999  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 15000                           
 15001                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 15002  000052  B6F2               	btfsc	intcon,3,c	;volatile
 15003  000054  A0F2               	btfss	intcon,0,c	;volatile
 15004  000056  D003               	goto	i2l706
 15005                           
 15006                           ;interrupt_manager.c: 61: {
 15007                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 15008  000058  EC86  F016         	call	_PIN_MANAGER_IOC	;wreg free
 15009                           
 15010                           ;interrupt_manager.c: 63: }
 15011  00005C  D019               	goto	i2l715
 15012  00005E                     i2l706:
 15013                           
 15014                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15015  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 15016  000060  A4F2               	btfss	intcon,2,c	;volatile
 15017  000062  D003               	goto	i2l708
 15018                           
 15019                           ;interrupt_manager.c: 65: {
 15020                           ;interrupt_manager.c: 66: TMR0_ISR();
 15021  000064  EC42  F00F         	call	_TMR0_ISR	;wreg free
 15022                           
 15023                           ;interrupt_manager.c: 67: }
 15024  000068  D013               	goto	i2l715
 15025  00006A                     i2l708:
 15026                           
 15027                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 15028  00006A  ACF2               	btfss	intcon,6,c	;volatile
 15029  00006C  D011               	goto	i2l715
 15030                           
 15031                           ;interrupt_manager.c: 69: {
 15032                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 15033  00006E  B8A0               	btfsc	4000,4,c	;volatile
 15034  000070  A8A1               	btfss	4001,4,c	;volatile
 15035  000072  D003               	goto	i2l711
 15036                           
 15037                           ;interrupt_manager.c: 71: {
 15038                           ;interrupt_manager.c: 72: MEMORY_ISR();
 15039  000074  EC88  F016         	call	_MEMORY_ISR	;wreg free
 15040                           
 15041                           ;interrupt_manager.c: 73: }
 15042  000078  D00B               	goto	i2l715
 15043  00007A                     i2l711:
 15044                           
 15045                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 15046  00007A  B89D               	btfsc	3997,4,c	;volatile
 15047  00007C  A89E               	btfss	3998,4,c	;volatile
 15048  00007E  D003               	goto	i2l713
 15049                           
 15050                           ;interrupt_manager.c: 75: {
 15051                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 15052  000080  ECDD  F014         	call	_EUSART1_Transmit_ISR	;wreg free
 15053                           
 15054                           ;interrupt_manager.c: 77: }
 15055  000084  D005               	goto	i2l715
 15056  000086                     i2l713:
 15057                           
 15058                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 15059  000086  BA9D               	btfsc	3997,5,c	;volatile
 15060  000088  AA9E               	btfss	3998,5,c	;volatile
 15061  00008A  D002               	goto	i2l715
 15062                           
 15063                           ;interrupt_manager.c: 79: {
 15064                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 15065  00008C  EC2E  F015         	call	_EUSART1_Receive_ISR	;wreg free
 15066  000090                     i2l715:
 15067                           
 15068                           ;interrupt_manager.c: 87: else
 15069                           ;interrupt_manager.c: 88: {
 15070                           
 15071                           ;interrupt_manager.c: 85: }
 15072                           ;interrupt_manager.c: 86: }
 15073                           
 15074                           ;interrupt_manager.c: 82: else
 15075                           ;interrupt_manager.c: 83: {
 15076  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 15077  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 15078  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 15079  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 15080  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 15081  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 15082  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 15083  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 15084  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 15085  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 15086  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 15087  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 15088  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 15089  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 15090  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 15091  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 15092  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 15093  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 15094  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15095  0000DA  0011               	retfie		f
 15096  0000DC                     __end_of_INTERRUPT_InterruptManager:
 15097                           	opt stack 0
 15098                           tosu	equ	0xFFF
 15099                           tosh	equ	0xFFE
 15100                           tosl	equ	0xFFD
 15101                           pclatu	equ	0xFFB
 15102                           pclath	equ	0xFFA
 15103                           tblptru	equ	0xFF8
 15104                           tblptrh	equ	0xFF7
 15105                           tblptrl	equ	0xFF6
 15106                           tablat	equ	0xFF5
 15107                           prodh	equ	0xFF4
 15108                           prodl	equ	0xFF3
 15109                           intcon	equ	0xFF2
 15110                           intcon2	equ	0xFF1
 15111                           indf0	equ	0xFEF
 15112                           postinc0	equ	0xFEE
 15113                           fsr0h	equ	0xFEA
 15114                           fsr0l	equ	0xFE9
 15115                           wreg	equ	0xFE8
 15116                           indf1	equ	0xFE7
 15117                           postdec1	equ	0xFE5
 15118                           fsr1h	equ	0xFE2
 15119                           fsr1l	equ	0xFE1
 15120                           indf2	equ	0xFDF
 15121                           postinc2	equ	0xFDE
 15122                           postdec2	equ	0xFDD
 15123                           fsr2h	equ	0xFDA
 15124                           fsr2l	equ	0xFD9
 15125                           status	equ	0xFD8
 15126                           
 15127 ;; *************** function _TMR0_ISR *****************
 15128 ;; Defined at:
 15129 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 15130 ;; Parameters:    Size  Location     Type
 15131 ;;		None
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;		None
 15134 ;; Return value:  Size  Location     Type
 15135 ;;                  1    wreg      void 
 15136 ;; Registers used:
 15137 ;;		wreg, status,2, status,0, cstack
 15138 ;; Tracked objects:
 15139 ;;		On entry : 0/0
 15140 ;;		On exit  : 0/0
 15141 ;;		Unchanged: 0/0
 15142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15143 ;;      Params:         0       0       0       0       0       0       0
 15144 ;;      Locals:         0       0       0       0       0       0       0
 15145 ;;      Temps:          0       0       0       0       0       0       0
 15146 ;;      Totals:         0       0       0       0       0       0       0
 15147 ;;Total ram usage:        0 bytes
 15148 ;; Hardware stack levels used:    1
 15149 ;; Hardware stack levels required when called:    1
 15150 ;; This function calls:
 15151 ;;		i2___lwmod
 15152 ;; This function is called by:
 15153 ;;		_INTERRUPT_InterruptManager
 15154 ;; This function uses a non-reentrant model
 15155 ;;
 15156                           
 15157                           	psect	text79
 15158  001E84                     __ptext79:
 15159                           	opt stack 0
 15160  001E84                     _TMR0_ISR:
 15161                           	opt stack 21
 15162                           
 15163                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 15164                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 15165                           
 15166                           ;incstack = 0
 15167  001E84  94F2               	bcf	intcon,2,c	;volatile
 15168                           
 15169                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 15170  001E86  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 15171  001E88  6ED7               	movwf	4055,c	;volatile
 15172                           
 15173                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 15174  001E8A  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 15175                           
 15176                           ;tmr0.c: 146: CountCallBack ++;
 15177  001E8E  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 15178  001E90  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 15179                           
 15180                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 15181  001E92  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 15182  001E96  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 15183  001E9A  0E00               	movlw	0
 15184  001E9C  6E04               	movwf	i2___lwmod@divisor+1,c
 15185  001E9E  0E14               	movlw	20
 15186  001EA0  6E03               	movwf	i2___lwmod@divisor,c
 15187  001EA2  EC63  F014         	call	i2___lwmod	;wreg free
 15188  001EA6  5001               	movf	?i2___lwmod,w,c
 15189  001EA8  1002               	iorwf	?i2___lwmod+1,w,c
 15190  001EAA  A4D8               	btfss	status,2,c
 15191  001EAC  D003               	goto	i2l937
 15192                           
 15193                           ;tmr0.c: 148: {
 15194                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 15195  001EAE  0E01               	movlw	1
 15196  001EB0  0100               	movlb	0	; () banked
 15197  001EB2  6FD7               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 15198  001EB4                     i2l937:
 15199                           
 15200                           ;tmr0.c: 150: }
 15201                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 15202                           
 15203                           ; BSR set to: 0
 15204  001EB4  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 15205  001EB8  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 15206  001EBC  0E00               	movlw	0
 15207  001EBE  6E04               	movwf	i2___lwmod@divisor+1,c
 15208  001EC0  0E32               	movlw	50
 15209  001EC2  6E03               	movwf	i2___lwmod@divisor,c
 15210  001EC4  EC63  F014         	call	i2___lwmod	;wreg free
 15211  001EC8  5001               	movf	?i2___lwmod,w,c
 15212  001ECA  1002               	iorwf	?i2___lwmod+1,w,c
 15213  001ECC  A4D8               	btfss	status,2,c
 15214  001ECE  D003               	goto	i2l938
 15215                           
 15216                           ;tmr0.c: 153: {
 15217                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 15218  001ED0  0E01               	movlw	1
 15219  001ED2  0100               	movlb	0	; () banked
 15220  001ED4  6FD6               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 15221  001ED6                     i2l938:
 15222                           
 15223                           ;tmr0.c: 155: }
 15224                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 15225                           
 15226                           ; BSR set to: 0
 15227  001ED6  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 15228  001EDA  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 15229  001EDE  0E01               	movlw	1
 15230  001EE0  6E04               	movwf	i2___lwmod@divisor+1,c
 15231  001EE2  0E2C               	movlw	44
 15232  001EE4  6E03               	movwf	i2___lwmod@divisor,c
 15233  001EE6  EC63  F014         	call	i2___lwmod	;wreg free
 15234  001EEA  5001               	movf	?i2___lwmod,w,c
 15235  001EEC  1002               	iorwf	?i2___lwmod+1,w,c
 15236  001EEE  A4D8               	btfss	status,2,c
 15237  001EF0  D003               	goto	i2l939
 15238                           
 15239                           ;tmr0.c: 157: {
 15240                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 15241  001EF2  0E01               	movlw	1
 15242  001EF4  0100               	movlb	0	; () banked
 15243  001EF6  6FD5               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 15244  001EF8                     i2l939:
 15245                           
 15246                           ;tmr0.c: 159: }
 15247                           ;tmr0.c: 161: CountCallBack %= 300;
 15248                           
 15249                           ; BSR set to: 0
 15250  001EF8  C035  F001         	movff	TMR0_ISR@CountCallBack,i2___lwmod@dividend	;volatile
 15251  001EFC  C036  F002         	movff	TMR0_ISR@CountCallBack+1,i2___lwmod@dividend+1	;volatile
 15252  001F00  0E01               	movlw	1
 15253  001F02  6E04               	movwf	i2___lwmod@divisor+1,c
 15254  001F04  0E2C               	movlw	44
 15255  001F06  6E03               	movwf	i2___lwmod@divisor,c
 15256  001F08  EC63  F014         	call	i2___lwmod	;wreg free
 15257  001F0C  C001  F035         	movff	?i2___lwmod,TMR0_ISR@CountCallBack	;volatile
 15258  001F10  C002  F036         	movff	?i2___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 15259  001F14  0012               	return		;funcret
 15260  001F16                     __end_of_TMR0_ISR:
 15261                           	opt stack 0
 15262                           tosu	equ	0xFFF
 15263                           tosh	equ	0xFFE
 15264                           tosl	equ	0xFFD
 15265                           pclatu	equ	0xFFB
 15266                           pclath	equ	0xFFA
 15267                           tblptru	equ	0xFF8
 15268                           tblptrh	equ	0xFF7
 15269                           tblptrl	equ	0xFF6
 15270                           tablat	equ	0xFF5
 15271                           prodh	equ	0xFF4
 15272                           prodl	equ	0xFF3
 15273                           intcon	equ	0xFF2
 15274                           intcon2	equ	0xFF1
 15275                           indf0	equ	0xFEF
 15276                           postinc0	equ	0xFEE
 15277                           fsr0h	equ	0xFEA
 15278                           fsr0l	equ	0xFE9
 15279                           wreg	equ	0xFE8
 15280                           indf1	equ	0xFE7
 15281                           postdec1	equ	0xFE5
 15282                           fsr1h	equ	0xFE2
 15283                           fsr1l	equ	0xFE1
 15284                           indf2	equ	0xFDF
 15285                           postinc2	equ	0xFDE
 15286                           postdec2	equ	0xFDD
 15287                           fsr2h	equ	0xFDA
 15288                           fsr2l	equ	0xFD9
 15289                           status	equ	0xFD8
 15290                           
 15291 ;; *************** function i2___lwmod *****************
 15292 ;; Defined at:
 15293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 15294 ;; Parameters:    Size  Location     Type
 15295 ;;  dividend        2    0[COMRAM] unsigned int 
 15296 ;;  divisor         2    2[COMRAM] unsigned int 
 15297 ;; Auto vars:     Size  Location     Type
 15298 ;;  __lwmod         1    4[COMRAM] unsigned char 
 15299 ;; Return value:  Size  Location     Type
 15300 ;;                  2    0[COMRAM] unsigned int 
 15301 ;; Registers used:
 15302 ;;		wreg, status,2, status,0
 15303 ;; Tracked objects:
 15304 ;;		On entry : 0/0
 15305 ;;		On exit  : 0/0
 15306 ;;		Unchanged: 0/0
 15307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15308 ;;      Params:         4       0       0       0       0       0       0
 15309 ;;      Locals:         1       0       0       0       0       0       0
 15310 ;;      Temps:          0       0       0       0       0       0       0
 15311 ;;      Totals:         5       0       0       0       0       0       0
 15312 ;;Total ram usage:        5 bytes
 15313 ;; Hardware stack levels used:    1
 15314 ;; This function calls:
 15315 ;;		Nothing
 15316 ;; This function is called by:
 15317 ;;		_TMR0_ISR
 15318 ;; This function uses a non-reentrant model
 15319 ;;
 15320                           
 15321                           	psect	text80
 15322  0028C6                     __ptext80:
 15323                           	opt stack 0
 15324  0028C6                     i2___lwmod:
 15325                           	opt stack 21
 15326                           
 15327                           ;incstack = 0
 15328  0028C6  5003               	movf	i2___lwmod@divisor,w,c
 15329  0028C8  1004               	iorwf	i2___lwmod@divisor+1,w,c
 15330  0028CA  B4D8               	btfsc	status,2,c
 15331  0028CC  D018               	goto	i2l1715
 15332  0028CE  0E01               	movlw	1
 15333  0028D0  6E05               	movwf	i2___lwmod@counter,c
 15334  0028D2  D004               	goto	i2l1710
 15335  0028D4  90D8               	bcf	status,0,c
 15336  0028D6  3603               	rlcf	i2___lwmod@divisor,f,c
 15337  0028D8  3604               	rlcf	i2___lwmod@divisor+1,f,c
 15338  0028DA  2A05               	incf	i2___lwmod@counter,f,c
 15339  0028DC                     i2l1710:
 15340  0028DC  AE04               	btfss	i2___lwmod@divisor+1,7,c
 15341  0028DE  D7FA               	goto	i2l1711
 15342  0028E0                     i2u505_40:
 15343  0028E0  5003               	movf	i2___lwmod@divisor,w,c
 15344  0028E2  5C01               	subwf	i2___lwmod@dividend,w,c
 15345  0028E4  5004               	movf	i2___lwmod@divisor+1,w,c
 15346  0028E6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 15347  0028E8  A0D8               	btfss	status,0,c
 15348  0028EA  D004               	goto	i2l1714
 15349  0028EC  5003               	movf	i2___lwmod@divisor,w,c
 15350  0028EE  5E01               	subwf	i2___lwmod@dividend,f,c
 15351  0028F0  5004               	movf	i2___lwmod@divisor+1,w,c
 15352  0028F2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 15353  0028F4                     i2l1714:
 15354  0028F4  90D8               	bcf	status,0,c
 15355  0028F6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 15356  0028F8  3203               	rrcf	i2___lwmod@divisor,f,c
 15357  0028FA  2E05               	decfsz	i2___lwmod@counter,f,c
 15358  0028FC  D7F1               	goto	i2u505_40
 15359  0028FE                     i2l1715:
 15360  0028FE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 15361  002902  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 15362  002906  0012               	return		;funcret
 15363  002908                     __end_ofi2___lwmod:
 15364                           	opt stack 0
 15365                           tosu	equ	0xFFF
 15366                           tosh	equ	0xFFE
 15367                           tosl	equ	0xFFD
 15368                           pclatu	equ	0xFFB
 15369                           pclath	equ	0xFFA
 15370                           tblptru	equ	0xFF8
 15371                           tblptrh	equ	0xFF7
 15372                           tblptrl	equ	0xFF6
 15373                           tablat	equ	0xFF5
 15374                           prodh	equ	0xFF4
 15375                           prodl	equ	0xFF3
 15376                           intcon	equ	0xFF2
 15377                           intcon2	equ	0xFF1
 15378                           indf0	equ	0xFEF
 15379                           postinc0	equ	0xFEE
 15380                           fsr0h	equ	0xFEA
 15381                           fsr0l	equ	0xFE9
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postdec1	equ	0xFE5
 15385                           fsr1h	equ	0xFE2
 15386                           fsr1l	equ	0xFE1
 15387                           indf2	equ	0xFDF
 15388                           postinc2	equ	0xFDE
 15389                           postdec2	equ	0xFDD
 15390                           fsr2h	equ	0xFDA
 15391                           fsr2l	equ	0xFD9
 15392                           status	equ	0xFD8
 15393                           
 15394 ;; *************** function _PIN_MANAGER_IOC *****************
 15395 ;; Defined at:
 15396 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;		None
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;		None
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      void 
 15403 ;; Registers used:
 15404 ;;		None
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/0
 15407 ;;		On exit  : 0/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15410 ;;      Params:         0       0       0       0       0       0       0
 15411 ;;      Locals:         0       0       0       0       0       0       0
 15412 ;;      Temps:          0       0       0       0       0       0       0
 15413 ;;      Totals:         0       0       0       0       0       0       0
 15414 ;;Total ram usage:        0 bytes
 15415 ;; Hardware stack levels used:    1
 15416 ;; This function calls:
 15417 ;;		Nothing
 15418 ;; This function is called by:
 15419 ;;		_INTERRUPT_InterruptManager
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text81
 15424  002D0C                     __ptext81:
 15425                           	opt stack 0
 15426  002D0C                     _PIN_MANAGER_IOC:
 15427                           	opt stack 22
 15428                           
 15429                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 15430                           
 15431                           ;incstack = 0
 15432  002D0C  90F2               	bcf	intcon,0,c	;volatile
 15433  002D0E  0012               	return		;funcret
 15434  002D10                     __end_of_PIN_MANAGER_IOC:
 15435                           	opt stack 0
 15436                           tosu	equ	0xFFF
 15437                           tosh	equ	0xFFE
 15438                           tosl	equ	0xFFD
 15439                           pclatu	equ	0xFFB
 15440                           pclath	equ	0xFFA
 15441                           tblptru	equ	0xFF8
 15442                           tblptrh	equ	0xFF7
 15443                           tblptrl	equ	0xFF6
 15444                           tablat	equ	0xFF5
 15445                           prodh	equ	0xFF4
 15446                           prodl	equ	0xFF3
 15447                           intcon	equ	0xFF2
 15448                           intcon2	equ	0xFF1
 15449                           indf0	equ	0xFEF
 15450                           postinc0	equ	0xFEE
 15451                           fsr0h	equ	0xFEA
 15452                           fsr0l	equ	0xFE9
 15453                           wreg	equ	0xFE8
 15454                           indf1	equ	0xFE7
 15455                           postdec1	equ	0xFE5
 15456                           fsr1h	equ	0xFE2
 15457                           fsr1l	equ	0xFE1
 15458                           indf2	equ	0xFDF
 15459                           postinc2	equ	0xFDE
 15460                           postdec2	equ	0xFDD
 15461                           fsr2h	equ	0xFDA
 15462                           fsr2l	equ	0xFD9
 15463                           status	equ	0xFD8
 15464                           
 15465 ;; *************** function _MEMORY_ISR *****************
 15466 ;; Defined at:
 15467 ;;		line 206 in file "mcc_generated_files/memory.c"
 15468 ;; Parameters:    Size  Location     Type
 15469 ;;		None
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;		None
 15472 ;; Return value:  Size  Location     Type
 15473 ;;                  1    wreg      void 
 15474 ;; Registers used:
 15475 ;;		None
 15476 ;; Tracked objects:
 15477 ;;		On entry : 0/0
 15478 ;;		On exit  : 0/0
 15479 ;;		Unchanged: 0/0
 15480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15481 ;;      Params:         0       0       0       0       0       0       0
 15482 ;;      Locals:         0       0       0       0       0       0       0
 15483 ;;      Temps:          0       0       0       0       0       0       0
 15484 ;;      Totals:         0       0       0       0       0       0       0
 15485 ;;Total ram usage:        0 bytes
 15486 ;; Hardware stack levels used:    1
 15487 ;; This function calls:
 15488 ;;		Nothing
 15489 ;; This function is called by:
 15490 ;;		_INTERRUPT_InterruptManager
 15491 ;; This function uses a non-reentrant model
 15492 ;;
 15493                           
 15494                           	psect	text82
 15495  002D10                     __ptext82:
 15496                           	opt stack 0
 15497  002D10                     _MEMORY_ISR:
 15498                           	opt stack 22
 15499                           
 15500                           ;memory.c: 209: PIR2bits.EEIF = 0;
 15501                           
 15502                           ;incstack = 0
 15503  002D10  98A1               	bcf	4001,4,c	;volatile
 15504  002D12  0012               	return		;funcret
 15505  002D14                     __end_of_MEMORY_ISR:
 15506                           	opt stack 0
 15507                           tosu	equ	0xFFF
 15508                           tosh	equ	0xFFE
 15509                           tosl	equ	0xFFD
 15510                           pclatu	equ	0xFFB
 15511                           pclath	equ	0xFFA
 15512                           tblptru	equ	0xFF8
 15513                           tblptrh	equ	0xFF7
 15514                           tblptrl	equ	0xFF6
 15515                           tablat	equ	0xFF5
 15516                           prodh	equ	0xFF4
 15517                           prodl	equ	0xFF3
 15518                           intcon	equ	0xFF2
 15519                           intcon2	equ	0xFF1
 15520                           indf0	equ	0xFEF
 15521                           postinc0	equ	0xFEE
 15522                           fsr0h	equ	0xFEA
 15523                           fsr0l	equ	0xFE9
 15524                           wreg	equ	0xFE8
 15525                           indf1	equ	0xFE7
 15526                           postdec1	equ	0xFE5
 15527                           fsr1h	equ	0xFE2
 15528                           fsr1l	equ	0xFE1
 15529                           indf2	equ	0xFDF
 15530                           postinc2	equ	0xFDE
 15531                           postdec2	equ	0xFDD
 15532                           fsr2h	equ	0xFDA
 15533                           fsr2l	equ	0xFD9
 15534                           status	equ	0xFD8
 15535                           
 15536 ;; *************** function _EUSART1_Transmit_ISR *****************
 15537 ;; Defined at:
 15538 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;		None
 15541 ;; Auto vars:     Size  Location     Type
 15542 ;;		None
 15543 ;; Return value:  Size  Location     Type
 15544 ;;                  1    wreg      void 
 15545 ;; Registers used:
 15546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15552 ;;      Params:         0       0       0       0       0       0       0
 15553 ;;      Locals:         0       0       0       0       0       0       0
 15554 ;;      Temps:          0       0       0       0       0       0       0
 15555 ;;      Totals:         0       0       0       0       0       0       0
 15556 ;;Total ram usage:        0 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; This function calls:
 15559 ;;		Nothing
 15560 ;; This function is called by:
 15561 ;;		_INTERRUPT_InterruptManager
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           	psect	text83
 15566  0029BA                     __ptext83:
 15567                           	opt stack 0
 15568  0029BA                     _EUSART1_Transmit_ISR:
 15569                           	opt stack 22
 15570                           
 15571                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15572                           
 15573                           ;incstack = 0
 15574  0029BA  0E46               	movlw	70
 15575  0029BC  0100               	movlb	0	; () banked
 15576  0029BE  61DC               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15577  0029C0  D012               	goto	i2l777
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;eusart1.c: 186: {
 15581                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15582  0029C2  503B               	movf	_eusart1TxTail,w,c	;volatile
 15583  0029C4  0D01               	mullw	1
 15584  0029C6  0E00               	movlw	low _eusart1TxBuffer
 15585  0029C8  24F3               	addwf	prodl,w,c
 15586  0029CA  6ED9               	movwf	fsr2l,c
 15587  0029CC  0E02               	movlw	high _eusart1TxBuffer
 15588  0029CE  20F4               	addwfc	prodh,w,c
 15589  0029D0  6EDA               	movwf	fsr2h,c
 15590  0029D2  50DF               	movf	indf2,w,c
 15591  0029D4  6EAD               	movwf	4013,c	;volatile
 15592                           
 15593                           ; BSR set to: 0
 15594  0029D6  2A3B               	incf	_eusart1TxTail,f,c	;volatile
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15598  0029D8  0E45               	movlw	69
 15599  0029DA  643B               	cpfsgt	_eusart1TxTail,c	;volatile
 15600  0029DC  D002               	goto	i2l778
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;eusart1.c: 189: {
 15604                           ;eusart1.c: 190: eusart1TxTail = 0;
 15605  0029DE  0E00               	movlw	0
 15606  0029E0  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15607  0029E2                     i2l778:
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;eusart1.c: 191: }
 15611                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 15612                           
 15613                           ; BSR set to: 0
 15614  0029E2  2BDC               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15615                           
 15616                           ;eusart1.c: 193: }
 15617  0029E4  0012               	return	
 15618  0029E6                     i2l777:
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;eusart1.c: 194: else
 15622                           ;eusart1.c: 195: {
 15623                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 15624  0029E6  989D               	bcf	3997,4,c	;volatile
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;eusart1.c: 197: eusart1TxTail = 0;
 15628  0029E8  0E00               	movlw	0
 15629  0029EA  6E3B               	movwf	_eusart1TxTail,c	;volatile
 15630                           
 15631                           ;eusart1.c: 198: eusart1TxHead = 0;
 15632  0029EC  0E00               	movlw	0
 15633  0029EE  6E3C               	movwf	_eusart1TxHead,c	;volatile
 15634  0029F0  0012               	return	
 15635  0029F2                     __end_of_EUSART1_Transmit_ISR:
 15636                           	opt stack 0
 15637                           tosu	equ	0xFFF
 15638                           tosh	equ	0xFFE
 15639                           tosl	equ	0xFFD
 15640                           pclatu	equ	0xFFB
 15641                           pclath	equ	0xFFA
 15642                           tblptru	equ	0xFF8
 15643                           tblptrh	equ	0xFF7
 15644                           tblptrl	equ	0xFF6
 15645                           tablat	equ	0xFF5
 15646                           prodh	equ	0xFF4
 15647                           prodl	equ	0xFF3
 15648                           intcon	equ	0xFF2
 15649                           intcon2	equ	0xFF1
 15650                           indf0	equ	0xFEF
 15651                           postinc0	equ	0xFEE
 15652                           fsr0h	equ	0xFEA
 15653                           fsr0l	equ	0xFE9
 15654                           wreg	equ	0xFE8
 15655                           indf1	equ	0xFE7
 15656                           postdec1	equ	0xFE5
 15657                           fsr1h	equ	0xFE2
 15658                           fsr1l	equ	0xFE1
 15659                           indf2	equ	0xFDF
 15660                           postinc2	equ	0xFDE
 15661                           postdec2	equ	0xFDD
 15662                           fsr2h	equ	0xFDA
 15663                           fsr2l	equ	0xFD9
 15664                           status	equ	0xFD8
 15665                           
 15666 ;; *************** function _EUSART1_Receive_ISR *****************
 15667 ;; Defined at:
 15668 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;		None
 15671 ;; Auto vars:     Size  Location     Type
 15672 ;;		None
 15673 ;; Return value:  Size  Location     Type
 15674 ;;                  1    wreg      void 
 15675 ;; Registers used:
 15676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15677 ;; Tracked objects:
 15678 ;;		On entry : 0/0
 15679 ;;		On exit  : 0/0
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15682 ;;      Params:         0       0       0       0       0       0       0
 15683 ;;      Locals:         0       0       0       0       0       0       0
 15684 ;;      Temps:          0       0       0       0       0       0       0
 15685 ;;      Totals:         0       0       0       0       0       0       0
 15686 ;;Total ram usage:        0 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; This function calls:
 15689 ;;		Nothing
 15690 ;; This function is called by:
 15691 ;;		_INTERRUPT_InterruptManager
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           	psect	text84
 15696  002A5C                     __ptext84:
 15697                           	opt stack 0
 15698  002A5C                     _EUSART1_Receive_ISR:
 15699                           	opt stack 22
 15700                           
 15701                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;incstack = 0
 15705  002A5C  A2AB               	btfss	4011,1,c	;volatile
 15706  002A5E  D002               	goto	i2l783
 15707                           
 15708                           ;eusart1.c: 206: {
 15709                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 15710  002A60  98AB               	bcf	4011,4,c	;volatile
 15711                           
 15712                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 15713  002A62  88AB               	bsf	4011,4,c	;volatile
 15714  002A64                     i2l783:
 15715                           
 15716                           ;eusart1.c: 210: }
 15717                           ;eusart1.c: 212: TXREG1 = RCREG1;
 15718  002A64  CFAE FFAD          	movff	4014,4013	;volatile
 15719                           
 15720                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15721  002A68  503A               	movf	_eusart1RxHead,w,c	;volatile
 15722  002A6A  0D01               	mullw	1
 15723  002A6C  0E00               	movlw	low _eusart1RxBuffer
 15724  002A6E  24F3               	addwf	prodl,w,c
 15725  002A70  6ED9               	movwf	fsr2l,c
 15726  002A72  0E01               	movlw	high _eusart1RxBuffer
 15727  002A74  20F4               	addwfc	prodh,w,c
 15728  002A76  6EDA               	movwf	fsr2h,c
 15729  002A78  CFAE FFDF          	movff	4014,indf2	;volatile
 15730  002A7C  2A3A               	incf	_eusart1RxHead,f,c	;volatile
 15731                           
 15732                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15733  002A7E  0E27               	movlw	39
 15734  002A80  643A               	cpfsgt	_eusart1RxHead,c	;volatile
 15735  002A82  D002               	goto	i2l784
 15736                           
 15737                           ;eusart1.c: 217: {
 15738                           ;eusart1.c: 218: eusart1RxHead = 0;
 15739  002A84  0E00               	movlw	0
 15740  002A86  6E3A               	movwf	_eusart1RxHead,c	;volatile
 15741  002A88                     i2l784:
 15742                           
 15743                           ;eusart1.c: 219: }
 15744                           ;eusart1.c: 220: eusart1RxCount++;
 15745  002A88  0100               	movlb	0	; () banked
 15746  002A8A  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 15747                           
 15748                           ; BSR set to: 0
 15749  002A8C  0012               	return		;funcret
 15750  002A8E                     __end_of_EUSART1_Receive_ISR:
 15751                           	opt stack 0
 15752                           tosu	equ	0xFFF
 15753                           tosh	equ	0xFFE
 15754                           tosl	equ	0xFFD
 15755                           pclatu	equ	0xFFB
 15756                           pclath	equ	0xFFA
 15757                           tblptru	equ	0xFF8
 15758                           tblptrh	equ	0xFF7
 15759                           tblptrl	equ	0xFF6
 15760                           tablat	equ	0xFF5
 15761                           prodh	equ	0xFF4
 15762                           prodl	equ	0xFF3
 15763                           intcon	equ	0xFF2
 15764                           intcon2	equ	0xFF1
 15765                           indf0	equ	0xFEF
 15766                           postinc0	equ	0xFEE
 15767                           fsr0h	equ	0xFEA
 15768                           fsr0l	equ	0xFE9
 15769                           wreg	equ	0xFE8
 15770                           indf1	equ	0xFE7
 15771                           postdec1	equ	0xFE5
 15772                           fsr1h	equ	0xFE2
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           fsr2h	equ	0xFDA
 15778                           fsr2l	equ	0xFD9
 15779                           status	equ	0xFD8
 15780                           tosu	equ	0xFFF
 15781                           tosh	equ	0xFFE
 15782                           tosl	equ	0xFFD
 15783                           pclatu	equ	0xFFB
 15784                           pclath	equ	0xFFA
 15785                           tblptru	equ	0xFF8
 15786                           tblptrh	equ	0xFF7
 15787                           tblptrl	equ	0xFF6
 15788                           tablat	equ	0xFF5
 15789                           prodh	equ	0xFF4
 15790                           prodl	equ	0xFF3
 15791                           intcon	equ	0xFF2
 15792                           intcon2	equ	0xFF1
 15793                           indf0	equ	0xFEF
 15794                           postinc0	equ	0xFEE
 15795                           fsr0h	equ	0xFEA
 15796                           fsr0l	equ	0xFE9
 15797                           wreg	equ	0xFE8
 15798                           indf1	equ	0xFE7
 15799                           postdec1	equ	0xFE5
 15800                           fsr1h	equ	0xFE2
 15801                           fsr1l	equ	0xFE1
 15802                           indf2	equ	0xFDF
 15803                           postinc2	equ	0xFDE
 15804                           postdec2	equ	0xFDD
 15805                           fsr2h	equ	0xFDA
 15806                           fsr2l	equ	0xFD9
 15807                           status	equ	0xFD8
 15808                           
 15809                           	psect	text85
 15810  000000                     __ptext85:
 15811                           	opt stack 0
 15812                           tosu	equ	0xFFF
 15813                           tosh	equ	0xFFE
 15814                           tosl	equ	0xFFD
 15815                           pclatu	equ	0xFFB
 15816                           pclath	equ	0xFFA
 15817                           tblptru	equ	0xFF8
 15818                           tblptrh	equ	0xFF7
 15819                           tblptrl	equ	0xFF6
 15820                           tablat	equ	0xFF5
 15821                           prodh	equ	0xFF4
 15822                           prodl	equ	0xFF3
 15823                           intcon	equ	0xFF2
 15824                           intcon2	equ	0xFF1
 15825                           indf0	equ	0xFEF
 15826                           postinc0	equ	0xFEE
 15827                           fsr0h	equ	0xFEA
 15828                           fsr0l	equ	0xFE9
 15829                           wreg	equ	0xFE8
 15830                           indf1	equ	0xFE7
 15831                           postdec1	equ	0xFE5
 15832                           fsr1h	equ	0xFE2
 15833                           fsr1l	equ	0xFE1
 15834                           indf2	equ	0xFDF
 15835                           postinc2	equ	0xFDE
 15836                           postdec2	equ	0xFDD
 15837                           fsr2h	equ	0xFDA
 15838                           fsr2l	equ	0xFD9
 15839                           status	equ	0xFD8
 15840                           
 15841                           	psect	rparam
 15842  0000                     tosu	equ	0xFFF
 15843                           tosh	equ	0xFFE
 15844                           tosl	equ	0xFFD
 15845                           pclatu	equ	0xFFB
 15846                           pclath	equ	0xFFA
 15847                           tblptru	equ	0xFF8
 15848                           tblptrh	equ	0xFF7
 15849                           tblptrl	equ	0xFF6
 15850                           tablat	equ	0xFF5
 15851                           prodh	equ	0xFF4
 15852                           prodl	equ	0xFF3
 15853                           intcon	equ	0xFF2
 15854                           intcon2	equ	0xFF1
 15855                           indf0	equ	0xFEF
 15856                           postinc0	equ	0xFEE
 15857                           fsr0h	equ	0xFEA
 15858                           fsr0l	equ	0xFE9
 15859                           wreg	equ	0xFE8
 15860                           indf1	equ	0xFE7
 15861                           postdec1	equ	0xFE5
 15862                           fsr1h	equ	0xFE2
 15863                           fsr1l	equ	0xFE1
 15864                           indf2	equ	0xFDF
 15865                           postinc2	equ	0xFDE
 15866                           postdec2	equ	0xFDD
 15867                           fsr2h	equ	0xFDA
 15868                           fsr2l	equ	0xFD9
 15869                           status	equ	0xFD8
 15870                           
 15871                           	psect	temp
 15872  000048                     btemp:
 15873                           	opt stack 0
 15874  000048                     	ds	1
 15875  0000                     int$flags	set	btemp
 15876  0000                     wtemp6	set	btemp+1
 15877                           tosu	equ	0xFFF
 15878                           tosh	equ	0xFFE
 15879                           tosl	equ	0xFFD
 15880                           pclatu	equ	0xFFB
 15881                           pclath	equ	0xFFA
 15882                           tblptru	equ	0xFF8
 15883                           tblptrh	equ	0xFF7
 15884                           tblptrl	equ	0xFF6
 15885                           tablat	equ	0xFF5
 15886                           prodh	equ	0xFF4
 15887                           prodl	equ	0xFF3
 15888                           intcon	equ	0xFF2
 15889                           intcon2	equ	0xFF1
 15890                           indf0	equ	0xFEF
 15891                           postinc0	equ	0xFEE
 15892                           fsr0h	equ	0xFEA
 15893                           fsr0l	equ	0xFE9
 15894                           wreg	equ	0xFE8
 15895                           indf1	equ	0xFE7
 15896                           postdec1	equ	0xFE5
 15897                           fsr1h	equ	0xFE2
 15898                           fsr1l	equ	0xFE1
 15899                           indf2	equ	0xFDF
 15900                           postinc2	equ	0xFDE
 15901                           postdec2	equ	0xFDD
 15902                           fsr2h	equ	0xFDA
 15903                           fsr2l	equ	0xFD9
 15904                           status	equ	0xFD8


Data Sizes:
    Strings     1282
    Constant    123
    Data        20
    BSS         289
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    104     125
    BANK1           256     53     253
    BANK2           256     57     127
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    GroupCommon@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK0[16]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK0[16]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 101
		 -> STR_39(CODE[37]), STR_38(CODE[38]), STR_37(CODE[86]), STR_36(CODE[53]), 
		 -> STR_35(CODE[46]), STR_34(CODE[29]), STR_33(CODE[101]), STR_32(CODE[86]), 
		 -> STR_31(CODE[61]), STR_30(CODE[62]), STR_29(CODE[45]), STR_28(CODE[74]), 
		 -> STR_27(CODE[25]), STR_26(CODE[79]), STR_25(CODE[75]), STR_24(CODE[46]), 
		 -> STR_23(CODE[61]), STR_22(CODE[66]), STR_21(CODE[23]), STR_20(CODE[31]), 
		 -> STR_18(CODE[20]), STR_16(CODE[20]), STR_14(CODE[18]), STR_13(CODE[20]), 
		 -> STR_12(CODE[31]), STR_8(CODE[11]), STR_6(CODE[5]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_40(CODE[7]), STR_19(CODE[9]), STR_17(CODE[12]), STR_15(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), readUartByte@dest(BANK1[50]), SampleSingleChannel@dest(BANK2[50]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK0[16]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 67
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), UpdateSynthFreq@regSynthArray(BANK0[16]), FlashReadCondition@TxMsg(COMRAM[7]), FlashReadUart@TxMsg(COMRAM[67]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    CalcSynthRegParams@regArray	PTR long  size(2) Largest target is 16
		 -> UpdateSynthFreq@regSynthArray(BANK0[16]), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 50
		 -> PrintHelpScreen@dest(BANK0[50]), SendUartSystemInitMessage@dest(BANK0[50]), STR_11(CODE[10]), STR_10(CODE[10]), 
		 -> STR_9(CODE[10]), readUartByte@dest(BANK1[50]), STR_7(CODE[10]), SampleSingleChannel@dest(BANK2[50]), 
		 -> STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[20]), STR_2(CODE[10]), 
		 -> STR_1(CODE[10]), 

    AdcSingleSample@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupCommon(), GroupTx(), GroupRx(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupTx->_AdcSingleSample
    _GroupRx->_AdcSingleSample
    _CalcSynthRegParams->___awtoft
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _ZeroArray->_memset
    _PrintHelpScreen->_sprintf
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    ___llmod->___lldiv
    _SendUartSystemInitMessage->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _log->___awtoft
    _exp->___awtoft
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftmul->___ftdiv
    ___ftsub->___awtoft
    ___ftadd->___awtoft
    ___ftneg->___awtoft
    ___ftdiv->___altoft
    ___awtoft->___ftdiv
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _UART_Write_Text->_EUSART1_Write
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_Synth_send_bits->_SwSpi_Clk_Pin
    _SWSPI_Synth_send_bits->_SwSpi_Data_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->i2___lwmod

Critical Paths under _main in BANK0

    _main->_SampleSingleChannel
    _readUartByte->_GroupCommon
    _readUartByte->_GroupRx
    _readUartByte->_GroupTx
    _GroupTx->_UpdateSynthFreq
    _GroupRx->_UpdateSynthFreq
    _UpdateSynthFreq->_CalcSynthRegParams
    _CalcSynthRegParams->___ftadd
    _AdcSingleSample->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _PrintHelpScreen->_sprintf
    _SendUartSystemInitMessage->_sprintf
    _SampleSingleChannel->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___ftmul
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___awtoft
    ___awtoft->___fttol

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartByte

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_SampleSingleChannel

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  245250
                        _BlinkOkLeds
      _InitSystemApplicationManagers
                _SampleSingleChannel
          _SendUartSystemInitMessage
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                       _readUartByte
 ---------------------------------------------------------------------------------
 (1) _readUartByte                                        56    56      0  110183
                                            100 BANK0      3     3      0
                                              0 BANK1     53    53      0
                       _EUSART1_Read
                        _GroupCommon *
                            _GroupRx *
                            _GroupTx *
                _InitRxMessageParams
                    _UART_Write_Text
                            _sprintf
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    1909
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupTx                                              3     1      2   42457
                                             97 BANK0      3     1      2
                    _AdcSingleSample
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (2) _GroupRx                                              3     1      2   42457
                                             97 BANK0      3     1      2
                    _AdcSingleSample
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     23    21      2   32566
                                             75 BANK0     22    20      2
                 _CalcSynthRegParams
                 _GetIntFromUartData
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (4) _CalcSynthRegParams                                  18    12      6   25525
                                             57 BANK0     18    12      6
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _AdcSingleSample                                      8     6      2    9798
                                             47 COMRAM     1     1      0
                                             21 BANK0      7     5      2
                 _GetIntFromUartData
                    _UART_Write_Text
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  17    13      4    4801
                                             45 COMRAM     2     2      0
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _ZeroArray                                            4     0      4    1909
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _GroupCommon                                          3     1      2   11809
                                             97 BANK0      3     1      2
                    _PrintHelpScreen
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _PrintHelpScreen                                     50    50      0   11645
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     772
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     772
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _SendUartSystemInitMessage                           50    50      0   10839
                                              9 BANK0     50    50      0
                    _UART_Write_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SampleSingleChannel                                 59    59      0  117657
                                            102 BANK0      2     2      0
                                              0 BANK2     57    57      0
                  _ADC_GetConversion
                    _UART_Write_Text
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    6999
                                             35 COMRAM     7     1      6
                                              0 BANK0      9     9      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     852
                                             30 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             23 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   91903
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   29192
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   50044
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     539
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   12664
                                             57 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4    1181
                                             24 BANK0     15    11      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3547
                                             31 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   13015
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5821
                                              9 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    6114
                                             57 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5698
                                             45 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     515
                                             42 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4893
                                             41 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___altoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3566
                                             47 COMRAM     1     1      0
                                             39 BANK0      3     0      3
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3194
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2    3432
                                             24 COMRAM     6     4      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0    5611
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0    5611
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (3) _SWSPI_send_word                                      9     4      5    5611
                                             32 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (4) _make8                                                9     4      5     870
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SWSPI_Synth_send_bits                                3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (4) _SWSPI_DAC_send_bits                                  3     2      1    1627
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Data_Pin                                       2     1      1     610
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Clk_Pin                                        2     1      1     762
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     367
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     367
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BlinkOkLeds
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
     _TMR0_StartTimer
   _SampleSingleChannel
     _ADC_GetConversion
     _UART_Write_Text
       _EUSART1_Write
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___fttol (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SendUartSystemInitMessage
     _UART_Write_Text
       _EUSART1_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _SetMcuRunTime
     ___llmod
       ___lldiv (ARG)
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _readUartByte
     _EUSART1_Read
     _GroupCommon *
       _PrintHelpScreen
         _UART_Write_Text
           _EUSART1_Write
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _testLeds
     _GroupRx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _UpdateSynthFreq
         _CalcSynthRegParams
           ___altoft
             ___ftpack
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _ZeroArray
           _memset
     _GroupTx *
       _AdcSingleSample
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _UART_Write_Text
           _EUSART1_Write
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _UpdateSynthFreq
         _CalcSynthRegParams
           ___altoft
             ___ftpack
           ___awtoft
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___fttol (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftpack (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___fttol (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _ZeroArray
           _memset
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _UART_Write_Text *
       _EUSART1_Write
     _sprintf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _toupper *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     39      7F       8       49.6%
BITBANK1           100      0       0       5        0.0%
BANK1              100     35      FD       6       98.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     68      7D       4       78.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     240       9        0.0%
DATA                 0      0     240      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 12:12:28 2018

              __end_of_keepAliveSignalLed 2C74                              ___altoft@exp 0028  
                _eusart1TxBufferRemaining 00DC                             ___altoft@sign 0029  
                                      l42 228A                                        l44 22D0  
                                      l96 1262                                        l98 1314  
                     __end_of_BlinkOkLeds 2330                           _SWSPI_send_word 1BEC  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                      _CalcSynthRegParams 00E0                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0098  
                            ___ftadd@exp2 0097                               __CFG_LVP$ON 000000  
           SampleSingleChannel@_adcResult 027B                              ___ftadd@sign 0096  
                             ?_MEMORY_ISR 0001                                       l101 1330  
                                     l102 1348                                       l111 159E  
                                     l200 0584                                       l105 1354  
                                     l201 05C4                                       l106 1362  
                                     l211 0624                                       l212 063A  
                                     l230 216E                                       l214 0640  
                                     l206 05D8                                       l231 213A  
                                     l215 0682                                       l207 05F8  
                                     l216 064C                                       l218 06B0  
                                     l500 1C8A                                       l172 06EA  
                                     l173 043C                                       l510 24BA  
                                     l502 1CA0                                       l190 04C2  
                                     l182 0484                                       l511 24C4  
                                     l191 04CE                                       l175 0448  
                                     l192 04DA                                       l193 051A  
                                     l177 0460                                       l194 060C  
                                     l186 04A8                                       l611 2970  
                                     l195 0528                                       l187 0502  
                                     l524 2586                                       l508 24D4  
                                     l516 247C                                       l612 2948  
                                     l196 0570                                       l188 04B6  
                                     l525 254A                                       l509 24A0  
                                     l517 2448                                       l621 295C  
                                     l613 2952                                       l542 2572  
                                     l534 255E                                       l526 2554  
                                     l518 2462                                       l622 2966  
                                     l543 257C                                       l535 2568  
                                     l519 246C                                       l632 2C32  
                                     l553 25DC                                       l633 2C2A  
                                     l554 25A0                                       l571 25C8  
                                     l563 25B4                                       l555 25AA  
                                     l572 25D2                                       l564 25BE  
                                     l492 1C14                                       l637 2C2E  
                                     l495 1C60                                       l760 27F4  
                                     l489 1C06                                       l499 1C72  
                                     l771 291C                                       l772 2940  
                                     l773 293E                                       l758 27CE  
                                     l981 2AA6                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                                       _exp 0982  
                                     _log 1370                                       _pow 10AE  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                       ?_CalcSynthRegParams 0099  
          ?_InitSystemApplicationManagers 0001                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                                      l2000 13B4  
                                    l1140 23C8                                      l1061 26F8  
                                    l1134 23CC                                      l2006 1B06  
                                    l1054 2708                                      l1135 238E  
                                    l2007 1A86                                      l1127 1E1E  
                                    l1304 2500                                      l1080 2B96  
                                    l1137 2392                                      l1305 2514  
                                    l1057 26E8                                      l1081 2B8A  
                                    l1138 2396                                      l1066 240E  
                                    l1250 26A6                                      l1139 239A  
                                    l1075 23FE                                      l1083 2B90  
                                    l1251 26BE                                      l1069 23EE  
                                    l1253 26D0                                      l1270 0D74  
                                    l1511 1CCC                                      l1271 0DD6  
                                    l1512 1CC2                                      l1280 0DA4  
                                    l1601 2B76                                      l1514 1D00  
                                    l1515 1CEA                                      l1611 15E0  
                                    l1283 0E2C                                      l1620 1670  
                                    l1700 2610                                      l1276 0E04  
                                    l1517 1D28                                      l1381 20E6  
                                    l1613 1658                                      l1701 2608  
                                    l1277 0D7A                                      l1269 0D5A  
                                    l1518 1D1E                                      l1542 0F54  
                                    l1382 20DA                                      l1622 1698  
                                    l1614 1648                                      l1710 2858  
                                    l1551 0FE4                                      l1607 289C  
                                    l1711 2850                                      l1287 0E78  
                                    l1279 0DC2                                      l1704 2630  
                                    l1288 0ED2                                      l1705 263A  
                                    l1289 0E7E                                      l1570 1088  
                                    l1546 0F7E                                      l1714 2870  
                                    l1619 167C                                      l1715 287A  
                                    l1651 2098                                      l1492 2996  
                                    l1556 0FDA                                      l1740 119A  
                                    l1724 2AD8                                      l1652 20A6  
                                    l1565 1018                                      l1557 0FD0  
                                    l1741 1178                                      l1661 2252  
                                    l1725 2AC8                                      l1566 100E  
                                    l1590 16D4                                      l1742 1220  
                                    l1662 2260                                      l1575 17CA  
                                    l1583 1FD6                                      l1647 2064  
                                    l1568 103C                                      l1592 16FC  
                                    l1584 2006                                      l1736 10F8  
                                    l1648 2058                                      l1577 17F2  
                                    l1569 1058                                      l1593 172E  
                                    l1737 10E8                                      l1657 222A  
                                    l1578 1830                                      l1594 173E  
                                    l1658 221E                                      l1579 1856  
                                    l1739 1110                                      l1668 2342  
                                    l1596 1756                                      l1940 0B40  
                                    l1669 2336                                      l1597 1766  
                                    l1934 099C                                      l1960 1B82  
                                    l1936 09D6                                      l5153 1C20  
                                    l1945 18C6                                      l1937 0A10  
                                    l1954 1F3E                                      l1946 18B8  
                                    l1962 1BB4                                      l1938 0A40  
                                    l1963 1BA8                                      l1939 0B6A  
                                    l1971 2B0A                                      l1891 0C70  
                                    l1875 0BB8                                      l1948 18E0  
                                    l1892 0CDC                                      l5157 1C2E  
                                    l1949 195C                                      l1981 2B30  
                                    l1885 0C34                                      l1877 0BD0  
                                    l1958 1B38                                      l1894 0D00  
                                    l1886 0C44                                      l1895 0D3C  
                                    l1879 0C24                                      l1976 2BE2  
                                    l1888 0C5E                                      l1986 2C00  
                                    l6155 2032                                      l1899 2CB0  
                                    l7117 0B40                                      l1998 1390  
                                    l6183 2AC8                                      ?_exp 00AC  
                                    l6277 290A                                      ?_log 00A5  
                                    l5497 22DC                                      l6709 1E0E  
                                    l6727 1E56                                      l6773 0E30  
                                    l6941 227A                                      ?_pow 00B5  
                                    STR_1 7FD9                                      STR_2 7FD9  
                                    STR_3 7F9C                                      STR_4 7FD9  
                                    STR_5 7FD9                                      STR_6 7FF9  
                                    STR_7 7FD9                                      STR_8 7FCE  
                                    STR_9 7FD9                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u5108 2C68                                      u4350 23C0  
                                    u6200 1D32                                      u7000 285C  
                                    u5090 2C66                                      u4355 23B6  
                                    u7030 1F66                                      u4800 1C7A  
                                    u7040 2166                                      u6160 1CB4  
                                    u7050 219A                                      u6250 2B2C  
                                    u6410 0C0A                                      u4740 1BFC  
                                    u7205 0356                                      u4830 1C96  
                                    u7038 1F68                                      u6270 2AFC  
                                    u7047 215C                                      u6511 0F12  
                                    u7215 0390                                      u7320 18D2  
                                    u7160 0E5C                                      u6360 0BC0  
                                    u7057 2190                                      u6521 0F26  
                                    u7225 03DE                                      u6610 0FAE  
                                    u7090 1E56                                      u7250 2068  
                                    u4780 1C54                                      u7180 0EDA  
                                    u6550 0F46                                      u7190 0EF2  
                                    u6390 0BFA                                      u7430 1306  
                                    u7360 1B58                                      u7280 222E  
                                    u6721 17B2                                      u8217 2292  
                                    u6650 0FEC                                      u8227 22A2  
                                    u6580 0F70                                      u6900 15FE  
                                    u6741 17DA                                      u8237 22B2  
                                    u7550 0A1A                                      u7470 1340  
                                    u8247 22C2                                      u6680 1020  
                                    u7368 1B5C                                      u7560 0A1C  
                                    u6905 15F6                                      u8257 158E  
                                    u7650 115E                                      u7810 0562  
                                    u8267 2302                                      u6771 16BC  
                                    u6940 1682                                      u8277 231C  
                                    u6791 16E4                                      u6881 15C4  
                                    u6970 2614                                      u7690 14B6  
                                    u7870 05B6                                      u7928 06C4  
                                    u7929 06E2                                      u7890 05EA  
                ??_SwSpi_Set_Synth_Le_Pin 0019                                      _WPUB 000F61  
                           _EUSART1_Write 2908                   ??_InitAdcApplicationMgr 0018  
                                    _main 2694                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 2D08                           __end_of_DacInit 220C  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 00AC  
                                    log@x 00A5                 SampleSingleChannel@adcRes 027D  
                        ?_ClearMcuRunTime 0001                                      pow@x 00B5  
                                    pow@y 00B8                                      prodh 000FF4  
                                    prodl 000FF3              UpdateSynthFreq@regSynthArray 00AD  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                           _adcSampleMode 003D               __end_of_SampleSingleChannel 15B2  
                         GroupCommon@data 00C1                      ??_CalcSynthRegParams 009F  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                   __end_of_UART_Write_Text 21A2  
                         __end_of_GroupRx 272E                           __end_of_GroupTx 2440  
                            ___fttol@exp1 0086                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0082  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 2A5C  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 2CD6  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 10AE  
                                   STR_10 7FD9                                     STR_11 7FD9  
                                   STR_20 7EF4                                     STR_12 7EF4  
                                   STR_13 7F60                                     STR_21 7F49  
                                   STR_14 7FB0                                     STR_30 7D33  
                                   STR_22 7CF1                                     STR_15 7FF3  
                                   STR_31 7DAE                                     STR_23 7D71  
                                   STR_40 7FEC                                     STR_16 7F88  
                                   STR_24 7E4E                                     STR_32 7B61  
                                   STR_17 7FC2                                     STR_25 7C5C  
                                   STR_33 7AFC           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                                   STR_18 7F74                                     STR_34 7F13  
                                   STR_26 7C0D                                     STR_19 7FE3  
                                   STR_27 7F30                                     STR_35 7E20  
                                   STR_36 7DEB                                     STR_28 7CA7  
                                   STR_29 7E7C                                     STR_37 7BB7  
                                   STR_38 7EA9                                     STR_39 7ECF  
                         __end_of___ftdiv 1888                           __end_of___ftneg 2B84  
                         __end_of___lldiv 20B8                           __end_of___ftmul 17A0  
                                   _T0CON 000FD5                           __end_of___llmod 2272  
                         __end_of___ftsub 28C6                           __end_of___fttol 16AA  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwdiv 2644  
                         __end_of___lwmod 2884                                     i2l711 007A  
                                   i2l713 0086                                     i2l706 005E  
                                   i2l715 0090                                     i2l708 006A  
                                   i2l783 2A64                                     i2l784 2A88  
                                   i2l777 29E6                                     i2l937 1EB4  
                                   i2l778 29E2                                     i2l938 1ED6  
                                   i2l939 1EF8                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                     _SWSPI_DAC_send_bits 2498         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                          ?_PrintHelpScreen 0001  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1E84  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 29BA  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 1F16  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0030                   __end_of_PIN_MANAGER_IOC 2D10  
                                   _make8 238C                           __end_of_dpowers 7ABF  
          __size_of_SWSPI_Synth_send_bits 0058                                     _count 0150  
                                   _floor 1888                                     _ldexp 1B1E  
                                   _frexp 1F16                                     _errno 014C  
           __end_of_SWSPI_Synth_send_bits 2498                           __end_of_isalpha 2B12  
                         __end_of_isdigit 2BEA                                     _group 00D0  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                           ??_GroupCommon 0031                           __end_of_isspace 2B38  
                          ?_EUSART1_Write 0001                           __end_of_isupper 2C08  
                                   pclath 000FFA                                     tablat 000FF5  
                       ??_UpdateSynthFreq 0031                                     pow@yi 00C2  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                           __end_of_sprintf 0F00  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 2CB4  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000                               exp@exponent 00B2  
                    ?_SWSPI_DAC_send_bits 001A                        __size_ofi2___lwmod 0042  
                             ldexp@newexp 00A8                   __end_of_SWSPI_send_word 1CA4  
                             _BlinkOkLeds 22D2                           __initialization 1D52  
                             log@exponent 00A8                __end_of_EUSART1_Initialize 2A28  
                            __end_of_main 26E2               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0031                             ___fttol@sign1 0081  
                      _TimerKeepAliveFlag 00D5                             __activetblptr 000002  
              ?_SendUartSystemInitMessage 0001                              _writeAddress 0042  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 2D0C  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 0099                                    ?_ldexp 00A5  
                                  ?_frexp 0018                          __end_of___altoft 2130  
                        ___llmod@dividend 0025                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002A                                    _EECON2 000FA7  
                           ?_readUartByte 0001                          __end_of___awtoft 29BA  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 1D52  
                        __end_of___lltoft 238C                                    i2l1710 28DC  
                                  i2l1711 28D4                                    i2l1714 28F4  
                                  i2l1715 28FE                            __CFG_WDTEN$OFF 000000  
                                  _TABLAT 000FF5                                    _RCREG1 000FAE  
                        __end_of___lwtoft 2BCC                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 2C26  
                 __size_of_SwSpi_Data_Pin 0056                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                     __end_of_GroupCommon 2BA8                                 ??_GroupRx 0031  
                               ??_GroupTx 0031                            __CFG_XINST$OFF 000000  
                             GroupRx@data 00C1                               GroupTx@data 00C1  
                                  _cState 00D1                                    ___ftge 1FA6  
                                  ___lmul 24F0                 SWSPI_Synth_send_bits@data 001A  
                                  ___wmul 2B38                                 ??___ftadd 0093  
                          __CFG_STVREN$ON 000000                          ?_UART_Write_Text 0019  
                               ??___ftdiv 0060                                 ??___ftneg 0031  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 2D16                                 ??___llmod 002D  
                               ??___ftsub 0031                                 ??___fttol 007C  
                               ??___lwdiv 001C                                 ??___lwmod 0023  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                      AdcSingleSample@cType 0077  
                        ?_TMR0_Initialize 0001                                    _memset 2ABE  
                                  clear_0 1DB8                                    clear_1 1DC4  
                                  clear_2 1DD0                                    clear_3 1DDC  
                                  _strtol 0B78                                    floor@i 009C  
                   __end_of_SwSpi_Clk_Pin 25F2                                    floor@x 0099  
                   ___ftmul@f3_as_product 0073                  SWSPI_DAC_send_bits@count 001B  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                          __end_of_testLeds 22D2  
                           ?_SetMcuSystem 0001         __end_of_SendUartSystemInitMessage 1A44  
                            __mediumconst 7A80                                 ??_isspace 0018  
                       __end_ofi2___lwmod 2908                                    tblptrh 000FF7  
                               ??_isupper 0018                                    tblptrl 000FF6  
                                  tblptru 000FF8                  ADC_GetConversion@channel 001C  
                          ??_readUartByte 00C4                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0044  
                        ?_PIN_MANAGER_IOC 0001                                 ??_sprintf 002A  
                         _eusart1RxBuffer 0100                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                         _eusart1TxBuffer 0200                          __end_ofexp@coeff 7AE1  
                       _SYSTEM_Initialize 2C42                          __end_oflog@coeff 7AFC  
                              __accesstop 0060                   __end_of__initialization 1DE2  
                              ___altoft@c 0020                             ZeroArray@size 0022  
             CalcSynthRegParams@inputFreq 009B                                ___ftadd@f1 008D  
                              ___ftadd@f2 0090                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 00A2                             ___rparam_used 000001  
                              ___ftdiv@f1 002A                                ___ftdiv@f2 002D  
                              ___ftdiv@f3 0064                                ___ftneg@f1 008A  
                              ___awtoft@c 0087                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0021  
                              ___ftsub@f1 0099                                ___ftsub@f2 009C  
                              ___fttol@f1 0078                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 2D00  
                            __pidataBANK1 2CD6                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 23E8                             __end_of_floor 196A  
                           __end_of_ldexp 1BEC                             __end_of_frexp 1FA6  
                  _SwSpi_Set_Synth_Le_Pin 2944                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 27FE                              ??_MEMORY_ISR 0001  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                     TMR0_ISR@CountCallBack 0035  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                        _keepAliveSignalLed 2C5C  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 2A8E  
                __size_of_AdcSingleSample 0142                                   ??_make8 001D  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 00AA                                   ??_frexp 001D  
               __end_of_SYSTEM_Initialize 2C5C                             _eusart1RxHead 003A  
                     PrintHelpScreen@dest 0069                             _eusart1TxHead 003C  
                           _eusart1RxTail 0039                                __pbssBANK0 00C8  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                             _GroupCommon 2B84                             _eusart1TxTail 003B  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00DA  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 7ABF  
                              _channelNum 0037                                __pnvCOMRAM 0046  
          __size_of_InitAdcApplicationMgr 0006             __end_of_InitAdcApplicationMgr 2CFC  
                      __end_of_MEMORY_ISR 2D14           ??_InitSystemApplicationManagers 002A  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
        __end_of_TMR0_SetInterruptHandler 2CF6                                   ?___lmul 0018  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 2C26                                 ?___altoft 0020  
                                 ?_memset 0018                            ___lmul@product 0020  
                               ?___awtoft 0087                                 ?___ftpack 0018  
                               ?___lltoft 0020                   __size_of_ADC_Initialize 0016  
                               ?___lwtoft 0020                                   ?_strtol 0024  
                         _UpdateSynthFreq 2644                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                           readUartByte@idx 01EC  
                 SampleSingleChannel@dest 0246                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 21A2  
                   GetIntFromUartData@idx 0073                            _SwSpi_Data_Pin 2546  
                           _SetMcuRunTime 27FE                        _GetIntFromUartData 1DF0  
                         __CFG_PWRTEN$OFF 000000                                   _GroupRx 26E2  
                                 _GroupTx 23E8                                   __Hparam 0000  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
             __size_of_CalcSynthRegParams 0354                                 ?_testLeds 0001  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 0F00  
                                 ___ftdiv 17A0                      __end_of_readUartByte 0720  
                                 ___ftneg 2B5E                                   ___lldiv 2036  
                         __size_of___wmul 0026                                   ___ftmul 16AA  
                                 ___llmod 220C                                   ___ftsub 2884  
                                 ___fttol 15B2                                   ___lwdiv 25F2  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 2842  
                              ??___altoft 0024                SWSPI_Synth_send_bits@count 001B  
                   _mcuRunTimeIn5SecTicks 0148                                   _crcCalc 00CD  
                                 _channel 00D3                                   __pcinit 1D52  
                              ??___awtoft 0030                                ??___ftpack 001D  
                       __end_of_eval_poly 1B1E                           __size_of_memset 002C  
                                 __ramtop 0600              __size_of_SampleSingleChannel 0118  
                              ??___lltoft 0024                                   __ptext0 2694  
                                 __ptext1 0434                                   __ptext2 2776  
                                 __ptext3 2B84                                   __ptext4 26E2  
                                 __ptext5 23E8                                   __ptext6 2644  
                                 __ptext7 00E0                                   __ptext8 122E  
                                 __ptext9 2036                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                           __size_of_strtol 01D6  
                                 _dpowers 7AB5                     _OSCILLATOR_Initialize 2CC8  
                                 _isalpha 2AEA                              __size_of_exp 01F6  
                            __size_of_log 012A                                   _isdigit 2BCC  
                            __size_of_pow 0180               ??_SendUartSystemInitMessage 002B  
                      _EUSART1_Initialize 29F2                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 2B12                                   _isupper 2BEA  
                   AdcSingleSample@retNum 0078                                   _request 00CF  
                    ??_GetIntFromUartData 002E                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                                   _sprintf 0D4E  
                  __end_of_SwSpi_Data_Pin 259C                                   _toupper 2CA0  
                    end_of_initialization 1DE2                                   exp@sign 00B4  
                     ?_EUSART1_Initialize 0001                     _SWSPI_Synth_send_bits 2440  
                __size_of_PrintHelpScreen 0262                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 7A80  
                       ??_AdcSingleSample 0030                           ___lldiv@divisor 001C  
                              _numSamples 014E                      __end_of_SetMcuSystem 2CEC  
                                 pow@sign 00C1                           ___lldiv@counter 0024  
                       readUartByte@chRec 01EE                      UpdateSynthFreq@cType 0001  
                              ??_testLeds 0018                      SWSPI_send_word@datac 0026  
                              _rxMsgQueue 01A6                                   postdec1 000FE5  
                                 postdec2 000FDD                __end_of_PLL_INIT_REGISTERS 7AB5  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 2776  
                             testLeds@idx 0019                   __end_of_UpdateSynthFreq 2694  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 2CA0  
  __size_of_InitSystemApplicationManagers 0016             _InitSystemApplicationManagers 2C8A  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 2CEC  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 2C42  
                            strtol@endptr 0026                      ?_InitRxMessageParams 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
             __end_of_SWSPI_DAC_send_bits 24F0                                 i2___lwmod 28C6  
           SendUartSystemInitMessage@dest 0069                               ___ftdiv@exp 0067  
                            _EUSART1_Read 27BA                 _SendUartSystemInitMessage 196A  
                             ___ftmul@exp 0072                           _synthCalcParams 0128  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                              _needToSample 00D4  
            __end_of_INTERRUPT_Initialize 2D08                            __end_of___ftge 2036  
                          __end_of___lmul 2546                        GroupCommon@request 00C3  
                          __end_of___wmul 2B5E                             __pidataCOMRAM 2CFC  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 2C74  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 2AEA  
                              floor@expon 009F                  __size_of_UART_Write_Text 0072  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 0D4E  
                     start_initialization 1D52                                eval_poly@d 009C  
                              eval_poly@n 009E                                eval_poly@x 0099  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 00A5           __size_of_PIN_MANAGER_Initialize 0048  
                   ??_InitRxMessageParams 0024                               __end_of_exp 0B78  
                             __end_of_log 149A                               __end_of_pow 122E  
                  ?_SWSPI_Synth_send_bits 001A                                ?i2___lwmod 0001  
                         ??_SetMcuRunTime 002E                              ?_GroupCommon 00C1  
                   __end_of_EUSART1_Write 2944                    __size_of_PLLInitialize 0002  
                              frexp@value 0018                           ___llmod@divisor 0029  
                         ___llmod@counter 002D                  __size_of_PIN_MANAGER_IOC 0004  
                   __size_of_readUartByte 02EC                    __size_of_SwSpi_Clk_Pin 0056  
          __end_of_SwSpi_Set_Synth_Le_Pin 2980                         ??_PrintHelpScreen 002B  
                                ??___ftge 001E                                  ??___lmul 0020  
                                ??___wmul 001C                       AdcSingleSample@data 0075  
                    __size_of_BlinkOkLeds 005E                    __end_of_ADC_Initialize 2C8A  
                        ?_UpdateSynthFreq 00AB                               __pdataBANK0 00D8  
                             __pdataBANK1 01EF                   SWSPI_DAC_send_bits@data 001A  
                          GroupRx@request 00C3                                  ??_memset 001E  
                __size_of_SWSPI_send_word 00B8                                  ??_strtol 002A  
                          _eusart1RxCount 00D2                         __size_of___altoft 0078  
                               _ZeroArray 2C08                         __size_of___awtoft 003A  
                       __size_of___ftpack 00AE                            GroupTx@request 00C3  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 01BA  
                           __pcstackBANK2 0246                              _isalpha$2617 001C  
                       i2___lwmod@divisor 0003                         i2___lwmod@counter 0005  
                            _isdigit$2620 0019                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                              _readUartByte 0434  
                   __size_of_SetMcuSystem 000A                       _SampleSingleChannel 149A  
            __size_of_EUSART1_Receive_ISR 0032                               sprintf@flag 0060  
                             sprintf@prec 0061                     _TMR0_InterruptHandler 01FB  
                               __pnvBANK0 00DC                                 __pnvBANK1 01FB  
                __size_of_TMR0_StartTimer 0004                                  ?_GroupRx 00C1  
                                ?_GroupTx 00C1                          ___lwdiv@dividend 0018  
                  _PIN_MANAGER_Initialize 272E                     _InitAdcApplicationMgr 2CF6  
                               __pintcode 0008                             __pmediumconst 7A80  
                                ?___ftadd 008D                                  ?___ftdiv 002A  
                                ?___ftneg 008A                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0025  
                                ?___ftsub 0099                                  ?___fttol 0078  
                                ?___lwdiv 0018                                  ?___lwmod 001F  
                         ?_ADC_Initialize 0001                         __size_of_testLeds 0060  
                           _PLLInitialize 2D14               __size_of_keepAliveSignalLed 0018  
                    ?_SampleSingleChannel 0001              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 259C  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1A44                           _TimerOneSecFlag 00D7  
                                ?_isspace 0001                           _AdcSingleSample 122E  
                            _SetMcuSystem 2CE2                                  ?_isupper 0001  
           UpdateSynthFreq@insertFraqData 00BD                          ___lwdiv@quotient 001D  
                          __size_of_make8 005C                                  ?_sprintf 0024  
                          __size_of_floor 00E2                            __size_of_ldexp 00CE  
                          __size_of_frexp 0090                                  ?_toupper 0001  
                             ??i2___lwmod 0005                         ??_UART_Write_Text 001B  
                    _INTERRUPT_Initialize 2D04                         ??_TMR0_Initialize 001A  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                                  _PIE1bits 000F9D  
              __end_of_CalcSynthRegParams 0434                                  _PIE2bits 000FA0  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                                i2u505_40 28E0                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                 _rxMsgData 0192  
                        readUartByte@dest 01BA                       UpdateSynthFreq@data 00AB  
                     SWSPI_send_word@data 0021                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 1E84                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                     ??_SampleSingleChannel 00C6  
      __size_of_SendUartSystemInitMessage 00DA                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                      __end_of_channelArr 7AC3                          ??_SwSpi_Data_Pin 0019  
                              ?_eval_poly 0099                        _PLL_INIT_REGISTERS 7A81  
                            _isspace$2623 0019                         ??_SWSPI_send_word 0026  
             __size_of_GetIntFromUartData 0094                         ___lmul@multiplier 0018  
                             _INTCON2bits 000FF1                                 copy_data0 1D66  
                               copy_data1 1D86                                 copy_data2 1DA6  
                   ?_INTERRUPT_Initialize 0001                          __size_of_DacInit 006A  
                _SampleSingleChannel$2943 0278                     EUSART1_Read@readValue 0019  
                    __size_of_GroupCommon 0024                                 frexp@eptr 001B  
                              _EECON1bits 000FA6                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                          __size_of_GroupRx 004C  
                        __size_of_GroupTx 0058                               _readAddress 00D8  
                                __Lrparam 0000                         _ADC_GetConversion 2A8E  
                      __CFG_BOREN$SBORDIS 000000                           _ClearMcuRunTime 2CB4  
                       __CFG_P2BMX$PORTD2 000000                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0026  
                        __size_of___lldiv 0082                                  ___altoft 20B8  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwdiv 0052  
                 __end_of_AdcSingleSample 1370                          __size_of___lwmod 0042  
                                ___awtoft 2980                                  ___ftpack 1CA4  
                        _numOfReadSamples 003E                                  ___lltoft 2330  
                                ___lwtoft 2BA8                               ??_ZeroArray 0024  
              CalcSynthRegParams@regArray 0099                       ??_ADC_GetConversion 001A  
                                _exp$2946 00AF                              _isupper$2626 0019  
                              sprintf@val 0066                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                          __size_of_isalpha 0028  
                                _crcGiven 00CC                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 001B                           ___lwdiv@divisor 001A  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                         ___lwdiv@counter 001C                                  __ptext10 1DF0  
                                __ptext11 0B78                                  __ptext20 2272  
                                __ptext12 2CA0                                  __ptext21 0720  
                                __ptext13 2B12                                  __ptext30 2D04  
                                __ptext22 27BA                                  __ptext14 2BCC  
                                __ptext31 29F2                                  __ptext23 2C5C  
                                __ptext15 2AEA                                  __ptext40 10AE  
                                __ptext32 2C74                                  __ptext24 2CE2  
                                __ptext16 2BEA                                  __ptext41 1370  
                                __ptext33 27FE                                  __ptext25 2C42  
                                __ptext17 24F0                                  __ptext50 2B38  
                                __ptext42 0982                                  __ptext34 220C  
                                __ptext26 2A28                                  __ptext18 2C08  
                                __ptext51 16AA                                  __ptext43 1B1E  
                                __ptext35 196A                                  __ptext27 2CEC  
                                __ptext19 2ABE                                  __ptext60 2130  
                                __ptext52 2884                                  __ptext44 1888  
                                __ptext36 149A                                  __ptext28 272E  
                                __ptext61 2908                                  __ptext53 0F00  
                                __ptext45 1F16                                  __ptext37 0D4E  
                                __ptext29 2CC8                                  __ptext70 2944  
                                __ptext62 2A8E                                  __ptext54 2B5E  
                                __ptext46 15B2                                  __ptext38 2842  
                                __ptext71 2C26                                  __ptext63 2C8A  
                                __ptext55 17A0                                  __ptext47 1FA6  
                                __ptext39 25F2                                  __ptext80 28C6  
                                __ptext72 2440                                  __ptext64 2D08  
                                __ptext56 2980                                  __ptext48 20B8  
                                __ptext81 2D0C                                  __ptext73 2498  
                                __ptext65 2D14                                  __ptext57 2330  
                                __ptext49 1A44                                  __ptext82 2D10  
                                __ptext74 2546                                  __ptext66 2CF6  
                                __ptext58 2BA8                                  __ptext83 29BA  
                                __ptext75 259C                                  __ptext67 21A2  
                                __ptext59 1CA4                                  __ptext84 2A5C  
                                __ptext76 2CB4                                  __ptext68 1BEC  
                                __ptext85 0000                                  __ptext77 22D2  
                                __ptext69 238C                                  __ptext79 1E84  
                        __size_of_isupper 001E              SWSPI_Synth_send_bits@phrType 001C  
                                _pow$2944 00BB                                  _pow$2945 00BE  
                     GetIntFromUartData@c 0072                           _PrintHelpScreen 0720  
                        __size_of_sprintf 01B2                          __size_of_toupper 0014  
                     UART_Write_Text@text 0019                             __size_of_main 004E  
                                _msgCount 00CB              _TMR0_DefaultInterruptHandler 000000  
               __end_of_ADC_GetConversion 2ABE              __size_of_SWSPI_DAC_send_bits 0058  
                      SWSPI_send_word@idx 0027                               _groupsArray 01EF  
                         ??_PLLInitialize 0018                                  _testLeds 2272  
                                int$flags 0048                                strtol@base 0028  
                              strtol@sign 0060        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                           ??_SwSpi_Clk_Pin 0019  
                     _EUSART1_Receive_ISR 2A5C               __end_of_InitRxMessageParams 27BA  
                                exp@coeff 7AC3                                _MEMORY_ISR 2D10  
                                log@coeff 7AE1                    SWSPI_send_word@phrType 0029  
                              _INTCONbits 000FF2                               ??_eval_poly 00A0  
                             _sampleArray 0152                               _sampleCount 00C8  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                                intlevel2 0000                                 sprintf@ap 0062  
                               sprintf@cp 0064                                 sprintf@sp 0024  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 2842  
                        ___lwmod@dividend 001F                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 2CC8                                _RCSTA1bits 000FAB  
                                isupper@c 001A              __end_of_EUSART1_Transmit_ISR 29F2  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                       _TimerSamplingFlag 00D6                             _isReWriteDone 00CA  
                    SwSpi_Clk_Pin@phrType 0019                     SwSpi_Data_Pin@phrType 0019  
                        ?_AdcSingleSample 0075                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                           _UART_Write_Text 2130  
                                sprintf@c 0068                                  sprintf@f 0026  
                        ___lldiv@quotient 0020                           ___lwmod@divisor 0021  
                         _TMR0_Initialize 2A28                   __end_of_PrintHelpScreen 0982  
                         ___lwmod@counter 0023                  __size_of_UpdateSynthFreq 0050  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2776  
                        UART_Write_Text@i 001D              GetIntFromUartData@dataRegArr 006A  
                       __CFG_FOSC$INTIO67 000000                           _PIN_MANAGER_IOC 2D0C  
              __size_of_ADC_GetConversion 0030  
